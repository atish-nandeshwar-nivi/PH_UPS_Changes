


IF EXISTS (SELECT TOP 1 1 FROM Sys.Tables WHERE Name = 'ZnodeMultifront')
BEGIN 
 IF EXISTS (SELECT TOP 1 1 FROM ZnodeMultifront where BuildVersion =   920  )
 BEGIN 
 PRINT 'Script is already executed....'
  SET NOEXEC ON 
 END 
END
ELSE 
BEGIN 
   SET NOEXEC ON
END 
INSERT INTO [dbo].[ZnodeMultifront] ( [VersionName], [Descriptions], [MajorVersion], [MinorVersion], [LowerVersion], [BuildVersion], [PatchIndex], [CreatedBy], 
[CreatedDate], [ModifiedBy], [ModifiedDate]) 
VALUES ( N'Znode_Multifront_9_2', N'Upgrade GA Release By 9.2',9,2,0,920,0,2, GETDATE(),2, GETDATE())
GO 
SET ANSI_NULLS ON
GO


IF NOT EXISTS (SELECT * FROM sys.tables where name = 'ZnodePortalApprovalType')
BEGIN
CREATE TABLE [dbo].[ZnodePortalApprovalType](
	[PortalApprovalTypeId] [int] IDENTITY(1,1) NOT NULL,
	[ApprovalTypeName] [nvarchar](500) NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[ModifiedBy] [int] NOT NULL,
	[ModifiedDate] [date] NOT NULL,
 CONSTRAINT [PK_ZnodePortalApprovalType] PRIMARY KEY CLUSTERED 
(
	[PortalApprovalTypeId] ASC
)
)

END
GO

IF NOT EXISTS (SELECT * FROM sys.tables where name = 'ZnodePortalApprovalLevel')
BEGIN

CREATE TABLE [dbo].[ZnodePortalApprovalLevel](
	[PortalApprovalLevelId] [int] IDENTITY(1,1) NOT NULL,
	[ApprovalLevelName] [varchar](500) NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[ModifiedBy] [int] NOT NULL,
	[ModifiedDate] [datetime] NOT NULL,
 CONSTRAINT [PK_ZnodePortalApprovalLevel] PRIMARY KEY CLUSTERED 
(
	[PortalApprovalLevelId] ASC
))

END
GO

IF NOT EXISTS (SELECT * FROM sys.tables where name = 'ZnodePortalApproval')
BEGIN

CREATE TABLE [dbo].[ZnodePortalApproval](
	[PortalApprovalId] [int] IDENTITY(1,1) NOT NULL,
	[EnableApprovalManagement] [bit] NOT NULL,
	[PortalApprovalTypeId] [int] NOT NULL,
	[PortalApprovalLevelId] [int] NOT NULL,
	[OrderLimit] [numeric](28, 8) NOT NULL,
	[PortalId] [int] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[ModifiedBy] [int] NOT NULL,
	[ModifiedDate] [datetime] NOT NULL,
 CONSTRAINT [PK_ZnodePortalApproval] PRIMARY KEY CLUSTERED 
(
	[PortalApprovalId] ASC
))
END
GO

IF NOT EXISTS (SELECT * FROM   sys.objects WHERE  type IN( 'F' ) and OBJECT_NAME(parent_object_id) = 'ZnodePortalApproval' and name ='FK_ZnodePortalApproval_ZnodePortalApprovalType')
BEGIN 
ALTER TABLE [dbo].[ZnodePortalApproval] 
    ADD CONSTRAINT FK_ZnodePortalApproval_ZnodePortalApprovalType FOREIGN KEY ([PortalApprovalTypeId]) REFERENCES [dbo].[ZnodePortalApprovalType] ([PortalApprovalTypeId])
END
GO

IF NOT EXISTS (SELECT * FROM   sys.objects WHERE  type IN( 'F' ) and OBJECT_NAME(parent_object_id) = 'ZnodePortalApproval' and name ='FK_ZnodePortalApproval_ZnodePortalApprovalLevel')
BEGIN 
ALTER TABLE [dbo].[ZnodePortalApproval] 
    ADD CONSTRAINT FK_ZnodePortalApproval_ZnodePortalApprovalLevel FOREIGN KEY ([PortalApprovalLevelId]) REFERENCES [dbo].[ZnodePortalApprovalLevel] ([PortalApprovalLevelId])
END
GO


IF NOT EXISTS (SELECT * FROM sys.tables where name = 'ZnodePortalPaymentGroup')
BEGIN
CREATE TABLE [dbo].[ZnodePortalPaymentGroup](
	[PortalPaymentGroupId] [int] IDENTITY(1,1) NOT NULL,
	[PaymentGroupCode] [nvarchar](500) NULL,
	[PortalApprovalId] [int] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[ModifiedBy] [int] NOT NULL,
	[ModifiedDate] [datetime] NOT NULL,
	[isActive] [bit] NULL,
 CONSTRAINT [PK_ZnodePortalPaymentGroup] PRIMARY KEY CLUSTERED 
(
	[PortalPaymentGroupId] ASC
))
END
GO

IF NOT EXISTS (SELECT * FROM   sys.objects WHERE  type IN( 'F' ) and OBJECT_NAME(parent_object_id) = 'ZnodePortalPaymentGroup' and name ='FK_ZnodePortalPaymentGroup_ZnodePortalApproval')
BEGIN 
ALTER TABLE [dbo].[ZnodePortalPaymentGroup] 
    ADD CONSTRAINT FK_ZnodePortalPaymentGroup_ZnodePortalApproval FOREIGN KEY ([PortalApprovalId]) REFERENCES [dbo].[ZnodePortalApproval] ([PortalApprovalId])
END
GO


IF NOT EXISTS (SELECT * FROM sys.tables where name = 'ZnodePortalPaymentApprovers')
BEGIN
CREATE TABLE [dbo].[ZnodePortalPaymentApprovers](
	[PortalPaymentApprovalId] [int] IDENTITY(1,1) NOT NULL,
	[PaymentSettingId] [int] NOT NULL,
	[PortalPaymentGroupId] [int] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[ModifiedBy] [int] NOT NULL,
	[ModifiedDate] [datetime] NOT NULL,
 CONSTRAINT [PK_ZnodePortalPaymentApprovers] PRIMARY KEY CLUSTERED 
(
	[PortalPaymentApprovalId] ASC
))
END
GO

IF NOT EXISTS (SELECT * FROM   sys.objects WHERE  type IN( 'F' ) and OBJECT_NAME(parent_object_id) = 'ZnodePortalPaymentApprovers' and name ='FK_ZnodePortalPaymentApprovers_ZnodePortalPaymentGroup')
BEGIN 
ALTER TABLE [dbo].[ZnodePortalPaymentApprovers] 
    ADD CONSTRAINT FK_ZnodePortalPaymentApprovers_ZnodePortalPaymentGroup FOREIGN KEY ([PortalPaymentGroupId]) REFERENCES [dbo].[ZnodePortalPaymentGroup] ([PortalPaymentGroupId])
END
GO

 IF NOT EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeUserApprovers' AND COLUMN_NAME = 'IsActive')
BEGIN 
ALTER TABLE [dbo].[ZnodeUserApprovers]
    ADD [IsActive] BIT CONSTRAINT [DF_ZnodeUserApprovers_IsActive] DEFAULT ((1)) NOT NULL;
END

GO
IF NOT EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeUserApprovers' AND COLUMN_NAME = 'PortalApprovalId')
BEGIN 
	ALTER TABLE [dbo].[ZnodeUserApprovers]
    ADD [PortalApprovalId] INT NULL
      
END
GO

IF NOT EXISTS (SELECT * FROM   sys.objects WHERE  type IN( 'F' ) and OBJECT_NAME(parent_object_id) = 'ZnodeUserApprovers' and name ='FK_ZnodeUserApprovers_ZnodePortalApproval')
BEGIN 
ALTER TABLE [dbo].[ZnodeUserApprovers] 
    ADD CONSTRAINT FK_ZnodeUserApprovers_ZnodePortalApproval FOREIGN KEY ([PortalApprovalId]) REFERENCES [dbo].[ZnodePortalApproval] ([PortalApprovalId])
END
GO
IF NOT EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeUserApprovers' AND COLUMN_NAME = 'PortalPaymentGroupId')
BEGIN 
	ALTER TABLE [dbo].[ZnodeUserApprovers]
    ADD [PortalPaymentGroupId] INT NULL
      
END
GO

IF NOT EXISTS (SELECT * FROM   sys.objects WHERE  type IN( 'F' ) and OBJECT_NAME(parent_object_id) = 'ZnodeUserApprovers' and name ='FK_ZnodeUserApprovers_ZnodePortalPaymentGroup')
BEGIN 
ALTER TABLE [dbo].[ZnodeUserApprovers] 
    ADD CONSTRAINT FK_ZnodeUserApprovers_ZnodePortalPaymentGroup FOREIGN KEY ([PortalPaymentGroupId]) REFERENCES [dbo].[ZnodePortalPaymentGroup] ([PortalPaymentGroupId])
END
GO
IF NOT EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeMediaConfiguration' AND COLUMN_NAME = 'CDNUrl')
BEGIN 
	ALTER TABLE [dbo].[ZnodeMediaConfiguration]
    ADD [CDNUrl] NVARCHAR(200) NULL
      
END
GO
IF NOT EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeAddress' AND COLUMN_NAME = 'EmailAddress')
BEGIN 
	ALTER TABLE [dbo].[ZnodeAddress]
    ADD [EmailAddress] VARCHAR(50) NULL
      
END
GO

IF NOT EXISTS (SELECT * FROM sys.tables where name = 'ZnodeOmsQuoteComment')
BEGIN
CREATE TABLE [dbo].[ZnodeOmsQuoteComment] (
    [OmsQuoteCommentId] INT            IDENTITY (1, 1) NOT NULL,
    [OmsQuoteId]        INT            NULL,
    [Comments]          NVARCHAR (MAX) NULL,
    [CreatedBy]         INT            NOT NULL,
    [CreatedDate]       DATETIME       NOT NULL,
    [ModifiedBy]        INT            NOT NULL,
    [ModifiedDate]      DATETIME       NOT NULL,
    CONSTRAINT [PK_ZnodeOmsQuoteComment] PRIMARY KEY CLUSTERED ([OmsQuoteCommentId] ASC),
    CONSTRAINT [FK_ZnodeOmsQuoteComment_ZnodeOmsQuote] FOREIGN KEY ([OmsQuoteId]) REFERENCES [dbo].[ZnodeOmsQuote] ([OmsQuoteId])
)
END

GO
IF NOT EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeOMSQuoteApproval' AND COLUMN_NAME = 'OmsQuoteCommentId')
BEGIN 
	ALTER TABLE [dbo].[ZnodeOMSQuoteApproval]
    ADD [OmsQuoteCommentId] INT NULL
      
END
GO

IF NOT EXISTS (SELECT * FROM   sys.objects WHERE  type IN( 'F' ) and OBJECT_NAME(parent_object_id) = 'ZnodeOMSQuoteApproval' and name ='FK_ZnodeOMSQuoteApproval_ZnodeOmsQuoteComment')
BEGIN 
ALTER TABLE [dbo].[ZnodeOMSQuoteApproval] 
    ADD CONSTRAINT FK_ZnodeOMSQuoteApproval_ZnodeOmsQuoteComment FOREIGN KEY ([OmsQuoteCommentId]) REFERENCES [dbo].[ZnodeOmsQuoteComment] ([OmsQuoteCommentId])
END
GO


IF NOT EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodePaymentSetting' AND COLUMN_NAME = 'IsOABRequired')
BEGIN 
	ALTER TABLE [dbo].[ZnodePaymentSetting]
    ADD [IsOABRequired] BIT CONSTRAINT [DF_ZnodePaymentSetting_IsOABRequired] DEFAULT ((0)) NOT NULL;
      
END
GO

IF  EXISTS (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeUserApprovers' AND COLUMN_NAME = 'UserId')
BEGIN 
	ALTER TABLE [dbo].[ZnodeUserApprovers] ALTER COLUMN UserId INT NULL;
END 
GO

IF NOT EXISTS (SELECT * FROM sys.tables where name = 'ZnodePageSetting')
BEGIN
CREATE TABLE [dbo].[ZnodePageSetting] (
    [PageSettingId] INT           IDENTITY (1, 1) NOT NULL,
    [PageName]      VARCHAR (300) NOT NULL,
    [PageValue]     INT           NOT NULL,
    [DisplayOrder]  INT           NOT NULL,
    [CreatedBy]     INT           NOT NULL,
    [CreatedDate]   DATETIME      NOT NULL,
    [ModifiedBy]    INT           NOT NULL,
    [ModifiedDate]  DATETIME      NOT NULL,
    CONSTRAINT [PK_ZnodePageSetting] PRIMARY KEY CLUSTERED ([PageSettingId] ASC)
)
END

GO
IF NOT EXISTS (SELECT * FROM sys.tables where name = 'ZnodePortalPageSetting')
BEGIN
CREATE TABLE [dbo].[ZnodePortalPageSetting] (
    [PortalPageSettingId] INT           IDENTITY (1, 1) NOT NULL,
    [PortalId]            INT           NOT NULL,
    [PageSettingId]       INT           NOT NULL,
    [PageDisplayName]     VARCHAR (300) NOT NULL,
    [DisplayOrder]        INT           NOT NULL,
    [CreatedBy]           INT           NOT NULL,
    [CreatedDate]         DATETIME      NOT NULL,
    [ModifiedBy]          INT           NOT NULL,
    [ModifiedDate]        DATETIME      NOT NULL,
    CONSTRAINT [PK_ZnodePortalPageSetting] PRIMARY KEY CLUSTERED ([PortalPageSettingId] ASC),
    CONSTRAINT [FK_ZnodePortalPageSetting_ZnodePageSetting] FOREIGN KEY ([PageSettingId]) REFERENCES [dbo].[ZnodePageSetting] ([PageSettingId]),
    CONSTRAINT [FK_ZnodePortalPageSetting_ZnodePortal] FOREIGN KEY ([PortalId]) REFERENCES [dbo].[ZnodePortal] ([PortalId])
)
END
GO

IF NOT EXISTS (SELECT * FROM sys.tables where name = 'ZnodeSortSetting')
BEGIN
CREATE TABLE [dbo].[ZnodeSortSetting] (
    [SortSettingId] INT           IDENTITY (1, 1) NOT NULL,
    [SortName]      VARCHAR (300) NOT NULL,
    [SortValue]     INT           NOT NULL,
    [DisplayOrder]  INT           NOT NULL,
    [CreatedBy]     INT           NOT NULL,
    [CreatedDate]   DATETIME      NOT NULL,
    [ModifiedBy]    INT           NOT NULL,
    [ModifiedDate]  DATETIME      NOT NULL,
    CONSTRAINT [PK_ZnodeSortSetting] PRIMARY KEY CLUSTERED ([SortSettingId] ASC)
)
END
GO
IF NOT EXISTS (SELECT * FROM sys.tables where name = 'ZnodePortalSortSetting')
BEGIN
CREATE TABLE [dbo].[ZnodePortalSortSetting] (
    [PortalSortSettingId] INT           IDENTITY (1, 1) NOT NULL,
    [PortalId]            INT           NOT NULL,
    [SortSettingId]       INT           NOT NULL,
    [SortDisplayName]     VARCHAR (300) NOT NULL,
    [DisplayOrder]        INT           NOT NULL,
    [CreatedBy]           INT           NOT NULL,
    [CreatedDate]         DATETIME      NOT NULL,
    [ModifiedBy]          INT           NOT NULL,
    [ModifiedDate]        DATETIME      NOT NULL,
    CONSTRAINT [PK_ZnodePortalSortSetting] PRIMARY KEY CLUSTERED ([PortalSortSettingId] ASC),
    CONSTRAINT [FK_ZnodePortalSortSetting_ZnodePortal] FOREIGN KEY ([PortalId]) REFERENCES [dbo].[ZnodePortal] ([PortalId]),
    CONSTRAINT [FK_ZnodePortalSortSetting_ZnodeSortSetting] FOREIGN KEY ([SortSettingId]) REFERENCES [dbo].[ZnodeSortSetting] ([SortSettingId])
)
END
GO
IF EXISTS (SELECT * FROM sys.views where name = 'View_GetMediaPathDetail')
	DROP VIEW View_GetMediaPathDetail
GO
CREATE VIEW [dbo].[View_GetMediaPathDetail]  
AS  
     SELECT MediaCategoryId,  
            MediaPathId,  
            [Folder],  
            [FileName],  
            Size,  
   Height,  
   Width,  
      Type,  
            [MediaType],  
            CreatedDate,  
            ModifiedDate,  
            MediaId,  
            Path,  
            MediaServerPath MediaServerPath,  
            MediaThumbnailPath MediaServerThumbnailPath,  
            FamilyCode,  
            CreatedBy,  
            [DisplayName] [DisplayName],  
            [Description] [ShortDescription]  
    
     FROM  
     (  
         SELECT Zmc.MediaCategoryId,  
                ZMPL.MediaPathId,  
                ZMPL.[PathName] [Folder],  
                zM.[FileName],  
                Zm.Size,  
    Zm.Height,  
    Zm.Width,  
    Zm.Type,  
                Zm.Type [MediaType],  
                CONVERT( DATE, zm.CreatedDate) CreatedDate,  
                CONVERT( DATE, zm.ModifiedDate) ModifiedDate,  
                Zm.MediaId,  
                zma.AttributeCode,  
                Zmav.AttributeValue,  
                ISNULL(ZMCF.CDNURL,ZMCF.URL)+ZMSM.ThumbnailFolderName+'\'+zM.Path MediaThumbnailPath,  
     ISNULL(ZMCF.CDNURL,ZMCF.URL)+zM.Path  MediaServerPath,  
    zM.Path,  
               zmafl.FamilyCode FamilyCode,  
                Zm.CreatedBy  
         FROM ZnodeMediaCategory ZMC  
              LEFT JOIN ZnodeMediaAttributeFamily zmafl ON(zmc.MediaAttributeFamilyId = zmafl.MediaAttributeFamilyId)  
     INNER JOIN ZnodeMediaPathLocale ZMPL ON(ZMC.MediaPathId = ZMPL.MediaPathId)  
              INNER JOIN ZnodeMedia zM ON(Zm.MediaId = Zmc.MediaId)  
        LEFT JOIN ZnodeMediaConfiguration ZMCF ON (ZMCF.MediaConfigurationId = ZM.MediaConfigurationId AND ZMCF.IsActive = 1)  
     LEFT JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMCF.MediaServerMasterId)  
              LEFT JOIN dbo.ZnodeMediaAttributeValue Zmav ON(zmav.MediaCategoryId = zmc.MediaCategoryId)  
              LEFT JOIN dbo.ZnodeMediaAttribute zma ON(zma.MediaAttributeId = Zmav.MediaAttributeId  
                                                       AND AttributeCode IN('DisplayName', 'Description'))    
      
     ) v PIVOT(MAX(AttributeValue) FOR AttributeCode IN([DisplayName],  
                                                        [Description])) PV;
GO
IF EXISTS (SELECT * FROM sys.views where name = 'View_MediaPathDetails')
	DROP VIEW View_MediaPathDetails
GO
CREATE View [dbo].[View_MediaPathDetails]   
AS   
SELECT ZM.MediaId  
,ZM.MediaConfigurationId  
,ISNULL(ZMC.CDNURL,ZMC.URL)+ZM.Path Path  
,ZM.FileName  
,ZM.Size  
,ZM.Height  
,ZM.Width  
,ZM.Length  
,ZM.Type  
,ZM.CreatedBy  
,ZM.CreatedDate  
,ZM.ModifiedBy  
,ZM.ModifiedDate  
FROM ZnodeMedia ZM   
LEFT JOIN ZnodeMediaConfiguration ZMC ON (ZMC.MediaConfigurationId = ZM.MediaConfigurationId)  
LEFT JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMC.MediaServerMasterId)
GO

IF EXISTS (SELECT TOP 1  1 FROM sys.Objects WHERE OBJECT_NAME(object_id) = 'Fn_GetMediaPathServer')
BEGIN
DROP FUNCTION dbo.Fn_GetMediaPathServer
END
GO
CREATE FUNCTION [dbo].[Fn_GetMediaPathServer]  
(@path VARCHAR(1000)  
  
)  
RETURNS VARCHAR(4000)  
AS  
     BEGIN  
         DECLARE @V_MediaServerThumbnailPath VARCHAR(4000);  
         DECLARE @V_MediaServerThumbnailPathWithMedia VARCHAR(4000);  
         SET @V_MediaServerThumbnailPath =  
         (  
            select ISNULL(ZMC.CDNURL,ZMC.URL) from ZnodeMediaConfiguration ZMC Inner join ZnodeMedia ZM ON ZMC.MediaConfigurationId = ZM.MediaConfigurationId  
            Inner join ZnodeMediaCategory ZMCT ON ZM.MediaId = ZMCT.MediaId  
            Inner join ZnodeMediaPath ZMP ON ZMCT.MediaPathId = ZMP.MediaPathId where ZMC.IsActive=1  
            and ZM.[Path] =  @path  
         );  
         --SET @V_MediaServerThumbnailPathWithMedia = SUBSTRING(  
         --                                                    (  
         --                                                        SELECT ',',  
         --                                                               @V_MediaServerThumbnailPath+item  
         --                                                        FROM dbo.Split(@path, ',') a  
         --                                                        FOR XML PATH('')  
         --                                                    ), 2, 4000);  
         RETURN CASE  
                    WHEN (@V_MediaServerThumbnailPath IS NULL  
                         OR RTRIM(LTRIM(@V_MediaServerThumbnailPath)) = '')  
                         --OR @V_MediaServerThumbnailPath = @V_MediaServerThumbnailPath  
                    THEN '/MediaFolder/no-image.png'  
                    ELSE @V_MediaServerThumbnailPath+@path  
                END;  
     
     END;
GO

IF EXISTS (SELECT TOP 1  1 FROM sys.Objects WHERE OBJECT_NAME(object_id) = 'Fn_GetMediaThumbnailMediaPath')
BEGIN
DROP FUNCTION dbo.Fn_GetMediaThumbnailMediaPath
END
GO
CREATE FUNCTION [dbo].[Fn_GetMediaThumbnailMediaPath]  
(@path VARCHAR(1000)  
)  
RETURNS VARCHAR(4000)  
AS  
     BEGIN  
         DECLARE @V_MediaServerThumbnailPath VARCHAR(4000);  
         DECLARE @V_MediaServerThumbnailPathWithMedia VARCHAR(4000);  
         SET @V_MediaServerThumbnailPath =  
         (  
             SELECT ISNULL(ZMC.CDNURL,ZMC.URL)+ZMSM.ThumbnailFolderName+'/'  
             FROM ZnodeMediaConfiguration ZMC   
    INNER JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMC.MediaServerMasterId)  
       WHERE IsActive = 1   
         );  
         SET @V_MediaServerThumbnailPathWithMedia = SUBSTRING(  
                                                             (  
                                                                 SELECT ',',  
                                                                        @V_MediaServerThumbnailPath+item  
                                                                 FROM dbo.Split(@path, ',') a  
                                                                 FOR XML PATH('')  
                                                             ), 2, 4000);  
         RETURN CASE  
                    WHEN @V_MediaServerThumbnailPathWithMedia IS NULL  
                         OR RTRIM(LTRIM(@V_MediaServerThumbnailPathWithMedia)) = ''  
                         OR @V_MediaServerThumbnailPath = @V_MediaServerThumbnailPathWithMedia  
                    THEN '/MediaFolder/no-image.png'  
                    ELSE @V_MediaServerThumbnailPathWithMedia  
                END;  
     END;
GO

IF EXISTS (SELECT TOP 1  1 FROM sys.Objects WHERE OBJECT_NAME(object_id) = 'Fn_GetServerThumbnailMediaPath')
BEGIN
DROP FUNCTION dbo.Fn_GetServerThumbnailMediaPath
END
GO

CREATE FUNCTION [dbo].[Fn_GetServerThumbnailMediaPath]()  
RETURNS VARCHAR(4000)  
AS  
     BEGIN  
         DECLARE @V_MediaServerThumbnailPath VARCHAR(4000);  
         DECLARE @V_MediaServerThumbnailPathWithMedia VARCHAR(4000);  
         SET @V_MediaServerThumbnailPath =  
         (  
             SELECT ISNULL(ZMC.CDNURL,ZMC.URL)+ZMSM.ThumbnailFolderName+'/'  
             FROM ZnodeMediaConfiguration ZMC   
    INNER JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMC.MediaServerMasterId)  
             WHERE IsActive = 1  
         );  
         SET @V_MediaServerThumbnailPathWithMedia = @V_MediaServerThumbnailPath  
         RETURN @V_MediaServerThumbnailPathWithMedia  
  
     END;
GO

IF EXISTS (SELECT TOP 1  1 FROM sys.Objects WHERE OBJECT_NAME(object_id) = 'Fn_GetThumbnailMediaPath')
BEGIN
DROP FUNCTION dbo.Fn_GetThumbnailMediaPath
END
GO

CREATE FUNCTION [dbo].[Fn_GetThumbnailMediaPath]  
(  
  @MediaId Varchar(1000)   
  ,@IsrequiredId BIT = 0   
)  
RETURNS VARCHAr(4000)  
AS  
BEGIN  
 -- Declare the return variable here  
    DECLARE @V_MediaServerThumbnailPath VARCHAr(4000)  
 SET @V_MediaServerThumbnailPath = (SELECT ISNULL(a.CDNURL,a.URL)+ThumbnailFolderName+'/' FROM ZnodeMediaConfiguration a INNER JOIN ZnodeMediaServerMaster b ON (a.MediaServerMasterId = b.MediaServerMasterId ) WHERE IsActive=1)  
   
 DECLARE @V_MediaDetails TABLE (MediaId INT , [Path] VARCHAr(300))  
  
 INSERT INTO @V_MediaDetails  
 SELECT MediaId , [Path]   
 FROM ZnodeMedia q   
 INNER JOIN  dbo.Split(@MediaId,',') a ON( q.MediaId = a.item)  
 ORDER BY a.id  
   
 SET  @V_MediaServerThumbnailPath = CASE WHEN @IsrequiredId = 1 THEN  SUBSTRING ((SELECT ',',@V_MediaServerThumbnailPath+[Path] FROM @V_MediaDetails  FOR XML PATH ('') ) ,2,4000) +'~'+SUBSTRING ((SELECT ','+CAST(MediaId AS VARCHAr(1000) )  FROM @V_MediaDetails  FOR XML PATH ('') ) ,2,4000) ELSE SUBSTRING ((SELECT ',',@V_MediaServerThumbnailPath+[Path] FROM @V_MediaDetails FOR XML PATH ('') ) ,2,4000)  END       
   
  
  
 RETURN ISNULL(@V_MediaServerThumbnailPath,CASE WHEN @IsrequiredId = 1 THEN '/MediaFolder/no-image.png~' ELSE '/MediaFolder/no-image.png' END )  
  
END

GO

IF EXISTS (SELECT TOP 1  1 FROM sys.Objects WHERE OBJECT_NAME(object_id) = 'FN_GetPublishProductPricingBySku')
BEGIN
DROP FUNCTION dbo.FN_GetPublishProductPricingBySku
END
GO
CREATE  FUNCTION  [dbo].[FN_GetPublishProductPricingBySku]  
(     
    @SKU              VARCHAR(MAX),  
    @PortalId         INT,  
    @currentUtcDate   VARCHAR(100), -- this date is required for the user date r  
    @UserId           INT          = 0, -- userid is optional   
    @PublishProductId TransferId READONLY
 )  
 RETURNS  @tbl_ProductPricingSkuOrder TABLE (sku nvarchar(200),RetailPrice numeric(28,6),SalesPrice numeric(28,6),TierPrice numeric(28,6),
						TierQuantity numeric(28,6),CurrencyCode varchar(200),CurrencySuffix varchar(2000),CultureCode varchar(2000), ExternalId NVARCHAR(2000))
AS   
   /*   
    --Summary: Retrive Price of product from pricelist  
    --Input Parameters:  
    --UserId, SKU(Comma separated multiple), PortalId  
    --Conditions :  
    --1. If userId is null then check for PriceList having sku associated to profile which is associated to Portal having  PortalId and  having higher Precedence and valid ActivationDate and ExpirationDate for PriceList  and SKU also.  
    --Unit Testing :   
    --EXEC Znode_GetPublishProductPricingBySku_2 @SKU = 'apple,apr234' , @PortalId = 34 , @currentUtcDate = '2016-09-17 00:00:00.000';  
    --2. If There is no any PriceList having given sku associated to profile  then check for    
    --PriceList associated portal having PortalId and having higher Precedence ActivationDate and ExpirationDate for PriceList and SKU also.  
    --Unit Testing :   
    --EXEC Znode_GetPublishProductPricingBySku_2 @SKU = 'apple,apr234' , @PortalId = 34 , @currentUtcDate = '2016-09-17 00:00:00.000';  
    --3. If userId is not null then check for PriceList having sku associated to User having UserId and having higher Precedence ActivationDate and ExpirationDate for PriceList and SKU also.  
    --4. If There is no any PriceList having given sku associated to user  then check for    
    --PriceList associated Account having UserId and having higher Precedence ActivationDate and ExpirationDate for PriceList and SKU also.  
    --5. If There is no any PriceList having given sku associated to account  then check for    
    --PriceList associated Profile having PortalId and having higher Precedence ActivationDate and ExpirationDate for PriceList and SKU also.  
    --6. If There is no any PriceList having given sku associated to Profile  then check for    
    --PriceList associated Portal having PortalId and having higher Precedence ActivationDate and ExpirationDate for PriceList and SKU also.  
    --7. If in each case Precedence is same then get PriceList according to higher PriceListId ActivationDate and ExpirationDate for PriceList and SKU also.  
    --8. Also get the Tier Price, Tier Quantity of given sku.  
    --Unit Testing     
    --Exec Znode_GetPublishProductPricingBySku  @SKU = 'Levi''s T-Shirt & Jeans - Bundle Product',@PortalId = 1, @currentUtcDate = '2016-07-31 00:00:00.000'  
 */  
      
     BEGIN  
      
    DECLARE @GetDate DATETIME = dbo.Fn_GetDate();  
             DECLARE @Tlb_SKU TABLE  
             (SKU        VARCHAR(100),  
              SequenceNo INT IDENTITY  
             );  
  
     DECLARE @DefaultLocaleId INT = dbo.FN_GETDEFAULTLocaleId()  
  
    IF @SKU = ''   
    BEGIN   
     INSERT INTO @Tlb_SKU(SKU)  
      SELECT (SELECT ''+SKU FOR XML PATH(''))   
     FROM ZnodePublishProductDetail a  
     INNER JOIN @PublishProductId b ON (b.Id = a.PublishProductId )  
     WHERE LocaleId = @DefaultLocaleId  
  
  
    END   
    ELSE   
    BEGIN  
      INSERT INTO @Tlb_SKU(SKU)  
                    SELECT Item  
                    FROM Dbo.split(@SKU, ',');  
       
  
    END   
  
             
             DECLARE @TLB_SKUPRICELIST TABLE  
             (SKU          VARCHAR(100),  
              RetailPrice  NUMERIC(28, 6),  
              SalesPrice   NUMERIC(28, 6),  
              PriceListId  INT,  
              TierPrice    NUMERIC(28, 6),  
              TierQuantity NUMERIC(28, 6),  
     ExternalId NVARCHAR(2000)  
             );  
             DECLARE @PriceListId INT, @PriceRoundOff INT;  
             SELECT @PriceRoundOff = CONVERT( INT, FeatureValues)  
             FROM ZnodeGlobalSetting  
             WHERE FeatureName = 'PriceRoundOff';  
    
             --Retrive portal wise pricelist    
             DECLARE @Tbl_PortalWisePriceList TABLE  
             (PriceListId    INT,  
              ActivationDate DATETIME,  
              ExpirationDate DATETIME NULL,  
              Precedence     INT,  
     SKU NVARCHAR(300)  
             );  
             --Retrive price for respective pricelist     
             DECLARE @Tbl_PriceListWisePrice TABLE  
             (  
      PriceListId    INT,  
      SKU            VARCHAR(300),  
      SalesPrice     NUMERIC(28, 6),  
      RetailPrice    NUMERIC(28, 6),  
      UomId          INT,  
      UnitSize       NUMERIC(28, 6),  
      ActivationDate DATETIME,  
      ExpirationDate DATETIME NULL,  
      TierPrice      NUMERIC(28, 6),  
      TierQuantity   NUMERIC(28, 6),  
      TierUomId      INT,  
      TierUnitSize   NUMERIC(28, 6),   
      ExternalId NVARCHAR(2000)  
             );  
    DECLARE @Tbl_SKUWisePriceList TABLE (PriceListId INT, SKU NVARCHAR(300))  
  
    insert into @Tbl_SKUWisePriceList(PriceListId,SKU)   
    SELECT  PriceListId,SKU from ZnodePrice where (SELECT ''+SKU FOR XML PATH('')) in (Select SKU from @Tlb_SKU )  
    Union  
    SELECT PriceListId,SKU  from ZnodePriceTier where (SELECT ''+SKU FOR XML PATH('')) in (Select SKU from @Tlb_SKU )  
      
    --1. If userId is null then check for PriceList having sku associated to profile which is associated to Portal having  PortalId and  having higher Precedence and valid ActivationDate and ExpirationDate for PriceList  and SKU also.  
            IF @UserId = 0  
                 BEGIN  
     INSERT INTO @Tbl_PortalWisePriceList( PriceListId, ActivationDate, ExpirationDate, Precedence,SKU )  
     SELECT a.PriceListId, ActivationDate, ISNULL(ExpirationDate, @GetDate), b.Precedence,tsw.SKU  
     FROM ZnodePriceList AS a INNER JOIN ZnodePriceListProfile AS b ON a.PriceListId = b.PriceListId INNER JOIN ZnodePortalProfile AS c  
      ON b.PortalProfileId = c.PortalProfileID AND  c.IsDefaultAnonymousProfile = 1 INNER JOIN ZnodePortalunit AS zupu ON a.CultureId = zupu.CultureId 
      inner join @Tbl_SKUWisePriceList tsw  ON a.PriceListId = tsw.PriceListId  
     WHERE @CurrentUtcDate BETWEEN a.ActivationDate AND ISNULL(a.ExpirationDate, @GetDate) AND c.PortalId = @PortalId  
     ORDER BY b.Precedence;  
    
      
                     --2. If There is no any PriceList having given sku associated to profile  then check for PriceList associated portal having PortalId and having higher Precedence ActivationDate and ExpirationDate for PriceList and SKU also.  
   IF Exists (Select top 1 1  FROM @Tbl_SKUWisePriceList tspl where NOT Exists (SELECT TOP 1 1 FROM @Tbl_PortalWisePriceList tpwl  
    WHERE tspl.SKU = tpwl.SKU))  
                         BEGIN  
       INSERT INTO @Tbl_PortalWisePriceList( PriceListId, ActivationDate, ExpirationDate, Precedence,SKU )  
       SELECT a.PriceListId, ActivationDate, ISNULL(ExpirationDate, @GetDate), b.Precedence,tsw.SKU  
       FROM ZnodePriceList AS a INNER JOIN ZnodePriceListPortal AS b ON a.PriceListId = b.PriceListId  
       INNER JOIN ZnodePortalunit AS zupu ON a.CultureId = zupu.CultureId   
       inner join @Tbl_SKUWisePriceList tsw  ON a.PriceListId = tsw.PriceListId  
       AND NOT EXISTS (Select TOP 1 1 FROM  @Tbl_PortalWisePriceList tpwl WHERE tpwl.SKU = tsw.SKU )  
       WHERE @CurrentUtcDate BETWEEN a.ActivationDate   
       AND ISNULL(a.ExpirationDate, @GetDate) AND b.PortalId = @PortalId  
       ORDER BY b.Precedence  
       ;  
       --Delete from @Tbl_SKUWisePriceList where PriceListId in (Select PriceListId from  @Tbl_PortalWisePriceList )  
        
                         END;  
                 END;  
                     --3. If userId is not null then check for PriceList having sku associated to User having UserId and having higher Precedence ActivationDate and ExpirationDate for PriceList and SKU also.  
             ELSE  
                 BEGIN  
       
                     INSERT INTO @Tbl_PortalWisePriceList (PriceListId, ActivationDate, ExpirationDate, Precedence,SKU )  
                            SELECT a.PriceListId, ActivationDate,ISNULL(ExpirationDate, @GetDate), b.Precedence,tsw.SKU  
                            FROM ZnodePriceList AS a INNER JOIN ZnodePriceListUser AS b ON a.PriceListId = b.PriceListId  
                                 INNER JOIN ZnodePortalunit zupu ON a.CultureId = zupu.CultureId AND zupu.PortalId = @PortalId  
         inner join @Tbl_SKUWisePriceList tsw  ON a.PriceListId = tsw.PriceListId  
         AND NOT EXISTS (Select TOP 1 1 FROM  @Tbl_PortalWisePriceList tpwl WHERE tpwl.SKU = tsw.SKU )  
                            WHERE @CurrentUtcDate BETWEEN a.ActivationDate AND ISNULL(a.ExpirationDate, @GetDate) AND b.UserID = @UserId  
       ORDER BY b.Precedence ;  
  
                --4. If There is no any PriceList having given sku associated to user  then check for PriceList associated Account having UserId and having higher Precedence ActivationDate and ExpirationDate for PriceList and SKU also.  
    IF Exists (Select top 1 1  FROM @Tbl_SKUWisePriceList tspl where NOT Exists (SELECT TOP 1 1 FROM @Tbl_PortalWisePriceList tpwl  
    WHERE tspl.SKU = tpwl.SKU))  
      BEGIN  
       INSERT INTO @Tbl_PortalWisePriceList( PriceListId, ActivationDate, ExpirationDate, Precedence,SKU )  
           SELECT a.PriceListId, ActivationDate, ISNULL(ExpirationDate, @GetDate), c.Precedence,tsw.SKU  
           FROM ZnodePriceList AS a INNER JOIN ZnodePriceListAccount AS c ON a.PriceListId = c.PriceListId  
          INNER JOIN ZnodeUser AS d ON c.Accountid = d.Accountid INNER JOIN ZnodePortalunit AS zupu ON a.CultureId = zupu.CultureId  
          AND zupu.PortalId = @PortalId  
          inner join @Tbl_SKUWisePriceList tsw  ON a.PriceListId = tsw.PriceListId  
          AND NOT EXISTS (Select TOP 1 1 FROM  @Tbl_PortalWisePriceList tpwl WHERE tpwl.SKU = tsw.SKU )  
           WHERE @CurrentUtcDate BETWEEN a.ActivationDate AND ISNULL(a.ExpirationDate, @GetDate) AND d.UserID = @UserId  
         ORDER BY c.Precedence  
      
       END;  
                     -- 5. If There is no any PriceList having given sku associated to account  then check for PriceList associated Profile having PortalId and having higher   Precedence ActivationDate and ExpirationDate for PriceList and SKU also.  
    IF Exists (Select top 1 1  FROM @Tbl_SKUWisePriceList tspl   
    where NOT Exists (SELECT TOP 1 1 FROM @Tbl_PortalWisePriceList tpwl  
    WHERE tspl.SKU = tpwl.SKU))  
  
                         BEGIN  
                             INSERT INTO @Tbl_PortalWisePriceList(PriceListId,ActivationDate,ExpirationDate,Precedence,SKU)  
                                    SELECT a.PriceListId, ActivationDate, ISNULL(ExpirationDate, @GetDate), b.Precedence,tsw.SKU  
                                    FROM ZnodePriceList AS a  
                                         INNER JOIN ZnodePriceListProfile AS b ON a.PriceListId = b.PriceListId   
           INNER JOIN ZnodePortalProfile AS c ON b.PortalProfileId = c.PortalProfileId  AND c.PortalId = @PortalId   
                                         INNER JOIN dbo.ZnodeUserProfile zup ON c.ProfileId = zup.ProfileId AND IsDefault = 1  
                                         INNER JOIN ZnodePortalunit zupu ON a.CultureId = zupu.CultureId AND zupu.PortalId = @PortalId  
           inner join @Tbl_SKUWisePriceList tsw  ON a.PriceListId = tsw.PriceListId  
           AND NOT EXISTS (Select TOP 1 1 FROM  @Tbl_PortalWisePriceList tpwl WHERE tpwl.SKU = tsw.SKU )  
                                    WHERE @CurrentUtcDate BETWEEN a.ActivationDate AND ISNULL(a.ExpirationDate, @GetDate) AND zup.UserId = @UserId;  
        
          END;  
                     
  
                     ---6. If There is no any PriceList having given sku associated to Profile  then check for priceList associated Portal having PortalId and having higher Precedence ActivationDate and ExpirationDate for PriceList and SKU also.  
                      IF Exists (Select top 1 1  FROM @Tbl_SKUWisePriceList tspl   
        where NOT Exists (SELECT TOP 1 1 FROM @Tbl_PortalWisePriceList tpwl  
    WHERE tspl.SKU = tpwl.SKU))  
  
                         BEGIN  
       INSERT INTO @Tbl_PortalWisePriceList( PriceListId, ActivationDate, ExpirationDate, Precedence,SKU )  
       SELECT a.PriceListId, ActivationDate, ISNULL(ExpirationDate, @GetDate), b.Precedence,tsw.SKU  
       FROM ZnodePriceList AS a INNER JOIN ZnodePriceListPortal AS b ON a.PriceListId = b.PriceListId  
        INNER JOIN ZnodePortalunit AS zupu ON a.CultureId = zupu.CultureId AND  zupu.PortalId = b.PortalId  
        inner join @Tbl_SKUWisePriceList tsw  ON a.PriceListId = tsw.PriceListId  
        AND NOT EXISTS (Select TOP 1 1 FROM  @Tbl_PortalWisePriceList tpwl WHERE tpwl.SKU = tsw.SKU )  
        WHERE @CurrentUtcDate BETWEEN a.ActivationDate AND ISNULL(a.ExpirationDate, @GetDate) AND b.PortalId = @PortalId  
           ORDER BY b.Precedence  
        ;  
        
                         END;  
         
  
                 END;  
     
             SET @PriceListId = 0;  
             -- Check Activation date and expiry date   
             IF EXISTS( SELECT TOP 1 1 FROM @Tbl_PortalWisePriceList)  
                 BEGIN  
      
                     -- Retrive pricelist wise price  
                   INSERT INTO @Tbl_PriceListWisePrice( PriceListId, SKU, SalesPrice, RetailPrice, UomId, UnitSize, ActivationDate, ExpirationDate, TierPrice, TierQuantity, TierUomId, TierUnitSize , ExternalId )  
       SELECT ZP.PriceListId, ZP.SKU, ZP.SalesPrice, ZP.RetailPrice, ZP.UomId, ZP.UnitSize, ISNULL(ZP.ActivationDate, @CurrentUtcDate), ISNULL(ZP.ExpirationDate, @GetDate), ZPT.Price, ZPT.Quantity, ZPT.UomId, ZPT.UnitSize, ZP.ExternalId  
       FROM [ZnodePrice] AS ZP   
       INNER JOIN @Tlb_SKU AS TSKU ON (SELECT ''+ZP.SKU FOR XML PATH ('')) = TSKU.SKU   
       LEFT OUTER JOIN ZnodePriceTier AS ZPT ON ZP.SKU = ZPT.SKU AND ZP.PriceListId = ZPT.PriceListId  
       WHERE ZP.PriceListId IN  
       (  
        SELECT TOP 1 PriceListId  
        FROM @Tbl_PortalWisePriceList AS TBPWPL  
        WHERE  TBPWPL.SKU = ZP.SKU  
        ORDER BY Precedence   
       );  
          
  
                     -- Check Activation date and expiry date   
                    INSERT INTO @TLB_SKUPRICELIST( PriceListId, SKU, RetailPrice, SalesPrice, TierPrice, TierQuantity, ExternalId )  
        SELECT DISTINCT  PriceListId, SKU, RetailPrice, SalesPrice, TierPrice, TierQuantity, ExternalId  
        FROM @Tbl_PriceListWisePrice  
        WHERE @currentUtcDate BETWEEN ActivationDate AND ISNULL(ExpirationDate, @GetDate);  
          
         
     INSERT INTO @TLB_SKUPRICELIST( PriceListId, SKU, RetailPrice, SalesPrice, TierPrice, TierQuantity, ExternalId )  
        SELECT PriceListId, SKU, RetailPrice, SalesPrice, TierPrice, TierQuantity, ExternalId  
        FROM @Tbl_PriceListWisePrice  
        WHERE SKU NOT IN(SELECT SKU FROM @TLB_SKUPRICELIST) and ActivationDate is null   
      
                 END;  
                     -- Retrive data as per precedance from ZnodePriceListPortal table    
       
             ELSE  
                 BEGIN  
                     SET @PriceListId =( SELECT TOP 1 PriceListId FROM @Tbl_PortalWisePriceList ORDER BY Precedence  );  
  
                     --Retrive pricelist wise price    
                     INSERT INTO @Tbl_PriceListWisePrice( PriceListId, SKU, SalesPrice, RetailPrice, UomId, UnitSize, ActivationDate, ExpirationDate, TierPrice, TierQuantity, TierUomId, TierUnitSize, ExternalId )  
      SELECT ZP.PriceListId, ZP.SKU, ZP.SalesPrice, ZP.RetailPrice, ZP.UomId, ZP.UnitSize, ISNULL(ZP.ActivationDate, @CurrentUtcDate),   
       ISNULL(ZP.ExpirationDate, @GetDate), ZPT.Price, ZPT.Quantity, ZPT.UomId, ZPT.UnitSize, zp.ExternalId  
      FROM [ZnodePrice] AS ZP INNER JOIN @Tlb_SKU AS TSKU ON ZP.SKU = TSKU.SKU LEFT OUTER JOIN ZnodePriceTier AS ZPT ON ZP.SKU = ZPT.SKU AND   
          ZP.PriceListId = ZPT.PriceListId WHERE ZP.PriceListId = @PriceListId;   
  
                     -- Check Activation date and expiry date   
     INSERT INTO @TLB_SKUPRICELIST( PriceListId, SKU, RetailPrice, SalesPrice, TierPrice, TierQuantity, ExternalId )  
     SELECT PriceListId, SKU, RetailPrice, SalesPrice, TierPrice, TierQuantity, ExternalId  
     FROM @Tbl_PriceListWisePrice WHERE @currentUtcDate BETWEEN ActivationDate AND ISNULL(ExpirationDate, @GetDate);  
       
     INSERT INTO @TLB_SKUPRICELIST( PriceListId, SKU, RetailPrice, SalesPrice, TierPrice, TierQuantity, ExternalId )  
     SELECT PriceListId, SKU, RetailPrice, SalesPrice, TierPrice, TierQuantity, ExternalId  
     FROM @Tbl_PriceListWisePrice  
     WHERE SKU NOT IN ( SELECT SKU FROM @TLB_SKUPRICELIST) and ActivationDate is null;  
  
                 END;  
INSERT INTO @tbl_ProductPricingSkuOrder
             SELECT DISTINCT SKU,  
                    ROUND(RetailPrice, @PriceRoundOff) AS RetailPrice,  
                    ROUND(SalesPrice, @PriceRoundOff) AS SalesPrice,  
                    NULL AS TierPrice,  
                   NULL AS TierQuantity,  
					ZCC.CurrencyCode  AS CurrencyCode,    
                    ZC.Symbol AS CurrencySuffix,  ZC.CultureCode, 
     TSPL.ExternalId  
             FROM @TLB_SKUPRICELIST AS TSPL  
                  INNER JOIN ZnodePriceList AS ZPL ON TSPL.PriceListId = ZPL.PriceListId  
                  INNER JOIN ZnodeCulture AS ZC ON ZPL.CultureId = ZC.CultureId    
				  LEFT JOIN ZnodeCurrency AS ZCC ON ZC.CurrencyId = ZCC.CurrencyId   
      ORDER BY TierQuantity ASC;  
        RETURN 
  END;
GO

GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_DeleteGlobalAttribute')
BEGIN 
	DROP PROCEDURE Znode_DeleteGlobalAttribute
END
GO
CREATE PROCEDURE [dbo].[Znode_DeleteGlobalAttribute](
       @GlobalAttributeId VARCHAR(300) = NULL ,
       @Status         INT OUT,
	   @GlobalAttributeIds TransferId READONLY, 
	   @IsForceFullyDelete BIT =0   )
AS 
    -----------------------------------------------------------------------------
    --Summary:  Remove GlobalAttribute still in used 
    --		   	
    --          
    --Unit Testing   
	--Begin Transaction 
		--DECLARE @Status INT  EXEC Znode_DeleteGlobalAttribute @GlobalAttributeId = '59,60,61,62' ,@Status=@Status OUT  SELECT @Status
		--select * from ZnodeGlobalAttributeValue where GlobalAttributeId in (59,60,61,62)
		--select * from ZnodeGlobalAttribute where AttributeCode in ( 'SpecValue','TempSettings','UPCcode', 'ratest') 	
	--Rollback Transaction 
    ----------------------------------------------------------------------------- 


     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             BEGIN TRAN A;
			 DECLARE @FinalCount INT =0 
             DECLARE @DeletdAttributeId TABLE (
                                              GlobalAttributeId INT
                                              );
            INSERT INTO @DeletdAttributeId
                    SELECT Item
                    FROM dbo.split ( @GlobalAttributeId , ','
                                   ) AS a 
					INNER JOIN ZnodeGlobalAttribute AS B ON ( CAST(a.item AS INT )  = b.GlobalAttributeId )
					Where 
					not exists(  Select 1 
					from ZnodeGlobalAttributeGroupMapper dd
					where dd.GlobalAttributeId =b.GlobalAttributeId)
					and ISNULL(b.IsSystemDefined,0) <> 1
             		AND @GlobalAttributeId <> ''
			 INSERT INTO  @DeletdAttributeId 
				 SELECT id 
                    FROM @GlobalAttributeIds AS a 
					INNER JOIN ZnodeGlobalAttribute AS B ON ( a.Id = b.GlobalAttributeId )
					AND ISNULL(b.IsSystemDefined,0) <> 1
			       
             DELETE FROM ZnodeGlobalAttributeLocale
             WHERE EXISTS ( SELECT 1
                            FROM @DeletdAttributeId AS sd
                            WHERE sd.GlobalAttributeId = ZnodeGlobalAttributeLocale.GlobalAttributeId
                          );
             DELETE FROM ZnodeGlobalAttributeValidation
             WHERE EXISTS ( SELECT 1
                            FROM @DeletdAttributeId AS sd
                            WHERE sd.GlobalAttributeId = ZnodeGlobalAttributeValidation.GlobalAttributeId
                          );

			 DELETE FROM ZnodeGlobalAttributeValueLocale 
             WHERE EXISTS ( SELECT 1
                            FROM @DeletdAttributeId AS sd Inner join ZnodeGlobalAttributeValue AS zpav ON sd.GlobalAttributeId=zpav.GlobalAttributeId
                            WHERE zpav.GlobalAttributeValueId = ZnodeGlobalAttributeValueLocale.GlobalAttributeValueId);

             DELETE FROM ZnodeGlobalAttributeValue
             WHERE EXISTS ( SELECT 1
                            FROM @DeletdAttributeId AS sd
                            WHERE sd.GlobalAttributeId = ZnodeGlobalAttributeValue.GlobalAttributeId
                          );
			 DELETE FROM ZnodeGlobalAttributeDefaultValueLocale
             WHERE EXISTS ( SELECT 1
                            FROM ZnodeGlobalAttributeDefaultValue
                            WHERE EXISTS ( SELECT 1
                                           FROM @DeletdAttributeId AS sd
                                           WHERE sd.GlobalAttributeId = ZnodeGlobalAttributeDefaultValue.GlobalAttributeId
                                         )
                                  AND
                                  ZnodeGlobalAttributeDefaultValueLocale.GlobalAttributeDefaultValueId = ZnodeGlobalAttributeDefaultValue.GlobalAttributeDefaultValueId
                          );
           
		    DELETE ZA FROM ZnodePortalGlobalAttributeValueLocale ZA  INNER JOIN ZnodePortalGlobalAttributeValue dg ON (dg.PortalGlobalAttributeValueId = ZA.PortalGlobalAttributeValueId) 
			 WHERE EXISTS ( SELECT 1
                                           FROM @DeletdAttributeId AS sd
                                           WHERE sd.GlobalAttributeId = dg.GlobalAttributeId
                                         )
			 DELETE FROM ZnodePortalGlobalAttributeValue 
			 WHERE EXISTS ( SELECT 1
                                           FROM @DeletdAttributeId AS sd
                                           WHERE sd.GlobalAttributeId = ZnodePortalGlobalAttributeValue.GlobalAttributeId
                                         )
           	 DELETE ZA FROM  ZnodeFormBuilderGlobalAttributeValueLocale	ZA INNER JOIN ZnodeFormBuilderGlobalAttributeValue dg ON (dg.FormBuilderGlobalAttributeValueId = ZA.FormBuilderGlobalAttributeValueId) 
			  WHERE EXISTS ( SELECT 1
                                           FROM @DeletdAttributeId AS sd
                                           WHERE sd.GlobalAttributeId = dg.GlobalAttributeId
                                         )
			 DELETE FROM ZnodeFormBuilderGlobalAttributeValue
			  WHERE EXISTS ( SELECT 1
                                           FROM @DeletdAttributeId AS sd
                                           WHERE sd.GlobalAttributeId = ZnodeFormBuilderGlobalAttributeValue.GlobalAttributeId
                                         )
			 DELETE FROM ZnodeFormBuilderAttributeMapper
			   WHERE EXISTS ( SELECT 1
                                           FROM @DeletdAttributeId AS sd
                                           WHERE sd.GlobalAttributeId = ZnodeFormBuilderAttributeMapper.GlobalAttributeId
                                         )


			 DELETE FROM ZnodeGlobalAttributeDefaultValue
             WHERE EXISTS ( SELECT 1
                            FROM @DeletdAttributeId AS sd
                            WHERE sd.GlobalAttributeId = ZnodeGlobalAttributeDefaultValue.GlobalAttributeId
                          );
			 DELETE ZA FROM ZnodeUserGlobalAttributeValueLocale ZA INNER JOIN ZnodeUserGlobalAttributeValue dg ON (dg.UserGlobalAttributeValueId = ZA.UserGlobalAttributeValueId) 
			    WHERE EXISTS ( SELECT 1
                            FROM @DeletdAttributeId AS sd
                            WHERE sd.GlobalAttributeId = dg.GlobalAttributeId
                          );
			 DELETE FROM ZnodeUserGlobalAttributeValue 
			  WHERE EXISTS ( SELECT 1
                            FROM @DeletdAttributeId AS sd
                            WHERE sd.GlobalAttributeId = ZnodeUserGlobalAttributeValue.GlobalAttributeId
                          );	
						  
		     DELETE FROM ZnodeAccountGlobalAttributeValueLocale WHERE AccountGlobalAttributeValueId IN (SELECT AccountGlobalAttributeValueId FROM ZnodeAccountGlobalAttributeValue WHERE EXISTS ( SELECT 1
                            FROM @DeletdAttributeId AS sd
                            WHERE sd.GlobalAttributeId = ZnodeAccountGlobalAttributeValue.GlobalAttributeId
                          ) )		  


			 DELETE FROM ZnodeAccountGlobalAttributeValue  WHERE EXISTS ( SELECT TOP 1 1
                            FROM @DeletdAttributeId AS sd
                            WHERE sd.GlobalAttributeId = ZnodeAccountGlobalAttributeValue.GlobalAttributeId
                          ) 		  	
						  						  						  
									  		  
			DELETE FROM ZnodeGlobalAttributeGroupMapper  
				 WHERE EXISTS ( SELECT 1
                            FROM @DeletdAttributeId AS sd
                            WHERE sd.GlobalAttributeId = ZnodeGlobalAttributeGroupMapper.GlobalAttributeId
                          );		  
             DELETE FROM ZnodeGlobalAttribute
             WHERE EXISTS ( SELECT 1
                            FROM @DeletdAttributeId AS sd
                            WHERE sd.GlobalAttributeId = ZnodeGlobalAttribute.GlobalAttributeId
                          );
              SET @FinalCount = 	( SELECT COUNT(1) FROM dbo.split ( @GlobalAttributeId , ',')   AS a WHERE @GlobalAttributeId <> '')
			 SET @FinalCount = 	CASE WHEN @FinalCount = 0 OR @FinalCount IS nULL  THEN  ( SELECT COUNT(1) FROM @GlobalAttributeIds AS a ) ELSE   @FinalCount END 
			
			

			 IF ( SELECT COUNT(1)
                  FROM @DeletdAttributeId
                ) = @FinalCount
                 BEGIN
                     SELECT 1 AS ID , CAST(1 AS BIT) AS Status;
                 END;
             ELSE
                 BEGIN
                     SELECT 0 AS ID , CAST(0 AS BIT) AS Status;
                 END;
             SET @Status = 1;
             COMMIT TRAN A;
         END TRY
         BEGIN CATCH
             SELECT 0 AS ID , CAST(0 AS BIT) AS Status;
             SELECT ERROR_MESSAGE() , ERROR_LINE() , ERROR_PROCEDURE();
             SET @Status = 0;
             ROLLBACK TRAN A;
         END CATCH;
     END;
	 GO
	 IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_DeleteProfile')
BEGIN 
	DROP PROCEDURE Znode_DeleteProfile
END
GO
CREATE PROCEDURE [dbo].[Znode_DeleteProfile]
( @ProfileId VARCHAR(2000),
  @Status    INT OUT
 , @IsForceFullyDelete BIT = 0 )
AS 
   /*
     Summary : Remove profile only when this is not mapped with other entity 
     Check existence of profileid in other tables 
    1. ZnodeShipping
    2. ZnodeUserProfile
    3. ZnodePriceListProfile
    4. ZnodeProfilePromotion  ( Remove table ) 
    5. ZnodePortalProfile
    Unit Testing : 
	BEGIN TRAN
    Declare @Status  int 
    Exec [Znode_DeleteProfile]  @ProfileId =  ,@Status = @Status  oUt
    ROLLBACK TRAN
   */
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             BEGIN TRAN A;
             DECLARE @DeleteProfileId TABLE(ProfileId INT);
             INSERT INTO @DeleteProfileId
                    SELECT Item
                    FROM dbo.split(@ProfileId, ',') AS a
					WHERE @ProfileId <> '' 
					;
             DECLARE @V_tabledeleted TABLE(ProfileId INT);
             INSERT INTO @V_tabledeleted
                    SELECT a.ProfileId
                    FROM @DeleteProfileId AS a
                    WHERE (( NOT EXISTS
                           
                    (
                        SELECT TOP 1 1
                        FROM ZnodeUserProfile AS d
                        WHERE d.ProfileId = a.ProfileId
                    )
                         
                          AND NOT EXISTS
                    (
                        SELECT TOP 1 1
                        FROM ZnodePortalProfile AS f
                        WHERE f.ProfileId = a.ProfileId
                    )) OR @IsForceFullyDelete =1 ) ;
           
			DELETE FROM ZnodeProfileShipping
			WHERE EXISTS (SELECT TOP 1 1 FROM @V_tabledeleted DAI
			WHERE DAI.ProfileId = ZnodeProfileShipping.ProfileId)

			DELETE FROM ZnodeProfilePaymentSetting
			WHERE EXISTS (SELECT TOP 1 1 FROM @V_tabledeleted DAI
			WHERE DAI.ProfileId = ZnodeProfilePaymentSetting.ProfileId )
						
			 DELETE FROM ZnodeUserProfile  WHERE EXISTS (SELECT TOP 1 1 FROM @V_tabledeleted DAI
			WHERE DAI.ProfileId = ZnodeUserProfile.ProfileId)

			DELETE FROM ZnodePriceListProfile WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePortalProfile 	WHERE EXISTS (SELECT TOP 1 1 FROM @V_tabledeleted DAI
			WHERE DAI.ProfileId = ZnodePortalProfile.ProfileId) AND ZnodePortalProfile.PortalProfileId = ZnodePriceListProfile.PortalProfileId)

			DELETE FROM ZnodePortalProfile 	WHERE EXISTS (SELECT TOP 1 1 FROM @V_tabledeleted DAI
			WHERE DAI.ProfileId = ZnodePortalProfile.ProfileId)

			DELETE FROM ZnodeAccountProfile WHERE EXISTS (SELECT TOP 1 1 FROM @V_tabledeleted DAI
			WHERE DAI.ProfileId = ZnodeAccountProfile.ProfileId) 
			 DELETE FROM ZnodeProfileCatalogCategory 
			 WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeProfileCatalog WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @V_tabledeleted AS DAI
                 WHERE DAI.ProfileId = ZnodeProfileCatalog.ProfileId
             ) AND ZnodeProfileCatalog.ProfileCatalogId = ZnodeProfileCatalogCategory.ProfileCatalogId )

			 DELETE FROM ZnodeProfileCategoryHierarchy 
			 WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeProfileCatalog WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @V_tabledeleted AS DAI
                 WHERE DAI.ProfileId = ZnodeProfileCatalog.ProfileId
             ) AND ZnodeProfileCatalog.ProfileCatalogId = ZnodeProfileCategoryHierarchy.ProfileCatalogId )


			 DELETE FROM ZnodeProfileCatalog WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @V_tabledeleted AS DAI
                 WHERE DAI.ProfileId = ZnodeProfileCatalog.ProfileId
             );

			  DELETE FROM znodecmscontentpagesprofile   WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @V_tabledeleted AS DAI
                 WHERE DAI.ProfileId = znodecmscontentpagesprofile.ProfileId
             );

			   DELETE FROM ZnodeProfile
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @V_tabledeleted AS DAI
                 WHERE DAI.ProfileId = ZnodeProfile.ProfileId
             );


             IF
             (
                 SELECT COUNT(1)
                 FROM @V_tabledeleted
             ) =
             (
                 SELECT COUNT(1)
                 FROM @DeleteProfileId
             )
                 BEGIN
                     SELECT 1 AS ID,
                            CAST(1 AS BIT) AS Status;
                 END;
             ELSE
                 BEGIN
                     SELECT 0 AS ID,
                            CAST(0 AS BIT) AS Status;
                 END;
             SET @Status = 1;
             COMMIT TRAN A;
         END TRY
         BEGIN CATCH
		   SELECT ERROR_MESSAGE()
          DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_DeleteProfile @ProfileId = '+@ProfileId+',@Status='+CAST(@Status AS VARCHAR(200));
             SET @Status = 0;
             SELECT 0 AS ID,
                    CAST(0 AS BIT) AS Status;
			 ROLLBACK TRAN A;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_DeleteProfile',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
	 GO

	 IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_DeleteShipping')
BEGIN 
	DROP PROCEDURE Znode_DeleteShipping
END
GO
CREATE PROCEDURE [dbo].[Znode_DeleteShipping]
(   @ShippingId VARCHAR(max),
    @Status     INT OUT,
	@IsForceFullyDelete BIT = 0 )
AS
/*
Summary: This Procedure is used to delete shipping details
Unit Testing
begin tran
  EXEC [dbo].[Znode_DeleteShipping] 1,0
 rollback tran
 */
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
			  DECLARE @StatusOut Table (Id INT ,Message NVARCHAR(max), Status BIT )
			  DECLARE @DeletedIds TransferId 
             BEGIN TRAN A;
             DECLARE @DeletdShippingId TABLE(ShippingId INT);
             INSERT INTO @DeletdShippingId
                    SELECT Item
                    FROM dbo.split(@ShippingId, ',') AS a
					WHERE (NOT EXISTS (SELECT TOP 1 1 FROM ZnodeOmsOrderDetails asa WHERE asa.ShippingId = a.Item )	 OR @IsForceFullyDelete =1 ) 
					AND @ShippingId <> ''
					AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodeShipping s WHERE s.ShippingId = a.Item  AND s.ShippingCode = 'FreeShipping')
					;
             DELETE FROM ZnodeShippingSKU
             WHERE ShippingRuleId IN
             (
                 SELECT ShippingRuleId
                 FROM ZNodeShippingRule
                 WHERE EXISTS
                 (
                     SELECT TOP 1 1
                     FROM @DeletdShippingId AS a
                     WHERE a.ShippingId = ZNodeShippingRule.ShippingId
                 )
             );
             DELETE FROM ZNodeShippingRule
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @DeletdShippingId AS a
                 WHERE a.ShippingId = ZNodeShippingRule.ShippingId
             );

			INSERT INTO @DeletedIds 
			SELECT DISTINCT a.OmsOrderId 
			FROM ZnodeOmsOrder A 
			INNER JOIN ZnodeOMsOrderDetails b  ON (b.OmsOrderId = a.OmsOrderId )
			WHERE   EXISTS ( SELECT TOP 1 1 FROM @DeletdShippingId AS TBP WHERE TBP.ShippingId = b.ShippingId)

			INSERT INTO @StatusOut (Id ,Status) 
			EXEC [dbo].[Znode_DeleteOrderById] @OmsOrderIds = @DeletedIds , @status = 0 
		    
			DELETE FROM ZnodeOMSQuoteApproval WHERE OmsQuoteId 
			IN (SELECT OmsQuoteId FROM ZnodeOmsQuote WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @DeletdShippingId AS a
                 WHERE a.ShippingId = ZnodeOmsQuote.ShippingId
             ));

		
			 DELETE FROM ZnodeOmsNotes WHERE  OmsQuoteId 
			IN (SELECT OmsQuoteId FROM ZnodeOmsQuote WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @DeletdShippingId AS a
                 WHERE a.ShippingId = ZnodeOmsQuote.ShippingId
             ));


			DELETE FROM ZnodeOmsQuotePersonalizeItem WHERE OmsQuoteLineItemId IN (SELECT OmsQuoteLineItemId FROM ZnodeOmsQuoteLineItem WHERE OmsQuoteId 
			IN (SELECT OmsQuoteId FROM ZnodeOmsQuote WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @DeletdShippingId AS a
                 WHERE a.ShippingId = ZnodeOmsQuote.ShippingId
             )))
			DELETE FROM ZnodeOmsQuoteLineItem WHERE OmsQuoteId 
			IN (SELECT OmsQuoteId FROM ZnodeOmsQuote WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @DeletdShippingId AS a
                 WHERE a.ShippingId = ZnodeOmsQuote.ShippingId
             ))
			DELETE FROM ZnodeOmsQuote WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @DeletdShippingId AS a
                 WHERE a.ShippingId = ZnodeOmsQuote.ShippingId
             )
			DELETE FROM ZnodePortalShipping  WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @DeletdShippingId AS a
                 WHERE a.ShippingId = ZnodePortalShipping.ShippingId
             )

			 DELETE FROM ZnodeProfileShipping WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @DeletdShippingId AS a
                 WHERE a.ShippingId = ZnodeProfileShipping.ShippingId
             );

			 DELETE FROM ZnodeOmsOrderLineItems
			 where exists(select * FROM ZnodeOmsOrderShipment B WHERE EXISTS
							 (
								 SELECT TOP 1 1
								 FROM @DeletdShippingId AS a
								 WHERE a.ShippingId = B.ShippingId
							 )
			 AND ZnodeOmsOrderLineItems.OmsOrderShipmentId = B.OmsOrderShipmentId );

			  DELETE FROM ZnodeOmsOrderShipment WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @DeletdShippingId AS a
                 WHERE a.ShippingId = ZnodeOmsOrderShipment.ShippingId
             );


             DELETE FROM ZnodeShipping
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @DeletdShippingId AS a
                 WHERE a.ShippingId = ZnodeShipping.ShippingId
             );
            
			 IF
             (
                 SELECT COUNT(1)
                 FROM @DeletdShippingId
             ) =
             (
                 SELECT COUNT(1)
                 FROM dbo.split(@ShippingId, ',') AS a WHERE @ShippingId <> ''
             )
                 BEGIN
                     SELECT 1 AS ID,
                            CAST(1 AS BIT) AS Status;
							SET @Status = 1;

                 END;

			ELSE IF EXISTS (SELECT Item
            FROM dbo.split(@ShippingId, ',') AS a WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeShipping s WHERE s.ShippingId = a.Item  AND s.ShippingCode = 'FreeShipping'))
			BEGIN
				 
			SELECT 2 AS ID,
                    CAST(0 AS BIT)  AS Status;
					SET @Status = 0;

			END
             ELSE
                 BEGIN
                     SELECT 0 AS ID,
                            CAST(0 AS BIT) AS Status;
							SET @Status = 0;
                 END;
             
             COMMIT TRAN A;
         END TRY
         BEGIN CATCH
		     SELECT ERROR_MESSAGE()
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_DeleteShipping @ShippingId = '+@ShippingId+',@Status='+CAST(@Status AS VARCHAR(200));
             SET @Status = 0;
             SELECT 0 AS ID,
                    CAST(0 AS BIT) AS Status;
			 ROLLBACK TRAN A;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_DeleteShipping',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
	 GO

	 
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetAccountGlobalAttributeValue')
BEGIN 
	DROP PROCEDURE Znode_GetAccountGlobalAttributeValue
END
GO
CREATE  PROCEDURE [dbo].[Znode_GetAccountGlobalAttributeValue]
(
    @EntityName       nvarchar(200) = 0,
    @GlobalEntityValueId   INT = 0,
	@LocaleCode       VARCHAR(100) = '',
   @GroupCode  nvarchar(200) = null,
       @SelectedValue bit = 0

)
AS
/*
	 Summary :- This procedure is used to get the Attribute and EntityValue attribute value as per filter pass 
	 Unit Testing 
	 BEGIN TRAN
	 EXEC [Znode_GetGlobalEntityAttributeValue] 'Store',1
	 ROLLBACK TRAN

*/	 
     BEGIN
 BEGIN TRY
 declare @EntityValue nvarchar(200), @LocaleId int

  DECLARE @V_MediaServerThumbnailPath VARCHAR(4000);
          SET @V_MediaServerThumbnailPath =
         (
             SELECT ISNULL(CDNURL,URL)+ZMSM.ThumbnailFolderName+'/'
             FROM ZnodeMediaConfiguration ZMC 
			 INNER JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMC.MediaServerMasterId)
		     WHERE IsActive = 1 
         );


 Select @EntityValue=Name  from ZnodeAccount
 Where AccountId=@GlobalEntityValueId

            Declare	@EntityAttributeList as	table  (GlobalEntityId int,EntityName nvarchar(300),EntityValue nvarchar(max),
			GlobalAttributeGroupId int,GlobalAttributeId int,AttributeTypeId int,AttributeTypeName nvarchar(300),
			 AttributeCode nvarchar(300) ,IsRequired bit,IsLocalizable bit,AttributeName  nvarchar(300) , HelpDescription nvarchar(max),DisplayOrder int
			) 
			 
			Declare @EntityAttributeValidationList  as	table  
			( GlobalAttributeId int, ControlName nvarchar(300), ValidationName nvarchar(300),SubValidationName nvarchar(300),
			 RegExp nvarchar(300), ValidationValue nvarchar(300),IsRegExp Bit)

			Declare	@EntityAttributeValueList as	table  (GlobalAttributeId int,AttributeValue nvarchar(max),
			GlobalAttributeValueId int,GlobalAttributeDefaultValueId int,AttributeDefaultValueCode nvarchar(300),
			AttributeDefaultValue nvarchar(300),
			MediaId int,MediaPath nvarchar(300),IsEditable bit,DisplayOrder int )



			Declare	@EntityAttributeDefaultValueList as	table  (GlobalAttributeDefaultValueId int,GlobalAttributeId int,
			AttributeDefaultValueCode nvarchar(300),AttributeDefaultValue nvarchar(300),RowId int,IsEditable bit,DisplayOrder int )

			set @LocaleId = (select top 1 LocaleId from ZnodeLocale where Code = @LocaleCode)

            IF ISnull(@GroupCode, '') = ''
            Begin
			
				insert into @EntityAttributeList
					(	GlobalEntityId ,EntityName ,EntityValue ,
					GlobalAttributeGroupId ,GlobalAttributeId ,AttributeTypeId ,AttributeTypeName ,
					AttributeCode  ,IsRequired ,IsLocalizable ,AttributeName,HelpDescription,DisplayOrder  ) 
				SELECT qq.GlobalEntityId,qq.EntityName,@EntityValue EntityValue,ww.GlobalAttributeGroupId,
					c.GlobalAttributeId,c.AttributeTypeId,q.AttributeTypeName,c.AttributeCode,c.IsRequired,
					c.IsLocalizable,f.AttributeName,c.HelpDescription,c.DisplayOrder
				 FROM dbo.ZnodeGlobalEntity AS qq
					  INNER JOIN dbo.ZnodeGlobalGroupEntityMapper AS w ON qq.GlobalEntityId = w.GlobalEntityId
					  INNER JOIN dbo.ZnodeGlobalAttributeGroupMapper AS ww ON ww.GlobalAttributeGroupId = w.GlobalAttributeGroupId
					  INNER JOIN dbo.ZnodeGlobalAttribute AS c ON ww.GlobalAttributeId = c.GlobalAttributeId
					  INNER JOIN dbo.ZnodeAttributeType AS q ON c.AttributeTypeId = q.AttributeTypeId
					  INNER JOIN dbo.ZnodeGlobalAttributeLocale AS f ON c.GlobalAttributeId = f.GlobalAttributeId
					  Where qq.EntityName = @EntityName AND ( f.LocaleId = isnull(@LocaleId, 0 ) or isnull(@LocaleId,0) = 0 )
			END
			Else

               Begin
                       insert into @EntityAttributeList
                               ( GlobalEntityId ,EntityName ,EntityValue ,
                               GlobalAttributeGroupId ,GlobalAttributeId ,AttributeTypeId ,AttributeTypeName ,
                               AttributeCode  ,IsRequired ,IsLocalizable ,AttributeName,HelpDescription,DisplayOrder  )
                               SELECT qq.GlobalEntityId,qq.EntityName,@EntityValue EntityValue,ww.GlobalAttributeGroupId,
                               c.GlobalAttributeId,c.AttributeTypeId,q.AttributeTypeName,c.AttributeCode,c.IsRequired,
                               c.IsLocalizable,f.AttributeName,c.HelpDescription,c.DisplayOrder
                        FROM dbo.ZnodeGlobalEntity AS qq
                                 INNER JOIN dbo.ZnodeGlobalGroupEntityMapper AS w ON qq.GlobalEntityId = w.GlobalEntityId
                                 INNER JOIN dbo.ZnodeGlobalAttributeGroupMapper AS ww ON ww.GlobalAttributeGroupId = w.GlobalAttributeGroupId
                                 INNER JOIN dbo.ZnodeGlobalAttribute AS c ON ww.GlobalAttributeId = c.GlobalAttributeId
                                 INNER JOIN dbo.ZnodeAttributeType AS q ON c.AttributeTypeId = q.AttributeTypeId
                                 INNER JOIN dbo.ZnodeGlobalAttributeLocale AS f ON c.GlobalAttributeId = f.GlobalAttributeId
                                 --Inner JOIN ZnodeGlobalAttributeGroup g on ww.GlobalAttributeGroupId = g.GlobalAttributeGroupId
                                 Where qq.EntityName=@EntityName AND ( f.LocaleId = isnull(@LocaleId, 0 ) or isnull(@LocaleId,0) = 0 )
                                 AND exists( select 1 from ZnodeGlobalAttributeGroup g where ww.GlobalAttributeGroupId = g.GlobalAttributeGroupId and g.GroupCode = @GroupCode )	
               END


		  INSERT INTO @EntityAttributeValidationList
		  (GlobalAttributeId,ControlName , ValidationName ,SubValidationName ,
		RegExp, ValidationValue,IsRegExp)

		 Select aa.GlobalAttributeId,i.ControlName,i.Name AS ValidationName,j.ValidationName AS SubValidationName,
		j.RegExp,k.Name AS ValidationValue,CAST(CASE WHEN j.RegExp IS NULL THEN 0 ELSE 1 END AS BIT) AS IsRegExp
		
		fROM @EntityAttributeList aa
		  inner  JOIN dbo.ZnodeGlobalAttributeValidation AS k ON k.GlobalAttributeId = aa.GlobalAttributeId
          inner  JOIN dbo.ZnodeAttributeInputValidation AS i ON k.InputValidationId = i.InputValidationId
          LEFT  JOIN dbo.ZnodeAttributeInputValidationRule AS j ON k.InputValidationRuleId = j.InputValidationRuleId

		  insert into @EntityAttributeValueList
		  (GlobalAttributeId,GlobalAttributeValueId,GlobalAttributeDefaultValueId,AttributeValue ,MediaId,MediaPath)
		  Select DISTINCT GlobalAttributeId,aa.AccountGlobalAttributeValueId,bb.GlobalAttributeDefaultValueId,
		  case when bb.MediaPath is not null then  @V_MediaServerThumbnailPath+bb.MediaPath--+'~'+convert(nvarchar(10),bb.MediaId) 
		  else bb.AttributeValue end,		  
		  bb.MediaId,bb.MediaPath
		  from  dbo.ZnodeAccountGlobalAttributeValue aa
		   inner join ZnodeAccountGlobalAttributeValueLocale bb ON bb.AccountGlobalAttributeValueId = aa.AccountGlobalAttributeValueId 
		  Where  AccountId=@GlobalEntityValueId

		

		  

		  update aa
		  Set AttributeDefaultValueCode= h.AttributeDefaultValueCode,
              AttributeDefaultValue=g.AttributeDefaultValue,
			  GlobalAttributeDefaultValueId=g.GlobalAttributeDefaultValueId,
			  AttributeValue=case when aa.AttributeValue is  null then h.AttributeDefaultValueCode else aa.AttributeValue end,
			  IsEditable = ISNULL(h.IsEditable, 1),DisplayOrder = h.DisplayOrder
		  from  @EntityAttributeValueList aa
		  inner JOIN dbo.ZnodeGlobalAttributeDefaultValue h ON h.GlobalAttributeDefaultValueId = aa.GlobalAttributeDefaultValueId                                       
          inner JOIN dbo.ZnodeGlobalAttributeDefaultValueLocale g ON h.GlobalAttributeDefaultValueId = g.GlobalAttributeDefaultValueId
          
		  insert into @EntityAttributeDefaultValueList
		  (GlobalAttributeDefaultValueId,GlobalAttributeId,AttributeDefaultValueCode,
			AttributeDefaultValue ,RowId ,IsEditable ,DisplayOrder )
		  Select  h.GlobalAttributeDefaultValueId, aa.GlobalAttributeId,h.AttributeDefaultValueCode,g.AttributeDefaultValue,0,ISNULL(h.IsEditable, 1),
		  h.DisplayOrder
		  from  @EntityAttributeList aa
		  inner JOIN dbo.ZnodeGlobalAttributeDefaultValue h ON h.GlobalAttributeId = aa.GlobalAttributeId
          inner JOIN dbo.ZnodeGlobalAttributeDefaultValueLocale g ON h.GlobalAttributeDefaultValueId = g.GlobalAttributeDefaultValueId
		  
		 
			if not exists (Select 1 from @EntityAttributeList )
			Begin
			insert into @EntityAttributeList
			(	GlobalEntityId ,EntityName ,EntityValue ,
			GlobalAttributeGroupId ,GlobalAttributeId ,AttributeTypeId ,AttributeTypeName ,
			AttributeCode  ,IsRequired ,IsLocalizable ,AttributeName,HelpDescription  ) 
			SELECT qq.GlobalEntityId,qq.EntityName,@EntityValue EntityValue,0 GlobalAttributeGroupId,
			0 GlobalAttributeId,0 AttributeTypeId,''AttributeTypeName,''AttributeCode,0 IsRequired,
			0 IsLocalizable,'' AttributeName,'' HelpDescription
			FROM dbo.ZnodeGlobalEntity AS qq
			 Where qq.EntityName=@EntityName 
			End
				

			SELECT GlobalEntityId,EntityName,EntityValue,GlobalAttributeGroupId,
			AA.GlobalAttributeId,AttributeTypeId,AttributeTypeName,AttributeCode,IsRequired,
			IsLocalizable,AttributeName,ControlName,ValidationName,SubValidationName,RegExp,
			ValidationValue,cast(isnull(IsRegExp,0) as bit)  IsRegExp,
			HelpDescription,AttributeValue,GlobalAttributeValueId,bb.GlobalAttributeDefaultValueId,
			aab.AttributeDefaultValueCode,
			aab.AttributeDefaultValue,isnull(aab.RowId,0)   RowId,cast(isnull(aab.IsEditable,0) as bit)   IsEditable
			,bb.MediaId,AA.DisplayOrder
			fROM @EntityAttributeList AA				
			left join @EntityAttributeDefaultValueList aab on aab.GlobalAttributeId=AA.GlobalAttributeId	
			left join @EntityAttributeValidationList vl on vl.GlobalAttributeId=aa.GlobalAttributeId			
			LEFT JOIN @EntityAttributeValueList BB ON BB.GlobalAttributeId=AA.GlobalAttributeId		 
		    and ( (aab.GlobalAttributeDefaultValueId=bb.GlobalAttributeDefaultValueId	)
			or  ( bb.MediaId is not null and isnull(vl.ValidationName,'')='IsAllowMultiUpload'  and bb.GlobalAttributeDefaultValueId is null )
			or  ( bb.MediaId is  null and  bb.GlobalAttributeDefaultValueId is null ))
			order by AA.DisplayOrder, aab.DisplayOrder

			SELECT 1 AS ID,CAST(1 AS BIT) AS Status;       
		  END TRY
         BEGIN CATCH
		 SELECT ERROR_MESSAGE()
             DECLARE @Status BIT ;
		  SET @Status = 0;
		  DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(),
		   @ErrorLine VARCHAR(100)= ERROR_LINE(),
		    @ErrorCall NVARCHAR(MAX)= null       			 
          SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		 
          EXEC Znode_InsertProcedureErrorLog
            @ProcedureName = 'Znode_GetGlobalEntityValueAttributeValues',
            @ErrorInProcedure = @Error_procedure,
            @ErrorMessage = @ErrorMessage,
            @ErrorLine = @ErrorLine,
            @ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO


IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetCatalogCategoryProducts')
BEGIN 
	DROP PROCEDURE Znode_GetCatalogCategoryProducts
END
GO
CREATE PROCEDURE [dbo].[Znode_GetCatalogCategoryProducts]
( 
  @WhereClause      XML,
  @Rows             INT           = 100,
  @PageNo           INT           = 1,
  @Order_BY         VARCHAR(1000) = '',
  @RowsCount        INT OUT,
  @LocaleId         INT           = 1,
  @PimCategoryId    INT,
  @PimCatalogId     INT           = 0,
  @IsAssociated     BIT           = 0,
  @ProfileCatalogId INT           = 0,
  @AttributeCode   VARCHAR(max) = '',
  @PimCategoryHierarchyId INT =0 
  )
AS
   
/*
	   Summary:  Get product List  Catalog / category / respective product list   		   
	   Unit Testing   
	   begin tran
	   declare @p7 int = 0  
	   EXEC Znode_GetCatalogCategoryProducts @WhereClause=N'',@Rows=10,@PageNo=1,@Order_By=N'',
	   @RowsCount=@p7 output,@PimCategoryId=11,@PimCatalogId = 1 ,@LocaleId=1 ,@ProfileCatalogId = 1 
	   rollback tran
	  
    */

     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY
             DECLARE @DefaultAttributeFamily INT= dbo.Fn_GetDefaultPimProductFamilyId(), @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId(), @OrderId INT= 0;
             DECLARE @SQL VARCHAR(MAX), 
					 @PimProductId TransferId,--VARCHAR(MAX)= '', 
					 @PimAttributeId VARCHAR(MAX),
					 @OutPimProductIds VARCHAR(max);
             DECLARE @TransferPimProductId TransferId 
			 DECLARE @TBL_PimMediaAttributeId TABLE (PimAttributeId INT ,AttributeCode VARCHAR(600))
			 INSERT INTO @TBL_PimMediaAttributeId (PimAttributeId,AttributeCode)
			 SELECT PimAttributeId,AttributeCode FROM Dbo.Fn_GetProductMediaAttributeId ()

			
             DECLARE @TBL_AttributeDefaultValue TABLE
             (
				  PimAttributeId            INT,
				  AttributeDefaultValueCode VARCHAR(100),
				  IsEditable                BIT,
				  AttributeDefaultValue     NVARCHAR(MAX),
				  DisplayOrder INT 
             );
             DECLARE @TBL_AttributeDetails AS TABLE
             (
				  PimProductId   INT,
				  AttributeValue NVARCHAR(MAX),
				  AttributeCode  VARCHAR(600),
				  PimAttributeId INT
             );
             DECLARE @FamilyDetails TABLE
             (
				  PimProductId         INT,
				  PimAttributeFamilyId INT,
				  FamilyName           NVARCHAR(3000)
             );
             DECLARE @TBL_AttributeValue TABLE
             (
				  PimCategoryAttributeValueId INT,
				  PimCategoryId               INT,
				  CategoryValue               NVARCHAR(MAX),
				  AttributeCode               VARCHAR(300),
				  PimAttributeId              INT
             );
             IF @Order_By LIKE ''
                 BEGIN
                     SET @OrderId = 1;
                 END;
             --IF @ProfileCatalogId > 0
             --    BEGIN
             --        INSERT INTO @TBL_ProfileCatalogCategory (ProfileCatalogId,PimProductId,PimCategoryId,PimCatalogCategoryId,PimCategoryHierarchyId)
             --        SELECT ZPC.ProfileCatalogId,PimProductId,PimCategoryId,ZCC.PimCatalogCategoryId,PimCategoryHierarchyId
             --        FROM ZnodePimCatalogCategory AS ZCC
             --        INNER JOIN ZnodeProfileCatalog AS ZPC ON(ZPC.PimCatalogId = ZCC.PimCatalogId)
             --        WHERE ZPC.ProfileCatalogId = @ProfileCatalogId

             --        AND NOT EXISTS
             --            (
             --               SELECT TOP 1 1
             --               FROM ZnodeProfileCatalogCategory AS ZPCC
             --               WHERE ZPCC.PimCatalogCategoryId = ZCC.PimCatalogCategoryId
             --            );
             --    END;
             IF @PimCatalogId = 0
                 BEGIN
					INSERT INTO @TransferPimProductId 
                    SELECT PimProductId 
                    FROM ZnodePimCategoryProduct AS ZCP
                    WHERE ZCP.PimCategoryId = @PimCategoryId
					AND PimProductId IS NOT NULL 
                                                   
                 END;
             ELSE
                 BEGIN
                     IF @IsAssociated = 0
                        AND @ProfileCatalogId > 0
                         BEGIN
				INSERT INTO @TransferPimProductId 
                SELECT PimProductId 
                FROM ZnodePimCatalogCategory AS ZCP
                WHERE ZCP.PimCatalogId = @PimCatalogId
				AND ZCP.PimCategoryHierarchyId = @PimCategoryHierarchyId 
                AND NOT EXISTS
                (
                    SELECT TOP 1 1
                    FROM ZnodeProfileCatalogCategory AS TBPCC
                    WHERE TBPCC.PimCatalogCategoryId = ZCP.PimCatalogCategoryId
                        AND TBPCC.ProfileCatalogId = @ProfileCatalogId
                )
               	AND PimProductId IS NOT NULL                                         
                        END;
                     ELSE
                         BEGIN
                             IF @IsAssociated = 1
                                AND @ProfileCatalogId > 0
                                 BEGIN
						INSERT INTO @TransferPimProductId 
                        SELECT PimProductId
                        FROM ZnodePimCatalogCategory AS ZCP
                        WHERE ZCP.PimCatalogId = @PimCatalogId
                            AND ZCP.PimCategoryHierarchyId = @PimCategoryHierarchyId
                            AND EXISTS
                        (
                            SELECT TOP 1 1
                            FROM ZnodeProfileCatalogCategory AS TBPCC
                            WHERE TBPCC.PimCatalogCategoryId = ZCP.PimCatalogCategoryId
                                AND TBPCC.ProfileCatalogId = @ProfileCatalogId
                        )
                       AND PimProductId IS NOT NULL                                             
                                     SET @IsAssociated = 0;
                                 END;
                             ELSE
                                 BEGIN
					INSERT INTO @TransferPimProductId 
                    SELECT DISTINCT PimProductId 
                    FROM ZnodePimCatalogCategory AS ZCP
                    WHERE ZCP.PimCatalogId = @PimCatalogId
					AND ZCP.PimCategoryHierarchyId = @PimCategoryHierarchyId 
				    AND PimProductId IS NOT NULL  
			       
                                 END;
                         END;
                 END;
				 
				 IF NOT EXISTS (SELECT TOP 1 1 FROM @TransferPimProductId)
				 BEGIN 
                  INSERT INTO @TransferPimProductId
				  SELECT '0'

				 END 


             DECLARE @ProductIdTable TABLE
             ([PimProductId] INT,
              [CountId]      INT,
              PimCategoryId  INT,
              RowId          INT IDENTITY(1,1)
             );
            DECLARE  @ProductListIdRTR TransferId
	 DECLARE @TAb Transferid 
	 DECLARE @tBL_mainList TABLE (Id INT,RowId INT)
	 
	 SET @IsAssociated = CASE WHEN @IsAssociated = 0 THEN 1  
					 WHEN @IsAssociated = 1 THEN 0 END 
	

	 INSERT INTO @ProductListIdRTR
	 EXEC Znode_GetProductList  @IsAssociated,@TransferPimProductId
	 


	 IF CAST(@WhereClause AS NVARCHAR(max))<> N''
	 BEGIN 
	 
	  SET @SQL = 'SELECT PimProductId FROM ##Temp_PimProductId'+CAST(@@SPID AS VARCHAR(500))

	  EXEC Znode_GetFilterPimProductId @WhereClause,@ProductListIdRTR,@localeId
	  
      INSERT INTO @TAB 
	  EXEC (@SQL)
	
	 END 

	 IF EXISTS (SELECT Top 1 1 FROM @TAb ) OR CAST(@WhereClause AS NVARCHAR(max)) <> N''
	 BEGIN 
	 
		 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
		 SET @order_by = REPLACE(@order_by,'DisplayOrder','ProductName')
		 INSERT INTO @TBL_MainList(id,RowId)
		 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @TAb ,@AttributeCode,@localeId
	 
		 END 
	 ELSE 
	 BEGIN
	       
	 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
	 SET @order_by = REPLACE(@order_by,'DisplayOrder','ProductName')
	 INSERT INTO @TBL_MainList(id,RowId)
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @ProductListIdRTR ,@AttributeCode,@localeId 
	 END 
			 INSERT INTO @ProductIdTable
             (PimProductId) 
			 SELECT id 
			 FROM @TBL_MainList 
            
			 UPDATE @ProductIdTable
               SET
                   PimCategoryId = @PimCategoryId;
             --SET @PimProductId = SUBSTRING(
             --                             (
             --                                 SELECT ','+CAST(PimProductId AS VARCHAR(100))
             --                                 FROM @ProductIdTable
             --                                 FOR XML PATH('')
             --                             ), 2, 4000);

			 INSERT INTO @PimProductId  ( Id )
			 SELECT PimProductId FROM @ProductIdTable

             SET @PimAttributeId = SUBSTRING((SELECT ','+CAST(PimAttributeId AS VARCHAR(50)) FROM [dbo].[Fn_GetGridPimAttributes]() FOR XML PATH('')), 2, 4000);
             INSERT INTO @TBL_AttributeDefaultValue (PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder )
            
			 EXEC Znode_GetAttributeDefaultValueLocale @PimAttributeId,@LocaleId;
            
			 INSERT INTO @TBL_AttributeDetails (PimProductId,AttributeValue,AttributeCode,PimAttributeId)

             EXEC Znode_GetProductsAttributeValue @PimProductId,@PimAttributeId,@localeId;
             SET @PimAttributeId = [dbo].[Fn_GetCategoryNameAttributeId]();

             INSERT INTO @TBL_AttributeValue (PimCategoryAttributeValueId,PimCategoryId,CategoryValue,AttributeCode,PimAttributeId)

             EXEC [dbo].[Znode_GetCategoryAttributeValue] @PimCategoryId,@PimAttributeId,@LocaleId;
          
		    ;WITH Cte_ProductMedia
               AS (SELECT TBA.PimProductId , TBA.PimAttributeId 
			   , SUBSTRING( ( SELECT ','+ISNULL(ZMC.CDNURL,ZMC.URL)+ZMSM.ThumbnailFolderName+'/'+ zm.PATH 
			   FROM ZnodeMedia AS ZM
               INNER JOIN ZnodeMediaConfiguration ZMC  ON (ZM.MediaConfigurationId = ZMC.MediaConfigurationId)
			   INNER JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMC.MediaServerMasterId)
			   INNER JOIN @TBL_AttributeDetails AS TBAI ON (TBAI.AttributeValue  = CAST(ZM.MediaId AS VARCHAR(50)) )
			   INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBAI.PimATtributeId)
			   WHERE TBAI.PimProductId = TBA.PimProductId AND TBAI.PimAttributeId = TBA.PimAttributeId 
			   FOR XML PATH('') ), 2 , 4000) AS AttributeValue 
			   FROM @TBL_AttributeDetails AS TBA 
			   INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBA.PimATtributeId ))
                          
		      UPDATE TBAV SET AttributeValue = CTPM.AttributeVALue
			  FROM @TBL_AttributeDetails TBAV 
			  INNER JOIN Cte_ProductMedia CTPM ON CTPM.PimProductId = TBAV.PimProductId  AND CTPM.PimAttributeId = TBAV.PimAttributeId 
			  AND CTPM.PimAttributeId = TBAV.PimAttributeId;

             INSERT INTO @FamilyDetails (PimAttributeFamilyId,PimProductId)
             EXEC [dbo].[Znode_GetPimProductAttributeFamilyId] @PimProductId,1;
             UPDATE a
             SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
             INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                  AND LocaleId = @LocaleId);
             UPDATE a
             SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
             INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                  AND LocaleId = @DefaultLocaleId)
             WHERE a.FamilyName IS NULL
                   OR a.FamilyName = '';


             SELECT zpp.PimProductid AS ProductId,zpp.PimProductId,@PimCatalogId AS PimCatalogId,zpp.PimCategoryId,[ProductName],
			 ProductType,ISNULL(zf.FamilyName, '') AS AttributeFamily,[SKU],[Price],[Quantity],
                    CASE
                        WHEN Piv.[IsActive] IS NULL
                        THEN CAST(0 AS BIT)
                        ELSE CAST(Piv.[IsActive] AS BIT)
                    END AS [IsActive],
                    piv.[ProductImage] ImagePath,
                    [Assortment],
                    TBAV.CategoryValue AS [CategoryName],
                    @LocaleId AS LocaleId,
                    ZCC.[DisplayOrder],
                    ZPCC.ProfileCatalogCategoryId,
                    zpp.RowId,
					ZCC.PimCategoryHierarchyId
             FROM @ProductIdTable AS zpp
			 INNER JOIN @TBL_MainList TMM ON (TMM.Id = zpp.PimProductId)
                  LEFT JOIN @FamilyDetails AS zf ON(zf.PimProductId = zpp.PimProductId)
                  INNER JOIN
             (
                 SELECT PimProductId,
                        AttributeValue,
                        AttributeCode
                 FROM @TBL_AttributeDetails
             ) TB PIVOT(MAX(AttributeValue) FOR AttributeCode IN([ProductName],
                                                                 [SKU],
                                                                 [Price],
                                                                 [Quantity],
                                                                 [IsActive],
                                                                 [ProductType],
                                                                 [ProductImage],
                                                                 [Assortment],
                                                                 [DisplayOrder])) AS Piv ON(Piv.PimProductId = zpp.PimProductid)
                  LEFT JOIN @TBL_AttributeValue AS TBAV ON(TBAV.PimCategoryId = ZPP.PimCategoryId)
                  LEFT JOIN ZnodePimCategoryProduct AS ZPCP ON(ZPCP.PimProductId = Zpp.PimProductId
                                                               AND ZPCP.PimCategoryId = Zpp.PimCategoryId)
                  LEFT JOIN ZnodePimCatalogCategory AS ZCC ON(ZCC.PimProductId = Zpp.PimProductId
                                                             AND ZCC.PimCategoryHierarchyId = @PimCategoryHierarchyId
                                                              AND ZCC.PimCatalogId = @PimCatalogId)
                  LEFT JOIN ZnodeProfileCatalogCategory AS ZPCC ON(ZPCC.PimCatalogCategoryId = ZCC.PimCatalogCategoryId
                                                                   AND ZPCC.ProfileCatalogId = @ProfileCatalogId)
                  
             ORDER BY CASE
                          WHEN @OrderId = 0
                          THEN 1
                          ELSE ZCC.PimCatalogCategoryId
                      END DESC,
                      TMM.RowId;

					  
     IF EXISTS (SELECT Top 1 1 FROM @TAb )
	 BEGIN 

		  SELECT @RowsCount = (SELECT COUNT(1) FROM @TAb) 
	 END 
	 ELSE 
	 BEGIN
	 		  SELECT @RowsCount =(SELECT COUNT(1) FROM @ProductListIdRTR)   
	 END 
	

         END TRY
         BEGIN CATCH
		    SELECT ERROR_message()
             DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetCatalogCategoryProducts @WhereClause = '''+ISNULL(CAST(@WhereClause AS VARCHAR(MAX)),'''''')+''',@Rows='+ISNULL(CAST(@Rows AS
			VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')+',
			@LocaleId = '+ISNULL(CAST(@LocaleId AS VARCHAR(50)),'''')+',@PimCategoryId='+ISNULL(CAST(@PimCategoryId AS VARCHAR(50)),'''')+',@PimCatalogId='+ISNULL(CAST(@PimCatalogId AS VARCHAR(50)),'''')+',@IsAssociated='+ISNULL(CAST(@IsAssociated AS VARCHAR(50)),'''')+',
			@ProfileCatalogId='+ISNULL(CAST(@ProfileCatalogId AS VARCHAR(50)),'''')+',@AttributeCode='''+ISNULL(CAST(@AttributeCode AS VARCHAR(50)),'''''')+''',@PimCategoryHierarchyId='+ISNULL(CAST(@PimCategoryHierarchyId AS VARCHAR(10)),'''');
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetCatalogCategoryProducts',
				@ErrorInProcedure = 'Znode_GetCatalogCategoryProducts',
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO


IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetFormBuilderGlobalAttributeValue')
BEGIN 
	DROP PROCEDURE Znode_GetFormBuilderGlobalAttributeValue
END
GO
CREATE   PROCEDURE [dbo].[Znode_GetFormBuilderGlobalAttributeValue]
(
    @FormBuilderId  int=null,
    @UserId			int= null,
	@PortalId		int = null,
	@FormBuilderSubmitId int=null,
    @LocaleId       INT = 0
)
AS
/*
	 Summary :- This procedure is used to get the Attribute and EntityValue attribute value as per filter pass
	 Unit Testing
	 BEGIN TRAN
	 EXEC [Znode_GetFormBuilderGlobalAttributeValue_back] 1
	 ROLLBACK TRAN

*/
     BEGIN
 BEGIN TRY
 declare @EntityValue nvarchar(200),@FormCode nvarchar(200),@DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId()

 If isnull(@LocaleId,0) =0
 Begin
   Set @LocaleId =@DefaultLocaleId
 End

 If isnull( @FormBuilderSubmitId,0) >0
 Select @FormBuilderId=FormBuilderId
 From ZnodeFormBuilderSubmit
 Where FormBuilderSubmitId=@FormBuilderSubmitId

  DECLARE @V_MediaServerThumbnailPath VARCHAR(4000);
          SET @V_MediaServerThumbnailPath =
         (
             SELECT ISNULL(ZMC.CDNURL,ZMC.URL)+ZMSM.ThumbnailFolderName+'/'
             FROM ZnodeMediaConfiguration ZMC
			 INNER JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMC.MediaServerMasterId)
		     WHERE IsActive = 1
         );
Declare	@AttributeList as	table (GlobalAttributeGroupId int,GlobalAttributeId int,AttributeGroupDisplayOrder int
,AttributeDisplayOrder int)

 Select @EntityValue=FormCode,@FormCode=FormCode
 from ZnodeFormBuilder
 Where FormBuilderId=@FormBuilderId

            Declare	@EntityAttributeList as	table  (GlobalEntityId int,EntityName nvarchar(300),EntityValue nvarchar(max),
			GlobalAttributeGroupId int,GlobalAttributeId int,AttributeTypeId int,AttributeTypeName nvarchar(300),
			 AttributeCode nvarchar(300) ,IsRequired bit,IsLocalizable bit,AttributeName  nvarchar(300) , HelpDescription nvarchar(max)
			,AttributeGroupDisplayOrder int,AttributeDisplayOrder int)

			Declare @EntityAttributeValidationList  as	table
			( GlobalAttributeId int, ControlName nvarchar(300), ValidationName nvarchar(300),SubValidationName nvarchar(300),
			 RegExp nvarchar(300), ValidationValue nvarchar(300),IsRegExp Bit)

			Declare	@EntityAttributeValueList as	table  (GlobalAttributeId int,AttributeValue nvarchar(max),
			GlobalAttributeValueId int,GlobalAttributeDefaultValueId int,AttributeDefaultValueCode nvarchar(300),
			AttributeDefaultValue nvarchar(300),
			MediaId int,MediaPath nvarchar(300) )



			Declare	@EntityAttributeDefaultValueList as	table  (GlobalAttributeDefaultValueId int,GlobalAttributeId int,
			AttributeDefaultValueCode nvarchar(300),AttributeDefaultValue nvarchar(300),RowId int,IsEditable bit,DisplayOrder int )

			insert into @AttributeList
			 Select qq.GlobalAttributeGroupId,isnull(dd.GlobalAttributeId ,qq.GlobalAttributeId) ,qq.DisplayOrder,dd.AttributeDisplayOrder
			   from dbo.ZnodeFormBuilderAttributeMapper  qq
			   left join ZnodeGlobalAttributeGroupMapper dd on dd.GlobalAttributeGroupId=qq.GlobalAttributeGroupId
			   Where qq.FormBuilderId=@FormBuilderId

	insert into @EntityAttributeList
		(	GlobalEntityId ,EntityName ,EntityValue ,
		GlobalAttributeGroupId ,GlobalAttributeId ,AttributeTypeId ,AttributeTypeName ,
		AttributeCode  ,IsRequired ,IsLocalizable ,AttributeName,HelpDescription ,AttributeGroupDisplayOrder,AttributeDisplayOrder )
		SELECT @FormBuilderId GlobalEntityId,'FormBuilder' EntityName,@EntityValue EntityValue,qq.GlobalAttributeGroupId,
		c.GlobalAttributeId,c.AttributeTypeId,q.AttributeTypeName,c.AttributeCode,c.IsRequired,
		c.IsLocalizable,null AttributeName,c.HelpDescription,qq.AttributeGroupDisplayOrder,qq.AttributeDisplayOrder
     FROM @AttributeList AS qq
          INNER JOIN dbo.ZnodeGlobalAttribute AS c ON qq.GlobalAttributeId = c.GlobalAttributeId
          INNER JOIN dbo.ZnodeAttributeType AS q ON c.AttributeTypeId = q.AttributeTypeId

		  update c
		  Set AttributeName=f.AttributeName
		  from  @EntityAttributeList c
		  INNER JOIN dbo.ZnodeGlobalAttributeLocale AS f ON c.GlobalAttributeId = f.GlobalAttributeId
		   where  f.LocaleId=@LocaleId

		 if  @LocaleId !=@DefaultLocaleId
		 Begin
				update c
				Set AttributeName=f.AttributeName
				from  @EntityAttributeList c
				INNER JOIN dbo.ZnodeGlobalAttributeLocale AS f ON c.GlobalAttributeId = f.GlobalAttributeId
				Where c.AttributeName is null
				and f.LocaleId=@DefaultLocaleId
		 End


		  INSERT INTO @EntityAttributeValidationList
		  (GlobalAttributeId,ControlName , ValidationName ,SubValidationName ,
		RegExp, ValidationValue,IsRegExp)

		 Select aa.GlobalAttributeId,i.ControlName,i.Name AS ValidationName,j.ValidationName AS SubValidationName,
		j.RegExp,k.Name AS ValidationValue,CAST(CASE WHEN j.RegExp IS NULL THEN 0 ELSE 1 END AS BIT) AS IsRegExp
		fROM @EntityAttributeList aa
		  inner  JOIN dbo.ZnodeGlobalAttributeValidation AS k ON k.GlobalAttributeId = aa.GlobalAttributeId
          inner  JOIN dbo.ZnodeAttributeInputValidation AS i ON k.InputValidationId = i.InputValidationId
          LEFT  JOIN dbo.ZnodeAttributeInputValidationRule AS j ON k.InputValidationRuleId = j.InputValidationRuleId

		  insert into @EntityAttributeValueList
		  (GlobalAttributeId,GlobalAttributeValueId,GlobalAttributeDefaultValueId,AttributeValue ,MediaId,MediaPath)
		  Select GlobalAttributeId,aa.FormBuilderGlobalAttributeValueId,bb.GlobalAttributeDefaultValueId,
		  case when bb.MediaPath is not null then  bb.MediaPath  else bb.AttributeValue end,
		  bb.MediaId,bb.MediaPath
		  from  dbo.ZnodeFormBuilderSubmit ss
		  inner join dbo.ZnodeFormBuilderGlobalAttributeValue aa on ss.FormBuilderSubmitId =aa.FormBuilderSubmitId
		  inner join ZnodeFormBuilderGlobalAttributeValueLocale bb ON bb.FormBuilderGlobalAttributeValueId = aa.FormBuilderGlobalAttributeValueId
		  Where  ss.FormBuilderId=@FormBuilderId
		  and ss.FormBuilderSubmitId=@FormBuilderSubmitId

		  update aa
		  Set AttributeDefaultValueCode= h.AttributeDefaultValueCode,
         	  GlobalAttributeDefaultValueId=h.GlobalAttributeDefaultValueId,
			  AttributeValue=case when aa.AttributeValue is  null then h.AttributeDefaultValueCode else aa.AttributeValue end
		  from  @EntityAttributeValueList aa
		  inner JOIN dbo.ZnodeGlobalAttributeDefaultValue h ON h.GlobalAttributeDefaultValueId = aa.GlobalAttributeDefaultValueId

		  update h
		  Set AttributeDefaultValue=g.AttributeDefaultValue
		  from  @EntityAttributeValueList h
		  inner JOIN dbo.ZnodeGlobalAttributeDefaultValueLocale g ON h.GlobalAttributeDefaultValueId = g.GlobalAttributeDefaultValueId
          where  g.LocaleId=@LocaleId

		 if  @LocaleId !=@DefaultLocaleId
		 Begin
				update h
				Set AttributeDefaultValue=g.AttributeDefaultValue
				from  @EntityAttributeValueList h
				inner JOIN dbo.ZnodeGlobalAttributeDefaultValueLocale g ON h.GlobalAttributeDefaultValueId = g.GlobalAttributeDefaultValueId
                Where h.AttributeDefaultValue is null
				and g.LocaleId=@DefaultLocaleId
		 End


		  insert into @EntityAttributeDefaultValueList
		  (GlobalAttributeDefaultValueId,GlobalAttributeId,AttributeDefaultValueCode,
			AttributeDefaultValue ,RowId ,IsEditable ,DisplayOrder )
		  Select  h.GlobalAttributeDefaultValueId, aa.GlobalAttributeId,h.AttributeDefaultValueCode,null AttributeDefaultValue,0,ISNULL(h.IsEditable, 1),
		  h.DisplayOrder
		  from  @EntityAttributeList aa
		  inner JOIN dbo.ZnodeGlobalAttributeDefaultValue h ON h.GlobalAttributeId = aa.GlobalAttributeId

		  update h
		  Set h.AttributeDefaultValue=g.AttributeDefaultValue
          from @EntityAttributeDefaultValueList h
		  inner JOIN dbo.ZnodeGlobalAttributeDefaultValueLocale g ON h.GlobalAttributeDefaultValueId = g.GlobalAttributeDefaultValueId
		  Where g.LocaleId=@LocaleId

		  if  @LocaleId !=@DefaultLocaleId
		 Begin
				  update h
				  Set h.AttributeDefaultValue=g.AttributeDefaultValue
				  from @EntityAttributeDefaultValueList h
				  inner JOIN dbo.ZnodeGlobalAttributeDefaultValueLocale g ON h.GlobalAttributeDefaultValueId = g.GlobalAttributeDefaultValueId
				  Where g.LocaleId=@DefaultLocaleId
				  and  h.AttributeDefaultValue is null
		 End



		  if not exists (Select 1 from @EntityAttributeList )
			Begin
			insert into @EntityAttributeList
			(	GlobalEntityId ,EntityName ,EntityValue ,
			GlobalAttributeGroupId ,GlobalAttributeId ,AttributeTypeId ,AttributeTypeName ,
			AttributeCode  ,IsRequired ,IsLocalizable ,AttributeName,HelpDescription  )
			SELECT 0 GlobalEntityId,'FormBuilder' EntityName,@EntityValue EntityValue,0 GlobalAttributeGroupId,
			0 GlobalAttributeId,0 AttributeTypeId,''AttributeTypeName,''AttributeCode,0 IsRequired,
			0 IsLocalizable,'' AttributeName,'' HelpDescription
			End



			SELECT  GlobalEntityId,EntityName,EntityValue,GlobalAttributeGroupId,
			AA.GlobalAttributeId,AttributeTypeId,AttributeTypeName,AttributeCode,IsRequired,
			IsLocalizable,AttributeName,ControlName,ValidationName,SubValidationName,RegExp,
			ValidationValue,cast(isnull(IsRegExp,0) as bit)  IsRegExp,
			HelpDescription,AttributeValue,GlobalAttributeValueId,bb.GlobalAttributeDefaultValueId,
			aab.AttributeDefaultValueCode,
			aab.AttributeDefaultValue,isnull(aab.RowId,0)   RowId,cast(isnull(aab.IsEditable,0) as bit)   IsEditable
			,bb.MediaId--,aa.AttributeGroupDisplayOrder,aa.AttributeDisplayOrder
			fROM @EntityAttributeList AA
			left join @EntityAttributeDefaultValueList aab on aab.GlobalAttributeId=AA.GlobalAttributeId
			left join @EntityAttributeValidationList vl on vl.GlobalAttributeId=aa.GlobalAttributeId
			LEFT JOIN @EntityAttributeValueList BB ON BB.GlobalAttributeId=AA.GlobalAttributeId
		    and ( (aab.GlobalAttributeDefaultValueId=bb.GlobalAttributeDefaultValueId	)
			or  ( bb.MediaId is not null and isnull(vl.ValidationName,'')='IsAllowMultiUpload'  and bb.GlobalAttributeDefaultValueId is null )
			or  ( bb.MediaId is  null and  bb.GlobalAttributeDefaultValueId is null ))
			order by GlobalEntityId,AttributeGroupDisplayOrder,GlobalAttributeGroupId,aa.AttributeDisplayOrder, GlobalAttributeId,aab.DisplayOrder,aab.GlobalAttributeDefaultValueId


			SELECT 0 AS ID,CAST(1 AS BIT) AS Status;
		  END TRY
         BEGIN CATCH
		 SELECT ERROR_MESSAGE()
             DECLARE @Status BIT ;
		  SET @Status = 0;
		  DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(),
		   @ErrorLine VARCHAR(100)= ERROR_LINE(),
		    @ErrorCall NVARCHAR(MAX)= null
          SELECT 0 AS ID,CAST(0 AS BIT) AS Status;

          EXEC Znode_InsertProcedureErrorLog
            @ProcedureName = 'Znode_GetGlobalEntityValueAttributeValues',
            @ErrorInProcedure = @Error_procedure,
            @ErrorMessage = @ErrorMessage,
            @ErrorLine = @ErrorLine,
            @ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO


IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetCommonTaxClass')
BEGIN 
	DROP PROCEDURE Znode_GetCommonTaxClass
END
GO
CREATE PROCEDURE [dbo].[Znode_GetCommonTaxClass]
(
   @PortalId       INT =  0 
  ,@ProfileId      INT =0 
  ,@TaxClassIds VARCHAR(2000) = ''  OUT
  ,@UserId          INT = 0 
 )
 AS 
 /*
   Summary :- This  procedure is used to get the tax class on the basis of profiel and portal 
   Unit Testing 
   DECLARE @grtrtr VARCHAR(2000)
   EXEC Znode_GetCommonTaxClass 1,0,@grtrtr OUT , 8  SELECT @grtrtr

 */
 BEGIN 
  BEGIN TRY 
   SET NOCOUNT ON 

	  DECLARE @TBL_Profileids TABLE(ProfileId INT )
	  IF @UserId = -1 
	  BEGIN 
	   INSERT INTO @TBL_Profileids (ProfileId)
	   SELECT ProfileId 
	   FROM ZnodePortalProfile 
	   WHERE IsDefaultAnonymousProfile = 1 
       AND PortalId = @PortalId
    
	  END 
	  ELSE 
	  BEGIN 

	   INSERT INTO @TBL_Profileids (ProfileId)
	   SELECT ProfileId 
	   FROM ZnodePortalProfile  ZPP 
	   WHERE 	    
	   PortalId = @PortalId
	   AND EXISTS (SELECT TOP 1 1 FROM ZnodeUserProfile ZUP  WHERE  ZUP.UserId = @UserId AND  ZUP.ProfileId = ZPP.ProfileId )

	  END 

	   IF EXISTS (SELECT TOP 1 1 FROM ZnodeProfile ZP INNER JOIN @TBL_Profileids TBP ON ( TBP.ProfileId =ZP.ProfileId AND TaxExempt  = 1   ))
	   OR NOT EXISTS (SELECT TOP 1 1 FROM @TBL_Profileids)
	   BEGIN 
			SET @TaxClassIds = ''
	   END   
       ELSE 
	   BEGIN 
	      	SET @TaxClassIds = SUBSTRING(	(    SELECT  ',' +CAST(ZPTC.TaxClassId   AS VARCHAR(50))
																	     FROM ZnodePortalTaxClass ZPTC 
                                                                         WHERE PortalId = @PortalId FOR XML PATH ('')  ) ,2 ,4000) 
	   END 

	 END TRY 
	 BEGIN CATCH 
	   DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetCommonTaxClass @PortalId = '+CAST(@PortalId AS VARCHAR(50))+',@ProfileId='+CAST(@ProfileId AS VARCHAR(50))+',@TaxClassIds='+@TaxClassIds+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetCommonTaxClass',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
	 END CATCH 
 END
GO


IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetOmsQuoteList')
BEGIN 
	DROP PROCEDURE Znode_GetOmsQuoteList
END
GO
CREATE PROCEDURE [dbo].[Znode_GetOmsQuoteList]  
(   
  @WhereClause NVARCHAR(MAX),  
  @Rows        INT            = 100,  
  @PageNo      INT            = 1  ,  
  @Order_BY    VARCHAR(1000)  = '' ,  
  @RowsCount   INT OUT             ,  
  @AccountId   INT,  
  @UserId      INT            = 0,   
  @IsPendingPayment BIT = 0  ,   
  @IsParentPendingOrder  BIT = 1   
  )  
AS   
   /*  
  Summary :- This procedure is used to get the Quote list of account and Users  
    Fn_GetRecurciveAccounts is used to fetch AccountId and Its recursive ParentId    
    @InnerWhereClause contains AccountId fetched from the Function Fn_GetRecurciveAccounts   
    OrderDetails are fetched from the tables filtered by AccountId Present in @InnerWhereClause  
    OrderDetails are fetched in Descending order of OmsQuoteId  
     Unit Testing   
   
     EXEC Znode_GetOmsQuoteList '(PortalId in(''1'',''2'',''3'',''6'')) ' ,@RowsCount = 0 ,@AccountId = 0,@UserId = 0    
  
*/  
     BEGIN  
         BEGIN TRY  
             SET NOCOUNT ON;  
             DECLARE @SQL NVARCHAR(MAX)= '', @InnerWhereClause VARCHAR(MAX)= '', @ProcessType  varchar(50)='Quote',@QuoteFilter NVARCHAr(max)='';  
  
             DECLARE @TBL_QuoteDetails TABLE (OmsQuoteId INT,UserName NVARCHAR(300),AccountName NVARCHAR(400),QuoteOrderTotal NUMERIC(28, 6),[OrderStatus] VARCHAR(300),  
             CreatedDate DATETIME,StoreName NVARCHAR(Max),CurrencyCode VARCHAR(100),CultureCode VARCHAR(100),RowId INT,CountNo INT,CreatedByName NVARCHAr(max) ,ModifiedByName NVARCHAR(max),IsConvertedToOrder bit);  
  
     
             IF @UserId <> 0  AND @IsParentPendingOrder   = 1   
     
                 BEGIN  
                     SET @InnerWhereClause = ' AND '''+CAST(@UserId AS VARCHAR(max))+''' = ZU.UserId ';  
                     
                 END  
             ELSE IF @IsParentPendingOrder   = 0   
                 BEGIN  
                    SET @InnerWhereClause = ' AND  EXISTS (SELECT TOP 1 1 FROM [dbo].[Fn_GetRecurciveUserId] ('+CAST(@UserId AS VARCHAR(50))+','''+@ProcessType+''') SP WHERE (SP.UserId = ZU.UserId OR SP.UserId IS NULL) AND '''+CAST(@UserId AS VARCHAR(max))+''' <> ZU.UserId )'; 
 
      SET @QuoteFilter =' AND EXISTS (SELECT TOP 1 1 FROM ZnodeOMSQuoteApproval WR WHERE WR.OmsQuoteId = ZOQ.OmsQuoteId AND Wr.ApproverUserId ='+CAST(@UserId AS VARCHAR(50))+' ) ';  
  
     END  
    ELSE   
    BEGIN   
      SET @InnerWhereClause = ''  
    END     
        
    IF @IsPendingPayment =1   
    BEGIN   
     
     SET @InnerWhereClause = @InnerWhereClause+' AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodeUserGlobalAttributeValue a   
    INNER JOIN ZnodeUserGlobalAttributeValueLocale b  on (b.UserGlobalAttributeValueId = a.UserGlobalAttributeValueId)  
    INNER JOIN ZnodeGlobalAttribute c ON (c.GlobalAttributeid = a.GlobalAttributeId )  
    WHERE c.AttributeCOde = ''BillingAccountNumber'' AND a.UserId =  ZU.UserId AND b.AttributeValue = '''' ) AND ZOQ.IsPendingPayment =  1    '  
       
    END   
    ELSE   
    BEGIN  
       SET @InnerWhereClause = @InnerWhereClause+' AND ZOQ.IsPendingPayment = 0   '  
    END   
  
    SET @InnerWhereClause = @InnerWhereClause + CASE WHEN @AccountId > 0 THEN ' AND ZA.AccountId ='+CAST(@AccountId AS VARCHAR(200)) ELSE '' END   
  
             SET @SQL = '     
    ;With Cte_GetQuoteDetail AS   
    (  
    SELECT Zu.UserId ,ZOQ.OmsQuoteId,ZU.FirstName + CASE WHEN ZU.LastName IS NULL THEN '''' ELSE '' ''+Zu.LastName END UserName , QuoteOrderTotal , ZOOS.OrderStateName [OrderStatus]  
    ,ZOQ.CreatedDate,ZA.Name AccountName,ZP.PortalId,Zp.StoreName , ZCC.CurrencyCode AS CurrencyCode, ZC.CultureCode AS CultureCode ,ZVGD.UserName CreatedByName , ZVGDI.UserName ModifiedByName,  
    case when ZOQ.IsConvertedToOrder IS NULL THEN 0 ELSE ZOQ.IsConvertedToOrder END IsConvertedToOrder,ISNULL(DT.QuoteTypeCode,'''') QuoteTypeCode  
    FROM ZnodeOmsQuote ZOQ  
    INNER JOIN ZnodeUser ZU ON (ZU.UserId = ZOQ.UserId)  
    LEFT JOIN ZnodeUserPortal ZUP ON ZU.UserId = ZUP.UserId  
    inner JOIN ZnodePortal ZP ON ZP.PortalId = Zoq.PortalId  
    '+CASE WHEN @IsParentPendingOrder = 0 THEN ' LEFT JOIN ZnodeOMSQuoteApproval TYUI ON (TYUI.OmsQuoteId = ZOQ.OmsQuoteId AND TYUI.ApproverUserId ='+CAST(@UserId AS VARCHAR(50))+') ' ELSE '' END +'  
    LEFT JOIN ZnodePortalUnit ZPU ON (ZPU.PortalId = Zp.PortalId)  
    LEFT JOIN ZnodeCulture ZC ON (ZPU.CultureId = ZC.CultureId)    --- Changed join condition from CurrencyId to CultureId  
	LEFT JOIN ZnodeCurrency ZCC ON (ZC.CurrencyId = ZCC.CurrencyId)    --- Joined ZnodeCulture and ZnodeCurrency 
    LEFT JOIN ZnodeOmsOrderState ZOOS ON (ZOOS.OmsOrderStateId = '+CASE WHEN @IsParentPendingOrder = 0 THEN 'TYUI.OmsOrderStateId ' ELSE 'ZOQ.OmsOrderStateId' END  +' )   
    LEFT JOIN ZnodeAccount ZA ON (ZA.AccountId = ZU.AccountId )  
    LEFT JOIN [dbo].[View_GetUserDetails]  ZVGD ON (ZVGD.UserId = ZOQ.CreatedBy )  
    LEFT JOIN [dbo].[View_GetUserDetails]  ZVGDI ON (ZVGDI.UserId = ZOQ.ModifiedBy)  
    LEFT JOIN ZnodeOmsQuoteType DT ON (DT.OmsQuoteTypeId = ZOQ.OmsQuoteTypeId)  
    WHERE 1=1'+' '+@InnerWhereClause+@QuoteFilter+'  
  
   )  
    , Cte_GetQuote AS   
    (  
    SELECT OmsQuoteId,UserName ,AccountName , QuoteOrderTotal QuoteAmount, [OrderStatus]  ,CreatedDate ,StoreName,CurrencyCode, CultureCode,CreatedByName , ModifiedByName ,IsConvertedToOrder,'+dbo.Fn_GetPagingRowId(@Order_BY,'CreatedDate DESC,OmsQuoteId DESC')+',Count(*)Over() CountNo   
    FROM Cte_GetQuoteDetail  
     WHERE 1=1   
      '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'  
    )  
    SELECT OmsQuoteId,UserName ,AccountName ,  QuoteAmount, [OrderStatus]  ,CreatedDate ,StoreName,CurrencyCode, CultureCode,RowId,CountNo,CreatedByName , ModifiedByName,IsConvertedToOrder  
    FROM Cte_GetQuote   
   '+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)  
            
    PRINT  @SQL  
        
             INSERT INTO @TBL_QuoteDetails (OmsQuoteId, UserName, AccountName, QuoteOrderTotal ,OrderStatus, CreatedDate, StoreName,CurrencyCode, CultureCode, RowId ,CountNo,CreatedByName , ModifiedByName,IsConvertedToOrder)        
    EXEC (@SQL);  
             SET @RowsCount = ISNULL((SELECT TOP 1 CountNo FROM @TBL_QuoteDetails), 0);  
  
             SELECT OmsQuoteId,UserName,AccountName,QuoteOrderTotal,[OrderStatus],CreatedDate,StoreName,CurrencyCode, CultureCode,CreatedByName , ModifiedByName,IsConvertedToOrder  
             FROM @TBL_QuoteDetails;  
      
         END TRY  
         BEGIN CATCH  
              DECLARE @Status BIT ;  
       SET @Status = 0;  
       DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetOmsQuoteList @WhereClause = '+CAST(@WhereClause AS VARCHAR(max)
)+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@AccountId='+CAST(@AccountId AS VARCHAR(50))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@PortalId='+''
+',@Status='+CAST(@Status AS VARCHAR(10));  
                    
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                      
      
             EXEC Znode_InsertProcedureErrorLog  
    @ProcedureName = 'Znode_GetOmsQuoteList',  
    @ErrorInProcedure = @Error_procedure,  
    @ErrorMessage = @ErrorMessage,  
    @ErrorLine = @ErrorLine,  
    @ErrorCall = @ErrorCall;  
         END CATCH;  
     END
GO


IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetOrderByPagingProduct')
BEGIN 
	DROP PROCEDURE Znode_GetOrderByPagingProduct
END
GO
CREATE PROCEDURE [dbo].[Znode_GetOrderByPagingProduct]
(
 @Order_by  Nvarchar(max)
 ,@Rows     INT =10 
 ,@PageNo   INT =1 
 ,@PimProductId TransferId Readonly 
 ,@AttributeCode VARCHAR(max)= ''
 ,@localeId INT  
 ,@PimCategoryHierarchyId INT  = 0
 ,@PortalId INT = 0 
)
AS 
BEGIN 
 SET NOCOUNT ON 
 SET @AttributeCode = CASE WHEN @AttributeCode = '' OR  @AttributeCode IS NULL THEN REPLACE(REPLACE (@Order_by , ' DESC',''),' ASC','')

  ELSE @AttributeCode END 
 DECLARE @StartId INT =  CASE WHEN @PageNo = 1 OR @PageNo = 0 THEN 1 ELSE ((@PageNo-1)*@Rows)+1 END 
 DECLARE @EndId INT = CASE WHEN @PageNo = 0 THEN @Rows ELSE @PageNo*@Rows END
 ,@DefaultLocaleId INT = dbo.Fn_GetDefaultLocaleID()   
 
 DECLARE @AttributeTypeName NVARCHAR(2000)= ''

 SELECT TOP 1 @AttributeTypeName = AttributeTypeName 
 FROM ZnodePimAttribute ZPA 
 INNER JOIN ZnodeAttributeType ZTY ON (ZTY.AttributeTypeId = ZPA.AttributeTypeId)
 WHERE ZPA.AttributeCode = @AttributeCode
 
 IF  @Order_by = '' 
 BEGIN 
  
  ;WIth Cte_getData AS ( 
  
  SELECT Id , ROW_NUMBER()Over(Order by ZPP.ModifiedDate DESC,ZPP.PimProductId) RowId  
  FROM @PimProductId TBLP
  INNER JOIN ZnodePimProduct ZPP ON (TBLP.Id= ZPP.PimProductId)
  
  ) 
  
  SELECT ID PimProductId ,RowId
  FROM Cte_GetData CTE
  WHERE RowId BETWEEN @StartId AND @EndId
 
 END 

  IF @PimCategoryHierarchyId <> 0 AND  @Order_by LIKE 'DisplayOrder%'
 BEGIN 
    ;WIth Cte_getData AS (
  SELECT Id , CASE WHEN @Order_by LIKE  '% DESC' THEN 
    ROW_NUMBER()Over(Order by ZPP.DisplayOrder DESC) ELSE 
	  ROW_NUMBER()Over(Order by ZPP.DisplayOrder ASC) END  RowId 
  FROM @PimProductId TBLP
  LEFT JOIN ZnodePimCatalogCategory ZPP ON (TBLP.Id= ZPP.PimProductId AND ZPP.PimCategoryHierarchyId= @PimCategoryHierarchyId )
  ) 
  
  SELECT ID PimProductId ,RowId
  FROM Cte_GetData CTE
  WHERE RowId BETWEEN @StartId AND @EndId

 END 
 ELSE 
  IF @PimCategoryHierarchyId <> 0 AND  @Order_by LIKE 'Price%'
 BEGIN 
         DECLARE @tbl_ProductPricingSkuOrderBy TABLE (sku nvarchar(200),RetailPrice numeric(28,6),SalesPrice numeric(28,6),TierPrice numeric(28,6),
						TierQuantity numeric(28,6),CurrencyCode varchar(200),CurrencySuffix varchar(2000),CultureCode varchar(2000), ExternalId NVARCHAR(2000))	
	     DECLARE @SKUS VARCHAR(max) 
				,@userId INT = 0,@Date DATETIME  = dbo.FN_getDate() 

				SELECT @SKUS = COALESCE(@SKUS+',' ,'') + SKU
				FROM ZnodePublishProductDetail a 
				INNER JOIN ZnodePublishProduct b ON ( a.PublishProductId =b.PublishProductId ) 
				INNER JOIN ZnodePimCatalogCategory f ON (f.PimProductId = b.PimProductId AND f.PimCategoryHierarchyId= @PimCategoryHierarchyId)
				INNER JOIN ZnodePortalCatalog c ON (c.PublishCatalogId = b.PublishCatalogId)
				WHERE c.PortalId = @PortalId 
				AND EXISTS (SELECT TOP 1  1 FROM @PimProductId R WHERE b.PimProductId = R.Id)
				AND a.LocaleId =dbo.Fn_GetDefaultLocaleId()

			DECLARE @Id TransferId 

			INSERT INTO @tbl_ProductPricingSkuOrderBy		
			SELECT * FROM [dbo].[FN_GetPublishProductPricingBySku]( @SKUS,  @PortalId ,@Date, @userid,@Id)

		

    ;WIth Cte_getData AS (
  SELECT Id , CASE WHEN @Order_by LIKE  '% DESC' THEN 
    ROW_NUMBER()Over(Order by ISNULL(b.RetailPrice,0) DESC) ELSE 
	  ROW_NUMBER()Over(Order by ISNULL(b.RetailPrice,0) ASC) END  RowId 
  FROM @PimProductId TBLP
  LEFT JOIN View_LoadManageProductInternal ZPP ON (TBLP.Id= ZPP.PimProductId AND ZPP.AttributeCode= 'SKU' )
  LEFT JOIN @tbl_ProductPricingSkuOrderBy b ON (b.SKU = ZPP.AttributeValue) 
  ) 
  
  SELECT ID PimProductId ,RowId
  FROM Cte_GetData CTE
  WHERE RowId BETWEEN @StartId AND @EndId

 END 
 ELSE  
 IF  ( @Order_by LIKE 'PimProductId%'  OR @Order_by LIKE 'DisplayOrder%' ) AND @PimCategoryHierarchyId = 0 
 BEGIN 
  ;WIth Cte_getData AS (
  SELECT Id , CASE WHEN @Order_by LIKE  '% DESC' THEN 
    ROW_NUMBER()Over(Order by ZPP.PimProductId DESC) ELSE 
	  ROW_NUMBER()Over(Order by ZPP.PimProductId ASC) END  RowId 
  FROM @PimProductId TBLP
  INNER JOIN ZnodePimProduct ZPP ON (TBLP.Id= ZPP.PimProductId)
  ) 
  SELECT ID PimProductId ,RowId
  FROM Cte_GetData CTE
  WHERE RowId BETWEEN @StartId AND @EndId
 END 
 ELSE IF  @Order_by LIKE  'ModifiedDate%' 
 BEGIN 
  ;with Cte_GetData AS
  (
  SELECT Id , CASE WHEN @Order_by LIKE  '% DESC' THEN 
    ROW_NUMBER()Over(Order by ZPAV.ModifiedDate DESC ,ZPAV.PimProductId) ELSE 
	  ROW_NUMBER()Over(Order by ZPAV.ModifiedDate ASC ,ZPAV.PimProductId) END  RowId 
  FROM  @PimProductId TBLP
  INNER JOIN ZnodePimAttributeValue ZPAV ON (TBLP.Id = ZPAV.PimProductId)
  INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ZPAV.PimAttributeId) 
  WHERE ZPA.AttributeCode = CASE WHEN @AttributeCode = '' OR @AttributeCode = 'ModifiedDate'  THEN 'SKU' ELSE @AttributeCode END 
  )
  SELECT ID PimProductId ,RowId
  FROM Cte_GetData CTE
  WHERE RowId BETWEEN @StartId AND @EndId
 END
  ELSE IF  @Order_by LIKE  'PublishStatus%' 
 BEGIN 
  
  ;With Cte_GetData AS
  (
    SELECT TBLP.Id ,CASE WHEN ZPP.IsProductPublish  IS NULL THEN 'Not Published' 
				WHEN ZPP.IsProductPublish = 0 THEN 'Draft'
				ELSE  'Published' END PublishStatus 
  FROM  @PimProductId TBLP
  INNER JOIN ZnodePimProduct ZPP oN (ZPP.PimProductId = TBLP.Id) 
  )
  , Cte_Attruyr AS 
  (
  SELECT Id , CASE WHEN @Order_by LIKE  '% DESC' THEN 
    ROW_NUMBER()Over(Order by PublishStatus DESC , Id ) ELSE 
	  ROW_NUMBER()Over(Order by PublishStatus ASC ,  Id ) END  RowId 
  FROM  Cte_GetData
  
  )
  SELECT ID PimProductId ,RowId
  FROM Cte_Attruyr CTE
  WHERE RowId BETWEEN @StartId AND @EndId
 END
 ELSE IF  @Order_by LIKE  'AttributeFamily%' 
 BEGIN 
 ;With Cte_attributeValue AS 
   (
	 SELECT ZPAF.PimAttributeFamilyId,FamilyCode,AttributeFamilyName ,ZPFL.LocaleId
	 FROM ZnodePimAttributeFamily ZPAF
	 INNER JOIN ZnodePimFamilyLocale ZPFL ON (ZPFL.PimAttributeFamilyId = ZPAF.PimAttributeFamilyId) 
	 WHERE ZPFL.LocaleId IN (@DefaultLocaleId,@LocaleId)
	 ) 
   , Cte_AttributeValueAttribute AS (
	  SELECT PimAttributeFamilyId,FamilyCode,AttributeFamilyName
	   FROM Cte_attributeValue RTY 
	   WHERE LocaleId = @LocaleId
      )
   , Cte_AttributeValueTht AS (
      SELECT PimAttributeFamilyId,FamilyCode,AttributeFamilyName
	  FROM Cte_AttributeValueAttribute
	  UNION ALL 
	  SELECT PimAttributeFamilyId,FamilyCode,AttributeFamilyName
	  FROM Cte_attributeValue TYY  
	  WHERE NOT EXISTS (SELECT TOP 1 1 FROM Cte_AttributeValueAttribute THE WHERE THE.PimAttributeFamilyId = TYY.PimAttributeFamilyId )
	  AND TYY.LocaleId = @DefaultLocaleId
	  )
  
  SELECT PimAttributeFamilyId,FamilyCode,AttributeFamilyName
  INTO #TBL_FamilyLocale
  FROM Cte_AttributeValueTht 

 ;With Cte_GetData AS (
    SELECT  TBLAV.PimProductId ,CASE WHEN @Order_by LIKE  '% DESC' THEN 
    ROW_NUMBER()Over(Order by THY.AttributeFamilyName DESC ,TBLAV.PimProductId) ELSE 
	  ROW_NUMBER()Over(Order by THY.AttributeFamilyName ASC ,TBLAV.PimProductId) END  RowId 
	FROM ZnodePimProduct TBLAV 
	INNER JOIN #TBL_FamilyLocale THY ON (THY.PimAttributeFamilyId = TBLAV.PimAttributeFamilyId )
  )
  SELECT PimProductId ,RowId
  FROM Cte_GetData CTE
  WHERE RowId BETWEEN @StartId AND @EndId
 
 END
 ELSE IF @AttributeTypeName IN ('Text','Number','Datetime','Yes/No')
 BEGIN 
  IF @DefaultLocaleId = @LocaleID 
  BEGIN 
  ;With Cte_getData AS ( 
  SELECT VPP.PimProductId  ,CASE WHEN @Order_by LIKE  '% DESC' THEN 
    ROW_NUMBER()Over(Order by VPP.AttributeValue DESC ,VPP.PimProductId) ELSE  
	  ROW_NUMBER()Over(Order by VPP.AttributeValue ASC ,VPP.PimProductId) END RowId 
  FROM @PimProductId TBLP 
  INNER JOIN View_PimProducttextValue VPP ON (TBLP.Id = VPP.PimProductId ) 
  WHERE AttributeCode = @AttributeCode 
  AND LocaleId = @LocaleID
  ) 
  SELECT PimProductId ,RowId
  FROM Cte_GetData CTE
  WHERE RowId BETWEEN @StartId AND @EndId
  END 
  ELSE 
  BEGIN 
   ;With Cte_AttributeDetails AS 
	 (
	 SELECT TBLAV.ID PimProductId,ZPAVL.AttributeCode,ZPAVL.AttributeValue,ZPAVL.LocaleId,COUNT(*)Over(Partition By TBLAV.ID,ZPAVL.AttributeCode ORDER BY TBLAV.ID,ZPAVL.AttributeCode  ) RowIdIn
	 FROM @PimProductId   TBLAV 
	 INNER JOIN View_PimProducttextValue ZPAVL ON (ZPAVL.PimProductId = TBLAV.id )
	 WHERE (LocaleId = @DefaultLocaleId OR LocaleId = @LocaleId  )
	 AND AttributeCode = @AttributeCode
	 ) 
	 ,Cte_DataLocale AS 
	 (
	 SELECT  TBLAV.PimProductId ,CASE WHEN @Order_by LIKE  '% DESC' THEN 
       ROW_NUMBER()Over(Order by TBLAV.AttributeValue DESC ,TBLAV.PimProductId) ELSE  
	    ROW_NUMBER()Over(Order by TBLAV.AttributeValue ASC ,TBLAV.PimProductId) END RowId
  	 FROM Cte_AttributeDetails TBLAV 
	 WHERE LocaleId = CASE WHEN RowIdIn =2 THEN @localeId ELSE @DefaultLocaleId END 
	 ) 
	 SELECT PimProductId ,RowId
	 FROM Cte_DataLocale 
	 WHERE RowId BETWEEN @StartId AND @EndId
  END 
 END
 ELSE IF @AttributeTypeName IN ('Simple Select','Multi Select') 
  BEGIN 
 DECLARE @PimAttributeId TransferId 

 INSERT INTO @PimAttributeId 
 SELECT PimAttributeId
 FROM  ZnodePimAttribute 
 WHERE AttributeCode = @AttributeCode  
 CREATE TABLE #TBL_AttributeDefaultValue ( PimAttributeId INT ,
              AttributeDefaultValueCode VARCHAR(max),IsEditable INT,AttributeDefaultValue NVARCHAR(max),DisplayOrder INT,PimAttributeDefaultValueId INT  ) 
 
			 -- here collect the both locale data 
             SELECT   VIPDV.PimAttributeId,VIPDV.AttributeDefaultValueCode,VIPDV.IsEditable,VIPDVL.AttributeDefaultValue,VIPDVL.LocaleId,VIPDV.PimAttributeDefaultValueId,VIPDV.DisplayOrder
             
			 INTO #Cte_DefaultValueLocale
			 FROM [dbo].[ZnodePimAttributeDefaultValue] VIPDV
			 INNER JOIN [dbo].[ZnodePimAttributeDefaultValueLocale] VIPDVL ON (VIPDVL.PimAttributeDefaultValueId = VIPDV.PimAttributeDefaultValueId) 
             WHERE VIPDVL.LocaleId IN(@DefaultLocaleId, @LocaleId) 
             AND EXISTS
             (
                SELECT TOP 1 1
                FROM @PimAttributeId SP
                WHERE SP.id = VIPDV.PimAttributeId
             )

			 -- filter for first locale
             ;with Cte_DefaultValueFirstLocale
             AS (SELECT CTDVL.PimAttributeId,CTDVL.AttributeDefaultValueCode,CTDVL.IsEditable,CTDVL.AttributeDefaultValue,CTDVL.PimAttributeDefaultValueId,CTDVL.DisplayOrder
                 FROM #Cte_DefaultValueLocale CTDVL
                 WHERE LocaleId = @LocaleId	 
                ),

			 -- get data for second locale if not exists for firts locale 
             Cte_DefaultValueSecondLocale
             AS (SELECT CTDVFL.PimAttributeId,CTDVFL.AttributeDefaultValueCode,CTDVFL.IsEditable,CTDVFL.AttributeDefaultValue,CTDVFL.PimAttributeDefaultValueId,CTDVFL.DisplayOrder
                 FROM Cte_DefaultValueFirstLocale CTDVFL
                 UNION ALL
                 SELECT CTDVL.PimAttributeId,CTDVL.AttributeDefaultValueCode,CTDVL.IsEditable,CTDVL.AttributeDefaultValue,CTDVL.PimAttributeDefaultValueId,CTDVL.DisplayOrder
                 FROM #Cte_DefaultValueLocale CTDVL
                 WHERE LocaleId = @DefaultLocaleId 
                 AND NOT EXISTS
                  (
                      SELECT TOP 1 1
                      FROM Cte_DefaultValueFirstLocale CTDVFL
                      WHERE CTDVFL.PimAttributeDefaultValueId = CTDVL.PimAttributeDefaultValueId
                  ))

                 

    
 INSERT INTO #TBL_AttributeDefaultValue(PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder,PimAttributeDefaultValueId)
  SELECT PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder,PimAttributeDefaultValueId
                  FROM Cte_DefaultValueSecondLocale;


  IF @DefaultLocaleId = @LocaleID 
  BEGIN
    
      ;with Cte_AttributeValue AS 
	  (
	  SELECT  PimProductId , SUBSTRING((SELECT ','+AttributeDefaultValue 
											FROM #TBL_AttributeDefaultValue TTR 
											INNER JOIN ZnodePimProductAttributeDefaultValue ZPAVL ON (TTR.PimAttributeDefaultValueId = ZPAVL.PimAttributeDefaultValueId )
											WHERE ZPAVL.PimAttributeValueId = ZPAV.PimAttributeValueId  
											AND ZPAVL.LocaleId = @localeId 
											FOR XML PATH('') ),2,4000) AttributeValue
	  FROM @PimProductId TBLP  
	  INNER JOIN ZnodePimAttributeValue ZPAV  ON (TBLP.ID = ZPAV.PimProductId )
	  INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ZPAV.PimAttributeId)
	  WHERE AttributeCode = @AttributeCode
	 ) 
	 ,CTe_GetDataIn AS 
	 (
	 SELECT PimProductId  ,CASE WHEN @Order_by LIKE  '% DESC' THEN 
       ROW_NUMBER()Over(Order by VPP.AttributeValue DESC ,VPP.PimProductId) ELSE  
	    ROW_NUMBER()Over(Order by VPP.AttributeValue ASC ,VPP.PimProductId) END RowId
	 FROM  Cte_AttributeValue  VPP
     ) 
	 SELECT PimProductId ,RowId
	 FROM CTe_GetDataIn 
	 WHERE RowId BETWEEN @StartId AND @EndId 
   END 
   ELSE 
   BEGIN
    SELECT ZPAV.PimAttributeValueId,ZPAVL.PimAttributeDefaultValueId , ZPAVL.LocaleId ,COUNT(*)Over(Partition By ZPAV.PimAttributeValueId ,ZPAV.PimProductId ORDER BY ZPAV.PimAttributeValueId ,ZPAV.PimProductId  ) RowId
			   INTO #temp_Table 
			   FROM @PimProductId TBLP  
	           INNER JOIN ZnodePimAttributeValue ZPAV  ON (TBLP.ID = ZPAV.PimProductId )
			   INNER JOIN ZnodePimProductAttributeDefaultValue ZPAVL ON (ZPAVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
			   WHERE (ZPAVL.LocaleId = @localeId  OR ZPAVL.LocaleId = @DefaultlocaleId )

   ;with Cte_AttributeValue AS 
	  (
	  SELECT  PimProductId ,SUBSTRING((SELECT ','+AttributeDefaultValue FROM #TBL_AttributeDefaultValue TTR 
				INNER JOIN #temp_Table  ZPAVL ON (TTR.PimAttributeDefaultValueId = ZPAVL.PimAttributeDefaultValueId )
				WHERE ZPAVL.PimAttributeValueId = ZPAV.PimAttributeValueId  
				AND ZPAVL.LocaleId = CASE WHEN ZPAVL.RowId = 2 THEN @LocaleId  ELSE @DefaultLocaleId  END  
				FOR XML PATH('') ),2,4000) AttributeValue
	  FROM @PimProductId TBLP  
	  INNER JOIN ZnodePimAttributeValue ZPAV  ON (TBLP.ID = ZPAV.PimProductId )
	  INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ZPAV.PimAttributeId)
	  WHERE AttributeCode = @AttributeCode
	 ) 
	 ,CTe_GetDataIn AS 
	 (
	 SELECT PimProductId  ,CASE WHEN @Order_by LIKE  '% DESC' THEN 
       ROW_NUMBER()Over(Order by VPP.AttributeValue DESC ,VPP.PimProductId) ELSE  
	    ROW_NUMBER()Over(Order by VPP.AttributeValue ASC ,VPP.PimProductId) END RowId
	 FROM  Cte_AttributeValue  VPP
     ) 
	 SELECT PimProductId ,RowId
	 FROM CTe_GetDataIn 
	 WHERE RowId BETWEEN @StartId AND @EndId 
   
   END 
    DROP TABLE #TBL_AttributeDefaultValue
  END 
  ELSE IF @AttributeTypeName IN ('Text Area') 
  BEGIN 
   IF @DefaultLocaleId = @LocaleID 
   BEGIN 
   ;With Cte_getData AS ( 
    SELECT VPP.PimProductId  ,CASE WHEN @Order_by LIKE  '% DESC' THEN 
    ROW_NUMBER()Over(Order by VPP.AttributeValue DESC ,VPP.PimProductId) ELSE  
	  ROW_NUMBER()Over(Order by VPP.AttributeValue ASC ,VPP.PimProductId) END RowId 
  FROM @PimProductId TBLP 
  INNER JOIN View_PimProductTextAreaValue VPP ON (TBLP.Id = VPP.PimProductId ) 
  WHERE AttributeCode = @AttributeCode 
  AND LocaleId = @LocaleID
  ) 
  SELECT PimProductId ,RowId
  FROM Cte_GetData CTE
  WHERE RowId BETWEEN @StartId AND @EndId
   END 
   ELSE 
   BEGIN 
   ;With Cte_AttributeDetails AS 
	 (
	 SELECT TBLAV.ID PimProductId,ZPAVL.AttributeCode,ZPAVL.AttributeValue,ZPAVL.LocaleId,COUNT(*)Over(Partition By ZPAVL.PimProductId,ZPAVL.AttributeCode ORDER BY ZPAVL.PimProductId,ZPAVL.AttributeCode  ) RowIdIn
	 FROM @PimProductId   TBLAV 
	 INNER JOIN View_PimProductTextAreaValue ZPAVL ON (ZPAVL.PimProductId = TBLAV.id )
	 WHERE (LocaleId = @DefaultLocaleId OR LocaleId = @LocaleId  )
	 AND AttributeCode = @AttributeCode
	 ) 
	 ,Cte_DataLocale AS 
	 (
	 SELECT  TBLAV.PimProductId ,CASE WHEN @Order_by LIKE  '% DESC' THEN 
       ROW_NUMBER()Over(Order by TBLAV.AttributeValue DESC ,TBLAV.PimProductId) ELSE  
	    ROW_NUMBER()Over(Order by TBLAV.AttributeValue ASC ,TBLAV.PimProductId) END RowId
  	 FROM Cte_AttributeDetails TBLAV 
	 WHERE LocaleId = CASE WHEN RowIdIn = 2 THEN @localeId ELSE @DefaultLocaleId END 
	 ) 
	 SELECT PimProductId ,RowId
	 FROM Cte_DataLocale 
	 WHERE RowId BETWEEN @StartId AND @EndId
   END 
END 
END
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPaymentSetting')
BEGIN 
	DROP PROCEDURE Znode_GetPaymentSetting
END
GO
CREATE PROCEDURE [dbo].[Znode_GetPaymentSetting]
(
  @WhereClause  NVARCHAR(Max)  = '',
  @Rows         INT            = 100,
  @PageNo       INT            = 1,
  @Order_BY     VARCHAR(1000)  = '',
  @RowsCount    INT OUT            ,
  @PortalId     INT            = 0 ,
  @ProfileId    INT            = 0 ,
  @UserId       INT			   = 0 ,
  @IsAssociated INT            = 0
)
AS
 /*
   Summary :- This procedure is used to get the associated and Unassociated list of paymentsetting for portal and profile

   Unit Testing

   DECLARE @profilei int = 0
   EXEC Znode_GetPaymentSetting @WhereClause = '', @RowsCount =  @profilei OUT ,@PortalId = 0 ,@ProfileId= 0 ,@IsAssociated = 0 ,@UserId= 0  SELECT  @profilei

 */
 BEGIN
  BEGIN TRY
   SET NOCOUNT ON
     DECLARE @SQL NVARCHAR(MAX)= '',@FilterWhereClause VARCHAR(2000) = '' ,@InternalOrderBy VARCHAR(2000)= ''

	 DECLARE @TBL_PaymentSetting TABLE (PaymentSettingId INT, PaymentApplicationSettingId INT,PaymentTypeId INT,PaymentGatewayId INT
										,PaymentName VARCHAR(600),IsActive BIT,DisplayOrder INT,IsTestMode BIT,IsPoDocUploadEnable BIT
										,IsPoDocRequire BIT,CreatedBy INT,CreatedDate DATETIME,ModifiedBy INT,ModifiedDate DATETIME
										,PortalId INT,StoreName NVARCHAR(max),IsAssociated BIT,ProfileId int,ProfileName NVARCHAR(200),PaymentTypeName VARCHAr(500),GatewayName VARCHAR(300),RowId INT,CountNo INT
										,PaymentDisplayName nvarchar(1200),PaymentExternalId VARCHAR(100),IsApprovalRequired BIT,PaymentCode VARCHAR(200),GatewayCode VARCHAR(200),IsCallToPaymentAPI BIT,IsBillingAddressOptional Bit,IsOABRequired BIT,PortalPaymentGroupId INT )


     IF ISNULL(@UserId,0) <> 0  OR (ISNULL(@PortalId,0) > 0 AND ISNULL(@ProfileId,0) > 0)
	 BEGIN
	  DECLARE  @PortalIds VARCHAR(2000) = '' ,@ProfileIds VARCHAR(2000) = '' ,@PaymentSettingIds VARCHAR(2000)
	  IF ISNULL(@UserId,0) <> 0
	  BEGIN
	  SET @PortalIds = @PortalId
	  EXEC Znode_GetUserPortalAndProfile @UserId ,@PortalIds OUT,@ProfileIds OUT
	  END
	  ELSE
	  BEGIN
	   SET @PortalIds = @PortalId
	   SET @ProfileIds = @ProfileId
	  END
	  EXEC Znode_GetCommonPaymentSetting @PortalIds,@ProfileIds,@PaymentSettingIds OUT

	  SET @FilterWhereClause = ' AND  PaymentSettingId IN ('+@PaymentSettingIds+') '

	 END

	 SELECT PaymentSettingId ,ZPPG.PortalPaymentGroupId,ZPA.PortalId 
	 INTO #ZnodePortalPaymentApprovers
	 FROM ZnodePortalPaymentApprovers ZPPA 
	 INNER JOIN [ZnodePortalPaymentGroup] ZPPG ON( ZPPA.PortalPaymentGroupId = ZPPG.PortalPaymentGroupId)  
     INNER JOIN [ZnodePortalApproval] ZPA ON (ZPA.PortalApprovalId = ZPPG.PortalApprovalId) 
	 WHERE  ZPA.EnableApprovalManagement =1 AND ZPA.PortalId = @PortalId AND ZPPG.isActive = 1 



	IF ISNULL(@PortalId,0) > 0 AND (   ISNULL(@ProfileId,0) = 0)
	BEGIN
	 SET @SQL = '
	             ;With Cte_PaymentSetting AS
				 (
				 SELECT  ZPS.PaymentSettingId,ZPS.PaymentApplicationSettingId,ZPS.PaymentTypeId,ZPS.PaymentGatewayId,ZPS.PaymentName,ZPS.IsActive
						,ZPS.DisplayOrder,ZPS.IsTestMode,ZPS.IsPoDocUploadEnable,ZPS.IsPoDocRequire,ZPS.CreatedBy,ZPS.CreatedDate,ZPS.ModifiedBy,ZPS.ModifiedDate
						,ZP.PortalId,ZP.StoreName, CASE WHEN ZPPS.PortalPaymentId IS NULL THEN 0 ELSE 1 END IsAssociated, NULL ProfileId, NULL ProfileName,ZPT.BehaviourType PaymentTypeName,ZPG.GatewayName
						, CASE WHEN ZPPS.PaymentDisplayName IS NULL OR ZPPS.PaymentDisplayName = ''''  THEN ZPS.PaymentDisplayName ELSE ZPPS.PaymentDisplayName END   PaymentDisplayName,  ZPPS.PaymentExternalId ,
						 CASE WHEN YU.PaymentSettingId IS NOT NULL  THEN 1 ELSE 0 END AS IsApprovalRequired , ZPS.PaymentCode, ZPG.GatewayCode,ZPT.IsCallToPaymentAPI, ZPS.IsBillingAddressOptional,ISNULL(ZPS.IsOABRequired,0) IsOABRequired
						 ,YU.PortalPaymentGroupId
				 FROM ZnodePaymentSetting ZPS
				 INNER JOIN ZnodePaymentType  ZPT ON (ZPT.PaymentTypeId = ZPS.PaymentTypeId)
				 LEFT JOIN ZnodePaymentGateway ZPG ON (ZPG.PaymentGatewayId= ZPS.PaymentGatewayId)
				 LEFT JOIN #ZnodePortalPaymentApprovers YU ON (YU.PaymentSettingId = ZPS.PaymentSettingId)
				 CROSS APPLY ZnodePortal ZP
				 LEFT JOIN ZnodePortalPaymentSetting ZPPS on ( ZPPS.PortalId = ZP.PortalId AND ZPPS.PaymentSettingId = ZPS.PaymentSettingId)
				 )

				 '
	 IF @userId <> 0 
	 BEGIN 
		SET @IsAssociated = 1  	
	 END 
	 
	 SET @FilterWhereClause = ' WHERE PortalId = '+CAST(@PortalId AS VARCHAR(50))+'
								AND  IsAssociated = '+CAST(@IsAssociated AS VARCHAR(50))+CASE WHEN @FilterWhereClause = '' THEN ' ' ELSE @FilterWhereClause END 
	 SET @InternalOrderBy = ' PaymentSettingId,PortalId '
    END
	ELSE IF ISNULL(@ProfileId,0) > 0 AND ( ISNULL(@UserId,0) = 0 AND  ISNULL(@PortalId,0) = 0)
	BEGIN
	  SET @SQL = '
	            ;With Cte_PaymenTSetting AS
				 (
				 SELECT  ZPS.PaymentSettingId,ZPS.PaymentApplicationSettingId,ZPS.PaymentTypeId,ZPS.PaymentGatewayId,ZPS.PaymentName,ZPS.IsActive
						,ZPS.DisplayOrder,ZPS.IsTestMode,ZPS.IsPoDocUploadEnable,ZPS.IsPoDocRequire,ZPS.CreatedBy,ZPS.CreatedDate,ZPS.ModifiedBy,ZPS.ModifiedDate
						,NULL PortalId,NULL StoreName, CASE WHEN ZPPS.ProfilePaymentSettingId IS NULL THEN 0 ELSE 1 END IsAssociated ,ZP.ProfileId,ZP.ProfileName,ZPT.BehaviourType PaymentTypeName,ZPG.GatewayName
						,ZPS.PaymentDisplayName	, NULL PaymentExternalId, CASE WHEN YU.PaymentSettingId IS NOT NULL  THEN 1 ELSE 0 END AS IsApprovalRequired  , ZPS.PaymentCode, ZPG.GatewayCode,ZPT.IsCallToPaymentAPI, ZPS.IsBillingAddressOptional,0 IsOABRequired,YU.PortalPaymentGroupId
				 FROM ZnodePaymentSetting ZPS
				 INNER JOIN ZnodePaymentType  ZPT ON (ZPT.PaymentTypeId = ZPS.PaymentTypeId)
				 LEFT JOIN ZnodePaymentGateway ZPG ON (ZPG.PaymentGatewayId= ZPS.PaymentGatewayId)
				 LEFT JOIN #ZnodePortalPaymentApprovers YU ON (YU.PaymentSettingId = ZPS.PaymentSettingId)
				 CROSS APPLY ZnodeProfile ZP
				 LEFT JOIN ZnodeProfilePaymentSetting ZPPS on ( ZPPS.ProfileId = ZP.ProfileId AND ZPPS.PaymentSettingId = ZPS.PaymentSettingId)
				 )
               '
	   SET @FilterWhereClause = ' WHERE ProfileId = '+CAST(@ProfileId AS VARCHAR(50))+'
									AND  IsAssociated = '+CAST(@IsAssociated AS VARCHAR(50))+CASE WHEN @FilterWhereClause = '' THEN ' ' ELSE @FilterWhereClause END 
	  SET @InternalOrderBy = ' PaymentSettingId,ProfileId '
	END
	ELSE
	BEGIN
	  SET @SQL = '
	            ;With Cte_PaymenTSetting AS
				 (
				 SELECT   ZPS.PaymentSettingId,ZPS.PaymentApplicationSettingId,ZPS.PaymentTypeId,ZPS.PaymentGatewayId,ZPS.PaymentName,ZPS.IsActive
						,ZPS.DisplayOrder,ZPS.IsTestMode,ZPS.IsPoDocUploadEnable,ZPS.IsPoDocRequire,ZPS.CreatedBy,ZPS.CreatedDate,ZPS.ModifiedBy,ZPS.ModifiedDate
						,NULL PortalId,NULL StoreName, NULL IsAssociated ,NULL ProfileId,NULL ProfileName,ZPT.BehaviourType PaymentTypeName,ZPG.GatewayName	
						, ZPS.PaymentDisplayName  , NULL PaymentExternalId, CASE WHEN YU.PaymentSettingId IS NOT NULL  THEN 1 ELSE 0 END AS IsApprovalRequired  , ZPS.PaymentCode, ZPG.GatewayCode,ZPT.IsCallToPaymentAPI ,ZPS.IsBillingAddressOptional,ZPS.IsOABRequired,YU.PortalPaymentGroupId
				 FROM ZnodePaymentSetting ZPS
				 INNER JOIN ZnodePaymentType  ZPT ON (ZPT.PaymentTypeId = ZPS.PaymentTypeId)
				 LEFT JOIN ZnodePaymentGateway ZPG ON (ZPG.PaymentGatewayId= ZPS.PaymentGatewayId)
				 LEFT JOIN #ZnodePortalPaymentApprovers YU ON (YU.PaymentSettingId = ZPS.PaymentSettingId)
				  ) '
	 SET @FilterWhereClause = CASE WHEN @FilterWhereClause ='' THEN ' WHERE 1=1 ' ELSE ' WHERE 1=1 '+@FilterWhereClause END
	 SET @InternalOrderBy = ' PaymentSettingId '
	END

	SET @SQL = @SQL+ ', Cte_PaymentSettingFilter AS
				 (

					SELECT PaymentSettingId,PaymentApplicationSettingId,PaymentTypeId,PaymentGatewayId,PaymentName,IsActive
						,DisplayOrder,IsTestMode,IsPoDocUploadEnable,IsPoDocRequire,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
						,PortalId,StoreName, ProfileId, ProfileName , PaymentTypeName,GatewayName,PaymentDisplayName,PaymentExternalId,IsApprovalRequired, PaymentCode, GatewayCode,IsCallToPaymentAPI, IsBillingAddressOptional,IsOABRequired,PortalPaymentGroupId
						,'+dbo.Fn_GetPagingRowId(@Order_BY,@InternalOrderBy)+',Count(*)Over() CountNo

					FROM Cte_PaymenTSetting
				    '+@FilterWhereClause+'
					'+dbo.Fn_GetFilterWhereClause(@WhereClause)+'
				 )

				 SELECT PaymentSettingId,PaymentApplicationSettingId,PaymentTypeId,PaymentGatewayId,PaymentName,IsActive
						,DisplayOrder,IsTestMode,IsPoDocUploadEnable,IsPoDocRequire,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
						,PortalId,StoreName, ProfileId, ProfileName,PaymentTypeName,GatewayName,PaymentDisplayName,PaymentExternalId,IsApprovalRequired, PaymentCode, GatewayCode,IsCallToPaymentAPI,IsBillingAddressOptional,IsOABRequired,PortalPaymentGroupId,RowId ,CountNo
				 FROM Cte_PaymentSettingFilter '
				 +[dbo].[Fn_GetPaginationWhereClause](@PageNo,@Rows)

	
	 INSERT INTO @TBL_PaymentSetting (PaymentSettingId,PaymentApplicationSettingId,PaymentTypeId,PaymentGatewayId,PaymentName,IsActive
						,DisplayOrder,IsTestMode,IsPoDocUploadEnable,IsPoDocRequire,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
						,PortalId,StoreName, ProfileId, ProfileName,PaymentTypeName,GatewayName,PaymentDisplayName,PaymentExternalId,IsApprovalRequired, PaymentCode, GatewayCode,IsCallToPaymentAPI,IsBillingAddressOptional,IsOABRequired,PortalPaymentGroupId,RowID,CountNo)
	 EXEC (@SQL)

	 SET @RowsCount = ISNULL((SELECT Top 1 CountNo FROM @TBL_PaymentSetting),0)
	  
	 SELECT PaymentSettingId,PaymentApplicationSettingId,PaymentTypeId,PaymentGatewayId,PaymentName,IsActive
						,DisplayOrder,IsTestMode,IsPoDocUploadEnable,IsPoDocRequire,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
						,PortalId,StoreName, ProfileId, ProfileName,PaymentTypeName,GatewayName,PaymentDisplayName,PaymentExternalId,IsApprovalRequired, PaymentCode, GatewayCode,IsCallToPaymentAPI, IsBillingAddressOptional,IsOABRequired,PortalPaymentGroupId
	 FROM @TBL_PaymentSetting
	 order by RowID,DisplayOrder


  END TRY
  BEGIN CATCH
             DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPaymentSetting @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@PortalId='+CAST(@PortalId AS VARCHAR(50))+',@ProfileId='+CAST(@ProfileId AS VARCHAR(50))+',@IsAssociated='+CAST(@IsAssociated AS VARCHAR(50))+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));

             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;

             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetPaymentSetting',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
  END CATCH
 END
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPimCategoryProductList')
BEGIN 
	DROP PROCEDURE Znode_GetPimCategoryProductList
END
GO
CREATE PROCEDURE [dbo].[Znode_GetPimCategoryProductList]
(   @WhereClause   XML,
    @Rows          INT           = 100,
    @PageNo        INT           = 1,
    @Order_BY      VARCHAR(1000) = '',
    @RowsCount     INT OUT,
    @LocaleId      INT           = 1,
    @PimCategoryId INT,
    @IsAssociated  BIT           = 0
	,@AttributeCode VARCHAR(max) = ''
	)
AS
/*
     Summary :- This Procedure is used to get the product list for category products
				The result is fetched order by DisplayOrder or status as per requirement in both asc and desc

     Unit Testing
	 begin tran
     EXEC Znode_GetPimCategoryProductList '',@RowsCount = 0, @PimCategoryId = 22,@Order_BY ='DisplayOrder asc'
	 rollback tran
	*/
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             DECLARE @TBL_AttributeDefaultValue TABLE
             (PimAttributeId            INT,
              AttributeDefaultValueCode VARCHAR(100),
              IsEditable                BIT,
              AttributeDefaultValue     NVARCHAR(MAX),
			  DisplayOrder INT
             );
			 DECLARE @TransferPimProductId TransferId
             DECLARE @TBL_AttributeDetails AS TABLE
             (PimProductId   INT,
              AttributeValue NVARCHAR(MAX),
              AttributeCode  VARCHAR(600),
              PimAttributeId INT
             );
             DECLARE @TBL_FamilyDetails TABLE
             (PimProductId         INT,
              PimAttributeFamilyId INT,
              FamilyName           NVARCHAR(3000)
             );
             DECLARE @OrderByDisplay INT= 0;
             DECLARE @DefaultAttributeFamilyId INT= dbo.Fn_GetDefaultPimProductFamilyId(), @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId();

			 DECLARE @TBL_ProductIdTable TABLE
             ([PimProductId] INT,
              [CountId]      INT,
              PimCategoryId  INT,
              RowId          INT
             );

             DECLARE @PimProductId TransferId ,
					 @PimAttributeId VARCHAR(MAX),
					 @OutPimProductIds VARCHAR(MAX);

			 DECLARE @PimProductIds TransferId

             IF @Order_BY LIKE '%DisplayOrder%'
                 BEGIN
                     SET @OrderByDisplay = 1;
                 END;
             ELSE
             IF @Order_BY LIKE '%Status%'
                 BEGIN
                     SET @OrderByDisplay = 2;
                 END;
			 DECLARE @TBL_PimMediaAttributeId TABLE (PimAttributeId INT ,AttributeCode VARCHAR(600))
			 INSERT INTO @TBL_PimMediaAttributeId (PimAttributeId,AttributeCode)
			 SELECT PimAttributeId,AttributeCode FROM Dbo.Fn_GetProductMediaAttributeId ()

            INSERT INTO @TransferPimProductId
			SELECT PimProductId
			FROM ZnodePimCategoryProduct ZCP
            WHERE ZCP.PimCategoryId = @PimCategoryId
			ORDER BY CASE WHEN @Order_By LIKE '% DESC%'
            THEN
			CASE WHEN @OrderByDisplay = 1
					THEN ZCP.DisplayOrder
				WHEN @OrderByDisplay = 2
					THEN ZCP.Status
				 ELSE 1 END
				 ELSE 1 END DESC,
            CASE WHEN @Order_By LIKE '% ASC%'
				THEN
					CASE WHEN @OrderByDisplay = 1
					THEN ZCP.DisplayOrder
						WHEN @OrderByDisplay = 2
							THEN ZCP.Status
							 ELSE 1 END
							  ELSE 1 END
	         IF NOT EXISTS (SELECT TOP 1 1 FROM @TransferPimProductId  )
			 BEGIN
			   INSERT INTO @TransferPimProductId
			   SELECT '0'
			   SET @IsAssociated = 0
             END


   DECLARE @SQL NVARcHAR(max)= ''
		 DECLARE  @ProductListIdRTR TransferId
	 DECLARE @TAb Transferid
	 DECLARE @tBL_mainList TABLE (Id INT,RowId INT)
	 
	 SET @IsAssociated = CASE WHEN @IsAssociated = 0 THEN 1
					 WHEN @IsAssociated = 1 THEN 0 END
		
	 INSERT INTO @ProductListIdRTR
	 EXEC Znode_GetProductList  @IsAssociated,@TransferPimProductId

	 IF CAST(@WhereClause AS NVARCHAR(max))<> N''
	 BEGIN

	  SET @SQL = 'SELECT PimProductId FROM ##Temp_PimProductId'+CAST(@@SPID AS VARCHAR(500))

	  EXEC Znode_GetFilterPimProductId @WhereClause,@ProductListIdRTR,@localeId

      INSERT INTO @TAB
	  EXEC (@SQL)

	 END

	 IF EXISTS (SELECT Top 1 1 FROM @TAb ) OR CAST(@WhereClause AS NVARCHAR(max)) <> N''
	 BEGIN

	 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
	 SET @order_by = REPLACE(@order_by,'DisplayOrder','ProductName')
	 INSERT INTO @TBL_MainList(id,RowId)
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @TAb ,@AttributeCode,@localeId

	 END
	 ELSE
	 BEGIN

	 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
	 SET @order_by = REPLACE(@order_by,'DisplayOrder','ProductName')
	 INSERT INTO @TBL_MainList(id,RowId)
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @ProductListIdRTR ,@AttributeCode,@localeId
	 END
			 INSERT INTO @TBL_ProductIdTable(PimProductId,RowId)
			 SELECT ID ,RowId FROM @TBL_MainList SP

			 INSERT INTO @PimProductIds ( Id )
			 SELECT Id FROM @TBL_MainList SP

             UPDATE @TBL_ProductIdTable SET PimCategoryId = @PimCategoryId;
             SET @PimAttributeId = SUBSTRING((SELECT ','+CAST(PimAttributeId AS VARCHAR(50)) FROM [dbo].[Fn_GetGridPimAttributes]() FOR XML PATH('')), 2, 4000);


             INSERT INTO @TBL_AttributeDetails(PimProductId, AttributeValue,AttributeCode,PimAttributeId)
			 EXEC Znode_GetProductsAttributeValue @PimProductIds,@PimAttributeId,@LocaleId;
            
             --- find the specific attributes and values ----
    --         WITH Cte_UpdateDefaultAttributeValue
			 --AS (SELECT PimProductId,AttributeCode,AttributeValue,SUBSTRING((SELECT ','+TBADV.AttributeDefaultValue
			 --FROM @TBL_AttributeDefaultValue AS TBADV
    --         INNER JOIN ZnodePimAttribute AS TBAC ON(TBADV.PimAttributeId = TBAC.PimAttributeId)
			 --WHERE TBAC.AttributeCode = TBAD.AttributeCode
    --         AND EXISTS(SELECT TOP 1 1 FROM dbo.split(TBAD.AttributeValue, ',') AS SP WHERE Sp.item = TBADV.AttributeDefaultValueCode)
    --         FOR XML PATH('')), 2, 4000) AS AttributeDefaultValue

			 --FROM @TBL_AttributeDetails AS TBAD)

    --         UPDATE TBAD SET AttributeValue = CTUDAV.AttributeDefaultValue
			 --FROM @TBL_AttributeDetails TBAD
			 --INNER JOIN Cte_UpdateDefaultAttributeValue CTUDAV
			 --ON(CTUDAV.PimProductId = TBAD.PimProductId AND CTUDAV.AttributeCode = TBAD.AttributeCode) WHERE AttributeDefaultValue IS NOT NULL;

			   ;WITH Cte_ProductMedia
               AS (SELECT TBA.PimProductId , TBA.PimAttributeId
			   , SUBSTRING( ( SELECT ','+ISNULL(ZMC.CDNURL,ZMC.URL)+ZMSM.ThumbnailFolderName+'/'+ zm.PATH
			   FROM ZnodeMedia AS ZM
               INNER JOIN ZnodeMediaConfiguration ZMC  ON (ZM.MediaConfigurationId = ZMC.MediaConfigurationId)
			   INNER JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMC.MediaServerMasterId)
			   INNER JOIN @TBL_AttributeDetails AS TBAI ON (TBAI.AttributeValue  = CAST(ZM.MediaId AS VARCHAR(50)) )
			   INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBAI.PimATtributeId)
			   WHERE TBAI.PimProductId = TBA.PimProductId AND TBAI.PimAttributeId = TBA.PimAttributeId
			   FOR XML PATH('') ), 2 , 4000) AS AttributeValue , SUBSTRING( ( SELECT ','+AttributeValue
			   FROM  @TBL_AttributeDetails AS TBAI
			   WHERE TBAI.PimProductId = TBA.PimProductId AND TBAI.PimAttributeId = TBA.PimAttributeId
			   FOR XML PATH('') ), 2 , 4000) MediaIds
			   FROM @TBL_AttributeDetails AS TBA
			   INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBA.PimATtributeId ))

		      UPDATE TBAV SET AttributeValue = CTPM.AttributeVALue
			  FROM @TBL_AttributeDetails TBAV
			  INNER JOIN Cte_ProductMedia CTPM ON CTPM.PimProductId = TBAV.PimProductId  AND CTPM.PimAttributeId = TBAV.PimAttributeId
			  AND CTPM.PimAttributeId = TBAV.PimAttributeId;



			 INSERT INTO @TBL_FamilyDetails(PimAttributeFamilyId,PimProductId)
             EXEC [dbo].[Znode_GetPimProductAttributeFamilyId] @PimProductId,1;

             UPDATE TFD SET FamilyName = ZPFL.AttributeFamilyName FROM @TBL_FamilyDetails TFD INNER JOIN ZnodePimFamilyLocale ZPFL
			 ON(TFD.PimAttributeFamilyId = ZPFL.PimAttributeFamilyId AND LocaleId = @LocaleId);

             UPDATE TFD SET FamilyName = ZPFL.AttributeFamilyName FROM @TBL_FamilyDetails TFD INNER JOIN ZnodePimFamilyLocale ZPFL
			 ON(TFD.PimAttributeFamilyId = ZPFL.PimAttributeFamilyId AND LocaleId = @DefaultLocaleId) WHERE TFD.FamilyName IS NULL OR TFD.FamilyName = '';




             SELECT zpp.[PimProductId] AS [Productid],zpp.[PimProductId],ZPCP.[PimCategoryId],TBFD.FamilyName,[ProductName],[SKU],[ProductType],[Assortment],
             CASE WHEN ZPCP.Status IS NULL THEN CAST(0 AS BIT) ELSE CAST(ZPCP.Status AS BIT) END AS [Status],
			 piv.[ProductImage] [ImagePath],ZPCP.DisplayOrder

			 FROM @TBL_ProductIdTable AS zpp
			 LEFT JOIN ZnodePimCategoryProduct ZPCP ON(ZPCP.PimProductId = Zpp.PimProductId AND ZPCP.PimCategoryId = Zpp.PimCategoryId)
             INNER JOIN (SELECT PimProductId,AttributeValue,AttributeCode FROM @TBL_AttributeDetails) TB
			  PIVOT(MAX([AttributeValue])
			 FOR [AttributeCode] IN([ProductName],[IsActive],[ProductImage],[SKU],[ProductType],[Assortment])) AS Piv ON(Piv.[PimProductId] = zpp.[PimProductId])
             LEFT JOIN @TBL_FamilyDetails TBFD ON(TBFD.PimProductId = zpp.[PimProductId])
             ORDER BY CASE WHEN @Order_By LIKE '% DESC%' THEN CASE WHEN @OrderByDisplay = 1 THEN ZPCP.DisplayOrder
			 WHEN @OrderByDisplay = 2 THEN ZPCP.Status ELSE 1 END ELSE 1 END DESC,
             CASE WHEN @Order_By LIKE '% ASC%' THEN CASE WHEN @OrderByDisplay = 1 THEN ZPCP.DisplayOrder
             WHEN @OrderByDisplay = 2 THEN ZPCP.Status ELSE 1 END ELSE 1 END,zpp.RowId;
			   IF EXISTS (SELECT Top 1 1 FROM @TAb )
	 BEGIN

		  SELECT @RowsCount = (SELECT COUNT(1) FROM @TAb)
	 END
	 ELSE
	 BEGIN
	 		  SELECT @RowsCount=(SELECT COUNT(1) FROM @ProductListIdRTR)
	 END


         END TRY
         BEGIN CATCH
		  SELECT ERROR_MESSAGE()
            DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPimCategoryProductList @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@LocaleId = '+CAST(@LocaleId AS VARCHAR(50))+',@PimCategoryId='+CAST(@PimCategoryId AS VARCHAR(50))+',@IsAssociated='+CAST(@IsAssociated AS VARCHAR(50))+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));

             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;

             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetPimCategoryProductList',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPimProductCategoryList')
BEGIN 
	DROP PROCEDURE Znode_GetPimProductCategoryList
END
GO
CREATE PROCEDURE [dbo].[Znode_GetPimProductCategoryList]      
(   @WhereClause   XML,      
    @Rows          INT           = 100,      
    @PageNo        INT           = 1,      
    @Order_BY      VARCHAR(1000) = '',      
    @RowsCount     INT OUT,      
    @LocaleId      INT           = 1,      
 @PimProductIdInput INT,      
    @IsAssociated  BIT           = 0      
 ,@AttributeCode VARCHAR(max) = ''      
 )      
AS       
/*      
     Summary :- This Procedure is used to get the product list for category products       
    The result is fetched order by DisplayOrder or status as per requirement in both asc and desc      
          
     Unit Testing       
  begin tran      
     EXEC Znode_GetPimCategoryProductList '',@RowsCount = 0, @PimCategoryId = 22,@Order_BY ='DisplayOrder asc'      
  rollback tran      
 */      
     BEGIN      
         BEGIN TRY      
             SET NOCOUNT ON;      
                 
		DECLARE @TransferPimCategoryId TransferId       
		CREATE TABLE #TBL_AttributeDetails (PimCategoryAttributeValueId INT,PimCategoryId   INT,AttributeValue NVARCHAR(MAX),  
		AttributeCode  VARCHAR(600),PimAttributeId INT);      
                  
		DECLARE @OrderByDisplay INT= 0;      
		DECLARE @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId();      
                   
		CREATE TABLE #TBL_ProductIdTable ([PimProductId] INT,[CountId] INT,PimCategoryId  INT,RowId INT);      
      
		DECLARE   
		@PimAttributeId VARCHAR(MAX)      
		   
      
		DECLARE @PimProductIds TransferId      
      
             IF @Order_BY LIKE '%DisplayOrder%'      
                 BEGIN      
                     SET @OrderByDisplay = 1;      
                 END;      
             ELSE      
             IF @Order_BY LIKE '%Status%'      
                 BEGIN      
                     SET @OrderByDisplay = 2;      
                 END;      
    CREATE TABLE #TBL_PimMediaAttributeId  (PimAttributeId INT ,AttributeCode VARCHAR(600))      
    INSERT INTO #TBL_PimMediaAttributeId (PimAttributeId,AttributeCode)      
    SELECT PimAttributeId,AttributeCode FROM Dbo.Fn_GetCategoryMediaAttributeId()      
      
          
      
   INSERT INTO @TransferPimCategoryId      
   SELECT PimCategoryId FROM ZnodePimCategoryProduct ZCP WHERE ZCP.PimProductId = @PimProductIdInput       
   ORDER BY CASE WHEN @Order_By LIKE '% DESC%'      
            THEN       
   CASE WHEN @OrderByDisplay = 1       
     THEN ZCP.DisplayOrder       
     WHEN @OrderByDisplay = 2       
     THEN ZCP.Status      
     ELSE 1 END       
     ELSE 1 END DESC,      
            CASE WHEN @Order_By LIKE '% ASC%'       
    THEN      
     CASE WHEN @OrderByDisplay = 1       
     THEN ZCP.DisplayOrder       
      WHEN @OrderByDisplay = 2      
       THEN ZCP.Status      
        ELSE 1 END      
         ELSE 1 END 
		 
		       
          IF NOT EXISTS (SELECT TOP 1 1 FROM @TransferPimCategoryId  )      
    BEGIN       
      INSERT INTO @TransferPimCategoryId      
      SELECT '0'      
          
             END       
        
      
  DECLARE @SQL NVARcHAR(max)= ''      
  DECLARE  @ProductListIdRTR TransferId      
  DECLARE @TAb Transferid       
  DECLARE @tBL_mainList TABLE (Id INT,CountId INT,RowId INT)      
       
  SET @IsAssociated = CASE WHEN @IsAssociated = 0 THEN 1  WHEN @IsAssociated = 1 THEN 0 END       
       
		
  INSERT INTO @ProductListIdRTR      
  EXEC Znode_GetCategoryList  @IsAssociated,@TransferPimCategoryId      
        
 
  DECLARE @CategoryIDS NVARCHAR(2000) = SUBSTRING((SELECT ','+CAST(ID AS VARCHAR(200)) FROM @ProductListIdRTR FOR XML PATH('')), 2, 4000)      
 
       
  BEGIN      
        
		SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'PimCategoryId','CategoryName')      
		SET @order_by = REPLACE(@order_by,'PimCategoryId','CategoryName')      
      
		INSERT INTO @TBL_MainList(id,CountId,RowId)      
		EXEC Znode_GetCategoryIdForPaging @WhereClause , @Rows , @PageNo , @Order_BY , @RowsCount , @LocaleId , @AttributeCode , @CategoryIDS , @IsAssociated;      
       
		END       
		INSERT INTO #TBL_ProductIdTable(PimCategoryId,RowId)       
		SELECT ID ,RowId FROM @TBL_MainList SP       
      
		INSERT INTO @PimProductIds ( Id )      
		SELECT Id FROM @TBL_MainList SP      
      
		UPDATE #TBL_ProductIdTable SET PimProductId = @PimProductIdInput;      
		SET @PimAttributeId = SUBSTRING((SELECT ','+CAST(PimAttributeId AS VARCHAR(50))   
		FROM [dbo].[Fn_GetGridPimCategoryAttributes]() FOR XML PATH('')), 2, 4000);      
                   
		INSERT INTO #TBL_AttributeDetails(PimCategoryAttributeValueId,PimCategoryId, AttributeValue,AttributeCode,PimAttributeId)      
		EXEC Znode_GetCategoryAttributeValueId @PimProductIds,@PimAttributeId,@LocaleId;      
                 
      
		;WITH Cte_ProductMedia      
		AS (SELECT TBA.PimCategoryId , TBA.PimAttributeId       
		, SUBSTRING( ( SELECT ','+ISNULL(ZMC.CDNURL,ZMC.URL)+ZMSM.ThumbnailFolderName+'/'+ zm.PATH             
		FROM ZnodeMedia AS ZM      
		INNER JOIN ZnodeMediaConfiguration ZMC  ON (ZM.MediaConfigurationId = ZMC.MediaConfigurationId)      
		INNER JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMC.MediaServerMasterId)      
		INNER JOIN #TBL_AttributeDetails AS TBAI ON (TBAI.AttributeValue  = CAST(ZM.MediaId AS VARCHAR(50)) )      
		INNER JOIN  #TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBAI.PimATtributeId)      
		WHERE TBAI.PimCategoryId = TBA.PimCategoryId AND TBAI.PimAttributeId = TBA.PimAttributeId       
		FOR XML PATH('') ), 2 , 4000) AS AttributeValue , SUBSTRING( ( SELECT ','+AttributeValue      
		FROM  #TBL_AttributeDetails AS TBAI      
		WHERE TBAI.PimCategoryId = TBA.PimCategoryId AND TBAI.PimAttributeId = TBA.PimAttributeId       
		FOR XML PATH('') ), 2 , 4000) MediaIds        
		FROM #TBL_AttributeDetails AS TBA       
		INNER JOIN  #TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBA.PimATtributeId ))      
                                
		UPDATE TBAV SET AttributeValue = CTPM.AttributeVALue      
		FROM #TBL_AttributeDetails TBAV       
		INNER JOIN Cte_ProductMedia CTPM ON CTPM.PimCategoryId = TBAV.PimCategoryId  AND CTPM.PimAttributeId = TBAV.PimAttributeId       
		AND CTPM.PimAttributeId = TBAV.PimAttributeId;      
          
      
		SELECT ISNULL(ZPCP.PimCategoryProductId,0) AS PimCategoryProductId, zpp.[PimCategoryId] AS [Categoryid],zpp.[PimCategoryId],ISNULL(ZPCP.[PimProductId],0) AS PimProductId,[CategoryName],      
		CASE WHEN ZPCP.Status IS NULL THEN CAST(0 AS BIT) ELSE CAST(ZPCP.Status AS BIT) END AS [Status],      
		piv.[CategoryImage] [ImagePath],ZPCP.DisplayOrder       
          
		FROM #TBL_ProductIdTable AS zpp      
		LEFT JOIN ZnodePimCategoryProduct ZPCP ON(ZPCP.PimProductId = Zpp.PimProductId AND ZPCP.PimCategoryId = Zpp.PimCategoryId)      
		INNER JOIN (SELECT PimCategoryId,AttributeValue,AttributeCode FROM #TBL_AttributeDetails) TB      
		PIVOT(MAX([AttributeValue])       
		FOR [AttributeCode] IN([CategoryName],[IsActive],[CategoryImage])) AS Piv ON(Piv.[PimCategoryId] = zpp.[PimCategoryId])      
		ORDER BY CASE WHEN @Order_By LIKE '% DESC%' THEN CASE WHEN @OrderByDisplay = 1 THEN ZPCP.DisplayOrder       
		WHEN @OrderByDisplay = 2 THEN ZPCP.Status ELSE 1 END ELSE 1 END DESC,      
		CASE WHEN @Order_By LIKE '% ASC%' THEN CASE WHEN @OrderByDisplay = 1 THEN ZPCP.DisplayOrder      
		WHEN @OrderByDisplay = 2 THEN ZPCP.Status ELSE 1 END ELSE 1 END,zpp.RowId;      
        
     
		SELECT @RowsCount=ISNULL((SELECT top 1 countId FROM @TBL_MainList),0)     
    
      
      
         END TRY      
         BEGIN CATCH      
		SELECT ERROR_MESSAGE()      
		DECLARE @Status BIT ;      
		SET @Status = 0;      
		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),      
		@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPimProductCategoryList @WhereClause = '+  
		CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@LocaleId = '  
		+CAST(@LocaleId AS    
		VARCHAR(50))+',@PimProductIdInput='+CAST(@PimProductIdInput AS VARCHAR(50))+',@IsAssociated='+CAST(@IsAssociated AS VARCHAR(50))+',@RowsCount='+  
		CAST(@RowsCount AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));      
                        
		SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                          
          
		EXEC Znode_InsertProcedureErrorLog      
			@ProcedureName = 'Znode_GetPimProductCategoryList',      
			@ErrorInProcedure = @Error_procedure,      
			@ErrorMessage = @ErrorMessage,      
			@ErrorLine = @ErrorLine,      
			@ErrorCall = @ErrorCall;      
         END CATCH;      
     END;
GO


IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPortalGlobalAttributeValue')
BEGIN 
	DROP PROCEDURE Znode_GetPortalGlobalAttributeValue
END
GO
CREATE   PROCEDURE [dbo].[Znode_GetPortalGlobalAttributeValue]
(
    @EntityName       nvarchar(200) = 0,
    @GlobalEntityValueId   INT = 0,
	@LocaleCode       VARCHAR(100) = '',
    @GroupCode  nvarchar(200) = null,
	@SelectedValue bit = 0
)
AS
/*
	 Summary :- This procedure is used to get the Attribute and EntityValue attribute value as per filter pass 
	 Unit Testing 
	 BEGIN TRAN
	 EXEC [Znode_GetGlobalEntityAttributeValue] 'Store',1
	 ROLLBACK TRAN

*/	 
     BEGIN
 BEGIN TRY
 declare @EntityValue nvarchar(200), @LocaleId int

  DECLARE @V_MediaServerThumbnailPath VARCHAR(4000);
          SET @V_MediaServerThumbnailPath =
         (
             SELECT ISNULL(CDNURL,URL)+ZMSM.ThumbnailFolderName+'/'
             FROM ZnodeMediaConfiguration ZMC 
			 INNER JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMC.MediaServerMasterId)
		     WHERE IsActive = 1 
         );


 Select @EntityValue=StoreName from ZnodePortal
 Where PortalId=@GlobalEntityValueId

            Declare	@EntityAttributeList as	table  (GlobalEntityId int,EntityName nvarchar(300),EntityValue nvarchar(max),
			GlobalAttributeGroupId int,GlobalAttributeId int,AttributeTypeId int,AttributeTypeName nvarchar(300),
			 AttributeCode nvarchar(300) ,IsRequired bit,IsLocalizable bit,AttributeName  nvarchar(300) , HelpDescription nvarchar(max)
			,AttributeGroupDisplayOrder int,DisplayOrder int) 
			 
			Declare @EntityAttributeValidationList  as	table  
			( GlobalAttributeId int, ControlName nvarchar(300), ValidationName nvarchar(300),SubValidationName nvarchar(300),
			 RegExp nvarchar(300), ValidationValue nvarchar(300),IsRegExp Bit)

			Declare	@EntityAttributeValueList as	table  (GlobalAttributeId int,AttributeValue nvarchar(max),
			GlobalAttributeValueId int,GlobalAttributeDefaultValueId int,AttributeDefaultValueCode nvarchar(300),
			AttributeDefaultValue nvarchar(300),
			MediaId int,MediaPath nvarchar(300),IsEditable bit,DisplayOrder int )



			Declare	@EntityAttributeDefaultValueList as	table  (GlobalAttributeDefaultValueId int,GlobalAttributeId int,
			AttributeDefaultValueCode nvarchar(300),AttributeDefaultValue nvarchar(300),RowId int,IsEditable bit,DisplayOrder int )

			set @LocaleId = (select top 1 LocaleId from ZnodeLocale where Code = @LocaleCode)

			IF ISnull(@GroupCode, '') = '' 
            Begin
			
				insert into @EntityAttributeList
					(	GlobalEntityId ,EntityName ,EntityValue ,
					GlobalAttributeGroupId ,GlobalAttributeId ,AttributeTypeId ,AttributeTypeName ,
					AttributeCode  ,IsRequired ,IsLocalizable ,AttributeName,HelpDescription ,AttributeGroupDisplayOrder,DisplayOrder ) 
					SELECT qq.GlobalEntityId,qq.EntityName,@EntityValue EntityValue,ww.GlobalAttributeGroupId,
					c.GlobalAttributeId,c.AttributeTypeId,q.AttributeTypeName,c.AttributeCode,c.IsRequired,
					c.IsLocalizable,f.AttributeName,c.HelpDescription,w.AttributeGroupDisplayOrder,c.DisplayOrder
				 FROM dbo.ZnodeGlobalEntity AS qq
					  INNER JOIN dbo.ZnodeGlobalGroupEntityMapper AS w ON qq.GlobalEntityId = w.GlobalEntityId
					  INNER JOIN dbo.ZnodeGlobalAttributeGroupMapper AS ww ON ww.GlobalAttributeGroupId = w.GlobalAttributeGroupId
					  INNER JOIN dbo.ZnodeGlobalAttribute AS c ON ww.GlobalAttributeId = c.GlobalAttributeId
					  INNER JOIN dbo.ZnodeAttributeType AS q ON c.AttributeTypeId = q.AttributeTypeId
					  INNER JOIN dbo.ZnodeGlobalAttributeLocale AS f ON c.GlobalAttributeId = f.GlobalAttributeId
					  Where qq.EntityName=@EntityName AND ( f.LocaleId = isnull(@LocaleId, 0 ) or isnull(@LocaleId,0) = 0 )
			END 
			Else 
			Begin
				insert into @EntityAttributeList
				(	GlobalEntityId ,EntityName ,EntityValue ,
				GlobalAttributeGroupId ,GlobalAttributeId ,AttributeTypeId ,AttributeTypeName ,
				AttributeCode  ,IsRequired ,IsLocalizable ,AttributeName,HelpDescription ,AttributeGroupDisplayOrder,DisplayOrder ) 
				SELECT qq.GlobalEntityId,qq.EntityName,@EntityValue EntityValue,ww.GlobalAttributeGroupId,
				c.GlobalAttributeId,c.AttributeTypeId,q.AttributeTypeName,c.AttributeCode,c.IsRequired,
				c.IsLocalizable, f.AttributeName, c.HelpDescription,w.AttributeGroupDisplayOrder,c.DisplayOrder
				FROM dbo.ZnodeGlobalEntity AS qq
					INNER JOIN dbo.ZnodeGlobalGroupEntityMapper AS w ON qq.GlobalEntityId = w.GlobalEntityId
					INNER JOIN dbo.ZnodeGlobalAttributeGroupMapper AS ww ON ww.GlobalAttributeGroupId = w.GlobalAttributeGroupId
					INNER JOIN dbo.ZnodeGlobalAttribute AS c ON ww.GlobalAttributeId = c.GlobalAttributeId
					INNER JOIN dbo.ZnodeAttributeType AS q ON c.AttributeTypeId = q.AttributeTypeId
					INNER JOIN dbo.ZnodeGlobalAttributeLocale AS f ON c.GlobalAttributeId = f.GlobalAttributeId
					--Inner JOIN ZnodeGlobalAttributeGroup g on ww.GlobalAttributeGroupId = g.GlobalAttributeGroupId 
					Where qq.EntityName=@EntityName AND ( f.LocaleId = isnull(@LocaleId, 0 ) or isnull(@LocaleId,0) = 0 )					  
					AND exists( select 1 from ZnodeGlobalAttributeGroup g where ww.GlobalAttributeGroupId = g.GlobalAttributeGroupId and g.GroupCode = @GroupCode )
 
			End 


		  INSERT INTO @EntityAttributeValidationList
		  (GlobalAttributeId,ControlName , ValidationName ,SubValidationName ,
		RegExp, ValidationValue,IsRegExp)

		 Select aa.GlobalAttributeId,i.ControlName,i.Name AS ValidationName,j.ValidationName AS SubValidationName,
		j.RegExp,k.Name AS ValidationValue,CAST(CASE WHEN j.RegExp IS NULL THEN 0 ELSE 1 END AS BIT) AS IsRegExp
		fROM @EntityAttributeList aa
		  inner  JOIN dbo.ZnodeGlobalAttributeValidation AS k ON k.GlobalAttributeId = aa.GlobalAttributeId
          inner  JOIN dbo.ZnodeAttributeInputValidation AS i ON k.InputValidationId = i.InputValidationId
          LEFT  JOIN dbo.ZnodeAttributeInputValidationRule AS j ON k.InputValidationRuleId = j.InputValidationRuleId

		  insert into @EntityAttributeValueList
		  (GlobalAttributeId,GlobalAttributeValueId,GlobalAttributeDefaultValueId,AttributeValue ,MediaId,MediaPath)
		  Select DISTINCT GlobalAttributeId,aa.PortalGlobalAttributeValueId,bb.GlobalAttributeDefaultValueId,
		  case when bb.MediaPath is not null then  @V_MediaServerThumbnailPath+bb.MediaPath--+'~'+convert(nvarchar(10),bb.MediaId) 
		  else bb.AttributeValue end,		  
		  bb.MediaId,bb.MediaPath
		  from  dbo.ZnodePortalGlobalAttributeValue aa
		   inner join ZnodePortalGlobalAttributeValueLocale bb ON bb.PortalGlobalAttributeValueId = aa.PortalGlobalAttributeValueId 
		  Where  PortalId=@GlobalEntityValueId

		

		  

		  update aa
		  Set AttributeDefaultValueCode= h.AttributeDefaultValueCode,
              AttributeDefaultValue=g.AttributeDefaultValue,
			  GlobalAttributeDefaultValueId=g.GlobalAttributeDefaultValueId,
			  AttributeValue=case when aa.AttributeValue is  null then h.AttributeDefaultValueCode else aa.AttributeValue end,
			  IsEditable = ISNULL(h.IsEditable, 1),DisplayOrder = h.DisplayOrder
		  from  @EntityAttributeValueList aa
		  inner JOIN dbo.ZnodeGlobalAttributeDefaultValue h ON h.GlobalAttributeDefaultValueId = aa.GlobalAttributeDefaultValueId                                       
          inner JOIN dbo.ZnodeGlobalAttributeDefaultValueLocale g ON h.GlobalAttributeDefaultValueId = g.GlobalAttributeDefaultValueId
          
		  insert into @EntityAttributeDefaultValueList
		  (GlobalAttributeDefaultValueId,GlobalAttributeId,AttributeDefaultValueCode,
			AttributeDefaultValue ,RowId ,IsEditable ,DisplayOrder )
		  Select  h.GlobalAttributeDefaultValueId, aa.GlobalAttributeId,h.AttributeDefaultValueCode,g.AttributeDefaultValue,0,ISNULL(h.IsEditable, 1),
		  h.DisplayOrder
		  from  @EntityAttributeList aa
		  inner JOIN dbo.ZnodeGlobalAttributeDefaultValue h ON h.GlobalAttributeId = aa.GlobalAttributeId
          inner JOIN dbo.ZnodeGlobalAttributeDefaultValueLocale g ON h.GlobalAttributeDefaultValueId = g.GlobalAttributeDefaultValueId
		  
		  if not exists (Select 1 from @EntityAttributeList )
			Begin
			insert into @EntityAttributeList
			(	GlobalEntityId ,EntityName ,EntityValue ,
			GlobalAttributeGroupId ,GlobalAttributeId ,AttributeTypeId ,AttributeTypeName ,
			AttributeCode  ,IsRequired ,IsLocalizable ,AttributeName,HelpDescription  ) 
			SELECT qq.GlobalEntityId,qq.EntityName,@EntityValue EntityValue,0 GlobalAttributeGroupId,
			0 GlobalAttributeId,0 AttributeTypeId,''AttributeTypeName,''AttributeCode,0 IsRequired,
			0 IsLocalizable,'' AttributeName,'' HelpDescription
			FROM dbo.ZnodeGlobalEntity AS qq
			 Where qq.EntityName=@EntityName 
			End

				

			SELECT  GlobalEntityId,EntityName,EntityValue,GlobalAttributeGroupId,
			AA.GlobalAttributeId,AttributeTypeId,AttributeTypeName,AttributeCode,IsRequired,
			IsLocalizable,AttributeName,ControlName,ValidationName,SubValidationName,RegExp,
			ValidationValue,cast(isnull(IsRegExp,0) as bit)  IsRegExp,
			HelpDescription,AttributeValue,GlobalAttributeValueId,bb.GlobalAttributeDefaultValueId,
			aab.AttributeDefaultValueCode,
			aab.AttributeDefaultValue,isnull(aab.RowId,0)   RowId,cast(isnull(aab.IsEditable,0) as bit)   IsEditable
			,bb.MediaId,AA.DisplayOrder
			fROM @EntityAttributeList AA				
			left join @EntityAttributeDefaultValueList aab on aab.GlobalAttributeId=AA.GlobalAttributeId	
			left join @EntityAttributeValidationList vl on vl.GlobalAttributeId=aa.GlobalAttributeId			
			LEFT JOIN @EntityAttributeValueList BB ON BB.GlobalAttributeId=AA.GlobalAttributeId		 
		    and ( (aab.GlobalAttributeDefaultValueId=bb.GlobalAttributeDefaultValueId	)
			or  ( bb.MediaId is not null and isnull(vl.ValidationName,'')='IsAllowMultiUpload'  and bb.GlobalAttributeDefaultValueId is null )
			or  ( bb.MediaId is  null and  bb.GlobalAttributeDefaultValueId is null ))
			order by  aa.DisplayOrder, aab.DisplayOrder

			SELECT 1 AS ID,CAST(1 AS BIT) AS Status;       
		  END TRY
         BEGIN CATCH
		 SELECT ERROR_MESSAGE()
             DECLARE @Status BIT ;
		  SET @Status = 0;
		  DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(),
		   @ErrorLine VARCHAR(100)= ERROR_LINE(),
		    @ErrorCall NVARCHAR(MAX)= null       			 
          SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		 
          EXEC Znode_InsertProcedureErrorLog
            @ProcedureName = 'Znode_GetGlobalEntityValueAttributeValues',
            @ErrorInProcedure = @Error_procedure,
            @ErrorMessage = @ErrorMessage,
            @ErrorLine = @ErrorLine,
            @ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO


IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetProductFeedList')
BEGIN 
	DROP PROCEDURE Znode_GetProductFeedList
END
GO
CREATE PROCEDURE [dbo].[Znode_GetProductFeedList]  
(   @PortalId   VARCHAR(2000) = NULL,  
    @ProductIds VARCHAR(MAX)  = '',  
    @LocaleId   INT,  
    @FeedType   NVARCHAR(MAX) = NULL)  
AS  
/*  
Summary: This Procedure is used to get effective keyword feeding of Product list  
 SELECT * FROM ZnodePublishProductDetail  
 SELECT * FROM ZnodePublishProduct WHERE PublishCatalogId = 3  
 SELECT * FROM ZnodePortalCatalog   
 Unit Testing:  
 EXEC Znode_GetProductFeedList @PortalId='0',@ProductIds = '116,117,118'  
 ,@LocaleId=1,@FeedType='Bing'   
  
*/  
     BEGIN  
  BEGIN TRY  
         SET NOCOUNT ON;        
           
   DECLARE @GetDate DATETIME = dbo.Fn_GetDate();  
         DECLARE @TBL_DomainName TABLE  
         (PortalId   INT,  
          DomainName NVARCHAR(300),  
          RowId      INT  
         );     
         
         DECLARE @TBL_SEODetails TABLE  
         (loc                   NVARCHAR(MAX),  
          lastmod               DATETIME,  
          [g:condition]         VARCHAR(100),  
          [description]         NVARCHAR(MAX),  
          [g:id]                INT,  
          link                  VARCHAR(100),  
          [g:identifier_exists] VARCHAR(200),  
          DomainName            NVARCHAR(300),  
          PortalId              INT  
    , SEOCode             NVARCHAR(4000)  
         );  
         DECLARE @TBL_CompleteDetailes TABLE  
         (loc                   NVARCHAR(MAX),  
          lastmod               DATETIME,  
          [g:condition]         VARCHAR(100),  
          [description]         NVARCHAR(MAX),  
          [g:id]                INT,  
          link                  VARCHAR(100),  
          [g:identifier_exists] VARCHAR(200),  
          DomainName            NVARCHAR(300),  
          PortalId              INT,  
          [g:availability]      NVARCHAR(1000),  
          SKU                   NVARCHAR(MAX),  
    SEOCode               NVARCHAR(4000)  
         );  
         DECLARE @DefaultLocaleId INT=dbo.Fn_GetDefaultLocaleId()  ;  
         DECLARE @TBL_PortalIds TABLE(PortalId INT);   
   
         INSERT INTO @TBL_PortalIds  
         SELECT Zp.PortalId   
   FROM Znodeportal AS ZP   
   INNER JOIN ZnodePortalCatalog AS ZPC ON(ZPC.PortalId = Zp.PortalId)  
         INNER JOIN ZnodePublishCatalog AS ZPPC ON(ZPPC.PublishCatalogId = ZPC.PublishCatalogId)   
   INNER JOIN ZNodePublishProduct AS ZPP ON(ZPP.PublishCatalogId = ZPPC.PublishCatalogId)  
   INNER JOIN ZnodePublishProductDetail AS PPD ON (PPD.PublishProductId = ZPP.PublishProductId)  
         WHERE EXISTS(SELECT TOP 1 1 FROM DBO.Split(@ProductIds, ',') AS Sp WHERE (sp.Item  = PPD.SKU)  OR @ProductIds = '0')  
   AND EXISTS(SELECT TOP 1 1 FROM DBO.Split(@PortalId, ',') AS Sp  
      WHERE(CAST(sp.Item AS INT)) = Zp.PortalId  OR @PortalId = '0')  
   AND EXISTS (SELECT TOP 1 1 FROM ZnodeDomain ZD WHERE ZP.PortalId = ZD.PortalId  
   AND IsActive = 1 AND ApplicationType = 'Webstore')  
   GROUP BY Zp.PortalId;   
  
         INSERT INTO @TBL_DomainName   
   SELECT  PortalId,DomainName,ROW_NUMBER() OVER(PARTITION BY PortalId ORDER BY DomainName)   
   FROM ZnodeDomain AS ZD   
         WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZD.PortalId)  
   AND IsActive = 1 AND ApplicationType = 'Webstore'  
    
  
  
         ;WITH Cte_SeoDetailsWithLocale  
         AS (  
   SELECT DISTINCT ZCSD.CMSSEODetailId,ZCSD.SEOURL AS loc,ZCSD.ModifiedDate AS lastmod,'new' AS [g:condition],ZCSDL.SEODescription AS [description],ZPCC.PublishProductId AS [g:id],  
             '' AS link,'false' AS [g:identifier_exists],TBDN.DomainName,ZPC.PortalId,ISNULL(ZCSDL.LocaleId, @DefaultLocaleId) AS LocaleId , ZCSD.SEOCode  
    FROM ZNodePublishProduct AS ZPCC   
    INNER JOIN ZnodePortalCatalog AS ZPC ON(ZPC.PublishCatalogId = ZPCC.PublishCatalogId)  
    LEFT JOIN ZnodePublishProductDetail AS PPD ON (PPD.PublishProductId = ZPCC.PublishProductId)  
             -- INNER JOIN @TBL_PortalIds TBLP ON (TBLP.PortalId = ZPC.PortalId)  
    LEFT JOIN ZnodeCMSSEODetail AS ZCSD ON(PPD.SKU = ZCSD.SEOCode and ZCSD.PortalId = ZPC.PortalId)  
             LEFT JOIN ZnodeCMSSEOType AS ZCST ON(ZCST.CMSSEOTypeId = ZCSD.CMSSEOTypeId AND ZCST.Name = 'Product')  
             LEFT JOIN ZnodeCMSSEODetailLocale AS ZCSDL ON(ZCSDL.CMSSEODetailId = ZCSD.CMSSEODetailId AND ZCSDL.LocaleId IN(@LocaleId, @DefaultLocaleId))  
             LEFT JOIN @TBL_DomainName AS TBDN ON(TBDN.RowId = 1 AND TBDN.PortalId = zpc.PortalId )   
    WHERE EXISTS(SELECT TOP 1 1 FROM DBO.Split(@ProductIds, ',') AS Sp  
      WHERE (sp.Item  = PPD.SKU) OR @ProductIds = '0')  
   AND EXISTS(SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZPC.PortalId )  
    )  
  
         ,Cte_SeoDetailsWithFirstLocale  
         AS (  
    SELECT CMSSEODetailId,loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,PortalId,LocaleId,SEOCode  
             FROM Cte_SeoDetailsWithLocale   
    WHERE LocaleId = @LocaleId  
    )           
  ,Cte_SeoDetailsWithDefaultLocale  
         AS (  
    SELECT CMSSEODetailId,loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,PortalId,LocaleId,SEOCode  
             FROM Cte_SeoDetailsWithFirstLocale  
             UNION ALL  
             SELECT CMSSEODetailId,loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,PortalId,LocaleId,SEOCode  
             FROM Cte_SeoDetailsWithLocale AS CTSDWL  
             WHERE LocaleId = @DefaultLocaleId   
    AND NOT EXISTS(SELECT TOP 1 1 FROM Cte_SeoDetailsWithFirstLocale AS CTSDWDL WHERE CTSDWDL.CMSSEODetailId = CTSDWL.CMSSEODetailId))  
                
   INSERT INTO @TBL_SEODetails  
         SELECT DISTINCT loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,PortalId ,SEOCode  
   FROM Cte_SeoDetailsWithDefaultLocale;  
  
    
  
         INSERT INTO @TBL_CompleteDetailes  
         SELECT TBSD.loc,TBSD.lastmod,TBSD.[g:condition],TBSD.[description],TBSD.[g:id],TBSD.link,TBSD.[g:identifier_exists],TBSD.DomainName,TBSD.PortalId,  
         CASE WHEN SUM(ZI.Quantity) > 0 THEN 'In Stock' ELSE CASE WHEN @FeedType = 'Google' THEN 'Out Of Stock' ELSE 'Not In Stock' END  
         END AS [g:availability],ZPPD.SKU ,TBSD.SEOCode  
   FROM ZnodePublishProduct AS ZPP   
   LEFT JOIN @TBL_SEODetails AS TBSD ON(ZPP.PublishProductId = TBSD.[g:id] )  
         LEFT JOIN ZnodePublishProductDetail AS ZPPD ON(ZPPD.PublishProductId = ZPP.PublishProductId AND ZPPD.LocaleId = @LocaleId )  
         LEFT JOIN ZnodePortalWarehouse AS ZPW ON(ZPW.PortalId = TBSD.PortalId)  
         LEFT JOIN ZnodePortalAlternateWarehouse AS ZAPW ON(ZAPW.PortalWarehouseId = ZPW.PortalWarehouseId)  
         LEFT JOIN ZnodeInventory AS ZI ON(ZI.SKU = ZPPD.SKU AND (ZI.WarehouseId = ZPW.WarehouseId OR ZI.WarehouseId = ZAPW.WarehouseId))  
         WHERE EXISTS(SELECT TOP 1 1 FROM DBO.Split(@ProductIds, ',') AS Sp WHERE (sp.Item  = ZPPD.SKU) OR @ProductIds = '0')  
   AND EXISTS(SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = TBSD.PortalId )  
         GROUP BY loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,TBSD.PortalId,ZPPD.SKU,ZPPD.LocaleId, TBSD.SEOCode;  
    
         DECLARE @MediaConfiguration NVARCHAR(2000)=((SELECT TOP 1 ISNULL(CDNURL,URL) FROM ZnodeMediaConfiguration WHERE IsActive = 1));  
           
  
         ;WITH Cte_PortalList  
         AS (  
       SELECT zp.PortalId,dbo.Fn_GetDefaultPriceRoundOff(ZPS.RetailPrice)RetailPrice,Zps.SKU,TBCD.SEOCode,ROW_NUMBER() OVER(PARTITION BY Zps.SKU,zp.PortalId ORDER BY ZPS.RetailPrice) AS RowId  
             FROM ZnodePriceList AS ZPL   
    LEFT JOIN ZnodePriceListPortal AS ZPLP ON ZPL.PriceListId = ZPLP.PriceListId  
             LEFT JOIN dbo.ZnodeCulture AS zc ON ZPL.CultureId = zc.CultureId
    LEFT JOIN dbo.ZnodePortal AS zp ON ZPLP.PortalId = zp.PortalId  
             LEFT JOIN ZnodePrice AS Zps ON(Zps.PriceListId = ZPL.PriceListId)   
    LEFT JOIN @TBL_CompleteDetailes AS TBCD ON(TBCD.PortalId = Zp.PortalId AND TBCD.SKU = Zps.Sku)   
    WHERE CAST(@GetDate AS DATE) BETWEEN ZPL.ActivationDate AND ZPL.ExpirationDate   
    AND EXISTS( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZPLP.PortalId)   
    GROUP BY zp.PortalId,ZPS.RetailPrice,Zps.SKU ,TBCD.SEOCode  
    )  
  
         SELECT loc,lastmod,[g:condition],[description],[g:id],link,[g:availability],[g:identifier_exists],DomainName,TBCD.PortalId  
  ,CTPL.RetailPrice AS [g:price]  
   ,@MediaConfiguration AS MediaConfiguration, TBCD.SEOCode  
         FROM @TBL_CompleteDetailes AS TBCD   
   LEFT JOIN Cte_PortalList AS CTPL ON(CTPL.PortalId = TBCD.PortalId AND CTPL.SKU = TBCD.SKU AND CTPL.RowID = 1)  
   WHERE  EXISTS(SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = TBCD.PortalId )  
  
 END TRY  
 BEGIN CATCH  
  DECLARE @Status BIT ;  
  SET @Status = 0;  
  DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetProductFeedList @PortalId = '+@PortalId+',@ProductIds='+@ProductIds
+',@LocaleId='+CAST(@LocaleId AS VARCHAR(50))+',@FeedType='+CAST(@FeedType AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));  
                    
        SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                      
      
        EXEC Znode_InsertProcedureErrorLog  
   @ProcedureName = 'Znode_GetProductFeedList',  
   @ErrorInProcedure = @Error_procedure,  
   @ErrorMessage = @ErrorMessage,  
   @ErrorLine = @ErrorLine,  
   @ErrorCall = @ErrorCall;  
 END CATCH  
   
  END;
GO


IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetUserGlobalAttributeValue')
BEGIN 
	DROP PROCEDURE Znode_GetUserGlobalAttributeValue
END
GO
CREATE PROCEDURE [dbo].[Znode_GetUserGlobalAttributeValue]
(
    @EntityName       nvarchar(200) = 0,
    @GlobalEntityValueId   INT = 0,
	@LocaleCode       VARCHAR(100) = '',
    @GroupCode  nvarchar(200) = null,
	@SelectedValue bit = 0
	
)
AS
/*
	 Summary :- This procedure is used to get the Attribute and EntityValue attribute value as per filter pass 
	 Unit Testing 
	 BEGIN TRAN
	 EXEC [Znode_GetGlobalEntityAttributeValue] 'Store',1
	 ROLLBACK TRAN

*/	 
     BEGIN
 BEGIN TRY
declare @EntityValue nvarchar(200), @LocaleId int

  DECLARE @V_MediaServerThumbnailPath VARCHAR(4000);
          SET @V_MediaServerThumbnailPath =
         (
             SELECT ISNULL(CDNURL,URL)+ZMSM.ThumbnailFolderName+'/'
             FROM ZnodeMediaConfiguration ZMC 
			 INNER JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMC.MediaServerMasterId)
		     WHERE IsActive = 1 
         );


		 Select @EntityValue=Isnull(FirstName,'')+' '+Isnull(LastName,'')
		  from ZnodeUser
		 Where UserId=@GlobalEntityValueId

            Declare	@EntityAttributeList as	table  (GlobalEntityId int,EntityName nvarchar(300),EntityValue nvarchar(max),
			GlobalAttributeGroupId int,GlobalAttributeId int,AttributeTypeId int,AttributeTypeName nvarchar(300),
			 AttributeCode nvarchar(300) ,IsRequired bit,IsLocalizable bit,AttributeName  nvarchar(300) , HelpDescription nvarchar(max),DisplayOrder int
			) 
			 
			Declare @EntityAttributeValidationList  as	table  
			( GlobalAttributeId int, ControlName nvarchar(300), ValidationName nvarchar(300),SubValidationName nvarchar(300),
			 RegExp nvarchar(300), ValidationValue nvarchar(300),IsRegExp Bit)

			Declare	@EntityAttributeValueList as	table  (GlobalAttributeId int,AttributeValue nvarchar(max),
			GlobalAttributeValueId int,GlobalAttributeDefaultValueId int,AttributeDefaultValueCode nvarchar(300),
			AttributeDefaultValue nvarchar(300),
			MediaId int,MediaPath nvarchar(300),IsEditable bit,DisplayOrder int )



			Declare	@EntityAttributeDefaultValueList as	table  (GlobalAttributeDefaultValueId int,GlobalAttributeId int,
			AttributeDefaultValueCode nvarchar(300),AttributeDefaultValue nvarchar(300),RowId int,IsEditable bit,DisplayOrder int )

			 set @LocaleId = (select top 1 LocaleId from ZnodeLocale where Code = @LocaleCode)


			IF ISnull(@GroupCode, '') = '' 
            Begin
                insert into @EntityAttributeList
                    (   GlobalEntityId ,EntityName ,EntityValue ,
                    GlobalAttributeGroupId ,GlobalAttributeId ,AttributeTypeId ,AttributeTypeName ,
                    AttributeCode  ,IsRequired ,IsLocalizable ,AttributeName,HelpDescription,DisplayOrder ) 
                    SELECT qq.GlobalEntityId,qq.EntityName,@EntityValue EntityValue,ww.GlobalAttributeGroupId,
                    c.GlobalAttributeId,c.AttributeTypeId,q.AttributeTypeName,c.AttributeCode,c.IsRequired,
                    c.IsLocalizable,f.AttributeName,c.HelpDescription,c.DisplayOrder
                 FROM dbo.ZnodeGlobalEntity AS qq
                      INNER JOIN dbo.ZnodeGlobalGroupEntityMapper AS w ON qq.GlobalEntityId = w.GlobalEntityId
                      INNER JOIN dbo.ZnodeGlobalAttributeGroupMapper AS ww ON ww.GlobalAttributeGroupId = w.GlobalAttributeGroupId
                      INNER JOIN dbo.ZnodeGlobalAttribute AS c ON ww.GlobalAttributeId = c.GlobalAttributeId
                      INNER JOIN dbo.ZnodeAttributeType AS q ON c.AttributeTypeId = q.AttributeTypeId
                      INNER JOIN dbo.ZnodeGlobalAttributeLocale AS f ON c.GlobalAttributeId = f.GlobalAttributeId
                      Where qq.EntityName = @EntityName AND ( f.LocaleId = isnull(@LocaleId, 0 ) or isnull(@LocaleId,0) = 0 )
            END 
            Else 
            Begin
                insert into @EntityAttributeList
                    (   GlobalEntityId ,EntityName ,EntityValue ,
                    GlobalAttributeGroupId ,GlobalAttributeId ,AttributeTypeId ,AttributeTypeName ,
                    AttributeCode  ,IsRequired ,IsLocalizable ,AttributeName,HelpDescription,DisplayOrder ) 
                    SELECT qq.GlobalEntityId,qq.EntityName,@EntityValue EntityValue,ww.GlobalAttributeGroupId,
                    c.GlobalAttributeId,c.AttributeTypeId,q.AttributeTypeName,c.AttributeCode,c.IsRequired,
                    c.IsLocalizable,f.AttributeName,c.HelpDescription,c.DisplayOrder
                 FROM dbo.ZnodeGlobalEntity AS qq
                      INNER JOIN dbo.ZnodeGlobalGroupEntityMapper AS w ON qq.GlobalEntityId = w.GlobalEntityId
                      INNER JOIN dbo.ZnodeGlobalAttributeGroupMapper AS ww ON ww.GlobalAttributeGroupId = w.GlobalAttributeGroupId
                      INNER JOIN dbo.ZnodeGlobalAttribute AS c ON ww.GlobalAttributeId = c.GlobalAttributeId
                      INNER JOIN dbo.ZnodeAttributeType AS q ON c.AttributeTypeId = q.AttributeTypeId
                      INNER JOIN dbo.ZnodeGlobalAttributeLocale AS f ON c.GlobalAttributeId = f.GlobalAttributeId                   
                      Where qq.EntityName=@EntityName AND ( f.LocaleId = isnull(@LocaleId, 0 ) or isnull(@LocaleId,0) = 0 )
                      AND exists( select 1 from ZnodeGlobalAttributeGroup g where ww.GlobalAttributeGroupId = g.GlobalAttributeGroupId and g.GroupCode = @GroupCode )
            END
	

		  INSERT INTO @EntityAttributeValidationList
		  (GlobalAttributeId,ControlName , ValidationName ,SubValidationName ,
		RegExp, ValidationValue,IsRegExp)

		 Select aa.GlobalAttributeId,i.ControlName,i.Name AS ValidationName,j.ValidationName AS SubValidationName,
		j.RegExp,k.Name AS ValidationValue,CAST(CASE WHEN j.RegExp IS NULL THEN 0 ELSE 1 END AS BIT) AS IsRegExp
		
		fROM @EntityAttributeList aa
		  inner  JOIN dbo.ZnodeGlobalAttributeValidation AS k ON k.GlobalAttributeId = aa.GlobalAttributeId
          inner  JOIN dbo.ZnodeAttributeInputValidation AS i ON k.InputValidationId = i.InputValidationId
          LEFT  JOIN dbo.ZnodeAttributeInputValidationRule AS j ON k.InputValidationRuleId = j.InputValidationRuleId

		  insert into @EntityAttributeValueList
		  (GlobalAttributeId,GlobalAttributeValueId,GlobalAttributeDefaultValueId,AttributeValue ,MediaId,MediaPath)
		  Select GlobalAttributeId,aa.UserGlobalAttributeValueId,bb.GlobalAttributeDefaultValueId,
		  case when bb.MediaPath is not null then  @V_MediaServerThumbnailPath+bb.MediaPath 
		  else bb.AttributeValue end,		  
		  bb.MediaId,bb.MediaPath
		  from  dbo.ZnodeUserGlobalAttributeValue aa
		   inner join ZnodeUserGlobalAttributeValueLocale bb ON bb.UserGlobalAttributeValueId = aa.UserGlobalAttributeValueId 
		  Where  UserId=@GlobalEntityValueId

		 update aa
		  Set AttributeDefaultValueCode= h.AttributeDefaultValueCode,
              AttributeDefaultValue=g.AttributeDefaultValue,
			  GlobalAttributeDefaultValueId=g.GlobalAttributeDefaultValueId,
			  AttributeValue=case when aa.AttributeValue is  null then h.AttributeDefaultValueCode else aa.AttributeValue end, 
			  IsEditable = ISNULL(h.IsEditable, 1),DisplayOrder = h.DisplayOrder
		  from  @EntityAttributeValueList aa
		  inner JOIN dbo.ZnodeGlobalAttributeDefaultValue h ON h.GlobalAttributeDefaultValueId = aa.GlobalAttributeDefaultValueId                                       
          inner JOIN dbo.ZnodeGlobalAttributeDefaultValueLocale g ON h.GlobalAttributeDefaultValueId = g.GlobalAttributeDefaultValueId
          
		  insert into @EntityAttributeDefaultValueList
		  (GlobalAttributeDefaultValueId,GlobalAttributeId,AttributeDefaultValueCode,
			AttributeDefaultValue ,RowId ,IsEditable ,DisplayOrder )
		  Select  h.GlobalAttributeDefaultValueId, aa.GlobalAttributeId,h.AttributeDefaultValueCode,g.AttributeDefaultValue,0,ISNULL(h.IsEditable, 1),
		  h.DisplayOrder
		  from  @EntityAttributeList aa
		  inner JOIN dbo.ZnodeGlobalAttributeDefaultValue h ON h.GlobalAttributeId = aa.GlobalAttributeId
          inner JOIN dbo.ZnodeGlobalAttributeDefaultValueLocale g ON h.GlobalAttributeDefaultValueId = g.GlobalAttributeDefaultValueId
		  
		   if not exists (Select 1 from @EntityAttributeList )
			Begin
				insert into @EntityAttributeList
				(	GlobalEntityId ,EntityName ,EntityValue ,
				GlobalAttributeGroupId ,GlobalAttributeId ,AttributeTypeId ,AttributeTypeName ,
				AttributeCode  ,IsRequired ,IsLocalizable ,AttributeName,HelpDescription  ) 
				SELECT qq.GlobalEntityId,qq.EntityName,@EntityValue EntityValue,0 GlobalAttributeGroupId,
				0 GlobalAttributeId,0 AttributeTypeId,''AttributeTypeName,''AttributeCode,0 IsRequired,
				0 IsLocalizable,'' AttributeName,'' HelpDescription
				FROM dbo.ZnodeGlobalEntity AS qq
				 Where qq.EntityName=@EntityName 
			End
				

			SELECT GlobalEntityId,EntityName,EntityValue,GlobalAttributeGroupId,
			AA.GlobalAttributeId,AttributeTypeId,AttributeTypeName,AttributeCode,IsRequired,
			IsLocalizable,AttributeName,ControlName,ValidationName,SubValidationName,RegExp,
			ValidationValue,cast(isnull(IsRegExp,0) as bit)  IsRegExp,
			HelpDescription,AttributeValue,GlobalAttributeValueId,bb.GlobalAttributeDefaultValueId,
			aab.AttributeDefaultValueCode,
			aab.AttributeDefaultValue,isnull(aab.RowId,0)   RowId,cast(isnull(aab.IsEditable,0) as bit)   IsEditable
			,bb.MediaId,AA.DisplayOrder
			fROM @EntityAttributeList AA				
			left join @EntityAttributeDefaultValueList aab on aab.GlobalAttributeId=AA.GlobalAttributeId	
			left join @EntityAttributeValidationList vl on vl.GlobalAttributeId=aa.GlobalAttributeId			
			LEFT JOIN @EntityAttributeValueList BB ON BB.GlobalAttributeId=AA.GlobalAttributeId		 
		    and ( (aab.GlobalAttributeDefaultValueId=bb.GlobalAttributeDefaultValueId	)
			or  ( bb.MediaId is not null and isnull(vl.ValidationName,'')='IsAllowMultiUpload'  and bb.GlobalAttributeDefaultValueId is null )
			or  ( bb.MediaId is  null and  bb.GlobalAttributeDefaultValueId is null ))
			order by AA.DisplayOrder,aab.DisplayOrder

			SELECT 1 AS ID,CAST(1 AS BIT) AS Status;       
		  END TRY
         BEGIN CATCH
		 SELECT ERROR_MESSAGE()
             DECLARE @Status BIT ;
		  SET @Status = 0;
		  DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(),
		   @ErrorLine VARCHAR(100)= ERROR_LINE(),
		    @ErrorCall NVARCHAR(MAX)= null       			 
          SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		 
          EXEC Znode_InsertProcedureErrorLog
            @ProcedureName = 'Znode_GetGlobalEntityValueAttributeValues',
            @ErrorInProcedure = @Error_procedure,
            @ErrorMessage = @ErrorMessage,
            @ErrorLine = @ErrorLine,
            @ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ManageLinkProductList')
BEGIN 
	DROP PROCEDURE Znode_ManageLinkProductList
END
GO
CREATE PROCEDURE [dbo].[Znode_ManageLinkProductList]
(   @WhereClause      XML,
    @Rows             INT          = 100,
    @PageNo           INT          = 1,
    @Order_BY         VARCHAR(100) = '',
    @RowsCount        INT OUT,
    @LocaleId         INT          = 1,
    @RelatedProductId INT          = 0,
    @PimAttributeId   INT          = 0)
AS
   /*  Summary :- This Procedure is used to find the link product Detail
     Unit Testing
     EXEC Znode_ManageLinkProductList '' , @RowsCount = 0 ,@RelatedProductId=128
   */

     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY
             DECLARE @PimProductIds TransferId, --VARCHAR(MAX),
					 @PimAttributeIds VARCHAR(MAX),
					 @OutPimProductIds VARCHAR(max);
             DECLARE @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId();
             DECLARE @TransferPimProductId TransferId
			 DECLARE @TBL_PimMediaAttributeId TABLE (PimAttributeId INT ,AttributeCode VARCHAR(600))
			 INSERT INTO @TBL_PimMediaAttributeId (PimAttributeId,AttributeCode)
			 SELECT PimAttributeId,AttributeCode FROM Dbo.Fn_GetProductMediaAttributeId ()

		     DECLARE @TBL_LinkProductDetail TABLE
             (PimProductId           INT,
              PimLinkProductDetailId INT,
              RelatedProductId       INT,
              PimAttributeId         INT
             );
             DECLARE @TBL_AttributeDefaultValue TABLE
             (PimAttributeId            INT,
              AttributeDefaultValueCode VARCHAR(100),
              IsEditable                BIT,
              AttributeDefaultValue     NVARCHAR(MAX)
			  ,DisplayOrder INT
             );
             DECLARE @TBL_AttributeDetails AS TABLE
             (PimProductId   INT,
              AttributeValue NVARCHAR(MAX),
              AttributeCode  VARCHAR(600),
              PimAttributeId INT
             );
             DECLARE @FamilyDetails TABLE
             (PimProductId         INT,
              PimAttributeFamilyId INT,
              FamilyName           NVARCHAR(3000)
             );
             DECLARE @DefaultAttributeFamily INT=
             (
                 SELECT PimAttributeFamilyId
                 FROM ZnodePimAttributeFamily
                 WHERE IsCategory = 0
                       AND IsDefaultFamily = 1
             );
             DECLARE @ProductIdTable TABLE
             (PimProductId INT,
              CountId      INT,
              RowId        INT IDENTITY(1,1)
             );
             INSERT INTO @TBL_LinkProductDetail
             (PimProductId,
              PimLinkProductDetailId,
              RelatedProductId,
              PimAttributeId
             )
                    SELECT PimProductId,
                           PimLinkProductDetailId,
                           PimParentProductId,
                           PimAttributeId
                    FROM ZnodePimLinkProductDetail
                    WHERE PimParentProductId = @RelatedProductId
                          AND PimAttributeId = @PimAttributeId;

				INSERT INTO @TransferPimProductId
                SELECT PimProductId
                FROM @TBL_LinkProductDetail

			 IF NOT EXISTS (SELECT TOP 1 1 FROM @TransferPimProductId)
			 BEGIN
			  INSERT INTO @TransferPimProductId
			  SELECT '-1'

             END
			 DECLARE @AttributeCode NVARCHAR(max)
			 SET @AttributeCode = SUBSTRING ((SELECT ','+AttributeCode FROM [dbo].[Fn_GetProductGridAttributes]()  WHERE AttributeCode NOT IN ('AttributeFamily') FOR XML PATH('') ),2,4000)

			 EXEC Znode_GetProductIdForPaging
                  @whereClauseXML = @WhereClause,
                  @Rows = @Rows,
                  @PageNo = @PageNo,
                  @Order_BY = @Order_BY,
                  @RowsCount = @RowsCount OUT,
                  @LocaleId = @LocaleId,
                  @AttributeCode = @AttributeCode,
                  @PimProductId = @TransferPimProductId,
                  @IsProductNotIn = 0,
				  @OutProductId = @OutPimProductIds OUT;


			 INSERT INTO @ProductIdTable
             (PimProductId)
			 SELECT item
			 FROM dbo.split(@OutPimProductIds,',') SP


			INSERT INTO @PimProductIds ( Id )
			SELECT item
			FROM dbo.split(@OutPimProductIds,',') SP

             SET @PimAttributeIds = SUBSTRING( (SELECT ','+CAST(PimAttributeId AS VARCHAR(50)) FROM [dbo].[Fn_GetProductGridAttributes]() FOR XML PATH ('') ),2,4000);

			 INSERT INTO @TBL_AttributeDefaultValue
             (PimAttributeId,
              AttributeDefaultValueCode,
              IsEditable,
              AttributeDefaultValue,
			  DisplayOrder
             )
             EXEC Znode_GetAttributeDefaultValueLocale
                  @PimAttributeIds,
                  @LocaleId;
             INSERT INTO @TBL_AttributeDetails
             (PimProductId,
              AttributeValue,
              AttributeCode,
              PimAttributeId
             )
             EXEC [Znode_GetProductsAttributeValue]
                  @PimProductIds,
                  @PimAttributeIds,
                  @localeId;
             WITH Cte_UpdateDefaultAttributeValue
                  AS (SELECT PimProductId,
                             AttributeCode,
                             AttributeValue,
                             SUBSTRING(
                                      (
                                          SELECT ','+TBADV.AttributeDefaultValue
                                          FROM @TBL_AttributeDefaultValue TBADV
                                               INNER JOIN ZnodePimAttribute TBAC ON(TBADV.PimAttributeId = TBAC.PimAttributeId)
                                          WHERE TBAC.AttributeCode = TBAD.AttributeCode
                                                AND EXISTS
                                          (
                                              SELECT TOP 1 1
                                              FROM dbo.split(TBAD.AttributeValue, ',') SP
                                              WHERE Sp.item = TBADV.AttributeDefaultValueCode
                                          )
                                          FOR XML PATH('')
                                      ), 2, 4000) AttributeDefaultValue
                      FROM @TBL_AttributeDetails TBAD)
                  UPDATE TBAD
                    SET AttributeValue = CTUDAV.AttributeDefaultValue
                  FROM @TBL_AttributeDetails TBAD
                       INNER JOIN Cte_UpdateDefaultAttributeValue CTUDAV ON(CTUDAV.PimProductId = TBAD.PimProductId
                                                                            AND CTUDAV.AttributeCode = TBAD.AttributeCode)
                  WHERE AttributeDefaultValue IS NOT NULL;
             INSERT INTO @FamilyDetails
             (PimAttributeFamilyId,
              PimProductId
             )
             EXEC [dbo].[Znode_GetPimProductAttributeFamilyId]
                  @PimProductIds,
                  1;
             UPDATE a
               SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
                  INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                       AND LocaleId = @LocaleId);
             UPDATE a
               SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
                  INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                       AND LocaleId = @DefaultLocaleId)
             WHERE a.FamilyName IS NULL
                   OR a.FamilyName = '';

			 ;WITH Cte_ProductMedia
               AS (SELECT TBA.PimProductId , TBA.PimAttributeId
			   , SUBSTRING( ( SELECT ','+ISNULL(ZMC.CDNURL,ZMC.URL)+ZMSM.ThumbnailFolderName+'/'+ zm.PATH
			   FROM ZnodeMedia AS ZM
               INNER JOIN ZnodeMediaConfiguration ZMC  ON (ZM.MediaConfigurationId = ZMC.MediaConfigurationId)
			   INNER JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMC.MediaServerMasterId)
			   INNER JOIN @TBL_AttributeDetails AS TBAI ON (TBAI.AttributeValue  = CAST(ZM.MediaId AS VARCHAR(50)) )
			   INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBAI.PimATtributeId)
			   WHERE TBAI.PimProductId = TBA.PimProductId AND TBAI.PimAttributeId = TBA.PimAttributeId
			   FOR XML PATH('') ), 2 , 4000) AS AttributeValue
			   FROM @TBL_AttributeDetails AS TBA
			   INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBA.PimATtributeId ))

		      UPDATE TBAV SET AttributeValue = CTPM.AttributeVALue
			  FROM @TBL_AttributeDetails TBAV
			  INNER JOIN Cte_ProductMedia CTPM ON CTPM.PimProductId = TBAV.PimProductId  AND CTPM.PimAttributeId = TBAV.PimAttributeId
			  AND CTPM.PimAttributeId = TBAV.PimAttributeId;



			INSERT INTO @TBL_AttributeDetails             (PimProductId,              AttributeValue,              AttributeCode,              PimAttributeId             )
			SELECT PimProductId ,FamilyName, 'AttributeFamily',NULL
			FROM @FamilyDetails
				
             --- Update the  product families name locale wise
        UPDATE  @TBL_AttributeDetails SET PimAttributeId = 0 WHERE PimAttributeId IS nULL
	     DECLARE @ProductXML XML


	   	 SET @ProductXML =   '<MainProduct>'+ STUFF( (  SELECT '<Product>'
		                                                    +'<PimLinkProductDetailId>'+CAST(ISNULL(TBLPD.PimLinkProductDetailId,'') AS VARCHAR(50))+'</PimLinkProductDetailId>'
															+'<PimProductId>'+CAST(zpp.PimProductId AS VARCHAR(50))+'</PimProductId>'
															+'<RelatedProductId>'+CAST(ISNULL(TBLPD.RelatedProductId,'') AS VARCHAR(50))+'</RelatedProductId>'

		 + STUFF(    (  SELECT '<'+TBADI.AttributeCode+'>'+CAST( (SELECT ''+TBADI.AttributeValue FOR XML PATH('')) AS NVARCHAR(max))+'</'+TBADI.AttributeCode+'>'
															FROM @TBL_AttributeDetails TBADI
															 WHERE TBADI.PimProductId = zpp.PimProductId
															 ORDER BY TBADI.PimProductId DESC
															 FOR XML PATH (''), TYPE
																).value('.', ' Nvarchar(max)'), 1, 0, '')+'</Product>'

			 FROM @ProductIdTable AS zpp
             LEFT JOIN @TBL_LinkProductDetail AS TBLPD ON(TBLPD.PimProductId = ZPP.PimProductId)
             ORDER BY zpp.RowId
			FOR XML PATH (''),TYPE).value('.', ' Nvarchar(max)'), 1, 0, '')+'</MainProduct>'
		

			SELECT  @ProductXML  ProductXMl

		     SELECT AttributeCode ,  ZPAL.AttributeName
			 FROM ZnodePimAttribute ZPA
			 LEFT JOIN ZnodePiMAttributeLOcale ZPAL ON (ZPAL.PimAttributeId = ZPA.PimAttributeId )
             WHERE LocaleId = 1
			 AND  IsCategory = 0
			 AND ZPA.IsShowOnGrid = 1
			 UNION ALL
			 SELECT 'PublishStatus','Publish Status'


			SELECT @RowsCount AS RowsCount;



         END TRY
         BEGIN CATCH

              DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ManageLinkProductList @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@LocaleId = '+CAST(@LocaleId AS VARCHAR(50))+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@RelatedProductId='+CAST(@RelatedProductId AS VARCHAR(50))+',@PimAttributeId='+CAST(@PimAttributeId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));

             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;

             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_ManageLinkProductList',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;


GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_UpdateQuoteStatus')
BEGIN 
	DROP PROCEDURE Znode_UpdateQuoteStatus
END
GO
CREATE PROCEDURE [dbo].[Znode_UpdateQuoteStatus]
(   @OmsQuoteId      VARCHAR(2000),
    @OmsOrderStateId INT           = NULL,
    @Status          INT           = 0 OUT, -- 1 for  sucessfull delete and update 
	@ExceptUpdateStatus VARCHAR(max) = '', -- in this status Quote are not updated 
	@ModifiedBy INT = 0 , 
	@IsAdminUser BIT = 0 
)
AS
  /* 
	Summary :- This Procedure is used to update the Quote status 
				returns 0 or 1 as result depends upon the status
	Unit Testing 
	begin tran
	DECLARE @OutIds INT = 0 
	EXEC Znode_UpdateQuoteStatus '306,281,263',80,@OutIds OUT,'Ordered,Draft'
	SELECT @OutIds
	rollback tran
	SELECT * FROM [ZNodeUserQuoteOrderLineItem]  WHERE omsQuoteId IN (306,281,263)
	SELECT * FROM ZnodeOmsOrderState
   */
BEGIN 
   BEGIN TRY
      SET NOCOUNT ON;
			 DECLARE @TBL_NotUpdateStatus TABLE (value  VARCHAR(max))
			 DECLARE @RejectOmsOrderStateId INT = (SELECT TOP 1 OmsOrderStateId FROM ZnodeOmsOrderState WHERE OrderStateName = 'REJECTED')
			 DECLARE @ApprovedOmsOrderStateId INT = (SELECT TOP 1 OmsOrderStateId FROM ZnodeOmsOrderState WHERE OrderStateName = 'APPROVED')
			 DECLARE @TBL_UpdateApprovalState TABLE (UserId INT ,ApprovalLevelId INT ,ApproverUserId INT, ApproverOrder INT   )
			 DECLARE @TBL_OrderState TABLE
             (FirstName  VARCHAR(100),
              LastName   VARCHAR(100),
              Email      VARCHAR(50),
              [Status]   NVARCHAR(MAX),
              OmsQuoteId INT,
              UserId     INT,
              PortalId   INT,
			  OmsOrderStateId INT
             );
             
			 IF @ExceptUpdateStatus = '' 
			 BEGIN 
				 INSERT INTO @TBL_NotUpdateStatus 
				 SELECT value 
				 FROM dbo.[Fn_GetProcedureAttributeDefault]('OrderState') FNGP
			 END 
			 ELSE 
			 BEGIN 
				 INSERT INTO @TBL_NotUpdateStatus 
				 SELECT item 
				 FROM dbo.split(@ExceptUpdateStatus,',') FNGP
			 END 

			 IF EXISTS (SELECT TOP 1 1  FROM  ZnodeUser ZU 
									INNER JOIN AspNetUsers AU ON (AU.Id = ZU.AspNetUserId)
									INNER JOIN AspNetUserRoles RTY ON (RTY.UserId = AU.Id)
									INNER JOIN AspNetRoles TU ON (TU.Id = RTY.RoleId)
									WHERE ZU.UserId = @ModifiedBy  AND (ISNULL(TU.TypeOfRole,'') <> 'B2B' AND   TU.Name <> 'Customer'))
BEGIN 
  SET @IsAdminUser = 1 
END 


			DECLARE @OmsQuoteIds TABLE (OmsQuoteId INT )
			INSERT INTO  @OmsQuoteIds
			SELECT Item
            FROM dbo.Split(@OmsQuoteId, ',') SP

			 	 
			 INSERT INTO @TBL_OrderState
             (FirstName,
              LastName,
              Email,
              [Status],
              OmsQuoteId,
              UserId,
              PortalId,
			  OmsOrderStateId
             )
                    SELECT ZU.FirstName,
                           Zu.LastName,
                           ZU.Email,
                           ZOOS.OrderStateName,
                           ZOQ.OmsQuoteId,
                           ZU.UserId,
                           ZOQ.PortalId,
						   ZOOS.OmsOrderStateId
                    FROM ZnodeUser ZU
                         INNER JOIN ZnodeOmsQuote ZOQ ON(ZOQ.UserId = ZU.UserId)
                         INNER JOIN ZnodeOmsOrderState ZOOS ON(ZOOS.OmsOrderStateId = ZOQ.OmsOrderStateId)
                    WHERE EXISTS
                    (
                        SELECT TOP 1 1
                        FROM @OmsQuoteIds SP
                        WHERE ZOQ.OmsQuoteId = SP.OmsQuoteId
                    );
         

		  DECLARE @ApproverUserId TABLE (ApproverUserId INT )
		  INSERT INTO @ApproverUserId
		  SELECT  ApproverUserId 
		  FROM ZnodeUserApprovers 
		  WHERE ApproverOrder IN (SELECT ApproverOrder  FROM  ZnodeUserApprovers 
						WHERE ApproverUserId = @ModifiedBy 
						AND USERId  = ( SELECT TOP 1 UserId FROM ZnodeOMSQuoteApproval ZOQ WHERE EXISTS
                    (
                        SELECT TOP 1 1
                        FROM @OmsQuoteIds SP
                        WHERE ZOQ.OmsQuoteId = SP.OmsQuoteId
                    ) )
		  ) AND USERId  = ( SELECT TOP 1 UserId FROM ZnodeOMSQuoteApproval 
		  WHERE EXISTS
                    (
                        SELECT TOP 1 1
                        FROM @OmsQuoteIds SP
                        WHERE ZnodeOMSQuoteApproval.OmsQuoteId = SP.OmsQuoteId
                    ) )
			 
		INSERT INTO @ApproverUserId
		SELECT ApproverUserId 
		FROM ZnodeUserApprovers a 
	    INNER JOIN ZnodePortalApproval b ON (b.PortalApprovalId= a.PortalApprovalId)
		WHERE a.IsActive = 1 
		AND b.PortalId = (SELECT TOP 1 PortalId FROM ZnodeOmsQuote asd WHERE EXISTS
                    (
                        SELECT TOP 1 1
                        FROM @OmsQuoteIds SP
                        WHERE asd.OmsQuoteId = SP.OmsQuoteId
                    ) )



		   UPDATE ZnodeOMSQuoteApproval
               SET OmsOrderStateId = @OmsOrderStateId
			   , ModifiedBy = @ModifiedBy,ModifiedDate = GetDate()
             WHERE EXISTS
             (
                 SELECT 1
                 FROM dbo.Split(@OmsQuoteId, ',') AS f
                 WHERE f.item = ZnodeOMSQuoteApproval.OmsQuoteId
             )
             AND ( (NOT EXISTS 
             (
                 SELECT TOP 1 1
                 FROM @TBL_OrderState TBOS
                 WHERE EXISTS
                 (
                     SELECT TOP 1 1
                     FROM @TBL_NotUpdateStatus FNGP
                     WHERE FNGP.Value = TBOS.[Status]
                 )
                 AND ZnodeOMSQuoteApproval.OmsQuoteId = TBOS.OmsQuoteId
             )
			 AND( ApproverUserId = @ModifiedBy  OR ApproverUserId  
			 IN (SELECT ApproverUserId FROM @ApproverUserId) OR @IsAdminUser = 1 ))) ; 
			 
			 DECLARE @AmountOfQuote NUMERIC(28,8) = (SELECT TOP 1 QuoteOrderTotal FROM ZnodeOmsQuote WHERE OmsQuoteId = @OmsQuoteId  )

			INSERT INTO @TBL_UpdateApprovalState 
			SELECT UserId  ,ApproverLevelId  ,ApproverUserId , ApproverOrder
			FROM ZnodeUserApprovers a 
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeOMSQuoteApproval TY 
			WHERE TY.UserId = a.UserId 
			AND TY.ApproverOrder = a.ApproverOrder  
			AND  TY.OmsOrderStateId = @ApprovedOmsOrderStateId
			AND EXISTS
             (
                 SELECT 1
                 FROM dbo.Split(@OmsQuoteId, ',') AS f
                 WHERE f.item = TY.OmsQuoteId
             )
			 )
			AND EXISTS (SELECT TOP 1 1 FROM ZnodeOMSQuoteApproval TY 
			WHERE TY.UserId = a.UserId 
			AND EXISTS
             (
                 SELECT 1
                 FROM dbo.Split(@OmsQuoteId, ',') AS f
                 WHERE f.item = TY.OmsQuoteId
             ) )
			 AND  a.FromBudgetAmount <= @AmountOfQuote
			
			UPDATE ZnodeOMSQuoteApproval 
			SET IsApprovalRoutingComplete = 1 
			   , ModifiedBy = @ModifiedBy,ModifiedDate = GetDate()
             WHERE EXISTS
             (
                 SELECT 1
                 FROM dbo.Split(@OmsQuoteId, ',') AS f
                 WHERE f.item = ZnodeOMSQuoteApproval.OmsQuoteId
             )
             AND (NOT EXISTS (SELECT TOP 1 1  FROM @TBL_UpdateApprovalState) OR @IsAdminUser = 1) 
			 AND (@IsAdminUser = 1 OR ZnodeOMSQuoteApproval.ApproverUserId = @ModifiedBy)
			 ;

			

			 UPDATE ZnodeOmsQuote
               SET OmsOrderStateId = @OmsOrderStateId
			   , ModifiedBy = @ModifiedBy
			   ,ModifiedDate = GetDate()
             WHERE EXISTS
             (
                 SELECT 1
                 FROM dbo.Split(@OmsQuoteId, ',') AS f
                 WHERE f.item = ZnodeOmsQuote.OmsQuoteId
             )
             AND ((
			 NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_OrderState TBOS
                 WHERE EXISTS
                 (
                     SELECT TOP 1 1
                     FROM @TBL_NotUpdateStatus FNGP
                     WHERE FNGP.Value = TBOS.[Status]
                 )
                 AND ZnodeOmsQuote.OmsQuoteId = TBOS.OmsQuoteId
             )
			 AND (EXISTS (SELECT TOP 1  1  FROM ZnodeOMSQuoteApproval TY WHERE TY.OmsQuoteId = ZnodeOmsQuote.OmsQuoteId AND TY.IsApprovalRoutingComplete = 1   )
			 OR EXISTS (SELECT TOP 1 1   FROM ZnodeOMSQuoteApproval TY WHERE TY.OmsQuoteId = ZnodeOmsQuote.OmsQuoteId  AND TY.OmsOrderStateId = @RejectOmsOrderStateId)) 
			 ) OR @IsAdminUser = 1 ) ;
			
		     IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_OrderState TBOS
                 WHERE EXISTS
                 (
                     SELECT TOP 1 1
                     FROM @TBL_NotUpdateStatus FNGP
                     WHERE FNGP.Value = TBOS.[Status]
                 )
             )  AND EXISTS (SELECT TOP 1 1 FROM @TBL_OrderState TBOS) 
                 BEGIN
                    SELECT FirstName,
                            LastName,
                            Email,
                            ZOOS.OrderStateName [Status],
                            a.OmsQuoteId,
                            a.UserId,
                            a.PortalId, 
							ZOOS2.OrderStateName ChildOrderStatus,
							aa.QuoteOrderTotal,
							ZOOS2.OmsOrderStateId 
                     FROM @TBL_OrderState a 
					 INNER JOIN ZnodeOmsQuote aa ON (aa.OmsQuoteId =a.OmsQuoteId)
					 INNER JOIN ZnodeOmsOrderState ZOOS ON(ZOOS.OmsOrderStateId =  aa.OmsOrderStateId )
					  INNER JOIN ZnodeOmsOrderState ZOOS2 ON(ZOOS2.OmsOrderStateId =  @OmsOrderStateId )
                     SET @Status = 1;
                  
                 END;
             ELSE
                 BEGIN
                     SET @Status = 0;
                 END;
         END TRY
         BEGIN CATCH
              
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_UpdateQuoteStatus @OmsQuoteId = '+@OmsQuoteId+',@OmsOrderStateId='+CAST(@OmsOrderStateId AS VARCHAR(50))+',@ExceptUpdateStatus='+@ExceptUpdateStatus+',@Status='+CAST(@Status AS VARCHAR(10))+',@ModifiedBy='+@ModifiedBy;
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_UpdateQuoteStatus',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_UpdateCategoryProductDisplayOrder')
BEGIN 
	DROP PROCEDURE Znode_UpdateCategoryProductDisplayOrder
END
GO
CREATE   PROCEDURE [dbo].[Znode_UpdateCategoryProductDisplayOrder]       
(      
 @JSONString NVARCHAR(max)= '[]'      
,@PimCategoryHierarchyId INT   
,@PageNo INT = 0     
,@Status BIT = 0 out    
)      
      
AS      
BEGIN       
 BEGIN TRY       
  SET NOCOUNT ON       
    DECLARE @TBL_PimProductId TABLE (PimProductId INT, RowId INT IDENTITY(1,1)  )      
          
      
      
    INSERT INTO @TBL_PimProductId (PimProductId)      
    EXEC [dbo].[Znode_GetJSONTableData] @JSONString , 'Id'      
      
    SET  @PageNo = ISNULL(@PageNo,0)
 
  
      
 UPDATE ZPCC      
 SET ZPCC.DisplayOrder =  CASE WHEN @PageNo = 0  THEN RowId ELSE     
   CASE WHEN LEN(RowId) > 1 THEN CAST(@PageNo-1 +LEFT(RowId , LEN(RowId)-1) AS VARCHAr(1000)) +RIGHT(CAST(RowId AS VARCHAr(1000)),1)   ELSE CAST(@PageNo-1 AS VARCHAr(1000)) + RIGHT(CAST(RowId AS VARCHAr(1000)),1) END   
  END     
 FROM ZnodePimCatalogCategory ZPCC       
 INNER JOIN @TBL_PimProductId TBLP ON (TBLP.PimProductId = ZPCC.PimProductId)      
 WHERE ZPCC.PimCategoryHierarchyId = @PimCategoryHierarchyId    
      
  SELECT 1 AS ID , CAST(1 AS BIT) AS [Status];    
 SET @Status = 1       
        
         
 END TRY       
 BEGIN CATCH       
  SELECT ERROR_MESSAGE()      
   SELECT 0 AS ID , CAST(0 AS BIT) AS [Status];    
  SET @Status = 0      
 END CATCH       
END
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetCatalogCategoryProducts')
BEGIN 
	DROP PROCEDURE Znode_GetCatalogCategoryProducts
END
GO
CREATE PROCEDURE [dbo].[Znode_GetCatalogCategoryProducts]
( 
  @WhereClause      XML,
  @Rows             INT           = 100,
  @PageNo           INT           = 1,
  @Order_BY         VARCHAR(1000) = 'DisplayOrder asc',
  @RowsCount        INT OUT,
  @LocaleId         INT           = 1,
  @PimCategoryId    INT           = 0,
  @PimCatalogId     INT           = 0,
  @IsAssociated     BIT           = 0,
  @ProfileCatalogId INT           = 0,
  @AttributeCode   VARCHAR(max) = '',
  @PimCategoryHierarchyId INT =0,
  @PortalId INT=0
  )
AS
   
/*
	   Summary:  Get product List  Catalog / category / respective product list   		   
	   Unit Testing   
	   begin tran
	   declare @p7 int = 0  
	   EXEC Znode_GetCatalogCategoryProducts @WhereClause=N'',@Rows=10,@PageNo=1,@Order_By=N'',
	   @RowsCount=@p7 output,@PimCategoryId=11,@PimCatalogId = 1 ,@LocaleId=1 ,@ProfileCatalogId = 1 
	   rollback tran
	  
    */

     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY
             DECLARE @DefaultAttributeFamily INT= dbo.Fn_GetDefaultPimProductFamilyId(), @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId(), @OrderId INT= 0;
             DECLARE @SQL VARCHAR(MAX), 
					 @PimProductId TransferId,--VARCHAR(MAX)= '', 
					 @PimAttributeId VARCHAR(MAX),
					 @OutPimProductIds VARCHAR(max);
             DECLARE @TransferPimProductId TransferId 

			 DECLARE @tbl_ProductPricingSku TABLE (sku nvarchar(200),RetailPrice numeric(28,6),SalesPrice numeric(28,6),TierPrice numeric(28,6),
			 TierQuantity numeric(28,6),CurrencyCode varchar(200),CurrencySuffix varchar(2000),CultureCode varchar(2000), ExternalId NVARCHAR(2000))				

			 DECLARE @TBL_PimMediaAttributeId TABLE (PimAttributeId INT ,AttributeCode VARCHAR(600))
			 INSERT INTO @TBL_PimMediaAttributeId (PimAttributeId,AttributeCode)
			 SELECT PimAttributeId,AttributeCode FROM Dbo.Fn_GetProductMediaAttributeId ()

		
             DECLARE @TBL_AttributeDefaultValue TABLE
             (
				  PimAttributeId            INT,
				  AttributeDefaultValueCode VARCHAR(100),
				  IsEditable                BIT,
				  AttributeDefaultValue     NVARCHAR(MAX),
				  DisplayOrder INT 
             );
             DECLARE @TBL_AttributeDetails AS TABLE
             (
				  PimProductId   INT,
				  AttributeValue NVARCHAR(MAX),
				  AttributeCode  VARCHAR(600),
				  PimAttributeId INT,
				  AttributeDefaultValue NVARCHAR(MAX)
             );
             DECLARE @FamilyDetails TABLE
             (
				  PimProductId         INT,
				  PimAttributeFamilyId INT,
				  FamilyName           NVARCHAR(3000)
             );
             DECLARE @TBL_AttributeValue TABLE
             (
				  PimCategoryAttributeValueId INT,
				  PimCategoryId               INT,
				  CategoryValue               NVARCHAR(MAX),
				  AttributeCode               VARCHAR(300),
				  PimAttributeId              INT
             );
             IF @Order_By = ''
                 BEGIN
                     SET @Order_By = 'DisplayOrder asc'
                 END;
             --IF @ProfileCatalogId > 0
             --    BEGIN
             --        INSERT INTO @TBL_ProfileCatalogCategory (ProfileCatalogId,PimProductId,PimCategoryId,PimCatalogCategoryId,PimCategoryHierarchyId)
             --        SELECT ZPC.ProfileCatalogId,PimProductId,PimCategoryId,ZCC.PimCatalogCategoryId,PimCategoryHierarchyId
             --        FROM ZnodePimCatalogCategory AS ZCC
             --        INNER JOIN ZnodeProfileCatalog AS ZPC ON(ZPC.PimCatalogId = ZCC.PimCatalogId)
             --        WHERE ZPC.ProfileCatalogId = @ProfileCatalogId

             --        AND NOT EXISTS
             --            (
             --               SELECT TOP 1 1
             --               FROM ZnodeProfileCatalogCategory AS ZPCC
             --               WHERE ZPCC.PimCatalogCategoryId = ZCC.PimCatalogCategoryId
             --            );
             --    END;
             IF @PimCatalogId = 0
                 BEGIN
					INSERT INTO @TransferPimProductId 
                    SELECT PimProductId 
                    FROM ZnodePimCategoryProduct AS ZCP
                    WHERE ZCP.PimCategoryId = @PimCategoryId
					AND PimProductId IS NOT NULL 
                                                   
                 END;
             ELSE
                 BEGIN
                     IF @IsAssociated = 0
                        AND @ProfileCatalogId > 0
                         BEGIN
				INSERT INTO @TransferPimProductId 
                SELECT DISTINCT PimProductId 
                FROM ZnodePimCatalogCategory AS ZCP
                WHERE ZCP.PimCatalogId = @PimCatalogId
             
				AND ZCP.PimCategoryHierarchyId = @PimCategoryHierarchyId 
                AND NOT EXISTS
                (
                    SELECT TOP 1 1
                    FROM ZnodeProfileCatalogCategory AS TBPCC
                    WHERE TBPCC.PimCatalogCategoryId = ZCP.PimCatalogCategoryId
                        AND TBPCC.ProfileCatalogId = @ProfileCatalogId
                )
               	AND PimProductId IS NOT NULL                                         
                        END;
                     ELSE
                         BEGIN
                             IF @IsAssociated = 1
                                AND @ProfileCatalogId > 0
                                 BEGIN
						INSERT INTO @TransferPimProductId 
                        SELECT PimProductId
                        FROM ZnodePimCatalogCategory AS ZCP
                        WHERE ZCP.PimCatalogId = @PimCatalogId
                            AND ZCP.PimCategoryHierarchyId = @PimCategoryHierarchyId
                            AND EXISTS
                        (
                            SELECT TOP 1 1
                            FROM ZnodeProfileCatalogCategory AS TBPCC
                            WHERE TBPCC.PimCatalogCategoryId = ZCP.PimCatalogCategoryId
                                AND TBPCC.ProfileCatalogId = @ProfileCatalogId
                        )
                       AND PimProductId IS NOT NULL                                             
                                     SET @IsAssociated = 0;
                                 END;
                             ELSE
                                 BEGIN
					INSERT INTO @TransferPimProductId 
                    SELECT DISTINCT PimProductId 
                    FROM ZnodePimCatalogCategory AS ZCP
                    WHERE ZCP.PimCatalogId = @PimCatalogId
                
					AND ZCP.PimCategoryHierarchyId = @PimCategoryHierarchyId 
				    AND PimProductId IS NOT NULL  
			
                                   
                                 END;
                         END;
                 END;
				 
				 IF NOT EXISTS (SELECT TOP 1 1 FROM @TransferPimProductId)
				 BEGIN 
                  INSERT INTO @TransferPimProductId
				  SELECT '0'

				 END 


             DECLARE @ProductIdTable TABLE
             ([PimProductId] INT,
              [CountId]      INT,
              PimCategoryId  INT,
              RowId          INT IDENTITY(1,1)
             );
            DECLARE  @ProductListIdRTR TransferId
	 DECLARE @TAb Transferid 
	 DECLARE @tBL_mainList TABLE (Id INT,RowId INT)
	 
	 SET @IsAssociated = CASE WHEN @IsAssociated = 0 THEN 1  
					 WHEN @IsAssociated = 1 THEN 0 END 
		


	 INSERT INTO @ProductListIdRTR
	 EXEC Znode_GetProductList  @IsAssociated,@TransferPimProductId
	 


	 IF CAST(@WhereClause AS NVARCHAR(max))<> N''
	 BEGIN 
	 
	  SET @SQL = 'SELECT PimProductId FROM ##Temp_PimProductId'+CAST(@@SPID AS VARCHAR(500))

	  EXEC Znode_GetFilterPimProductId @WhereClause,@ProductListIdRTR,@localeId
	  
      INSERT INTO @TAB 
	  EXEC (@SQL)
	
	 END 

	 IF EXISTS (SELECT Top 1 1 FROM @TAb ) OR CAST(@WhereClause AS NVARCHAR(max)) <> N''
	 BEGIN 
	 
		 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
		 SET @order_by = REPLACE(@order_by,'DisplayOrder','ProductName')
		 INSERT INTO @TBL_MainList(id,RowId)
		 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @TAb ,@AttributeCode,@localeId,
		 @PimCategoryHierarchyId=@PimCategoryHierarchyId ,@PortalId=@PortalId
	 
		 END 
	 ELSE 
	 BEGIN
	       
	 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
	 SET @order_by = REPLACE(@order_by,'DisplayOrder','ProductName')
	 INSERT INTO @TBL_MainList(id,RowId)
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @ProductListIdRTR ,@AttributeCode,@localeId,
	 @PimCategoryHierarchyId=@PimCategoryHierarchyId ,@PortalId=@PortalId 
	 END 
			 INSERT INTO @ProductIdTable
             (PimProductId) 
			 SELECT id 
			 FROM @TBL_MainList 
            
			 UPDATE @ProductIdTable
               SET
                   PimCategoryId = @PimCategoryId;
           

			 INSERT INTO @PimProductId  ( Id )
			 SELECT PimProductId FROM @ProductIdTable

             SET @PimAttributeId = SUBSTRING((SELECT ','+CAST(PimAttributeId AS VARCHAR(50)) FROM [dbo].[Fn_GetGridPimAttributes]() FOR XML PATH('')), 2, 4000);
             
			 DECLARE @PimAttributeIds TransferId  
			 INSERT INTO @PimAttributeIds
			 SELECT PimAttributeId  
			 FROM [dbo].[Fn_GetProductGridAttributes]()
			 
			 
			 INSERT INTO @TBL_AttributeDefaultValue (PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder )
            
			 EXEC Znode_GetAttributeDefaultValueLocale @PimAttributeId,@LocaleId;
            
			 INSERT INTO @TBL_AttributeDetails (PimProductId,AttributeValue,AttributeCode,PimAttributeId,AttributeDefaultValue)

             EXEC Znode_GetProductsAttributeValue_newTesting @PimProductId,@PimAttributeId,@localeId;
             SET @PimAttributeId = [dbo].[Fn_GetCategoryNameAttributeId]();

             INSERT INTO @TBL_AttributeValue (PimCategoryAttributeValueId,PimCategoryId,CategoryValue,AttributeCode,PimAttributeId)

             EXEC [dbo].[Znode_GetCategoryAttributeValue] @PimCategoryId,@PimAttributeId,@LocaleId;
          
		    ;WITH Cte_ProductMedia
               AS (SELECT TBA.PimProductId , TBA.PimAttributeId 
			   , SUBSTRING( ( SELECT ','+ISNULL(ZMC.CDNURL,ZMC.URL)+ZMSM.ThumbnailFolderName+'/'+ zm.PATH 
			   FROM ZnodeMedia AS ZM
               INNER JOIN ZnodeMediaConfiguration ZMC  ON (ZM.MediaConfigurationId = ZMC.MediaConfigurationId)
			   INNER JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMC.MediaServerMasterId)
			   INNER JOIN @TBL_AttributeDetails AS TBAI ON (TBAI.AttributeValue  = CAST(ZM.MediaId AS VARCHAR(50)) )
			   INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBAI.PimATtributeId)
			   WHERE TBAI.PimProductId = TBA.PimProductId AND TBAI.PimAttributeId = TBA.PimAttributeId 
			   FOR XML PATH('') ), 2 , 4000) AS AttributeValue 
			   FROM @TBL_AttributeDetails AS TBA 
			   INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBA.PimATtributeId ))
                          
		      UPDATE TBAV SET AttributeValue = CTPM.AttributeVALue
			  FROM @TBL_AttributeDetails TBAV 
			  INNER JOIN Cte_ProductMedia CTPM ON CTPM.PimProductId = TBAV.PimProductId  AND CTPM.PimAttributeId = TBAV.PimAttributeId 
			  AND CTPM.PimAttributeId = TBAV.PimAttributeId;

             INSERT INTO @FamilyDetails (PimAttributeFamilyId,PimProductId)
             EXEC [dbo].[Znode_GetPimProductAttributeFamilyId] @PimProductId,1;
             UPDATE a
             SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
             INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                  AND LocaleId = @LocaleId);
             UPDATE a
             SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
             INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                  AND LocaleId = @DefaultLocaleId)
             WHERE a.FamilyName IS NULL
                   OR a.FamilyName = '';


             SELECT zpp.PimProductid AS ProductId,zpp.PimProductId,@PimCatalogId AS PimCatalogId,zpp.PimCategoryId,[ProductName],
			 ProductType,ISNULL(zf.FamilyName, '') AS AttributeFamily,[SKU],[Price],[Quantity],
                    CASE
                        WHEN Piv.[IsActive] IS NULL
                        THEN CAST(0 AS BIT)
                        ELSE CAST(Piv.[IsActive] AS BIT)
                    END AS [IsActive],
                    piv.[ProductImage] ImagePath,
                    [Assortment],
                    TBAV.CategoryValue AS [CategoryName],
                    @LocaleId AS LocaleId,
                    ZCC.[DisplayOrder],
                    ZPCC.ProfileCatalogCategoryId,
                    zpp.RowId,
					ZCC.PimCategoryHierarchyId
			 INTO #temp_ProductDetails 
             FROM @ProductIdTable AS zpp
			 INNER JOIN @TBL_MainList TMM ON (TMM.Id = zpp.PimProductId)
                  LEFT JOIN @FamilyDetails AS zf ON(zf.PimProductId = zpp.PimProductId)
                  INNER JOIN
             (
                 SELECT PimProductId,
                        AttributeValue,
                        AttributeCode
                 FROM @TBL_AttributeDetails
             ) TB PIVOT(MAX(AttributeValue) FOR AttributeCode IN([ProductName],
                                                                 [SKU],
                                                                 [Price],
                                                                 [Quantity],
                                                                 [IsActive],
                                                                 [ProductType],
                                                                 [ProductImage],
                                                                 [Assortment],
                                                                 [DisplayOrder])) AS Piv ON(Piv.PimProductId = zpp.PimProductid)
                  LEFT JOIN @TBL_AttributeValue AS TBAV ON(TBAV.PimCategoryId = ZPP.PimCategoryId)
                  LEFT JOIN ZnodePimCategoryProduct AS ZPCP ON(ZPCP.PimProductId = Zpp.PimProductId
                                                               AND ZPCP.PimCategoryId = Zpp.PimCategoryId)
                  LEFT JOIN ZnodePimCatalogCategory AS ZCC ON(ZCC.PimProductId = Zpp.PimProductId
                                                             AND ZCC.PimCategoryHierarchyId = @PimCategoryHierarchyId
                                                              AND ZCC.PimCatalogId = @PimCatalogId)
                  LEFT JOIN ZnodeProfileCatalogCategory AS ZPCC ON(ZPCC.PimCatalogCategoryId = ZCC.PimCatalogCategoryId
                                                                   AND ZPCC.ProfileCatalogId = @ProfileCatalogId)
                  
            ORDER BY zpp.RowId

			DECLARE @SKUS VARCHAR(max) 
			,@userId INT = 0,@Date DATETIME  = dbo.FN_getDate() 

			SELECT @SKUS = COALESCE(@SKUS+',' ,'') + SKU
			FROM #temp_ProductDetails
				 				
			INSERT INTO @tbl_ProductPricingSku		
			EXEC Znode_GetPublishProductPricingBySku 	@SKU=@SKUS, @PortalId= @PortalId,@Userid= @userid ,@currentUtcDate=	@Date
			
			SELECT DISTINCT ProductId, PimProductId	,PimCatalogId,	PimCategoryId,	ProductName	,ProductType,	
			AttributeFamily,	a.SKU	,dbo.Fn_GetPortalCurrencySymbol(@portalId)+CAST(Dbo.Fn_GetDefaultPriceRoundOff(RetailPrice) AS NVARCHAR(max)) Price,	Quantity,	
			IsActive,	ImagePath,	Assortment,	CategoryName,	LocaleId,	DisplayOrder	,ProfileCatalogCategoryId,	RowId,	PimCategoryHierarchyId	
			FROM #temp_ProductDetails a 
			LEFT JOIN @tbl_ProductPricingSku b ON (dbo.FN_TRIM(b.SKU) = a.SKU )
			ORDER BY RowId
					  
     IF EXISTS (SELECT Top 1 1 FROM @TAb )
	 BEGIN 

		  SELECT @RowsCount = (SELECT COUNT(1) FROM @TAb) 
	 END 
	 ELSE 
	 BEGIN
	 		  SELECT @RowsCount =(SELECT COUNT(1) FROM @ProductListIdRTR)   
	 END 
	

         END TRY
         BEGIN CATCH
		    SELECT ERROR_message()
             DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetCatalogCategoryProducts @WhereClause = '''+ISNULL(CAST(@WhereClause AS VARCHAR(MAX)),'''''')+''',@Rows='+ISNULL(CAST(@Rows AS
			VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')+',
			@LocaleId = '+ISNULL(CAST(@LocaleId AS VARCHAR(50)),'''')+',@PimCategoryId='+ISNULL(CAST(@PimCategoryId AS VARCHAR(50)),'''')+',@PimCatalogId='+ISNULL(CAST(@PimCatalogId AS VARCHAR(50)),'''')+',@IsAssociated='+ISNULL(CAST(@IsAssociated AS VARCHAR(50)),'''')+',
			@ProfileCatalogId='+ISNULL(CAST(@ProfileCatalogId AS VARCHAR(50)),'''')+',@AttributeCode='''+ISNULL(CAST(@AttributeCode AS VARCHAR(50)),'''''')+''',@PimCategoryHierarchyId='+ISNULL(CAST(@PimCategoryHierarchyId AS VARCHAR(10)),'''');
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetCatalogCategoryProducts',
				@ErrorInProcedure = 'Znode_GetCatalogCategoryProducts',
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
	 GO
	 IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetCatalogCategoryProducts')
BEGIN 
	DROP PROCEDURE Znode_GetCatalogCategoryProducts
END
GO
CREATE PROCEDURE [dbo].[Znode_GetCatalogCategoryProducts]
( 
  @WhereClause      XML,
  @Rows             INT           = 100,
  @PageNo           INT           = 1,
  @Order_BY         VARCHAR(1000) = 'DisplayOrder asc',
  @RowsCount        INT OUT,
  @LocaleId         INT           = 1,
  @PimCategoryId    INT           = 0,
  @PimCatalogId     INT           = 0,
  @IsAssociated     BIT           = 0,
  @ProfileCatalogId INT           = 0,
  @AttributeCode   VARCHAR(max) = '',
  @PimCategoryHierarchyId INT =0,
  @PortalId INT=0
  )
AS
   
/*
	   Summary:  Get product List  Catalog / category / respective product list   		   
	   Unit Testing   
	   begin tran
	   declare @p7 int = 0  
	   EXEC Znode_GetCatalogCategoryProducts @WhereClause=N'',@Rows=10,@PageNo=1,@Order_By=N'',
	   @RowsCount=@p7 output,@PimCategoryId=11,@PimCatalogId = 1 ,@LocaleId=1 ,@ProfileCatalogId = 1 
	   rollback tran
	  
    */

     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY
             DECLARE @DefaultAttributeFamily INT= dbo.Fn_GetDefaultPimProductFamilyId(), @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId(), @OrderId INT= 0;
             DECLARE @SQL VARCHAR(MAX), 
					 @PimProductId TransferId,--VARCHAR(MAX)= '', 
					 @PimAttributeId VARCHAR(MAX),
					 @OutPimProductIds VARCHAR(max);
             DECLARE @TransferPimProductId TransferId 

			 DECLARE @tbl_ProductPricingSku TABLE (sku nvarchar(200),RetailPrice numeric(28,6),SalesPrice numeric(28,6),TierPrice numeric(28,6),
			 TierQuantity numeric(28,6),CurrencyCode varchar(200),CurrencySuffix varchar(2000),CultureCode varchar(2000), ExternalId NVARCHAR(2000)
			 ,Custom1 NVARCHAR(MAX), Custom2 NVARCHAR(MAX), Custom3 NVARCHAR(MAX))				

			 DECLARE @TBL_PimMediaAttributeId TABLE (PimAttributeId INT ,AttributeCode VARCHAR(600))
			 INSERT INTO @TBL_PimMediaAttributeId (PimAttributeId,AttributeCode)
			 SELECT PimAttributeId,AttributeCode FROM Dbo.Fn_GetProductMediaAttributeId ()

             DECLARE @TBL_AttributeDefaultValue TABLE
             (
				  PimAttributeId            INT,
				  AttributeDefaultValueCode VARCHAR(100),
				  IsEditable                BIT,
				  AttributeDefaultValue     NVARCHAR(MAX),
				  DisplayOrder INT 
             );
             DECLARE @TBL_AttributeDetails AS TABLE
             (
				  PimProductId   INT,
				  AttributeValue NVARCHAR(MAX),
				  AttributeCode  VARCHAR(600),
				  PimAttributeId INT
             );
             DECLARE @FamilyDetails TABLE
             (
				  PimProductId         INT,
				  PimAttributeFamilyId INT,
				  FamilyName           NVARCHAR(3000)
             );
             DECLARE @TBL_AttributeValue TABLE
             (
				  PimCategoryAttributeValueId INT,
				  PimCategoryId               INT,
				  CategoryValue               NVARCHAR(MAX),
				  AttributeCode               VARCHAR(300),
				  PimAttributeId              INT
             );
             IF @Order_By = ''
                 BEGIN
                     SET @Order_By = 'DisplayOrder asc'
                 END;
             --IF @ProfileCatalogId > 0
             --    BEGIN
             --        INSERT INTO @TBL_ProfileCatalogCategory (ProfileCatalogId,PimProductId,PimCategoryId,PimCatalogCategoryId,PimCategoryHierarchyId)
             --        SELECT ZPC.ProfileCatalogId,PimProductId,PimCategoryId,ZCC.PimCatalogCategoryId,PimCategoryHierarchyId
             --        FROM ZnodePimCatalogCategory AS ZCC
             --        INNER JOIN ZnodeProfileCatalog AS ZPC ON(ZPC.PimCatalogId = ZCC.PimCatalogId)
             --        WHERE ZPC.ProfileCatalogId = @ProfileCatalogId

             --        AND NOT EXISTS
             --            (
             --               SELECT TOP 1 1
             --               FROM ZnodeProfileCatalogCategory AS ZPCC
             --               WHERE ZPCC.PimCatalogCategoryId = ZCC.PimCatalogCategoryId
             --            );
             --    END;
			 
             IF @PimCatalogId = 0
                 BEGIN
					INSERT INTO @TransferPimProductId 
                    SELECT PimProductId 
                    FROM ZnodePimCategoryProduct AS ZCP
                    WHERE ZCP.PimCategoryId = @PimCategoryId
					AND PimProductId IS NOT NULL 
                                                   
                 END;
             ELSE
                 BEGIN
				 
                     IF @IsAssociated = 0
                        AND @ProfileCatalogId > 0
                         BEGIN
				INSERT INTO @TransferPimProductId 
                SELECT DISTINCT PimProductId 
                FROM ZnodePimCatalogCategory AS ZCP
                WHERE ZCP.PimCatalogId = @PimCatalogId
         
				AND ZCP.PimCategoryHierarchyId = @PimCategoryHierarchyId 
                AND NOT EXISTS
                (
                    SELECT TOP 1 1
                    FROM ZnodeProfileCatalogCategory AS TBPCC
                    WHERE TBPCC.PimCatalogCategoryId = ZCP.PimCatalogCategoryId
                        AND TBPCC.ProfileCatalogId = @ProfileCatalogId
                )
               	AND PimProductId IS NOT NULL                                         
                        END;
                     ELSE
                         BEGIN
                             IF @IsAssociated = 1
                                AND @ProfileCatalogId > 0
                                 BEGIN
						INSERT INTO @TransferPimProductId 
                        SELECT PimProductId
                        FROM ZnodePimCatalogCategory AS ZCP
                        WHERE ZCP.PimCatalogId = @PimCatalogId
                            AND ZCP.PimCategoryHierarchyId = @PimCategoryHierarchyId
                            AND EXISTS
                        (
                            SELECT TOP 1 1
                            FROM ZnodeProfileCatalogCategory AS TBPCC
                            WHERE TBPCC.PimCatalogCategoryId = ZCP.PimCatalogCategoryId
                                AND TBPCC.ProfileCatalogId = @ProfileCatalogId
                        )
                       AND PimProductId IS NOT NULL                                             
                                     SET @IsAssociated = 0;
                                 END;
                             ELSE
                                 BEGIN
					INSERT INTO @TransferPimProductId 
                    SELECT DISTINCT PimProductId 
                    FROM ZnodePimCatalogCategory AS ZCP
                    WHERE ZCP.PimCatalogId = @PimCatalogId
                
					AND ZCP.PimCategoryHierarchyId = @PimCategoryHierarchyId 
				    AND PimProductId IS NOT NULL  
			
        
                                   
                                 END;
                         END;
                 END;
				
				 IF NOT EXISTS (SELECT TOP 1 1 FROM @TransferPimProductId)
				 BEGIN 
                  INSERT INTO @TransferPimProductId
				  SELECT '0'

				 END 

				 
             DECLARE @ProductIdTable TABLE
             ([PimProductId] INT,
              [CountId]      INT,
              PimCategoryId  INT,
              RowId          INT IDENTITY(1,1)
             );
            DECLARE  @ProductListIdRTR TransferId
	 DECLARE @TAb Transferid 
	 DECLARE @tBL_mainList TABLE (Id INT,RowId INT)
	 
	 SET @IsAssociated = CASE WHEN @IsAssociated = 0 THEN 1  
					 WHEN @IsAssociated = 1 THEN 0 END 
		



	 INSERT INTO @ProductListIdRTR
	 EXEC Znode_GetProductList  @IsAssociated,@TransferPimProductId
	 


	 IF CAST(@WhereClause AS NVARCHAR(max))<> N''
	 BEGIN 
	 
	  SET @SQL = 'SELECT PimProductId FROM ##Temp_PimProductId'+CAST(@@SPID AS VARCHAR(500))

	  EXEC Znode_GetFilterPimProductId @WhereClause,@ProductListIdRTR,@localeId
	  
      INSERT INTO @TAB 
	  EXEC (@SQL)
	
	 END 
	 
	 IF EXISTS (SELECT Top 1 1 FROM @TAb ) OR CAST(@WhereClause AS NVARCHAR(max)) <> N''
	 BEGIN 
	 
		 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
		 SET @order_by = REPLACE(@order_by,'DisplayOrder','ProductName')
		 INSERT INTO @TBL_MainList(id,RowId)
		 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @TAb ,@AttributeCode,@localeId,
		 @PimCategoryHierarchyId=@PimCategoryHierarchyId ,@PortalId=@PortalId
	 
		 END 
	 ELSE 
	 BEGIN
	      
	 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
	 SET @order_by = REPLACE(@order_by,'DisplayOrder','ProductName')
	 INSERT INTO @TBL_MainList(id,RowId)
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @ProductListIdRTR ,@AttributeCode,@localeId,
	 @PimCategoryHierarchyId=@PimCategoryHierarchyId ,@PortalId=@PortalId 
	 
	 END 

	
			 INSERT INTO @ProductIdTable
             (PimProductId) 
			 SELECT id 
			 FROM @TBL_MainList 
            
			 UPDATE @ProductIdTable
               SET
                   PimCategoryId = @PimCategoryId;
             --SET @PimProductId = SUBSTRING(
             --                             (
             --                                 SELECT ','+CAST(PimProductId AS VARCHAR(100))
             --                                 FROM @ProductIdTable
             --                                 FOR XML PATH('')
             --                             ), 2, 4000);

			 INSERT INTO @PimProductId  ( Id )
			 SELECT PimProductId FROM @ProductIdTable

             SET @PimAttributeId = SUBSTRING((SELECT ','+CAST(PimAttributeId AS VARCHAR(50)) FROM [dbo].[Fn_GetGridPimAttributes]() FOR XML PATH('')), 2, 4000);
             
			 DECLARE @PimAttributeIds TransferId  
			 INSERT INTO @PimAttributeIds
			 SELECT PimAttributeId  
			 FROM [dbo].[Fn_GetProductGridAttributes]()
			 
			
			 INSERT INTO @TBL_AttributeDefaultValue (PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder)   
			 EXEC Znode_GetAttributeDefaultValueLocale @PimAttributeId,@LocaleId;
            
			 INSERT INTO @TBL_AttributeDetails (PimProductId,AttributeValue,AttributeCode,PimAttributeId)
             EXEC Znode_GetProductsAttributeValue @PimProductId,@PimAttributeId,@localeId;
			
             SET @PimAttributeId = [dbo].[Fn_GetCategoryNameAttributeId]();
			 
             INSERT INTO @TBL_AttributeValue (PimCategoryAttributeValueId,PimCategoryId,CategoryValue,AttributeCode,PimAttributeId)
             EXEC [dbo].[Znode_GetCategoryAttributeValue] @PimCategoryId,@PimAttributeId,@LocaleId;
          
		    ;WITH Cte_ProductMedia
               AS (SELECT TBA.PimProductId , TBA.PimAttributeId 
			   , SUBSTRING( ( SELECT ','+ISNULL(ZMC.CDNURL,ZMC.URL)+ZMSM.ThumbnailFolderName+'/'+ zm.PATH 
			   FROM ZnodeMedia AS ZM
               INNER JOIN ZnodeMediaConfiguration ZMC  ON (ZM.MediaConfigurationId = ZMC.MediaConfigurationId)
			   INNER JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMC.MediaServerMasterId)
			   INNER JOIN @TBL_AttributeDetails AS TBAI ON (TBAI.AttributeValue  = CAST(ZM.MediaId AS VARCHAR(50)) )
			   INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBAI.PimATtributeId)
			   WHERE TBAI.PimProductId = TBA.PimProductId AND TBAI.PimAttributeId = TBA.PimAttributeId 
			   FOR XML PATH('') ), 2 , 4000) AS AttributeValue 
			   FROM @TBL_AttributeDetails AS TBA 
			   INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBA.PimATtributeId ))
                          
		      UPDATE TBAV SET AttributeValue = CTPM.AttributeVALue
			  FROM @TBL_AttributeDetails TBAV 
			  INNER JOIN Cte_ProductMedia CTPM ON CTPM.PimProductId = TBAV.PimProductId  AND CTPM.PimAttributeId = TBAV.PimAttributeId 
			  AND CTPM.PimAttributeId = TBAV.PimAttributeId;
			  
             INSERT INTO @FamilyDetails (PimAttributeFamilyId,PimProductId)
             EXEC [dbo].[Znode_GetPimProductAttributeFamilyId] @PimProductId,1;

             UPDATE a
             SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
             INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                  AND LocaleId = @LocaleId);
             UPDATE a
             SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
             INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                  AND LocaleId = @DefaultLocaleId)
             WHERE a.FamilyName IS NULL
                   OR a.FamilyName = '';


             SELECT zpp.PimProductid AS ProductId,zpp.PimProductId,@PimCatalogId AS PimCatalogId,zpp.PimCategoryId,[ProductName],
			 ProductType,ISNULL(zf.FamilyName, '') AS AttributeFamily,[SKU],[Price],[Quantity],
                    CASE
                        WHEN Piv.[IsActive] IS NULL
                        THEN CAST(0 AS BIT)
                        ELSE CAST(Piv.[IsActive] AS BIT)
                    END AS [IsActive],
                    piv.[ProductImage] ImagePath,
                    [Assortment],
                    TBAV.CategoryValue AS [CategoryName],
                    @LocaleId AS LocaleId,
                    ZCC.[DisplayOrder],
                    ZPCC.ProfileCatalogCategoryId,
                    zpp.RowId,
					ZCC.PimCategoryHierarchyId
			 INTO #temp_ProductDetails 
             FROM @ProductIdTable AS zpp
			 INNER JOIN @TBL_MainList TMM ON (TMM.Id = zpp.PimProductId)
                  LEFT JOIN @FamilyDetails AS zf ON(zf.PimProductId = zpp.PimProductId)
                  INNER JOIN
             (
                 SELECT PimProductId,
                        AttributeValue,
                        AttributeCode
                 FROM @TBL_AttributeDetails
             ) TB PIVOT(MAX(AttributeValue) FOR AttributeCode IN([ProductName],
                                                                 [SKU],
                                                                 [Price],
                                                                 [Quantity],
                                                                 [IsActive],
                                                                 [ProductType],
                                                                 [ProductImage],
                                                                 [Assortment],
                                                                 [DisplayOrder])) AS Piv ON(Piv.PimProductId = zpp.PimProductid)
                  LEFT JOIN @TBL_AttributeValue AS TBAV ON(TBAV.PimCategoryId = ZPP.PimCategoryId)
                  LEFT JOIN ZnodePimCategoryProduct AS ZPCP ON(ZPCP.PimProductId = Zpp.PimProductId
                                                               AND ZPCP.PimCategoryId = Zpp.PimCategoryId)
                  LEFT JOIN ZnodePimCatalogCategory AS ZCC ON(ZCC.PimProductId = Zpp.PimProductId
                                                             AND ZCC.PimCategoryHierarchyId = @PimCategoryHierarchyId
                                                              AND ZCC.PimCatalogId = @PimCatalogId)
                  LEFT JOIN ZnodeProfileCatalogCategory AS ZPCC ON(ZPCC.PimCatalogCategoryId = ZCC.PimCatalogCategoryId
                                                                   AND ZPCC.ProfileCatalogId = @ProfileCatalogId)
                  
            ORDER BY zpp.RowId

			DECLARE @SKUS VARCHAR(max) 
			,@userId INT = 0,@Date DATETIME  = dbo.FN_getDate() 

			SELECT @SKUS = COALESCE(@SKUS+',' ,'') + SKU
			FROM #temp_ProductDetails
			 				
			INSERT INTO @tbl_ProductPricingSku		
			EXEC Znode_GetPublishProductPricingBySku 	@SKU=@SKUS, @PortalId= @PortalId,@Userid= @userid ,@currentUtcDate=	@Date
			
			SELECT DISTINCT ProductId, PimProductId	,PimCatalogId,	PimCategoryId,	ProductName	,ProductType,	
			AttributeFamily,	a.SKU	,dbo.Fn_GetPortalCurrencySymbol(@portalId)+CAST(Dbo.Fn_GetDefaultPriceRoundOff(RetailPrice) AS NVARCHAR(max)) Price,	Quantity,	
			IsActive,	ImagePath,	Assortment,	CategoryName,	LocaleId,	DisplayOrder	,ProfileCatalogCategoryId,	RowId,	PimCategoryHierarchyId	
			FROM #temp_ProductDetails a 
			LEFT JOIN @tbl_ProductPricingSku b ON (dbo.FN_TRIM(b.SKU) = a.SKU )
			ORDER BY RowId
					  
     IF EXISTS (SELECT Top 1 1 FROM @TAb )
	 BEGIN 

		  SELECT @RowsCount = (SELECT COUNT(1) FROM @TAb) 
	 END 
	 ELSE 
	 BEGIN
	 		  SELECT @RowsCount =(SELECT COUNT(1) FROM @ProductListIdRTR)   
	 END 
	

         END TRY
         BEGIN CATCH
		    SELECT ERROR_message()
             DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetCatalogCategoryProducts @WhereClause = '''+ISNULL(CAST(@WhereClause AS VARCHAR(MAX)),'''''')+''',@Rows='+ISNULL(CAST(@Rows AS
			VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')+',
			@LocaleId = '+ISNULL(CAST(@LocaleId AS VARCHAR(50)),'''')+',@PimCategoryId='+ISNULL(CAST(@PimCategoryId AS VARCHAR(50)),'''')+',@PimCatalogId='+ISNULL(CAST(@PimCatalogId AS VARCHAR(50)),'''')+',@IsAssociated='+ISNULL(CAST(@IsAssociated AS VARCHAR(50)),'''')+',
			@ProfileCatalogId='+ISNULL(CAST(@ProfileCatalogId AS VARCHAR(50)),'''')+',@AttributeCode='''+ISNULL(CAST(@AttributeCode AS VARCHAR(50)),'''''')+''',@PimCategoryHierarchyId='+ISNULL(CAST(@PimCategoryHierarchyId AS VARCHAR(10)),'''');
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetCatalogCategoryProducts',
				@ErrorInProcedure = 'Znode_GetCatalogCategoryProducts',
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
	 GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetJSONTableData')
BEGIN 
	DROP PROCEDURE Znode_GetJSONTableData
END
GO
CREATE PROCEDURE [dbo].[Znode_GetJSONTableData]
(
 @JSONString NVARCHAR(max),
 @JsonColumn VARCHAR(max) 
)
AS 
BEGIN 
BEGIN TRY 
SET NOCOUNT ON 
   DECLARE @SQL NVARCHAR(max)= ''
   DECLARE @ColumnJSON NVARCHAr(max)
    DECLARE @ColumnJSONWhere NVARCHAr(max)
   SET @ColumnJSON = SUBSTRING((
   SELECT ','+item+' NVARCHAR(max)'+'''$.'+Item+'''' 
   FROM dbo.Split(@JsonColumn,',') SP 
   FOR XML PATH('')),2,4000)

   SET @ColumnJSONWhere = SUBSTRING((
   SELECT ' OR '+item+' IS NOT NULL'
   FROM dbo.Split(@JsonColumn,',') SP 
   FOR XML PATH('')),4,4000)

   SET @SQL = '
   SELECT '+@JsonColumn+'
   FROM OPENJSON('''+@JSONString+''')
   WITH (
    '+@ColumnJSON+'
       )
   
   WHERE 1=1 AND ('+@ColumnJSONWhere+' )
     ' 
 EXEC (@SQL)


END TRY 

BEGIN CATCH 
 SELECT ERROR_MESSAGE()
END CATCH 


END

GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetCatalogCategoryProducts')
BEGIN 
	DROP PROCEDURE Znode_GetCatalogCategoryProducts
END
GO
CREATE PROCEDURE [dbo].[Znode_GetCatalogCategoryProducts]
( 
  @WhereClause      XML,
  @Rows             INT           = 100,
  @PageNo           INT           = 1,
  @Order_BY         VARCHAR(1000) = 'DisplayOrder asc',
  @RowsCount        INT OUT,
  @LocaleId         INT           = 1,
  @PimCategoryId    INT           = 0,
  @PimCatalogId     INT           = 0,
  @IsAssociated     BIT           = 0,
  @ProfileCatalogId INT           = 0,
  @AttributeCode   VARCHAR(max) = '',
  @PimCategoryHierarchyId INT =0,
  @PortalId INT=0
  )
AS
   
/*
	   Summary:  Get product List  Catalog / category / respective product list   		   
	   Unit Testing   
	   begin tran
	   declare @p7 int = 0  
	   EXEC Znode_GetCatalogCategoryProducts @WhereClause=N'',@Rows=10,@PageNo=1,@Order_By=N'',
	   @RowsCount=@p7 output,@PimCategoryId=11,@PimCatalogId = 1 ,@LocaleId=1 ,@ProfileCatalogId = 1 
	   rollback tran
	  
    */

     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY
             DECLARE @DefaultAttributeFamily INT= dbo.Fn_GetDefaultPimProductFamilyId(), @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId(), @OrderId INT= 0;
             DECLARE @SQL VARCHAR(MAX), 
					 @PimProductId TransferId,--VARCHAR(MAX)= '', 
					 @PimAttributeId VARCHAR(MAX),
					 @OutPimProductIds VARCHAR(max);
             DECLARE @TransferPimProductId TransferId 

			 DECLARE @tbl_ProductPricingSku TABLE (sku nvarchar(200),RetailPrice numeric(28,6),SalesPrice numeric(28,6),TierPrice numeric(28,6),
			 TierQuantity numeric(28,6),CurrencyCode varchar(200),CurrencySuffix varchar(2000),CultureCode varchar(2000), ExternalId NVARCHAR(2000)
			 ,Custom1 NVARCHAR(MAX), Custom2 NVARCHAR(MAX), Custom3 NVARCHAR(MAX))				

			 DECLARE @TBL_PimMediaAttributeId TABLE (PimAttributeId INT ,AttributeCode VARCHAR(600))
			 INSERT INTO @TBL_PimMediaAttributeId (PimAttributeId,AttributeCode)
			 SELECT PimAttributeId,AttributeCode FROM Dbo.Fn_GetProductMediaAttributeId ()

		
             DECLARE @TBL_AttributeDefaultValue TABLE
             (
				  PimAttributeId            INT,
				  AttributeDefaultValueCode VARCHAR(100),
				  IsEditable                BIT,
				  AttributeDefaultValue     NVARCHAR(MAX),
				  DisplayOrder INT 
             );
             DECLARE @TBL_AttributeDetails AS TABLE
             (
				  PimProductId   INT,
				  AttributeValue NVARCHAR(MAX),
				  AttributeCode  VARCHAR(600),
				  PimAttributeId INT
				  
             );
             DECLARE @FamilyDetails TABLE
             (
				  PimProductId         INT,
				  PimAttributeFamilyId INT,
				  FamilyName           NVARCHAR(3000)
             );
             DECLARE @TBL_AttributeValue TABLE
             (
				  PimCategoryAttributeValueId INT,
				  PimCategoryId               INT,
				  CategoryValue               NVARCHAR(MAX),
				  AttributeCode               VARCHAR(300),
				  PimAttributeId              INT
             );
             IF @Order_By = ''
                 BEGIN
                     SET @Order_By = 'DisplayOrder asc'
                 END;
             --IF @ProfileCatalogId > 0
             --    BEGIN
             --        INSERT INTO @TBL_ProfileCatalogCategory (ProfileCatalogId,PimProductId,PimCategoryId,PimCatalogCategoryId,PimCategoryHierarchyId)
             --        SELECT ZPC.ProfileCatalogId,PimProductId,PimCategoryId,ZCC.PimCatalogCategoryId,PimCategoryHierarchyId
             --        FROM ZnodePimCatalogCategory AS ZCC
             --        INNER JOIN ZnodeProfileCatalog AS ZPC ON(ZPC.PimCatalogId = ZCC.PimCatalogId)
             --        WHERE ZPC.ProfileCatalogId = @ProfileCatalogId

             --        AND NOT EXISTS
             --            (
             --               SELECT TOP 1 1
             --               FROM ZnodeProfileCatalogCategory AS ZPCC
             --               WHERE ZPCC.PimCatalogCategoryId = ZCC.PimCatalogCategoryId
             --            );
             --    END;
			 
             IF @PimCatalogId = 0
                 BEGIN
					INSERT INTO @TransferPimProductId 
                    SELECT PimProductId 
                    FROM ZnodePimCategoryProduct AS ZCP
                    WHERE ZCP.PimCategoryId = @PimCategoryId
					AND PimProductId IS NOT NULL 
                                                   
                 END;
             ELSE
                 BEGIN
				 
                     IF @IsAssociated = 0
                        AND @ProfileCatalogId > 0
                         BEGIN
				INSERT INTO @TransferPimProductId 
                SELECT DISTINCT PimProductId 
                FROM ZnodePimCatalogCategory AS ZCP
                WHERE ZCP.PimCatalogId = @PimCatalogId
             
				AND ZCP.PimCategoryHierarchyId = @PimCategoryHierarchyId 
                AND NOT EXISTS
                (
                    SELECT TOP 1 1
                    FROM ZnodeProfileCatalogCategory AS TBPCC
                    WHERE TBPCC.PimCatalogCategoryId = ZCP.PimCatalogCategoryId
                        AND TBPCC.ProfileCatalogId = @ProfileCatalogId
                )
               	AND PimProductId IS NOT NULL                                         
                        END;
                     ELSE
                         BEGIN
                             IF @IsAssociated = 1
                                AND @ProfileCatalogId > 0
                                 BEGIN
						INSERT INTO @TransferPimProductId 
                        SELECT PimProductId
                        FROM ZnodePimCatalogCategory AS ZCP
                        WHERE ZCP.PimCatalogId = @PimCatalogId
                            AND ZCP.PimCategoryHierarchyId = @PimCategoryHierarchyId
                            AND EXISTS
                        (
                            SELECT TOP 1 1
                            FROM ZnodeProfileCatalogCategory AS TBPCC
                            WHERE TBPCC.PimCatalogCategoryId = ZCP.PimCatalogCategoryId
                                AND TBPCC.ProfileCatalogId = @ProfileCatalogId
                        )
                       AND PimProductId IS NOT NULL                                             
                                     SET @IsAssociated = 0;
                                 END;
                             ELSE
                                 BEGIN
					INSERT INTO @TransferPimProductId 
                    SELECT DISTINCT PimProductId 
                    FROM ZnodePimCatalogCategory AS ZCP
                    WHERE ZCP.PimCatalogId = @PimCatalogId
                
					AND ZCP.PimCategoryHierarchyId = @PimCategoryHierarchyId 
				    AND PimProductId IS NOT NULL  
			
   
                                   
                                 END;
                         END;
                 END;
				
				 IF NOT EXISTS (SELECT TOP 1 1 FROM @TransferPimProductId)
				 BEGIN 
                  INSERT INTO @TransferPimProductId
				  SELECT '0'

				 END 

				 
             DECLARE @ProductIdTable TABLE
             ([PimProductId] INT,
              [CountId]      INT,
              PimCategoryId  INT,
              RowId          INT IDENTITY(1,1)
             );
            DECLARE  @ProductListIdRTR TransferId
	 DECLARE @TAb Transferid 
	 DECLARE @tBL_mainList TABLE (Id INT,RowId INT)
	 --	IF @PimProductId <> ''  OR   @IsCallForAttribute=1
		--BEGIN 
	 SET @IsAssociated = CASE WHEN @IsAssociated = 0 THEN 1  
					 WHEN @IsAssociated = 1 THEN 0 END 
		--END 



	 INSERT INTO @ProductListIdRTR
	 EXEC Znode_GetProductList  @IsAssociated,@TransferPimProductId
	 


	 IF CAST(@WhereClause AS NVARCHAR(max))<> N''
	 BEGIN 
	 
	  SET @SQL = 'SELECT PimProductId FROM ##Temp_PimProductId'+CAST(@@SPID AS VARCHAR(500))

	  EXEC Znode_GetFilterPimProductId @WhereClause,@ProductListIdRTR,@localeId
	  
      INSERT INTO @TAB 
	  EXEC (@SQL)
	
	 END 
	 
	 
	 IF EXISTS (SELECT Top 1 1 FROM @TAb ) OR CAST(@WhereClause AS NVARCHAR(max)) <> N''
	 BEGIN 
	 
		 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
		
		 INSERT INTO @TBL_MainList(id,RowId)
		 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @TAb ,@AttributeCode,@localeId,
		 @PimCategoryHierarchyId=@PimCategoryHierarchyId ,@PortalId=@PortalId
	 
		 END 
	 ELSE 
	 BEGIN
	      
	 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
	
	 INSERT INTO @TBL_MainList(id,RowId)
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @ProductListIdRTR ,@AttributeCode,@localeId,
	 @PimCategoryHierarchyId=@PimCategoryHierarchyId ,@PortalId=@PortalId 
	 
	 END 

	
	
			 INSERT INTO @ProductIdTable
             (PimProductId) 
			 SELECT id 
			 FROM @TBL_MainList 
            
			 UPDATE @ProductIdTable
               SET
                   PimCategoryId = @PimCategoryId;
           

			 INSERT INTO @PimProductId  ( Id )
			 SELECT PimProductId FROM @ProductIdTable

             SET @PimAttributeId = SUBSTRING((SELECT ','+CAST(PimAttributeId AS VARCHAR(50)) FROM [dbo].[Fn_GetGridPimAttributes]() FOR XML PATH('')), 2, 4000);
             
			 DECLARE @PimAttributeIds TransferId  
			 INSERT INTO @PimAttributeIds
			 SELECT PimAttributeId  
			 FROM [dbo].[Fn_GetProductGridAttributes]()
		
			 
			
			 INSERT INTO @TBL_AttributeDefaultValue (PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder)   
			 EXEC Znode_GetAttributeDefaultValueLocale @PimAttributeId,@LocaleId;
          
			 INSERT INTO @TBL_AttributeDetails (PimProductId,AttributeValue,AttributeCode,PimAttributeId)
             EXEC Znode_GetProductsAttributeValue @PimProductId,@PimAttributeId,@localeId;
			  
             SET @PimAttributeId = [dbo].[Fn_GetCategoryNameAttributeId]();
			 
             INSERT INTO @TBL_AttributeValue (PimCategoryAttributeValueId,PimCategoryId,CategoryValue,AttributeCode,PimAttributeId)
             EXEC [dbo].[Znode_GetCategoryAttributeValue] @PimCategoryId,@PimAttributeId,@LocaleId;
         
		    ;WITH Cte_ProductMedia
               AS (SELECT TBA.PimProductId , TBA.PimAttributeId 
			   , SUBSTRING( ( SELECT ','+ISNULL(ZMC.CDNURL,ZMC.URL)+ZMSM.ThumbnailFolderName+'/'+ zm.PATH 
			   FROM ZnodeMedia AS ZM
               INNER JOIN ZnodeMediaConfiguration ZMC  ON (ZM.MediaConfigurationId = ZMC.MediaConfigurationId)
			   INNER JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMC.MediaServerMasterId)
			   INNER JOIN @TBL_AttributeDetails AS TBAI ON (TBAI.AttributeValue  = CAST(ZM.MediaId AS VARCHAR(50)) )
			   INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBAI.PimATtributeId)
			   WHERE TBAI.PimProductId = TBA.PimProductId AND TBAI.PimAttributeId = TBA.PimAttributeId 
			   FOR XML PATH('') ), 2 , 4000) AS AttributeValue 
			   FROM @TBL_AttributeDetails AS TBA 
			   INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBA.PimATtributeId ))
                          
		      UPDATE TBAV SET AttributeValue = CTPM.AttributeVALue
			  FROM @TBL_AttributeDetails TBAV 
			  INNER JOIN Cte_ProductMedia CTPM ON CTPM.PimProductId = TBAV.PimProductId  AND CTPM.PimAttributeId = TBAV.PimAttributeId 
			  AND CTPM.PimAttributeId = TBAV.PimAttributeId;
			    
             INSERT INTO @FamilyDetails (PimAttributeFamilyId,PimProductId)
             EXEC [dbo].[Znode_GetPimProductAttributeFamilyId] @PimProductId,1;

             UPDATE a
             SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
             INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                  AND LocaleId = @LocaleId);
             UPDATE a
             SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
             INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                  AND LocaleId = @DefaultLocaleId)
             WHERE a.FamilyName IS NULL
                   OR a.FamilyName = '';

				

             SELECT zpp.PimProductid AS ProductId,zpp.PimProductId,@PimCatalogId AS PimCatalogId,zpp.PimCategoryId,[ProductName],
			 ProductType,ISNULL(zf.FamilyName, '') AS AttributeFamily,[SKU],[Price],[Quantity],
                    CASE
                        WHEN Piv.[IsActive] IS NULL
                        THEN CAST(0 AS BIT)
                        ELSE CAST(Piv.[IsActive] AS BIT)
                    END AS [IsActive],
                    piv.[ProductImage] ImagePath,
                    [Assortment],
                    TBAV.CategoryValue AS [CategoryName],
                    @LocaleId AS LocaleId,
                    ZCC.[DisplayOrder],
                    ZPCC.ProfileCatalogCategoryId,
                    zpp.RowId,
					ZCC.PimCategoryHierarchyId
			 INTO #temp_ProductDetails 
             FROM @ProductIdTable AS zpp
			 INNER JOIN @TBL_MainList TMM ON (TMM.Id = zpp.PimProductId)
                  LEFT JOIN @FamilyDetails AS zf ON(zf.PimProductId = zpp.PimProductId)
                  INNER JOIN
             (
                 SELECT PimProductId,
                        AttributeValue,
                        AttributeCode
                 FROM @TBL_AttributeDetails
             ) TB PIVOT(MAX(AttributeValue) FOR AttributeCode IN([ProductName],
                                                                 [SKU],
                                                                 [Price],
                                                                 [Quantity],
                                                                 [IsActive],
                                                                 [ProductType],
                                                                 [ProductImage],
                                                                 [Assortment],
                                                                 [DisplayOrder])) AS Piv ON(Piv.PimProductId = zpp.PimProductid)
                  LEFT JOIN @TBL_AttributeValue AS TBAV ON(TBAV.PimCategoryId = ZPP.PimCategoryId)
                  LEFT JOIN ZnodePimCategoryProduct AS ZPCP ON(ZPCP.PimProductId = Zpp.PimProductId
                                                               AND ZPCP.PimCategoryId = Zpp.PimCategoryId)
                  LEFT JOIN ZnodePimCatalogCategory AS ZCC ON(ZCC.PimProductId = Zpp.PimProductId
                                                             AND ZCC.PimCategoryHierarchyId = @PimCategoryHierarchyId
                                                              AND ZCC.PimCatalogId = @PimCatalogId)
                  LEFT JOIN ZnodeProfileCatalogCategory AS ZPCC ON(ZPCC.PimCatalogCategoryId = ZCC.PimCatalogCategoryId
                                                                   AND ZPCC.ProfileCatalogId = @ProfileCatalogId)
                  
            ORDER BY zpp.RowId

			DECLARE @SKUS VARCHAR(max) 
			,@userId INT = 0,@Date DATETIME  = dbo.FN_getDate() 

			SELECT @SKUS = COALESCE(@SKUS+',' ,'') + SKU
			FROM #temp_ProductDetails
			 				
			INSERT INTO @tbl_ProductPricingSku		
			EXEC Znode_GetPublishProductPricingBySku 	@SKU=@SKUS, @PortalId= @PortalId,@Userid= @userid ,@currentUtcDate=	@Date
			
			SELECT DISTINCT ProductId, PimProductId	,PimCatalogId,	PimCategoryId,	ProductName	,ProductType,	
			AttributeFamily,	a.SKU	,dbo.Fn_GetPortalCurrencySymbol(@portalId)+CAST(Dbo.Fn_GetDefaultPriceRoundOff(RetailPrice) AS NVARCHAR(max)) Price,	Quantity,	
			IsActive,	ImagePath,	Assortment,	CategoryName,	LocaleId,	DisplayOrder	,ProfileCatalogCategoryId,	RowId,	PimCategoryHierarchyId	
			FROM #temp_ProductDetails a 
			LEFT JOIN @tbl_ProductPricingSku b ON (dbo.FN_TRIM(b.SKU) = a.SKU )
			ORDER BY RowId
					  
     IF EXISTS (SELECT Top 1 1 FROM @TAb )
	 BEGIN 

		  SELECT @RowsCount = (SELECT COUNT(1) FROM @TAb) 
	 END 
	 ELSE 
	 BEGIN
	 		  SELECT @RowsCount =(SELECT COUNT(1) FROM @ProductListIdRTR)   
	 END 
	

         END TRY
         BEGIN CATCH
		    SELECT ERROR_message()
             DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetCatalogCategoryProducts @WhereClause = '''+ISNULL(CAST(@WhereClause AS VARCHAR(MAX)),'''''')+''',@Rows='+ISNULL(CAST(@Rows AS
			VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')+',
			@LocaleId = '+ISNULL(CAST(@LocaleId AS VARCHAR(50)),'''')+',@PimCategoryId='+ISNULL(CAST(@PimCategoryId AS VARCHAR(50)),'''')+',@PimCatalogId='+ISNULL(CAST(@PimCatalogId AS VARCHAR(50)),'''')+',@IsAssociated='+ISNULL(CAST(@IsAssociated AS VARCHAR(50)),'''')+',
			@ProfileCatalogId='+ISNULL(CAST(@ProfileCatalogId AS VARCHAR(50)),'''')+',@AttributeCode='''+ISNULL(CAST(@AttributeCode AS VARCHAR(50)),'''''')+''',@PimCategoryHierarchyId='+ISNULL(CAST(@PimCategoryHierarchyId AS VARCHAR(10)),'''');
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetCatalogCategoryProducts',
				@ErrorInProcedure = 'Znode_GetCatalogCategoryProducts',
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;

	 GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetProductFeedList')
BEGIN 
	DROP PROCEDURE Znode_GetProductFeedList
END
GO

CREATE PROCEDURE [dbo].[Znode_GetProductFeedList]  
(   @PortalId   VARCHAR(2000) = NULL,  
    @SKU     SelectColumnList READONLY,  
    @LocaleId   INT,  
    @FeedType   NVARCHAR(MAX) = NULL)  
AS  
/*  
Summary: This Procedure is used to get effective keyword feeding of Product list  
 SELECT * FROM ZnodePublishProductDetail  
 SELECT * FROM ZnodePublishProduct WHERE PublishCatalogId = 3  
 SELECT * FROM ZnodePortalCatalog   
 Unit Testing:  
 EXEC Znode_GetProductFeedList @PortalId='0',@ProductIds = '116,117,118'  
 ,@LocaleId=1,@FeedType='Bing'   
  
*/  
     BEGIN  
  BEGIN TRY  
         SET NOCOUNT ON;        
           
   IF OBJECT_ID('tempdb..#TBL_DomainName') is not null
			drop table #TBL_DomainName

		IF OBJECT_ID('tempdb..#TBL_SEODetails') is not null
			drop table #TBL_SEODetails

		IF OBJECT_ID('tempdb..#TBL_CompleteDetailes') is not null
			drop table #TBL_CompleteDetailes

		IF OBJECT_ID('tempdb..#TBL_CompleteDetailes') is not null
			drop table #TBL_CompleteDetailes

		IF OBJECT_ID('tempdb..#TBL_PortalIds') is not null
			drop table #TBL_PortalIds

		 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
         CREATE TABLE #TBL_DomainName 
         (PortalId   INT,
          DomainName NVARCHAR(300),
          RowId      INT
         );  	
         
         CREATE TABLE #TBL_SEODetails   
         (loc                   NVARCHAR(MAX),  
          lastmod               DATETIME,  
          [g:condition]         VARCHAR(100),  
          [description]         NVARCHAR(MAX),  
          [g:id]                INT,  
          link                  VARCHAR(100),  
          [g:identifier_exists] VARCHAR(200),  
          DomainName            NVARCHAR(300),  
          PortalId              INT  
    , SEOCode             NVARCHAR(4000)  
         );  
         CREATE TABLE #TBL_CompleteDetailes   
         (loc                   NVARCHAR(MAX),  
          lastmod               DATETIME,  
          [g:condition]         VARCHAR(100),  
          [description]         NVARCHAR(MAX),  
          [g:id]                INT,  
          link                  VARCHAR(100),  
          [g:identifier_exists] VARCHAR(200),  
          DomainName            NVARCHAR(300),  
          PortalId              INT,  
          [g:availability]      NVARCHAR(1000),  
          SKU                   NVARCHAR(MAX),  
    SEOCode               NVARCHAR(4000)  
         );  
         DECLARE @DefaultLocaleId INT=dbo.Fn_GetDefaultLocaleId()  ;
         CREATE TABLE #TBL_PortalIds (PortalId INT);  
   
         INSERT INTO #TBL_PortalIds  
         SELECT Zp.PortalId   
   FROM Znodeportal AS ZP   
   INNER JOIN ZnodePortalCatalog AS ZPC ON(ZPC.PortalId = Zp.PortalId)  
         INNER JOIN ZnodePublishCatalog AS ZPPC ON(ZPPC.PublishCatalogId = ZPC.PublishCatalogId)   
   INNER JOIN ZNodePublishProduct AS ZPP ON(ZPP.PublishCatalogId = ZPPC.PublishCatalogId)  
   INNER JOIN ZnodePublishProductDetail AS PPD ON (PPD.PublishProductId = ZPP.PublishProductId)  
         WHERE EXISTS(SELECT TOP 1 1 FROM @SKU AS Sp WHERE (sp.StringColumn  = PPD.SKU)  OR StringColumn = '0')  
   AND EXISTS(SELECT TOP 1 1 FROM DBO.Split(@PortalId, ',') AS Sp  
      WHERE(CAST(sp.Item AS INT)) = Zp.PortalId  OR @PortalId = '0')  
   AND EXISTS (SELECT TOP 1 1 FROM ZnodeDomain ZD WHERE ZP.PortalId = ZD.PortalId  
   AND IsActive = 1 AND ApplicationType = 'Webstore')  
   GROUP BY Zp.PortalId;   
  
         INSERT INTO #TBL_DomainName   
   SELECT  PortalId,DomainName,ROW_NUMBER() OVER(PARTITION BY PortalId ORDER BY DomainName)   
   FROM ZnodeDomain AS ZD   
         WHERE EXISTS(SELECT TOP 1 1 FROM #TBL_PortalIds AS TBP WHERE TBP.PortalId = ZD.PortalId)  
   AND IsActive = 1 AND ApplicationType = 'Webstore'  
    
  
  
         ;WITH Cte_SeoDetailsWithLocale  
         AS (  
   SELECT DISTINCT ZCSD.CMSSEODetailId,ZCSD.SEOURL AS loc,ZCSD.ModifiedDate AS lastmod,'new' AS [g:condition],ZCSDL.SEODescription AS [description],ZPCC.PublishProductId AS [g:id],  
             '' AS link,'false' AS [g:identifier_exists],TBDN.DomainName,ZPC.PortalId,ISNULL(ZCSDL.LocaleId, @DefaultLocaleId) AS LocaleId , ZCSD.SEOCode  
    FROM ZNodePublishProduct AS ZPCC   
    INNER JOIN ZnodePortalCatalog AS ZPC ON(ZPC.PublishCatalogId = ZPCC.PublishCatalogId)  
    LEFT JOIN ZnodePublishProductDetail AS PPD ON (PPD.PublishProductId = ZPCC.PublishProductId)  
             -- INNER JOIN @TBL_PortalIds TBLP ON (TBLP.PortalId = ZPC.PortalId)  
    LEFT JOIN ZnodeCMSSEODetail AS ZCSD ON(PPD.SKU = ZCSD.SEOCode and ZCSD.PortalId = ZPC.PortalId)  
             LEFT JOIN ZnodeCMSSEOType AS ZCST ON(ZCST.CMSSEOTypeId = ZCSD.CMSSEOTypeId AND ZCST.Name = 'Product')  
             LEFT JOIN ZnodeCMSSEODetailLocale AS ZCSDL ON(ZCSDL.CMSSEODetailId = ZCSD.CMSSEODetailId AND ZCSDL.LocaleId IN(@LocaleId, @DefaultLocaleId))  
             LEFT JOIN #TBL_DomainName AS TBDN ON(TBDN.RowId = 1 AND TBDN.PortalId = zpc.PortalId )   
    WHERE EXISTS(SELECT TOP 1 1 FROM @SKU AS Sp  
      WHERE (sp.StringColumn  = PPD.SKU) OR StringColumn = '0')  
   AND EXISTS(SELECT TOP 1 1 FROM #TBL_PortalIds AS TBP WHERE TBP.PortalId = ZPC.PortalId )  
    )  
  
         ,Cte_SeoDetailsWithFirstLocale  
         AS (  
    SELECT CMSSEODetailId,loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,PortalId,LocaleId,SEOCode  
             FROM Cte_SeoDetailsWithLocale   
    WHERE LocaleId = @LocaleId  
    )           
  ,Cte_SeoDetailsWithDefaultLocale  
         AS (  
    SELECT CMSSEODetailId,loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,PortalId,LocaleId,SEOCode  
             FROM Cte_SeoDetailsWithFirstLocale  
             UNION ALL  
             SELECT CMSSEODetailId,loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,PortalId,LocaleId,SEOCode  
             FROM Cte_SeoDetailsWithLocale AS CTSDWL  
             WHERE LocaleId = @DefaultLocaleId   
    AND NOT EXISTS(SELECT TOP 1 1 FROM Cte_SeoDetailsWithFirstLocale AS CTSDWDL WHERE CTSDWDL.CMSSEODetailId = CTSDWL.CMSSEODetailId))  
                
   INSERT INTO #TBL_SEODetails  
         SELECT DISTINCT loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,PortalId ,SEOCode  
   FROM Cte_SeoDetailsWithDefaultLocale;  
  
    
  
         INSERT INTO #TBL_CompleteDetailes  
         SELECT TBSD.loc,TBSD.lastmod,TBSD.[g:condition],TBSD.[description],TBSD.[g:id],TBSD.link,TBSD.[g:identifier_exists],TBSD.DomainName,TBSD.PortalId,  
         CASE WHEN SUM(ZI.Quantity) > 0 THEN 'In Stock' ELSE CASE WHEN @FeedType = 'Google' THEN 'Out Of Stock' ELSE 'Not In Stock' END  
         END AS [g:availability],ZPPD.SKU ,TBSD.SEOCode  
   FROM ZnodePublishProduct AS ZPP   
   LEFT JOIN #TBL_SEODetails AS TBSD ON(ZPP.PublishProductId = TBSD.[g:id] )  
         LEFT JOIN ZnodePublishProductDetail AS ZPPD ON(ZPPD.PublishProductId = ZPP.PublishProductId AND ZPPD.LocaleId = @LocaleId )  
         LEFT JOIN ZnodePortalWarehouse AS ZPW ON(ZPW.PortalId = TBSD.PortalId)  
         LEFT JOIN ZnodePortalAlternateWarehouse AS ZAPW ON(ZAPW.PortalWarehouseId = ZPW.PortalWarehouseId)  
         LEFT JOIN ZnodeInventory AS ZI ON(ZI.SKU = ZPPD.SKU AND (ZI.WarehouseId = ZPW.WarehouseId OR ZI.WarehouseId = ZAPW.WarehouseId))  
         WHERE EXISTS(SELECT TOP 1 1 FROM @SKU AS Sp WHERE (sp.StringColumn  = ZPPD.SKU) OR StringColumn = '0')  
   AND EXISTS(SELECT TOP 1 1 FROM #TBL_PortalIds AS TBP WHERE TBP.PortalId = TBSD.PortalId )  
         GROUP BY loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,TBSD.PortalId,ZPPD.SKU,ZPPD.LocaleId, TBSD.SEOCode;    
           
		 DECLARE @MediaConfiguration NVARCHAR(2000)=((SELECT TOP 1 ISNULL(CDNURL,URL) FROM ZnodeMediaConfiguration WHERE IsActive = 1));  
           
  
         ;WITH Cte_PortalList  
         AS (  
       SELECT zp.PortalId,dbo.Fn_GetDefaultPriceRoundOff(ZPS.RetailPrice)RetailPrice,Zps.SKU,TBCD.SEOCode,ROW_NUMBER() OVER(PARTITION BY Zps.SKU,zp.PortalId ORDER BY ZPS.RetailPrice) AS RowId  
             FROM ZnodePriceList AS ZPL   
    LEFT JOIN ZnodePriceListPortal AS ZPLP ON ZPL.PriceListId = ZPLP.PriceListId  
             LEFT JOIN dbo.ZnodeCulture AS zc ON ZPL.CultureId = zc.CultureId
    LEFT JOIN dbo.ZnodePortal AS zp ON ZPLP.PortalId = zp.PortalId  
             LEFT JOIN ZnodePrice AS Zps ON(Zps.PriceListId = ZPL.PriceListId)   
    LEFT JOIN #TBL_CompleteDetailes AS TBCD ON(TBCD.PortalId = Zp.PortalId AND TBCD.SKU = Zps.Sku)   
    WHERE CAST(@GetDate AS DATE) BETWEEN ZPL.ActivationDate AND ZPL.ExpirationDate   
    AND EXISTS( SELECT TOP 1 1 FROM #TBL_PortalIds AS TBP WHERE TBP.PortalId = ZPLP.PortalId)   
    GROUP BY zp.PortalId,ZPS.RetailPrice,Zps.SKU ,TBCD.SEOCode  
    )  
  
         SELECT loc,lastmod,[g:condition],[description],[g:id],link,[g:availability],[g:identifier_exists],DomainName,TBCD.PortalId  
  ,CTPL.RetailPrice AS [g:price]  
   ,@MediaConfiguration AS MediaConfiguration, TBCD.SEOCode  
         FROM #TBL_CompleteDetailes AS TBCD   
   LEFT JOIN Cte_PortalList AS CTPL ON(CTPL.PortalId = TBCD.PortalId AND CTPL.SKU = TBCD.SKU AND CTPL.RowID = 1)  
   WHERE  EXISTS(SELECT TOP 1 1 FROM #TBL_PortalIds AS TBP WHERE TBP.PortalId = TBCD.PortalId )  
  

    IF OBJECT_ID('tempdb..#TBL_DomainName') is not null
			drop table #TBL_DomainName

		IF OBJECT_ID('tempdb..#TBL_SEODetails') is not null
			drop table #TBL_SEODetails

		IF OBJECT_ID('tempdb..#TBL_CompleteDetailes') is not null
			drop table #TBL_CompleteDetailes

		IF OBJECT_ID('tempdb..#TBL_CompleteDetailes') is not null
			drop table #TBL_CompleteDetailes

		IF OBJECT_ID('tempdb..#TBL_PortalIds') is not null
			drop table #TBL_PortalIds

 END TRY  
 BEGIN CATCH  
  DECLARE @Status BIT ;  
  SET @Status = 0;  
  DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetProductFeedList @PortalId = '+@PortalId+',@LocaleId='+CAST(@LocaleId AS VARCHAR(50))+',@FeedType='+CAST(@FeedType AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));  
                    
        SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                      
      
        EXEC Znode_InsertProcedureErrorLog  
   @ProcedureName = 'Znode_GetProductFeedList',  
   @ErrorInProcedure = @Error_procedure,  
   @ErrorMessage = @ErrorMessage,  
   @ErrorLine = @ErrorLine,  
   @ErrorCall = @ErrorCall;  
 END CATCH  
   
  END;

  GO

  

INSERT [dbo].[ZnodePortalApprovalType] ( [ApprovalTypeName], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) 
SELECT  N'Store', 2, GETDATE(), 2, GETDATE()
WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePortalApprovalType WHERE  ApprovalTypeName = 'Store')

INSERT [dbo].[ZnodePortalApprovalType] ( [ApprovalTypeName], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) 
SELECT  N'Payment', 2, GETDATE(), 2, GETDATE()
WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePortalApprovalType WHERE  ApprovalTypeName = 'Payment')

GO


INSERT [dbo].[ZnodePortalApprovalLevel] ([ApprovalLevelName], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) 
SELECT N'Single Level', 2, GETDATE(), 2, GETDATE()
WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePortalApprovalLevel WHERE ApprovalLevelName = 'Single Level')
GO
INSERT [dbo].[ZnodePortalApprovalLevel] ( [ApprovalLevelName], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) 
SELECT N'Multi Level', 2, GETDATE(), 2, GETDATE()
WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePortalApprovalType WHERE ApprovalTypeName = 'Multi Level')

GO

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Store','GetPortalApproverDetailsById',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Store' and ActionName = 'GetPortalApproverDetailsById')
 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store')	
      ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetPortalApproverDetailsById')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store') and ActionId = 
       (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetPortalApproverDetailsById'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store'),
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetPortalApproverDetailsById')	
,2,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store') and ActionId = 
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetPortalApproverDetailsById'))

GO

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Store','GetApprovalList',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Store' and ActionName = 'GetApprovalList')
 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store')	
      ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetApprovalList')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store') and ActionId = 
       (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetApprovalList'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store'),
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetApprovalList')	
,2,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store') and ActionId = 
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetApprovalList'))

GO

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Store','GetApproverOrder',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Store' and ActionName = 'GetApproverOrder')
 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store')	
      ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetApproverOrder')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store') and ActionId = 
       (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetApproverOrder'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store'),
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetApproverOrder')	
,2,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store') and ActionId = 
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetApproverOrder'))

GO

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Store','GetPaymentApproverOrder',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Store' and ActionName = 'GetPaymentApproverOrder')
 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store')	
      ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetPaymentApproverOrder')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store') and ActionId = 
       (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetPaymentApproverOrder'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store'),
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetPaymentApproverOrder')	
,2,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store') and ActionId = 
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetPaymentApproverOrder'))

GO

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Store','GetApproverUsersByPortalId',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Store' and ActionName = 'GetApproverUsersByPortalId')
 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store')	
      ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetApproverUsersByPortalId')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store') and ActionId = 
       (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetApproverUsersByPortalId'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store'),
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetApproverUsersByPortalId')	
,2,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store') and ActionId = 
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetApproverUsersByPortalId'))

GO


Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Store','SaveUpdatePortalApprovalDetails',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Store' and ActionName = 'SaveUpdatePortalApprovalDetails')
 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store')	
      ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'SaveUpdatePortalApprovalDetails')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store') and ActionId = 
       (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'SaveUpdatePortalApprovalDetails'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store'),
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'SaveUpdatePortalApprovalDetails')	
,2,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store') and ActionId = 
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'SaveUpdatePortalApprovalDetails'))

GO


Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Store','DeletePortalApproverUser',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Store' and ActionName = 'DeletePortalApproverUser')
 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store')	
      ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'DeletePortalApproverUser')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store') and ActionId = 
       (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'DeletePortalApproverUser'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store'),
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'DeletePortalApproverUser')	
,2,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store') and ActionId = 
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'DeletePortalApproverUser'))

GO

INSERT INTO ZnodeActions(AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT NULL,'Catalog','UpdateProductDisplayOrder',1,2,GETDATE(),2,GETDATE() 
WHERE NOT EXISTS(SELECT TOP 1 1 FROM ZnodeActions WHERE  ControllerName='Catalog' AND ActionName='UpdateProductDisplayOrder')

GO


DELETE FROM ZnodeGlobalAttributeGroupMapper WHERE GlobalAttributeId = 
(SELECT GlobalAttributeId FROM ZnodeGlobalAttribute where AttributeCode = 'EnableApprovalManagement')

GO

DELETE FROM ZnodeGlobalAttributeDefaultValueLocale 
WHERE GlobalAttributeDefaultValueId = (SELECT GlobalAttributeDefaultValueId FROM ZnodeGlobalAttributeDefaultValue
WHERE GlobalAttributeId = (SELECT  GlobalAttributeId FROM ZnodeGlobalAttribute where AttributeCode = 'EnableApprovalManagement') )

GO

DELETE FROM ZnodeGlobalAttributeDefaultValue WHERE 
GlobalAttributeId = (SELECT  GlobalAttributeId FROM ZnodeGlobalAttribute where AttributeCode = 'EnableApprovalManagement')

GO

DELETE FROM ZnodeGlobalAttributeLocale WHERE AttributeName = 'Enable Approval Management'
AND GlobalAttributeId = (SELECT  GlobalAttributeId FROM ZnodeGlobalAttribute where AttributeCode = 'EnableApprovalManagement')

GO

DELETE FROM ZnodePortalGlobalAttributeValueLocale where PortalGlobalAttributeValueId in (select PortalGlobalAttributeValueId from ZnodePortalGlobalAttributeValue where GlobalAttributeId in (select GlobalAttributeId from ZnodeGlobalAttribute where AttributeCode = 'EnableApprovalManagement'))

GO
DELETE FROM ZnodePortalGlobalAttributeValue where GlobalAttributeId in (select GlobalAttributeId from ZnodeGlobalAttribute where AttributeCode = 'EnableApprovalManagement')

GO
DELETE FROM ZnodeGlobalAttribute where AttributeCode = 'EnableApprovalManagement'

GO

UPDATE ZnodeApplicationSetting 
SET Setting = '<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>ProductId</name>      <headertext>Checkbox</headertext>      <width>20</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>ProductId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>Image</name>      <headertext>Product Image</headertext>      <width>20</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>ProductId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>ImagePath,ProductName</imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>imageicon</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>ProductName</name>      <headertext>Product Name</headertext>      <width>60</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>product-name</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>Price</name>      <headertext>Price</headertext>      <width>60</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>product-price</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>SKU</name>      <headertext>SKU</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>SKU</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>product-sku</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>DisplayOrder</name>      <headertext>Display Order</headertext>      <width>30</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>3</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>DisplayOrder</name>      <headertext>Newly Added</headertext>      <width>30</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>y</musthide>      <maxlength>3</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>product-isnew</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>8</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>Edit</format>      <isvisible>n</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Edit</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/Catalog/UpdateCatalogCategoryProduct</manageactionurl>      <manageparamfield>ProductId,PimCatalogId,PimCategoryHierarchyId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>'
WHERE itemName = 'ZnodeGetCatalogAssociatedProduct'

GO
UPDATE ZnodeApplicationSetting 
SET Setting = '<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>PaymentSettingId</name>      <headertext>Checkbox</headertext>      <width>40</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>PaymentSettingId</islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>ID</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>PaymentCode</name>      <headertext>Payment Code</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>PaymentTypeId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>PaymentTypeId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Payment Option</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>PaymentDisplayName</name>      <headertext>Payment Display Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>100</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>PaymentTypeId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>PaymentTypeId</checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Payment Option</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>GatewayName</name>      <headertext>Payment Gateway</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>PaymentGatewayId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>PaymentGatewayId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Payment Gateway</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>IsActive</name>      <headertext>Enable</headertext>      <width>40</width>      <datatype>Boolean</datatype>      <columntype>Boolean</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>IsActive</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>IsActive</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Enable</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>DisplayOrder</name>      <headertext>Display Order</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>DisplayOrder</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>DisplayOrder</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Display Order</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>PaymentExternalId</name>      <headertext>ExternalId</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>1000</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>PaymentExternalId</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>8</id>      <name>IsApprovalRequired</name>      <headertext>Is Approval Required</headertext>      <width>40</width>      <datatype>Boolean</datatype>      <columntype>Boolean</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>IsApprovalRequired</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>IsApprovalRequired</checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>DropDown</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>9</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>50</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>Edit|Delete</format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>y</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>PaymentSettingId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>PaymentSettingId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Edit|Delete</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/Store/UpdatePortalPaymentSettings|/Store/RemoveAssociatedPaymentSetting</manageactionurl>      <manageparamfield>PaymentSettingId,PortalId|PaymentSettingId,PortalId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>'
WHERE ItemName = 'AssociatedPaymentListToPortal'

GO

UPDATE ZnodeApplicationSetting
SET Setting = '<?xml version="1.0" encoding="utf-16"?> <columns>  <column>   <id>1</id>   <name>PublishCategoryId</name>   <headertext>Checkbox</headertext>   <width>40</width>   <datatype>Int32</datatype>   <columntype>Int32</columntype>   <allowsorting>true</allowsorting>   <allowpaging>false</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>y</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>2</id>   <name>PublishCategoryId</name>   <headertext>Publish Category ID</headertext>   <width>40</width>   <datatype>Int32</datatype>   <columntype>Int32</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>3</id>   <name>CategoryName</name>   <headertext>Category Name</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>   <column>   <id>4</id>   <name>CatalogName</name>   <headertext>Catalog Name</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>5</id>   <name>Manage</name>   <headertext>Action</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>false</allowsorting>   <allowpaging>false</allowpaging>   <format>Delete</format>   <isvisible>y</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext>Delete</displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl>/Promotion/UnAssociateCategorys</manageactionurl>   <manageparamfield>PublishCategoryId,PromotionId</manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column> </columns>'
WHERE ItemName='AssociatedCategoryList' 

GO
UPDATE ZD SET ZD.IsDefault='1' FROM ZnodeDomain As ZD
INNER JOIN
(
SELECT MIN(DomainId) AS MIN_DomainId,PortalId,ApplicationType FROM ZnodeDomain where IsActive='1' group by PortalId,ApplicationType
) As X ON X.MIN_DomainId=ZD.DomainId

GO


IF NOT EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeProfile' AND COLUMN_NAME = 'ParentProfileId')
BEGIN 
	ALTER TABLE [dbo].[ZnodeProfile]
    ADD [ParentProfileId] INT NULL
      
END
GO
IF NOT EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeProfilePaymentSetting' AND COLUMN_NAME = 'DisplayOrder')
BEGIN 
	ALTER TABLE [dbo].[ZnodeProfilePaymentSetting]
    ADD [DisplayOrder] INT NULL
      
END
GO

IF NOT EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeProfileShipping' AND COLUMN_NAME = 'DisplayOrder')
BEGIN 
	ALTER TABLE [dbo].[ZnodeProfileShipping]
    ADD [DisplayOrder] INT NULL
      
END
GO

IF EXISTS (SELECT * FROM SYS.VIEWS WHERE NAME = 'View_AccountProfileList')
	DROP VIEW View_AccountProfileList
GO
CREATE VIEW [dbo].[View_AccountProfileList]
AS
SELECT  ZA.AccountId, ZAP.AccountProfileId, ZP.ProfileId, ZA.Name, ZP.ProfileName, ZAP.IsDefault, CASE WHEN ZAP.AccountProfileId IS NULL THEN 0 ELSE 1 END IsAssociated,ZP.ParentProfileId
FROM dbo.ZnodeAccount AS ZA CROSS APPLY dbo.ZnodeProfile AS ZP 
LEFT JOIN dbo.ZnodeAccountProfile AS ZAP ON (ZAP.AccountId = ZA.AccountId AND ZAP.ProfileId = ZP.ProfileId)
GO

IF NOT EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'AIZnodePortalSettings' AND COLUMN_NAME = 'IsWebstorePreview')
BEGIN 
ALTER TABLE [dbo].[AIZnodePortalSettings]
    ADD [IsWebstorePreview] BIT  NULL;
END
GO

IF NOT EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'AIZnodePortalSettings' AND COLUMN_NAME = 'PublishStateId')
BEGIN 
ALTER TABLE [dbo].[AIZnodePortalSettings]
    ADD [PublishStateId] TINYINT  NULL;
END

GO
IF NOT EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeOmsOrder' AND COLUMN_NAME = 'PublishStateId')
BEGIN 
ALTER TABLE [dbo].[ZnodeOmsOrder]
    ADD [PublishStateId] TINYINT  NULL;
END

GO
IF NOT EXISTS (SELECT * FROM   sys.objects WHERE  type IN( 'F' ) and OBJECT_NAME(parent_object_id) = 'ZnodeOmsOrder' and name ='FK_ZnodeOmsOrder_ZnodePublishState')
BEGIN 
ALTER TABLE [dbo].[ZnodeOmsOrder] 
    ADD CONSTRAINT FK_ZnodeOmsOrder_ZnodePublishState FOREIGN KEY ([PublishStateId]) REFERENCES [dbo].[ZnodePublishState] ([PublishStateId])
END
GO
IF NOT EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeOmsQuote' AND COLUMN_NAME = 'PublishStateId')
BEGIN 
ALTER TABLE [dbo].[ZnodeOmsQuote]
    ADD [PublishStateId] TINYINT  NULL;
END

GO
IF NOT EXISTS (SELECT * FROM   sys.objects WHERE  type IN( 'F' ) and OBJECT_NAME(parent_object_id) = 'ZnodeOmsQuote' and name ='FK_ZnodeOmsQuote_ZnodePublishState')
BEGIN 
ALTER TABLE [dbo].[ZnodeOmsQuote] 
    ADD CONSTRAINT FK_ZnodeOmsQuote_ZnodePublishState FOREIGN KEY ([PublishStateId]) REFERENCES [dbo].[ZnodePublishState] ([PublishStateId])
END
GO

IF NOT EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodePortalShipping' AND COLUMN_NAME = 'PublishStateId')
BEGIN 
ALTER TABLE [dbo].[ZnodePortalShipping]
    ADD [PublishStateId] TINYINT  NULL;
END

GO
IF NOT EXISTS (SELECT * FROM   sys.objects WHERE  type IN( 'F' ) and OBJECT_NAME(parent_object_id) = 'ZnodePortalShipping' and name ='FK_ZnodePortalShipping_ZnodePublishState')
BEGIN 
ALTER TABLE [dbo].[ZnodePortalShipping] 
    ADD CONSTRAINT FK_ZnodePortalShipping_ZnodePublishState FOREIGN KEY ([PublishStateId]) REFERENCES [dbo].[ZnodePublishState] ([PublishStateId])
END
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_CopyUserProfile')
BEGIN 
	DROP PROCEDURE Znode_CopyUserProfile
END
GO

Create PROCEDURE [dbo].[Znode_CopyUserProfile]
(
	  @PortalId int, 
	  @ProfileId int,
	  @ProfileName varchar(500),
	  @UserId Int,
	  @Status bit OUT)
AS   
BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		SET NOCOUNT ON;
		
		DECLARE @GetDate DATETIME = dbo.Fn_GetDate()

		DECLARE @ProfileIdNew INT,@ProfileCatalogIdNew INT 

		IF NOT EXISTS(SELECT * FROM ZnodeProfile WHERE ProfileName = @ProfileName)
		BEGIN
			INSERT INTO ZnodeProfile(ProfileName,	ShowOnPartnerSignup	,Weighting,	TaxExempt,	DefaultExternalAccountNo,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate,	ParentProfileId)
			SELECT @ProfileName,	ShowOnPartnerSignup	,Weighting,	TaxExempt,	DefaultExternalAccountNo,	@UserId,@GetDate,@UserId,@GetDate,	@ProfileId ParentProfileId 
			FROM ZnodeProfile WHERE ProfileId = @ProfileId 
			

			set @ProfileIdNew = @@Identity

			if (isnull(@ProfileIdNew,0) <> 0)
			begin
				insert into ZnodePortalProfile(PortalId,ProfileId,IsDefaultAnonymousProfile,IsDefaultRegistedProfile,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				select @PortalId,@ProfileIdNew,IsDefaultAnonymousProfile,IsDefaultRegistedProfile,@UserId,@GetDate,@UserId,@GetDate
				from ZnodePortalProfile 
				where ProfileId = @ProfileId
				AND PortalId = @PortalId

				insert into ZnodeProfileShipping(ProfileId,ShippingId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,DisplayOrder)
				select @ProfileIdNew,ShippingId,@UserId,@GetDate,@UserId,@GetDate,DisplayOrder
				from ZnodeProfileShipping where ProfileId = @ProfileId

				insert into ZnodeAccountProfile(AccountId,ProfileId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,IsDefault)
				select AccountId,@ProfileIdNew,@UserId,@GetDate,@UserId,@GetDate,IsDefault
				from ZnodeAccountProfile where ProfileId = @ProfileId

				insert into ZnodeCMSContentPagesProfile(ProfileId,CMSContentPagesId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				select @ProfileIdNew,CMSContentPagesId,@UserId,@GetDate,@UserId,@GetDate
				from ZnodeCMSContentPagesProfile where ProfileId = @ProfileId

				insert into ZnodeUserProfile(ProfileId,UserId,IsDefault,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				select @ProfileIdNew,UserId,IsDefault,@UserId,@GetDate,@UserId,@GetDate
				from ZnodeUserProfile where ProfileId = @ProfileId

				INSERT INTO ZnodeProfilePaymentSetting(PaymentSettingId,ProfileId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,DisplayOrder)
				SELECT PaymentSettingId,@ProfileIdNew,@UserId,@GetDate,@UserId,@GetDate,DisplayOrder
				FROM ZnodeProfilePaymentSetting where ProfileId = @ProfileId

				INSERT INTO ZnodePromotion(PromoCode,Name,Description,PromotionTypeId,Discount,StartDate,EndDate,OrderMinimum,QuantityMinimum,IsCouponRequired,IsAllowedWithOtherCoupons,PromotionMessage,DisplayOrder,IsUnique,PortalId,ProfileId,PromotionProductQuantity,ReferralPublishProductId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				SELECT PromoCode,Name,Description,PromotionTypeId,Discount,StartDate,EndDate,OrderMinimum,QuantityMinimum,IsCouponRequired,IsAllowedWithOtherCoupons,PromotionMessage,DisplayOrder,IsUnique,PortalId,@ProfileIdNew,PromotionProductQuantity,ReferralPublishProductId,@UserId,@GetDate,@UserId,@GetDate
				FROM ZnodePromotion WHERE ProfileId = @ProfileId
				AND PortalId = @PortalId

				INSERT INTO ZnodeProfileCatalog (ProfileId,PimCatalogId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				SELECT @ProfileIdNew, PimCatalogId,@UserId,@GetDate,@UserId,@GetDate
				FROM ZnodeProfileCatalog a 
				WHERE ProfileId = @ProfileId 
				
				SET @ProfileCatalogIdNew =@@IDENTITY

				INSERT INTO ZnodeProfileCatalogCategory (ProfileCatalogId,PimCatalogCategoryId,DisplayOrder,IsActive,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				SELECT @ProfileCatalogIdNew,PimCatalogCategoryId,DisplayOrder,IsActive,@UserId,@GetDate,@UserId,@GetDate
				FROM ZnodeProfileCatalogCategory ZPCC
				INNER JOIN ZnodeProfileCatalog ZPC ON (ZPC.ProfileCatalogId = ZPCC.ProfileCatalogId)
				WHERE ZPC.ProfileId = @ProfileId

				INSERT INTO ZnodeProfileCategoryHierarchy (ProfileCatalogId,PimCategoryHierarchyId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				SELECT @ProfileCatalogIdNew,PimCategoryHierarchyId,@UserId,@GetDate,@UserId,@GetDate
				FROM ZnodeProfileCategoryHierarchy ZPCH 
				INNER JOIN ZnodeProfileCatalog ZPC ON (ZPC.ProfileCatalogId = ZPCH.ProfileCatalogId)
				WHERE ZPC.ProfileId = @ProfileId

				SET @ProfileCatalogIdNew  = 0
				 
				INSERT INTO ZnodeProfileCatalog (ProfileId,PimCatalogId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				SELECT @ProfileIdNew, b.PimCatalogId,@UserId,@GetDate,@UserId,@GetDate
				FROM ZnodePortalCatalog a 
				INNER JOIN ZnodePublishCatalog b ON (b.PublishCatalogId = a.PublishCatalogId)
				WHERE a.PortalId = @PortalId 
				AND NOT EXISTS (SELECT TOP 1  1  FROM ZnodeProfileCatalog RT WHERE RT.ProfileId = @ProfileIdNew AND RT.PimCatalogId = b.PimCatalogId )
				
				IF @@ROWCOUNT > 0 
				SET @ProfileCatalogIdNew = SCOPE_IDENTITY()			     
				 
			     
				INSERT INTO ZnodeProfileCatalogCategory (ProfileCatalogId,PimCatalogCategoryId,DisplayOrder,IsActive,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				SELECT @ProfileCatalogIdNew,PimCatalogCategoryId,DisplayOrder,IsActive,@UserId,@GetDate,@UserId,@GetDate
				FROM ZnodePimCatalogCategory  ZPCC
				WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeProfileCatalog TY WHERE TY.ProfileCatalogId = @ProfileCatalogIdNew AND TY.PimCatalogId = ZPCC.PimCatalogId)
				AND @ProfileCatalogIdNew <> 0 

				INSERT INTO ZnodeProfileCategoryHierarchy (ProfileCatalogId,PimCategoryHierarchyId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				SELECT @ProfileCatalogIdNew,PimCategoryHierarchyId,@UserId,@GetDate,@UserId,@GetDate
				FROM ZnodePimCategoryHierarchy ZPCH 
				WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeProfileCatalog TY WHERE TY.ProfileCatalogId = @ProfileCatalogIdNew AND TY.PimCatalogId = ZPCH.PimCatalogId)
				AND @ProfileCatalogIdNew <> 0 


				DELETE FROM ZnodePortalProfile WHERE ProfileId = @ProfileId AND PortalId = @PortalId 
				

			end
		end

		-- copy all data if New portalId will generate
		IF (Select Count(ProfileId) from ZnodeProfile where ProfileId = @ProfileId and ProfileName =@ProfileName) >= 0
		BEGIN
			
			SELECT @PortalId AS ID, CAST(1 AS bit) AS [Status]; 
			SET @Status = CAST(1 AS bit);
			COMMIT TRAN A;
		END;
		ELSE
		BEGIN
			-- If copy process will not complete successfully then return status 0 
			SELECT @PortalId AS ID, CAST(0 AS bit) AS [Status];
			SET @Status = CAST(1 AS bit);
			ROLLBACK TRAN A;
		END;
		
	END TRY
	BEGIN CATCH 
		    SELECT ERROR_MESSAGE()
		     SET @Status = 0;
		    -- DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_CopyPortal @PortalId = '+CAST(@PortalId AS VARCHAR(200))+',@StoreName='+@StoreName+',@CompanyName='+@CompanyName+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
             ROLLBACK TRAN A; 			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
    --         EXEC Znode_InsertProcedureErrorLog
				--@ProcedureName = 'Znode_CopyPortal',
				--@ErrorInProcedure = @Error_procedure,
				--@ErrorMessage = @ErrorMessage,
				--@ErrorLine = @ErrorLine,
				--@ErrorCall = @ErrorCall;
	END CATCH;
END;
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetShippingList')
BEGIN 
	DROP PROCEDURE Znode_GetShippingList
END
GO

CREATE PROCEDURE [dbo].[Znode_GetShippingList]
(
	   @WhereClause nvarchar(max)= ''
	   , @Rows int= 100
	   , @PageNo int= 1
	   , @Order_BY varchar(1000)= ' DisplayOrder ASC'
	   , @RowsCount int OUT
	   , @ProfileId int= 0
	   , @PortalId int= 0
	   , @UserId int= 0
	   , @IsAssociated int= 0
)
AS
/*
  Summary: This Procedure is used to get shipping details According to associated profile.

  Unit Testing:

   DECLARE @profileid int = 0
	EXEC [Znode_GetShippingList]  @WhereClause ='' ,  @ProfileId = 0,@PortalId=1   ,@IsAssociated=0, @RowsCount = @profileid OUT ,@UserId = 4   SELECT @profileid

*/
BEGIN
	BEGIN TRY
		SET NOCOUNT ON;
		DECLARE @SQL nvarchar(max), @FilterWhereClause varchar(2000)= '', @InternalOrderBy varchar(2000)= '';
		DECLARE @TBL_ProfileShipping TABLE
		(
			ProfileId int, ProfileName nvarchar(200), PortalId int, StoreName nvarchar(200), ShippingId int, ShippingTypeId int
			, ShippingCode nvarchar(max), HandlingCharge numeric(28,6), HandlingChargeBasedOn varchar(50), DestinationCountryCode nvarchar(50)
			, StateCode nvarchar(40), CountyFIPS nvarchar(100), Description nvarchar(max), IsActive bit, DisplayOrder int, ZipCode nvarchar(max)
			, CreatedDate datetime, ModifiedDate datetime, ShippingTypeName nvarchar(max), PortalShippingId int, ProfileShippingId int
			, ShippingName varchar(200), ClassName varchar(100), DeliveryTimeframe varchar(MAX), RowId int, CountNo int
			, ApplicationType varchar(600)
		);
		IF ISNULL(@UserId, 0) <> 0 OR
		   (ISNULL(@PortalId, 0) > 0 AND
		   ISNULL(@ProfileId, 0) > 0)
		BEGIN
			DECLARE @PortalIds varchar(2000)= '', @ProfileIds varchar(2000)= '', @ShippingIds varchar(2000)= '';
			IF ISNULL(@UserId, 0) <> 0
			BEGIN
			    SET @PortalIds = @PortalId
				EXEC Znode_GetUserPortalAndProfile @UserId, @PortalIds OUT, @ProfileIds OUT;
			END;
			ELSE
			BEGIN
				SET @PortalIds = @PortalId;
				SET @ProfileIds = @ProfileId;
			END;

			EXEC Znode_GetCommonShipping @PortalIds, @ProfileIds, @ShippingIds OUT;

			SET @FilterWhereClause = '  WHERE ShippingId IN ( '+@ShippingIds +' ) ';
		END;
		IF ISNULL(@ProfileId, 0) > 0 AND
		   ISNULL(@UserId, 0) = 0 AND
		   ISNULL(@PortalId, 0) = 0
		BEGIN
			SET @SQL = '
			   ;WITH CTE_GetAssociatedShipping as
			  (
				SELECT  ZP.ProfileId, ZP.ProfileName,NULL PortalId, NULL StoreName ,ZS.ShippingId,ZS.ShippingTypeId,ZS.ShippingCode,ZS.HandlingCharge,ZS.HandlingChargeBasedOn
			    ,ZS.DestinationCountryCode,ZS.StateCode,ZS.CountyFIPS,ZS.Description,ZS.IsActive,CASE WHEN '+CAST(@ProfileId AS VARCHAR(200))+' >= 0 AND '+CAST(@IsAssociated AS VARCHAR(200))+' = 1 THEN ISNULL(ZPS.DisplayOrder,ZS.DisplayOrder) ELSE ZS.DisplayOrder END DisplayOrder,ZS.ZipCode,ZS.CreatedDate,ZS.ModifiedDate
				,CASE WHEN ZPS.ShippingId IS NULL THEN 0 ELSE 1 END IsAssociated,ZST.Name ShippingTypeName , ZPS.ProfileShippingId 
				, NULL PortalShippingId,ZS.ShippingName,ZST.ClassName,ZS.DeliveryTimeframe,NULL PublishStatus

				FROM ZnodeShipping ZS
				INNER JOIN ZnodeShippingTypes ZST ON (ZST.ShippingTypeId = ZS.ShippingTypeId)
				CROSS APPLY ZnodeProfile ZP
				LEFT JOIN ZnodeProfileShipping ZPS ON(ZP.ProfileId = ZPS.ProfileId AND ZS.ShippingId = ZPS.ShippingId)
			  )';
			SET @FilterWhereClause = 'WHERE ProfileId = '+CAST(@ProfileId AS varchar(50))+' AND IsAssociated = '+CAST(@IsAssociated AS varchar(50));
			SET @InternalOrderBy = ' ProfileId,ShippingId ';
		END;
		ELSE
		BEGIN
			IF ISNULL(@PortalId, 0) > 0 AND
			   ISNULL(@UserId, 0) = 0 AND
			   ISNULL(@ProfileId, 0) = 0
			BEGIN
				SET @SQL = '
			   ;WITH CTE_GetAssociatedShipping as
			  (
				SELECT NULL ProfileId,NULL ProfileName ,ZPP.PortalId, ZPP.StoreName,ZS.ShippingId,ZS.ShippingTypeId,ZS.ShippingCode,ZS.HandlingCharge,ZS.HandlingChargeBasedOn
			    ,ZS.DestinationCountryCode,ZS.StateCode,ZS.CountyFIPS,ZS.Description,ZS.IsActive,ZS.DisplayOrder,ZS.ZipCode,ZS.CreatedDate,ZS.ModifiedDate
				,CASE WHEN ZPS.PortalShippingId IS NULL THEN 0 ELSE 1 END IsAssociated,ZST.Name ShippingTypeName ,ZPS.PortalShippingId, NULL ProfileShippingId,ZS.ShippingName,ZST.ClassName,ZS.DeliveryTimeframe
				,ZPSS.DisplayName  PublishStatus
				FROM ZnodeShipping ZS
				INNER JOIN ZnodeShippingTypes ZST ON (ZST.ShippingTypeId = ZS.ShippingTypeId)
				CROSS APPLY ZnodePortal ZPP
				LEFT JOIN ZnodePortalShipping ZPS ON(ZPP.PortalId = ZPS.PortalId AND ZS.ShippingId = ZPS.ShippingId)
				LEFT JOIN ZnodePublishState ZPSS ON (ZPS.PublishStateId =  ZPSS.PublishStateId )
			  )';
				SET @FilterWhereClause = 'WHERE PortalId = '+CAST(@PortalId AS varchar(50))+' AND IsAssociated = '+CAST(@IsAssociated AS varchar(50));
				SET @InternalOrderBy = ' PortalId ,ShippingId ';
			END;
			ELSE
			BEGIN			
				SET @SQL = '
			   ;With  CTE_GetAssociatedShipping as
			   (
			   SELECT NULL ProfileId, NULL ProfileName,NULL PortalId, NULL StoreName,ZS.ShippingId,ZS.ShippingTypeId,ZS.ShippingCode,ZS.HandlingCharge,ZS.HandlingChargeBasedOn
			   ,ZS.DestinationCountryCode,ZS.StateCode,ZS.CountyFIPS,ZS.Description,ZS.IsActive,ISNULL(ZPP.DisplayOrder, ZS.DisplayOrder  ) DisplayOrder,ZS.ZipCode,ZS.CreatedDate,ZS.ModifiedDate
			   , NULL IsAssociated ,ZST.Name ShippingTypeName , NULL PortalShippingId, NULL ProfileShippingId,ZS.ShippingName,ZST.ClassName,ZS.DeliveryTimeframe
			   ,ZPSS.DisplayName PublishStatus
			   FROM ZnodeShipping ZS
			   INNER JOIN ZnodeShippingTypes ZST ON (ZST.ShippingTypeId = ZS.ShippingTypeId)
			   LEFT JOIN ZnodeProfileShipping ZPP ON (ZPP.ShippingId = ZS.shippingId AND ZPP.Profileid = '+CAST(@ProfileId AS NVARCHAR(200))+')
			   LEFT JOIN ZnodePortalShipping ZPS ON( '+CAST(@PortalId AS VARCHAR(200))+'= ZPS.PortalId AND ZS.ShippingId = ZPS.ShippingId)
			   LEFT JOIN ZnodePublishState ZPSS ON (ZPS.PublishStateId =  ZPSS.PublishStateId ) 
			     )
			   ';
				SET @FilterWhereClause = CASE
										 WHEN ISNULL(@FilterWhereClause,'') = '' THEN ' WHERE 1=1 '
										 ELSE @FilterWhereClause
										 END;
				SET @InternalOrderBy = ' ShippingId ';
				
			END;
		END;
		
		SET @SQL = @SQL+'
	           , CTE_GetShipping AS
			 (
				SELECT	ProfileId,ProfileName,PortalId,StoreName,ShippingId,ShippingTypeId,ShippingCode,HandlingCharge,HandlingChargeBasedOn
			   ,DestinationCountryCode,StateCode,CountyFIPS,Description,IsActive,DisplayOrder,ZipCode,CreatedDate,ModifiedDate,ShippingTypeName , PortalShippingId, ProfileShippingId,ShippingName,ClassName,DeliveryTimeframe,PublishStatus
					,'+dbo.Fn_GetPagingRowId( @Order_BY, @InternalOrderBy )+',Count(*)Over() CountNo
				FROM CTE_GetAssociatedShipping
				'+ISNULL(@FilterWhereClause,'')+'
				'+dbo.Fn_GetFilterWhereClause( @WhereClause )+'
			 )

	      SELECT ProfileId,ProfileName,PortalId,StoreName,ShippingId,ShippingTypeId,ShippingCode,HandlingCharge,HandlingChargeBasedOn
					 ,DestinationCountryCode,StateCode,CountyFIPS,Description,IsActive,DisplayOrder,ZipCode,CreatedDate,ModifiedDate
					 ,ShippingTypeName,PortalShippingId,ProfileShippingId,ShippingName,ClassName,DeliveryTimeframe,PublishStatus,RowId,CountNo
		  FROM CTE_GetShipping
		  '+dbo.Fn_GetPaginationWhereClause( @PageNo, @Rows );

		
		INSERT INTO @TBL_ProfileShipping( ProfileId, ProfileName, PortalId, StoreName, ShippingId, ShippingTypeId, ShippingCode, HandlingCharge, HandlingChargeBasedOn, DestinationCountryCode, StateCode, CountyFIPS, Description, IsActive, DisplayOrder, ZipCode, CreatedDate, ModifiedDate, ShippingTypeName, PortalShippingId, ProfileShippingId, ShippingName, ClassName, DeliveryTimeframe, ApplicationType,RowId, CountNo )
		EXEC (@SQL);

		SET @RowsCount = ISNULL((SELECT TOP 1 CountNo FROM @TBL_ProfileShipping), 0);
		SELECT ShippingId,ProfileId, ProfileName, PortalId, StoreName,  ShippingTypeId, ShippingCode, HandlingCharge, HandlingChargeBasedOn, DestinationCountryCode, StateCode, CountyFIPS, Description, IsActive, DisplayOrder, ZipCode, CreatedDate, ModifiedDate, ShippingTypeName, PortalShippingId, ProfileShippingId, ShippingName, ClassName, DeliveryTimeframe,ApplicationType
		FROM @TBL_ProfileShipping;

	END TRY
	BEGIN CATCH
		    DECLARE @Status BIT ;
		    SET @Status = 0;
		    DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetShippingList @WhereClause = '+cast (@WhereClause AS VARCHAR(50))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@ProfileId='+CAST(@ProfileId AS VARCHAR(50))+',@PortalId='+CAST(@PortalId AS VARCHAR(50))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@IsAssociated='+CAST(@IsAssociated AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));

            SELECT 0 AS ID,CAST(0 AS BIT) AS Status;

            EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetShippingList',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
	END CATCH;
END;
GO


Update ZnodeOmsOrder 
SET PublishStateId = (SELECT TOP 1 PublishStateId  FROM ZnodePublishState  WHERE DisplayName = 'Production')

GO
Update ZnodeOmsQuote
SET PublishStateId = (SELECT TOP 1 PublishStateId  FROM ZnodePublishState  WHERE DisplayName = 'Production')

GO
Update ZnodePortalShipping
SET PublishStateId = (SELECT TOP 1 PublishStateId  FROM ZnodePublishState  WHERE DisplayName = 'Production')

GO
INSERT INTO ZnodeActions(AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT NULL,'Profiles','UpdateProfileShipping',1,2,GETDATE(),2,GETDATE() 
WHERE NOT EXISTS(SELECT TOP 1 1 FROM ZnodeActions WHERE  ControllerName='Profiles' AND ActionName='UpdateProfileShipping')

INSERT INTO ZnodeActions(AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT NULL,'Profiles','UpdateProfilePaymentSetting',1,2,GETDATE(),2,GETDATE() 
WHERE NOT EXISTS(SELECT TOP 1 1 FROM ZnodeActions WHERE  ControllerName='Profiles' AND ActionName='UpdateProfilePaymentSetting')
GO 

insert into ZnodeApplicationSetting (GroupName,ItemName,Setting,ViewOptions,FrontPageName,FrontObjectName,IsCompressed,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT 'Table','ZnodeProfileDefaultCatalogList','<?xml version="1.0" encoding="utf-16"?><columns><column><id>1</id><name>ProfileCatalogId</name><headertext>Checkbox</headertext><width>20</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>y</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>y</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>2</id><name>PimCatalogId</name><headertext>ID</headertext><width>50</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>3</id><name>ProfileId</name><headertext>Profile ID</headertext><width>50</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>y</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>4</id><name>CatalogName</name><headertext>Catalog Name</headertext><width>50</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>5</id><name>Manage</name><headertext>Action</headertext><width>50</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format>Manage</format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>y</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Manage|Delete</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl>/PIM/Catalog/ManageProfileCatalog</manageactionurl><manageparamfield>profileId,ProfileCatalogId,PimCatalogId</manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column></columns>','ZnodeProfileDefaultCatalogList','ZnodeProfileDefaultCatalogList','ZnodeProfileDefaultCatalogList',0,2,GETDATE(),2,GETDATE()
WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodeApplicationSetting WHERE ItemName = 'ZnodeProfileDefaultCatalogList' )
GO 


SET IDENTITY_INSERT [dbo].[ZnodePageSetting] ON 

INSERT [dbo].[ZnodePageSetting] ([PageSettingId], [PageName], [PageValue], [DisplayOrder], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) SELECT 1, N'Show 8', 8, 1, 1, CAST(N'2019-01-11T00:00:00.000' AS DateTime), 1, CAST(N'2019-01-11T00:00:00.000' AS DateTime) 
WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePageSetting WHERE [PageSettingId] = 1 )
INSERT [dbo].[ZnodePageSetting] ([PageSettingId], [PageName], [PageValue], [DisplayOrder], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) SELECT 3, N'Show 12', 12, 2, 1, CAST(N'2019-01-11T00:00:00.000' AS DateTime), 1, CAST(N'2019-01-11T00:00:00.000' AS DateTime)
WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePageSetting WHERE [PageSettingId] =  3)
INSERT [dbo].[ZnodePageSetting] ([PageSettingId], [PageName], [PageValue], [DisplayOrder], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) SELECT 4, N'Show 16', 16, 3, 1, CAST(N'2019-01-11T00:00:00.000' AS DateTime), 1, CAST(N'2019-01-11T00:00:00.000' AS DateTime)
WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePageSetting WHERE [PageSettingId] = 4 )
INSERT [dbo].[ZnodePageSetting] ([PageSettingId], [PageName], [PageValue], [DisplayOrder], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) SELECT 5, N'Show 32', 32, 4, 1, CAST(N'2019-01-11T00:00:00.000' AS DateTime), 1, CAST(N'2019-01-11T00:00:00.000' AS DateTime)
WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePageSetting WHERE [PageSettingId] = 5 )
INSERT [dbo].[ZnodePageSetting] ([PageSettingId], [PageName], [PageValue], [DisplayOrder], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) SELECT 6, N'Show 64', 64, 5, 1, CAST(N'2019-01-11T00:00:00.000' AS DateTime), 1, CAST(N'2019-01-11T00:00:00.000' AS DateTime)
WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePageSetting WHERE [PageSettingId] = 6 )

SET IDENTITY_INSERT [dbo].[ZnodePageSetting] OFF
GO 
SET IDENTITY_INSERT [dbo].[ZnodeSortSetting] ON 

INSERT [dbo].[ZnodeSortSetting] ([SortSettingId], [SortName], [SortValue], [DisplayOrder], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) SELECT 1, N'Sort by', 0, 1, 1, CAST(N'2019-01-11T00:00:00.000' AS DateTime), 1, CAST(N'2019-01-11T00:00:00.000' AS DateTime)
WHERE NOT EXISTS (SELECT TOP 1 1 FROM [dbo].[ZnodeSortSetting]  WHERE [SortSettingId] = 1 )
INSERT [dbo].[ZnodeSortSetting] ([SortSettingId], [SortName], [SortValue], [DisplayOrder], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) SELECT 2, N'Highest Rating', 1, 2, 1, CAST(N'2019-01-11T00:00:00.000' AS DateTime), 1, CAST(N'2019-01-11T00:00:00.000' AS DateTime)
WHERE NOT EXISTS (SELECT TOP 1 1 FROM [dbo].[ZnodeSortSetting]  WHERE [SortSettingId] = 2 )
INSERT [dbo].[ZnodeSortSetting] ([SortSettingId], [SortName], [SortValue], [DisplayOrder], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) SELECT 3, N'Most Review', 2, 3, 1, CAST(N'2019-01-11T00:00:00.000' AS DateTime), 1, CAST(N'2019-01-11T00:00:00.000' AS DateTime)
WHERE NOT EXISTS (SELECT TOP 1 1 FROM [dbo].[ZnodeSortSetting]  WHERE [SortSettingId] = 3 )
INSERT [dbo].[ZnodeSortSetting] ([SortSettingId], [SortName], [SortValue], [DisplayOrder], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) SELECT 4, N'Price, High to Low', 3, 4, 1, CAST(N'2019-01-11T00:00:00.000' AS DateTime), 1, CAST(N'2019-01-11T00:00:00.000' AS DateTime)
WHERE NOT EXISTS (SELECT TOP 1 1 FROM [dbo].[ZnodeSortSetting]  WHERE [SortSettingId] = 4 )
INSERT [dbo].[ZnodeSortSetting] ([SortSettingId], [SortName], [SortValue], [DisplayOrder], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) SELECT 5, N'Price, Low to High', 4, 5, 1, CAST(N'2019-01-11T00:00:00.000' AS DateTime), 1, CAST(N'2019-01-11T00:00:00.000' AS DateTime)
WHERE NOT EXISTS (SELECT TOP 1 1 FROM [dbo].[ZnodeSortSetting]  WHERE [SortSettingId] = 5 )
INSERT [dbo].[ZnodeSortSetting] ([SortSettingId], [SortName], [SortValue], [DisplayOrder], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) SELECT 6, N'Sort by: Name, A to Z', 5, 6, 1, CAST(N'2019-01-11T00:00:00.000' AS DateTime), 1, CAST(N'2019-01-11T00:00:00.000' AS DateTime)
WHERE NOT EXISTS (SELECT TOP 1 1 FROM [dbo].[ZnodeSortSetting]  WHERE [SortSettingId] = 6 )
INSERT [dbo].[ZnodeSortSetting] ([SortSettingId], [SortName], [SortValue], [DisplayOrder], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) SELECT 7, N'Sort by: Name, Z to A', 6, 7, 1, CAST(N'2019-01-11T00:00:00.000' AS DateTime), 1, CAST(N'2019-01-11T00:00:00.000' AS DateTime)
WHERE NOT EXISTS (SELECT TOP 1 1 FROM [dbo].[ZnodeSortSetting]  WHERE [SortSettingId] = 7 )
INSERT [dbo].[ZnodeSortSetting] ([SortSettingId], [SortName], [SortValue], [DisplayOrder], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) SELECT 8, N'Out Of Stock', 7, 8, 1, CAST(N'2019-01-11T00:00:00.000' AS DateTime), 1, CAST(N'2019-01-11T00:00:00.000' AS DateTime)
WHERE NOT EXISTS (SELECT TOP 1 1 FROM [dbo].[ZnodeSortSetting]  WHERE [SortSettingId] = 8 )
INSERT [dbo].[ZnodeSortSetting] ([SortSettingId], [SortName], [SortValue], [DisplayOrder], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) SELECT 9, N'In Stock', 8, 9, 1, CAST(N'2019-01-11T00:00:00.000' AS DateTime), 1, CAST(N'2019-01-11T00:00:00.000' AS DateTime)
WHERE NOT EXISTS (SELECT TOP 1 1 FROM [dbo].[ZnodeSortSetting]  WHERE [SortSettingId] = 9 )
SET IDENTITY_INSERT [dbo].[ZnodeSortSetting] OFF

GO 

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishCatalog')
BEGIN 
	DROP PROCEDURE Znode_GetPublishCatalog
END
GO

CREATE PROCEDURE [dbo].[Znode_GetPublishCatalog]
(   @PimCatalogId INT,
    @UserId       INT,
    @Status       BIT = 0 OUT,
	@PublishTimeoutSeconds INT = 0,
	@LocaleId  TransferId Readonly,
	@IsCategoryPublishInProcess BIT = 0,
	@isDebug INT = 0
	 )
AS
/*
     Summary:- This Procedure is used to get data of catalog for publish 
     Unit Testing
	 begin tran
	 DECLARE @RT transferId 
	 INSERT INTO @RT 
	 VALUES (1),()
	  DECLARE @rerer INT =0 
     EXEC Znode_GetPublishCatalog 18 ,2,@rerer OUT SELECT @rerer
	 UPDATE ZnodePublishCatalogLog SET IsCatalogPublished = 0 WHERE IsCatalogPublished IS NULL 
	 SELECT * FROM ZnodePublishcatalogLog 
	 -- SELECT CASE WHEN DATEDIFF(s, LogDateTIme ,GETDATE()) > 1500 THEN 1 ELSE 0 END, DATEDIFF(s, LogDateTIme,GETUTCDATE() ) ,*  FROM ZnodePublishCatalogLog  WHERE publishCatalogId = 5  AND isCatalogPublished IS NULL 
	 rollback tran
	*/
     BEGIN
         BEGIN TRAN GetPublishCatalog;
         BEGIN TRY

		DECLARE @LocaleIds TABLE (LocaleId INT )
		DECLARE @LocaleIDsin TransferId 
		DECLARE @PublishStateIdForProcessing  INT = [dbo].[Fn_GetPublishStateIdForProcessing]()
		,@PublishStateIdForPublishFailed INT =  [dbo].[Fn_GetPublishStateIdForPublishFailed]()
		INSERT INTO  @LocaleIDsin 
		SELECT * FROM @LocaleID
		DELETE FROM  @LocaleIDsin WHERE id = 0 


	   DECLARE @StartPublishProcess BIT = 0 
	   DECLARE @GetDate  DATETIME = dbo.Fn_GetDate();
	   DECLARE @PublishCatalogId INT= ISNULL((SELECT TOP 1 PublishCatalogId FROM ZnodePublishCatalog ZPC WHERE ZPC.PimCatalogId = @PimCatalogId), 0), @PublishCataloglogId INT= 0;
	   DECLARE @TBL_DeletePublishCataLogLogId TABLE (PublishCatalogLogId INT )
	   DECLARE @MaxCatalogLog INT = ( SELECT max(PublishcataloglogId) FROM ZnodePublishCataloglog  WHERE PimCatalogId = @PimCatalogId)
	  
	   INSERT INTO @LocaleIds 
	   SELECT id 
	   FROM @LocaleIDsin RT 
	   UNION ALL 
	   SELECT LocaleId 
	   FROM ZnodeLocale 
	   WHERE IsActive = 1
	   AND NOT EXISTS (SELECT TOP 1 1 FROM @LocaleIDsin ) 


	   INSERT INTO   @TBL_DeletePublishCataLogLogId
	   SELECT PublishCatalogLogId FROM ZnodePublishCatalogLog ZPCC WHERE ZPCC.PublishCatalogLogId < (@MaxCatalogLog - 2 )
		AND ZPCC.PimCatalogId = @PimCatalogId

 

           DECLARE @CatalogProfileId VARCHAR(MAX)= '';
                                                   
           IF EXISTS (SELECT TOP 1 1 FROM ZnodePublishcatalogLog  WHERE  IsCatalogPublished  IS NULL OR  PublishStateId = @PublishStateIdForProcessing   )
			 BEGIN
		
					  SET @StartPublishProcess =1
					  SET @Status = 0;
				
			   END 
		   ELSE 
		     BEGIN
			    
			    SET @StartPublishProcess = 0
			    SET @Status = 1;
		     END 	

			 IF @isDebug =1 
			 BEGIN 
			  SELECT @StartPublishProcess
			 END 

		   IF (@PublishCatalogId <> 0 AND @StartPublishProcess = 0 )
                 BEGIN
			
					  UPDATE ZnodePublishCatalogLog SET  IsCatalogPublished = 0 ,PublishStateId = @PublishStateIdForPublishFailed 
					  WHERE PublishCatalogId = @PublishCatalogId 
					  AND  PublishStateId = @PublishStateIdForProcessing

					  UPDATE ZPC SET CatalogName = ZC.CatalogName,ExternalId = ZC.ExternalId,PimCatalogId= @PimCatalogId,CreatedBy = @UserId,
					  CreatedDate = @GetDate,ModifiedBy = @UserId,ModifiedDate = @GetDate 
					  FROM ZnodePublishCatalog ZPC 
					  INNER JOIN ZnodePimCatalog ZC ON(ZC.PimCatalogId = ZPC.PimCatalogId)
					  WHERE ZPC.PimCatalogId = @PimCatalogId;
              
			  		  INSERT INTO ZnodePublishCatalogLog (PublishCatalogId,IsCategoryPublished,IsCatalogPublished,pimCatalogId,UserId,LogDateTime,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,LocaleId,PublishStateId )
					  SELECT @PublishCatalogId,CASE WHEN @IsCategoryPublishInProcess = 1 THEN 0 ELSE NULL END,NULL,@PimCatalogId,@UserId,@GetDate,@UserId,@GetDate,@UserId,@GetDate,LocaleId,@PublishStateIdForProcessing
					  FROM @LocaleIds a
					  WHERE @PublishCataloglogId = 0 

					  SET @PublishCataloglogId = SCOPE_IDENTITY();
				 END
             ELSE IF @StartPublishProcess = 0 
                 BEGIN
				     
					  INSERT INTO ZnodePublishCatalog (PimCatalogId,CatalogName,ExternalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
                      SELECT PimCatalogId,CatalogName,ExternalId,@UserId,@GetDate,@UserId,@GetDate 
					  FROM ZnodePimCatalog AS ZPC 
					  WHERE ZPC.PimCatalogId = @PimCatalogId;
                      
					  SET @PublishCatalogId = SCOPE_IDENTITY();
                     
					  INSERT INTO ZnodePublishCatalogLog (PublishCatalogId,IsCategoryPublished,IsCatalogPublished,pimCatalogId,UserId,LogDateTime,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,LocaleId,PublishStateId )
					  SELECT @PublishCatalogId,CASE WHEN @IsCategoryPublishInProcess = 1 THEN 0 ELSE NULL END,NULL,@PimCatalogId,@UserId,@GetDate,@UserId,@GetDate,@UserId,@GetDate,LocaleId,@PublishStateIdForProcessing
					  FROM @LocaleIds
					  WHERE @PublishCataloglogId = 0 

                      SET @PublishCataloglogId = SCOPE_IDENTITY();
                 END;

				 -- here find the profile attached to the catalog 
          SET @CatalogProfileId = SUBSTRING((SELECT ','+CAST(ProfileId AS VARCHAR(20)) FROM ZnodeProfileCatalog ZPC WHERE PimCatalogId = @PimCatalogId FOR XML PATH('')), 2, 4000);              

	      
		SELECT ZPC.PublishCatalogId ZnodeCatalogId,CatalogName,@CatalogProfileId TempProfileIds,Max(PublishCatalogLogId) VersionId  ,yu.localeid LocaleId,PublishStateId
		FROM ZnodePublishCatalog ZPC
		INNER JOIN  ZnodePublishCatalogLog YU ON (YU.PublishCatalogId = ZPC.PublishCatalogId)
		WHERE ZPC.PublishCatalogId = @PublishCatalogId
		AND (YU.IsCatalogPublished IS NULL OR  YU.PublishStateId= @PublishStateIdForProcessing)
	    AND  @StartPublishProcess = 0 
		GROUP BY 	ZPC.PublishCatalogId,CatalogName,yu.localeid,YU.IsCatalogPublished,PublishStateId ;

		COMMIT TRAN GetPublishCatalog;
		
       END TRY
       BEGIN CATCH
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPublishCatalog @PimCatalogId = '+CAST(@PimCatalogId AS VARCHAR(50))+',@UserId ='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(50));
             SET @Status = 0;
             ROLLBACK TRAN GetPublishCatalog;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_GetPublishCatalog',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
       END CATCH;
     END;

	 GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishProducts')
BEGIN 
	DROP PROCEDURE Znode_GetPublishProducts
END
GO

CREATE PROCEDURE [dbo].[Znode_GetPublishProducts](
	    @PublishCatalogId int= NULL
	  , @PublishCategoryId varchar(2000)= NULL
	  , @UserId int
	  , @NotReturnXML int= NULL
	  , @PimProductId TransferId Readonly
	  , @VersionId int= 0
	  , @IsDebug bit= 0
	  , @TokenId nvarchar(max)= ''
	  , @LocaleId TransferId READONLY 
	  , @PublishStateId INT = 0 
	  )
AS
    
/*
    Summary :	Publish Product on the basis of publish catalog
				Retrive all Product details with attributes and insert into following tables 
				1.	ZnodePublishedXml
				2.	ZnodePublishCategoryProduct
				3.	ZnodePublishProduct
				4.	ZnodePublishProductDetail

                Product details include all the type of products link, grouped, configure and bundel products (include addon) their associated products 
				collect their attributes and values into tables variables to process for publish.  
                
				Finally genrate XML for products with their attributes and inserted into ZnodePublishedXml Znode Admin process xml from sql server to mongodb
				one by one.

    Unit Testing
    
    SELECT * FROM ZnodePimCustomField WHERE CustomCode = 'Test'
    SELECT * FROM ZnodePimCatalogCategory WHERE pimCatalogId = 3 AND PimProductId = 181
    SELECT * FROM ZnodePimCustomFieldLocale WHERE PimCustomFieldId = 1
    SELECT * FROM ZnodePublishProduct WHERE PublishProductid = 213 = 30
    select * from znodepublishcatalog
    SELECT * FROM view_loadmanageProduct WHERE Attributecode = 'ProductNAme' AND AttributeValue LIKE '%Apple%'
    SELECT * FROM ZnodePimCategoryProduct WHERE  PimProductId = 181
    SELECT * FROM ZnodePimCatalogcategory WHERE pimcatalogId = 3 \
	DECLARE @ttr TransferId 
	INSERT INTO @ttr  
	SELECT 25719 
    EXEC Znode_GetPublishProducts  @PublishCatalogId = 3 ,@UserId= 2 ,@NotReturnXML= NULL,@PimProductId = @ttr,@IsDebug= 1 
    EXEC Znode_GetPublishProducts  @PublishCatalogId = null,@UserId= 2 ,@NotReturnXML= NULL,@IsDebug= 1  ,@PimProductId = 103
    EXEC Znode_GetPublishProducts  @PublishCatalogId =1,@UserId= 2 ,@RequiredXML= 1	
    SELECT * FROM 	ZnodePimCatalogCategory  WHERE pimcatalogId = 3  
    SELECT * FROM [dbo].[ZnodePimCategoryHierarchy]  WHERE pimcatalogId = 3 
 */
  
BEGIN
	
	BEGIN TRY
		SET NOCOUNT ON;
			 DECLARE @IsCatalogPublishInProcess BIT = 0
	         DECLARE @TBL_PublishIds TABLE (PublishProductId INT , PimProductId INT , PublishCatalogId INT)
			 DECLARE @PublishStateidForPriview INT = [dbo].[Fn_GetPublishStateIdForPreview]()
			 DECLARE @DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId()
			 
			 --User cananot modify / update UDT, Need to declare additinal table variable for editing in other store procedure.
			 DECLARE @PimProductId_Editable TransferId
			 
			 IF EXISTS (SELECT TOP 1 1  FROM ZnodePublishCatalogLog a 
			   INNER JOIN ZnodePimCatalogCategory b ON (b.PimCatalogId =a.PimCatalogId )
			   WHERE EXISTS ( SELECT TOP 1 1 FROM @PimProductId SP WHERE  b.PimProductId = SP.Id )
			   AND a.IsCatalogPublished IS NULL 
			   ) 
			   BEGIN 
				 SET   @IsCatalogPublishInProcess =1 
			   END 
			     
	         IF (( @PublishCatalogId IS NULL  OR @PublishCatalogId = 0 ) AND @IsCatalogPublishInProcess = 0 )
			 BEGIN 
			   -- Process call single product publish
			   INSERT INTO @TBL_PublishIds 
			   EXEC [dbo].[Znode_InsertPublishProductIds] @PublishCatalogId,@userid,@PimProductId
			
			   INSERT INTO @PimProductId_Editable
			   SELECT distinct PimProductId FROM @TBL_PublishIds
			   -- initiate single product publish 
			   EXEC Znode_GetPublishSingleProduct @PublishCatalogId,@VersionId,@PimProductId_Editable,@UserId,@TokenId , @LocaleId,@PublishStateId
			  	
			 END 
			 ELSE IF  @IsCatalogPublishInProcess = 0 
			 BEGIN 
				-- Process call catalog publish (include category, products with multiple types)
			     EXEC [dbo].[Znode_InsertPublishProductIds] @PublishCatalogId,@userid,@PimProductId
				 EXEC Znode_GetPublishProductbulk @PublishCatalogId=@PublishCatalogId,@VersionId=@VersionId,@PimProductId=@PimProductId,@userid=@userid,@LocaleIds= @LocaleId,@PublishStateId = @PublishStateId
				 UPDATE ZnodePimProduct SET IsProductPublish = 1,PublishStateId =  @PublishStateId 
				 WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePublishProduct ZPP WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId AND ZPP.PublishCatalogId = @PublishCatalogId)
			 END 
			
			 DECLARE @TBL_PublishCatalogId TABLE(PublishCatalogId INT,PublishProductId INT,PimProductId  INT , VersionId INT,LocaleId INT  );

			 INSERT INTO @TBL_PublishCatalogId 
			 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,MAX(PublishCatalogLogId) VersionId, ZPCP.LocaleId  
			 FROM ZnodePublishProduct ZPP 
			 LEFT JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
			 WHERE (EXISTS (SELECT TOP 1 1 FROM @TBL_PublishIds SP WHERE SP.PimProductId = ZPP.PimProductId  ))
			 and exists (select top 1 1 from @LocaleId yu where yu.Id = zpcp.LocaleId)
			 AND IsCatalogPublished = 1 
			 AND PublishStateId = @PublishStateId
			 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId , LocaleId 

		

			IF EXISTS (SELECT TOP 1 1 FROM @PimProductId WHERE ID IS NOT NULL AND ID <> '')

			
			BEGIN
				SELECT PublishedXML ProductXml
				FROM ZnodePublishedXml ZPX
				WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId TBLP WHERE TBLP.VersionId = ZPX.PublishCatalogLogId AND TBLP.PublishProductId = ZPX.PublishedId  )
				AND IsProductXML = 1
				AND @IsCatalogPublishInProcess = 0
				;

						
				SELECT PublishProductId  ,PublishCatalogId ,VersionId,LocaleId 
				FROM @TBL_PublishCatalogId
				WHERE @IsCatalogPublishInProcess = 0
				GROUP BY PublishProductId  ,PublishCatalogId ,VersionId,LocaleId;

				IF 	 @IsCatalogPublishInProcess = 1 
				BEGIN 
				SELECT 1 Id , 'Single product publish request cannot be processed as catalog or category publish is in progress. Please try after publish is complete.' MessageDetails,  CAST(0 AS BIT ) Status
				END 
				ELSE 
				BEGIN 
				SELECT 1 Id , ' Publish Successfull' MessageDetails, CAST(1 AS BIT ) Status
				END
				
		
				-- dataset for SEO implementation
				SELECT  SKU 
				FROM ZnodePublishProductDetail PPD 
				INNER JOIN @TBL_PublishCatalogId TPC ON (TPC.PublishProductId = PPD.PublishProductId )
				WHERE EXISTS (SELECT TOP 1 1 FROM @PimProductId tb WHERE tb.ID = TPC.PimProductId)
				AND PPD.localeid = @DefaultLocaleId
				GROUP BY SKU;
				 

			END
			
			;with Cte_PublishCatalog AS 
			(
			 SELECT max(PublishCatalogLogId) PublishCatalogLogId,a.LocaleId,PublishCatalogId 
			 FROM ZnodePublishCatalogLog  a
			 WHERE a.PublishCatalogId = @PublishCatalogId
			 GROUP BY LocaleId,PublishCatalogId			
			)

			

			UPDATE ZnodePublishCatalogLog 
			SET IsProductPublished = 1 
			,PublishProductId = (SELECT DISTINCT COUNT(PublishProductId) FROM ZnodePublishProduct ZPP WHERE ZPP.PublishCatalogId = ZnodePublishCatalogLog.PublishCatalogId  ) 
			WHERE EXISTS (SELECT TOP 1 1 FROM Cte_PublishCatalog  TY  WHERE  TY.PublishCatalogLogId =ZnodePublishCatalogLog.PublishCatalogLogId )  


			DECLARE @PimAttributeIsPublish VARCHAR(50) =  [dbo].[Fn_GetAttributeIsPublish]() 

			

			UPDATE ZnodePimProduct 
			SET PublishStateId =  @PublishStateId
			WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId ZPP WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId)

			
	END TRY
	BEGIN CATCH
		SELECT ERROR_MESSAGE(), ERROR_PROCEDURE();
		UPDATE ZnodePublishCatalogLog 
	    SET IsCatalogPublished = 0 
		WHERE PublishCatalogLogId = @VersionId
		DECLARE @Status bit;
		SET @Status = 0;
		DECLARE @Error_procedure varchar(1000)= ERROR_PROCEDURE(), @ErrorMessage nvarchar(max)= ERROR_MESSAGE(), @ErrorLine varchar(100)= ERROR_LINE(), @ErrorCall nvarchar(max)= 'EXEC Znode_GetPublishProducts @PublishCatalogId = '+CAST(@PublishCatalogId AS varchar(max))+',@PublishCategoryId='+@PublishCategoryId+',@UserId='+CAST(@UserId AS Varchar(50))+',@NotReturnXML='+CAST(@NotReturnXML AS Varchar(50))+',@UserId = '+CAST(@UserId AS Varchar(50))+',

		@VersionId='+CAST(@VersionId AS Varchar(50))+',@TokenId='+CAST(@TokenId AS varchar(max))+',@Status='+CAST(@Status AS varchar(10));
		SELECT 0 AS ID, CAST(0 AS bit) AS Status;
		ROLLBACK TRAN GetPublishProducts;
		EXEC Znode_InsertProcedureErrorLog @ProcedureName = 'Znode_GetPublishProducts', @ErrorInProcedure = @Error_procedure, @ErrorMessage = @ErrorMessage, @ErrorLine = @ErrorLine, @ErrorCall = @ErrorCall;
	END CATCH;
END;

GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishCategoryProducts')
BEGIN 
	DROP PROCEDURE Znode_GetPublishCategoryProducts
END
GO


CREATE PROCEDURE [dbo].[Znode_GetPublishCategoryProducts]
( @pimCatalogId int = 0,@pimCategoryHierarchyId int = 0,@userId int,@versionId int= 0,@status int = 0 OUT,@isDebug bit = 0 ,@LocaleId TransferId READONLY , @PublishStateId INT = 0   )  AS  /*
    Summary :	Publish Product on the basis of publish catalog and category
				Calling sp [Znode_InsertPublishProductIds] to retrive category and their child category with associated products 
				 
				1.	ZnodePublishedXml
				2.	ZnodePublishCategoryProduct
				3.	ZnodePublishProduct
				4.	ZnodePublishProductDetail

                Product details include all the type of products link, grouped, configure and bundel products (include addon) their associated products 
				collect their attributes and values into tables variables to process for publish.  
                
				Finally genrate XML for products with their attributes and inserted into ZnodePublishedXml Znode Admin process xml from sql server to mongodb
				one by one.
	
	Unit Testing
    ------------------------------------------------------------------------------------------------
	Declare @Status int 
	DECLARE @r transferid 
	INSERT INTO @r
	VALUES (1)
	,(24)
	EXEC [Znode_GetPublishCategoryProducts]  @PimCatalogId = 9
	, @PimCategoryHierarchyId = 48 
	, @UserId = 2 
	, @VersionId = 0
	, @IsDebug = 1
	, @Status  = @Status  out
	,@localeId = @r
	,@PublishStateId = 4
	Select @Status  

 */
	BEGIN   
		BEGIN TRY
			SET NOCOUNT ON;
			 DECLARE @IsCatalogPublishInProcess INT  = 0
			DECLARE @tBL_PublishIds table (PublishProductId int,PimProductId int,PublishCatalogId int)
			DECLARE @publishCatalogId int= isnull((SELECT TOP 1 PublishCatalogId FROM ZnodePublishCatalog ZPC WHERE ZPC.PimCatalogId = @pimCatalogId),0),@publishCataloglogId int= 0;
			DECLARE @tBL_CategoryCategoryHierarchyIds table (CategoryId int,ParentCategoryId int ,PimCategoryHierarchyId INT ,ParentPimCategoryHierarchyId INT  )
			DECLARE @pimProductId TransferId
			DECLARE @insertPublishProductIds table (PublishProductId int,PimProductId int,PublishCatalogId int )
		
				SELECT @versionId = max(PublishCataloglogId)
			FROM ZnodePublishCatalogLog 
			WHERE PublishCatalogId =@publishCatalogId

				 IF EXISTS (SELECT TOP 1 1  FROM ZnodePublishCatalogLog a 
			   INNER JOIN ZnodePimCatalogCategory b ON (b.PimCatalogId =a.PimCatalogId )
			   WHERE b.PimCategoryHierarchyId = @PimCategoryHierarchyId
			   AND a.IsCatalogPublished IS NULL 
			   AND a.IsCategoryPublished IS NULL
			   ) 
			   BEGIN 
				 SET   @IsCatalogPublishInProcess =1 
			   END 


			INSERT INTO @tBL_CategoryCategoryHierarchyIds(CategoryId,ParentCategoryId,PimCategoryHierarchyId,ParentPimCategoryHierarchyId ) 
			SELECT DISTINCT PimCategoryId, Null,PimCategoryHierarchyId,NULL  FROM ( SELECT PimCategoryId,ParentPimCategoryId,PimCategoryHierarchyId,ParentPimCategoryHierarchyId
			FROM DBO.[Fn_GetRecurciveCategoryIds_PimCategoryHierarchy](@pimCategoryHierarchyId,@pimCatalogId) 
			UNION SELECT PimCategoryId, Null,PimCategoryHierarchyId,NULL FROM ZnodePimCategoryHierarchy WHERE PimCategoryHierarchyId = @pimCategoryHierarchyId 
			UNION SELECT PimCategoryId, Null,PimCategoryHierarchyId,NULL  FROM dbo.[Fn_GetRecurciveCategoryIds_PimCategoryHierarchyIdnew] (@pimCategoryHierarchyId,@pimCatalogId) ) Category

			

			
			IF NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimCatalogCategory ty 
			WHERE EXISTS (SELECT TOP 1 1 FROM ( SELECT PimCategoryId,PimCategoryHierarchyId,ParentPimCategoryHierarchyId 
			FROM dbo.[Fn_GetRecurciveCategoryIds_ForChild](@pimCategoryHierarchyId,@pimCatalogId) UNION ALL SELECT NULL ,@pimCategoryHierarchyId,NULL  ) TN WHERE TN.PimCategoryHierarchyId = TY.PimCategoryHierarchyId  ) AND ty.PimProductId IS NOT NULL )
			BEGIN 
			  SET @IsCatalogPublishInProcess = 2 

			END 

			IF (isnull(@publishCatalogId,0) = 0 ) 
				BEGIN 
					SET @status = 1
					-- Catalog Not Published 
					RETURN 0;
				END
			
			IF @IsCatalogPublishInProcess =  0 
			BEGIN 
			

			-- Any other catalog was in process dont intitiate category publish	
			If Exists ( SELECT TOP 1 1 FROM ZnodePublishcatalogLog  WHERE  IsCatalogPublished  IS NULL AND IsCategoryPublished IS NULL )
			Begin
					SET @status = 2
					RETURN 0;
			End

			
				EXEC [Znode_GetPublishCategoryGroup] @publishCatalogId = @PublishCatalogId,@VersionId = 0,@userId =2,@isDebug = 1,@PimCategoryHierarchyId = @PimCategoryHierarchyId,@localeId =@localeID,@PublishStateId=@PublishStateId
			
			BEGIN 
				INSERT INTO @insertPublishProductIds EXEC [Dbo].[Znode_InsertPublishProductIds] @publishCatalogId = @publishCatalogId,@userid = @userid,@pimProductId = @pimProductId,@pimCategoryHierarchyId = @pimCategoryHierarchyId
				INSERT INTO @pimProductId SELECT PimProductId FROM @insertPublishProductIds

				EXEC [Dbo].[Znode_GetPublishProductbulk] @publishCatalogId = @publishCatalogId,@versionId = @versionId,@pimProductId = @pimProductId,@userid = @userid,@pimCategoryHierarchyId = @pimCategoryHierarchyId,@pimCatalogId = @pimCatalogId,@localeIds = @localeId ,@publishstateId =@publishStateId 
				
				UPDATE ZnodePimProduct 		SET IsProductPublish = 1 ,PublishStateId = @PublishStateId		
				WHERE EXISTS (SELECT TOP 1 1 
					FROM ZnodePublishProduct ZPP
					WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId 
						AND ZPP.PublishCatalogId = @publishCatalogId
					)
			END
			DECLARE @tBL_PublishCatalogId table(PublishCatalogId int,PublishProductId int,PublishCategoryId int,PimProductId int,VersionId int,LocaleId INT  );
			
			INSERT INTO @tBL_PublishCatalogId (PublishCatalogId,PublishProductId,PublishCategoryId,PimProductId,VersionId ,Localeid)  
			SELECT DISTINCT ZPC.PublishCatalogId,ZPX.PublishProductId,ZPX.PublishCategoryId,ZPP.PimProductId,Max(TH.PublishCatalogLogId),TH.Localeid 
			FROM ZnodePublishCategory ZPC 
			INNER JOIN ZnodePublishCatalogLog TH ON (TH.PublishCatalogId = ZPC.PublishCatalogId)
			INNER JOIN @tBL_CategoryCategoryHierarchyIds CTC ON (ZPC.PimCategoryHierarchyId = CTC .PimCategoryHierarchyId )
			INNER JOIN ZnodePublishCategoryProduct ZPX  ON ZPC.PublishCategoryId = ZPX.PublishCategoryId AND ZPX.PublishCatalogId = ZPC.PublishCatalogId 
			INNER JOIN ZnodePublishProduct ZPP ON ZPP.PublishCatalogId = ZPC.PublishCatalogId AND ZPX.PublishProductId = ZPP.PublishProductId 
			WHERE ZPC.PublishCatalogId = @PublishCatalogId 
			AND  TH.PublishStateId = @PublishStateId
			AND EXISTS (SELECT TOP 1 1 FROM @LocaleId WHERE id = TH.LocaleId)
			GROUP BY ZPC.PublishCatalogId,ZPX.PublishProductId ,ZPX.PublishCategoryId,ZPP.PimProductId,TH.Localeid 
		
			INSERT INTO @tBL_PublishCatalogId (PublishCatalogId,PublishProductId,PublishCategoryId,PimProductId,VersionId,Localeid ) 
			SELECT IPP.PublishCatalogId,IPP.PublishProductId,0,IPP.PimProductId,max(PublishCatalogLogId) VersionId ,h.Localeid
			FROM @insertPublishProductIds IPP 
			LEFT JOIN ZnodePublishCatalogLog h ON (h.PublishCatalogId = IPP.PublishCatalogId )
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM @tBL_PublishCatalogId PCI WHERE IPP.PublishProductId = PCI.PublishProductId)
			AND EXISTS (SELECT TOP 1 1 FROM @LocaleId WHERE id = h.LocaleId)
			AND h.PublishStateId = @PublishStateId
			GROUP BY IPP.PublishCatalogId,IPP.PublishProductId,IPP.PimProductId,Localeid
			
			UPDATE ZnodePublishCatalogLog 
			SET IsProductPublished = 1,PublishProductId = (SELECT count(PublishProductId) FROM ZnodePublishProduct ZPP WHERE ZPP.PublishCatalogId = ZnodePublishCatalogLog.PublishCatalogId ) 
			WHERE PublishCatalogLogId IN (SELECT VersionId FROM @tBL_PublishCatalogId)

			UPDATE ZnodePimProduct 
			SET IsProductPublish = 1 ,PublishStateId = @PublishStateId	
			WHERE EXISTS (SELECT TOP 1 1 
				FROM @tBL_PublishCatalogId ZPP
				WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId
				)
		
				SELECT PublishCatalogId
					,PublishProductId
					,PublishCategoryId
					,VersionId,LocaleId
			FROM @tBL_PublishCatalogId
			END 
			 IF @IsCatalogPublishInProcess = 1 
				BEGIN 
				SELECT 1 Id , 'Single category publish request cannot be processed as catalog or category publish is in progress. Please try after publish is complete.' MessageDetails,  CAST(0 AS BIT ) Status
				END 
				ELSE IF @IsCatalogPublishInProcess = 2 
				BEGIN
				
				SELECT 1 Id , 'Please associate products to the category or to at least one child category to publish the category.' MessageDetails,  CAST(0 AS BIT ) Status
				END 
				ELSE 
				BEGIN 
				SELECT 1 Id , ' Publish Successfull' MessageDetails, CAST(1 AS BIT ) Status
				END 
		END TRY
		BEGIN CATCH
			SELECT error_message()
				,error_procedure();
			UPDATE ZnodePublishCatalogLog 
			SET IsCatalogPublished = 0 
			WHERE PublishCatalogLogId = @versionId
			SET @status = 0;
			DECLARE @error_procedure varchar(1000)= error_procedure(),@errorMessage nvarchar(max)= error_message(),@errorLine varchar(100)= error_line(),@errorCall nvarchar(max)= 'EXEC Znode_GetPublishProducts @PimCatalogId = '+cast(@pimCatalogId AS varchar(max))+',@@PimCategoryHierarchyId='+@pimCategoryHierarchyId+',@UserId='+cast(@userId AS varchar(50))+',@UserId = '+cast(@userId AS varchar(50))+',@VersionId='+cast(@versionId AS varchar(50))+',@Status='+cast(@status AS varchar(10));
			SELECT 0 AS ID
				,cast(0 AS bit) AS Status;
			ROLLBACK TRAN GetPublishProducts;
			EXEC Znode_InsertProcedureErrorLog @procedureName = 'Znode_GetPublishCategoryProducts',@errorInProcedure = @error_procedure,@errorMessage = @errorMessage,@errorLine = @errorLine,@errorCall = @errorCall;
		END CATCH;
		END;

		GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishCategoryGroup')
BEGIN 
	DROP PROCEDURE Znode_GetPublishCategoryGroup
END
GO


CREATE  PROCEDURE [dbo].[Znode_GetPublishCategoryGroup]
(   
	@PublishCatalogId INT,
    @UserId           INT,
    @VersionId        INT,
    @Status           BIT = 0 OUT,
	@PimCategoryHierarchyId int = 0, 
    @IsDebug          BIT = 0,
	@LocaleId TransferId READONLY,
	@PublishStateId INT = 0 
)
AS 
/*

       Summary:Publish category with their respective products and details 
	            The result is fetched in xml form   
       Unit Testing   
       Begin transaction 
       SELECT * FROM ZnodePIMAttribute 
	   SELECT * FROM ZnodePublishCatalog 
	   SELECT * FROM ZnodePublishCategory WHERE publishCAtegoryID = 167 


       EXEC [Znode_GetPublishCategory] @PublishCatalogId = 5,@VersionId = 0 ,@UserId =2 ,@IsDebug = 1 
       EXEC [Znode_GetPublishCategory] @PublishCatalogId = 5,@VersionId = 0 ,@UserId =2 ,@IsDebug = 1 ,@PimCategoryHierarchyId = ? 


       Rollback Transaction 
	*/
     BEGIN
         BEGIN TRAN GetPublishCategory;
         BEGIN TRY
             SET NOCOUNT ON;
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @LocaleIdIn INT= 0, @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId(), @Counter INT= 1, @MaxId INT= 0, @CategoryIdCount INT;
             DECLARE @IsActive BIT= [dbo].[Fn_GetIsActiveTrue]();
             DECLARE @AttributeIds VARCHAR(MAX)= '', @PimCategoryIds VARCHAR(MAX)= '', @DeletedPublishCategoryIds VARCHAR(MAX)= '', @DeletedPublishProductIds VARCHAR(MAX);
             --get the pim catalog id 
			 DECLARE @PimCatalogId INT=(SELECT PimCatalogId FROM ZnodePublishcatalog WHERE PublishCatalogId = @PublishCatalogId); 

             DECLARE @TBL_AttributeIds TABLE
             (PimAttributeId       INT,
              ParentPimAttributeId INT,
              AttributeTypeId      INT,
              AttributeCode        VARCHAR(600),
              IsRequired           BIT,
              IsLocalizable        BIT,
              IsFilterable         BIT,
              IsSystemDefined      BIT,
              IsConfigurable       BIT,
              IsPersonalizable     BIT,
              DisplayOrder         INT,
              HelpDescription      VARCHAR(MAX),
              IsCategory           BIT,
              IsHidden             BIT,
              CreatedDate          DATETIME,
              ModifiedDate         DATETIME,
              AttributeName        NVARCHAR(MAX),
              AttributeTypeName    VARCHAR(300)
             );
             DECLARE @TBL_AttributeDefault TABLE
             (PimAttributeId            INT,
              AttributeDefaultValueCode VARCHAR(100),
              IsEditable                BIT,
              AttributeDefaultValue     NVARCHAR(MAX)
			  ,DisplayOrder   INT
             );
             DECLARE @TBL_AttributeValue TABLE
             (PimCategoryAttributeValueId INT,
              PimCategoryId               INT,
              CategoryValue               NVARCHAR(MAX),
              AttributeCode               VARCHAR(300),
              PimAttributeId              INT
             );
             DECLARE @TBL_LocaleIds TABLE
             (RowId     INT IDENTITY(1, 1),
              LocaleId  INT,
              IsDefault BIT
             );
             DECLARE @TBL_PimCategoryIds TABLE
             (PimCategoryId       INT,
              PimParentCategoryId INT,
              DisplayOrder        INT,
              ActivationDate      DATETIME,
              ExpirationDate      DATETIME,
              CategoryName        NVARCHAR(MAX),
              ProfileId           VARCHAR(MAX),
              IsActive            BIT,PimCategoryHierarchyId INT,ParentPimCategoryHierarchyId INT   ,
			  CategoryCode  NVARCHAR(MAX)    );


             DECLARE @TBL_PublishPimCategoryIds TABLE
             (PublishCategoryId       INT,
              PimCategoryId           INT,
              PublishProductId        varchar(max),
              PublishParentCategoryId INT ,
			  PimCategoryHierarchyId INT ,parentPimCategoryHierarchyId INT
             );

			  DECLARE @TBL_PublishPimCategoryIdsLatest TABLE
             (PublishCategoryId       INT,
              PimCategoryId           INT,
              PublishProductId        varchar(max),
              PublishParentCategoryId INT ,
			  PimCategoryHierarchyId INT ,parentPimCategoryHierarchyId INT,PublishCatalogLogId INT,LocaleId INT  
             );

             DECLARE @TBL_DeletedPublishCategoryIds TABLE
             (PublishCategoryId INT,
              PublishProductId  INT
             );
             DECLARE @TBL_CategoryXml TABLE
             (PublishCategoryId INT,
              CategoryXml       XML,
              LocaleId          INT
			  ,PublishCatalogLogId INT
             );
             INSERT INTO @TBL_LocaleIds
             (LocaleId,
              IsDefault
             )
			  -- here collect all locale ids
             SELECT LocaleId,IsDefault FROM ZnodeLocale mt WHERE IsActive = @IsActive
			  AND (EXISTS (SELECT TOP 1 1  FROM @LocaleId RT WHERE RT.Id = MT.LocaleId )
			 OR NOT EXISTS (SELECT TOP 1 1 FROM @LocaleId ));


			IF @PimCategoryHierarchyId > 0 
			Begin 
				 DECLARE @TBL_CategoryCategoryHierarchyIds TABLE (CategoryId int,ParentCategoryId int,PimCategoryHierarchyId INT ,ParentPimCategoryHierarchyId INT  ) 
				 INSERT INTO @TBL_CategoryCategoryHierarchyIds(CategoryId , ParentCategoryId, PimCategoryHierarchyId , ParentPimCategoryHierarchyId)
				 Select Distinct PimCategoryId , Null,PimCategoryHierarchyId,NULL FROM (
				 SELECT PimCategoryId,ParentPimCategoryId,PimCategoryHierarchyId,ParentPimCategoryHierarchyId from DBO.[Fn_GetRecurciveCategoryIds_PimCategoryHierarchy](@PimCategoryHierarchyId,@PimCatalogId)
				 Union 
				 Select PimCategoryId , null,PimCategoryHierarchyId,NULL  from ZnodePimCategoryHierarchy where PimCategoryHierarchyId = @PimCategoryHierarchyId 
				 Union 
				 Select PimCategoryId , null,PimCategoryHierarchyId,NULL  from [Fn_GetRecurciveCategoryIds_PimCategoryHierarchyIdNew] (@PimCategoryHierarchyId,@PimCatalogId) ) Category  

			
				 INSERT INTO @TBL_PimCategoryIds(PimCategoryId,PimParentCategoryId,DisplayOrder,ActivationDate,ExpirationDate,IsActive,PimCategoryHierarchyId,ParentPimCategoryHierarchyId)
				
				 SELECT DISTINCT ZPCH.PimCategoryId,ZPCH2.PimCategoryId  PimParentCategoryId,ZPCH.DisplayOrder,ZPCH.ActivationDate,ZPCH.ExpirationDate,ZPCH.IsActive ,ZPCH.PimCategoryHierarchyId,ZPCH.ParentPimCategoryHierarchyId
				 FROM ZnodePimCategoryHierarchy AS ZPCH 
				 LEFT JOIN ZnodePimCategoryHierarchy AS ZPCH2 ON (ZPCH2.PimCategoryHierarchyId = ZPCH. ParentPimCategoryHierarchyId ) 
				 WHERE ZPCH.PimCatalogId = @PimCatalogId  AND ZPCH.PimCategoryHierarchyId in 
				 (SELECT PimCategoryHierarchyId from @TBL_CategoryCategoryHierarchyIds where CategoryId is not null )  ; 
				
				
	
		  
				SELECT @VersionId  = PublishCatalogLogId from ZnodePublishCatalogLog where PublishCatalogId = @PublishCatalogId  and IsCatalogPublished =1 

			

			 	 INSERT INTO @TBL_DeletedPublishCategoryIds (PublishCategoryId,PublishProductId)
				 SELECT ZPC.PublishCategoryId,ZPCP.PublishProductId 
				 FROM ZnodePublishCategory AS ZPC 
				 LEFT JOIN  ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishCategoryId = ZPC.PublishCategoryId AND ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND  ZPCP.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId  )                                                  
				 LEFT JOIN ZnodePublishProduct ZPP ON (zpp.PublishProductId = zpcp.PublishProductId AND zpp.PublishCatalogId = zpcp.PublishCatalogId)
				 LEFT JOIN ZnodePublishCatalog ZPCC ON (ZPCC.PublishCatalogId = ZPCP.PublishCatalogId)
				 WHERE ZPC.PublishCatalogId = @PublishCataLogId 
				 --AND NOT EXISTS
				 --(SELECT TOP 1 1 FROM ZnodePimCatalogCategory AS TBPC WHERE TBPC.PimCategoryId = ZPC.PimCategoryId 
				 --AND TBPC.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId AND TBPC.PimProductId = ZPP.PimProductId 
				 --AND TBPC.PimCatalogId = ZPCC.PimCatalogId  AND  ZPCP.PimCategoryHierarchyId=  @PimCategoryHierarchyId   ) 
				 AND ZPC.ParentPimCategoryHierarchyId  in (select PimCategoryHierarchyId FROM @TBL_PimCategoryIds)
				 AND ZPC.PimCategoryHierarchyId NOT IN (select PimCategoryHierarchyId FROM @TBL_PimCategoryIds) ;
				
			End
			ELSE 
			Begin
				INSERT INTO @TBL_PimCategoryIds(PimCategoryId,PimParentCategoryId,DisplayOrder,ActivationDate,ExpirationDate,IsActive,PimCategoryHierarchyId,ParentPimCategoryHierarchyId)
				SELECT DISTINCT ZPCH.PimCategoryId,ZPCH2.PimCategoryId  PimParentCategoryId,ZPCH.DisplayOrder,ZPCH.ActivationDate,ZPCH.ExpirationDate,ZPCH.IsActive ,ZPCH.PimCategoryHierarchyId,ZPCH.ParentPimCategoryHierarchyId
				FROM ZnodePimCategoryHierarchy AS ZPCH 
				LEFT JOIN ZnodePimCategoryHierarchy AS ZPCH2 ON (ZPCH2.PimCategoryHierarchyId = ZPCH. ParentPimCategoryHierarchyId ) 
				WHERE ZPCH.PimCatalogId = @PimCatalogId; 

			 -- AND IsActive = @IsActive ; -- As discussed with @anup active flag maintain on demo site 23/12/2016
			
			 -- here is find the deleted publish category id on basis of publish catalog

             INSERT INTO @TBL_DeletedPublishCategoryIds(PublishCategoryId,PublishProductId)
			 SELECT ZPC.PublishCategoryId,ZPCP.PublishProductId 
				 FROM ZnodePublishCategoryProduct ZPCP
				 INNER JOIN ZnodePublishCategory AS ZPC ON(ZPCP.PublishCategoryId = ZPC.PublishCategoryId AND ZPCP.PublishCatalogId = ZPC.PublishCatalogId)                                                  
				 INNER JOIN ZnodePublishProduct ZPP ON(zpp.PublishProductId = zpcp.PublishProductId AND zpp.PublishCatalogId = zpcp.PublishCatalogId)
				 INNER JOIN ZnodePublishCatalog ZPCC ON(ZPCC.PublishCatalogId = ZPCP.PublishCatalogId)
				 WHERE ZPC.PublishCatalogId = @PublishCataLogId 
				 AND NOT EXISTS
				 (SELECT TOP 1 1 FROM ZnodePimCatalogCategory AS TBPC WHERE TBPC.PimCategoryId = ZPC.PimCategoryId 
				 AND TBPC.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId AND TBPC.PimProductId = ZPP.PimProductId 
				 AND TBPC.PimCatalogId = ZPCC.PimCatalogId);

			End
			
          

			 -- here is find the deleted publish category id on basis of publish catalog
             SET @DeletedPublishCategoryIds = ISNULL(SUBSTRING((SELECT ','+CAST(PublishCategoryId AS VARCHAR(50)) FROM @TBL_DeletedPublishCategoryIds AS ZPC
                                              GROUP BY ZPC.PublishCategoryId FOR XML PATH('') ), 2, 4000), '');
			 -- here is find the deleted publish category id on basis of publish catalog
             SET @DeletedPublishProductIds = '';
			 -- Delete the publish category id 
	         EXEC Znode_DeletePublishCatalog @PublishCatalogIds = @PublishCatalogId,@PublishCategoryIds = @DeletedPublishCategoryIds,@PublishProductIds = @DeletedPublishProductIds; 
			
			

             MERGE INTO ZnodePublishCategory TARGET USING  @TBL_PimCategoryIds SOURCE ON
			 (
				 TARGET.PimCategoryId = SOURCE.PimCategoryId 
				 AND TARGET.PublishCatalogId = @PublishCataLogId 
				 AND TARGET.PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId
			 )
			 WHEN MATCHED THEN UPDATE SET TARGET.PimParentCategoryId = SOURCE.PimParentCategoryId,TARGET.CreatedBy = @UserId,TARGET.CreatedDate = @GetDate,
             TARGET.ModifiedBy = @UserId,TARGET.ModifiedDate = @GetDate,PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId,ParentPimCategoryHierarchyId=SOURCE.ParentPimCategoryHierarchyId
             WHEN NOT MATCHED THEN INSERT(PimCategoryId,PublishCatalogId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PimCategoryHierarchyId,ParentPimCategoryHierarchyId) 
			 VALUES(SOURCE.PimCategoryId,@PublishCatalogId,@UserId,@GetDate,@UserId,@GetDate,SOURCE.PimCategoryHierarchyId
			 ,SOURCE.ParentPimCategoryHierarchyId)
             OUTPUT INSERTED.PublishCategoryId,INSERTED.PimCategoryId,INSERTED.PimCategoryHierarchyId,
			 INSERTED.parentPimCategoryHierarchyId 
			 INTO @TBL_PublishPimCategoryIds(PublishCategoryId,PimCategoryId,PimCategoryHierarchyId,parentPimCategoryHierarchyId);
			       
				   
		     -- here update the publish parent category id
             UPDATE ZPC SET [PimParentCategoryId] =TBPC.[PimCategoryId] 
				FROM ZnodePublishCategory ZPC
				INNER JOIN ZnodePublishCategory TBPC ON(ZPC.parentPimCategoryHierarchyId = TBPC.PimCategoryHierarchyId  ) 
				WHERE ZPC.PublishCatalogId =@PublishCatalogId
				AND ZPC.ParentPimCategoryHierarchyId IS NOT NULL
				AND TBPC.PublishCatalogId =@PublishCatalogId
				AND ZPC.PimCategoryId in (select PimCategoryId FROM @TBL_PimCategoryIds);
				;
			 UPDATE a
				SET  a.PublishParentCategoryId = b.PublishCategoryId
				FROM ZnodePublishCategory a 
				INNER JOIN ZnodePublishCategory b   ON (a.parentpimCategoryHierarchyId = b.pimCategoryHierarchyId)
				WHERE a.parentpimCategoryHierarchyId IS NOT NULL 
				AND a.PublishCatalogId =@PublishCatalogId
				AND b.PublishCatalogId =@PublishCatalogId
				AND a.PimCategoryId in (select PimCategoryId FROM @TBL_PimCategoryIds);

			 --UPDATE ZPC SET [PimParentCategoryId] = TBPC.[PimCategoryId] 
			 --FROM ZnodePublishCategory ZPC
    --         INNER JOIN ZnodePublishCategory TBPC ON(ZPC.parentPimCategoryHierarchyId = TBPC.PimCategoryHierarchyId  ) 
			 --WHERE ZPC.PublishCatalogId =@PublishCatalogId
			 --AND ZPC.ParentPimCategoryHierarchyId IS NOT NULL ;

			 -- product are published here 
            --  EXEC Znode_GetPublishProducts @PublishCatalogId,0,@UserId,1,0,0;

             SET @MaxId =(SELECT MAX(RowId)FROM @TBL_LocaleIds);
			 DECLARE @TransferID TRANSFERID 
			 INSERT INTO @TransferID 
			 SELECT DISTINCT  PimCategoryId
			 FROM @TBL_PublishPimCategoryIds 

          
			 INSERT INTO @TBL_PublishPimCategoryIdsLatest 
			 SELECT a.*,Max(b.PublishCatalogLogId) PublishCatalogLogId,b.LocaleId
			 FROM @TBL_PublishPimCategoryIds a
			 LEFT JOIN ZnodePublishCatalogLog b ON (b.PublishCatalogId = @PublishCatalogId)
			 WHERE EXISTS (SELECT TOP 1 1  FROM @LocaleId YTU WHERE YTU.Id = b.LocaleId )
			 AND b.PublishStateId = @PublishStateId
			 GROUP BY a.PublishCategoryId  ,PimCategoryId ,a.PublishProductId ,PublishParentCategoryId ,
			  PimCategoryHierarchyId  ,parentPimCategoryHierarchyId,b.LocaleId

			 
			 
             WHILE @Counter <= @MaxId -- Loop on Locale id 
                 BEGIN
                     SET @LocaleIdIn =(SELECT LocaleId FROM @TBL_LocaleIds WHERE RowId = @Counter);
                   
				     SET @AttributeIds = SUBSTRING((SELECT ','+CAST(ZPCAV.PimAttributeId AS VARCHAR(50)) FROM ZnodePimCategoryAttributeValue ZPCAV 
										 WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimCategoryIds TBPC WHERE TBPC.PimCategoryId = ZPCAV.PimCategoryId) GROUP BY ZPCAV.PimAttributeId FOR XML PATH('')), 2, 4000);
                
				     SET @CategoryIdCount =(SELECT COUNT(1) FROM @TBL_PimCategoryIds);

                     INSERT INTO @TBL_AttributeIds (PimAttributeId,ParentPimAttributeId,AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable,IsSystemDefined,
					 IsConfigurable,IsPersonalizable,DisplayOrder,HelpDescription,IsCategory,IsHidden,CreatedDate,ModifiedDate,AttributeName,AttributeTypeName)
                     EXEC [Znode_GetPimAttributesDetails] @AttributeIds,@LocaleIdIn;

                     INSERT INTO @TBL_AttributeDefault (PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder)
                     EXEC [dbo].[Znode_GetAttributeDefaultValueLocale] @AttributeIds,@LocaleIdIn;

                     INSERT INTO @TBL_AttributeValue (PimCategoryAttributeValueId,PimCategoryId,CategoryValue,AttributeCode,PimAttributeId)
                     EXEC [dbo].[Znode_GetCategoryAttributeValueId] @TransferID,@AttributeIds,@LocaleIdIn;

				

                     ;WITH Cte_UpdateDefaultAttributeValue
                     AS (
					  SELECT TBAV.PimCategoryId,TBAV.PimAttributeId,SUBSTRING((SELECT ','+AttributeDefaultValue FROM @TBL_AttributeDefault TBD WHERE TBAV.PimAttributeId = TBD.PimAttributeId
						AND EXISTS(SELECT TOP 1 1 FROM Split(TBAV.CategoryValue, ',') SP WHERE SP.Item = TBD.AttributeDefaultValueCode)FOR XML PATH('')), 2, 4000) DefaultCategoryAttributeValue
						FROM @TBL_AttributeValue TBAV WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_AttributeDefault TBAD WHERE TBAD.PimAttributeId = TBAV.PimAttributeId))
					 
					 -- update the default value with locale 
                     UPDATE TBAV SET CategoryValue = CTUDFAV.DefaultCategoryAttributeValue FROM @TBL_AttributeValue TBAV 
					 INNER JOIN Cte_UpdateDefaultAttributeValue CTUDFAV ON(CTUDFAV.PimCategoryId = TBAV.PimCategoryId AND CTUDFAV.PimAttributeId = TBAV.PimAttributeId)
					 WHERE CategoryValue IS NULL ;
					 
					 -- here is update the media path  
                     WITH Cte_productMedia
                     AS (SELECT TBA.PimCategoryId,TBA.PimAttributeId,[dbo].[FN_GetThumbnailMediaPathPublish](SUBSTRING((SELECT ','+zm.PATH FROM ZnodeMedia ZM WHERE EXISTS
					    (SELECT TOP 1 1 FROM dbo.split(TBA.CategoryValue, ',') SP WHERE SP.Item = CAST(Zm.MediaId AS VARCHAR(50)))FOR XML PATH('')), 2, 4000)) CategoryValue
						FROM @TBL_AttributeValue TBA WHERE EXISTS(SELECT TOP 1 1 FROM [dbo].[Fn_GetProductMediaAttributeId]() FNMA WHERE FNMA.PImAttributeId = TBA.PimATtributeId))
                         
					 UPDATE TBAV SET CategoryValue = CTCM.CategoryValue 
					 FROM @TBL_AttributeValue TBAV 
					 INNER JOIN Cte_productMedia CTCM ON(CTCM.PimCategoryId = TBAV.PimCategoryId
					 AND CTCM.PimAttributeId = TBAV.PimAttributeId);

                     WITH Cte_PublishProductIds
					 AS (SELECT TBPC.PublishcategoryId,SUBSTRING((SELECT ','+CAST(PublishProductId AS VARCHAR(50))
					  FROM ZnodePublishCategoryProduct ZPCP 
					  WHERE ZPCP.PublishCategoryId = TBPC.publishCategoryId
					  AND ZPCP.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId
                      AND ZPCP.PublishCatalogId = @PublishCatalogId FOR XML PATH('')), 2, 8000) PublishProductId ,PimCategoryHierarchyId
					  FROM @TBL_PublishPimCategoryIds TBPC)
                          
					 UPDATE TBPPC SET PublishProductId = CTPP.PublishProductId FROM @TBL_PublishPimCategoryIds TBPPC INNER JOIN Cte_PublishProductIds CTPP ON(TBPPC.PublishCategoryId = CTPP.PublishCategoryId 
					 AND TBPPC.PimCategoryHierarchyId = CTPP.PimCategoryHierarchyId);

					 WITH Cte_CategoryProfile
						AS (SELECT PimCategoryId,ZPCC.PimCategoryHierarchyId,SUBSTRING(( SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
						FROM ZnodeProfileCatalog ZPC 
						INNER JOIN ZnodeProfileCategoryHierarchy ZPRCC ON(ZPRCC.PimCategoryHierarchyId = ZPCC.PimCategoryHierarchyId
						AND ZPRCC.ProfileCatalogId = ZPC.ProfileCatalogId) 
						WHERE ZPC.PimCatalogId = ZPCC.PimCatalogId FOR XML PATH('')), 2, 4000) ProfileIds
                      
						FROM ZnodePimCategoryHierarchy ZPCC 
						WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimCategoryIds TBPC 
						WHERE TBPC.PimCategoryId = ZPCC.PimCategoryId AND ZPCC.PimCatalogId = @PimCatalogId 
						AND ZPCC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId))
                          
				     UPDATE TBPC SET TBPC.ProfileId = CTCP.ProfileIds FROM @TBL_PimCategoryIds TBPC 
					 LEFT JOIN Cte_CategoryProfile CTCP ON(CTCP.PimCategoryId = TBPC.PimCategoryId AND CTCP.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId );
                     
					 UPDATE TBPC SET TBPC.CategoryName = TBAV.CategoryValue FROM @TBL_PimCategoryIds TBPC INNER JOIN @TBL_AttributeValue TBAV ON(TBAV.PimCategoryId = TBPC.PimCategoryId
                     AND EXISTS(SELECT TOP 1 1 FROM [dbo].[Fn_GetCategoryNameAttribute]() FNGCNA WHERE FNGCNA.PimAttributeId = TBAV.PimAttributeId));

					   UPDATE TBPC SET TBPC.CategoryCode = TBAV.CategoryValue FROM @TBL_PimCategoryIds TBPC INNER JOIN @TBL_AttributeValue TBAV ON(TBAV.PimCategoryId = TBPC.PimCategoryId
					 AND EXISTS(SELECT TOP 1 1 FROM dbo.Fn_GetCategoryCodeAttribute() FNGCNA WHERE FNGCNA.PimAttributeId = TBAV.PimAttributeId)
					 )



					 -- here update the publish category details 
                     ;WITH Cte_UpdateCategoryDetails
                     AS 
					 (
							 SELECT TBC.PimCategoryId,PublishCategoryId,CategoryName, TBPPC.PimCategoryHierarchyId,CategoryCode
							 FROM @TBL_PimCategoryIds TBC
							 INNER JOIN @TBL_PublishPimCategoryIds TBPPC ON(TBC.PimCategoryId = TBPPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPPC.PimCategoryHierarchyId)
					 )						
                     MERGE INTO ZnodePublishCategoryDetail TARGET USING Cte_UpdateCategoryDetails SOURCE ON(
					 TARGET.PublishCategoryId = SOURCE.PublishCategoryId
					 AND TARGET.LocaleId = @LocaleIdIn)
                     WHEN MATCHED THEN UPDATE SET PublishCategoryId = SOURCE.PublishcategoryId,PublishCategoryName = SOURCE.CategoryName,LocaleId = @LocaleIdIn,ModifiedBy = @userId,ModifiedDate = @GetDate,CategoryCode=SOURCE.CategoryCode
                     WHEN NOT MATCHED THEN INSERT(PublishCategoryId,PublishCategoryName,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,CategoryCode) VALUES
                     (SOURCE.PublishCategoryId,SOURCE.CategoryName,@LocaleIdIn,@userId,@GetDate,@userId,@GetDate,SOURCE.CategoryCode);

                     ;WITH Cte_CategoryXML
                     AS (SELECT PublishCatalogLogId,PublishcategoryId,PimCategoryId,(SELECT PublishCatalogLogId VersionId,TBPC.PublishCategoryId ZnodeCategoryId,@PublishCatalogId ZnodeCatalogId
																		,THR.PublishParentCategoryId TempZnodeParentCategoryIds,ZPC.CatalogName ,
																		 ISNULL(DisplayOrder, '0') DisplayOrder,@LocaleIdIn LocaleId,ActivationDate 
																		 ,ExpirationDate,TBC.IsActive,ISNULL(CategoryName, '') Name,ProfileId TempProfileIds,ISNULL(PublishProductId, '') TempProductIds,ISNULL(CategoryCode,'') CategoryCode 
                        FROM @TBL_PublishPimCategoryIdsLatest TBPC 
						INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId= @PublishCatalogId)
						INNER JOIN ZnodePublishCAtegory THR ON (THR.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId AND THR.PimCategoryId = TBPC.PimCategoryId AND THR.PublishCatalogId= @PublishCatalogId )
						INNER JOIN @TBL_PimCategoryIds TBC ON(TBC.PimCategoryId = TBPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId) 
						WHERE TBPC.PublishCategoryId = TBPCO.PublishCategoryId 
						AND TBPC.LocaleId = @localeIdIn
						FOR XML PATH('')) CategoryXml 
						FROM @TBL_PublishPimCategoryIdsLatest TBPCO 
						WHERE LocaleId = @localeIdIn),

                     Cte_CategoryAttributeXml
                     AS (SELECT PublishCatalogLogId, CTCX.PublishCategoryId,'<CategoryEntity>'+ISNULL(CategoryXml, '')+ISNULL((SELECT(SELECT TBA.AttributeCode,TBA.AttributeName,ISNULL(IsUseInSearch, 0) IsUseInSearch,
                        ISNULL(IsHtmlTags, 0) IsHtmlTags,ISNULL(IsComparable, 0) IsComparable,(SELECT ''+TBAV.CategoryValue FOR XML PATH('')) AttributeValues,TBA.AttributeTypeName FROM @TBL_AttributeValue TBAV
                        INNER JOIN @TBL_AttributeIds TBA ON(TBAV.PimAttributeId = TBA.PimAttributeId) LEFT JOIN ZnodePimFrontendProperties ZPFP ON(ZPFP.PimAttributeId = TBA.PimAttributeId)
                        WHERE CTCX.PimCategoryId = TBAV.PimCategoryId AND TBAO.PimAttributeId = TBA.PimAttributeId FOR XML PATH('AttributeEntity'), TYPE) FROM @TBL_AttributeIds TBAO
                        FOR XML PATH('Attributes')), '')+'</CategoryEntity>' CategoryXMl FROM Cte_CategoryXML CTCX)

                     INSERT INTO @TBL_CategoryXml(PublishCategoryId,CategoryXml,LocaleId,PublishCatalogLogId)
                     SELECT PublishCategoryId,CategoryXml,@localeIdIn LocaleId,PublishCatalogLogId 
					 FROM Cte_CategoryAttributeXml;
                   
				     DELETE FROM @TBL_AttributeIds;
                     DELETE FROM @TBL_AttributeDefault;
                     DELETE FROM @TBL_AttributeValue;
                     SET @Counter = @Counter + 1;
                 END;

				

				 -----------------------
			IF @PimCategoryHierarchyId > 0 
			Begin 
				Select PublishCategoryId ,PublishCatalogLogId VersionId	, @PimCatalogId PimCatalogId	, LocaleId
				into #OutPublish  
				FROM @TBL_CategoryXml  
				
  

				Alter TABLE #OutPublish ADD Id int Identity 

				SET @MaxId =(SELECT COUNT(*) FROM #OutPublish);
				
				Declare @ExistingPublishCategoryId  nvarchar(max), @PublishCategoryId  int 
				SET @Counter =1 
				WHILE @Counter <= @MaxId -- Loop on Locale id 
				BEGIN
					SELECT @VersionId = VersionId  ,
					@PublishCategoryId = PublishCategoryId 
					from #OutPublish where Id = @Counter

					SELECT @ExistingPublishCategoryId  = PublishCategoryId 
					FROM ZnodePublishCatalogLog ZPCL 
					where ZPCL.PublishCatalogLogId = @VersionId  and IsCategoryPublished =1 

			IF NOT EXISTS (SELECT TOP 1 1 FROM Split(@ExistingPublishCategoryId  , ',') SP WHERE SP.Item = Convert(nvarchar(50),  @PublishCategoryId) )
					BEGIN
					
						If Isnull(@ExistingPublishCategoryId,'')  = '' 
							SET @ExistingPublishCategoryId  = Convert(nvarchar(100),@PublishCategoryId )
						else 
							SET @ExistingPublishCategoryId  = Isnull(@ExistingPublishCategoryId,'') + ',' +  Convert(nvarchar(100),@PublishCategoryId )

							
				
						UPDATE ZnodePublishCatalogLog SET PublishCategoryId = @MaxId ,
						ModifiedDate = @GetDate
						WHERE PublishCatalogLogId = @VersionId;
					END
					DELETE FROM ZnodePublishedXml where  IsCategoryXML =1  and  PublishCataloglogId = @VersionId  and  PublishedId = @PublishCategoryId 
					SET @Counter  = @Counter  + 1  
				END
			END 
			ElSE
			Begin
				 UPDATE ZnodePublishCatalogLog 
				 SET PublishCategoryId = (SELECT COUNT(PublishCategoryId)  FROM @TBL_CategoryXml
				 GROUP BY PublishCategoryId																				
				 ), IsCategoryPublished = 1 WHERE PublishCatalogLogId = @VersionId;

				 DELETE FROM ZnodePublishedXml WHERE PublishCataloglogId = @VersionId;
             End
             
			 INSERT INTO ZnodePublishedXml (PublishCatalogLogId,PublishedId,PublishedXML,IsCategoryXML,IsProductXML,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             SELECT PublishCatalogLogId PublishCataloglogId,PublishCategoryId,CategoryXml,1,0,LocaleId,@UserId,@GetDate,@UserId,@GetDate 
			 FROM @TBL_CategoryXml 
		
			
			-----------------------------------------------------------------------------------------------------------------------------
		
	
			 Select Distinct PublishCategoryId from @TBL_DeletedPublishCategoryIds
			 UNION
			--not published parentcategory
			SELECT DISTINCT PublishCategoryId FROM ZnodePublishCategory A
			INNER JOIN @TBL_PimCategoryIds B ON (A.PimCategoryId = B.PimCategoryId AND B.PimCategoryHierarchyId = A.PimCategoryHierarchyId)
			WHERE A.PublishCatalogId = @PublishCataLogId --AND B.PimCategoryHierarchyId = A.PimCategoryHierarchyId
			

			 SELECT CategoryXml 
			 FROM @TBL_CategoryXml 
			
			 UPDATE ZnodePimCategory SET IsCategoryPublish =1,PublishStateId = @PublishStateId WHERE pimCategoryId IN (SELECT PimCategoryId FROM @TBL_PimCategoryIds)
             COMMIT TRAN GetPublishCategory;
			 
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE();
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPublishCategory @PublishCatalogId = '+CAST(@PublishCatalogId AS VARCHAR(50))+',@UserId ='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(50));
             SET @Status = 0;
             ROLLBACK TRAN GetPublishCategory;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_GetPublishCategory',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
     GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportCustomer')
BEGIN 
	DROP PROCEDURE Znode_ImportCustomer
END
GO



CREATE  PROCEDURE [dbo].[Znode_ImportCustomer](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @LocaleId int= 0,@PortalId int ,@CsvColumnString nvarchar(max))
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import SEO Details
	
	-- Unit Testing : 
	--------------------------------------------------------------------------------------

BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max),@AspNetZnodeUserId nvarchar(256),@ASPNetUsersId nvarchar(256),
		@PasswordHash nvarchar(max),@SecurityStamp nvarchar(max),@RoleId nvarchar(256),@IsAllowGlobalLevelUserCreation nvarchar(10)
		Declare @ProfileId  int 
		SET @SecurityStamp = '0wVYOZNK4g4kKz9wNs-UHw2'
		SET @PasswordHash = 'APy4Tm1KbRG6oy7h3r85UDh/lCW4JeOi2O2Mfsb3OjkpWTp1YfucMAvvcmUqNaSOlA==';
		SELECT  @RoleId  = Id from AspNetRoles where   NAME = 'Customer'  

		Select @IsAllowGlobalLevelUserCreation = FeatureValues from ZnodeGlobalsetting where FeatureName = 'AllowGlobalLevelUserCreation'

		DECLARE @GetDate datetime= dbo.Fn_GetDate();
		-- Retrive RoundOff Value from global setting 

		-- Three type of import required three table varible for product , category and brand
		DECLARE @InsertCustomer TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, UserName nvarchar(512) ,FirstName	nvarchar(200),
			LastName nvarchar(200), BudgetAmount	numeric,Email	nvarchar(100),PhoneNumber	nvarchar(100),
		    EmailOptIn	bit	,ReferralStatus	nvarchar(40),IsActive	bit	,ExternalId	nvarchar(max),CreatedDate Datetime,
			ProfileName varchar(200), GUID NVARCHAR(400)
		);

			--SET @SSQL = 'SELECT RowNumber,UserName,FirstName,LastName,BudgetAmount,Email,PhoneNumber,EmailOptIn,IsActive,ExternalId,GUID FROM '+ @TableName;
		SET @SSQL = 'SELECT RowNumber,' + @CsvColumnString + ',GUID FROM '+ @TableName;
		INSERT INTO @InsertCustomer( RowNumber,UserName,FirstName,LastName,Email,PhoneNumber,       EmailOptIn,IsActive,ExternalId,CreatedDate,ProfileName,GUID )
		EXEC sys.sp_sqlexec @SSQL;
		

		
		select TOP 1 @ProfileId   =  ProfileId from ZnodePortalprofile where Portalid = @Portalid and IsDefaultRegistedProfile=1
		If( Isnull(@ProfileId ,0) = 0 ) 
		Begin
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '10', 'Default Portal Profile', '', @NewGUId, null , @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				
				UPDATE ZnodeImportProcessLog
				SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
				WHERE ImportProcessLogId = @ImportProcessLogId;

				DELETE FROM @InsertCustomer 
				SET @Status = 0;
				SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
				ROLLBACK TRAN A;
				Return 0 
		End

		--UserName,FirstName,LastName,Email,PhoneNumber,EmailOptIn,IsActive,ExternalId
	
	    -- start Functional Validation 

		-----------------------------------------------
		If @IsAllowGlobalLevelUserCreation = 'true'
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
					   SELECT '10', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
					   FROM @InsertCustomer AS ii
					    WHERE ltrim(rtrim(ii.UserName)) in 
					   (
						   SELECT UserName FROM AspNetZnodeUser   where PortalId = @PortalId
					   );
		Else 
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
					   SELECT '10', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
					   FROM @InsertCustomer AS ii
					   WHERE ltrim(rtrim(ii.UserName)) in 
					   (
						   SELECT UserName FROM AspNetZnodeUser   
					   );
		
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
					   SELECT '35', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
					   FROM @InsertCustomer AS ii
					   WHERE ii.UserName not like '%_@_%_.__%' 
				
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
					   SELECT '30', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
					   FROM @InsertCustomer AS ii
					   WHERE ltrim(rtrim(ii.UserName)) in 
					   (SELECT ltrim(rtrim(UserName))  FROM @InsertCustomer group by ltrim(rtrim(UserName))  having count(*) > 1 )

		--Note : Content page import is not required 
		
		-- End Function Validation 	
		-----------------------------------------------
		--- Delete Invalid Data after functional validatin  

		DELETE FROM @InsertCustomer
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
			
		);


		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM @InsertCustomer
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount 
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End

		-- Insert Product Data 
				
				
				DECLARE @InsertedAspNetZnodeUser TABLE (AspNetZnodeUserId nvarchar(256) ,UserName nvarchar(512),PortalId int )
				DECLARE @InsertedASPNetUsers TABLE (Id nvarchar(256) ,UserName nvarchar(512))
				DECLARE @InsertZnodeUser TABLE (UserId int,AspNetUserId nvarchar(256),CreatedDate Datetime )

				UPDATE ANU SET 
				ANU.PhoneNumber	= IC.PhoneNumber
				from AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
				INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
				INNER JOIN @InsertCustomer IC ON ANZU.UserName = IC.UserName 
				where Isnull(ANZU.PortalId,0) = Isnull(@PortalId ,0)

				UPDATE ZU SET 
				ZU.FirstName	= IC.FirstName,
				ZU.LastName		= IC.LastName,				
				ZU.BudgetAmount = IC.BudgetAmount,
				ZU.Email		= IC.Email,
				ZU.PhoneNumber	= IC.PhoneNumber,
				ZU.EmailOptIn	= Isnull(IC.EmailOptIn,0),
				ZU.IsActive		= IC.IsActive
				
				from AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
				INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
				INNER JOIN @InsertCustomer IC ON ANZU.UserName = IC.UserName 
				where Isnull(ANZU.PortalId,0) = Isnull(@PortalId ,0)

	
				Insert into AspNetZnodeUser (AspNetZnodeUserId, UserName, PortalId)		
				OUTPUT INSERTED.AspNetZnodeUserId, INSERTED.UserName, INSERTED.PortalId	INTO  @InsertedAspNetZnodeUser 			 
				Select NEWID(),IC.UserName, @PortalId FROM @InsertCustomer IC 
				where Not Exists (Select TOP 1 1  from AspNetZnodeUser ANZ where Isnull(ANZ.PortalId,0) = Isnull(@PortalId,0) AND ANZ.UserName = IC.UserName)

				INSERT INTO ASPNetUsers (Id,Email,EmailConfirmed,PasswordHash,SecurityStamp,PhoneNumber,PhoneNumberConfirmed,TwoFactorEnabled,
				LockoutEndDateUtc,LockOutEnabled,AccessFailedCount,PasswordChangedDate,UserName)
				output inserted.Id, inserted.UserName into @InsertedASPNetUsers
				SELECT NewId(), Email,0 ,@PasswordHash,@SecurityStamp,PhoneNumber,0,0,NULL LockoutEndDateUtc,1 LockoutEnabled,
				0,@GetDate,AspNetZnodeUserId from @InsertCustomer A INNER JOIN @InsertedAspNetZnodeUser  B 
				ON A.UserName = B.UserName
				
				INSERT INTO  ZnodeUser(AspNetUserId,FirstName,LastName,CustomerPaymentGUID,Email,PhoneNumber,EmailOptIn,
				IsActive,ExternalId, CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				OUTPUT Inserted.UserId, Inserted.AspNetUserId,Inserted.CreatedDate into @InsertZnodeUser
				SELECT IANU.Id AspNetUserId ,IC.FirstName,IC.LastName,null CustomerPaymentGUID,IC.Email
				,IC.PhoneNumber,Isnull(IC.EmailOptIn,0),IC.IsActive,IC.ExternalId, @UserId,
				CASE WHEN IC.CreatedDate IS NULL OR IC.CreatedDate = '' THEN  @Getdate ELSE IC.CreatedDate END,@UserId,@Getdate
				from @InsertCustomer IC Inner join 
				@InsertedAspNetZnodeUser IANZU ON IC.UserName = IANZU.UserName  INNER JOIN 
				@InsertedASPNetUsers IANU ON IANZU.AspNetZnodeUserId = IANU.UserName 
				  	     
				INSERT INTO AspNetUserRoles (UserId,RoleId)  Select AspNetUserId, @RoleID from @InsertZnodeUser 
				INSERT INTO ZnodeUserPortal (UserId,PortalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate) 
				SELECT UserId, @PortalId , @UserId, IZU.CreatedDate,@UserId,@Getdate 
				from @InsertZnodeUser IZU
				
---------------------------------------------------------------------------------

				declare @Profile table (ProfileId int)

				INSERT INTO ZnodeProfile (ProfileName,ShowOnPartnerSignup,Weighting,TaxExempt,DefaultExternalAccountNo,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ParentProfileId)
				OUTPUT inserted.ProfileId INTO @Profile(ProfileId)
				SELECT Distinct ProfileName, 0, null,0, replace(ltrim(rtrim(ProfileName)),' ','') as DefaultExternalAccountNo, @UserId,@Getdate, @UserId,@Getdate, null as ParentProfileId				
				from @InsertCustomer IC
				where not exists(select * from ZnodeProfile ZP where IC.ProfileName = ZP.ProfileName )
				AND ISNULL(ic.ProfileName,'') <> ''

				INSERT INTO ZnodePortalProfile (PortalId,	ProfileId,	IsDefaultAnonymousProfile,	IsDefaultRegistedProfile,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate)
				SELECT @PortalId, ProfileId, 0 AS IsDefaultAnonymousProfile, 0 AS IsDefaultRegistedProfile, @UserId,@Getdate, @UserId,@Getdate
				from @Profile

				UPDATE ZnodeUserProfile 
				SET ProfileId = COALESCE(ZP.ProfileId,@ProfileId)
				FROM ZnodeUser a
				inner join ASPNetUsers b on (b.Id = a.AspNetUserId)
				inner join AspNetZnodeUser c on (c.AspNetZnodeUserId = b.UserName)
				inner join @InsertCustomer IC on (IC.UserName = c.UserName)
				inner join ZnodeUserProfile u ON u.UserId = a.UserId
				LEFT join ZnodeProfile ZP on IC.ProfileName = ZP.ProfileName
				
				
				INSERT INTO ZnodeUserProfile (ProfileId,UserId,IsDefault,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				SELECT COALESCE(ZP.ProfileId,@ProfileId)  , a.UserId, 1 , @UserId,a.CreatedDate,@UserId,@Getdate 
				from ZnodeUser a
				INNER JOIN ASPNetUsers b on (b.Id = a.AspNetUserId)
				inner join AspNetZnodeUser c on (c.AspNetZnodeUserId = b.UserName)
				inner join @InsertCustomer IC on (IC.UserName = c.UserName)
				LEFT join ZnodeProfile ZP on IC.ProfileName = ZP.ProfileName
				where NOT EXISTS (SELECT TOP  1 1 FROM ZnodeUserProfile u WHERE u.UserId = a.UserId )
				AND EXISTS(SELECT * FROM @InsertZnodeUser IZU WHERE A.UserId = IZU.UserId)

		
		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;
	END TRY
	BEGIN CATCH

		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN A;
	END CATCH;
END;

GO

INSERT INTO ZnodeImportTemplateMapping(ImportTemplateId,	SourceColumnName,	TargetColumnName,	DisplayOrder,	IsActive,	IsAllowNull,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate)
SELECT (SELECT top 1 ImportTemplateId FROM ZnodeImportTemplate WHERE TemplateName = 'CustomerTemplate'), 'ProfileName',	'ProfileName',	0,	0,	0,	2, getdate(), 2, getdate()
WHERE NOT EXISTS(SELECT * FROM ZnodeImportTemplateMapping WHERE ImportTemplateId = (SELECT TOP 1 ImportTemplateId FROM ZnodeImportTemplate WHERE TemplateName = 'CustomerTemplate')
AND SourceColumnName = 'ProfileName' )


insert into ZnodeImportAttributeValidation(AttributeTypeName,	AttributeCode,	ImportHeadId,	IsRequired,	ControlName,	ValidationName,	SubValidationName,	ValidationValue,	RegExp,	
DisplayOrder,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate,	SequenceNumber)
select 'Text',	'ProfileName',	(select top 1 ImportHeadId from ZnodeImporthead where Name = 'Customer'),	0 as IsRequired,	'Text',	'RegularExpression',	null as SubValidationName,	'' as ValidationValue,	'' as RegExp,	
null as DisplayOrder,	2, getdate(), 2, getdate(),	(select max(SequenceNumber)+1 from ZnodeImportAttributeValidation where ImportHeadId = (select top 1 ImportHeadId from ZnodeImporthead where Name = 'Customer')) as SequenceNumber 
where not exists(select * from ZnodeImportAttributeValidation where ImportHeadId = (select top 1 ImportHeadId from ZnodeImporthead where Name = 'Customer') and AttributeCode = 'ProfileName')

GO 


Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Store','GetSearchSetting',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Store' and ActionName = 'GetSearchSetting')
 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store')	
      ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetSearchSetting')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store') and ActionId = 
       (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetSearchSetting'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store'),
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetSearchSetting')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store') and ActionId = 
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetSearchSetting'))

GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishProductPricingBySku')
BEGIN 
	DROP PROCEDURE Znode_GetPublishProductPricingBySku
END
GO

CREATE PROCEDURE [dbo].[Znode_GetPublishProductPricingBySku]
(   
    @SKU              VARCHAR(MAX),
    @PortalId         INT,
    @currentUtcDate   VARCHAR(100), -- this date is required for the user date r
    @UserId           INT          = 0, -- userid is optional
	@ProfileId        INT          = 0, 
    @PublishProductId TransferId READONLY,
	@IsDebug          BIT          = 0
	)
AS 
   /* 
    --Summary: Retrive Price of product from pricelist
    --Input Parameters:
    --UserId, SKU(Comma separated multiple), PortalId
    --Conditions :
    --1. If userId is null then check for PriceList having sku associated to profile which is associated to Portal having  PortalId and  having higher Precedence and valid ActivationDate and ExpirationDate for PriceList  and SKU also.
    --Unit Testing : 
    --EXEC Znode_GetPublishProductPricingBySku_2 @SKU = 'apple,apr234' , @PortalId = 34 , @currentUtcDate = '2016-09-17 00:00:00.000';
    --2. If There is no any PriceList having given sku associated to profile  then check for  
    --PriceList associated portal having PortalId and having higher Precedence ActivationDate and ExpirationDate for PriceList and SKU also.
    --Unit Testing : 
    --EXEC Znode_GetPublishProductPricingBySku_2 @SKU = 'apple,apr234' , @PortalId = 34 , @currentUtcDate = '2016-09-17 00:00:00.000';
    --3. If userId is not null then check for PriceList having sku associated to User having UserId and having higher Precedence ActivationDate and ExpirationDate for PriceList and SKU also.
    --4. If There is no any PriceList having given sku associated to user  then check for  
    --PriceList associated Account having UserId and having higher Precedence ActivationDate and ExpirationDate for PriceList and SKU also.
    --5. If There is no any PriceList having given sku associated to account  then check for  
    --PriceList associated Profile having PortalId and having higher Precedence ActivationDate and ExpirationDate for PriceList and SKU also.
    --6. If There is no any PriceList having given sku associated to Profile  then check for  
    --PriceList associated Portal having PortalId and having higher Precedence ActivationDate and ExpirationDate for PriceList and SKU also.
    --7. If in each case Precedence is same then get PriceList according to higher PriceListId ActivationDate and ExpirationDate for PriceList and SKU also.
    --8. Also get the Tier Price, Tier Quantity of given sku.
    --Unit Testing   
    --Exec Znode_GetPublishProductPricingBySku  @SKU = 'Levi''s T-Shirt & Jeans - Bundle Product',@PortalId = 1, @currentUtcDate = '2016-07-31 00:00:00.000'
	*/
    
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @Tlb_SKU TABLE
             (SKU        VARCHAR(100),
              SequenceNo INT IDENTITY
             );

			  DECLARE @DefaultLocaleId INT = dbo.FN_GETDEFAULTLocaleId()

			 IF @SKU = '' 
			 BEGIN 
			  INSERT INTO @Tlb_SKU(SKU)
			  	SELECT (SELECT ''+SKU FOR XML PATH('')) 
					FROM ZnodePublishProductDetail a
					INNER JOIN @PublishProductId b ON (b.Id = a.PublishProductId )
					WHERE LocaleId = @DefaultLocaleId


			 END 
			 ELSE 
			 BEGIN
			   INSERT INTO @Tlb_SKU(SKU)
                    SELECT Item
                    FROM Dbo.split(@SKU, ',');
			  

			 END 

           
             DECLARE @TLB_SKUPRICELIST TABLE
             (SKU          VARCHAR(100),
              RetailPrice  NUMERIC(28, 6),
              SalesPrice   NUMERIC(28, 6),
              PriceListId  INT,
              TierPrice    NUMERIC(28, 6),
              TierQuantity NUMERIC(28, 6),
			  ExternalId NVARCHAR(2000),
			  Custom1 NVARCHAR(MAX),
			  Custom2 NVARCHAR(MAX),
			  Custom3 NVARCHAR(MAX)
             );
             DECLARE @PriceListId INT, @PriceRoundOff INT;
             SELECT @PriceRoundOff = CONVERT( INT, FeatureValues)
             FROM ZnodeGlobalSetting
             WHERE FeatureName = 'PriceRoundOff';
		
             --Retrive portal wise pricelist  
             DECLARE @Tbl_PortalWisePriceList TABLE
             (PriceListId    INT,
              ActivationDate DATETIME,
              ExpirationDate DATETIME NULL,
              Precedence     INT,
			  SKU NVARCHAR(300)
             );
             --Retrive price for respective pricelist   
             DECLARE @Tbl_PriceListWisePrice TABLE
             (
				  PriceListId    INT,
				  SKU            VARCHAR(300),
				  SalesPrice     NUMERIC(28, 6),
				  RetailPrice    NUMERIC(28, 6),
				  UomId          INT,
				  UnitSize       NUMERIC(28, 6),
				  ActivationDate DATETIME,
				  ExpirationDate DATETIME NULL,
				  TierPrice      NUMERIC(28, 6),
				  TierQuantity   NUMERIC(28, 6),
				  TierUomId      INT,
				  TierUnitSize   NUMERIC(28, 6), 
				  ExternalId NVARCHAR(2000),
				  Custom1 NVARCHAR(MAX),
				  Custom2 NVARCHAR(MAX),
				  Custom3 NVARCHAR(MAX)
             );
			 DECLARE @Tbl_SKUWisePriceList TABLE (PriceListId INT, SKU NVARCHAR(300))

			 insert into @Tbl_SKUWisePriceList(PriceListId,SKU) 
			 SELECT  PriceListId,SKU from ZnodePrice where (SELECT ''+SKU FOR XML PATH('')) in (Select SKU from @Tlb_SKU )
			 Union
			 SELECT PriceListId,SKU  from ZnodePriceTier where (SELECT ''+SKU FOR XML PATH('')) in (Select SKU from @Tlb_SKU )
			 
			 --1. If userId is null then check for PriceList having sku associated to profile which is associated to Portal having  PortalId and  having higher Precedence and valid ActivationDate and ExpirationDate for PriceList  and SKU also.
            IF @UserId = 0
                 BEGIN
					INSERT INTO @Tbl_PortalWisePriceList( PriceListId, ActivationDate, ExpirationDate, Precedence,SKU )
					SELECT a.PriceListId, ActivationDate, ISNULL(ExpirationDate, @GetDate), b.Precedence,tsw.SKU
					FROM ZnodePriceList AS a INNER JOIN ZnodePriceListProfile AS b ON a.PriceListId = b.PriceListId INNER JOIN ZnodePortalProfile AS c
						ON b.PortalProfileId = c.PortalProfileID AND  c.IsDefaultAnonymousProfile = 1 INNER JOIN ZnodePortalunit AS zupu ON a.CultureId = zupu.CultureId 
						inner join @Tbl_SKUWisePriceList tsw  ON a.PriceListId = tsw.PriceListId
					WHERE @CurrentUtcDate BETWEEN a.ActivationDate AND ISNULL(a.ExpirationDate, @GetDate) AND c.PortalId = @PortalId
					ORDER BY b.Precedence;
		
			 
                     --2. If There is no any PriceList having given sku associated to profile  then check for PriceList associated portal having PortalId and having higher Precedence ActivationDate and ExpirationDate for PriceList and SKU also.
			IF Exists (Select top 1 1  FROM @Tbl_SKUWisePriceList tspl where NOT Exists (SELECT TOP 1 1 FROM @Tbl_PortalWisePriceList tpwl
				WHERE tspl.SKU = tpwl.SKU))
                         BEGIN
							INSERT INTO @Tbl_PortalWisePriceList( PriceListId, ActivationDate, ExpirationDate, Precedence,SKU )
							SELECT a.PriceListId, ActivationDate, ISNULL(ExpirationDate, @GetDate), b.Precedence,tsw.SKU
							FROM ZnodePriceList AS a INNER JOIN ZnodePriceListPortal AS b ON a.PriceListId = b.PriceListId
							INNER JOIN ZnodePortalunit AS zupu ON a.CultureId = zupu.CultureId   
							inner join @Tbl_SKUWisePriceList tsw  ON a.PriceListId = tsw.PriceListId
							AND NOT EXISTS (Select TOP 1 1 FROM  @Tbl_PortalWisePriceList tpwl WHERE tpwl.SKU = tsw.SKU )
							WHERE @CurrentUtcDate BETWEEN a.ActivationDate 
							AND ISNULL(a.ExpirationDate, @GetDate) AND b.PortalId = @PortalId
							ORDER BY b.Precedence
							;
							--Delete from @Tbl_SKUWisePriceList where PriceListId in (Select PriceListId from  @Tbl_PortalWisePriceList )
						
                         END;
                 END;
                     --3. If userId is not null then check for PriceList having sku associated to User having UserId and having higher Precedence ActivationDate and ExpirationDate for PriceList and SKU also.
             ELSE
                 BEGIN
				 
                     INSERT INTO @Tbl_PortalWisePriceList (PriceListId, ActivationDate, ExpirationDate, Precedence,SKU )
                            SELECT a.PriceListId, ActivationDate,ISNULL(ExpirationDate, @GetDate), b.Precedence,tsw.SKU
                            FROM ZnodePriceList AS a INNER JOIN ZnodePriceListUser AS b ON a.PriceListId = b.PriceListId
                                 INNER JOIN ZnodePortalunit zupu ON a.CultureId = zupu.CultureId AND zupu.PortalId = @PortalId  
								 inner join @Tbl_SKUWisePriceList tsw  ON a.PriceListId = tsw.PriceListId
								 AND NOT EXISTS (Select TOP 1 1 FROM  @Tbl_PortalWisePriceList tpwl WHERE tpwl.SKU = tsw.SKU )
                            WHERE @CurrentUtcDate BETWEEN a.ActivationDate AND ISNULL(a.ExpirationDate, @GetDate) AND b.UserID = @UserId
							ORDER BY b.Precedence ;

                --4. If There is no any PriceList having given sku associated to user  then check for PriceList associated Account having UserId and having higher Precedence ActivationDate and ExpirationDate for PriceList and SKU also.
				IF Exists (Select top 1 1  FROM @Tbl_SKUWisePriceList tspl where NOT Exists (SELECT TOP 1 1 FROM @Tbl_PortalWisePriceList tpwl
				WHERE tspl.SKU = tpwl.SKU))
						BEGIN
							INSERT INTO @Tbl_PortalWisePriceList( PriceListId, ActivationDate, ExpirationDate, Precedence,SKU )
								   SELECT a.PriceListId, ActivationDate, ISNULL(ExpirationDate, @GetDate), c.Precedence,tsw.SKU
								   FROM ZnodePriceList AS a INNER JOIN ZnodePriceListAccount AS c ON a.PriceListId = c.PriceListId
										INNER JOIN ZnodeUser AS d ON c.Accountid = d.Accountid INNER JOIN ZnodePortalunit AS zupu ON a.CultureId = zupu.CultureId   
										AND zupu.PortalId = @PortalId
										inner join @Tbl_SKUWisePriceList tsw  ON a.PriceListId = tsw.PriceListId
										AND NOT EXISTS (Select TOP 1 1 FROM  @Tbl_PortalWisePriceList tpwl WHERE tpwl.SKU = tsw.SKU )
								   WHERE @CurrentUtcDate BETWEEN a.ActivationDate AND ISNULL(a.ExpirationDate, @GetDate) AND d.UserID = @UserId
									ORDER BY c.Precedence
							--Delete from @Tbl_SKUWisePriceList where PriceListId in (Select PriceListId from  @Tbl_PortalWisePriceList )
						 END;
                     -- 5. If There is no any PriceList having given sku associated to account  then check for PriceList associated Profile having PortalId and having higher   Precedence ActivationDate and ExpirationDate for PriceList and SKU also.
				IF Exists (Select top 1 1  FROM @Tbl_SKUWisePriceList tspl 
				where NOT Exists (SELECT TOP 1 1 FROM @Tbl_PortalWisePriceList tpwl
				WHERE tspl.SKU = tpwl.SKU))

                         BEGIN
                             INSERT INTO @Tbl_PortalWisePriceList(PriceListId,ActivationDate,ExpirationDate,Precedence,SKU)
                                    SELECT a.PriceListId, ActivationDate, ISNULL(ExpirationDate, @GetDate), b.Precedence,tsw.SKU
                                    FROM ZnodePriceList AS a
                                         INNER JOIN ZnodePriceListProfile AS b ON a.PriceListId = b.PriceListId 
										 INNER JOIN ZnodePortalProfile AS c ON b.PortalProfileId = c.PortalProfileId  AND c.PortalId = @PortalId 
                                         INNER JOIN dbo.ZnodeUserProfile zup ON c.ProfileId = zup.ProfileId AND (IsDefault = 1 OR   @ProfileId <> 0)
                                         INNER JOIN ZnodePortalunit zupu ON a.CultureId = zupu.CultureId AND zupu.PortalId = @PortalId 
										 inner join @Tbl_SKUWisePriceList tsw  ON a.PriceListId = tsw.PriceListId
										 AND NOT EXISTS (Select TOP 1 1 FROM  @Tbl_PortalWisePriceList tpwl WHERE tpwl.SKU = tsw.SKU )
                                    WHERE @CurrentUtcDate BETWEEN a.ActivationDate AND ISNULL(a.ExpirationDate, @GetDate) AND (( zup.UserId = @UserId OR  @ProfileId <> 0) 
		   AND (ZUP.ProfileId = @ProfileId OR @ProfileId = 0 ));  
									--Delete from @Tbl_SKUWisePriceList where PriceListId in (Select PriceListId from  @Tbl_PortalWisePriceList )

					     END;
                   

                     ---6. If There is no any PriceList having given sku associated to Profile  then check for priceList associated Portal having PortalId and having higher Precedence ActivationDate and ExpirationDate for PriceList and SKU also.
                  				IF Exists (Select top 1 1  FROM @Tbl_SKUWisePriceList tspl 
								where NOT Exists (SELECT TOP 1 1 FROM @Tbl_PortalWisePriceList tpwl
				WHERE tspl.SKU = tpwl.SKU))

                         BEGIN
							INSERT INTO @Tbl_PortalWisePriceList( PriceListId, ActivationDate, ExpirationDate, Precedence,SKU )
							SELECT a.PriceListId, ActivationDate, ISNULL(ExpirationDate, @GetDate), b.Precedence,tsw.SKU
							FROM ZnodePriceList AS a INNER JOIN ZnodePriceListPortal AS b ON a.PriceListId = b.PriceListId
								INNER JOIN ZnodePortalunit AS zupu ON a.CultureId = zupu.CultureId AND  zupu.PortalId = b.PortalId    
								inner join @Tbl_SKUWisePriceList tsw  ON a.PriceListId = tsw.PriceListId
								AND NOT EXISTS (Select TOP 1 1 FROM  @Tbl_PortalWisePriceList tpwl WHERE tpwl.SKU = tsw.SKU )
								WHERE @CurrentUtcDate BETWEEN a.ActivationDate AND ISNULL(a.ExpirationDate, @GetDate) AND b.PortalId = @PortalId
							    ORDER BY b.Precedence
								;
								--Delete from @Tbl_SKUWisePriceList where PriceListId in (Select PriceListId from  @Tbl_PortalWisePriceList )
                         END;
						 
				--IF Exists (Select top 1 1  FROM @Tbl_SKUWisePriceList tspl where NOT Exists (SELECT TOP 1 1 FROM @Tbl_PortalWisePriceList tpwl
				--WHERE tspl.SKU = tpwl.SKU))
				--BEGIN
				
				--	INSERT INTO @Tbl_PortalWisePriceList( PriceListId, ActivationDate, ExpirationDate, Precedence,SKU )
				--	SELECT a.PriceListId, ActivationDate, ISNULL(ExpirationDate, @GetDate), b.Precedence,tsw.SKU
				--	FROM ZnodePriceList AS a INNER JOIN ZnodePriceListProfile AS b ON a.PriceListId = b.PriceListId INNER JOIN ZnodePortalProfile AS c
				--	ON b.ProfileId = c.ProfileId AND  c.IsDefaultAnonymousProfile = 1 INNER JOIN ZnodePortalunit AS zupu ON a.CurrencyId = zupu.CurrencyId
				--	inner join @Tbl_SKUWisePriceList tsw  ON a.PriceListId = tsw.PriceListId
				--	AND NOT EXISTS (Select TOP 1 1 FROM  @Tbl_PortalWisePriceList tpwl WHERE tpwl.SKU = tsw.SKU )
				--	WHERE @CurrentUtcDate BETWEEN a.ActivationDate AND ISNULL(a.ExpirationDate, @GetDate) AND c.PortalId = @PortalId;
				--END

                 END;
			
             SET @PriceListId = 0;
             -- Check Activation date and expiry date 
             IF EXISTS( SELECT TOP 1 1 FROM @Tbl_PortalWisePriceList)
                 BEGIN
				
                     -- Declare  @d datetime
                     -- SET @d = @GetDate
                     -- Select ISNULL(ActivationDate,@d)  , ISNULL( ExpirationDate,@GetDate ),b.Precedence,* from ZnodePriceList  a inner join ZnodePriceListPortal b on a.PriceListId = b.PriceListId where @d between ISNULL(ActivationDate,@d) 
                     -- and ISNULL(ExpirationDate,@GetDate ) --and a.PriceListId <>  80
                     -- Order by ISNULL(ActivationDate,@d)  , ISNULL( ExpirationDate,@GetDate ) ,  b.Precedence DESC 
                     --	Retrive pricelist wise price
                   INSERT INTO @Tbl_PriceListWisePrice( PriceListId, SKU, SalesPrice, RetailPrice, UomId, UnitSize, ActivationDate, ExpirationDate, TierPrice, TierQuantity, TierUomId, TierUnitSize , ExternalId ,Custom1,Custom2,Custom3)
				   SELECT ZP.PriceListId, ZP.SKU, ZP.SalesPrice, ZP.RetailPrice, ZP.UomId, ZP.UnitSize, ISNULL(ZP.ActivationDate, @CurrentUtcDate), ISNULL(ZP.ExpirationDate, @GetDate), ZPT.Price, ZPT.Quantity, ZPT.UomId, ZPT.UnitSize, ZP.ExternalId,
				   ZPT.Custom1,ZPT.Custom2,ZPT.Custom3
				   FROM [ZnodePrice] AS ZP 
				   INNER JOIN @Tlb_SKU AS TSKU ON (SELECT ''+ZP.SKU FOR XML PATH ('')) = TSKU.SKU 
				   LEFT OUTER JOIN ZnodePriceTier AS ZPT ON ZP.SKU = ZPT.SKU AND ZP.PriceListId = ZPT.PriceListId
				   WHERE ZP.PriceListId IN
				   (
					   SELECT TOP 1 PriceListId
					   FROM @Tbl_PortalWisePriceList AS TBPWPL
					   WHERE  TBPWPL.SKU = ZP.SKU
					   ORDER BY Precedence 
				   );
				  


                     -- Check Activation date and expiry date 
                    INSERT INTO @TLB_SKUPRICELIST( PriceListId, SKU, RetailPrice, SalesPrice, TierPrice, TierQuantity, ExternalId,Custom1,Custom2,Custom3 )
					   SELECT DISTINCT  PriceListId, SKU, RetailPrice, SalesPrice, TierPrice, TierQuantity, ExternalId,Custom1,Custom2,Custom3
					   FROM @Tbl_PriceListWisePrice
					   WHERE @currentUtcDate BETWEEN ActivationDate AND ISNULL(ExpirationDate, @GetDate);
					   
					  
					INSERT INTO @TLB_SKUPRICELIST( PriceListId, SKU, RetailPrice, SalesPrice, TierPrice, TierQuantity, ExternalId ,Custom1,Custom2,Custom3)
					   SELECT PriceListId, SKU, RetailPrice, SalesPrice, TierPrice, TierQuantity, ExternalId,Custom1,Custom2,Custom3
					   FROM @Tbl_PriceListWisePrice
					   WHERE SKU NOT IN(SELECT SKU FROM @TLB_SKUPRICELIST) and ActivationDate is null 
				
                 END;
                     -- Retrive data as per precedance from ZnodePriceListPortal table  
					
             ELSE
                 BEGIN
                     SET @PriceListId =( SELECT TOP 1 PriceListId FROM @Tbl_PortalWisePriceList ORDER BY Precedence  );

                     --Retrive pricelist wise price  
                     INSERT INTO @Tbl_PriceListWisePrice( PriceListId, SKU, SalesPrice, RetailPrice, UomId, UnitSize, ActivationDate, ExpirationDate, TierPrice, TierQuantity, TierUomId, TierUnitSize, ExternalId ,Custom1,Custom2,Custom3)
					 SELECT ZP.PriceListId, ZP.SKU, ZP.SalesPrice, ZP.RetailPrice, ZP.UomId, ZP.UnitSize, ISNULL(ZP.ActivationDate, @CurrentUtcDate), 
							ISNULL(ZP.ExpirationDate, @GetDate), ZPT.Price, ZPT.Quantity, ZPT.UomId, ZPT.UnitSize, zp.ExternalId,Custom1,Custom2,Custom3
					 FROM [ZnodePrice] AS ZP INNER JOIN @Tlb_SKU AS TSKU ON ZP.SKU = TSKU.SKU LEFT OUTER JOIN ZnodePriceTier AS ZPT ON ZP.SKU = ZPT.SKU AND 
							   ZP.PriceListId = ZPT.PriceListId WHERE ZP.PriceListId = @PriceListId; 

                     -- Check Activation date and expiry date 
					INSERT INTO @TLB_SKUPRICELIST( PriceListId, SKU, RetailPrice, SalesPrice, TierPrice, TierQuantity, ExternalId ,Custom1,Custom2,Custom3)
					SELECT PriceListId, SKU, RetailPrice, SalesPrice, TierPrice, TierQuantity, ExternalId,Custom1,Custom2,Custom3
					FROM @Tbl_PriceListWisePrice WHERE @currentUtcDate BETWEEN ActivationDate AND ISNULL(ExpirationDate, @GetDate);
					
					INSERT INTO @TLB_SKUPRICELIST( PriceListId, SKU, RetailPrice, SalesPrice, TierPrice, TierQuantity, ExternalId ,Custom1,Custom2,Custom3)
					SELECT PriceListId, SKU, RetailPrice, SalesPrice, TierPrice, TierQuantity, ExternalId,Custom1,Custom2,Custom3
					FROM @Tbl_PriceListWisePrice
					WHERE SKU NOT IN ( SELECT SKU FROM @TLB_SKUPRICELIST) and ActivationDate is null;

                 END;
             SELECT SKU,
                    ROUND(RetailPrice, @PriceRoundOff) AS RetailPrice,
                    ROUND(SalesPrice, @PriceRoundOff) AS SalesPrice,
                    ROUND(TierPrice, @PriceRoundOff) AS TierPrice,
                    ROUND(TierQuantity, @PriceRoundOff) AS TierQuantity,
					ZCC.CurrencyCode  AS CurrencyCode,    
                    ZC.Symbol AS CurrencySuffix,  ZC.CultureCode,
					TSPL.ExternalId,
					Custom1,Custom2,Custom3
             FROM @TLB_SKUPRICELIST AS TSPL
                  INNER JOIN ZnodePriceList AS ZPL ON TSPL.PriceListId = ZPL.PriceListId
                  INNER JOIN ZnodeCulture AS ZC ON ZPL.CultureId = ZC.CultureId    
				  LEFT JOIN ZnodeCurrency AS ZCC ON ZC.CurrencyId = ZCC.CurrencyId   
				  ORDER BY TierQuantity ASC;
         END TRY
         BEGIN CATCH
              DECLARE @Status BIT ;
			SET @Status = 0;
			DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPublishProductPricingBySku @SKU = '+@SKU+',@PortalId = '+CAST(@PortalId AS VARCHAR(10))+',@currentUtcDate = '+@currentUtcDate+',@UserId='+CAST(@UserId AS VARCHAR(100))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
			SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
			EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetPublishProductPricingBySku',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;

	 GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetSkuPricebyCatalog')
BEGIN 
	DROP PROCEDURE Znode_GetSkuPricebyCatalog
END
GO


CREATE  PROCEDURE [dbo].[Znode_GetSkuPricebyCatalog]
(   @WhereClause		NVARCHAR(max),
    @Rows				INT            = 100,
    @PageNo				INT            = 1,
    @Order_BY			VARCHAR(1000)  = '',
    @RowsCount			INT  out,
	@LocaleId			INT			   = 0,
	@Sku                VARCHAR(MAX),
	@PortalId		    INT = 0,
	@currentUtcDate     VARCHAR(200) = '',
	@PublishProductId   ProductForSortPrice READONLY,
	@IsInStock			varchar(5) ,
	@IsSorting			Bit = 1 
		)		
AS 
/*
    Summary: This procedure is used to find the PriceList by catalog 
	Unit Testing: 
	
    @IsInStock --- for 1 - In stock data , for 0 - out off stock data , for -1 - all data

	declare @p7 int
	set @p7=NULL
	declare @p12 dbo.ProductForSortPrice
	insert into @p12 values(947,N'SimpleProduct',N'DisablePurchasing',0)
	insert into @p12 values(948,N'SimpleProduct',N'DisablePurchasing',0)
	insert into @p12 values(949,N'SimpleProduct',N'DisablePurchasing',0)
	insert into @p12 values(950,N'SimpleProduct',N'DisablePurchasing',0)
	insert into @p12 values(951,N'SimpleProduct',N'DisablePurchasing',0)
	insert into @p12 values(953,N'SimpleProduct',N'DisablePurchasing',0)
	insert into @p12 values(957,N'SimpleProduct',N'DisablePurchasing',0)
	insert into @p12 values(1002,N'SimpleProduct',N'DisablePurchasing',0)
	insert into @p12 values(1003,N'SimpleProduct',N'DisablePurchasing',0)
	insert into @p12 values(1004,N'SimpleProduct',N'DisablePurchasing',0)
	insert into @p12 values(1005,N'SimpleProduct',N'DisablePurchasing',0)
	insert into @p12 values(1026,N'BundleProduct',N'DisablePurchasing',0)
	insert into @p12 values(1030,N'BundleProduct',N'DisablePurchasing',1)
	insert into @p12 values(1039,N'GroupedProduct',N'DontTrackInventory',0)
	insert into @p12 values(1013,N'BundleProduct',N'AllowBackOrdering',0)
	insert into @p12 values(1031,N'SimpleProduct',N'DisablePurchasing',0)
	insert into @p12 values(1032,N'SimpleProduct',N'DisablePurchasing',0)
	insert into @p12 values(1042,N'SimpleProduct',N'DisablePurchasing',0)

	exec sp_executesql N'Znode_GetSkuPricebyCatalog  @WhereClause,@Rows,@PageNo,@Order_By,@RowCount OUT
	,@LocaleId,@Sku,@PortalId,@currentUtcDate,@PublishProductId,@IsInStock',N'@WhereClause nvarchar(4000),
	@Rows int,@PageNo int,@Order_By nvarchar(15),@RowCount int output,@LocaleId int,
	@Sku nvarchar(4000),@PortalId int,@currentUtcDate datetime,@PublishProductId [dbo].[ProductForSortPrice] 
	READONLY,@IsInStock nvarchar(2)',@WhereClause=N'',@Rows=16,@PageNo=1,@Order_By=N'retailprice asc',@RowCount=@p7 output,
	@LocaleId=1,@Sku=N'',@PortalId=1,@currentUtcDate='2017-11-30 00:00:00',@PublishProductId=@p12,@IsInStock=N'1'
	select @p7

	GO

	declare @p7 int
	set @p7=NULL
	declare @p12 dbo.TransferId
	insert into @p12 values(947)
	insert into @p12 values(948)
	insert into @p12 values(949)
	insert into @p12 values(950)
	insert into @p12 values(951)
	insert into @p12 values(953)
	insert into @p12 values(957)
	insert into @p12 values(1002)
	insert into @p12 values(1003)
	insert into @p12 values(1004)
	insert into @p12 values(1005)
	insert into @p12 values(1026)
	insert into @p12 values(1030)
	insert into @p12 values(1039)
	insert into @p12 values(1013)
	insert into @p12 values(1031)
	insert into @p12 values(1032)
	insert into @p12 values(1042)

	exec sp_executesql N'Znode_GetSkuPricebyCatalog  @WhereClause,@Rows,@PageNo,@Order_By,@RowCount OUT
	,@LocaleId,@Sku,@PortalId,@currentUtcDate,@PublishProductId,@IsInStock',N'@WhereClause nvarchar(4000),
	@Rows int,@PageNo int,@Order_By nvarchar(15),@RowCount int output,@LocaleId int,
	@Sku nvarchar(4000),@PortalId int,@currentUtcDate datetime,@PublishProductId [dbo].[TransferId] 
	READONLY,@IsInStock nvarchar(2)',@WhereClause=N'',@Rows=16,@PageNo=1,@Order_By=N'retailprice asc',@RowCount=@p7 output,
	@LocaleId=1,@Sku=N'',@PortalId=1,@currentUtcDate='2017-11-30 00:00:00',@PublishProductId=@p12,@IsInStock=N'1'
	select @p7

*/


     BEGIN
     BEGIN TRY
	 SET NOCOUNT ON;
			 Declare @ProductIdForPricing   TransferId 
             DECLARE @SQL NVARCHAR(MAX);
			 DECLARE @TBL_PricebyCatalog TABLE (SKU NVARCHAR(4000),RetailPrice numeric(28,6),RowId INT,CountNo INT,ProductType nvarchar(200),OutOfStockOptions nvarchar(200),SalesPrice numeric(28,6))
			 DECLARE @TBL_PricebyCatalogforAssociateProduct TABLE (PimProductId int ,AssociatedProductId int,ParentSKU NVARCHAR(300),
			 ChildSKU NVARCHAR(300),RetailPrice  numeric(28,6),AssociatedProductDisplayOrder int , TypeOfProduct nvarchar(100),SalesPrice  numeric(28,6))
			 DECLARE @DefaultLocaleId INT = dbo.FN_GetDefaultLocaleId()
			 
			 DECLARE @tbl_PricingSku TABLE (sku nvarchar(200),RetailPrice numeric(28,6),SalesPrice numeric(28,6),TierPrice numeric(28,6),
						TierQuantity numeric(28,6),CurrencyCode varchar(200),CurrencySuffix varchar(2000),CultureCode VARCHAR(100), ExternalId NVARCHAR(2000),Custom1 NVARCHAR(MAX),Custom2 NVARCHAR(MAX),
			  Custom3 NVARCHAR(MAX))		
			 DECLARE @tbl_PricingSkuOfAssociatedProduct TABLE (sku nvarchar(200),RetailPrice numeric(28,6),SalesPrice numeric(28,6),TierPrice numeric(28,6),
						TierQuantity numeric(28,6),CurrencyCode varchar(200),CurrencySuffix varchar(2000),CultureCode VARCHAR(100), ExternalId NVARCHAR(2000),Custom1 NVARCHAR(MAX), Custom2 NVARCHAR(MAX),
			  Custom3 NVARCHAR(MAX))				
			
			Select [Id],[ProductType],[OutOfStockOptions],--[CallForPricing] ,
			 Convert(varchar(300),'') SKU into #PublishProductId from @PublishProductId
			
			UPDATE PDI SET PDI.SKU = ZPPD.SKU 
						from #PublishProductId PDI inner join
						ZnodePublishProductDetail ZPPD On PDI.ID = ZPPD.PublishProductId
		
					--Read price for all products
					--Start
					INSERT INTO @ProductIdForPricing SELECT id FROM @PublishProductId
	 
					INSERT INTO @tbl_PricingSku (sku,RetailPrice ,SalesPrice,TierPrice,TierQuantity,CurrencyCode,CurrencySuffix,CultureCode, ExternalId ,Custom1,Custom2,Custom3)	
					EXEC Znode_GetPublishProductPricingBySku   @SKU=@Sku ,@PortalId=@portaliD  ,@currentUtcDate=@currentUtcDate,@UserId=2,@PublishProductId=@ProductIdForPricing
					
					
					--Read Associate Products price only
					--Start
						--If @IsSorting = 0 
						--Begin
							INSERT into @TBL_PricebyCatalogforAssociateProduct (PimProductId ,AssociatedProductId, ParentSKU,ChildSKU,AssociatedProductDisplayOrder,TypeOfProduct ) 
							SELECT ZPX.PublishedId,ZPX.PublishedXML.value('(ConfigurableProductEntity/AssociatedZnodeProductId)[1]', 'nvarchar(20)'),
							PDI.SKU,ChildZPPD.SKU,ZPX.PublishedXML.value('(ConfigurableProductEntity/AssociatedProductDisplayOrder)[1]', 'nvarchar(20)')
							,'ConfigurableProduct'
							from #PublishProductId PDI inner join
							ZnodePublishedXml ZPX ON PDI.id  = ZPX.PublishedId
							Left Outer JOIN ZnodePublishProductDetail ChildZPPD On 
							ZPX.PublishedXML.value('(ConfigurableProductEntity/AssociatedZnodeProductId)[1]', 'nvarchar(20)') = ChildZPPD.PublishProductId
							WHERE PDI.ProductType = 'ConfigurableProduct'
						
							--INSERT into @TBL_PricebyCatalogforAssociateProduct (PimProductId ,AssociatedProductId, ParentSKU,ChildSKU, TypeOfProduct) 
							--SELECT ZPX.PublishedId,ZPX.PublishedXML.value('(BundleProductEntity/AssociatedZnodeProductId)[1]', 'nvarchar(20)'),
							--PDI.SKU,ChildZPPD.SKU,'BundleProduct'
							--from #PublishProductId PDI inner join
							--ZnodePublishedXml ZPX ON PDI.id  = ZPX.PublishedId
							--Left Outer JOIN ZnodePublishProductDetail ChildZPPD On 
							--ZPX.PublishedXML.value('(BundleProductEntity/AssociatedZnodeProductId)[1]', 'nvarchar(20)')	= ChildZPPD.PublishProductId
							--WHERE PDI.ProductType ='BundleProduct'
						--End	
						INSERT into @TBL_PricebyCatalogforAssociateProduct (PimProductId ,AssociatedProductId, ParentSKU,ChildSKU, TypeOfProduct ) 
						SELECT ZPX.PublishedId,ZPX.PublishedXML.value('(GroupProductEntity/AssociatedZnodeProductId)[1]', 'nvarchar(20)'),
						PDI.SKU,ChildZPPD.SKU ,'GroupedProduct'
						from #PublishProductId PDI inner join
						ZnodePublishedXml ZPX ON PDI.id  = ZPX.PublishedId
						Left Outer JOIN ZnodePublishProductDetail ChildZPPD On 
						ZPX.PublishedXML.value('(GroupProductEntity/AssociatedZnodeProductId)[1]', 'nvarchar(20)') = ChildZPPD.PublishProductId
						WHERE PDI.ProductType = 'GroupedProduct'

				

					DELETE FROM @ProductIdForPricing 
					INSERT INTO @ProductIdForPricing SELECT Distinct AssociatedProductId FROM @TBL_PricebyCatalogforAssociateProduct where AssociatedProductId is not null 
			
				
					
					INSERT INTO @tbl_PricingSkuOfAssociatedProduct (sku,RetailPrice ,SalesPrice,TierPrice,TierQuantity,CurrencyCode,CurrencySuffix,CultureCode, ExternalId,Custom1,Custom2,Custom3 )	
					EXEC Znode_GetPublishProductPricingBySku   @SKU=@Sku ,@PortalId=@portaliD  ,@currentUtcDate=@currentUtcDate,@UserId=2,@PublishProductId=@ProductIdForPricing
								

					update PLC SET PLC.RetailPrice = PLCA.RetailPrice ,
					PLC.SalesPrice = PLCA.SalesPrice 
					from @TBL_PricebyCatalogforAssociateProduct PLC inner join @tbl_PricingSkuOfAssociatedProduct
					PLCA on PLC.ChildSKU = PLCA.sku
 
					
		
					SELECT DISTINCT sku,RetailPrice,SalesPrice  INTO #tbl_PricingSku FROM   @tbl_PricingSku 
					UNION  ALL 
					SELECT item sku,NULL RetailPrice  ,NULL SalesPrice FROM dbo.split(@Sku,',') SP  
					WHERE NOT EXISTS (SELECT TOP 1 1  FROM @tbl_PricingSku TBSP WHERE TBSP.sku = Sp.Item) AND @Sku <> ''
					UNION ALL 
					SELECT a.SKU , NULL RetailPrice , NULL SalesPrice  FROM ZnodePublishProductDetail  a INNER JOIN @PublishProductId b ON (b.Id = a.PublishProductId) 
					WHERE LocaleId = @DefaultLocaleId AND NOT EXISTS (SELECT TOP 1 1  FROM @tbl_PricingSku TBSP WHERE TBSP.sku = a.SKU) 
					AND @Sku = ''
							
					Update PBC SET PBC.RetailPrice = 
					(Select min(Isnull(RetailPrice, SalesPrice)) from @TBL_PricebyCatalogforAssociateProduct PCBA  
					where PCBA.ParentSKU =PBC.SKU and PCBA.ParentSKU is not null)
					from #tbl_PricingSku  PBC  where 
					Exists (Select TOP 1 1  from @TBL_PricebyCatalogforAssociateProduct PCBA  where PCBA.ParentSKU =PBC.SKU and PCBA.TypeOfProduct = 'GroupedProduct')
			      
				 	Update PBC SET PBC.RetailPrice = 
					(Select TOP 1 Isnull(RetailPrice ,SalesPrice) from @TBL_PricebyCatalogforAssociateProduct PCBA  where PCBA.ParentSKU =PBC.SKU
					 and PCBA.ParentSKU is not null and PCBA.ChildSKU is not null
					Order by AssociatedProductDisplayOrder)
					from #tbl_PricingSku  PBC  where 
					Exists (Select TOP 1 1  from @TBL_PricebyCatalogforAssociateProduct PCBA  where PCBA.ParentSKU =PBC.SKU and PCBA.TypeOfProduct = 'ConfigurableProduct')
					and PBC.RetailPrice IS null 
					
					
			   If @IsSorting = 1 
				BEGIN
					SET @Order_BY = Replace (@Order_BY,'RetailPrice', 'Case when SalesPrice is not null then SalesPrice else RetailPrice end ')
					
					SET @SQL = 
					';WITH CTE_GetFilteredList AS
					(
						SELECT DISTINCT A.sku,A.RetailPrice,SalesPrice , '+dbo.Fn_GetPagingRowId(@Order_BY,'A.SKU DESC ')+',Count(*)Over() CountNo
						FROM #tbl_PricingSku A 
						WHERE 1=1
						'+dbo.Fn_GetFilterWhereClause(@WhereClause)+'
					)
					SELECT SKU,RetailPrice,SalesPrice,RowId,CountNo
					FROM CTE_GetFilteredList
					'+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)+
					CASE WHEN @Order_BY = '' THEN '' ELSE ' ORDER BY '+ @Order_BY END
 
				END
				Else 
				BEGIN
				
					SET @SQL = 
					';WITH CTE_GetFilteredList AS
					(
						SELECT DISTINCT A.sku,A.RetailPrice,A.SalesPrice ,'+dbo.Fn_GetPagingRowId(@Order_BY,'A.SKU DESC ')+',Count(*)Over() CountNo
						FROM #tbl_PricingSku A 
						WHERE 1=1
						'+dbo.Fn_GetFilterWhereClause(@WhereClause)+'
					)
					SELECT SKU,RetailPrice,SalesPrice , RowId,CountNo
					FROM CTE_GetFilteredList
					'+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)
					
				END
		   

			INSERT INTO @TBL_PricebyCatalog(SKU,RetailPrice,SalesPrice,RowId,CountNo)
			EXEC sys.sp_sqlexec @SQL
        	
			DECLARE @TBL_PricebyCatalogFinalResult TABLE ( SKU NVARCHAR(4000), RetailPrice numeric(28,6),SalesPrice numeric(28,6) , RowId INT,CountNo INT, PublishProductId int  )
	
			IF ( @IsInStock = '-1' )  
			BEGIN 
				INSERT INTO @TBL_PricebyCatalogFinalResult ( SKU,RetailPrice,SalesPrice, RowId ,CountNo,PublishProductId )
				SELECT PBC.SKU,RetailPrice,SalesPrice, RowId ,CountNo,PPI.ID
				FROM @TBL_PricebyCatalog  PBC LEft Outer JOIN #PublishProductId PPI On PBC.SKU = PPI.SKU 
			END
			ELSE IF ( @IsInStock = '1' )
			BEGIN	
				  INSERT INTO @TBL_PricebyCatalogFinalResult ( SKU,RetailPrice,SalesPrice, RowId ,CountNo,PublishProductId )			
					  SELECT PBC.SKU,RetailPrice,SalesPrice, RowId ,CountNo,PPI.ID
					  FROM @TBL_PricebyCatalog  PBC LEft Outer JOIN #PublishProductId PPI On PBC.SKU = PPI.SKU 
					  WHERE EXISTS ( SELECT TOP 1 1 FROM [dbo].[ZnodeInventory] I WHERE I.SKU = PPI.SKU AND 1 =
					  (case when PPI.OutOfStockOptions = 'DisablePurchasing' and I.Quantity < 1 then 0 else 1 end))
					  Union All 
					  SELECT PBC.SKU,RetailPrice,SalesPrice, RowId ,CountNo,PPI.ID
					  FROM @TBL_PricebyCatalog  PBC LEft Outer JOIN #PublishProductId PPI On PBC.SKU = PPI.SKU 
					  WHERE NOT EXISTS ( SELECT TOP 1 1 FROM [dbo].[ZnodeInventory] I WHERE I.SKU = PPI.SKU AND 1 =
					  (case when PPI.OutOfStockOptions = 'DisablePurchasing' and I.Quantity < 1 then 0 else 1 end))
			END
			ELSE IF ( @IsInStock = '0' )
			BEGIN
		
				  INSERT INTO @TBL_PricebyCatalogFinalResult ( SKU,RetailPrice,SalesPrice, RowId ,CountNo,PublishProductId )			
					  SELECT PBC.SKU,RetailPrice,SalesPrice, RowId ,CountNo,PPI.ID
					  FROM @TBL_PricebyCatalog  PBC LEft Outer JOIN #PublishProductId PPI On PBC.SKU = PPI.SKU 
					  WHERE EXISTS ( SELECT TOP 1 1 FROM [dbo].[ZnodeInventory] I WHERE I.SKU = PPI.SKU 
					  AND  PPI.OutOfStockOptions = 'DisablePurchasing' 
					  GROUP BY I.SKU HAVING SUM(I.Quantity ) < 1   )
					  Union all 
					  SELECT PBC.SKU,RetailPrice,SalesPrice,RowId ,CountNo,PPI.ID
					  FROM @TBL_PricebyCatalog  PBC LEft Outer JOIN #PublishProductId PPI On PBC.SKU = PPI.SKU 
					  WHERE NOT EXISTS ( SELECT TOP 1 1 FROM [dbo].[ZnodeInventory] I WHERE I.SKU = PPI.SKU 
					  AND  PPI.OutOfStockOptions = 'DisablePurchasing' 
					  GROUP BY I.SKU HAVING SUM(I.Quantity ) < 1   )

			END

			SET @RowsCount =ISNULL((SELECT TOP 1 CountNo FROM @TBL_PricebyCatalogFinalResult),0)

			SELECT SKU,RetailPrice,SalesPrice,PublishProductId FROM @TBL_PricebyCatalogFinalResult
			
			
		END TRY
		BEGIN CATCH
		DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetSkuPricebyCatalog @WhereClause = '
			 +CAST(@WhereClause AS VARCHAR(MAX))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))
			 +',@Order_BY='+@Order_BY+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@LocaleId='+CAST(@LocaleId AS VARCHAR(20))
			 +',@PortalId= '+cast(@PortalId as varchar(200))+',@currentUtcDate= '
			 +@currentUtcDate+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status,ERROR_MESSAGE();                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetSkuPricebyCatalog',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;

		END CATCH

	END

	GO

	UPDATE ZnodeApplicationSetting
SET Setting = '<?xml version="1.0" encoding="utf-16"?> <columns>  <column>   <id>1</id>   <name>PaymentSettingId</name>   <headertext>Checkbox</headertext>   <width>40</width>   <datatype>Int32</datatype>   <columntype>Int32</columntype>   <allowsorting>true</allowsorting>   <allowpaging>false</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield>PaymentSettingId</islinkparamfield>   <ischeckbox>y</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext>ID</displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>2</id>   <name>PaymentCode</name>   <headertext>Payment Code</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>false</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield>PaymentTypeId</islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield>PaymentTypeId</checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext>Payment Option</displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>3</id>   <name>PaymentDisplayName</name>   <headertext>Payment Display Name</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>false</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield>PaymentTypeId</islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield>PaymentTypeId</checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext>Payment Option</displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>4</id>   <name>GatewayName</name>   <headertext>Payment Gateway</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield>PaymentGatewayId</islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield>PaymentGatewayId</checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext>Payment Gateway</displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>5</id>   <name>IsActive</name>   <headertext>Enable</headertext>   <width>40</width>   <datatype>Boolean</datatype>   <columntype>Boolean</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield>IsActive</islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield>IsActive</checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext>Enable</displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>6</id>   <name>DisplayOrder</name>   <headertext>Display Order</headertext>   <width>30</width>   <datatype>Int32</datatype>   <columntype>Int32</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>3</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>y</iscontrol>   <controltype>Text</controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>7</id>   <name>Manage</name>   <headertext>Action</headertext>   <width>50</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>false</allowsorting>   <allowpaging>true</allowpaging>   <format>Edit|Delete</format>   <isvisible>y</isvisible>   <mustshow>n</mustshow>   <musthide>y</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>y</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield>PaymentSettingId</islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield>PaymentSettingId</checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext>Edit|Delete</displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl>/Profiles/UpdateProfilePaymentSetting|/Profiles/RemoveAssociatedPaymentSetting</manageactionurl>   <manageparamfield>PaymentSettingId,ProfileId|PaymentSettingId,ProfileId</manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column> </columns>'
WHERE ItemName='AssociatedPaymentListToProfile'

GO

UPDATE ZnodeApplicationSetting
SET Setting = '<?xml version="1.0" encoding="utf-16"?> <columns>  <column>   <id>1</id>   <name>ShippingId</name>   <headertext>Checkbox</headertext>   <width>30</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>false</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>y</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>2</id>   <name>ShippingTypeName</name>   <headertext>Shipping Type</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>3</id>   <name>ShippingCode</name>   <headertext>Shipping Code</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>4</id>   <name>Description</name>   <headertext>Description</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>false</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>5</id>   <name>DestinationCountryCode</name>   <headertext>Country Code</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>6</id>   <name>HandlingCharge</name>   <headertext>Handling Charge</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>7</id>   <name>DisplayOrder</name>   <headertext>Display Order</headertext>   <width>30</width>   <datatype>Int32</datatype>   <columntype>Int32</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>3</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>y</iscontrol>   <controltype>Text</controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>8</id>   <name>IsActive</name>   <headertext>Enable</headertext>   <width>40</width>   <datatype>Boolean</datatype>   <columntype>String</columntype>   <allowsorting>false</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>9</id>   <name>ZipCode</name>   <headertext>Zip Code</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>10</id>   <name>Manage</name>   <headertext>Action</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>false</allowsorting>   <allowpaging>false</allowpaging>   <format>Edit|Delete</format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield>PortalId</islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext>Edit|Delete</displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl>/Profiles/UpdateProfileShipping|/Profiles/UnAssociateAssociatedShipping</manageactionurl>   <manageparamfield>shippingId,profileId|shippingId,profileId</manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>11</id>   <name>ProfileName</name>   <headertext>Profile Name</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>n</isvisible>   <mustshow>n</mustshow>   <musthide>y</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>12</id>   <name>ShippingId</name>   <headertext>ShippingId</headertext>   <width>30</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>false</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>n</isvisible>   <mustshow>n</mustshow>   <musthide>y</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column> </columns>'
WHERE ItemName='ZnodeAssociatedShippingListToProfile'

GO
UPDATE ZnodeApplicationSetting
SET Setting = '<?xml version="1.0" encoding="utf-16"?> <columns>  <column>   <id>1</id>   <name>ProfileID</name>   <headertext>Checkbox</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>Int32</columntype>   <allowsorting>true</allowsorting>   <allowpaging>false</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield>ProfileId</islinkparamfield>   <ischeckbox>y</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext>ProfileId</displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>2</id>   <name>ProfileName</name>   <headertext>Profile Name</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>false</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>30</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>y</iscontrol>   <controltype>Text</controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>3</id>   <name>DefaultExternalAccountNo</name>   <headertext>Profile Code</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>false</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>30</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>y</iscontrol>   <controltype>Text</controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>4</id>   <name>ShowOnPartnerSignup</name>   <headertext>Affiliate Sign-Up</headertext>   <width>40</width>   <datatype>Boolean</datatype>   <columntype>Boolean</columntype>   <allowsorting>false</allowsorting>   <allowpaging>false</allowpaging>   <format></format>   <isvisible>n</isvisible>   <mustshow>n</mustshow>   <musthide>y</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>5</id>   <name>TaxExempt</name>   <headertext>Tax Exempt</headertext>   <width>40</width>   <datatype>Boolean</datatype>   <columntype>Boolean</columntype>   <allowsorting>false</allowsorting>   <allowpaging>false</allowpaging>   <format></format>   <isvisible>n</isvisible>   <mustshow>n</mustshow>   <musthide>y</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>y</iscontrol>   <controltype>DropDown</controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>6</id>   <name>Manage</name>   <headertext>Action</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>false</allowsorting>   <allowpaging>false</allowpaging>   <format>Manage|Edit|Delete</format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield>profileId</islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext>Manage|Edit|Delete</displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl>/Profiles/GetProfileCatalogList|/Profiles/Edit|/Profiles/Delete</manageactionurl>   <manageparamfield>profileId|profileId|profileId</manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class>grid-action</Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column> </columns>'
WHERE ItemName='ZnodeProfile'

GO

UPDATE ZnodeApplicationSetting
SET Setting = '<?xml version="1.0" encoding="utf-16"?> <columns>  <column>   <id>1</id>   <name>PortalProfileID</name>   <headertext>Checkbox</headertext>   <width>40</width>   <datatype>Int32</datatype>   <columntype>Int32</columntype>   <allowsorting>false</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>y</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>2</id>   <name>ProfileName</name>   <headertext>Profile Name</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>false</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>30</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>y</iscontrol>   <controltype>Text</controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>3</id>   <name>IsDefaultAnonymousProfile</name>   <headertext>Is Default Anonymous Profile</headertext>   <width>40</width>   <datatype>Boolean</datatype>   <columntype>Boolean</columntype>   <allowsorting>false</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>y</iscontrol>   <controltype>DropDown</controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>4</id>   <name>IsDefaultRegistedProfile</name>   <headertext>Is Default Registered Profile</headertext>   <width>40</width>   <datatype>Boolean</datatype>   <columntype>Boolean</columntype>   <allowsorting>false</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>y</iscontrol>   <controltype>DropDown</controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>5</id>   <name>Manage</name>   <headertext>Action</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>false</allowsorting>   <allowpaging>false</allowpaging>   <format>Manage|Edit|Delete</format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield>profileId</islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext>Manage|Edit|Delete</displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl>/Profiles/GetProfileCatalogList|/Store/EditPortalProfile|/Store/DeletePortalProfile</manageactionurl>   <manageparamfield>profileId,portalId,parentProfileId|portalId,portalProfileId,profileId,parentProfileId|portalProfileId</manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class>grid-action</Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column> </columns>'
WHERE ItemName='ZnodePortalProfile'

GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetShippingOptions')
BEGIN 
	DROP PROCEDURE Znode_GetShippingOptions
END
GO
CREATE PROCEDURE [dbo].[Znode_GetShippingOptions]
	(@ZipCode    VARCHAR(20),
	 @ProfileId  INT)
AS

/*
summary: Procedure Used to get Shipping details filter by ProfileId

Unit Testing:
EXEC [Znode_GetShippingOptions]  @ZipCode= '71*, 53*',@ProfileId = 1
 
*/
BEGIN
	BEGIN TRY
    SET NOCOUNT ON

	SELECT ZS.ShippingId,ZPS.ProfileId,ShippingCode,ShippingName,HandlingCharge,HandlingChargeBasedOn,DestinationCountryCode,StateCode,CountyFIPS,
	Description,IsActive,ZS.DisplayOrder,ZipCode,ZS.CreatedDate,ZS.ModifiedDate
	 FROM ZnodeShipping ZS INNER JOIN ZnodeProfileShipping ZPS on(ZS.ShippingId = ZPS.ShippingId)
	WHERE ZPs.ProfileId = @ProfileId
	AND ZipCode like '%' + @ZipCode + '%'

	END TRY
	BEGIN CATCH
	        DECLARE @Status BIT ;
		    SET @Status = 0;
		    DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetShippingOptions @ZipCode = '+@ZipCode+',@ProfileId='+CAST(@ProfileId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
            SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
            EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetShippingOptions',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
	END CATCH
END
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPortalProfileList')
BEGIN 
	DROP PROCEDURE Znode_GetPortalProfileList
END
GO

CREATE PROCEDURE [dbo].[Znode_GetPortalProfileList]
(   @WhereClause VARCHAR(1000),
    @Rows        INT           = 100,
    @PageNo      INT           = 1,
    @Order_BY    VARCHAR(100)  = '',
    @RowsCount   INT OUT)
AS 
/*
    Summary: This Procedure Is Used to find the profile associated to the portal
     EXEC Znode_GetPortalProfileList ' '  AND portalid = 1  ',@RowsCount = 1,@Order_BY=' ProfileName DESC'  
    */
	 BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             DECLARE @SQL NVARCHAR(MAX), @RowsStart VARCHAR(50), @RowsEnd VARCHAR(50);
             SET @RowsStart = CASE
                                  WHEN @Rows >= 1000000
                                  THEN 0
                                  ELSE(@Rows * (@PageNo - 1)) + 1
                              END;
             SET @RowsEnd =   CASE
                                WHEN @Rows >= 1000000
                                THEN @Rows
                                ELSE @Rows * (@PageNo)
                              END;
             SET @SQL = ' 

		     DECLARE @TBL_PortalProfileList TABLE (PortalProfileId	INT, PortalId INT, ProfileId INT, ProfileName NVARCHAR(1000),IsDefaultAnonymousProfile BIT,IsDefaultRegistedProfile BIT,ParentProfileId	INT,ROWID INT,Counts INT )
		
			 ;With Cte_PortalProfileList AS 
			 (
			 SELECT Zpp.PortalProfileId ,zpp.PortalId ,Zpp.ProfileId ,ZP.ProfileName ,ZPP.IsDefaultAnonymousProfile,ZPP.IsDefaultRegistedProfile,ZP.ParentProfileId
			 FROM ZnodePortalProfile ZPP INNER JOIN ZnodeProfile ZP ON (ZP.ProfileId = ZPP.ProfileId )) 

			 ,Cte_AfterFilter AS 
			 (
			 SELECT * , DENSE_RANK()OVER( ORDER BY '+CASE WHEN @Order_BY = '' THEN '' ELSE @Order_BY+',' END+' PortalProfileId DESC ) ROWID, COUNT(*)OVER() COUNTS 
			 FROM Cte_PortalProfileList CTPPL '+CASE WHEN @WhereClause = '' THEN '' ELSE ' WHERE '+@WhereClause END+') 
		
			 INSERT INTO  @TBL_PortalProfileList 
			 SELECT PortalProfileId,PortalId,ProfileId,ProfileName,IsDefaultAnonymousProfile,IsDefaultRegistedProfile,ParentProfileId,ROWID,Counts FROM Cte_AfterFilter 

			 SET @Count =  ISNULL((SELECT TOP 1 Counts FROM @TBL_PortalProfileList) , 0 )   

			 SELECT PortalProfileId , PortalId , ProfileId , ProfileName ,IsDefaultAnonymousProfile,IsDefaultRegistedProfile,ParentProfileId FROM  @TBL_PortalProfileList  WHERE ROWID  BETWEEN '+@RowsStart+' AND '+@RowsEnd+'';
             
             EXEC Sp_Executesql
                  @SQL,
                  N' @Count INT OUT ',
                  @Count = @RowsCount OUT;
             SET @RowsCount = CASE WHEN @RowsCount IS NULL THEN 0 ELSE @RowsCount END;
			
         END TRY
         BEGIN CATCH
            DECLARE @Status BIT ;
		    SET @Status = 0;
		    DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPortalProfileList @WhereClause = '+cast (@WhereClause AS VARCHAR(50))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
            SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
            EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetPortalProfileList',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO

INSERT INTO ZnodeApplicationSetting (GroupName,ItemName,Setting,ViewOptions,FrontPageName,FrontObjectName,IsCompressed,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT 'Table','AssociatedSortListToPortal','<?xml version="1.0" encoding="UTF-8"?><columns><column><id>1</id><name>PortalSortSettingId</name><headertext>Checkbox</headertext><width>0</width><datatype>String</datatype><columntype>Int32</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format /><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl /><islinkparamfield /><ischeckbox>y</ischeckbox><checkboxparamfield /><iscontrol>n</iscontrol><controltype /><controlparamfield /><displaytext /><editactionurl /><editparamfield /><deleteactionurl /><deleteparamfield /><viewactionurl /><viewparamfield /><imageactionurl /><imageparamfield /><manageactionurl /><manageparamfield /><copyactionurl /><copyparamfield /><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class /><SearchControlType>--Select--</SearchControlType><SearchControlParameters /><DbParamField /><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>2</id><name>SortDisplayName</name><headertext>Sort</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format /><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>100</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl /><islinkparamfield /><ischeckbox>n</ischeckbox><checkboxparamfield /><iscontrol>y</iscontrol><controltype>Text</controltype><controlparamfield /><displaytext /><editactionurl /><editparamfield /><deleteactionurl /><deleteparamfield /><viewactionurl /><viewparamfield /><imageactionurl /><imageparamfield /><manageactionurl /><manageparamfield /><copyactionurl /><copyparamfield /><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class /><SearchControlType>--Select--</SearchControlType><SearchControlParameters /><DbParamField /><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>3</id><name>DisplayOrder</name><headertext>Display Order</headertext><width>40</width><datatype>String</datatype><columntype>Int32</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format /><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl /><islinkparamfield /><ischeckbox>n</ischeckbox><checkboxparamfield /><iscontrol>n</iscontrol><controltype /><controlparamfield /><displaytext /><editactionurl /><editparamfield /><deleteactionurl /><deleteparamfield /><viewactionurl /><viewparamfield /><imageactionurl /><imageparamfield /><manageactionurl /><manageparamfield /><copyactionurl /><copyparamfield /><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class /><SearchControlType>--Select--</SearchControlType><SearchControlParameters /><DbParamField /><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>4</id><name>Manage</name><headertext>Action</headertext><width>50</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format>Delete</format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>y</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl /><islinkparamfield>PortalId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield /><iscontrol>n</iscontrol><controltype /><controlparamfield /><displaytext>Delete</displaytext><editactionurl /><editparamfield /><deleteactionurl /><deleteparamfield /><viewactionurl /><viewparamfield /><imageactionurl /><imageparamfield /><manageactionurl>/Store/RemoveAssociatedSortSetting</manageactionurl><manageparamfield>PortalSortSettingId,PortalId</manageparamfield><copyactionurl /><copyparamfield /><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class /><SearchControlType>--Select--</SearchControlType><SearchControlParameters /><DbParamField /><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column></columns>'
,'AssociatedSortListToPortal','AssociatedSortListToPortal','AssociatedSortListToPortal',0,2,GETDATE(),2,GETDATE() 
WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodeApplicationSetting WHERE ItemName = 'AssociatedSortListToPortal' )
GO

INSERT INTO ZnodeApplicationSetting (GroupName,ItemName,Setting,ViewOptions,FrontPageName,FrontObjectName,IsCompressed,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT 'Table','UnassociatedSortListToPortal','<?xml version="1.0" encoding="UTF-8"?><columns><column><id>1</id><name>SortSettingId</name><headertext>Checkbox</headertext><width>0</width><datatype>String</datatype><columntype>Int32</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format /><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl /><islinkparamfield /><ischeckbox>y</ischeckbox><checkboxparamfield /><iscontrol>n</iscontrol><controltype /><controlparamfield /><displaytext /><editactionurl /><editparamfield /><deleteactionurl /><deleteparamfield /><viewactionurl /><viewparamfield /><imageactionurl /><imageparamfield /><manageactionurl /><manageparamfield /><copyactionurl /><copyparamfield /><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class /><SearchControlType>--Select--</SearchControlType><SearchControlParameters /><DbParamField /><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>2</id><name>SortName</name><headertext>Sort</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format /><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>100</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl /><islinkparamfield /><ischeckbox>n</ischeckbox><checkboxparamfield /><iscontrol>y</iscontrol><controltype>Text</controltype><controlparamfield /><displaytext /><editactionurl /><editparamfield /><deleteactionurl /><deleteparamfield /><viewactionurl /><viewparamfield /><imageactionurl /><imageparamfield /><manageactionurl /><manageparamfield /><copyactionurl /><copyparamfield /><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class /><SearchControlType>--Select--</SearchControlType><SearchControlParameters /><DbParamField /><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>3</id><name>DisplayOrder</name><headertext>Display Order</headertext><width>40</width><datatype>String</datatype><columntype>Int32</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format /><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl /><islinkparamfield /><ischeckbox>n</ischeckbox><checkboxparamfield /><iscontrol>n</iscontrol><controltype /><controlparamfield /><displaytext /><editactionurl /><editparamfield /><deleteactionurl /><deleteparamfield /><viewactionurl /><viewparamfield /><imageactionurl /><imageparamfield /><manageactionurl /><manageparamfield /><copyactionurl /><copyparamfield /><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class /><SearchControlType>--Select--</SearchControlType><SearchControlParameters /><DbParamField /><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column></columns>'
,'UnassociatedSortListToPortal','UnassociatedSortListToPortal','UnassociatedSortListToPortal',0,2,GETDATE(),2,GETDATE() 
WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodeApplicationSetting WHERE ItemName = 'UnassociatedSortListToPortal' )

GO
INSERT INTO ZnodeApplicationSetting (GroupName,ItemName,Setting,ViewOptions,FrontPageName,FrontObjectName,IsCompressed,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT 'Table','AssociatedPageListToPortal','<?xml version="1.0" encoding="UTF-8"?><columns><column><id>1</id><name>PortalPageSettingId</name><headertext>Checkbox</headertext><width>0</width><datatype>String</datatype><columntype>Int32</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format /><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl /><islinkparamfield /><ischeckbox>y</ischeckbox><checkboxparamfield /><iscontrol>n</iscontrol><controltype /><controlparamfield /><displaytext /><editactionurl /><editparamfield /><deleteactionurl /><deleteparamfield /><viewactionurl /><viewparamfield /><imageactionurl /><imageparamfield /><manageactionurl /><manageparamfield /><copyactionurl /><copyparamfield /><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class /><SearchControlType>--Select--</SearchControlType><SearchControlParameters /><DbParamField /><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>2</id><name>PageDisplayName</name><headertext>Page</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format /><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>100</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl /><islinkparamfield /><ischeckbox>n</ischeckbox><checkboxparamfield /><iscontrol>y</iscontrol><controltype>Text</controltype><controlparamfield /><displaytext /><editactionurl /><editparamfield /><deleteactionurl /><deleteparamfield /><viewactionurl /><viewparamfield /><imageactionurl /><imageparamfield /><manageactionurl /><manageparamfield /><copyactionurl /><copyparamfield /><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class /><SearchControlType>--Select--</SearchControlType><SearchControlParameters /><DbParamField /><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>3</id><name>DisplayOrder</name><headertext>Display Order</headertext><width>40</width><datatype>String</datatype><columntype>Int32</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format /><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl /><islinkparamfield /><ischeckbox>n</ischeckbox><checkboxparamfield /><iscontrol>n</iscontrol><controltype /><controlparamfield /><displaytext /><editactionurl /><editparamfield /><deleteactionurl /><deleteparamfield /><viewactionurl /><viewparamfield /><imageactionurl /><imageparamfield /><manageactionurl /><manageparamfield /><copyactionurl /><copyparamfield /><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class /><SearchControlType>--Select--</SearchControlType><SearchControlParameters /><DbParamField /><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>4</id><name>Manage</name><headertext>Action</headertext><width>50</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format>Delete</format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>y</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl /><islinkparamfield>PortalId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield /><iscontrol>n</iscontrol><controltype /><controlparamfield /><displaytext>Delete</displaytext><editactionurl /><editparamfield /><deleteactionurl /><deleteparamfield /><viewactionurl /><viewparamfield /><imageactionurl /><imageparamfield /><manageactionurl>/Store/RemoveAssociatedPageSetting</manageactionurl><manageparamfield>PortalPageSettingId,PortalId</manageparamfield><copyactionurl /><copyparamfield /><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class /><SearchControlType>--Select--</SearchControlType><SearchControlParameters /><DbParamField /><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column></columns>'
,'AssociatedPageListToPortal','AssociatedPageListToPortal','AssociatedPageListToPortal',0,2,GETDATE(),2,GETDATE() 
WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodeApplicationSetting WHERE ItemName = 'AssociatedPageListToPortal' )
GO

INSERT INTO ZnodeApplicationSetting (GroupName,ItemName,Setting,ViewOptions,FrontPageName,FrontObjectName,IsCompressed,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT 'Table','UnassociatedPageListToPortal','<?xml version="1.0" encoding="UTF-8"?><columns><column><id>1</id><name>PageSettingId</name><headertext>Checkbox</headertext><width>0</width><datatype>String</datatype><columntype>Int32</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format /><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl /><islinkparamfield /><ischeckbox>y</ischeckbox><checkboxparamfield /><iscontrol>n</iscontrol><controltype /><controlparamfield /><displaytext /><editactionurl /><editparamfield /><deleteactionurl /><deleteparamfield /><viewactionurl /><viewparamfield /><imageactionurl /><imageparamfield /><manageactionurl /><manageparamfield /><copyactionurl /><copyparamfield /><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class /><SearchControlType>--Select--</SearchControlType><SearchControlParameters /><DbParamField /><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>2</id><name>PageName</name><headertext>Page</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format /><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>100</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl /><islinkparamfield /><ischeckbox>n</ischeckbox><checkboxparamfield /><iscontrol>y</iscontrol><controltype>Text</controltype><controlparamfield /><displaytext /><editactionurl /><editparamfield /><deleteactionurl /><deleteparamfield /><viewactionurl /><viewparamfield /><imageactionurl /><imageparamfield /><manageactionurl /><manageparamfield /><copyactionurl /><copyparamfield /><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class /><SearchControlType>--Select--</SearchControlType><SearchControlParameters /><DbParamField /><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>3</id><name>DisplayOrder</name><headertext>Display Order</headertext><width>40</width><datatype>String</datatype><columntype>Int32</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format /><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl /><islinkparamfield /><ischeckbox>n</ischeckbox><checkboxparamfield /><iscontrol>n</iscontrol><controltype /><controlparamfield /><displaytext /><editactionurl /><editparamfield /><deleteactionurl /><deleteparamfield /><viewactionurl /><viewparamfield /><imageactionurl /><imageparamfield /><manageactionurl /><manageparamfield /><copyactionurl /><copyparamfield /><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class /><SearchControlType>--Select--</SearchControlType><SearchControlParameters /><DbParamField /><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column></columns>'
,'UnassociatedPageListToPortal','UnassociatedPageListToPortal','UnassociatedPageListToPortal',0,2,GETDATE(),2,GETDATE() 
WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodeApplicationSetting WHERE ItemName = 'UnassociatedPageListToPortal' )
GO


INSERT INTO ZnodeMenu (ParentMenuId,MenuName,MenuSequence,AreaName,ControllerName,ActionName,CSSClassName,IsActive,CreatedBy,CreatedDate
,ModifiedBy,ModifiedDate)
SELECT (SELECT TOP 1 MenuId FROM ZnodeMenu WHERE MenuName  = 'Admin'  AND ControllerName = 'GeneralSetting' AND CSSClassName = 'z-Admin'),
  'Diagnostics Status',15,'Diagnostics','Diagnostics','Index',NULL,1,2,GETDATE(),2,GETDATE() 
WHERE NOT EXISTS (SELECT TOP 1 1 FROM  ZnodeMenu WHERE  MenuName = 'Diagnostics Status' AND AreaName = 'Diagnostics')

GO
INSERT INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT 'Diagnostics','Diagnostics','Index',1,2,GETDATE(),2,GETDATE()
WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodeActions WHERE AreaName = 'Diagnostics' AND ControllerName = 'Diagnostics')

GO 

INSERT INTO ZnodeActionMenu (MenuId,ActionId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT (SELECT TOP 1 MenuId FROM ZnodeMenu WHERE MenuName = 'Diagnostics Status' AND ControllerName = 'Diagnostics' )
, (SELECT  TOP 1 ActionId FROM ZnodeActions WHERE ControllerName = 'Diagnostics' AND ActionName = 'Index' )
, 2 , GETDATE(),2,GETDATE()
WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeActionMenu WHERE MenuId = (SELECT TOP 1 MenuId FROM ZnodeMenu WHERE MenuName = 'Diagnostics Status' AND ControllerName = 'Diagnostics' )
AND ActionId = (SELECT  TOP 1 ActionId FROM ZnodeActions WHERE ControllerName = 'Diagnostics' AND ActionName = 'Index' ) )

GO

INSERT INTO ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Diagnostics Status' AND ControllerName = 'Diagnostics'),
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Diagnostics' and ActionName= 'Index')	
,1,2,Getdate(),2,Getdate() WHERE NOT EXISTS 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Diagnostics Status' AND ControllerName = 'Diagnostics') and ActionId = 
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Diagnostics' and ActionName= 'Index'))

GO

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores & Reps' AND ControllerName = 'Store')	
      ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetSearchSetting')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores & Reps' AND ControllerName = 'Store') and ActionId = 
       (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetSearchSetting'))
GO

INSERT ZnodeActions(AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT  NULL AreaName,'Store' ControllerName,'GetTabStructureForSearch' ActionName,1 IsGlobalAccess,
2 CreatedBy,GETDATE() CreatedDate,2 ModifiedBy,GetDate() ModifiedDate 
WHERE NOT EXISTS(SELECT * FROM ZnodeActions WHERE ControllerName='Store' AND ActionName='GetTabStructureForSearch')

GO
insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store')	
      ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetTabStructureForSearch')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store') and ActionId = 
       (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetTabStructureForSearch'))

GO

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores & Reps' AND ControllerName = 'Store')	
      ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetTabStructureForSearch')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores & Reps' AND ControllerName = 'Store') and ActionId = 
       (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetTabStructureForSearch'))
GO

INSERT ZnodeActions(AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT  NULL AreaName,'Store' ControllerName,'AssociateSortSetting' ActionName,1 IsGlobalAccess,
2 CreatedBy,GETDATE() CreatedDate,2 ModifiedBy,GetDate() ModifiedDate 
WHERE NOT EXISTS(SELECT * FROM ZnodeActions WHERE ControllerName='Store' AND ActionName='AssociateSortSetting')

GO
insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store')	
      ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'AssociateSortSetting')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store') and ActionId = 
       (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'AssociateSortSetting'))
GO
insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores & Reps' AND ControllerName = 'Store')	
      ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'AssociateSortSetting')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores & Reps' AND ControllerName = 'Store') and ActionId = 
       (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'AssociateSortSetting'))
GO

INSERT ZnodeActions(AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT  NULL AreaName,'Store' ControllerName,'GetAssociatedSortForStore' ActionName,1 IsGlobalAccess,
2 CreatedBy,GETDATE() CreatedDate,2 ModifiedBy,GetDate() ModifiedDate 
WHERE NOT EXISTS(SELECT * FROM ZnodeActions WHERE ControllerName='Store' AND ActionName='GetAssociatedSortForStore')

GO
insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store')	
      ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetAssociatedSortForStore')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store') and ActionId = 
       (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetAssociatedSortForStore'))
GO

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores & Reps' AND ControllerName = 'Store')	
      ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetAssociatedSortForStore')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores & Reps' AND ControllerName = 'Store') and ActionId = 
       (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetAssociatedSortForStore'))

GO
INSERT ZnodeActions(AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT  NULL AreaName,'Store' ControllerName,'AssociatePageSetting' ActionName,1 IsGlobalAccess,
2 CreatedBy,GETDATE() CreatedDate,2 ModifiedBy,GetDate() ModifiedDate 
WHERE NOT EXISTS(SELECT * FROM ZnodeActions WHERE ControllerName='Store' AND ActionName='AssociatePageSetting')
GO

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store')	
      ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'AssociatePageSetting')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store') and ActionId = 
       (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'AssociatePageSetting'))

GO
insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores & Reps' AND ControllerName = 'Store')	
      ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'AssociatePageSetting')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores & Reps' AND ControllerName = 'Store') and ActionId = 
       (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'AssociatePageSetting'))

GO
INSERT ZnodeActions(AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT  NULL AreaName,'Store' ControllerName,'GetUnassociatedSortList' ActionName,1 IsGlobalAccess,
2 CreatedBy,GETDATE() CreatedDate,2 ModifiedBy,GetDate() ModifiedDate 
WHERE NOT EXISTS(SELECT * FROM ZnodeActions WHERE ControllerName='Store' AND ActionName='GetUnassociatedSortList')

GO
insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store')	
      ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetUnassociatedSortList')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store') and ActionId = 
       (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetUnassociatedSortList'))
GO
insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores & Reps' AND ControllerName = 'Store')	
      ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetUnassociatedSortList')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores & Reps' AND ControllerName = 'Store') and ActionId = 
       (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetUnassociatedSortList'))
GO

INSERT ZnodeActions(AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT  NULL AreaName,'Store' ControllerName,'RemoveAssociatedSortSetting' ActionName,1 IsGlobalAccess,
2 CreatedBy,GETDATE() CreatedDate,2 ModifiedBy,GetDate() ModifiedDate 
WHERE NOT EXISTS(SELECT * FROM ZnodeActions WHERE ControllerName='Store' AND ActionName='RemoveAssociatedSortSetting')

GO
insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store')	
      ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'RemoveAssociatedSortSetting')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store') and ActionId = 
       (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'RemoveAssociatedSortSetting'))

GO
insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores & Reps' AND ControllerName = 'Store')	
      ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'RemoveAssociatedSortSetting')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores & Reps' AND ControllerName = 'Store') and ActionId = 
       (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'RemoveAssociatedSortSetting'))

GO
INSERT ZnodeActions(AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT  NULL AreaName,'Store' ControllerName,'GetAssociatedPageForStore' ActionName,1 IsGlobalAccess,
2 CreatedBy,GETDATE() CreatedDate,2 ModifiedBy,GetDate() ModifiedDate 
WHERE NOT EXISTS(SELECT * FROM ZnodeActions WHERE ControllerName='Store' AND ActionName='GetAssociatedPageForStore')

GO
insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store')	
      ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetAssociatedPageForStore')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store') and ActionId = 
       (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetAssociatedPageForStore'))
GO
insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores & Reps' AND ControllerName = 'Store')	
      ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetAssociatedPageForStore')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores & Reps' AND ControllerName = 'Store') and ActionId = 
       (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetAssociatedPageForStore'))

GO
INSERT ZnodeActions(AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT  NULL AreaName,'Store' ControllerName,'RemoveAssociatedPageSetting' ActionName,1 IsGlobalAccess,
2 CreatedBy,GETDATE() CreatedDate,2 ModifiedBy,GetDate() ModifiedDate 
WHERE NOT EXISTS(SELECT * FROM ZnodeActions WHERE ControllerName='Store' AND ActionName='RemoveAssociatedPageSetting')
GO

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store')	
      ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'RemoveAssociatedPageSetting')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store') and ActionId = 
       (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'RemoveAssociatedPageSetting'))
GO
insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores & Reps' AND ControllerName = 'Store')	
      ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'RemoveAssociatedPageSetting')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores & Reps' AND ControllerName = 'Store') and ActionId = 
       (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'RemoveAssociatedPageSetting'))
GO

INSERT ZnodeActions(AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT  NULL AreaName,'Store' ControllerName,'GetUnassociatedPageList' ActionName,1 IsGlobalAccess,
2 CreatedBy,GETDATE() CreatedDate,2 ModifiedBy,GetDate() ModifiedDate 
WHERE NOT EXISTS(SELECT * FROM ZnodeActions WHERE ControllerName='Store' AND ActionName='GetUnassociatedPageList')
GO

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store')	
      ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetUnassociatedPageList')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store') and ActionId = 
       (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetUnassociatedPageList'))
GO
insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores & Reps' AND ControllerName = 'Store')	
      ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetUnassociatedPageList')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores & Reps' AND ControllerName = 'Store') and ActionId = 
       (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetUnassociatedPageList'))

GO
INSERT INTO ZnodeRoleMenu(RoleId,MenuId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT (select Id FROM AspNetRoles WHERE NAMe = 'Admin'),(select MenuId from ZnodeMenu where MenuName = 'Diagnostics Status' AND ControllerName = 'Diagnostics')
,2,getdate(),2,getdate()
WHERE NOT EXISTS (SELECT * FROM ZnodeRoleMenu WHERE MenuId = (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Diagnostics Status' AND ControllerName = 'Diagnostics')
AND RoleId = (select TOP 1 Id FROM AspNetRoles WHERE NAMe = 'Admin'))

GO

INSERT INTO ZnodeRoleMenuAccessMapper(RoleMenuId,AccessPermissionId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT (SELECT RoleMenuId FROM ZnodeRoleMenu WHERE MenuId = (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Diagnostics Status' AND ControllerName = 'Diagnostics')),1,2,getdate(),2,getdate()


INSERT INTO ZnodeRoleMenuAccessMapper(RoleMenuId,AccessPermissionId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT (SELECT RoleMenuId FROM ZnodeRoleMenu WHERE MenuId = (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Diagnostics Status' AND ControllerName = 'Diagnostics')),2,2,getdate(),2,getdate()


INSERT INTO ZnodeRoleMenuAccessMapper(RoleMenuId,AccessPermissionId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT (SELECT RoleMenuId FROM ZnodeRoleMenu WHERE MenuId = (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Diagnostics Status' AND ControllerName = 'Diagnostics')),3,2,getdate(),2,getdate()


INSERT INTO ZnodeRoleMenuAccessMapper(RoleMenuId,AccessPermissionId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT (SELECT RoleMenuId FROM ZnodeRoleMenu WHERE MenuId = (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Diagnostics Status' AND ControllerName = 'Diagnostics')),4,2,getdate(),2,getdate()


GO

IF NOT EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeShippingPortal' AND COLUMN_NAME = 'PublishStateId')
BEGIN 
ALTER TABLE [dbo].[ZnodeShippingPortal]
    ADD [PublishStateId] TINYINT  NULL;
END

GO
Update ZnodeShippingPortal
SET PublishStateId = (SELECT TOP 1 PublishStateId  FROM ZnodePublishState  WHERE DisplayName = 'Production')

GO


Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Store','GetShippingOriginForPreview',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Store' and ActionName = 'GetShippingOriginForPreview')
 
insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores & Reps' AND ControllerName = 'Store')	
      ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetShippingOriginForPreview')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores & Reps' AND ControllerName = 'Store') and ActionId = 
       (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetShippingOriginForPreview'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores & Reps' AND ControllerName = 'Store'),
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetShippingOriginForPreview')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores & Reps' AND ControllerName = 'Store') and ActionId = 
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetShippingOriginForPreview'))

GO


Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Store','GetShippingOriginForProduction',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Store' and ActionName = 'GetShippingOriginForProduction')
 
insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores & Reps' AND ControllerName = 'Store')	
      ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetShippingOriginForProduction')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores & Reps' AND ControllerName = 'Store') and ActionId = 
       (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetShippingOriginForProduction'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores & Reps' AND ControllerName = 'Store'),
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetShippingOriginForProduction')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores & Reps' AND ControllerName = 'Store') and ActionId = 
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetShippingOriginForProduction'))

GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_CopyUserProfile')
BEGIN 
	DROP PROCEDURE Znode_CopyUserProfile
END
GO


CREATE PROCEDURE [dbo].[Znode_CopyUserProfile]
(
	  @PortalId int, 
	  @ProfileId int,
	  @ProfileName varchar(500),
	  @UserId Int,
	  @Status bit OUT)
AS   
BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		SET NOCOUNT ON;
		
		DECLARE @GetDate DATETIME = dbo.Fn_GetDate()

		DECLARE @ProfileIdNew INT,@ProfileCatalogIdNew INT , @PortalProfileIdNew INT

		IF NOT EXISTS(SELECT * FROM ZnodeProfile WHERE ProfileName = @ProfileName)
		BEGIN
			INSERT INTO ZnodeProfile(ProfileName,	ShowOnPartnerSignup	,Weighting,	TaxExempt,	DefaultExternalAccountNo,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate,	ParentProfileId)
			SELECT @ProfileName,	ShowOnPartnerSignup	,Weighting,	TaxExempt,	DefaultExternalAccountNo,	@UserId,@GetDate,@UserId,@GetDate,	@ProfileId ParentProfileId 
			FROM ZnodeProfile WHERE ProfileId = @ProfileId 
			

			set @ProfileIdNew = @@Identity

			if (isnull(@ProfileIdNew,0) <> 0)
			begin
				insert into ZnodePortalProfile(PortalId,ProfileId,IsDefaultAnonymousProfile,IsDefaultRegistedProfile,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				select @PortalId,@ProfileIdNew,IsDefaultAnonymousProfile,IsDefaultRegistedProfile,@UserId,@GetDate,@UserId,@GetDate
				from ZnodePortalProfile 
				where ProfileId = @ProfileId
				AND PortalId = @PortalId

				set @PortalProfileIdNew  = @@Identity

				insert into ZnodeProfileShipping(ProfileId,ShippingId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,DisplayOrder)
				select @ProfileIdNew,ShippingId,@UserId,@GetDate,@UserId,@GetDate,DisplayOrder
				from ZnodeProfileShipping where ProfileId = @ProfileId

				
				
				UPDATE aa
				SET ProfileId = @ProfileIdNew 
					,ModifiedBy = @UserId 
					,ModifiedDate = @GetDate
				from ZnodeAccountProfile aa where ProfileId = @ProfileId
				AND EXISTS (SELECT TOP 1 1  FROM ZnodeUserPortal a INNER JOIN ZnodeUser b ON (b.UserId = a.UserId) 
			    WHERE b.AccountID = aa.AccountID )


				insert into ZnodeCMSContentPagesProfile(ProfileId,CMSContentPagesId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				select @ProfileIdNew,CMSContentPagesId,@UserId,@GetDate,@UserId,@GetDate
				from ZnodeCMSContentPagesProfile where ProfileId = @ProfileId

				
				UPDATE a 
				SET ProfileId = @ProfileIdNew 
						,ModifiedBy = @UserId 
						,ModifiedDate = @GetDate
				from ZnodeUserProfile a 
				INNER JOIN ZnodeUserPortal b ON (b.UserId = a.UserId )
				where a.ProfileId = @ProfileId
				AND b.PortalId = @PortalID
				
				INSERT INTO ZnodeProfilePaymentSetting(PaymentSettingId,ProfileId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,DisplayOrder)
				SELECT PaymentSettingId,@ProfileIdNew,@UserId,@GetDate,@UserId,@GetDate,DisplayOrder
				FROM ZnodeProfilePaymentSetting where ProfileId = @ProfileId

				INSERT INTO ZnodePromotion(PromoCode,Name,Description,PromotionTypeId,Discount,StartDate,EndDate,OrderMinimum,QuantityMinimum,IsCouponRequired,IsAllowedWithOtherCoupons,PromotionMessage,DisplayOrder,IsUnique,PortalId,ProfileId,PromotionProductQuantity,ReferralPublishProductId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				SELECT PromoCode,Name,Description,PromotionTypeId,Discount,StartDate,EndDate,OrderMinimum,QuantityMinimum,IsCouponRequired,IsAllowedWithOtherCoupons,PromotionMessage,DisplayOrder,IsUnique,PortalId,@ProfileIdNew,PromotionProductQuantity,ReferralPublishProductId,@UserId,@GetDate,@UserId,@GetDate
				FROM ZnodePromotion WHERE ProfileId = @ProfileId
				AND PortalId = @PortalId

				--INSERT INTO ZnodeProfileCatalog (ProfileId,PimCatalogId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				--SELECT @ProfileIdNew, PimCatalogId,@UserId,@GetDate,@UserId,@GetDate
				--FROM ZnodeProfileCatalog a 
				--WHERE ProfileId = @ProfileId 
				
				--SET @ProfileCatalogIdNew =@@IDENTITY

				--INSERT INTO ZnodeProfileCatalogCategory (ProfileCatalogId,PimCatalogCategoryId,DisplayOrder,IsActive,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				--SELECT @ProfileCatalogIdNew,PimCatalogCategoryId,DisplayOrder,IsActive,@UserId,@GetDate,@UserId,@GetDate
				--FROM ZnodeProfileCatalogCategory ZPCC
				--INNER JOIN ZnodeProfileCatalog ZPC ON (ZPC.ProfileCatalogId = ZPCC.ProfileCatalogId)
				--WHERE ZPC.ProfileId = @ProfileId

				--INSERT INTO ZnodeProfileCategoryHierarchy (ProfileCatalogId,PimCategoryHierarchyId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				--SELECT @ProfileCatalogIdNew,PimCategoryHierarchyId,@UserId,@GetDate,@UserId,@GetDate
				--FROM ZnodeProfileCategoryHierarchy ZPCH 
				--INNER JOIN ZnodeProfileCatalog ZPC ON (ZPC.ProfileCatalogId = ZPCH.ProfileCatalogId)
				--WHERE ZPC.ProfileId = @ProfileId

				SET @ProfileCatalogIdNew  = 0
				 
				INSERT INTO ZnodeProfileCatalog (ProfileId,PimCatalogId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				SELECT @ProfileIdNew, b.PimCatalogId,@UserId,@GetDate,@UserId,@GetDate
				FROM ZnodePortalCatalog a 
				INNER JOIN ZnodePublishCatalog b ON (b.PublishCatalogId = a.PublishCatalogId)
				WHERE a.PortalId = @PortalId 
				AND NOT EXISTS (SELECT TOP 1  1  FROM ZnodeProfileCatalog RT WHERE RT.ProfileId = @ProfileIdNew AND RT.PimCatalogId = b.PimCatalogId )
				
				IF @@ROWCOUNT > 0 
				SET @ProfileCatalogIdNew = SCOPE_IDENTITY()			     
				 
			     
				INSERT INTO ZnodeProfileCatalogCategory (ProfileCatalogId,PimCatalogCategoryId,DisplayOrder,IsActive,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				SELECT @ProfileCatalogIdNew,PimCatalogCategoryId,DisplayOrder,IsActive,@UserId,@GetDate,@UserId,@GetDate
				FROM ZnodePimCatalogCategory  ZPCC
				WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeProfileCatalog TY WHERE TY.ProfileCatalogId = @ProfileCatalogIdNew AND TY.PimCatalogId = ZPCC.PimCatalogId)
				AND @ProfileCatalogIdNew <> 0 

				INSERT INTO ZnodeProfileCategoryHierarchy (ProfileCatalogId,PimCategoryHierarchyId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				SELECT @ProfileCatalogIdNew,PimCategoryHierarchyId,@UserId,@GetDate,@UserId,@GetDate
				FROM ZnodePimCategoryHierarchy ZPCH 
				WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeProfileCatalog TY WHERE TY.ProfileCatalogId = @ProfileCatalogIdNew AND TY.PimCatalogId = ZPCH.PimCatalogId)
				AND @ProfileCatalogIdNew <> 0 

				INSERT INTO ZnodePriceListProfile (PriceListId,PortalProfileId,Precedence,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				SELECT ZPLP.PriceListId,@PortalProfileIdNew,ZPLP.Precedence,@UserId,@GetDate,@UserId,@GetDate
				FROM ZnodePriceListProfile  ZPLP INNER JOIN ZnodePortalProfile ZPP
				on ZPLP.PortalProfileId = ZPP.PortalProfileID
				where ZPP.ProfileId =@ProfileId and ZPP.PortalId = @PortalId

				DELETE FROM dbo.ZnodePriceListProfile WHERE PortalProfileId IN (SELECT PortalProfileId FROM ZnodePortalProfile WHERE ProfileId = @ProfileId AND PortalId = @PortalId  )
				DELETE FROM ZnodePortalProfile WHERE ProfileId = @ProfileId AND PortalId = @PortalId 
				

			end
		end

		-- copy all data if New portalId will generate
		IF (Select Count(ProfileId) from ZnodeProfile where ProfileId = @ProfileId and ProfileName =@ProfileName) >= 0
		BEGIN
			
			SELECT @PortalId AS ID, CAST(1 AS bit) AS [Status]; 
			SET @Status = CAST(1 AS bit);
			COMMIT TRAN A;
		END;
		ELSE
		BEGIN
			-- If copy process will not complete successfully then return status 0 
			SELECT @PortalId AS ID, CAST(0 AS bit) AS [Status];
			SET @Status = CAST(1 AS bit);
			ROLLBACK TRAN A;
		END;
		
	END TRY
	BEGIN CATCH 
		    SELECT ERROR_MESSAGE()
		     SET @Status = 0;
		    -- DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_CopyPortal @PortalId = '+CAST(@PortalId AS VARCHAR(200))+',@StoreName='+@StoreName+',@CompanyName='+@CompanyName+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
             ROLLBACK TRAN A; 			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
    --         EXEC Znode_InsertProcedureErrorLog
				--@ProcedureName = 'Znode_CopyPortal',
				--@ErrorInProcedure = @Error_procedure,
				--@ErrorMessage = @ErrorMessage,
				--@ErrorLine = @ErrorLine,
				--@ErrorCall = @ErrorCall;
	END CATCH;
END;

GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishProducts')
BEGIN 
	DROP PROCEDURE Znode_GetPublishProducts
END
GO

CREATE PROCEDURE [dbo].[Znode_GetPublishProducts](
	    @PublishCatalogId int= NULL
	  , @PublishCategoryId varchar(2000)= NULL
	  , @UserId int
	  , @NotReturnXML int= NULL
	  , @PimProductId TransferId Readonly
	  , @VersionId int= 0
	  , @IsDebug bit= 0
	  , @TokenId nvarchar(max)= ''
	  , @LocaleId TransferId READONLY 
	  , @PublishStateId INT = 0 
	  )
AS
    
/*
    Summary :	Publish Product on the basis of publish catalog
				Retrive all Product details with attributes and insert into following tables 
				1.	ZnodePublishedXml
				2.	ZnodePublishCategoryProduct
				3.	ZnodePublishProduct
				4.	ZnodePublishProductDetail

                Product details include all the type of products link, grouped, configure and bundel products (include addon) their associated products 
				collect their attributes and values into tables variables to process for publish.  
                
				Finally genrate XML for products with their attributes and inserted into ZnodePublishedXml Znode Admin process xml from sql server to mongodb
				one by one.

    Unit Testing
    
    SELECT * FROM ZnodePimCustomField WHERE CustomCode = 'Test'
    SELECT * FROM ZnodePimCatalogCategory WHERE pimCatalogId = 3 AND PimProductId = 181
    SELECT * FROM ZnodePimCustomFieldLocale WHERE PimCustomFieldId = 1
    SELECT * FROM ZnodePublishProduct WHERE PublishProductid = 213 = 30
    select * from znodepublishcatalog
    SELECT * FROM view_loadmanageProduct WHERE Attributecode = 'ProductNAme' AND AttributeValue LIKE '%Apple%'
    SELECT * FROM ZnodePimCategoryProduct WHERE  PimProductId = 181
    SELECT * FROM ZnodePimCatalogcategory WHERE pimcatalogId = 3 \
	DECLARE @ttr TransferId 
	INSERT INTO @ttr  
	SELECT 25719 
    EXEC Znode_GetPublishProducts  @PublishCatalogId = 3 ,@UserId= 2 ,@NotReturnXML= NULL,@PimProductId = @ttr,@IsDebug= 1 
    EXEC Znode_GetPublishProducts  @PublishCatalogId = null,@UserId= 2 ,@NotReturnXML= NULL,@IsDebug= 1  ,@PimProductId = 103
    EXEC Znode_GetPublishProducts  @PublishCatalogId =1,@UserId= 2 ,@RequiredXML= 1	
    SELECT * FROM 	ZnodePimCatalogCategory  WHERE pimcatalogId = 3  
    SELECT * FROM [dbo].[ZnodePimCategoryHierarchy]  WHERE pimcatalogId = 3 
 */
  
BEGIN
	
	BEGIN TRY
		SET NOCOUNT ON;
			 DECLARE @IsCatalogPublishInProcess BIT = 0
	         DECLARE @TBL_PublishIds TABLE (PublishProductId INT , PimProductId INT , PublishCatalogId INT)
			 DECLARE @PublishStateidForPriview INT = [dbo].[Fn_GetPublishStateIdForPreview]()
			 DECLARE @DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId()
			 
			 --User cananot modify / update UDT, Need to declare additinal table variable for editing in other store procedure.
			 DECLARE @PimProductId_Editable TransferId
			 
			 IF EXISTS (SELECT TOP 1 1  FROM ZnodePublishCatalogLog a 
			   INNER JOIN ZnodePimCatalogCategory b ON (b.PimCatalogId =a.PimCatalogId )
			   WHERE EXISTS ( SELECT TOP 1 1 FROM @PimProductId SP WHERE  b.PimProductId = SP.Id )
			   AND a.IsCatalogPublished IS NULL 
			   ) 
			   BEGIN 
				 SET   @IsCatalogPublishInProcess =1 
			   END 
			     
	         IF (( @PublishCatalogId IS NULL  OR @PublishCatalogId = 0 ) AND @IsCatalogPublishInProcess = 0 )
			 BEGIN 
			   -- Process call single product publish
			   INSERT INTO @TBL_PublishIds 
			   EXEC [dbo].[Znode_InsertPublishProductIds] @PublishCatalogId,@userid,@PimProductId
			
			   INSERT INTO @PimProductId_Editable
			   SELECT distinct PimProductId FROM @TBL_PublishIds
			   -- initiate single product publish 
			   EXEC Znode_GetPublishSingleProduct @PublishCatalogId,@VersionId,@PimProductId_Editable,@UserId,@TokenId , @LocaleId,@PublishStateId
			  	
			 END 
			 ELSE IF  @IsCatalogPublishInProcess = 0 
			 BEGIN 
				-- Process call catalog publish (include category, products with multiple types)
			     EXEC [dbo].[Znode_InsertPublishProductIds] @PublishCatalogId,@userid,@PimProductId
				 EXEC Znode_GetPublishProductbulk @PublishCatalogId=@PublishCatalogId,@VersionId=@VersionId,@PimProductId=@PimProductId,@userid=@userid,@LocaleIds= @LocaleId,@PublishStateId = @PublishStateId
				 UPDATE ZnodePimProduct SET IsProductPublish = 1,PublishStateId =  @PublishStateId 
				 WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePublishProduct ZPP WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId AND ZPP.PublishCatalogId = @PublishCatalogId)
			 END 
			
			 DECLARE @TBL_PublishCatalogId TABLE(PublishCatalogId INT,PublishProductId INT,PimProductId  INT , VersionId INT,LocaleId INT  );

			 INSERT INTO @TBL_PublishCatalogId 
			 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,MAX(PublishCatalogLogId) VersionId, ZPCP.LocaleId  
			 FROM ZnodePublishProduct ZPP 
			 LEFT JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
			 WHERE (EXISTS (SELECT TOP 1 1 FROM @TBL_PublishIds SP WHERE SP.PimProductId = ZPP.PimProductId  ))
			 and exists (select top 1 1 from @LocaleId yu where yu.Id = zpcp.LocaleId)
			 AND IsCatalogPublished = 1 
			 AND PublishStateId = @PublishStateId
			 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId , LocaleId 

			

			IF EXISTS (SELECT TOP 1 1 FROM @PimProductId WHERE ID IS NOT NULL AND ID <> '')

			
			BEGIN
				SELECT PublishedXML ProductXml
				FROM ZnodePublishedXml ZPX
				WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId TBLP WHERE TBLP.VersionId = ZPX.PublishCatalogLogId AND TBLP.PublishProductId = ZPX.PublishedId  )
				AND IsProductXML = 1
				AND @IsCatalogPublishInProcess = 0
				;

						
				SELECT PublishProductId  ,PublishCatalogId ,VersionId,LocaleId 
				FROM @TBL_PublishCatalogId
				WHERE @IsCatalogPublishInProcess = 0
				GROUP BY PublishProductId  ,PublishCatalogId ,VersionId,LocaleId;

				IF 	 @IsCatalogPublishInProcess = 1 
				BEGIN 
				SELECT 1 Id , 'Single product publish request cannot be processed as catalog or category publish is in progress. Please try after publish is complete.' MessageDetails,  CAST(0 AS BIT ) Status
				END 
				ELSE 
				BEGIN 
				SELECT 1 Id , ' Publish Successfull' MessageDetails, CAST(1 AS BIT ) Status
				END
				
		
				-- dataset for SEO implementation
				SELECT  SKU 
				FROM ZnodePublishProductDetail PPD 
				INNER JOIN @TBL_PublishCatalogId TPC ON (TPC.PublishProductId = PPD.PublishProductId )
				WHERE EXISTS (SELECT TOP 1 1 FROM @PimProductId tb WHERE tb.ID = TPC.PimProductId)
				AND PPD.localeid = @DefaultLocaleId
				GROUP BY SKU;
				 

			END
			
			;with Cte_PublishCatalog AS 
			(
			 SELECT max(PublishCatalogLogId) PublishCatalogLogId,a.LocaleId,PublishCatalogId 
			 FROM ZnodePublishCatalogLog  a
			 WHERE a.PublishCatalogId = @PublishCatalogId
			 GROUP BY LocaleId,PublishCatalogId			
			)

			


			UPDATE ZnodePublishCatalogLog 
			SET IsProductPublished = 1 
			,PublishProductId = (SELECT DISTINCT COUNT(PublishProductId) FROM ZnodePublishCategoryProduct ZPP WHERE ZPP.PublishCatalogId = ZnodePublishCatalogLog.PublishCatalogId AND ZPP.PublishCategoryId IS NOT NULL) 
			WHERE EXISTS (SELECT TOP 1 1 FROM Cte_PublishCatalog  TY  WHERE  TY.PublishCatalogLogId =ZnodePublishCatalogLog.PublishCatalogLogId )  


			DECLARE @PimAttributeIsPublish VARCHAR(50) =  [dbo].[Fn_GetAttributeIsPublish]() 


			UPDATE ZnodePimProduct 
			SET PublishStateId =  @PublishStateId
			WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId ZPP WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId)

			
	END TRY
	BEGIN CATCH
		SELECT ERROR_MESSAGE(), ERROR_PROCEDURE();
		UPDATE ZnodePublishCatalogLog 
	    SET IsCatalogPublished = 0 
		WHERE PublishCatalogLogId = @VersionId
		DECLARE @Status bit;
		SET @Status = 0;
		DECLARE @Error_procedure varchar(1000)= ERROR_PROCEDURE(), @ErrorMessage nvarchar(max)= ERROR_MESSAGE(), @ErrorLine varchar(100)= ERROR_LINE(), @ErrorCall nvarchar(max)= 'EXEC Znode_GetPublishProducts @PublishCatalogId = '+CAST(@PublishCatalogId AS varchar(max))+',@PublishCategoryId='+@PublishCategoryId+',@UserId='+CAST(@UserId AS Varchar(50))+',@NotReturnXML='+CAST(@NotReturnXML AS Varchar(50))+',@UserId = '+CAST(@UserId AS Varchar(50))+',

		@VersionId='+CAST(@VersionId AS Varchar(50))+',@TokenId='+CAST(@TokenId AS varchar(max))+',@Status='+CAST(@Status AS varchar(10));
		SELECT 0 AS ID, CAST(0 AS bit) AS Status;
		ROLLBACK TRAN GetPublishProducts;
		EXEC Znode_InsertProcedureErrorLog @ProcedureName = 'Znode_GetPublishProducts', @ErrorInProcedure = @Error_procedure, @ErrorMessage = @ErrorMessage, @ErrorLine = @ErrorLine, @ErrorCall = @ErrorCall;
	END CATCH;
END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishCategoryGroup')
BEGIN 
	DROP PROCEDURE Znode_GetPublishCategoryGroup
END
GO

CREATE  PROCEDURE [dbo].[Znode_GetPublishCategoryGroup]
(   
	@PublishCatalogId INT,
    @UserId           INT,
    @VersionId        INT,
    @Status           BIT = 0 OUT,
	@PimCategoryHierarchyId int = 0, 
    @IsDebug          BIT = 0,
	@LocaleId TransferId READONLY,
	@PublishStateId INT = 0 
)
AS 
/*

       Summary:Publish category with their respective products and details 
	            The result is fetched in xml form   
       Unit Testing   
       Begin transaction 
       SELECT * FROM ZnodePIMAttribute 
	   SELECT * FROM ZnodePublishCatalog 
	   SELECT * FROM ZnodePublishCategory WHERE publishCAtegoryID = 167 


       EXEC [Znode_GetPublishCategory] @PublishCatalogId = 5,@VersionId = 0 ,@UserId =2 ,@IsDebug = 1 
       EXEC [Znode_GetPublishCategory] @PublishCatalogId = 5,@VersionId = 0 ,@UserId =2 ,@IsDebug = 1 ,@PimCategoryHierarchyId = ? 


       Rollback Transaction 
	*/
     BEGIN
         BEGIN TRAN GetPublishCategory;
         BEGIN TRY
             SET NOCOUNT ON;
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @LocaleIdIn INT= 0, @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId(), @Counter INT= 1, @MaxId INT= 0, @CategoryIdCount INT;
             DECLARE @IsActive BIT= [dbo].[Fn_GetIsActiveTrue]();
             DECLARE @AttributeIds VARCHAR(MAX)= '', @PimCategoryIds VARCHAR(MAX)= '', @DeletedPublishCategoryIds VARCHAR(MAX)= '', @DeletedPublishProductIds VARCHAR(MAX);
             --get the pim catalog id 
			 DECLARE @PimCatalogId INT=(SELECT PimCatalogId FROM ZnodePublishcatalog WHERE PublishCatalogId = @PublishCatalogId); 

             DECLARE @TBL_AttributeIds TABLE
             (PimAttributeId       INT,
              ParentPimAttributeId INT,
              AttributeTypeId      INT,
              AttributeCode        VARCHAR(600),
              IsRequired           BIT,
              IsLocalizable        BIT,
              IsFilterable         BIT,
              IsSystemDefined      BIT,
              IsConfigurable       BIT,
              IsPersonalizable     BIT,
              DisplayOrder         INT,
              HelpDescription      VARCHAR(MAX),
              IsCategory           BIT,
              IsHidden             BIT,
              CreatedDate          DATETIME,
              ModifiedDate         DATETIME,
              AttributeName        NVARCHAR(MAX),
              AttributeTypeName    VARCHAR(300)
             );
             DECLARE @TBL_AttributeDefault TABLE
             (PimAttributeId            INT,
              AttributeDefaultValueCode VARCHAR(100),
              IsEditable                BIT,
              AttributeDefaultValue     NVARCHAR(MAX)
			  ,DisplayOrder   INT
             );
             DECLARE @TBL_AttributeValue TABLE
             (PimCategoryAttributeValueId INT,
              PimCategoryId               INT,
              CategoryValue               NVARCHAR(MAX),
              AttributeCode               VARCHAR(300),
              PimAttributeId              INT
             );
             DECLARE @TBL_LocaleIds TABLE
             (RowId     INT IDENTITY(1, 1),
              LocaleId  INT,
              IsDefault BIT
             );
             DECLARE @TBL_PimCategoryIds TABLE
             (PimCategoryId       INT,
              PimParentCategoryId INT,
              DisplayOrder        INT,
              ActivationDate      DATETIME,
              ExpirationDate      DATETIME,
              CategoryName        NVARCHAR(MAX),
              ProfileId           VARCHAR(MAX),
              IsActive            BIT,PimCategoryHierarchyId INT,ParentPimCategoryHierarchyId INT   ,
			  CategoryCode  NVARCHAR(MAX)    );


             DECLARE @TBL_PublishPimCategoryIds TABLE
             (PublishCategoryId       INT,
              PimCategoryId           INT,
              PublishProductId        varchar(max),
              PublishParentCategoryId INT ,
			  PimCategoryHierarchyId INT ,parentPimCategoryHierarchyId INT
             );

			  DECLARE @TBL_PublishPimCategoryIdsLatest TABLE
             (PublishCategoryId       INT,
              PimCategoryId           INT,
              PublishProductId        varchar(max),
              PublishParentCategoryId INT ,
			  PimCategoryHierarchyId INT ,parentPimCategoryHierarchyId INT,PublishCatalogLogId INT,LocaleId INT  
             );

             DECLARE @TBL_DeletedPublishCategoryIds TABLE
             (PublishCategoryId INT,
              PublishProductId  INT
             );
             DECLARE @TBL_CategoryXml TABLE
             (PublishCategoryId INT,
              CategoryXml       XML,
              LocaleId          INT
			  ,PublishCatalogLogId INT
             );
             INSERT INTO @TBL_LocaleIds
             (LocaleId,
              IsDefault
             )
			  -- here collect all locale ids
             SELECT LocaleId,IsDefault FROM ZnodeLocale mt WHERE IsActive = @IsActive
			  AND (EXISTS (SELECT TOP 1 1  FROM @LocaleId RT WHERE RT.Id = MT.LocaleId )
			 OR NOT EXISTS (SELECT TOP 1 1 FROM @LocaleId ));


			IF @PimCategoryHierarchyId > 0 
			Begin 
				 DECLARE @TBL_CategoryCategoryHierarchyIds TABLE (CategoryId int,ParentCategoryId int,PimCategoryHierarchyId INT ,ParentPimCategoryHierarchyId INT  ) 
				 INSERT INTO @TBL_CategoryCategoryHierarchyIds(CategoryId , ParentCategoryId, PimCategoryHierarchyId , ParentPimCategoryHierarchyId)
				 Select Distinct PimCategoryId , Null,PimCategoryHierarchyId,NULL FROM (
				 SELECT PimCategoryId,ParentPimCategoryId,PimCategoryHierarchyId,ParentPimCategoryHierarchyId from DBO.[Fn_GetRecurciveCategoryIds_PimCategoryHierarchy](@PimCategoryHierarchyId,@PimCatalogId)
				 Union 
				 Select PimCategoryId , null,PimCategoryHierarchyId,NULL  from ZnodePimCategoryHierarchy where PimCategoryHierarchyId = @PimCategoryHierarchyId 
				 Union 
				 Select PimCategoryId , null,PimCategoryHierarchyId,NULL  from [Fn_GetRecurciveCategoryIds_PimCategoryHierarchyIdNew] (@PimCategoryHierarchyId,@PimCatalogId) ) Category  

			
				 INSERT INTO @TBL_PimCategoryIds(PimCategoryId,PimParentCategoryId,DisplayOrder,ActivationDate,ExpirationDate,IsActive,PimCategoryHierarchyId,ParentPimCategoryHierarchyId)
				
				 SELECT DISTINCT ZPCH.PimCategoryId,ZPCH2.PimCategoryId  PimParentCategoryId,ZPCH.DisplayOrder,ZPCH.ActivationDate,ZPCH.ExpirationDate,ZPCH.IsActive ,ZPCH.PimCategoryHierarchyId,ZPCH.ParentPimCategoryHierarchyId
				 FROM ZnodePimCategoryHierarchy AS ZPCH 
				 LEFT JOIN ZnodePimCategoryHierarchy AS ZPCH2 ON (ZPCH2.PimCategoryHierarchyId = ZPCH. ParentPimCategoryHierarchyId ) 
				 WHERE ZPCH.PimCatalogId = @PimCatalogId  AND ZPCH.PimCategoryHierarchyId in 
				 (SELECT PimCategoryHierarchyId from @TBL_CategoryCategoryHierarchyIds where CategoryId is not null )  ; 
				
				
				  
				SELECT @VersionId  = PublishCatalogLogId from ZnodePublishCatalogLog where PublishCatalogId = @PublishCatalogId  and IsCatalogPublished =1 

			 	 INSERT INTO @TBL_DeletedPublishCategoryIds (PublishCategoryId,PublishProductId)
				 SELECT ZPC.PublishCategoryId,ZPCP.PublishProductId 
				 FROM ZnodePublishCategory AS ZPC 
				 LEFT JOIN  ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishCategoryId = ZPC.PublishCategoryId AND ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND  ZPCP.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId  )                                                  
				 LEFT JOIN ZnodePublishProduct ZPP ON (zpp.PublishProductId = zpcp.PublishProductId AND zpp.PublishCatalogId = zpcp.PublishCatalogId)
				 LEFT JOIN ZnodePublishCatalog ZPCC ON (ZPCC.PublishCatalogId = ZPCP.PublishCatalogId)
				 WHERE ZPC.PublishCatalogId = @PublishCataLogId 
				 --AND NOT EXISTS
				 --(SELECT TOP 1 1 FROM ZnodePimCatalogCategory AS TBPC WHERE TBPC.PimCategoryId = ZPC.PimCategoryId 
				 --AND TBPC.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId AND TBPC.PimProductId = ZPP.PimProductId 
				 --AND TBPC.PimCatalogId = ZPCC.PimCatalogId  AND  ZPCP.PimCategoryHierarchyId=  @PimCategoryHierarchyId   ) 
				 AND ZPC.ParentPimCategoryHierarchyId  in (@PimCategoryHierarchyId)
				 AND ZPC.PimCategoryHierarchyId NOT IN (select PimCategoryHierarchyId FROM @TBL_PimCategoryIds)  ;
				
			End
			ELSE 
			Begin
				INSERT INTO @TBL_PimCategoryIds(PimCategoryId,PimParentCategoryId,DisplayOrder,ActivationDate,ExpirationDate,IsActive,PimCategoryHierarchyId,ParentPimCategoryHierarchyId)
				SELECT DISTINCT ZPCH.PimCategoryId,ZPCH2.PimCategoryId  PimParentCategoryId,ZPCH.DisplayOrder,ZPCH.ActivationDate,ZPCH.ExpirationDate,ZPCH.IsActive ,ZPCH.PimCategoryHierarchyId,ZPCH.ParentPimCategoryHierarchyId
				FROM ZnodePimCategoryHierarchy AS ZPCH 
				LEFT JOIN ZnodePimCategoryHierarchy AS ZPCH2 ON (ZPCH2.PimCategoryHierarchyId = ZPCH. ParentPimCategoryHierarchyId ) 
				WHERE ZPCH.PimCatalogId = @PimCatalogId; 

			 -- AND IsActive = @IsActive ; -- As discussed with @anup active flag maintain on demo site 23/12/2016
			
			 -- here is find the deleted publish category id on basis of publish catalog

             INSERT INTO @TBL_DeletedPublishCategoryIds(PublishCategoryId,PublishProductId)
			 SELECT ZPC.PublishCategoryId,ZPCP.PublishProductId 
				 FROM ZnodePublishCategoryProduct ZPCP
				 INNER JOIN ZnodePublishCategory AS ZPC ON(ZPCP.PublishCategoryId = ZPC.PublishCategoryId AND ZPCP.PublishCatalogId = ZPC.PublishCatalogId)                                                  
				 INNER JOIN ZnodePublishProduct ZPP ON(zpp.PublishProductId = zpcp.PublishProductId AND zpp.PublishCatalogId = zpcp.PublishCatalogId)
				 INNER JOIN ZnodePublishCatalog ZPCC ON(ZPCC.PublishCatalogId = ZPCP.PublishCatalogId)
				 WHERE ZPC.PublishCatalogId = @PublishCataLogId 
				 AND NOT EXISTS
				 (SELECT TOP 1 1 FROM ZnodePimCatalogCategory AS TBPC WHERE TBPC.PimCategoryId = ZPC.PimCategoryId 
				 AND TBPC.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId AND TBPC.PimProductId = ZPP.PimProductId 
				 AND TBPC.PimCatalogId = ZPCC.PimCatalogId);

			End
			
			 -- here is find the deleted publish category id on basis of publish catalog
             SET @DeletedPublishCategoryIds = ISNULL(SUBSTRING((SELECT ','+CAST(PublishCategoryId AS VARCHAR(50)) FROM @TBL_DeletedPublishCategoryIds AS ZPC
                                              GROUP BY ZPC.PublishCategoryId FOR XML PATH('') ), 2, 4000), '');
			 -- here is find the deleted publish category id on basis of publish catalog
             SET @DeletedPublishProductIds = '';
			 -- Delete the publish category id 
	         EXEC Znode_DeletePublishCatalog @PublishCatalogIds = @PublishCatalogId,@PublishCategoryIds = @DeletedPublishCategoryIds,@PublishProductIds = @DeletedPublishProductIds; 
			
			

             MERGE INTO ZnodePublishCategory TARGET USING  @TBL_PimCategoryIds SOURCE ON
			 (
				 TARGET.PimCategoryId = SOURCE.PimCategoryId 
				 AND TARGET.PublishCatalogId = @PublishCataLogId 
				 AND TARGET.PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId
			 )
			 WHEN MATCHED THEN UPDATE SET TARGET.PimParentCategoryId = SOURCE.PimParentCategoryId,TARGET.CreatedBy = @UserId,TARGET.CreatedDate = @GetDate,
             TARGET.ModifiedBy = @UserId,TARGET.ModifiedDate = @GetDate,PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId,ParentPimCategoryHierarchyId=SOURCE.ParentPimCategoryHierarchyId
             WHEN NOT MATCHED THEN INSERT(PimCategoryId,PublishCatalogId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PimCategoryHierarchyId,ParentPimCategoryHierarchyId) 
			 VALUES(SOURCE.PimCategoryId,@PublishCatalogId,@UserId,@GetDate,@UserId,@GetDate,SOURCE.PimCategoryHierarchyId
			 ,SOURCE.ParentPimCategoryHierarchyId)
             OUTPUT INSERTED.PublishCategoryId,INSERTED.PimCategoryId,INSERTED.PimCategoryHierarchyId,
			 INSERTED.parentPimCategoryHierarchyId 
			 INTO @TBL_PublishPimCategoryIds(PublishCategoryId,PimCategoryId,PimCategoryHierarchyId,parentPimCategoryHierarchyId);
			       
				   
		     -- here update the publish parent category id
             UPDATE ZPC SET [PimParentCategoryId] =TBPC.[PimCategoryId] 
				FROM ZnodePublishCategory ZPC
				INNER JOIN ZnodePublishCategory TBPC ON(ZPC.parentPimCategoryHierarchyId = TBPC.PimCategoryHierarchyId  ) 
				WHERE ZPC.PublishCatalogId =@PublishCatalogId
				AND ZPC.ParentPimCategoryHierarchyId IS NOT NULL
				AND TBPC.PublishCatalogId =@PublishCatalogId
				AND ZPC.PimCategoryId in (select PimCategoryId FROM @TBL_PimCategoryIds);
				;
			 UPDATE a
				SET  a.PublishParentCategoryId = b.PublishCategoryId
				FROM ZnodePublishCategory a 
				INNER JOIN ZnodePublishCategory b   ON (a.parentpimCategoryHierarchyId = b.pimCategoryHierarchyId)
				WHERE a.parentpimCategoryHierarchyId IS NOT NULL 
				AND a.PublishCatalogId =@PublishCatalogId
				AND b.PublishCatalogId =@PublishCatalogId
				AND a.PimCategoryId in (select PimCategoryId FROM @TBL_PimCategoryIds);

			 --UPDATE ZPC SET [PimParentCategoryId] = TBPC.[PimCategoryId] 
			 --FROM ZnodePublishCategory ZPC
    --         INNER JOIN ZnodePublishCategory TBPC ON(ZPC.parentPimCategoryHierarchyId = TBPC.PimCategoryHierarchyId  ) 
			 --WHERE ZPC.PublishCatalogId =@PublishCatalogId
			 --AND ZPC.ParentPimCategoryHierarchyId IS NOT NULL ;

			 -- product are published here 
            --  EXEC Znode_GetPublishProducts @PublishCatalogId,0,@UserId,1,0,0;

             SET @MaxId =(SELECT MAX(RowId)FROM @TBL_LocaleIds);
			 DECLARE @TransferID TRANSFERID 
			 INSERT INTO @TransferID 
			 SELECT DISTINCT  PimCategoryId
			 FROM @TBL_PublishPimCategoryIds 

          
			 INSERT INTO @TBL_PublishPimCategoryIdsLatest 
			 SELECT a.*,Max(b.PublishCatalogLogId) PublishCatalogLogId,b.LocaleId
			 FROM @TBL_PublishPimCategoryIds a
			 LEFT JOIN ZnodePublishCatalogLog b ON (b.PublishCatalogId = @PublishCatalogId)
			 WHERE EXISTS (SELECT TOP 1 1  FROM @LocaleId YTU WHERE YTU.Id = b.LocaleId )
			 AND b.PublishStateId = @PublishStateId
			 GROUP BY a.PublishCategoryId  ,PimCategoryId ,a.PublishProductId ,PublishParentCategoryId ,
			  PimCategoryHierarchyId  ,parentPimCategoryHierarchyId,b.LocaleId
			 
			 
             WHILE @Counter <= @MaxId -- Loop on Locale id 
                 BEGIN
                     SET @LocaleIdIn =(SELECT LocaleId FROM @TBL_LocaleIds WHERE RowId = @Counter);
                   
				     SET @AttributeIds = SUBSTRING((SELECT ','+CAST(ZPCAV.PimAttributeId AS VARCHAR(50)) FROM ZnodePimCategoryAttributeValue ZPCAV 
										 WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimCategoryIds TBPC WHERE TBPC.PimCategoryId = ZPCAV.PimCategoryId) GROUP BY ZPCAV.PimAttributeId FOR XML PATH('')), 2, 4000);
                
				     SET @CategoryIdCount =(SELECT COUNT(1) FROM @TBL_PimCategoryIds);

                     INSERT INTO @TBL_AttributeIds (PimAttributeId,ParentPimAttributeId,AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable,IsSystemDefined,
					 IsConfigurable,IsPersonalizable,DisplayOrder,HelpDescription,IsCategory,IsHidden,CreatedDate,ModifiedDate,AttributeName,AttributeTypeName)
                     EXEC [Znode_GetPimAttributesDetails] @AttributeIds,@LocaleIdIn;

                     INSERT INTO @TBL_AttributeDefault (PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder)
                     EXEC [dbo].[Znode_GetAttributeDefaultValueLocale] @AttributeIds,@LocaleIdIn;

                     INSERT INTO @TBL_AttributeValue (PimCategoryAttributeValueId,PimCategoryId,CategoryValue,AttributeCode,PimAttributeId)
                     EXEC [dbo].[Znode_GetCategoryAttributeValueId] @TransferID,@AttributeIds,@LocaleIdIn;

                     ;WITH Cte_UpdateDefaultAttributeValue
                     AS (
					  SELECT TBAV.PimCategoryId,TBAV.PimAttributeId,SUBSTRING((SELECT ','+AttributeDefaultValue FROM @TBL_AttributeDefault TBD WHERE TBAV.PimAttributeId = TBD.PimAttributeId
						AND EXISTS(SELECT TOP 1 1 FROM Split(TBAV.CategoryValue, ',') SP WHERE SP.Item = TBD.AttributeDefaultValueCode)FOR XML PATH('')), 2, 4000) DefaultCategoryAttributeValue
						FROM @TBL_AttributeValue TBAV WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_AttributeDefault TBAD WHERE TBAD.PimAttributeId = TBAV.PimAttributeId))
					 
					 -- update the default value with locale 
                     UPDATE TBAV SET CategoryValue = CTUDFAV.DefaultCategoryAttributeValue FROM @TBL_AttributeValue TBAV 
					 INNER JOIN Cte_UpdateDefaultAttributeValue CTUDFAV ON(CTUDFAV.PimCategoryId = TBAV.PimCategoryId AND CTUDFAV.PimAttributeId = TBAV.PimAttributeId)
					 WHERE CategoryValue IS NULL ;
					 
					 -- here is update the media path  
                     WITH Cte_productMedia
                     AS (SELECT TBA.PimCategoryId,TBA.PimAttributeId,[dbo].[FN_GetThumbnailMediaPathPublish](SUBSTRING((SELECT ','+zm.PATH FROM ZnodeMedia ZM WHERE EXISTS
					    (SELECT TOP 1 1 FROM dbo.split(TBA.CategoryValue, ',') SP WHERE SP.Item = CAST(Zm.MediaId AS VARCHAR(50)))FOR XML PATH('')), 2, 4000)) CategoryValue
						FROM @TBL_AttributeValue TBA WHERE EXISTS(SELECT TOP 1 1 FROM [dbo].[Fn_GetProductMediaAttributeId]() FNMA WHERE FNMA.PImAttributeId = TBA.PimATtributeId))
                         
					 UPDATE TBAV SET CategoryValue = CTCM.CategoryValue 
					 FROM @TBL_AttributeValue TBAV 
					 INNER JOIN Cte_productMedia CTCM ON(CTCM.PimCategoryId = TBAV.PimCategoryId
					 AND CTCM.PimAttributeId = TBAV.PimAttributeId);

                     WITH Cte_PublishProductIds
					 AS (SELECT TBPC.PublishcategoryId,SUBSTRING((SELECT ','+CAST(PublishProductId AS VARCHAR(50))
					  FROM ZnodePublishCategoryProduct ZPCP 
					  WHERE ZPCP.PublishCategoryId = TBPC.publishCategoryId
					  AND ZPCP.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId
                      AND ZPCP.PublishCatalogId = @PublishCatalogId FOR XML PATH('')), 2, 8000) PublishProductId ,PimCategoryHierarchyId
					  FROM @TBL_PublishPimCategoryIds TBPC)
                          
					 UPDATE TBPPC SET PublishProductId = CTPP.PublishProductId FROM @TBL_PublishPimCategoryIds TBPPC INNER JOIN Cte_PublishProductIds CTPP ON(TBPPC.PublishCategoryId = CTPP.PublishCategoryId 
					 AND TBPPC.PimCategoryHierarchyId = CTPP.PimCategoryHierarchyId);

					 WITH Cte_CategoryProfile
						AS (SELECT PimCategoryId,ZPCC.PimCategoryHierarchyId,SUBSTRING(( SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
						FROM ZnodeProfileCatalog ZPC 
						INNER JOIN ZnodeProfileCategoryHierarchy ZPRCC ON(ZPRCC.PimCategoryHierarchyId = ZPCC.PimCategoryHierarchyId
						AND ZPRCC.ProfileCatalogId = ZPC.ProfileCatalogId) 
						WHERE ZPC.PimCatalogId = ZPCC.PimCatalogId FOR XML PATH('')), 2, 4000) ProfileIds
                      
						FROM ZnodePimCategoryHierarchy ZPCC 
						WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimCategoryIds TBPC 
						WHERE TBPC.PimCategoryId = ZPCC.PimCategoryId AND ZPCC.PimCatalogId = @PimCatalogId 
						AND ZPCC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId))
                          
				     UPDATE TBPC SET TBPC.ProfileId = CTCP.ProfileIds FROM @TBL_PimCategoryIds TBPC 
					 LEFT JOIN Cte_CategoryProfile CTCP ON(CTCP.PimCategoryId = TBPC.PimCategoryId AND CTCP.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId );
                     
					 UPDATE TBPC SET TBPC.CategoryName = TBAV.CategoryValue FROM @TBL_PimCategoryIds TBPC INNER JOIN @TBL_AttributeValue TBAV ON(TBAV.PimCategoryId = TBPC.PimCategoryId
                     AND EXISTS(SELECT TOP 1 1 FROM [dbo].[Fn_GetCategoryNameAttribute]() FNGCNA WHERE FNGCNA.PimAttributeId = TBAV.PimAttributeId));

					   UPDATE TBPC SET TBPC.CategoryCode = TBAV.CategoryValue FROM @TBL_PimCategoryIds TBPC INNER JOIN @TBL_AttributeValue TBAV ON(TBAV.PimCategoryId = TBPC.PimCategoryId
					 AND EXISTS(SELECT TOP 1 1 FROM dbo.Fn_GetCategoryCodeAttribute() FNGCNA WHERE FNGCNA.PimAttributeId = TBAV.PimAttributeId)
					 )

					 -- here update the publish category details 
                     ;WITH Cte_UpdateCategoryDetails
                     AS 
					 (
							 SELECT TBC.PimCategoryId,PublishCategoryId,CategoryName, TBPPC.PimCategoryHierarchyId,CategoryCode
							 FROM @TBL_PimCategoryIds TBC
							 INNER JOIN @TBL_PublishPimCategoryIds TBPPC ON(TBC.PimCategoryId = TBPPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPPC.PimCategoryHierarchyId)
					 )						
                     MERGE INTO ZnodePublishCategoryDetail TARGET USING Cte_UpdateCategoryDetails SOURCE ON(
					 TARGET.PublishCategoryId = SOURCE.PublishCategoryId
					 AND TARGET.LocaleId = @LocaleIdIn)
                     WHEN MATCHED THEN UPDATE SET PublishCategoryId = SOURCE.PublishcategoryId,PublishCategoryName = SOURCE.CategoryName,LocaleId = @LocaleIdIn,ModifiedBy = @userId,ModifiedDate = @GetDate,CategoryCode=SOURCE.CategoryCode
                     WHEN NOT MATCHED THEN INSERT(PublishCategoryId,PublishCategoryName,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,CategoryCode) VALUES
                     (SOURCE.PublishCategoryId,SOURCE.CategoryName,@LocaleIdIn,@userId,@GetDate,@userId,@GetDate,SOURCE.CategoryCode);

                     ;WITH Cte_CategoryXML
                     AS (SELECT PublishCatalogLogId,PublishcategoryId,PimCategoryId,(SELECT PublishCatalogLogId VersionId,TBPC.PublishCategoryId ZnodeCategoryId,@PublishCatalogId ZnodeCatalogId
																		,THR.PublishParentCategoryId TempZnodeParentCategoryIds,ZPC.CatalogName ,
																		 ISNULL(DisplayOrder, '0') DisplayOrder,@LocaleIdIn LocaleId,ActivationDate 
																		 ,ExpirationDate,TBC.IsActive,ISNULL(CategoryName, '') Name,ProfileId TempProfileIds,ISNULL(PublishProductId, '') TempProductIds,ISNULL(CategoryCode,'') CategoryCode 
                        FROM @TBL_PublishPimCategoryIdsLatest TBPC 
						INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId= @PublishCatalogId)
						INNER JOIN ZnodePublishCAtegory THR ON (THR.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId AND THR.PimCategoryId = TBPC.PimCategoryId AND THR.PublishCatalogId= @PublishCatalogId )
						INNER JOIN @TBL_PimCategoryIds TBC ON(TBC.PimCategoryId = TBPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId) 
						WHERE TBPC.PublishCategoryId = TBPCO.PublishCategoryId 
						AND TBPC.LocaleId = @localeIdIn
						FOR XML PATH('')) CategoryXml 
						FROM @TBL_PublishPimCategoryIdsLatest TBPCO 
						WHERE LocaleId = @localeIdIn),

                     Cte_CategoryAttributeXml
                     AS (SELECT PublishCatalogLogId, CTCX.PublishCategoryId,'<CategoryEntity>'+ISNULL(CategoryXml, '')+ISNULL((SELECT(SELECT TBA.AttributeCode,TBA.AttributeName,ISNULL(IsUseInSearch, 0) IsUseInSearch,
                        ISNULL(IsHtmlTags, 0) IsHtmlTags,ISNULL(IsComparable, 0) IsComparable,(SELECT ''+TBAV.CategoryValue FOR XML PATH('')) AttributeValues,TBA.AttributeTypeName FROM @TBL_AttributeValue TBAV
                        INNER JOIN @TBL_AttributeIds TBA ON(TBAV.PimAttributeId = TBA.PimAttributeId) LEFT JOIN ZnodePimFrontendProperties ZPFP ON(ZPFP.PimAttributeId = TBA.PimAttributeId)
                        WHERE CTCX.PimCategoryId = TBAV.PimCategoryId AND TBAO.PimAttributeId = TBA.PimAttributeId FOR XML PATH('AttributeEntity'), TYPE) FROM @TBL_AttributeIds TBAO
                        FOR XML PATH('Attributes')), '')+'</CategoryEntity>' CategoryXMl FROM Cte_CategoryXML CTCX)

                     INSERT INTO @TBL_CategoryXml(PublishCategoryId,CategoryXml,LocaleId,PublishCatalogLogId)
                     SELECT PublishCategoryId,CategoryXml,@localeIdIn LocaleId,PublishCatalogLogId 
					 FROM Cte_CategoryAttributeXml;
                   
				     DELETE FROM @TBL_AttributeIds;
                     DELETE FROM @TBL_AttributeDefault;
                     DELETE FROM @TBL_AttributeValue;
                     SET @Counter = @Counter + 1;
                 END;

	
			IF @PimCategoryHierarchyId > 0 
			Begin 
				Select PublishCategoryId ,PublishCatalogLogId VersionId	, @PimCatalogId PimCatalogId	, LocaleId
				into #OutPublish  
				FROM @TBL_CategoryXml  
				  

				Alter TABLE #OutPublish ADD Id int Identity 

				SET @MaxId =(SELECT COUNT(*) FROM #OutPublish);
				--SET @PimCategoryIds = SUBSTRING((SELECT ','+CAST(PimCategoryId AS VARCHAR(50)) FROM @TBL_PublishPimCategoryIds FOR XML PATH('')), 2, 4000);
				Declare @ExistingPublishCategoryId  nvarchar(max), @PublishCategoryId  int 
				SET @Counter =1 
				WHILE @Counter <= @MaxId -- Loop on Locale id 
				BEGIN
					SELECT @VersionId = VersionId  ,
					@PublishCategoryId = PublishCategoryId 
					from #OutPublish where Id = @Counter

					SELECT @ExistingPublishCategoryId  = PublishCategoryId 
					FROM ZnodePublishCatalogLog ZPCL 
					where ZPCL.PublishCatalogLogId = @VersionId  and IsCategoryPublished =1 

			IF NOT EXISTS (SELECT TOP 1 1 FROM Split(@ExistingPublishCategoryId  , ',') SP WHERE SP.Item = Convert(nvarchar(50),  @PublishCategoryId) )
					BEGIN
					
						If Isnull(@ExistingPublishCategoryId,'')  = '' 
							SET @ExistingPublishCategoryId  = Convert(nvarchar(100),@PublishCategoryId )
						else 
							SET @ExistingPublishCategoryId  = Isnull(@ExistingPublishCategoryId,'') + ',' +  Convert(nvarchar(100),@PublishCategoryId )

							
				
						UPDATE ZnodePublishCatalogLog SET PublishCategoryId = @MaxId ,
						ModifiedDate = @GetDate
						WHERE PublishCatalogLogId = @VersionId;
					END
					DELETE FROM ZnodePublishedXml where  IsCategoryXML =1  and  PublishCataloglogId = @VersionId  and  PublishedId = @PublishCategoryId 
					SET @Counter  = @Counter  + 1  
				END
			END 
			ElSE
			Begin
				 UPDATE ZnodePublishCatalogLog 
				 SET PublishCategoryId = (SELECT COUNT(PublishCategoryId)  FROM @TBL_CategoryXml
				 GROUP BY PublishCategoryId																				
				 ), IsCategoryPublished = 1 WHERE PublishCatalogLogId = @VersionId;

				 DELETE FROM ZnodePublishedXml WHERE PublishCataloglogId = @VersionId;
             End
             
			 INSERT INTO ZnodePublishedXml (PublishCatalogLogId,PublishedId,PublishedXML,IsCategoryXML,IsProductXML,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             SELECT PublishCatalogLogId PublishCataloglogId,PublishCategoryId,CategoryXml,1,0,LocaleId,@UserId,@GetDate,@UserId,@GetDate 
			 FROM @TBL_CategoryXml 

	
			 Select Distinct PublishCategoryId from @TBL_DeletedPublishCategoryIds
			 UNION
			--not published parentcategory
			SELECT DISTINCT PublishCategoryId FROM ZnodePublishCategory A
			INNER JOIN @TBL_PimCategoryIds B ON (A.PimCategoryId = B.PimCategoryId)
			WHERE A.PublishCatalogId = @PublishCataLogId AND B.PimCategoryHierarchyId = A.PimCategoryHierarchyId
			--UNION
			--SELECT DISTINCT PublishCategoryId from ZnodePublishCategory A
			--INNER JOIN @TBL_PimCategoryIds B ON (A.PimParentCategoryId = B.PimCategoryId)
			--WHERE
			--A.PublishCatalogId =@PublishCataLogId

			 SELECT CategoryXml 
			 FROM @TBL_CategoryXml 
			
			 UPDATE ZnodePimCategory SET IsCategoryPublish =1,PublishStateId = @PublishStateId WHERE pimCategoryId IN (SELECT PimCategoryId FROM @TBL_PimCategoryIds)
             COMMIT TRAN GetPublishCategory;
			 
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE();
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPublishCategoryGroup @PublishCatalogId = '+CAST(@PublishCatalogId AS VARCHAR(50))+',@UserId ='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(50));
             SET @Status = 0;
             ROLLBACK TRAN GetPublishCategory;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_GetPublishCategoryGroup',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;

	 GO


IF NOT EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodePimCatalogCategory' AND COLUMN_NAME = 'IsNewlyAdded')
BEGIN 
ALTER TABLE [dbo].[ZnodePimCatalogCategory]
    ADD [IsNewlyAdded] BIT CONSTRAINT [DF_ZnodePimCatalogCategory_IsNewlyAdded] DEFAULT ((1)) NOT NULL;
END

GO

update ZnodeApplicationSetting 
set setting = '<?xml version="1.0" encoding="utf-16"?><columns><column><id>1</id><name>ProductId</name><headertext>Checkbox</headertext><width>20</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>y</ischeckbox><checkboxparamfield>ProductId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>2</id><name>Image</name><headertext>Product Image</headertext><width>20</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>ProductId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield>ImagePath,ProductName</imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class>imageicon</Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>3</id><name>ProductName</name><headertext>Product Name</headertext><width>60</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class>product-name</Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>4</id><name>Price</name><headertext>Price</headertext><width>60</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class>product-price</Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>5</id><name>SKU</name><headertext>SKU</headertext><width>30</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>SKU</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class>product-sku</Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>6</id><name>DisplayOrder</name><headertext>Display Order</headertext><width>30</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>y</musthide><maxlength>3</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>y</iscontrol><controltype>Text</controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>7</id><name>IsNewlyAdded</name><headertext>Newly Added</headertext><width>30</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>y</musthide><maxlength>3</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>y</iscontrol><controltype>Text</controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class>product-isnew</Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>8</id><name>Manage</name><headertext>Action</headertext><width>30</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format>Edit</format><isvisible>n</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Edit</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl>/Catalog/UpdateCatalogCategoryProduct</manageactionurl><manageparamfield>ProductId,PimCatalogId,PimCategoryHierarchyId</manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column></columns>'
where ItemName = 'ZnodeGetCatalogAssociatedProduct'

GO 

update ZnodePimCatalogCategory
set IsNewlyAdded = CASE WHEN ISNULL( DisplayOrder,1)  > 0 THEN 0 ELSE 1 END 

GO

IF NOT EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeProfileShipping' AND COLUMN_NAME = 'PublishStateId')
BEGIN 
ALTER TABLE [dbo].[ZnodeProfileShipping]  ADD [PublishStateId] TINYINT NULL;
END
GO
IF NOT EXISTS (SELECT * FROM   sys.objects WHERE  type IN( 'F' ) and OBJECT_NAME(parent_object_id) = 'ZnodeProfileShipping' and name ='FK_ZnodeProfileShipping_ZnodePublishState')
BEGIN 
ALTER TABLE [dbo].[ZnodeProfileShipping] 
    ADD CONSTRAINT [FK_ZnodeProfileShipping_ZnodePublishState] FOREIGN KEY ([PublishStateId]) REFERENCES [dbo].[ZnodePublishState] ([PublishStateId]);
END
GO

IF NOT EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeProfilePaymentSetting' AND COLUMN_NAME = 'PublishStateId')
BEGIN 
ALTER TABLE [dbo].[ZnodeProfilePaymentSetting]  ADD [PublishStateId] TINYINT NULL;
END
GO
IF NOT EXISTS (SELECT * FROM   sys.objects WHERE  type IN( 'F' ) and OBJECT_NAME(parent_object_id) = 'ZnodeProfilePaymentSetting' and name ='FK_ZnodeProfilePaymentSetting_ZnodePublishState')
BEGIN 
ALTER TABLE [dbo].[ZnodeProfilePaymentSetting] 
    ADD CONSTRAINT [FK_ZnodeProfilePaymentSetting_ZnodePublishState] FOREIGN KEY ([PublishStateId]) REFERENCES [dbo].[ZnodePublishState] ([PublishStateId]);
END
GO

Update ZnodeProfilePaymentSetting
SET PublishStateId = (SELECT TOP 1 PublishStateId  FROM ZnodePublishState  WHERE DisplayName = 'Production')

GO

Update ZnodeProfileShipping
SET PublishStateId = (SELECT TOP 1 PublishStateId  FROM ZnodePublishState  WHERE DisplayName = 'Production')

GO

IF NOT EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeOmsOrderShipment' AND COLUMN_NAME = 'DisplayName')
BEGIN 
ALTER TABLE [dbo].[ZnodeOmsOrderShipment]  ADD [DisplayName] NVARCHAR(1200) NULL;
END
GO

IF NOT EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeOmsOrderDetails' AND COLUMN_NAME = 'DisplayName')
BEGIN 
ALTER TABLE [dbo].[ZnodeOmsOrderDetails]  ADD [DisplayName] NVARCHAR(1200) NULL;
END
GO

UPDATE a
SET a.DisplayName = b.DisplayName
FROM ZnodeOmsOrderDetails a
INNER JOIN ZnodeAddress b ON (a.AddressId = b.AddressId)

GO
UPDATE a
SET a.DisplayName = b.DisplayName
FROM ZnodeOmsOrderShipment a
INNER JOIN ZnodeAddress b ON (a.AddressId = b.AddressId)

GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetCatalogCategoryProducts')
BEGIN 
	DROP PROCEDURE Znode_GetCatalogCategoryProducts
END
GO

CREATE PROCEDURE [dbo].[Znode_GetCatalogCategoryProducts]
( 
  @WhereClause      XML,
  @Rows             INT           = 100,
  @PageNo           INT           = 1,
  @Order_BY         VARCHAR(1000) = 'DisplayOrder asc',
  @RowsCount        INT OUT,
  @LocaleId         INT           = 1,
  @PimCategoryId    INT           = 0,
  @PimCatalogId     INT           = 0,
  @IsAssociated     BIT           = 0,
  @ProfileCatalogId INT           = 0,
  @AttributeCode   VARCHAR(max) = '',
  @PimCategoryHierarchyId INT =0,
  @PortalId INT=0
  )
AS
   
/*
	   Summary:  Get product List  Catalog / category / respective product list   		   
	   Unit Testing   
	   begin tran
	   declare @p7 int = 0  
	   EXEC Znode_GetCatalogCategoryProducts @WhereClause=N'',@Rows=10,@PageNo=1,@Order_By=N'',
	   @RowsCount=@p7 output,@PimCategoryId=11,@PimCatalogId = 1 ,@LocaleId=1 ,@ProfileCatalogId = 1 
	   rollback tran
	  
    */

     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY
             DECLARE @DefaultAttributeFamily INT= dbo.Fn_GetDefaultPimProductFamilyId(), @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId(), @OrderId INT= 0;
             DECLARE @SQL VARCHAR(MAX), 
					 @PimProductId TransferId,--VARCHAR(MAX)= '', 
					 @PimAttributeId VARCHAR(MAX),
					 @OutPimProductIds VARCHAR(max);
             DECLARE @TransferPimProductId TransferId 

			 DECLARE @tbl_ProductPricingSku TABLE (sku nvarchar(200),RetailPrice numeric(28,6),SalesPrice numeric(28,6),TierPrice numeric(28,6),
			 TierQuantity numeric(28,6),CurrencyCode varchar(200),CurrencySuffix varchar(2000),CultureCode varchar(2000), ExternalId NVARCHAR(2000)
			 ,Custom1 NVARCHAR(MAX), Custom2 NVARCHAR(MAX), Custom3 NVARCHAR(MAX))				

			 DECLARE @TBL_PimMediaAttributeId TABLE (PimAttributeId INT ,AttributeCode VARCHAR(600))
			 INSERT INTO @TBL_PimMediaAttributeId (PimAttributeId,AttributeCode)
			 SELECT PimAttributeId,AttributeCode FROM Dbo.Fn_GetProductMediaAttributeId ()

		
             DECLARE @TBL_AttributeDefaultValue TABLE
             (
				  PimAttributeId            INT,
				  AttributeDefaultValueCode VARCHAR(100),
				  IsEditable                BIT,
				  AttributeDefaultValue     NVARCHAR(MAX),
				  DisplayOrder INT 
             );
             DECLARE @TBL_AttributeDetails AS TABLE
             (
				  PimProductId   INT,
				  AttributeValue NVARCHAR(MAX),
				  AttributeCode  VARCHAR(600),
				  PimAttributeId INT
				  
             );
             DECLARE @FamilyDetails TABLE
             (
				  PimProductId         INT,
				  PimAttributeFamilyId INT,
				  FamilyName           NVARCHAR(3000)
             );
             DECLARE @TBL_AttributeValue TABLE
             (
				  PimCategoryAttributeValueId INT,
				  PimCategoryId               INT,
				  CategoryValue               NVARCHAR(MAX),
				  AttributeCode               VARCHAR(300),
				  PimAttributeId              INT
             );
             IF @Order_By = ''
                 BEGIN
                     SET @Order_By = 'DisplayOrder asc'
                 END;
            
			 
             IF @PimCatalogId = 0
                 BEGIN
					INSERT INTO @TransferPimProductId 
                    SELECT PimProductId 
                    FROM ZnodePimCategoryProduct AS ZCP
                    WHERE ZCP.PimCategoryId = @PimCategoryId
					AND PimProductId IS NOT NULL 
                                                   
                 END;
             ELSE
                 BEGIN
				 
                     IF @IsAssociated = 0
                        AND @ProfileCatalogId > 0
                         BEGIN
				INSERT INTO @TransferPimProductId 
                SELECT DISTINCT PimProductId 
                FROM ZnodePimCatalogCategory AS ZCP
                WHERE ZCP.PimCatalogId = @PimCatalogId
             
				AND ZCP.PimCategoryHierarchyId = @PimCategoryHierarchyId 
                AND NOT EXISTS
                (
                    SELECT TOP 1 1
                    FROM ZnodeProfileCatalogCategory AS TBPCC
                    WHERE TBPCC.PimCatalogCategoryId = ZCP.PimCatalogCategoryId
                        AND TBPCC.ProfileCatalogId = @ProfileCatalogId
                )
               	AND PimProductId IS NOT NULL                                         
                        END;
                     ELSE
                         BEGIN
                             IF @IsAssociated = 1
                                AND @ProfileCatalogId > 0
                                 BEGIN
						INSERT INTO @TransferPimProductId 
                        SELECT PimProductId
                        FROM ZnodePimCatalogCategory AS ZCP
                        WHERE ZCP.PimCatalogId = @PimCatalogId
                            AND ZCP.PimCategoryHierarchyId = @PimCategoryHierarchyId
                            AND EXISTS
                        (
                            SELECT TOP 1 1
                            FROM ZnodeProfileCatalogCategory AS TBPCC
                            WHERE TBPCC.PimCatalogCategoryId = ZCP.PimCatalogCategoryId
                                AND TBPCC.ProfileCatalogId = @ProfileCatalogId
                        )
                       AND PimProductId IS NOT NULL                                             
                                     SET @IsAssociated = 0;
                                 END;
                             ELSE
                                 BEGIN
					INSERT INTO @TransferPimProductId 
                    SELECT DISTINCT PimProductId 
                    FROM ZnodePimCatalogCategory AS ZCP
                    WHERE ZCP.PimCatalogId = @PimCatalogId
                 
					AND ZCP.PimCategoryHierarchyId = @PimCategoryHierarchyId 
				    AND PimProductId IS NOT NULL  
		
                                   
                                 END;
                         END;
                 END;
				
				 IF NOT EXISTS (SELECT TOP 1 1 FROM @TransferPimProductId)
				 BEGIN 
                  INSERT INTO @TransferPimProductId
				  SELECT '0'

				 END 

				 
             DECLARE @ProductIdTable TABLE
             ([PimProductId] INT,
              [CountId]      INT,
              PimCategoryId  INT,
              RowId          INT IDENTITY(1,1)
             );
            DECLARE  @ProductListIdRTR TransferId
	 DECLARE @TAb Transferid 
	 DECLARE @tBL_mainList TABLE (Id INT,RowId INT)
	  
	 SET @IsAssociated = CASE WHEN @IsAssociated = 0 THEN 1  
					 WHEN @IsAssociated = 1 THEN 0 END 
	

	 INSERT INTO @ProductListIdRTR
	 EXEC Znode_GetProductList  @IsAssociated,@TransferPimProductId
	 


	 IF CAST(@WhereClause AS NVARCHAR(max))<> N''
	 BEGIN 
	 
	  SET @SQL = 'SELECT PimProductId FROM ##Temp_PimProductId'+CAST(@@SPID AS VARCHAR(500))

	  EXEC Znode_GetFilterPimProductId @WhereClause,@ProductListIdRTR,@localeId
	  
      INSERT INTO @TAB 
	  EXEC (@SQL)
	
	 END 
	 
	 
	 IF EXISTS (SELECT Top 1 1 FROM @TAb ) OR CAST(@WhereClause AS NVARCHAR(max)) <> N''
	 BEGIN 
	 
		 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
		
		 INSERT INTO @TBL_MainList(id,RowId)
		 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @TAb ,@AttributeCode,@localeId,
		 @PimCategoryHierarchyId=@PimCategoryHierarchyId ,@PortalId=@PortalId
	 
		 END 
	 ELSE 
	 BEGIN
	      
	 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
	 
	 INSERT INTO @TBL_MainList(id,RowId)
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @ProductListIdRTR ,@AttributeCode,@localeId,
	 @PimCategoryHierarchyId=@PimCategoryHierarchyId ,@PortalId=@PortalId 
	 
	 END 

	
	
			 INSERT INTO @ProductIdTable
             (PimProductId) 
			 SELECT id 
			 FROM @TBL_MainList 
            
			 UPDATE @ProductIdTable
               SET
                   PimCategoryId = @PimCategoryId;
            
			 INSERT INTO @PimProductId  ( Id )
			 SELECT PimProductId FROM @ProductIdTable

             SET @PimAttributeId = SUBSTRING((SELECT ','+CAST(PimAttributeId AS VARCHAR(50)) FROM [dbo].[Fn_GetGridPimAttributes]() FOR XML PATH('')), 2, 4000);
             
			 DECLARE @PimAttributeIds TransferId  
			 INSERT INTO @PimAttributeIds
			 SELECT PimAttributeId  
			 FROM [dbo].[Fn_GetProductGridAttributes]()
		
			 
			
			 INSERT INTO @TBL_AttributeDefaultValue (PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder)   
			 EXEC Znode_GetAttributeDefaultValueLocale @PimAttributeId,@LocaleId;
          
			 INSERT INTO @TBL_AttributeDetails (PimProductId,AttributeValue,AttributeCode,PimAttributeId)
             EXEC Znode_GetProductsAttributeValue @PimProductId,@PimAttributeId,@localeId;
			  
             SET @PimAttributeId = [dbo].[Fn_GetCategoryNameAttributeId]();
			 
             INSERT INTO @TBL_AttributeValue (PimCategoryAttributeValueId,PimCategoryId,CategoryValue,AttributeCode,PimAttributeId)
             EXEC [dbo].[Znode_GetCategoryAttributeValue] @PimCategoryId,@PimAttributeId,@LocaleId;
         
		    ;WITH Cte_ProductMedia
               AS (SELECT TBA.PimProductId , TBA.PimAttributeId 
			   , SUBSTRING( ( SELECT ','+ISNULL(ZMC.CDNURL,ZMC.URL)+ZMSM.ThumbnailFolderName+'/'+ zm.PATH 
			   FROM ZnodeMedia AS ZM
               INNER JOIN ZnodeMediaConfiguration ZMC  ON (ZM.MediaConfigurationId = ZMC.MediaConfigurationId)
			   INNER JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMC.MediaServerMasterId)
			   INNER JOIN @TBL_AttributeDetails AS TBAI ON (TBAI.AttributeValue  = CAST(ZM.MediaId AS VARCHAR(50)) )
			   INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBAI.PimATtributeId)
			   WHERE TBAI.PimProductId = TBA.PimProductId AND TBAI.PimAttributeId = TBA.PimAttributeId 
			   FOR XML PATH('') ), 2 , 4000) AS AttributeValue 
			   FROM @TBL_AttributeDetails AS TBA 
			   INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBA.PimATtributeId ))
                          
		      UPDATE TBAV SET AttributeValue = CTPM.AttributeVALue
			  FROM @TBL_AttributeDetails TBAV 
			  INNER JOIN Cte_ProductMedia CTPM ON CTPM.PimProductId = TBAV.PimProductId  AND CTPM.PimAttributeId = TBAV.PimAttributeId 
			  AND CTPM.PimAttributeId = TBAV.PimAttributeId;
			    
             INSERT INTO @FamilyDetails (PimAttributeFamilyId,PimProductId)
             EXEC [dbo].[Znode_GetPimProductAttributeFamilyId] @PimProductId,1;

             UPDATE a
             SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
             INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                  AND LocaleId = @LocaleId);
             UPDATE a
             SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
             INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                  AND LocaleId = @DefaultLocaleId)
             WHERE a.FamilyName IS NULL
                   OR a.FamilyName = '';

				

             SELECT zpp.PimProductid AS ProductId,zpp.PimProductId,@PimCatalogId AS PimCatalogId,zpp.PimCategoryId,[ProductName],
			 ProductType,ISNULL(zf.FamilyName, '') AS AttributeFamily,[SKU],[Price],[Quantity],
                    CASE
                        WHEN Piv.[IsActive] IS NULL
                        THEN CAST(0 AS BIT)
                        ELSE CAST(Piv.[IsActive] AS BIT)
                    END AS [IsActive],
                    piv.[ProductImage] ImagePath,
                    [Assortment],
                    TBAV.CategoryValue AS [CategoryName],
                    @LocaleId AS LocaleId,
                    ZCC.[DisplayOrder],
                    ZPCC.ProfileCatalogCategoryId,
                    zpp.RowId,
					ZCC.PimCategoryHierarchyId
					,CASE
                        WHEN ZCC.IsNewlyAdded IS NULL
                        THEN CAST(0 AS BIT)
                        ELSE CAST(ZCC.IsNewlyAdded AS BIT)
                    END AS IsNewlyAdded
			 INTO #temp_ProductDetails 
             FROM @ProductIdTable AS zpp
			 INNER JOIN @TBL_MainList TMM ON (TMM.Id = zpp.PimProductId)
                  LEFT JOIN @FamilyDetails AS zf ON(zf.PimProductId = zpp.PimProductId)
                  INNER JOIN
             (
                 SELECT PimProductId,
                        AttributeValue,
                        AttributeCode
                 FROM @TBL_AttributeDetails
             ) TB PIVOT(MAX(AttributeValue) FOR AttributeCode IN([ProductName],
                                                                 [SKU],
                                                                 [Price],
                                                                 [Quantity],
                                                                 [IsActive],
                                                                 [ProductType],
                                                                 [ProductImage],
                                                                 [Assortment],
                                                                 [DisplayOrder])) AS Piv ON(Piv.PimProductId = zpp.PimProductid)
                  LEFT JOIN @TBL_AttributeValue AS TBAV ON(TBAV.PimCategoryId = ZPP.PimCategoryId)
                  LEFT JOIN ZnodePimCategoryProduct AS ZPCP ON(ZPCP.PimProductId = Zpp.PimProductId
                                                               AND ZPCP.PimCategoryId = Zpp.PimCategoryId)
                  LEFT JOIN ZnodePimCatalogCategory AS ZCC ON(ZCC.PimProductId = Zpp.PimProductId
                                                             AND ZCC.PimCategoryHierarchyId = @PimCategoryHierarchyId
                                                              AND ZCC.PimCatalogId = @PimCatalogId)
                  LEFT JOIN ZnodeProfileCatalogCategory AS ZPCC ON(ZPCC.PimCatalogCategoryId = ZCC.PimCatalogCategoryId
                                                                   AND ZPCC.ProfileCatalogId = @ProfileCatalogId)
                  
            ORDER BY zpp.RowId

			DECLARE @SKUS VARCHAR(max) 
			,@userId INT = 0,@Date DATETIME  = dbo.FN_getDate() 

			SELECT @SKUS = COALESCE(@SKUS+',' ,'') + SKU
			FROM #temp_ProductDetails
			 				
			INSERT INTO @tbl_ProductPricingSku		
			EXEC Znode_GetPublishProductPricingBySku 	@SKU=@SKUS, @PortalId= @PortalId,@Userid= @userid ,@currentUtcDate=	@Date
			
			SELECT DISTINCT ProductId, PimProductId	,PimCatalogId,	PimCategoryId,	ProductName	,ProductType,	
			AttributeFamily,	a.SKU	,dbo.Fn_GetPortalCurrencySymbol(@portalId)+CAST(Dbo.Fn_GetDefaultPriceRoundOff(RetailPrice) AS NVARCHAR(max)) Price,	Quantity,	
			IsActive,	ImagePath,	Assortment,	CategoryName,	LocaleId,	DisplayOrder	,ProfileCatalogCategoryId,	RowId,	PimCategoryHierarchyId	,IsNewlyAdded
			FROM #temp_ProductDetails a 
			LEFT JOIN @tbl_ProductPricingSku b ON (dbo.FN_TRIM(b.SKU) = a.SKU )
			ORDER BY RowId
					  
     IF EXISTS (SELECT Top 1 1 FROM @TAb )
	 BEGIN 

		  SELECT @RowsCount = (SELECT COUNT(1) FROM @TAb) 
	 END 
	 ELSE 
	 BEGIN
	 		  SELECT @RowsCount =(SELECT COUNT(1) FROM @ProductListIdRTR)   
	 END 
	

         END TRY
         BEGIN CATCH
		    SELECT ERROR_message()
             DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetCatalogCategoryProducts @WhereClause = '''+ISNULL(CAST(@WhereClause AS VARCHAR(MAX)),'''''')+''',@Rows='+ISNULL(CAST(@Rows AS
			VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')+',
			@LocaleId = '+ISNULL(CAST(@LocaleId AS VARCHAR(50)),'''')+',@PimCategoryId='+ISNULL(CAST(@PimCategoryId AS VARCHAR(50)),'''')+',@PimCatalogId='+ISNULL(CAST(@PimCatalogId AS VARCHAR(50)),'''')+',@IsAssociated='+ISNULL(CAST(@IsAssociated AS VARCHAR(50)),'''')+',
			@ProfileCatalogId='+ISNULL(CAST(@ProfileCatalogId AS VARCHAR(50)),'''')+',@AttributeCode='''+ISNULL(CAST(@AttributeCode AS VARCHAR(50)),'''''')+''',@PimCategoryHierarchyId='+ISNULL(CAST(@PimCategoryHierarchyId AS VARCHAR(10)),'''');
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetCatalogCategoryProducts',
				@ErrorInProcedure = 'Znode_GetCatalogCategoryProducts',
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;

	 GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_UpdateCategoryProductDisplayOrder')
BEGIN 
	DROP PROCEDURE Znode_UpdateCategoryProductDisplayOrder
END
GO
	 CREATE   PROCEDURE [dbo].[Znode_UpdateCategoryProductDisplayOrder]       
(      
 @JSONString NVARCHAR(max)= '[]'      
,@PimCategoryHierarchyId INT   
,@PageNo INT = 0 
,@ProductIds VARCHAR(max) ='' 
,@Status BIT = 0 out    
)      
      
AS      
BEGIN       
 BEGIN TRY       
  SET NOCOUNT ON       
    DECLARE @TBL_PimProductId TABLE (PimProductId INT, RowId INT IDENTITY(1,1)  )      
          
      
      
    INSERT INTO @TBL_PimProductId (PimProductId)      
    EXEC [dbo].[Znode_GetJSONTableData] @JSONString , 'Id'      
      
    SET  @PageNo = ISNULL(@PageNo,0)  
      
 UPDATE ZPCC      
 SET ZPCC.DisplayOrder =  CASE WHEN @PageNo = 0  THEN RowId ELSE     
   CASE WHEN LEN(RowId) > 1 THEN CAST(@PageNo-1 +LEFT(RowId , LEN(RowId)-1) AS VARCHAr(1000)) +RIGHT(CAST(RowId AS VARCHAr(1000)),1)   ELSE CAST(@PageNo-1 AS VARCHAr(1000)) + RIGHT(CAST(RowId AS VARCHAr(1000)),1) END   
  END     
 FROM ZnodePimCatalogCategory ZPCC       
 INNER JOIN @TBL_PimProductId TBLP ON (TBLP.PimProductId = ZPCC.PimProductId)      
 WHERE ZPCC.PimCategoryHierarchyId = @PimCategoryHierarchyId    
      
   IF(@ProductIds!='')
	BEGIN
		UPDATE ZnodePimCatalogCategory
		SET IsNewlyAdded = 0
		WHERE PimCategoryHierarchyId = @PimCategoryHierarchyId 
		AND PimProductId IN (SELECT item FROM dbo.Split(@ProductIds,',') ) 
	END

  SELECT 1 AS ID , CAST(1 AS BIT) AS [Status];    
 SET @Status = 1       
        
         
 END TRY       
 BEGIN CATCH       
  SELECT ERROR_MESSAGE()      
   SELECT 0 AS ID , CAST(0 AS BIT) AS [Status];    
  SET @Status = 0      
 END CATCH       
END
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPaymentSetting')
BEGIN 
	DROP PROCEDURE Znode_GetPaymentSetting
END
GO
CREATE PROCEDURE [dbo].[Znode_GetPaymentSetting]
(
  @WhereClause  NVARCHAR(Max)  = '',
  @Rows         INT            = 100,
  @PageNo       INT            = 1,
  @Order_BY     VARCHAR(1000)  = ' DisplayOrder ASC',
  @RowsCount    INT OUT            ,
  @PortalId     INT            = 0 ,
  @ProfileId    INT            = 0 ,
  @UserId       INT			   = 0 ,
  @IsAssociated INT            = 0
)
AS
 /*
   Summary :- This procedure is used to get the associated and Unassociated list of paymentsetting for portal and profile

   Unit Testing

   DECLARE @profilei int = 0
   EXEC Znode_GetPaymentSetting @WhereClause = '', @RowsCount =  @profilei OUT ,@PortalId = 0 ,@ProfileId= 0 ,@IsAssociated = 0 ,@UserId= 0  SELECT  @profilei

 */
 BEGIN
  BEGIN TRY
   SET NOCOUNT ON
     DECLARE @SQL NVARCHAR(MAX)= '',@FilterWhereClause VARCHAR(2000) = '' ,@InternalOrderBy VARCHAR(2000)= ''

	 DECLARE @TBL_PaymentSetting TABLE (PaymentSettingId INT, PaymentApplicationSettingId INT,PaymentTypeId INT,PaymentGatewayId INT
										,PaymentName VARCHAR(600),IsActive BIT,DisplayOrder INT,IsTestMode BIT,IsPoDocUploadEnable BIT
										,IsPoDocRequire BIT,CreatedBy INT,CreatedDate DATETIME,ModifiedBy INT,ModifiedDate DATETIME
										,PortalId INT,StoreName NVARCHAR(max),IsAssociated BIT,ProfileId int,ProfileName NVARCHAR(200),PaymentTypeName VARCHAr(500),GatewayName VARCHAR(300),RowId INT,CountNo INT
										,PaymentDisplayName nvarchar(1200),PaymentExternalId VARCHAR(100),IsApprovalRequired BIT,PaymentCode VARCHAR(200),GatewayCode VARCHAR(200),IsCallToPaymentAPI BIT,IsBillingAddressOptional Bit,IsOABRequired BIT,PortalPaymentGroupId INT,ApplicationType VARCHAR(50) )


     IF ISNULL(@UserId,0) <> 0  OR (ISNULL(@PortalId,0) > 0 AND ISNULL(@ProfileId,0) > 0)
	 BEGIN
	  DECLARE  @PortalIds VARCHAR(2000) = '' ,@ProfileIds VARCHAR(2000) = '' ,@PaymentSettingIds VARCHAR(2000)
	  IF ISNULL(@UserId,0) <> 0
	  BEGIN
	  SET @PortalIds = @PortalId
	  EXEC Znode_GetUserPortalAndProfile @UserId ,@PortalIds OUT,@ProfileIds OUT
	  END
	  ELSE
	  BEGIN
	   SET @PortalIds = @PortalId
	   SET @ProfileIds = @ProfileId

	  END
	  SET @ProfileIds = CASE WHEN CAST(@ProfileId AS VARCHAr(200))  <= '0' AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodeProfilePaymentSetting WHERE ProfileId = @ProfileId) THEN @ProfileIds ELSE CAST(@ProfileId AS VARCHAr(200)) END 
	  EXEC Znode_GetCommonPaymentSetting @PortalIds,@ProfileIds,@PaymentSettingIds OUT

	  SET @FilterWhereClause = ' AND  PaymentSettingId IN ('+ISNULL(@PaymentSettingIds,'0')+') '

	 END

	 SELECT PaymentSettingId ,ZPPG.PortalPaymentGroupId,ZPA.PortalId 
	 INTO #ZnodePortalPaymentApprovers
	 FROM ZnodePortalPaymentApprovers ZPPA 
	 INNER JOIN [ZnodePortalPaymentGroup] ZPPG ON( ZPPA.PortalPaymentGroupId = ZPPG.PortalPaymentGroupId)  
     INNER JOIN [ZnodePortalApproval] ZPA ON (ZPA.PortalApprovalId = ZPPG.PortalApprovalId) 
	 WHERE  ZPA.EnableApprovalManagement =1 AND ZPA.PortalId = @PortalId AND ZPPG.isActive = 1 



	IF ISNULL(@PortalId,0) > 0 AND (   ISNULL(@ProfileId,0) = 0)
	BEGIN
	 SET @SQL = '
	             ;With Cte_PaymentSetting AS
				 (
				 SELECT  ZPS.PaymentSettingId,ZPS.PaymentApplicationSettingId,ZPS.PaymentTypeId,ZPS.PaymentGatewayId,ZPS.PaymentName,ZPS.IsActive
						,ZPS.DisplayOrder,ZPS.IsTestMode,ZPS.IsPoDocUploadEnable,ZPS.IsPoDocRequire,ZPS.CreatedBy,ZPS.CreatedDate,ZPS.ModifiedBy,ZPS.ModifiedDate
						,ZP.PortalId,ZP.StoreName, CASE WHEN ZPPS.PortalPaymentId IS NULL THEN 0 ELSE 1 END IsAssociated, NULL ProfileId, NULL ProfileName,ZPT.BehaviourType PaymentTypeName,ZPG.GatewayName
						, CASE WHEN ZPPS.PaymentDisplayName IS NULL OR ZPPS.PaymentDisplayName = ''''  THEN ZPS.PaymentDisplayName ELSE ZPPS.PaymentDisplayName END   PaymentDisplayName,  ZPPS.PaymentExternalId ,
						 CASE WHEN YU.PaymentSettingId IS NOT NULL  THEN 1 ELSE 0 END AS IsApprovalRequired , ZPS.PaymentCode, ZPG.GatewayCode,ZPT.IsCallToPaymentAPI, ZPS.IsBillingAddressOptional,ISNULL(ZPS.IsOABRequired,0) IsOABRequired
						 ,YU.PortalPaymentGroupId, ISNULL(ZPPOS.DisplayName,''Production'' )  PublishStatus  
				 FROM ZnodePaymentSetting ZPS
				 INNER JOIN ZnodePaymentType  ZPT ON (ZPT.PaymentTypeId = ZPS.PaymentTypeId)
				 LEFT JOIN ZnodePaymentGateway ZPG ON (ZPG.PaymentGatewayId= ZPS.PaymentGatewayId)
				 LEFT JOIN #ZnodePortalPaymentApprovers YU ON (YU.PaymentSettingId = ZPS.PaymentSettingId)
				 CROSS APPLY ZnodePortal ZP
				 LEFT JOIN ZnodePortalPaymentSetting ZPPS on ( ZPPS.PortalId = ZP.PortalId AND ZPPS.PaymentSettingId = ZPS.PaymentSettingId)
				 LEFT JOIN ZnodePublishState ZPPOS ON (ZPPOS.PublishStateId = ZPPS.PublishStateId )
				 )

				 '
	 IF @userId <> 0 
	 BEGIN 
		SET @IsAssociated = 1  	
	 END 
	 
	 SET @FilterWhereClause = ' WHERE PortalId = '+CAST(@PortalId AS VARCHAR(50))+'
								AND  IsAssociated = '+CAST(@IsAssociated AS VARCHAR(50))+CASE WHEN @FilterWhereClause = '' THEN ' ' ELSE @FilterWhereClause END 
	 SET @InternalOrderBy = ' PaymentSettingId,PortalId '
    END
	ELSE IF ISNULL(@ProfileId,0) > 0 AND ( ISNULL(@UserId,0) = 0 AND  ISNULL(@PortalId,0) = 0)
	BEGIN
	  SET @SQL = '
	            ;With Cte_PaymenTSetting AS
				 (
				 SELECT  ZPS.PaymentSettingId,ZPS.PaymentApplicationSettingId,ZPS.PaymentTypeId,ZPS.PaymentGatewayId,ZPS.PaymentName,ZPS.IsActive
						,CASE WHEN '+CAST(@ProfileId AS VARCHAR(200))+' >= 0 AND '+CAST(@IsAssociated AS VARCHAR(200))+' = 1 THEN ISNULL(ZPPS.DisplayOrder,ZPS.DisplayOrder) ELSE ZPS.DisplayOrder END AS DisplayOrder,ZPS.IsTestMode,ZPS.IsPoDocUploadEnable,ZPS.IsPoDocRequire,ZPS.CreatedBy,ZPS.CreatedDate,ZPS.ModifiedBy,ZPS.ModifiedDate
						,NULL PortalId,NULL StoreName, CASE WHEN ZPPS.ProfilePaymentSettingId IS NULL THEN 0 ELSE 1 END IsAssociated ,ZP.ProfileId,ZP.ProfileName,ZPT.BehaviourType PaymentTypeName,ZPG.GatewayName
						,ZPS.PaymentDisplayName	, NULL PaymentExternalId,
						 CASE WHEN YU.PaymentSettingId IS NOT NULL  THEN 1 ELSE 0 END AS IsApprovalRequired  , ZPS.PaymentCode, ZPG.GatewayCode,ZPT.IsCallToPaymentAPI, ZPS.IsBillingAddressOptional,0 IsOABRequired,YU.PortalPaymentGroupId
						 , ISNULL(ZPPOS.DisplayName,''Production'' )  PublishStatus 
				 FROM ZnodePaymentSetting ZPS
				 INNER JOIN ZnodePaymentType  ZPT ON (ZPT.PaymentTypeId = ZPS.PaymentTypeId)
				 LEFT JOIN ZnodePaymentGateway ZPG ON (ZPG.PaymentGatewayId= ZPS.PaymentGatewayId)
				 LEFT JOIN #ZnodePortalPaymentApprovers YU ON (YU.PaymentSettingId = ZPS.PaymentSettingId)
				 CROSS APPLY ZnodeProfile ZP
				 LEFT JOIN ZnodeProfilePaymentSetting ZPPS on ( ZPPS.ProfileId = ZP.ProfileId AND ZPPS.PaymentSettingId = ZPS.PaymentSettingId)
				 LEFT JOIN ZnodePortalPaymentSetting ZSTY ON ( ZSTY.PortalId = ZP.PortalId AND ZSTY.PaymentSettingId = ZPS.PaymentSettingId)
				 LEFT JOIN ZnodePublishState ZPPOS ON (ZPPOS.PublishStateId = '+CASE WHEN CAST(@ProfileId AS VARCHAr(200))  <= '0' AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodeProfilePaymentSetting WHERE ProfileId = @ProfileId) THEN 'ZSTY.PublishStateId' ELSE 'ZPPS.PublishStateId' END +'  )
				 )
               '
	   SET @FilterWhereClause = ' WHERE ProfileId = '+CAST(@ProfileId AS VARCHAR(50))+'
									AND  IsAssociated = '+CAST(@IsAssociated AS VARCHAR(50))+CASE WHEN @FilterWhereClause = '' THEN ' ' ELSE @FilterWhereClause END 
	  SET @InternalOrderBy = ' PaymentSettingId,ProfileId '
	END
	ELSE
	BEGIN
	  SET @SQL = '
	            ;With Cte_PaymenTSetting AS
				 (
				 SELECT   ZPS.PaymentSettingId,ZPS.PaymentApplicationSettingId,ZPS.PaymentTypeId,ZPS.PaymentGatewayId,ZPS.PaymentName,ZPS.IsActive
						,ISNULL(YOPU.DisplayOrder, ZPS.DisplayOrder) DisplayOrder,ZPS.IsTestMode,ZPS.IsPoDocUploadEnable,ZPS.IsPoDocRequire,ZPS.CreatedBy,ZPS.CreatedDate,ZPS.ModifiedBy,ZPS.ModifiedDate
						,NULL PortalId,NULL StoreName, NULL IsAssociated ,NULL ProfileId,NULL ProfileName,ZPT.BehaviourType PaymentTypeName,ZPG.GatewayName	
						, ZPS.PaymentDisplayName  , NULL PaymentExternalId, CASE WHEN YU.PaymentSettingId IS NOT NULL  THEN 1 ELSE 0 END AS IsApprovalRequired 
						 , ZPS.PaymentCode, ZPG.GatewayCode,ZPT.IsCallToPaymentAPI ,ZPS.IsBillingAddressOptional,ZPS.IsOABRequired,YU.PortalPaymentGroupId
						 , ISNULL(ZPPOS.DisplayName,''Production'' )  PublishStatus 
				 FROM ZnodePaymentSetting ZPS
				 INNER JOIN ZnodePaymentType  ZPT ON (ZPT.PaymentTypeId = ZPS.PaymentTypeId)
				 LEFT JOIN ZnodePaymentGateway ZPG ON (ZPG.PaymentGatewayId= ZPS.PaymentGatewayId)
				 LEFT JOIN ZnodeProfilePaymentSetting YOPU ON (YOPU.PaymentSettingId = ZPS.PaymentSettingId AND YOPU.ProfileId = '+CAST(@ProfileId AS NVARCHAr(200))+')
				 LEFT JOIN #ZnodePortalPaymentApprovers YU ON (YU.PaymentSettingId = ZPS.PaymentSettingId)
				 LEFT JOIN ZnodePortalPaymentSetting ZSTY ON ( ZSTY.PortalId = ZP.PortalId AND ZSTY.PaymentSettingId = ZPS.PaymentSettingId)
				 LEFT JOIN ZnodePublishState ZPPOS ON (ZPPOS.PublishStateId = '+CASE WHEN CAST(@ProfileId AS VARCHAr(200))  <= '0' AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodeProfilePaymentSetting WHERE ProfileId = @ProfileId) THEN 'ZSTY.PublishStateId' ELSE 'ZPPS.PublishStateId' END +'  )
				  ) '
	 SET @FilterWhereClause = CASE WHEN @FilterWhereClause ='' THEN ' WHERE 1=1 ' ELSE ' WHERE 1=1 '+@FilterWhereClause END
	 SET @InternalOrderBy = ' PaymentSettingId '
	END

	SET @SQL = @SQL+ ', Cte_PaymentSettingFilter AS
				 (

					SELECT PaymentSettingId,PaymentApplicationSettingId,PaymentTypeId,PaymentGatewayId,PaymentName,IsActive
						,DisplayOrder,IsTestMode,IsPoDocUploadEnable,IsPoDocRequire,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
						,PortalId,StoreName, ProfileId, ProfileName , PaymentTypeName,GatewayName,PaymentDisplayName,PaymentExternalId,IsApprovalRequired, PaymentCode, GatewayCode,IsCallToPaymentAPI, IsBillingAddressOptional,IsOABRequired,PortalPaymentGroupId,PublishStatus
						,'+dbo.Fn_GetPagingRowId(@Order_BY,@InternalOrderBy)+',Count(*)Over() CountNo

					FROM Cte_PaymenTSetting
				    '+@FilterWhereClause+'
					'+dbo.Fn_GetFilterWhereClause(@WhereClause)+'
				 )

				 SELECT PaymentSettingId,PaymentApplicationSettingId,PaymentTypeId,PaymentGatewayId,PaymentName,IsActive
						,DisplayOrder,IsTestMode,IsPoDocUploadEnable,IsPoDocRequire,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
						,PortalId,StoreName, ProfileId, ProfileName,PaymentTypeName,GatewayName,PaymentDisplayName,PaymentExternalId,IsApprovalRequired, PaymentCode, GatewayCode,IsCallToPaymentAPI,IsBillingAddressOptional,IsOABRequired,PortalPaymentGroupId,PublishStatus,RowId ,CountNo
				 FROM Cte_PaymentSettingFilter '
				 +[dbo].[Fn_GetPaginationWhereClause](@PageNo,@Rows)

    
	 INSERT INTO @TBL_PaymentSetting (PaymentSettingId,PaymentApplicationSettingId,PaymentTypeId,PaymentGatewayId,PaymentName,IsActive
						,DisplayOrder,IsTestMode,IsPoDocUploadEnable,IsPoDocRequire,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
						,PortalId,StoreName, ProfileId, ProfileName,PaymentTypeName,GatewayName,PaymentDisplayName,PaymentExternalId,IsApprovalRequired, PaymentCode, GatewayCode,IsCallToPaymentAPI,IsBillingAddressOptional,IsOABRequired,PortalPaymentGroupId,ApplicationType,RowID,CountNo)
	 EXEC (@SQL)

	 SET @RowsCount = ISNULL((SELECT Top 1 CountNo FROM @TBL_PaymentSetting),0)
	  
	 SELECT PaymentSettingId,PaymentApplicationSettingId,PaymentTypeId,PaymentGatewayId,PaymentName,IsActive
						,DisplayOrder,IsTestMode,IsPoDocUploadEnable,IsPoDocRequire,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
						,PortalId,StoreName, ProfileId, ProfileName,PaymentTypeName,GatewayName,PaymentDisplayName,PaymentExternalId,IsApprovalRequired, PaymentCode, GatewayCode,IsCallToPaymentAPI, IsBillingAddressOptional,IsOABRequired,PortalPaymentGroupId,ApplicationType
	 FROM @TBL_PaymentSetting
	 order by RowID,DisplayOrder


  END TRY
  BEGIN CATCH
             DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPaymentSetting @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@PortalId='+CAST(@PortalId AS VARCHAR(50))+',@ProfileId='+CAST(@ProfileId AS VARCHAR(50))+',@IsAssociated='+CAST(@IsAssociated AS VARCHAR(50))+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));

             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;

             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetPaymentSetting',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
  END CATCH
 END

 GO
 IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetShippingList')
BEGIN 
	DROP PROCEDURE Znode_GetShippingList
END
GO
CREATE PROCEDURE [dbo].[Znode_GetShippingList]
(
	   @WhereClause nvarchar(max)= ''
	   , @Rows int= 100
	   , @PageNo int= 1
	   , @Order_BY varchar(1000)= ' DisplayOrder ASC'
	   , @RowsCount int OUT
	   , @ProfileId int= 0
	   , @PortalId int= 0
	   , @UserId int= 0
	   , @IsAssociated int= 0
)
AS
/*
  Summary: This Procedure is used to get shipping details According to associated profile.

  Unit Testing:

   DECLARE @profileid int = 0
	EXEC [Znode_GetShippingList]  @WhereClause ='' ,  @ProfileId = 0,@PortalId=1   ,@IsAssociated=0, @RowsCount = @profileid OUT ,@UserId = 4   SELECT @profileid

*/
BEGIN
	BEGIN TRY
		SET NOCOUNT ON;
		DECLARE @SQL nvarchar(max), @FilterWhereClause varchar(2000)= '', @InternalOrderBy varchar(2000)= '';
		DECLARE @TBL_ProfileShipping TABLE
		(
			ProfileId int, ProfileName nvarchar(200), PortalId int, StoreName nvarchar(200), ShippingId int, ShippingTypeId int
			, ShippingCode nvarchar(max), HandlingCharge numeric(28,6), HandlingChargeBasedOn varchar(50), DestinationCountryCode nvarchar(50)
			, StateCode nvarchar(40), CountyFIPS nvarchar(100), Description nvarchar(max), IsActive bit, DisplayOrder int, ZipCode nvarchar(max)
			, CreatedDate datetime, ModifiedDate datetime, ShippingTypeName nvarchar(max), PortalShippingId int, ProfileShippingId int
			, ShippingName varchar(200), ClassName varchar(100), DeliveryTimeframe varchar(MAX), RowId int, CountNo int
			, ApplicationType varchar(600)
		);
		IF ISNULL(@UserId, 0) <> 0 OR
		   (ISNULL(@PortalId, 0) > 0 AND
		   ISNULL(@ProfileId, 0) > 0)
		BEGIN
			DECLARE @PortalIds varchar(2000)= '', @ProfileIds varchar(2000)= '', @ShippingIds varchar(2000)= '';
			IF ISNULL(@UserId, 0) <> 0
			BEGIN
			    SET @PortalIds = @PortalId
				EXEC Znode_GetUserPortalAndProfile @UserId, @PortalIds OUT, @ProfileIds OUT;
			END;
			ELSE
			BEGIN
				SET @PortalIds = @PortalId;
				SET @ProfileIds = @ProfileId;
			END;

			SET @ProfileIds = CASE WHEN @ProfileId <= 0 THEN @ProfileIds ELSE @ProfileId END 
			EXEC Znode_GetCommonShipping @PortalIds, @ProfileIds, @ShippingIds OUT;

			SET @FilterWhereClause = '  WHERE ShippingId IN ( '+ISNULL(@ShippingIds,'0') +' ) ';
		END;
		IF ISNULL(@ProfileId, 0) > 0 AND
		   ISNULL(@UserId, 0) = 0 AND
		   ISNULL(@PortalId, 0) = 0
		BEGIN
			SET @SQL = '
			   ;WITH CTE_GetAssociatedShipping as
			  (
				SELECT  ZP.ProfileId, ZP.ProfileName,NULL PortalId, NULL StoreName ,ZS.ShippingId,ZS.ShippingTypeId,ZS.ShippingCode,ZS.HandlingCharge,ZS.HandlingChargeBasedOn
			    ,ZS.DestinationCountryCode,ZS.StateCode,ZS.CountyFIPS,ZS.Description,ZS.IsActive,CASE WHEN '+CAST(@ProfileId AS VARCHAR(200))+' >= 0 AND '+CAST(@IsAssociated AS VARCHAR(200))+' = 1 THEN ISNULL(ZPS.DisplayOrder,ZS.DisplayOrder) ELSE ZS.DisplayOrder END DisplayOrder,ZS.ZipCode,ZS.CreatedDate,ZS.ModifiedDate
				,CASE WHEN ZPS.ShippingId IS NULL THEN 0 ELSE 1 END IsAssociated,ZST.Name ShippingTypeName , ZPS.ProfileShippingId 
				, NULL PortalShippingId,ZS.ShippingName,ZST.ClassName,ZS.DeliveryTimeframe,CASE WHEN '+CAST(@ProfileId AS VARCHAR(200))+' >= 0 AND '+CAST(@IsAssociated AS VARCHAR(200))+' = 1 THEN ZPPOS.DisplayName ELSE NULL END  PublishStatus

				FROM ZnodeShipping ZS
				INNER JOIN ZnodeShippingTypes ZST ON (ZST.ShippingTypeId = ZS.ShippingTypeId)
				CROSS APPLY ZnodeProfile ZP
				LEFT JOIN ZnodeProfileShipping ZPS ON(ZP.ProfileId = ZPS.ProfileId AND ZS.ShippingId = ZPS.ShippingId)
				LEFT JOIN ZnodePublishState ZPPOS ON (ZPPOS.PublishStateId = ZPS.PublishstateId )
			  )';
			SET @FilterWhereClause = 'WHERE ProfileId = '+CAST(@ProfileId AS varchar(50))+' AND IsAssociated = '+CAST(@IsAssociated AS varchar(50));
			SET @InternalOrderBy = ' ProfileId,ShippingId ';
		END;
		ELSE
		BEGIN
			IF ISNULL(@PortalId, 0) > 0 AND
			   ISNULL(@UserId, 0) = 0 AND
			   ISNULL(@ProfileId, 0) = 0
			BEGIN
				SET @SQL = '
			   ;WITH CTE_GetAssociatedShipping as
			  (
				SELECT NULL ProfileId,NULL ProfileName ,ZPP.PortalId, ZPP.StoreName,ZS.ShippingId,ZS.ShippingTypeId,ZS.ShippingCode,ZS.HandlingCharge,ZS.HandlingChargeBasedOn
			    ,ZS.DestinationCountryCode,ZS.StateCode,ZS.CountyFIPS,ZS.Description,ZS.IsActive,ZS.DisplayOrder,ZS.ZipCode,ZS.CreatedDate,ZS.ModifiedDate
				,CASE WHEN ZPS.PortalShippingId IS NULL THEN 0 ELSE 1 END IsAssociated,ZST.Name ShippingTypeName ,ZPS.PortalShippingId, NULL ProfileShippingId,ZS.ShippingName,ZST.ClassName,ZS.DeliveryTimeframe
				,ZPSS.DisplayName  PublishStatus
				FROM ZnodeShipping ZS
				INNER JOIN ZnodeShippingTypes ZST ON (ZST.ShippingTypeId = ZS.ShippingTypeId)
				CROSS APPLY ZnodePortal ZPP
				LEFT JOIN ZnodePortalShipping ZPS ON(ZPP.PortalId = ZPS.PortalId AND ZS.ShippingId = ZPS.ShippingId)
				LEFT JOIN ZnodePublishState ZPSS ON (ZPS.PublishStateId =  ZPSS.PublishStateId )
			  )';
				SET @FilterWhereClause = 'WHERE PortalId = '+CAST(@PortalId AS varchar(50))+' AND IsAssociated = '+CAST(@IsAssociated AS varchar(50));
				SET @InternalOrderBy = ' PortalId ,ShippingId ';
			END;
			ELSE
			BEGIN			
				SET @SQL = '
			   ;With  CTE_GetAssociatedShipping as
			   (
			   SELECT NULL ProfileId, NULL ProfileName,NULL PortalId, NULL StoreName,ZS.ShippingId,ZS.ShippingTypeId,ZS.ShippingCode,ZS.HandlingCharge,ZS.HandlingChargeBasedOn
			   ,ZS.DestinationCountryCode,ZS.StateCode,ZS.CountyFIPS,ZS.Description,ZS.IsActive,ISNULL(ZPP.DisplayOrder, ZS.DisplayOrder  ) DisplayOrder,ZS.ZipCode,ZS.CreatedDate,ZS.ModifiedDate
			   , NULL IsAssociated ,ZST.Name ShippingTypeName , NULL PortalShippingId, NULL ProfileShippingId,ZS.ShippingName,ZST.ClassName,ZS.DeliveryTimeframe
			   ,ZPSS.DisplayName   PublishStatus
			   FROM ZnodeShipping ZS
			   INNER JOIN ZnodeShippingTypes ZST ON (ZST.ShippingTypeId = ZS.ShippingTypeId)
			   LEFT JOIN ZnodeProfileShipping ZPP ON (ZPP.ShippingId = ZS.shippingId AND ZPP.Profileid = '+CAST(@ProfileId AS NVARCHAR(200))+')
			   LEFT JOIN ZnodePortalShipping ZPS ON( '+CAST(@PortalId AS VARCHAR(200))+'= ZPS.PortalId AND ZS.ShippingId = ZPS.ShippingId)
			   LEFT JOIN ZnodePublishState ZPSS ON (CASE WHEN '+CAST(@ProfileId AS VARCHAR(200))+' >= 0 AND '+CAST(@IsAssociated AS VARCHAR(200))+' = 1 THEN ZPP.PublishSTateID ELSE ZPS.PublishSTateID  END =  ZPSS.PublishStateId ) 
			     )
			   ';
				SET @FilterWhereClause = CASE
										 WHEN ISNULL(@FilterWhereClause,'') = '' THEN ' WHERE 1=1 '
										 ELSE @FilterWhereClause
										 END;
				SET @InternalOrderBy = ' ShippingId ';
				
			END;
		END;
		
		SET @SQL = @SQL+'
	           , CTE_GetShipping AS
			 (
				SELECT	ProfileId,ProfileName,PortalId,StoreName,ShippingId,ShippingTypeId,ShippingCode,HandlingCharge,HandlingChargeBasedOn
			   ,DestinationCountryCode,StateCode,CountyFIPS,Description,IsActive,DisplayOrder,ZipCode,CreatedDate,ModifiedDate,ShippingTypeName , PortalShippingId, ProfileShippingId,ShippingName,ClassName,DeliveryTimeframe,PublishStatus
					,'+dbo.Fn_GetPagingRowId( @Order_BY, @InternalOrderBy )+',Count(*)Over() CountNo
				FROM CTE_GetAssociatedShipping
				'+ISNULL(@FilterWhereClause,'')+'
				'+dbo.Fn_GetFilterWhereClause( @WhereClause )+'
			 )

	      SELECT ProfileId,ProfileName,PortalId,StoreName,ShippingId,ShippingTypeId,ShippingCode,HandlingCharge,HandlingChargeBasedOn
					 ,DestinationCountryCode,StateCode,CountyFIPS,Description,IsActive,DisplayOrder,ZipCode,CreatedDate,ModifiedDate
					 ,ShippingTypeName,PortalShippingId,ProfileShippingId,ShippingName,ClassName,DeliveryTimeframe,PublishStatus,RowId,CountNo
		  FROM CTE_GetShipping
		  '+dbo.Fn_GetPaginationWhereClause( @PageNo, @Rows );

		
		INSERT INTO @TBL_ProfileShipping( ProfileId, ProfileName, PortalId, StoreName, ShippingId, ShippingTypeId, ShippingCode, HandlingCharge, HandlingChargeBasedOn, DestinationCountryCode, StateCode, CountyFIPS, Description, IsActive, DisplayOrder, ZipCode, CreatedDate, ModifiedDate, ShippingTypeName, PortalShippingId, ProfileShippingId, ShippingName, ClassName, DeliveryTimeframe, ApplicationType,RowId, CountNo )
		EXEC (@SQL);

		SET @RowsCount = ISNULL((SELECT TOP 1 CountNo FROM @TBL_ProfileShipping), 0);
		SELECT ShippingId,ProfileId, ProfileName, PortalId, StoreName,  ShippingTypeId, ShippingCode, HandlingCharge, HandlingChargeBasedOn, DestinationCountryCode, StateCode, CountyFIPS, Description, IsActive, DisplayOrder, ZipCode, CreatedDate, ModifiedDate, ShippingTypeName, PortalShippingId, ProfileShippingId, ShippingName, ClassName, DeliveryTimeframe,ApplicationType
		FROM @TBL_ProfileShipping;

	END TRY
	BEGIN CATCH
		    DECLARE @Status BIT ;
		    SET @Status = 0;
		    DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetShippingList @WhereClause = '+cast (@WhereClause AS VARCHAR(50))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@ProfileId='+CAST(@ProfileId AS VARCHAR(50))+',@PortalId='+CAST(@PortalId AS VARCHAR(50))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@IsAssociated='+CAST(@IsAssociated AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));

            SELECT 0 AS ID,CAST(0 AS BIT) AS Status;

            EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetShippingList',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
	END CATCH;
END;

GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_CopyUserProfile')
BEGIN 
	DROP PROCEDURE Znode_CopyUserProfile
END
GO


CREATE PROCEDURE [dbo].[Znode_CopyUserProfile]
(
	  @PortalId int, 
	  @ProfileId int,
	  @ProfileName varchar(500),
	  @UserId Int,
	  @Status bit OUT)
AS   
BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		SET NOCOUNT ON;
		
		DECLARE @GetDate DATETIME = dbo.Fn_GetDate()

		DECLARE @ProfileIdNew INT,@ProfileCatalogIdNew INT , @PortalProfileIdNew INT

		IF NOT EXISTS(SELECT * FROM ZnodeProfile WHERE ProfileName = @ProfileName)
		BEGIN
			INSERT INTO ZnodeProfile(ProfileName,	ShowOnPartnerSignup	,Weighting,	TaxExempt,	DefaultExternalAccountNo,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate,	ParentProfileId)
			SELECT @ProfileName,	ShowOnPartnerSignup	,Weighting,	TaxExempt,	DefaultExternalAccountNo,	@UserId,@GetDate,@UserId,@GetDate,	@ProfileId ParentProfileId 
			FROM ZnodeProfile WHERE ProfileId = @ProfileId 
			

			set @ProfileIdNew = @@Identity

			if (isnull(@ProfileIdNew,0) <> 0)
			begin
				insert into ZnodePortalProfile(PortalId,ProfileId,IsDefaultAnonymousProfile,IsDefaultRegistedProfile,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				select @PortalId,@ProfileIdNew,IsDefaultAnonymousProfile,IsDefaultRegistedProfile,@UserId,@GetDate,@UserId,@GetDate
				from ZnodePortalProfile 
				where ProfileId = @ProfileId
				AND PortalId = @PortalId

				set @PortalProfileIdNew  = @@Identity

				insert into ZnodeProfileShipping(ProfileId,ShippingId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,DisplayOrder)
				select @ProfileIdNew,ShippingId,@UserId,@GetDate,@UserId,@GetDate,DisplayOrder
				from ZnodeProfileShipping where ProfileId = @ProfileId

				
				
				UPDATE aa
				SET ProfileId = @ProfileIdNew 
					,ModifiedBy = @UserId 
					,ModifiedDate = @GetDate
				from ZnodeAccountProfile aa where ProfileId = @ProfileId
				AND EXISTS (SELECT TOP 1 1  FROM ZnodeUserPortal a INNER JOIN ZnodeUser b ON (b.UserId = a.UserId) 
			    WHERE b.AccountID = aa.AccountID )


				insert into ZnodeCMSContentPagesProfile(ProfileId,CMSContentPagesId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				select @ProfileIdNew,CMSContentPagesId,@UserId,@GetDate,@UserId,@GetDate
				from ZnodeCMSContentPagesProfile where ProfileId = @ProfileId

				
				
				UPDATE a 
				SET ProfileId = @ProfileIdNew 
						,ModifiedBy = @UserId 
						,ModifiedDate = @GetDate
				from ZnodeUserProfile a 
				INNER JOIN ZnodeUserPortal b ON (b.UserId = a.UserId )
				where a.ProfileId = @ProfileId
				AND b.PortalId = @PortalID
				
				INSERT INTO ZnodeProfilePaymentSetting(PaymentSettingId,ProfileId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,DisplayOrder)
				SELECT PaymentSettingId,@ProfileIdNew,@UserId,@GetDate,@UserId,@GetDate,DisplayOrder
				FROM ZnodeProfilePaymentSetting where ProfileId = @ProfileId

				INSERT INTO ZnodePromotion(PromoCode,Name,Description,PromotionTypeId,Discount,StartDate,EndDate,OrderMinimum,QuantityMinimum,IsCouponRequired,IsAllowedWithOtherCoupons,PromotionMessage,DisplayOrder,IsUnique,PortalId,ProfileId,PromotionProductQuantity,ReferralPublishProductId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				SELECT PromoCode,Name,Description,PromotionTypeId,Discount,StartDate,EndDate,OrderMinimum,QuantityMinimum,IsCouponRequired,IsAllowedWithOtherCoupons,PromotionMessage,DisplayOrder,IsUnique,PortalId,@ProfileIdNew,PromotionProductQuantity,ReferralPublishProductId,@UserId,@GetDate,@UserId,@GetDate
				FROM ZnodePromotion WHERE ProfileId = @ProfileId
				AND PortalId = @PortalId

				--INSERT INTO ZnodeProfileCatalog (ProfileId,PimCatalogId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				--SELECT @ProfileIdNew, PimCatalogId,@UserId,@GetDate,@UserId,@GetDate
				--FROM ZnodeProfileCatalog a 
				--WHERE ProfileId = @ProfileId 
				
				--SET @ProfileCatalogIdNew =@@IDENTITY

				--INSERT INTO ZnodeProfileCatalogCategory (ProfileCatalogId,PimCatalogCategoryId,DisplayOrder,IsActive,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				--SELECT @ProfileCatalogIdNew,PimCatalogCategoryId,DisplayOrder,IsActive,@UserId,@GetDate,@UserId,@GetDate
				--FROM ZnodeProfileCatalogCategory ZPCC
				--INNER JOIN ZnodeProfileCatalog ZPC ON (ZPC.ProfileCatalogId = ZPCC.ProfileCatalogId)
				--WHERE ZPC.ProfileId = @ProfileId

				--INSERT INTO ZnodeProfileCategoryHierarchy (ProfileCatalogId,PimCategoryHierarchyId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				--SELECT @ProfileCatalogIdNew,PimCategoryHierarchyId,@UserId,@GetDate,@UserId,@GetDate
				--FROM ZnodeProfileCategoryHierarchy ZPCH 
				--INNER JOIN ZnodeProfileCatalog ZPC ON (ZPC.ProfileCatalogId = ZPCH.ProfileCatalogId)
				--WHERE ZPC.ProfileId = @ProfileId

				SET @ProfileCatalogIdNew  = 0

				DECLARE @ProfileCatalogIdNewT TABLE (ProfileCatalogIdNew INT,PimCatalogId INT  )
				 
				INSERT INTO ZnodeProfileCatalog (ProfileId,PimCatalogId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				OUTPUT INSERTED.ProfileCatalogId,INSERTED.PimCatalogId INTO @ProfileCatalogIdNewT
				SELECT @ProfileIdNew, b.PimCatalogId,@UserId,@GetDate,@UserId,@GetDate
				FROM ZnodePortalCatalog a 
				INNER JOIN ZnodePublishCatalog b ON (b.PublishCatalogId = a.PublishCatalogId)
				WHERE a.PortalId = @PortalId 
				AND NOT EXISTS (SELECT TOP 1  1  FROM ZnodeProfileCatalog RT WHERE RT.ProfileId = @ProfileIdNew AND RT.PimCatalogId = b.PimCatalogId )
				
				SET @ProfileCatalogIdNew = 	(SELECT TOP 1 ProfileCatalogIdNew FROM @ProfileCatalogIdNewT )			     
				 
			     
				INSERT INTO ZnodeProfileCatalogCategory (ProfileCatalogId,PimCatalogCategoryId,DisplayOrder,IsActive,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				SELECT @ProfileCatalogIdNew,PimCatalogCategoryId,DisplayOrder,IsActive,@UserId,@GetDate,@UserId,@GetDate
				FROM ZnodeProfileCatalogCategory  ZPCC
				INNER JOIN ZnodeProfileCatalog TYU ON (TYU.ProfileCatalogId = ZPCC.ProfileCatalogId )
				WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeProfileCatalogCategory  TY WHERE TY.ProfileCatalogId = @ProfileCatalogIdNew AND TY.PimCatalogCategoryId = ZPCC.PimCatalogCategoryId )
				AND TYU.ProfileId = @ProfileId 
				AND @ProfileCatalogIdNew <> 0 

				 INSERT INTO ZnodeProfileCategoryHierarchy (ProfileCatalogId,PimCategoryHierarchyId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				SELECT @ProfileCatalogIdNew,PimCategoryHierarchyId,@UserId,@GetDate,@UserId,@GetDate
				FROM ZnodeProfileCategoryHierarchy ZPCH 
				INNER JOIN ZnodeProfileCatalog TYU ON (TYU.ProfileCatalogId = ZPCH.ProfileCatalogId )
				WHERE NOT  EXISTS (SELECT TOP 1 1 FROM ZnodeProfileCategoryHierarchy TY WHERE TY.ProfileCatalogId = @ProfileCatalogIdNew AND TY.PimCategoryHierarchyId = ZPCH.PimCategoryHierarchyId)
				AND TYU.ProfileId = @ProfileId 
				AND @ProfileCatalogIdNew <> 0 

				INSERT INTO ZnodePriceListProfile (PriceListId,PortalProfileId,Precedence,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				SELECT ZPLP.PriceListId,@PortalProfileIdNew,ZPLP.Precedence,@UserId,@GetDate,@UserId,@GetDate
				FROM ZnodePriceListProfile  ZPLP 
				INNER JOIN ZnodePortalProfile ZPP
				on ZPLP.PortalProfileId = ZPP.PortalProfileID
				where ZPP.ProfileId =@ProfileId and ZPP.PortalId = @PortalId

				DELETE FROM dbo.ZnodePriceListProfile WHERE PortalProfileId IN (SELECT PortalProfileId FROM ZnodePortalProfile WHERE ProfileId = @ProfileId AND PortalId = @PortalId  )
				DELETE FROM ZnodePortalProfile WHERE ProfileId = @ProfileId AND PortalId = @PortalId 
				

			end
		end

		-- copy all data if New portalId will generate
		IF (Select Count(ProfileId) from ZnodeProfile where ProfileId = @ProfileId and ProfileName =@ProfileName) >= 0
		BEGIN
			
			SELECT @PortalId AS ID, CAST(1 AS bit) AS [Status]; 
			SET @Status = CAST(1 AS bit);
			COMMIT TRAN A;
		END;
		ELSE
		BEGIN
			-- If copy process will not complete successfully then return status 0 
			SELECT @PortalId AS ID, CAST(0 AS bit) AS [Status];
			SET @Status = CAST(1 AS bit);
			ROLLBACK TRAN A;
		END;
		
	END TRY
	BEGIN CATCH 
		    SELECT ERROR_MESSAGE()
		     SET @Status = 0;
		    -- DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_CopyPortal @PortalId = '+CAST(@PortalId AS VARCHAR(200))+',@StoreName='+@StoreName+',@CompanyName='+@CompanyName+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
             ROLLBACK TRAN A; 			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
    --         EXEC Znode_InsertProcedureErrorLog
				--@ProcedureName = 'Znode_CopyPortal',
				--@ErrorInProcedure = @Error_procedure,
				--@ErrorMessage = @ErrorMessage,
				--@ErrorLine = @ErrorLine,
				--@ErrorCall = @ErrorCall;
	END CATCH;
END;

GO

IF NOT EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodePortalProfile' AND COLUMN_NAME = 'ProfileNumber')
BEGIN 
ALTER TABLE [dbo].[ZnodePortalProfile]  ADD [ProfileNumber] VARCHAR(100) NULL;
END
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPortalProfileList')
BEGIN 
	DROP PROCEDURE Znode_GetPortalProfileList
END
GO

CREATE PROCEDURE [dbo].[Znode_GetPortalProfileList]
(   @WhereClause VARCHAR(1000),
    @Rows        INT           = 100,
    @PageNo      INT           = 1,
    @Order_BY    VARCHAR(100)  = '',
    @RowsCount   INT OUT)
AS 
/*
    Summary: This Procedure Is Used to find the profile associated to the portal
     EXEC Znode_GetPortalProfileList ' '  AND portalid = 1  ',@RowsCount = 1,@Order_BY=' ProfileName DESC'  
    */
	 BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             DECLARE @SQL NVARCHAR(MAX), @RowsStart VARCHAR(50), @RowsEnd VARCHAR(50);
             SET @RowsStart = CASE
                                  WHEN @Rows >= 1000000
                                  THEN 0
                                  ELSE(@Rows * (@PageNo - 1)) + 1
                              END;
             SET @RowsEnd =   CASE
                                WHEN @Rows >= 1000000
                                THEN @Rows
                                ELSE @Rows * (@PageNo)
                              END;
             SET @SQL = ' 

		     DECLARE @TBL_PortalProfileList TABLE (PortalProfileId	INT, PortalId INT, ProfileId INT, ProfileName NVARCHAR(1000),IsDefaultAnonymousProfile BIT,IsDefaultRegistedProfile BIT,ParentProfileId	INT,ProfileNumber VARCHAR(100),ROWID INT,Counts INT )
		
			 ;With Cte_PortalProfileList AS 
			 (
			 SELECT Zpp.PortalProfileId ,zpp.PortalId ,Zpp.ProfileId ,ZP.ProfileName ,ZPP.IsDefaultAnonymousProfile,ZPP.IsDefaultRegistedProfile,ZP.ParentProfileId,ZPP.ProfileNumber
			 FROM ZnodePortalProfile ZPP INNER JOIN ZnodeProfile ZP ON (ZP.ProfileId = ZPP.ProfileId )) 

			 ,Cte_AfterFilter AS 
			 (
			 SELECT * , DENSE_RANK()OVER( ORDER BY '+CASE WHEN @Order_BY = '' THEN '' ELSE @Order_BY+',' END+' PortalProfileId DESC ) ROWID, COUNT(*)OVER() COUNTS 
			 FROM Cte_PortalProfileList CTPPL '+CASE WHEN @WhereClause = '' THEN '' ELSE ' WHERE '+@WhereClause END+') 
		
			 INSERT INTO  @TBL_PortalProfileList 
			 SELECT PortalProfileId,PortalId,ProfileId,ProfileName,IsDefaultAnonymousProfile,IsDefaultRegistedProfile,ParentProfileId,ProfileNumber,ROWID,Counts FROM Cte_AfterFilter 

			 SET @Count =  ISNULL((SELECT TOP 1 Counts FROM @TBL_PortalProfileList) , 0 )   

			 SELECT PortalProfileId , PortalId , ProfileId , ProfileName ,IsDefaultAnonymousProfile,IsDefaultRegistedProfile,ParentProfileId,ProfileNumber FROM  @TBL_PortalProfileList  WHERE ROWID  BETWEEN '+@RowsStart+' AND '+@RowsEnd+'';
             
             EXEC Sp_Executesql
                  @SQL,
                  N' @Count INT OUT ',
                  @Count = @RowsCount OUT;
             SET @RowsCount = CASE WHEN @RowsCount IS NULL THEN 0 ELSE @RowsCount END;
			
         END TRY
         BEGIN CATCH
            DECLARE @Status BIT ;
		    SET @Status = 0;
		    DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPortalProfileList @WhereClause = '+cast (@WhereClause AS VARCHAR(50))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
            SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
            EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetPortalProfileList',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;

	 GO

IF NOT EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodePortalPaymentSetting' AND COLUMN_NAME = 'PublishStateId')
BEGIN 
ALTER TABLE [dbo].[ZnodePortalPaymentSetting]  ADD [PublishStateId] TINYINT NULL;
END
GO
IF NOT EXISTS (SELECT * FROM   sys.objects WHERE  type IN( 'F' ) and OBJECT_NAME(parent_object_id) = 'ZnodePortalPaymentSetting' and name ='FK_ZnodePortalPaymentSetting_ZnodePublishState')
BEGIN 
ALTER TABLE [dbo].[ZnodePortalPaymentSetting] 
    ADD CONSTRAINT [FK_ZnodePortalPaymentSetting_ZnodePublishState] FOREIGN KEY ([PublishStateId]) REFERENCES [dbo].[ZnodePublishState] ([PublishStateId]);
END
GO

Update ZnodePortalPaymentSetting
SET PublishStateId = (SELECT TOP 1 PublishStateId  FROM ZnodePublishState  WHERE DisplayName = 'Production')

GO
 IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPaymentSetting')
BEGIN 
	DROP PROCEDURE Znode_GetPaymentSetting
END
GO


CREATE PROCEDURE [dbo].[Znode_GetPaymentSetting]
(
  @WhereClause  NVARCHAR(Max)  = '',
  @Rows         INT            = 100,
  @PageNo       INT            = 1,
  @Order_BY     VARCHAR(1000)  = ' DisplayOrder ASC',
  @RowsCount    INT OUT            ,
  @PortalId     INT            = 0 ,
  @ProfileId    INT            = 0 ,
  @UserId       INT			   = 0 ,
  @IsAssociated INT            = 0
)
AS
 /*
   Summary :- This procedure is used to get the associated and Unassociated list of paymentsetting for portal and profile

   Unit Testing

   DECLARE @profilei int = 0
   EXEC Znode_GetPaymentSetting @WhereClause = '', @RowsCount =  @profilei OUT ,@PortalId = 0 ,@ProfileId= 0 ,@IsAssociated = 0 ,@UserId= 0  SELECT  @profilei

 */
 BEGIN
  BEGIN TRY
   SET NOCOUNT ON
     DECLARE @SQL NVARCHAR(MAX)= '',@FilterWhereClause VARCHAR(2000) = '' ,@InternalOrderBy VARCHAR(2000)= ''

	 DECLARE @TBL_PaymentSetting TABLE (PaymentSettingId INT, PaymentApplicationSettingId INT,PaymentTypeId INT,PaymentGatewayId INT
										,PaymentName VARCHAR(600),IsActive BIT,DisplayOrder INT,IsTestMode BIT,IsPoDocUploadEnable BIT
										,IsPoDocRequire BIT,CreatedBy INT,CreatedDate DATETIME,ModifiedBy INT,ModifiedDate DATETIME
										,PortalId INT,StoreName NVARCHAR(max),IsAssociated BIT,ProfileId int,ProfileName NVARCHAR(200),PaymentTypeName VARCHAr(500),GatewayName VARCHAR(300),RowId INT,CountNo INT
										,PaymentDisplayName nvarchar(1200),PaymentExternalId VARCHAR(100),IsApprovalRequired BIT,PaymentCode VARCHAR(200),GatewayCode VARCHAR(200),IsCallToPaymentAPI BIT,IsBillingAddressOptional Bit,IsOABRequired BIT,PortalPaymentGroupId INT,ApplicationType VARCHAR(50) )


     IF ISNULL(@UserId,0) <> 0  OR (ISNULL(@PortalId,0) > 0 AND ISNULL(@ProfileId,0) > 0)
	 BEGIN
	  DECLARE  @PortalIds VARCHAR(2000) = '' ,@ProfileIds VARCHAR(2000) = '' ,@PaymentSettingIds VARCHAR(2000)
	  IF ISNULL(@UserId,0) <> 0
	  BEGIN
	  SET @PortalIds = @PortalId
	  EXEC Znode_GetUserPortalAndProfile @UserId ,@PortalIds OUT,@ProfileIds OUT
	  END
	  ELSE
	  BEGIN
	   SET @PortalIds = @PortalId
	   SET @ProfileIds = @ProfileId

	  END
	  SET @ProfileIds = CASE WHEN CAST(@ProfileId AS VARCHAr(200))  <= '0' THEN @ProfileIds ELSE CAST(@ProfileId AS VARCHAr(200)) END 
	  EXEC Znode_GetCommonPaymentSetting @PortalIds,@ProfileIds,@PaymentSettingIds OUT

	  SET @FilterWhereClause = ' AND  PaymentSettingId IN ('+ISNULL(@PaymentSettingIds,'0')+') '

	 END

	 SELECT PaymentSettingId ,ZPPG.PortalPaymentGroupId,ZPA.PortalId 
	 INTO #ZnodePortalPaymentApprovers
	 FROM ZnodePortalPaymentApprovers ZPPA 
	 INNER JOIN [ZnodePortalPaymentGroup] ZPPG ON( ZPPA.PortalPaymentGroupId = ZPPG.PortalPaymentGroupId)  
     INNER JOIN [ZnodePortalApproval] ZPA ON (ZPA.PortalApprovalId = ZPPG.PortalApprovalId) 
	 WHERE  ZPA.EnableApprovalManagement =1 AND ZPA.PortalId = @PortalId AND ZPPG.isActive = 1 



	IF ISNULL(@PortalId,0) > 0 AND (   ISNULL(@ProfileId,0) = 0)
	BEGIN
	 SET @SQL = '
	             ;With Cte_PaymentSetting AS
				 (
				 SELECT  ZPS.PaymentSettingId,ZPS.PaymentApplicationSettingId,ZPS.PaymentTypeId,ZPS.PaymentGatewayId,ZPS.PaymentName,ZPS.IsActive
						,ZPS.DisplayOrder,ZPS.IsTestMode,ZPS.IsPoDocUploadEnable,ZPS.IsPoDocRequire,ZPS.CreatedBy,ZPS.CreatedDate,ZPS.ModifiedBy,ZPS.ModifiedDate
						,ZP.PortalId,ZP.StoreName, CASE WHEN ZPPS.PortalPaymentId IS NULL THEN 0 ELSE 1 END IsAssociated, NULL ProfileId, NULL ProfileName,ZPT.BehaviourType PaymentTypeName,ZPG.GatewayName
						, CASE WHEN ZPPS.PaymentDisplayName IS NULL OR ZPPS.PaymentDisplayName = ''''  THEN ZPS.PaymentDisplayName ELSE ZPPS.PaymentDisplayName END   PaymentDisplayName,  ZPPS.PaymentExternalId ,
						 CASE WHEN YU.PaymentSettingId IS NOT NULL  THEN 1 ELSE 0 END AS IsApprovalRequired , ZPS.PaymentCode, ZPG.GatewayCode,ZPT.IsCallToPaymentAPI, ZPS.IsBillingAddressOptional,ISNULL(ZPS.IsOABRequired,0) IsOABRequired
						 ,YU.PortalPaymentGroupId, ''production'' PublishStatus 
				 FROM ZnodePaymentSetting ZPS
				 INNER JOIN ZnodePaymentType  ZPT ON (ZPT.PaymentTypeId = ZPS.PaymentTypeId)
				 LEFT JOIN ZnodePaymentGateway ZPG ON (ZPG.PaymentGatewayId= ZPS.PaymentGatewayId)
				 LEFT JOIN #ZnodePortalPaymentApprovers YU ON (YU.PaymentSettingId = ZPS.PaymentSettingId)
				 CROSS APPLY ZnodePortal ZP
				 LEFT JOIN ZnodePortalPaymentSetting ZPPS on ( ZPPS.PortalId = ZP.PortalId AND ZPPS.PaymentSettingId = ZPS.PaymentSettingId)
				-- LEFT JOIN ZnodePublishState ZPPOS ON (ZPPOS.PublishStateId = ZPPS.PublishStateId )
				 )

				 '
	 IF @userId <> 0 
	 BEGIN 
		SET @IsAssociated = 1  	
	 END 
	 
	 SET @FilterWhereClause = ' WHERE PortalId = '+CAST(@PortalId AS VARCHAR(50))+'
								AND  IsAssociated = '+CAST(@IsAssociated AS VARCHAR(50))+CASE WHEN @FilterWhereClause = '' THEN ' ' ELSE @FilterWhereClause END 
	 SET @InternalOrderBy = ' PaymentSettingId,PortalId '
    END
	ELSE IF ISNULL(@ProfileId,0) > 0 AND ( ISNULL(@UserId,0) = 0 AND  ISNULL(@PortalId,0) = 0)
	BEGIN
	  SET @SQL = '
	            ;With Cte_PaymenTSetting AS
				 (
				 SELECT  ZPS.PaymentSettingId,ZPS.PaymentApplicationSettingId,ZPS.PaymentTypeId,ZPS.PaymentGatewayId,ZPS.PaymentName,ZPS.IsActive
						,CASE WHEN '+CAST(@ProfileId AS VARCHAR(200))+' >= 0 AND '+CAST(@IsAssociated AS VARCHAR(200))+' = 1 THEN ISNULL(ZPPS.DisplayOrder,ZPS.DisplayOrder) ELSE ZPS.DisplayOrder END AS DisplayOrder,ZPS.IsTestMode,ZPS.IsPoDocUploadEnable,ZPS.IsPoDocRequire,ZPS.CreatedBy,ZPS.CreatedDate,ZPS.ModifiedBy,ZPS.ModifiedDate
						,NULL PortalId,NULL StoreName, CASE WHEN ZPPS.ProfilePaymentSettingId IS NULL THEN 0 ELSE 1 END IsAssociated ,ZP.ProfileId,ZP.ProfileName,ZPT.BehaviourType PaymentTypeName,ZPG.GatewayName
						,ZPS.PaymentDisplayName	, NULL PaymentExternalId,
						 CASE WHEN YU.PaymentSettingId IS NOT NULL  THEN 1 ELSE 0 END AS IsApprovalRequired  , ZPS.PaymentCode, ZPG.GatewayCode,ZPT.IsCallToPaymentAPI, ZPS.IsBillingAddressOptional,0 IsOABRequired,YU.PortalPaymentGroupId
						 , ISNULL(ZPPOS.DisplayName,''production'' )  PublishStatus 
				 FROM ZnodePaymentSetting ZPS
				 INNER JOIN ZnodePaymentType  ZPT ON (ZPT.PaymentTypeId = ZPS.PaymentTypeId)
				 LEFT JOIN ZnodePaymentGateway ZPG ON (ZPG.PaymentGatewayId= ZPS.PaymentGatewayId)
				 LEFT JOIN #ZnodePortalPaymentApprovers YU ON (YU.PaymentSettingId = ZPS.PaymentSettingId)
				 CROSS APPLY ZnodeProfile ZP
				 LEFT JOIN ZnodeProfilePaymentSetting ZPPS on ( ZPPS.ProfileId = ZP.ProfileId AND ZPPS.PaymentSettingId = ZPS.PaymentSettingId)
				 LEFT JOIN ZnodePublishState ZPPOS ON (ZPPOS.PublishStateId = ZPPS.PublishStateId )
				 )
               '
	   SET @FilterWhereClause = ' WHERE ProfileId = '+CAST(@ProfileId AS VARCHAR(50))+'
									AND  IsAssociated = '+CAST(@IsAssociated AS VARCHAR(50))+CASE WHEN @FilterWhereClause = '' THEN ' ' ELSE @FilterWhereClause END 
	  SET @InternalOrderBy = ' PaymentSettingId,ProfileId '
	END
	ELSE
	BEGIN
	  SET @SQL = '
	            ;With Cte_PaymenTSetting AS
				 (
				 SELECT   ZPS.PaymentSettingId,ZPS.PaymentApplicationSettingId,ZPS.PaymentTypeId,ZPS.PaymentGatewayId,ZPS.PaymentName,ZPS.IsActive
						,ISNULL(YOPU.DisplayOrder, ZPS.DisplayOrder) DisplayOrder,ZPS.IsTestMode,ZPS.IsPoDocUploadEnable,ZPS.IsPoDocRequire,ZPS.CreatedBy,ZPS.CreatedDate,ZPS.ModifiedBy,ZPS.ModifiedDate
						,NULL PortalId,NULL StoreName, NULL IsAssociated ,NULL ProfileId,NULL ProfileName,ZPT.BehaviourType PaymentTypeName,ZPG.GatewayName	
						, ZPS.PaymentDisplayName  , NULL PaymentExternalId, CASE WHEN YU.PaymentSettingId IS NOT NULL  THEN 1 ELSE 0 END AS IsApprovalRequired 
						 , ZPS.PaymentCode, ZPG.GatewayCode,ZPT.IsCallToPaymentAPI ,ZPS.IsBillingAddressOptional,ZPS.IsOABRequired,YU.PortalPaymentGroupId
						 , ISNULL(ZPPOS.DisplayName,''production'' )  PublishStatus 
				 FROM ZnodePaymentSetting ZPS
				 INNER JOIN ZnodePaymentType  ZPT ON (ZPT.PaymentTypeId = ZPS.PaymentTypeId)
				 LEFT JOIN ZnodePaymentGateway ZPG ON (ZPG.PaymentGatewayId= ZPS.PaymentGatewayId)
				 LEFT JOIN ZnodeProfilePaymentSetting YOPU ON (YOPU.PaymentSettingId = ZPS.PaymentSettingId AND YOPU.ProfileId = '+CAST(@ProfileId AS NVARCHAr(200))+')
				 LEFT JOIN #ZnodePortalPaymentApprovers YU ON (YU.PaymentSettingId = ZPS.PaymentSettingId)
				 LEFT JOIN ZnodePublishState ZPPOS ON (ZPPOS.PublishStateId = YOPU.PublishStateId)
				  ) '
	 SET @FilterWhereClause = CASE WHEN @FilterWhereClause ='' THEN ' WHERE 1=1 ' ELSE ' WHERE 1=1 '+@FilterWhereClause END
	 SET @InternalOrderBy = ' PaymentSettingId '
	END

	SET @SQL = @SQL+ ', Cte_PaymentSettingFilter AS
				 (

					SELECT PaymentSettingId,PaymentApplicationSettingId,PaymentTypeId,PaymentGatewayId,PaymentName,IsActive
						,DisplayOrder,IsTestMode,IsPoDocUploadEnable,IsPoDocRequire,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
						,PortalId,StoreName, ProfileId, ProfileName , PaymentTypeName,GatewayName,PaymentDisplayName,PaymentExternalId,IsApprovalRequired, PaymentCode, GatewayCode,IsCallToPaymentAPI, IsBillingAddressOptional,IsOABRequired,PortalPaymentGroupId,PublishStatus
						,'+dbo.Fn_GetPagingRowId(@Order_BY,@InternalOrderBy)+',Count(*)Over() CountNo

					FROM Cte_PaymenTSetting
				    '+@FilterWhereClause+'
					'+dbo.Fn_GetFilterWhereClause(@WhereClause)+'
				 )

				 SELECT PaymentSettingId,PaymentApplicationSettingId,PaymentTypeId,PaymentGatewayId,PaymentName,IsActive
						,DisplayOrder,IsTestMode,IsPoDocUploadEnable,IsPoDocRequire,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
						,PortalId,StoreName, ProfileId, ProfileName,PaymentTypeName,GatewayName,PaymentDisplayName,PaymentExternalId,IsApprovalRequired, PaymentCode, GatewayCode,IsCallToPaymentAPI,IsBillingAddressOptional,IsOABRequired,PortalPaymentGroupId,PublishStatus,RowId ,CountNo
				 FROM Cte_PaymentSettingFilter '
				 +[dbo].[Fn_GetPaginationWhereClause](@PageNo,@Rows)

    
	
	 INSERT INTO @TBL_PaymentSetting (PaymentSettingId,PaymentApplicationSettingId,PaymentTypeId,PaymentGatewayId,PaymentName,IsActive
						,DisplayOrder,IsTestMode,IsPoDocUploadEnable,IsPoDocRequire,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
						,PortalId,StoreName, ProfileId, ProfileName,PaymentTypeName,GatewayName,PaymentDisplayName,PaymentExternalId,IsApprovalRequired, PaymentCode, GatewayCode,IsCallToPaymentAPI,IsBillingAddressOptional,IsOABRequired,PortalPaymentGroupId,ApplicationType,RowID,CountNo)
	 EXEC (@SQL)

	 SET @RowsCount = ISNULL((SELECT Top 1 CountNo FROM @TBL_PaymentSetting),0)
	  
	 SELECT PaymentSettingId,PaymentApplicationSettingId,PaymentTypeId,PaymentGatewayId,PaymentName,IsActive
						,DisplayOrder,IsTestMode,IsPoDocUploadEnable,IsPoDocRequire,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
						,PortalId,StoreName, ProfileId, ProfileName,PaymentTypeName,GatewayName,PaymentDisplayName,PaymentExternalId,IsApprovalRequired, PaymentCode, GatewayCode,IsCallToPaymentAPI, IsBillingAddressOptional,IsOABRequired,PortalPaymentGroupId,ApplicationType
	 FROM @TBL_PaymentSetting
	 order by RowID,DisplayOrder


  END TRY
  BEGIN CATCH
             DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPaymentSetting @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@PortalId='+CAST(@PortalId AS VARCHAR(50))+',@ProfileId='+CAST(@ProfileId AS VARCHAR(50))+',@IsAssociated='+CAST(@IsAssociated AS VARCHAR(50))+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));

             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;

             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetPaymentSetting',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
  END CATCH
 END

 GO
 
Update ZnodeApplicationSetting 
Set Setting = '<?xml version="1.0" encoding="utf-16"?>  <columns>   <column>    <id>1</id>    <name>PortalProfileID</name>    <headertext>Checkbox</headertext>    <width>40</width>    <datatype>Int32</datatype>    <columntype>Int32</columntype>    <allowsorting>false</allowsorting>    <allowpaging>true</allowpaging>    <format></format>    <isvisible>y</isvisible>    <mustshow>y</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl></islinkactionurl>    <islinkparamfield></islinkparamfield>    <ischeckbox>y</ischeckbox>    <checkboxparamfield></checkboxparamfield>    <iscontrol>n</iscontrol>    <controltype></controltype>    <controlparamfield></controlparamfield>    <displaytext></displaytext>    <editactionurl></editactionurl>    <editparamfield></editparamfield>    <deleteactionurl></deleteactionurl>    <deleteparamfield></deleteparamfield>    <viewactionurl></viewactionurl>    <viewparamfield></viewparamfield>    <imageactionurl></imageactionurl>    <imageparamfield></imageparamfield>    <manageactionurl></manageactionurl>    <manageparamfield></manageparamfield>    <copyactionurl></copyactionurl>    <copyparamfield></copyparamfield>    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class></Class>    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters></SearchControlParameters>    <DbParamField></DbParamField>    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>2</id>    <name>ProfileName</name>    <headertext>Profile Name</headertext>    <width>40</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>false</allowpaging>    <format></format>    <isvisible>y</isvisible>    <mustshow>y</mustshow>    <musthide>n</musthide>    <maxlength>30</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl></islinkactionurl>    <islinkparamfield></islinkparamfield>    <ischeckbox>n</ischeckbox>    <checkboxparamfield></checkboxparamfield>    <iscontrol>y</iscontrol>    <controltype>Text</controltype>    <controlparamfield></controlparamfield>    <displaytext></displaytext>    <editactionurl></editactionurl>    <editparamfield></editparamfield>    <deleteactionurl></deleteactionurl>    <deleteparamfield></deleteparamfield>    <viewactionurl></viewactionurl>    <viewparamfield></viewparamfield>    <imageactionurl></imageactionurl>    <imageparamfield></imageparamfield>    <manageactionurl></manageactionurl>    <manageparamfield></manageparamfield>    <copyactionurl></copyactionurl>    <copyparamfield></copyparamfield>    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class></Class>    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters></SearchControlParameters>    <DbParamField></DbParamField>    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>3</id>    <name>ProfileNumber</name>    <headertext>Profile Number</headertext>    <width>40</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>false</allowpaging>    <format></format>    <isvisible>y</isvisible>    <mustshow>y</mustshow>    <musthide>n</musthide>    <maxlength>30</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl></islinkactionurl>    <islinkparamfield></islinkparamfield>    <ischeckbox>n</ischeckbox>    <checkboxparamfield></checkboxparamfield>    <iscontrol>y</iscontrol>    <controltype>Text</controltype>    <controlparamfield></controlparamfield>    <displaytext></displaytext>    <editactionurl></editactionurl>    <editparamfield></editparamfield>    <deleteactionurl></deleteactionurl>    <deleteparamfield></deleteparamfield>    <viewactionurl></viewactionurl>    <viewparamfield></viewparamfield>    <imageactionurl></imageactionurl>    <imageparamfield></imageparamfield>    <manageactionurl></manageactionurl>    <manageparamfield></manageparamfield>    <copyactionurl></copyactionurl>    <copyparamfield></copyparamfield>    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class></Class>    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters></SearchControlParameters>    <DbParamField></DbParamField>    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>4</id>    <name>IsDefaultAnonymousProfile</name>    <headertext>Is Default Anonymous Profile</headertext>    <width>40</width>    <datatype>Boolean</datatype>    <columntype>Boolean</columntype>    <allowsorting>false</allowsorting>    <allowpaging>true</allowpaging>    <format></format>    <isvisible>y</isvisible>    <mustshow>n</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl></islinkactionurl>    <islinkparamfield></islinkparamfield>    <ischeckbox>n</ischeckbox>    <checkboxparamfield></checkboxparamfield>    <iscontrol>y</iscontrol>    <controltype>DropDown</controltype>    <controlparamfield></controlparamfield>    <displaytext></displaytext>    <editactionurl></editactionurl>    <editparamfield></editparamfield>    <deleteactionurl></deleteactionurl>    <deleteparamfield></deleteparamfield>    <viewactionurl></viewactionurl>    <viewparamfield></viewparamfield>    <imageactionurl></imageactionurl>    <imageparamfield></imageparamfield>    <manageactionurl></manageactionurl>    <manageparamfield></manageparamfield>    <copyactionurl></copyactionurl>    <copyparamfield></copyparamfield>    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class></Class>    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters></SearchControlParameters>    <DbParamField></DbParamField>    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>5</id>    <name>IsDefaultRegistedProfile</name>    <headertext>Is Default Registered Profile</headertext>    <width>40</width>    <datatype>Boolean</datatype>    <columntype>Boolean</columntype>    <allowsorting>false</allowsorting>    <allowpaging>true</allowpaging>    <format></format>    <isvisible>y</isvisible>    <mustshow>n</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl></islinkactionurl>    <islinkparamfield></islinkparamfield>    <ischeckbox>n</ischeckbox>    <checkboxparamfield></checkboxparamfield>    <iscontrol>y</iscontrol>    <controltype>DropDown</controltype>    <controlparamfield></controlparamfield>    <displaytext></displaytext>    <editactionurl></editactionurl>    <editparamfield></editparamfield>    <deleteactionurl></deleteactionurl>    <deleteparamfield></deleteparamfield>    <viewactionurl></viewactionurl>    <viewparamfield></viewparamfield>    <imageactionurl></imageactionurl>    <imageparamfield></imageparamfield>    <manageactionurl></manageactionurl>    <manageparamfield></manageparamfield>    <copyactionurl></copyactionurl>    <copyparamfield></copyparamfield>    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class></Class>    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters></SearchControlParameters>    <DbParamField></DbParamField>    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>6</id>    <name>Manage</name>    <headertext>Action</headertext>    <width>40</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>false</allowsorting>    <allowpaging>false</allowpaging>    <format>Manage|Edit|Delete</format>    <isvisible>y</isvisible>    <mustshow>y</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl></islinkactionurl>    <islinkparamfield>profileId</islinkparamfield>    <ischeckbox>n</ischeckbox>    <checkboxparamfield></checkboxparamfield>    <iscontrol>n</iscontrol>    <controltype></controltype>    <controlparamfield></controlparamfield>    <displaytext>Manage|Edit|Delete</displaytext>    <editactionurl></editactionurl>    <editparamfield></editparamfield>    <deleteactionurl></deleteactionurl>    <deleteparamfield></deleteparamfield>    <viewactionurl></viewactionurl>    <viewparamfield></viewparamfield>    <imageactionurl></imageactionurl>    <imageparamfield></imageparamfield>    <manageactionurl>/Profiles/GetProfileCatalogList|/Store/EditPortalProfile|/Store/DeletePortalProfile</manageactionurl>    <manageparamfield>profileId,portalId,parentProfileId|portalId,portalProfileId,profileId,parentProfileId|portalProfileId</manageparamfield>    <copyactionurl></copyactionurl>    <copyparamfield></copyparamfield>    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class>grid-action</Class>    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters></SearchControlParameters>    <DbParamField></DbParamField>    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>  </columns>'
Where ItemName = 'ZnodePortalProfile'

GO

Update ZnodeApplicationSetting 
Set Setting = '<?xml version="1.0" encoding="utf-16"?> <columns>  <column>   <id>1</id>   <name>ProfileID</name>   <headertext>Checkbox</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>Int32</columntype>   <allowsorting>true</allowsorting>   <allowpaging>false</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield>ProfileId</islinkparamfield>   <ischeckbox>y</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext>ProfileId</displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>2</id>   <name>ProfileName</name>   <headertext>Profile Name</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>false</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>3</id>   <name>IsDefault</name>   <headertext>Is Default</headertext>   <width>40</width>   <datatype>Boolean</datatype>   <columntype>Boolean</columntype>   <allowsorting>false</allowsorting>   <allowpaging>false</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>4</id>   <name>Manage</name>   <headertext>Action</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>false</allowsorting>   <allowpaging>false</allowpaging>   <format>Delete</format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>y</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield>profileId</islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext>Delete</displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl>/Customer/UnAssociateProfiles</manageactionurl>   <manageparamfield>profileId,userId</manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class>grid-action</Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column> </columns>'
Where ItemName = 'ZnodeUserProfile'

GO

Update ZnodeApplicationSetting 
Set Setting = '<?xml version="1.0" encoding="utf-16"?>  <columns>   <column>    <id>1</id>    <name>ProfileID</name>    <headertext>Checkbox</headertext>    <width>40</width>    <datatype>String</datatype>    <columntype>Int32</columntype>    <allowsorting>true</allowsorting>    <allowpaging>false</allowpaging>    <format></format>    <isvisible>y</isvisible>    <mustshow>y</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl></islinkactionurl>    <islinkparamfield>ProfileId</islinkparamfield>    <ischeckbox>y</ischeckbox>    <checkboxparamfield></checkboxparamfield>    <iscontrol>n</iscontrol>    <controltype></controltype>    <controlparamfield></controlparamfield>    <displaytext>ProfileId</displaytext>    <editactionurl></editactionurl>    <editparamfield></editparamfield>    <deleteactionurl></deleteactionurl>    <deleteparamfield></deleteparamfield>    <viewactionurl></viewactionurl>    <viewparamfield></viewparamfield>    <imageactionurl></imageactionurl>    <imageparamfield></imageparamfield>    <manageactionurl></manageactionurl>    <manageparamfield></manageparamfield>    <copyactionurl></copyactionurl>    <copyparamfield></copyparamfield>    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>n</isadvancesearch>    <Class></Class>    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters></SearchControlParameters>    <DbParamField></DbParamField>    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>2</id>    <name>ProfileName</name>    <headertext>Profile Name</headertext>    <width>40</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>false</allowpaging>    <format></format>    <isvisible>y</isvisible>    <mustshow>y</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl></islinkactionurl>    <islinkparamfield></islinkparamfield>    <ischeckbox>n</ischeckbox>    <checkboxparamfield></checkboxparamfield>    <iscontrol>n</iscontrol>    <controltype></controltype>    <controlparamfield></controlparamfield>    <displaytext></displaytext>    <editactionurl></editactionurl>    <editparamfield></editparamfield>    <deleteactionurl></deleteactionurl>    <deleteparamfield></deleteparamfield>    <viewactionurl></viewactionurl>    <viewparamfield></viewparamfield>    <imageactionurl></imageactionurl>    <imageparamfield></imageparamfield>    <manageactionurl></manageactionurl>    <manageparamfield></manageparamfield>    <copyactionurl></copyactionurl>    <copyparamfield></copyparamfield>    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class></Class>    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters></SearchControlParameters>    <DbParamField></DbParamField>    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>3</id>    <name>ShowOnPartnerSignup</name>    <headertext>Show On Partner Signup</headertext>    <width>40</width>    <datatype>Boolean</datatype>    <columntype>Boolean</columntype>    <allowsorting>false</allowsorting>    <allowpaging>false</allowpaging>    <format></format>    <isvisible>n</isvisible>    <mustshow>n</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl></islinkactionurl>    <islinkparamfield></islinkparamfield>    <ischeckbox>n</ischeckbox>    <checkboxparamfield></checkboxparamfield>    <iscontrol>n</iscontrol>    <controltype></controltype>    <controlparamfield></controlparamfield>    <displaytext></displaytext>    <editactionurl></editactionurl>    <editparamfield></editparamfield>    <deleteactionurl></deleteactionurl>    <deleteparamfield></deleteparamfield>    <viewactionurl></viewactionurl>    <viewparamfield></viewparamfield>    <imageactionurl></imageactionurl>    <imageparamfield></imageparamfield>    <manageactionurl></manageactionurl>    <manageparamfield></manageparamfield>    <copyactionurl></copyactionurl>    <copyparamfield></copyparamfield>    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class></Class>    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters></SearchControlParameters>    <DbParamField></DbParamField>    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>4</id>    <name>Weighting</name>    <headertext>Weighting</headertext>    <width>40</width>    <datatype>String</datatype>    <columntype>Boolean</columntype>    <allowsorting>false</allowsorting>    <allowpaging>false</allowpaging>    <format></format>    <isvisible>n</isvisible>    <mustshow>n</mustshow>    <musthide>y</musthide>    <maxlength>0</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl></islinkactionurl>    <islinkparamfield></islinkparamfield>    <ischeckbox>n</ischeckbox>    <checkboxparamfield></checkboxparamfield>    <iscontrol>n</iscontrol>    <controltype></controltype>    <controlparamfield></controlparamfield>    <displaytext></displaytext>    <editactionurl></editactionurl>    <editparamfield></editparamfield>    <deleteactionurl></deleteactionurl>    <deleteparamfield></deleteparamfield>    <viewactionurl></viewactionurl>    <viewparamfield></viewparamfield>    <imageactionurl></imageactionurl>    <imageparamfield></imageparamfield>    <manageactionurl></manageactionurl>    <manageparamfield></manageparamfield>    <copyactionurl></copyactionurl>    <copyparamfield></copyparamfield>    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>n</isadvancesearch>    <Class></Class>    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters></SearchControlParameters>    <DbParamField></DbParamField>    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>5</id>    <name>TaxExempt</name>    <headertext>Tax Exempt</headertext>    <width>40</width>    <datatype>Boolean</datatype>    <columntype>Boolean</columntype>    <allowsorting>false</allowsorting>    <allowpaging>false</allowpaging>    <format></format>    <isvisible>n</isvisible>    <mustshow>n</mustshow>    <musthide>y</musthide>    <maxlength>0</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl></islinkactionurl>    <islinkparamfield></islinkparamfield>    <ischeckbox>n</ischeckbox>    <checkboxparamfield></checkboxparamfield>    <iscontrol>n</iscontrol>    <controltype></controltype>    <controlparamfield></controlparamfield>    <displaytext></displaytext>    <editactionurl></editactionurl>    <editparamfield></editparamfield>    <deleteactionurl></deleteactionurl>    <deleteparamfield></deleteparamfield>    <viewactionurl></viewactionurl>    <viewparamfield></viewparamfield>    <imageactionurl></imageactionurl>    <imageparamfield></imageparamfield>    <manageactionurl></manageactionurl>    <manageparamfield></manageparamfield>    <copyactionurl></copyactionurl>    <copyparamfield></copyparamfield>    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class></Class>    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters></SearchControlParameters>    <DbParamField></DbParamField>    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>6</id>    <name>DefaultExternalAccountNo</name>    <headertext>Default External Account No</headertext>    <width>40</width>    <datatype>Boolean</datatype>    <columntype>String</columntype>    <allowsorting>false</allowsorting>    <allowpaging>false</allowpaging>    <format></format>    <isvisible>n</isvisible>    <mustshow>n</mustshow>    <musthide>y</musthide>    <maxlength>0</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl></islinkactionurl>    <islinkparamfield></islinkparamfield>    <ischeckbox>n</ischeckbox>    <checkboxparamfield></checkboxparamfield>    <iscontrol>n</iscontrol>    <controltype></controltype>    <controlparamfield></controlparamfield>    <displaytext></displaytext>    <editactionurl></editactionurl>    <editparamfield></editparamfield>    <deleteactionurl></deleteactionurl>    <deleteparamfield></deleteparamfield>    <viewactionurl></viewactionurl>    <viewparamfield></viewparamfield>    <imageactionurl></imageactionurl>    <imageparamfield></imageparamfield>    <manageactionurl></manageactionurl>    <manageparamfield></manageparamfield>    <copyactionurl></copyactionurl>    <copyparamfield></copyparamfield>    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>n</isadvancesearch>    <Class></Class>    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters></SearchControlParameters>    <DbParamField></DbParamField>    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>  </columns>'
Where ItemName = 'ZnodeUserUnAssociatedProfiles'

GO
Update ZnodeApplicationSetting 
Set Setting = '<?xml version="1.0" encoding="utf-16"?> <columns>  <column>   <id>1</id>   <name>ShippingId</name>   <headertext>Checkbox</headertext>   <width>30</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>false</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>y</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>2</id>   <name>ShippingTypeName</name>   <headertext>Shipping Type</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>3</id>   <name>ShippingCode</name>   <headertext>Shipping Code</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>4</id>   <name>Description</name>   <headertext>Description</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>false</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>5</id>   <name>DestinationCountryCode</name>   <headertext>Country Code</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>6</id>   <name>HandlingCharge</name>   <headertext>Handling Charge</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>7</id>   <name>DisplayOrder</name>   <headertext>Display Order</headertext>   <width>30</width>   <datatype>Int32</datatype>   <columntype>Int32</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>3</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>y</iscontrol>   <controltype>Text</controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>8</id>   <name>IsActive</name>   <headertext>Enable</headertext>   <width>40</width>   <datatype>Boolean</datatype>   <columntype>String</columntype>   <allowsorting>false</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>9</id>   <name>ZipCode</name>   <headertext>Zip Code</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>10</id>   <name>Manage</name>   <headertext>Action</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>false</allowsorting>   <allowpaging>false</allowpaging>   <format>Edit|Delete</format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield>PortalId</islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext>Edit|Delete</displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl>/Profiles/UpdateProfileShipping|/Profiles/UnAssociateAssociatedShipping</manageactionurl>   <manageparamfield>shippingId,profileId|shippingId,profileId</manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>11</id>   <name>ProfileName</name>   <headertext>Profile Name</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>n</isvisible>   <mustshow>n</mustshow>   <musthide>y</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>12</id>   <name>ShippingId</name>   <headertext>ShippingId</headertext>   <width>30</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>false</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>n</isvisible>   <mustshow>n</mustshow>   <musthide>y</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column> </columns>'
Where ItemName = 'ZnodeAssociatedShippingListToProfile'

GO

Update ZnodeApplicationSetting 
Set Setting = '<?xml version="1.0" encoding="utf-16"?>  <columns>   <column>    <id>1</id>    <name>ProductId</name>    <headertext>Checkbox</headertext>    <width>20</width>    <datatype>Int32</datatype>    <columntype>Int32</columntype>    <allowsorting>false</allowsorting>    <allowpaging>true</allowpaging>    <format></format>    <isvisible>y</isvisible>    <mustshow>y</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl></islinkactionurl>    <islinkparamfield></islinkparamfield>    <ischeckbox>y</ischeckbox>    <checkboxparamfield>ProductId</checkboxparamfield>    <iscontrol>n</iscontrol>    <controltype></controltype>    <controlparamfield></controlparamfield>    <displaytext></displaytext>    <editactionurl></editactionurl>    <editparamfield></editparamfield>    <deleteactionurl></deleteactionurl>    <deleteparamfield></deleteparamfield>    <viewactionurl></viewactionurl>    <viewparamfield></viewparamfield>    <imageactionurl></imageactionurl>    <imageparamfield></imageparamfield>    <manageactionurl></manageactionurl>    <manageparamfield></manageparamfield>    <copyactionurl></copyactionurl>    <copyparamfield></copyparamfield>    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class></Class>    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters></SearchControlParameters>    <DbParamField></DbParamField>    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>2</id>    <name>Image</name>    <headertext>Product Image</headertext>    <width>20</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>false</allowsorting>    <allowpaging>false</allowpaging>    <format></format>    <isvisible>y</isvisible>    <mustshow>y</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl></islinkactionurl>    <islinkparamfield></islinkparamfield>    <ischeckbox>n</ischeckbox>    <checkboxparamfield>ProductId</checkboxparamfield>    <iscontrol>n</iscontrol>    <controltype></controltype>    <controlparamfield></controlparamfield>    <displaytext></displaytext>    <editactionurl></editactionurl>    <editparamfield></editparamfield>    <deleteactionurl></deleteactionurl>    <deleteparamfield></deleteparamfield>    <viewactionurl></viewactionurl>    <viewparamfield></viewparamfield>    <imageactionurl></imageactionurl>    <imageparamfield>ImagePath,ProductName</imageparamfield>    <manageactionurl></manageactionurl>    <manageparamfield></manageparamfield>    <copyactionurl></copyactionurl>    <copyparamfield></copyparamfield>    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class>imageicon</Class>    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters></SearchControlParameters>    <DbParamField></DbParamField>    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>3</id>    <name>ProductName</name>    <headertext>Product Name</headertext>    <width>60</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format></format>    <isvisible>y</isvisible>    <mustshow>y</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl></islinkactionurl>    <islinkparamfield></islinkparamfield>    <ischeckbox>n</ischeckbox>    <checkboxparamfield></checkboxparamfield>    <iscontrol>n</iscontrol>    <controltype></controltype>    <controlparamfield></controlparamfield>    <displaytext></displaytext>    <editactionurl></editactionurl>    <editparamfield></editparamfield>    <deleteactionurl></deleteactionurl>    <deleteparamfield></deleteparamfield>    <viewactionurl></viewactionurl>    <viewparamfield></viewparamfield>    <imageactionurl></imageactionurl>    <imageparamfield></imageparamfield>    <manageactionurl></manageactionurl>    <manageparamfield></manageparamfield>    <copyactionurl></copyactionurl>    <copyparamfield></copyparamfield>    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class>product-name</Class>    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters></SearchControlParameters>    <DbParamField></DbParamField>    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>4</id>    <name>Price</name>    <headertext>Price</headertext>    <width>60</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format></format>    <isvisible>y</isvisible>    <mustshow>y</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl></islinkactionurl>    <islinkparamfield></islinkparamfield>    <ischeckbox>n</ischeckbox>    <checkboxparamfield></checkboxparamfield>    <iscontrol>n</iscontrol>    <controltype></controltype>    <controlparamfield></controlparamfield>    <displaytext></displaytext>    <editactionurl></editactionurl>    <editparamfield></editparamfield>    <deleteactionurl></deleteactionurl>    <deleteparamfield></deleteparamfield>    <viewactionurl></viewactionurl>    <viewparamfield></viewparamfield>    <imageactionurl></imageactionurl>    <imageparamfield></imageparamfield>    <manageactionurl></manageactionurl>    <manageparamfield></manageparamfield>    <copyactionurl></copyactionurl>    <copyparamfield></copyparamfield>    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class>product-price</Class>    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters></SearchControlParameters>    <DbParamField></DbParamField>    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>5</id>    <name>SKU</name>    <headertext>SKU</headertext>    <width>30</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format></format>    <isvisible>y</isvisible>    <mustshow>y</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl></islinkactionurl>    <islinkparamfield></islinkparamfield>    <ischeckbox>n</ischeckbox>    <checkboxparamfield></checkboxparamfield>    <iscontrol>n</iscontrol>    <controltype></controltype>    <controlparamfield></controlparamfield>    <displaytext>SKU</displaytext>    <editactionurl></editactionurl>    <editparamfield></editparamfield>    <deleteactionurl></deleteactionurl>    <deleteparamfield></deleteparamfield>    <viewactionurl></viewactionurl>    <viewparamfield></viewparamfield>    <imageactionurl></imageactionurl>    <imageparamfield></imageparamfield>    <manageactionurl></manageactionurl>    <manageparamfield></manageparamfield>    <copyactionurl></copyactionurl>    <copyparamfield></copyparamfield>    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class>product-sku</Class>    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters></SearchControlParameters>    <DbParamField></DbParamField>    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>6</id>    <name>DisplayOrder</name>    <headertext>Display Order</headertext>    <width>30</width>    <datatype>Int32</datatype>    <columntype>Int32</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format></format>    <isvisible>n</isvisible>    <mustshow>n</mustshow>    <musthide>y</musthide>    <maxlength>3</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl></islinkactionurl>    <islinkparamfield></islinkparamfield>    <ischeckbox>n</ischeckbox>    <checkboxparamfield></checkboxparamfield>    <iscontrol>y</iscontrol>    <controltype>Text</controltype>    <controlparamfield></controlparamfield>    <displaytext></displaytext>    <editactionurl></editactionurl>    <editparamfield></editparamfield>    <deleteactionurl></deleteactionurl>    <deleteparamfield></deleteparamfield>    <viewactionurl></viewactionurl>    <viewparamfield></viewparamfield>    <imageactionurl></imageactionurl>    <imageparamfield></imageparamfield>    <manageactionurl></manageactionurl>    <manageparamfield></manageparamfield>    <copyactionurl></copyactionurl>    <copyparamfield></copyparamfield>    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>n</isadvancesearch>    <Class></Class>    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters></SearchControlParameters>    <DbParamField></DbParamField>    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>7</id>    <name>IsNewlyAdded</name>    <headertext>Newly Added</headertext>    <width>30</width>    <datatype>Int32</datatype>    <columntype>Int32</columntype>    <allowsorting>false</allowsorting>    <allowpaging>false</allowpaging>    <format></format>    <isvisible>y</isvisible>    <mustshow>y</mustshow>    <musthide>y</musthide>    <maxlength>3</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl></islinkactionurl>    <islinkparamfield></islinkparamfield>    <ischeckbox>n</ischeckbox>    <checkboxparamfield></checkboxparamfield>    <iscontrol>y</iscontrol>    <controltype>Text</controltype>    <controlparamfield></controlparamfield>    <displaytext></displaytext>    <editactionurl></editactionurl>    <editparamfield></editparamfield>    <deleteactionurl></deleteactionurl>    <deleteparamfield></deleteparamfield>    <viewactionurl></viewactionurl>    <viewparamfield></viewparamfield>    <imageactionurl></imageactionurl>    <imageparamfield></imageparamfield>    <manageactionurl></manageactionurl>    <manageparamfield></manageparamfield>    <copyactionurl></copyactionurl>    <copyparamfield></copyparamfield>    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>n</isadvancesearch>    <Class>product-isnew</Class>    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters></SearchControlParameters>    <DbParamField></DbParamField>    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>8</id>    <name>Manage</name>    <headertext>Action</headertext>    <width>30</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>false</allowsorting>    <allowpaging>true</allowpaging>    <format>Edit</format>    <isvisible>n</isvisible>    <mustshow>y</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl></islinkactionurl>    <islinkparamfield></islinkparamfield>    <ischeckbox>n</ischeckbox>    <checkboxparamfield></checkboxparamfield>    <iscontrol>n</iscontrol>    <controltype></controltype>    <controlparamfield></controlparamfield>    <displaytext>Edit</displaytext>    <editactionurl></editactionurl>    <editparamfield></editparamfield>    <deleteactionurl></deleteactionurl>    <deleteparamfield></deleteparamfield>    <viewactionurl></viewactionurl>    <viewparamfield></viewparamfield>    <imageactionurl></imageactionurl>    <imageparamfield></imageparamfield>    <manageactionurl>/Catalog/UpdateCatalogCategoryProduct</manageactionurl>    <manageparamfield>ProductId,PimCatalogId,PimCategoryHierarchyId</manageparamfield>    <copyactionurl></copyactionurl>    <copyparamfield></copyparamfield>    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class></Class>    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters></SearchControlParameters>    <DbParamField></DbParamField>    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>  </columns>'
Where ItemName = 'ZnodeGetCatalogAssociatedProduct'

GO

update ZnodeApplicationSetting 
set setting = '<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>ProductId</name>      <headertext>Checkbox</headertext>      <width>20</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>ProductId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>Image</name>      <headertext>Product Image</headertext>      <width>20</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>ProductId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>ImagePath,ProductName</imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>imageicon</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>ProductName</name>      <headertext>Product Name</headertext>      <width>60</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>product-name</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>Price</name>      <headertext>Retail Price</headertext>      <width>60</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>product-price</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>SKU</name>      <headertext>SKU</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>SKU</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>product-sku</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>DisplayOrder</name>      <headertext>Display Order</headertext>      <width>30</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>3</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>IsNewlyAdded</name>      <headertext>Newly Added</headertext>      <width>30</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>y</musthide>      <maxlength>3</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>product-isnew</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>8</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>Edit</format>      <isvisible>n</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Edit</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/Catalog/UpdateCatalogCategoryProduct</manageactionurl>      <manageparamfield>ProductId,PimCatalogId,PimCategoryHierarchyId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>'
where ItemName = 'ZnodeGetCatalogAssociatedProduct'

GO 

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_UpdateCategoryProductDisplayOrder')
BEGIN 
	DROP PROCEDURE Znode_UpdateCategoryProductDisplayOrder
END
GO


CREATE   PROCEDURE [dbo].[Znode_UpdateCategoryProductDisplayOrder]       
(      
 @JSONString NVARCHAR(max)= '[]'      
,@PimCategoryHierarchyId INT   
,@PageNo INT = 0 
,@ProductIds VARCHAR(max) ='' 
,@Status BIT = 0 out    
)      
      
AS      
BEGIN       
 BEGIN TRY       
  SET NOCOUNT ON       
    DECLARE @TBL_PimProductId TABLE (PimProductId INT, RowId INT IDENTITY(1,1)  )      
          
      
      
    INSERT INTO @TBL_PimProductId (PimProductId)      
    EXEC [dbo].[Znode_GetJSONTableData] @JSONString , 'Id'      
      
    SET  @PageNo = ISNULL(@PageNo,0)  
      
 UPDATE ZPCC      
 SET ZPCC.DisplayOrder =  CASE WHEN @PageNo = 0  THEN RowId ELSE     
   CASE WHEN LEN(RowId) > 1 THEN CAST(@PageNo-1 +LEFT(RowId , LEN(RowId)-1) AS VARCHAr(1000)) +RIGHT(CAST(RowId AS VARCHAr(1000)),1)   ELSE CAST(@PageNo-1 AS VARCHAr(1000)) + RIGHT(CAST(RowId AS VARCHAr(1000)),1) END   
  END     
 FROM ZnodePimCatalogCategory ZPCC       
 INNER JOIN @TBL_PimProductId TBLP ON (TBLP.PimProductId = ZPCC.PimProductId)      
 WHERE ZPCC.PimCategoryHierarchyId = @PimCategoryHierarchyId    
      
   IF(@ProductIds!='')
	BEGIN
		UPDATE ZnodePimCatalogCategory
		SET IsNewlyAdded = 0
		WHERE PimCategoryHierarchyId = @PimCategoryHierarchyId 
		AND PimProductId IN (SELECT item FROM dbo.Split(@ProductIds,',') ) 
	END

  SELECT 1 AS ID , CAST(1 AS BIT) AS [Status];    
 SET @Status = 1       
        
         
 END TRY       
 BEGIN CATCH       
  SELECT ERROR_MESSAGE()      
   SELECT 0 AS ID , CAST(0 AS BIT) AS [Status];    
  SET @Status = 0      
 END CATCH       
END

GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetOmsOrderDetail')
BEGIN 
	DROP PROCEDURE Znode_GetOmsOrderDetail
END
GO
CREATE PROCEDURE [dbo].[Znode_GetOmsOrderDetail]
( @WhereClause NVARCHAR(MAx),
  @Rows        INT            = 100,
  @PageNo      INT            = 1,
  @Order_BY    VARCHAR(1000)  = '',
  @RowsCount   INT OUT			,
  @UserId	   INT = 0 ,
  @IsFromAdmin int=0
  )
AS
    /*
     Summary : This procedure is used to get the oms order detils
			   Records are fetched for those users who placed the order i.e UserId is Present in ZnodeUser and  ZnodeOmsOrderDetails tables
	 Unit Testing:

     EXEC Znode_GetOmsOrderDetail '',@Order_BY = '',@RowsCount= 0, @UserId = 0 ,@Rows = 80, @PageNo = 1

*/
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             DECLARE @SQL NVARCHAR(MAX), @ProcessType  varchar(50)='Order'

             DECLARE @TBL_OrderList TABLE (OmsOrderId INT,OrderNumber VARCHAR(200),PortalId INT,StoreName NVARCHAR(MAX),CurrencyCode VARCHAR(100),OrderState NVARCHAR(MAX),ShippingId INT ,
				PaymentTypeId INT,PaymentSettingId INT,PaymentStatus NVARCHAR(MAX),PaymentType VARCHAR(100),ShippingStatus BIT ,OrderDate DATETIME,UserId INT,UserName VARCHAR(300),PaymentTransactionToken NVARCHAR(600),Total NUMERIC(28,6),
				OrderItem NVARCHAR(1000),OmsOrderDetailsId INT, ItemCount INT,PODocumentPath NVARCHAR(600),IsInRMA BIT,CreatedByName NVARCHAr(max),ModifiedByName NVARCHAR(max),RowId INT,CountNo INT,Email NVARCHAR(MAX),PhoneNumber NVARCHAR(MAX),
				SubTotal NUMERIC(28,6),TaxCost NUMERIC(28,6),ShippingCost NUMERIC(28,6),BillingPostalCode NVARCHAR(200),ShippingPostalCode NVARCHAR(200),OrderModifiedDate datetime, PaymentDisplayName nvarchar(1200), ExternalId nvarchar(1000)
				,CreditCardExpMonth	int,CreditCardExpYear	int,CardType	varchar(50),CreditCardNumber varchar(10),PaymentExternalId nvarchar(1000),CultureCode nvarchar(1000) ,PublishState nvarchar(600) 
				)

			if object_id('tempdb..##OrderList') is not null
				drop table ##OrderList


			if object_id('tempdb..##Cte_OrderLineItem') is not null
				drop table ##Cte_OrderLineItem

             SET @SQL = '
			  SELECT Zoo.OmsOrderId,Zoo.OrderNumber, Zp.PortalId,Zp.StoreName ,ZODD.CurrencyCode,case when ZOS.IsShowToCustomer=0 and '+cast( @IsFromAdmin as varchar(50))+' = 0 then ZOSC.Description else  ZOS.Description end  OrderState,ZODD.ShippingId,ZODD.PaymentTypeId,ZODD.PaymentSettingId
				,ZOPS.Name PaymentStatus,ZPS.Name PaymentType,CAST(1 AS BIT) ShippingStatus ,ZODD.OrderDate,ZODD.UserId,ISNULL(ZODD.FirstName,'''')
						+'' ''+ISNULL(ZODD.LastName,'''') UserName ,ZODD.PaymentTransactionToken ,ZODD.Total ,ZODD.OmsOrderDetailsId,ZODD.PoDocument,ZVGD.UserName CreatedBy , ZVGDI.UserName ModifiedBy
						,ZU.Email ,ZU.PhoneNumber ,ZODD.SubTotal ,ZODD.TaxCost ,ZODD.ShippingCost,ZODD.BillingPostalCode,
						ZODD.ModifiedDate AS OrderModifiedDate,  ZODD.PaymentDisplayName  ,isnull(Zoo.ExternalId,0) ExternalId,ZODD.CreditCardExpMonth,ZODD.CultureCode
						,ZODD.CreditCardExpYear,ZODD.CardType,ZODD.CreditCardNumber,ZODD.PaymentExternalId,ZODPS.DisplayName as PublishState
			  INTO ##OrderList
			  FROM ZnodeOmsOrder ZOO
			  INNER JOIN ZnodeOmsOrderDetails ZODD ON (ZODD.OmsOrderId = ZOO.OmsOrderId)
			  INNER JOIN ZnodePortal ZP ON (ZP.PortalId = ZODD.portalId )
			  LEFT JOIN ZnodePublishState ZODPS ON (ZODPS.PublishStateId = ZOO.PublishStateId)
			  LEFT JOIN ZnodePaymentType ZPS ON (ZPS.PaymentTypeId = ZODD.PaymentTypeId )
			  LEFT JOIN  ZnodeOmsOrderStateShowToCustomer ZOSC ON (ZOSC.OmsOrderStateId = ZODD.OmsOrderStateId)
			  LEFT JOIN ZnodeOmsOrderState ZOS ON (ZOS.OmsOrderStateId = ZODD.OmsOrderStateId)
			  LEFT JOIN ZnodeOmsPaymentState ZOPS ON (ZOPS.OmsPaymentStateId = ZODD.OmsPaymentStateId)
			  LEFT JOIN ZnodeUser ZU ON (ZU.UserId = ZODD.UserId)
			  LEFT JOIN [dbo].[View_GetUserDetails]  ZVGD ON (ZVGD.UserId = ZODD.CreatedBy )
			  LEFT JOIN [dbo].[View_GetUserDetails]  ZVGDI ON (ZVGDI.UserId = ZODD.ModifiedBy)
			  LEFT JOIN ZnodeShipping ZS ON (ZS.ShippingId = ZODD.ShippingId)
			  LEFT OUTER JOIN ZnodePaymentSetting ZPSS ON (ZPSS.PaymentSettingId = ZODD.PaymentSettingId)
			  LEFT JOIN ZnodePortalPaymentSetting ZPPS ON (ZPPS.PaymentSettingId = ZPSS.PaymentSettingId  AND ZPPS.PortalId = ZODD.PortalId   )
			  WHERE  ZODD.IsActive = 1
		       AND (EXISTS (SELECT TOP 1 1 FROM dbo.Fn_GetRecurciveUserId ('+CAST(@UserId AS VARCHAR(50))+','''+@ProcessType+''' ) FNRU WHERE FNRU.UserId = ZU.UserId ) OR '+CAST(@UserId AS VARCHAR(50))+' =0 )
			  
			  ALTER TABLE ##OrderList ADD ShippingPostalCode VARCHAR(50)

			  UPDATE OL set ol.ShippingPostalCode = sp.ShipToPostalCode
			  from ##OrderList OL
			  cross apply (select top 1 ShipToPostalCode from ZnodeOmsOrderShipment where OmsOrderShipmentId in  (select OmsOrderShipmentId from ZnodeOmsOrderLineItems where OmsOrderDetailsId = OL.OmsOrderDetailsId))sp

			  SELECT ZOOLI.ProductName,ZOOLI.Price,Count(ZOOLI.OmsOrderLineItemsId)Over(PARTITION BY Ol.OmsOrderId Order by ZOOLI.OmsOrderDetailsId) CountId
			  ,Row_Number()Over( PARTITION BY Ol.OmsOrderId Order BY ZOOLI.Price DESC, ZOOLI.ProductName) RowId,Ol.OmsOrderId
			  ,CAST(Case when ZRRLI.RmaRequestItemId IS NULL THEN 0 ELSE 1 END AS BIT )  IsInRMA  ,OL.CreatedBy ,OL.ModifiedBy
			  into ##Cte_OrderLineItem
			  FROM ZnodeOmsOrderLineItems  ZOOLI
			  LEFT JOIN ##OrderList OL ON ( OL.OmsOrderDetailsId = ZOOLI.OmsOrderDetailsId )
			  LEFT JOIN ZnodeRmaRequestItem ZRRLI ON (ZRRLI.OmsOrderLineItemsId = ZOOLI.OmsOrderLineItemsId )
			  WHERE ZOOLI.Quantity > 0 AND ParentOmsOrderLineItemsId IS NOT NULL
			

		    ;with Cte_GetOrderData AS 
			(
				SELECT distinct OL.*, CTOLI.ProductName,CountId ,IsInRMA
				FROM ##OrderList OL
				LEFT JOIN ##Cte_OrderLineItem CTOLI ON (CTOLI.OmsOrderId = OL.OmsOrderId AND CTOLI.RowId = 1 )
			)
			, Cte_OrderLineDescribe AS 
			(
				SELECT distinct *,'+dbo.Fn_GetPagingRowId(@Order_BY,'OmsOrderId DESC,OmsOrderDetailsId DESC')+',Count(*)Over() CountNo
				FROM Cte_GetOrderData
				WHERE 1= 1 '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'
		    )
			SELECT OmsOrderId,OrderNumber,PortalId,StoreName,CurrencyCode,OrderState,ShippingId,
			PaymentTypeId,PaymentSettingId,PaymentStatus,PaymentType,ShippingStatus,OrderDate,UserId,UserName,PaymentTransactionToken,Total,
			ProductName OrderItem,OmsOrderDetailsId,CountId ItemCount, PoDocument AS PODocumentPath,IsInRMA ,CASE WHEN CreatedBy IS NULL THEN email  ELSE CreatedBy END AS CreatedByName ,ModifiedBy as ModifiedByName,RowId,CountNo,
			Email,PhoneNumber,SubTotal,TaxCost,ShippingCost,BillingPostalCode, ShippingPostalCode,OrderModifiedDate,PaymentDisplayName, ExternalId,CreditCardExpMonth
						,CreditCardExpYear,CardType,CreditCardNumber,PaymentExternalId,CultureCode,PublishState 
			FROM Cte_OrderLineDescribe
			'+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)
			 

			INSERT INTO @TBL_OrderList(OmsOrderId,OrderNumber,PortalId,StoreName,CurrencyCode,OrderState,ShippingId,
			PaymentTypeId,PaymentSettingId,PaymentStatus,PaymentType,ShippingStatus,OrderDate,UserId,UserName,PaymentTransactionToken,Total,
			OrderItem,OmsOrderDetailsId, ItemCount, PODocumentPath,IsInRMA ,CreatedByName ,ModifiedByName,RowId,CountNo,Email,PhoneNumber,SubTotal,TaxCost,ShippingCost,BillingPostalCode,ShippingPostalCode,OrderModifiedDate,PaymentDisplayName ,ExternalId,CreditCardExpMonth
						,CreditCardExpYear,CardType,CreditCardNumber ,PaymentExternalId,CultureCode,PublishState)
		    EXEC(@SQL)

			SET @RowsCount = ISNULL((SELECT TOP 1 CountNo FROM @TBL_OrderList),0)

			SELECT OmsOrderId,OrderNumber,PortalId,StoreName,CurrencyCode,OrderState,ShippingId,
			PaymentTypeId,PaymentSettingId,PaymentStatus,PaymentType,ShippingStatus,OrderDate,UserId,UserName,PaymentTransactionToken,Total,
			OrderItem,OmsOrderDetailsId, ItemCount, PODocumentPath,IsInRMA ,CreatedByName ,ModifiedByName,Email,PhoneNumber,SubTotal,TaxCost,ShippingCost,BillingPostalCode,ShippingPostalCode,OrderModifiedDate,PaymentDisplayName,ExternalId,CreditCardExpMonth,CreditCardExpYear,CardType,CreditCardNumber,PaymentExternalId,CultureCode,PublishState
			FROM @TBL_OrderList
			ORDER BY RowId

			if object_id('tempdb..##OrderList') is not null
				drop table ##OrderList


			if object_id('tempdb..##Cte_OrderLineItem') is not null
				drop table ##Cte_OrderLineItem

          END TRY
         BEGIN CATCH
             DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetOmsOrderDetail @WhereClause = '''+ISNULL(CAST(@WhereClause AS VARCHAR(max)),'''''')+''',@Rows='''+ISNULL(CAST(@Rows AS VARCHAR(50)),'''''')+''',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',
			 @Order_BY='+ISNULL(@Order_BY,'''''')+',@UserId = '+ISNULL(CAST(@UserId AS VARCHAR(50)),'''')+',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')+',@IsFromAdmin='+ISNULL(CAST(@IsFromAdmin AS VARCHAR(10)),'''');
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetOmsOrderDetail',
				@ErrorInProcedure = 'Znode_GetOmsOrderDetail',
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;

	 GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetOmsQuoteList')
BEGIN 
	DROP PROCEDURE Znode_GetOmsQuoteList
END
GO
CREATE PROCEDURE [dbo].[Znode_GetOmsQuoteList]  
(   
  @WhereClause NVARCHAR(MAX),  
  @Rows        INT            = 100,  
  @PageNo      INT            = 1  ,  
  @Order_BY    VARCHAR(1000)  = '' ,  
  @RowsCount   INT OUT             ,  
  @AccountId   INT,  
  @UserId      INT            = 0,   
  @IsPendingPayment BIT = 0  ,   
  @IsParentPendingOrder  BIT = 1   
  )  
AS   
   /*  
  Summary :- This procedure is used to get the Quote list of account and Users  
    Fn_GetRecurciveAccounts is used to fetch AccountId and Its recursive ParentId    
    @InnerWhereClause contains AccountId fetched from the Function Fn_GetRecurciveAccounts   
    OrderDetails are fetched from the tables filtered by AccountId Present in @InnerWhereClause  
    OrderDetails are fetched in Descending order of OmsQuoteId  
     Unit Testing   
   
     EXEC Znode_GetOmsQuoteList '(PortalId in(''13'',''2'',''3'',''6'')) ' ,@RowsCount = 0 ,@AccountId = 0,@UserId = 0    
  
*/  
     BEGIN  
         BEGIN TRY  
             SET NOCOUNT ON;  
             DECLARE @SQL NVARCHAR(MAX)= '', @InnerWhereClause VARCHAR(MAX)= '', @ProcessType  varchar(50)='Quote',@QuoteFilter NVARCHAr(max)='';  
  
             DECLARE @TBL_QuoteDetails TABLE (OmsQuoteId INT,UserName NVARCHAR(300),AccountName NVARCHAR(400),QuoteOrderTotal NUMERIC(28, 6),[OrderStatus] VARCHAR(300),  
             CreatedDate DATETIME,StoreName NVARCHAR(Max),CurrencyCode VARCHAR(100),CultureCode VARCHAR(100),PublishState nvarchar(600),RowId INT,CountNo INT,CreatedByName NVARCHAr(max) ,ModifiedByName NVARCHAR(max),IsConvertedToOrder bit);  
  
     
             IF @UserId <> 0  AND @IsParentPendingOrder   = 1   
     
                 BEGIN  
                     SET @InnerWhereClause = ' AND '''+CAST(@UserId AS VARCHAR(max))+''' = ZU.UserId ';  
                    -- SET @AccountId = (SELECT TOP 1 AccountID FROM ZnodeUser WHERE UserId = @UserId);  
                 END  
             ELSE IF @IsParentPendingOrder   = 0   
                 BEGIN  
                    SET @InnerWhereClause = ' AND  EXISTS (SELECT TOP 1 1 FROM [dbo].[Fn_GetRecurciveUserId] ('+CAST(@UserId AS VARCHAR(50))+','''+@ProcessType+''') SP WHERE (SP.UserId = ZU.UserId OR SP.UserId IS NULL) AND '''+CAST(@UserId AS VARCHAR(max))+''' <> ZU.UserId )'; 
 
      SET @QuoteFilter =' AND EXISTS (SELECT TOP 1 1 FROM ZnodeOMSQuoteApproval WR WHERE WR.OmsQuoteId = ZOQ.OmsQuoteId AND Wr.ApproverUserId ='+CAST(@UserId AS VARCHAR(50))+' ) ';  
  
     END  
    ELSE   
    BEGIN   
      SET @InnerWhereClause = ''  
    END     
        
    IF @IsPendingPayment =1   
    BEGIN   
     
     SET @InnerWhereClause = @InnerWhereClause+' AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodeUserGlobalAttributeValue a   
    INNER JOIN ZnodeUserGlobalAttributeValueLocale b  on (b.UserGlobalAttributeValueId = a.UserGlobalAttributeValueId)  
    INNER JOIN ZnodeGlobalAttribute c ON (c.GlobalAttributeid = a.GlobalAttributeId )  
    WHERE c.AttributeCOde = ''BillingAccountNumber'' AND a.UserId =  ZU.UserId AND b.AttributeValue = '''' ) AND ZOQ.IsPendingPayment =  1    '  
       
    END   
    ELSE   
    BEGIN  
       SET @InnerWhereClause = @InnerWhereClause+' AND ZOQ.IsPendingPayment = 0   '  
    END   
  
    SET @InnerWhereClause = @InnerWhereClause + CASE WHEN @AccountId > 0 THEN ' AND ZA.AccountId ='+CAST(@AccountId AS VARCHAR(200)) ELSE '' END   
  
             SET @SQL = '     
    ;With Cte_GetQuoteDetail AS   
    (  
    SELECT Zu.UserId ,ZOQ.OmsQuoteId,ZU.FirstName + CASE WHEN ZU.LastName IS NULL THEN '''' ELSE '' ''+Zu.LastName END UserName , QuoteOrderTotal , ZOOS.OrderStateName [OrderStatus]  
    ,ZOQ.CreatedDate,ZA.Name AccountName,ZP.PortalId,Zp.StoreName , ZCC.CurrencyCode AS CurrencyCode, ZC.CultureCode AS CultureCode ,ZVGD.UserName CreatedByName , ZVGDI.UserName ModifiedByName,  
    case when ZOQ.IsConvertedToOrder IS NULL THEN 0 ELSE ZOQ.IsConvertedToOrder END IsConvertedToOrder,ISNULL(DT.QuoteTypeCode,'''') QuoteTypeCode,ZODPS.DisplayName as PublishState  
    FROM ZnodeOmsQuote ZOQ  
    INNER JOIN ZnodeUser ZU ON (ZU.UserId = ZOQ.UserId)  
	LEFT JOIN ZnodePublishState ZODPS ON (ZODPS.PublishStateId = ZOQ.PublishStateId)
    LEFT JOIN ZnodeUserPortal ZUP ON ZU.UserId = ZUP.UserId  
    inner JOIN ZnodePortal ZP ON ZP.PortalId = Zoq.PortalId  
    '+CASE WHEN @IsParentPendingOrder = 0 THEN ' LEFT JOIN ZnodeOMSQuoteApproval TYUI ON (TYUI.OmsQuoteId = ZOQ.OmsQuoteId AND TYUI.ApproverUserId ='+CAST(@UserId AS VARCHAR(50))+') ' ELSE '' END +'  
    LEFT JOIN ZnodePortalUnit ZPU ON (ZPU.PortalId = Zp.PortalId)  
    LEFT JOIN ZnodeCulture ZC ON (ZPU.CultureId = ZC.CultureId)    --- Changed join condition from CurrencyId to CultureId  
	LEFT JOIN ZnodeCurrency ZCC ON (ZC.CurrencyId = ZCC.CurrencyId)    --- Joined ZnodeCulture and ZnodeCurrency 
    LEFT JOIN ZnodeOmsOrderState ZOOS ON (ZOOS.OmsOrderStateId = '+CASE WHEN @IsParentPendingOrder = 0 THEN 'TYUI.OmsOrderStateId ' ELSE 'ZOQ.OmsOrderStateId' END  +' )   
    LEFT JOIN ZnodeAccount ZA ON (ZA.AccountId = ZU.AccountId )  
    LEFT JOIN [dbo].[View_GetUserDetails]  ZVGD ON (ZVGD.UserId = ZOQ.CreatedBy )  
    LEFT JOIN [dbo].[View_GetUserDetails]  ZVGDI ON (ZVGDI.UserId = ZOQ.ModifiedBy)  
    LEFT JOIN ZnodeOmsQuoteType DT ON (DT.OmsQuoteTypeId = ZOQ.OmsQuoteTypeId)  
    WHERE 1=1'+' '+@InnerWhereClause+@QuoteFilter+'  
  
   )  
    , Cte_GetQuote AS   
    (  
    SELECT OmsQuoteId,UserName ,AccountName , QuoteOrderTotal QuoteAmount, [OrderStatus]  ,CreatedDate ,StoreName,CurrencyCode, CultureCode,PublishState,CreatedByName , ModifiedByName ,IsConvertedToOrder,'+dbo.Fn_GetPagingRowId(@Order_BY,'CreatedDate DESC,OmsQuoteId DESC')+',Count(*)Over() CountNo   
    FROM Cte_GetQuoteDetail  
     WHERE 1=1   
      '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'  
    )  
    SELECT OmsQuoteId,UserName ,AccountName ,  QuoteAmount, [OrderStatus]  ,CreatedDate ,StoreName,CurrencyCode, CultureCode,PublishState,RowId,CountNo,CreatedByName , ModifiedByName,IsConvertedToOrder  
    FROM Cte_GetQuote   
   '+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)  
            
    PRINT  @SQL  
        
             INSERT INTO @TBL_QuoteDetails (OmsQuoteId, UserName, AccountName, QuoteOrderTotal ,OrderStatus, CreatedDate, StoreName,CurrencyCode, CultureCode,PublishState, RowId ,CountNo,CreatedByName , ModifiedByName,IsConvertedToOrder)        
    EXEC (@SQL);  
             SET @RowsCount = ISNULL((SELECT TOP 1 CountNo FROM @TBL_QuoteDetails), 0);  
  
             SELECT OmsQuoteId,UserName,AccountName,QuoteOrderTotal,[OrderStatus],CreatedDate,StoreName,CurrencyCode, CultureCode,PublishState,CreatedByName , ModifiedByName,IsConvertedToOrder  
             FROM @TBL_QuoteDetails;  
      
         END TRY  
         BEGIN CATCH  
              DECLARE @Status BIT ;  
       SET @Status = 0;  
       DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetOmsQuoteList @WhereClause = '+CAST(@WhereClause AS VARCHAR(max)
)+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@AccountId='+CAST(@AccountId AS VARCHAR(50))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@PortalId='+''
+',@Status='+CAST(@Status AS VARCHAR(10));  
                    
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                      
      
             EXEC Znode_InsertProcedureErrorLog  
    @ProcedureName = 'Znode_GetOmsQuoteList',  
    @ErrorInProcedure = @Error_procedure,  
    @ErrorMessage = @ErrorMessage,  
    @ErrorLine = @ErrorLine,  
    @ErrorCall = @ErrorCall;  
         END CATCH;  
     END

	 GO
	 
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPaymentSetting')
BEGIN 
	DROP PROCEDURE Znode_GetPaymentSetting
END
GO

CREATE PROCEDURE [dbo].[Znode_GetPaymentSetting]
(
  @WhereClause  NVARCHAR(Max)  = '',
  @Rows         INT            = 100,
  @PageNo       INT            = 1,
  @Order_BY     VARCHAR(1000)  = ' DisplayOrder ASC',
  @RowsCount    INT OUT            ,
  @PortalId     INT            = 0 ,
  @ProfileId    INT            = 0 ,
  @UserId       INT			   = 0 ,
  @IsAssociated INT            = 0
)
AS
 /*
   Summary :- This procedure is used to get the associated and Unassociated list of paymentsetting for portal and profile

   Unit Testing

   DECLARE @profilei int = 0
   EXEC Znode_GetPaymentSetting @WhereClause = '', @RowsCount =  @profilei OUT ,@PortalId = 0 ,@ProfileId= 0 ,@IsAssociated = 0 ,@UserId= 0  SELECT  @profilei

 */
 BEGIN
  BEGIN TRY
   SET NOCOUNT ON
     DECLARE @SQL NVARCHAR(MAX)= '',@FilterWhereClause VARCHAR(2000) = '' ,@InternalOrderBy VARCHAR(2000)= ''

	 DECLARE @TBL_PaymentSetting TABLE (PaymentSettingId INT, PaymentApplicationSettingId INT,PaymentTypeId INT,PaymentGatewayId INT
										,PaymentName VARCHAR(600),IsActive BIT,DisplayOrder INT,IsTestMode BIT,IsPoDocUploadEnable BIT
										,IsPoDocRequire BIT,CreatedBy INT,CreatedDate DATETIME,ModifiedBy INT,ModifiedDate DATETIME
										,PortalId INT,StoreName NVARCHAR(max),IsAssociated BIT,ProfileId int,ProfileName NVARCHAR(200),PaymentTypeName VARCHAr(500),GatewayName VARCHAR(300),RowId INT,CountNo INT
										,PaymentDisplayName nvarchar(1200),PaymentExternalId VARCHAR(100),IsApprovalRequired BIT,PaymentCode VARCHAR(200),GatewayCode VARCHAR(200),IsCallToPaymentAPI BIT,IsBillingAddressOptional Bit,IsOABRequired BIT,PortalPaymentGroupId INT,PublishState VARCHAR(50) )


     IF ISNULL(@UserId,0) <> 0  OR (ISNULL(@PortalId,0) > 0 AND ISNULL(@ProfileId,0) > 0)
	 BEGIN
	  DECLARE  @PortalIds VARCHAR(2000) = '' ,@ProfileIds VARCHAR(2000) = '' ,@PaymentSettingIds VARCHAR(2000)
	  IF ISNULL(@UserId,0) <> 0
	  BEGIN
	  SET @PortalIds = @PortalId
	  EXEC Znode_GetUserPortalAndProfile @UserId ,@PortalIds OUT,@ProfileIds OUT
	  END
	  ELSE
	  BEGIN
	   SET @PortalIds = @PortalId
	   SET @ProfileIds = @ProfileId

	  END
	  SET @ProfileIds = CASE WHEN CAST(@ProfileId AS VARCHAr(200))  <= '0' THEN @ProfileIds ELSE CAST(@ProfileId AS VARCHAr(200)) END 
	  EXEC Znode_GetCommonPaymentSetting @PortalIds,@ProfileIds,@PaymentSettingIds OUT

	  SET @FilterWhereClause = ' AND  PaymentSettingId IN ('+ISNULL(@PaymentSettingIds,'0')+') '

	 END

	 SELECT PaymentSettingId ,ZPPG.PortalPaymentGroupId,ZPA.PortalId 
	 INTO #ZnodePortalPaymentApprovers
	 FROM ZnodePortalPaymentApprovers ZPPA 
	 INNER JOIN [ZnodePortalPaymentGroup] ZPPG ON( ZPPA.PortalPaymentGroupId = ZPPG.PortalPaymentGroupId)  
     INNER JOIN [ZnodePortalApproval] ZPA ON (ZPA.PortalApprovalId = ZPPG.PortalApprovalId) 
	 WHERE  ZPA.EnableApprovalManagement =1 AND ZPA.PortalId = @PortalId AND ZPPG.isActive = 1 



	IF ISNULL(@PortalId,0) > 0 AND (   ISNULL(@ProfileId,0) = 0)
	BEGIN
	 SET @SQL = '
	             ;With Cte_PaymentSetting AS
				 (
				 SELECT  ZPS.PaymentSettingId,ZPS.PaymentApplicationSettingId,ZPS.PaymentTypeId,ZPS.PaymentGatewayId,ZPS.PaymentName,ZPS.IsActive
						,ZPS.DisplayOrder,ZPS.IsTestMode,ZPS.IsPoDocUploadEnable,ZPS.IsPoDocRequire,ZPS.CreatedBy,ZPS.CreatedDate,ZPS.ModifiedBy,ZPS.ModifiedDate
						,ZP.PortalId,ZP.StoreName, CASE WHEN ZPPS.PortalPaymentId IS NULL THEN 0 ELSE 1 END IsAssociated, NULL ProfileId, NULL ProfileName,ZPT.BehaviourType PaymentTypeName,ZPG.GatewayName
						, CASE WHEN ZPPS.PaymentDisplayName IS NULL OR ZPPS.PaymentDisplayName = ''''  THEN ZPS.PaymentDisplayName ELSE ZPPS.PaymentDisplayName END   PaymentDisplayName,  ZPPS.PaymentExternalId ,
						 CASE WHEN YU.PaymentSettingId IS NOT NULL  THEN 1 ELSE 0 END AS IsApprovalRequired , ZPS.PaymentCode, ZPG.GatewayCode,ZPT.IsCallToPaymentAPI, ZPS.IsBillingAddressOptional,ISNULL(ZPS.IsOABRequired,0) IsOABRequired
						 ,YU.PortalPaymentGroupId, ZPPOS.DisplayName PublishState 
				 FROM ZnodePaymentSetting ZPS
				 INNER JOIN ZnodePaymentType  ZPT ON (ZPT.PaymentTypeId = ZPS.PaymentTypeId)
				 LEFT JOIN ZnodePaymentGateway ZPG ON (ZPG.PaymentGatewayId= ZPS.PaymentGatewayId)
				 LEFT JOIN #ZnodePortalPaymentApprovers YU ON (YU.PaymentSettingId = ZPS.PaymentSettingId)
				 CROSS APPLY ZnodePortal ZP
				 LEFT JOIN ZnodePortalPaymentSetting ZPPS on ( ZPPS.PortalId = ZP.PortalId AND ZPPS.PaymentSettingId = ZPS.PaymentSettingId)
				 LEFT JOIN ZnodePublishState ZPPOS ON (ZPPOS.PublishStateId = ZPPS.PublishStateId )
				 )

				 '
	 IF @userId <> 0 
	 BEGIN 
		SET @IsAssociated = 1  	
	 END 
	 
	 SET @FilterWhereClause = ' WHERE PortalId = '+CAST(@PortalId AS VARCHAR(50))+'
								AND  IsAssociated = '+CAST(@IsAssociated AS VARCHAR(50))+CASE WHEN @FilterWhereClause = '' THEN ' ' ELSE @FilterWhereClause END 
	 SET @InternalOrderBy = ' PaymentSettingId,PortalId '
    END
	ELSE IF ISNULL(@ProfileId,0) > 0 AND ( ISNULL(@UserId,0) = 0 AND  ISNULL(@PortalId,0) = 0)
	BEGIN
	  SET @SQL = '
	            ;With Cte_PaymenTSetting AS
				 (
				 SELECT  ZPS.PaymentSettingId,ZPS.PaymentApplicationSettingId,ZPS.PaymentTypeId,ZPS.PaymentGatewayId,ZPS.PaymentName,ZPS.IsActive
						,CASE WHEN '+CAST(@ProfileId AS VARCHAR(200))+' >= 0 AND '+CAST(@IsAssociated AS VARCHAR(200))+' = 1 THEN ISNULL(ZPPS.DisplayOrder,ZPS.DisplayOrder) ELSE ZPS.DisplayOrder END AS DisplayOrder,ZPS.IsTestMode,ZPS.IsPoDocUploadEnable,ZPS.IsPoDocRequire,ZPS.CreatedBy,ZPS.CreatedDate,ZPS.ModifiedBy,ZPS.ModifiedDate
						,NULL PortalId,NULL StoreName, CASE WHEN ZPPS.ProfilePaymentSettingId IS NULL THEN 0 ELSE 1 END IsAssociated ,ZP.ProfileId,ZP.ProfileName,ZPT.BehaviourType PaymentTypeName,ZPG.GatewayName
						,ZPS.PaymentDisplayName	, NULL PaymentExternalId,
						 CASE WHEN YU.PaymentSettingId IS NOT NULL  THEN 1 ELSE 0 END AS IsApprovalRequired  , ZPS.PaymentCode, ZPG.GatewayCode,ZPT.IsCallToPaymentAPI, ZPS.IsBillingAddressOptional,0 IsOABRequired,YU.PortalPaymentGroupId
						 , ISNULL(ZPPOS.DisplayName,''Production'' )  PublishState 
				 FROM ZnodePaymentSetting ZPS
				 INNER JOIN ZnodePaymentType  ZPT ON (ZPT.PaymentTypeId = ZPS.PaymentTypeId)
				 LEFT JOIN ZnodePaymentGateway ZPG ON (ZPG.PaymentGatewayId= ZPS.PaymentGatewayId)
				 LEFT JOIN #ZnodePortalPaymentApprovers YU ON (YU.PaymentSettingId = ZPS.PaymentSettingId)
				 CROSS APPLY ZnodeProfile ZP
				 LEFT JOIN ZnodeProfilePaymentSetting ZPPS on ( ZPPS.ProfileId = ZP.ProfileId AND ZPPS.PaymentSettingId = ZPS.PaymentSettingId)
				 LEFT JOIN ZnodePublishState ZPPOS ON (ZPPOS.PublishStateId = ZPPS.PublishStateId)
				 )
               '
	   SET @FilterWhereClause = ' WHERE ProfileId = '+CAST(@ProfileId AS VARCHAR(50))+'
									AND  IsAssociated = '+CAST(@IsAssociated AS VARCHAR(50))+CASE WHEN @FilterWhereClause = '' THEN ' ' ELSE @FilterWhereClause END 
	  SET @InternalOrderBy = ' PaymentSettingId,ProfileId '
	END
	ELSE
	BEGIN
	  SET @SQL = '
	            ;With Cte_PaymenTSetting AS
				 (
				 SELECT   ZPS.PaymentSettingId,ZPS.PaymentApplicationSettingId,ZPS.PaymentTypeId,ZPS.PaymentGatewayId,ZPS.PaymentName,ZPS.IsActive
						,ISNULL(YOPU.DisplayOrder, ZPS.DisplayOrder) DisplayOrder,ZPS.IsTestMode,ZPS.IsPoDocUploadEnable,ZPS.IsPoDocRequire,ZPS.CreatedBy,ZPS.CreatedDate,ZPS.ModifiedBy,ZPS.ModifiedDate
						,NULL PortalId,NULL StoreName, NULL IsAssociated ,NULL ProfileId,NULL ProfileName,ZPT.BehaviourType PaymentTypeName,ZPG.GatewayName	
						,  CASE WHEN '+CAST(@PortalId AS VARCHAR(100))+' > 0  AND ZPPS.PaymentDisplayName  IS NOT NULL  THEN ZPPS.PaymentDisplayName  ELSE  ZPS.PaymentDisplayName   END PaymentDisplayName   , NULL PaymentExternalId, CASE WHEN YU.PaymentSettingId IS NOT NULL  THEN 1 ELSE 0 END AS IsApprovalRequired 
						 , ZPS.PaymentCode, ZPG.GatewayCode,ZPT.IsCallToPaymentAPI ,ZPS.IsBillingAddressOptional,ZPS.IsOABRequired,YU.PortalPaymentGroupId
						 , ISNULL(ZPPOS.DisplayName,''Production'' )  PublishState 
				 FROM ZnodePaymentSetting ZPS
				 INNER JOIN ZnodePaymentType  ZPT ON (ZPT.PaymentTypeId = ZPS.PaymentTypeId)
				 LEFT JOIN ZnodePaymentGateway ZPG ON (ZPG.PaymentGatewayId= ZPS.PaymentGatewayId)
				 LEFT JOIN ZnodeProfilePaymentSetting YOPU ON (YOPU.PaymentSettingId = ZPS.PaymentSettingId AND YOPU.ProfileId = '+CAST(@ProfileId AS NVARCHAr(200))+')
				 LEFT JOIN #ZnodePortalPaymentApprovers YU ON (YU.PaymentSettingId = ZPS.PaymentSettingId) 
				 LEFT JOIN ZnodePortalPaymentSetting ZPPS ON (ZPS.PaymentSettingId  = ZPPS.PaymentSettingId AND ZPPS.PortalId = CASE WHEN '+CAST(@PortalId AS VARCHAR(100))+' > 0  THEN '+CAST(@PortalId AS VARCHAR(100))+' ELSE  YU.PortalId END    )
				 LEFT JOIN ZnodePublishState ZPPOS ON (ZPPOS.PublishStateId = '+CASE WHEN  CAST(@ProfileId AS VARCHAr(200))  <= '0' THEN ' ZPPS.PublishStateId ' ELSE ' YOPU.PublishStateId ' END +')
				  ) '
	 SET @FilterWhereClause = CASE WHEN @FilterWhereClause ='' THEN ' WHERE 1=1 ' ELSE ' WHERE 1=1 '+@FilterWhereClause END
	 SET @InternalOrderBy = ' PaymentSettingId '
	END

	SET @SQL = @SQL+ ', Cte_PaymentSettingFilter AS
				 (

					SELECT PaymentSettingId,PaymentApplicationSettingId,PaymentTypeId,PaymentGatewayId,PaymentName,IsActive
						,DisplayOrder,IsTestMode,IsPoDocUploadEnable,IsPoDocRequire,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
						,PortalId,StoreName, ProfileId, ProfileName , PaymentTypeName,GatewayName,PaymentDisplayName,PaymentExternalId,IsApprovalRequired, PaymentCode, GatewayCode,IsCallToPaymentAPI, IsBillingAddressOptional,IsOABRequired,PortalPaymentGroupId,PublishState
						,'+dbo.Fn_GetPagingRowId(@Order_BY,@InternalOrderBy)+',Count(*)Over() CountNo

					FROM Cte_PaymenTSetting
				    '+@FilterWhereClause+'
					'+dbo.Fn_GetFilterWhereClause(@WhereClause)+'
				 )

				 SELECT PaymentSettingId,PaymentApplicationSettingId,PaymentTypeId,PaymentGatewayId,PaymentName,IsActive
						,DisplayOrder,IsTestMode,IsPoDocUploadEnable,IsPoDocRequire,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
						,PortalId,StoreName, ProfileId, ProfileName,PaymentTypeName,GatewayName,PaymentDisplayName,PaymentExternalId,IsApprovalRequired, PaymentCode, GatewayCode,IsCallToPaymentAPI,IsBillingAddressOptional,IsOABRequired,PortalPaymentGroupId,PublishState,RowId ,CountNo
				 FROM Cte_PaymentSettingFilter '
				 +[dbo].[Fn_GetPaginationWhereClause](@PageNo,@Rows)

     PRINT @SQL 
	
	 INSERT INTO @TBL_PaymentSetting (PaymentSettingId,PaymentApplicationSettingId,PaymentTypeId,PaymentGatewayId,PaymentName,IsActive
						,DisplayOrder,IsTestMode,IsPoDocUploadEnable,IsPoDocRequire,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
						,PortalId,StoreName, ProfileId, ProfileName,PaymentTypeName,GatewayName,PaymentDisplayName,PaymentExternalId,IsApprovalRequired, PaymentCode, GatewayCode,IsCallToPaymentAPI,IsBillingAddressOptional,IsOABRequired,PortalPaymentGroupId,PublishState,RowID,CountNo)
	 EXEC (@SQL)

	 SET @RowsCount = ISNULL((SELECT Top 1 CountNo FROM @TBL_PaymentSetting),0)
	  
	 SELECT PaymentSettingId,PaymentApplicationSettingId,PaymentTypeId,PaymentGatewayId,PaymentName,IsActive
						,DisplayOrder,IsTestMode,IsPoDocUploadEnable,IsPoDocRequire,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
						,PortalId,StoreName, ProfileId, ProfileName,PaymentTypeName,GatewayName,PaymentDisplayName,PaymentExternalId,IsApprovalRequired, PaymentCode, GatewayCode,IsCallToPaymentAPI, IsBillingAddressOptional,IsOABRequired,PortalPaymentGroupId,PublishState
	 FROM @TBL_PaymentSetting
	 order by RowID,DisplayOrder


  END TRY
  BEGIN CATCH
             DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPaymentSetting @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@PortalId='+CAST(@PortalId AS VARCHAR(50))+',@ProfileId='+CAST(@ProfileId AS VARCHAR(50))+',@IsAssociated='+CAST(@IsAssociated AS VARCHAR(50))+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));

             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;

             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetPaymentSetting',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
  END CATCH
 END

 GO

 IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetShippingList')
BEGIN 
	DROP PROCEDURE Znode_GetShippingList
END
GO
CREATE PROCEDURE [dbo].[Znode_GetShippingList]
(
	   @WhereClause nvarchar(max)= ''
	   , @Rows int= 100
	   , @PageNo int= 1
	   , @Order_BY varchar(1000)= ' DisplayOrder ASC'
	   , @RowsCount int OUT
	   , @ProfileId int= 0
	   , @PortalId int= 0
	   , @UserId int= 0
	   , @IsAssociated int= 0
)
AS
/*
  Summary: This Procedure is used to get shipping details According to associated profile.

  Unit Testing:

   DECLARE @profileid int = 0
	EXEC [Znode_GetShippingList]  @WhereClause ='' ,  @ProfileId = 0,@PortalId=1   ,@IsAssociated=0, @RowsCount = @profileid OUT ,@UserId = 4   SELECT @profileid

*/
BEGIN
	BEGIN TRY
		SET NOCOUNT ON;
		DECLARE @SQL nvarchar(max), @FilterWhereClause varchar(2000)= '', @InternalOrderBy varchar(2000)= '';
		SET @Order_By = CASE WHEN @Order_By = '' THEN ' DisplayOrder ASC' ELSE @Order_By END 
		DECLARE @TBL_ProfileShipping TABLE
		(
			ProfileId int, ProfileName nvarchar(200), PortalId int, StoreName nvarchar(200), ShippingId int, ShippingTypeId int
			, ShippingCode nvarchar(max), HandlingCharge numeric(28,6), HandlingChargeBasedOn varchar(50), DestinationCountryCode nvarchar(50)
			, StateCode nvarchar(40), CountyFIPS nvarchar(100), Description nvarchar(max), IsActive bit, DisplayOrder int, ZipCode nvarchar(max)
			, CreatedDate datetime, ModifiedDate datetime, ShippingTypeName nvarchar(max), PortalShippingId int, ProfileShippingId int
			, ShippingName varchar(200), ClassName varchar(100), DeliveryTimeframe varchar(MAX), RowId int, CountNo int
			, PublishState varchar(600)
		);
		IF ISNULL(@UserId, 0) <> 0 OR
		   (ISNULL(@PortalId, 0) > 0 AND
		   ISNULL(@ProfileId, 0) > 0)
		BEGIN
			DECLARE @PortalIds varchar(2000)= '', @ProfileIds varchar(2000)= '', @ShippingIds varchar(2000)= '';
			IF ISNULL(@UserId, 0) <> 0
			BEGIN
			    SET @PortalIds = @PortalId
				EXEC Znode_GetUserPortalAndProfile @UserId, @PortalIds OUT, @ProfileIds OUT;
			END;
			ELSE
			BEGIN
				SET @PortalIds = @PortalId;
				SET @ProfileIds = @ProfileId;
			END;

			SET @ProfileIds = CASE WHEN CAST(@ProfileId AS VARCHAR(200))  <= '0' AND NOT EXISTS (SELECT TOP 1 1  FROM ZnodeProfileShipping WHERE ProfileId = @ProfileId) THEN @ProfileIds ELSE CAST(@ProfileId AS VARCHAR(200)) END 
			EXEC Znode_GetCommonShipping @PortalIds, @ProfileIds, @ShippingIds OUT;

			SET @FilterWhereClause = '  WHERE ShippingId IN ( '+ISNULL(@ShippingIds,'0') +' ) ';
		END;
		IF ISNULL(@ProfileId, 0) > 0 AND
		   ISNULL(@UserId, 0) = 0 AND
		   ISNULL(@PortalId, 0) = 0
		BEGIN
			SET @SQL = '
			   ;WITH CTE_GetAssociatedShipping as
			  (
				SELECT  ZP.ProfileId, ZP.ProfileName,NULL PortalId, NULL StoreName ,ZS.ShippingId,ZS.ShippingTypeId,ZS.ShippingCode,ZS.HandlingCharge,ZS.HandlingChargeBasedOn
			    ,ZS.DestinationCountryCode,ZS.StateCode,ZS.CountyFIPS,ZS.Description,ZS.IsActive,CASE WHEN '+CAST(@ProfileId AS VARCHAR(200))+' >= 0 AND '+CAST(@IsAssociated AS VARCHAR(200))+' = 1 THEN ISNULL(ZPS.DisplayOrder,ZS.DisplayOrder) ELSE ZS.DisplayOrder END DisplayOrder,ZS.ZipCode,ZS.CreatedDate,ZS.ModifiedDate
				,CASE WHEN ZPS.ShippingId IS NULL THEN 0 ELSE 1 END IsAssociated,ZST.Name ShippingTypeName , ZPS.ProfileShippingId 
				, NULL PortalShippingId,ZS.ShippingName,ZST.ClassName,ZS.DeliveryTimeframe,CASE WHEN '+CAST(@ProfileId AS VARCHAR(200))+' >= 0 AND '+CAST(@IsAssociated AS VARCHAR(200))+' = 1 THEN ISNULL(ZPPOS.DisplayName,''Production'' )     ELSE ''Production'' END  PublishState

				FROM ZnodeShipping ZS
				INNER JOIN ZnodeShippingTypes ZST ON (ZST.ShippingTypeId = ZS.ShippingTypeId)
				CROSS APPLY ZnodeProfile ZP
				LEFT JOIN ZnodeProfileShipping ZPS ON(ZP.ProfileId = ZPS.ProfileId AND ZS.ShippingId = ZPS.ShippingId)
				LEFT JOIN ZnodePublishState ZPPOS ON (ZPPOS.PublishStateId = ZPS.PublishstateId )
			  )';
			SET @FilterWhereClause = 'WHERE ProfileId = '+CAST(@ProfileId AS varchar(50))+' AND IsAssociated = '+CAST(@IsAssociated AS varchar(50));
			SET @InternalOrderBy = ' ProfileId,ShippingId ';
		END;
		ELSE
		BEGIN
			IF ISNULL(@PortalId, 0) > 0 AND
			   ISNULL(@UserId, 0) = 0 AND
			   ISNULL(@ProfileId, 0) = 0
			BEGIN
				SET @SQL = '
			   ;WITH CTE_GetAssociatedShipping as
			  (
				SELECT NULL ProfileId,NULL ProfileName ,ZPP.PortalId, ZPP.StoreName,ZS.ShippingId,ZS.ShippingTypeId,ZS.ShippingCode,ZS.HandlingCharge,ZS.HandlingChargeBasedOn
			    ,ZS.DestinationCountryCode,ZS.StateCode,ZS.CountyFIPS,ZS.Description,ZS.IsActive,ZS.DisplayOrder,ZS.ZipCode,ZS.CreatedDate,ZS.ModifiedDate
				,CASE WHEN ZPS.PortalShippingId IS NULL THEN 0 ELSE 1 END IsAssociated,ZST.Name ShippingTypeName ,ZPS.PortalShippingId, NULL ProfileShippingId,ZS.ShippingName,ZST.ClassName,ZS.DeliveryTimeframe
				,ISNULL(ZPSS.DisplayName,''Production'' ) PublishState
				FROM ZnodeShipping ZS
				INNER JOIN ZnodeShippingTypes ZST ON (ZST.ShippingTypeId = ZS.ShippingTypeId)
				CROSS APPLY ZnodePortal ZPP
				LEFT JOIN ZnodePortalShipping ZPS ON(ZPP.PortalId = ZPS.PortalId AND ZS.ShippingId = ZPS.ShippingId)
				LEFT JOIN ZnodePublishState ZPSS ON (ZPS.PublishStateId =  ZPSS.PublishStateId )
			  )';
				SET @FilterWhereClause = 'WHERE PortalId = '+CAST(@PortalId AS varchar(50))+' AND IsAssociated = '+CAST(@IsAssociated AS varchar(50));
				SET @InternalOrderBy = ' PortalId ,ShippingId ';
			END;
			ELSE
			BEGIN			
				SET @SQL = '
			   ;With  CTE_GetAssociatedShipping as
			   (
			   SELECT NULL ProfileId, NULL ProfileName,NULL PortalId, NULL StoreName,ZS.ShippingId,ZS.ShippingTypeId,ZS.ShippingCode,ZS.HandlingCharge,ZS.HandlingChargeBasedOn
			   ,ZS.DestinationCountryCode,ZS.StateCode,ZS.CountyFIPS,ZS.Description,ZS.IsActive,ISNULL(ZPP.DisplayOrder, ZS.DisplayOrder  ) DisplayOrder,ZS.ZipCode,ZS.CreatedDate,ZS.ModifiedDate
			   , NULL IsAssociated ,ZST.Name ShippingTypeName , NULL PortalShippingId, NULL ProfileShippingId,ZS.ShippingName,ZST.ClassName,ZS.DeliveryTimeframe
			   ,ISNULL(ZPSS.DisplayName,''Production'' ) PublishState
			   FROM ZnodeShipping ZS
			   INNER JOIN ZnodeShippingTypes ZST ON (ZST.ShippingTypeId = ZS.ShippingTypeId)
			   LEFT JOIN ZnodeProfileShipping ZPP ON (ZPP.ShippingId = ZS.shippingId AND ZPP.Profileid = '+CAST(@ProfileId AS NVARCHAR(200))+')
			   LEFT JOIN ZnodePortalShipping ZPS ON( '+CAST(@PortalId AS VARCHAR(200))+'= ZPS.PortalId AND ZS.ShippingId = ZPS.ShippingId)
			   LEFT JOIN ZnodePublishState ZPSS ON (CASE WHEN '+CAST(@ProfileId AS VARCHAR(200))+' >= 0 AND EXISTS (SELECT TOP 1 1  FROM ZnodeProfileShipping TUI  WHERE TUI.Profileid = '+CAST(@ProfileId AS NVARCHAR(200))+' )  THEN ZPP.PublishSTateID ELSE ZPS.PublishSTateID  END =  ZPSS.PublishStateId ) 
			     )
			   ';
				SET @FilterWhereClause = CASE
										 WHEN ISNULL(@FilterWhereClause,'') = '' THEN ' WHERE 1=1 '
										 ELSE @FilterWhereClause
										 END;
				SET @InternalOrderBy = ' ShippingId ';
				
			END;
		END;

		SET @SQL = @SQL+'
	           , CTE_GetShipping AS
			 (
				SELECT	ProfileId,ProfileName,PortalId,StoreName,ShippingId,ShippingTypeId,ShippingCode,HandlingCharge,HandlingChargeBasedOn
			   ,DestinationCountryCode,StateCode,CountyFIPS,Description,IsActive,DisplayOrder,ZipCode,CreatedDate,ModifiedDate,ShippingTypeName , PortalShippingId, ProfileShippingId,ShippingName,ClassName,DeliveryTimeframe,PublishState
					,'+dbo.Fn_GetPagingRowId( @Order_BY, @InternalOrderBy )+',Count(*)Over() CountNo
				FROM CTE_GetAssociatedShipping
				'+ISNULL(@FilterWhereClause,'')+'
				'+dbo.Fn_GetFilterWhereClause( @WhereClause )+'
			 )

	      SELECT ProfileId,ProfileName,PortalId,StoreName,ShippingId,ShippingTypeId,ShippingCode,HandlingCharge,HandlingChargeBasedOn
					 ,DestinationCountryCode,StateCode,CountyFIPS,Description,IsActive,DisplayOrder,ZipCode,CreatedDate,ModifiedDate
					 ,ShippingTypeName,PortalShippingId,ProfileShippingId,ShippingName,ClassName,DeliveryTimeframe,PublishState,RowId,CountNo
		  FROM CTE_GetShipping
		  '+dbo.Fn_GetPaginationWhereClause( @PageNo, @Rows );

		 
		INSERT INTO @TBL_ProfileShipping( ProfileId, ProfileName, PortalId, StoreName, ShippingId, ShippingTypeId, ShippingCode, HandlingCharge, HandlingChargeBasedOn, DestinationCountryCode, StateCode, CountyFIPS, Description, IsActive, DisplayOrder, ZipCode, CreatedDate, ModifiedDate, ShippingTypeName, PortalShippingId, ProfileShippingId, ShippingName, ClassName, DeliveryTimeframe, PublishState,RowId, CountNo )
		EXEC (@SQL);

		SET @RowsCount = ISNULL((SELECT TOP 1 CountNo FROM @TBL_ProfileShipping), 0);
		SELECT ShippingId,ProfileId, ProfileName, PortalId, StoreName,  ShippingTypeId, ShippingCode, HandlingCharge, HandlingChargeBasedOn, DestinationCountryCode, StateCode, CountyFIPS, Description, IsActive, DisplayOrder, ZipCode, CreatedDate, ModifiedDate, ShippingTypeName, PortalShippingId, ProfileShippingId, ShippingName, ClassName, DeliveryTimeframe,PublishState
		FROM @TBL_ProfileShipping;

	END TRY
	BEGIN CATCH
		    DECLARE @Status BIT ;
		    SET @Status = 0;
		    DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetShippingList @WhereClause = '+cast (@WhereClause AS VARCHAR(50))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@ProfileId='+CAST(@ProfileId AS VARCHAR(50))+',@PortalId='+CAST(@PortalId AS VARCHAR(50))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@IsAssociated='+CAST(@IsAssociated AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));

            SELECT 0 AS ID,CAST(0 AS BIT) AS Status;

            EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetShippingList',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
	END CATCH;
END;

GO


UPDATE ZnodeApplicationSetting
SET Setting = '<?xml version="1.0" encoding="utf-16"?>  <columns>   <column>    <id>1</id>    <name>PaymentSettingId</name>    <headertext>Checkbox</headertext>    <width>40</width>    <datatype>Int32</datatype>    <columntype>Int32</columntype>    <allowsorting>true</allowsorting>    <allowpaging>false</allowpaging>    <format></format>    <isvisible>y</isvisible>    <mustshow>y</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl></islinkactionurl>    <islinkparamfield>PaymentSettingId</islinkparamfield>    <ischeckbox>y</ischeckbox>    <checkboxparamfield></checkboxparamfield>    <iscontrol>n</iscontrol>    <controltype></controltype>    <controlparamfield></controlparamfield>    <displaytext>ID</displaytext>    <editactionurl></editactionurl>    <editparamfield></editparamfield>    <deleteactionurl></deleteactionurl>    <deleteparamfield></deleteparamfield>    <viewactionurl></viewactionurl>    <viewparamfield></viewparamfield>    <imageactionurl></imageactionurl>    <imageparamfield></imageparamfield>    <manageactionurl></manageactionurl>    <manageparamfield></manageparamfield>    <copyactionurl></copyactionurl>    <copyparamfield></copyparamfield>    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>n</isadvancesearch>    <Class></Class>    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters></SearchControlParameters>    <DbParamField></DbParamField>    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>2</id>    <name>PaymentCode</name>    <headertext>Payment Code</headertext>    <width>40</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>false</allowpaging>    <format></format>    <isvisible>y</isvisible>    <mustshow>y</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl></islinkactionurl>    <islinkparamfield>PaymentTypeId</islinkparamfield>    <ischeckbox>n</ischeckbox>    <checkboxparamfield>PaymentTypeId</checkboxparamfield>    <iscontrol>n</iscontrol>    <controltype></controltype>    <controlparamfield></controlparamfield>    <displaytext>Payment Option</displaytext>    <editactionurl></editactionurl>    <editparamfield></editparamfield>    <deleteactionurl></deleteactionurl>    <deleteparamfield></deleteparamfield>    <viewactionurl></viewactionurl>    <viewparamfield></viewparamfield>    <imageactionurl></imageactionurl>    <imageparamfield></imageparamfield>    <manageactionurl></manageactionurl>    <manageparamfield></manageparamfield>    <copyactionurl></copyactionurl>    <copyparamfield></copyparamfield>    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class></Class>    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters></SearchControlParameters>    <DbParamField></DbParamField>    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>3</id>    <name>PaymentDisplayName</name>    <headertext>Payment Display Name</headertext>    <width>40</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>false</allowpaging>    <format></format>    <isvisible>y</isvisible>    <mustshow>y</mustshow>    <musthide>n</musthide>    <maxlength>100</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl></islinkactionurl>    <islinkparamfield>PaymentTypeId</islinkparamfield>    <ischeckbox>n</ischeckbox>    <checkboxparamfield>PaymentTypeId</checkboxparamfield>    <iscontrol>y</iscontrol>    <controltype>Text</controltype>    <controlparamfield></controlparamfield>    <displaytext>Payment Option</displaytext>    <editactionurl></editactionurl>    <editparamfield></editparamfield>    <deleteactionurl></deleteactionurl>    <deleteparamfield></deleteparamfield>    <viewactionurl></viewactionurl>    <viewparamfield></viewparamfield>    <imageactionurl></imageactionurl>    <imageparamfield></imageparamfield>    <manageactionurl></manageactionurl>    <manageparamfield></manageparamfield>    <copyactionurl></copyactionurl>    <copyparamfield></copyparamfield>    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class></Class>    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters></SearchControlParameters>    <DbParamField></DbParamField>    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>4</id>    <name>GatewayName</name>    <headertext>Payment Gateway</headertext>    <width>40</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format></format>    <isvisible>y</isvisible>    <mustshow>n</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl></islinkactionurl>    <islinkparamfield>PaymentGatewayId</islinkparamfield>    <ischeckbox>n</ischeckbox>    <checkboxparamfield>PaymentGatewayId</checkboxparamfield>    <iscontrol>n</iscontrol>    <controltype></controltype>    <controlparamfield></controlparamfield>    <displaytext>Payment Gateway</displaytext>    <editactionurl></editactionurl>    <editparamfield></editparamfield>    <deleteactionurl></deleteactionurl>    <deleteparamfield></deleteparamfield>    <viewactionurl></viewactionurl>    <viewparamfield></viewparamfield>    <imageactionurl></imageactionurl>    <imageparamfield></imageparamfield>    <manageactionurl></manageactionurl>    <manageparamfield></manageparamfield>    <copyactionurl></copyactionurl>    <copyparamfield></copyparamfield>    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class></Class>    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters></SearchControlParameters>    <DbParamField></DbParamField>    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>5</id>    <name>IsActive</name>    <headertext>Enable</headertext>    <width>40</width>    <datatype>Boolean</datatype>    <columntype>Boolean</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format></format>    <isvisible>y</isvisible>    <mustshow>n</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl></islinkactionurl>    <islinkparamfield>IsActive</islinkparamfield>    <ischeckbox>n</ischeckbox>    <checkboxparamfield>IsActive</checkboxparamfield>    <iscontrol>n</iscontrol>    <controltype></controltype>    <controlparamfield></controlparamfield>    <displaytext>Enable</displaytext>    <editactionurl></editactionurl>    <editparamfield></editparamfield>    <deleteactionurl></deleteactionurl>    <deleteparamfield></deleteparamfield>    <viewactionurl></viewactionurl>    <viewparamfield></viewparamfield>    <imageactionurl></imageactionurl>    <imageparamfield></imageparamfield>    <manageactionurl></manageactionurl>    <manageparamfield></manageparamfield>    <copyactionurl></copyactionurl>    <copyparamfield></copyparamfield>    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class></Class>    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters></SearchControlParameters>    <DbParamField></DbParamField>    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>6</id>    <name>DisplayOrder</name>    <headertext>Display Order</headertext>    <width>40</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>false</allowpaging>    <format></format>    <isvisible>y</isvisible>    <mustshow>n</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl></islinkactionurl>    <islinkparamfield>DisplayOrder</islinkparamfield>    <ischeckbox>n</ischeckbox>    <checkboxparamfield>DisplayOrder</checkboxparamfield>    <iscontrol>n</iscontrol>    <controltype></controltype>    <controlparamfield></controlparamfield>    <displaytext>Display Order</displaytext>    <editactionurl></editactionurl>    <editparamfield></editparamfield>    <deleteactionurl></deleteactionurl>    <deleteparamfield></deleteparamfield>    <viewactionurl></viewactionurl>    <viewparamfield></viewparamfield>    <imageactionurl></imageactionurl>    <imageparamfield></imageparamfield>    <manageactionurl></manageactionurl>    <manageparamfield></manageparamfield>    <copyactionurl></copyactionurl>    <copyparamfield></copyparamfield>    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class></Class>    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters></SearchControlParameters>    <DbParamField></DbParamField>    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>7</id>    <name>PaymentExternalId</name>    <headertext>Account Number</headertext>    <width>40</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>false</allowpaging>    <format></format>    <isvisible>y</isvisible>    <mustshow>y</mustshow>    <musthide>n</musthide>    <maxlength>1000</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl></islinkactionurl>    <islinkparamfield></islinkparamfield>    <ischeckbox>n</ischeckbox>    <checkboxparamfield></checkboxparamfield>    <iscontrol>y</iscontrol>    <controltype>Text</controltype>    <controlparamfield></controlparamfield>    <displaytext>PaymentExternalId</displaytext>    <editactionurl></editactionurl>    <editparamfield></editparamfield>    <deleteactionurl></deleteactionurl>    <deleteparamfield></deleteparamfield>    <viewactionurl></viewactionurl>    <viewparamfield></viewparamfield>    <imageactionurl></imageactionurl>    <imageparamfield></imageparamfield>    <manageactionurl></manageactionurl>    <manageparamfield></manageparamfield>    <copyactionurl></copyactionurl>    <copyparamfield></copyparamfield>    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class></Class>    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters></SearchControlParameters>    <DbParamField></DbParamField>    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>11</id>    <name>PublishState</name>    <headertext>Publish Status</headertext>    <width>40</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>y</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>y</iscontrol>    <controltype>DropDown</controltype>    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>9</id>    <name>IsApprovalRequired</name>    <headertext>Is Approval Required</headertext>    <width>40</width>    <datatype>Boolean</datatype>    <columntype>Boolean</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format></format>    <isvisible>n</isvisible>    <mustshow>n</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl></islinkactionurl>    <islinkparamfield>IsApprovalRequired</islinkparamfield>    <ischeckbox>n</ischeckbox>    <checkboxparamfield>IsApprovalRequired</checkboxparamfield>    <iscontrol>y</iscontrol>    <controltype>DropDown</controltype>    <controlparamfield></controlparamfield>    <displaytext></displaytext>    <editactionurl></editactionurl>    <editparamfield></editparamfield>    <deleteactionurl></deleteactionurl>    <deleteparamfield></deleteparamfield>    <viewactionurl></viewactionurl>    <viewparamfield></viewparamfield>    <imageactionurl></imageactionurl>    <imageparamfield></imageparamfield>    <manageactionurl></manageactionurl>    <manageparamfield></manageparamfield>    <copyactionurl></copyactionurl>    <copyparamfield></copyparamfield>    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class></Class>    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters></SearchControlParameters>    <DbParamField></DbParamField>    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>10</id>    <name>Manage</name>    <headertext>Action</headertext>    <width>50</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>false</allowsorting>    <allowpaging>true</allowpaging>    <format>Edit|Delete</format>    <isvisible>y</isvisible>    <mustshow>n</mustshow>    <musthide>y</musthide>    <maxlength>0</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>y</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl></islinkactionurl>    <islinkparamfield>PaymentSettingId</islinkparamfield>    <ischeckbox>n</ischeckbox>    <checkboxparamfield>PaymentSettingId</checkboxparamfield>    <iscontrol>n</iscontrol>    <controltype></controltype>    <controlparamfield></controlparamfield>    <displaytext>Edit|Delete</displaytext>    <editactionurl></editactionurl>    <editparamfield></editparamfield>    <deleteactionurl></deleteactionurl>    <deleteparamfield></deleteparamfield>    <viewactionurl></viewactionurl>    <viewparamfield></viewparamfield>    <imageactionurl></imageactionurl>    <imageparamfield></imageparamfield>    <manageactionurl>/Store/UpdatePortalPaymentSettings|/Store/RemoveAssociatedPaymentSetting</manageactionurl>    <manageparamfield>PaymentSettingId,PortalId|PaymentSettingId,PortalId</manageparamfield>    <copyactionurl></copyactionurl>    <copyparamfield></copyparamfield>    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class></Class>    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters></SearchControlParameters>    <DbParamField></DbParamField>    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>  </columns>'
WHERE ITEMNAME = 'AssociatedPaymentListToPortal'

GO

UPDATE ZnodeApplicationSetting
SET Setting = '<?xml version="1.0" encoding="UTF-8"?>  <columns>   <column>    <id>1</id>    <name>ShippingId</name>    <headertext>Checkbox</headertext>    <width>30</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>false</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>y</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>y</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>n</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>2</id>    <name>ShippingTypeName</name>    <headertext>Shipping Type</headertext>    <width>40</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>y</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>n</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>3</id>    <name>ShippingName</name>    <headertext>Shipping Name</headertext>    <width>40</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>n</isvisible>    <mustshow>n</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>n</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>4</id>    <name>ShippingCode</name>    <headertext>Shipping Code</headertext>    <width>40</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>y</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>5</id>    <name>Description</name>    <headertext>Description</headertext>    <width>40</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>false</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>n</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>n</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>6</id>    <name>DestinationCountryCode</name>    <headertext>Country Code</headertext>    <width>40</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>n</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>n</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>7</id>    <name>HandlingCharge</name>    <headertext>Handling Charge</headertext>    <width>40</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>n</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>n</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>8</id>    <name>DisplayOrder</name>    <headertext>Display Order</headertext>    <width>40</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>n</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>n</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>9</id>    <name>IsActive</name>    <headertext>Enable</headertext>    <width>40</width>    <datatype>Boolean</datatype>    <columntype>String</columntype>    <allowsorting>false</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>n</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>n</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>10</id>    <name>ZipCode</name>    <headertext>Zip Code</headertext>    <width>40</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>y</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>n</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>11</id>    <name>PublishState</name>    <headertext>Publish Status</headertext>    <width>40</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>y</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>y</iscontrol>    <controltype>DropDown</controltype>    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>12</id>    <name>Manage</name>    <headertext>Action</headertext>    <width>30</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>false</allowsorting>    <allowpaging>true</allowpaging>    <format>Edit|Delete</format>    <isvisible>y</isvisible>    <mustshow>y</mustshow>    <musthide>y</musthide>    <maxlength>0</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield>shippingId,PortalId</islinkparamfield>    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext>Edit|Delete</displaytext>    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl>/Store/EditAssociatedShipping|/Store/UnAssociateAssociatedShipping</manageactionurl>    <manageparamfield>shippingId,PortalId|shippingId,PortalId</manageparamfield>    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>  </columns>'
WHERE ITEMNAME = 'ZnodeAssociatedShippingListToPortal'
GO

UPDATE ZnodeApplicationSetting
SET Setting = '<?xml version="1.0" encoding="UTF-8"?>  <columns>   <column>    <id>1</id>    <name>OmsQuoteId</name>    <headertext>Checkbox</headertext>    <width>0</width>    <datatype>Int32</datatype>    <columntype>Int32</columntype>    <allowsorting>false</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>n</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>y</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>2</id>    <name>OmsQuoteId</name>    <headertext>Pending Order ID</headertext>    <width>0</width>    <datatype>Int32</datatype>    <columntype>Int32</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>n</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>y</isallowlink>    <islinkactionurl>/Account/UpdateAccountQuote</islinkactionurl>    <islinkparamfield>omsQuoteId</islinkparamfield>    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>3</id>    <name>UserName</name>    <headertext>Customer Name</headertext>    <width>0</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>n</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>4</id>    <name>AccountName</name>    <headertext>Account Name</headertext>    <width>0</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>n</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>n</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>5</id>    <name>StoreName</name>    <headertext>Store Name</headertext>    <width>0</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>n</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>n</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>6</id>    <name>OrderStatus</name>    <headertext>Pending Order Status</headertext>    <width>0</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>n</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>n</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>7</id>    <name>QuoteOrderTotal</name>    <headertext>Pending Order Amount</headertext>    <width>0</width>    <datatype>Decimal</datatype>    <columntype>Decimal</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>n</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>n</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>8</id>    <name>CreatedDate</name>    <headertext>Created Date</headertext>    <width>0</width>    <datatype>Date</datatype>    <columntype>DateTime</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>n</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>n</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>9</id>    <name>CreatedByName</name>    <headertext>Created By</headertext>    <width>0</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>n</isvisible>    <mustshow>n</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>n</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>10</id>    <name>ModifiedByName</name>    <headertext>Modified By</headertext>    <width>0</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>n</isvisible>    <mustshow>n</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>n</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>18</id>    <name>PublishState</name>    <headertext>Publish Status</headertext>    <width>30</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>n</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>11</id>    <name>Manage</name>    <headertext>Action</headertext>    <width>0</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>false</allowsorting>    <allowpaging>true</allowpaging>    <format>View|orders</format>    <isvisible>y</isvisible>    <mustshow>n</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext>View|Convert to Order</displaytext>    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl>/Account/UpdateAccountQuote|/Quote/ConvertToOrder</manageactionurl>    <manageparamfield>omsQuoteId,orderStatus|omsQuoteId</manageparamfield>    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>12</id>    <name>AccountId</name>    <headertext>Account Id</headertext>    <width>0</width>    <datatype>Int32</datatype>    <columntype>Int32</columntype>    <allowsorting>false</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>n</isvisible>    <mustshow>n</mustshow>    <musthide>y</musthide>    <maxlength>0</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>13</id>    <name>IsConvertedToOrder</name>    <headertext />    <width>0</width>    <datatype>Boolean</datatype>    <columntype>Boolean</columntype>    <allowsorting>false</allowsorting>    <allowpaging>false</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>y</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext>Is Converted To Order</displaytext>    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class>IsConvertedToOrder</Class>    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>  </columns>'
WHERE ITEMNAME = 'ZnodeOmsQuote'
GO

UPDATE ZnodeApplicationSetting
SET Setting = '<?xml version="1.0" encoding="UTF-8"?>  <columns>   <column>    <id>1</id>    <name>OmsOrderId</name>    <headertext>Checkbox</headertext>    <width>30</width>    <datatype>String</datatype>    <columntype>Int32</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>y</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>y</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>2</id>    <name>OrderNumber</name>    <headertext>Order No</headertext>    <width>0</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>y</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>y</isallowlink>    <islinkactionurl>/Order/Manage</islinkactionurl>    <islinkparamfield>OmsOrderId</islinkparamfield>    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>3</id>    <name>UserName</name>    <headertext>Customer Name</headertext>    <width>30</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>y</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>4</id>    <name>Email</name>    <headertext>Email</headertext>    <width>30</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>n</isvisible>    <mustshow>n</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>n</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>5</id>    <name>PhoneNumber</name>    <headertext>Phone Number</headertext>    <width>30</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>n</isvisible>    <mustshow>n</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>n</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>6</id>    <name>StoreName</name>    <headertext>Store Name</headertext>    <width>30</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>n</isvisible>    <mustshow>n</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>n</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>7</id>    <name>OrderState</name>    <headertext>Order Status</headertext>    <width>30</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>y</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class>orderState</Class>    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>8</id>    <name>PaymentStatus</name>    <headertext>Payment Status</headertext>    <width>30</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>y</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class>paymentStatus</Class>    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>9</id>    <name>PaymentDisplayName</name>    <headertext>Payment Name</headertext>    <width>30</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>y</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class>paymentType</Class>    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>10</id>    <name>OrderTotalWithCurrency</name>    <headertext>Total</headertext>    <width>30</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>y</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>11</id>    <name>SubTotalAmount</name>    <headertext>SubTotal</headertext>    <width>30</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>false</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>n</isvisible>    <mustshow>n</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>12</id>    <name>Tax</name>    <headertext>Tax</headertext>    <width>30</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>false</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>n</isvisible>    <mustshow>n</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>13</id>    <name>Shipping</name>    <headertext>Shipping</headertext>    <width>30</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>false</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>n</isvisible>    <mustshow>n</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>14</id>    <name>BillingPostalCode</name>    <headertext>Billing Zip Code</headertext>    <width>30</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>false</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>n</isvisible>    <mustshow>n</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>n</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>15</id>    <name>ShippingPostalCode</name>    <headertext>Shipping Zip Code</headertext>    <width>30</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>n</isvisible>    <mustshow>n</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>n</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>16</id>    <name>OrderDateWithTime</name>    <headertext>Order Date</headertext>    <width>0</width>    <datatype>DateTime</datatype>    <columntype>DateTime</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>n</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>17</id>    <name>CreatedByName</name>    <headertext>Created By</headertext>    <width>40</width>    <datatype>String</datatype>    <columntype>Boolean</columntype>    <allowsorting>false</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>n</isvisible>    <mustshow>n</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>11</id>    <name>PublishState</name>    <headertext>Publish Status</headertext>    <width>40</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>y</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype/>    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>19</id>    <name>ModifiedByName</name>    <headertext>Modified By</headertext>    <width>40</width>    <datatype>String</datatype>    <columntype>Boolean</columntype>    <allowsorting>false</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>n</isvisible>    <mustshow>n</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>20</id>    <name>Manage</name>    <headertext>Action</headertext>    <width>0</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>false</allowsorting>    <allowpaging>false</allowpaging>    <format>View|void-payment</format>    <isvisible>y</isvisible>    <mustshow>y</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext>View</displaytext>    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl>/Order/Manage</manageactionurl>    <manageparamfield>OmsOrderId</manageparamfield>    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>  </columns>'
WHERE ITEMNAME = 'ZnodeOrder'
GO

UPDATE ZnodeApplicationSetting
SET Setting = '<?xml version="1.0" encoding="UTF-8"?>  <columns>   <column>    <id>1</id>    <name>PaymentSettingId</name>    <headertext>Checkbox</headertext>    <width>40</width>    <datatype>Int32</datatype>    <columntype>Int32</columntype>    <allowsorting>true</allowsorting>    <allowpaging>false</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>y</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield>PaymentSettingId</islinkparamfield>    <ischeckbox>y</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext>ID</displaytext>    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>n</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>2</id>    <name>PaymentCode</name>    <headertext>Payment Code</headertext>    <width>40</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>false</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>y</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield>PaymentTypeId</islinkparamfield>    <ischeckbox>n</ischeckbox>    <checkboxparamfield>PaymentTypeId</checkboxparamfield>    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext>Payment Option</displaytext>    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>3</id>    <name>PaymentDisplayName</name>    <headertext>Payment Display Name</headertext>    <width>40</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>false</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>y</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield>PaymentTypeId</islinkparamfield>    <ischeckbox>n</ischeckbox>    <checkboxparamfield>PaymentTypeId</checkboxparamfield>    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext>Payment Option</displaytext>    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>4</id>    <name>GatewayName</name>    <headertext>Payment Gateway</headertext>    <width>40</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>n</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield>PaymentGatewayId</islinkparamfield>    <ischeckbox>n</ischeckbox>    <checkboxparamfield>PaymentGatewayId</checkboxparamfield>    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext>Payment Gateway</displaytext>    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>5</id>    <name>IsActive</name>    <headertext>Enable</headertext>    <width>40</width>    <datatype>Boolean</datatype>    <columntype>Boolean</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>n</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield>IsActive</islinkparamfield>    <ischeckbox>n</ischeckbox>    <checkboxparamfield>IsActive</checkboxparamfield>    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext>Enable</displaytext>    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>6</id>    <name>DisplayOrder</name>    <headertext>Display Order</headertext>    <width>30</width>    <datatype>Int32</datatype>    <columntype>Int32</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>n</mustshow>    <musthide>n</musthide>    <maxlength>3</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>y</iscontrol>    <controltype>Text</controltype>    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>n</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>7</id>    <name>PublishState</name>    <headertext>Publish Status</headertext>    <width>40</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>y</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>y</iscontrol>    <controltype>DropDown</controltype>    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>8</id>    <name>Manage</name>    <headertext>Action</headertext>    <width>50</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>false</allowsorting>    <allowpaging>true</allowpaging>    <format>Edit|Delete</format>    <isvisible>y</isvisible>    <mustshow>n</mustshow>    <musthide>y</musthide>    <maxlength>0</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>y</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield>PaymentSettingId</islinkparamfield>    <ischeckbox>n</ischeckbox>    <checkboxparamfield>PaymentSettingId</checkboxparamfield>    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext>Edit|Delete</displaytext>    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl>/Profiles/UpdateProfilePaymentSetting|/Profiles/RemoveAssociatedPaymentSetting</manageactionurl>    <manageparamfield>PaymentSettingId,ProfileId|PaymentSettingId,ProfileId</manageparamfield>    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>  </columns>'
WHERE ITEMNAME = 'AssociatedPaymentListToProfile'
GO

UPDATE ZnodeApplicationSetting
SET Setting = '<?xml version="1.0" encoding="UTF-8"?>  <columns>   <column>    <id>1</id>    <name>ShippingId</name>    <headertext>Checkbox</headertext>    <width>30</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>false</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>y</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>y</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>n</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>2</id>    <name>ShippingTypeName</name>    <headertext>Shipping Type</headertext>    <width>40</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>y</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>n</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>3</id>    <name>ShippingCode</name>    <headertext>Shipping Code</headertext>    <width>40</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>y</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>4</id>    <name>Description</name>    <headertext>Description</headertext>    <width>40</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>false</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>n</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>n</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>5</id>    <name>DestinationCountryCode</name>    <headertext>Country Code</headertext>    <width>40</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>n</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>n</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>6</id>    <name>HandlingCharge</name>    <headertext>Handling Charge</headertext>    <width>40</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>n</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>n</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>7</id>    <name>DisplayOrder</name>    <headertext>Display Order</headertext>    <width>30</width>    <datatype>Int32</datatype>    <columntype>Int32</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>n</mustshow>    <musthide>n</musthide>    <maxlength>3</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>y</iscontrol>    <controltype>Text</controltype>    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>n</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>8</id>    <name>IsActive</name>    <headertext>Enable</headertext>    <width>40</width>    <datatype>Boolean</datatype>    <columntype>String</columntype>    <allowsorting>false</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>n</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>n</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>9</id>    <name>ZipCode</name>    <headertext>Zip Code</headertext>    <width>40</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>y</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>n</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>10</id>    <name>PublishState</name>    <headertext>Publish Status</headertext>    <width>40</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>y</isvisible>    <mustshow>y</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>y</iscontrol>    <controltype>DropDown</controltype>    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>11</id>    <name>Manage</name>    <headertext>Action</headertext>    <width>40</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>false</allowsorting>    <allowpaging>false</allowpaging>    <format>Edit|Delete</format>    <isvisible>y</isvisible>    <mustshow>y</mustshow>    <musthide>n</musthide>    <maxlength>0</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield>PortalId</islinkparamfield>    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext>Edit|Delete</displaytext>    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl>/Profiles/UpdateProfileShipping|/Profiles/UnAssociateAssociatedShipping</manageactionurl>    <manageparamfield>shippingId,profileId|shippingId,profileId</manageparamfield>    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>y</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>12</id>    <name>ProfileName</name>    <headertext>Profile Name</headertext>    <width>40</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>true</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>n</isvisible>    <mustshow>n</mustshow>    <musthide>y</musthide>    <maxlength>0</maxlength>    <isallowsearch>y</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>n</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>   <column>    <id>13</id>    <name>ShippingId</name>    <headertext>ShippingId</headertext>    <width>30</width>    <datatype>String</datatype>    <columntype>String</columntype>    <allowsorting>false</allowsorting>    <allowpaging>true</allowpaging>    <format />    <isvisible>n</isvisible>    <mustshow>n</mustshow>    <musthide>y</musthide>    <maxlength>0</maxlength>    <isallowsearch>n</isallowsearch>    <isconditional>n</isconditional>    <isallowlink>n</isallowlink>    <islinkactionurl />    <islinkparamfield />    <ischeckbox>n</ischeckbox>    <checkboxparamfield />    <iscontrol>n</iscontrol>    <controltype />    <controlparamfield />    <displaytext />    <editactionurl />    <editparamfield />    <deleteactionurl />    <deleteparamfield />    <viewactionurl />    <viewparamfield />    <imageactionurl />    <imageparamfield />    <manageactionurl />    <manageparamfield />    <copyactionurl />    <copyparamfield />    <xaxis>n</xaxis>    <yaxis>n</yaxis>    <isadvancesearch>n</isadvancesearch>    <Class />    <SearchControlType>--Select--</SearchControlType>    <SearchControlParameters />    <DbParamField />    <useMode>DataBase</useMode>    <IsGraph>n</IsGraph>    <allowdetailview>n</allowdetailview>   </column>  </columns>'
WHERE ITEMNAME = 'ZnodeAssociatedShippingListToProfile'
GO

IF  EXISTS (SELECT * FROM   sys.objects WHERE  type IN( 'F' ) and OBJECT_NAME(parent_object_id) = 'ZnodeOmsOrderShipment' and name ='FK_ZnodeOmsOrderShipment_ZnodeAddress')
BEGIN
ALTER TABLE ZnodeOmsOrderShipment DROP CONSTRAINT FK_ZnodeOmsOrderShipment_ZnodeAddress
END

GO

IF  EXISTS (SELECT * FROM   sys.objects WHERE  type IN( 'F' ) and OBJECT_NAME(parent_object_id) = 'ZnodeOmsOrderDetails' and name ='FK_ZnodeOmsOrderDetails_ZnodeAddress')
BEGIN
ALTER TABLE ZnodeOmsOrderDetails DROP CONSTRAINT FK_ZnodeOmsOrderDetails_ZnodeAddress
END

GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPaymentSetting')
BEGIN 
	DROP PROCEDURE Znode_GetPaymentSetting
END
GO


CREATE PROCEDURE [dbo].[Znode_GetPaymentSetting]
(
  @WhereClause  NVARCHAR(Max)  = '',
  @Rows         INT            = 100,
  @PageNo       INT            = 1,
  @Order_BY     VARCHAR(1000)  = ' DisplayOrder ASC',
  @RowsCount    INT OUT            ,
  @PortalId     INT            = 0 ,
  @ProfileId    INT            = 0 ,
  @UserId       INT			   = 0 ,
  @IsAssociated INT            = 0
)
AS
 /*
   Summary :- This procedure is used to get the associated and Unassociated list of paymentsetting for portal and profile

   Unit Testing

   DECLARE @profilei int = 0
   EXEC Znode_GetPaymentSetting @WhereClause = '', @RowsCount =  @profilei OUT ,@PortalId = 0 ,@ProfileId= 0 ,@IsAssociated = 0 ,@UserId= 0  SELECT  @profilei

 */
 BEGIN
  BEGIN TRY
   SET NOCOUNT ON
     DECLARE @SQL NVARCHAR(MAX)= '',@FilterWhereClause VARCHAR(2000) = '' ,@InternalOrderBy VARCHAR(2000)= ''

	 DECLARE @TBL_PaymentSetting TABLE (PaymentSettingId INT, PaymentApplicationSettingId INT,PaymentTypeId INT,PaymentGatewayId INT
										,PaymentName VARCHAR(600),IsActive BIT,DisplayOrder INT,IsTestMode BIT,IsPoDocUploadEnable BIT
										,IsPoDocRequire BIT,CreatedBy INT,CreatedDate DATETIME,ModifiedBy INT,ModifiedDate DATETIME
										,PortalId INT,StoreName NVARCHAR(max),IsAssociated BIT,ProfileId int,ProfileName NVARCHAR(200),PaymentTypeName VARCHAr(500),GatewayName VARCHAR(300),RowId INT,CountNo INT
										,PaymentDisplayName nvarchar(1200),PaymentExternalId VARCHAR(100),IsApprovalRequired BIT,PaymentCode VARCHAR(200),GatewayCode VARCHAR(200),IsCallToPaymentAPI BIT,IsBillingAddressOptional Bit,IsOABRequired BIT,PortalPaymentGroupId INT,PublishState VARCHAR(50) )


     IF ISNULL(@UserId,0) <> 0  OR (ISNULL(@PortalId,0) > 0 AND ISNULL(@ProfileId,0) > 0)
	 BEGIN
	  DECLARE  @PortalIds VARCHAR(2000) = '' ,@ProfileIds VARCHAR(2000) = '' ,@PaymentSettingIds VARCHAR(2000)
	  IF ISNULL(@UserId,0) <> 0
	  BEGIN
	  SET @PortalIds = @PortalId
	  EXEC Znode_GetUserPortalAndProfile @UserId ,@PortalIds OUT,@ProfileIds OUT
	  END
	  ELSE
	  BEGIN
	   SET @PortalIds = @PortalId
	   SET @ProfileIds = @ProfileId

	  END
	  SET @ProfileIds = CASE WHEN CAST(@ProfileId AS VARCHAr(200))  <= '0' THEN @ProfileIds ELSE CAST(@ProfileId AS VARCHAr(200)) END 
	  EXEC Znode_GetCommonPaymentSetting @PortalIds,@ProfileIds,@PaymentSettingIds OUT

	  SET @FilterWhereClause = ' AND  PaymentSettingId IN ('+ISNULL(@PaymentSettingIds,'0')+') '

	 END

	 SELECT PaymentSettingId ,ZPPG.PortalPaymentGroupId,ZPA.PortalId 
	 INTO #ZnodePortalPaymentApprovers
	 FROM ZnodePortalPaymentApprovers ZPPA 
	 INNER JOIN [ZnodePortalPaymentGroup] ZPPG ON( ZPPA.PortalPaymentGroupId = ZPPG.PortalPaymentGroupId)  
     INNER JOIN [ZnodePortalApproval] ZPA ON (ZPA.PortalApprovalId = ZPPG.PortalApprovalId) 
	 WHERE  ZPA.EnableApprovalManagement =1 AND ZPA.PortalId = @PortalId AND ZPPG.isActive = 1 



	IF ISNULL(@PortalId,0) > 0 AND (   ISNULL(@ProfileId,0) = 0)
	BEGIN
	 SET @SQL = '
	             ;With Cte_PaymentSetting AS
				 (
				 SELECT  ZPS.PaymentSettingId,ZPS.PaymentApplicationSettingId,ZPS.PaymentTypeId,ZPS.PaymentGatewayId,ZPS.PaymentName,ZPS.IsActive
						,ZPS.DisplayOrder,ZPS.IsTestMode,ZPS.IsPoDocUploadEnable,ZPS.IsPoDocRequire,ZPS.CreatedBy,ZPS.CreatedDate,ZPS.ModifiedBy,ZPS.ModifiedDate
						,ZP.PortalId,ZP.StoreName, CASE WHEN ZPPS.PortalPaymentId IS NULL THEN 0 ELSE 1 END IsAssociated, NULL ProfileId, NULL ProfileName,ZPT.BehaviourType PaymentTypeName,ZPG.GatewayName
						, CASE WHEN ZPPS.PaymentDisplayName IS NULL OR ZPPS.PaymentDisplayName = ''''  THEN ZPS.PaymentDisplayName ELSE ZPPS.PaymentDisplayName END   PaymentDisplayName,  ZPPS.PaymentExternalId ,
						 CASE WHEN YU.PaymentSettingId IS NOT NULL  THEN 1 ELSE 0 END AS IsApprovalRequired , ZPS.PaymentCode, ZPG.GatewayCode,ZPT.IsCallToPaymentAPI, ZPS.IsBillingAddressOptional,ISNULL(ZPS.IsOABRequired,0) IsOABRequired
						 ,YU.PortalPaymentGroupId, ZPPOS.DisplayName PublishState 
				 FROM ZnodePaymentSetting ZPS
				 INNER JOIN ZnodePaymentType  ZPT ON (ZPT.PaymentTypeId = ZPS.PaymentTypeId)
				 LEFT JOIN ZnodePaymentGateway ZPG ON (ZPG.PaymentGatewayId= ZPS.PaymentGatewayId)
				 LEFT JOIN #ZnodePortalPaymentApprovers YU ON (YU.PaymentSettingId = ZPS.PaymentSettingId)
				 CROSS APPLY ZnodePortal ZP
				 LEFT JOIN ZnodePortalPaymentSetting ZPPS on ( ZPPS.PortalId = ZP.PortalId AND ZPPS.PaymentSettingId = ZPS.PaymentSettingId)
				 LEFT JOIN ZnodePublishState ZPPOS ON (ZPPOS.PublishStateId = ZPPS.PublishStateId )
				 )

				 '
	 IF @userId <> 0 
	 BEGIN 
		SET @IsAssociated = 1  	
	 END 
	 
	 SET @FilterWhereClause = ' WHERE PortalId = '+CAST(@PortalId AS VARCHAR(50))+'
								AND  IsAssociated = '+CAST(@IsAssociated AS VARCHAR(50))+CASE WHEN @FilterWhereClause = '' THEN ' ' ELSE @FilterWhereClause END 
	 SET @InternalOrderBy = ' PaymentSettingId,PortalId '
    END
	ELSE IF ISNULL(@ProfileId,0) > 0 AND ( ISNULL(@UserId,0) = 0 AND  ISNULL(@PortalId,0) = 0)
	BEGIN
	  SET @SQL = '
	            ;With Cte_PaymenTSetting AS
				 (
				 SELECT  ZPS.PaymentSettingId,ZPS.PaymentApplicationSettingId,ZPS.PaymentTypeId,ZPS.PaymentGatewayId,ZPS.PaymentName,ZPS.IsActive
						,CASE WHEN '+CAST(@ProfileId AS VARCHAR(200))+' >= 0 AND '+CAST(@IsAssociated AS VARCHAR(200))+' = 1 THEN ISNULL(ZPPS.DisplayOrder,ZPS.DisplayOrder) ELSE ZPS.DisplayOrder END AS DisplayOrder,ZPS.IsTestMode,ZPS.IsPoDocUploadEnable,ZPS.IsPoDocRequire,ZPS.CreatedBy,ZPS.CreatedDate,ZPS.ModifiedBy,ZPS.ModifiedDate
						,NULL PortalId,NULL StoreName, CASE WHEN ZPPS.ProfilePaymentSettingId IS NULL THEN 0 ELSE 1 END IsAssociated ,ZP.ProfileId,ZP.ProfileName,ZPT.BehaviourType PaymentTypeName,ZPG.GatewayName
						,ZPS.PaymentDisplayName	, NULL PaymentExternalId,
						 CASE WHEN YU.PaymentSettingId IS NOT NULL  THEN 1 ELSE 0 END AS IsApprovalRequired  , ZPS.PaymentCode, ZPG.GatewayCode,ZPT.IsCallToPaymentAPI, ZPS.IsBillingAddressOptional,0 IsOABRequired,YU.PortalPaymentGroupId
						 , ISNULL(ZPPOS.DisplayName,''Production'' )  PublishState 
				 FROM ZnodePaymentSetting ZPS
				 INNER JOIN ZnodePaymentType  ZPT ON (ZPT.PaymentTypeId = ZPS.PaymentTypeId)
				 LEFT JOIN ZnodePaymentGateway ZPG ON (ZPG.PaymentGatewayId= ZPS.PaymentGatewayId)
				 LEFT JOIN #ZnodePortalPaymentApprovers YU ON (YU.PaymentSettingId = ZPS.PaymentSettingId)
				 CROSS APPLY ZnodeProfile ZP
				 LEFT JOIN ZnodeProfilePaymentSetting ZPPS on ( ZPPS.ProfileId = ZP.ProfileId AND ZPPS.PaymentSettingId = ZPS.PaymentSettingId)
				 LEFT JOIN ZnodePublishState ZPPOS ON (ZPPOS.PublishStateId = ZPPS.PublishStateId)
				 )
               '
	   SET @FilterWhereClause = ' WHERE ProfileId = '+CAST(@ProfileId AS VARCHAR(50))+'
									AND  IsAssociated = '+CAST(@IsAssociated AS VARCHAR(50))+CASE WHEN @FilterWhereClause = '' THEN ' ' ELSE @FilterWhereClause END 
	  SET @InternalOrderBy = ' PaymentSettingId,ProfileId '
	END
	ELSE
	BEGIN
	  SET @SQL = '
	            ;With Cte_PaymenTSetting AS
				 (
				 SELECT   ZPS.PaymentSettingId,ZPS.PaymentApplicationSettingId,ZPS.PaymentTypeId,ZPS.PaymentGatewayId,ZPS.PaymentName,ZPS.IsActive
						,ISNULL(YOPU.DisplayOrder, ZPS.DisplayOrder) DisplayOrder,ZPS.IsTestMode,ZPS.IsPoDocUploadEnable,ZPS.IsPoDocRequire,ZPS.CreatedBy,ZPS.CreatedDate,ZPS.ModifiedBy,ZPS.ModifiedDate
						,NULL PortalId,NULL StoreName, NULL IsAssociated ,NULL ProfileId,NULL ProfileName,ZPT.BehaviourType PaymentTypeName,ZPG.GatewayName	
						,  CASE WHEN '+CAST(@PortalId AS VARCHAR(100))+' > 0  AND ZPPS.PaymentDisplayName  IS NOT NULL  THEN ZPPS.PaymentDisplayName  ELSE  ZPS.PaymentDisplayName   END PaymentDisplayName   , NULL PaymentExternalId, CASE WHEN YU.PaymentSettingId IS NOT NULL  THEN 1 ELSE 0 END AS IsApprovalRequired 
						 , ZPS.PaymentCode, ZPG.GatewayCode,ZPT.IsCallToPaymentAPI ,ZPS.IsBillingAddressOptional,ZPS.IsOABRequired,YU.PortalPaymentGroupId
						 , ISNULL(ZPPOS.DisplayName,''Production'' )  PublishState 
				 FROM ZnodePaymentSetting ZPS
				 INNER JOIN ZnodePaymentType  ZPT ON (ZPT.PaymentTypeId = ZPS.PaymentTypeId)
				 LEFT JOIN ZnodePaymentGateway ZPG ON (ZPG.PaymentGatewayId= ZPS.PaymentGatewayId)
				 LEFT JOIN ZnodeProfilePaymentSetting YOPU ON (YOPU.PaymentSettingId = ZPS.PaymentSettingId AND YOPU.ProfileId = '+CAST(@ProfileId AS NVARCHAr(200))+')
				 LEFT JOIN #ZnodePortalPaymentApprovers YU ON (YU.PaymentSettingId = ZPS.PaymentSettingId) 
				 LEFT JOIN ZnodePortalPaymentSetting ZPPS ON (ZPS.PaymentSettingId  = ZPPS.PaymentSettingId AND ZPPS.PortalId = CASE WHEN '+CAST(@PortalId AS VARCHAR(100))+' > 0  THEN '+CAST(@PortalId AS VARCHAR(100))+' ELSE  YU.PortalId END    )
				 LEFT JOIN ZnodePublishState ZPPOS ON (ZPPOS.PublishStateId = '+CASE WHEN  CAST(@ProfileId AS VARCHAr(200))  > '0' AND EXISTS (SELECT TOP 1 1 FROM ZnodeProfilePaymentSetting NT WHERE NT.ProfileId  = @ProfileId ) 
				 THEN  ' YOPU.PublishStateId '  ELSE ' ZPPS.PublishStateId ' END +')
				  ) '
	 SET @FilterWhereClause = CASE WHEN @FilterWhereClause ='' THEN ' WHERE 1=1 ' ELSE ' WHERE 1=1 '+@FilterWhereClause END
	 SET @InternalOrderBy = ' PaymentSettingId '
	END

	SET @SQL = @SQL+ ', Cte_PaymentSettingFilter AS
				 (

					SELECT PaymentSettingId,PaymentApplicationSettingId,PaymentTypeId,PaymentGatewayId,PaymentName,IsActive
						,DisplayOrder,IsTestMode,IsPoDocUploadEnable,IsPoDocRequire,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
						,PortalId,StoreName, ProfileId, ProfileName , PaymentTypeName,GatewayName,PaymentDisplayName,PaymentExternalId,IsApprovalRequired, PaymentCode, GatewayCode,IsCallToPaymentAPI, IsBillingAddressOptional,IsOABRequired,PortalPaymentGroupId,PublishState
						,'+dbo.Fn_GetPagingRowId(@Order_BY,@InternalOrderBy)+',Count(*)Over() CountNo

					FROM Cte_PaymenTSetting
				    '+@FilterWhereClause+'
					'+dbo.Fn_GetFilterWhereClause(@WhereClause)+'
				 )

				 SELECT PaymentSettingId,PaymentApplicationSettingId,PaymentTypeId,PaymentGatewayId,PaymentName,IsActive
						,DisplayOrder,IsTestMode,IsPoDocUploadEnable,IsPoDocRequire,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
						,PortalId,StoreName, ProfileId, ProfileName,PaymentTypeName,GatewayName,PaymentDisplayName,PaymentExternalId,IsApprovalRequired, PaymentCode, GatewayCode,IsCallToPaymentAPI,IsBillingAddressOptional,IsOABRequired,PortalPaymentGroupId,PublishState,RowId ,CountNo
				 FROM Cte_PaymentSettingFilter '
				 +[dbo].[Fn_GetPaginationWhereClause](@PageNo,@Rows)

     
	 INSERT INTO @TBL_PaymentSetting (PaymentSettingId,PaymentApplicationSettingId,PaymentTypeId,PaymentGatewayId,PaymentName,IsActive
						,DisplayOrder,IsTestMode,IsPoDocUploadEnable,IsPoDocRequire,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
						,PortalId,StoreName, ProfileId, ProfileName,PaymentTypeName,GatewayName,PaymentDisplayName,PaymentExternalId,IsApprovalRequired, PaymentCode, GatewayCode,IsCallToPaymentAPI,IsBillingAddressOptional,IsOABRequired,PortalPaymentGroupId,PublishState,RowID,CountNo)
	 EXEC (@SQL)

	 SET @RowsCount = ISNULL((SELECT Top 1 CountNo FROM @TBL_PaymentSetting),0)
	  
	 SELECT PaymentSettingId,PaymentApplicationSettingId,PaymentTypeId,PaymentGatewayId,PaymentName,IsActive
						,DisplayOrder,IsTestMode,IsPoDocUploadEnable,IsPoDocRequire,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
						,PortalId,StoreName, ProfileId, ProfileName,PaymentTypeName,GatewayName,PaymentDisplayName,PaymentExternalId,IsApprovalRequired, PaymentCode, GatewayCode,IsCallToPaymentAPI, IsBillingAddressOptional,IsOABRequired,PortalPaymentGroupId,PublishState
	 FROM @TBL_PaymentSetting
	 order by RowID,DisplayOrder


  END TRY
  BEGIN CATCH
             DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPaymentSetting @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@PortalId='+CAST(@PortalId AS VARCHAR(50))+',@ProfileId='+CAST(@ProfileId AS VARCHAR(50))+',@IsAssociated='+CAST(@IsAssociated AS VARCHAR(50))+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));

             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;

             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetPaymentSetting',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
  END CATCH
 END

 GO
 IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetOmsQuoteList')
BEGIN 
	DROP PROCEDURE Znode_GetOmsQuoteList
END
GO

CREATE PROCEDURE [dbo].[Znode_GetOmsQuoteList]    
(     
  @WhereClause NVARCHAR(MAX),    
  @Rows        INT            = 100,    
  @PageNo      INT            = 1  ,    
  @Order_BY    VARCHAR(1000)  = '' ,    
  @RowsCount   INT OUT             ,    
  @AccountId   INT,    
  @UserId      INT            = 0,     
  @IsPendingPayment BIT = 0  ,     
  @IsParentPendingOrder  BIT = 1     
  )    
AS     
   /*    
  Summary :- This procedure is used to get the Quote list of account and Users    
    Fn_GetRecurciveAccounts is used to fetch AccountId and Its recursive ParentId      
    @InnerWhereClause contains AccountId fetched from the Function Fn_GetRecurciveAccounts     
    OrderDetails are fetched from the tables filtered by AccountId Present in @InnerWhereClause    
    OrderDetails are fetched in Descending order of OmsQuoteId    
     Unit Testing     
     
     EXEC Znode_GetOmsQuoteList '(PortalId in(''13'',''2'',''3'',''6'')) ' ,@RowsCount = 0 ,@AccountId = 0,@UserId = 0      
    
*/    
     BEGIN    
         BEGIN TRY    
			SET NOCOUNT ON;    
			DECLARE @SQL NVARCHAR(MAX)= '', @InnerWhereClause VARCHAR(MAX)= '', @ProcessType  varchar(50)='Quote',@QuoteFilter NVARCHAr(max)='';    
    
            DECLARE @TBL_QuoteDetails TABLE (OmsQuoteId INT,UserName NVARCHAR(300),AccountName NVARCHAR(400),QuoteOrderTotal NUMERIC(28, 6),[OrderStatus] VARCHAR(300),    
            CreatedDate DATETIME,StoreName NVARCHAR(Max),CurrencyCode VARCHAR(100),CultureCode VARCHAR(100),PublishState nvarchar(600),RowId INT,CountNo INT,CreatedByName NVARCHAr(max) ,ModifiedByName NVARCHAR(max),IsConvertedToOrder bit);    
           
             IF @UserId <> 0  AND @IsParentPendingOrder   = 1           
                 BEGIN    
                     SET @InnerWhereClause = ' AND '''+CAST(@UserId AS VARCHAR(max))+''' = ZU.UserId ';    
                    -- SET @AccountId = (SELECT TOP 1 AccountID FROM ZnodeUser WHERE UserId = @UserId);    
                 END    
             ELSE IF @IsParentPendingOrder   = 0     
                BEGIN    
				SET @InnerWhereClause = ' AND  EXISTS (SELECT TOP 1 1 FROM [dbo].[Fn_GetRecurciveUserId] ('+CAST(@UserId AS VARCHAR(50))+','''+@ProcessType+''') SP WHERE (SP.UserId = ZU.UserId OR SP.UserId IS NULL)  )';   
   
				SET @QuoteFilter =' AND EXISTS (SELECT TOP 1 1 FROM ZnodeOMSQuoteApproval WR WHERE WR.OmsQuoteId = ZOQ.OmsQuoteId AND ( Wr.ApproverUserId ='+CAST(@UserId AS VARCHAR(50))+' OR Wr.UserId = '+CAST(@UserId AS VARCHAR(50))+'  ) ) ';        
				END    
    ELSE     
    BEGIN     
      SET @InnerWhereClause = ''    
    END       
          
    IF @IsPendingPayment =1     
    BEGIN     
       
     SET @InnerWhereClause = @InnerWhereClause+' AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodeUserGlobalAttributeValue a     
    INNER JOIN ZnodeUserGlobalAttributeValueLocale b  on (b.UserGlobalAttributeValueId = a.UserGlobalAttributeValueId)    
    INNER JOIN ZnodeGlobalAttribute c ON (c.GlobalAttributeid = a.GlobalAttributeId )    
    WHERE c.AttributeCOde = ''BillingAccountNumber'' AND a.UserId =  ZU.UserId AND b.AttributeValue = '''' ) AND ZOQ.IsPendingPayment =  1    '    
         
    END     
    ELSE     
    BEGIN    
       SET @InnerWhereClause = @InnerWhereClause+' AND ZOQ.IsPendingPayment = 0   '    
    END     
    
    SET @InnerWhereClause = @InnerWhereClause + CASE WHEN @AccountId > 0 THEN ' AND ZA.AccountId ='+CAST(@AccountId AS VARCHAR(200)) ELSE '' END     
    
    SET @SQL = '       
		;With Cte_GetQuoteDetail AS     
		(    
		SELECT Zu.UserId ,ZOQ.OmsQuoteId,ZU.FirstName + CASE WHEN ZU.LastName IS NULL THEN '''' ELSE '' ''+Zu.LastName END UserName , QuoteOrderTotal , ZOOS.OrderStateName [OrderStatus]    
		,ZOQ.CreatedDate,ZA.Name AccountName,ZP.PortalId,Zp.StoreName , ZCC.CurrencyCode AS CurrencyCode, ZC.CultureCode AS CultureCode ,ZVGD.UserName CreatedByName , ZVGDI.UserName ModifiedByName,    
		case when ZOQ.IsConvertedToOrder IS NULL THEN 0 ELSE ZOQ.IsConvertedToOrder END IsConvertedToOrder,ISNULL(DT.QuoteTypeCode,'''') QuoteTypeCode,ZODPS.DisplayName as PublishState    
		FROM ZnodeOmsQuote ZOQ    
		INNER JOIN ZnodeUser ZU ON (ZU.UserId = ZOQ.UserId)    
		LEFT JOIN ZnodePublishState ZODPS ON (ZODPS.PublishStateId = ZOQ.PublishStateId)  
		LEFT JOIN ZnodeUserPortal ZUP ON ZU.UserId = ZUP.UserId    
		inner JOIN ZnodePortal ZP ON ZP.PortalId = Zoq.PortalId    
		'+CASE WHEN @IsParentPendingOrder = 0 THEN ' LEFT JOIN ZnodeOMSQuoteApproval TYUI ON (TYUI.OmsQuoteId = ZOQ.OmsQuoteId AND TYUI.ApproverUserId ='+CAST(@UserId AS VARCHAR(50))+') ' ELSE '' END +'    
		LEFT JOIN ZnodePortalUnit ZPU ON (ZPU.PortalId = Zp.PortalId)    
		LEFT JOIN ZnodeCulture ZC ON (ZPU.CultureId = ZC.CultureId)    --- Changed join condition from CurrencyId to CultureId    
		LEFT JOIN ZnodeCurrency ZCC ON (ZC.CurrencyId = ZCC.CurrencyId)    --- Joined ZnodeCulture and ZnodeCurrency   
		LEFT JOIN ZnodeOmsOrderState ZOOS ON (ZOOS.OmsOrderStateId = '+CASE WHEN @IsParentPendingOrder = 0 THEN 'TYUI.OmsOrderStateId ' ELSE 'ZOQ.OmsOrderStateId' END  +' )     
		LEFT JOIN ZnodeAccount ZA ON (ZA.AccountId = ZU.AccountId )    
		LEFT JOIN [dbo].[View_GetUserDetails]  ZVGD ON (ZVGD.UserId = ZOQ.CreatedBy )    
		LEFT JOIN [dbo].[View_GetUserDetails]  ZVGDI ON (ZVGDI.UserId = ZOQ.ModifiedBy)    
		LEFT JOIN ZnodeOmsQuoteType DT ON (DT.OmsQuoteTypeId = ZOQ.OmsQuoteTypeId)    
		WHERE 1=1'+' '+@InnerWhereClause+@QuoteFilter+'    
    
		)    
		, Cte_GetQuote AS     
		(    
		SELECT OmsQuoteId,UserName ,AccountName , QuoteOrderTotal QuoteAmount, [OrderStatus]  ,CreatedDate ,StoreName,CurrencyCode, CultureCode,PublishState,CreatedByName , ModifiedByName ,IsConvertedToOrder,'+dbo.Fn_GetPagingRowId(@Order_BY,'CreatedDate DESC
		,OmsQuoteId DESC')+',Count(*)Over() CountNo     
		FROM Cte_GetQuoteDetail    
		WHERE 1=1     
		'+dbo.Fn_GetFilterWhereClause(@WhereClause)+'    
		)    
		SELECT OmsQuoteId,UserName ,AccountName ,  QuoteAmount, [OrderStatus]  ,CreatedDate ,StoreName,CurrencyCode, CultureCode,PublishState,RowId,CountNo,CreatedByName , ModifiedByName,IsConvertedToOrder    
		FROM Cte_GetQuote     
		'+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)    
      
          Print @SQL
        INSERT INTO @TBL_QuoteDetails (OmsQuoteId, UserName, AccountName, QuoteOrderTotal ,OrderStatus, CreatedDate, StoreName,CurrencyCode, CultureCode,PublishState, RowId ,CountNo,CreatedByName , ModifiedByName,IsConvertedToOrder)          
        EXEC (@SQL);    
        SET @RowsCount = ISNULL((SELECT TOP 1 CountNo FROM @TBL_QuoteDetails), 0);    
    
        SELECT OmsQuoteId,UserName,AccountName,QuoteOrderTotal,[OrderStatus],CreatedDate,StoreName,CurrencyCode, CultureCode,PublishState,CreatedByName , ModifiedByName,IsConvertedToOrder    
        FROM @TBL_QuoteDetails;    
        
         END TRY    
         BEGIN CATCH    
		DECLARE @Status BIT ;    
		SET @Status = 0;    
		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetOmsQuoteList @WhereClause = '+CAST(@WhereClause AS VARCHAR(max)  
		)+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@AccountId='+CAST(@AccountId AS VARCHAR(50))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@PortalId='+''  
		+',@Status='+CAST(@Status AS VARCHAR(10));    
                      
		SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                        
        
		EXEC Znode_InsertProcedureErrorLog    
		@ProcedureName = 'Znode_GetOmsQuoteList',    
		@ErrorInProcedure = @Error_procedure,    
		@ErrorMessage = @ErrorMessage,    
		@ErrorLine = @ErrorLine,    
		@ErrorCall = @ErrorCall;    
         END CATCH;    
     END

	 GO

	 --spp file 5

IF  EXISTS (SELECT * FROM   sys.objects WHERE  type IN( 'D' ) and OBJECT_NAME(parent_object_id) = 'ZnodePimCatalogCategory' and name ='DF_ZnodePimCatalogCategory_IsNewlyAdded')
BEGIN 
ALTER TABLE ZnodePimCatalogCategory DROP CONSTRAINT DF_ZnodePimCatalogCategory_IsNewlyAdded
END
GO

IF  EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodePimCatalogCategory' AND COLUMN_NAME = 'IsNewlyAdded')
BEGIN 
ALTER TABLE [dbo].[ZnodePimCatalogCategory]
    DROP COLUMN [IsNewlyAdded]   ;
END

GO


IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetCatalogCategoryProducts')
BEGIN 
	DROP PROCEDURE Znode_GetCatalogCategoryProducts
END
GO

CREATE PROCEDURE [dbo].[Znode_GetCatalogCategoryProducts]
( 
  @WhereClause      XML,
  @Rows             INT           = 100,
  @PageNo           INT           = 1,
  @Order_BY         VARCHAR(1000) = 'DisplayOrder asc',
  @RowsCount        INT OUT,
  @LocaleId         INT           = 1,
  @PimCategoryId    INT           = 0,
  @PimCatalogId     INT           = 0,
  @IsAssociated     BIT           = 0,
  @ProfileCatalogId INT           = 0,
  @AttributeCode   VARCHAR(max) = '',
  @PimCategoryHierarchyId INT =0,
  @PortalId INT=0
  )
AS
   
/*
	   Summary:  Get product List  Catalog / category / respective product list   		   
	   Unit Testing   
	   begin tran
	   declare @p7 int = 0  
	   EXEC Znode_GetCatalogCategoryProducts @WhereClause=N'',@Rows=10,@PageNo=1,@Order_By=N'',
	   @RowsCount=@p7 output,@PimCategoryId=11,@PimCatalogId = 1 ,@LocaleId=1 ,@ProfileCatalogId = 1 
	   rollback tran
	  
    */

     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY
             DECLARE @DefaultAttributeFamily INT= dbo.Fn_GetDefaultPimProductFamilyId(), @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId(), @OrderId INT= 0;
             DECLARE @SQL VARCHAR(MAX), 
					 @PimProductId TransferId,--VARCHAR(MAX)= '', 
					 @PimAttributeId VARCHAR(MAX),
					 @OutPimProductIds VARCHAR(max);
             DECLARE @TransferPimProductId TransferId 

			 DECLARE @tbl_ProductPricingSku TABLE (sku nvarchar(200),RetailPrice numeric(28,6),SalesPrice numeric(28,6),TierPrice numeric(28,6),
			 TierQuantity numeric(28,6),CurrencyCode varchar(200),CurrencySuffix varchar(2000),CultureCode varchar(2000), ExternalId NVARCHAR(2000)
			 ,Custom1 NVARCHAR(MAX), Custom2 NVARCHAR(MAX), Custom3 NVARCHAR(MAX))				

			 DECLARE @TBL_PimMediaAttributeId TABLE (PimAttributeId INT ,AttributeCode VARCHAR(600))
			 INSERT INTO @TBL_PimMediaAttributeId (PimAttributeId,AttributeCode)
			 SELECT PimAttributeId,AttributeCode FROM Dbo.Fn_GetProductMediaAttributeId ()

			 --DECLARE @TBL_ProfileCatalogCategory TABLE
    --         (
				--  ProfileCatalogId     INT,
				--  PimProductId         INT,
				--  PimCategoryId        INT,
				--  PimCatalogCategoryId INT,
				--  PimCategoryHierarchyId INT
    --         );
             DECLARE @TBL_AttributeDefaultValue TABLE
             (
				  PimAttributeId            INT,
				  AttributeDefaultValueCode VARCHAR(100),
				  IsEditable                BIT,
				  AttributeDefaultValue     NVARCHAR(MAX),
				  DisplayOrder INT 
             );
             DECLARE @TBL_AttributeDetails AS TABLE
             (
				  PimProductId   INT,
				  AttributeValue NVARCHAR(MAX),
				  AttributeCode  VARCHAR(600),
				  PimAttributeId INT
				  
             );
             DECLARE @FamilyDetails TABLE
             (
				  PimProductId         INT,
				  PimAttributeFamilyId INT,
				  FamilyName           NVARCHAR(3000)
             );
             DECLARE @TBL_AttributeValue TABLE
             (
				  PimCategoryAttributeValueId INT,
				  PimCategoryId               INT,
				  CategoryValue               NVARCHAR(MAX),
				  AttributeCode               VARCHAR(300),
				  PimAttributeId              INT
             );
             IF @Order_By = ''
                 BEGIN
                     SET @Order_By = 'DisplayOrder asc'
                 END;
             --IF @ProfileCatalogId > 0
             --    BEGIN
             --        INSERT INTO @TBL_ProfileCatalogCategory (ProfileCatalogId,PimProductId,PimCategoryId,PimCatalogCategoryId,PimCategoryHierarchyId)
             --        SELECT ZPC.ProfileCatalogId,PimProductId,PimCategoryId,ZCC.PimCatalogCategoryId,PimCategoryHierarchyId
             --        FROM ZnodePimCatalogCategory AS ZCC
             --        INNER JOIN ZnodeProfileCatalog AS ZPC ON(ZPC.PimCatalogId = ZCC.PimCatalogId)
             --        WHERE ZPC.ProfileCatalogId = @ProfileCatalogId

             --        AND NOT EXISTS
             --            (
             --               SELECT TOP 1 1
             --               FROM ZnodeProfileCatalogCategory AS ZPCC
             --               WHERE ZPCC.PimCatalogCategoryId = ZCC.PimCatalogCategoryId
             --            );
             --    END;
			 
             IF @PimCatalogId = 0
                 BEGIN
					INSERT INTO @TransferPimProductId 
                    SELECT PimProductId 
                    FROM ZnodePimCategoryProduct AS ZCP
                    WHERE ZCP.PimCategoryId = @PimCategoryId
					AND PimProductId IS NOT NULL 
                                                   
                 END;
             ELSE
                 BEGIN
				 
                     IF @IsAssociated = 0
                        AND @ProfileCatalogId > 0
                         BEGIN
				INSERT INTO @TransferPimProductId 
                SELECT DISTINCT PimProductId 
                FROM ZnodePimCatalogCategory AS ZCP
                WHERE ZCP.PimCatalogId = @PimCatalogId
              --  AND ZCP.PimCategoryId = @PimCategoryId
				AND ZCP.PimCategoryHierarchyId = @PimCategoryHierarchyId 
                AND NOT EXISTS
                (
                    SELECT TOP 1 1
                    FROM ZnodeProfileCatalogCategory AS TBPCC
                    WHERE TBPCC.PimCatalogCategoryId = ZCP.PimCatalogCategoryId
                        AND TBPCC.ProfileCatalogId = @ProfileCatalogId
                )
               	AND PimProductId IS NOT NULL                                         
                        END;
                     ELSE
                         BEGIN
                             IF @IsAssociated = 1
                                AND @ProfileCatalogId > 0
                                 BEGIN
						INSERT INTO @TransferPimProductId 
                        SELECT PimProductId
                        FROM ZnodePimCatalogCategory AS ZCP
                        WHERE ZCP.PimCatalogId = @PimCatalogId
                            AND ZCP.PimCategoryHierarchyId = @PimCategoryHierarchyId
                            AND EXISTS
                        (
                            SELECT TOP 1 1
                            FROM ZnodeProfileCatalogCategory AS TBPCC
                            WHERE TBPCC.PimCatalogCategoryId = ZCP.PimCatalogCategoryId
                                AND TBPCC.ProfileCatalogId = @ProfileCatalogId
                        )
                       AND PimProductId IS NOT NULL                                             
                                     SET @IsAssociated = 0;
                                 END;
                             ELSE
                                 BEGIN
					INSERT INTO @TransferPimProductId 
                    SELECT DISTINCT PimProductId 
                    FROM ZnodePimCatalogCategory AS ZCP
                    WHERE ZCP.PimCatalogId = @PimCatalogId
                 --   AND ZCP.PimCategoryId = @PimCategoryId
					AND ZCP.PimCategoryHierarchyId = @PimCategoryHierarchyId 
				    AND PimProductId IS NOT NULL  
			
         --           ORDER BY CASE WHEN @OrderId = 0
         --                       THEN 1
         --                       ELSE ZCP.PimCatalogCategoryId
								 --END 
								 --DESC
                                   
                                 END;
                         END;
                 END;
				
				 IF NOT EXISTS (SELECT TOP 1 1 FROM @TransferPimProductId)
				 BEGIN 
                  INSERT INTO @TransferPimProductId
				  SELECT '0'

				 END 

				 
             DECLARE @ProductIdTable TABLE
             ([PimProductId] INT,
              [CountId]      INT,
              PimCategoryId  INT,
              RowId          INT IDENTITY(1,1)
             );
            DECLARE  @ProductListIdRTR TransferId
	 DECLARE @TAb Transferid 
	 DECLARE @tBL_mainList TABLE (Id INT,RowId INT)
	 --	IF @PimProductId <> ''  OR   @IsCallForAttribute=1
		--BEGIN 
	 SET @IsAssociated = CASE WHEN @IsAssociated = 0 THEN 1  
					 WHEN @IsAssociated = 1 THEN 0 END 
		--END 



	 INSERT INTO @ProductListIdRTR
	 EXEC Znode_GetProductList  @IsAssociated,@TransferPimProductId
	 


	 IF CAST(@WhereClause AS NVARCHAR(max))<> N''
	 BEGIN 
	 
	  SET @SQL = 'SELECT PimProductId FROM ##Temp_PimProductId'+CAST(@@SPID AS VARCHAR(500))

	  EXEC Znode_GetFilterPimProductId @WhereClause,@ProductListIdRTR,@localeId
	  
      INSERT INTO @TAB 
	  EXEC (@SQL)
	-- SELECT * FROM @TAB
	 END 
	 
	 
	 IF EXISTS (SELECT Top 1 1 FROM @TAb ) OR CAST(@WhereClause AS NVARCHAR(max)) <> N''
	 BEGIN 
	 
		 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
		 --SET @order_by = REPLACE(@order_by,'DisplayOrder','ProductName')
		 INSERT INTO @TBL_MainList(id,RowId)
		 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @TAb ,@AttributeCode,@localeId,
		 @PimCategoryHierarchyId=@PimCategoryHierarchyId ,@PortalId=@PortalId
	 
		 END 
	 ELSE 
	 BEGIN
	      
	 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
	 --SET @order_by = REPLACE(@order_by,'DisplayOrder','ProductName')
	 INSERT INTO @TBL_MainList(id,RowId)
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @ProductListIdRTR ,@AttributeCode,@localeId,
	 @PimCategoryHierarchyId=@PimCategoryHierarchyId ,@PortalId=@PortalId 
	 
	 END 

	
	
			 INSERT INTO @ProductIdTable
             (PimProductId) 
			 SELECT id 
			 FROM @TBL_MainList 
            
			 UPDATE @ProductIdTable
               SET
                   PimCategoryId = @PimCategoryId;
             --SET @PimProductId = SUBSTRING(
             --                             (
             --                                 SELECT ','+CAST(PimProductId AS VARCHAR(100))
             --                                 FROM @ProductIdTable
             --                                 FOR XML PATH('')
             --                             ), 2, 4000);

			 INSERT INTO @PimProductId  ( Id )
			 SELECT PimProductId FROM @ProductIdTable

             SET @PimAttributeId = SUBSTRING((SELECT ','+CAST(PimAttributeId AS VARCHAR(50)) FROM [dbo].[Fn_GetGridPimAttributes]() FOR XML PATH('')), 2, 4000);
             
			 DECLARE @PimAttributeIds TransferId  
			 INSERT INTO @PimAttributeIds
			 SELECT PimAttributeId  
			 FROM [dbo].[Fn_GetProductGridAttributes]()
		
			 
			
			 INSERT INTO @TBL_AttributeDefaultValue (PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder)   
			 EXEC Znode_GetAttributeDefaultValueLocale @PimAttributeId,@LocaleId;
          
			 INSERT INTO @TBL_AttributeDetails (PimProductId,AttributeValue,AttributeCode,PimAttributeId)
             EXEC Znode_GetProductsAttributeValue @PimProductId,@PimAttributeId,@localeId;
			  
             SET @PimAttributeId = [dbo].[Fn_GetCategoryNameAttributeId]();
			 
             INSERT INTO @TBL_AttributeValue (PimCategoryAttributeValueId,PimCategoryId,CategoryValue,AttributeCode,PimAttributeId)
             EXEC [dbo].[Znode_GetCategoryAttributeValue] @PimCategoryId,@PimAttributeId,@LocaleId;
         
		    ;WITH Cte_ProductMedia
               AS (SELECT TBA.PimProductId , TBA.PimAttributeId 
			   , SUBSTRING( ( SELECT ','+ISNULL(ZMC.CDNURL,ZMC.URL)+ZMSM.ThumbnailFolderName+'/'+ zm.PATH 
			   FROM ZnodeMedia AS ZM
               INNER JOIN ZnodeMediaConfiguration ZMC  ON (ZM.MediaConfigurationId = ZMC.MediaConfigurationId)
			   INNER JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMC.MediaServerMasterId)
			   INNER JOIN @TBL_AttributeDetails AS TBAI ON (TBAI.AttributeValue  = CAST(ZM.MediaId AS VARCHAR(50)) )
			   INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBAI.PimATtributeId)
			   WHERE TBAI.PimProductId = TBA.PimProductId AND TBAI.PimAttributeId = TBA.PimAttributeId 
			   FOR XML PATH('') ), 2 , 4000) AS AttributeValue 
			   FROM @TBL_AttributeDetails AS TBA 
			   INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBA.PimATtributeId ))
                          
		      UPDATE TBAV SET AttributeValue = CTPM.AttributeVALue
			  FROM @TBL_AttributeDetails TBAV 
			  INNER JOIN Cte_ProductMedia CTPM ON CTPM.PimProductId = TBAV.PimProductId  AND CTPM.PimAttributeId = TBAV.PimAttributeId 
			  AND CTPM.PimAttributeId = TBAV.PimAttributeId;
			    
             INSERT INTO @FamilyDetails (PimAttributeFamilyId,PimProductId)
             EXEC [dbo].[Znode_GetPimProductAttributeFamilyId] @PimProductId,1;

             UPDATE a
             SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
             INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                  AND LocaleId = @LocaleId);
             UPDATE a
             SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
             INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                  AND LocaleId = @DefaultLocaleId)
             WHERE a.FamilyName IS NULL
                   OR a.FamilyName = '';

				

             SELECT zpp.PimProductid AS ProductId,zpp.PimProductId,@PimCatalogId AS PimCatalogId,zpp.PimCategoryId,[ProductName],
			 ProductType,ISNULL(zf.FamilyName, '') AS AttributeFamily,[SKU],[Price],[Quantity],
                    CASE
                        WHEN Piv.[IsActive] IS NULL
                        THEN CAST(0 AS BIT)
                        ELSE CAST(Piv.[IsActive] AS BIT)
                    END AS [IsActive],
                    piv.[ProductImage] ImagePath,
                    [Assortment],
                    TBAV.CategoryValue AS [CategoryName],
                    @LocaleId AS LocaleId,
                    ZCC.[DisplayOrder],
                    ZPCC.ProfileCatalogCategoryId,
                    zpp.RowId,
					ZCC.PimCategoryHierarchyId
			 INTO #temp_ProductDetails 
             FROM @ProductIdTable AS zpp
			 INNER JOIN @TBL_MainList TMM ON (TMM.Id = zpp.PimProductId)
                  LEFT JOIN @FamilyDetails AS zf ON(zf.PimProductId = zpp.PimProductId)
                  INNER JOIN
             (
                 SELECT PimProductId,
                        AttributeValue,
                        AttributeCode
                 FROM @TBL_AttributeDetails
             ) TB PIVOT(MAX(AttributeValue) FOR AttributeCode IN([ProductName],
                                                                 [SKU],
                                                                 [Price],
                                                                 [Quantity],
                                                                 [IsActive],
                                                                 [ProductType],
                                                                 [ProductImage],
                                                                 [Assortment],
                                                                 [DisplayOrder])) AS Piv ON(Piv.PimProductId = zpp.PimProductid)
                  LEFT JOIN @TBL_AttributeValue AS TBAV ON(TBAV.PimCategoryId = ZPP.PimCategoryId)
                  LEFT JOIN ZnodePimCategoryProduct AS ZPCP ON(ZPCP.PimProductId = Zpp.PimProductId
                                                               AND ZPCP.PimCategoryId = Zpp.PimCategoryId)
                  LEFT JOIN ZnodePimCatalogCategory AS ZCC ON(ZCC.PimProductId = Zpp.PimProductId
                                                             AND ZCC.PimCategoryHierarchyId = @PimCategoryHierarchyId
                                                              AND ZCC.PimCatalogId = @PimCatalogId)
                  LEFT JOIN ZnodeProfileCatalogCategory AS ZPCC ON(ZPCC.PimCatalogCategoryId = ZCC.PimCatalogCategoryId
                                                                   AND ZPCC.ProfileCatalogId = @ProfileCatalogId)
                  
            ORDER BY zpp.RowId

			DECLARE @SKUS VARCHAR(max) 
			,@userId INT = 0,@Date DATETIME  = dbo.FN_getDate() 

			SELECT @SKUS = COALESCE(@SKUS+',' ,'') + SKU
			FROM #temp_ProductDetails
			 				
			INSERT INTO @tbl_ProductPricingSku		
			EXEC Znode_GetPublishProductPricingBySku 	@SKU=@SKUS, @PortalId= @PortalId,@Userid= @userid ,@currentUtcDate=	@Date
			
			SELECT DISTINCT ProductId, PimProductId	,PimCatalogId,	PimCategoryId,	ProductName	,ProductType,	
			AttributeFamily,	a.SKU	,dbo.Fn_GetPortalCurrencySymbol(@portalId)+CAST(Dbo.Fn_GetDefaultPriceRoundOff(RetailPrice) AS NVARCHAR(max)) Price,	Quantity,	
			IsActive,	ImagePath,	Assortment,	CategoryName,	LocaleId,	DisplayOrder	,ProfileCatalogCategoryId,	RowId,	PimCategoryHierarchyId	
			FROM #temp_ProductDetails a 
			LEFT JOIN @tbl_ProductPricingSku b ON (dbo.FN_TRIM(b.SKU) = a.SKU )
			ORDER BY RowId
					  
     IF EXISTS (SELECT Top 1 1 FROM @TAb )
	 BEGIN 

		  SELECT @RowsCount = (SELECT COUNT(1) FROM @TAb) 
	 END 
	 ELSE 
	 BEGIN
	 		  SELECT @RowsCount =(SELECT COUNT(1) FROM @ProductListIdRTR)   
	 END 
	

         END TRY
         BEGIN CATCH
		    SELECT ERROR_message()
             DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetCatalogCategoryProducts @WhereClause = '''+ISNULL(CAST(@WhereClause AS VARCHAR(MAX)),'''''')+''',@Rows='+ISNULL(CAST(@Rows AS
			VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')+',
			@LocaleId = '+ISNULL(CAST(@LocaleId AS VARCHAR(50)),'''')+',@PimCategoryId='+ISNULL(CAST(@PimCategoryId AS VARCHAR(50)),'''')+',@PimCatalogId='+ISNULL(CAST(@PimCatalogId AS VARCHAR(50)),'''')+',@IsAssociated='+ISNULL(CAST(@IsAssociated AS VARCHAR(50)),'''')+',
			@ProfileCatalogId='+ISNULL(CAST(@ProfileCatalogId AS VARCHAR(50)),'''')+',@AttributeCode='''+ISNULL(CAST(@AttributeCode AS VARCHAR(50)),'''''')+''',@PimCategoryHierarchyId='+ISNULL(CAST(@PimCategoryHierarchyId AS VARCHAR(10)),'''');
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetCatalogCategoryProducts',
				@ErrorInProcedure = 'Znode_GetCatalogCategoryProducts',
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;

	 GO

UPDATE ZnodeApplicationSetting
SET Setting = '<?xml version="1.0" encoding="utf-16"?> <columns>  <column>   <id>1</id>   <name>ProductId</name>   <headertext>Checkbox</headertext>   <width>20</width>   <datatype>Int32</datatype>   <columntype>Int32</columntype>   <allowsorting>false</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>y</ischeckbox>   <checkboxparamfield>ProductId</checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>2</id>   <name>Image</name>   <headertext>Product Image</headertext>   <width>20</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>false</allowsorting>   <allowpaging>false</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield>ProductId</checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield>ImagePath,ProductName</imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class>imageicon</Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>3</id>   <name>ProductName</name>   <headertext>Product Name</headertext>   <width>60</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class>product-name</Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>4</id>   <name>SKU</name>   <headertext>SKU</headertext>   <width>30</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext>SKU</displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class>product-sku</Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>5</id>   <name>DisplayOrder</name>   <headertext>Display Order</headertext>   <width>30</width>   <datatype>Int32</datatype>   <columntype>Int32</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>3</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>y</iscontrol>   <controltype>Text</controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>6</id>   <name>Manage</name>   <headertext>Action</headertext>   <width>30</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>false</allowsorting>   <allowpaging>true</allowpaging>   <format>Edit</format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext>Edit</displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl>/Catalog/UpdateCatalogCategoryProduct</manageactionurl>   <manageparamfield>ProductId,PimCatalogId,PimCategoryHierarchyId</manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column> </columns>'
WHere ItemName = 'ZnodeGetCatalogAssociatedProduct'

GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_UpdateCategoryProductDisplayOrder')
BEGIN 
	DROP PROCEDURE Znode_UpdateCategoryProductDisplayOrder
END
GO


CREATE   PROCEDURE [dbo].[Znode_UpdateCategoryProductDisplayOrder]       
(      
 @JSONString NVARCHAR(max)= '[]'      
,@PimCategoryHierarchyId INT   
,@PageNo INT = 0 
,@ProductIds VARCHAR(max) ='' 
,@Status BIT = 0 out    
)      
      
AS      
BEGIN       
 BEGIN TRY       
  SET NOCOUNT ON       
    DECLARE @TBL_PimProductId TABLE (PimProductId INT, RowId INT IDENTITY(1,1)  )      
          
      
      
    INSERT INTO @TBL_PimProductId (PimProductId)      
    EXEC [dbo].[Znode_GetJSONTableData] @JSONString , 'Id'      
      
    SET  @PageNo = ISNULL(@PageNo,0)  
      
 UPDATE ZPCC      
 SET ZPCC.DisplayOrder =  CASE WHEN @PageNo = 0  THEN RowId ELSE     
   CASE WHEN LEN(RowId) > 1 THEN CAST(@PageNo-1 +LEFT(RowId , LEN(RowId)-1) AS VARCHAr(1000)) +RIGHT(CAST(RowId AS VARCHAr(1000)),1)   ELSE CAST(@PageNo-1 AS VARCHAr(1000)) + RIGHT(CAST(RowId AS VARCHAr(1000)),1) END   
  END     
 FROM ZnodePimCatalogCategory ZPCC       
 INNER JOIN @TBL_PimProductId TBLP ON (TBLP.PimProductId = ZPCC.PimProductId)      
 WHERE ZPCC.PimCategoryHierarchyId = @PimCategoryHierarchyId    
      
 --  IF(@ProductIds!='')
	--BEGIN
	--	UPDATE ZnodePimCatalogCategory
	--	SET IsNewlyAdded = 0
	--	WHERE PimCategoryHierarchyId = @PimCategoryHierarchyId 
	--	AND PimProductId IN (SELECT item FROM dbo.Split(@ProductIds,',') ) 
	--END

  SELECT 1 AS ID , CAST(1 AS BIT) AS [Status];    
 SET @Status = 1       
        
         
 END TRY       
 BEGIN CATCH       
  SELECT ERROR_MESSAGE()      
   SELECT 0 AS ID , CAST(0 AS BIT) AS [Status];    
  SET @Status = 0      
 END CATCH       
END

GO

UPDATE ZnodeApplicationSetting
SET Setting = '<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>PortalProfileID</name>      <headertext>Checkbox</headertext>      <width>40</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>ProfileName</name>      <headertext>Profile Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>IsDefaultAnonymousProfile</name>      <headertext>Is Default Anonymous Profile</headertext>      <width>40</width>      <datatype>Boolean</datatype>      <columntype>Boolean</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>DropDown</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>IsDefaultRegistedProfile</name>      <headertext>Is Default Registered Profile</headertext>      <width>40</width>      <datatype>Boolean</datatype>      <columntype>Boolean</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>DropDown</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>Edit|Delete</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>profileId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Edit|Delete</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/Store/EditPortalProfile|/Store/DeletePortalProfile</manageactionurl>      <manageparamfield>portalId,portalProfileId,profileId,parentProfileId|portalProfileId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>grid-action</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>'
WHere ItemName = 'ZnodePortalProfile'

GO

DELETE
FROM ZnodeGlobalGroupEntityMapper WHERE GlobalAttributeGroupId = 
(SELECT  GlobalAttributeGroupId FROM ZnodeGlobalAttributeGroup where GroupCode = 'ECertificateSettings')
AND GlobalEntityId = (SELECT GlobalEntityId FROM ZnodeGlobalEntity WHERE EntityName = 'Store' )

GO

UPDATE ZnodeApplicationSetting
SET Setting = '<?xml version="1.0" encoding="utf-16"?> <columns>  <column>   <id>1</id>   <name>PaymentSettingId</name>   <headertext>Checkbox</headertext>   <width>40</width>   <datatype>Int32</datatype>   <columntype>Int32</columntype>   <allowsorting>true</allowsorting>   <allowpaging>false</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield>PaymentSettingId</islinkparamfield>   <ischeckbox>y</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext>ID</displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>2</id>   <name>PaymentCode</name>   <headertext>Payment Code</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>false</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield>PaymentTypeId</islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield>PaymentTypeId</checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext>Payment Option</displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>3</id>   <name>PaymentDisplayName</name>   <headertext>Payment Display Name</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>false</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>100</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield>PaymentTypeId</islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield>PaymentTypeId</checkboxparamfield>   <iscontrol>y</iscontrol>   <controltype>Text</controltype>   <controlparamfield></controlparamfield>   <displaytext>Payment Option</displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>4</id>   <name>GatewayName</name>   <headertext>Payment Gateway</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield>PaymentGatewayId</islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield>PaymentGatewayId</checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext>Payment Gateway</displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>5</id>   <name>IsActive</name>   <headertext>Enable</headertext>   <width>40</width>   <datatype>Boolean</datatype>   <columntype>Boolean</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield>IsActive</islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield>IsActive</checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext>Enable</displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>6</id>   <name>DisplayOrder</name>   <headertext>Display Order</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>false</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield>DisplayOrder</islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield>DisplayOrder</checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext>Display Order</displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>7</id>   <name>PublishState</name>   <headertext>Application Type</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>y</iscontrol>   <controltype>DropDown</controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>8</id>   <name>IsApprovalRequired</name>   <headertext>Is Approval Required</headertext>   <width>40</width>   <datatype>Boolean</datatype>   <columntype>Boolean</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>n</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield>IsApprovalRequired</islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield>IsApprovalRequired</checkboxparamfield>   <iscontrol>y</iscontrol>   <controltype>DropDown</controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>9</id>   <name>Manage</name>   <headertext>Action</headertext>   <width>50</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>false</allowsorting>   <allowpaging>true</allowpaging>   <format>Edit|Delete</format>   <isvisible>y</isvisible>   <mustshow>n</mustshow>   <musthide>y</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>y</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield>PaymentSettingId</islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield>PaymentSettingId</checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext>Edit|Delete</displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl>/Store/UpdatePortalPaymentSettings|/Store/RemoveAssociatedPaymentSetting</manageactionurl>   <manageparamfield>PaymentSettingId,PortalId|PaymentSettingId,PortalId</manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column> </columns>'
WHere ItemName = 'AssociatedPaymentListToPortal'

GO



INSERT INTO ZnodeReportSetting (ReportCode,SettingXML,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,DisplayMode,StyleSheetId
,DefaultLayoutXML)
SELECT 'EmailOptInCustomer','<?xml version="1.0" encoding="utf-16"?><columns><column><id>1</id><name>StoresName</name><headertext>Store Name</headertext><width>0</width><datatype>string</datatype><columntype>string</columntype><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><value></value><parametertype>text</parametertype></column><column><id>2</id><name>StoreName</name><headertext>Store Name</headertext><width>0</width><datatype>string</datatype><columntype>string</columntype><isvisible>y</isvisible><mustshow>y</mustshow><musthide>y</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><value></value><parametertype>text</parametertype></column><column><id>3</id><name>UserId</name><headertext>User ID</headertext><width>0</width><datatype>string</datatype><columntype>string</columntype><isvisible>y</isvisible><mustshow>n</mustshow><musthide>y</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><value></value><parametertype>text</parametertype></column><column><id>4</id><name>FirstName</name><headertext>First Name</headertext><width>0</width><datatype>string</datatype><columntype>string</columntype><isvisible>y</isvisible><mustshow>n</mustshow><musthide>y</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><value></value><parametertype>text</parametertype></column><column><id>5</id><name>LastName</name><headertext>Last Name</headertext><width>0</width><datatype>string</datatype><columntype>string</columntype><isvisible>y</isvisible><mustshow>n</mustshow><musthide>y</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><value></value><parametertype>text</parametertype></column><column><id>6</id><name>CustomerType</name><headertext>Customer Type</headertext><width>0</width><datatype>string</datatype><columntype>string</columntype><isvisible>y</isvisible><mustshow>n</mustshow><musthide>y</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><value></value><parametertype>text</parametertype></column><column><id>7</id><name>Email</name><headertext>Customer Email ID</headertext><width>0</width><datatype>string</datatype><columntype>string</columntype><isvisible>y</isvisible><mustshow>y</mustshow><musthide>y</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><value></value><parametertype>text</parametertype></column><column><id>8</id><name>ShowOnlyRegisteredUsers</name><headertext>Show Only Registered Users</headertext><width>0</width><datatype>System.Boolean</datatype><columntype>string</columntype><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><value></value><parametertype>text</parametertype></column><column><id>9</id><name>VisibleColumns</name><headertext>Visible Columns</headertext><width>0</width><datatype>string</datatype><columntype>string</columntype><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><value></value><parametertype>text</parametertype></column></columns>',
2,GETDATE(),2,GETDATE(),1,1,'<?xml version="1.0" encoding="utf-8"?>  <XtraReportsLayoutSerializer SerializerVersion="17.2.7.0" Ref="1" ControlType="EmailOptInCustomer, Znode.Libraries.DevExpress.Report, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" Landscape="true" Margins="25, 27, 29, 52" PaperKind="Custom" PageWidth="1500" PageHeight="827" Version="17.2" RequestParameters="false" DataSource="#Ref-0">    <Parameters>      <Item1 Ref="4" Description="Store Name" LookUpSettings="#Ref-2" MultiValue="true" ValueInfo="Fine Foods" Name="StoresName" />      <Item2 Ref="5" Description="First Name" Name="FirstName" />      <Item3 Ref="6" Description="Last Name" Name="LastName" />      <Item4 Ref="7" Description="Customer Email ID" Name="Email" />      <Item5 Ref="9" Description="Show Only Registered Users" ValueInfo="False" Name="ShowOnlyRegisteredUsers" Type="#Ref-8" />      <Item6 Ref="11" Description="Visible Columns" LookUpSettings="#Ref-10" MultiValue="true" ValueInfo="Store Name|Customer Email ID" Name="VisibleColumns" />    </Parameters>    <Bands>      <Item1 Ref="12" ControlType="DetailBand" Name="Detail" HeightF="25" TextAlignment="TopLeft" Padding="0,0,0,0,100">        <Controls>          <Item1 Ref="13" ControlType="XRTable" Name="xrTable2" SizeF="1446,25" LocationFloat="0, 0" EvenStyleName="EvenStyle" OddStyleName="OddStyle">            <Rows>              <Item1 Ref="14" ControlType="XRTableRow" Name="xrTableRow2" Weight="11.5">                <Cells>                  <Item1 Ref="15" ControlType="XRTableCell" Name="xrTableCell6" Weight="0.16614418616661658" CanShrink="true" Text="xrTableCell6" StyleName="TableRow" Padding="2,2,0,0,100">                    <ExpressionBindings>                      <Item1 Ref="16" Expression="[StoreName]" PropertyName="Text" EventName="BeforePrint" />                    </ExpressionBindings>                  </Item1>                  <Item2 Ref="17" ControlType="XRTableCell" Name="xrTableCell7" Weight="0.22884012075570914" CanShrink="true" Text="xrTableCell7" StyleName="TableRow" Padding="2,2,0,0,100">                    <ExpressionBindings>                      <Item1 Ref="18" Expression="[UserId]" PropertyName="Text" EventName="BeforePrint" />                    </ExpressionBindings>                  </Item2>                  <Item3 Ref="19" ControlType="XRTableCell" Name="xrTableCell8" Weight="0.22570530818058895" CanShrink="true" Text="xrTableCell8" StyleName="TableRow" Padding="2,2,0,0,100">                    <ExpressionBindings>                      <Item1 Ref="20" Expression="[FirstName]" PropertyName="Text" EventName="BeforePrint" />                    </ExpressionBindings>                  </Item3>                  <Item4 Ref="21" ControlType="XRTableCell" Name="xrTableCell9" Weight="0.13479623647836539" CanShrink="true" Text="xrTableCell9" StyleName="TableRow" Padding="2,2,0,0,100">                    <ExpressionBindings>                      <Item1 Ref="22" Expression="[LastName]" PropertyName="Text" EventName="BeforePrint" />                    </ExpressionBindings>                  </Item4>                  <Item5 Ref="23" ControlType="XRTableCell" Name="xrTableCell12" Weight="0.24451416015625" Text="xrTableCell12" StyleName="TableRow" Padding="1,1,1,1,100">                    <ExpressionBindings>                      <Item1 Ref="24" Expression="[CustomerType]" PropertyName="Text" EventName="BeforePrint" />                    </ExpressionBindings>                  </Item5>                  <Item6 Ref="25" ControlType="XRTableCell" Name="xrTableCell10" Weight="0.24451416015625" CanShrink="true" Text="xrTableCell10" StyleName="TableRow" Padding="2,2,0,0,100">                    <ExpressionBindings>                      <Item1 Ref="26" Expression="[Email]" PropertyName="Text" EventName="BeforePrint" />                    </ExpressionBindings>                  </Item6>                </Cells>              </Item1>            </Rows>          </Item1>        </Controls>      </Item1>      <Item2 Ref="27" ControlType="TopMarginBand" Name="TopMargin" HeightF="29" TextAlignment="TopLeft" Padding="0,0,0,0,100" />      <Item3 Ref="28" ControlType="BottomMarginBand" Name="BottomMargin" HeightF="52" TextAlignment="TopLeft" Padding="0,0,0,0,100">        <Controls>          <Item1 Ref="29" ControlType="XRPageInfo" Name="xrPageInfo1" PageInfo="DateTime" SizeF="721.1788,23" LocationFloat="0, 14.50001" StyleName="ReportFooterDateTime" Padding="2,2,0,0,100" />          <Item2 Ref="30" ControlType="XRPageInfo" Name="xrPageInfo2" TextFormatString="Page {0} of {1}" TextAlignment="TopRight" SizeF="724.8209,23" LocationFloat="721.1788, 14.50001" StyleName="ReportFooterPaging" Padding="2,2,0,0,100" />        </Controls>      </Item3>      <Item4 Ref="31" ControlType="ReportHeaderBand" Name="reportHeaderBand1" HeightF="93.33334">        <Controls>          <Item1 Ref="32" ControlType="XRTable" Name="xrTable5" SizeF="1446,30.00001" LocationFloat="0, 63.33332" StyleName="ReportHeaderTable1">            <Rows>              <Item1 Ref="33" ControlType="XRTableRow" Name="xrTableRow6" Weight="0.8">                <Cells>                  <Item1 Ref="34" ControlType="XRTableCell" Name="xrTableCell54" Weight="1" Text="Store Name Equals:" StyleName="ReportHeaderTable1" Font="Verdana, 6.75pt" Padding="2,2,0,0,100" />                </Cells>              </Item1>              <Item2 Ref="35" ControlType="XRTableRow" Name="xrTableRow7" Weight="0.79999999999999993">                <Cells>                  <Item1 Ref="36" ControlType="XRTableCell" Name="xrTableCell55" Weight="1" Text="Fine Foods" StyleName="ReportHeaderTableRow" Padding="2,2,0,0,100" />                </Cells>              </Item2>            </Rows>          </Item1>          <Item2 Ref="37" ControlType="XRLabel" Name="xrLabel3" Text="Email Opt In Customer" TextAlignment="TopLeft" SizeF="458.9319,29.24998" LocationFloat="0, 10.00001" StyleName="ReportHeaderText" Padding="10,2,2,2,100" CanPublish="false">            <StylePriority Ref="38" UsePadding="false" UseTextAlignment="false" />          </Item2>          <Item3 Ref="39" ControlType="XRLabel" Name="xrLabel1" SizeF="1446,50" LocationFloat="0, 0" StyleName="ReportTitle" Padding="2,2,0,0,100" CanPublish="false" />        </Controls>      </Item4>      <Item5 Ref="40" ControlType="GroupHeaderBand" Name="groupHeaderBand1" GroupUnion="WithFirstDetail" RepeatEveryPage="true" HeightF="48">        <Controls>          <Item1 Ref="41" ControlType="XRPanel" Name="xrPanel1" SizeF="1446,48" LocationFloat="0, 0">            <Controls>              <Item1 Ref="42" ControlType="XRTable" Name="xrTable1" SizeF="1446,28" LocationFloat="0, 20.00001">                <Rows>                  <Item1 Ref="43" ControlType="XRTableRow" Name="xrTableRow1" Weight="1">                    <Cells>                      <Item1 Ref="44" ControlType="XRTableCell" Name="xrTableCell1" Weight="0.16614418616661658" Text="Store Name" StyleName="TableHeader" Padding="2,2,0,0,100" />                      <Item2 Ref="45" ControlType="XRTableCell" Name="xrTableCell2" Weight="0.22884012075570914" Text="User ID" StyleName="TableHeader" Padding="2,2,0,0,100" />                      <Item3 Ref="46" ControlType="XRTableCell" Name="xrTableCell3" Weight="0.22570530818058895" Text="First Name" StyleName="TableHeader" Padding="2,2,0,0,100" />                      <Item4 Ref="47" ControlType="XRTableCell" Name="xrTableCell4" Weight="0.13479623647836539" Text="Last Name" StyleName="TableHeader" Padding="2,2,0,0,100" />                      <Item5 Ref="48" ControlType="XRTableCell" Name="xrTableCell11" Weight="0.24451418363131008" Text="Customer Type" StyleName="TableHeader" Padding="2,2,0,0,100">                        <StylePriority Ref="49" UsePadding="false" />                      </Item5>                      <Item6 Ref="50" ControlType="XRTableCell" Name="xrTableCell5" Weight="0.24451418363131008" Text="Customer Email ID" StyleName="TableHeader" Padding="2,2,0,0,100" />                    </Cells>                  </Item1>                </Rows>              </Item1>            </Controls>          </Item1>        </Controls>      </Item5>      <Item6 Ref="51" ControlType="GroupFooterBand" Name="GroupFooter1" HeightF="28.125">        <Controls>          <Item1 Ref="52" ControlType="XRTable" Name="xrTable3" SizeF="1446,28" LocationFloat="0, 0">            <Rows>              <Item1 Ref="53" ControlType="XRTableRow" Name="xrTableRow3" Weight="1">                <Cells>                  <Item1 Ref="54" ControlType="XRTableCell" Name="xrTableCell13" Weight="0.16614418616661658" StyleName="TableHeader" Padding="2,2,0,0,100" />                  <Item2 Ref="55" ControlType="XRTableCell" Name="xrTableCell14" Weight="0.22884012075570914" StyleName="TableHeader" Padding="2,2,0,0,100" />                  <Item3 Ref="56" ControlType="XRTableCell" Name="xrTableCell15" Weight="0.22570530818058895" StyleName="TableHeader" Padding="2,2,0,0,100" />                  <Item4 Ref="57" ControlType="XRTableCell" Name="xrTableCell16" Weight="0.13479623647836539" StyleName="TableHeader" Padding="2,2,0,0,100" />                  <Item5 Ref="58" ControlType="XRTableCell" Name="xrTableCell17" Weight="0.24451418363131008" StyleName="TableHeader" Padding="2,2,0,0,100">                    <StylePriority Ref="59" UsePadding="false" />                  </Item5>                  <Item6 Ref="60" ControlType="XRTableCell" Name="xrTableCell18" Weight="0.24451418363131008" StyleName="TableHeader" Padding="2,2,0,0,100" />                </Cells>              </Item1>            </Rows>          </Item1>        </Controls>      </Item6>    </Bands>    <ExportOptions Ref="61">      <Xls Ref="62" ShowGridLines="true" />      <Xlsx Ref="63" ShowGridLines="true" />      <Csv Ref="64" Separator=";" TextExportMode="Value" />    </ExportOptions>    <StyleSheet>      <Item1 Ref="65" Name="TableHeader" BorderStyle="Inset" Padding="5,5,5,5,100" Font="Verdana, 6.75pt, style=Bold, charSet=0" ForeColor="255,35,27,42" BackColor="LightGray" BorderColor="White" Sides="Top, Bottom" StringFormat="Near;Center;0;None;Character;Default" TextAlignment="MiddleLeft" BorderWidthSerializable="1" />      <Item2 Ref="66" Name="TableRow" BorderStyle="Inset" Padding="4,4,4,4,100" Font="Verdana, 6.75pt, charSet=0" ForeColor="255,84,86,89" StringFormat="Near;Near;0;None;Character;Default" TextAlignment="TopLeft" />      <Item3 Ref="67" Name="EvenStyle" BorderStyle="Inset" Padding="4,4,4,4,100" Font="Verdana, 6.75pt, charSet=0" BackColor="White" BorderColor="LightGray" Sides="Bottom" StringFormat="Near;Near;0;None;Character;Default" BorderWidthSerializable="1" />      <Item4 Ref="68" Name="OddStyle" BorderStyle="Inset" Padding="4,4,4,4,100" Font="Verdana, 6.75pt, charSet=0" BackColor="White" BorderColor="LightGray" Sides="Bottom" StringFormat="Near;Near;0;None;Character;Default" BorderWidthSerializable="1" />      <Item5 Ref="69" Name="ReportTitle" BorderStyle="Inset" Font="Verdana, 12pt, style=Bold, charSet=0" ForeColor="White" BackColor="255,60,65,69" BorderColor="255,83,178,77" Sides="Top" StringFormat="Near;Near;0;None;Character;Default" BorderWidthSerializable="4" />      <Item6 Ref="70" Name="ReportFooterPaging" BorderStyle="Inset" Padding="4,4,4,4,100" Font="Verdana, 6.75pt, charSet=0" ForeColor="255,84,86,89" BackColor="White" StringFormat="Near;Near;0;None;Character;Default" />      <Item7 Ref="71" Name="ReportFooterDateTime" BorderStyle="Inset" Padding="4,4,4,4,100" Font="Verdana, 6.75pt, charSet=0" ForeColor="255,84,86,89" BackColor="White" StringFormat="Near;Near;0;None;Character;Default" />      <Item8 Ref="72" Name="ReportNameText" BorderStyle="Inset" Font="Candara, 15.75pt, style=Bold, charSet=0" ForeColor="White" BackColor="255,64,64,64" StringFormat="Far;Center;0;None;Character;Default" TextAlignment="MiddleRight" />      <Item9 Ref="73" Name="ReportHeaderTitleText" BorderStyle="Inset" Padding="2,2,2,2,100" Font="Segoe UI, 9.75pt, style=Bold, Italic, charSet=0" StringFormat="Near;Near;0;None;Character;Default" />      <Item10 Ref="74" Name="ReportHeaderText" BorderStyle="Inset" Padding="2,2,2,2,100" Font="Segoe UI, 12pt, style=Bold, Italic, charSet=0" ForeColor="White" StringFormat="Far;Center;0;None;Character;Default" TextAlignment="MiddleRight" />      <Item11 Ref="75" Name="ReportHeaderTable1" BorderStyle="Inset" Padding="4,4,4,4,100" BorderColor="255,71,180,86" Sides="Left" StringFormat="Near;Near;0;None;Character;Default" BorderWidthSerializable="4" />      <Item12 Ref="76" Name="ReportHeaderTableRow" BorderStyle="Inset" Padding="4,1,1,1,100" Font="Verdana, 6.75pt" BorderColor="255,71,180,86" Sides="Left" StringFormat="Near;Near;0;None;Character;Default" BorderWidthSerializable="4" />      <Item13 Ref="77" Name="RightAlignCell" BorderStyle="Inset" Padding="1,4,1,1,100" ForeColor="255,84,86,89" StringFormat="Far;Center;0;None;Character;Default" TextAlignment="MiddleRight" />      <Item14 Ref="78" Name="TableHeaderRightAlignCell" BorderStyle="Inset" Padding="5,5,5,5,100" Font="Verdana, 6.75pt, style=Bold, charSet=0" ForeColor="255,35,27,42" BackColor="LightGray" BorderColor="White" Sides="Top, Bottom" StringFormat="Far;Center;0;None;Character;Default" TextAlignment="MiddleRight" BorderWidthSerializable="1" />    </StyleSheet>    <ComponentStorage>      <Item1 Ref="79" ObjectType="DevExpress.DataAccess.ObjectBinding.ObjectDataSource,DevExpress.DataAccess.v17.2" Name="objectDataSource1" Base64="PE9iamVjdERhdGFTb3VyY2U+PE5hbWU+b2JqZWN0RGF0YVNvdXJjZTE8L05hbWU+PERhdGFTb3VyY2UgVHlwZT0iWm5vZGUuTGlicmFyaWVzLkRldkV4cHJlc3MuUmVwb3J0LkVtYWlsT3B0SW5DdXN0b21lck1vZGVsLCBabm9kZS5MaWJyYXJpZXMuRGV2RXhwcmVzcy5SZXBvcnQsIFZlcnNpb249MC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1udWxsIiAvPjwvT2JqZWN0RGF0YVNvdXJjZT4=" />    </ComponentStorage>    <ObjectStorage>      <Item1 Ref="2" ObjectType="DevExpress.XtraReports.Parameters.DynamicListLookUpSettings, DevExpress.Printing.v17.2.Core" DataSource="#Ref-80" ValueMember="Value" DisplayMember="Value" />      <Item2 ObjectType="DevExpress.XtraReports.Serialization.ObjectStorageInfo, DevExpress.XtraReports.v17.2" Ref="8" Content="System.Boolean" Type="System.Type" />      <Item3 Ref="10" ObjectType="DevExpress.XtraReports.Parameters.DynamicListLookUpSettings, DevExpress.Printing.v17.2.Core" DataSource="#Ref-81" ValueMember="Value" DisplayMember="Value" />      <Item4 ObjectType="DevExpress.XtraReports.Serialization.ObjectStorageInfo, DevExpress.XtraReports.v17.2" Ref="0" Content="~Xtra#NULL" Type="System.Collections.Generic.List`1[[Znode.Engine.Api.Models.ReportEmailOptInCustomerModel, Znode.Engine.Api.Models, Version=9.1.0.0, Culture=neutral, PublicKeyToken=null]]" />      <Item5 ObjectType="DevExpress.XtraReports.Serialization.ObjectStorageInfo, DevExpress.XtraReports.v17.2" Ref="80" Content="~Xtra#NULL" Type="System.Collections.Generic.List`1[[Znode.Engine.Api.Models.DevExpressReportParameterModel, Znode.Engine.Api.Models, Version=9.1.0.0, Culture=neutral, PublicKeyToken=null]]" />      <Item6 ObjectType="DevExpress.XtraReports.Serialization.ObjectStorageInfo, DevExpress.XtraReports.v17.2" Ref="81" Content="~Xtra#NULL" Type="System.Collections.Generic.List`1[[Znode.Engine.Api.Models.DevExpressReportParameterModel, Znode.Engine.Api.Models, Version=9.1.0.0, Culture=neutral, PublicKeyToken=null]]" />    </ObjectStorage>  </XtraReportsLayoutSerializer>'
WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeReportSetting WHERE ReportCode = 'EmailOptInCustomer')

GO

UPDATE ZnodeReportDetails
SET IsActive = 1
WHERE ReportCode = 'EmailOptInCustomer'

GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'ZnodeDevExpressReport_GetEmailOptinCustomer')
BEGIN 
	DROP PROCEDURE ZnodeDevExpressReport_GetEmailOptinCustomer
END
GO

CREATE PROCEDURE [dbo].[ZnodeDevExpressReport_GetEmailOptinCustomer]
(   
    @StoreName  VARCHAR(MAX)  = '',
    @FirstName  VARCHAR(100)  = '',
    @LastName   VARCHAR(100)  = '',
    @Email      VARCHAR(50)   = '',
	@ShowOnlyRegisteredUsers BIT = 1
)
AS 
/*
     Summary :- This Procedure is used to find the email OptIn 
     Unit Testing 
     EXEC ZnodeDevExpressReport_GetEmailOptinCustomer
	 SELECT * FROM ZnodeUserPortal WHERE userId IN (select USerId from znodeuser where emailoptin=1)
	
*/
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;

			  DECLARE @SQL NVARCHAR(MAX);

			  DECLARE @TBL_PortalId TABLE (PortalId INT );
			  INSERT INTO @TBL_PortalId
			  SELECT PortalId 
			  FROM ZnodePortal ZP 
			  INNER JOIN dbo.split(@StoreName,'|') SP ON (SP.Item = ZP.StoreName) 

			  ;WITH CTE_GetEmailOptinCustomer AS
			  (
				SELECT Zu.UserId, ZU.FirstName,ZU.LastName,zu.Email,F.PortalId, F.StoreName,ZA.Name
				,CASE WHEN  ZU.AspNetUserId IS NULL THEN 'Guest User' ELSE 'Registered User' END  CustomerType  
				FROM ZnodeUser ZU  
				INNER JOIN ZnodeUserPortal ZUP ON(ZUP.UserId = ZU.UserId
				AND (EXISTS (SELECT TOP 1 1 FROM @TBL_PortalId rt WHERE rt.PortalId = ZUP.PortalId)
				OR NOT EXISTS (SELECT TOP 1 1 FROM @TBL_PortalId )))
				INNER JOIN ZnodePortal AS F ON ZUP.PortalId = F.PortalId
				LEFT JOIN AspNetUsers ANU ON(Zu.AspNetUserId = ANU.Id)
				LEFT JOIN AspNetUserRoles ANUR ON(ANUR.UserId = ANU.Id)
				LEFT JOIN AspNetRoles ANR ON(ANR.Id = ANUR.RoleId)                
				LEFT JOIN AspNetZnodeUser ANZU ON(ANZU.AspNetZnodeUserId = ANU.UserName
				AND (ANZU.PortalId = ZUP.PortalId
				OR ZUP.PortalId IS NULL))                  
				LEFT OUTER JOIN ZnodeAccount ZA ON (ZU.AccountId = ZA.AccountId)
				WHERE
				(ANR.Name = 'Customer' OR ANR.TypeOfRole = 'B2B' OR ZU.AspNetUserId IS NULL  )
				AND ZU.EmailOptIn = 1
				AND
				   (ZU.FirstName LIKE '%'+@FirstName+'%'
                   OR @FirstName = '')
                AND(ZU.LastName LIKE '%'+@LastName+'%'
                   OR @LastName = '')
                AND(ZU.Email LIKE '%'+@Email+'%'
                   OR @Email = '')
				AND ((@ShowOnlyRegisteredUsers = 1 and ZU.AspNetUserId  IS NOT NULL) or (@ShowOnlyRegisteredUsers <> 1 ))
				)

				SELECT UserId,FirstName,LastName,Email,PortalId,StoreName,Name,CustomerType
				FROM CTE_GetEmailOptinCustomer		
				ORDER BY StoreName desc,FirstName,LastName,Email

         END TRY
         BEGIN CATCH
             DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeReport_GetEmailOptinCustomer @Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'ZnodeReport_GetEmailOptinCustomer',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;

	 GO
	 IF  EXISTS (SELECT * FROM   sys.objects WHERE  type IN( 'F' ) and OBJECT_NAME(parent_object_id) = 'ZnodeSearchProfileTrigger' and name ='FK_ZnodeSearchProfileTrigger_ZnodeUserProfile')
BEGIN 
ALTER TABLE ZnodeSearchProfileTrigger DROP CONSTRAINT FK_ZnodeSearchProfileTrigger_ZnodeUserProfile
END
GO

IF  EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeSearchProfileTrigger' AND COLUMN_NAME = 'UserProfileId')
BEGIN 
EXEC sp_RENAME 'ZnodeSearchProfileTrigger.UserProfileId', 'ProfileId', 'COLUMN'
END

GO
IF NOT EXISTS (SELECT * FROM   sys.objects WHERE  type IN( 'F' ) and OBJECT_NAME(parent_object_id) = 'ZnodeSearchProfileTrigger' and name ='FK_ZnodeSearchProfileTrigger_ZnodeProfile')
BEGIN 
ALTER TABLE [dbo].[ZnodeSearchProfileTrigger] 
    ADD CONSTRAINT FK_ZnodeSearchProfileTrigger_ZnodeProfile FOREIGN KEY ([ProfileId]) REFERENCES [dbo].[ZnodeProfile] ([ProfileId])
END
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetSearchProfileTrigger')
BEGIN 
	DROP PROCEDURE Znode_GetSearchProfileTrigger
END
GO

CREATE  PROCEDURE [dbo].[Znode_GetSearchProfileTrigger]
(   @WhereClause NVARCHAR(MAX),
    @Rows        INT           = 100,
    @PageNo      INT           = 1,
    @Order_BY    VARCHAR(100)  = '',
    @RowsCount   INT OUT

)
AS 
   /* 
   SUMMARY : Stored Procedure to Get list of searchProfileid 
   Unit Testing:

   -- EXEC Znode_GetSearchProfileTrigger N'keyword like ''%vvvvvv%'' ',@RowsCount = 0 , @Order_BY = 'UserProfile '
   
   searchProfileid = 2
   	*/

     BEGIN
         BEGIN TRY

		 SET NOCOUNT ON 

		 DECLARE @SQL  NVARCHAR(max) 
		
			DECLARE @TBL_ProfileTrigger TABLE (SearchProfileTriggerId INT,Keyword nvarchar(2000),ProfileId INT,SearchProfileId INT,UserProfile nvarchar(400), RowId INT, CountNo INT)


		SET @SQL = '
						;With Cte_GetProfileTriggerList 
						AS (
						Select ZSPT.SearchProfileTriggerId, ZSPT.Keyword,ZSPT.ProfileId,ZSPT.SearchProfileId,ZP.ProfileName as UserProfile
						FROM  ZnodeSearchProfileTrigger ZSPT 
						--left JOIN ZnodeUserProfile ZUP ON (ZSPT.ProfileId = ZUP.UserProfileID)
						left JOIN ZnodeProfile ZP ON (ZSPT.ProfileId = ZP.ProfileId)
						
									
						)	
						
						
						,Cte_GetFilterProfileTrigger
						AS (
						SELECT SearchProfileTriggerId,Keyword,ProfileId,SearchProfileId,UserProfile,
						'+dbo.Fn_GetPagingRowId(@Order_BY,'SearchProfileTriggerId DESC')+',Count(*)Over() CountNo 
						FROM  Cte_GetProfileTriggerList CGPTL 
						WHERE 1=1 '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'
						
						)
																								
						SELECT SearchProfileTriggerId,Keyword,ProfileId,SearchProfileId,UserProfile,RowId,CountNo
						FROM Cte_GetFilterProfileTrigger
						'+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)
						
						print @sql
						INSERT INTO @TBL_ProfileTrigger(SearchProfileTriggerId,Keyword,ProfileId,SearchProfileId,UserProfile,RowId,CountNo)
						EXEC(@SQL)

						SET @RowsCount =ISNULL((SELECT TOP 1 CountNo FROM @TBL_ProfileTrigger ),0)
			
						SELECT SearchProfileTriggerId,Keyword,ProfileId,SearchProfileId,UserProfile
						FROM @TBL_ProfileTrigger

				
		 END TRY
		 BEGIN CATCH
			 DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetSearchProfileTrigger @WhereClause = '''+ISNULL(@WhereClause,'''''')+''',@Rows='+ISNULL(CAST(@Rows AS
			VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetSearchProfileTrigger',
				@ErrorInProcedure = 'Znode_GetSearchProfileTrigger',
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
		 END CATCH
     END
	 GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetWebStoreSearchProfileTrigger')
BEGIN 
	DROP PROCEDURE Znode_GetWebStoreSearchProfileTrigger
END
GO


CREATE PROCEDURE [dbo].[Znode_GetWebStoreSearchProfileTrigger]
(   @Keyword nvarchar(100) = '',
    @ProfileId int = '',
	@PublishCatalogId int,
	@PortalId int 
)
AS 
/*
	 Summary :- This Procedure is used to get the publish status of the catalog 
	 Unit Testig 
	 EXEC  [Znode_GetWebStoreSearchProfileTrigger] 'Apple','1',3,1
*/
   BEGIN 
		BEGIN TRY 
		SET NOCOUNT ON 
				 Declare @SearchProfileId int 

				 Select @SearchProfileId=d.SearchProfileId 
				 from [ZnodeSearchProfileTrigger] d
				 inner join ZnodePublishCatalogSearchProfile c on c.SearchProfileId=d.SearchProfileId
				 Where d.Keyword=@Keyword
				 and d.ProfileId=@ProfileId
				 and c.PublishCatalogId=@PublishCatalogId

				 If isnull(@SearchProfileId,0)=0
				 Begin
					Select @SearchProfileId=d.SearchProfileId 
					from [ZnodeSearchProfileTrigger] d
					inner join ZnodePublishCatalogSearchProfile c on c.SearchProfileId=d.SearchProfileId
					Where d.Keyword=@Keyword
					and c.PublishCatalogId=@PublishCatalogId
					and d.ProfileId is null
				 eND

				 If isnull(@SearchProfileId,0)=0
				 Begin
					Select @SearchProfileId=d.SearchProfileId 
					from [ZnodeSearchProfileTrigger] d
					inner join ZnodePublishCatalogSearchProfile c on c.SearchProfileId=d.SearchProfileId
					Where d.ProfileId=@ProfileId
					and c.PublishCatalogId=@PublishCatalogId
					and d.Keyword is null
				 eND

				 If isnull(@SearchProfileId,0)=0
				 Begin
					Select @SearchProfileId=a.SearchProfileId 
					from ZnodePortalSearchProfile a
					inner join ZnodePublishCatalogSearchProfile c on c.SearchProfileId=a.SearchProfileId
					Where a.PortalId =@PortalId 
					and a.IsDefault=1
					and c.PublishCatalogId=@PublishCatalogId
				End 

				--If isnull(@SearchProfileId,0)=0
				-- Begin
				--	Select @SearchProfileId=min(a.SearchProfileId)
				--	from ZnodePortalSearchProfile a
				--	inner join ZnodePublishCatalogSearchProfile c on c.SearchProfileId=a.SearchProfileId
				--	Where a.PortalId =@PortalId 
				--	and a.IsDefault=0
				--	and c.PublishCatalogId=@PublishCatalogId
				--End 

				If isnull(@SearchProfileId,0)=0
				 Begin
					Select @SearchProfileId=a.SearchProfileId
					from ZnodeSearchProfile a
					----inner join ZnodePublishCatalogSearchProfile c on c.SearchProfileId=a.SearchProfileId
					Where a.IsDefault=1
					--and c.PublishCatalogId=@PublishCatalogId
				End 

				If Isnull(@SearchProfileId,0)>0
				exec [dbo].[Znode_GetSearchProfileDetails] @SearchProfileId=@SearchProfileId

				----To get SearchRule Item Details
				exec [Znode_GetSearchTriggerItemRuleDetails] @Keyword = @Keyword, @PublishCatalogId = @PublishCatalogId

		 END TRY 
		 BEGIN CATCH 
			DECLARE @Status BIT ;
			SET @Status = 0;
			DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
			@ErrorLine VARCHAR(100)= ERROR_LINE(), 
			@ErrorCall NVARCHAR(MAX)
	--		= 'EXEC Znode_GetCatalogList @WhereClause = '+@WhereClause+',@Rows='+CAST(@Rows AS
 --VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
			SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
			EXEC Znode_InsertProcedureErrorLog
					@ProcedureName = 'Znode_GetZnodeSearchProfileList',
					@ErrorInProcedure = @Error_procedure,
					@ErrorMessage = @ErrorMessage,
					@ErrorLine = @ErrorLine,
					@ErrorCall = @ErrorCall;
		 END CATCH 
   END
   GO
 IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_InsertUpdateSearchProfileTrigger')
BEGIN 
	DROP PROCEDURE Znode_InsertUpdateSearchProfileTrigger
END
GO


CREATE  PROCEDURE [dbo].[Znode_InsertUpdateSearchProfileTrigger]
(   @SearchProfileId       int,
    @KeywordList SelectColumnList readonly ,
    @ProfileList TransferId readonly ,
    @UserId                INT  ,
	@IsConfirmation  bit=0)
AS 
   /* 	*/
	DECLARE @GetDate DATETIME = dbo.Fn_GetDate(),@PublishCatalogSearchProfileId int ,@Status bit =0
     BEGIN
         BEGIN TRAN A;
         BEGIN TRY

		 DECLARE @TBL_FilteredTrigger TABLE (Keyword nvarchar(2000),ProfileId INT)

		-- fetch catalogid of SearchProfileId passed as parameter
		SET @PublishCatalogSearchProfileId = 
		(SELECT PublishCatalogId FROM  ZnodePublishCatalogSearchProfile a
		WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeSearchProfile b where  a.SearchProfileId = b.SearchProfileId and  a.SearchProfileId = @SearchProfileId ) )


		-- fetch trigger 
		INSERT INTO @TBL_FilteredTrigger(Keyword,ProfileId)
		SELECT Keyword,ProfileId FROM ZnodeSearchProfileTrigger c
		WHERE EXISTS (select TOP 1 1 FROM ZnodeSearchProfile a WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePublishCatalogSearchProfile b where a.SearchProfileId = b.SearchProfileId and b.PublishCatalogId = @PublishCatalogSearchProfileId) AND a.SearchProfileId = c.SearchProfileId)


		If EXISTS (Select 1 FROM @KeywordList ) AND  EXISTS (SELECT 1 FROM @ProfileList )  
		 BEGIN
		 
			IF EXISTS (SELECT 1 FROM @KeywordList KL   CROSS JOIN @ProfileList UPL
			INNER JOIN  @TBL_FilteredTrigger ss on KL.[StringColumn]=ss.Keyword  and UPL.Id=ss.ProfileId )
			AND @IsConfirmation=0
				BEGIN
					SET @Status=0
				END
			ELSE 
				BEGIN
					SET @Status=1
				END  
		    IF @Status=1
				BEGIN
					INSERT INTO [dbo].ZnodeSearchProfileTrigger([SearchProfileId],Keyword,ProfileId,[CreatedBy],[CreatedDate],[ModifiedBy],[ModifiedDate])
					Select @SearchProfileId,KL.[StringColumn] ,UPL.Id,@UserId [CreatedBy],@GetDate[CreatedDate],@UserId [ModifiedBy],@GetDate [ModifiedDate]
					FROM @KeywordList KL   
					CROSS JOIN @ProfileList UPL
					WHERE NOT EXISTS(SELECT 1 FROM ZnodeSearchProfileTrigger ss WHERE KL.[StringColumn]=ss.Keyword  and UPL.Id=ss.ProfileId and ss.SearchProfileId = @SearchProfileId)
					AND @IsConfirmation=0


					UPDATE ss
					Set SS.SearchProfileId=@SearchProfileId,ss.ModifiedBy=@UserId,ss.ModifiedDate=@GetDate
					FROM  @KeywordList KL   
					CROSS JOIN @ProfileList UPL 
					INNER JOIN ZnodeSearchProfileTrigger ss on  KL.[StringColumn]=ss.Keyword and UPL.Id=ss.ProfileId 
					WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeSearchProfile a WHERE EXISTS 
																				(SELECT TOP 1 1 FROM ZnodePublishCatalogSearchProfile b WHERE a.SearchProfileId = b.SearchProfileId AND b.PublishCatalogId = @PublishCatalogSearchProfileId) AND a.SearchProfileId = ss.SearchProfileId)


				ENd
		 End
		 ELSE If EXISTS (Select 1 FROM @KeywordList ) AND  NOT EXISTS (Select 1 FROM @ProfileList )  
			BEGIN
				IF EXISTS (Select 1 FROM @KeywordList KL   INNER JOIN  @TBL_FilteredTrigger ss on KL.[StringColumn]=ss.Keyword  AND ss.ProfileId IS NULL)
				AND @IsConfirmation=0
					BEGIN
						SET @Status=0
					END
				ELSE 
					BEGIN
						SET @Status=1
					END 
				IF @Status=1
					Begin
						INSERT INTO [dbo].ZnodeSearchProfileTrigger
						([SearchProfileId],Keyword,[CreatedBy],[CreatedDate],[ModifiedBy],[ModifiedDate])
						Select @SearchProfileId,KL.[StringColumn] ,@UserId [CreatedBy],@GetDate[CreatedDate],@UserId [ModifiedBy],@GetDate [ModifiedDate]
						FROM @KeywordList KL  
						WHERE  NOT EXISTS(SELECT 1 FROM ZnodeSearchProfileTrigger ss Where KL.[StringColumn]=ss.Keyword AND ss.ProfileId IS NULL AND ss.SearchProfileId = @SearchProfileId )
						AND @IsConfirmation=0

						UPDATE ss
						Set SS.SearchProfileId=@SearchProfileId,ss.ModifiedBy=@UserId,ss.ModifiedDate=@GetDate
						FROM  @KeywordList KL 
						INNER JOIN ZnodeSearchProfileTrigger ss on  KL.[StringColumn]=ss.Keyword and ss.ProfileId IS NULL 
						WHERE EXISTS (select TOP 1 1 FROM ZnodeSearchProfile a WHERE EXISTS 
																			(SELECT TOP 1 1 FROM ZnodePublishCatalogSearchProfile b where a.SearchProfileId = b.SearchProfileId and b.PublishCatalogId = @PublishCatalogSearchProfileId) AND a.SearchProfileId = ss.SearchProfileId)

					END
			 END
		 ELSE IF NOT EXISTS (SELECT 1 FROM @KeywordList ) AND   EXISTS (SELECT 1 FROM @ProfileList )  
			Begin
		
				IF EXISTS (SELECT 1 FROM @ProfileList UPL INNER JOIN  @TBL_FilteredTrigger ss on ss.Keyword IS NULL AND UPL.Id=ss.ProfileId )
				AND @IsConfirmation=0
					BEGIN
							SET @Status=0
					END
				ELSE 
					BEGIN
							SET @Status=1
					END 

				IF @Status=1
					Begin
						INSERT INTO [dbo].ZnodeSearchProfileTrigger([SearchProfileId],ProfileId,[CreatedBy],[CreatedDate],[ModifiedBy],[ModifiedDate])
						Select @SearchProfileId,UPL.Id,@UserId [CreatedBy],@GetDate[CreatedDate],@UserId [ModifiedBy],@GetDate [ModifiedDate]
						FROM  @ProfileList UPL
						WHERE  NOT EXISTS(SELECT 1 FROM ZnodeSearchProfileTrigger ss WHERE  ss.Keyword IS NULL AND UPL.Id=ss.ProfileId and ss.SearchProfileId = @SearchProfileId)
						and @IsConfirmation=0

				
						Update ss
						Set SS.SearchProfileId=@SearchProfileId,ss.ModifiedBy=@UserId,ss.ModifiedDate=@GetDate
						FROM  @ProfileList UPL
						INNER JOIN ZnodeSearchProfileTrigger ss on ss.Keyword IS NULL AND UPL.Id=ss.ProfileId
						WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeSearchProfile a WHERE EXISTS 
																					(SELECT TOP 1 1 FROM ZnodePublishCatalogSearchProfile b where a.SearchProfileId = b.SearchProfileId and b.PublishCatalogId = @PublishCatalogSearchProfileId) AND a.SearchProfileId = ss.SearchProfileId) 

					ENd


			End

		  SELECT @SearchProfileId AS ID,CAST(@Status AS BIT) AS Status;   			
		  COMMIT TRAN A;
         END TRY
         BEGIN CATCH
        
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_InsertUpdateSearchProfileTrigger @UserId = '+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
			 ROLLBACK TRAN A;
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_InsertUpdateSearchProfileTrigger',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;

	 GO
UPDATE ZnodeApplicationSetting SET OrderByFields=NULL WHERE ItemName = 'ZnodeCustomerAccount'
GO

UPDATE ZnodeApplicationSetting
SET Setting = '<?xml version="1.0" encoding="utf-16"?>  <columns>      <column>          <id>1</id>          <name>PublishCategoryId</name>          <headertext>Checkbox</headertext>          <width>40</width>          <datatype>Int32</datatype>          <columntype>Int32</columntype>          <allowsorting>false</allowsorting>          <allowpaging>false</allowpaging>          <format></format>          <isvisible>y</isvisible>          <mustshow>y</mustshow>          <musthide>n</musthide>          <maxlength>0</maxlength>          <isallowsearch>n</isallowsearch>          <isconditional>n</isconditional>          <isallowlink>n</isallowlink>          <islinkactionurl></islinkactionurl>          <islinkparamfield></islinkparamfield>          <ischeckbox>y</ischeckbox>          <checkboxparamfield></checkboxparamfield>          <iscontrol>n</iscontrol>          <controltype></controltype>          <controlparamfield></controlparamfield>          <displaytext></displaytext>          <editactionurl></editactionurl>          <editparamfield></editparamfield>          <deleteactionurl></deleteactionurl>          <deleteparamfield></deleteparamfield>          <viewactionurl></viewactionurl>          <viewparamfield></viewparamfield>          <imageactionurl></imageactionurl>          <imageparamfield></imageparamfield>          <manageactionurl></manageactionurl>          <manageparamfield></manageparamfield>          <copyactionurl></copyactionurl>          <copyparamfield></copyparamfield>          <xaxis>n</xaxis>          <yaxis>n</yaxis>          <isadvancesearch>n</isadvancesearch>          <Class></Class>          <SearchControlType>--Select--</SearchControlType>          <SearchControlParameters></SearchControlParameters>          <DbParamField></DbParamField>          <useMode>DataBase</useMode>          <IsGraph>n</IsGraph>          <allowdetailview>n</allowdetailview>      </column>      <column>          <id>2</id>          <name>PublishCategoryId</name>          <headertext>Publish Category ID</headertext>          <width>40</width>          <datatype>Int32</datatype>          <columntype>Int32</columntype>          <allowsorting>true</allowsorting>          <allowpaging>true</allowpaging>          <format></format>          <isvisible>y</isvisible>          <mustshow>y</mustshow>          <musthide>n</musthide>          <maxlength>0</maxlength>          <isallowsearch>n</isallowsearch>          <isconditional>n</isconditional>          <isallowlink>n</isallowlink>          <islinkactionurl></islinkactionurl>          <islinkparamfield></islinkparamfield>          <ischeckbox>n</ischeckbox>          <checkboxparamfield></checkboxparamfield>          <iscontrol>n</iscontrol>          <controltype></controltype>          <controlparamfield></controlparamfield>          <displaytext></displaytext>          <editactionurl></editactionurl>          <editparamfield></editparamfield>          <deleteactionurl></deleteactionurl>          <deleteparamfield></deleteparamfield>          <viewactionurl></viewactionurl>          <viewparamfield></viewparamfield>          <imageactionurl></imageactionurl>          <imageparamfield></imageparamfield>          <manageactionurl></manageactionurl>          <manageparamfield></manageparamfield>          <copyactionurl></copyactionurl>          <copyparamfield></copyparamfield>          <xaxis>n</xaxis>          <yaxis>n</yaxis>          <isadvancesearch>n</isadvancesearch>          <Class></Class>          <SearchControlType>--Select--</SearchControlType>          <SearchControlParameters></SearchControlParameters>          <DbParamField></DbParamField>          <useMode>DataBase</useMode>          <IsGraph>n</IsGraph>          <allowdetailview>n</allowdetailview>      </column>      <column>          <id>3</id>          <name>CategoryName</name>          <headertext>Category Name</headertext>          <width>40</width>          <datatype>String</datatype>          <columntype>String</columntype>          <allowsorting>true</allowsorting>          <allowpaging>true</allowpaging>          <format></format>          <isvisible>y</isvisible>          <mustshow>y</mustshow>          <musthide>n</musthide>          <maxlength>0</maxlength>          <isallowsearch>y</isallowsearch>          <isconditional>n</isconditional>          <isallowlink>n</isallowlink>          <islinkactionurl></islinkactionurl>          <islinkparamfield></islinkparamfield>          <ischeckbox>n</ischeckbox>          <checkboxparamfield></checkboxparamfield>          <iscontrol>n</iscontrol>          <controltype></controltype>          <controlparamfield></controlparamfield>          <displaytext></displaytext>          <editactionurl></editactionurl>          <editparamfield></editparamfield>          <deleteactionurl></deleteactionurl>          <deleteparamfield></deleteparamfield>          <viewactionurl></viewactionurl>          <viewparamfield></viewparamfield>          <imageactionurl></imageactionurl>          <imageparamfield></imageparamfield>          <manageactionurl></manageactionurl>          <manageparamfield></manageparamfield>          <copyactionurl></copyactionurl>          <copyparamfield></copyparamfield>          <xaxis>n</xaxis>          <yaxis>n</yaxis>          <isadvancesearch>y</isadvancesearch>          <Class></Class>          <SearchControlType>--Select--</SearchControlType>          <SearchControlParameters></SearchControlParameters>          <DbParamField></DbParamField>          <useMode>DataBase</useMode>          <IsGraph>n</IsGraph>          <allowdetailview>n</allowdetailview>      </column>      <column>          <id>4</id>          <name>CatalogName</name>          <headertext>Catalog Name</headertext>          <width>40</width>          <datatype>String</datatype>          <columntype>String</columntype>          <allowsorting>true</allowsorting>          <allowpaging>true</allowpaging>          <format></format>          <isvisible>y</isvisible>          <mustshow>y</mustshow>          <musthide>n</musthide>          <maxlength>0</maxlength>          <isallowsearch>y</isallowsearch>          <isconditional>n</isconditional>          <isallowlink>n</isallowlink>          <islinkactionurl></islinkactionurl>          <islinkparamfield></islinkparamfield>          <ischeckbox>n</ischeckbox>          <checkboxparamfield></checkboxparamfield>          <iscontrol>n</iscontrol>          <controltype></controltype>          <controlparamfield></controlparamfield>          <displaytext></displaytext>          <editactionurl></editactionurl>          <editparamfield></editparamfield>          <deleteactionurl></deleteactionurl>          <deleteparamfield></deleteparamfield>          <viewactionurl></viewactionurl>          <viewparamfield></viewparamfield>          <imageactionurl></imageactionurl>          <imageparamfield></imageparamfield>          <manageactionurl></manageactionurl>          <manageparamfield></manageparamfield>          <copyactionurl></copyactionurl>          <copyparamfield></copyparamfield>          <xaxis>n</xaxis>          <yaxis>n</yaxis>          <isadvancesearch>y</isadvancesearch>          <Class></Class>          <SearchControlType>--Select--</SearchControlType>          <SearchControlParameters></SearchControlParameters>          <DbParamField></DbParamField>          <useMode>DataBase</useMode>          <IsGraph>n</IsGraph>          <allowdetailview>n</allowdetailview>      </column>  </columns>'
WHere ItemName = 'PublishedCategoryList'

GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishAssociatedAddons')
BEGIN 
	DROP PROCEDURE Znode_GetPublishAssociatedAddons
END
GO
CREATE  PROCEDURE [dbo].[Znode_GetPublishAssociatedAddons](@PublishCatalogId NVARCHAR(MAX) = 0,
                                                         @PimProductId    TransferId Readonly,
                                                         @VersionId        INT           = 0,
                                                         @UserId           INT,														 
														 @PimCategoryHierarchyId int = 0, 
														 @LocaleId       TransferId READONLY,
														 @PublishStateId INT = 0 
														   )
AS 
   
/*
    Summary : If PimcatalogId is provided get all products with Addons and provide above mentioned data
              If PimProductId is provided get all Addons if associated with given product id and provide above mentioned data
    			Input: @PublishCatalogId or @PimProductId
    		    output should be in XML format
              sample xml5
              <AddonEntity>
              <ZnodeProductId></ZnodeProductId>
              <ZnodeCatalogId></ZnodeCatalogId>
              <AddonGroupName></AddonGroupName>
              <TempAsscociadedZnodeProductIds></TempAsscociadedZnodeProductIds>
              </AddonEntity>
    <AddonEntity>
      <ZnodeProductId>6</ZnodeProductId>
      <ZnodeCatalogId>2</ZnodeCatalogId>
      <AddonGroupName>RadioButton</AddonGroupName>
      <TempAsscociadedZnodeProductIds>53,54,55,56,57,82</TempAsscociadedZnodeProductIds>
      <ZnodeProductId>14</ZnodeProductId>
      <ZnodeCatalogId>2</ZnodeCatalogId>
      <AddonGroupName>RadioButton</AddonGroupName>
      <TempAsscociadedZnodeProductIds>6,7</TempAsscociadedZnodeProductIds>
      <ZnodeProductId>16</ZnodeProductId>
      <ZnodeCatalogId>2</ZnodeCatalogId>
      <AddonGroupName>RadioButton</AddonGroupName>
      <TempAsscociadedZnodeProductIds>7,14,54,6</TempAsscociadedZnodeProductIds>
    </AddonEntity>
    Unit Testing 
     SELECT * FROM ZnodePublishcatalog
	begin tran
     EXEC [dbo].[Znode_GetPublishAssociatedAddons] @PublishCatalogId = '3',@userId= 2  ,@PimProductId=  '29' ,@UserId=2
	rollback tran
     EXEC [dbo].[Znode_GetPublishAssociatedAddons] @PublishCatalogId = 3 ,@PimProductId=  '' ,@UserId=2
     EXEC [dbo].[Znode_GetPublishAssociatedAddons] @PublishCatalogId =null ,@PimProductId=  6   

	DECLARE	@return_value int

	EXEC	@return_value = [dbo].[Znode_GetPublishAssociatedAddons]
	@PublishCatalogId = 3,
	@UserId = 2,
	@PimCategoryHierarchyId = 125

	SELECT	'Return Value' = @return_value


   
	*/

     BEGIN
        -- BEGIN TRANSACTION GetPublishAssociatedAddons;
         BEGIN TRY
          SET NOCOUNT ON 
			 DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
             DECLARE @LocaleIdIn INT, @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId()
			 , @Counter INT= 1
			 , @MaxRowId INT= 0;

            -- DECLARE @PimAddOnGroupId VARCHAR(MAX);

			 CREATE TABLE #TBL_PublisshIds  (PublishProductId INT , PimProductId INT , PublishCatalogId INT)

             DECLARE @TBL_LocaleId TABLE
             (RowId    INT IDENTITY(1, 1),
              LocaleId INT
             );


			 IF  @PublishCatalogId IS NULL  OR @PublishCatalogId = 0 
			 BEGIN 
			 		 
			   INSERT INTO #TBL_PublisshIds 
			   EXEC [dbo].[Znode_InsertPublishProductIds] @PublishCatalogId,@userid,@PimProductId,1
			   
			  	
			 END 
			 IF  ISnull(@PimCategoryHierarchyId,0) <> 0 
			 BEGIN 
			 		 
			   INSERT INTO #TBL_PublisshIds 
			   EXEC [dbo].[Znode_InsertPublishProductIds] @PublishCatalogId,@userid,@PimProductId,1,@PimCategoryHierarchyId 

			
				
			 END 
			
			
			--SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,CASE WHEN 0 = 0 OR 0 IS NULL THEN  MAX(PublishCatalogLogId) ELSE 0 END 
			--FROM ZnodePublishProduct ZPP 
			--INNEr JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
			--       WHERE zpp.PublishProductId  IN (218,214)
			--          GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId
			 CREATE TABLE #TBL_PublishCatalogId (PublishCatalogId INT,PublishProductId INT,PimProductId  INT , VersionId INT ,LocaleId INT  );

			 IF  ISnull(@PimCategoryHierarchyId,0) <> 0 
			 BEGIN 
				 INSERT INTO #TBL_PublishCatalogId 
				 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId, MAX(ZPCP.PublishCatalogLogId)  ,LocaleId 
				 FROM ZnodePublishProduct ZPP 
				 INNER JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
				 WHERE EXISTS (SELECT TOP 1 1 FROM #TBL_PublisshIds SP WHERE SP.PublishProductId = ZPP.PublishProductId   ) 
				 AND ZPCP.Publishstateid = @PublishStateId
				 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,LocaleId 
			 END 
			 ELSE 
			 Begin
				 BEGIN 
				 INSERT INTO #TBL_PublishCatalogId  
				 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,MAX(PublishCatalogLogId)  ,LocaleId 
				 FROM ZnodePublishProduct ZPP INNER JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
				 WHERE (EXISTS (SELECT TOP 1 1 FROM #TBL_PublisshIds SP WHERE SP.PublishProductId = ZPP.PublishProductId  AND  @PublishCatalogId = '0' ) 
				 OR (ZPP.PublishCatalogId =  @PublishCatalogId ))
				 AND CASE WHEN NOT EXISTS (SELECT TOP 1 1 FROM @PimProductId ) AND @PublishCatalogId <> 0   THEN  @PublishStateId ELSE  ZPCP.Publishstateid END  = @PublishStateId
				 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,LocaleId 
			 END 

			 End
			
             DECLARE @TBL_AddonGroupLocale TABLE
             (PimAddonGroupId INT,
              DisplayType     NVARCHAR(400),
              AddonGroupName  NVARCHAR(MAX),
			  LocaleId INT 
             );
           
             INSERT INTO @TBL_LocaleId(LocaleId)
                    SELECT LocaleId
                    FROM ZnodeLocale MT 
                    WHERE IsActive = 1
					AND (EXISTS (SELECT TOP 1 1  FROM @LocaleId RT WHERE RT.Id = MT.LocaleId )
					OR NOT EXISTS (SELECT TOP 1 1 FROM @LocaleId ));

          
             SET @MaxRowId = ISNULL(
                                   (
                                       SELECT MAX(RowId)
                                       FROM @TBL_LocaleId
                                   ), 0);
    
             WHILE @Counter <= @MaxRowId
                 BEGIN
                     SET @LocaleIdIn =
                     (
                         SELECT LocaleId
                         FROM @TBL_LocaleId
                         WHERE RowId = @Counter
                     );
                     INSERT INTO @TBL_AddonGroupLocale
                     (PimAddonGroupId,
                      DisplayType,
                      AddonGroupName					  
                     )
                     EXEC Znode_GetAddOnGroupLocale
                          '',
                          @LocaleIdIn;

					UPDATE @TBL_AddonGroupLocale SET LocaleId = @LocaleIdIn WHERE LocaleId IS NULL 

                    SET @Counter = @Counter + 1;
                 END;
				     
				 IF  @PublishCatalogId IS NULL  OR @PublishCatalogId = 0 
			     BEGIN 
			 		 
			         DELETE FROM ZnodePublishedXML WHERE IsAddOnXML =1  
					 AND EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId TBLV WHERE ZnodePublishedXML.PublishedId = TBLV.PublishProductId   AND ZnodePublishedXML.PublishCatalogLogId = TBLV.VersionId )
			    
			  
				 END 
				 ELSE 
				 BEGIN 
					
					 --SET @versionid  =(SELECT TOP 1 VersionId FROM #TBL_PublishCatalogId TBLV )

					 --DELETE FROM ZnodePublishedXML WHERE IsAddOnXML =1 
					 --AND PublishCatalogLogId  = @versionid 

					 ;WITH CTE_AddOnXML as
						 (
							 SELECT ZPPP.PublishProductId,ZPPP.PublishCatalogId,ZPPD.LocaleId,ZPPP.VersionId, ZPP.PublishProductId as AssociatedZnodeProductId  				 
							 FROM [ZnodePimAddOnProductDetail] AS ZPOPD
							 INNER JOIN [ZnodePimAddOnProduct] AS ZPAOP ON ZPOPD.[PimAddOnProductId] = ZPAOP.[PimAddOnProductId]
							 INNER JOIN #TBL_PublishCatalogId ZPPP ON (ZPPP.PimProductId = ZPAOP.PimProductId )
							 INNER JOIN #TBL_PublishCatalogId ZPP ON(ZPP.PimProductId = ZPOPD.[PimChildProductId] AND ZPP.PublishCatalogId = ZPPP.PublishCatalogId and ZPPP.LocaleId  = ZPP.LocaleId )
							 INNER JOIN ZnodePublishProductDetail ZPPD ON (ZPPD.PublishProductId = ZPPP.PublishProductId)
							 INNER JOIN @TBL_AddonGroupLocale TBAG ON (TBAG.PimAddonGroupId   = ZPAOP.PimAddonGroupId AND TBAG.LocaleId = ZPPD.LocaleId )
							 WHERE  ZPP.LocaleId = ZPPD.LocaleId AND ZPPP.LocaleId =  ZPPD.LocaleId 
						)
						,CTE_PublishedXML as
						(
							SELECT ZPX.PublishCatalogLogId,ZPX.PublishedId,ZPX.IsAddonXML, p.value('(./AssociatedZnodeProductId)[1]', 'INT')  as AssociatedZnodeProductId, p.value('(./LocaleId)[1]', 'INT') as LocaleId1
							FROM ZnodePublishedXML ZPX
							CROSS APPLY ZPX.PublishedXML.nodes('/AddonEntity') t(p)
							where ZPX.IsAddonXML = 1
						)
						DELETE ZPXML  
						FROM ZnodePublishedXML ZPXML
						INNER JOIN CTE_PublishedXML CPX	ON ZPXML.PublishCatalogLogId = CPX.PublishCatalogLogId AND ZPXML.PublishedId = CPX.PublishedId AND ZPXML.IsAddonXML = CPX.IsAddonXML		
						INNER JOIN CTE_AddOnXML CAX on --CPX.PublishCatalogLogId = CAX.VersionId AND
							 CPX.PublishedId = CAX.PublishProductId
							AND ZPXML.IsAddonXML = 1 
							AND CPX.LocaleId1 = CAX.LocaleId 
							AND CPX.AssociatedZnodeProductId = CAX.AssociatedZnodeProductId
				 END 
			
					--SELECT * FROM #TBL_PublishCatalogId
					 MERGE INTO ZnodePublishedXML TARGET 
					 USING (
					 SELECT   ZPPP.PublishProductId,ZPPP.PublishCatalogId,ZPPD.LocaleId,ZPPP.VersionId,'<AddonEntity><VersionId>'+CAST(ZPPP.VersionId AS VARCHAR(50))+'</VersionId><ZnodeProductId>'+CAST(ZPPP.[PublishProductId] AS VARCHAR(50))+'</ZnodeProductId><ZnodeCatalogId>'
				     +CAST(ZPPP.[PublishCatalogId] AS VARCHAR(50))+'</ZnodeCatalogId><AssociatedZnodeProductId>'+CAST(ZPP.PublishProductId  AS VARCHAR(50))
					 +'</AssociatedZnodeProductId><DisplayOrder>'+CAST( ISNULL(ZPAOP.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder><AssociatedProductDisplayOrder>'
					 +CAST(ISNULL(ZPOPD.DisplayOrder,'') AS VARCHAR(50))+'</AssociatedProductDisplayOrder><RequiredType>'+ISNULL(RequiredType,'')+'</RequiredType><DisplayType>'
					 + ISNULL(DisplayType,'')+'</DisplayType><GroupName>'+ISNULL((select ''+AddonGroupName for xml path('')),'')+'</GroupName><LocaleId>'+CAST(ZPPD.LocaleId AS VARCHAR(50))+'</LocaleId><IsDefault>'+CAST(ISNULL(IsDefault,0) AS VARCHAR(50))+'</IsDefault></AddonEntity>'  ReturnXML		   
				 
                      FROM [ZnodePimAddOnProductDetail] AS ZPOPD
                           INNER JOIN [ZnodePimAddOnProduct] AS ZPAOP ON ZPOPD.[PimAddOnProductId] = ZPAOP.[PimAddOnProductId]
						    INNER JOIN #TBL_PublishCatalogId ZPPP ON (ZPPP.PimProductId = ZPAOP.PimProductId )
                           INNER JOIN #TBL_PublishCatalogId ZPP ON(ZPP.PimProductId = ZPOPD.[PimChildProductId] AND ZPP.PublishCatalogId = ZPPP.PublishCatalogId )
						   INNER JOIN ZnodePublishProductDetail ZPPD ON (ZPPD.PublishProductId = ZPPP.PublishProductId)
						   INNER JOIN @TBL_AddonGroupLocale TBAG ON (TBAG.PimAddonGroupId   = ZPAOP.PimAddonGroupId AND TBAG.LocaleId = ZPPD.LocaleId )
						   WHERE  ZPP.LocaleId = ZPPD.LocaleId AND ZPPP.LocaleId =  ZPPD.LocaleId 
					) SOURCE 
					ON (
						 TARGET.PublishCatalogLogId = SOURCE.VersionId 
						 AND TARGET.PublishedId = SOURCE.PublishProductId
						 AND TARGET.IsAddonXML = 1 
						 AND TARGET.LocaleId = SOURCE.LocaleId 
					)
					WHEN MATCHED THEN 
					UPDATE 
					SET  PublishedXML = ReturnXML
					   , ModifiedBy = @userId 
					   ,ModifiedDate = @GetDate
					WHEN NOT MATCHED THEN 
					INSERT (PublishCatalogLogId
					,PublishedId
					,PublishedXML
					,IsAddonXML
					,LocaleId
					,CreatedBy
					,CreatedDate
					,ModifiedBy
					,ModifiedDate)
					
					VALUES (Source.VersionId , Source.publishProductid,Source.ReturnXML,1,SOURCE.localeid,@userId,@getDate,@userId,@getDate);
					
					
					SELECT Cast(PublishedXML as xml) ReturnXML
					FROM #TBL_PublishCatalogId TBLPP 
					INNER JOIN ZnodePublishedXML ZPX ON (ZPX.PublishCatalogLogId = TBLPP.VersionId AND ZPX.PublishedId = TBLPP.publishProductid )
					WHERE ZPX.IsAddonXML = 1
             --SELECT ReturnXML
             --FROM @TBL_AddonXML;
		
           --  COMMIT TRANSACTION GetPublishAssociatedAddons;
         END TRY
         BEGIN CATCH
		     SELECT ERROR_MESSAGE(),ERROR_PROCEDURE()
             DECLARE @Status BIT;
             SET @Status = 0;
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPublishAssociatedAddons @PublishCatalogId = '+@PublishCatalogId+',@VersionId='+CAST(@VersionId AS VARCHAR(50))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
             SELECT 0 AS ID,
                    CAST(0 AS BIT) AS Status;
           --  ROLLBACK TRANSACTION GetPublishAssociatedAddons;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_GetPublishAssociatedAddons',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO

UPDATE ZnodeOmsOrderState
set Description = 'SUBMITTED'
WHERE Description = 'Submitted'

UPDATE ZnodeOmsOrderStateShowToCustomer
set Description = 'SUBMITTED'
WHERE Description = 'Submitted'

GO
UPDATE ZnodeOmsOrderState
set Description = 'SHIPPED'
WHERE Description = 'Shipped'

UPDATE ZnodeOmsOrderStateShowToCustomer
set Description = 'SHIPPED'
WHERE Description = 'Shipped'

GO
UPDATE ZnodeOmsOrderState
set Description = 'CANCELLED'
WHERE Description = 'Cancelled'

UPDATE ZnodeOmsOrderStateShowToCustomer
set Description = 'CANCELLED'
WHERE Description = 'Cancelled'

GO
UPDATE ZnodeOmsOrderState
set Description = 'PENDING APPROVAL'
WHERE Description = 'Pending Approval'

UPDATE ZnodeOmsOrderStateShowToCustomer
set Description = 'PENDING APPROVAL'
WHERE Description = 'Pending Approval'

GO

declare @a int , @OrderLineItemRelationshipTypeId int

SET @OrderLineItemRelationshipTypeId = (SELECT TOP 1 OrderLineItemRelationshipTypeId from ZnodeOMSOrderLineItemRelationshipType where Name = 'AddOns')

declare cur_orderrepair cursor for 
with cte as
(
select OmsOrderDetailsId, OmsOrderLineItemsId  from ZnodeOmsOrderLineItems  where ParentOmsOrderLineItemsId is null
and OmsOrderDetailsId in (select OmsOrderDetailsId from ZnodeOmsOrderLineItems where OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeId  )
)
,cte2 as
(
select a.OmsOrderDetailsId, a.OmsOrderLineItemsId, a.ParentOmsOrderLineItemsId, ROW_NUMBER() over (Partition by a.OmsOrderDetailsId order by  a.OmsOrderLineItemsId)rowid
 from ZnodeOmsOrderLineItems a
inner join cte b on a.OmsOrderDetailsId = b.OmsOrderDetailsId and b.OmsOrderLineItemsId = a.ParentOmsOrderLineItemsId and a.OrderLineItemRelationshipTypeId <> @OrderLineItemRelationshipTypeId 
where a.ParentOmsOrderLineItemsId in (select ParentOmsOrderLineItemsId from ZnodeOmsOrderLineItems where OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeId  )
)select 1 as id from cte2

open cur_orderrepair

fetch next from cur_orderrepair into @a

while @@FETCH_STATUS = 0
begin

;with cte as
(
select OmsOrderDetailsId, OmsOrderLineItemsId  from ZnodeOmsOrderLineItems  where ParentOmsOrderLineItemsId is null
and OmsOrderDetailsId in (select OmsOrderDetailsId from ZnodeOmsOrderLineItems where OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeId  )
)
,cte2 as
(
select a.OmsOrderDetailsId, a.OmsOrderLineItemsId, a.ParentOmsOrderLineItemsId, ROW_NUMBER() over (Partition by a.OmsOrderDetailsId order by  a.OmsOrderLineItemsId)rowid
 from ZnodeOmsOrderLineItems a
inner join cte b on a.OmsOrderDetailsId = b.OmsOrderDetailsId and b.OmsOrderLineItemsId = a.ParentOmsOrderLineItemsId and a.OrderLineItemRelationshipTypeId <> @OrderLineItemRelationshipTypeId 
where a.ParentOmsOrderLineItemsId in (select ParentOmsOrderLineItemsId from ZnodeOmsOrderLineItems where OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeId  )
)
,cte3 as
(
select a.OmsOrderDetailsId, a.OmsOrderLineItemsId, a.ParentOmsOrderLineItemsId  , ROW_NUMBER() over (Partition by a.OmsOrderDetailsId order by  a.OmsOrderLineItemsId)rowid
from ZnodeOmsOrderLineItems a
inner join cte b on a.OmsOrderDetailsId = b.OmsOrderDetailsId and b.OmsOrderLineItemsId = a.ParentOmsOrderLineItemsId and a.OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeId 
)
update c set c.ParentOmsOrderLineItemsId = b.OmsOrderLineItemsId 
from cte3 a
inner join cte2 b on a.OmsOrderDetailsId = b.OmsOrderDetailsId and a.ParentOmsOrderLineItemsId = b.ParentOmsOrderLineItemsId
and a.rowid = b.rowid
inner join ZnodeOmsOrderLineItems c on a.OmsOrderLineItemsId = c.OmsOrderLineItemsId


fetch next from cur_orderrepair into @a

end
close cur_orderrepair 
DEALLOCATE cur_orderrepair

GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishCategory')
BEGIN 
	DROP PROCEDURE Znode_GetPublishCategory
END
GO

CREATE PROCEDURE [dbo].[Znode_GetPublishCategory]
(   @PublishCatalogId INT,
    @UserId           INT,
    @VersionId        INT,
    @Status           BIT = 0 OUT,
    @IsDebug          BIT = 0,
	@LocaleId         TransferID READONLY)
AS 
/*
       Summary:Publish category with their respective products and details 
	            The result is fetched in xml form   
       Unit Testing   
       Begin transaction 
       SELECT * FROM ZnodePIMAttribute 
	   SELECT * FROM ZnodePublishCatalog 
	   SELECT * FROM ZnodePublishCategory WHERE publishCAtegoryID = 167 


       EXEC [Znode_GetPublishCategory] @PublishCatalogId = 5,@VersionId = 0 ,@UserId =2 ,@IsDebug = 1 
     


       Rollback Transaction 
	*/
     BEGIN
         BEGIN TRAN GetPublishCategory;
         BEGIN TRY
             SET NOCOUNT ON;
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @LocaleIdIn INT= 0, @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId(), @Counter INT= 1, @MaxId INT= 0, @CategoryIdCount INT;
             DECLARE @IsActive BIT= [dbo].[Fn_GetIsActiveTrue]();
             DECLARE @AttributeIds VARCHAR(MAX)= '', @PimCategoryIds VARCHAR(MAX)= '', @DeletedPublishCategoryIds VARCHAR(MAX)= '', @DeletedPublishProductIds VARCHAR(MAX);
             --get the pim catalog id 
			 DECLARE @PimCatalogId INT=(SELECT PimCatalogId FROM ZnodePublishcatalog WHERE PublishCatalogId = @PublishCatalogId); 

             DECLARE @TBL_AttributeIds TABLE
             (PimAttributeId       INT,
              ParentPimAttributeId INT,
              AttributeTypeId      INT,
              AttributeCode        VARCHAR(600),
              IsRequired           BIT,
              IsLocalizable        BIT,
              IsFilterable         BIT,
              IsSystemDefined      BIT,
              IsConfigurable       BIT,
              IsPersonalizable     BIT,
              DisplayOrder         INT,
              HelpDescription      VARCHAR(MAX),
              IsCategory           BIT,
              IsHidden             BIT,
              CreatedDate          DATETIME,
              ModifiedDate         DATETIME,
              AttributeName        NVARCHAR(MAX),
              AttributeTypeName    VARCHAR(300)
             );
             DECLARE @TBL_AttributeDefault TABLE
             (PimAttributeId            INT,
              AttributeDefaultValueCode VARCHAR(100),
              IsEditable                BIT,
              AttributeDefaultValue     NVARCHAR(MAX)
			  ,DisplayOrder   INT
             );
             DECLARE @TBL_AttributeValue TABLE
             (PimCategoryAttributeValueId INT,
              PimCategoryId               INT,
              CategoryValue               NVARCHAR(MAX),
              AttributeCode               VARCHAR(300),
              PimAttributeId              INT
             );
             DECLARE @TBL_LocaleIds TABLE
             (RowId     INT IDENTITY(1, 1),
              LocaleId  INT,
              IsDefault BIT
             );
             DECLARE @TBL_PimCategoryIds TABLE
             (PimCategoryId       INT,
              PimParentCategoryId INT,
              DisplayOrder        INT,
              ActivationDate      DATETIME,
              ExpirationDate      DATETIME,
              CategoryName        NVARCHAR(MAX),
              ProfileId           VARCHAR(MAX),
              IsActive            BIT,
			  PimCategoryHierarchyId INT,
			  ParentPimCategoryHierarchyId INT ,
			   CategoryCode  NVARCHAR(MAX)             );


             DECLARE @TBL_PublishPimCategoryIds TABLE
             (PublishCategoryId       INT,
              PimCategoryId           INT,
              PublishProductId        varchar(max),
              PublishParentCategoryId INT ,
			  PimCategoryHierarchyId INT ,parentPimCategoryHierarchyId INT,
			  RowIndex INT
             );
             DECLARE @TBL_DeletedPublishCategoryIds TABLE
             (PublishCategoryId INT,
              PublishProductId  INT
             );
             DECLARE @TBL_CategoryXml TABLE
             (PublishCategoryId INT,
              CategoryXml       XML,
              LocaleId          INT
             );
             INSERT INTO @TBL_LocaleIds
             (LocaleId,
              IsDefault
             )
			  -- here collect all locale ids
             SELECT LocaleId,IsDefault FROM ZnodeLocale MT WHERE IsActive = @IsActive
			  AND (EXISTS (SELECT TOP 1 1  FROM @LocaleId RT WHERE RT.Id = MT.LocaleId )
			 OR NOT EXISTS (SELECT TOP 1 1 FROM @LocaleId ));

             INSERT INTO @TBL_PimCategoryIds(PimCategoryId,PimParentCategoryId,DisplayOrder,ActivationDate,ExpirationDate,IsActive,PimCategoryHierarchyId,ParentPimCategoryHierarchyId)
             SELECT DISTINCT ZPCH.PimCategoryId,ZPCH2.PimCategoryId  PimParentCategoryId,ZPCH.DisplayOrder,ZPCH.ActivationDate,ZPCH.ExpirationDate,ZPCH.IsActive ,ZPCH.PimCategoryHierarchyId,ZPCH.ParentPimCategoryHierarchyId
			 FROM ZnodePimCategoryHierarchy AS ZPCH 
			 LEFT JOIN ZnodePimCategoryHierarchy AS ZPCH2 ON (ZPCH2.PimCategoryHierarchyId = ZPCH. ParentPimCategoryHierarchyId ) 
			 WHERE ZPCH.PimCatalogId = @PimCatalogId; 
             -- AND IsActive = @IsActive ; -- As discussed with @anup active flag maintain on demo site 23/12/2016
			 --	SELECT * FROM @TBL_PimCategoryIds
			 -- here is find the deleted publish category id on basis of publish catalog
             INSERT INTO @TBL_DeletedPublishCategoryIds(PublishCategoryId,PublishProductId)
             SELECT ZPC.PublishCategoryId,ZPCP.PublishProductId 
			 FROM ZnodePublishCategoryProduct ZPCP
             INNER JOIN ZnodePublishCategory AS ZPC ON(ZPCP.PublishCategoryId = ZPC.PublishCategoryId AND ZPCP.PublishCatalogId = ZPC.PublishCatalogId)                                                  
             INNER JOIN ZnodePublishProduct ZPP ON(zpp.PublishProductId = zpcp.PublishProductId AND zpp.PublishCatalogId = zpcp.PublishCatalogId)
             INNER JOIN ZnodePublishCatalog ZPCC ON(ZPCC.PublishCatalogId = ZPCP.PublishCatalogId)
             WHERE ZPC.PublishCatalogId = @PublishCataLogId 
			 AND NOT EXISTS(SELECT TOP 1 1 FROM ZnodePimCatalogCategory AS TBPC WHERE TBPC.PimCategoryId = ZPC.PimCategoryId AND TBPC.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId
			 AND TBPC.PimProductId = ZPP.PimProductId AND TBPC.PimCatalogId = ZPCC.PimCatalogId);

			 -- here is find the deleted publish category id on basis of publish catalog
             SET @DeletedPublishCategoryIds = ISNULL(SUBSTRING((SELECT ','+CAST(PublishCategoryId AS VARCHAR(50)) FROM @TBL_DeletedPublishCategoryIds AS ZPC
                                              GROUP BY ZPC.PublishCategoryId FOR XML PATH('') ), 2, 4000), '');
			 -- here is find the deleted publish category id on basis of publish catalog
             SET @DeletedPublishProductIds = '';
			 -- Delete the publish category id 
	
             EXEC Znode_DeletePublishCatalog @PublishCatalogIds = @PublishCatalogId,@PublishCategoryIds = @DeletedPublishCategoryIds,@PublishProductIds = @DeletedPublishProductIds; 
			
             MERGE INTO ZnodePublishCategory TARGET USING  @TBL_PimCategoryIds SOURCE ON
			 (
			 TARGET.PimCategoryId = SOURCE.PimCategoryId 
			 AND TARGET.PublishCatalogId = @PublishCataLogId 
			 AND TARGET.PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId
			 )
			 WHEN MATCHED THEN UPDATE SET TARGET.PimParentCategoryId = SOURCE.PimParentCategoryId,TARGET.CreatedBy = @UserId,TARGET.CreatedDate = @GetDate,
             TARGET.ModifiedBy = @UserId,TARGET.ModifiedDate = @GetDate,PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId,ParentPimCategoryHierarchyId=SOURCE.ParentPimCategoryHierarchyId
             WHEN NOT MATCHED THEN INSERT(PimCategoryId,PublishCatalogId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PimCategoryHierarchyId,ParentPimCategoryHierarchyId) 
			 VALUES(SOURCE.PimCategoryId,@PublishCatalogId,@UserId,@GetDate,@UserId,@GetDate,SOURCE.PimCategoryHierarchyId,SOURCE.ParentPimCategoryHierarchyId)
             OUTPUT INSERTED.PublishCategoryId,INSERTED.PimCategoryId,INSERTED.PimCategoryHierarchyId,INSERTED.parentPimCategoryHierarchyId INTO @TBL_PublishPimCategoryIds(PublishCategoryId,PimCategoryId,PimCategoryHierarchyId,parentPimCategoryHierarchyId);
			
    --         UPDATE TBPC SET PublishParentCategoryId = TBPCS.PublishCategoryId 
			 --FROM @TBL_PublishPimCategoryIds TBPC
    --         INNER JOIN @TBL_PimCategoryIds TBC ON(TBC.PimCategoryId = TBPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId)
    --         INNER JOIN @TBL_PublishPimCategoryIds TBPCS ON(TBC.PimCategoryHierarchyId = TBPCS.parentPimCategoryHierarchyId  ) 
			 --WHERE TBC.parentPimCategoryHierarchyId IS NOT NULL;
           
		     -- here update the publish parent category id
             UPDATE ZPC SET [PimParentCategoryId] =TBPC.[PimCategoryId] 
			 FROM ZnodePublishCategory ZPC
             INNER JOIN ZnodePublishCategory TBPC ON(ZPC.parentPimCategoryHierarchyId = TBPC.PimCategoryHierarchyId  ) 
			 WHERE ZPC.PublishCatalogId =@PublishCatalogId
			 AND ZPC.ParentPimCategoryHierarchyId IS NOT NULL
			 AND TBPC.PublishCatalogId =@PublishCatalogId
			 ;
			 UPDATE a
			 SET  a.PublishParentCategoryId = b.PublishCategoryId
			FROM ZnodePublishCategory a 
			INNER JOIN ZnodePublishCategory b   ON (a.parentpimCategoryHierarchyId = b.pimCategoryHierarchyId)
			WHERE a.parentpimCategoryHierarchyId IS NOT NULL 
			AND a.PublishCatalogId =@PublishCatalogId
			AND b.PublishCatalogId =@PublishCatalogId

			 --UPDATE ZPC SET [PimParentCategoryId] = TBPC.[PimCategoryId] 
			 --FROM ZnodePublishCategory ZPC
    --         INNER JOIN ZnodePublishCategory TBPC ON(ZPC.parentPimCategoryHierarchyId = TBPC.PimCategoryHierarchyId  ) 
			 --WHERE ZPC.PublishCatalogId =@PublishCatalogId
			 --AND ZPC.ParentPimCategoryHierarchyId IS NOT NULL ;

			 -- product are published here 
            --  EXEC Znode_GetPublishProducts @PublishCatalogId,0,@UserId,1,0,0;

             SET @MaxId =(SELECT MAX(RowId)FROM @TBL_LocaleIds);
			 DECLARE @TransferID TRANSFERID 
			 INSERT INTO @TransferID 
			 SELECT DISTINCT  PimCategoryId
			 FROM @TBL_PublishPimCategoryIds 

             SET @PimCategoryIds = SUBSTRING((SELECT ','+CAST(PimCategoryId AS VARCHAR(50)) FROM @TBL_PublishPimCategoryIds FOR XML PATH('')), 2, 4000);
			 
             WHILE @Counter <= @MaxId -- Loop on Locale id 
                 BEGIN
                     SET @LocaleIdIn =(SELECT LocaleId FROM @TBL_LocaleIds WHERE RowId = @Counter);
                   
				     SET @AttributeIds = SUBSTRING((SELECT ','+CAST(ZPCAV.PimAttributeId AS VARCHAR(50)) FROM ZnodePimCategoryAttributeValue ZPCAV 
										 WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimCategoryIds TBPC WHERE TBPC.PimCategoryId = ZPCAV.PimCategoryId) GROUP BY ZPCAV.PimAttributeId FOR XML PATH('')), 2, 4000);
                
				     SET @CategoryIdCount =(SELECT COUNT(1) FROM @TBL_PimCategoryIds);

                     INSERT INTO @TBL_AttributeIds (PimAttributeId,ParentPimAttributeId,AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable,IsSystemDefined,
					 IsConfigurable,IsPersonalizable,DisplayOrder,HelpDescription,IsCategory,IsHidden,CreatedDate,ModifiedDate,AttributeName,AttributeTypeName)
                     EXEC [Znode_GetPimAttributesDetails] @AttributeIds,@LocaleIdIn;

                     INSERT INTO @TBL_AttributeDefault (PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder)
                     EXEC [dbo].[Znode_GetAttributeDefaultValueLocale] @AttributeIds,@LocaleIdIn;

                     INSERT INTO @TBL_AttributeValue (PimCategoryAttributeValueId,PimCategoryId,CategoryValue,AttributeCode,PimAttributeId)
                     EXEC [dbo].[Znode_GetCategoryAttributeValueId] @TransferID,@AttributeIds,@LocaleIdIn;

					-- SELECT * FROM @TBL_AttributeValue WHERE PimCategoryId = 281


                     ;WITH Cte_UpdateDefaultAttributeValue
                     AS (
					  SELECT TBAV.PimCategoryId,TBAV.PimAttributeId,SUBSTRING((SELECT ','+AttributeDefaultValue FROM @TBL_AttributeDefault TBD WHERE TBAV.PimAttributeId = TBD.PimAttributeId
						AND EXISTS(SELECT TOP 1 1 FROM Split(TBAV.CategoryValue, ',') SP WHERE SP.Item = TBD.AttributeDefaultValueCode)FOR XML PATH('')), 2, 4000) DefaultCategoryAttributeValue
						FROM @TBL_AttributeValue TBAV WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_AttributeDefault TBAD WHERE TBAD.PimAttributeId = TBAV.PimAttributeId))
					 
					 -- update the default value with locale 
                     UPDATE TBAV SET CategoryValue = CTUDFAV.DefaultCategoryAttributeValue FROM @TBL_AttributeValue TBAV 
					 INNER JOIN Cte_UpdateDefaultAttributeValue CTUDFAV ON(CTUDFAV.PimCategoryId = TBAV.PimCategoryId AND CTUDFAV.PimAttributeId = TBAV.PimAttributeId)
					 WHERE CategoryValue IS NULL ;
					 
					 -- here is update the media path  
                     WITH Cte_productMedia
                     AS (SELECT TBA.PimCategoryId,TBA.PimAttributeId,[dbo].[FN_GetThumbnailMediaPathPublish](SUBSTRING((SELECT ','+zm.PATH FROM ZnodeMedia ZM WHERE EXISTS
					    (SELECT TOP 1 1 FROM dbo.split(TBA.CategoryValue, ',') SP WHERE SP.Item = CAST(Zm.MediaId AS VARCHAR(50)))FOR XML PATH('')), 2, 4000)) CategoryValue
						FROM @TBL_AttributeValue TBA WHERE EXISTS(SELECT TOP 1 1 FROM [dbo].[Fn_GetProductMediaAttributeId]() FNMA WHERE FNMA.PImAttributeId = TBA.PimATtributeId))
                         
					 UPDATE TBAV SET CategoryValue = CTCM.CategoryValue 
					 FROM @TBL_AttributeValue TBAV 
					 INNER JOIN Cte_productMedia CTCM ON(CTCM.PimCategoryId = TBAV.PimCategoryId
					 AND CTCM.PimAttributeId = TBAV.PimAttributeId);

                     WITH Cte_PublishProductIds
					 AS (SELECT TBPC.PublishcategoryId,SUBSTRING((SELECT ','+CAST(PublishProductId AS VARCHAR(50))
					  FROM ZnodePublishCategoryProduct ZPCP 
					  WHERE ZPCP.PublishCategoryId = TBPC.publishCategoryId
					  AND ZPCP.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId
                      AND ZPCP.PublishCatalogId = @PublishCatalogId FOR XML PATH('')), 2, 8000) PublishProductId ,PimCategoryHierarchyId
					  FROM @TBL_PublishPimCategoryIds TBPC)
                          
					 UPDATE TBPPC SET PublishProductId = CTPP.PublishProductId FROM @TBL_PublishPimCategoryIds TBPPC INNER JOIN Cte_PublishProductIds CTPP ON(TBPPC.PublishCategoryId = CTPP.PublishCategoryId 
					 AND TBPPC.PimCategoryHierarchyId = CTPP.PimCategoryHierarchyId);

                     WITH Cte_CategoryProfile
                     AS (SELECT PimCategoryId,ZPCC.PimCategoryHierarchyId,SUBSTRING(( SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
					 FROM ZnodeProfileCatalog ZPC 
					 INNER JOIN ZnodeProfileCategoryHierarchy ZPRCC ON(ZPRCC.PimCategoryHierarchyId = ZPCC.PimCategoryHierarchyId
                        AND ZPRCC.ProfileCatalogId = ZPC.ProfileCatalogId) 
						WHERE ZPC.PimCatalogId = ZPCC.PimCatalogId FOR XML PATH('')), 2, 4000) ProfileIds
                      
					   FROM ZnodePimCategoryHierarchy ZPCC 
					   WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimCategoryIds TBPC 
					   WHERE TBPC.PimCategoryId = ZPCC.PimCategoryId AND ZPCC.PimCatalogId = @PimCatalogId 
					   AND ZPCC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId))
                          
				     UPDATE TBPC SET TBPC.ProfileId = CTCP.ProfileIds FROM @TBL_PimCategoryIds TBPC 
					 LEFT JOIN Cte_CategoryProfile CTCP ON(CTCP.PimCategoryId = TBPC.PimCategoryId AND CTCP.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId );
                     
					 UPDATE TBPC SET TBPC.CategoryName = TBAV.CategoryValue FROM @TBL_PimCategoryIds TBPC INNER JOIN @TBL_AttributeValue TBAV ON(TBAV.PimCategoryId = TBPC.PimCategoryId
                     AND EXISTS(SELECT TOP 1 1 FROM [dbo].[Fn_GetCategoryNameAttribute]() FNGCNA WHERE FNGCNA.PimAttributeId = TBAV.PimAttributeId));


					  UPDATE TBPC SET TBPC.CategoryCode = TBAV.CategoryValue FROM @TBL_PimCategoryIds TBPC INNER JOIN @TBL_AttributeValue TBAV ON(TBAV.PimCategoryId = TBPC.PimCategoryId
					 AND EXISTS(SELECT TOP 1 1 FROM dbo.Fn_GetCategoryCodeAttribute() FNGCNA WHERE FNGCNA.PimAttributeId = TBAV.PimAttributeId)
					 )


					-- SELECT * FROM @TBL_AttributeValue WHERE pimCategoryId = 369

					DECLARE @UpdateCategoryLog  TABLE (PublishCatalogLogId INT , LocaleId INT ,PublishCatalogId INT  )
					INSERT INTO @UpdateCategoryLog
					SELECT MAX(PublishCatalogLogId) PublishCatalogLogId , LocaleId , PublishCatalogId 
					FROM ZnodePublishCatalogLog a 
					WHERE a.PublishCatalogId =@PublishCatalogId
					AND  a.LocaleId = @LocaleIdIn 
					GROUP BY 	LocaleId,PublishCatalogId 



					 -- here update the publish category details 
                     ;WITH Cte_UpdateCategoryDetails
                     AS (
					 SELECT TBC.PimCategoryId,PublishCategoryId,CategoryName, TBPPC.PimCategoryHierarchyId,CategoryCode
					 FROM @TBL_PimCategoryIds TBC
                     INNER JOIN @TBL_PublishPimCategoryIds TBPPC ON(TBC.PimCategoryId = TBPPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPPC.PimCategoryHierarchyId)
					 )						
                     MERGE INTO ZnodePublishCategoryDetail TARGET USING Cte_UpdateCategoryDetails SOURCE ON(TARGET.PublishCategoryId = SOURCE.PublishCategoryId
					 AND TARGET.LocaleId = @LocaleIdIn)
                     WHEN MATCHED THEN UPDATE SET PublishCategoryId = SOURCE.PublishcategoryId,PublishCategoryName = SOURCE.CategoryName,LocaleId = @LocaleIdIn,ModifiedBy = @userId,ModifiedDate = @GetDate,CategoryCode=SOURCE.CategoryCode
                     WHEN NOT MATCHED THEN INSERT(PublishCategoryId,PublishCategoryName,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,CategoryCode) VALUES
                     (SOURCE.PublishCategoryId,SOURCE.CategoryName,@LocaleIdIn,@userId,@GetDate,@userId,@GetDate,SOURCE.CategoryCode);

					 IF OBJECT_ID('tempdb..#Index') is not null
					BEGIN 
						DROP TABLE #Index
					END 
					CREATE TABLE #Index (RowIndex int ,PimCategoryId int , PimCategoryHierarchyId  int,ParentPimCategoryHierarchyId int )		
					insert into  #Index ( RowIndex ,PimCategoryId , PimCategoryHierarchyId,ParentPimCategoryHierarchyId)
					SELECT CAST(Row_number() OVER (Partition By TBL.PimCategoryId Order by ISNULL(TBL.PimCategoryId,0) desc) AS VARCHAR(100))
					,ZPC.PimCategoryId, ZPC.PimCategoryHierarchyId, ZPC.ParentPimCategoryHierarchyId
					FROM @TBL_PublishPimCategoryIds TBL
					INNER JOIN ZnodePublishCategory ZPC ON (TBL.PimCategoryId = ZPC.PimCategoryId AND TBL.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId)
					WHERE ZPC.PublishCatalogId = @PublishCatalogId

					UPDATE TBP SET  TBP.[RowIndex]=  IDX.RowIndex 
					FROM @TBL_PublishPimCategoryIds TBP INNER JOIN #Index IDX ON (IDX.PimCategoryId = TBP.PimCategoryId AND IDX.PimCategoryHierarchyId = TBP.PimCategoryHierarchyId)  

                     ;WITH Cte_CategoryXML
                     AS (SELECT PublishcategoryId,PimCategoryId,(SELECT ISNULL(TYU.PublishCatalogLogId,'') VersionId,TBPC.PublishCategoryId ZnodeCategoryId,@PublishCatalogId ZnodeCatalogId
																		,THR.PublishParentCategoryId TempZnodeParentCategoryIds,ZPC.CatalogName ,
																		 ISNULL(DisplayOrder, '0') DisplayOrder,@LocaleIdIn LocaleId,ActivationDate 
																		 ,ExpirationDate,TBC.IsActive,ISNULL(CategoryName, '') Name,ProfileId TempProfileIds,ISNULL(TBPC.PublishProductId, '') TempProductIds
																		 ,ISNULL(TBPC.RowIndex,1) CategoryIndex
																		 ,ISNULL(CategoryCode,'') CategoryCode
                        FROM @TBL_PublishPimCategoryIds TBPC 
						INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId= @PublishCatalogId)
						LEFT JOIN @UpdateCategoryLog TYU ON (TYU.PublishCatalogId = @PublishCatalogId AND TYU.LocaleId = @LocaleIdIn)
						INNER JOIN ZnodePublishCAtegory THR ON (THR.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId AND THR.PimCategoryId = TBPC.PimCategoryId AND THR.PublishCatalogId= @PublishCatalogId )
						INNER JOIN @TBL_PimCategoryIds TBC ON(TBC.PimCategoryId = TBPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId) WHERE TBPC.PublishCategoryId = TBPCO.PublishCategoryId 
						FOR XML PATH('')) CategoryXml 
						FROM @TBL_PublishPimCategoryIds TBPCO),

                     Cte_CategoryAttributeXml
                     AS (SELECT CTCX.PublishCategoryId,'<CategoryEntity>'+ISNULL(CategoryXml, '')+ISNULL((SELECT(SELECT TBA.AttributeCode,TBA.AttributeName,ISNULL(IsUseInSearch, 0) IsUseInSearch,
                        ISNULL(IsHtmlTags, 0) IsHtmlTags,ISNULL(IsComparable, 0) IsComparable,(SELECT ''+TBAV.CategoryValue FOR XML PATH('')) AttributeValues,TBA.AttributeTypeName FROM @TBL_AttributeValue TBAV
                        INNER JOIN @TBL_AttributeIds TBA ON(TBAV.PimAttributeId = TBA.PimAttributeId) LEFT JOIN ZnodePimFrontendProperties ZPFP ON(ZPFP.PimAttributeId = TBA.PimAttributeId)
                        WHERE CTCX.PimCategoryId = TBAV.PimCategoryId AND TBAO.PimAttributeId = TBA.PimAttributeId FOR XML PATH('AttributeEntity'), TYPE) FROM @TBL_AttributeIds TBAO
                        FOR XML PATH('Attributes')), '')+'</CategoryEntity>' CategoryXMl FROM Cte_CategoryXML CTCX)

                     INSERT INTO @TBL_CategoryXml(PublishCategoryId,CategoryXml,LocaleId)
                     SELECT PublishCategoryId,CategoryXml,@LocaleIdIn LocaleId FROM Cte_CategoryAttributeXml;
                   
				     DELETE FROM @TBL_AttributeIds;
                     DELETE FROM @TBL_AttributeDefault;
                     DELETE FROM @TBL_AttributeValue;
                     SET @Counter = @Counter + 1;
                 END;

    --         UPDATE ZnodePublishCatalogLog SET PublishCategoryId = SUBSTRING((SELECT ','+CAST(PublishCategoryId AS VARCHAR(50)) FROM @TBL_CategoryXml
			 --GROUP BY PublishCategoryId																				
    --         FOR XML PATH('')), 2, 4000), IsCategoryPublished = 1 WHERE PublishCatalogLogId = @VersionId;

			 UPDATE ZnodePublishCatalogLog 
			 SET PublishCategoryId = (SELECT COunt(PublishCategoryId ) FROM ZnodePublishCategory WHERE PublishCatalogId =@PublishCatalogId), IsCategoryPublished = 1 
			 WHERE EXISTS (SELECT TOP 1 1 FROM @UpdateCategoryLog TY WHERE TY.PublishCatalogLogId =  ZnodePublishCatalogLog.PublishCatalogLogId ) ;


             DELETE FROM ZnodePublishedXml WHERE PublishCataloglogId = @VersionId;
            
             INSERT INTO ZnodePublishedXml (PublishCatalogLogId,PublishedId,PublishedXML,IsCategoryXML,IsProductXML,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             SELECT @VersionId PublishCataloglogId,PublishCategoryId,CategoryXml,1,0,LocaleId,@UserId,@GetDate,@UserId,@GetDate FROM @TBL_CategoryXml WHERE @VersionId <> 0;
             
			 SELECT CategoryXml  
			 FROM @TBL_CategoryXml 
			 

			 --UPDATE ZnodePimCategory 
			 --SET IsCategoryPublish =1 
			 --WHERE pimCategoryId IN (SELECT PimCategoryId FROM @TBL_PimCategoryIds)

			 UPDATE ZnodePimCategory 
			 SET PublishStateId = Dbo.Fn_GetPublishStateIdForPreview()
			 WHERE pimCategoryId IN (SELECT PimCategoryId FROM @TBL_CategoryXml)

              
             COMMIT TRAN GetPublishCategory;
			 
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE();
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPublishCategory @PublishCatalogId = '+CAST(@PublishCatalogId AS VARCHAR(50))+',@UserId ='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(50));
             SET @Status = 0;
             ROLLBACK TRAN GetPublishCategory;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_GetPublishCategory',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;

	 GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishProductbulk')
BEGIN 
	DROP PROCEDURE Znode_GetPublishProductbulk
END
GO

CREATE PROCEDURE [dbo].[Znode_GetPublishProductbulk]
(
@PublishCatalogId INT = 0 
,@VersionId       VARCHAR(50) = 0 
,@PimProductId    TransferId Readonly
,@UserId		  INT = 0 
,@PimCategoryHierarchyId  INT = 0 
,@PimCatalogId INT = 0 
,@LocaleIds TransferId READONLY
,@PublishStateId INT = 0 
)
With RECOMPILE
AS
-- EXEC Znode_GetPublishProductbulk @PublishCatalogId=6, @VersionId=0 ,@UserId= 2 
BEGIN 
  
 SET NOCOUNT ON 

EXEC Znode_InsertUpdatePimAttributeXML 1 
EXEC Znode_InsertUpdateCustomeFieldXML 1
EXEC Znode_InsertUpdateAttributeDefaultValue 1 


   IF OBJECT_ID('tempdb..#PimProductAttributeXML') is not null
   BEGIN 
	 DROP TABLE #PimProductAttributeXML
   END
   IF OBJECT_ID('tempdb..#PimDefaultValueLocale') is not null
   BEGIN 
    DROP TABLE #PimDefaultValueLocale
   END
   IF OBJECT_ID('tempdb..#TBL_CategoryCategoryHierarchyIds') is not null
   BEGIN 
    DROP TABLE #TBL_CategoryCategoryHierarchyIds
   END

   DECLARE @PimMediaAttributeId INT = dbo.Fn_GetProductImageAttributeId()
   
   CREATE TABLE #PimProductAttributeXML (PimAttributeXMLId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )
  	
   CREATE TABLE #TBL_CategoryCategoryHierarchyIds  (CategoryId int , ParentCategoryId int ) 
	
   If (@PimCategoryHierarchyId <> 0 AND @PimCatalogId <> 0 )
		INSERT INTO #TBL_CategoryCategoryHierarchyIds(CategoryId , ParentCategoryId )
			Select Distinct PimCategoryId , Null FROM (
				SELECT PimCategoryId,ParentPimCategoryId from DBO.[Fn_GetRecurciveCategoryIds](@PimCategoryHierarchyId,@PimCatalogId)
				Union 
				Select PimCategoryId , null  from ZnodePimCategoryHierarchy where PimCategoryHierarchyId = @PimCategoryHierarchyId 
				Union 
				Select PimCategoryId , null  from [Fn_GetRecurciveCategoryIds_new] (@PimCategoryHierarchyId,@PimCatalogId) ) Category  


   CREATE TABLE #PimDefaultValueLocale  (PimAttributeDefaultXMLId INT  PRIMARY KEY ,PimAttributeDefaultValueId INT ,LocaleId INT ) 
   DECLARE @ProductNamePimAttributeId INT = dbo.Fn_GetProductNameAttributeId(),@DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId(),@LocaleId INT = 0 
		,@SkuPimAttributeId  INT =  dbo.Fn_GetProductSKUAttributeId() , @IsActivePimAttributeId INT =  dbo.Fn_GetProductIsActiveAttributeId()
   DECLARE @GetDate DATETIME =dbo.Fn_GetDate()
   DECLARE @TBL_LocaleId  TABLE (RowId INT IDENTITY(1,1) PRIMARY KEY  , LocaleId INT )
			
			INSERT INTO @TBL_LocaleId (LocaleId)
			SELECT  LocaleId
			FROM ZnodeLocale MT 
			WHERE IsActive = 1
			AND (EXISTS (SELECT TOP 1 1  FROM @LocaleIds RT WHERE RT.Id = MT.LocaleId )
			OR NOT EXISTS (SELECT TOP 1 1 FROM @LocaleIds )) 

  DECLARE @Counter INT =1 ,@maxCountId INT = (SELECT max(RowId) FROM @TBL_LocaleId ) 
 

 CREATE TABLE #TBL_PublishCatalogId (PublishCatalogId INT,PublishProductId INT,PimProductId  INT   , VersionId INT, PublishCategoryId int ,LocaleId INT )

 CREATE INDEX idx_#TBL_PublishCatalogIdPimProductId on #TBL_PublishCatalogId(PimProductId)

  CREATE INDEX idx_#TBL_PublishCatalogIdPimPublishCatalogId on #TBL_PublishCatalogId(PublishCatalogId)

  If (@PimCategoryHierarchyId <> 0 AND @PimCatalogId <> 0 )
  BEGIN
			 INSERT INTO #TBL_PublishCatalogId(PublishCatalogId ,PublishProductId ,PimProductId  , VersionId ,PublishCategoryId ,LocaleId)  
			 SELECT distinct ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,MAX(ZPCP.PublishCataloglogId ) VersionId ,ZPC.PublishCategoryId,ZPCP.LocaleId
				 FROM ZnodePublishProduct ZPP INNER JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
				 INNER JOIN ZnodePublishCategoryProduct ZPPP ON ZPP.PublishProductId  = ZPPP.PublishProductId  
				 AND ZPCP.PublishCatalogId = ZPPP.PublishCatalogId
				 INNER JOIN ZnodePublishCategory ZPC ON ZPC.PublishCatalogId = ZPPP.PublishCatalogId AND ZPPP.PublishCategoryId = ZPC.PublishCategoryId 
				 WHERE ZPP.PublishCatalogId = @PublishCatalogId  and ZPCP.PublishStateId =  @PublishStateId
				 AND 
				 ZPC.PimCategoryId in (Select CategoryId from #TBL_CategoryCategoryHierarchyIds )
				 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId ,ZPC.PublishCategoryId,ZPCP.LocaleId	

			INSERT INTO #TBL_PublishCatalogId(PublishCatalogId ,PublishProductId ,PimProductId  , VersionId ,PublishCategoryId ,LocaleId)
			SELECT DISTINCT ZPP.PublishCatalogId,ZPP.PublishProductId,PimProductId,MAX(ZPCP.PublishCatalogLogId) VersionId,NULL, ZPCP.LocaleId
				 FROM ZnodePublishProduct ZPP 
				 INNER JOIN ZnodePublishCatalogLog ZPCP ON 
				 (ZPCP.PublishCatalogId = ZPP.PublishCatalogId) 
				 WHERE				 (EXISTS (SELECT TOP 1 1 FROM @pimProductId SP WHERE SP.Id = ZPP.PimProductId ))
				 AND (ZPP.PublishCatalogId = @publishCatalogId )
				 AND NOT Exists (Select TOP 1 1 from #TBL_PublishCatalogId TPL where TPL.PublishProductId = ZPP.PublishProductId)
				 AND ZPCP.PublishStateId =  @PublishStateId
			GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId , ZPCP.LocaleId



  END
  ELSE 
  BEGIN
			INSERT INTO #TBL_PublishCatalogId(PublishCatalogId ,PublishProductId,PimProductId ,VersionId,LocaleId  ) 
			 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,  
											MAX(PublishCatalogLogId) ,ZPCP.LocaleId
				 FROM ZnodePublishProduct ZPP 
				 INNER JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
				 WHERE (EXISTS (SELECT TOP 1 1 FROM @PimProductId SP 
				 WHERE SP.Id = ZPP.PimProductId  AND  (@PublishCatalogId IS NULL OR @PublishCatalogId = 0 ))
				 OR  (ZPP.PublishCatalogId = @PublishCatalogId ))
				 --AND  ZPCP.PublishStateId =  @PublishStateId
				 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId ,ZPCP.LocaleId
  END
           
		     DECLARE   @TBL_ZnodeTempPublish TABLE (PimProductId INT , AttributeCode VARCHAR(300) ,AttributeValue NVARCHAR(max) ) 			
			 DECLARE @TBL_AttributeVAlueLocale TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT,LocaleId INT 
			 )

		
WHILE @Counter <= @maxCountId
BEGIN
 
 SET @LocaleId = (SELECT TOP 1 LocaleId FROM @TBL_LocaleId MT 
  WHERE  RowId = @Counter)
 
  INSERT INTO #PimProductAttributeXML 
  SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeXML
  WHERE LocaleId = @LocaleId
  
  IF( @LocaleId <> @DefaultLocaleId )
  BEGIN
	INSERT INTO #PimProductAttributeXML 
	SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
	FROM ZnodePimAttributeXML ZPAX
	WHERE ZPAX.LocaleId = @DefaultLocaleId  
	AND NOT EXISTS (SELECT TOP 1 1 FROM #PimProductAttributeXML ZPAXI WHERE ZPAXI.PimAttributeId = ZPAX.PimAttributeId )
  END

  INSERT INTO #PimDefaultValueLocale
  SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultXML
  WHERE localeId = @LocaleId

  IF( @LocaleId <> @DefaultLocaleId )
  BEGIN
	INSERT INTO #PimDefaultValueLocale 
	SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
	FROM ZnodePimAttributeDefaultXML ZX
	WHERE localeId = @DefaultLocaleId
	AND NOT EXISTS (SELECT TOP 1 1 FROM #PimDefaultValueLocale TRTR WHERE TRTR.PimAttributeDefaultValueId = ZX.PimAttributeDefaultValueId)
  END
  	 
  CREATE TABLE #TBL_CustomeFiled  (PimCustomeFieldXMLId INT ,CustomCode VARCHAR(300),PimProductId INT ,LocaleId INT )

  INSERT INTO #TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,RTR.PimProductId ,RTR.LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML RTR 
  INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = RTR.PimProductId AND RTR.LocaleID = ZPP.LocaleId)
  WHERE RTR.LocaleId = @LocaleId
 
 
  INSERT INTO #TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,ITR.PimProductId ,ITR.LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML ITR
  INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ITR.PimProductId AND ITR.LocaleID = ZPP.LocaleId)
  WHERE ITR.LocaleId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM #TBL_CustomeFiled TBL  WHERE ITR.CustomCode = TBL.CustomCode AND ITR.PimProductId = TBL.PimProductId)
       
       
	 SELECT VIR.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId,VIR.LocaleId , VIR.AttributeValue, VIR.AttributeCode ,ROW_NUMBER() Over(Partition By VIR.PimProductId,PimAttributeId ORDER BY VIR.PimProductId,PimAttributeId  ) RowId
	 INTO #TBL_AttributeVAlue
	 FROM View_LoadManageProductInternal VIR
	 WHERE ( LocaleId = @DefaultLocaleId OR LocaleId = @LocaleId )
	 AND EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
	  UNION ALL 
	 SELECT VIR.PimProductId,VIR.PimAttributeId,ZPDE.PimProductAttributeMediaId,ZPDE.LocaleId ,ZPDE.MediaPath AS AttributeValue, d.AttributeCode ,ROW_NUMBER() Over(Partition By VIR.PimProductId,VIR.PimAttributeId ORDER BY VIR.PimProductId,VIR.PimAttributeId  ) RowId
	 FROM ZnodePimAttributeValue  VIR
	 INNER JOIN ZnodePimProductAttributeMedia ZPDE ON (ZPDE.PimAttributeValueId = VIR.PimAttributeValueId )
	 INNER JOIN ZnodePimAttribute d ON ( d.PimAttributeId=VIR.PimAttributeId )
	 WHERE ( ZPDE.LocaleId = @DefaultLocaleId OR ZPDE.LocaleId = @LocaleId )
	 AND EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
	  Union All
	 SELECT VIR.PimProductId,VIR.PimAttributeId,ZPDVL.PimAttributeDefaultValueLocaleId,ZPDVL.LocaleId ,ZPDVL.AttributeDefaultValue AS AttributeValue, d.AttributeCode ,ROW_NUMBER() Over(Partition By VIR.PimProductId,VIR.PimAttributeId ORDER BY VIR.PimProductId,VIR.PimAttributeId  ) RowId
	 FROM ZnodePimAttributeValue  VIR
	 INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1  )
	 INNER JOIN ZnodePimAttributeDefaultValue ZPADV ON ZPADV.PimAttributeId = D.PimAttributeId
	 INNER JOIN ZnodePimAttributeDefaultValueLocale ZPDVL   on (ZPADV.PimAttributeDefaultValueId = ZPDVL.PimAttributeDefaultValueId)
	 --INNER JOIN ZnodePimProductAttributeDefaultValue ZPDVP ON (ZPDVP.PimAttributeValueId = VIR.PimAttributeValueId AND ZPADV.PimAttributeDefaultValueId = ZPDVP.PimAttributeDefaultValueId )
	 WHERE ( ZPDVL.LocaleId = @DefaultLocaleId OR ZPDVL.LocaleId = @LocaleId )
	 AND EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
	 Union All 
	SELECT VIR.PimProductId,VIR.PimAttributeId,'','','',D.AttributeCode,ROW_NUMBER() Over(Partition By VIR.PimProductId,VIR.PimAttributeId ORDER BY VIR.PimProductId,VIR.PimAttributeId  ) RowId
	FROM ZnodePimAttributeValue  VIR
	INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1 )
	WHERE  EXISTS(SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )

	 
	 UPDATE #TBL_AttributeVAlue SET rowid = (SELECT MAX(rowid) FROM #TBL_AttributeVAlue b WHERE a.PimProductId=b.PimProductId AND a.PimAttributeId = b.PimAttributeId )
	 FROM #TBL_AttributeVAlue a
	
  SET @versionId = (SELECT TOP 1 VersionId FROM #TBL_PublishCatalogId) 
  

 IF OBJECT_ID('tempdb..#Cte_GetData') IS NOT NULL
 BEGIN 
 DROP TABLE #Cte_GetData
 END 

 CREATE TABLE #Cte_GetData (PimProductId INT,AttributeCode VARCHAR(600),AttributeValue NVARCHAR(max),VersionId INT)

 CREATE INDEX idx_#Cte_GetDataPimProductId ON #Cte_GetData(PimProductId)


INSERT INTO #Cte_GetData(PimProductId ,AttributeCode,AttributeValue,VersionId)
SELECT  a.PimProductId,a.AttributeCode , '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(a.AttributeValue,'')+'</AttributeValues> </AttributeEntity>  </Attributes>'  AttributeValue,VersionId
FROM #TBL_AttributeVAlue a 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = a.PimAttributeId )
INNER JOIN #PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId)
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = a.PimProductId)
WHERE a.LocaleId  = CASE WHEN a.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END
AND NOT EXISTS (SELECT TOP 1 1 FROM Fn_GetProductMediaAttributeId() TY WHERE TY.PimAttributeId = c.PimAttributeId)
 


INSERT INTO #Cte_GetData(PimProductId ,AttributeCode,AttributeValue,VersionId)
SELECT THB.PimProductId,THB.CustomCode,'<Attributes><AttributeEntity>'+CustomeFiledXML+'</AttributeEntity></Attributes>' ,VersionId
FROM ZnodePimCustomeFieldXML THB 
INNER JOIN #TBL_CustomeFiled TRTE ON (TRTE.PimCustomeFieldXMLId = THB.PimCustomeFieldXMLId)
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = THB.PimProductId)
UNION ALL 
SELECT ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues></AttributeValues>'+'<SelectValues>'+
			   STUFF((
                    SELECT '  '+ DefaultValueXML  FROM ZnodePimAttributeDefaultXML AA 
				 INNER JOIN #PimDefaultValueLocale GH ON (GH.PimAttributeDefaultXMLId = AA.PimAttributeDefaultXMLId)
				 INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId )
				 WHERE (ZPADV.PimAttributeValueId = ZPAV.PimAttributeValueId)
    FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</SelectValues> </AttributeEntity></Attributes>' AttributeValue ,VersionId
FROM ZnodePimAttributeValue ZPAV  
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
AND EXISTS (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)

---for PLP

INSERT INTO #Cte_GetData(PimProductId ,AttributeCode,AttributeValue,VersionId)
SELECT DISTINCT  UOP.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues></AttributeValues>'+'<SelectValues>'+
			   STUFF((
                    SELECT DISTINCT '  '+REPLACE(DefaultValueXML,'</SelectValuesEntity>','<VariantDisplayOrder>'+CAST(ISNULL(ZPA.DisplayOrder,0) AS VARCHAR(200))+'</VariantDisplayOrder>
					<VariantSKU>'+ISNULL(ZPAVL_SKU.AttributeValue,'')+'</VariantSKU>
					<VariantImagePath>'+ISNULL((SELECT ''+ZM.Path FOR XML Path ('')),'')+'</VariantImagePath></SelectValuesEntity>')   
				 FROM ZnodePimAttributeDefaultXML AA 
				 INNER JOIN #PimDefaultValueLocale GH ON (GH.PimAttributeDefaultXMLId = AA.PimAttributeDefaultXMLId)
				 INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId )
				 INNER JOIN ZnodePimAttributeValue ZPAV1 ON (ZPAV1.PimAttributeValueId= ZPADV.PimAttributeValueId )
				 -- check/join for active variants 
				 INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId =ZPAV1.PimProductId)
				 INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON (ZPAV.PimAttributevalueid = ZPAVL.PimAttributeValueId AND ZPAVL.AttributeValue = 'True')
				 INNER JOIN ZnodePimProductTypeAssociation YUP ON (YUP.PimProductId = ZPAV1.PimProductId)
				 -- SKU
				 INNER JOIN ZnodePimAttributeValue ZPAV_SKU ON(YUP.PimProductId = ZPAV_SKU.PimProductId)
				 INNER JOIN ZnodePimAttributeValueLocale ZPAVL_SKU ON (ZPAVL_SKU.PimAttributeValueId = ZPAV_SKU.PimAttributeValueId)
				 LEFT  JOIN ZnodePimAttributeValue ZPAV12 ON (ZPAV12.PimProductId= YUP.PimProductId  AND ZPAV12.PimAttributeId = @PimMediaAttributeId ) 
				 LEFT JOIN ZnodePimProductAttributeMedia ZPAVM ON (ZPAVM.PimAttributeValueId= ZPAV12.PimAttributeValueId ) 
				 LEFT JOIN ZnodeMedia ZM ON (ZM.MediaId = ZPAVM.MediaId)
				 LEFT JOIN ZnodePimAttribute ZPA ON (ZPA.PimattributeId = ZPAV1.PimAttributeId)
				 WHERE (YUP.PimParentProductId  = UOP.PimProductId AND ZPAV1.pimAttributeId = UOP.PimAttributeId )
				 -- Active Variants
				 AND ZPAV.PimAttributeId = (SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'IsActive')
				 -- VariantSKU
				 AND ZPAV_SKU.PimAttributeId = (SELECT PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'SKU')
FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</SelectValues> </AttributeEntity></Attributes>' AttributeValue ,VersionId
FROM ZnodePimConfigureProductAttribute UOP 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = UOP.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = UOP.PimProductId)
WHERE  EXISTS (SELECT * FROM #PimProductAttributeXML b WHERE b.PimAttributeXMLId = c.PimAttributeXMLId)


INSERT INTO #Cte_GetData(PimProductId ,AttributeCode,AttributeValue,VersionId)
SELECT DISTINCT  ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+SUBSTRING((SELECT DISTINCT  ',' +ZPPG.MediaPath FROM ZnodePimProductAttributeMedia ZPPG
     INNER JOIN #TBL_AttributeVAlue FTRE ON (FTRE.PimProductId = ZPAV.PimProductId AND FTRE.PimAttributeId = ZPAV.PimAttributeId  AND FTRE.LocaleId  = CASE WHEN FTRE.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )
	 WHERE ZPPG.PimProductAttributeMediaId = FTRE.ZnodePimAttributeValueLocaleId
	 FOR XML PATH ('')
 ),2,4000)+'</AttributeValues></AttributeEntity></Attributes>' AttributeValue ,VersionId	 
FROM ZnodePimAttributeValue ZPAV 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeMedia ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
AND EXISTS (SELECT * FROM #PimProductAttributeXML b WHERE b.PimAttributeXMLId = c.PimAttributeXMLId)

insert into #Cte_GetData(PimProductId ,AttributeCode,AttributeValue,VersionId)
SELECT ZPLP.PimParentProductId ,c.AttributeCode, '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(SUBSTRING((SELECT ','+CAST(PublishProductId AS VARCHAR(50)) 
							 FROM #TBL_PublishCatalogId ZPPI 
							 INNER JOIN ZnodePimLinkProductDetail ZPLPI ON (ZPLPI.PimProductId = ZPPI.PimProductId)
							 WHERE ZPLPI.PimParentProductId = ZPLP.PimParentProductId
							 AND ZPLPI.PimAttributeId   = ZPLP.PimAttributeId
							 FOR XML PATH ('') ),2,4000),'')+'</AttributeValues></AttributeEntity></Attributes>'   AttributeValue ,ZPP.VersionId
							
FROM ZnodePimLinkProductDetail ZPLP  
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPLP.PimParentProductId)
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPLP.PimAttributeId )
WHERE EXISTS (SELECT * FROM #PimProductAttributeXML b WHERE b.PimAttributeXMLId = c.PimAttributeXMLId)
GROUP BY ZPLP.PimParentProductId , ZPP.PublishProductId  ,ZPLP.PimAttributeId,c.AttributeCode,c.AttributeXML,ZPP.PublishCatalogId,ZPP.VersionId



SELECT a.PimProductId ,CAST((SELECT ''+dbo.FN_trim(b.AttributeValue) FOR XML PATH(''))  AS NVARCHAR(max)) AttributeValue , b.LocaleId  ,a.PimAttributeId,c.AttributeCode ,b.ZnodePimAttributeValueLocaleId
INTO #View_LoadManageProductInternal
FROM ZnodePimAttributeValue a 
INNER JOIN  ZnodePimAttributeValueLocale b ON ( b.PimAttributeValueId = a.PimAttributeValueId )
INNER JOIN ZnodePimAttribute c ON ( c.PimAttributeId=a.PimAttributeId )
WHERE c.AttributeCode = 'SKU'

INSERT INTO #Cte_GetData(PimProductId ,AttributeCode,AttributeValue,VersionId)
SELECT ZPAV.PimProductId,'DefaultSkuForConfigurable' ,'<Attributes><AttributeEntity>'+REPLACE(REPLACE (c.AttributeXML,'ProductType','DefaultSkuForConfigurable'),'Product Type','Default Sku For Configurable')+'<AttributeValues>'+
 (SELECT TOP 1 AttributeValue FROM #View_LoadManageProductInternal ad 
 INNER JOIN ZnodePimProductTypeAssociation yt ON (yt.PimProductId = ad.PimProductId)
 WHERE Ad.AttributeCode = 'SKU'
 AND yt.PimParentProductId = ZPAV.PimProductId
 ORDER BY yt.DisplayOrder , yt.PimProductTypeAssociationId ASC)
+'</AttributeValues></AttributeEntity></Attributes>' AttributeValue ,ZPP.VersionId
FROM ZnodePimAttributeValue ZPAV  
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL 
INNER JOIN ZnodePimAttributeDefaultValue dr ON (dr.PimAttributeDefaultValueId = ZPADVL.PimAttributeDefaultValueId)
 WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId
 AND dr.AttributeDefaultValueCode= 'ConfigurableProduct' 
)
AND EXISTS (SELECT * FROM #PimProductAttributeXML b WHERE b.PimAttributeXMLId = c.PimAttributeXMLId)
AND c.AttributeCode = 'ProductType' 


---------brand details 
CREATE TABLE #Cte_BrandData (PimProductId INT,BrandXML NVARCHAR(max))

INSERT INTO #Cte_BrandData ( PimProductId, BrandXML )
SELECT  DISTINCT ZBP.PimProductId,'<Brands><BrandEntity><BrandId>'+CAST(ZBD.BrandId AS VARCHAR(50))+'</BrandId><BrandCode>'+ZBD.BrandCode+'</BrandCode><BrandName>'+ZBDL.BrandName+'</BrandName></BrandEntity></Brands>' as BrandXML					   		   
FROM [ZnodeBrandDetails] AS ZBD
INNER JOIN ZnodeBrandDetaillocale ZBDL ON ZBD.BrandId = ZBDL.BrandId
INNER JOIN [ZnodeBrandProduct] AS ZBP ON ZBD.BrandId = ZBP.BrandId

--  --CREATE INDEX IND_Znode

  DELETE tu FROM ZnodePublishedXml tu  WHERE 
  EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId TY WHERE TY.VersionId = tu.PublishCatalogLogId AND Tu.PublishedId = ty.PublishProductId  )
  AND IsProductXML = 1   AND LocaleId = @LocaleId 

  
--  --ALTER INDEX ALL ON ZnodePublishedXml  REBUILD WITH (FILLFACTOR = 80 ) 
  If (@PimCategoryHierarchyId <> 0 AND @PimCatalogId <> 0 )
  BEGIN
		
		--Collect index of other categorys
		IF OBJECT_ID('tempdb..#Index') IS NOT NULL
		BEGIN 
			DROP TABLE #Index
		END 
		CREATE TABLE #Index (RowIndex int ,PublishCategoryId int , PublishProductId  int )		
		INSERT INTO  #Index ( RowIndex ,PublishCategoryId , PublishProductId )
		SELECT CAST(ROW_NUMBER()Over(Partition BY ZPC.PublishProductId 
		Order BY ISNULL(ZPC.PublishCategoryId,'0') desc )   AS VARCHAR(100)),
		ZPC.PublishCategoryId , ZPC.PublishProductId
		FROM ZnodePublishCategoryProduct ZPC where ZPC.PublishCatalogId = @PublishCatalogId
		
	

		--Publish parent products with index number 
		INSERT INTO ZnodePublishedXml (PublishCatalogLogId,PublishedId,PublishedXML,IsProductXML,LocaleId
		,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PublishCategoryId)
		SELECT zpp.VersionId,zpp.PublishProductId,'<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'+CAST(ISNULL(ZPCP.PublishCategoryId,'')  AS VARCHAR(50))+'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKU>'+'<SKULower>'+CAST(ISNULL((SELECT ''+LOWER(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
		+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +'</IsParentProducts><CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000)) +'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
		+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
						FROM ZnodeProfileCatalog ZPFC 
						INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
						WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+
						'</TempProfileIds>
						 <ProductIndex>'+ 
								--CAST(ROW_NUMBER()Over(Partition BY zpp.PublishProductId Order BY ISNULL(ZPCP.PublishCategoryId,'0') desc ) 
								CAST(Isnull((select RowIndex from #Index WHERE PublishProductId = zpp.PublishProductId
								AND PublishCategoryId = ZPCP.PublishCategoryId ) ,0)
								AS VARCHAr(100))+
						'</ProductIndex>
						<IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
		'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
		ISNULL(STUFF(( SELECT '  '+ BrandXML  FROM #Cte_BrandData BD WHERE BD.PimProductId = ZPP.PimProductId   
				FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, ''),'')+
		STUFF(( SELECT '  '+ AttributeValue  FROM #Cte_GetData TY WHERE TY.PimProductId = ZPP.PimProductId AND TY.VersionId = ZPP.VersionId   
		FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>' xmlvalue,1,@LocaleId,@UserId , @GetDate , @UserId,@GetDate
		,ZPCP.PublishCategoryId
		FROM  #TBL_PublishCatalogId zpp
		INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
		INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
		LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT JOIN ZnodePublishCategory ZPC ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId 
		AND ZPP.PublishCategoryId = ZPC.PublishCategoryId 
		)
		LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId AND  ZPCCF.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId
		)
		LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ISNULL(ZPCP.PublishCategoryId,0) AND ZPCD.LocaleId = @LocaleId )
		WHERE ZPPDFG.LocaleId = @LocaleId AND ZPP.LocaleId = @LocaleId AND  ZPC.PimCategoryId in (Select CategoryId from #TBL_CategoryCategoryHierarchyIds ) 
		and zpp.PublishCategoryId IS NOT NULL

		
	
	 --Publish only associate product 
	 INSERT INTO ZnodePublishedXml (PublishCatalogLogId,PublishedId,PublishedXML,IsProductXML,LocaleId
		,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PublishCategoryId)
		SELECT zpp.VersionId,zpp.PublishProductId,'<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'+CAST(ISNULL(ZPCP.PublishCategoryId,'')  AS VARCHAR(50))+'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKU>'+'<SKULower>'+CAST(ISNULL((SELECT ''+LOWER(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
		+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +'</IsParentProducts><CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000)) +'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
		+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
						FROM ZnodeProfileCatalog ZPFC 
						INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
						WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+
						'</TempProfileIds>
						 <ProductIndex>'+ 
								--CAST(ROW_NUMBER()Over(Partition BY zpp.PublishProductId Order BY ISNULL(ZPCP.PublishCategoryId,'0') desc ) 
								CAST(Isnull((select  RowIndex from #Index WHERE PublishProductId = zpp.PublishProductId
								AND   (PublishCategoryId = ZPCP.PublishCategoryId  OR PublishCategoryId is null ) AND PublishCategoryId = ZPP.PublishCategoryId ) ,0)
								AS VARCHAr(100))+
						'</ProductIndex>
						<IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
		'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
		STUFF(( SELECT '  '+ AttributeValue  FROM #Cte_GetData TY WHERE TY.PimProductId = ZPP.PimProductId   AND TY.VersionId= ZPP.VersionId
		FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>' xmlvalue,1,@LocaleId,@UserId , @GetDate , @UserId,@GetDate
		,ZPCP.PublishCategoryId
		FROM  #TBL_PublishCatalogId zpp
		INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
		INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
		LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT JOIN ZnodePublishCategory ZPC ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId 
		AND ZPP.PublishCategoryId = ZPC.PublishCategoryId )
		AND ZPC.PimCategoryId in (Select CategoryId from #TBL_CategoryCategoryHierarchyIds )
		LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId AND  ZPCCF.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId
		AND ZPCCF.PimCategoryId in (Select CategoryId from #TBL_CategoryCategoryHierarchyIds ))
		LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ISNULL(ZPCP.PublishCategoryId,0) AND ZPCD.LocaleId = @LocaleId )
		WHERE ZPPDFG.LocaleId = @LocaleId AND ZPP.LocaleId = @LocaleId AND zpp.PublishCategoryId IS NULL
		
  END
  ELSE
  BEGIN

      INSERT INTO ZnodePublishedXml (PublishCatalogLogId
		,PublishedId
		,PublishedXML
		,IsProductXML
		,LocaleId
		,CreatedBy
		,CreatedDate
		,ModifiedBy
		,ModifiedDate
		,PublishCategoryId)
		SELECT zpp.VersionId,zpp.PublishProductId,'<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'+CAST(ISNULL(ZPCP.PublishCategoryId,'')  AS VARCHAR(50))+'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKU>'+'<SKULower>'+CAST(ISNULL((SELECT ''+LOWER(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
		+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +'</IsParentProducts><CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000)) +'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
		+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
						FROM ZnodeProfileCatalog ZPFC 
						INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
						WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+'</TempProfileIds><ProductIndex>'+CAST(ROW_NUMBER()Over(Partition BY zpp.PublishProductId Order BY ISNULL(ZPC.PublishCategoryId,'0') ) AS VARCHAr(100))+'</ProductIndex><IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
		'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
		STUFF(( SELECT '  '+ AttributeValue  FROM #Cte_GetData TY WHERE TY.PimProductId = ZPP.PimProductId   AND TY.VersionId = ZPP.VersionId
		FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>' xmlvalue,1,@LocaleId,@UserId , @GetDate , @UserId,@GetDate
		,ZPCP.PublishCategoryId
		FROM  #TBL_PublishCatalogId zpp
		INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
		INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
		LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT JOIN ZnodePublishCategory ZPC ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId )
		LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId AND  ZPCCF.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId)
		LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ISNULL(ZPCP.PublishCategoryId,0) AND ZPCD.LocaleId = @LocaleId )
		WHERE ZPPDFG.LocaleId = @LocaleId AND ZPP.LocaleId = @LocaleId
END 
 

DELETE FROM #TBL_CustomeFiled
DELETE FROM #PimDefaultValueLocale
 IF OBJECT_ID('tempdb..#PimProductAttributeXML') is not null
 BEGIN 
 DELETE FROM #PimProductAttributeXML
 END
 IF OBJECT_ID('tempdb..#Cte_GetData') is not null
 BEGIN 
 DROP TABLE #Cte_GetData
 END
   IF OBJECT_ID('tempdb..#Cte_BrandData') is not null
 BEGIN 
 DROP TABLE #Cte_BrandData
 END
  IF OBJECT_ID('tempdb..#TBL_AttributeVAlue') is not null
 BEGIN 
 DROP TABLE #TBL_AttributeVAlue
 END
 IF OBJECT_ID('tempdb..#View_LoadManageProductInternal') is not null
 BEGIN 
 DROP TABLE #View_LoadManageProductInternal
 END
 IF OBJECT_ID('tempdb..#TBL_CustomeFiled') is not null
 BEGIN 
 DROP TABLE #TBL_CustomeFiled
 END
SET @Counter = @counter + 1 
END 

END

GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishSingleProduct')
BEGIN 
	DROP PROCEDURE Znode_GetPublishSingleProduct
END
GO

CREATE PROCEDURE [dbo].[Znode_GetPublishSingleProduct]
(
@PublishCatalogId INT = 0 
,@VersionId       VARCHAR(50) = 0 
,@PimProductId    TransferId Readonly 
,@UserId		  INT = 0 
,@TokenId nvarchar(max)= ''	
,@LocaleIds TransferId READONLY
,@PublishStateId INT = 0  
)
AS


--Declare @PimProductId TransferId 
--insert into @PimProductId  select 128 
-- EXEC [Znode_GetPublishSingleProduct]  @PublishCatalogId = 0 ,@VersionId= 0 ,@PimProductId =@PimProductId, @UserId=2 

BEGIN 
  
 SET NOCOUNT ON 

EXEC Znode_InsertUpdatePimAttributeXML 1 
EXEC Znode_InsertUpdateCustomeFieldXML 1
EXEC Znode_InsertUpdateAttributeDefaultValue 1 

 IF OBJECT_ID('tempdb..#Cte_BrandData') is not null
 BEGIN 
 DROP TABLE #Cte_BrandData
 END 

DECLARE @PimProductAttributeXML TABLE(PimAttributeXMLId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )
DECLARE @PimDefaultValueLocale  TABLE (PimAttributeDefaultXMLId INT  PRIMARY KEY ,PimAttributeDefaultValueId INT ,LocaleId INT ) 
DECLARE @ProductNamePimAttributeId INT = dbo.Fn_GetProductNameAttributeId(),@DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId(),@LocaleId INT = 0 
		,@SkuPimAttributeId  INT =  dbo.Fn_GetProductSKUAttributeId() , @IsActivePimAttributeId INT =  dbo.Fn_GetProductIsActiveAttributeId()
DECLARE @GetDate DATETIME =dbo.Fn_GetDate()
DECLARE @TBL_LocaleId  TABLE (RowId INT IDENTITY(1,1) PRIMARY KEY  , LocaleId INT )

			INSERT INTO @TBL_LocaleId (LocaleId)
			SELECT  LocaleId
			FROM ZnodeLocale MT
			WHERE IsActive = 1
			AND (EXISTS (SELECT TOP 1 1  FROM @LocaleIds RT WHERE RT.Id = MT.LocaleId )
			OR NOT EXISTS (SELECT TOP 1 1 FROM @LocaleIds )) 


DECLARE @Counter INT =1 ,@maxCountId INT = (SELECT max(RowId) FROM @TBL_LocaleId ) 

 DECLARE @TBL_PublishCatalogId TABLE(PublishCatalogId INT,PublishProductId INT,PimProductId  INT   , VersionId INT ,LocaleId INT  )

			 INSERT INTO @TBL_PublishCatalogId 
			 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId, MAX(PublishCatalogLogId) ,LocaleId
			 FROM ZnodePublishProduct ZPP 
			 INNER JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
			 WHERE (EXISTS (SELECT TOP 1 1 FROM @PimProductId SP WHERE SP.Id = ZPP.PimProductId  AND  (@PublishCatalogId IS NULL OR @PublishCatalogId = 0 ))
			 OR  (ZPP.PublishCatalogId = @PublishCatalogId ))
			 AND IsCatalogPublished =1
			 AND ZPCP.PublishStateId = @PublishStateId 
			 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,LocaleId
		
             DECLARE   @TBL_ZnodeTempPublish TABLE (PimProductId INT , AttributeCode VARCHAR(300) ,AttributeValue NVARCHAR(max) ) 			
			 DECLARE @TBL_AttributeVAlueLocale TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT,LocaleId INT ,AttributeValue Nvarchar(1000) )

			 INSERT INTO @TBL_AttributeVAlueLocale (PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId ,LocaleId ,AttributeValue )
			 SELECT VIR.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId,VIR.LocaleId, ''
			 FROM View_LoadManageProductInternal VIR
			 INNER JOIN @TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = VIR.PimProductId)
			 UNION ALL 
			 SELECT VIR.PimProductId,PimAttributeId,PimProductAttributeMediaId,ZPDE.LocaleId , ''
			 FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimProductAttributeMedia ZPDE ON (ZPDE.PimAttributeValueId = VIR.PimAttributeValueId )
			 WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
			 Union All 
			 SELECT VIR.PimProductId,VIR.PimAttributeId,ZPDVL.PimAttributeDefaultValueLocaleId,ZPDVL.LocaleId ,ZPDVL.AttributeDefaultValue
			   FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1 )
			 INNER JOIN ZnodePimAttributeDefaultValue ZPADV ON ZPADV.PimAttributeId = D.PimAttributeId
			 INNER JOIN ZnodePimAttributeDefaultValueLocale ZPDVL   on (ZPADV.PimAttributeDefaultValueId = ZPDVL.PimAttributeDefaultValueId)
			 --INNER JOIN ZnodePimProductAttributeDefaultValue ZPDVP ON (ZPDVP.PimAttributeValueId = VIR.PimAttributeValueId AND ZPADV.PimAttributeDefaultValueId = ZPDVP.PimAttributeDefaultValueId )
			 WHERE ( ZPDVL.LocaleId = @DefaultLocaleId OR ZPDVL.LocaleId = @LocaleId )
			 AND EXISTS(SELECT TOP 1 1 FROM @TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
			 Union All 
			 SELECT VIR.PimProductId,VIR.PimAttributeId,'','' ,''
			 FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1 )
			 WHERE  EXISTS(SELECT TOP 1 1 FROM @TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )



	

WHILE @Counter <= @maxCountId
BEGIN
 SET @LocaleId = (SELECT TOP 1 LocaleId FROM @TBL_LocaleId WHERE RowId = @Counter)
 
  INSERT INTO @PimProductAttributeXML 
  SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeXML
  WHERE LocaleId = @LocaleId

  INSERT INTO @PimProductAttributeXML 
  SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeXML ZPAX
  WHERE ZPAX.LocaleId = @DefaultLocaleId  
  AND NOT EXISTS (SELECT TOP 1 1 FROM @PimProductAttributeXML ZPAXI WHERE ZPAXI.PimAttributeId = ZPAX.PimAttributeId )

  INSERT INTO @PimDefaultValueLocale
  SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultXML
  WHERE localeId = @LocaleId

  INSERT INTO @PimDefaultValueLocale 
   SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultXML ZX
  WHERE localeId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM @PimDefaultValueLocale TRTR WHERE TRTR.PimAttributeDefaultValueId = ZX.PimAttributeDefaultValueId)
  
 
  DECLARE @TBL_AttributeVAlue TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT  )
  DECLARE @TBL_CustomeFiled TABLE (PimCustomeFieldXMLId INT ,CustomCode VARCHAR(300),PimProductId INT ,LocaleId INT )

  INSERT INTO @TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,RTR.PimProductId ,RTR.LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML RTR 
  INNER JOIN @TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = RTR.PimProductId)
  WHERE RTR.LocaleId = @LocaleId
 

  INSERT INTO @TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,ITR.PimProductId ,ITR.LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML ITR
  INNER JOIN @TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ITR.PimProductId)
  WHERE ITR.LocaleId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM @TBL_CustomeFiled TBL  WHERE ITR.CustomCode = TBL.CustomCode AND ITR.PimProductId = TBL.PimProductId)
  

    INSERT INTO @TBL_AttributeVAlue (PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId )
    SELECT PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId
	FROM @TBL_AttributeVAlueLocale
    WHERE LocaleId = @LocaleId

    
	INSERT INTO @TBL_AttributeVAlue(PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId )
	SELECT VI.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId
	FROM @TBL_AttributeVAlueLocale VI 
    WHERE VI.LocaleId = @DefaultLocaleId 
	AND NOT EXISTS (SELECT TOP 1 1 FROM @TBL_AttributeVAlue  CTE WHERE CTE.PimProductId = VI.PimProductId AND CTE.PimAttributeId = VI.PimAttributeId )
 
INSERT INTO @TBL_ZnodeTempPublish  
SELECT  a.PimProductId,a.AttributeCode , '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(a.AttributeValue,'')+'</AttributeValues> </AttributeEntity>  </Attributes>'  AttributeValue
FROM View_LoadManageProductInternal a 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = a.PimAttributeId )
INNER JOIN @PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
INNER JOIN @TBL_AttributeValue CTE ON (Cte.PimAttributeId = a.PimAttributeId AND Cte.ZnodePimAttributeValueLocaleId = a.ZnodePimAttributeValueLocaleId)
UNION ALL 
SELECT  a.PimProductId,c.AttributeCode , '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+TAVL.AttributeValue+'</AttributeValues> </AttributeEntity>  </Attributes>'  AttributeValue
FROM ZnodePimAttributeValue  a 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = a.PimAttributeId )
INNER JOIN @PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
INNER JOIN ZnodePImAttribute ZPA  ON (ZPA.PimAttributeId = a.PimAttributeId)
INNER JOIN @TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = a.PimProductId)
Inner JOIN @TBL_AttributeVAlueLocale TAVL ON  (c.PimAttributeId = TAVL.PimAttributeId  and ZPP.PimProductId = TAVL.PimProductId )
WHERE ZPA.IsPersonalizable = 1 
AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodePimAttributeValueLocale q WHERE q.PimAttributeValueId = a.PimAttributeValueId) 



UNION ALL 
SELECT THB.PimProductId,THB.CustomCode,'<Attributes><AttributeEntity>'+CustomeFiledXML +'</AttributeEntity></Attributes>' 
FROM ZnodePimCustomeFieldXML THB 
INNER JOIN @TBL_CustomeFiled TRTE ON (TRTE.PimCustomeFieldXMLId = THB.PimCustomeFieldXMLId)
UNION ALL 
SELECT ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues></AttributeValues>'+'<SelectValues>'+
			   STUFF((
                    SELECT '  '+ DefaultValueXML  FROM ZnodePimAttributeDefaultXML AA 
				 INNER JOIN @PimDefaultValueLocale GH ON (GH.PimAttributeDefaultXMLId = AA.PimAttributeDefaultXMLId)
				 INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId )
				 WHERE (ZPADV.PimAttributeValueId = ZPAV.PimAttributeValueId)
    FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</SelectValues> </AttributeEntity></Attributes>' AttributeValue
 
FROM ZnodePimAttributeValue ZPAV  With (NoLock)
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN @PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
INNER JOIN @TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
UNION ALL 
SELECT DISTINCT  ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+SUBSTRING((SELECT DISTINCT ',' +MediaPath 
	FROM ZnodePimProductAttributeMedia ZPPG
	INNER JOIN  @TBL_AttributeVAlue TBLV ON (TBLV.PimProductId=  ZPAV.PimProductId AND TBLV.PimAttributeId = ZPAV.PimAttributeId )
    WHERE ZPPG.PimProductAttributeMediaId = TBLV.ZnodePimAttributeValueLocaleId
	FOR XML PATH ('')
 ),2,4000)+'</AttributeValues></AttributeEntity></Attributes>' AttributeValue
 	 
FROM ZnodePimAttributeValue ZPAV 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN @PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
INNER JOIN @TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeMedia ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
UNION ALL 
SELECT ZPLP.PimParentProductId ,c.AttributeCode, '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(SUBSTRING((SELECT ','+CAST(PublishProductId AS VARCHAR(50)) 
							 FROM @TBL_PublishCatalogId ZPPI 
							 INNER JOIN ZnodePimLinkProductDetail ZPLPI ON (ZPLPI.PimProductId = ZPPI.PimProductId)
							 WHERE ZPLPI.PimParentProductId = ZPLP.PimParentProductId
							 AND ZPLPI.PimAttributeId   = ZPLP.PimAttributeId
							 FOR XML PATH ('') ),2,4000),'')+'</AttributeValues></AttributeEntity></Attributes>'   AttributeValue 
							
FROM ZnodePimLinkProductDetail ZPLP 
INNER JOIN @TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPLP.PimParentProductId)
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPLP.PimAttributeId )
INNER JOIN @PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
GROUP BY ZPLP.PimParentProductId , ZPP.PublishProductId  ,ZPLP.PimAttributeId,c.AttributeCode,c.AttributeXML,ZPP.PublishCatalogId

UNION ALL 
SELECT ZPAV.PimProductId,'DefaultSkuForConfigurable' ,'<Attributes><AttributeEntity>'+REPLACE(REPLACE (c.AttributeXML,'ProductType','DefaultSkuForConfigurable'),'Product Type','Default Sku For Configurable')+'<AttributeValues>'+
 (SELECT TOP 1 AttributeValue FROM View_LoadManageProductInternal ad 
 INNER JOIN ZnodePimProductTypeAssociation yt ON (yt.PimProductId = ad.PimProductId)
 WHERE Ad.AttributeCode = 'SKU'
 AND yt.PimParentProductId = ZPAV.PimProductId
ORDER BY yt.DisplayOrder , yt.PimProductTypeAssociationId ASC)
+'</AttributeValues></AttributeEntity></Attributes>' AttributeValue 
FROM ZnodePimAttributeValue ZPAV  
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN @TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL 
INNER JOIN ZnodePimAttributeDefaultValue dr ON (dr.PimAttributeDefaultValueId = ZPADVL.PimAttributeDefaultValueId)
 WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId
 AND dr.AttributeDefaultValueCode= 'ConfigurableProduct' 
)
AND EXISTS (select * from @PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)
AND c.AttributeCode = 'ProductType' 

---------brand details 
CREATE TABLE #Cte_BrandData (PimProductId int,BrandXML nvarchar(max))

INSERT INTO #Cte_BrandData ( PimProductId, BrandXML )
SELECT  DISTINCT ZBP.PimProductId,'<Brands><BrandEntity><BrandId>'+CAST(ZBD.BrandId AS VARCHAR(50))+'</BrandId><BrandCode>'+ZBD.BrandCode+'</BrandCode><BrandName>'+ZBDL.BrandName+'</BrandName></BrandEntity></Brands>' as BrandXML					   		   
FROM [ZnodeBrandDetails] AS ZBD
INNER JOIN ZnodeBrandDetaillocale ZBDL ON ZBD.BrandId = ZBDL.BrandId
INNER JOIN [ZnodeBrandProduct] AS ZBP ON ZBD.BrandId = ZBP.BrandId

 DELETE FROM ZnodePublishedXML WHERE  IsProductXML = 1  AND LocaleId = @localeId 
								AND  EXISTS ( SELECT TOP 1 1 FROM  @TBL_PublishCatalogId  TBL WHERE TBL.VersionId  = ZnodePublishedXML.PublishCatalogLogId AND TBL.PublishProductId = ZnodePublishedXML.PublishedId)


;WITH CTE AS
(
SELECT ROW_NUMBER() OVER (PARTITION BY PimProductId	,AttributeCode
ORDER BY PimProductId	,AttributeCode) AS RN
FROM @TBL_ZnodeTempPublish
)

DELETE FROM CTE WHERE RN<>1


 

  
 MERGE INTO ZnodePublishedXML TARGET 
 USING (
 SELECT zpp.PublishProductId,zpp.VersionId ,'<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'+CAST(ISNULL(ZPC.PublishCategoryId,'')  AS VARCHAR(50))+'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKU><SKULower>'+CAST(ISNULL((SELECT ''+Lower(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +'</IsParentProducts><CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000)) +'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
					FROM ZnodeProfileCatalog ZPFC 
					INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
					WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+'</TempProfileIds><ProductIndex>'+CAST(ROW_NUMBER()Over(Partition BY zpp.PublishProductId Order BY ISNULL(ZPC.PublishCategoryId,'0') ) AS VARCHAr(100))+'</ProductIndex><IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
ISNULL(STUFF(( SELECT '  '+ BrandXML  FROM #Cte_BrandData BD WHERE BD.PimProductId = ZPP.PimProductId   
				FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, ''),'')+
STUFF(( SELECT '  '+ AttributeValue  FROM @TBL_ZnodeTempPublish TY WHERE TY.PimProductId = ZPP.PimProductId   
    FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>' xmlvalue
FROM  @TBL_PublishCatalogId zpp
INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
LEFT JOIN ZnodePublishCategory ZPC ON (ZPC.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId)
LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId )
LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ZPCP.PublishCategoryId AND ZPCD.LocaleId = @LocaleId )
WHERE ZPPDFG.LocaleId = @LocaleId
AND zpp.LocaleId = @LocaleId
) SOURCE 
ON (
     TARGET.PublishCatalogLogId = SOURCE.versionId 
	 AND TARGET.PublishedId = SOURCE.PublishProductId
	 AND TARGET.IsProductXML = 1 
	 AND TARGET.LocaleId = @localeId 
)
WHEN MATCHED THEN 
UPDATE 
SET  PublishedXML = xmlvalue
   , ModifiedBy = @userId 
   ,ModifiedDate = @GetDate
   ,ImportedGuId = @TokenId 
WHEN NOT MATCHED THEN 
INSERT (PublishCatalogLogId
,PublishedId
,PublishedXML
,IsProductXML
,LocaleId
,CreatedBy
,CreatedDate
,ModifiedBy
,ModifiedDate,ImportedGuId)

VALUES (SOURCE.versionid , Source.publishProductid,Source.xmlvalue,1,@localeid,@userId,@getDate,@userId,@getDate,@TokenId);

DELETE FROM @TBL_ZnodeTempPublish

DELETE FROM @PimProductAttributeXML
DELETE FROM @TBL_CustomeFiled
DELETE FROM @PimDefaultValueLocale
DELETE FROM @TBL_AttributeValue 

 IF OBJECT_ID('tempdb..#Cte_BrandData') is not null
 BEGIN 
 DROP TABLE #Cte_BrandData
 END 

SET @Counter = @counter + 1 
END

END

GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_InsertUpdateCustomeFieldXML')
BEGIN 
	DROP PROCEDURE Znode_InsertUpdateCustomeFieldXML
END
GO

CREATE  Procedure [dbo].[Znode_InsertUpdateCustomeFieldXML] 
(
 @PimProductId VARCHAR(2000)
)
AS
BEGIN 
  BEGIN TRY 
    
	;With Cte_CustomeAttributeValue AS
	(

			SELECT PimProductId ,ZPCF.CustomCode,'<AttributeCode>'+ISNULL((SELECT ''+ZPCF.CustomCode FOR XML PATH('')),'') +'</AttributeCode>'+'<AttributeName>'+ISNULL((SELECT ''+ZPCFL.CustomKey FOR XML PATH('')),'')+'</AttributeName>'
			+'<AttributeValues>'+ISNULL((SELECT ''+ZPCFL.CustomKeyValue FOR XML PATH('')),'')+'</AttributeValues>'+'<IsUseInSearch>0</IsUseInSearch>
			<IsHtmlTags>0</IsHtmlTags>
			<IsComparable>0</IsComparable>
			<IsFacets>0</IsFacets>
			<AttributeTypeName>Text Area</AttributeTypeName>
			<IsPersonalizable>0</IsPersonalizable>
			<IsCustomeField>1</IsCustomeField>
			<IsConfigurable>0</IsConfigurable>
			<IsSwatch>0</IsSwatch>
			<DisplayOrder>'+Convert(nvarchar(100),Isnull(DisplayOrder,0))+'</DisplayOrder>
			' AttributeValue,ZPCFL.LocaleId 
			FROM ZnodePimCustomField ZPCF
			INNER JOIN ZnodePimCustomFieldLocale ZPCFL ON (ZPCFL.PimCustomFieldId = ZPCF.PimCustomFieldId) 
	)

  MERGE INTO ZnodePimCustomeFieldXML TARGET
  USING Cte_CustomeAttributeValue SOURCE 
  ON (TARGET.PimProductId = SOURCE.PimProductId
    AND  TARGET.LocaleId = SOURCE.LocaleId
	AND TARGET.CustomCode = SOURCE.CustomCode
  )
  WHEN MATCHED THEN 
  UPDATE 
   SET TARGET.CustomeFiledXML = SOURCE.AttributeValue
       ,TARGET.ModifiedBy      = 2 
	   ,TARGET.ModifiedDAte   = GETDATE()

  WHEN NOT MATCHED THEN 
  INSERT (PimProductId
				,CustomCode
				,CustomeFiledXML
				,LocaleId
				,CreatedBy
				,CreatedDate
				,ModifiedBy
				,ModifiedDate)
				  VALUES (SOURCE.PimProductId
				  ,SOURCE.CustomCode
				,Source.AttributeValue
				,SOURCE.LocaleId
				,2
				,GETDATE()
				,2
				,GETDATE())
				WHEN NOT MATCHED BY SOURCE THEN 
	DELETE;

  END TRY 
  BEGIN CATCH 
  SELECT ERROR_MESSAGE()
  END CATCH 
END

GO




IF  EXISTS (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeCmsPortalMessage' AND COLUMN_NAME = 'PortalId')
BEGIN 
	ALTER TABLE [dbo].[ZnodeCmsPortalMessage] ALTER COLUMN PortalId INT NULL;
END 

GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_DeleteManageMessages')
BEGIN 
	DROP PROCEDURE Znode_DeleteManageMessages
END
GO

CREATE PROCEDURE [dbo].[Znode_DeleteManageMessages]
( @CMSPortalMessageId VARCHAR(2000),
  @Status             BIT OUT)
AS
   /* 
     Summary : Remove messages of the portal with their reference data 
			   Here complete delete the messages of portal and their references without any check  
			   If passed @CMSPortalMessageId are matched with deleted count then data set return true other wise false 
			   dbo.Split function use to make comma seperated data in table rows 
			   1 ZnodeCMSPortalMessage
			   2 ZnodeCMSMessage
			   3 ZnodeCMSMessageKey
     Unit Testing 
	 begin tran
     Declare @Status bit 
     EXEC [Znode_DeleteManageMessages] 1795 ,@Status =@Status OUT 
	 rollback tran
     */
	 BEGIN
         BEGIN TRAN DeleteManageMessages;
         BEGIN TRY
             SET NOCOUNT ON;
             DECLARE @TBL_MessageIds TABLE
             (PortalId        INT,
              CmsMessageKeyId INT
             );
             INSERT INTO @TBL_MessageIds
                    SELECT ZCPM.PortalId,ZCPM.CmsMessageKeyId                         
                    FROM ZnodeCMSPortalMessage AS ZCPM
					     -- dbo.Split function use to make comma separeted data in table rows
                         INNER JOIN dbo.Split(@CMSPortalMessageId, ','  
                         ) AS SP ON(ZCPM.CMSPortalMessageId = SP.Item);
             DECLARE @TBL_DeletedMessagKey TABLE(CMSMessageKeyId INT);
             DECLARE @TBL_DeleteCMSMessageId TABLE
             (CMSPortalMessageId INT,
              CMSMessageId       INT
             );
             INSERT INTO @TBL_DeleteCMSMessageId
                    SELECT ZCPM.CMSPortalMessageId,CMSMessageId                          
                    FROM [dbo].ZnodeCMSPortalMessage AS ZCPM
                         INNER JOIN @TBL_MessageIds AS TBM ON(
						 (isnull(ZCPM.PortalId,-1) = isnull(TBM.portalid,-1))
                         AND ZCPM.CMSMessageKeyId = TBM.CmsMessageKeyId);
             DELETE FROM ZnodeCMSPortalMessage
			 -- catch the deleted values MessageKey
             OUTPUT DELETED.CMSMessageKeyId
                    INTO @TBL_DeletedMessagKey 
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteCMSMessageId AS TBDCM
                 WHERE TBDCM.CMSPortalMessageId = ZnodeCMSPortalMessage.CMSPortalMessageId
             );
             DELETE FROM ZnodeCMSMessage
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteCMSMessageId AS TBDCM
                 WHERE TBDCM.CMSMessageId = ZnodeCMSMessage.CMSMessageId
             )
                   AND NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM ZnodeCMSPortalMessage AS TBDCM
                 WHERE TBDCM.CMSMessageId = ZnodeCMSMessage.CMSMessageId
             );
             DELETE FROM ZnodeCMSPortalMessageKeyTag
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeletedMessagKey AS TBDMK
                 WHERE TBDMK.CMSMessageKeyId = ZnodeCMSPortalMessageKeyTag.CMSMessageKeyId
             )
                   AND NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM ZnodeCMSPortalMessage AS TBDMK
                 WHERE TBDMK.CMSMessageKeyId = ZnodeCMSPortalMessageKeyTag.CMSMessageKeyId
             );
             DELETE FROM ZnodeCMSMessageKey
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeletedMessagKey AS TBDMK
                 WHERE TBDMK.CMSMessageKeyId = ZnodeCMSMessageKey.CMSMessageKeyId
             )
                   AND NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM ZnodeCMSPortalMessage AS TBDMK
                 WHERE TBDMK.CMSMessageKeyId = ZnodeCMSMessageKey.CMSMessageKeyId
             );
             IF
             (
                 SELECT COUNT(1)
                 FROM @TBL_DeleteCMSMessageId
             ) =
             (
                 SELECT COUNT(1)
                 FROM @TBL_DeletedMessagKey
             ) -- if count are equal then dataset status return true other wise false 
                 BEGIN
				  
                     SELECT a.CMSMessageKeyId AS ID, b.MessageKey AS MessageDetails ,
                            CAST(1 AS BIT) AS Status
					 FROM @TBL_DeletedMessagKey a
					 INNER JOIN ZnodeCMSMessageKey b on (a.CMSMessageKeyId = b.CMSMessageKeyId)
	 
                     SET @Status = 1;
                 END;
             ELSE
                 BEGIN
                     SELECT 0 AS ID,
                            CAST(0 AS BIT) AS Status;
                     SET @Status = 0;
                 END;
             COMMIT TRAN DeleteManageMessages;
         END TRY
         BEGIN CATCH
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_DeleteManageMessages @CMSContentPageId = '+@CMSPortalMessageId+',@Status='+CAST(@Status AS VARCHAR(50));
             SET @Status = 0;
             SELECT 0 AS ID,
                    CAST(0 AS BIT) AS Status;
             ROLLBACK TRAN DeleteManageMessages;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_DeleteManageMessages',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;

	 GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_InsertManageMessages')
BEGIN 
	DROP PROCEDURE Znode_InsertManageMessages
END
GO
  
CREATE PROCEDURE [dbo].[Znode_InsertManageMessages]  
(  
 @PortalIds varchar(2000),  
 @MessageKey nvarchar(100),   
 @MessageTag nvarchar(2000)= NULL,  
 @Description nvarchar(max),  
 @LocaleId int,  
 @UserId int,   
 @CMSMessageId int,   
 @CMSMessageKeyId int= 0,   
 @Status bit= 0 OUT,   
 @IsDebug bit= 0)  
AS   
 /*  
 Summary:  This procedure use for insert manage message and update on the basis of message key                    
 Unit Testing     
    SELECT * FROM ZnodePortal  
  SELECT * FROM ZnodeCMSMessageKey  WHERE messageKey = 'test111'  
  SELECT * FROM [ZnodeCMSMessage] WHERE message = 'fjkxdbjlf'  
  SELECT * FROM ZnodeCMSPortalMessage WHERE PortalId = 28  
  EXEC Znode_InsertManageMessages '29','test111','fjkxdbjlf1',1,2,0,0,0   
  
 */  
BEGIN  
 BEGIN TRAN A;  
 BEGIN TRY  
  SET NOCOUNT ON;  
  DECLARE @MessageKeyDetail int;  
     DECLARE @GetDate DATETIME = dbo.Fn_GetDate();  
  DECLARE @CMSMessageId_New int= 0;  
  DECLARE @PortalId TABLE  
  (   
  ID int, PortalId int  
  );  
  DECLARE @AreaId TABLE  
  (   
  ID int, AreaId int  
  );  
  INSERT INTO @PortalId  
      SELECT ID, ITEM  
      FROM dbo.split( @PortalIds, ',' ) AS a;   
  
  -- Insert Data into Temp table   
  
  DECLARE @InsertDetails TABLE  
  (   
  PortalId int, CMSMessageKeyId int, CMSMessageId int, MessageKey varchar(1000), Messagedescription nvarchar(max), LocaleId int  
  );  
  DECLARE @CurrentPortalAreaIds TABLE  
  (   
  PortalId int, CMSMessageKeyId int, CMSMessageId int  
  );  
  INSERT INTO @InsertDetails  
      SELECT Case when a.PortalId = 0 then null else a.PortalId end, @CMSMessageKeyId, @CMSMessageId, @MessageKey, @Description, @LocaleId  
      FROM @PortalId AS a;  
  
  
  IF EXISTS  
  (  
   SELECT TOP 1 1  FROM ZnodeCMSPortalMessage AS ZCPM  INNER JOIN  
     ZnodeCMSMessageKey AS ZCMK  ON(ZCPM.CMSMessageKeyId = ZCMK.CMSMessageKeyId)  
   WHERE EXISTS  (  SELECT TOP 1 1  FROM @InsertDetails AS TBID  WHERE ZCMK.MessageKey = @MessageKey AND   ZCPm.PortalId = TBID.PortalId  )  
  ) AND   @CMSMessageKeyId = 0  
  BEGIN  
   RAISERROR(15600, -1, -1, '');  
  END;   
       
  -- First check locale wise messsage are for how many portal or area  
  INSERT INTO @CurrentPortalAreaIds  SELECT PortalId, a.CMSMessageId, a.CMSMessageKeyId  FROM ZnodeCMSPortalMessage AS a  
     INNER JOIN  ZnodeCMSMessage AS b  ON(a.CMSMessageId = b.CMSMessageId)  
      WHERE a.CMSMessageKeyId = @CMSMessageKeyId AND   a.CMSMessageId = @CMSMessageId;  
  IF EXISTS  
  (  
   SELECT TOP 1 1  
   FROM ZnodeCMSPortalMessage AS a  
     INNER JOIN  
     [ZnodeCMSMessageKey] AS b  
     ON( a.CMSMessageKeyId = b.CMSMessageKeyId AND   
      b.MessageKey = @MessageKey  
       )  
     INNER JOIN  
     ZnodeCMSMessage AS c  
     ON( c.CMSMessageId = a.CMSMessageId AND   
      c.LocaleId = @LocaleId AND   
      C.Message = @Description  
       )  
   WHERE EXISTS  
   (  
    SELECT TOP 1 1  
    FROM @InsertDetails AS vc  
    WHERE vc.PortalId = a.PortalId  
   )  
  )  
  BEGIN  
   SET @MessageKeyDetail =  
   (  
    SELECT TOP 1 CMSMessageKeyId  
    FROM [dbo].[ZnodeCMSMessageKey] AS zcmk  
    WHERE zcmk.MessageKey = @MessageKey  
   );  
  
   --  RAISERROR (15600,-1,-1, ' Is Already Exists ');   
  
  END;  
  IF NOT EXISTS  
  (  
   SELECT TOP 1 1  
   FROM ZnodeCMSMessageKey  
   WHERE MessageKey = @MessageKey  
  )  
  BEGIN  
   INSERT INTO [ZnodeCMSMessageKey]( MessageKey, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )  
   VALUES( @MessageKey, @UserId, @GetDate, @UserId, @GetDate );  
  
   SET @MessageKeyDetail = SCOPE_IDENTITY();  
  END;  
  ELSE  
  BEGIN  
   SET @MessageKeyDetail =  
   (  
    SELECT CMSMessageKeyId  
    FROM [ZnodeCMSMessageKey]  
    WHERE MessageKey = @MessageKey  
   );  
   UPDATE [dbo].[ZnodeCMSMessageKey]  
     SET ModifiedBy = @UserId, ModifiedDate = @GetDate  
   WHERE MessageKey = @MessageKey;  
  
  END;  
  IF NOT EXISTS  
  (  
   SELECT TOP 1 1  
   FROM [ZnodeCMSMessage] AS zcm  
   INNER JOIN ZnodeCMSPortalMessage ZCPM ON (ZCPM.CMSMessageId = ZCM.CMSMessageId)  
   WHERE Zcm.CMSMessageId = @CMSMessageId 
   AND ((@PortalIds = '0' and ZCPM.PortalId is null ) OR (@PortalIds <>'0' and ZCPM.PortalId =  @PortalIds ))
   --AND (@PortalIds = '0' or ZCM.[Message] = @Description) 
   AND   zcm.LocaleId = @LocaleId  
  )  
  BEGIN  
   DELETE FROM ZnodeCMSPortalMessage WHERE PortalId = @PortalIds AND CMSMessageKeyId = @CMSMessageKeyId  
      AND  CMSMessageId IN ( SELECT CMSMessageId FROM [ZnodeCMSMessage] ZCM WHERE  CMSMessageId = @CMSMessageId AND LocaleId = @LocaleId)  
  
   INSERT INTO [dbo].[ZnodeCMSMessage]( LocaleId, [Message], CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )  
   VALUES( @LocaleId, @Description, @UserId, @GetDate, @UserId, @GetDate );  
   SET @CMSMessageId_New = SCOPE_IDENTITY();  
  
  END;  
  ELSE  
  BEGIN  
   UPDATE [dbo].[ZnodeCMSMessage]  
     SET [Message] = @Description, ModifiedBy = @UserId, ModifiedDate = @GetDate  
   WHERE CMSMessageId = @CMSMessageId;  
   SET @CMSMessageId_New = @CMSMessageId;  
  END;  

  IF(@PortalIds = '0')
  BEGIN
  
  IF NOT EXISTS  
  ( 
	SELECT TOP 1 1  
	FROM [ZnodeCMSPortalMessage] AS ZCPM 
	WHERE ZCPM.PortalId IS NULL AND 
	ZCPM.CMSMessageKeyId = CAST(@MessageKeyDetail AS int) AND   
    ZCPM.CMSMessageId = @CMSMessageId_NEW 
  )
  BEGIN
	INSERT INTO ZnodeCMSPortalMessage(PortalId, CMSMessageKeyId, CMSMessageId, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate) VALUES(NULL, CAST(@MessageKeyDetail AS int), @CMSMessageId_New, @UserId, @GetDate, @UserId, @GetDate );  
  END
  ELSE
  BEGIN
	UPDATE ZnodeCMSPortalMessage  SET  
	ModifiedBy = @UserId, ModifiedDate = @GetDate
	WHERE PortalId IS NULL AND 
	CMSMessageKeyId = CAST(@MessageKeyDetail AS int) AND   
    CMSMessageId = @CMSMessageId_NEW 
  END

  IF NOT EXISTS  
  ( 
	SELECT TOP 1 1  
	FROM [ZnodeCMSPortalMessageKeyTag] AS ZCPMT 
	WHERE ZCPMT.PortalId IS NULL AND 
	ZCPMT.CMSMessageKeyId = CAST(@MessageKeyDetail AS int)    
  )
  BEGIN
	INSERT INTO [ZnodeCMSPortalMessageKeyTag](PortalId, CMSMessageKeyId, TagXML, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate) VALUES(NULL, CAST(@MessageKeyDetail AS int), @MessageTag, @UserId, @GetDate, @UserId, @GetDate );  
  END
  ELSE
  BEGIN
	UPDATE [ZnodeCMSPortalMessageKeyTag]  SET  
	TagXML = @MessageTag, ModifiedBy = @UserId, ModifiedDate = @GetDate
	WHERE PortalId IS NULL AND 
	CMSMessageKeyId = CAST(@MessageKeyDetail AS int)    
  END

  END
  ELSE
  BEGIN
  MERGE INTO ZnodeCMSPortalMessage TARGET  
  USING @InsertDetails SOURCE  
  ON TARGET.PortalId = SOURCE.PortalId AND   
     TARGET.CMSMessageKeyId = CAST(@MessageKeyDetail AS int) AND   
     TARGET.CMSMessageId = @CMSMessageId_NEW  
    
  WHEN MATCHED  
     THEN UPDATE SET TARGET.CMSMessageId = @CMSMessageId_New, TARGET.ModifiedBy = @UserId, TARGET.ModifiedDate = @GetDate  
  WHEN NOT MATCHED  
     THEN INSERT(PortalId, CMSMessageKeyId, CMSMessageId, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate) VALUES(SOURCE.PortalId, CAST(@MessageKeyDetail AS int), @CMSMessageId_New, @UserId, @GetDate, @UserId, @GetDate );  
    
  MERGE INTO ZnodeCMSPortalMessageKeyTag TARGET  
  USING @InsertDetails SOURCE  
  ON TARGET.PortalId = SOURCE.PortalId AND   
     TARGET.CMSMessageKeyId = CAST(@MessageKeyDetail AS int)  
  WHEN MATCHED  
     THEN UPDATE SET TagXML = @MessageTag, ModifiedBy = @userId, ModifiedDate = @GetDate  
  WHEN NOT MATCHED  
     THEN INSERT(PortalId, CMSMessageKeyId, TagXML, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate) VALUES(SOURCE.PortalId, CAST(@MessageKeyDetail AS int), @MessageTag, @UserId, @GetDate, @UserId, @GetDate );  
  
  DELETE FROM [ZnodeCMSMessage]  
  WHERE NOT EXISTS  
  (  
   SELECT TOP 1 1  
   FROM ZnodeCMSPortalMessage AS ss  
   WHERE ss.CMSMessageId = [ZnodeCMSMessage].CMSMessageId  
  );  
  
  DELETE FROM ZnodeCMSMessageKey  
  WHERE NOT EXISTS  
  (  
   SELECT TOP 1 1  
   FROM ZnodeCMSPortalMessage AS ss  
   WHERE ss.CMSMessageKeyId = ZnodeCMSMessageKey.CMSMessageKeyId  
  ) AND   
     NOT EXISTS  
  (  
   SELECT TOP 1 1  
   FROM dbo.ZnodeCMSPortalMessageKeyTag AS ss  
   WHERE ss.CMSMessageKeyId = ZnodeCMSMessageKey.CMSMessageKeyId  
  );  

  END

  SELECT @MessageKeyDetail AS ID, 'Successful' AS [MessageDetails], CAST(1 AS bit) AS [Status];  
  -- output paramater   
  SET @Status = 1;  
  COMMIT TRAN A;  
 END TRY  
 BEGIN CATCH  
      
       SET @Status = 0;  
       DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),   
    @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_InsertManageMessages @PortalIds = '+@PortalIds+',@MessageKey='+@MessageKey+',@MessageTag='+@MessageTag+',@Description='+@Description+',@LocaleId='+CAST(@LocaleId AS VARCHAR(50))+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@CMSMessageId='+CAST(@CMSMessageId AS VARCHAR(50))+',@CMSMessageKeyId='+CAST(@CMSMessageKeyId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));  
                    
             --SELECT 0 AS ID,CAST(0 AS BIT) AS Status;   
    SELECT @CMSMessageId AS ID, ISNULL(CAST(@MessageKeyDetail AS varchar(2000)), '')+'  Is Already Exists' AS [MessageDetails], CAST(0 AS bit) AS [Status];  
                       
       ROLLBACK TRAN A;  
             EXEC Znode_InsertProcedureErrorLog  @ProcedureName = 'Znode_InsertManageMessages',  @ErrorInProcedure = @Error_procedure,  @ErrorMessage = @ErrorMessage,  @ErrorLine = @ErrorLine,  @ErrorCall = @ErrorCall;      
 END CATCH;  
END;

GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetManageMessageForEdit')
BEGIN 
	DROP PROCEDURE Znode_GetManageMessageForEdit
END
GO


CREATE PROCEDURE [dbo].[Znode_GetManageMessageForEdit]  
( @PortalId        INT = 0,  
  @CMSMessageKeyId INT,  
  @LocaleId        INT,  
  @CMSMessageId    INT = 0)  
AS  
/*  
 Summary: Get Managed Message Details filtered by CMSMessageId  
 Unit Testing:  
   EXEC Znode_GetManageMessageForEdit @PortalId  = 4,@CMSMessageKeyId = 12,@LocaleId = 1, @CMSMessageId=14  
  
*/  
     BEGIN  
         BEGIN TRY  
             SET NOCOUNT ON;  
             DECLARE @TBL_CMSMessage TABLE  
             (CMSMessageId    INT,  
              [Message]       NVARCHAR(MAX),  
              MessageKey      NVARCHAR(100),  
              StoreName       NVARCHAR(MAX),  
              LocaleId        INT,  
              PortalId        INT,  
              CMSMessageKeyId INT,  
              TagXML          NVARCHAR(MAX)  
             );  
             INSERT INTO @TBL_CMSMessage  
                    SELECT ZCM.CMSMessageId,ZCM.[Message],ZCMK.MessageKey AS Location,ZP.StoreName,ZCM.LocaleId,ZP.PortalId,ZCPM.CMSMessageKeyId,CONVERT( NVARCHAR(MAX), ZCPMKT.TagXML) AS TagXML  
                    FROM [dbo].[ZnodeCMSMessage] AS ZCM  
                         INNER JOIN [dbo].[ZnodeCMSPortalMessage] AS ZCPM ON(ZCM.CMSMessageId = ZCPM.CMSMessageId)  
                         LEFT JOIN [dbo].[ZnodeCMSMessageKey] AS ZCMK ON(ZCMK.CMSMessageKeyId = ZCPM.CMSMessageKeyId)  
                         LEFT JOIN [dbo].ZnodePortal AS ZP ON(ZP.PortalId = ZCPM.PortalId)  
                         LEFT JOIN [dbo].ZnodeCMSPortalMessageKeyTag AS ZCPMKT ON(ZCPMKT.PortalId = ZCPM.PortalId  
                                                                               AND ZCPMKT.CMSMessageKeyId = ZCMK.CMSMessageKeyId)  
                    WHERE((ZP.PortalId = @PortalId) OR (@PortalId = 0 and ZCPM.PortalId is Null))  
                    AND (ZCM.CMSMessageId = @CMSMessageId OR @CMSMessageId = 0)  
                    AND ZCMK.CMSMessageKeyId = @CMSMessageKeyId  
                    AND ZCM.LocaleId = @LocaleId;  
             SELECT CMSMessageKeyId,MessageKey,CMSMessageId,[Message],LocaleId,ZCM.PortalId,ZCM.StoreName,TagXML MessageTag  
             FROM @TBL_CMSMessage AS ZCM;  
              
         END TRY  
         BEGIN CATCH  
               DECLARE @Status BIT ;  
       SET @Status = 0;  
       DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetManageMessageForEdit @PortalId = '+CAST(@PortalId AS VARCHAR(50
))+',@CMSMessageKeyId='+CAST(@CMSMessageKeyId AS VARCHAR(50))+',@LocaleId='+CAST(@LocaleId AS VARCHAR(50))+',@CMSMessageId='+CAST(@CMSMessageId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));  
                    
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                      
     
             EXEC Znode_InsertProcedureErrorLog  
    @ProcedureName = 'Znode_GetManageMessageForEdit',  
    @ErrorInProcedure = @Error_procedure,  
    @ErrorMessage = @ErrorMessage,  
    @ErrorLine = @ErrorLine,  
    @ErrorCall = @ErrorCall;      
         END CATCH;  
     END;
	 GO

IF EXISTS (SELECT * FROM sys.views where name = 'View_GetManageMessageList')
DROP VIEW View_GetManageMessageList
GO
CREATE  View [dbo].[View_GetManageMessageList]
AS
SELECT  c.CMSPortalMessageId ,a.CMSMessageId , a.[Message]  , b.MessageKey Location,
Case when e.PortalId is null then 'Global' else e.StoreName end as StoreName,
a.LocaleId,e.PortalId,c.CMSMessageKeyId
,ZCPMT.TagXML as MessageTag  , TY.DisplayName StateName 
,a.IsPublished PublishStatus FROM  [dbo].[ZnodeCMSMessage] a 
INNER JOIN [dbo].[ZnodeCMSPortalMessage] c ON (a.CMSMessageId = c.CMSMessageId)
LEFT JOIN  [dbo].[ZnodeCMSMessageKey] b ON (b.CMSMessageKeyId  = c.CMSMessageKeyId)
LEFT JOIN  [dbo].ZnodeCMSPortalMessageKeyTag ZCPMT ON (ISNULL(ZCPMT.Portalid,-1) = ISNULL(C.PortalId,-1) AND C.CMSMessageKeyId = ZCPMT.CMSMessageKeyId )
Left JOIN  [dbo].ZnodePortal e ON (e.PortalId = c.PortalId)
LEFT JOIN  ZnodePublishState TY ON (TY.PublishStateId = a.PublishStateId )
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishProductPricingBySku')
BEGIN 
	DROP PROCEDURE Znode_GetPublishProductPricingBySku
END
GO

CREATE PROCEDURE [dbo].[Znode_GetPublishProductPricingBySku]
(   
    @SKU              VARCHAR(MAX),
    @PortalId         INT,
    @currentUtcDate   VARCHAR(100), -- this date is required for the user date r
    @UserId           INT          = 0, -- userid is optional
	@ProfileId        INT          = 0, 
    @PublishProductId TransferId READONLY,
	@IsDebug          BIT          = 0
	)
AS 
   /* 
    --Summary: Retrive Price of product from pricelist
    --Input Parameters:
    --UserId, SKU(Comma separated multiple), PortalId
    --Conditions :
    --1. If userId is null then check for PriceList having sku associated to profile which is associated to Portal having  PortalId and  having higher Precedence and valid ActivationDate and ExpirationDate for PriceList  and SKU also.
    --Unit Testing : 
    --EXEC Znode_GetPublishProductPricingBySku_2 @SKU = 'apple,apr234' , @PortalId = 34 , @currentUtcDate = '2016-09-17 00:00:00.000';
    --2. If There is no any PriceList having given sku associated to profile  then check for  
    --PriceList associated portal having PortalId and having higher Precedence ActivationDate and ExpirationDate for PriceList and SKU also.
    --Unit Testing : 
    --EXEC Znode_GetPublishProductPricingBySku_2 @SKU = 'apple,apr234' , @PortalId = 34 , @currentUtcDate = '2016-09-17 00:00:00.000';
    --3. If userId is not null then check for PriceList having sku associated to User having UserId and having higher Precedence ActivationDate and ExpirationDate for PriceList and SKU also.
    --4. If There is no any PriceList having given sku associated to user  then check for  
    --PriceList associated Account having UserId and having higher Precedence ActivationDate and ExpirationDate for PriceList and SKU also.
    --5. If There is no any PriceList having given sku associated to account  then check for  
    --PriceList associated Profile having PortalId and having higher Precedence ActivationDate and ExpirationDate for PriceList and SKU also.
    --6. If There is no any PriceList having given sku associated to Profile  then check for  
    --PriceList associated Portal having PortalId and having higher Precedence ActivationDate and ExpirationDate for PriceList and SKU also.
    --7. If in each case Precedence is same then get PriceList according to higher PriceListId ActivationDate and ExpirationDate for PriceList and SKU also.
    --8. Also get the Tier Price, Tier Quantity of given sku.
    --Unit Testing   
    --Exec Znode_GetPublishProductPricingBySku  @SKU = 'Levi''s T-Shirt & Jeans - Bundle Product',@PortalId = 1, @currentUtcDate = '2016-07-31 00:00:00.000'
	*/
    
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @Tlb_SKU TABLE
             (SKU        VARCHAR(100),
              SequenceNo INT IDENTITY
             );

			  DECLARE @DefaultLocaleId INT = dbo.FN_GETDEFAULTLocaleId()

			 IF @SKU = '' 
			 BEGIN 
			  INSERT INTO @Tlb_SKU(SKU)
			  	SELECT (SELECT ''+SKU FOR XML PATH('')) 
					FROM ZnodePublishProductDetail a
					INNER JOIN @PublishProductId b ON (b.Id = a.PublishProductId )
					WHERE LocaleId = @DefaultLocaleId


			 END 
			 ELSE 
			 BEGIN
			   INSERT INTO @Tlb_SKU(SKU)
                    SELECT Item
                    FROM Dbo.split(@SKU, ',');
			  

			 END 

           
            -- DECLARE #TLB_SKUPRICELIST TABLE
          CREATE TABLE #TLB_SKUPRICELIST
		     (SKU          VARCHAR(100),
              RetailPrice  NUMERIC(28, 6),
              SalesPrice   NUMERIC(28, 6),
              PriceListId  INT,
              TierPrice    NUMERIC(28, 6),
              TierQuantity NUMERIC(28, 6),
			  ExternalId NVARCHAR(2000),
			  Custom1 NVARCHAR(MAX),
			  Custom2 NVARCHAR(MAX),
			  Custom3 NVARCHAR(MAX)
             );
             DECLARE @PriceListId INT, @PriceRoundOff INT;
             SELECT @PriceRoundOff = CONVERT( INT, FeatureValues)
             FROM ZnodeGlobalSetting
             WHERE FeatureName = 'PriceRoundOff';
		
             --Retrive portal wise pricelist  
             --DECLARE #Tbl_PortalWisePriceList TABLE
             CREATE TABLE #Tbl_PortalWisePriceList  
			 (PriceListId    INT,
              ActivationDate DATETIME,
              ExpirationDate DATETIME NULL,
              Precedence     INT,
			  SKU NVARCHAR(300)
             );
             --Retrive price for respective pricelist   
             Create TABLE  #Tbl_PriceListWisePriceData 
             (
				  PriceListId    INT,
				  SKU            VARCHAR(300),
				  SalesPrice     NUMERIC(28, 6),
				  RetailPrice    NUMERIC(28, 6),
				  UomId          INT,
				  UnitSize       NUMERIC(28, 6),
				  ActivationDate DATETIME,
				  ExpirationDate DATETIME NULL,
				  TierPrice      NUMERIC(28, 6),
				  TierQuantity   NUMERIC(28, 6),
				  TierUomId      INT,
				  TierUnitSize   NUMERIC(28, 6), 
				  ExternalId NVARCHAR(2000),
				  Custom1 NVARCHAR(MAX),
				  Custom2 NVARCHAR(MAX),
				  Custom3 NVARCHAR(MAX)
             );
			-- DECLARE #Tbl_SKUWisePriceList TABLE 
			 Create table #Tbl_SKUWisePriceList(PriceListId INT, SKU NVARCHAR(300))

			 insert into #Tbl_SKUWisePriceList(PriceListId,SKU) 
			 SELECT  PriceListId,SKU from ZnodePrice where (SELECT ''+SKU FOR XML PATH('')) in (Select SKU from @Tlb_SKU )
			 Union
			 SELECT PriceListId,SKU  from ZnodePriceTier where (SELECT ''+SKU FOR XML PATH('')) in (Select SKU from @Tlb_SKU )
			 
			 --1. If userId is null then check for PriceList having sku associated to profile which is associated to Portal having  PortalId and  having higher Precedence and valid ActivationDate and ExpirationDate for PriceList  and SKU also.
            IF @UserId = 0
                 BEGIN
					INSERT INTO #Tbl_PortalWisePriceList( PriceListId, ActivationDate, ExpirationDate, Precedence,SKU )
					SELECT a.PriceListId, ActivationDate, ISNULL(ExpirationDate, @GetDate), b.Precedence,tsw.SKU
					FROM ZnodePriceList AS a INNER JOIN ZnodePriceListProfile AS b ON a.PriceListId = b.PriceListId INNER JOIN ZnodePortalProfile AS c
						ON b.PortalProfileId = c.PortalProfileID AND  c.IsDefaultAnonymousProfile = 1 INNER JOIN ZnodePortalunit AS zupu ON a.CultureId = zupu.CultureId 
						inner join #Tbl_SKUWisePriceList tsw  ON a.PriceListId = tsw.PriceListId
					WHERE @CurrentUtcDate BETWEEN a.ActivationDate AND ISNULL(a.ExpirationDate, @GetDate) AND c.PortalId = @PortalId
					ORDER BY b.Precedence;
		
			 
                     --2. If There is no any PriceList having given sku associated to profile  then check for PriceList associated portal having PortalId and having higher Precedence ActivationDate and ExpirationDate for PriceList and SKU also.
			IF Exists (Select top 1 1  FROM #Tbl_SKUWisePriceList tspl where NOT Exists (SELECT TOP 1 1 FROM #Tbl_PortalWisePriceList tpwl
				WHERE tspl.SKU = tpwl.SKU))
                         BEGIN
							INSERT INTO #Tbl_PortalWisePriceList( PriceListId, ActivationDate, ExpirationDate, Precedence,SKU )
							SELECT a.PriceListId, ActivationDate, ISNULL(ExpirationDate, @GetDate), b.Precedence,tsw.SKU
							FROM ZnodePriceList AS a INNER JOIN ZnodePriceListPortal AS b ON a.PriceListId = b.PriceListId
							INNER JOIN ZnodePortalunit AS zupu ON a.CultureId = zupu.CultureId   
							inner join #Tbl_SKUWisePriceList tsw  ON a.PriceListId = tsw.PriceListId
							AND NOT EXISTS (Select TOP 1 1 FROM  #Tbl_PortalWisePriceList tpwl WHERE tpwl.SKU = tsw.SKU )
							WHERE @CurrentUtcDate BETWEEN a.ActivationDate 
							AND ISNULL(a.ExpirationDate, @GetDate) AND b.PortalId = @PortalId
							ORDER BY b.Precedence
							;
							--Delete from #Tbl_SKUWisePriceList where PriceListId in (Select PriceListId from  #Tbl_PortalWisePriceList )
						
                         END;
                 END;
                     --3. If userId is not null then check for PriceList having sku associated to User having UserId and having higher Precedence ActivationDate and ExpirationDate for PriceList and SKU also.
             ELSE
                 BEGIN
				 
                     INSERT INTO #Tbl_PortalWisePriceList (PriceListId, ActivationDate, ExpirationDate, Precedence,SKU )
                            SELECT a.PriceListId, ActivationDate,ISNULL(ExpirationDate, @GetDate), b.Precedence,tsw.SKU
                            FROM ZnodePriceList AS a INNER JOIN ZnodePriceListUser AS b ON a.PriceListId = b.PriceListId
                                 INNER JOIN ZnodePortalunit zupu ON a.CultureId = zupu.CultureId AND zupu.PortalId = @PortalId  
								 inner join #Tbl_SKUWisePriceList tsw  ON a.PriceListId = tsw.PriceListId
								 AND NOT EXISTS (Select TOP 1 1 FROM  #Tbl_PortalWisePriceList tpwl WHERE tpwl.SKU = tsw.SKU )
                            WHERE @CurrentUtcDate BETWEEN a.ActivationDate AND ISNULL(a.ExpirationDate, @GetDate) AND b.UserID = @UserId
							ORDER BY b.Precedence ;

                --4. If There is no any PriceList having given sku associated to user  then check for PriceList associated Account having UserId and having higher Precedence ActivationDate and ExpirationDate for PriceList and SKU also.
				IF Exists (Select top 1 1  FROM #Tbl_SKUWisePriceList tspl where NOT Exists (SELECT TOP 1 1 FROM #Tbl_PortalWisePriceList tpwl
				WHERE tspl.SKU = tpwl.SKU))
						BEGIN
							INSERT INTO #Tbl_PortalWisePriceList( PriceListId, ActivationDate, ExpirationDate, Precedence,SKU )
								   SELECT a.PriceListId, ActivationDate, ISNULL(ExpirationDate, @GetDate), c.Precedence,tsw.SKU
								   FROM ZnodePriceList AS a INNER JOIN ZnodePriceListAccount AS c ON a.PriceListId = c.PriceListId
										INNER JOIN ZnodeUser AS d ON c.Accountid = d.Accountid INNER JOIN ZnodePortalunit AS zupu ON a.CultureId = zupu.CultureId   
										AND zupu.PortalId = @PortalId
										inner join #Tbl_SKUWisePriceList tsw  ON a.PriceListId = tsw.PriceListId
										AND NOT EXISTS (Select TOP 1 1 FROM  #Tbl_PortalWisePriceList tpwl WHERE tpwl.SKU = tsw.SKU )
								   WHERE @CurrentUtcDate BETWEEN a.ActivationDate AND ISNULL(a.ExpirationDate, @GetDate) AND d.UserID = @UserId
									ORDER BY c.Precedence
							--Delete from #Tbl_SKUWisePriceList where PriceListId in (Select PriceListId from  #Tbl_PortalWisePriceList )
						 END;
                     -- 5. If There is no any PriceList having given sku associated to account  then check for PriceList associated Profile having PortalId and having higher   Precedence ActivationDate and ExpirationDate for PriceList and SKU also.
				IF Exists (Select top 1 1  FROM #Tbl_SKUWisePriceList tspl 
				where NOT Exists (SELECT TOP 1 1 FROM #Tbl_PortalWisePriceList tpwl
				WHERE tspl.SKU = tpwl.SKU))

                         BEGIN
                             INSERT INTO #Tbl_PortalWisePriceList(PriceListId,ActivationDate,ExpirationDate,Precedence,SKU)
                                    SELECT a.PriceListId, ActivationDate, ISNULL(ExpirationDate, @GetDate), b.Precedence,tsw.SKU
                                    FROM ZnodePriceList AS a
                                         INNER JOIN ZnodePriceListProfile AS b ON a.PriceListId = b.PriceListId 
										 INNER JOIN ZnodePortalProfile AS c ON b.PortalProfileId = c.PortalProfileId  AND c.PortalId = @PortalId 
                                         INNER JOIN dbo.ZnodeUserProfile zup ON c.ProfileId = zup.ProfileId AND (IsDefault = 1 OR   @ProfileId <> 0)
                                         INNER JOIN ZnodePortalunit zupu ON a.CultureId = zupu.CultureId AND zupu.PortalId = @PortalId 
										 inner join #Tbl_SKUWisePriceList tsw  ON a.PriceListId = tsw.PriceListId
										 AND NOT EXISTS (Select TOP 1 1 FROM  #Tbl_PortalWisePriceList tpwl WHERE tpwl.SKU = tsw.SKU )
                                    WHERE @CurrentUtcDate BETWEEN a.ActivationDate AND ISNULL(a.ExpirationDate, @GetDate) AND (( zup.UserId = @UserId OR  @ProfileId <> 0) 
		   AND (ZUP.ProfileId = @ProfileId OR @ProfileId = 0 ));  
									--Delete from @Tbl_SKUWisePriceList where PriceListId in (Select PriceListId from  @Tbl_PortalWisePriceList )

					     END;
                   

                     ---6. If There is no any PriceList having given sku associated to Profile  then check for priceList associated Portal having PortalId and having higher Precedence ActivationDate and ExpirationDate for PriceList and SKU also.
                  				IF Exists (Select top 1 1  FROM #Tbl_SKUWisePriceList tspl 
								where NOT Exists (SELECT TOP 1 1 FROM #Tbl_PortalWisePriceList tpwl
				WHERE tspl.SKU = tpwl.SKU))

                         BEGIN
							INSERT INTO #Tbl_PortalWisePriceList( PriceListId, ActivationDate, ExpirationDate, Precedence,SKU )
							SELECT a.PriceListId, ActivationDate, ISNULL(ExpirationDate, @GetDate), b.Precedence,tsw.SKU
							FROM ZnodePriceList AS a INNER JOIN ZnodePriceListPortal AS b ON a.PriceListId = b.PriceListId
								INNER JOIN ZnodePortalunit AS zupu ON a.CultureId = zupu.CultureId AND  zupu.PortalId = b.PortalId    
								inner join #Tbl_SKUWisePriceList tsw  ON a.PriceListId = tsw.PriceListId
								AND NOT EXISTS (Select TOP 1 1 FROM  #Tbl_PortalWisePriceList tpwl WHERE tpwl.SKU = tsw.SKU )
								WHERE @CurrentUtcDate BETWEEN a.ActivationDate AND ISNULL(a.ExpirationDate, @GetDate) AND b.PortalId = @PortalId
							    ORDER BY b.Precedence
								;
								--Delete from #Tbl_SKUWisePriceList where PriceListId in (Select PriceListId from  #Tbl_PortalWisePriceList )
                         END;
						 
				--IF Exists (Select top 1 1  FROM #Tbl_SKUWisePriceList tspl where NOT Exists (SELECT TOP 1 1 FROM #Tbl_PortalWisePriceList tpwl
				--WHERE tspl.SKU = tpwl.SKU))
				--BEGIN
				
				--	INSERT INTO #Tbl_PortalWisePriceList( PriceListId, ActivationDate, ExpirationDate, Precedence,SKU )
				--	SELECT a.PriceListId, ActivationDate, ISNULL(ExpirationDate, @GetDate), b.Precedence,tsw.SKU
				--	FROM ZnodePriceList AS a INNER JOIN ZnodePriceListProfile AS b ON a.PriceListId = b.PriceListId INNER JOIN ZnodePortalProfile AS c
				--	ON b.ProfileId = c.ProfileId AND  c.IsDefaultAnonymousProfile = 1 INNER JOIN ZnodePortalunit AS zupu ON a.CurrencyId = zupu.CurrencyId
				--	inner join #Tbl_SKUWisePriceList tsw  ON a.PriceListId = tsw.PriceListId
				--	AND NOT EXISTS (Select TOP 1 1 FROM  #Tbl_PortalWisePriceList tpwl WHERE tpwl.SKU = tsw.SKU )
				--	WHERE @CurrentUtcDate BETWEEN a.ActivationDate AND ISNULL(a.ExpirationDate, @GetDate) AND c.PortalId = @PortalId;
				--END

                 END;
			
             SET @PriceListId = 0;
             -- Check Activation date and expiry date 
             IF EXISTS( SELECT TOP 1 1 FROM #Tbl_PortalWisePriceList)
                 BEGIN
				
                     -- Declare  @d datetime
                     -- SET @d = @GetDate
                     -- Select ISNULL(ActivationDate,@d)  , ISNULL( ExpirationDate,@GetDate ),b.Precedence,* from ZnodePriceList  a inner join ZnodePriceListPortal b on a.PriceListId = b.PriceListId where @d between ISNULL(ActivationDate,@d) 
                     -- and ISNULL(ExpirationDate,@GetDate ) --and a.PriceListId <>  80
                     -- Order by ISNULL(ActivationDate,@d)  , ISNULL( ExpirationDate,@GetDate ) ,  b.Precedence DESC 
                     --	Retrive pricelist wise price
                   INSERT INTO #Tbl_PriceListWisePriceData( PriceListId, SKU, SalesPrice, RetailPrice, UomId, UnitSize, ActivationDate, ExpirationDate, TierPrice, TierQuantity, TierUomId, TierUnitSize , ExternalId ,Custom1,Custom2,Custom3)
				   SELECT ZP.PriceListId, ZP.SKU, ZP.SalesPrice, ZP.RetailPrice, ZP.UomId, ZP.UnitSize, ISNULL(ZP.ActivationDate, @CurrentUtcDate), ISNULL(ZP.ExpirationDate, @GetDate), ZPT.Price, ZPT.Quantity, ZPT.UomId, ZPT.UnitSize, ZP.ExternalId,
				   ZPT.Custom1,ZPT.Custom2,ZPT.Custom3
				   FROM [ZnodePrice] AS ZP 
				   INNER JOIN @Tlb_SKU AS TSKU ON (SELECT ''+ZP.SKU FOR XML PATH ('')) = TSKU.SKU 
				   LEFT OUTER JOIN ZnodePriceTier AS ZPT ON ZP.SKU = ZPT.SKU AND ZP.PriceListId = ZPT.PriceListId
				   WHERE ZP.PriceListId IN
				   (
					   SELECT TOP 1 PriceListId
					   FROM #Tbl_PortalWisePriceList AS TBPWPL
					   WHERE  TBPWPL.SKU = ZP.SKU
					   ORDER BY Precedence 
				   );
				  


                     -- Check Activation date and expiry date 
                    INSERT INTO #TLB_SKUPRICELIST( PriceListId, SKU, RetailPrice, SalesPrice, TierPrice, TierQuantity, ExternalId,Custom1,Custom2,Custom3 )
					   SELECT DISTINCT  PriceListId, SKU, RetailPrice, SalesPrice, TierPrice, TierQuantity, ExternalId,Custom1,Custom2,Custom3
					   FROM #Tbl_PriceListWisePriceData
					   WHERE @currentUtcDate BETWEEN ActivationDate AND ISNULL(ExpirationDate, @GetDate);
					   
					  
					INSERT INTO #TLB_SKUPRICELIST( PriceListId, SKU, RetailPrice, SalesPrice, TierPrice, TierQuantity, ExternalId ,Custom1,Custom2,Custom3)
					   SELECT PriceListId, SKU, RetailPrice, SalesPrice, TierPrice, TierQuantity, ExternalId,Custom1,Custom2,Custom3
					   FROM #Tbl_PriceListWisePriceData
					   WHERE SKU NOT IN(SELECT SKU FROM #TLB_SKUPRICELIST) and ActivationDate is null 
				
                 END;
                     -- Retrive data as per precedance from ZnodePriceListPortal table  
					
             ELSE
                 BEGIN
                     SET @PriceListId =( SELECT TOP 1 PriceListId FROM #Tbl_PortalWisePriceList ORDER BY Precedence  );

                     --Retrive pricelist wise price  
                     INSERT INTO #Tbl_PriceListWisePriceData( PriceListId, SKU, SalesPrice, RetailPrice, UomId, UnitSize, ActivationDate, ExpirationDate, TierPrice, TierQuantity, TierUomId, TierUnitSize, ExternalId ,Custom1,Custom2,Custom3)
					 SELECT ZP.PriceListId, ZP.SKU, ZP.SalesPrice, ZP.RetailPrice, ZP.UomId, ZP.UnitSize, ISNULL(ZP.ActivationDate, @CurrentUtcDate), 
							ISNULL(ZP.ExpirationDate, @GetDate), ZPT.Price, ZPT.Quantity, ZPT.UomId, ZPT.UnitSize, zp.ExternalId,Custom1,Custom2,Custom3
					 FROM [ZnodePrice] AS ZP INNER JOIN @Tlb_SKU AS TSKU ON ZP.SKU = TSKU.SKU LEFT OUTER JOIN ZnodePriceTier AS ZPT ON ZP.SKU = ZPT.SKU AND 
							   ZP.PriceListId = ZPT.PriceListId WHERE ZP.PriceListId = @PriceListId; 

                     -- Check Activation date and expiry date 
					INSERT INTO #TLB_SKUPRICELIST( PriceListId, SKU, RetailPrice, SalesPrice, TierPrice, TierQuantity, ExternalId ,Custom1,Custom2,Custom3)
					SELECT PriceListId, SKU, RetailPrice, SalesPrice, TierPrice, TierQuantity, ExternalId,Custom1,Custom2,Custom3
					FROM #Tbl_PriceListWisePriceData WHERE @currentUtcDate BETWEEN ActivationDate AND ISNULL(ExpirationDate, @GetDate);
					
					INSERT INTO #TLB_SKUPRICELIST( PriceListId, SKU, RetailPrice, SalesPrice, TierPrice, TierQuantity, ExternalId ,Custom1,Custom2,Custom3)
					SELECT PriceListId, SKU, RetailPrice, SalesPrice, TierPrice, TierQuantity, ExternalId,Custom1,Custom2,Custom3
					FROM #Tbl_PriceListWisePriceData
					WHERE SKU NOT IN ( SELECT SKU FROM #TLB_SKUPRICELIST) and ActivationDate is null;

                 END;
             SELECT SKU,
                    ROUND(RetailPrice, @PriceRoundOff) AS RetailPrice,
                    ROUND(SalesPrice, @PriceRoundOff) AS SalesPrice,
                    ROUND(TierPrice, @PriceRoundOff) AS TierPrice,
                    ROUND(TierQuantity, @PriceRoundOff) AS TierQuantity,
					ZCC.CurrencyCode  AS CurrencyCode,    
                    ZC.Symbol AS CurrencySuffix,  ZC.CultureCode,
					TSPL.ExternalId,
					Custom1,Custom2,Custom3
             FROM #TLB_SKUPRICELIST AS TSPL
                  INNER JOIN ZnodePriceList AS ZPL ON TSPL.PriceListId = ZPL.PriceListId
                  INNER JOIN ZnodeCulture AS ZC ON ZPL.CultureId = ZC.CultureId    
				  LEFT JOIN ZnodeCurrency AS ZCC ON ZC.CurrencyId = ZCC.CurrencyId   
				  ORDER BY TierQuantity ASC;
         END TRY
         BEGIN CATCH
              DECLARE @Status BIT ;
			SET @Status = 0;
			DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPublishProductPricingBySku @SKU = '+@SKU+',@PortalId = '+CAST(@PortalId AS VARCHAR(10))+',@currentUtcDate = '+@currentUtcDate+',@UserId='+CAST(@UserId AS VARCHAR(100))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
			SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
			EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetPublishProductPricingBySku',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_InsertUpdateSaveCartLineItemQuantity')
BEGIN 
	DROP PROCEDURE Znode_InsertUpdateSaveCartLineItemQuantity
END
GO
CREATE PROCEDURE [dbo].[Znode_InsertUpdateSaveCartLineItemQuantity](
	  @CartLineItemXML xml, @UserId int,@Status bit OUT )
AS 
   /* 
    Summary: THis Procedure is USed to save and edit the saved cart line item      
    Unit Testing 
	begin tran  
    Exec Znode_InsertUpdateSaveCartLineItem @CartLineItemXML= '<ArrayOfSavedCartLineItemModel>
  <SavedCartLineItemModel>
    <OmsSavedCartLineItemId>0</OmsSavedCartLineItemId>
    <ParentOmsSavedCartLineItemId>0</ParentOmsSavedCartLineItemId>
    <OmsSavedCartId>1259</OmsSavedCartId>
    <SKU>BlueGreenYellow</SKU>
    <Quantity>1.000000</Quantity>
    <OrderLineItemRelationshipTypeId>0</OrderLineItemRelationshipTypeId>
    <Sequence>1</Sequence>
    <AddonProducts>YELLOW</AddonProducts>
    <BundleProducts />
    <ConfigurableProducts>GREEN</ConfigurableProducts>
  </SavedCartLineItemModel>
  <SavedCartLineItemModel>
    <OmsSavedCartLineItemId>0</OmsSavedCartLineItemId>
    <ParentOmsSavedCartLineItemId>0</ParentOmsSavedCartLineItemId>
    <OmsSavedCartId>1259</OmsSavedCartId>
    <SKU>ap1534</SKU>
    <Quantity>1.0</Quantity>
    <OrderLineItemRelationshipTypeId>0</OrderLineItemRelationshipTypeId>
    <Sequence>2</Sequence>
    <AddonProducts >PINK</AddonProducts>
    <BundleProducts />
    <ConfigurableProducts />
    <PersonaliseValuesList>Address~Hello</PersonaliseValuesList>
  </SavedCartLineItemModel>
</ArrayOfSavedCartLineItemModel>' , @UserId=1 ,@Status=0
	rollback tran
*/
BEGIN
	BEGIN TRAN InsertUpdateSaveCartLineItem;
	BEGIN TRY
		SET NOCOUNT ON;
		DECLARE @GetDate datetime= dbo.Fn_GetDate();
		DECLARE @AddOnQuantity numeric(28, 6)= 0;
		DECLARE @IsAddProduct   BIT = 0 
		DECLARE @OmsSavedCartLineItemId INT = 0
		DECLARE @TBL_SavecartLineitems TABLE
		( 
			RowId int , OmsSavedCartLineItemId int, ParentOmsSavedCartLineItemId int, OmsSavedCartId int, SKU nvarchar(600), Quantity numeric(28, 6), OrderLineItemRelationshipTypeID int, CustomText nvarchar(max), 
			CartAddOnDetails nvarchar(max), Sequence int, AddOnValueIds varchar(max), BundleProductIds varchar(max), ConfigurableProductIds varchar(max), GroupProductIds varchar(max), PersonalisedAttribute XML, 
			AutoAddon varchar(max), OmsOrderId int, ItemDetails nvarchar(max),
			Custom1	nvarchar(max),Custom2 nvarchar(max),Custom3 nvarchar(max),Custom4
			nvarchar(max),Custom5 nvarchar(max),GroupId NVARCHAR(max) ,ProductName Nvarchar(1000) , Description NVARCHAR(max),AddOnQuantity NVARCHAR(max)
		);

		DECLARE @OrderLineItemRelationshipTypeIdAddon int =
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'AddOns'
		);
		DECLARE @OrderLineItemRelationshipTypeIdSimple int =
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'Simple'
		);
		DECLARE @OrderLineItemRelationshipTypeIdGroup int=
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'Group'
		);
		DECLARE @OrderLineItemRelationshipTypeIdConfigurable int=
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'Configurable'
		);
		 DECLARE @OrderLineItemRelationshipTypeIdBundle int=
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'Bundles'
		);
		INSERT INTO @TBL_SavecartLineitems( RowId,OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, Sequence, AddOnValueIds, BundleProductIds, ConfigurableProductIds, GroupProductIds, PersonalisedAttribute, AutoAddon, OmsOrderId, ItemDetails,
		Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,ProductName,Description,AddOnQuantity )
			   SELECT DENSE_RANK()Over(Order BY Tbl.Col.value( 'SKU[1]', 'NVARCHAR(2000)' )) RowId ,Tbl.Col.value( 'OmsSavedCartLineItemId[1]', 'NVARCHAR(2000)' ) AS OmsSavedCartLineItemId, Tbl.Col.value( 'ParentOmsSavedCartLineItemId[1]', 'NVARCHAR(2000)' ) AS ParentOmsSavedCartLineItemId, Tbl.Col.value( 'OmsSavedCartId[1]', 'NVARCHAR(2000)' ) AS OmsSavedCartId, Tbl.Col.value( 'SKU[1]', 'NVARCHAR(2000)' ) AS SKU, Tbl.Col.value( 'Quantity[1]', 'NVARCHAR(2000)' ) AS Quantity
			   , Tbl.Col.value( 'OrderLineItemRelationshipTypeID[1]', 'NVARCHAR(2000)' ) AS OrderLineItemRelationshipTypeID, Tbl.Col.value( 'CustomText[1]', 'NVARCHAR(2000)' ) AS CustomText, Tbl.Col.value( 'CartAddOnDetails[1]', 'NVARCHAR(2000)' ) AS CartAddOnDetails, Tbl.Col.value( 'Sequence[1]', 'NVARCHAR(2000)' ) AS Sequence, Tbl.Col.value( 'AddonProducts[1]', 'NVARCHAR(2000)' ) AS AddOnValueIds, ISNULL(Tbl.Col.value( 'BundleProducts[1]', 'NVARCHAR(2000)' ),'') AS BundleProductIds, ISNULL(Tbl.Col.value( 'ConfigurableProducts[1]', 'NVARCHAR(2000)' ),'') AS ConfigurableProductIds, ISNULL(Tbl.Col.value( 'GroupProducts[1]', 'NVARCHAR(Max)' ),'') AS GroupProductIds, 
			          Tbl.Col.query('(PersonaliseValuesDetail/node())') AS PersonaliseValuesDetail, Tbl.Col.value( 'AutoAddon[1]', 'NVARCHAR(Max)' ) AS AutoAddon, Tbl.Col.value( 'OmsOrderId[1]', 'NVARCHAR(Max)' ) AS OmsOrderId,
					  Tbl.Col.value( 'ItemDetails[1]', 'NVARCHAR(Max)' ) AS ItemDetails,
					  Tbl.Col.value( 'Custom1[1]', 'NVARCHAR(Max)' ) AS Custom1,
					  Tbl.Col.value( 'Custom2[1]', 'NVARCHAR(Max)' ) AS Custom2,
					  Tbl.Col.value( 'Custom3[1]', 'NVARCHAR(Max)' ) AS Custom3,
					  Tbl.Col.value( 'Custom4[1]', 'NVARCHAR(Max)' ) AS Custom4,
					  Tbl.Col.value( 'Custom5[1]', 'NVARCHAR(Max)' ) AS Custom5,
					  Tbl.Col.value( 'GroupId[1]', 'NVARCHAR(Max)' ) AS GroupId,
					  Tbl.Col.value( 'ProductName[1]', 'NVARCHAR(Max)' ) AS ProductName,
					  Tbl.Col.value( 'Description[1]', 'NVARCHAR(Max)' ) AS Description, 
					  Tbl.Col.value( 'AddOnQuantity[1]', 'NVARCHAR(2000)' ) AS AddOnQuantity
			   FROM @CartLineItemXML.nodes( '//ArrayOfSavedCartLineItemModel/SavedCartLineItemModel' ) AS Tbl(Col);
			  

			  IF OBJECT_ID('tempdb..#TBL_SavecartLineitems') is not null
				drop table #TBL_SavecartLineitems

			 IF OBJECT_ID('tempdb..#OldValueForAddon') is not null
				drop table #OldValueForAddon

			  SELECT * INTO #TBL_SavecartLineitems FROM @TBL_SavecartLineitems
			

			UPDATE ZnodeOmsSavedCart
			SET ModifiedDate = GETDATE()
			WHERE OmsSavedCartId = (SELECT TOP 1  OmsSavedCartId FROM @TBL_SavecartLineitems)
				

			  UPDATE  @TBL_SavecartLineitems
			  SET 	Description = ISNUll(Description,'') 

			IF EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems WHERE BundleProductIds <> '' )
			 BEGIN 				
				 IF EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems WHERE BundleProductIds <> '' AND OmsSavedCartLineItemId <> 0  ) 
				 BEGIN 
				    SET @OmsSavedCartLineItemId  = (SELECT TOP 1 OmsSavedCartLineItemId FROM @TBL_SavecartLineitems WHERE BundleProductIds <> '' AND OmsSavedCartLineItemId <> 0 )

					UPDATE ZnodeOmsSavedCartLineItem 
					SET Quantity = (SELECT TOP 1 Quantity FROM @TBL_SavecartLineitems WHERE BundleProductIds <> '' AND OmsSavedCartLineItemId <> 0)
					WHERE ( OmsSavedCartLineItemId = @OmsSavedCartLineItemId  
					OR ParentOmsSavedCartLineItemId =  @OmsSavedCartLineItemId   ) 
					 
					--UPDATE ZnodeOmsSavedCartLineItem 
					--SET Quantity = (SELECT TOP 1 AddOnQuantity FROM @TBL_SavecartLineitems WHERE BundleProductIds <> '' AND OmsSavedCartLineItemId <> 0)
					--WHERE ParentOmsSavedCartLineItemId = @OmsSavedCartLineItemId  
					--AND OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdAddon
					UPDATE ZnodeOmsSavedCartLineItem 
					SET Quantity = AddOnQuantity
					FROM ZnodeOmsSavedCartLineItem ZOSCLI
					INNER JOIN @TBL_SavecartLineitems SCLI ON ZOSCLI.ParentOmsSavedCartLineItemId = SCLI.OmsSavedCartLineItemId AND ZOSCLI.OmsSavedCartId = SCLI.OmsSavedCartId AND ZOSCLI.SKU = SCLI.AddOnValueIds
					WHERE ZOSCLI.OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdAddon
					AND SCLI.BundleProductIds <> ''

					DELETE	FROM @TBL_SavecartLineitems WHERE BundleProductIds <> '' AND OmsSavedCartLineItemId <> 0
				 END 
				  DECLARE @TBL_bundleProduct TT_SavecartLineitems 
				  INSERT INTO @TBL_bundleProduct 
				  SELECT *  
				  FROM @TBL_SavecartLineitems 
				  WHERE ISNULL(BundleProductIds,'') <> '' 
				
				  EXEC Znode_InsertUpdateSaveCartLineItemBundle @TBL_bundleProduct,@userId
				 
				  DELETE FROM  @TBL_SavecartLineitems WHERE ISNULL(BundleProductIds,'') <> '' 
				  SET @OmsSavedCartLineItemId = 0 
				END 
			IF EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems WHERE ConfigurableProductIds <> '' )
			    BEGIN 				
				 IF EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems WHERE ConfigurableProductIds <> '' AND OmsSavedCartLineItemId <> 0  ) 
				 BEGIN 

				   SET @OmsSavedCartLineItemId  = (SELECT TOP 1 OmsSavedCartLineItemId FROM @TBL_SavecartLineitems WHERE ConfigurableProductIds <> '' AND OmsSavedCartLineItemId <> 0 )
				 
				   	UPDATE ZnodeOmsSavedCartLineItem 
					SET Quantity = (SELECT TOP 1 Quantity FROM @TBL_SavecartLineitems WHERE ConfigurableProductIds <> '' AND OmsSavedCartLineItemId = @OmsSavedCartLineItemId )
					WHERE OmsSavedCartLineItemId = @OmsSavedCartLineItemId
					
					--UPDATE ZnodeOmsSavedCartLineItem 
					--SET Quantity = (SELECT TOP 1 AddOnQuantity FROM @TBL_SavecartLineitems WHERE  ConfigurableProductIds <> '' AND OmsSavedCartLineItemId <> 0)
					--WHERE ParentOmsSavedCartLineItemId = @OmsSavedCartLineItemId  
					--AND OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdAddon
					UPDATE ZnodeOmsSavedCartLineItem 
					SET Quantity = AddOnQuantity
					FROM ZnodeOmsSavedCartLineItem ZOSCLI
					INNER JOIN @TBL_SavecartLineitems SCLI ON ZOSCLI.ParentOmsSavedCartLineItemId = SCLI.OmsSavedCartLineItemId AND ZOSCLI.OmsSavedCartId = SCLI.OmsSavedCartId AND ZOSCLI.SKU = SCLI.AddOnValueIds
					WHERE ZOSCLI.OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdAddon
					AND SCLI.ConfigurableProductIds <> ''

					DELETE	FROM @TBL_SavecartLineitems WHERE ConfigurableProductIds <> '' AND OmsSavedCartLineItemId <> 0
				 END 
				  DECLARE @TBL_Configurable TT_SavecartLineitems 
				  INSERT INTO @TBL_Configurable 
				  SELECT *  
				  FROM @TBL_SavecartLineitems 
				  WHERE ISNULL(ConfigurableProductIds,'') <> '' 

				  
				  EXEC Znode_InsertUpdateSaveCartLineItemConfigurable @TBL_Configurable,@userId
				  
				  DELETE FROM @TBL_SavecartLineitems 
				  WHERE ISNULL(ConfigurableProductIds,'') <> ''
				  SET @OmsSavedCartLineItemId = 0  
				END 
				IF EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems WHERE GroupProductIds <> '' )
			    BEGIN 				
				 IF EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems WHERE GroupProductIds <> '' AND OmsSavedCartLineItemId <> 0  ) 
				 BEGIN 
				   SET @OmsSavedCartLineItemId  = (SELECT TOP 1 OmsSavedCartLineItemId FROM @TBL_SavecartLineitems WHERE GroupProductIds <> '' AND OmsSavedCartLineItemId <> 0 )
				   	UPDATE ZnodeOmsSavedCartLineItem 
					SET Quantity = (SELECT TOP 1 Quantity FROM @TBL_SavecartLineitems WHERE GroupProductIds <> '' AND OmsSavedCartLineItemId = @OmsSavedCartLineItemId )
					WHERE OmsSavedCartLineItemId = @OmsSavedCartLineItemId
					
					--UPDATE ZnodeOmsSavedCartLineItem 
					--SET Quantity = (SELECT TOP 1 AddOnQuantity FROM @TBL_SavecartLineitems WHERE GroupProductIds <> '' AND  OmsSavedCartLineItemId <> 0)
					--WHERE ParentOmsSavedCartLineItemId = @OmsSavedCartLineItemId  
					--AND OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdAddon
					UPDATE ZnodeOmsSavedCartLineItem 
					SET Quantity = AddOnQuantity
					FROM ZnodeOmsSavedCartLineItem ZOSCLI
					INNER JOIN @TBL_SavecartLineitems SCLI ON ZOSCLI.ParentOmsSavedCartLineItemId = SCLI.OmsSavedCartLineItemId AND ZOSCLI.OmsSavedCartId = SCLI.OmsSavedCartId AND ZOSCLI.SKU = SCLI.AddOnValueIds
					WHERE ZOSCLI.OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdAddon
					AND SCLI.GroupProductIds <> ''

					DELETE	FROM @TBL_SavecartLineitems WHERE GroupProductIds <> '' AND OmsSavedCartLineItemId <> 0
				 END 
				  DECLARE @TBL_Group TT_SavecartLineitems 
				  INSERT INTO @TBL_Group 
				  SELECT *  
				  FROM @TBL_SavecartLineitems 
				  WHERE ISNULL(GroupProductIds,'') <> '' 

				
				  EXEC Znode_InsertUpdateSaveCartLineItemGroup @TBL_Group,@userId
				  
				  DELETE FROM @TBL_SavecartLineitems 
				  WHERE ISNULL(GroupProductIds,'') <> ''
				  SET @OmsSavedCartLineItemId = 0  
				END 
				 
                IF EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems WHERE  OmsSavedCartLineItemId <> 0  ) 
				 BEGIN 
				 
				   SET @OmsSavedCartLineItemId  = (SELECT TOP 1 OmsSavedCartLineItemId FROM @TBL_SavecartLineitems WHERE  OmsSavedCartLineItemId <> 0 )
				   	UPDATE ZnodeOmsSavedCartLineItem 
					SET Quantity = (SELECT TOP 1 Quantity FROM @TBL_SavecartLineitems WHERE  OmsSavedCartLineItemId = @OmsSavedCartLineItemId )
					WHERE OmsSavedCartLineItemId = @OmsSavedCartLineItemId
				
				 --   UPDATE ZnodeOmsSavedCartLineItem 
					--SET Quantity = (SELECT TOP 1 AddOnQuantity FROM @TBL_SavecartLineitems WHERE  OmsSavedCartLineItemId <> 0)
					--WHERE ParentOmsSavedCartLineItemId = @OmsSavedCartLineItemId  
					--AND OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdAddon
					UPDATE ZnodeOmsSavedCartLineItem 
					SET Quantity = AddOnQuantity
					FROM ZnodeOmsSavedCartLineItem ZOSCLI
					INNER JOIN @TBL_SavecartLineitems SCLI ON ZOSCLI.ParentOmsSavedCartLineItemId = @OmsSavedCartLineItemId AND ZOSCLI.OmsSavedCartId = SCLI.OmsSavedCartId AND ZOSCLI.SKU = SCLI.AddOnValueIds
					WHERE ZOSCLI.OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdAddon
					
					DELETE	FROM @TBL_SavecartLineitems WHERE OmsSavedCartLineItemId <> 0
				 END 
			 
			

			  DECLARE @OmsInsertedData TABLE (OmsSavedCartLineItemId INT )
			  DECLARE @TBL_Personalise TABLE (OmsSavedCartLineItemId INT ,PersonalizeCode NVARCHAr(max),PersonalizeValue NVARCHAr(max),DesignId NVARCHAr(max), ThumbnailURL NVARCHAr(max))
			  INSERT INTO @TBL_Personalise
			  SELECT  NULL 
							,Tbl.Col.value( 'PersonalizeCode[1]', 'NVARCHAR(Max)' ) AS PersonalizeCode
			  		  ,Tbl.Col.value( 'PersonalizeValue[1]', 'NVARCHAR(Max)' ) AS PersonalizeValue
					  ,Tbl.Col.value( 'DesignId[1]', 'NVARCHAR(Max)' ) AS DesignId
					  ,Tbl.Col.value( 'ThumbnailURL[1]', 'NVARCHAR(Max)' ) AS ThumbnailURL
			  FROM (SELECT TOP 1 PersonalisedAttribute Valuex FROM  @TBL_SavecartLineitems TRTR  ) a 
			  CROSS APPLY	a.Valuex.nodes( '//PersonaliseValueModel' ) AS Tbl(Col) 
			  
			   ----To update saved cart item personalise value from given line item
			  DECLARE @TBL_Personalise1 TABLE (OmsSavedCartLineItemId INT ,PersonalizeCode NVARCHAr(max),PersonalizeValue NVARCHAr(max),DesignId NVARCHAr(max), ThumbnailURL NVARCHAr(max))
			  INSERT INTO @TBL_Personalise1
			  SELECT  a.OmsSavedCartLineItemId 
					  ,Tbl.Col.value( 'PersonalizeCode[1]', 'NVARCHAR(Max)' ) AS PersonalizeCode
			  		  ,Tbl.Col.value( 'PersonalizeValue[1]', 'NVARCHAR(Max)' ) AS PersonalizeValue
					  ,Tbl.Col.value( 'DesignId[1]', 'NVARCHAR(Max)' ) AS DesignId
					  ,Tbl.Col.value( 'ThumbnailURL[1]', 'NVARCHAR(Max)' ) AS ThumbnailURL
			  FROM (SELECT TOP 1 OmsSavedCartLineItemId,PersonalisedAttribute Valuex FROM  #TBL_SavecartLineitems TRTR ) a 
			  CROSS APPLY	a.Valuex.nodes( '//PersonaliseValueModel' ) AS Tbl(Col)  
		    
			
			  CREATE TABLE #tempoi (GenId INT IDENTITY(1,1),RowId	int	,OmsSavedCartLineItemId	int	 ,ParentOmsSavedCartLineItemId	int,OmsSavedCartId	int
									,SKU	nvarchar(max) ,Quantity	numeric(28,6)	,OrderLineItemRelationshipTypeID	int	,CustomText	nvarchar(max)
									,CartAddOnDetails	nvarchar(max),Sequence	int	,AutoAddon	varchar(max)	,OmsOrderId	int	,ItemDetails	nvarchar(max)
									,Custom1	nvarchar(max)  ,Custom2	nvarchar(max),Custom3	nvarchar(max),Custom4	nvarchar(max),Custom5	nvarchar(max)
									,GroupId	nvarchar(max) ,ProductName	nvarchar(max),Description	nvarchar(max),Id	int,ParentSKU NVARCHAR(max))
				   
			   INSERT INTO #tempoi
			   SELECT  Min(RowId )RowId ,OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, SKU
					,Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, Sequence
					,AutoAddon, OmsOrderId, ItemDetails,Custom1,Custom2,Custom3,Custom4,Custom5,  GroupId ,ProductName,min(Description)Description	,0 Id,NULL ParentSKU 
			   FROM @TBL_SavecartLineitems a 
			   GROUP BY  OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, SKU
					,Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, Sequence
					,AutoAddon, OmsOrderId, ItemDetails,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,ProductName
			  
			   INSERT INTO #tempoi
			   SELECT  Min(RowId )RowId ,OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, SKU
					,Quantity, @OrderLineItemRelationshipTypeIdSimple, CustomText, CartAddOnDetails, Sequence
					,AutoAddon, OmsOrderId, ItemDetails,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,ProductName,min(Description)Description	,1 Id,SKU ParentSKU 
			   FROM @TBL_SavecartLineitems  a 
			   WHERE ISNULL(BundleProductIds,'') =  '' 
			   AND  ISNULL(GroupProductIds,'') = ''	AND ISNULL(	ConfigurableProductIds,'') = ''
			   	   GROUP BY  OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, SKU
					,Quantity,  CustomText, CartAddOnDetails, Sequence
					,AutoAddon, OmsOrderId, ItemDetails,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,ProductName
			  
     		   INSERT INTO #tempoi
			   SELECT  Min(RowId )RowId ,OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, AddOnValueIds
					,AddOnQuantity, @OrderLineItemRelationshipTypeIdAddon, CustomText, CartAddOnDetails, Sequence
					,AutoAddon, OmsOrderId, ItemDetails,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,ProductName,min(Description)Description	,1 Id 
					,CASE WHEN ConfigurableProductIds <> ''  THEN ConfigurableProductIds
					WHEN  GroupProductIds <> '' THEN GroupProductIds 
					WHEN BundleProductIds <> '' THEN BundleProductIds 
					 ELSE SKU END     ParentSKU 
			   FROM @TBL_SavecartLineitems  a 
			   WHERE AddOnValueIds <> ''
			   	   GROUP BY  OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, AddOnValueIds
					,AddOnQuantity,  CustomText, CartAddOnDetails, Sequence ,ConfigurableProductIds,GroupProductIds,	BundleProductIds
					,AutoAddon, OmsOrderId, ItemDetails,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,ProductName,SKU
           --hack
		
		 CREATE TABLE #OldValue (OmsSavedCartId INT ,OmsSavedCartLineItemId INT,ParentOmsSavedCartLineItemId INT , SKU  NVARCHAr(2000),OrderLineItemRelationshipTypeID INT  )
		 
		INSERT INTO #OldValue  
		SELECT  a.OmsSavedCartId,a.OmsSavedCartLineItemId,a.ParentOmsSavedCartLineItemId , a.SKU  ,a.OrderLineItemRelationshipTypeID 
	  	FROM ZnodeOmsSavedCartLineItem a   
		WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems  TY WHERE TY.OmsSavedCartId = a.OmsSavedCartId AND ISNULL(a.SKU,'') = ISNULL(TY.SKU,'')   )   
        AND a.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdSimple   

			

		INSERT INTO #OldValue 
		SELECT DISTINCT b.OmsSavedCartId,b.OmsSavedCartLineItemId,b.ParentOmsSavedCartLineItemId , b.SKU  ,b.OrderLineItemRelationshipTypeID  
		FROM ZnodeOmsSavedCartLineItem b 
		INNER JOIN #OldValue c ON (c.ParentOmsSavedCartLineItemId  = b.OmsSavedCartLineItemId AND c.OmsSavedCartId = b.OmsSavedCartId)
		WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems  TY WHERE TY.OmsSavedCartId = b.OmsSavedCartId AND ISNULL(b.SKU,'') = ISNULL(TY.SKU,'') AND ISNULL(b.Groupid,'-') = ISNULL(TY.Groupid,'-')  )
		AND  b.OrderLineItemRelationshipTypeID IS NULL 
		 
		DELETE a FROM #OldValue a WHERE NOT EXISTS (SELECT TOP 1 1  FROM #OldValue b WHERE b.ParentOmsSavedCartLineItemId IS NULL AND b.OmsSavedCartLineItemId = a.ParentOmsSavedCartLineItemId)
		AND a.ParentOmsSavedCartLineItemId IS NOT NULL 
		
		------Merge Addon for same product
		SELECT * INTO #OldValueForAddon from #OldValue
		
		INSERT INTO #OldValue 
		SELECT b.OmsSavedCartId,b.OmsSavedCartLineItemId,b.ParentOmsSavedCartLineItemId , b.SKU  ,b.OrderLineItemRelationshipTypeID  
		FROM ZnodeOmsSavedCartLineItem b 
		INNER JOIN #OldValue c ON (c.OmsSavedCartLineItemId  = b.ParentOmsSavedCartLineItemId AND c.OmsSavedCartId = b.OmsSavedCartId)
		WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems  TY WHERE TY.OmsSavedCartId = b.OmsSavedCartId AND ISNULL(b.SKU,'') = ISNULL(TY.AddOnValueIds,'') )
		AND  b.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon

		
		
		------Merge Addon for same product
		IF EXISTS(SELECT * FROM @TBL_SavecartLineitems WHERE ISNULL(AddOnValueIds,'') <> '' )
		BEGIN

			INSERT INTO #OldValueForAddon 
			SELECT b.OmsSavedCartId,b.OmsSavedCartLineItemId,b.ParentOmsSavedCartLineItemId , b.SKU  ,b.OrderLineItemRelationshipTypeID  
			FROM ZnodeOmsSavedCartLineItem b 
			INNER JOIN #OldValueForAddon c ON (c.OmsSavedCartLineItemId  = b.ParentOmsSavedCartLineItemId AND c.OmsSavedCartId = b.OmsSavedCartId)
			WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems  TY WHERE TY.OmsSavedCartId = b.OmsSavedCartId )--AND ISNULL(b.SKU,'') = ISNULL(TY.AddOnValueIds,'') )
			AND  b.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon

			SELECT distinct SKU, STUFF(
										( SELECT  ', ' + SKU FROM    
											( SELECT DISTINCT SKU FROM     #OldValueForAddon b 
											  where a.OmsSavedCartLineItemId=b.ParentOmsSavedCartLineItemId and OrderLineItemRelationshipTypeID = 1 ) x 
											  FOR XML PATH('')
										), 1, 2, ''
									 ) AddOns
			INTO #AddOnsExists
			from #OldValueForAddon a where a.ParentOmsSavedCartLineItemId is not null and OrderLineItemRelationshipTypeID<>1

			SELECT distinct a.SKU, STUFF(
										 ( SELECT  ', ' + x.AddOnValueIds FROM    
											( SELECT DISTINCT b.AddOnValueIds FROM @TBL_SavecartLineitems b
											  where a.SKU=b.SKU ) x
											  FOR XML PATH('')
										 ), 1, 2, ''
									   ) AddOns
			INTO #AddOnAdded
			from @TBL_SavecartLineitems a

			if not exists(select * from #AddOnsExists a inner join #AddOnAdded b on a.SKU = b.SKU and a.AddOns = b.AddOns )
			begin
				delete from #OldValue
			end

		END

		IF NOT EXISTS (SELECT TOP 1 1  FROM @TBL_SavecartLineitems ty WHERE EXISTS (SELECT TOP 1 1 FROM 	#OldValue a WHERE	
		ISNULL(TY.AddOnValueIds,'') = a.SKU AND  a.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon ))
		AND EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems WHERE ISNULL(AddOnValueIds,'')  <> '' )
		BEGIN 
		
		DELETE FROM #OldValue 
		END 
		ELSE 
		BEGIN 
	    
		 IF EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems WHERE ISNULL(AddOnValueIds,'')  <> '' )
		 BEGIN 
		 
		 DECLARE @parenTofAddon  TABLE( ParentOmsSavedCartLineItemId INT  )  
		 INSERT INTO  @parenTofAddon 
		 SELECT  ParentOmsSavedCartLineItemId FROM #OldValue WHERE OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon  

		 DELETE FROM #OldValue WHERE OmsSavedCartLineItemId NOT IN (SELECT ParentOmsSavedCartLineItemId FROM  @parenTofAddon)   
					AND ParentOmsSavedCartLineItemId IS NOT NULL  
					AND OrderLineItemRelationshipTypeID <> @OrderLineItemRelationshipTypeIdAddon

		 DELETE FROM #OldValue WHERE OmsSavedCartLineItemId NOT IN (SELECT ISNULL(m.ParentOmsSavedCartLineItemId,0) FROM #OldValue m)
		 AND ParentOmsSavedCartLineItemId IS  NULL  
		 
		 END 
		 ELSE IF (SELECT COUNT (OmsSavedCartLineItemId) FROM #OldValue WHERE ParentOmsSavedCartLineItemId IS NULL ) > 1 
		 BEGIN 

		 -- SELECT 3
		    DECLARE @TBL_deleteParentOmsSavedCartLineItemId TABLE (OmsSavedCartLineItemId INT )
			INSERT INTO @TBL_deleteParentOmsSavedCartLineItemId 
			SELECT ParentOmsSavedCartLineItemId
			FROM ZnodeOmsSavedCartLineItem a 
			WHERE ParentOmsSavedCartLineItemId IN (SELECT OmsSavedCartLineItemId FROM #OldValue WHERE OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdSimple  )
			AND OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon 

			DELETE FROM #OldValue WHERE OmsSavedCartLineItemId IN (SELECT OmsSavedCartLineItemId FROM @TBL_deleteParentOmsSavedCartLineItemId)
			OR ParentOmsSavedCartLineItemId IN (SELECT OmsSavedCartLineItemId FROM @TBL_deleteParentOmsSavedCartLineItemId)
		    
			 DELETE FROM #OldValue WHERE OmsSavedCartLineItemId NOT IN (SELECT ISNULL(m.ParentOmsSavedCartLineItemId,0) FROM #OldValue m)
		 AND ParentOmsSavedCartLineItemId IS  NULL  

		 END
		 ELSE IF  EXISTS (SELECT TOP 1 1 FROM ZnodeOmsSavedCartLineItem Wt WHERE EXISTS (SELECT TOP 1 1 FROM #OldValue ty WHERE ty.OmsSavedCartId = wt.OmsSavedCartId AND ty.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdSimple AND wt.ParentOmsSavedCartLineItemId= ty.OmsSavedCartLineItemId  ) AND wt.OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdAddon)
		      AND EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems WHERE ISNULL(AddOnValueIds,'')  = '' )
		 BEGIN 

		   DELETE FROM #OldValue
		 END 
		END 
			
	

		DECLARE @TBL_Personaloldvalues TABLE (OmsSavedCartLineItemId INT , PersonalizeCode NVARCHAr(max), PersonalizeValue NVARCHAr(max))
		INSERT INTO @TBL_Personaloldvalues
		SELECT OmsSavedCartLineItemId , PersonalizeCode, PersonalizeValue
		FROM ZnodeOmsPersonalizeCartItem  a 
		WHERE EXISTS (SELECT TOP 1 1 FROM #OldValue TY WHERE TY.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId)
		AND EXISTS (SELECT TOP 1 1 FROM @TBL_Personalise TU WHERE TU.PersonalizeCode = a.PersonalizeCode AND TU.PersonalizeValue = a.PersonalizeValue)
		
		

		IF  NOT EXISTS (SELECT TOP 1 1 FROM @TBL_Personaloldvalues)
		   AND EXISTS (SELECT TOP 1 1 FROM @TBL_Personalise )
		BEGIN 
		 DELETE FROM #OldValue
		END 
		ELSE 
		BEGIN 
		 IF EXISTS (SELECT TOP 1 1 FROM @TBL_Personaloldvalues)
		 AND (SELECT COUNT (DISTINCT OmsSavedCartLineItemId ) FROM #OldValue WHERE ParentOmsSavedCartLineItemId IS nULL ) > 1 
		 BEGIN 
		   
		   DELETE FROM #OldValue WHERE OmsSavedCartLineItemId IN (
		   SELECT OmsSavedCartLineItemId FROM #OldValue WHERE OmsSavedCartLineItemId NOT IN (SELECT OmsSavedCartLineItemId FROM @TBL_Personaloldvalues )
		   AND ParentOmsSavedCartLineItemId NOT IN (SELECT OmsSavedCartLineItemId FROM @TBL_Personaloldvalues ) ) 
		   OR OmsSavedCartLineItemId IN ( SELECT ParentOmsSavedCartLineItemId FROM #OldValue WHERE OmsSavedCartLineItemId NOT IN (SELECT OmsSavedCartLineItemId FROM @TBL_Personaloldvalues )
		   AND ParentOmsSavedCartLineItemId NOT IN (SELECT OmsSavedCartLineItemId FROM @TBL_Personaloldvalues ))
		   
		
		   
		 END 
		 ELSE IF NOT EXISTS (SELECT TOP 1 1 FROM @TBL_Personaloldvalues)
		 AND (SELECT COUNT (DISTINCT OmsSavedCartLineItemId ) FROM #OldValue WHERE ParentOmsSavedCartLineItemId IS nULL ) > 1 
		 BEGIN 
		   
		   

		   DELETE n FROM #OldValue n WHERE OmsSavedCartLineItemId  IN (SELECT OmsSavedCartLineItemId FROM ZnodeOmsPersonalizeCartItem WHERE n.OmsSavedCartLineItemId = ZnodeOmsPersonalizeCartItem.OmsSavedCartLineItemId  )
		   OR ParentOmsSavedCartLineItemId  IN (SELECT OmsSavedCartLineItemId FROM ZnodeOmsPersonalizeCartItem   )
		   
		  
		   
		 END 
		 ELSE IF NOT EXISTS (SELECT TOP 1 1  FROM @TBL_Personalise)
		        AND EXISTS (SELECT TOP 1 1 FROM ZnodeOmsPersonalizeCartItem m WHERE EXISTS (SELECT Top 1 1 FROM #OldValue YU WHERE YU.OmsSavedCartLineItemId = m.OmsSavedCartLineItemId )) 
		       AND (SELECT COUNT (DISTINCT OmsSavedCartLineItemId ) FROM #OldValue WHERE ParentOmsSavedCartLineItemId IS nULL ) = 1
		 BEGIN 
		     DELETE FROM #OldValue WHERE NOT EXISTS (SELECT TOP 1 1  FROM @TBL_Personalise)
		 END 


		  
		END 

		--------If lineitem present in ZnodeOmsPersonalizeCartItem and personalize value is different for same line item then New lineItem will generate
		--------If lineitem present in ZnodeOmsPersonalizeCartItem and personalize value is same for same line item then Quantity will added
		;with cte as
		(
			SELECT b.OmsSavedCartLineItemId ,a.ParentOmsSavedCartLineItemId , a.SKU
					,Tbl.Col.value( 'PersonalizeCode[1]', 'NVARCHAR(Max)' ) AS PersonalizeCode
			  		,Tbl.Col.value( 'PersonalizeValue[1]', 'NVARCHAR(Max)' ) AS PersonalizeValue
					,Tbl.Col.value( 'DesignId[1]', 'NVARCHAR(Max)' ) AS DesignId
					,Tbl.Col.value( 'ThumbnailURL[1]', 'NVARCHAR(Max)' ) AS ThumbnailURL
			FROM @TBL_SavecartLineitems a 
			Inner Join #OldValue b on a.SKU = b.SKU
			CROSS APPLY a.PersonalisedAttribute.nodes( '//PersonaliseValueModel' ) AS Tbl(Col)  
			Inner join ZnodeOmsPersonalizeCartItem c on b.OmsSavedCartLineItemId = c.OmsSavedCartLineItemId
			WHERE a.OmsSavedCartLineItemId = 0
		)
		delete b1
		from cte a1		  
		Inner Join #OldValue b1 on a1.sku = b1.SKU
		where not exists(select * from ZnodeOmsPersonalizeCartItem c where a1.OmsSavedCartLineItemId = c.OmsSavedCartLineItemId and a1.PersonalizeValue = c.PersonalizeValue)

		IF EXISTS (SELECT TOP 1 1 FROM #OldValue )
		BEGIN 


		UPDATE a
		SET a.Quantity = a.Quantity+ty.Quantity,
		a.Custom1 = ty.Custom1,
		a.Custom2 = ty.Custom2,
		a.Custom3 = ty.Custom3,
		a.Custom4 = ty.Custom4,
		a.Custom5 = ty.Custom5
		FROM ZnodeOmsSavedCartLineItem a
		INNER JOIN #OldValue b ON (a.OmsSavedCartLineItemId = b.OmsSavedCartLineItemId)
		INNER JOIN #tempoi ty ON (ty.SKU = b.SKU)


		END 
		ELSE 
		BEGIN 
		
		
			   
    SELECT RowId, Id ,Row_number()Over(Order BY RowId, Id,GenId) NewRowId , ParentOmsSavedCartLineItemId ,OmsSavedCartId,SKU,Quantity,OrderLineItemRelationshipTypeId  
       ,CustomText,CartAddOnDetails,ROW_NUMBER()Over(Order BY NewId() ) Sequence ,AutoAddon  
       ,OmsOrderId,Custom1,Custom2,Custom3 ,Custom4 ,Custom5,GroupId,ProductName ,min(Description)Description  ,ParentSKU  
     INTO #yuuete   
     FROM  #tempoi  
     GROUP BY ParentOmsSavedCartLineItemId ,OmsSavedCartId,SKU,Quantity,OrderLineItemRelationshipTypeId  
       ,CustomText,CartAddOnDetails ,AutoAddon  
       ,OmsOrderId,Custom1,Custom2,Custom3 ,Custom4 ,Custom5,GroupId,ProductName ,RowId, Id ,GenId,ParentSKU   
     ORDER BY RowId, Id   
       	
			     
    DELETE FROM #yuuete WHERE Quantity <=0  
  
     ;WITH VTTY AS   
    (  
    SELECT m.RowId OldRowId , TY1.RowId , TY1.SKU   
       FROM #yuuete m  
    INNER JOIN  #yuuete TY1 ON TY1.SKU = m.ParentSKU   
    WHERE m.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon   
    )   
	
    UPDATE m1   
    SET m1.RowId = TYU.RowId  
    FROM #yuuete m1   
    INNER JOIN VTTY TYU ON (TYU.OldRowId = m1.RowId)  
        
    ;WITH VTRET AS   
    (  
    SELECT RowId,id,Min(NewRowId) NewRowId ,SKU ,ParentSKU ,OrderLineItemRelationshipTypeID  
    FROM #yuuete   
    GROUP BY RowId,id ,SKU ,ParentSKU ,OrderLineItemRelationshipTypeID
	Having  SKU = ParentSKU  AND OrderLineItemRelationshipTypeID <> @OrderLineItemRelationshipTypeIdSimple
    )   
    
    DELETE FROM #yuuete WHERE NewRowId IN (SELECT NewRowId FROM VTRET)  
	
	

	
     
       INSERT INTO  ZnodeOmsSavedCartLineItem (ParentOmsSavedCartLineItemId ,OmsSavedCartId,SKU,Quantity,OrderLineItemRelationshipTypeId  
       ,CustomText,CartAddOnDetails,Sequence,CreatedBY,CreatedDate,ModifiedBy ,ModifiedDate,AutoAddon  
       ,OmsOrderId,Custom1,Custom2,Custom3 ,Custom4 ,Custom5,GroupId,ProductName ,Description)  
       OUTPUT INSERTED.OmsSavedCartLineItemId  INTO @OmsInsertedData 
	   SELECT NULL ,OmsSavedCartId,SKU,Quantity,OrderLineItemRelationshipTypeId  
       ,CustomText,CartAddOnDetails,ROW_NUMBER()Over(Order BY NewRowId)  sequence,@UserId,@GetDate,@UserId,@GetDate,AutoAddon  
       ,OmsOrderId,Custom1,Custom2,Custom3 ,Custom4 ,Custom5,GroupId,ProductName ,Description   
       FROM  #yuuete  TH  

 
	 ;with Cte_newData AS   
    (  
    SELECT  MAX(a.OmsSavedCartLineItemId ) OmsSavedCartLineItemId 
	, b.RowId ,b.GroupId ,b.SKU ,b.ParentSKU  
    FROM ZnodeOmsSavedCartLineItem a  
    INNER JOIN #yuuete b ON (a.OmsSavedCartId = b.OmsSavedCartId AND a.SKU = b.ParentSKU AND ISNULL(b.GroupId,'-') = ISNULL(a.GroupId,'-')  )  
    WHERE ISNULL(a.ParentOmsSavedCartLineItemId,0) =0  
	--	AND NOT EXISTS (SELECT TOP 1 1 FROM #OldValue TY WHERE TY.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId)
		AND b.OrderLineItemRelationshipTypeID <> @OrderLineItemRelationshipTypeIdAddon
		AND CASE WHEN EXISTS (SELECT TOP 1 1 FROM #yuuete TU WHERE TU.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdSimple)  THEN ISNULL(a.OrderLineItemRelationshipTypeID,0) ELSE 0 END = 0 
     GROUP BY b.RowId ,b.GroupId ,b.SKU	,b.ParentSKU,b.OrderLineItemRelationshipTypeID
				
    )   
	
  
    UPDATE a SET a.ParentOmsSavedCartLineItemId = (SELECT TOP 1 OmsSavedCartLineItemId FROM  Cte_newData  r  
    WHERE  r.RowId = b.RowId AND ISNULL(r.GroupId,'-') = ISNULL(a.GroupId,'-')  Order by b.RowId )   
    FROM ZnodeOmsSavedCartLineItem a  
    INNER JOIN #yuuete b ON (a.OmsSavedCartId = b.OmsSavedCartId AND a.SKU = b.SKU AND b.id =1  )   
    WHERE a.OrderLineItemRelationshipTypeId IS NOT NULL   
    AND b.OrderLineItemRelationshipTypeID <> @OrderLineItemRelationshipTypeIdAddon  
    AND a.ParentOmsSavedCartLineItemId IS nULL   
  

    
    --;with Cte_newAddon AS   
    --(  
    SELECT a.OmsSavedCartLineItemId , b.RowId  ,b.SKU ,b.ParentSKU  ,Row_number()Over(Order BY c.OmsSavedCartLineItemId )RowIdNo
    INTO #Cte_newAddon
	FROM ZnodeOmsSavedCartLineItem a  
    INNER JOIN #yuuete b ON (a.OmsSavedCartId = b.OmsSavedCartId AND a.SKU = b.ParentSKU AND ( b.Id = 1  ))  
	INNER JOIN ZnodeOmsSavedCartLineItem c on b.sku = c.sku and b.OmsSavedCartId=c.OmsSavedCartId and b.Id = 1 
    WHERE ( ISNULL(a.ParentOmsSavedCartLineItemId,0) <> 0   )
    AND b.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon  and c.ParentOmsSavedCartLineItemId is null
  --  )   
  


  --  SELECT * , ROW_NUMBER()Over(Order BY OmsSavedCartLineItemId  ) RowIdNo
	 --FROM ZnodeOmsSavedCartLineItem a
	 --WHERE a.OrderLineItemRelationshipTypeId IS NOT NULL   
  --   AND a.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon  
  --   AND a.ParentOmsSavedCartLineItemId IS NULL  
	 --AND EXISTS (SELECT TOP 1 1  FROM  #yuuete ty WHERE ty.OmsSavedCartId = a.OmsSavedCartId )
	 --AND EXISTS (SELECT TOP 1 1 FROM #Cte_newAddon TI WHERE TI.SKU = a.SKU)



   ;with table_update AS 
   (
     SELECT * , ROW_NUMBER()Over(Order BY OmsSavedCartLineItemId  ) RowIdNo
	 FROM ZnodeOmsSavedCartLineItem a
	 WHERE a.OrderLineItemRelationshipTypeId IS NOT NULL   
     AND a.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon  
     AND a.ParentOmsSavedCartLineItemId IS NULL  
	 AND EXISTS (SELECT TOP 1 1  FROM  #yuuete ty WHERE ty.OmsSavedCartId = a.OmsSavedCartId )
	 AND EXISTS (SELECT TOP 1 1 FROM #Cte_newAddon TI WHERE TI.SKU = a.SKU)
   )

    UPDATE a SET  
   --SELECT  a.OmsSavedCartLineItemId,
	a.ParentOmsSavedCartLineItemId =(SELECT TOP 1 max(OmsSavedCartLineItemId) 
	FROM #Cte_newAddon  r  
    WHERE  r.ParentSKU = b.ParentSKU AND a.SKU = r.SKU  GROUP BY r.ParentSKU, r.SKU  )   
    FROM table_update a  
    INNER JOIN #yuuete b ON (a.OmsSavedCartId = b.OmsSavedCartId AND a.SKU = b.SKU AND b.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon AND  b.id =1 )   
    WHERE (SELECT TOP 1 max(OmsSavedCartLineItemId) 
	  FROM #Cte_newAddon  r  
    WHERE  r.ParentSKU = b.ParentSKU AND a.SKU = r.SKU   GROUP BY r.ParentSKU, r.SKU  )    IS NOT NULL 
	 

	
	  
    ;with Cte_Th AS   
    (             
      SELECT RowId    
     FROM #yuuete a   
     GROUP BY RowId   
     HAVING COUNT(NewRowId) <= 1   
      )   
    UPDATE a SET a.Quantity =  NULL   
    FROM ZnodeOmsSavedCartLineItem a  
    INNER JOIN #yuuete b ON (a.OmsSavedCartId = b.OmsSavedCartId AND a.SKU = b.SKU AND b.id =0)   
    WHERE NOT EXISTS (SELECT TOP 1 1  FROM Cte_Th TY WHERE TY.RowId = b.RowId )  
     AND a.OrderLineItemRelationshipTypeId IS NULL   
  
    UPDATE  ZnodeOmsSavedCartLineItem   
    SET GROUPID = NULL   
    WHERE  EXISTS (SELECT TOP 1 1  FROM #yuuete RT WHERE RT.OmsSavedCartId = ZnodeOmsSavedCartLineItem.OmsSavedCartId )  
    AND OrderLineItemRelationshipTypeId IS NOT NULL     
       ;With Cte_UpdateSequence AS   
     (  
       SELECT OmsSavedCartLineItemId ,Row_Number()Over(Order By OmsSavedCartLineItemId) RowId , Sequence   
       FROM ZnodeOmsSavedCartLineItem   
       WHERE EXISTS (SELECT TOP 1 1 FROM #yuuete TH WHERE TH.OmsSavedCartId = ZnodeOmsSavedCartLineItem.OmsSavedCartId )  
     )   
    UPDATE Cte_UpdateSequence  
    SET  Sequence = RowId  
	
	----To update saved cart item personalise value from given line item	
	if exists(select * from @TBL_Personalise1 where isnull(PersonalizeValue,'') <> '' and isnull(OmsSavedCartLineItemId,0) <> 0)
	Begin
		DELETE FROM ZnodeOmsPersonalizeCartItem 
		WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_Personalise1 yu WHERE yu.OmsSavedCartLineItemId = ZnodeOmsPersonalizeCartItem.OmsSavedCartLineItemId )

		MERGE INTO ZnodeOmsPersonalizeCartItem TARGET 
		USING @TBL_Personalise1 SOURCE
			   ON (TARGET.OmsSavedCartLineItemId = SOURCE.OmsSavedCartLineItemId ) 
		WHEN NOT MATCHED THEN 
				INSERT  ( OmsSavedCartLineItemId,  CreatedBy, CreatedDate, ModifiedBy, ModifiedDate
								,PersonalizeCode, PersonalizeValue,DesignId	,ThumbnailURL )
				VALUES (  SOURCE.OmsSavedCartLineItemId,  @userId, @getdate, @userId, @getdate
								,SOURCE.PersonalizeCode, SOURCE.PersonalizeValue,SOURCE.DesignId	,SOURCE.ThumbnailURL ) ;
	end		
	
	UPDATE @TBL_Personalise
	SET OmsSavedCartLineItemId = b.OmsSavedCartLineItemId
	FROM @OmsInsertedData a 
	INNER JOIN ZnodeOmsSavedCartLineItem b ON (a.OmsSavedCartLineItemId = b.OmsSavedCartLineItemId and b.OrderLineItemRelationshipTypeID <> @OrderLineItemRelationshipTypeIdAddon)
	WHERE b.ParentOmsSavedCartLineItemId IS NOT NULL 
	
	DELETE FROM ZnodeOmsPersonalizeCartItem 
	WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_Personalise yu WHERE yu.OmsSavedCartLineItemId = ZnodeOmsPersonalizeCartItem.OmsSavedCartLineItemId )
						
    MERGE INTO ZnodeOmsPersonalizeCartItem TARGET 
	USING @TBL_Personalise SOURCE
		   ON (TARGET.OmsSavedCartLineItemId = SOURCE.OmsSavedCartLineItemId ) 
	WHEN NOT MATCHED THEN 
		    INSERT  ( OmsSavedCartLineItemId,  CreatedBy, CreatedDate, ModifiedBy, ModifiedDate
							,PersonalizeCode, PersonalizeValue,DesignId	,ThumbnailURL )
			VALUES (  SOURCE.OmsSavedCartLineItemId,  @userId, @getdate, @userId, @getdate
							,SOURCE.PersonalizeCode, SOURCE.PersonalizeValue,SOURCE.DesignId	,SOURCE.ThumbnailURL ) ;
  
		
		 
END 

	
	SET @Status = 1;
	COMMIT TRAN InsertUpdateSaveCartLineItem;
	END TRY
	BEGIN CATCH
		SELECT ERROR_MESSAGE()	
		SET @Status = 0;
		DECLARE @Error_procedure varchar(1000)= ERROR_PROCEDURE(), @ErrorMessage nvarchar(max)= ERROR_MESSAGE(), @ErrorLine varchar(100)= ERROR_LINE(), @ErrorCall nvarchar(max)= 'EXEC Znode_InsertUpdateSaveCartLineItem @CartLineItemXML = '+CAST(@CartLineItemXML
 AS varchar(max))+',@UserId = '+CAST(@UserId AS varchar(50))+',@Status='+CAST(@Status AS varchar(10));

		SELECT 0 AS ID, CAST(0 AS bit) AS Status,ERROR_MESSAGE();
		ROLLBACK TRAN InsertUpdateSaveCartLineItem;
		EXEC Znode_InsertProcedureErrorLog @ProcedureName = 'Znode_InsertUpdateSaveCartLineItem', @ErrorInProcedure = @Error_procedure, @ErrorMessage = @ErrorMessage, @ErrorLine = @ErrorLine, @ErrorCall = @ErrorCall;
	END CATCH;
END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_InsertUpdateSaveCartLineItemBundle')
BEGIN 
	DROP PROCEDURE Znode_InsertUpdateSaveCartLineItemBundle
END
GO

CREATE PROCEDURE [dbo].[Znode_InsertUpdateSaveCartLineItemBundle]
 (
	 @SaveCartLineItemType TT_SavecartLineitems READONLY  
	,@Userid  INT = 0 
	
 )
AS 
BEGIN 
BEGIN TRY 
 SET NOCOUNT ON 
   DECLARE @GetDate datetime= dbo.Fn_GetDate(); 
   DECLARE @OrderLineItemRelationshipTypeIdBundle int=
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'Bundles'
		);
	DECLARE @OrderLineItemRelationshipTypeIdAddon int =
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'AddOns'
		);
    DECLARE @TBL_Personalise TABLE (OmsSavedCartLineItemId INT ,PersonalizeCode NVARCHAr(max),PersonalizeValue NVARCHAr(max),DesignId NVARCHAr(max), ThumbnailURL NVARCHAr(max))
	DECLARE @OmsInsertedData TABLE (OmsSavedCartLineItemId INT ) 	

	INSERT INTO @TBL_Personalise
	SELECT  NULL 
				,Tbl.Col.value( 'PersonalizeCode[1]', 'NVARCHAR(Max)' ) AS PersonalizeCode
			,Tbl.Col.value( 'PersonalizeValue[1]', 'NVARCHAR(Max)' ) AS PersonalizeValue
			,Tbl.Col.value( 'DesignId[1]', 'NVARCHAR(Max)' ) AS DesignId
			,Tbl.Col.value( 'ThumbnailURL[1]', 'NVARCHAR(Max)' ) AS ThumbnailURL
	FROM (SELECT TOP 1 PersonalisedAttribute Valuex FROM  @SaveCartLineItemType TRTR  ) a 
	CROSS APPLY	a.Valuex.nodes( '//PersonaliseValueModel' ) AS Tbl(Col) 

	 CREATE TABLE #tempoi (GenId INT IDENTITY(1,1),RowId	int	,OmsSavedCartLineItemId	int	 ,ParentOmsSavedCartLineItemId	int,OmsSavedCartId	int
									,SKU	nvarchar(max) ,Quantity	numeric(28,6)	,OrderLineItemRelationshipTypeID	int	,CustomText	nvarchar(max)
									,CartAddOnDetails	nvarchar(max),Sequence	int	,AutoAddon	varchar(max)	,OmsOrderId	int	,ItemDetails	nvarchar(max)
									,Custom1	nvarchar(max)  ,Custom2	nvarchar(max),Custom3	nvarchar(max),Custom4	nvarchar(max),Custom5	nvarchar(max)
									,GroupId	nvarchar(max) ,ProductName	nvarchar(max),Description	nvarchar(max),Id	int,ParentSKU NVARCHAR(max))
	 
	       INSERT INTO #tempoi
			   SELECT  Min(RowId )RowId ,OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, SKU
					,Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, Sequence
					,AutoAddon, OmsOrderId, ItemDetails,Custom1,Custom2,Custom3,Custom4,Custom5,  GroupId ,ProductName,min(Description)Description	,0 Id,NULL ParentSKU 
			   FROM @SaveCartLineItemType a 
			   GROUP BY  OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, SKU
					,Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, Sequence
					,AutoAddon, OmsOrderId, ItemDetails,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,ProductName
	 
			INSERT INTO #tempoi 
			SELECT   Min(RowId )RowId ,OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, BundleProductIds
						,Quantity, @OrderLineItemRelationshipTypeIdBundle, CustomText, CartAddOnDetails, Sequence
						,AutoAddon, OmsOrderId, ItemDetails,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,ProductName,min(Description)Description	,1 Id,SKU ParentSKU  
			FROM @SaveCartLineItemType  a 
			WHERE BundleProductIds <> ''
			GROUP BY  OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, BundleProductIds
			,Quantity,  CustomText, CartAddOnDetails, Sequence ,AutoAddon, OmsOrderId, ItemDetails,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,ProductName,SKU
			 
			INSERT INTO #tempoi
			SELECT  Min(RowId )RowId ,OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, AddOnValueIds
			,AddOnQuantity, @OrderLineItemRelationshipTypeIdAddon, CustomText, CartAddOnDetails, Sequence
			,AutoAddon, OmsOrderId, ItemDetails,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,ProductName,min(Description)Description	,1 Id 
			,CASE WHEN ConfigurableProductIds <> ''  THEN ConfigurableProductIds
				  WHEN  GroupProductIds <> '' THEN GroupProductIds 
				  WHEN BundleProductIds <> '' THEN BundleProductIds 
				  ELSE SKU END     ParentSKU 
			FROM @SaveCartLineItemType  a 
			WHERE AddOnValueIds <> ''
				GROUP BY  OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, AddOnValueIds
				,AddOnQuantity,  CustomText, CartAddOnDetails, Sequence ,ConfigurableProductIds,GroupProductIds,	BundleProductIds
				,AutoAddon, OmsOrderId, ItemDetails,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,ProductName,SKU
		 
		 

        CREATE TABLE #OldValue (OmsSavedCartId INT ,OmsSavedCartLineItemId INT,ParentOmsSavedCartLineItemId INT , SKU  NVARCHAr(2000),OrderLineItemRelationshipTypeID INT  )
		 
		INSERT INTO #OldValue  
		SELECT  a.OmsSavedCartId,a.OmsSavedCartLineItemId,a.ParentOmsSavedCartLineItemId , a.SKU  ,a.OrderLineItemRelationshipTypeID 
	  	FROM ZnodeOmsSavedCartLineItem a   
		WHERE EXISTS (SELECT TOP 1 1 FROM @SaveCartLineItemType  TY WHERE TY.OmsSavedCartId = a.OmsSavedCartId AND ISNULL(a.SKU,'') = ISNULL(TY.BundleProductIds,'')   )   
        AND a.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdBundle   

		INSERT INTO #OldValue 
		SELECT DISTINCT b.OmsSavedCartId,b.OmsSavedCartLineItemId,b.ParentOmsSavedCartLineItemId , b.SKU  ,b.OrderLineItemRelationshipTypeID  
		FROM ZnodeOmsSavedCartLineItem b 
		INNER JOIN #OldValue c ON (c.ParentOmsSavedCartLineItemId  = b.OmsSavedCartLineItemId AND c.OmsSavedCartId = b.OmsSavedCartId)
		WHERE EXISTS (SELECT TOP 1 1 FROM @SaveCartLineItemType  TY WHERE TY.OmsSavedCartId = b.OmsSavedCartId AND ISNULL(b.SKU,'') = ISNULL(TY.SKU,'') AND ISNULL(b.Groupid,'-') = ISNULL(TY.Groupid,'-')  )
		AND  b.OrderLineItemRelationshipTypeID IS NULL 

		------Merge Addon for same product
		SELECT * INTO #OldValueForAddon from #OldValue

		DELETE a FROM #OldValue a WHERE NOT EXISTS (SELECT TOP 1 1  FROM #OldValue b WHERE b.ParentOmsSavedCartLineItemId IS NULL AND b.OmsSavedCartLineItemId = a.ParentOmsSavedCartLineItemId)
		AND a.ParentOmsSavedCartLineItemId IS NOT NULL 

		INSERT INTO #OldValue 
		SELECT b.OmsSavedCartId,b.OmsSavedCartLineItemId,b.ParentOmsSavedCartLineItemId , b.SKU  ,b.OrderLineItemRelationshipTypeID  
		FROM ZnodeOmsSavedCartLineItem b 
		INNER JOIN #OldValue c ON (c.OmsSavedCartLineItemId  = b.ParentOmsSavedCartLineItemId AND c.OmsSavedCartId = b.OmsSavedCartId)
		WHERE EXISTS (SELECT TOP 1 1 FROM @SaveCartLineItemType  TY WHERE TY.OmsSavedCartId = b.OmsSavedCartId AND ISNULL(b.SKU,'') = ISNULL(TY.AddOnValueIds,'') )
		AND  b.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon	

		------Merge Addon for same product
		IF EXISTS(SELECT * FROM @SaveCartLineItemType WHERE ISNULL(AddOnValueIds,'') <> '' )
		BEGIN

			INSERT INTO #OldValueForAddon 
			SELECT b.OmsSavedCartId,b.OmsSavedCartLineItemId,b.ParentOmsSavedCartLineItemId , b.SKU  ,b.OrderLineItemRelationshipTypeID  
			FROM ZnodeOmsSavedCartLineItem b 
			INNER JOIN #OldValueForAddon c ON (c.OmsSavedCartLineItemId  = b.ParentOmsSavedCartLineItemId AND c.OmsSavedCartId = b.OmsSavedCartId)
			WHERE EXISTS (SELECT TOP 1 1 FROM @SaveCartLineItemType  TY WHERE TY.OmsSavedCartId = b.OmsSavedCartId )--AND ISNULL(b.SKU,'') = ISNULL(TY.AddOnValueIds,'') )
			AND  b.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon

			SELECT distinct SKU, STUFF(
										( SELECT  ', ' + SKU FROM    
											( SELECT DISTINCT SKU FROM     #OldValueForAddon b 
											  where a.OmsSavedCartLineItemId=b.ParentOmsSavedCartLineItemId and OrderLineItemRelationshipTypeID = 1 ) x 
											  FOR XML PATH('')
										), 1, 2, ''
									 ) AddOns
			INTO #AddOnsExists
			from #OldValueForAddon a where a.ParentOmsSavedCartLineItemId is not null and OrderLineItemRelationshipTypeID<>1

			SELECT distinct a.BundleProductIds SKU, STUFF(
										 ( SELECT  ', ' + x.AddOnValueIds FROM    
											( SELECT DISTINCT b.AddOnValueIds FROM @SaveCartLineItemType b
											  where a.SKU=b.SKU ) x
											  FOR XML PATH('')
										 ), 1, 2, ''
									   ) AddOns
			INTO #AddOnAdded
			from @SaveCartLineItemType a

			if not exists(select * from #AddOnsExists a inner join #AddOnAdded b on a.SKU = b.SKU and a.AddOns = b.AddOns )
			begin
				delete from #OldValue
			end

		END

		IF NOT EXISTS (SELECT TOP 1 1  FROM @SaveCartLineItemType ty WHERE EXISTS (SELECT TOP 1 1 FROM 	#OldValue a WHERE	
		ISNULL(TY.AddOnValueIds,'') = a.SKU AND  a.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon ))
		AND EXISTS (SELECT TOP 1 1 FROM @SaveCartLineItemType WHERE ISNULL(AddOnValueIds,'')  <> '' )
		BEGIN 
		
		DELETE FROM #OldValue 
		END 
		ELSE 
		BEGIN 
		 IF EXISTS (SELECT TOP 1 1 FROM @SaveCartLineItemType WHERE ISNULL(AddOnValueIds,'')  <> '' )
		 BEGIN 
	 

		 DECLARE @parenTofAddon INT  = 0 
		 SET @parenTofAddon = (SELECT TOP 1 ParentOmsSavedCartLineItemId 
		 FROM #OldValue a
		 WHERE OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon 
		 AND (SELECT COUNT (DISTINCT SKU ) FROM  ZnodeOmsSavedCartLineItem  t WHERE t.ParentOmsSavedCartLineItemId = a.ParentOmsSavedCartLineItemId AND   t.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon ) = (SELECT COUNT (DISTINCT SKU ) FROM  #tempoi  WHERE OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon  )
		  )

		 DELETE FROM #OldValue WHERE ParentOmsSavedCartLineItemId <> @parenTofAddon  AND ParentOmsSavedCartLineItemId IS NOT NULL  

		 DELETE FROM #OldValue WHERE OmsSavedCartLineItemId NOT IN (SELECT ISNULL(m.ParentOmsSavedCartLineItemId,0) FROM #OldValue m)
		 AND ParentOmsSavedCartLineItemId IS  NULL  
		 
		 IF (SELECT COUNT (DISTINCT SKU ) FROM  #OldValue  WHERE OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon ) <> (SELECT COUNT (DISTINCT SKU ) FROM  #tempoi  WHERE OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon  )
		  BEGIN 
		    DELETE FROM #OldValue
		  END 
		IF (SELECT COUNT (DISTINCT SKU ) FROM  ZnodeOmsSavedCartLineItem   WHERE ParentOmsSavedCartLineItemId =@parenTofAddon AND   OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon ) <> (SELECT COUNT (DISTINCT SKU ) FROM  #tempoi  WHERE OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon  )
		  BEGIN 
		    DELETE FROM #OldValue
		  END 

		 END 
		 ELSE IF (SELECT COUNT (OmsSavedCartLineItemId) FROM #OldValue WHERE ParentOmsSavedCartLineItemId IS NULL ) > 1 
		 BEGIN 
		    DECLARE @TBL_deleteParentOmsSavedCartLineItemId TABLE (OmsSavedCartLineItemId INT )
			INSERT INTO @TBL_deleteParentOmsSavedCartLineItemId 
			SELECT ParentOmsSavedCartLineItemId
			FROM ZnodeOmsSavedCartLineItem a 
			WHERE ParentOmsSavedCartLineItemId IN (SELECT OmsSavedCartLineItemId FROM #OldValue WHERE ParentOmsSavedCartLineItemId IS NULL )
			AND OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon 

			DELETE FROM #OldValue WHERE OmsSavedCartLineItemId IN (SELECT OmsSavedCartLineItemId FROM @TBL_deleteParentOmsSavedCartLineItemId)
			OR ParentOmsSavedCartLineItemId IN (SELECT OmsSavedCartLineItemId FROM @TBL_deleteParentOmsSavedCartLineItemId)
		 END 
		 ELSE IF (SELECT COUNT (DISTINCT SKU ) FROM  #OldValue  WHERE OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon ) <> (SELECT COUNT (DISTINCT SKU ) FROM  #tempoi  WHERE OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon  )
		  BEGIN 
		    DELETE FROM #OldValue
		  END 
		   ELSE IF  EXISTS (SELECT TOP 1 1 FROM ZnodeOmsSavedCartLineItem Wt WHERE EXISTS (SELECT TOP 1 1 FROM #OldValue ty WHERE ty.OmsSavedCartId = wt.OmsSavedCartId AND ty.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdBundle AND wt.ParentOmsSavedCartLineItemId= ty.OmsSavedCartLineItemId  ) AND wt.OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdAddon)
		      AND EXISTS (SELECT TOP 1 1 FROM @SaveCartLineItemType WHERE ISNULL(AddOnValueIds,'')  = '' )
		 BEGIN 
		   DELETE FROM #OldValue
		 END 

		END 
		 

		DECLARE @TBL_Personaloldvalues TABLE (OmsSavedCartLineItemId INT , PersonalizeCode NVARCHAr(max), PersonalizeValue NVARCHAr(max))
		INSERT INTO @TBL_Personaloldvalues
		SELECT OmsSavedCartLineItemId , PersonalizeCode, PersonalizeValue
		FROM ZnodeOmsPersonalizeCartItem  a 
		WHERE EXISTS (SELECT TOP 1 1 FROM #OldValue TY WHERE TY.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId)
		AND EXISTS (SELECT TOP 1 1 FROM @TBL_Personalise TU WHERE TU.PersonalizeCode = a.PersonalizeCode AND TU.PersonalizeValue = a.PersonalizeValue)
		
		IF  NOT EXISTS (SELECT TOP 1 1 FROM @TBL_Personaloldvalues)
		   AND EXISTS (SELECT TOP 1 1 FROM @TBL_Personalise )
		BEGIN 
		    DELETE FROM #OldValue
		END 
		ELSE 
		BEGIN 
		 IF EXISTS (SELECT TOP 1 1 FROM @TBL_Personaloldvalues)
		 AND (SELECT COUNT (DISTINCT OmsSavedCartLineItemId ) FROM #OldValue WHERE ParentOmsSavedCartLineItemId IS nULL ) > 1 
		 BEGIN 
		   
		   DELETE FROM #OldValue WHERE OmsSavedCartLineItemId IN (
		   SELECT OmsSavedCartLineItemId FROM #OldValue WHERE OmsSavedCartLineItemId NOT IN (SELECT OmsSavedCartLineItemId FROM @TBL_Personaloldvalues )
		   AND ParentOmsSavedCartLineItemId NOT IN (SELECT OmsSavedCartLineItemId FROM @TBL_Personaloldvalues ) ) 
		   OR OmsSavedCartLineItemId IN ( SELECT ParentOmsSavedCartLineItemId FROM #OldValue WHERE OmsSavedCartLineItemId NOT IN (SELECT OmsSavedCartLineItemId FROM @TBL_Personaloldvalues )
		   AND ParentOmsSavedCartLineItemId NOT IN (SELECT OmsSavedCartLineItemId FROM @TBL_Personaloldvalues ))
		 
		 END 
		 ELSE IF NOT EXISTS (SELECT TOP 1 1 FROM @TBL_Personaloldvalues)
		 AND (SELECT COUNT (DISTINCT OmsSavedCartLineItemId ) FROM #OldValue WHERE ParentOmsSavedCartLineItemId IS nULL ) > 1 
		 BEGIN 
		   
		   DELETE n FROM #OldValue n WHERE OmsSavedCartLineItemId  IN (SELECT OmsSavedCartLineItemId FROM ZnodeOmsPersonalizeCartItem WHERE n.OmsSavedCartLineItemId = ZnodeOmsPersonalizeCartItem.OmsSavedCartLineItemId  )
		   OR ParentOmsSavedCartLineItemId  IN (SELECT OmsSavedCartLineItemId FROM ZnodeOmsPersonalizeCartItem   )
		
		 END 
		 ELSE IF NOT EXISTS (SELECT TOP 1 1  FROM @TBL_Personalise)
		        AND EXISTS (SELECT TOP 1 1 FROM ZnodeOmsPersonalizeCartItem m WHERE EXISTS (SELECT Top 1 1 FROM #OldValue YU WHERE YU.OmsSavedCartLineItemId = m.OmsSavedCartLineItemId )) 
		       AND (SELECT COUNT (DISTINCT OmsSavedCartLineItemId ) FROM #OldValue WHERE ParentOmsSavedCartLineItemId IS nULL ) = 1
		 BEGIN 
		     DELETE FROM #OldValue WHERE NOT EXISTS (SELECT TOP 1 1  FROM @TBL_Personalise)
		 END 
		END 

		--------If lineitem present in ZnodeOmsPersonalizeCartItem and personalize value is different for same line item then New lineItem will generate
		--------If lineitem present in ZnodeOmsPersonalizeCartItem and personalize value is same for same line item then Quantity will added
		;with cte as
		(
			SELECT b.OmsSavedCartLineItemId ,a.ParentOmsSavedCartLineItemId , a.BundleProductIds as SKU
					,Tbl.Col.value( 'PersonalizeCode[1]', 'NVARCHAR(Max)' ) AS PersonalizeCode
			  		,Tbl.Col.value( 'PersonalizeValue[1]', 'NVARCHAR(Max)' ) AS PersonalizeValue
					,Tbl.Col.value( 'DesignId[1]', 'NVARCHAR(Max)' ) AS DesignId
					,Tbl.Col.value( 'ThumbnailURL[1]', 'NVARCHAR(Max)' ) AS ThumbnailURL
			FROM @SaveCartLineItemType a 
			Inner Join #OldValue b on a.BundleProductIds = b.SKU
			CROSS APPLY a.PersonalisedAttribute.nodes( '//PersonaliseValueModel' ) AS Tbl(Col)  
			Inner join ZnodeOmsPersonalizeCartItem c on b.OmsSavedCartLineItemId = c.OmsSavedCartLineItemId
			WHERE a.OmsSavedCartLineItemId = 0
		)
		delete c1
		from cte a1		  
		Inner Join #OldValue b1 on a1.SKU = b1.SKU
		inner join #OldValue c1 on (b1.ParentOmsSavedCartLineItemId = c1.OmsSavedCartLineItemId OR b1.OmsSavedCartLineItemId = c1.OmsSavedCartLineItemId)
		where not exists(select * from ZnodeOmsPersonalizeCartItem c where a1.OmsSavedCartLineItemId = c.OmsSavedCartLineItemId and a1.PersonalizeValue = c.PersonalizeValue)

		IF EXISTS (SELECT TOP 1 1 FROM #OldValue )
		BEGIN 

		 UPDATE a
		SET a.Quantity = a.Quantity+ty.Quantity,
		a.Custom1 = ty.Custom1,
		a.Custom2 = ty.Custom2,
		a.Custom3 = ty.Custom3,
		a.Custom4 = ty.Custom4,
		a.Custom5 = ty.Custom5  
		FROM ZnodeOmsSavedCartLineItem a
		INNER JOIN #OldValue b ON (a.OmsSavedCartLineItemId = b.OmsSavedCartLineItemId)
		INNER JOIN #tempoi ty ON (ty.SKU = b.SKU)
		WHERE a.OrderLineItemRelationshipTypeId <> @OrderLineItemRelationshipTypeIdAddon

		 UPDATE a
		 SET a.Quantity = a.Quantity+s.AddOnQuantity
		 FROM ZnodeOmsSavedCartLineItem a
		 INNER JOIN #OldValue b ON (a.ParentOmsSavedCartLineItemId = b.OmsSavedCartLineItemId)
		 INNER JOIN @SaveCartLineItemType S on a.OmsSavedCartId = s.OmsSavedCartId and a.SKU = s.AddOnValueIds
		 WHERE a.OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdAddon

		 --UPDATE Ab SET ab.Quantity = a.Quantity   
   --      FROM ZnodeOmsSavedCartLineItem a  
   --      INNER JOIN ZnodeOmsSavedCartLineItem ab ON (ab.OmsSavedCartLineItemId = a.ParentOmsSavedCartLineItemId)  
   --      INNER JOIN @SaveCartLineItemType b ON (a.OmsSavedCartId = b.OmsSavedCartId  )   
		 --WHERE a.OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdBundle  

		 UPDATE Ab 
		 SET Ab.Quantity = Ab.Quantity+ty.Quantity,
		 Ab.Custom1 = ty.Custom1,
		 Ab.Custom2 = ty.Custom2,
		 Ab.Custom3 = ty.Custom3,
		 Ab.Custom4 = ty.Custom4,
		 Ab.Custom5 = ty.Custom5  
         FROM ZnodeOmsSavedCartLineItem a  
         INNER JOIN ZnodeOmsSavedCartLineItem ab ON (ab.OmsSavedCartLineItemId = a.ParentOmsSavedCartLineItemId)  
         INNER JOIN @SaveCartLineItemType b ON (a.OmsSavedCartId = b.OmsSavedCartId  ) 
		 INNER JOIN #tempoi ty ON (ty.SKU = b.SKU)  
		 WHERE a.OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdBundle  





		END 
	    ELSE 
		BEGIN 
			
		UPDATE #tempoi
			SET ParentSKU = (SELECT TOP 1 SKU FROM #tempoi WHERE OrderLineItemRelationshipTypeID IS NULL )
			WHERE OrderLineItemRelationshipTypeID  = @OrderLineItemRelationshipTypeIdAddon 
			AND EXISTS (SELECT TOP 1 1 FROM #tempoi WHERE OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdBundle) 
		   
    SELECT RowId, Id ,Row_number()Over(Order BY RowId, Id,GenId) NewRowId , ParentOmsSavedCartLineItemId ,OmsSavedCartId,SKU,Quantity,OrderLineItemRelationshipTypeId  
       ,CustomText,CartAddOnDetails,ROW_NUMBER()Over(Order BY NewId() ) Sequence ,AutoAddon  
       ,OmsOrderId,Custom1,Custom2,Custom3 ,Custom4 ,Custom5,GroupId,ProductName ,min(Description)Description  ,ParentSKU  
     INTO #yuuete   
     FROM  #tempoi  
     GROUP BY ParentOmsSavedCartLineItemId ,OmsSavedCartId,SKU,Quantity,OrderLineItemRelationshipTypeId  
       ,CustomText,CartAddOnDetails ,AutoAddon  
       ,OmsOrderId,Custom1,Custom2,Custom3 ,Custom4 ,Custom5,GroupId,ProductName ,RowId, Id ,GenId,ParentSKU   
     ORDER BY RowId, Id   
   
	DELETE FROM #yuuete WHERE Quantity <=0  

	;WITH Add_Dup AS
	(
		SELECT  Min(NewRowId)NewRowId ,SKU ,ParentSKU ,OrderLineItemRelationshipTypeID 
		FROM  #yuuete
		GROUP BY SKU ,ParentSKU  ,OrderLineItemRelationshipTypeID
		HAVING OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon	
	)

	DELETE FROM #yuuete
	WHERE NOT EXISTS (SELECT TOP 1 1 FROM Add_Dup WHERE Add_Dup.NewRowId = #yuuete.NewRowId)
	AND OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon

     ;WITH VTTY AS   
    (  
    SELECT m.RowId OldRowId , TY1.RowId , TY1.SKU   
       FROM #yuuete m  
    INNER JOIN  #yuuete TY1 ON TY1.SKU = m.ParentSKU   
    WHERE m.OrderLineItemRelationshipTypeID IN ( @OrderLineItemRelationshipTypeIdAddon , @OrderLineItemRelationshipTypeIdBundle)   
    )   
    UPDATE m1   
    SET m1.RowId = TYU.RowId  
    FROM #yuuete m1   
    INNER JOIN VTTY TYU ON (TYU.OldRowId = m1.RowId)  
      
    
    ;WITH VTRET AS   
    (  
    SELECT RowId,id,Min(NewRowId)NewRowId ,SKU ,ParentSKU ,OrderLineItemRelationshipTypeID   
    FROM #yuuete   
    GROUP BY RowId,id ,SKU ,ParentSKU  ,OrderLineItemRelationshipTypeID  
	Having  SKU = ParentSKU  AND OrderLineItemRelationshipTypeID <> @OrderLineItemRelationshipTypeIdAddon
    )   
  
    DELETE FROM #yuuete WHERE NewRowId  IN (SELECT NewRowId FROM VTRET)   
     
       INSERT INTO  ZnodeOmsSavedCartLineItem (ParentOmsSavedCartLineItemId ,OmsSavedCartId,SKU,Quantity,OrderLineItemRelationshipTypeId  
       ,CustomText,CartAddOnDetails,Sequence,CreatedBY,CreatedDate,ModifiedBy ,ModifiedDate,AutoAddon  
       ,OmsOrderId,Custom1,Custom2,Custom3 ,Custom4 ,Custom5,GroupId,ProductName ,Description)  
       OUTPUT INSERTED.OmsSavedCartLineItemId  INTO @OmsInsertedData 
	   SELECT NULL ,OmsSavedCartId,SKU,Quantity,OrderLineItemRelationshipTypeId  
       ,CustomText,CartAddOnDetails,ROW_NUMBER()Over(Order BY NewRowId)  sequence,@UserId,@GetDate,@UserId,@GetDate,AutoAddon  
       ,OmsOrderId,Custom1,Custom2,Custom3 ,Custom4 ,Custom5,GroupId,ProductName ,Description   
       FROM  #yuuete  TH  
  
 
	 ;with Cte_newData AS   
    (  
    SELECT  MAX(a.OmsSavedCartLineItemId ) OmsSavedCartLineItemId 
	, b.RowId ,b.GroupId ,b.SKU ,b.ParentSKU  
    FROM ZnodeOmsSavedCartLineItem a  
    INNER JOIN #yuuete b ON (a.OmsSavedCartId = b.OmsSavedCartId AND a.SKU = b.ParentSKU AND ISNULL(b.GroupId,'-') = ISNULL(a.GroupId,'-')  )  
    WHERE ISNULL(a.ParentOmsSavedCartLineItemId,0) =0  
	AND EXISTS (SELECT TOP 1 1  FROM @OmsInsertedData ui WHERE ui.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId )
	--	AND NOT EXISTS (SELECT TOP 1 1 FROM #OldValue TY WHERE TY.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId)
		AND b.OrderLineItemRelationshipTypeID <> @OrderLineItemRelationshipTypeIdAddon
		-- AND CASE WHEN EXISTS (SELECT TOP 1 1 FROM #yuuete TU WHERE TU.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdSimple)  THEN ISNULL(a.OrderLineItemRelationshipTypeID,0) ELSE 0 END = 0 
     GROUP BY b.RowId ,b.GroupId ,b.SKU	,b.ParentSKU,b.OrderLineItemRelationshipTypeID			
    )   
	
  
    UPDATE a SET a.ParentOmsSavedCartLineItemId = (SELECT TOP 1 OmsSavedCartLineItemId FROM  Cte_newData  r  
    WHERE  r.RowId = b.RowId AND ISNULL(r.GroupId,'-') = ISNULL(a.GroupId,'-')  Order by b.RowId )   
    FROM ZnodeOmsSavedCartLineItem a  
    INNER JOIN #yuuete b ON (a.OmsSavedCartId = b.OmsSavedCartId AND a.SKU = b.SKU AND b.id =1  )   
    WHERE a.OrderLineItemRelationshipTypeId IS NOT NULL   
    AND b.OrderLineItemRelationshipTypeID <> @OrderLineItemRelationshipTypeIdAddon  
    AND a.ParentOmsSavedCartLineItemId IS nULL  
	AND  EXISTS (SELECT TOP 1 1  FROM @OmsInsertedData ui WHERE ui.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId ) 
  
  --------------------------------------------------------------------------------------------------------

   ;with Cte_newData AS   
    (  
    SELECT  MIN(a.OmsSavedCartLineItemId ) OmsSavedCartLineItemId 
	, b.RowId ,b.GroupId ,b.SKU ,b.ParentSKU  
    FROM ZnodeOmsSavedCartLineItem a  
    INNER JOIN #yuuete b ON (a.OmsSavedCartId = b.OmsSavedCartId AND a.SKU = b.ParentSKU AND ISNULL(b.GroupId,'-') = ISNULL(a.GroupId,'-')  )  
    WHERE ISNULL(a.ParentOmsSavedCartLineItemId,0) =0  
	AND EXISTS (SELECT TOP 1 1  FROM @OmsInsertedData ui WHERE ui.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId )
	--	AND NOT EXISTS (SELECT TOP 1 1 FROM #OldValue TY WHERE TY.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId)
		AND b.OrderLineItemRelationshipTypeID <> @OrderLineItemRelationshipTypeIdAddon
		-- AND CASE WHEN EXISTS (SELECT TOP 1 1 FROM #yuuete TU WHERE TU.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdSimple)  THEN ISNULL(a.OrderLineItemRelationshipTypeID,0) ELSE 0 END = 0 
     GROUP BY b.RowId ,b.GroupId ,b.SKU	,b.ParentSKU,b.OrderLineItemRelationshipTypeID			
    )

	UPDATE a SET a.ParentOmsSavedCartLineItemId = (SELECT TOP 1 OmsSavedCartLineItemId FROM  Cte_newData  r  
    WHERE  r.RowId = b.RowId AND ISNULL(r.GroupId,'-') = ISNULL(a.GroupId,'-')  Order by b.RowId )   
    FROM ZnodeOmsSavedCartLineItem a  
    INNER JOIN #yuuete b ON (a.OmsSavedCartId = b.OmsSavedCartId AND a.SKU = b.SKU AND b.id =1  )   
    WHERE a.OrderLineItemRelationshipTypeId IS NOT NULL   
    AND b.OrderLineItemRelationshipTypeID <> @OrderLineItemRelationshipTypeIdAddon   
	AND  EXISTS (SELECT TOP 1 1  FROM @OmsInsertedData ui WHERE ui.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId ) 
	AND  a.sequence in (SELECT  MIN(ab.sequence) FROM ZnodeOmsSavedCartLineItem ab where a.OmsSavedCartId = ab.OmsSavedCartId and 
	 a.SKU = ab.sku and ab.OrderLineItemRelationshipTypeId is not null  ) 


 -----------------------------------------------------------------------------------------------------

    --;with Cte_newAddon AS   
    --(  
    SELECT a.OmsSavedCartLineItemId , b.RowId  ,b.SKU ,b.ParentSKU  ,Row_number()Over(Order BY c.OmsSavedCartLineItemId )RowIdNo
    INTO #Cte_newAddon
	FROM ZnodeOmsSavedCartLineItem a  
    INNER JOIN #yuuete b ON (a.OmsSavedCartId = b.OmsSavedCartId AND a.SKU = b.ParentSKU AND ( CASE WHEN EXISTS (SELECT TOP 1 1 FROM #tempoi WHERE OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdBundle) THEN 0 ELSE 1 END = b.id OR b.Id = 1  ))  
    INNER JOIN ZnodeOmsSavedCartLineItem c on b.sku = c.sku and b.OmsSavedCartId=c.OmsSavedCartId and b.Id = 1
    WHERE ( CASE WHEN EXISTS (SELECT TOP 1 1 FROM #tempoi WHERE OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdBundle) THEN 0 ELSE 1 END = ISNULL(a.ParentOmsSavedCartLineItemId,0) OR ISNULL(a.ParentOmsSavedCartLineItemId,0) <> 0   )
    AND b.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon  AND c.ParentOmsSavedCartLineItemId IS NULL
  --  )   
  
 

   ;with table_update AS 
   (
     SELECT * , ROW_NUMBER()Over(Order BY OmsSavedCartLineItemId  ) RowIdNo
	 FROM ZnodeOmsSavedCartLineItem a
	 WHERE a.OrderLineItemRelationshipTypeId IS NOT NULL   
     AND a.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon  
     AND a.ParentOmsSavedCartLineItemId IS NULL  
	 AND EXISTS (SELECT TOP 1 1  FROM  #yuuete ty WHERE ty.OmsSavedCartId = a.OmsSavedCartId )
	 AND EXISTS (SELECT TOP 1 1  FROM @OmsInsertedData ui WHERE ui.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId )
   )

     UPDATE a SET a.ParentOmsSavedCartLineItemId = (SELECT TOP 1 max(OmsSavedCartLineItemId) 
	  FROM #Cte_newAddon  r  
    WHERE  r.ParentSKU = b.ParentSKU AND a.SKU = r.SKU AND a.RowIdNo = r.RowIdNo  GROUP BY r.ParentSKU, r.SKU  )   
    FROM table_update a  
    INNER JOIN #yuuete b ON (a.OmsSavedCartId = b.OmsSavedCartId AND a.SKU = b.SKU AND b.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon AND  b.id =1 )   
    WHERE (SELECT TOP 1 max(OmsSavedCartLineItemId) 
	  FROM #Cte_newAddon  r  
    WHERE  r.ParentSKU = b.ParentSKU AND a.SKU = r.SKU AND a.RowIdNo = r.RowIdNo  GROUP BY r.ParentSKU, r.SKU  )    IS nOT NULL 
	 
  
    ;with Cte_Th AS   
    (             
      SELECT RowId    
     FROM #yuuete a   
     GROUP BY RowId   
     HAVING COUNT(NewRowId) <= 1   
      )   
    UPDATE a SET a.Quantity =  NULL   
    FROM ZnodeOmsSavedCartLineItem a  
    INNER JOIN #yuuete b ON (a.OmsSavedCartId = b.OmsSavedCartId AND a.SKU = b.SKU AND b.id =0)   
    WHERE NOT EXISTS (SELECT TOP 1 1  FROM Cte_Th TY WHERE TY.RowId = b.RowId )  
     AND a.OrderLineItemRelationshipTypeId IS NULL   
  
    UPDATE Ab SET ab.Quantity = a.Quantity   
    FROM ZnodeOmsSavedCartLineItem a  
    INNER JOIN ZnodeOmsSavedCartLineItem ab ON (ab.OmsSavedCartLineItemId = a.ParentOmsSavedCartLineItemId)  
    INNER JOIN @SaveCartLineItemType b ON (a.OmsSavedCartId = b.OmsSavedCartId  )   
    WHERE a.OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdBundle  
  
    

    UPDATE  ZnodeOmsSavedCartLineItem   
    SET GROUPID = NULL   
    WHERE  EXISTS (SELECT TOP 1 1  FROM #yuuete RT WHERE RT.OmsSavedCartId = ZnodeOmsSavedCartLineItem.OmsSavedCartId )  
    AND OrderLineItemRelationshipTypeId IS NOT NULL     
       ;With Cte_UpdateSequence AS   
     (  
       SELECT OmsSavedCartLineItemId ,Row_Number()Over(Order By OmsSavedCartLineItemId) RowId , Sequence   
       FROM ZnodeOmsSavedCartLineItem   
       WHERE EXISTS (SELECT TOP 1 1 FROM #yuuete TH WHERE TH.OmsSavedCartId = ZnodeOmsSavedCartLineItem.OmsSavedCartId )  
     )   
    UPDATE Cte_UpdateSequence  
    SET  Sequence = RowId  
			
	
	UPDATE @TBL_Personalise
	SET OmsSavedCartLineItemId = b.OmsSavedCartLineItemId
	FROM @OmsInsertedData a 
	INNER JOIN ZnodeOmsSavedCartLineItem b ON (a.OmsSavedCartLineItemId = b.OmsSavedCartLineItemId and b.OrderLineItemRelationshipTypeID <> @OrderLineItemRelationshipTypeIdAddon)
	WHERE b.ParentOmsSavedCartLineItemId IS not nULL 
	
	DELETE FROM ZnodeOmsPersonalizeCartItem	WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_Personalise yu WHERE yu.OmsSavedCartLineItemId = ZnodeOmsPersonalizeCartItem.OmsSavedCartLineItemId )
						
    MERGE INTO ZnodeOmsPersonalizeCartItem TARGET 
	USING @TBL_Personalise SOURCE
		   ON (TARGET.OmsSavedCartLineItemId = SOURCE.OmsSavedCartLineItemId ) 
		   WHEN NOT MATCHED THEN 
		    INSERT  ( OmsSavedCartLineItemId,  CreatedBy, CreatedDate, ModifiedBy, ModifiedDate
							,PersonalizeCode, PersonalizeValue,DesignId	,ThumbnailURL )
			VALUES (  SOURCE.OmsSavedCartLineItemId,  @userId, @getdate, @userId, @getdate
							,SOURCE.PersonalizeCode, SOURCE.PersonalizeValue,SOURCE.DesignId	,SOURCE.ThumbnailURL ) ;
  
		
		END 
END TRY
BEGIN CATCH 
  SELECT ERROR_MESSAGE()
END CATCH 
END
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_InsertUpdateSaveCartLineItemConfigurable')
BEGIN 
	DROP PROCEDURE Znode_InsertUpdateSaveCartLineItemConfigurable
END
GO
CREATE PROCEDURE [dbo].[Znode_InsertUpdateSaveCartLineItemConfigurable]
 (
	 @SaveCartLineItemType TT_SavecartLineitems READONLY  
	,@Userid  INT = 0 
	
 )
AS 
BEGIN 
BEGIN TRY 
 SET NOCOUNT ON 
   DECLARE @GetDate datetime= dbo.Fn_GetDate(); 
   DECLARE @OrderLineItemRelationshipTypeIdConfigurable int=
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'Configurable'
		);
	DECLARE @OrderLineItemRelationshipTypeIdAddon int =
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'AddOns'
		);
    DECLARE @TBL_Personalise TABLE (OmsSavedCartLineItemId INT ,PersonalizeCode NVARCHAr(max),PersonalizeValue NVARCHAr(max),DesignId NVARCHAr(max), ThumbnailURL NVARCHAr(max))
	DECLARE @OmsInsertedData TABLE (OmsSavedCartLineItemId INT ) 	

	INSERT INTO @TBL_Personalise
	SELECT  NULL 
				,Tbl.Col.value( 'PersonalizeCode[1]', 'NVARCHAR(Max)' ) AS PersonalizeCode
			,Tbl.Col.value( 'PersonalizeValue[1]', 'NVARCHAR(Max)' ) AS PersonalizeValue
			,Tbl.Col.value( 'DesignId[1]', 'NVARCHAR(Max)' ) AS DesignId
			,Tbl.Col.value( 'ThumbnailURL[1]', 'NVARCHAR(Max)' ) AS ThumbnailURL
	FROM (SELECT TOP 1 PersonalisedAttribute Valuex FROM  @SaveCartLineItemType TRTR  ) a 
	CROSS APPLY	a.Valuex.nodes( '//PersonaliseValueModel' ) AS Tbl(Col) 

	 CREATE TABLE #tempoi (GenId INT IDENTITY(1,1),RowId	int	,OmsSavedCartLineItemId	int	 ,ParentOmsSavedCartLineItemId	int,OmsSavedCartId	int
									,SKU	nvarchar(max) ,Quantity	numeric(28,6)	,OrderLineItemRelationshipTypeID	int	,CustomText	nvarchar(max)
									,CartAddOnDetails	nvarchar(max),Sequence	int	,AutoAddon	varchar(max)	,OmsOrderId	int	,ItemDetails	nvarchar(max)
									,Custom1	nvarchar(max)  ,Custom2	nvarchar(max),Custom3	nvarchar(max),Custom4	nvarchar(max),Custom5	nvarchar(max)
									,GroupId	nvarchar(max) ,ProductName	nvarchar(max),Description	nvarchar(max),Id	int,ParentSKU NVARCHAR(max))
	 
	       INSERT INTO #tempoi
			   SELECT  Min(RowId )RowId ,OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, SKU
					,Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, Sequence
					,AutoAddon, OmsOrderId, ItemDetails,Custom1,Custom2,Custom3,Custom4,Custom5,  GroupId ,ProductName,min(Description)Description	,0 Id,NULL ParentSKU 
			   FROM @SaveCartLineItemType a 
			   GROUP BY  OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, SKU
					,Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, Sequence
					,AutoAddon, OmsOrderId, ItemDetails,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,ProductName
	 
			INSERT INTO #tempoi 
			SELECT   Min(RowId )RowId ,OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, ConfigurableProductIds
						,Quantity, @OrderLineItemRelationshipTypeIdConfigurable, CustomText, CartAddOnDetails, Sequence
						,AutoAddon, OmsOrderId, ItemDetails,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,ProductName,min(Description)Description	,1 Id,SKU ParentSKU  
			FROM @SaveCartLineItemType  a 
			WHERE ConfigurableProductIds <> ''
			GROUP BY  OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, ConfigurableProductIds
			,Quantity,  CustomText, CartAddOnDetails, Sequence ,AutoAddon, OmsOrderId, ItemDetails,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,ProductName,SKU
			 
			INSERT INTO #tempoi
			SELECT  Min(RowId )RowId ,OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, AddOnValueIds
			,AddOnQuantity, @OrderLineItemRelationshipTypeIdAddon, CustomText, CartAddOnDetails, Sequence
			,AutoAddon, OmsOrderId, ItemDetails,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,ProductName,min(Description)Description	,1 Id 
			,CASE WHEN ConfigurableProductIds <> ''  THEN ConfigurableProductIds
				  WHEN  GroupProductIds <> '' THEN GroupProductIds 
				  WHEN BundleProductIds <> '' THEN BundleProductIds 
				  ELSE SKU END     ParentSKU 
			FROM @SaveCartLineItemType  a 
			WHERE AddOnValueIds <> ''
				GROUP BY  OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, AddOnValueIds
				,AddOnQuantity,  CustomText, CartAddOnDetails, Sequence ,ConfigurableProductIds,GroupProductIds,	BundleProductIds
				,AutoAddon, OmsOrderId, ItemDetails,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,ProductName,SKU
		 

        CREATE TABLE #OldValue (OmsSavedCartId INT ,OmsSavedCartLineItemId INT,ParentOmsSavedCartLineItemId INT , SKU  NVARCHAr(2000),OrderLineItemRelationshipTypeID INT  )
		 
		INSERT INTO #OldValue  
		SELECT  a.OmsSavedCartId,a.OmsSavedCartLineItemId,a.ParentOmsSavedCartLineItemId , a.SKU  ,a.OrderLineItemRelationshipTypeID 
	  	FROM ZnodeOmsSavedCartLineItem a   
		WHERE EXISTS (SELECT TOP 1 1 FROM @SaveCartLineItemType  TY WHERE TY.OmsSavedCartId = a.OmsSavedCartId AND ISNULL(a.SKU,'') = ISNULL(TY.ConfigurableProductIds,'')   )   
        AND a.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdConfigurable   

		
		
		INSERT INTO #OldValue 
		SELECT DISTINCT b.OmsSavedCartId,b.OmsSavedCartLineItemId,b.ParentOmsSavedCartLineItemId , b.SKU  ,b.OrderLineItemRelationshipTypeID  
		FROM ZnodeOmsSavedCartLineItem b 
		INNER JOIN #OldValue c ON (c.ParentOmsSavedCartLineItemId  = b.OmsSavedCartLineItemId AND c.OmsSavedCartId = b.OmsSavedCartId)
		WHERE EXISTS (SELECT TOP 1 1 FROM @SaveCartLineItemType  TY WHERE TY.OmsSavedCartId = b.OmsSavedCartId AND ISNULL(b.SKU,'') = ISNULL(TY.SKU,'') AND ISNULL(b.Groupid,'-') = ISNULL(TY.Groupid,'-')  )
		AND  b.OrderLineItemRelationshipTypeID IS NULL 
		
		------Merge Addon for same product
		SELECT * INTO #OldValueForAddon from #OldValue
		  
		DELETE a FROM #OldValue a WHERE NOT EXISTS (SELECT TOP 1 1  FROM #OldValue b WHERE b.ParentOmsSavedCartLineItemId IS NULL AND b.OmsSavedCartLineItemId = a.ParentOmsSavedCartLineItemId)
		AND a.ParentOmsSavedCartLineItemId IS NOT NULL 

		INSERT INTO #OldValue 
		SELECT b.OmsSavedCartId,b.OmsSavedCartLineItemId,b.ParentOmsSavedCartLineItemId , b.SKU  ,b.OrderLineItemRelationshipTypeID  
		FROM ZnodeOmsSavedCartLineItem b 
		INNER JOIN #OldValue c ON (c.OmsSavedCartLineItemId  = b.ParentOmsSavedCartLineItemId AND c.OmsSavedCartId = b.OmsSavedCartId)
		WHERE EXISTS (SELECT TOP 1 1 FROM @SaveCartLineItemType  TY WHERE TY.OmsSavedCartId = b.OmsSavedCartId AND ISNULL(b.SKU,'') = ISNULL(TY.AddOnValueIds,'') )
		AND  b.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon
		
		------Merge Addon for same product
		IF EXISTS(SELECT * FROM @SaveCartLineItemType WHERE ISNULL(AddOnValueIds,'') <> '' )
		BEGIN
		
		
			INSERT INTO #OldValueForAddon 
			SELECT b.OmsSavedCartId,b.OmsSavedCartLineItemId,b.ParentOmsSavedCartLineItemId , b.SKU  ,b.OrderLineItemRelationshipTypeID  
			FROM ZnodeOmsSavedCartLineItem b 
			INNER JOIN #OldValueForAddon c ON (c.OmsSavedCartLineItemId  = b.ParentOmsSavedCartLineItemId AND c.OmsSavedCartId = b.OmsSavedCartId)
			WHERE EXISTS (SELECT TOP 1 1 FROM @SaveCartLineItemType  TY WHERE TY.OmsSavedCartId = b.OmsSavedCartId )--AND ISNULL(b.SKU,'') = ISNULL(TY.AddOnValueIds,'') )
			AND  b.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon

			SELECT distinct SKU, STUFF(
										( SELECT  ', ' + SKU FROM    
											( SELECT DISTINCT SKU FROM     #OldValueForAddon b 
											  where a.OmsSavedCartLineItemId=b.ParentOmsSavedCartLineItemId and OrderLineItemRelationshipTypeID = 1 ) x 
											  FOR XML PATH('')
										), 1, 2, ''
									 ) AddOns
			INTO #AddOnsExists
			from #OldValueForAddon a where a.ParentOmsSavedCartLineItemId is not null and OrderLineItemRelationshipTypeID<>1

			SELECT distinct a.ConfigurableProductIds SKU, STUFF(
										 ( SELECT  ', ' + x.AddOnValueIds FROM    
											( SELECT DISTINCT b.AddOnValueIds FROM @SaveCartLineItemType b
											  where a.SKU=b.SKU ) x
											  FOR XML PATH('')
										 ), 1, 2, ''
									   ) AddOns
			INTO #AddOnAdded
			from @SaveCartLineItemType a

			

			if not exists(select * from #AddOnsExists a inner join #AddOnAdded b on a.SKU = b.SKU and a.AddOns = b.AddOns )
			begin
			   
				delete from #OldValue

				
			end

		END

		IF NOT EXISTS (SELECT TOP 1 1  FROM @SaveCartLineItemType ty WHERE EXISTS (SELECT TOP 1 1 FROM 	#OldValue a WHERE	
		ISNULL(TY.AddOnValueIds,'') = a.SKU AND  a.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon ))
		AND EXISTS (SELECT TOP 1 1 FROM @SaveCartLineItemType WHERE ISNULL(AddOnValueIds,'')  <> '' )
		BEGIN 
		
		DELETE FROM #OldValue 
		END 
		ELSE 
		BEGIN 
		
		 IF EXISTS (SELECT TOP 1 1 FROM @SaveCartLineItemType WHERE ISNULL(AddOnValueIds,'')  <> '' )
		 BEGIN 
		 
		 DECLARE @parenTofAddon  TABLE( ParentOmsSavedCartLineItemId INT  )  
		 INSERT INTO  @parenTofAddon 
		 SELECT  ParentOmsSavedCartLineItemId FROM #OldValue a  WHERE a.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon  
		 AND (SELECT COUNT (DISTINCT SKU ) FROM  ZnodeOmsSavedCartLineItem  t WHERE t.ParentOmsSavedCartLineItemId = a.ParentOmsSavedCartLineItemId AND   t.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon ) = (SELECT COUNT (DISTINCT SKU ) FROM  #tempoi  WHERE OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon  )
		  

		 DELETE FROM #OldValue WHERE OmsSavedCartLineItemId NOT IN (SELECT ParentOmsSavedCartLineItemId FROM  @parenTofAddon)   
					AND ParentOmsSavedCartLineItemId IS NOT NULL  
					AND OrderLineItemRelationshipTypeID <> @OrderLineItemRelationshipTypeIdAddon

		 DELETE FROM #OldValue WHERE OmsSavedCartLineItemId NOT IN (SELECT ISNULL(m.ParentOmsSavedCartLineItemId,0) FROM #OldValue m)
		 AND ParentOmsSavedCartLineItemId IS  NULL  
		 
		 IF (SELECT COUNT (DISTINCT SKU ) FROM  #OldValue  WHERE OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon ) <> (SELECT COUNT (DISTINCT SKU ) FROM  #tempoi  WHERE OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon  )
		  BEGIN 
		    DELETE FROM #OldValue
		  END 
		IF (SELECT COUNT (DISTINCT SKU ) FROM  ZnodeOmsSavedCartLineItem   WHERE ParentOmsSavedCartLineItemId IN (SELECT ParentOmsSavedCartLineItemId FROM @parenTofAddon)AND   OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon ) <> (SELECT COUNT (DISTINCT SKU ) FROM  #tempoi  WHERE OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon  )
		  BEGIN 
		    DELETE FROM #OldValue
		  END 

		 END 
		 ELSE IF (SELECT COUNT (OmsSavedCartLineItemId) FROM #OldValue WHERE ParentOmsSavedCartLineItemId IS NULL ) > 1 
		 BEGIN 
		 -- SELECT 3
		    DECLARE @TBL_deleteParentOmsSavedCartLineItemId TABLE (OmsSavedCartLineItemId INT )
			INSERT INTO @TBL_deleteParentOmsSavedCartLineItemId 
			SELECT ParentOmsSavedCartLineItemId
			FROM ZnodeOmsSavedCartLineItem a 
			WHERE ParentOmsSavedCartLineItemId IN (SELECT OmsSavedCartLineItemId FROM #OldValue WHERE OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdConfigurable  )
			AND OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon 

			DELETE FROM #OldValue WHERE OmsSavedCartLineItemId IN (SELECT OmsSavedCartLineItemId FROM @TBL_deleteParentOmsSavedCartLineItemId)
			OR ParentOmsSavedCartLineItemId IN (SELECT OmsSavedCartLineItemId FROM @TBL_deleteParentOmsSavedCartLineItemId)
		    
			 DELETE FROM #OldValue WHERE OmsSavedCartLineItemId NOT IN (SELECT ISNULL(m.ParentOmsSavedCartLineItemId,0) FROM #OldValue m)
		    AND ParentOmsSavedCartLineItemId IS  NULL  

		 END
		 ELSE IF (SELECT COUNT (DISTINCT SKU ) FROM  #OldValue  WHERE OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon ) <> (SELECT COUNT (DISTINCT SKU ) FROM  #tempoi  WHERE OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon  )
		  BEGIN 
		    DELETE FROM #OldValue
		  END  
		 ELSE IF  EXISTS (SELECT TOP 1 1 FROM ZnodeOmsSavedCartLineItem Wt WHERE EXISTS (SELECT TOP 1 1 FROM #OldValue ty WHERE ty.OmsSavedCartId = wt.OmsSavedCartId AND ty.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdConfigurable AND wt.ParentOmsSavedCartLineItemId= ty.OmsSavedCartLineItemId  ) AND wt.OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdAddon)
		      AND EXISTS (SELECT TOP 1 1 FROM @SaveCartLineItemType WHERE ISNULL(AddOnValueIds,'')  = '' )
		 BEGIN 
		   DELETE FROM #OldValue
		 END 

		END 

		

		
		DECLARE @TBL_Personaloldvalues TABLE (OmsSavedCartLineItemId INT , PersonalizeCode NVARCHAr(max), PersonalizeValue NVARCHAr(max))
		
		INSERT INTO @TBL_Personaloldvalues
		SELECT OmsSavedCartLineItemId , PersonalizeCode, PersonalizeValue
		FROM ZnodeOmsPersonalizeCartItem  a 
		WHERE EXISTS (SELECT TOP 1 1 FROM #OldValue TY WHERE TY.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId)
		AND EXISTS (SELECT TOP 1 1 FROM @TBL_Personalise TU WHERE TU.PersonalizeCode = a.PersonalizeCode AND TU.PersonalizeValue = a.PersonalizeValue)
		
		IF  NOT EXISTS (SELECT TOP 1 1 FROM @TBL_Personaloldvalues)
		   AND EXISTS (SELECT TOP 1 1 FROM @TBL_Personalise )
		BEGIN 
		 DELETE FROM #OldValue
		END 
		ELSE 
		BEGIN 
		  IF EXISTS (SELECT TOP 1 1 FROM @TBL_Personaloldvalues)
		 AND (SELECT COUNT (DISTINCT OmsSavedCartLineItemId ) FROM #OldValue WHERE ParentOmsSavedCartLineItemId IS nULL ) > 1 
		 BEGIN 
		    DELETE FROM #OldValue WHERE OmsSavedCartLineItemId IN (
		   SELECT OmsSavedCartLineItemId FROM #OldValue WHERE OmsSavedCartLineItemId NOT IN (SELECT OmsSavedCartLineItemId FROM @TBL_Personaloldvalues )
		   AND ParentOmsSavedCartLineItemId NOT IN (SELECT OmsSavedCartLineItemId FROM @TBL_Personaloldvalues ) ) 
		   OR OmsSavedCartLineItemId IN ( SELECT ParentOmsSavedCartLineItemId FROM #OldValue WHERE OmsSavedCartLineItemId NOT IN (SELECT OmsSavedCartLineItemId FROM @TBL_Personaloldvalues )
		   AND ParentOmsSavedCartLineItemId NOT IN (SELECT OmsSavedCartLineItemId FROM @TBL_Personaloldvalues ))
		
		 END 
		 ELSE IF NOT EXISTS (SELECT TOP 1 1 FROM @TBL_Personaloldvalues)
		 AND (SELECT COUNT (DISTINCT OmsSavedCartLineItemId ) FROM #OldValue WHERE ParentOmsSavedCartLineItemId IS nULL ) > 1 
		 BEGIN 
		 
		   DELETE n FROM #OldValue n WHERE OmsSavedCartLineItemId  IN (SELECT OmsSavedCartLineItemId FROM ZnodeOmsPersonalizeCartItem WHERE n.OmsSavedCartLineItemId = ZnodeOmsPersonalizeCartItem.OmsSavedCartLineItemId  )
		   OR ParentOmsSavedCartLineItemId  IN (SELECT OmsSavedCartLineItemId FROM ZnodeOmsPersonalizeCartItem   )
	
		 END 
		 ELSE IF NOT EXISTS (SELECT TOP 1 1  FROM @TBL_Personalise)
		        AND EXISTS (SELECT TOP 1 1 FROM ZnodeOmsPersonalizeCartItem m WHERE EXISTS (SELECT Top 1 1 FROM #OldValue YU WHERE YU.OmsSavedCartLineItemId = m.OmsSavedCartLineItemId )) 
		       AND (SELECT COUNT (DISTINCT OmsSavedCartLineItemId ) FROM #OldValue WHERE ParentOmsSavedCartLineItemId IS nULL ) = 1
		 BEGIN 
		     DELETE FROM #OldValue WHERE NOT EXISTS (SELECT TOP 1 1  FROM @TBL_Personalise)
		 END 
		END 

		--------If lineitem present in ZnodeOmsPersonalizeCartItem and personalize value is different for same line item then New lineItem will generate
		--------If lineitem present in ZnodeOmsPersonalizeCartItem and personalize value is same for same line item then Quantity will added
		;with cte as
		(
			SELECT b.OmsSavedCartLineItemId ,a.ParentOmsSavedCartLineItemId , a.ConfigurableProductIds as SKU
					,Tbl.Col.value( 'PersonalizeCode[1]', 'NVARCHAR(Max)' ) AS PersonalizeCode
			  		,Tbl.Col.value( 'PersonalizeValue[1]', 'NVARCHAR(Max)' ) AS PersonalizeValue
					,Tbl.Col.value( 'DesignId[1]', 'NVARCHAR(Max)' ) AS DesignId
					,Tbl.Col.value( 'ThumbnailURL[1]', 'NVARCHAR(Max)' ) AS ThumbnailURL
			FROM @SaveCartLineItemType a 
			Inner Join #OldValue b on a.ConfigurableProductIds = b.SKU
			CROSS APPLY a.PersonalisedAttribute.nodes( '//PersonaliseValueModel' ) AS Tbl(Col)  
			Inner join ZnodeOmsPersonalizeCartItem c on b.OmsSavedCartLineItemId = c.OmsSavedCartLineItemId
			WHERE a.OmsSavedCartLineItemId = 0
		)
		delete c1
		from cte a1		  
		Inner Join #OldValue b1 on a1.SKU = b1.SKU
		inner join #OldValue c1 on (b1.ParentOmsSavedCartLineItemId = c1.OmsSavedCartLineItemId OR b1.OmsSavedCartLineItemId = c1.OmsSavedCartLineItemId)
		where not exists(select * from ZnodeOmsPersonalizeCartItem c where a1.OmsSavedCartLineItemId = c.OmsSavedCartLineItemId and a1.PersonalizeValue = c.PersonalizeValue)
		
		IF EXISTS (SELECT TOP 1 1 FROM #OldValue )
		BEGIN 

		 UPDATE a
		SET a.Quantity = a.Quantity+ty.Quantity,
		a.Custom1 = ty.Custom1,
		a.Custom2 = ty.Custom2,
		a.Custom3 = ty.Custom3,
		a.Custom4 = ty.Custom4,
		a.Custom5 = ty.Custom5  
		FROM ZnodeOmsSavedCartLineItem a
		INNER JOIN #OldValue b ON (a.OmsSavedCartLineItemId = b.OmsSavedCartLineItemId)
		INNER JOIN #tempoi ty ON (ty.SKU = b.SKU)
		WHERE a.OrderLineItemRelationshipTypeId <> @OrderLineItemRelationshipTypeIdAddon
		 
		 UPDATE a
		 SET a.Quantity = a.Quantity+s.AddOnQuantity
		 FROM ZnodeOmsSavedCartLineItem a
		 INNER JOIN #OldValue b ON (a.ParentOmsSavedCartLineItemId = b.OmsSavedCartLineItemId)
		 INNER JOIN @SaveCartLineItemType S on a.OmsSavedCartId = s.OmsSavedCartId and a.SKU = s.AddOnValueIds
		 WHERE a.OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdAddon


		END 
		ELSE 
		BEGIN 
		
		
			   
    SELECT RowId, Id ,Row_number()Over(Order BY RowId, Id,GenId) NewRowId , ParentOmsSavedCartLineItemId ,OmsSavedCartId,SKU,Quantity,OrderLineItemRelationshipTypeId  
       ,CustomText,CartAddOnDetails,ROW_NUMBER()Over(Order BY NewId() ) Sequence ,AutoAddon  
       ,OmsOrderId,Custom1,Custom2,Custom3 ,Custom4 ,Custom5,GroupId,ProductName ,min(Description)Description  ,ParentSKU  
     INTO #yuuete   
     FROM  #tempoi  
     GROUP BY ParentOmsSavedCartLineItemId ,OmsSavedCartId,SKU,Quantity,OrderLineItemRelationshipTypeId  
       ,CustomText,CartAddOnDetails ,AutoAddon  
       ,OmsOrderId,Custom1,Custom2,Custom3 ,Custom4 ,Custom5,GroupId,ProductName ,RowId, Id ,GenId,ParentSKU   
     ORDER BY RowId, Id   
       	     
    DELETE FROM #yuuete WHERE Quantity <=0  
  
     ;WITH VTTY AS   
    (  
    SELECT m.RowId OldRowId , TY1.RowId , TY1.SKU   
       FROM #yuuete m  
    INNER JOIN  #yuuete TY1 ON TY1.SKU = m.ParentSKU   
    WHERE m.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon   
    )   
    UPDATE m1   
    SET m1.RowId = TYU.RowId  
    FROM #yuuete m1   
    INNER JOIN VTTY TYU ON (TYU.OldRowId = m1.RowId)  
        
    
    ;WITH VTRET AS   
    (  
    SELECT RowId,id,Min(NewRowId)NewRowId ,SKU ,ParentSKU  ,OrderLineItemRelationshipTypeID  
    FROM #yuuete   
    GROUP BY RowId,id ,SKU ,ParentSKU  ,OrderLineItemRelationshipTypeID  
	Having  SKU = ParentSKU  AND OrderLineItemRelationshipTypeID <> @OrderLineItemRelationshipTypeIdAddon
    )   
  
    DELETE FROM #yuuete WHERE NewRowId  IN (SELECT NewRowId FROM VTRET)   
     
       INSERT INTO  ZnodeOmsSavedCartLineItem (ParentOmsSavedCartLineItemId ,OmsSavedCartId,SKU,Quantity,OrderLineItemRelationshipTypeId  
       ,CustomText,CartAddOnDetails,Sequence,	CreatedBY,CreatedDate,ModifiedBy ,ModifiedDate,AutoAddon  
       ,OmsOrderId,Custom1,Custom2,Custom3 ,Custom4 ,Custom5,GroupId,ProductName ,Description)  
       OUTPUT INSERTED.OmsSavedCartLineItemId  INTO @OmsInsertedData 
	   SELECT NULL ,OmsSavedCartId,SKU,Quantity,OrderLineItemRelationshipTypeId  
       ,CustomText,CartAddOnDetails,ROW_NUMBER()Over(Order BY NewRowId)  sequence,@UserId,@GetDate,@UserId,@GetDate,AutoAddon  
       ,OmsOrderId,Custom1,Custom2,Custom3 ,Custom4 ,Custom5,GroupId,ProductName ,Description   
       FROM  #yuuete  TH  
  
 
	 ;with Cte_newData AS   
    (  
    SELECT  MAX(a.OmsSavedCartLineItemId ) OmsSavedCartLineItemId 
	, b.RowId ,b.GroupId ,b.SKU ,b.ParentSKU  
    FROM ZnodeOmsSavedCartLineItem a  
    INNER JOIN #yuuete b ON (a.OmsSavedCartId = b.OmsSavedCartId AND a.SKU = b.ParentSKU AND ISNULL(b.GroupId,'-') = ISNULL(a.GroupId,'-')  )  
    WHERE ISNULL(a.ParentOmsSavedCartLineItemId,0) =0  
	AND EXISTS (SELECT TOP 1 1  FROM @OmsInsertedData ui WHERE ui.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId )
	--	AND NOT EXISTS (SELECT TOP 1 1 FROM #OldValue TY WHERE TY.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId)
		AND b.OrderLineItemRelationshipTypeID <> @OrderLineItemRelationshipTypeIdAddon
		-- AND CASE WHEN EXISTS (SELECT TOP 1 1 FROM #yuuete TU WHERE TU.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdSimple)  THEN ISNULL(a.OrderLineItemRelationshipTypeID,0) ELSE 0 END = 0 
     GROUP BY b.RowId ,b.GroupId ,b.SKU	,b.ParentSKU,b.OrderLineItemRelationshipTypeID			
    )   
	
    UPDATE a SET a.ParentOmsSavedCartLineItemId = (SELECT TOP 1 OmsSavedCartLineItemId FROM  Cte_newData  r  
    WHERE  r.RowId = b.RowId AND ISNULL(r.GroupId,'-') = ISNULL(a.GroupId,'-')  Order by b.RowId )   
    FROM ZnodeOmsSavedCartLineItem a  
    INNER JOIN #yuuete b ON (a.OmsSavedCartId = b.OmsSavedCartId AND a.SKU = b.SKU AND b.id =1  )   
    WHERE a.OrderLineItemRelationshipTypeId IS NOT NULL   
    AND b.OrderLineItemRelationshipTypeID <> @OrderLineItemRelationshipTypeIdAddon  
    AND a.ParentOmsSavedCartLineItemId IS nULL   
    AND EXISTS (SELECT TOP 1 1  FROM @OmsInsertedData ui WHERE ui.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId )

	---------------------------------------------------------------------------------------------------------------------

	 ;with Cte_newData AS   
    (  
    SELECT  MIN(a.OmsSavedCartLineItemId ) OmsSavedCartLineItemId 
	, b.RowId ,b.GroupId ,b.SKU ,b.ParentSKU  
    FROM ZnodeOmsSavedCartLineItem a  
    INNER JOIN #yuuete b ON (a.OmsSavedCartId = b.OmsSavedCartId AND a.SKU = b.ParentSKU AND ISNULL(b.GroupId,'-') = ISNULL(a.GroupId,'-')  )  
    WHERE ISNULL(a.ParentOmsSavedCartLineItemId,0) =0  
	AND EXISTS (SELECT TOP 1 1  FROM @OmsInsertedData ui WHERE ui.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId )
	--	AND NOT EXISTS (SELECT TOP 1 1 FROM #OldValue TY WHERE TY.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId)
	AND b.OrderLineItemRelationshipTypeID <> @OrderLineItemRelationshipTypeIdAddon
	-- AND CASE WHEN EXISTS (SELECT TOP 1 1 FROM #yuuete TU WHERE TU.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdSimple)  THEN ISNULL(a.OrderLineItemRelationshipTypeID,0) ELSE 0 END = 0 
     GROUP BY b.RowId ,b.GroupId ,b.SKU	,b.ParentSKU,b.OrderLineItemRelationshipTypeID			
    ) 

	UPDATE a SET a.ParentOmsSavedCartLineItemId = (SELECT TOP 1 OmsSavedCartLineItemId FROM  Cte_newData  r  
    WHERE  r.RowId = b.RowId AND ISNULL(r.GroupId,'-') = ISNULL(a.GroupId,'-')  Order by b.RowId )   
    FROM ZnodeOmsSavedCartLineItem a  
    INNER JOIN #yuuete b ON (a.OmsSavedCartId = b.OmsSavedCartId AND a.SKU = b.SKU AND b.id =1  )   
    WHERE a.OrderLineItemRelationshipTypeId IS NOT NULL   
    AND b.OrderLineItemRelationshipTypeID <> @OrderLineItemRelationshipTypeIdAddon     
    AND EXISTS (SELECT TOP 1 1  FROM @OmsInsertedData ui WHERE ui.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId )
	AND  a.sequence in (SELECT  MIN(ab.sequence) FROM ZnodeOmsSavedCartLineItem ab where a.OmsSavedCartId = ab.OmsSavedCartId and 
	 a.SKU = ab.sku and ab.OrderLineItemRelationshipTypeId is not null  ) 
 
	---------------------------------------------------------------------------------------------------------------------------
    --;with Cte_newAddon AS   
    --(  
    SELECT a.OmsSavedCartLineItemId , b.RowId  ,b.SKU ,b.ParentSKU  ,Row_number()Over(Order BY c.OmsSavedCartLineItemId  )RowIdNo
    INTO #Cte_newAddon
	FROM ZnodeOmsSavedCartLineItem a  
    INNER JOIN #yuuete b ON (a.OmsSavedCartId = b.OmsSavedCartId AND a.SKU = b.ParentSKU AND ( b.Id = 1  ))  
    INNER JOIN ZnodeOmsSavedCartLineItem c on b.sku = c.sku and b.OmsSavedCartId=c.OmsSavedCartId and b.Id = 1 
	WHERE ( ISNULL(a.ParentOmsSavedCartLineItemId,0) <> 0   )
    AND b.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon  
	AND EXISTS (SELECT TOP 1 1  FROM @OmsInsertedData ui WHERE ui.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId ) and c.ParentOmsSavedCartLineItemId is null
  --  )   
  
   ;with table_update AS 
   (
     SELECT * , ROW_NUMBER()Over(Order BY OmsSavedCartLineItemId  ) RowIdNo
	 FROM ZnodeOmsSavedCartLineItem a
	 WHERE a.OrderLineItemRelationshipTypeId IS NOT NULL   
     AND a.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon  
     AND a.ParentOmsSavedCartLineItemId IS NULL  
	 AND EXISTS (SELECT TOP 1 1  FROM  #yuuete ty WHERE ty.OmsSavedCartId = a.OmsSavedCartId )
	 AND EXISTS (SELECT TOP 1 1  FROM @OmsInsertedData ui WHERE ui.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId )
   )

     UPDATE a SET  
    --SELECT  a.OmsSavedCartLineItemId,
	a.ParentOmsSavedCartLineItemId = (SELECT TOP 1 max(OmsSavedCartLineItemId) 
	  FROM #Cte_newAddon  r  
    WHERE  r.ParentSKU = b.ParentSKU AND a.SKU = r.SKU AND a.RowIdNo = r.RowIdNo  GROUP BY r.ParentSKU, r.SKU  )   
    FROM table_update a  
    INNER JOIN #yuuete b ON (a.OmsSavedCartId = b.OmsSavedCartId AND a.SKU = b.SKU AND b.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon AND  b.id =1 )   
    WHERE (SELECT TOP 1 max(OmsSavedCartLineItemId) 
	  FROM #Cte_newAddon  r  
    WHERE  r.ParentSKU = b.ParentSKU AND a.SKU = r.SKU AND a.RowIdNo = r.RowIdNo  GROUP BY r.ParentSKU, r.SKU  )    IS nOT NULL 
	 

    ;with Cte_Th AS   
    (             
      SELECT RowId    
     FROM #yuuete a   
     GROUP BY RowId   
     HAVING COUNT(NewRowId) <= 1   
      )   
    UPDATE a SET a.Quantity =  NULL   
    FROM ZnodeOmsSavedCartLineItem a  
    INNER JOIN #yuuete b ON (a.OmsSavedCartId = b.OmsSavedCartId AND a.SKU = b.SKU AND b.id =0)   
    WHERE NOT EXISTS (SELECT TOP 1 1  FROM Cte_Th TY WHERE TY.RowId = b.RowId )  
     AND a.OrderLineItemRelationshipTypeId IS NULL   
  
    UPDATE  ZnodeOmsSavedCartLineItem   
    SET GROUPID = NULL   
    WHERE  EXISTS (SELECT TOP 1 1  FROM #yuuete RT WHERE RT.OmsSavedCartId = ZnodeOmsSavedCartLineItem.OmsSavedCartId )  
    AND OrderLineItemRelationshipTypeId IS NOT NULL     
       ;With Cte_UpdateSequence AS   
     (  
       SELECT OmsSavedCartLineItemId ,Row_Number()Over(Order By OmsSavedCartLineItemId) RowId , Sequence   
       FROM ZnodeOmsSavedCartLineItem   
       WHERE EXISTS (SELECT TOP 1 1 FROM #yuuete TH WHERE TH.OmsSavedCartId = ZnodeOmsSavedCartLineItem.OmsSavedCartId )  
     )   
    UPDATE Cte_UpdateSequence  
    SET  Sequence = RowId  
			
	
	UPDATE @TBL_Personalise
	SET OmsSavedCartLineItemId = b.OmsSavedCartLineItemId
	FROM @OmsInsertedData a 
	INNER JOIN ZnodeOmsSavedCartLineItem b ON (a.OmsSavedCartLineItemId = b.OmsSavedCartLineItemId  and b.OrderLineItemRelationshipTypeID <> @OrderLineItemRelationshipTypeIdAddon)
	WHERE b.ParentOmsSavedCartLineItemId IS not nULL 
	
	DELETE FROM ZnodeOmsPersonalizeCartItem WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_Personalise yu WHERE yu.OmsSavedCartLineItemId = ZnodeOmsPersonalizeCartItem.OmsSavedCartLineItemId )
						
    MERGE INTO ZnodeOmsPersonalizeCartItem TARGET 
	USING @TBL_Personalise SOURCE
		   ON (TARGET.OmsSavedCartLineItemId = SOURCE.OmsSavedCartLineItemId ) 
		   WHEN NOT MATCHED THEN 
		    INSERT  ( OmsSavedCartLineItemId,  CreatedBy, CreatedDate, ModifiedBy, ModifiedDate
							,PersonalizeCode, PersonalizeValue,DesignId	,ThumbnailURL )
			VALUES (  SOURCE.OmsSavedCartLineItemId,  @userId, @getdate, @userId, @getdate
							,SOURCE.PersonalizeCode, SOURCE.PersonalizeValue,SOURCE.DesignId	,SOURCE.ThumbnailURL ) ;
  
		
		END 




END TRY
BEGIN CATCH 
  SELECT ERROR_MESSAGE()
END CATCH 
END
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_InsertUpdateSaveCartLineItemGroup')
BEGIN 
	DROP PROCEDURE Znode_InsertUpdateSaveCartLineItemGroup
END
GO

CREATE PROCEDURE [dbo].[Znode_InsertUpdateSaveCartLineItemGroup]
 (
	 @SaveCartLineItemType TT_SavecartLineitems READONLY  
	,@Userid  INT = 0 
	
 )
AS 
BEGIN 
BEGIN TRY 
 SET NOCOUNT ON 
   DECLARE @GetDate datetime= dbo.Fn_GetDate(); 
   DECLARE @OrderLineItemRelationshipTypeIdGroup int=
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'Group'
		);
	DECLARE @OrderLineItemRelationshipTypeIdAddon int =
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'AddOns'
		);
    DECLARE @TBL_Personalise TABLE (OmsSavedCartLineItemId INT ,PersonalizeCode NVARCHAr(max),PersonalizeValue NVARCHAr(max),DesignId NVARCHAr(max), ThumbnailURL NVARCHAr(max))
	DECLARE @OmsInsertedData TABLE (OmsSavedCartLineItemId INT ) 	

	INSERT INTO @TBL_Personalise
	SELECT  NULL 
				,Tbl.Col.value( 'PersonalizeCode[1]', 'NVARCHAR(Max)' ) AS PersonalizeCode
			,Tbl.Col.value( 'PersonalizeValue[1]', 'NVARCHAR(Max)' ) AS PersonalizeValue
			,Tbl.Col.value( 'DesignId[1]', 'NVARCHAR(Max)' ) AS DesignId
			,Tbl.Col.value( 'ThumbnailURL[1]', 'NVARCHAR(Max)' ) AS ThumbnailURL
	FROM (SELECT TOP 1 PersonalisedAttribute Valuex FROM  @SaveCartLineItemType TRTR  ) a 
	CROSS APPLY	a.Valuex.nodes( '//PersonaliseValueModel' ) AS Tbl(Col) 

	 CREATE TABLE #tempoi (GenId INT IDENTITY(1,1),RowId	int	,OmsSavedCartLineItemId	int	 ,ParentOmsSavedCartLineItemId	int,OmsSavedCartId	int
									,SKU	nvarchar(max) ,Quantity	numeric(28,6)	,OrderLineItemRelationshipTypeID	int	,CustomText	nvarchar(max)
									,CartAddOnDetails	nvarchar(max),Sequence	int	,AutoAddon	varchar(max)	,OmsOrderId	int	,ItemDetails	nvarchar(max)
									,Custom1	nvarchar(max)  ,Custom2	nvarchar(max),Custom3	nvarchar(max),Custom4	nvarchar(max),Custom5	nvarchar(max)
									,GroupId	nvarchar(max) ,ProductName	nvarchar(max),Description	nvarchar(max),Id	int,ParentSKU NVARCHAR(max))
	 
	       INSERT INTO #tempoi
			   SELECT  Min(RowId )RowId ,OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, SKU
					,Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, Sequence
					,AutoAddon, OmsOrderId, ItemDetails,Custom1,Custom2,Custom3,Custom4,Custom5,  GroupId ,ProductName,min(Description)Description	,0 Id,NULL ParentSKU 
			   FROM @SaveCartLineItemType a 
			   GROUP BY  OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, SKU
					,Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, Sequence
					,AutoAddon, OmsOrderId, ItemDetails,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,ProductName
	 
			INSERT INTO #tempoi 
			SELECT   Min(RowId )RowId ,OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, GroupProductIds
						,Quantity, @OrderLineItemRelationshipTypeIdGroup, CustomText, CartAddOnDetails, Sequence
						,AutoAddon, OmsOrderId, ItemDetails,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,ProductName,min(Description)Description	,1 Id,SKU ParentSKU  
			FROM @SaveCartLineItemType  a 
			WHERE GroupProductIds <> ''
			GROUP BY  OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, GroupProductIds
			,Quantity,  CustomText, CartAddOnDetails, Sequence ,AutoAddon, OmsOrderId, ItemDetails,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,ProductName,SKU
			 
			INSERT INTO #tempoi
			SELECT  Min(RowId )RowId ,OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, AddOnValueIds
			,AddOnQuantity, @OrderLineItemRelationshipTypeIdAddon, CustomText, CartAddOnDetails, Sequence
			,AutoAddon, OmsOrderId, ItemDetails,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,ProductName,min(Description)Description	,1 Id 
			,CASE WHEN ConfigurableProductIds <> ''  THEN ConfigurableProductIds
				  WHEN  GroupProductIds <> '' THEN GroupProductIds 
				  WHEN BundleProductIds <> '' THEN BundleProductIds 
				  ELSE SKU END     ParentSKU 
			FROM @SaveCartLineItemType  a 
			WHERE AddOnValueIds <> ''
				GROUP BY  OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, AddOnValueIds
				,AddOnQuantity,  CustomText, CartAddOnDetails, Sequence ,ConfigurableProductIds,GroupProductIds,	BundleProductIds
				,AutoAddon, OmsOrderId, ItemDetails,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,ProductName,SKU
		 

        CREATE TABLE #OldValue (OmsSavedCartId INT ,OmsSavedCartLineItemId INT,ParentOmsSavedCartLineItemId INT , SKU  NVARCHAr(2000),OrderLineItemRelationshipTypeID INT  )
		 
		INSERT INTO #OldValue  
		SELECT  a.OmsSavedCartId,a.OmsSavedCartLineItemId,a.ParentOmsSavedCartLineItemId , a.SKU  ,a.OrderLineItemRelationshipTypeID 
	  	FROM ZnodeOmsSavedCartLineItem a   
		WHERE EXISTS (SELECT TOP 1 1 FROM @SaveCartLineItemType  TY WHERE TY.OmsSavedCartId = a.OmsSavedCartId AND ISNULL(a.SKU,'') = ISNULL(TY.GroupProductIds,'')   )   
        AND a.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdGroup   

		INSERT INTO #OldValue 
		SELECT DISTINCT b.OmsSavedCartId,b.OmsSavedCartLineItemId,b.ParentOmsSavedCartLineItemId , b.SKU  ,b.OrderLineItemRelationshipTypeID  
		FROM ZnodeOmsSavedCartLineItem b 
		INNER JOIN #OldValue c ON (c.ParentOmsSavedCartLineItemId  = b.OmsSavedCartLineItemId AND c.OmsSavedCartId = b.OmsSavedCartId)
		WHERE EXISTS (SELECT TOP 1 1 FROM @SaveCartLineItemType  TY WHERE TY.OmsSavedCartId = b.OmsSavedCartId AND ISNULL(b.SKU,'') = ISNULL(TY.SKU,'') AND ISNULL(b.Groupid,'-') = ISNULL(TY.Groupid,'-')  )
		AND  b.OrderLineItemRelationshipTypeID IS NULL 

		------Merge Addon for same product
		SELECT * INTO #OldValueForAddon from #OldValue

		DELETE a FROM #OldValue a WHERE NOT EXISTS (SELECT TOP 1 1  FROM #OldValue b WHERE b.ParentOmsSavedCartLineItemId IS NULL AND b.OmsSavedCartLineItemId = a.ParentOmsSavedCartLineItemId)
		AND a.ParentOmsSavedCartLineItemId IS NOT NULL 

		INSERT INTO #OldValue 
		SELECT b.OmsSavedCartId,b.OmsSavedCartLineItemId,b.ParentOmsSavedCartLineItemId , b.SKU  ,b.OrderLineItemRelationshipTypeID  
		FROM ZnodeOmsSavedCartLineItem b 
		INNER JOIN #OldValue c ON (c.OmsSavedCartLineItemId  = b.ParentOmsSavedCartLineItemId AND c.OmsSavedCartId = b.OmsSavedCartId)
		WHERE EXISTS (SELECT TOP 1 1 FROM @SaveCartLineItemType  TY WHERE TY.OmsSavedCartId = b.OmsSavedCartId AND ISNULL(b.SKU,'') = ISNULL(TY.AddOnValueIds,'') )
		AND  b.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon

		------Merge Addon for same product
		IF EXISTS(SELECT * FROM @SaveCartLineItemType WHERE ISNULL(AddOnValueIds,'') <> '' )
		BEGIN

			INSERT INTO #OldValueForAddon 
			SELECT b.OmsSavedCartId,b.OmsSavedCartLineItemId,b.ParentOmsSavedCartLineItemId , b.SKU  ,b.OrderLineItemRelationshipTypeID  
			FROM ZnodeOmsSavedCartLineItem b 
			INNER JOIN #OldValueForAddon c ON (c.OmsSavedCartLineItemId  = b.ParentOmsSavedCartLineItemId AND c.OmsSavedCartId = b.OmsSavedCartId)
			WHERE EXISTS (SELECT TOP 1 1 FROM @SaveCartLineItemType  TY WHERE TY.OmsSavedCartId = b.OmsSavedCartId )--AND ISNULL(b.SKU,'') = ISNULL(TY.AddOnValueIds,'') )
			AND  b.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon

			SELECT distinct SKU, STUFF(
										( SELECT  ', ' + SKU FROM    
											( SELECT DISTINCT SKU FROM     #OldValueForAddon b 
											  where a.OmsSavedCartLineItemId=b.ParentOmsSavedCartLineItemId and OrderLineItemRelationshipTypeID = 1 ) x 
											  FOR XML PATH('')
										), 1, 2, ''
									 ) AddOns
			INTO #AddOnsExists
			from #OldValueForAddon a where a.ParentOmsSavedCartLineItemId is not null and OrderLineItemRelationshipTypeID<>1

			SELECT distinct a.GroupProductIds SKU, STUFF(
										 ( SELECT  ', ' + x.AddOnValueIds FROM    
											( SELECT DISTINCT b.AddOnValueIds FROM @SaveCartLineItemType b
											  where a.SKU=b.SKU ) x
											  FOR XML PATH('')
										 ), 1, 2, ''
									   ) AddOns
			INTO #AddOnAdded
			from @SaveCartLineItemType a

			if not exists(select * from #AddOnsExists a inner join #AddOnAdded b on a.SKU = b.SKU and a.AddOns = b.AddOns )
			begin
				delete from #OldValue
			end

		END

		IF NOT EXISTS (SELECT TOP 1 1  FROM @SaveCartLineItemType ty WHERE EXISTS (SELECT TOP 1 1 FROM 	#OldValue a WHERE	
		ISNULL(TY.AddOnValueIds,'') = a.SKU AND  a.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon ))
		AND EXISTS (SELECT TOP 1 1 FROM @SaveCartLineItemType WHERE ISNULL(AddOnValueIds,'')  <> '' )
		BEGIN 
		
		DELETE FROM #OldValue 
		END 
		ELSE 
		BEGIN 
		
		 IF EXISTS (SELECT TOP 1 1 FROM @SaveCartLineItemType WHERE ISNULL(AddOnValueIds,'')  <> '' )
		 BEGIN 
		 
		 DECLARE @parenTofAddon  TABLE( ParentOmsSavedCartLineItemId INT  )  
		 INSERT INTO  @parenTofAddon 
		 SELECT  ParentOmsSavedCartLineItemId FROM #OldValue a
		 WHERE a.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon  
		 AND (SELECT COUNT (DISTINCT SKU ) FROM  ZnodeOmsSavedCartLineItem  t WHERE t.ParentOmsSavedCartLineItemId = a.ParentOmsSavedCartLineItemId AND   t.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon ) = (SELECT COUNT (DISTINCT SKU ) FROM  #tempoi  WHERE OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon  )
		  
		 DELETE FROM #OldValue WHERE OmsSavedCartLineItemId NOT IN (SELECT ParentOmsSavedCartLineItemId FROM  @parenTofAddon)   
					AND ParentOmsSavedCartLineItemId IS NOT NULL  
					AND OrderLineItemRelationshipTypeID <> @OrderLineItemRelationshipTypeIdAddon

		 DELETE FROM #OldValue WHERE OmsSavedCartLineItemId NOT IN (SELECT ISNULL(m.ParentOmsSavedCartLineItemId,0) FROM #OldValue m)
		 AND ParentOmsSavedCartLineItemId IS  NULL  
		 

		  IF (SELECT COUNT (DISTINCT SKU ) FROM  #OldValue  WHERE OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon ) <> (SELECT COUNT (DISTINCT SKU ) FROM  #tempoi  WHERE OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon  )
		  BEGIN 
		    DELETE FROM #OldValue
		  END 
		 IF (SELECT COUNT (DISTINCT SKU ) FROM  ZnodeOmsSavedCartLineItem   WHERE ParentOmsSavedCartLineItemId IN (SELECT ParentOmsSavedCartLineItemId FROM @parenTofAddon)AND   OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon ) <> (SELECT COUNT (DISTINCT SKU ) FROM  #tempoi  WHERE OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon  )
		  BEGIN 
		    DELETE FROM #OldValue
		  END 

		 END 
		 ELSE IF (SELECT COUNT (OmsSavedCartLineItemId) FROM #OldValue WHERE ParentOmsSavedCartLineItemId IS NULL ) > 1 
		 BEGIN 
		 -- SELECT 3
		    DECLARE @TBL_deleteParentOmsSavedCartLineItemId TABLE (OmsSavedCartLineItemId INT )
			INSERT INTO @TBL_deleteParentOmsSavedCartLineItemId 
			SELECT ParentOmsSavedCartLineItemId
			FROM ZnodeOmsSavedCartLineItem a 
			WHERE ParentOmsSavedCartLineItemId IN (SELECT OmsSavedCartLineItemId FROM #OldValue WHERE OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdGroup  )
			AND OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon 

			DELETE FROM #OldValue WHERE OmsSavedCartLineItemId IN (SELECT OmsSavedCartLineItemId FROM @TBL_deleteParentOmsSavedCartLineItemId)
			OR ParentOmsSavedCartLineItemId IN (SELECT OmsSavedCartLineItemId FROM @TBL_deleteParentOmsSavedCartLineItemId)
		    
			 DELETE FROM #OldValue WHERE OmsSavedCartLineItemId NOT IN (SELECT ISNULL(m.ParentOmsSavedCartLineItemId,0) FROM #OldValue m)
		     AND ParentOmsSavedCartLineItemId IS  NULL  

		 END
		 ELSE IF (SELECT COUNT (DISTINCT SKU ) FROM  #OldValue  WHERE OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon ) <> (SELECT COUNT (DISTINCT SKU ) FROM  #tempoi  WHERE OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon  )
		  BEGIN 
		    DELETE FROM #OldValue
		  END 
		   ELSE IF  EXISTS (SELECT TOP 1 1 FROM ZnodeOmsSavedCartLineItem Wt WHERE EXISTS (SELECT TOP 1 1 FROM #OldValue ty WHERE ty.OmsSavedCartId = wt.OmsSavedCartId AND ty.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdGroup AND wt.ParentOmsSavedCartLineItemId= ty.OmsSavedCartLineItemId  ) AND wt.OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdAddon)
		      AND EXISTS (SELECT TOP 1 1 FROM @SaveCartLineItemType WHERE ISNULL(AddOnValueIds,'')  = '' )
			 BEGIN 
			   DELETE FROM #OldValue
			 END  
		END 

	


		DECLARE @TBL_Personaloldvalues TABLE (OmsSavedCartLineItemId INT , PersonalizeCode NVARCHAr(max), PersonalizeValue NVARCHAr(max))
		INSERT INTO @TBL_Personaloldvalues
		SELECT OmsSavedCartLineItemId , PersonalizeCode, PersonalizeValue
		FROM ZnodeOmsPersonalizeCartItem  a 
		WHERE EXISTS (SELECT TOP 1 1 FROM #OldValue TY WHERE TY.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId)
		AND EXISTS (SELECT TOP 1 1 FROM @TBL_Personalise TU WHERE TU.PersonalizeCode = a.PersonalizeCode AND TU.PersonalizeValue = a.PersonalizeValue)
		
		IF  NOT EXISTS (SELECT TOP 1 1 FROM @TBL_Personaloldvalues)
		   AND EXISTS (SELECT TOP 1 1 FROM @TBL_Personalise )
		BEGIN 
		 DELETE FROM #OldValue
		END 
		ELSE 
		BEGIN 
		 IF EXISTS (SELECT TOP 1 1 FROM @TBL_Personaloldvalues)
		 AND (SELECT COUNT (DISTINCT OmsSavedCartLineItemId ) FROM #OldValue WHERE ParentOmsSavedCartLineItemId IS nULL ) > 1 
		 BEGIN 
		   
		   DELETE FROM #OldValue WHERE OmsSavedCartLineItemId IN (
		   SELECT OmsSavedCartLineItemId FROM #OldValue WHERE OmsSavedCartLineItemId NOT IN (SELECT OmsSavedCartLineItemId FROM @TBL_Personaloldvalues )
		   AND ParentOmsSavedCartLineItemId NOT IN (SELECT OmsSavedCartLineItemId FROM @TBL_Personaloldvalues ) ) 
		   OR OmsSavedCartLineItemId IN ( SELECT ParentOmsSavedCartLineItemId FROM #OldValue WHERE OmsSavedCartLineItemId NOT IN (SELECT OmsSavedCartLineItemId FROM @TBL_Personaloldvalues )
		   AND ParentOmsSavedCartLineItemId NOT IN (SELECT OmsSavedCartLineItemId FROM @TBL_Personaloldvalues ))
		
		 END 
		 ELSE IF NOT EXISTS (SELECT TOP 1 1 FROM @TBL_Personaloldvalues)
		 AND (SELECT COUNT (DISTINCT OmsSavedCartLineItemId ) FROM #OldValue WHERE ParentOmsSavedCartLineItemId IS nULL ) > 1 
		 BEGIN 
		 
		   DELETE n FROM #OldValue n WHERE OmsSavedCartLineItemId  IN (SELECT OmsSavedCartLineItemId FROM ZnodeOmsPersonalizeCartItem WHERE n.OmsSavedCartLineItemId = ZnodeOmsPersonalizeCartItem.OmsSavedCartLineItemId  )
		   OR ParentOmsSavedCartLineItemId  IN (SELECT OmsSavedCartLineItemId FROM ZnodeOmsPersonalizeCartItem   )
		
		 END 
		 ELSE IF NOT EXISTS (SELECT TOP 1 1  FROM @TBL_Personalise)
		        AND EXISTS (SELECT TOP 1 1 FROM ZnodeOmsPersonalizeCartItem m WHERE EXISTS (SELECT Top 1 1 FROM #OldValue YU WHERE YU.OmsSavedCartLineItemId = m.OmsSavedCartLineItemId )) 
		       AND (SELECT COUNT (DISTINCT OmsSavedCartLineItemId ) FROM #OldValue WHERE ParentOmsSavedCartLineItemId IS nULL ) = 1
		 BEGIN 
		     DELETE FROM #OldValue WHERE NOT EXISTS (SELECT TOP 1 1  FROM @TBL_Personalise)
		 END 
		END 
		
		--------If lineitem present in ZnodeOmsPersonalizeCartItem and personalize value is different for same line item then New lineItem will generate
		--------If lineitem present in ZnodeOmsPersonalizeCartItem and personalize value is same for same line item then Quantity will added
		;with cte as
		(
			SELECT b.OmsSavedCartLineItemId ,a.ParentOmsSavedCartLineItemId , a.GroupProductIds as SKU
					,Tbl.Col.value( 'PersonalizeCode[1]', 'NVARCHAR(Max)' ) AS PersonalizeCode
			  		,Tbl.Col.value( 'PersonalizeValue[1]', 'NVARCHAR(Max)' ) AS PersonalizeValue
					,Tbl.Col.value( 'DesignId[1]', 'NVARCHAR(Max)' ) AS DesignId
					,Tbl.Col.value( 'ThumbnailURL[1]', 'NVARCHAR(Max)' ) AS ThumbnailURL
			FROM @SaveCartLineItemType a 
			Inner Join #OldValue b on a.GroupProductIds = b.SKU
			CROSS APPLY a.PersonalisedAttribute.nodes( '//PersonaliseValueModel' ) AS Tbl(Col)  
			Inner join ZnodeOmsPersonalizeCartItem c on b.OmsSavedCartLineItemId = c.OmsSavedCartLineItemId
			WHERE a.OmsSavedCartLineItemId = 0
		)
		delete c1
		from cte a1		  
		Inner Join #OldValue b1 on a1.SKU = b1.SKU
		inner join #OldValue c1 on (b1.ParentOmsSavedCartLineItemId = c1.OmsSavedCartLineItemId OR b1.OmsSavedCartLineItemId = c1.OmsSavedCartLineItemId)
		where not exists(select * from ZnodeOmsPersonalizeCartItem c where a1.OmsSavedCartLineItemId = c.OmsSavedCartLineItemId and a1.PersonalizeValue = c.PersonalizeValue)
		
		IF EXISTS (SELECT TOP 1 1 FROM #OldValue )
		BEGIN 

		 UPDATE a
		SET a.Quantity = a.Quantity+ty.Quantity,
		a.Custom1 = ty.Custom1,
		a.Custom2 = ty.Custom2,
		a.Custom3 = ty.Custom3,
		a.Custom4 = ty.Custom4,
		a.Custom5 = ty.Custom5  
		FROM ZnodeOmsSavedCartLineItem a
		INNER JOIN #OldValue b ON (a.OmsSavedCartLineItemId = b.OmsSavedCartLineItemId)
		INNER JOIN #tempoi ty ON (ty.SKU = b.SKU)
		WHERE a.OrderLineItemRelationshipTypeId <> @OrderLineItemRelationshipTypeIdAddon

		 UPDATE a
		 SET a.Quantity = a.Quantity+s.AddOnQuantity
		 FROM ZnodeOmsSavedCartLineItem a
		 INNER JOIN #OldValue b ON (a.ParentOmsSavedCartLineItemId = b.OmsSavedCartLineItemId)
		 INNER JOIN @SaveCartLineItemType S on a.OmsSavedCartId = s.OmsSavedCartId and a.SKU = s.AddOnValueIds
		 WHERE a.OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdAddon

		END 
		ELSE 
		BEGIN 
		
		
			   
    SELECT RowId, Id ,Row_number()Over(Order BY RowId, Id,GenId) NewRowId , ParentOmsSavedCartLineItemId ,OmsSavedCartId,SKU,Quantity,OrderLineItemRelationshipTypeId  
       ,CustomText,CartAddOnDetails,ROW_NUMBER()Over(Order BY NewId() ) Sequence ,AutoAddon  
       ,OmsOrderId,Custom1,Custom2,Custom3 ,Custom4 ,Custom5,GroupId,ProductName ,min(Description)Description  ,ParentSKU  
     INTO #yuuete   
     FROM  #tempoi  
     GROUP BY ParentOmsSavedCartLineItemId ,OmsSavedCartId,SKU,Quantity,OrderLineItemRelationshipTypeId  
       ,CustomText,CartAddOnDetails ,AutoAddon  
       ,OmsOrderId,Custom1,Custom2,Custom3 ,Custom4 ,Custom5,GroupId,ProductName ,RowId, Id ,GenId,ParentSKU   
     ORDER BY RowId, Id   
       	    --select * from #yuuete
			
			 
    DELETE FROM #yuuete WHERE Quantity <=0  
  
     ;WITH VTTY AS   
    (  
    SELECT m.RowId OldRowId , TY1.RowId , TY1.SKU   
       FROM #yuuete m  
    INNER JOIN  #yuuete TY1 ON TY1.SKU = m.ParentSKU   
    WHERE m.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon   
    )   
    UPDATE m1   
    SET m1.RowId = TYU.RowId  
    FROM #yuuete m1   
    INNER JOIN VTTY TYU ON (TYU.OldRowId = m1.RowId)  
        
    
    ;WITH VTRET AS   
    (  
    SELECT RowId,id,Min(NewRowId)NewRowId ,SKU ,ParentSKU, OrderLineItemRelationshipTypeId 
    FROM #yuuete   
    GROUP BY RowId,id ,SKU ,ParentSKU  ,OrderLineItemRelationshipTypeId
	HAVING SKU = ParentSKU AND OrderLineItemRelationshipTypeID <> @OrderLineItemRelationshipTypeIdAddon
    )   


    DELETE FROM #yuuete WHERE NewRowId  IN (SELECT NewRowId FROM VTRET)   
     
       INSERT INTO  ZnodeOmsSavedCartLineItem (ParentOmsSavedCartLineItemId ,OmsSavedCartId,SKU,Quantity,OrderLineItemRelationshipTypeId  
       ,CustomText,CartAddOnDetails,Sequence,CreatedBY,CreatedDate,ModifiedBy ,ModifiedDate,AutoAddon  
       ,OmsOrderId,Custom1,Custom2,Custom3 ,Custom4 ,Custom5,GroupId,ProductName ,Description)  
       OUTPUT INSERTED.OmsSavedCartLineItemId  INTO @OmsInsertedData 
	   SELECT NULL ,OmsSavedCartId,SKU,Quantity,OrderLineItemRelationshipTypeId  
       ,CustomText,CartAddOnDetails,ROW_NUMBER()Over(Order BY NewRowId)  sequence,@UserId,@GetDate,@UserId,@GetDate,AutoAddon  
       ,OmsOrderId,Custom1,Custom2,Custom3 ,Custom4 ,Custom5,GroupId,ProductName ,Description   
       FROM  #yuuete  TH  
  
 
	 ;with Cte_newData AS   
    (  
    SELECT  MAX(a.OmsSavedCartLineItemId ) OmsSavedCartLineItemId 
	, b.RowId ,b.GroupId ,b.SKU ,b.ParentSKU  
    FROM ZnodeOmsSavedCartLineItem a  
    INNER JOIN #yuuete b ON (a.OmsSavedCartId = b.OmsSavedCartId AND a.SKU = b.ParentSKU AND ISNULL(b.GroupId,'-') = ISNULL(a.GroupId,'-')  )  
    WHERE ISNULL(a.ParentOmsSavedCartLineItemId,0) =0  
	AND EXISTS (SELECT TOP 1 1  FROM @OmsInsertedData ui WHERE ui.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId )
	--	AND NOT EXISTS (SELECT TOP 1 1 FROM #OldValue TY WHERE TY.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId)
		AND b.OrderLineItemRelationshipTypeID <> @OrderLineItemRelationshipTypeIdAddon
		-- AND CASE WHEN EXISTS (SELECT TOP 1 1 FROM #yuuete TU WHERE TU.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdSimple)  THEN ISNULL(a.OrderLineItemRelationshipTypeID,0) ELSE 0 END = 0 
     GROUP BY b.RowId ,b.GroupId ,b.SKU	,b.ParentSKU,b.OrderLineItemRelationshipTypeID	  )   
	
  
    UPDATE a SET a.ParentOmsSavedCartLineItemId = (SELECT TOP 1 OmsSavedCartLineItemId FROM  Cte_newData  r  
    WHERE  r.RowId = b.RowId AND ISNULL(r.GroupId,'-') = ISNULL(a.GroupId,'-')  Order by b.RowId )   
    FROM ZnodeOmsSavedCartLineItem a  
    INNER JOIN #yuuete b ON (a.OmsSavedCartId = b.OmsSavedCartId AND a.SKU = b.SKU AND b.id =1  )   
    WHERE a.OrderLineItemRelationshipTypeId IS NOT NULL   
    AND b.OrderLineItemRelationshipTypeID <> @OrderLineItemRelationshipTypeIdAddon  
    AND a.ParentOmsSavedCartLineItemId IS nULL   
	AND EXISTS (SELECT TOP 1 1  FROM @OmsInsertedData ui WHERE ui.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId )
  
  -----------------------------------------------------------------------------------------------------------------------------------

  	 ;with Cte_newData AS   
    (  
    SELECT  MIN(a.OmsSavedCartLineItemId ) OmsSavedCartLineItemId 
	, b.RowId ,b.GroupId ,b.SKU ,b.ParentSKU  
    FROM ZnodeOmsSavedCartLineItem a  
    INNER JOIN #yuuete b ON (a.OmsSavedCartId = b.OmsSavedCartId AND a.SKU = b.ParentSKU AND ISNULL(b.GroupId,'-') = ISNULL(a.GroupId,'-')  )  
    WHERE ISNULL(a.ParentOmsSavedCartLineItemId,0) =0  
	AND EXISTS (SELECT TOP 1 1  FROM @OmsInsertedData ui WHERE ui.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId )
	--	AND NOT EXISTS (SELECT TOP 1 1 FROM #OldValue TY WHERE TY.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId)
		AND b.OrderLineItemRelationshipTypeID <> @OrderLineItemRelationshipTypeIdAddon
		-- AND CASE WHEN EXISTS (SELECT TOP 1 1 FROM #yuuete TU WHERE TU.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdSimple)  THEN ISNULL(a.OrderLineItemRelationshipTypeID,0) ELSE 0 END = 0 
     GROUP BY b.RowId ,b.GroupId ,b.SKU	,b.ParentSKU,b.OrderLineItemRelationshipTypeID	  )

	 UPDATE a SET a.ParentOmsSavedCartLineItemId = (SELECT TOP 1 OmsSavedCartLineItemId FROM  Cte_newData  r  
    WHERE  r.RowId = b.RowId AND ISNULL(r.GroupId,'-') = ISNULL(a.GroupId,'-')  Order by b.RowId )   
    FROM ZnodeOmsSavedCartLineItem a  
    INNER JOIN #yuuete b ON (a.OmsSavedCartId = b.OmsSavedCartId AND a.SKU = b.SKU AND b.id =1  )   
    WHERE a.OrderLineItemRelationshipTypeId IS NOT NULL   
    AND b.OrderLineItemRelationshipTypeID <> @OrderLineItemRelationshipTypeIdAddon   
	AND EXISTS (SELECT TOP 1 1  FROM @OmsInsertedData ui WHERE ui.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId )
	AND  a.sequence in (SELECT  MIN(ab.sequence) FROM ZnodeOmsSavedCartLineItem ab where a.OmsSavedCartId = ab.OmsSavedCartId and 
	 a.SKU = ab.sku and ab.OrderLineItemRelationshipTypeId is not null  ) 


----------------------------------------------------------------------------------------------------------------------------

    --;with Cte_newAddon AS   
    --(  
    SELECT a.OmsSavedCartLineItemId , b.RowId  ,b.SKU ,b.ParentSKU  ,Row_number()Over(Order BY c.OmsSavedCartLineItemId )RowIdNo
    INTO #Cte_newAddon
	FROM ZnodeOmsSavedCartLineItem a  
    INNER JOIN #yuuete b ON (a.OmsSavedCartId = b.OmsSavedCartId AND a.SKU = b.ParentSKU AND ( b.Id = 1  ))  
    INNER JOIN ZnodeOmsSavedCartLineItem c on b.sku = c.sku and b.OmsSavedCartId=c.OmsSavedCartId and b.Id = 1
	WHERE ( ISNULL(a.ParentOmsSavedCartLineItemId,0) <> 0   )
    AND b.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon  
	AND EXISTS (SELECT TOP 1 1  FROM @OmsInsertedData ui WHERE ui.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId ) and c.ParentOmsSavedCartLineItemId is null
  --  )   
  
   ;with table_update AS 
   (
     SELECT * , ROW_NUMBER()Over(Order BY OmsSavedCartLineItemId  ) RowIdNo
	 FROM ZnodeOmsSavedCartLineItem a
	 WHERE a.OrderLineItemRelationshipTypeId IS NOT NULL   
     AND a.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon  
     AND a.ParentOmsSavedCartLineItemId IS NULL  
	 AND EXISTS (SELECT TOP 1 1  FROM  #yuuete ty WHERE ty.OmsSavedCartId = a.OmsSavedCartId )
	 AND EXISTS (SELECT TOP 1 1  FROM @OmsInsertedData ui WHERE ui.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId )
   )

     UPDATE a SET  
	a.ParentOmsSavedCartLineItemId = (SELECT TOP 1 max(OmsSavedCartLineItemId) 
	  FROM #Cte_newAddon  r  
    WHERE  r.ParentSKU = b.ParentSKU AND a.SKU = r.SKU AND a.RowIdNo = r.RowIdNo  GROUP BY r.ParentSKU, r.SKU  )   
    FROM table_update a  
    INNER JOIN #yuuete b ON (a.OmsSavedCartId = b.OmsSavedCartId AND a.SKU = b.SKU AND b.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon AND  b.id =1 )   
    WHERE (SELECT TOP 1 max(OmsSavedCartLineItemId) 
	  FROM #Cte_newAddon  r  
    WHERE  r.ParentSKU = b.ParentSKU AND a.SKU = r.SKU AND a.RowIdNo = r.RowIdNo  GROUP BY r.ParentSKU, r.SKU  )    IS nOT NULL 
	 

    ;with Cte_Th AS   
    (             
      SELECT RowId    
     FROM #yuuete a   
     GROUP BY RowId   
     HAVING COUNT(NewRowId) <= 1   
      )   
    UPDATE a SET a.Quantity =  NULL   
    FROM ZnodeOmsSavedCartLineItem a  
    INNER JOIN #yuuete b ON (a.OmsSavedCartId = b.OmsSavedCartId AND a.SKU = b.SKU AND b.id =0)   
    WHERE NOT EXISTS (SELECT TOP 1 1  FROM Cte_Th TY WHERE TY.RowId = b.RowId )  
     AND a.OrderLineItemRelationshipTypeId IS NULL   
  
    UPDATE  ZnodeOmsSavedCartLineItem   
    SET GROUPID = NULL   
    WHERE  EXISTS (SELECT TOP 1 1  FROM #yuuete RT WHERE RT.OmsSavedCartId = ZnodeOmsSavedCartLineItem.OmsSavedCartId )  
    AND OrderLineItemRelationshipTypeId IS NOT NULL     
       ;With Cte_UpdateSequence AS   
     (  
       SELECT OmsSavedCartLineItemId ,Row_Number()Over(Order By OmsSavedCartLineItemId) RowId , Sequence   
       FROM ZnodeOmsSavedCartLineItem   
       WHERE EXISTS (SELECT TOP 1 1 FROM #yuuete TH WHERE TH.OmsSavedCartId = ZnodeOmsSavedCartLineItem.OmsSavedCartId )  
     )   
    UPDATE Cte_UpdateSequence  
    SET  Sequence = RowId  
			
	
	UPDATE @TBL_Personalise
	SET OmsSavedCartLineItemId = b.OmsSavedCartLineItemId
	FROM @OmsInsertedData a 
	INNER JOIN ZnodeOmsSavedCartLineItem b ON (a.OmsSavedCartLineItemId = b.OmsSavedCartLineItemId and b.OrderLineItemRelationshipTypeID <> @OrderLineItemRelationshipTypeIdAddon)
	WHERE b.ParentOmsSavedCartLineItemId IS not nULL 
	
	DELETE FROM ZnodeOmsPersonalizeCartItem	WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_Personalise yu WHERE yu.OmsSavedCartLineItemId = ZnodeOmsPersonalizeCartItem.OmsSavedCartLineItemId )
						
    MERGE INTO ZnodeOmsPersonalizeCartItem TARGET 
	USING @TBL_Personalise SOURCE
		   ON (TARGET.OmsSavedCartLineItemId = SOURCE.OmsSavedCartLineItemId ) 
		   WHEN NOT MATCHED THEN 
		    INSERT  ( OmsSavedCartLineItemId,  CreatedBy, CreatedDate, ModifiedBy, ModifiedDate
							,PersonalizeCode, PersonalizeValue,DesignId	,ThumbnailURL )
			VALUES (  SOURCE.OmsSavedCartLineItemId,  @userId, @getdate, @userId, @getdate
							,SOURCE.PersonalizeCode, SOURCE.PersonalizeValue,SOURCE.DesignId	,SOURCE.ThumbnailURL ) ;
  
		
		END 

END TRY
BEGIN CATCH 
  SELECT ERROR_MESSAGE()
END CATCH 
END
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetManageMessageForEdit')
BEGIN 
	DROP PROCEDURE Znode_GetManageMessageForEdit
END
GO

CREATE PROCEDURE [dbo].[Znode_GetManageMessageForEdit]  
( @PortalId        INT = 0,  
  @CMSMessageKeyId INT,  
  @LocaleId        INT,  
  @CMSMessageId    INT = 0)  
AS  
/*  
 Summary: Get Managed Message Details filtered by CMSMessageId  
 Unit Testing:  
   EXEC Znode_GetManageMessageForEdit @PortalId  = 4,@CMSMessageKeyId = 12,@LocaleId = 1, @CMSMessageId=14  
  
*/  
     BEGIN  
         BEGIN TRY  
             SET NOCOUNT ON;  
             DECLARE @TBL_CMSMessage TABLE  
             (CMSMessageId    INT,  
              [Message]       NVARCHAR(MAX),  
              MessageKey      NVARCHAR(100),  
              StoreName       NVARCHAR(MAX),  
              LocaleId        INT,  
              PortalId        INT,  
              CMSMessageKeyId INT,  
              TagXML          NVARCHAR(MAX)  
             );  
             INSERT INTO @TBL_CMSMessage  
                    SELECT ZCM.CMSMessageId,ZCM.[Message],ZCMK.MessageKey AS Location,ZP.StoreName,ZCM.LocaleId,ZP.PortalId,ZCPM.CMSMessageKeyId,CONVERT( NVARCHAR(MAX), ZCPMKT.TagXML) AS TagXML  
                    FROM [dbo].[ZnodeCMSMessage] AS ZCM  
                         INNER JOIN [dbo].[ZnodeCMSPortalMessage] AS ZCPM ON(ZCM.CMSMessageId = ZCPM.CMSMessageId)  
                         LEFT JOIN [dbo].[ZnodeCMSMessageKey] AS ZCMK ON(ZCMK.CMSMessageKeyId = ZCPM.CMSMessageKeyId)  
                         LEFT JOIN [dbo].ZnodePortal AS ZP ON(ZP.PortalId = ZCPM.PortalId)  
                         LEFT JOIN [dbo].ZnodeCMSPortalMessageKeyTag AS ZCPMKT ON(ISNULL(ZCPMKT.PortalId,-1) = ISNULL(ZCPM.PortalId,-1)  
                                                                               AND ZCPMKT.CMSMessageKeyId = ZCMK.CMSMessageKeyId)  
                    WHERE((ZP.PortalId = @PortalId) OR (@PortalId = 0 and ZCPM.PortalId is Null))  
                    AND (ZCM.CMSMessageId = @CMSMessageId OR @CMSMessageId = 0)  
                    AND ZCMK.CMSMessageKeyId = @CMSMessageKeyId  
                    AND ZCM.LocaleId = @LocaleId;  
             SELECT CMSMessageKeyId,MessageKey,CMSMessageId,[Message],LocaleId,ZCM.PortalId,ZCM.StoreName,TagXML MessageTag  
             FROM @TBL_CMSMessage AS ZCM;  
              
         END TRY  
         BEGIN CATCH  
               DECLARE @Status BIT ;  
       SET @Status = 0;  
       DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetManageMessageForEdit @PortalId = '+CAST(@PortalId AS VARCHAR(50
))+',@CMSMessageKeyId='+CAST(@CMSMessageKeyId AS VARCHAR(50))+',@LocaleId='+CAST(@LocaleId AS VARCHAR(50))+',@CMSMessageId='+CAST(@CMSMessageId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));  
                    
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                      
     
             EXEC Znode_InsertProcedureErrorLog  
    @ProcedureName = 'Znode_GetManageMessageForEdit',  
    @ErrorInProcedure = @Error_procedure,  
    @ErrorMessage = @ErrorMessage,  
    @ErrorLine = @ErrorLine,  
    @ErrorCall = @ErrorCall;      
         END CATCH;  
     END;

	 GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_DeleteManageMessages')
BEGIN 
	DROP PROCEDURE Znode_DeleteManageMessages
END
GO

CREATE PROCEDURE [dbo].[Znode_DeleteManageMessages]
( @CMSPortalMessageId VARCHAR(2000),
  @Status             BIT OUT)
AS
   /* 
     Summary : Remove messages of the portal with their reference data 
			   Here complete delete the messages of portal and their references without any check  
			   If passed @CMSPortalMessageId are matched with deleted count then data set return true other wise false 
			   dbo.Split function use to make comma seperated data in table rows 
			   1 ZnodeCMSPortalMessage
			   2 ZnodeCMSMessage
			   3 ZnodeCMSMessageKey
     Unit Testing 
	 begin tran
     Declare @Status bit 
     EXEC [Znode_DeleteManageMessages] 1795 ,@Status =@Status OUT 
	 rollback tran
     */
	 BEGIN
         BEGIN TRAN DeleteManageMessages;
         BEGIN TRY
             SET NOCOUNT ON;
             DECLARE @TBL_MessageIds TABLE
             (PortalId        INT,
              CmsMessageKeyId INT
             );
             INSERT INTO @TBL_MessageIds
                    SELECT ZCPM.PortalId,ZCPM.CmsMessageKeyId                         
                    FROM ZnodeCMSPortalMessage AS ZCPM
					     -- dbo.Split function use to make comma separeted data in table rows
                         INNER JOIN dbo.Split(@CMSPortalMessageId, ','  
                         ) AS SP ON(ZCPM.CMSPortalMessageId = SP.Item);
             DECLARE @TBL_DeletedMessagKey TABLE(CMSMessageKeyId INT);
             DECLARE @TBL_DeleteCMSMessageId TABLE
             (CMSPortalMessageId INT,
              CMSMessageId       INT
             );
             INSERT INTO @TBL_DeleteCMSMessageId
                    SELECT ZCPM.CMSPortalMessageId,CMSMessageId                          
                    FROM [dbo].ZnodeCMSPortalMessage AS ZCPM
                         INNER JOIN @TBL_MessageIds AS TBM ON(
						 (isnull(ZCPM.PortalId,-1) = isnull(TBM.portalid,-1))
                         AND ZCPM.CMSMessageKeyId = TBM.CmsMessageKeyId);
             DELETE FROM ZnodeCMSPortalMessage
			 -- catch the deleted values MessageKey
             OUTPUT DELETED.CMSMessageKeyId
                    INTO @TBL_DeletedMessagKey 
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteCMSMessageId AS TBDCM
                 WHERE TBDCM.CMSPortalMessageId = ZnodeCMSPortalMessage.CMSPortalMessageId
             );

			 -- Fetch MessageKeyDetails for publishing in mongo
			 DECLARE @TBL_DeletedMessage TABLE(CMSMessageKeyId INT, MessageKey Nvarchar(100))
			 INSERT INTO @TBL_DeletedMessage (CMSMessageKeyId,MessageKey)
			 SELECT a.CMSMessageKeyId,a.MessageKey  
			 FROM ZnodeCMSMessageKey a
			 INNER JOIN @TBL_DeletedMessagKey b on (a.CMSMessageKeyId = b.CMSMessageKeyId)

             DELETE FROM ZnodeCMSMessage
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteCMSMessageId AS TBDCM
                 WHERE TBDCM.CMSMessageId = ZnodeCMSMessage.CMSMessageId
             )
                   AND NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM ZnodeCMSPortalMessage AS TBDCM
                 WHERE TBDCM.CMSMessageId = ZnodeCMSMessage.CMSMessageId
             );
             DELETE FROM ZnodeCMSPortalMessageKeyTag
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeletedMessagKey AS TBDMK
                 WHERE TBDMK.CMSMessageKeyId = ZnodeCMSPortalMessageKeyTag.CMSMessageKeyId
             )
                   AND NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM ZnodeCMSPortalMessage AS TBDMK
                 WHERE TBDMK.CMSMessageKeyId = ZnodeCMSPortalMessageKeyTag.CMSMessageKeyId
             );
             DELETE FROM ZnodeCMSMessageKey
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeletedMessagKey AS TBDMK
                 WHERE TBDMK.CMSMessageKeyId = ZnodeCMSMessageKey.CMSMessageKeyId
             )
                   AND NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM ZnodeCMSPortalMessage AS TBDMK
                 WHERE TBDMK.CMSMessageKeyId = ZnodeCMSMessageKey.CMSMessageKeyId
             );

             IF
             (
                 SELECT COUNT(1)
                 FROM @TBL_DeleteCMSMessageId
             ) =
             (
                 SELECT COUNT(1)
                 FROM @TBL_DeletedMessagKey
             ) -- if count are equal then dataset status return true other wise false 
                 BEGIN
				
                     SELECT a.CMSMessageKeyId AS ID, b.MessageKey AS MessageDetails ,
                            CAST(1 AS BIT) AS Status
					 FROM @TBL_DeletedMessagKey a
					 INNER JOIN @TBL_DeletedMessage b on (a.CMSMessageKeyId = b.CMSMessageKeyId)
	 
                     SET @Status = 1;
                 END;
             ELSE
                 BEGIN
                     SELECT 0 AS ID,
                            CAST(0 AS BIT) AS Status;
                     SET @Status = 0;
                 END;
             COMMIT TRAN DeleteManageMessages;
         END TRY
         BEGIN CATCH
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_DeleteManageMessages @CMSContentPageId = '+@CMSPortalMessageId+',@Status='+CAST(@Status AS VARCHAR(50));
             SET @Status = 0;
             SELECT 0 AS ID,
                    CAST(0 AS BIT) AS Status;
             ROLLBACK TRAN DeleteManageMessages;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_DeleteManageMessages',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;

	 GO

	 
IF EXISTS (SELECT * FROM sys.views where name = 'View_GetManageMessageList')
DROP VIEW View_GetManageMessageList
GO
CREATE  View [dbo].[View_GetManageMessageList]
AS
SELECT  c.CMSPortalMessageId ,a.CMSMessageId , a.[Message]  , b.MessageKey Location,
e.StoreName,
a.LocaleId,e.PortalId,c.CMSMessageKeyId
,ZCPMT.TagXML as MessageTag  , TY.DisplayName StateName 
,a.IsPublished PublishStatus,
Case when e.PortalId is null then 'True' else 'False' end as IsGlobalContentBlock FROM  [dbo].[ZnodeCMSMessage] a 
INNER JOIN [dbo].[ZnodeCMSPortalMessage] c ON (a.CMSMessageId = c.CMSMessageId)
LEFT JOIN  [dbo].[ZnodeCMSMessageKey] b ON (b.CMSMessageKeyId  = c.CMSMessageKeyId)
LEFT JOIN  [dbo].ZnodeCMSPortalMessageKeyTag ZCPMT ON (ISNULL(ZCPMT.Portalid,-1) = ISNULL(C.PortalId,-1) AND C.CMSMessageKeyId = ZCPMT.CMSMessageKeyId )
Left JOIN  [dbo].ZnodePortal e ON (e.PortalId = c.PortalId)
LEFT JOIN  ZnodePublishState TY ON (TY.PublishStateId = a.PublishStateId )
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetManageMessagelist')
BEGIN 
	DROP PROCEDURE Znode_GetManageMessagelist
END
GO
CREATE procedure [dbo].[Znode_GetManageMessagelist]  
(    
  @WhereClause NVARCHAR(Max)       
 ,@Rows INT = 100       
 ,@PageNo INT = 1       
 ,@Order_BY VARCHAR(1000) = ''    
 ,@RowsCount INT OUT    
 ,@LocaleId INT =1    
)    
AS    
/*  
 Summary: Get Managed Message Details list for a PortalId  
 Unit Testing:  
 declare @p7 int  
 set @p7=NULL  
 exec sp_executesql N'Znode_GetManageMessagelist @WhereClause,@Rows,@PageNo,@Order_By,@RowCount OUT,@LocaleId',N'@WhereClause nvarchar(57),@Rows int,@PageNo int,@Order_By nvarchar(17),@RowCount int output,@LocaleId int',@WhereClause=N'localeid = 1 and (Po
rtalId in (''1'',''4'',''5'',''6'',''32'',''33''))',@Rows=50,@PageNo=1,@Order_By=N'PublishStatus asc',@RowCount=@p7 output,@LocaleId=1  
 select @p7   
  
 */  
BEGIN      
  BEGIN TRY     
    SET NOCOUNT ON        
    DECLARE @SQL NVARCHAR(MAX)    
        
 DECLARE @DefaultLocaleId VARCHAR(100)= dbo.Fn_GetDefaultLocaleId();  
    DECLARE @TBL_ManageMessage TABLE (CMSPortalMessageId INT,CMSMessageId INT,[Message] NVARCHAR(max),Location NVARCHAR(100),StoreName NVARCHAR(max)  
        ,LocaleId INT,PortalId INT,CMSMessageKeyId INT,MessageTag NVARCHAR(max),RowId INT,CountNo INT,PublishStatus NVARCHAR(max),IsGlobalContentBlock NVARCHAR(5))  
                
    SET @SQL = '   
     ;With Cte_ManageMessage AS   
     (  
     SELECT CMSPortalMessageId, CMSMessageId, [Message], Location,StoreName,LocaleId,PortalId,CMSMessageKeyId, MessageTag,  
     StateName as PublishStatus,IsGlobalContentBlock  
     FROM View_Getmanagemessagelist  
     WHERE  LocaleId IN ('+CAST(@LocaleId AS VARCHAR(50))+' , '+CAST(@DefaultLocaleId AS VARCHAR(50))+')   
     )  
  
     ,CTE_ManageMessageLocale As  
     (  
      SELECT CMSPortalMessageId, CMSMessageId, [Message], Location,StoreName,LocaleId,PortalId,CMSMessageKeyId  
      ,MessageTag,PublishStatus,IsGlobalContentBlock  
      FROM Cte_ManageMessage  
      WHERE LocaleId = '+CAST(@LocaleId AS VARCHAR(50))+'    
     )  
     ,CTE_ManageMessageBothLocale AS  
     (  
      SELECT CMSPortalMessageId, CMSMessageId, [Message], Location,StoreName,LocaleId,PortalId,CMSMessageKeyId, MessageTag,PublishStatus,IsGlobalContentBlock  
      FROM CTE_ManageMessageLocale  
      UNION ALL  
      SELECT CMSPortalMessageId, CMSMessageId, [Message], Location,StoreName,LocaleId,PortalId,CMSMessageKeyId, MessageTag,PublishStatus,IsGlobalContentBlock  
      FROM Cte_ManageMessage cmm  
      WHERE LocaleId = '+CAST(@DefaultLocaleId AS VARCHAR(50))+'   
      AND NOT EXISTS (SELECT TOP 1 1 FROM CTE_ManageMessageLocale CMML WHERE  CMML.CMSMessageKeyId = cmm.CMSMessageKeyId)  
     )  
  
     ,Cte_ManageMessageFilter AS   
     (  
      SELECT CMSPortalMessageId, CMSMessageId, [Message], Location,StoreName,LocaleId,PortalId,CMSMessageKeyId  
      ,MessageTag,PublishStatus,IsGlobalContentBlock ,'+dbo.Fn_GetPagingRowId(@Order_BY,'CMSPortalMessageId DESC')+',Count(*)Over() CountNo   
      FROM CTE_ManageMessageBothLocale   
      WHERE 1=1 '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'  
     )  
     
     SELECT CMSPortalMessageId, CMSMessageId, [Message], Location,StoreName,LocaleId,PortalId,CMSMessageKeyId, MessageTag,PublishStatus,IsGlobalContentBlock,RowId,CountNo   
     FROM Cte_ManageMessageFilter  
     '+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)  
  
     print @sql  
  
  
     INSERT INTO @TBL_ManageMessage (CMSPortalMessageId,CMSMessageId,[Message],Location,StoreName,LocaleId,PortalId,CMSMessageKeyId,MessageTag,PublishStatus,IsGlobalContentBlock,RowId,CountNo)  
     EXEC (@SQL)  
     SET @RowsCount = ISNULL((SELECT TOP 1 CountNo FROM @TBL_ManageMessage ),0)  
  
     SELECT CMSPortalMessageId,CMSMessageId,[Message],Location,StoreName,LocaleId,PortalId,CMSMessageKeyId,MessageTag,  PublishStatus,IsGlobalContentBlock  
     FROM @TBL_ManageMessage  
      
  
  
   END TRY       
   BEGIN CATCH          
          DECLARE @Status BIT ;  
       SET @Status = 0;  
       DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),   
    @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetManageMessagelist @WhereClause = '''+ISNULL(@WhereClause,'''''')+''',@Rows='+ISNULL(CAST(@Rows AS  
   VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')+',@LocaleId = '+ISNULL(CAST(@LocaleId AS VARCHAR(50)),'''');  
                    
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                      
      
             EXEC Znode_InsertProcedureErrorLog  
    @ProcedureName = 'Znode_GetManageMessagelist',  
    @ErrorInProcedure = 'Znode_GetManageMessagelist',  
    @ErrorMessage = @ErrorMessage,  
    @ErrorLine = @ErrorLine,  
    @ErrorCall = @ErrorCall;    
   END CATCH       
END
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_InsertManageMessages')
BEGIN 
	DROP PROCEDURE Znode_InsertManageMessages
END
GO
CREATE PROCEDURE [dbo].[Znode_InsertManageMessages]    
(    
 @PortalIds varchar(2000),    
 @MessageKey nvarchar(100),     
 @MessageTag nvarchar(2000)= NULL,    
 @Description nvarchar(max),    
 @LocaleId int,    
 @UserId int,     
 @CMSMessageId int,     
 @CMSMessageKeyId int= 0,     
 @Status bit= 0 OUT,     
 @IsDebug bit= 0)    
AS     
 /*    
 Summary:  This procedure use for insert manage message and update on the basis of message key                      
 Unit Testing       
    SELECT * FROM ZnodePortal    
  SELECT * FROM ZnodeCMSMessageKey  WHERE messageKey = 'test111'    
  SELECT * FROM [ZnodeCMSMessage] WHERE message = 'fjkxdbjlf'    
  SELECT * FROM ZnodeCMSPortalMessage WHERE PortalId = 28    
  EXEC Znode_InsertManageMessages '29','test111','fjkxdbjlf1',1,2,0,0,0     
    
 */    
BEGIN    
 BEGIN TRAN A;    
 BEGIN TRY    
  SET NOCOUNT ON;    
  DECLARE @MessageKeyDetail int;    
     DECLARE @GetDate DATETIME = dbo.Fn_GetDate();    
  DECLARE @CMSMessageId_New int= 0;    
  DECLARE @PortalId TABLE    
  (     
  ID int, PortalId int    
  );    
  DECLARE @AreaId TABLE    
  (     
  ID int, AreaId int    
  );    
  INSERT INTO @PortalId    
      SELECT ID, ITEM    
      FROM dbo.split( @PortalIds, ',' ) AS a;     
    
  -- Insert Data into Temp table     
    
  DECLARE @InsertDetails TABLE    
  (     
  PortalId int, CMSMessageKeyId int, CMSMessageId int, MessageKey varchar(1000), Messagedescription nvarchar(max), LocaleId int    
  );    
  DECLARE @CurrentPortalAreaIds TABLE    
  (     
  PortalId int, CMSMessageKeyId int, CMSMessageId int    
  );    
  INSERT INTO @InsertDetails    
      SELECT Case when a.PortalId = 0 then null else a.PortalId end, @CMSMessageKeyId, @CMSMessageId, @MessageKey, @Description, @LocaleId    
      FROM @PortalId AS a;    
    
    
  IF EXISTS    
  (    
   SELECT TOP 1 1  FROM ZnodeCMSPortalMessage AS ZCPM  INNER JOIN    
     ZnodeCMSMessageKey AS ZCMK  ON(ZCPM.CMSMessageKeyId = ZCMK.CMSMessageKeyId)    
   WHERE EXISTS  (  SELECT TOP 1 1  FROM @InsertDetails AS TBID  WHERE ZCMK.MessageKey = @MessageKey AND  (TBID.PortalId is null or  ZCPm.PortalId = TBID.PortalId)  )    
  ) AND   @CMSMessageKeyId = 0    
  BEGIN    
   RAISERROR(15600, -1, -1, '');    
  END;     
         
  -- First check locale wise messsage are for how many portal or area    
  INSERT INTO @CurrentPortalAreaIds  SELECT PortalId, a.CMSMessageId, a.CMSMessageKeyId  FROM ZnodeCMSPortalMessage AS a    
     INNER JOIN  ZnodeCMSMessage AS b  ON(a.CMSMessageId = b.CMSMessageId)    
      WHERE a.CMSMessageKeyId = @CMSMessageKeyId AND   a.CMSMessageId = @CMSMessageId;    
  IF EXISTS    
  (    
   SELECT TOP 1 1    
   FROM ZnodeCMSPortalMessage AS a    
     INNER JOIN    
     [ZnodeCMSMessageKey] AS b    
     ON( a.CMSMessageKeyId = b.CMSMessageKeyId AND     
      b.MessageKey = @MessageKey    
       )    
     INNER JOIN    
     ZnodeCMSMessage AS c    
     ON( c.CMSMessageId = a.CMSMessageId AND     
      c.LocaleId = @LocaleId AND     
      C.Message = @Description    
       )    
   WHERE EXISTS    
   (    
    SELECT TOP 1 1    
    FROM @InsertDetails AS vc    
    WHERE vc.PortalId = a.PortalId    
   )    
  )    
  BEGIN    
   SET @MessageKeyDetail =    
   (    
    SELECT TOP 1 CMSMessageKeyId    
    FROM [dbo].[ZnodeCMSMessageKey] AS zcmk    
    WHERE zcmk.MessageKey = @MessageKey    
   );    
    
   --  RAISERROR (15600,-1,-1, ' Is Already Exists ');     
    
  END;    
  IF NOT EXISTS    
  (    
   SELECT TOP 1 1    
   FROM ZnodeCMSMessageKey    
   WHERE MessageKey = @MessageKey    
  )    
  BEGIN    
   INSERT INTO [ZnodeCMSMessageKey]( MessageKey, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )    
   VALUES( @MessageKey, @UserId, @GetDate, @UserId, @GetDate );    
    
   SET @MessageKeyDetail = SCOPE_IDENTITY();    
  END;    
  ELSE    
  BEGIN    
   SET @MessageKeyDetail =    
   (    
    SELECT CMSMessageKeyId    
    FROM [ZnodeCMSMessageKey]    
    WHERE MessageKey = @MessageKey    
   );    
   UPDATE [dbo].[ZnodeCMSMessageKey]    
     SET ModifiedBy = @UserId, ModifiedDate = @GetDate    
   WHERE MessageKey = @MessageKey;    
    
  END;    
  IF NOT EXISTS    
  (    
   SELECT TOP 1 1    
   FROM [ZnodeCMSMessage] AS zcm    
   INNER JOIN ZnodeCMSPortalMessage ZCPM ON (ZCPM.CMSMessageId = ZCM.CMSMessageId)    
   WHERE Zcm.CMSMessageId = @CMSMessageId   
   AND ((@PortalIds = '0' and ZCPM.PortalId is null ) OR (@PortalIds <>'0' and ZCPM.PortalId =  @PortalIds ))  
   --AND (@PortalIds = '0' or ZCM.[Message] = @Description)   
   AND   zcm.LocaleId = @LocaleId    
  )    
  BEGIN    
   DELETE FROM ZnodeCMSPortalMessage WHERE PortalId = @PortalIds AND CMSMessageKeyId = @CMSMessageKeyId    
      AND  CMSMessageId IN ( SELECT CMSMessageId FROM [ZnodeCMSMessage] ZCM WHERE  CMSMessageId = @CMSMessageId AND LocaleId = @LocaleId)    
    
   INSERT INTO [dbo].[ZnodeCMSMessage]( LocaleId, [Message], CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )    
   VALUES( @LocaleId, @Description, @UserId, @GetDate, @UserId, @GetDate );    
   SET @CMSMessageId_New = SCOPE_IDENTITY();    
    
  END;    
  ELSE    
  BEGIN    
   UPDATE [dbo].[ZnodeCMSMessage]    
     SET [Message] = @Description, ModifiedBy = @UserId, ModifiedDate = @GetDate    
   WHERE CMSMessageId = @CMSMessageId;    
   SET @CMSMessageId_New = @CMSMessageId;    
  END;    
  
  IF(@PortalIds = '0')  
  BEGIN  
    
  IF NOT EXISTS    
  (   
 SELECT TOP 1 1    
 FROM [ZnodeCMSPortalMessage] AS ZCPM   
 WHERE ZCPM.PortalId IS NULL AND   
 ZCPM.CMSMessageKeyId = CAST(@MessageKeyDetail AS int) AND     
    ZCPM.CMSMessageId = @CMSMessageId_NEW   
  )  
  BEGIN  
 INSERT INTO ZnodeCMSPortalMessage(PortalId, CMSMessageKeyId, CMSMessageId, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate) VALUES(NULL, CAST(@MessageKeyDetail AS int), @CMSMessageId_New, @UserId, @GetDate, @UserId, @GetDate );    
  END  
  ELSE  
  BEGIN  
 UPDATE ZnodeCMSPortalMessage  SET    
 ModifiedBy = @UserId, ModifiedDate = @GetDate  
 WHERE PortalId IS NULL AND   
 CMSMessageKeyId = CAST(@MessageKeyDetail AS int) AND     
    CMSMessageId = @CMSMessageId_NEW   
  END  
  
  IF NOT EXISTS    
  (   
 SELECT TOP 1 1    
 FROM [ZnodeCMSPortalMessageKeyTag] AS ZCPMT   
 WHERE ZCPMT.PortalId IS NULL AND   
 ZCPMT.CMSMessageKeyId = CAST(@MessageKeyDetail AS int)      
  )  
  BEGIN  
 INSERT INTO [ZnodeCMSPortalMessageKeyTag](PortalId, CMSMessageKeyId, TagXML, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate) VALUES(NULL, CAST(@MessageKeyDetail AS int), @MessageTag, @UserId, @GetDate, @UserId, @GetDate );    
  END  
  ELSE  
  BEGIN  
 UPDATE [ZnodeCMSPortalMessageKeyTag]  SET    
 TagXML = @MessageTag, ModifiedBy = @UserId, ModifiedDate = @GetDate  
 WHERE PortalId IS NULL AND   
 CMSMessageKeyId = CAST(@MessageKeyDetail AS int)      
  END  
  
  END  
  ELSE  
  BEGIN  
  MERGE INTO ZnodeCMSPortalMessage TARGET    
  USING @InsertDetails SOURCE    
  ON TARGET.PortalId = SOURCE.PortalId AND     
     TARGET.CMSMessageKeyId = CAST(@MessageKeyDetail AS int) AND     
     TARGET.CMSMessageId = @CMSMessageId_NEW    
      
  WHEN MATCHED    
     THEN UPDATE SET TARGET.CMSMessageId = @CMSMessageId_New, TARGET.ModifiedBy = @UserId, TARGET.ModifiedDate = @GetDate    
  WHEN NOT MATCHED    
     THEN INSERT(PortalId, CMSMessageKeyId, CMSMessageId, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate) VALUES(SOURCE.PortalId, CAST(@MessageKeyDetail AS int), @CMSMessageId_New, @UserId, @GetDate, @UserId, @GetDate );    
      
  MERGE INTO ZnodeCMSPortalMessageKeyTag TARGET    
  USING @InsertDetails SOURCE    
  ON TARGET.PortalId = SOURCE.PortalId AND     
     TARGET.CMSMessageKeyId = CAST(@MessageKeyDetail AS int)    
  WHEN MATCHED    
     THEN UPDATE SET TagXML = @MessageTag, ModifiedBy = @userId, ModifiedDate = @GetDate    
  WHEN NOT MATCHED    
     THEN INSERT(PortalId, CMSMessageKeyId, TagXML, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate) VALUES(SOURCE.PortalId, CAST(@MessageKeyDetail AS int), @MessageTag, @UserId, @GetDate, @UserId, @GetDate );    
    
  DELETE FROM [ZnodeCMSMessage]    
  WHERE NOT EXISTS    
  (    
   SELECT TOP 1 1    
   FROM ZnodeCMSPortalMessage AS ss    
   WHERE ss.CMSMessageId = [ZnodeCMSMessage].CMSMessageId    
  );    
    
  DELETE FROM ZnodeCMSMessageKey    
  WHERE NOT EXISTS    
  (    
   SELECT TOP 1 1    
   FROM ZnodeCMSPortalMessage AS ss    
   WHERE ss.CMSMessageKeyId = ZnodeCMSMessageKey.CMSMessageKeyId    
  ) AND     
     NOT EXISTS    
  (    
   SELECT TOP 1 1    
   FROM dbo.ZnodeCMSPortalMessageKeyTag AS ss    
   WHERE ss.CMSMessageKeyId = ZnodeCMSMessageKey.CMSMessageKeyId    
  );    
  
  END  
  
  SELECT @MessageKeyDetail AS ID, 'Successful' AS [MessageDetails], CAST(1 AS bit) AS [Status];    
  -- output paramater     
  SET @Status = 1;    
  COMMIT TRAN A;    
 END TRY    
 BEGIN CATCH    
        
       SET @Status = 0;    
       DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),     
    @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_InsertManageMessages @PortalIds = '+@PortalIds+',@MessageKey='+@MessageKey+',@MessageTag='+@MessageTag+',@Description='+@Description+',@LocaleId='+CAST(@LocaleId AS VARCHAR(50))+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@CMSMessageId='+CAST(@CMSMessageId AS VARCHAR(50))+',@CMSMessageKeyId='+CAST(@CMSMessageKeyId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));    
                      
             --SELECT 0 AS ID,CAST(0 AS BIT) AS Status;     
    SELECT @CMSMessageId AS ID, ISNULL(CAST(@MessageKeyDetail AS varchar(2000)), '')+'  Is Already Exists' AS [MessageDetails], CAST(0 AS bit) AS [Status];    
                         
       ROLLBACK TRAN A;    
             EXEC Znode_InsertProcedureErrorLog  @ProcedureName = 'Znode_InsertManageMessages',  @ErrorInProcedure = @Error_procedure,  @ErrorMessage = @ErrorMessage,  @ErrorLine = @ErrorLine,  @ErrorCall = @ErrorCall;        
 END CATCH;    
END;
GO

UPDATE ZnodeApplicationSetting
SET Setting = '<?xml version="1.0" encoding="utf-16"?><columns><column><id>1</id><name>CMSPortalMessageId</name><headertext>Checkbox</headertext><width>30</width><datatype>String</datatype><columntype>Int32</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>y</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>2</id><name>CMSMessageId</name><headertext>CMSMessageId</headertext><width>30</width><datatype>String</datatype><columntype>Int32</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>y</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>y</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>3</id><name>Location</name><headertext>Message Key</headertext><width>60</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>4</id><name>Message</name><headertext>Message</headertext><width>60</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>5</id><name>StoreName</name><headertext>Store Name</headertext><width>60</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>6</id><name>MessageTag</name><headertext>Message Tag</headertext><width>0</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>7</id><name>PublishStatus</name><headertext>Publish Status</headertext><width>30</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>8</id><name>IsGlobalContentBlock</name><headertext>Is Global Content Block</headertext><width>30</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>9</id><name>IsPublished</name><headertext>Status</headertext><width>0</width><datatype>Boolean</datatype><columntype>Boolean</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>y</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>10</id><name>Manage</name><headertext>Action</headertext><width>30</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format>Edit|Delete|Publish</format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Edit|Delete|Publish</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl>/Content/UpdateManageMessage|/Content/DeleteManageMessage|/Content/PublishManageMessage</manageactionurl><manageparamfield>cmsMessageKeyId,portalId,localeId|cmsPortalMessageId|cmsMessageId,localeId,portalId,cmsMessageKeyId</manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column></columns>'
WHere ItemName = 'View_GetManageMessageList'

GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishCategoryProducts')
BEGIN 
	DROP PROCEDURE Znode_GetPublishCategoryProducts
END
GO

CREATE PROCEDURE [dbo].[Znode_GetPublishCategoryProducts]
( @pimCatalogId int = 0,@pimCategoryHierarchyId int = 0,@userId int,@versionId int= 0,@status int = 0 OUT,@isDebug bit = 0 ,@LocaleId TransferId READONLY , @PublishStateId INT = 0   )  AS  /*
    Summary :	Publish Product on the basis of publish catalog and category
				Calling sp [Znode_InsertPublishProductIds] to retrive category and their child category with associated products 
				 
				1.	ZnodePublishedXml
				2.	ZnodePublishCategoryProduct
				3.	ZnodePublishProduct
				4.	ZnodePublishProductDetail

                Product details include all the type of products link, grouped, configure and bundel products (include addon) their associated products 
				collect their attributes and values into tables variables to process for publish.  
                
				Finally genrate XML for products with their attributes and inserted into ZnodePublishedXml Znode Admin process xml from sql server to mongodb
				one by one.
	
	Unit Testing
    ------------------------------------------------------------------------------------------------
	Declare @Status int 
	DECLARE @r transferid 
	INSERT INTO @r
	VALUES (1)
	,(24)
	EXEC [Znode_GetPublishCategoryProducts]  @PimCatalogId = 9
	, @PimCategoryHierarchyId = 48 
	, @UserId = 2 
	, @VersionId = 0
	, @IsDebug = 1
	, @Status  = @Status  out
	,@localeId = @r
	,@PublishStateId = 4
	Select @Status  

 */
	BEGIN   
		BEGIN TRY
			SET NOCOUNT ON;
			 DECLARE @IsCatalogPublishInProcess INT  = 0
			DECLARE @tBL_PublishIds table (PublishProductId int,PimProductId int,PublishCatalogId int)
			DECLARE @publishCatalogId int= isnull((SELECT TOP 1 PublishCatalogId FROM ZnodePublishCatalog ZPC WHERE ZPC.PimCatalogId = @pimCatalogId),0),@publishCataloglogId int= 0;
			DECLARE @tBL_CategoryCategoryHierarchyIds table (CategoryId int,ParentCategoryId int ,PimCategoryHierarchyId INT ,ParentPimCategoryHierarchyId INT  )
			DECLARE @pimProductId TransferId
			DECLARE @insertPublishProductIds table (PublishProductId int,PimProductId int,PublishCatalogId int )
			--DECLARE @TBL_CategoryXml TABLE ( CategoryXml XML);
				SELECT @versionId = max(PublishCataloglogId)
			FROM ZnodePublishCatalogLog 
			WHERE PublishCatalogId =@publishCatalogId

				 --IF EXISTS (SELECT TOP 1 1  FROM ZnodePublishCatalogLog a 
			  -- INNER JOIN ZnodePimCatalogCategory b ON (b.PimCatalogId =a.PimCatalogId )
			  -- WHERE b.PimCategoryHierarchyId = @PimCategoryHierarchyId
			  -- AND a.IsCatalogPublished IS NULL 
			  -- AND a.IsCategoryPublished IS NULL
			  -- ) 
			  -- BEGIN 
				 --SET   @IsCatalogPublishInProcess =1 
			  -- END 


			INSERT INTO @tBL_CategoryCategoryHierarchyIds(CategoryId,ParentCategoryId,PimCategoryHierarchyId,ParentPimCategoryHierarchyId ) 
			SELECT DISTINCT PimCategoryId, Null,PimCategoryHierarchyId,NULL  FROM ( SELECT PimCategoryId,ParentPimCategoryId,PimCategoryHierarchyId,ParentPimCategoryHierarchyId
			FROM DBO.[Fn_GetRecurciveCategoryIds_PimCategoryHierarchy](@pimCategoryHierarchyId,@pimCatalogId) 
			UNION SELECT PimCategoryId, Null,PimCategoryHierarchyId,NULL FROM ZnodePimCategoryHierarchy WHERE PimCategoryHierarchyId = @pimCategoryHierarchyId 
			UNION SELECT PimCategoryId, Null,PimCategoryHierarchyId,NULL  FROM dbo.[Fn_GetRecurciveCategoryIds_PimCategoryHierarchyIdnew] (@pimCategoryHierarchyId,@pimCatalogId) ) Category

			

			
			IF NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimCatalogCategory ty 
			WHERE EXISTS (SELECT TOP 1 1 FROM ( SELECT PimCategoryId,PimCategoryHierarchyId,ParentPimCategoryHierarchyId 
			FROM dbo.[Fn_GetRecurciveCategoryIds_ForChild](@pimCategoryHierarchyId,@pimCatalogId) UNION ALL SELECT NULL ,@pimCategoryHierarchyId,NULL  ) TN WHERE TN.PimCategoryHierarchyId = TY.PimCategoryHierarchyId  ) AND ty.PimProductId IS NOT NULL )
			BEGIN 
			  SET @IsCatalogPublishInProcess = 2 

			END 

			IF (isnull(@publishCatalogId,0) = 0 ) 
				BEGIN 
					SET @status = 1
					-- Catalog Not Published 
					RETURN 0;
				END
			
			IF @IsCatalogPublishInProcess =  0 
			BEGIN 
			

			-- Any other catalog was in process dont intitiate category publish	
			--If Exists ( SELECT TOP 1 1 FROM ZnodePublishcatalogLog  WHERE  IsCatalogPublished  IS NULL AND IsCategoryPublished IS NULL )
			--Begin
			--		SET @status = 2
			--		RETURN 0;
			--End

			
				EXEC [Znode_GetPublishCategoryGroup] @publishCatalogId = @PublishCatalogId,@VersionId = 0,@userId =2,@isDebug = 1,@PimCategoryHierarchyId = @PimCategoryHierarchyId,@localeId =@localeID,@PublishStateId=@PublishStateId
			
			BEGIN 
				INSERT INTO @insertPublishProductIds EXEC [Dbo].[Znode_InsertPublishProductIds] @publishCatalogId = @publishCatalogId,@userid = @userid,@pimProductId = @pimProductId,@pimCategoryHierarchyId = @pimCategoryHierarchyId
				INSERT INTO @pimProductId SELECT PimProductId FROM @insertPublishProductIds

				EXEC [Dbo].[Znode_GetPublishProductbulk] @publishCatalogId = @publishCatalogId,@versionId = @versionId,@pimProductId = @pimProductId,@userid = @userid,@pimCategoryHierarchyId = @pimCategoryHierarchyId,@pimCatalogId = @pimCatalogId,@localeIds = @localeId ,@publishstateId =@publishStateId 
				
				UPDATE ZnodePimProduct 		SET IsProductPublish = 1 ,PublishStateId = @PublishStateId		
				WHERE EXISTS (SELECT TOP 1 1 
					FROM ZnodePublishProduct ZPP
					WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId 
						AND ZPP.PublishCatalogId = @publishCatalogId
					)
			END
			DECLARE @tBL_PublishCatalogId table(PublishCatalogId int,PublishProductId int,PublishCategoryId int,PimProductId int,VersionId int,LocaleId INT  );
			
			INSERT INTO @tBL_PublishCatalogId (PublishCatalogId,PublishProductId,PublishCategoryId,PimProductId,VersionId ,Localeid)  
			SELECT DISTINCT ZPC.PublishCatalogId,ZPX.PublishProductId,ZPX.PublishCategoryId,ZPP.PimProductId,Max(TH.PublishCatalogLogId),TH.Localeid 
			FROM ZnodePublishCategory ZPC 
			INNER JOIN ZnodePublishCatalogLog TH ON (TH.PublishCatalogId = ZPC.PublishCatalogId)
			INNER JOIN @tBL_CategoryCategoryHierarchyIds CTC ON (ZPC.PimCategoryHierarchyId = CTC .PimCategoryHierarchyId )
			INNER JOIN ZnodePublishCategoryProduct ZPX  ON ZPC.PublishCategoryId = ZPX.PublishCategoryId AND ZPX.PublishCatalogId = ZPC.PublishCatalogId 
			INNER JOIN ZnodePublishProduct ZPP ON ZPP.PublishCatalogId = ZPC.PublishCatalogId AND ZPX.PublishProductId = ZPP.PublishProductId 
			WHERE ZPC.PublishCatalogId = @PublishCatalogId 
			AND  TH.PublishStateId = @PublishStateId
			AND EXISTS (SELECT TOP 1 1 FROM @LocaleId WHERE id = TH.LocaleId)
			GROUP BY ZPC.PublishCatalogId,ZPX.PublishProductId ,ZPX.PublishCategoryId,ZPP.PimProductId,TH.Localeid 
		
			INSERT INTO @tBL_PublishCatalogId (PublishCatalogId,PublishProductId,PublishCategoryId,PimProductId,VersionId,Localeid ) 
			SELECT IPP.PublishCatalogId,IPP.PublishProductId,0,IPP.PimProductId,max(PublishCatalogLogId) VersionId ,h.Localeid
			FROM @insertPublishProductIds IPP 
			LEFT JOIN ZnodePublishCatalogLog h ON (h.PublishCatalogId = IPP.PublishCatalogId )
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM @tBL_PublishCatalogId PCI WHERE IPP.PublishProductId = PCI.PublishProductId)
			AND EXISTS (SELECT TOP 1 1 FROM @LocaleId WHERE id = h.LocaleId)
			AND h.PublishStateId = @PublishStateId
			GROUP BY IPP.PublishCatalogId,IPP.PublishProductId,IPP.PimProductId,Localeid
			
			UPDATE ZnodePublishCatalogLog 
			SET IsProductPublished = 1,PublishProductId = (SELECT count(PublishProductId) FROM ZnodePublishProduct ZPP WHERE ZPP.PublishCatalogId = ZnodePublishCatalogLog.PublishCatalogId ) 
			WHERE PublishCatalogLogId IN (SELECT VersionId FROM @tBL_PublishCatalogId)

			UPDATE ZnodePimProduct 
			SET IsProductPublish = 1 ,PublishStateId = @PublishStateId	
			WHERE EXISTS (SELECT TOP 1 1 
				FROM @tBL_PublishCatalogId ZPP
				WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId
				)
		
				SELECT PublishCatalogId
					,PublishProductId
					,PublishCategoryId
					,VersionId,LocaleId
			FROM @tBL_PublishCatalogId
			END 
			 IF @IsCatalogPublishInProcess = 1 
				BEGIN 
				SELECT 1 Id , 'Single category publish request cannot be processed as catalog or category publish is in progress. Please try after publish is complete.' MessageDetails,  CAST(0 AS BIT ) Status
				END 
				ELSE
				 IF @IsCatalogPublishInProcess = 2 
				BEGIN
				
				SELECT 1 Id , 'Please associate products to the category or to at least one child category to publish the category.' MessageDetails,  CAST(0 AS BIT ) Status
				END 
				ELSE 
				BEGIN 
				SELECT 1 Id , ' Publish Successfull' MessageDetails, CAST(1 AS BIT ) Status
				END 
		END TRY
		BEGIN CATCH
			SELECT error_message()
				,error_procedure();
			UPDATE ZnodePublishCatalogLog 
			SET IsCatalogPublished = 0 
			WHERE PublishCatalogLogId = @versionId
			SET @status = 0;
			DECLARE @error_procedure varchar(1000)= error_procedure(),@errorMessage nvarchar(max)= error_message(),@errorLine varchar(100)= error_line(),@errorCall nvarchar(max)= 'EXEC Znode_GetPublishProducts @PimCatalogId = '+cast(@pimCatalogId AS varchar(max))+',@@PimCategoryHierarchyId='+@pimCategoryHierarchyId+',@UserId='+cast(@userId AS varchar(50))+',@UserId = '+cast(@userId AS varchar(50))+',@VersionId='+cast(@versionId AS varchar(50))+',@Status='+cast(@status AS varchar(10));
			SELECT 0 AS ID
				,cast(0 AS bit) AS Status;
			ROLLBACK TRAN GetPublishProducts;
			EXEC Znode_InsertProcedureErrorLog @procedureName = 'Znode_GetPublishCategoryProducts',@errorInProcedure = @error_procedure,@errorMessage = @errorMessage,@errorLine = @errorLine,@errorCall = @errorCall;
		END CATCH;
		END;
GO

UPDATE ZnodeLocale
SET IsActive = 0 , IsDefault = 0
WHERE Name = 'Spanish'

GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportInsertUpdatePimProduct')
BEGIN 
	DROP PROCEDURE Znode_ImportInsertUpdatePimProduct
END
GO


CREATE PROCEDURE [dbo].[Znode_ImportInsertUpdatePimProduct]
(
    @PimProductDetail  PIMPRODUCTDETAIL READONLY,
    @UserId            INT       ,
    @status            BIT    OUT,
    @IsNotReturnOutput BIT    = 0,
	@CopyPimProductId  INT	  = 0 )
AS
   /*
     Summary : To Insert / Update single Product with multiple attribute values 
     Update Logic: 
*/
     BEGIN
         BEGIN TRAN A;
         BEGIN TRY
			 DECLARE @PimProductId INT;
			 DECLARE @TBL_PimProductId TABLE(PimAttributeValueId INT,ZnodePimAttributeValueLocaleId INT );
			 DECLARE @TBL_CopyPimProductId TABLE(PimAttributeValueId INT,OldPimAttributeValueId INT);
			 DECLARE @PimDefaultFamily INT= dbo.Fn_GetDefaultPimProductFamilyId()
			 DECLARE @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId();
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
			 DECLARE @TBL_DefaultAttributeId TABLE (PimAttributeId INT PRIMARY KEY , AttributeCode VARCHAR(600))
			 DECLARE @TBL_MediaAttributeId TABLE (PimAttributeId INT PRIMARY KEY, AttributeCode VARCHAR(600))
			 DECLARE @TBL_TextAreaAttributeId TABLE (PimAttributeId INT PRIMARY KEY , AttributeCode VARCHAR(600))
			 DECLARE @TBL_MediaAttributeValue TABLE (PimAttributeValueId INT ,LocaleId INT ,AttributeValue VARCHAr(300),MediaId INT)
			 DECLARE @TBL_DefaultAttributeValue TABLE (PimAttributeValueId INT , LocaleId INT , AttributeValue INT)
			 DECLARE @ZnodePimAttributeValue TABLE (PimAttributeValueId  INT, PimAttributeFamilyId INT,PimAttributeId INT);

			 DECLARE @AssociatedProduct VARCHAR(4000);
			 DECLARE @ConfigureAttributeId VARCHAR(4000);
			 DECLARE @ConfigureFamilyId VARCHAR(4000);
			 DECLARE @PimAttributeFamilyId INT;
			 DECLARE @LocaleId INT 

			 DECLARE @pimSkuAttributeId VARCHAR(50) = [dbo].[Fn_GetProductSKUAttributeId] ()
			 DECLARE @pimProductNameAttributeId VARCHAR(50) =[dbo].Fn_GetProductNameAttributeId ()
			 DECLARE @PimIsDownlodableAttributeId VARCHAR(50) = [dbo].[Fn_GetIsDownloadableAttributeId]()
			 Declare @SKU nvarchar(300),@ProductName nvarchar(300)
			 Select * into #PimProductDetail from @PimProductDetail
			
			--DECLARE @PimAttributeFamily VARCHAR(50) =  [dbo].[Fn_GetAttributeFamilyId]()
			--Update #PimProductDetail SET AttributeValue = 
			--(SELECT FamilyCode from ZnodePimAttributeFamily where PimAttributeFamilyId = @PimAttributeFamilyId)
			--where PimAttributeId = @PimAttributeFamily

			--DECLARE @PimAttributeIsPublish VARCHAR(50) =  [dbo].[Fn_GetAttributeIsPublish]()
			 
			--insert into #PimProductDetail ([PimAttributeId],[PimAttributeFamilyId],[ProductAttributeCode],[ProductAttributeDefaultValueId],
			--[PimAttributeValueId],	[LocaleId],[PimProductId],[AttributeValue],[AssociatedProducts],[ConfigureAttributeIds],[ConfigureFamilyIds]) 
			 
			--SELECT TOP 1 @PimAttributeIsPublish,[PimAttributeFamilyId],'PublishStatus' ProductAttributeCode,NULL ProductAttributeDefaultValueId,
			--NULL PimAttributeValueId,	[LocaleId],[PimProductId],
			--CASE when isnull([PimProductId] ,0) > 1 then 'Draft' else 'Not Publish' END AttributeValue,
			--[AssociatedProducts],[ConfigureAttributeIds],[ConfigureFamilyIds]
			--from @PimProductDetail  


			INSERT INTO @TBL_DefaultAttributeId (PimAttributeId,AttributeCode)
			 SELECT PimAttributeId,AttributeCode FROM  [dbo].[Fn_GetDefaultAttributeId] ()
			 
			 INSERT INTO @TBL_MediaAttributeId (PimAttributeId,AttributeCode)
			 SELECT PimAttributeId,AttributeCode FROM [dbo].[Fn_GetProductMediaAttributeId]()

			 INSERT INTO @TBL_TextAreaAttributeId (PimAttributeId ,AttributeCode)
			 SELECT PimAttributeId, AttributeCode   FROM [dbo].[Fn_GetTextAreaAttributeId]()

			 
			 SELECT TOP 1 @PimAttributeFamilyId = PimAttributeFamilyId
                FROM #PimProductDetail;
             
			 

			 
			 
			 SELECT TOP 1 @LocaleId = LocaleId
                FROM #PimProductDetail;

             -- Retrive input productId from #PimProductDetail table ( having multiple attribute values with common productId) 

             SELECT TOP 1 @PimProductId = PimProductId
             FROM #PimProductDetail;
			
			DECLARE @PublishStateIdForDraft INT =  [dbo].[Fn_GetPublishStateIdForDraftState]()
			  DECLARE @PublishStateIdForNotPublished INT = [dbo].[Fn_GetPublishStateIdForForNotPublishedState]()

			

             IF ISNULL(@PimProductId, 0) = 0
                 BEGIN
                     INSERT INTO ZnodePimProduct
                     (PimAttributeFamilyId,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate ,PublishStateId
                     )
                            SELECT @PimAttributeFamilyId,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate,@PublishStateIdForNotPublished ;
                     SET @PimProductId = SCOPE_IDENTITY();
					 If EXISTS (select TOP 1 1 from #PimProductDetail where PimAttributeId = @PimIsDownlodableAttributeId and AttributeValue = 'true'  )
					 Begin
						
						Select TOP 1 @SKU  =  AttributeValue from  #PimProductDetail where PimAttributeId =  @pimSkuAttributeId
						Select TOP 1 @ProductName  = AttributeValue from  #PimProductDetail where PimAttributeId =  @pimProductNameAttributeId
						insert into ZnodePimDownloadableProduct(SKU,ProductName,  CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
						Select @SKU, @ProductName, @UserId , @GetDate, @UserId , @GetDate 
					 End
		

                 END;
             ELSE 
                 BEGIN
                     UPDATE ZNodePimProduct
                       SET
                           PimAttributeFamilyId = @PimAttributeFamilyId,
						   PublishStateId = @PublishStateIdForDraft,
                           ModifiedBy = @UserId,
                           ModifiedDate = @GetDate
                     WHERE PimProductId = @PimProductId;
            									
					 INSERT INTO @TBL_PimProductId(PimAttributeValueId)
					 SELECT ZPAV.PimAttributeValueId
                     FROM ZnodePimAttributeValue ZPAV
					 INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ZPAV.PimAttributeId AND ( @localeID = @DefaultLocaleId OR ZPA.IsLocalizable = 1 OR EXISTS (SELECT TOP 1 1 FROM [dbo].[Fn_GetProductMediaAttributeId]() FN WHERE FN.PimAttributeId = ZPAV.PimAttributeId)))
					 INNER JOIN ZnodePimFamilyGroupMapper ZPFGMI  ON (ZPFGMI.PimAttributeId = ZPAV.PimAttributeId AND ZPFGMI.PimAttributeFamilyId = @PimAttributeFamilyId)
					 WHERE ZPAV.PimProductId = @PimProductId
					 AND NOT EXISTS
                            (
                                SELECT TOP 1 1
                                FROM #PimProductDetail TBPDI
                                WHERE TBPDI.PimAttributeId = ZPAV.PimAttributeId
                                      AND TBPDI.PimProductId = ZPAV.PimProductId
							 )
                     
				    --  SELECT * FROM @TBL_PimProductId

			
                     DELETE FROM ZnodePimAttributeValueLocale
                     WHERE EXISTS
                     (
                         SELECT TOP 1 1
                         FROM @TBL_PimProductId TBPD
                         WHERE TBPD.PimAttributeValueId = ZnodePimAttributeValueLocale.PimAttributeValueId 
								
                     ) AND LocaleId = @LocaleId;
					 DELETE  ZnodePimProductAttributeDefaultValue 
					  WHERE EXISTS
                     (
                         SELECT TOP 1 1
                         FROM @TBL_PimProductId TBPD
                         WHERE TBPD.PimAttributeValueId = ZnodePimProductAttributeDefaultValue.PimAttributeValueId 
								
                     ) AND LocaleId = @LocaleId;
					


					 DELETE FROM ZnodePimProductAttributeMedia 
					  WHERE EXISTS
                     (
                         SELECT TOP 1 1
                         FROM @TBL_PimProductId TBPD
                         WHERE TBPD.PimAttributeValueId = ZnodePimProductAttributeMedia.PimAttributeValueId 
								
                     ) 
					 AND LocaleId = @LocaleId;

		

					 DELETE FROM ZnodePimProductAttributeTextAreaValue
					   WHERE EXISTS
                     (
                         SELECT TOP 1 1
                         FROM @TBL_PimProductId TBPD
                         WHERE TBPD.PimAttributeValueId = ZnodePimProductAttributeTextAreaValue.PimAttributeValueId 
								
                     ) AND LocaleId = @LocaleId ;

					 
                     DELETE FROM ZnodePimAttributeValue
                     WHERE EXISTS
                     (
                         SELECT TOP 1 1
                         FROM @TBL_PimProductId TBPD
                         WHERE TBPD.PimAttributeValueId = ZnodePimAttributeValue.PimAttributeValueId
                     )
					 AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimAttributeValueLocale ZPVD WHERE ZPVD.PimAttributeValueId = ZnodePimAttributeValue.PimAttributeValueId )
					 AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeTextAreaValue ZPVD WHERE ZPVD.PimAttributeValueId = ZnodePimAttributeValue.PimAttributeValueId )
					 AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPVD WHERE ZPVD.PimAttributeValueId = ZnodePimAttributeValue.PimAttributeValueId )
					 AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeMedia ZPVD WHERE ZPVD.PimAttributeValueId = ZnodePimAttributeValue.PimAttributeValueId );
					
				
					
					If EXISTS (select TOP 1 1 from #PimProductDetail where PimAttributeId = @PimIsDownlodableAttributeId and AttributeValue = 'true'  )
					 Begin
						Select TOP 1 @SKU  =  AttributeValue from  #PimProductDetail where PimAttributeId =  @pimSkuAttributeId
						Select TOP 1 @ProductName  = AttributeValue from  #PimProductDetail where PimAttributeId =  @pimProductNameAttributeId

						insert into ZnodePimDownloadableProduct(SKU,ProductName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
						Select TOP 1 PD.AttributeValue, @ProductName,@UserId , @GetDate, @UserId , @GetDate from  #PimProductDetail PD where  PD.PimAttributeId = @pimSkuAttributeId 
						AND not exists (select top 1 1 from  ZnodePimDownloadableProduct where  ZnodePimDownloadableProduct.SKU  =  PD.AttributeValue)
						IF NOT Exists (	select top 1 1 from  ZnodePimDownloadableProduct where  ZnodePimDownloadableProduct.SKU  = @SKU)
							insert into ZnodePimDownloadableProduct(SKU,ProductName,  CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
							Select @SKU, @ProductName, @UserId , @GetDate, @UserId , @GetDate 

					 End
                 END;
		
		 

		    MERGE INTO ZnodePimAttributeValue TARGET
              USING #PimProductDetail SOURCE
              ON(
				TARGET.PimProductId = @PimProductId
                AND TARGET.PimAttributeId = SOURCE.PimAttributeId)
                --AND ISNULL(TARGET.PimAttributeFamilyId, 0) = ISNULL(SOURCE.PimAttributeFamilyId, 0))
                 WHEN MATCHED
                 THEN UPDATE SET
                                 TARGET.PimAttributeFamilyId = CASE
                                                                   WHEN Source.PimAttributeFamilyId = 0
                                                                   THEN NULL
                                                                   ELSE Source.PimAttributeFamilyId
                                                               END,
                                 --TARGET.PimAttributeDefaultValueId = CASE
                                 --                                        WHEN SOURCE.ProductAttributeDefaultValueId = 0
                                 --                                        THEN NULL
                                 --                                        ELSE SOURCE.ProductAttributeDefaultValueId
                                 --                                    END, 
                                 -- ,TARGET.AttributeValue					= SOURCE.AttributeValue
                                 TARGET.CreatedBy = @UserId,
                                 TARGET.CreatedDate = @GetDate,
                                 TARGET.ModifiedBy = @UserId,
                                 TARGET.ModifiedDate = @GetDate
                 WHEN NOT MATCHED
                 THEN INSERT(PimAttributeFamilyId,
                             PimProductId,
                             PimAttributeId,
                             PimAttributeDefaultValueId,
                             --,AttributeValue
                             CreatedBy,
                             CreatedDate,
                             ModifiedBy,
                             ModifiedDate) VALUES
             (CASE
                  WHEN Source.PimAttributeFamilyId = 0
                  THEN @PimDefaultFamily
                  ELSE Source.PimAttributeFamilyId
              END,
              @PimProductId,
              SOURCE.PimAttributeId,
              CASE
                  WHEN SOURCE.ProductAttributeDefaultValueId = 0
                  THEN NULL
                  ELSE SOURCE.ProductAttributeDefaultValueId
              END, 
              --,SOURCE.AttributeValue
              @UserId,
              @GetDate,
              @UserId,
              @GetDate
             )
             --WHEN NOT MATCHED BY SOURCE AND TARGET.PimProductId = @PimProductId
             --                               AND Target.PimAttributeFamilyId IS NOT NULL
             --THEN DELETE
             OUTPUT INSERTED.PimAttributeValueId,
                    INSERTED.PimAttributeFamilyId,
                    INSERTED.PimAttributeId
                    INTO @ZnodePimAttributeValue;
        		
		DECLARE @MediaData Table (MediaId INT , PimProductId INT , PimAttributeId INT ,PimAttributeFamilyId INT,LocaleId INT  )
	    
		INSERT INTO @MediaData (MediaId,PimProductId,PimAttributeId ,PimAttributeFamilyId, LocaleId)
		SELECT sp.item, a.PimProductId, a.PimAttributeId ,PimAttributeFamilyId,a.LocaleId
		FROM #PimProductDetail a
		CROSS APPLY dbo.split(a.AttributeValue,',' ) SP
		WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_MediaAttributeId c WHERE c.PimAttributeId = a.PimAttributeId ) 
				
				 
		INSERT INTO @TBL_MediaAttributeValue (PimAttributeValueId,LocaleId , AttributeValue,MediaId)
		SELECT a.PimAttributeValueId,
                        b.LocaleId,
                         zm.Path AttributeValue
						 ,ZM.MediaId
        FROM @ZnodePimAttributeValue AS a
        INNER JOIN  @MediaData AS b ON(a.PimAttributeId = b.PimAttributeId
                                                AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0))
				INNER JOIN ZnodeMedia ZM ON ( b.MediaId = ZM.MediaId )
		
		DELETE FROM ZnodePimProductAttributeMedia 
		WHERE EXISTS 
		 (SELECT TOP 1 1 FROM @TBL_MediaAttributeValue TBLM WHERE ZnodePimProductAttributeMedia.PimAttributeValueId = TBLM.PimAttributeValueId 
		 AND TBLM.MediaId <> ZnodePimProductAttributeMedia.MediaId  AND ZnodePimProductAttributeMedia.Localeid = @LocaleId)



		MERGE INTO ZnodePimProductAttributeMedia TARGET 
		USING @TBL_MediaAttributeValue SOURCE 
		ON (        TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
		        AND TARGET.MediaPAth = SOURCE.AttributeValue
                  AND TARGET.LocaleId = SOURCE.LocaleId)
		WHEN MATCHED THEN 
		UPDATE SET
                                 TARGET.MediaPath = SOURCE.AttributeValue,
						   TARGET.MediaId   = SOURCE.MediaId,
                                 TARGET.CreatedBy = @UserId,
                                 TARGET.CreatedDate = @GetDate,
                                 TARGET.ModifiedBy = @UserId,
                                 TARGET.ModifiedDate = @GetDate
                 WHEN NOT MATCHED
                 THEN 
		    INSERT(PimAttributeValueId,
                             LocaleId,
                             MediaPath,
							 MediaId ,
                             CreatedBy,
                             CreatedDate,
                             ModifiedBy,
                             ModifiedDate) 
			VALUES
             (SOURCE.PimAttributeValueId,
              SOURCE.LocaleId,
              SOURCE.AttributeValue,
			  SOURCE.MediaId,
              @UserId,
              @GetDate,
              @UserId,
              @GetDate
             );
		 --WHEN NOT MATCHED BY SOURCE AND EXISTS 
		 --(SELECT TOP 1 1 FROM @TBL_MediaAttributeValue TBLM WHERE TARGET.PimAttributeValueId = TBLM.PimAttributeValueId AND TBLM.MediaId = TARGET.MediaId  AND TARGET.Localeid = @LocaleId)
		 --  THEN 
		 --DELETE  ;


	   ;With Cte_TextAreaAttributeValue AS 
		 (
		SELECT a.PimAttributeValueId,
                        b.LocaleId,
                        AttributeValue
        FROM @ZnodePimAttributeValue AS a
        INNER JOIN #PimProductDetail AS b ON(a.PimAttributeId = b.PimAttributeId
                                                AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0))
		INNER JOIN @TBL_TextAreaAttributeId c ON ( c.PimAttributeId  = b.PimAttributeId )
		
		)
		
		MERGE INTO ZnodePimProductAttributeTextAreaValue TARGET 
		USING Cte_TextAreaAttributeValue SOURCE 
		ON (TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
                AND TARGET.LocaleId = SOURCE.LocaleId)
		WHEN MATCHED THEN 
		UPDATE SET
                                 TARGET.AttributeValue = SOURCE.AttributeValue,
                                 TARGET.CreatedBy = @UserId,
                                 TARGET.CreatedDate = @GetDate,
                                 TARGET.ModifiedBy = @UserId,
                                 TARGET.ModifiedDate = @GetDate
                 WHEN NOT MATCHED
                 THEN 
		    INSERT(PimAttributeValueId,
                             LocaleId,
                             AttributeValue,
                             CreatedBy,
                             CreatedDate,
                             ModifiedBy,
                             ModifiedDate) 
			VALUES
             (SOURCE.PimAttributeValueId,
              SOURCE.LocaleId,
              SOURCE.AttributeValue,
              @UserId,
              @GetDate,
              @UserId,
              @GetDate
             );
		-- SELECT a.PimAttributeValueId,
  --                      b.LocaleId,
  --                      d.PimAttributeDefaultValueId  AttributeValue,b.PimAttributeId
  --      FROM @ZnodePimAttributeValue AS a
  --        INNER JOIN #PimProductDetail AS b ON(a.PimAttributeId = b.PimAttributeId
  --                                              AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0))
		--INNER JOIN @TBL_DefaultAttributeId c ON ( c.PimAttributeId  = b.PimAttributeId )
		--INNER JOIN ZnodePimAttributeDefaultValue d ON (EXISTS (SELECT TOP 1 1 FROM dbo.split(b.AttributeValue,',') SP WHERE d.PimAttributeId = b.PimAttributeId AND SP.Item = d.AttributeDefaultValueCode))
	



        INSERT INTO @TBL_DefaultAttributeValue (PimAttributeValueId,LocaleId,AttributeValue)  
		SELECT a.PimAttributeValueId,
                        b.LocaleId,
                        d.PimAttributeDefaultValueId  AttributeValue
        FROM @ZnodePimAttributeValue AS a
          INNER JOIN #PimProductDetail AS b ON(a.PimAttributeId = b.PimAttributeId
                                                AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0))
		INNER JOIN @TBL_DefaultAttributeId c ON ( c.PimAttributeId  = b.PimAttributeId )
		INNER JOIN ZnodePimAttributeDefaultValue d ON (EXISTS (SELECT TOP 1 1 FROM dbo.split(b.AttributeValue,',') SP WHERE d.PimAttributeId = b.PimAttributeId AND SP.Item = d.AttributeDefaultValueCode))
	
	     -- SELECT * FROM @TBL_DefaultAttributeValue

		--  SELECT * FROM Cte_DefaultAttributeValue
		DELETE FROM ZnodePimProductAttributeDefaultValue 
		WHERE  EXISTS (SELECT TOP 1 1 FROM @TBL_DefaultAttributeValue TBLAV WHERE TBLAV.PimAttributeValueId = ZnodePimProductAttributeDefaultValue.PimAttributeValueId 
												AND TBLAV.AttributeValue   <> ZnodePimProductAttributeDefaultValue.PimAttributeDefaultValueId 
												 AND ZnodePimProductAttributeDefaultValue.LocaleId = @LocaleId )

		MERGE INTO ZnodePimProductAttributeDefaultValue TARGET 
		USING @TBL_DefaultAttributeValue SOURCE 
		ON (TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
              AND TARGET.PimAttributeDefaultValueId =  SOURCE.AttributeValue
			    AND TARGET.LocaleId = SOURCE.LocaleId)
		WHEN MATCHED THEN 
		UPDATE SET
                                 TARGET.PimAttributeDefaultValueId = SOURCE.AttributeValue,
                                 TARGET.CreatedBy = @UserId,
                                 TARGET.CreatedDate = @GetDate,
                                 TARGET.ModifiedBy = @UserId,
                                 TARGET.ModifiedDate = @GetDate
                 WHEN NOT MATCHED
                 THEN 
		    INSERT(PimAttributeValueId,
                             LocaleId,
                             PimAttributeDefaultValueId,
                             CreatedBy,
                             CreatedDate,
                             ModifiedBy,
                             ModifiedDate) 
			VALUES
             (SOURCE.PimAttributeValueId,
              SOURCE.LocaleId,
              SOURCE.AttributeValue,
              @UserId,
              @GetDate,
              @UserId,
              @GetDate
             );
			 --WHEN NOT MATCHED BY SOURCE  AND EXISTS (SELECT TOP 1 1 FROM @TBL_DefaultAttributeValue TBLAV WHERE TBLAV.PimAttributeValueId = TARGET.PimAttributeValueId 
				--								AND TBLAV.AttributeValue   = TARGET.PimAttributeDefaultValueId  AND TARGET.LocaleId = @LocaleId )
			 --THEN 
			 --DELETE 
			 --;
		
   
			 
		   MERGE INTO ZnodePimAttributeValueLocale TARGET
             USING
             (
                 SELECT a.PimAttributeValueId,
                        b.LocaleId,
                        AttributeValue
                 FROM @ZnodePimAttributeValue AS a
                      INNER JOIN #PimProductDetail AS b ON(a.PimAttributeId = b.PimAttributeId
                                                             AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0))
                 WHERE NOT EXISTS (SELECT TOP 1 1 FROM @TBL_DefaultAttributeId TBLDA WHERE TBLDA.PimAttributeId = b.PimAttributeId  )
			     AND NOT EXISTS (SELECT TOP 1 1 FROM @TBL_MediaAttributeId TBLMA WHERE TBLMA.PimAttributeId = b.PimAttributeId  )
				 AND NOT EXISTS (SELECT TOP 1 1 FROM @TBL_TextAreaAttributeId TBLTA WHERE TBLTA.PimAttributeId = b.PimAttributeId  )
			 ) SOURCE
             ON(TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
                AND TARGET.LocaleId = SOURCE.LocaleId)
                 WHEN MATCHED
                 THEN UPDATE SET
                                 TARGET.AttributeValue = SOURCE.AttributeValue,
                                 TARGET.CreatedBy = @UserId,
                                 TARGET.CreatedDate = @GetDate,
                                 TARGET.ModifiedBy = @UserId,
                                 TARGET.ModifiedDate = @GetDate
                 WHEN NOT MATCHED
                 THEN INSERT(PimAttributeValueId,
                             LocaleId,
                             AttributeValue,
                             CreatedBy,
                             CreatedDate,
                             ModifiedBy,
                             ModifiedDate) VALUES
             (SOURCE.PimAttributeValueId,
              SOURCE.LocaleId,
              SOURCE.AttributeValue,
              @UserId,
              @GetDate,
              @UserId,
              @GetDate
             );
             SET @AssociatedProduct =
             (
                 SELECT MAX(AssociatedProducts)
                 FROM #PimProductDetail AS a
             );
             INSERT INTO ZnodePimProductTypeAssociation
             (PimParentProductId,
              PimProductId,
              DisplayOrder,
              CreatedBy,
              CreatedDate,
              ModifiedBy,
              ModifiedDate
             )
                    SELECT @PimProductId,
                           Item,
                           ID AS RowId,
                           @UserId,
                           @GetDate,
                           @UserId,
                           @GetDate
                    FROM dbo.Split(@AssociatedProduct, ',') AS b
                         INNER JOIN ZNodePimProduct AS q ON(q.PimProductId = b.Item)
						 WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimProductTypeAssociation PPT
						 WHERE PPT.PimParentProductId = @PimProductId AND PPT.PimProductId = b.Item)


             SET @ConfigureAttributeId =
             (
                 SELECT MAX(ConfigureAttributeIds)
                 FROM #PimProductDetail AS a
             );
             SET @ConfigureFamilyId =
             (
                 SELECT MAX(ConfigureFamilyIds)
                 FROM #PimProductDetail AS a
             );
             INSERT INTO [ZnodePimConfigureProductAttribute]
             (PimProductId,
              PimFamilyId,
              PimAttributeId,
              CreatedBy,
              CreatedDate,
              ModifiedBy,
              ModifiedDate
             )
                    SELECT @PimProductId,
                           @ConfigureFamilyId,
                           q.PimAttributeId,
                           @UserId,
                           @GetDate,
                           @UserId,
                           @GetDate
                    FROM dbo.Split(@ConfigureAttributeId, ',') AS b
                         INNER JOIN ZnodePimAttribute AS q ON(q.PimAttributeId = b.Item)
					WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimConfigureProductAttribute RTR  WHERE  RTR.PimProductId = @PimProductId AND RTR.PimAttributeId = q.PimAttributeId);



             IF @IsNotReturnOutput = 0
                 SELECT @PimProductId AS Id,
                        CAST(1 AS BIT) AS Status;
             SET @status = 1;

			 IF @CopyPimProductId > 0 
			 BEGIN 
			   INSERT INTO ZnodePimAttributeValueLocale  (PimAttributeValueId,LocaleId,AttributeValue,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			   SELECT ZPAVI.PimAttributeValueId,ZPAVL.LocaleId,ZPAVL.AttributeValue,@UserId,@GetDate,@UserId,@GetDate
			   FROM ZnodePimAttributeValueLocale ZPAVL 
			   INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId )
			   INNER JOIN ZnodePimAttributeValue ZPAVI ON (ZPAVI.PimAttributeId = ZPAV.PimAttributeId AND ZPAVI.PimProductId = @PimProductId )
			   WHERE ZPAVL.LocaleId <> dbo.Fn_GetDefaultLocaleId()
			   AND ZPAV.PimProductId = @CopyPimProductId

			    INSERT INTO ZnodePimProductAttributeDefaultValue  (PimAttributeValueId,LocaleId,PimAttributeDefaultValueId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			   SELECT ZPAVI.PimAttributeValueId,ZPAVL.LocaleId,ZPAVL.PimAttributeDefaultValueId,@UserId,@GetDate,@UserId,@GetDate
			   FROM ZnodePimProductAttributeDefaultValue ZPAVL 
			   INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId )
			   INNER JOIN ZnodePimAttributeValue ZPAVI ON (ZPAVI.PimAttributeId = ZPAV.PimAttributeId AND ZPAVI.PimProductId = @PimProductId )
			   WHERE ZPAVL.LocaleId <> dbo.Fn_GetDefaultLocaleId()
			   AND ZPAV.PimProductId = @CopyPimProductId


			   INSERT INTO ZnodePimProductAttributeTextAreaValue  (PimAttributeValueId,LocaleId,AttributeValue,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			   SELECT ZPAVI.PimAttributeValueId,ZPAVL.LocaleId,ZPAVL.AttributeValue,@UserId,@GetDate,@UserId,@GetDate
			   FROM ZnodePimProductAttributeTextAreaValue ZPAVL 
			   INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId )
			   INNER JOIN ZnodePimAttributeValue ZPAVI ON (ZPAVI.PimAttributeId = ZPAV.PimAttributeId AND ZPAVI.PimProductId = @PimProductId )
			   WHERE ZPAVL.LocaleId <> dbo.Fn_GetDefaultLocaleId()
			   AND ZPAV.PimProductId = @CopyPimProductId
			   			   
			   INSERT INTO ZnodePimProductAttributeMedia  (PimAttributeValueId,LocaleId,MediaPath,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			   SELECT ZPAVI.PimAttributeValueId,ZPAVL.LocaleId,ZPAVL.MediaPath,@UserId,@GetDate,@UserId,@GetDate
			   FROM ZnodePimProductAttributeMedia ZPAVL 
			   INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId )
			   INNER JOIN ZnodePimAttributeValue ZPAVI ON (ZPAVI.PimAttributeId = ZPAV.PimAttributeId AND ZPAVI.PimProductId = @PimProductId )
			   WHERE ZPAVL.LocaleId <> dbo.Fn_GetDefaultLocaleId()
			   AND ZPAV.PimProductId = @CopyPimProductId
			   
			 END 

             COMMIT TRAN A;
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE()
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportInsertUpdatePimProduct @UserId = '+CAST(@UserId AS VARCHAR(50))+',@IsNotReturnOutput='+CAST(@IsNotReturnOutput AS VARCHAR(50))+',@CopyPimProductId='+CAST(@CopyPimProductId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
			ROLLBACK TRAN A;
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_ImportInsertUpdatePimProduct',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
	 GO

	 Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Store','EditAssociatedShipping',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Store' and ActionName = 'EditAssociatedShipping')
 
insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store')	
      ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'EditAssociatedShipping')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store') and ActionId = 
       (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'EditAssociatedShipping'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store'),
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'EditAssociatedShipping')	
,2,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store') and ActionId = 
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'EditAssociatedShipping'))

GO


IF EXISTS (SELECT TOP 1  1 FROM sys.Objects WHERE OBJECT_NAME(object_id) = 'Fn_GetMediaThumbnailMediaPath')
BEGIN
DROP FUNCTION dbo.Fn_GetMediaThumbnailMediaPath
END
GO
CREATE FUNCTION [dbo].[Fn_GetMediaThumbnailMediaPath]      
(@path VARCHAR(1000)      
)      
RETURNS VARCHAR(4000)      
AS      
     BEGIN      
         DECLARE @V_MediaServerThumbnailPath VARCHAR(4000);      
         DECLARE @V_MediaServerThumbnailPathWithMedia VARCHAR(4000);      
         SET @V_MediaServerThumbnailPath =      
         (      
             SELECT ISNULL(ZMC.CDNURL,ZMC.URL)+ZMSM.ThumbnailFolderName+'/'      
             FROM ZnodeMediaConfiguration ZMC       
    INNER JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMC.MediaServerMasterId)      
       WHERE IsActive = 1       
         );      
         SET @V_MediaServerThumbnailPathWithMedia = SUBSTRING(      
                                                             (      
                                                                 SELECT ',',      
                                                                        @V_MediaServerThumbnailPath+item      
                                                                 FROM dbo.Split(@path, ',') a      
                                                                 FOR XML PATH(''), TYPE).value('.', 'varchar(Max)'), 2, 4000);      
         RETURN CASE      
                    WHEN @V_MediaServerThumbnailPathWithMedia IS NULL      
                         OR RTRIM(LTRIM(@V_MediaServerThumbnailPathWithMedia)) = ''      
                         OR @V_MediaServerThumbnailPath = @V_MediaServerThumbnailPathWithMedia      
                    THEN '/MediaFolder/no-image.png'      
                    ELSE @V_MediaServerThumbnailPathWithMedia      
                END;      
     END;
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPimProductAttributeValues')
BEGIN 
	DROP PROCEDURE Znode_GetPimProductAttributeValues
END
GO
CREATE   PROCEDURE [dbo].[Znode_GetPimProductAttributeValues]  
(  
    @ChangeFamilyId INT = 0,  
    @PimProductId   INT = 0,  
    @LocaleId       INT = 0,  
    @IsCopy         BIT = 0  
)  
AS  
/*  
  Summary :- This procedure is used to get the Attribute and Product attribute value as per filter pass   
  Unit Testing   
  BEGIN TRAN  
  EXEC Znode_GetPimProductAttributeValues 0, 16,1,0  
  
  SELECT * fROM znodePimAttribute WHERE IsShowOnGrid = 1   
  ROLLBACK TRAN  
  
*/    
     BEGIN  
      BEGIN TRAN PimProductAttributeValues  
         BEGIN TRY  
             DECLARE  @V_LocaleId INT= @LocaleId, @LocaleIdDefault INT= dbo.Fn_GetDefaultLocaleId(), @PimAttributeFamilyId  INT;   
    --DECLARE @PimAttributeId VARCHAR(max),@PimProductIds  VARCHAR(max)   
               
    DECLARE @TBL_PimAttribute TABLE (PimAttributeId INT ,ParentPimAttributeId INT ,AttributeTypeId INT ,AttributeCode VARCHAR(600),IsRequired BIT,IsLocalizable BIT,IsFilterable BIT  
      ,IsSystemDefined BIT,IsConfigurable BIT ,IsPersonalizable BIT,DisplayOrder INT ,HelpDescription NVARCHAR(max),IsCategory BIT,IsHidden BIT,CreatedDate DATETIME ,ModifiedDate DATETIME   
      ,AttributeName NVARCHAR(max) ,AttributeTypeName VARCHAR(600) )  
      
    DECLARE @TBL_PimAttributeDefault TABLE (PimAttributeId INT,AttributeDefaultValueCode VARCHAR(600),IsEditable BIT,AttributeDefaultValue NVARCHAR(max),DisplayOrder int,PimAttributeDefaultValueId INT )  
    CREATE TABLE #TBL_AttributeValueDetail  (PimProductId INT , AttributeValue NVARCHAR(max),AttributeCode VARCHAR(300),PimAttributeId INT, AttributeDefaultValue NVARCHAR(max))  
    DECLARE @TBL_AttributeFamily TABLE (PimAttributeFamilyId INT ,FamilyCode VARCHAR(600),IsSystemDefined BIT ,IsDefaultFamily BIT ,IsCategory BIT ,AttributeFamilyName NVARCHAR(max))  
    DECLARE @TBL_MultiSelectAttribute TABLE (PimAttributeId INT , AttributeCode VARCHAR(600))  
    CREATE TABLE #TBL_AttributeValueFinale  (PimProductId INT , AttributeValue NVARCHAR(max),AttributeCode VARCHAR(300),PimAttributeId INT, AttributeDefaultValueCode NVARCHAR(MAX))  
    INSERT INTO @TBL_MultiSelectAttribute (PimAttributeId,AttributeCode)  
    SELECT PimAttributeId,AttributeCode FROM [dbo].[Fn_GetProductMultiSelectAttributes] ()  
    DECLARE @TBL_PimMediaAttributeId TABLE (PimAttributeId INT ,AttributeCode VARCHAR(600))  
    INSERT INTO @TBL_PimMediaAttributeId (PimAttributeId,AttributeCode)  
    SELECT PimAttributeId,AttributeCode FROM Dbo.Fn_GetProductMediaAttributeId ()  
      --- Get the default family id   
    IF @ChangeFamilyId = 0   
      BEGIN          
    SET @PimAttributeFamilyId = ISNULL((SELECT TOP 1 PimAttributeFamilyId FROM ZnodePimProduct ZPP WHERE PimProductId = @PimProductId ), dbo.Fn_GetDefaultPimProductFamilyId() )  
      END     
       ELSE   
      BEGIN   
    SET @PimAttributeFamilyId = @ChangeFamilyId  
      END   
      
   -- ;With Cte_AttributeIdss AS   
   --(SELECT PimAttributeId FROM ZnodePimFamilyGroupMapper  ZPFGM   
   --WHERE PimAttributeFamilyId = @PimAttributeFamilyId   
   --AND NOT EXISTS  
   --(SELECT TOP 1 1 FROM ZnodePimConfigureProductAttribute ZPCPA WHERE ZPCPA.PimAttributeId = ZPFGM.PimAttributeId AND ZPCPA.PimProductId = @PimProductId)  
   --            UNION    
   --             SELECT PimAttributeId FROM ZnodePimAttributeValue ZPAV WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimAttribute ZPA WHERE ZPA.PimAttributeId = ZPAV.PimAttributeId AND ZPA.IsPersonalizable = 1 )   
   --  AND ZPAV.PimProductId = @PimProductId AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimConfigureProductAttribute ZPCPA WHERE ZPCPA.PimAttributeId = ZPAV.PimAttributeId AND ZPCPA.PimProductId = @PimProductId))  
        
   --  SELECT  @PimAttributeId = SUBSTRING ((SELECT ','+CAST(PimAttributeId AS VARCHAR(50)) FROM Cte_AttributeIdss FOR XML PATH ('')),2,4000)  
      
     DECLARE @PimAttributeId TransferId , @PimProductId_new TransferId  
  
    INSERT INTO @PimAttributeId(Id)  
    SELECT PimAttributeId FROM ZnodePimFamilyGroupMapper  ZPFGM   
    WHERE PimAttributeFamilyId = @PimAttributeFamilyId AND ISNULL(PimAttributeId,0) <> 0  
    AND NOT EXISTS  
    (SELECT TOP 1 1 FROM ZnodePimConfigureProductAttribute ZPCPA WHERE ZPCPA.PimAttributeId = ZPFGM.PimAttributeId AND ZPCPA.PimProductId = @PimProductId)  
    UNION    
    SELECT PimAttributeId FROM ZnodePimAttributeValue ZPAV WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimAttribute ZPA WHERE ZPA.PimAttributeId = ZPAV.PimAttributeId AND ZPA.IsPersonalizable = 1 )   
    AND ZPAV.PimProductId = @PimProductId AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimConfigureProductAttribute ZPCPA WHERE ZPCPA.PimAttributeId = ZPAV.PimAttributeId AND ZPCPA.PimProductId = @PimProductId)  
  
  
     INSERT INTO @TBL_PImAttribute (PimAttributeId,ParentPimAttributeId,AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable  
     ,IsSystemDefined,IsConfigurable,IsPersonalizable,DisplayOrder,HelpDescription,IsCategory,IsHidden,CreatedDate,ModifiedDate,AttributeName ,AttributeTypeName )  
     EXEC [dbo].[Znode_GetPimAttributesDetailsforPimProduct] @PimAttributeId,@LocaleId  
  
     INSERT INTO @PimProductId_new   
              SELECT @PimProductId  
  
  
     INSERT INTO #TBL_AttributeValueDetail (PimProductId,AttributeValue,AttributeCode,PimAttributeId,AttributeDefaultValue)  
     EXEC [dbo].[Znode_GetProductsAttributeValue_newTesting]  @PimProductId_new , @PimAttributeId ,@LocaleId  
     
   
  
     INSERT INTO @TBL_PimAttributeDefault (PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder,PimAttributeDefaultValueId)  
     EXEC [dbo].[Znode_GetAttributeDefaultValueLocaleNew_TansferId] @PimAttributeId,@LocaleId  
  
  
     INSERT INTO @TBL_AttributeFamily (PimAttributeFamilyId,FamilyCode,IsSystemDefined,IsDefaultFamily,IsCategory,AttributeFamilyName)  
     EXEC Znode_GetFamilyValueLocale  @PimAttributeFamilyId, @LocaleId   
  
      
    --  update the media path   
     ;WITH Cte_ProductMedia  
               AS (  
      SELECT TBA.PimProductId , TBA.PimAttributeId , SUBSTRING( ( SELECT ','+AttributeValue  
      FROM  #TBL_AttributeValueDetail AS TBAI  
      WHERE TBAI.PimProductId = TBA.PimProductId AND TBAI.PimAttributeId = TBA.PimAttributeId   
      FOR XML PATH(''), TYPE).value('.', 'varchar(Max)') , 2 , 4000) As AttributeValue ,  SUBSTRING( (SELECT ','+CAST(MediaID AS VARCHAR(200))   
     FROM  ZnodePimAttributeValue tr    
     INNER JOIN ZnodePimProductAttributeMedia CTPM ON CTPM.PimAttributeValueId  = tr.PimAttributeValueId   
     WHERE tr.PimAttributeId = TBA.PimAttributeId AND tr.PimProductId = TBA.PimProductId   
     AND CTPM.LocaleId =@LocaleId FOR XML PATH('') ) ,2, 4000) MediaIds    
      FROM #TBL_AttributeValueDetail AS TBA   
      INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBA.PimATtributeId ))  
                      
          
           UPDATE TBAV SET AttributeValue = CTPM.AttributeVALue+'~'+CTPM.MediaIds   
     FROM #TBL_AttributeValueDetail TBAV   
     INNER JOIN Cte_ProductMedia CTPM ON CTPM.PimProductId = TBAV.PimProductId  AND CTPM.PimAttributeId = TBAV.PimAttributeId   
     AND CTPM.PimAttributeId = TBAV.PimAttributeId;  
    
    -- IF IsCopy Is True then Unique value are blank   
      ;With Cte_UniqueAttributeId AS    
      (  
      SELECT c.PimAttributeId   
      FROM ZnodePimAttributeValidation AS c   
      INNER JOIN ZnodeAttributeInputValidation AS d ON (c.InputValidationId = d.InputValidationId)  
      WHERE d.Name = 'UniqueValue' AND c.Name = 'true' AND @Iscopy = 1 GROUP BY c.PimAttributeId  
      )  
   
      UPDATE TBAV SET AttributeValue = '' FROM #TBL_AttributeValueDetail  TBAV INNER JOIN Cte_UniqueAttributeId CTUA ON (CTUA.PimAttributeId = TBAV.PimAttributeId)  
  
      INSERT INTO #TBL_AttributeValueFinale (PimProductId  , AttributeValue ,AttributeCode ,PimAttributeId,AttributeDefaultValueCode)  
  
      SELECT DISTINCT  PimProductId  ,AttributeValue ,AttributeCode ,PimAttributeId,AttributeDefaultValue  
      FROM #TBL_AttributeValueDetail TBLA   
  
     UPDATE #TBL_AttributeValueFinale  
     SET AttributeValue = AttributeDefaultValueCode  
     FROM #TBL_AttributeValueFinale AVF  
     WHERE EXISTS (SELECT TOP 1 1 FROM   
     Fn_GetDefaultAttributeId() GDA WHERE AVF.AttributeCode = GDA.AttributeCode)  
  
  
      SELECT TBAF.PimAttributeFamilyId,FamilyCode,TBPA.PimAttributeId,PimAttributeGroupId,TBPA.AttributeTypeId,AttributeTypeName,TBPA.AttributeCode,  
      IsRequired,IsLocalizable,IsFilterable,AttributeName, TBAV.AttributeValue  ,PimAttributeValueId,TBADV.PimAttributeDefaultValueId,  
      TBADV.AttributeDefaultValueCode ,AttributeDefaultValue AS AttributeDefaultValue,ISNULL(NULL, 0) AS RowId,ISNULL(IsEditable, 1) AS IsEditable,  
      ZAIV.ControlName,ZAIV.Name AS ValidationName,ZAIVR.ValidationName AS SubValidationName,ZAIVR.RegExp,ZPAV.Name AS ValidationValue,  
      CAST(CASE WHEN ZAIVR.RegExp IS NULL THEN 0 ELSE 1 END AS BIT) AS IsRegExp,HelpDescription  
    FROM @TBL_PimAttribute  TBPA   
    LEFT JOIN #TBL_AttributeValueFinale  TBAV ON (TBAV.PimAttributeId = TBPA.PimAttributeId)  
    LEFT JOIN @TBL_PimAttributeDefault TBADV ON (TBADV.PimAttributeId = TBPA.PimAttributeId)  
    LEFT JOIN ZnodePimAttributeValidation AS ZPAV ON(ZPAV.PimAttributeId = TBPA.PimAttributeId)  
    LEFT JOIN ZnodeAttributeInputValidation AS ZAIV ON(ZPAV.InputValidationId = ZAIV.InputValidationId)  
    LEFT JOIN ZnodeAttributeInputValidationRule AS ZAIVR ON(ZPAV.InputValidationRuleId = ZAIVR.InputValidationRuleId)  
    LEFT JOIN ZnodePimAttributeValue ZPV ON (ZPV.PimProductId = TBAV.PimProductId AND ZPV.PimAttributeId = TBAV.PimAttributeId)  
    LEFT JOIN @TBL_AttributeFamily TBAF ON (TBAF.PimAttributeFamilyId = @PimAttributeFamilyId)  
    LEFT JOIN ZnodePimFamilyGroupMapper ZPFG ON (ZPFG.PimAttributeFamilyId = TBAF.PimAttributeFamilyId AND ZPFG.PimAttributeId = TBPA.PimAttributeId)  
    WHERE TBPA.AttributeCode <> 'PublishStatus'  
    ORDER BY TBPA.DisplayOrder,TBPA.PimAttributeId, TBADV.DisplayOrder  
     
   COMMIT TRAN PimProductAttributeValues;  
         END TRY  
         BEGIN CATCH  
   SELECT ERROR_MESSAGE()  
             DECLARE @Status BIT ;  
    SET @Status = 0;  
    DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(),  
     @ErrorLine VARCHAR(100)= ERROR_LINE(),  
      @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPimProductAttributeValues @ChangeFamilyId='+cast (@ChangeFamilyId AS VARCHAR(50))  
      +',@PimProductId = '+cast (@PimProductId AS VARCHAR(50))+',@LocaleId='+CAST(@LocaleId AS VARCHAR(50))+',@IsCopy='+CAST(@IsCopy AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));  
                    
          SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                      
    ROLLBACK TRAN PimProductAttributeValues;  
  
          EXEC Znode_InsertProcedureErrorLog  
            @ProcedureName = 'Znode_GetPimProductAttributeValues',  
            @ErrorInProcedure = @Error_procedure,  
            @ErrorMessage = @ErrorMessage,  
            @ErrorLine = @ErrorLine,  
            @ErrorCall = @ErrorCall;  
         END CATCH;  
     END;
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetProductsAttributeValue_newTesting')
BEGIN 
	DROP PROCEDURE Znode_GetProductsAttributeValue_newTesting
END
GO
CREATE   PROCEDURE [dbo].[Znode_GetProductsAttributeValue_newTesting]  
(   @PimProductId  transferid readonly ,  
    @AttributeId transferid readonly,  
    @LocaleId      INT = 0,  
 @IsPublish bit = 0  )  
AS  
/*   
      
     Summary:- This Procedure is used to get the product attribute values   
      The result is fetched from all locale for ProductId provided  
     Unit Testing   
     EXEC Znode_GetProductsAttributeValue_1 '2146','ProductName,SKU,Price,Quantity,IsActive,ProductType,Image,Assortment,DisplayOrder,Style,Material',0  
  SELECT * FROM ZnodePIMProduct  
  DECLARE @Tyr TransferId   
  ,  @Tyr1   TransferId   
  INSERT INTO @Tyr   
  SELECT   
  EXEC Znode_GetProductsAttributeValue '121','ProductName,SKU,Price,Quantity,IsActive,ProductType,Image,Assortment,DisplayOrder,Style,Material',1  
    
  EXEC Znode_GetProductsAttributeValue '121','ProductName,SKU,Price,Quantity,IsActive,ProductType,Image,Assortment,DisplayOrder,Style,Material',2,@IsPublish =1   
      
*/   
  BEGIN  
         BEGIN TRY  
             SET NOCOUNT ON;  
        
   --  DECLARE #TBL_AttributeValue1 TABLE (PimAttributeValueId INT , PimAttributeId INT , PimProductId INT,AttributeCode VARCHAR(200)  )  
     DECLARE @DefaultLocaleId INT = dbo.FN_GetDefaultLocaleID()  
  
   --  INSERT INTO  (PimAttributeValueId , PimAttributeId , PimProductId,AttributeCode )  
           SELECT PimAttributeValueId , ZPAV.PimAttributeId , PimProductId,AttributeCode   
     INTO #TBL_AttributeValue1  
     FROM ZnodePimAttributeValue ZPAV   
     INNER JOIN  ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ZPAV.PimAttributeId)    
     WHERE EXISTS (SELECT TOP 1 1 FROM @PimProductId TBLP WHERE TBLP.Id = ZPAV.PimProductId )  
     AND EXISTS (SELECT TOP 1 1 FROM @AttributeId TBLA WHERE TBLA.Id = ZPAV.PimAttributeId  )  
     
   CREATE TABLE #TBL_AttributeValue  (PimAttributeValueId INT  , PimAttributeId  INT , PimProductId INT ,AttributeCode NVARCHAR(600),AttributeValue NVARCHAR(max),TypeOfData INT   
      ,PimAttributeValueLocaleId INT ,LocaleId INT , RowId INT,PimAttributeDefaultValueId INT  )  
          INSERT INTO #TBL_AttributeValue (PimAttributeValueId   , PimAttributeId   , PimProductId  ,AttributeCode ,AttributeValue ,TypeOfData    
      ,PimAttributeValueLocaleId  ,LocaleId  , RowId    )     
    SELECT TBLAV.PimAttributeValueId , TBLAV.PimAttributeId , PimProductId,AttributeCode,ZPAVL.AttributeValue,1 TypeOfData  
      ,ZPAVL.ZnodePimAttributeValueLocaleId PimAttributeValueLocaleId,LocaleId,COUNT(*)Over(Partition By TBLAV.PimProductId,PimAttributeId ORDER BY TBLAV.PimProductId,PimAttributeId  ) RowId  
        FROM ZnodePimAttributeValueLocale  ZPAVL   
    INNER JOIN #TBL_AttributeValue1 TBLAV ON (TBLAV.PimAttributeValueId = ZPAVL.PimAttributeValueId)  
    WHERE LocaleId = @DefaultLocaleId OR LocaleId = @LocaleId   
     
    INSERT INTO #TBL_AttributeValue (PimAttributeValueId   , PimAttributeId   , PimProductId  ,AttributeCode ,AttributeValue ,TypeOfData    
      ,PimAttributeValueLocaleId  ,LocaleId  , RowId )  
    SELECT TBLAV.PimAttributeValueId , TBLAV.PimAttributeId , PimProductId,AttributeCode,ZPAVL.AttributeValue,1 TypeOfData  
      ,ZPAVL.PimProductAttributeTextAreaValueId PimAttributeValueLocaleId,LocaleId,COUNT(*)Over(Partition By TBLAV.PimProductId,PimAttributeId ORDER BY TBLAV.PimProductId,PimAttributeId  ) RowId  
    FROM ZnodePimProductAttributeTextAreaValue  ZPAVL   
    INNER JOIN #TBL_AttributeValue1 TBLAV ON (TBLAV.PimAttributeValueId = ZPAVL.PimAttributeValueId)  
    WHERE LocaleId = @DefaultLocaleId OR LocaleId = @LocaleId   
     
    INSERT INTO #TBL_AttributeValue (PimAttributeValueId   , PimAttributeId   , PimProductId  ,AttributeCode ,AttributeValue ,TypeOfData    
      ,PimAttributeValueLocaleId  ,LocaleId  , RowId ,PimAttributeDefaultValueId   )  
    SELECT TBLAV.PimAttributeValueId , TBLAV.PimAttributeId , PimProductId,AttributeCode,  
           CAST( ZPAVL.PimAttributeDefaultValueId AS VARCHAR(2000)),2 TypeOfData  
      ,ZPAVL.PimProductAttributeDefaultValueId PimAttributeValueLocaleId,LocaleId  
      ,COUNT(*)Over(Partition By TBLAV.PimProductId,PimAttributeId ORDER BY TBLAV.PimProductId,PimAttributeId  ) RowId  
      ,PimAttributeDefaultValueId  
    FROM ZnodePimProductAttributeDefaultValue  ZPAVL   
    INNER JOIN #TBL_AttributeValue1 TBLAV ON (TBLAV.PimAttributeValueId = ZPAVL.PimAttributeValueId)  
    WHERE LocaleId = @DefaultLocaleId OR LocaleId = @LocaleId   
      
    INSERT INTO #TBL_AttributeValue (PimAttributeValueId   , PimAttributeId   , PimProductId  ,AttributeCode ,AttributeValue ,TypeOfData    
      ,PimAttributeValueLocaleId  ,LocaleId  , RowId   )  
    SELECT TBLAV.PimAttributeValueId , TBLAV.PimAttributeId , PimProductId,AttributeCode,CAST( ZPAVL.MediaId AS VARCHAR(2000)) ,3 TypeOfData  
      ,ZPAVL.PimProductAttributeMediaId PimAttributeValueLocaleId,ZPAVL.LocaleId,COUNT(*)Over(Partition By TBLAV.PimProductId,PimAttributeId ORDER BY TBLAV.PimProductId,PimAttributeId  ) RowId  
    FROM ZnodePimProductAttributeMedia  ZPAVL   
    INNER JOIN #TBL_AttributeValue1 TBLAV ON (TBLAV.PimAttributeValueId = ZPAVL.PimAttributeValueId)  
    WHERE LocaleId = @DefaultLocaleId OR LocaleId = @LocaleId   
      
      
    ;WITH Cte_GetDefaultData   
    AS   
    (  
     SELECT ZPPADV.PimAttributeValueId   
     ,ZPADVL.AttributeDefaultValue AttributeDefaultValue ,ZPADVL.localeID LocaleId ,ZPPADV.PimProductId   
     ,ZPPADV.AttributeCode,ZPPADV.PimAttributeId,TEY.AttributeDefaultValueCode    
     FROM #TBL_AttributeValue ZPPADV   
     INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimAttributeValueId = ZPPADV.PimAttributeValueId)  
     INNER JOIN ZnodePimAttributeDefaultValue TEY ON (TEY.PimAttributeDefaultValueId  = ZPPADV.PimAttributeDefaultValueId )  
     INNER JOIN ZnodePimAttributeDefaultValuelocale ZPADVL ON (ZPADVL.PimAttributeDefaultValueId = TEY.PimAttributeDefaultValueId )  
     WHERE ZPADVL.localeID  IN (@LocaleId,@DefaultLocaleId)  
     AND TypeOfData = 2   
     AND ZPPADV.LocaleId  = CASE WHEN RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END   
      
    )  
      
    ,Cte_AttributeValueDefault AS   
    (  
     SELECT AttributeDefaultValue  ,PimProductId ,AttributeCode,PimAttributeId ,AttributeDefaultValueCode   
     FROM Cte_GetDefaultData   
     WHERE LocaleId = @LocaleId   
     UNION    
     SELECT  AttributeDefaultValue  ,PimProductId ,AttributeCode,PimAttributeId,AttributeDefaultValueCode   
     FROM Cte_GetDefaultData a   
     WHERE LocaleId = @DefaultLocaleId   
     AND NOT EXISTS (SELECT TOP 1 1 FROM Cte_GetDefaultData b WHERE b.PimAttributeValueId = a.PimAttributeValueId AND b.LocaleId= @LocaleId)  
        )  
     
    SELECT  PimProductId, AttributeValue,  AttributeCode,  PimAttributeId, NULL AttributeDefaultValue    
    FROM  #TBL_AttributeValue   
             WHERE LocaleId  = CASE WHEN RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END   
    AND TypeOfData = 1    
  
    UNION ALL   
  
    SELECT DISTINCT PimProductId,  
            SUBSTRING ((SELECT ','+[dbo].[Fn_GetMediaThumbnailMediaPath]( zm.PATH) FROM ZnodeMedia ZM WHERE ZM.MediaId = TBLAV.AttributeValue   
      FOR XML PATH (''), TYPE).value('.', 'varchar(Max)') ,2,4000)  ,AttributeCode,PimAttributeId, NULL AttributeDefaultValue  
    FROM #TBL_AttributeValue TBLAV   
    WHERE  LocaleId  = CASE WHEN RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END   
    AND TypeOfData = 3  
    -- GROUP BY PimAttributeId,PimProductId,AttributeCode  
   UNION ALL  
   SELECT DISTINCT PimProductId,
			 SUBSTRING ((SELECT ',' + AttributeDefaultValue 
													FROM Cte_AttributeValueDefault CTEAI 
													WHERE CTEAI.PimProductId = CTEA.PimProductId 
													AND CTEAI.PimAttributeId = CTEA.PimAttributeId
													FOR XML PATH ('')   ),2,4000) AttributeDefaultValue,AttributeCode ,PimAttributeId
			 ,SUBSTRING ((SELECT ',' + AttributeDefaultValueCode 
													FROM Cte_AttributeValueDefault CTEAI1 
													WHERE CTEAI1.PimProductId = CTEA.PimProductId 
													AND CTEAI1.PimAttributeId = CTEA.PimAttributeId
													FOR XML PATH ('')   ),2,4000) AttributeDefaultValue
				
			FROM Cte_AttributeValueDefault  CTEA 
     
    
   END TRY  
         BEGIN CATCH  
    
      SELECT ERROR_MESSAGE()  
            DECLARE @Status BIT ;  
   SET @Status = 0;  
   
         END CATCH;  
     END;
GO



IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishSingleProduct')
BEGIN 
	DROP PROCEDURE Znode_GetPublishSingleProduct
END
GO
CREATE PROCEDURE [dbo].[Znode_GetPublishSingleProduct]
(
@PublishCatalogId INT = 0 
,@VersionId       VARCHAR(50) = 0 
,@PimProductId    TransferId Readonly 
,@UserId		  INT = 0 
,@TokenId nvarchar(max)= ''	
,@LocaleIds TransferId READONLY
,@PublishStateId INT = 0  
)
AS


--Declare @PimProductId TransferId 
--insert into @PimProductId  select 128 
-- EXEC [Znode_GetPublishSingleProduct]  @PublishCatalogId = 0 ,@VersionId= 0 ,@PimProductId =@PimProductId, @UserId=2 

BEGIN 
  
 SET NOCOUNT ON 

EXEC Znode_InsertUpdatePimAttributeXML 1 
EXEC Znode_InsertUpdateCustomeFieldXML 1
EXEC Znode_InsertUpdateAttributeDefaultValue 1 

 IF OBJECT_ID('tempdb..#Cte_BrandData') is not null
 BEGIN 
 DROP TABLE #Cte_BrandData
 END 

DECLARE @PimProductAttributeXML TABLE(PimAttributeXMLId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )
DECLARE @PimDefaultValueLocale  TABLE (PimAttributeDefaultXMLId INT  PRIMARY KEY ,PimAttributeDefaultValueId INT ,LocaleId INT ) 
DECLARE @ProductNamePimAttributeId INT = dbo.Fn_GetProductNameAttributeId(),@DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId(),@LocaleId INT = 0 
		,@SkuPimAttributeId  INT =  dbo.Fn_GetProductSKUAttributeId() , @IsActivePimAttributeId INT =  dbo.Fn_GetProductIsActiveAttributeId()
DECLARE @GetDate DATETIME =dbo.Fn_GetDate()
DECLARE @TBL_LocaleId  TABLE (RowId INT IDENTITY(1,1) PRIMARY KEY  , LocaleId INT )

			INSERT INTO @TBL_LocaleId (LocaleId)
			SELECT  LocaleId
			FROM ZnodeLocale MT
			WHERE IsActive = 1
			AND (EXISTS (SELECT TOP 1 1  FROM @LocaleIds RT WHERE RT.Id = MT.LocaleId )
			OR NOT EXISTS (SELECT TOP 1 1 FROM @LocaleIds )) 


DECLARE @Counter INT =1 ,@maxCountId INT = (SELECT max(RowId) FROM @TBL_LocaleId ) 

 DECLARE @TBL_PublishCatalogId TABLE(PublishCatalogId INT,PublishProductId INT,PimProductId  INT   , VersionId INT ,LocaleId INT  )

			 INSERT INTO @TBL_PublishCatalogId 
			 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId, MAX(PublishCatalogLogId) ,LocaleId
			 FROM ZnodePublishProduct ZPP 
			 INNER JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
			 WHERE (EXISTS (SELECT TOP 1 1 FROM @PimProductId SP WHERE SP.Id = ZPP.PimProductId  AND  (@PublishCatalogId IS NULL OR @PublishCatalogId = 0 ))
			 OR  (ZPP.PublishCatalogId = @PublishCatalogId ))
			 AND IsCatalogPublished =1
			 AND ZPCP.PublishStateId = @PublishStateId 
			 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,LocaleId
		
             DECLARE   @TBL_ZnodeTempPublish TABLE (PimProductId INT , AttributeCode VARCHAR(300) ,AttributeValue NVARCHAR(max) ) 			
			 DECLARE @TBL_AttributeVAlueLocale TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT,LocaleId INT ,AttributeValue Nvarchar(1000) )

			 INSERT INTO @TBL_AttributeVAlueLocale (PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId ,LocaleId ,AttributeValue )
			 SELECT VIR.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId,VIR.LocaleId, ''
			 FROM View_LoadManageProductInternal VIR
			 INNER JOIN @TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = VIR.PimProductId)
			 UNION ALL 
			 SELECT VIR.PimProductId,PimAttributeId,PimProductAttributeMediaId,ZPDE.LocaleId , ''
			 FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimProductAttributeMedia ZPDE ON (ZPDE.PimAttributeValueId = VIR.PimAttributeValueId )
			 WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
			 Union All 
			 SELECT VIR.PimProductId,VIR.PimAttributeId,ZPDVL.PimAttributeDefaultValueLocaleId,ZPDVL.LocaleId ,ZPDVL.AttributeDefaultValue
			   FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1 )
			 INNER JOIN ZnodePimAttributeDefaultValue ZPADV ON ZPADV.PimAttributeId = D.PimAttributeId
			 INNER JOIN ZnodePimAttributeDefaultValueLocale ZPDVL   on (ZPADV.PimAttributeDefaultValueId = ZPDVL.PimAttributeDefaultValueId)
			 --INNER JOIN ZnodePimProductAttributeDefaultValue ZPDVP ON (ZPDVP.PimAttributeValueId = VIR.PimAttributeValueId AND ZPADV.PimAttributeDefaultValueId = ZPDVP.PimAttributeDefaultValueId )
			 WHERE ( ZPDVL.LocaleId = @DefaultLocaleId OR ZPDVL.LocaleId = @LocaleId )
			 AND EXISTS(SELECT TOP 1 1 FROM @TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
			 Union All 
			 SELECT VIR.PimProductId,VIR.PimAttributeId,'','' ,''
			 FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1 )
			 WHERE  EXISTS(SELECT TOP 1 1 FROM @TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )



	

WHILE @Counter <= @maxCountId
BEGIN
 SET @LocaleId = (SELECT TOP 1 LocaleId FROM @TBL_LocaleId WHERE RowId = @Counter)
 
  INSERT INTO @PimProductAttributeXML 
  SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeXML
  WHERE LocaleId = @LocaleId

  INSERT INTO @PimProductAttributeXML 
  SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeXML ZPAX
  WHERE ZPAX.LocaleId = @DefaultLocaleId  
  AND NOT EXISTS (SELECT TOP 1 1 FROM @PimProductAttributeXML ZPAXI WHERE ZPAXI.PimAttributeId = ZPAX.PimAttributeId )

  INSERT INTO @PimDefaultValueLocale
  SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultXML
  WHERE localeId = @LocaleId

  INSERT INTO @PimDefaultValueLocale 
   SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultXML ZX
  WHERE localeId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM @PimDefaultValueLocale TRTR WHERE TRTR.PimAttributeDefaultValueId = ZX.PimAttributeDefaultValueId)
  
 
  DECLARE @TBL_AttributeVAlue TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT  )
  DECLARE @TBL_CustomeFiled TABLE (PimCustomeFieldXMLId INT ,CustomCode VARCHAR(300),PimProductId INT ,LocaleId INT )

  INSERT INTO @TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,RTR.PimProductId ,RTR.LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML RTR 
  INNER JOIN @TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = RTR.PimProductId)
  WHERE RTR.LocaleId = @LocaleId
 

  INSERT INTO @TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,ITR.PimProductId ,ITR.LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML ITR
  INNER JOIN @TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ITR.PimProductId)
  WHERE ITR.LocaleId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM @TBL_CustomeFiled TBL  WHERE ITR.CustomCode = TBL.CustomCode AND ITR.PimProductId = TBL.PimProductId)
  

    INSERT INTO @TBL_AttributeVAlue (PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId )
    SELECT PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId
	FROM @TBL_AttributeVAlueLocale
    WHERE LocaleId = @LocaleId

    
	INSERT INTO @TBL_AttributeVAlue(PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId )
	SELECT VI.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId
	FROM @TBL_AttributeVAlueLocale VI 
    WHERE VI.LocaleId = @DefaultLocaleId 
	AND NOT EXISTS (SELECT TOP 1 1 FROM @TBL_AttributeVAlue  CTE WHERE CTE.PimProductId = VI.PimProductId AND CTE.PimAttributeId = VI.PimAttributeId )
 
INSERT INTO @TBL_ZnodeTempPublish  
SELECT  a.PimProductId,a.AttributeCode , '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(a.AttributeValue,'')+'</AttributeValues> </AttributeEntity>  </Attributes>'  AttributeValue
FROM View_LoadManageProductInternal a 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = a.PimAttributeId )
INNER JOIN @PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
INNER JOIN @TBL_AttributeValue CTE ON (Cte.PimAttributeId = a.PimAttributeId AND Cte.ZnodePimAttributeValueLocaleId = a.ZnodePimAttributeValueLocaleId)
UNION ALL 
SELECT  a.PimProductId,c.AttributeCode , '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+TAVL.AttributeValue+'</AttributeValues> </AttributeEntity>  </Attributes>'  AttributeValue
FROM ZnodePimAttributeValue  a 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = a.PimAttributeId )
INNER JOIN @PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
INNER JOIN ZnodePImAttribute ZPA  ON (ZPA.PimAttributeId = a.PimAttributeId)
INNER JOIN @TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = a.PimProductId)
Inner JOIN @TBL_AttributeVAlueLocale TAVL ON  (c.PimAttributeId = TAVL.PimAttributeId  and ZPP.PimProductId = TAVL.PimProductId )
WHERE ZPA.IsPersonalizable = 1 
AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodePimAttributeValueLocale q WHERE q.PimAttributeValueId = a.PimAttributeValueId) 



UNION ALL 
SELECT THB.PimProductId,THB.CustomCode,'<Attributes><AttributeEntity>'+CustomeFiledXML +'</AttributeEntity></Attributes>' 
FROM ZnodePimCustomeFieldXML THB 
INNER JOIN @TBL_CustomeFiled TRTE ON (TRTE.PimCustomeFieldXMLId = THB.PimCustomeFieldXMLId)
UNION ALL 
SELECT ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues></AttributeValues>'+'<SelectValues>'+
			   STUFF((
                    SELECT '  '+ DefaultValueXML  FROM ZnodePimAttributeDefaultXML AA 
				 INNER JOIN @PimDefaultValueLocale GH ON (GH.PimAttributeDefaultXMLId = AA.PimAttributeDefaultXMLId)
				 INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId )
				 WHERE (ZPADV.PimAttributeValueId = ZPAV.PimAttributeValueId)
    FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</SelectValues> </AttributeEntity></Attributes>' AttributeValue
 
FROM ZnodePimAttributeValue ZPAV  With (NoLock)
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN @PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
INNER JOIN @TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
UNION ALL 
SELECT DISTINCT  ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+SUBSTRING((SELECT DISTINCT ',' +MediaPath 
	FROM ZnodePimProductAttributeMedia ZPPG
	INNER JOIN  @TBL_AttributeVAlue TBLV ON (TBLV.PimProductId=  ZPAV.PimProductId AND TBLV.PimAttributeId = ZPAV.PimAttributeId )
    WHERE ZPPG.PimProductAttributeMediaId = TBLV.ZnodePimAttributeValueLocaleId
	FOR XML PATH ('')
 ),2,4000)+'</AttributeValues></AttributeEntity></Attributes>' AttributeValue
 	 
FROM ZnodePimAttributeValue ZPAV 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN @PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
INNER JOIN @TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeMedia ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
UNION ALL 
SELECT ZPLP.PimParentProductId ,c.AttributeCode, '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(SUBSTRING((SELECT ','+CAST(PublishProductId AS VARCHAR(50)) 
							 FROM @TBL_PublishCatalogId ZPPI 
							 INNER JOIN ZnodePimLinkProductDetail ZPLPI ON (ZPLPI.PimProductId = ZPPI.PimProductId)
							 WHERE ZPLPI.PimParentProductId = ZPLP.PimParentProductId
							 AND ZPLPI.PimAttributeId   = ZPLP.PimAttributeId
							 FOR XML PATH ('') ),2,4000),'')+'</AttributeValues></AttributeEntity></Attributes>'   AttributeValue 
							
FROM ZnodePimLinkProductDetail ZPLP 
INNER JOIN @TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPLP.PimParentProductId)
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPLP.PimAttributeId )
INNER JOIN @PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
GROUP BY ZPLP.PimParentProductId , ZPP.PublishProductId  ,ZPLP.PimAttributeId,c.AttributeCode,c.AttributeXML,ZPP.PublishCatalogId

UNION ALL 
SELECT ZPAV.PimProductId,'DefaultSkuForConfigurable' ,'<Attributes><AttributeEntity>'+REPLACE(REPLACE (c.AttributeXML,'ProductType','DefaultSkuForConfigurable'),'Product Type','Default Sku For Configurable')+'<AttributeValues>'+
 (SELECT TOP 1 AttributeValue FROM View_LoadManageProductInternal ad 
 INNER JOIN ZnodePimProductTypeAssociation yt ON (yt.PimProductId = ad.PimProductId)
 WHERE Ad.AttributeCode = 'SKU'
 AND yt.PimParentProductId = ZPAV.PimProductId
ORDER BY yt.DisplayOrder , yt.PimProductTypeAssociationId ASC)
+'</AttributeValues></AttributeEntity></Attributes>' AttributeValue 
FROM ZnodePimAttributeValue ZPAV  
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN @TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL 
INNER JOIN ZnodePimAttributeDefaultValue dr ON (dr.PimAttributeDefaultValueId = ZPADVL.PimAttributeDefaultValueId)
 WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId
 AND dr.AttributeDefaultValueCode= 'ConfigurableProduct' 
)
AND EXISTS (select * from @PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)
AND c.AttributeCode = 'ProductType' 

---------brand details 
CREATE TABLE #Cte_BrandData (PimProductId int,BrandXML nvarchar(max))

INSERT INTO #Cte_BrandData ( PimProductId, BrandXML )
SELECT  DISTINCT ZBP.PimProductId,'<Brands><BrandEntity><BrandId>'+CAST(ZBD.BrandId AS VARCHAR(50))+'</BrandId><BrandCode>'+ZBD.BrandCode+'</BrandCode><BrandName>'+ZBDL.BrandName+'</BrandName></BrandEntity></Brands>' as BrandXML					   		   
FROM [ZnodeBrandDetails] AS ZBD
INNER JOIN ZnodeBrandDetaillocale ZBDL ON ZBD.BrandId = ZBDL.BrandId
INNER JOIN [ZnodeBrandProduct] AS ZBP ON ZBD.BrandId = ZBP.BrandId

 DELETE FROM ZnodePublishedXML WHERE  IsProductXML = 1  AND LocaleId = @localeId 
								AND  EXISTS ( SELECT TOP 1 1 FROM  @TBL_PublishCatalogId  TBL WHERE TBL.VersionId  = ZnodePublishedXML.PublishCatalogLogId AND TBL.PublishProductId = ZnodePublishedXML.PublishedId)


;WITH CTE AS
(
SELECT ROW_NUMBER() OVER (PARTITION BY PimProductId	,AttributeCode
ORDER BY PimProductId	,AttributeCode) AS RN
FROM @TBL_ZnodeTempPublish
)

DELETE FROM CTE WHERE RN<>1


 

  
 MERGE INTO ZnodePublishedXML TARGET 
 USING (
 SELECT zpp.PublishProductId,zpp.VersionId ,'<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'+CAST(ISNULL(ZPC.PublishCategoryId,'')  AS VARCHAR(50))+'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKU><SKULower>'+CAST(ISNULL((SELECT ''+Lower(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +'</IsParentProducts><CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000)) +'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
					FROM ZnodeProfileCatalog ZPFC 
					INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
					WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+'</TempProfileIds><ProductIndex>'+CAST(ROW_NUMBER()Over(Partition BY zpp.PublishProductId Order BY ISNULL(ZPC.PublishCategoryId,'0') ) AS VARCHAr(100))+'</ProductIndex><IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
ISNULL(STUFF(( SELECT '  '+ BrandXML  FROM #Cte_BrandData BD WHERE BD.PimProductId = ZPP.PimProductId   
				FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, ''),'')+
STUFF(( SELECT '  '+ AttributeValue  FROM @TBL_ZnodeTempPublish TY WHERE TY.PimProductId = ZPP.PimProductId   
    FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>' xmlvalue
FROM  @TBL_PublishCatalogId zpp
INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
LEFT JOIN ZnodePublishCategory ZPC ON (ZPC.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId)
LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId AND  ZPCCF.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId)
LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ZPCP.PublishCategoryId AND ZPCD.LocaleId = @LocaleId )
WHERE ZPPDFG.LocaleId = @LocaleId
AND zpp.LocaleId = @LocaleId
) SOURCE 
ON (
     TARGET.PublishCatalogLogId = SOURCE.versionId 
	 AND TARGET.PublishedId = SOURCE.PublishProductId
	 AND TARGET.IsProductXML = 1 
	 AND TARGET.LocaleId = @localeId 
)
WHEN MATCHED THEN 
UPDATE 
SET  PublishedXML = xmlvalue
   , ModifiedBy = @userId 
   ,ModifiedDate = @GetDate
   ,ImportedGuId = @TokenId 
WHEN NOT MATCHED THEN 
INSERT (PublishCatalogLogId
,PublishedId
,PublishedXML
,IsProductXML
,LocaleId
,CreatedBy
,CreatedDate
,ModifiedBy
,ModifiedDate,ImportedGuId)

VALUES (SOURCE.versionid , Source.publishProductid,Source.xmlvalue,1,@localeid,@userId,@getDate,@userId,@getDate,@TokenId);

DELETE FROM @TBL_ZnodeTempPublish

DELETE FROM @PimProductAttributeXML
DELETE FROM @TBL_CustomeFiled
DELETE FROM @PimDefaultValueLocale
DELETE FROM @TBL_AttributeValue 

 IF OBJECT_ID('tempdb..#Cte_BrandData') is not null
 BEGIN 
 DROP TABLE #Cte_BrandData
 END 

SET @Counter = @counter + 1 
END

END
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishProductAttribute')
BEGIN 
	DROP PROCEDURE Znode_GetPublishProductAttribute
END
GO
CREATE PROCEDURE [dbo].[Znode_GetPublishProductAttribute]
(@PublishCatalogId INT)
AS 
/*
     Summary :- This Procedure is used to get the publish Product attribute details for a PublishCatalogId 
     Unit Testing 
     EXEC Znode_GetPublishProductAttribute 5
	 select * from znodepublishcatalog
     
*/
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;

			SELECT DISTINCT ZPP.PublishCatalogId ZnodeCatalogId,AttributeCode,AttributeTypeName,IsComparable,IsHtmlTags,IsFacets,IsUseInSearch,IsPersonalizable,                   
			IsConfigurable , ZPAL.AttributeName , ZPAL.LocaleId 
			,ZPA.DisplayOrder,ZPADVL.PimAttributeDefaultValueId, ZPAV.PimAttributeValueId
			INTO #AttributeValueFacet
			FROM ZnodePimAttribute ZPA 
			INNER JOIN ZnodeAttributeType ZAT ON(ZAT.AttributeTypeId = ZPA.AttributeTypeId)
			INNER JOIN ZnodePimAttributeLocale ZPAL on ZPA.PimAttributeId = ZPAL.PimAttributeId
			INNER JOIN ZnodePimFrontendProperties ZPFP ON(ZPFP.PimAttributeId = ZPA.PimAttributeId)
			INNER JOIN ZnodePimAttributeValue ZPAV ON(ZPAV.PimAttributeId = ZPA.PimAttributeId)
			INNER JOIN ZnodePublishProduct ZPP ON(ZPP.PimProductId = ZPAV.PimProductId) 
			LEFT JOIN ZnodePimProductAttributeDefaultValue ZPADVL 
			ON (ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
			WHERE PublishCatalogId = @PublishCatalogId;

            SELECT DISTINCT ZPA.ZnodeCatalogId,AttributeCode,AttributeTypeName,IsComparable,IsHtmlTags,IsFacets,IsUseInSearch,IsPersonalizable,                   
			IsConfigurable , ZPA.AttributeName , ZPA.LocaleId 
			,ZPA.DisplayOrder,ZPDAV.DisplayOrder AS DefaultValueDisplayOrder, ZPDAV.AttributeDefaultValueCode AS AttributeDefaultValue
			FROM #AttributeValueFacet ZPA 
			INNER JOIN ZnodePimAttributeDefaultValue ZPDAV ON (ZPDAV.PimAttributeDefaultValueId = ZPA.PimAttributeDefaultValueId)
			INNER JOIN ZnodePimAttributeDefaultValueLocale ZPDAVL ON (ZPDAVL.PimAttributeDefaultValueId = ZPDAV.PimAttributeDefaultValueId)
		
		    UNION ALL
			SELECT DISTINCT ZPA.ZnodeCatalogId,AttributeCode,AttributeTypeName,IsComparable,IsHtmlTags,IsFacets,IsUseInSearch,IsPersonalizable,                   
			IsConfigurable , ZPA.AttributeName , ZPA.LocaleId 
			,ZPA.DisplayOrder,NULL AS DefaultValueDisplayOrder, NULL AS AttributeDefaultValue
			FROM #AttributeValueFacet ZPA 
			INNER JOIN ZnodePimAttributeValueLocale ZPDAV ON (ZPDAV.PimAttributeValueId = ZPA.PimAttributeValueId)
			UNION ALL
			SELECT DISTINCT ZPA.ZnodeCatalogId,AttributeCode,AttributeTypeName,IsComparable,IsHtmlTags,IsFacets,IsUseInSearch,IsPersonalizable,                   
			IsConfigurable , ZPA.AttributeName , ZPA.LocaleId 
			,ZPA.DisplayOrder,NULL AS DefaultValueDisplayOrder, NULL AS AttributeDefaultValue
			FROM #AttributeValueFacet ZPA 
			INNER JOIN ZnodePimProductAttributeTextAreaValue ZPDAV ON (ZPDAV.PimAttributeValueId = ZPA.PimAttributeValueId)
			UNION ALL
			SELECT DISTINCT ZPA.ZnodeCatalogId,AttributeCode,AttributeTypeName,IsComparable,IsHtmlTags,IsFacets,IsUseInSearch,IsPersonalizable,                   
			IsConfigurable , ZPA.AttributeName , ZPA.LocaleId 
			,ZPA.DisplayOrder,NULL AS DefaultValueDisplayOrder, NULL AS AttributeDefaultValue
			FROM #AttributeValueFacet ZPA 
			INNER JOIN ZnodePimProductAttributeMedia ZPDAV ON (ZPDAV.PimAttributeValueId = ZPA.PimAttributeValueId)
			

         END TRY
         BEGIN CATCH
            DECLARE @Status BIT ;
			SET @Status = 0;
			DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(),
			 @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPublishProductAttribute @PublishCatalogId= '+CAST(@PublishCatalogId AS VARCHAR(10))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
			SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
			EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetPublishProductAttribute',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;

	 GO

	 update znodemenu set cssclassname  = 'z-diagnostics-status' where 
MenuName = 'Diagnostics Status' and ControllerName = 'Diagnostics'

GO


IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetCategoryFeedList')
BEGIN 
	DROP PROCEDURE Znode_GetCategoryFeedList
END
GO
CREATE PROCEDURE [dbo].[Znode_GetCategoryFeedList]
( @PortalId         NVARCHAR(MAX) = NULL,
  @LocaleId         INT,
  --will be used for CategoryId
  @CommaSeparatedId NVARCHAR(MAX) = NULL 
)
AS
/*
 Summary:This procedure is used to get effective keyword feeding of category list
 Unit Testing:
 EXEC Znode_GetCategoryFeedList 1 

*/

	BEGIN
	SET NOCOUNT ON;
	BEGIN TRY
		DECLARE @DefaultLocaleId INT= dbo.Fn_GetDefaultValue('Locale');

		DECLARE @TBL_DomainName TABLE
		(PortalId   INT,
		DomainName NVARCHAR(300),
		RowId      INT
		);

		DECLARE @TBL_PortalIds TABLE(PortalId INT);
		DECLARE @TBL_SEODetails TABLE
		(loc                   NVARCHAR(MAX),
		lastmod               DATETIME,
		[g:condition]         VARCHAR(100),
		[description]         NVARCHAR(MAX),
		[g:id]                INT,
		link                  VARCHAR(100),
		[g:identifier_exists] VARCHAR(200),
		DomainName            NVARCHAR(300),
		PortalId              INT,
		SEOCode               NVARCHAR(4000)
		);

		INSERT INTO @TBL_PortalIds(PortalId)
		SELECT Zp.PortalId
		FROM Znodeportal AS ZP
		INNER JOIN ZnodePortalCatalog AS ZPC ON(ZPC.PortalId = Zp.PortalId)
		INNER JOIN ZnodePublishCatalog AS ZPPC ON(ZPPC.PublishCatalogId = ZPC.PublishCatalogId)
		INNER JOIN ZnodePublishCategory AS ZPP ON(ZPP.PublishCatalogId = ZPPC.PublishCatalogId)
		WHERE EXISTS
			(
			SELECT TOP 1 1
			FROM DBO.Split(@PortalID, ',') AS Sp
			WHERE(CAST(sp.Item AS INT) = ZP.PortalId
			OR @PortalID = '0' )
			)
		GROUP BY Zp.PortalId;
	
		INSERT INTO @TBL_DomainName(PortalId,DomainName,RowId)
		SELECT ZD.PortalId,ZD.DomainName,    
		ROW_NUMBER() OVER(Partition BY ZD.DomainName,ZD.PortalId ORDER BY ZD.DomainName,ZD.PortalId) RowId                               
		FROM ZnodeDomain ZD
		WHERE EXISTS
			(
			SELECT TOP 1 1
			FROM @TBL_PortalIds TBP
			WHERE TBP.PortalId = ZD.PortalId
			)
		AND ApplicationType = 'Webstore'
		AND IsActive =1 ;

		
		;WITH Cte_SeoDetailsWithLocale
		AS (
			SELECT DISTINCT ZCSD.CMSSEODetailId,ZCSD.SEOURL AS loc,ZCSD.ModifiedDate AS lastmod,'new' AS [g:condition],
			ZCSDL.SEODescription AS [description],ZPCC.PublishCategoryId AS [g:id],'' AS link,'false' AS [g:identifier_exists],TBDN.DomainName,ZPC.PortalId,ISNULL(ZCSDL.LocaleId, @DefaultLocaleId) AS LocaleId ,ZCSD.SEOCode
			FROM ZnodePublishCategory AS ZPCC 
			LEFT JOIN ZnodePublishCatalog AS ZPPC ON(ZPPC.PublishCatalogId = ZPCC.PublishCatalogId)
			LEFT JOIN ZnodePortalCatalog AS ZPC ON(ZPC.PublishCatalogId = ZPPC.PublishCatalogId)
			LEFT JOIN ZnodePublishcategorydetail PCD ON (PCD.PublishCategoryId = ZPCC.PublishCategoryId)
			LEFT JOIN @TBL_DomainName AS TBDN ON(TBDN.RowId = 1 AND TBDN.PortalId = ZPC.PortalId)
			LEFT JOIN ZnodeCMSSEODetail AS ZCSD ON(PCD.CategoryCode = ZCSD.SEOCode AND ZPC.PortalId = ZCSD.PortalId
			AND EXISTS (SELECT TOP 1 1 FROM ZnodeCMSSEOType AS ZCST
			WHERE ZCST.CMSSEOTypeId = ZCSD.CMSSEOTypeId  AND ZCST.Name = 'Category')) 
			LEFT  JOIN ZnodeCMSSEODetailLocale AS ZCSDL ON(ZCSDL.CMSSEODetailId = ZCSD.CMSSEODetailId
			AND ZCSDL.LocaleId IN(@LocaleId, @DefaultLocaleId))
			WHERE EXISTS
					(
					SELECT TOP 1 1
					FROM @TBL_PortalIds TBP
					WHERE ZPC.PortalId = TBP.PortalId
					)
			AND EXISTS (SELECT TOP 1 1 FROM  dbo.split(@CommaSeparatedId,',' ) SP WHERE SP.Item = PCD.CategoryCode)
		),

		Cte_SeoDetailsWithFirstLocale
		AS (SELECT CMSSEODetailId,loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName
		,PortalId,LocaleId,SEOCode
		FROM Cte_SeoDetailsWithLocale
		WHERE LocaleId = @LocaleId),

		Cte_SeoDetailsWithDefaultLocale
		AS (SELECT CMSSEODetailId,loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName
		,PortalId,LocaleId,SEOCode
		FROM Cte_SeoDetailsWithFirstLocale
		UNION ALL
		SELECT CMSSEODetailId,loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName
		,PortalId,LocaleId,SEOCode
		FROM Cte_SeoDetailsWithLocale AS CTSDWL
		WHERE LocaleId = @DefaultLocaleId
		AND NOT EXISTS
		(
		SELECT TOP 1 1
		FROM Cte_SeoDetailsWithFirstLocale AS CTSDWDL
		WHERE CTSDWDL.CMSSEODetailId = CTSDWL.CMSSEODetailId
		))

		INSERT INTO @TBL_SEODetails (loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName
		,PortalId,SEOCode)
		SELECT loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,PortalId,SEOCode
		FROM Cte_SeoDetailsWithDefaultLocale;
		

		SELECT DISTINCT loc,lastmod,DomainName,MAX([g:id]) AS id,PortalId,b.PublishCategoryName AS Name,SEOCode
		FROM @TBL_SEODetails a
		INNER JOIN ZnodePublishCategoryDetail b ON(b.PublishCategoryId = a.[g:id] AND b.LOcaleId = @LocaleId)
		WHERE DomainName IS NOT NULL
		GROUP BY loc,lastmod,DomainName,PortalId,b.PublishCategoryName,SEOCode
		
		END TRY
		BEGIN CATCH
		DECLARE @Status BIT ;
		SET @Status = 0;
		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetCategoryFeedList @PortalId = '+@PortalId+',@LocaleId='+CAST(@LocaleId AS VARCHAR(10))+',@CommaSeparatedId='+@CommaSeparatedId+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
		SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		   
		EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_GetCategoryFeedList',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
		END CATCH;
     END;
	 GO

	 
UPDATE ZnodeMessage
SET MessageName = 'This file includes some duplicate records'
WHERE MessageCode = '53'  AND MessageType = 'Other'

GO
UPDATE ZnodeMessage
SET MessageName = 'Some mandatory values are missing in the file'
WHERE MessageCode = '8'  AND MessageType = 'Other'
GO
UPDATE ZnodeMessage
SET MessageName = 'This file includes some negative numeric inputs'
WHERE MessageCode = '4'  AND MessageType = 'Number'
GO
UPDATE ZnodeMessage
SET MessageName = 'Values other than one of the default values are present in the file'
WHERE MessageCode = '9'  AND MessageType = 'Other'
GO
UPDATE ZnodeMessage
SET MessageName = 'Some mandatory column names are missing in the file'
WHERE MessageCode = '14'  AND MessageType = 'Other'
GO
UPDATE ZnodeMessage
SET MessageName = 'This file includes some values which exceed their actual character length'
WHERE MessageCode = '44'  AND MessageType = 'Text'
GO
UPDATE ZnodeMessage
SET MessageName = 'Some required values are not in the alphanumeric format'
WHERE MessageCode = '50'  AND MessageType = 'Text'
GO
UPDATE ZnodeMessage
SET MessageName = 'Some required values are not in the alphanumeric format'
WHERE MessageCode = '50'  AND MessageType = 'Text'
GO
UPDATE ZnodeMessage
SET MessageName = 'Some data records available in the file already exists in the database'
WHERE MessageCode = '10'  AND MessageType = 'Other'
GO
UPDATE ZnodeMessage
SET MessageName = 'Some data records cannot be updated because of their unavailability in database'
WHERE MessageCode = '19'  AND MessageType = 'Number'
GO
UPDATE ZnodeMessage
SET MessageName = 'Some Parent SKU fields contain SKU of simple product'
WHERE MessageCode = '49'  AND MessageType = 'Text'
GO
UPDATE ZnodeMessage
SET MessageName = 'Some data records are not valid'
WHERE MessageCode = '35'  AND MessageType = 'Number'
GO
 UPDATE ZnodeMessage
SET MessageName = 'The input values of some Display Order fields should be greater than 0'
WHERE MessageCode = '17'  AND MessageType = 'Number'

GO

--import file

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportValidatePimProductData')
BEGIN 
	DROP PROCEDURE Znode_ImportValidatePimProductData
END
GO
CREATE PROCEDURE [dbo].[Znode_ImportValidatePimProductData]
(   @ImportHeadName     VARCHAR(200),
    @TableName          VARCHAR(200),
    @NewGUID            NVARCHAR(200),
    @TemplateId         INT,
    @UserId             INT,
    @LocaleId           INT           = 1,
    @IsCategory         INT           = 0,
    @DefaultFamilyId    INT           = 0,
    @ImportProcessLogId INT,
    @PriceListId        INT,
	@CountryCode VARCHAR(100) = '',
	@PimCatalogId         INT    = 0 ,
	@PortalId int = 0,
	@IsAccountAddress bit = 0 )
AS
     SET NOCOUNT ON;

/*
    Summary :   Import PimProduct / Price / Inventory / Category / Category Associated Data 
    Process :   Admin site will upload excel / csv file in database and create global temporary table
				Procedure Znode_ImportValidatePimProductData will validate data with attribute validation rule
				If datatype validation issue found in input daata will logged into table "ZnodeImportLog"
				If Data is correct and record count in table ZnodeImportLog will be 0 then process for import data into Base tables
				To import data call procedure "Znode_ImportPimProductData"
    		  
				SourceColumnName: CSV file column headers
				TargetColumnName: Attributecode from ZnodePimAttribute Table (Consider those Attributecodes configured with default family only)
*/

     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             --BEGIN TRAN TRN_ImportValidProductData;
             DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
             DECLARE @SQLQuery NVARCHAR(MAX), @AttributeTypeName NVARCHAR(10), @AttributeCode NVARCHAR(300), @AttributeId INT, @IsRequired BIT, @SourceColumnName NVARCHAR(600), @ControlName VARCHAR(300), @ValidationName VARCHAR(100), @SubValidationName VARCHAR(300), @ValidationValue VARCHAR(300), @RegExp VARCHAR(300), @CreateDateString NVARCHAR(300), @DefaultLocaleId INT, @ImportHeadId INT, @CheckedSourceColumn NVARCHAR(600)= '', @Status BIT= 0,
			    @CsvColumnString nvarchar(max),
				@FailedRecordCount BIGINT,
				@SuccessRecordCount BIGINT

             DECLARE @FamilyAttributeDetail TABLE
             (PimAttributeId       INT,
              AttributeTypeName    VARCHAR(300),
              AttributeCode        VARCHAR(300),
              SourceColumnName     NVARCHAR(600),
              IsRequired           BIT,
              PimAttributeFamilyId INT
             );
             DECLARE @AttributeDetail TABLE
             (PimAttributeId    INT,
              AttributeTypeName VARCHAR(300),
              AttributeCode     VARCHAR(300),
              SourceColumnName  NVARCHAR(600),
              IsRequired        BIT,
              ControlName       VARCHAR(300),
              ValidationName    VARCHAR(100),
              SubValidationName VARCHAR(300),
              ValidationValue   VARCHAR(300),
              RegExp            VARCHAR(300)
             );

			 --IF ('tempdb..#DefaultAttributeCode') IS NOT NULL
				--drop table #DefaultAttributeCode

			CREATE TABLE #DefaultAttributeCode
			(AttributeTypeName          VARCHAR(300),
			PimAttributeDefaultValueId INT,
			PimAttributeId             INT,
			AttributeDefaultValueCode  VARCHAR(100)
			);

			--SET @SQLQuery = 'Select * into _tempcustomer FROM  '+@TableName
   --          EXEC sys.sp_sqlexec  @SQLQuery;



			IF( @ImportHeadName = 'B2BCustomer' )
			BEGIN
				EXEC ZnodeB2BCustomerMapping @ImportHeadName = @ImportHeadName, @TableName = @TableName
			END
		
             DECLARE @GlobalTempTableColumns TABLE(ColumnName NVARCHAR);
             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM INFORMATION_SCHEMA.TABLES
                 WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#InvalidDefaultData'
             )
                 CREATE TABLE #InvalidDefaultData
                 (RowNumber  INT,
                  Value      NVARCHAR(MAX),
                  ColumnName NVARCHAR(600)
                 );
             ELSE
             DROP TABLE #InvalidDefaultData;
             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM INFORMATION_SCHEMA.TABLES
                 WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#GlobalTempTableColumns'
             )
                 BEGIN

                     SET @SQLQuery = 'SELECT Column_Name, '''+@ImportHeadName+''' AS ImportHeadName  from tempdb.INFORMATION_SCHEMA.COLUMNS	where table_name = object_name(object_id('''+@TableName+'''),
					(select database_id from sys.databases where name = ''tempdb''))';
                     CREATE TABLE #GlobalTempTableColumns
                     (ColumnName   NVARCHAR(MAX),
                      TypeOfImport NVARCHAR(100)
                     );
                     INSERT INTO #GlobalTempTableColumns
                     (ColumnName,
                      TypeOfImport
                     )
                     EXEC sys.sp_sqlexec
                          @SQLQuery;
                 END;
		  -- If Exists ( Select  count(1)  from #GlobalTempTableColumns GROUP BY ColumnName  Having count(1) > 1 )
		  -- Begin
			 --   INSERT INTO ZnodeImportLog(ErrorDescription,ColumnName,Data,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
    --               Select  46,ColumnName,'',@newGUID,@UserId,@GetDate,@UserId,@GetDate, @ImportProcessLogId  from #GlobalTempTableColumns GROUP BY ColumnName  Having count(1) > 1 
				
				----'Multiple occurance of column are not allow for'
		  -- END

             IF EXISTS
             (
                 SELECT TOP 1 1
                 FROM #GlobalTempTableColumns
                 WHERE ColumnName IN('PimCategoryId', 'PimProductId', 'RowNumber')
             )
                 BEGIN
                     INSERT INTO ZnodeImportLog
                     (ErrorDescription,
                      ColumnName,
                      Data,
                      GUID,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate,
                      ImportProcessLogId
                     )
                     VALUES
                     (43,
                      '',
                      '',
                      @newGUID,
                      @UserId,
                      @GetDate,
                      @UserId,
                      @GetDate,
                      @ImportProcessLogId
                     );
                 END;
             SET @DefaultLocaleId = dbo.Fn_GetDefaultLocaleId();
             --Remove old error log 
             --DELETE FROM ZnodeImportLog WHERE ImportProcessLogId in (select ImportProcessLogId  FROM ZnodeImportProcessLog  WHERE ImportTemplateId  = @TemplateId )
             --GUID = @NewGUID;
             --Delete FROM ZnodeImportProcessLog  WHERE ImportTemplateId  = @TemplateId 
		
             IF NOT EXISTS
             (
                 SELECT TOP 1 1  FROM ZnodeImportLog
                 WHERE Guid = @NewGUID
                       AND ErrorDescription IN(43, 42)
                 AND ImportProcessLogId = @ImportProcessLogId
             )
                 BEGIN
                     IF @ImportHeadName = 'Product'
                      BEGIN
						  IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
							  SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimProductId int null ';
						  ELSE 
							 SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimProductId int null Primary KEY CLUSTERED(RowNumber)';
						 
						  EXEC sys.sp_sqlexec @SQLQuery;
			         END;
                     ELSE
                     IF @ImportHeadName = 'Category'
                         BEGIN
							  IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimCategoryId int null ';
							  ElSE
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimCategoryId int null Primary KEY CLUSTERED(RowNumber) ';
						  
							  EXEC sys.sp_sqlexec @SQLQuery;
                         END;
                     ELSE
                         BEGIN
							IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1) ';
							Else 
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1) Primary KEY CLUSTERED(RowNumber)';
							
							EXEC sys.sp_sqlexec @SQLQuery;
                         END;;
                 END;
				
             --Generate new process for current import 
             --INSERT INTO ZnodeImportProcessLog(ImportTemplateId,Status,ProcessStartedDate,ProcessCompletedDate,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             --SELECT @TemplateId,dbo.Fn_GetImportStatus(0),@GetDate,NULL,@UserId,@GetDate,@UserId,@GetDate;
             --SET @ImportProcessLogId = @@IDENTITY;

             SET @CreateDateString = CONVERT(VARCHAR(100), @UserId)+','''+CONVERT(VARCHAR(100), @GetDate)+''','+CONVERT(VARCHAR(100), @UserId)+','''+CONVERT(VARCHAR(100), @GetDate)+''', '+CONVERT(VARCHAR(100), @ImportProcessLogId);

             SELECT TOP 1 @ImportHeadId = ImportHeadId FROM ZnodeImportTemplate WHERE ImportTemplateId = @TemplateId;
             IF @DefaultFamilyId = 0
                AND @ImportHeadName IN('Product', 'Category')
                 BEGIN 
                     --Get all default attribute values in attribute 
                     INSERT INTO @FamilyAttributeDetail
                     (PimAttributeId,
                      AttributeTypeName,
                      AttributeCode,
                      SourceColumnName,
                      IsRequired,
                      PimAttributeFamilyId
                     )
                     --Call Process to insert data of defeult family with source column name and target column name 
                     EXEC Znode_ImportGetTemplateDetails
                          @TemplateId = @TemplateId,
                          @IsValidationRules = 0,
                          @IsIncludeRespectiveFamily = 1,
                          @IsCategory = @IsCategory,
                          @DefaultFamilyId = @DefaultFamilyId;

					---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
					Delete FAD from @FamilyAttributeDetail FAD
					where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
					and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					               inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
                 END;
             ELSE
             IF @ImportHeadName IN('Product', 'Category')
                 BEGIN
                     --Get all default attribute values in attribute 
                     INSERT INTO @FamilyAttributeDetail
                     (PimAttributeId,
                      AttributeTypeName,
                      AttributeCode,
                      SourceColumnName,
                      IsRequired,
                      PimAttributeFamilyId
                     )
                     --Call Process to insert data of defeult family with source column name and target column name 
                     EXEC Znode_ImportGetTemplateDetails
                          @TemplateId = @TemplateId,
                          @IsValidationRules = 0,
                          @IsIncludeRespectiveFamily = 1,
                          @IsCategory = @IsCategory,
                          @DefaultFamilyId = @DefaultFamilyId;

					---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
					Delete FAD from @FamilyAttributeDetail FAD
					where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
					and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					               inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
                 END;      
             -- Check attributes are manditory and not provided with source table
		   	 
			if @TABLENAME	like '%tempdb..%'
				SET @SQLQuery = 'SELECT 42 AS ErrorDescription , SourceColumnName , '''' , '''+@NewGUID+''','+@CreateDateString+' from ZnodeImportTemplateMapping where ImportTemplateId = '+CONVERT(VARCHAR(100), @TemplateId)+' and ltrim(rtrim(SourceColumnName)) <> '''' AND ltrim(rtrim(SourceColumnName)) not in ( select isnull(Name ,'''') from tempdb.sys.columns where object_id = object_id('''+@TABLENAME+'''));';
			else 
				SET @SQLQuery = 'SELECT 42 AS ErrorDescription , SourceColumnName , '''' , '''+@NewGUID+''','+@CreateDateString+' from ZnodeImportTemplateMapping where ImportTemplateId = '+CONVERT(VARCHAR(100), @TemplateId)+' and ltrim(rtrim(SourceColumnName)) <> '''' AND ltrim(rtrim(SourceColumnName)) not in ( select isnull(Name ,'''') from sys.columns where object_id = object_id('''+@TABLENAME+'''));';
		 
			Declare @Tbl_CsvDynamicColulmns TABLE (ColumnName nvarchar(300), SequenceNumber int, DataType nvarchar(50),IsRequired bit )

			INSERT INTO @Tbl_CsvDynamicColulmns(ColumnName , SequenceNumber , DataType ,IsRequired)
			SELECT DISTINCT ZITM.SourceColumnName ,ZIAV.SequenceNumber, ZIAV.AttributeTypeName, ZIAV.IsRequired
			FROM ZnodeImportAttributeValidation ZIAV LEFT OUTER JOIN 
			ZnodeImportTemplate  ZIT ON ZIT.ImportHeadId =  ZIAV.ImportHeadId AND ZIT.ImportTemplateId  = @TemplateId
			LEFT OUTER JOIN ZnodeImportTemplateMapping  ZITM ON ZITM.ImportTemplateId = ZIT.ImportTemplateId  
			and ZIAV.AttributeCode = ZITM.TargetColumnName
			AND ZITM.ImportTemplateId  = @TemplateId
			WHERE ZIAV.ImportHeadId = @ImportHeadId --ORDER BY ZIAV.SequenceNumber

		    SELECT @CsvColumnString = SUBSTRING ((Select ',' +  ISNULL(ColumnName ,'NULL') from @Tbl_CsvDynamicColulmns ORDER BY SequenceNumber FOR XML PATH ('')),2,4000) 


     		INSERT INTO ZnodeImportLog(ErrorDescription, ColumnName, Data, GUID,CreatedBy, CreatedDate,  ModifiedBy,ModifiedDate,ImportProcessLogId
             )
             EXEC sys.sp_sqlexec  @SQLQuery;
             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM ZnodeImportLog
                 WHERE Guid = @NewGUID
                       AND ErrorDescription IN(43, 42)
                 AND ImportProcessLogId = @ImportProcessLogId
             )
                 BEGIN
                     --Get all default attribute values in attribute 
                     IF @ImportHeadName IN('Product', 'Category')
                         BEGIN
                             -- Check attributes are manditory and not provided with source table
                             INSERT INTO ZnodeImportLog
                             (ErrorDescription,
                              ColumnName,
                              Data,
                              GUID,
                              CreatedBy,
                              CreatedDate,
                              ModifiedBy,
                              ModifiedDate,
                              ImportProcessLogId
                             )
                                    SELECT '14' AS ErrorDescription,
                                           AttributeCode,
                                           '',
                                           @NewGUID,
                                           @UserId,
                                           @GetDate,
                                           @UserId,
                                           @GetDate,
                                           @ImportProcessLogId
                                    FROM @FamilyAttributeDetail
                                    WHERE ISNULL(SourceColumnName, '') = ''
                                          AND IsRequired = 1;  

                             -- Read all attribute details with their datatype
                             INSERT INTO @AttributeDetail
                             (PimAttributeId,
                              AttributeTypeName,
                              AttributeCode,
                              SourceColumnName,
                              IsRequired,
                              ControlName,
                              ValidationName,
                              SubValidationName,
                              ValidationValue,
                              RegExp
                             )
                             EXEC Znode_ImportGetTemplateDetails
                                  @TemplateId=@TemplateId,
								  @DefaultFamilyId=@DefaultFamilyId;

							---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
							Delete FAD from @AttributeDetail FAD
							where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
							and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
										   inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode) 

                             DELETE FROM @AttributeDetail
                             WHERE AttributeTypeName = 'Image'
                                   AND ValidationName <> 'IsAllowMultiUpload';
                             --IF NOT EXISTS
                             --(
                             --    SELECT TOP 1 1
                             --    FROM INFORMATION_SCHEMA.TABLES
                             --    WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#DefaultAttributeCode'
                             --)
                             --    BEGIN
                             --        CREATE TABLE #DefaultAttributeCode
                             --        (AttributeTypeName          VARCHAR(300),
                             --         PimAttributeDefaultValueId INT,
                             --         PimAttributeId             INT,
                             --         AttributeDefaultValueCode  VARCHAR(100)
                             --        );
                                     INSERT INTO #DefaultAttributeCode
                                     (AttributeTypeName,
                                      PimAttributeDefaultValueId,
                                      PimAttributeId,
                                      AttributeDefaultValueCode
                                     )
                                     --Call Process to insert default data value 
                                     EXEC Znode_ImportGetPimAttributeDefaultValue;

                                     DELETE FROM #DefaultAttributeCode
                                     WHERE AttributeTypeName = 'Yes/No';
                             --    END;
                             --ELSE
                             --    BEGIN
                             --        DROP TABLE #DefaultAttributeCode;
                             --    END;
                         END;
                     ELSE
                         BEGIN
					
					
                             --Read all attribute details with their datatype
                             INSERT INTO @AttributeDetail
                             (AttributeTypeName,
                              AttributeCode,
                              SourceColumnName,
                              IsRequired,
                              ControlName,
                              ValidationName,
                              SubValidationName,
                              ValidationValue,
                              RegExp
                             )
                             EXEC [Znode_ImportGetOtherTemplateDetails]
                                  @TemplateId = @TemplateId,
                                  @ImportHeadId = @ImportHeadId;

							IF @ImportHeadName IN('B2BCustomer')
							BEGIN

								INSERT INTO @AttributeDetail
								 (PimAttributeId,
								 AttributeTypeName,
								  AttributeCode,
								  SourceColumnName,
								  IsRequired,
								  ControlName,
								  ValidationName,
								  SubValidationName,
								  ValidationValue,
								  RegExp
								 )
								 EXEC [Znode_ImportGetGlobalTemplateDetails]
									  @TemplateId = @TemplateId,
									  @ImportHeadId = @ImportHeadId;

								
								INSERT INTO #DefaultAttributeCode
								(AttributeTypeName,
								PimAttributeDefaultValueId,
								PimAttributeId,
								AttributeDefaultValueCode
								)
								--Call Process to insert default data value 
								EXEC Znode_ImportGetGlobalAttributeDefaultValue;

								DELETE FROM #DefaultAttributeCode
								WHERE AttributeTypeName = 'Yes/No';

							END
						
                             --Check attributes are not mapped with any family of Pim Product
                             INSERT INTO ZnodeImportLog
                             (ErrorDescription,
                              ColumnName,
                              Data,
                              GUID,
                              CreatedBy,
                              CreatedDate,
                              ModifiedBy,
                              ModifiedDate,
                              ImportProcessLogId
                             )
                                    SELECT DISTINCT
                                           '14' AS ErrorDescription,
                                           AttributeCode,
                                           '',
                                           @NewGUID,
                                           @UserId,
                                           @GetDate,
                                           @UserId,
                                           @GetDate,
                                           @ImportProcessLogId
                                    FROM @AttributeDetail
                                    WHERE ISNULL(SourceColumnName, '') = ''   AND IsRequired = 1;  ;

                         END;
						
                     --	Check attributes are not mapped with (Default / Other) family of Pim Product
                     --	INSERT INTO ZnodeImportLog ( ErrorDescription , ColumnName , Data , GUID , CreatedBy , CreatedDate , ModifiedBy , ModifiedDate , ImportProcessLogId)
                     --	SELECT '1' AS ErrorDescription , SourceColumnName , '' , @NewGUID , @UserId , @GetDate , @UserId , @GetDate , @ImportProcessLogId
                     --	FROM @AttributeDetail WHERE PimAttributeId NOT IN ( SELECT zpfgm.PimAttributeId FROM dbo.ZnodePimFamilyGroupMapper AS zpfgm);
                     --	Verify data in global temporary table (column wise)
					
                     DECLARE Cr_Attribute CURSOR LOCAL FAST_FORWARD
                     FOR SELECT PimAttributeId,
                                AttributeTypeName,
                                AttributeCode,
                                IsRequired,
                                SourceColumnName,
                                ControlName,
                                ValidationName,
                                SubValidationName,
                                ValidationValue,
                                RegExp
                         FROM @AttributeDetail
                         WHERE ISNULL(SourceColumnName, '') <> '';
                     OPEN Cr_Attribute;
                     FETCH NEXT FROM Cr_Attribute INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @ControlName, @ValidationName, @SubValidationName, @ValidationValue, @RegExp;
                     WHILE @@FETCH_STATUS = 0
                         BEGIN
				             IF @AttributeTypeName = 'Number'
                                 BEGIN
							      EXEC Znode_ImportValidateNumber
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @ImportHeadId = @ImportHeadId,
                                          @ImportProcessLogId = @ImportProcessLogId;
                                 END;
							 -- Check invalid date
							
                             IF @AttributeTypeName = 'Date'
                                 BEGIN
                                     EXEC Znode_ImportValidateDate
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @ImportHeadId = @ImportHeadId,
                                          @ImportProcessLogId = @ImportProcessLogId;
                                 END;
							 -- Check Manditory Data
		 					 IF @IsRequired = 1 AND @CheckedSourceColumn <> @SourceColumnName
								BEGIN
									SET @CheckedSourceColumn = @SourceColumnName;
									EXEC Znode_ImportValidateManditoryData
									@TableName = @TableName,
									@SourceColumnName = @SourceColumnName,
									@CreateDateString = @CreateDateString,
									@ValidationName = @ValidationName,
									@ControlName = @ControlName,
									@ValidationValue = @ValidationValue,
									@NewGUID = @NewGUID,
									@ImportHeadId = @ImportHeadId;
								END;
							 --END 
							
                             IF @AttributeTypeName = 'Text'
                                 BEGIN
								 
						              EXEC Znode_ImportValidateManditoryText
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @LocaleId = @LocaleId,
                                          @DefaultLocaleId = @DefaultLocaleId,
                                          @AttributeId = @AttributeId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @ImportHeadId = @ImportHeadId;
                                 END;
                             IF @AttributeTypeName = 'Image'
                                 BEGIN
                                     EXEC Znode_ImportValidateImageData
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @LocaleId = @LocaleId,
                                          @DefaultLocaleId = @DefaultLocaleId,
                                          @AttributeId = @AttributeId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @ImportHeadId = @ImportHeadId;
                                 END;
                             --Check Default data value is valid 
                             IF @ImportHeadName IN('Product', 'Category','B2BCustomer')
                                 BEGIN
                                     IF @AttributeId IN
                                     (
                                         SELECT PimAttributeId
                                         FROM #DefaultAttributeCode
                                     )
                                         BEGIN
							
                                                   ---Verify Image file is exists in media table or not 
                                             SET @SQLQuery = ' INSERT INTO #InvalidDefaultData (RowNumber, Value, ColumnName) 
                                             SELECT ROWNUMBER , (Select TOP 1 Item from dbo.split(' + @SourceColumnName + ','','')  SP WHERE NOT EXISTS 
                                             (Select ToP 1 1 FROM #DefaultAttributeCode DAC WHERE 
                                              DAC.AttributeTypeName <> ''Yes/No'' AND DAC.AttributeDefaultValueCode IS NOT NULL AND DAC.PimAttributeId = 
                                             ' + CONVERT(VARCHAR(100), @AttributeId) + ' AND ltrim(rtrim(SP.Item) ) = DAC.AttributeDefaultValueCode
                                             )), ''' + @SourceColumnName + ''' as [ColumnName]  FROM ' + @TableName
                                             + ' Where ISnull(' + @SourceColumnName +  ','''') <> '''''

						
                                             EXEC sys.sp_sqlexec @SQLQuery;
                                             -- Check Invalid Image 
                                             
											 SET @SQLQuery = 'SELECT ''9 '' ErrorDescription,'''+@SourceColumnName+''' as [ColumnName], 
                                             Value AS  AttributeValue,RowNumber ,'''+@NewGUID+''',  '+@CreateDateString+' FROM #InvalidDefaultData Where Value IS NOT NULL'
                                             INSERT INTO ZnodeImportLog (ErrorDescription, ColumnName, Data, RowNumber, GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
                                             EXEC sys.sp_sqlexec @SQLQuery;

											 Delete from #InvalidDefaultData

       
                                         END;
                                 END;
							
                             FETCH NEXT FROM Cr_Attribute INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @ControlName, @ValidationName, @SubValidationName, @ValidationValue, @RegExp;
                         END;
                     CLOSE Cr_Attribute;
                     DEALLOCATE Cr_Attribute;
                     --SELECT top 1 1 FROM @FamilyAttributeDetail where  iSNULL(SourceColumnName,'') = ''  and IsRequired = 1
                 END;
             

			  
------------------------------------------------------------------------------------------
		 Declare @SQLQueryNew NVARCHAR(4000)
		 Declare @SourceColumnNameProduct nvarchar(4000) 
         IF @ImportHeadName IN('Product','Pricing','ProductAssociation','Inventory')
		 BEGIN
		   	 
		 SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'SKU'
		 AND ImportTemplateId = @TemplateId


			SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  SKU - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;			
		END
		ELSE IF @ImportHeadName IN('ProductAttribute')
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'AttributeCode'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  Attribute - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'ZipCode'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'ZIP'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  ZIPCode - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'Category'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'CategoryCode'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  CategoryCode - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'CategoryAssociation'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'CategoryName'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  CategoryName - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;

		END
		ELSE IF @ImportHeadName IN ('Customer','CustomerAddress')
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'UserName'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  UserName - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'SEODetails'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'Code'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  Code - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
	-------------------------------------------------------------------------------------------------------------
	
	--DECLARE @SQLLOG NVARCHAR(MAX)

	--SET @SQLLOG = '

	--SELECT TBL.*,ZM.MessageName AS ErrorDescription INTO  tempdb..[##ImportProcessLog_'+@NewGUID+ ']
	--FROM '+@TableName+' TBL
	--INNER JOIN ZnodeImportLog ZILL ON (TBL.Rownumber = ZILL.Rownumber)
	--INNER JOIN Znodemessage ZM ON (ZM.MessageCode = ZILL.ErrorDescription)
	--WHERE ImportProcessLogId =  '+CONVERT(VARCHAR(100), @ImportProcessLogId)+'
	--AND ZILL.Rownumber IS NOT NULL	
	--'	
	-- PRINT @SQLLOG
	-- EXEC sys.sp_sqlexec  @SQLLOG;

	 --SET @SQLLOG = ''

	 --SET @SQLLOG = 'SELECT * FROM [TempDB..##ImportProcessLog_'+@NewGUID+ ']'
	 --EXEC sys.sp_sqlexec  @SQLLOG;


	--------------------------------------------------------------------------------------------------------------------
			 
  		SET @SQLQuery = 'Delete FROM  '+@TableName+' Where Rownumber IN (Select Rownumber FROM ZnodeImportLog  WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND Rownumber IS NOT NULL)';
        EXEC sys.sp_sqlexec  @SQLQuery;
			 			
	  
             IF @ImportHeadName IN('Product', 'Category')
                 BEGIN
                     IF NOT EXISTS
                     (
                         SELECT TOP 1 1
                         FROM @FamilyAttributeDetail
                         WHERE ISNULL(SourceColumnName, '') = ''
                               AND IsRequired = 1
                     ) AND NOT EXISTS
					 (
						 SELECT TOP 1 1
						 FROM ZnodeImportLog
						 WHERE Guid = @NewGUID
							   AND ErrorDescription IN(43, 42)
						 AND ImportProcessLogId = @ImportProcessLogId
					 )
                         BEGIN
                             IF @IsCategory = 0
                                 BEGIN
							
                                     EXEC Znode_ImportPimProductData
                                          @TableName = @TableName,
                                          @NewGUID = @NewGUID,
                                          @TemplateId = @TemplateId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @UserId = @UserId,
                                          @LocaleId = @LocaleId,
                                          @DefaultFamilyId = @DefaultFamilyId;

                                 END;
                             ELSE
                                 BEGIN
                                     EXEC Znode_ImportPimCategoryData
                                          @TableName = @TableName,
                                          @NewGUID = @NewGUID,
                                          @TemplateId = @TemplateId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @UserId = @UserId,
                                          @LocaleId = @LocaleId,
                                          @DefaultFamilyId = @DefaultFamilyId;
                                 END;
                         END
						 ELSE
							BEGIN
								-- Update Record count in log 
								--DECLARE @FailedRecordCount BIGINT
								--DECLARE @SuccessRecordCount BIGINT
								SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
								SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
								EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount out
								UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
								WHERE ImportProcessLogId = @ImportProcessLogId;
							END

                 END;
				IF NOT EXISTS
					 (
						 SELECT TOP 1 1
						 FROM ZnodeImportLog
						 WHERE Guid = @NewGUID
							   AND ErrorDescription IN(43, 42)
						 AND ImportProcessLogId = @ImportProcessLogId
					 )
             BEGIN
                 IF @ImportHeadName = 'Pricing'
                     BEGIN
                         EXEC [Znode_ImportPriceList]
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID,
                              @PriceListId = @PriceListId;
                     END;

                 IF @ImportHeadName = 'Inventory'
                     BEGIN
				
                         EXEC Znode_ImportInventory_Ver1
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID;
                     END;
                 IF @ImportHeadName = 'ZipCode'
                     BEGIN
						 EXEC Znode_ImportZipCode
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID,
							  @CountryCode = @CountryCode;
                     END;
					 IF @ImportHeadName = 'CategoryAssociation'
                     BEGIN
						 EXEC Znode_ImportCatalogCategory
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID,
							  @PimCatalogId = @PimCatalogId;
                     END;
					 IF @ImportHeadName = 'ProductAssociation'
                     BEGIN
						 EXEC Znode_ImportAssociateProducts
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID
                     END;
			
					 IF @ImportHeadName = 'SEODetails' AND @PortalId > 0 
                     BEGIN
						 EXEC Znode_ImportSEODetails
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
							  @LocaleId = @LocaleId,
							  @PortalId =@PortalId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID,
							  @CsvColumnString = @CsvColumnString 

				
                     END;
				
					 IF @ImportHeadName = 'ProductAttribute' 
                     BEGIN
						 EXEC Znode_ImportAttributes
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
							  @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID
				
                     END;

					 IF @ImportHeadName = 'Customer' AND @PortalId > 0 
                     BEGIN
						 EXEC Znode_ImportCustomer
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = @PortalId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString
				
                     END;
					 
					 IF @ImportHeadName = 'UserApprovers' AND @PortalId > 0 
                     BEGIN
						 EXEC Znode_ImportUserApproval
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = @PortalId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString
				
                     END;

					 IF @ImportHeadName = 'B2BCustomer' AND @PortalId > 0 
                     BEGIN

							 EXEC Znode_ImportB2BCustomer
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = @PortalId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString
				
                     END;

					 IF @ImportHeadName = 'CustomerAddress' --AND @PortalId > 0 
                     BEGIN
						 EXEC Znode_ImportCustomerAddress
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = 1, -- not implemented from forntend 
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString,
							  @IsAccountAddress = @IsAccountAddress
				
                     END;
					 IF @ImportHeadName = 'ShippingAddress' --AND @PortalId > 0 
                     BEGIN
						 EXEC Znode_ImportCustomerAddress
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = 1, -- not implemented from forntend 
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString,
							  @IsAccountAddress = @IsAccountAddress
				
                     END;
					 IF @ImportHeadName = 'StoreLocator' --AND @PortalId > 0 
                     BEGIN
					 	 EXEC Znode_ImportStoreLocatorAddress
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString
                     END;
 
				 
             END
			 ELSE 
				 BEGIN
					-- Update Record count in log 					
					SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
					SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
					EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount out
					UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount , TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
					WHERE ImportProcessLogId = @ImportProcessLogId;
				 END

             EXEC Znode_ImportReadErrorLog
                  @ImportProcessLogId = @ImportProcessLogId,
                  @NewGUID = @NewGUID;
             DROP TABLE #GlobalTempTableColumns;

             -- Finally call product insert process if error not found in error log table 
             IF EXISTS
             (
                 SELECT TOP 1 1
                 FROM ZnodeImportLog
                 WHERE ImportProcessLogId = @ImportProcessLogId
                       AND Guid = @NewGUID
             )
                 BEGIN
                     --Update process with completed status for current import 
                     UPDATE ZnodeImportProcessLog
                       SET
                           Status = dbo.Fn_GetImportStatus(3),
                           ProcessCompletedDate = GETDATE()
                       WHERE ImportProcessLogId = @ImportProcessLogId;
                 END;
				 SET @SQLQuery = 'Drop Table ' + @TableName
                 EXEC sys.sp_sqlexec @SQLQuery;
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE(),
                    ERROR_LINE(),
                    ERROR_PROCEDURE();
             EXEC Znode_ImportReadErrorLog
                  @ImportProcessLogId = @ImportProcessLogId,
                  @NewGUID = @NewGUID; 
             --Update process with failed status for current import 
             UPDATE ZnodeImportProcessLog
               SET
                   Status = dbo.Fn_GetImportStatus(3),
                   ProcessCompletedDate = @GetDate
             WHERE ImportProcessLogId = @ImportProcessLogId;
			 				 SET @SQLQuery = 'Drop Table ' + @TableName
                 EXEC sys.sp_sqlexec @SQLQuery;
             ROLLBACK TRAN TRN_ImportValidProductData;
         END CATCH;
     END;

GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportAttributes')
BEGIN 
	DROP PROCEDURE Znode_ImportAttributes
END
GO
CREATE PROCEDURE [dbo].[Znode_ImportAttributes](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @PimCatalogId int= 0)
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import Attribute Code Name and their default input validation rule other 
	--			  flag will be inserted as default we need to modify front end
	
	-- Unit Testing: 

	--------------------------------------------------------------------------------------
BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max);
		DECLARE @GetDate datetime= dbo.Fn_GetDate(), @LocaleId int  ;
		SELECT @LocaleId = DBO.Fn_GetDefaultLocaleId();
		-- Retrive RoundOff Value from global setting 
		DECLARE @InsertPimAtrribute TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, AttributeName varchar(300), AttributeCode varchar(300), AttributeType varchar(300), DisplayOrder int, GUID nvarchar(400)
		
		);
		DECLARE @InsertedPimAttributeIds TABLE (PimAttributeId int ,AttributeTypeId int,AttributeCode nvarchar(300))
		
		SET @SSQL = 'Select RowNumber,AttributeName,AttributeCode,AttributeType,DisplayOrder ,GUID FROM '+@TableName;
		INSERT INTO @InsertPimAtrribute( RowNumber,AttributeName,AttributeCode,AttributeType,DisplayOrder ,GUID)
		EXEC sys.sp_sqlexec @SSQL;


		--@MessageDisplay will use to display validate message for input inventory value  
		DECLARE @AttributeCode TABLE
		( 
		   AttributeCode nvarchar(300)
		);
		INSERT INTO @AttributeCode
			   SELECT AttributeCode
			   FROM ZnodePimAttribute 

		-- Start Functional Validation 
		-----------------------------------------------
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '10', 'AttributeCode', AttributeCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ii.AttributeCode in 
			   (
				   SELECT AttributeCode FROM @AttributeCode  where AttributeCode is not null 
			   );
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '10', 'AttributeCode', AttributeCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ii.AttributeCode in 
			   (
				   select AttributeCode  FROM @InsertPimAtrribute  Group BY AttributeCode  having count(*) > 1 
			   );

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '19', 'AttributeType', AttributeType, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ii.AttributeType NOT in 
			   (
				   SELECT AttributeTypeName  FROM ZnodeAttributeType  where IsPimAttributeType = 1 
			   );

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '50', 'AttributeCode', AttributeCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ltrim(rtrim(isnull(ii.AttributeCode,''))) like '%[^0-9A-Za-z]%'

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '50', 'AttributeCode', AttributeCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE Isnumeric(ltrim(rtrim(isnull(ii.AttributeCode,'')))) =1

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '35', 'AttributeCode', AttributeCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ltrim(rtrim(isnull(ii.AttributeCode,''))) like '% %' -----space not allowed

		UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ Attribute - ' + ISNULL(AttributeCode,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN @InsertPimAtrribute IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL

		-- End Function Validation 	
		-----------------------------------------------
		-- Delete Invalid Data after functional validatin  
		DELETE FROM @InsertPimAtrribute
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
		);
		
		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM @InsertPimAtrribute
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount ,
		TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End


		--- Insert data into base table ZnodePimatrribute with their validation 

		INSERT INTO ZnodePimAttribute (AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable,IsSystemDefined
			,IsConfigurable,IsPersonalizable,IsShowOnGrid,DisplayOrder,HelpDescription,IsCategory,IsHidden,IsSwatch,
			CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		
		OUTPUT Inserted.PimAttributeId,Inserted.AttributeTypeId,Inserted.AttributeCode INTO @InsertedPimAttributeIds  
		
		SELECT ZAT.AttributeTypeId,AttributeCode, 0 IsRequired , 1 IsLocalizable,1 IsFilterable, 0 IsSystemDefined, 0 IsConfigurable,
		0 IsPersonalizable,  0 IsShowOnGrid , Case when Isnull(DisplayOrder,0) = 0 then  999 else DisplayOrder end  , '' HelpDescription ,0  IsCategory , 0 IsHidden , 0 IsSwatch,
		@UserId , @GetDate ,@UserId , @GetDate from @InsertPimAtrribute IPA INNER JOIN ZnodeAttributeType ZAT 
		ON IPA.AttributeType = ZAT.AttributeTypeName  
		
		
		INSERT INTO ZnodePimAttributeLocale (LocaleId,PimAttributeId,AttributeName,Description,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		Select @LocaleId ,IPAS.PimAttributeId, IPA.AttributeName, '', @UserId , @GetDate ,@UserId , @GetDate   
		 FROM @InsertedPimAttributeIds IPAS INNER JOIN @InsertPimAtrribute IPA ON IPAS.AttributeCode= IPA.AttributeCode 
		
		INSERT INTO ZnodePimAttributeValidation
		(PimAttributeId,InputValidationId,InputValidationRuleId,Name,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT IPA.PimAttributeId,ZAIV.InputValidationId,NULL,null , @UserId , @GetDate ,@UserId , @GetDate  
		FROM @InsertedPimAttributeIds IPA INNER JOIN ZnodeAttributeInputValidation ZAIV ON IPA.AttributeTypeId = ZAIV.AttributeTypeId


		insert into ZnodePimFrontendProperties (PimAttributeId,IsComparable,IsUseInSearch,IsHtmlTags,IsFacets,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		Select PimAttributeId, 0 IsComparable, 0 IsUseInSearch,0 IsHtmlTags,0 IsFacets, @UserId CreatedBy,@GetDate CreatedDate, @UserId ModifiedBy, @GetDate ModifiedDate
		from  @InsertedPimAttributeIds
		--      SET @Status = 1;

		UPDATE ZnodeImportProcessLog
		  SET STATUS = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;
		COMMIT TRAN A;
	END TRY
	BEGIN CATCH

		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN A;
	END CATCH;
END;
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportCatalogCategory')
BEGIN 
	DROP PROCEDURE Znode_ImportCatalogCategory
END
GO
CREATE PROCEDURE [dbo].[Znode_ImportCatalogCategory](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @PimCatalogId int= 0)
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import Catalog Category Product association
	
	-- Unit Testing : 
	--BEGIN TRANSACTION;
	--update ZnodeGlobalSetting set FeatureValues = '5' WHERE FeatureName = 'InventoryRoundOff' 
	--    DECLARE @status INT;
	--    EXEC [Znode_ImportInventory] @InventoryXML = '<ArrayOfImportInventoryModel>
	-- <ImportInventoryModel>
	--   <SKU>S1002</SKU>
	--   <Quantity>999998.33</Quantity>
	--   <ReOrderLevel>10</ReOrderLevel>
	--   <RowNumber>1</RowNumber>
	--   <ListCode>TestInventory</ListCode>
	--   <ListName>TestInventory</ListName>
	-- </ImportInventoryModel>
	--</ArrayOfImportInventoryModel>' , @status = @status OUT , @UserId = 2;
	--    SELECT @status;
	--    ROLLBACK TRANSACTION;
	--------------------------------------------------------------------------------------

BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max);
		DECLARE @GetDate datetime= dbo.Fn_GetDate();
		-- Retrive RoundOff Value from global setting 
		DECLARE @InsertCatalogCategory TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, SKU varchar(300), CategoryName varchar(200), DisplayOrder int, IsActive bit, GUID nvarchar(400)
			--,Index Ind_SKU1 (SKU),Index Ind_CategoryName (CategoryName)
		);

		DECLARE @CategoryAttributId int;

		SET @CategoryAttributId =
		(
			SELECT TOP 1 PimAttributeId
			FROM ZnodePimAttribute AS ZPA
			WHERE ZPA.AttributeCode = 'CategoryName' AND 
				  ZPA.IsCategory = 1
		);

		DECLARE @InventoryListId int;

		SET @SSQL = 'Select RowNumber,SKU,CategoryName,DisplayOrder ,IsActive,GUID FROM '+@TableName;
		INSERT INTO @InsertCatalogCategory( RowNumber, SKU, CategoryName, DisplayOrder, IsActive, GUID )
		EXEC sys.sp_sqlexec @SSQL;


		--@MessageDisplay will use to display validate message for input inventory value  
		DECLARE @SKU TABLE
		( 
		   SKU nvarchar(300), PimProductId INT--, Index Ins_SKU (SKU)
		);
		INSERT INTO @SKU
			   SELECT b.AttributeValue, a.PimProductId
			   FROM ZnodePimAttributeValue AS a
					INNER JOIN
					ZnodePimAttributeValueLocale AS b
					ON a.PimAttributeId = dbo.Fn_GetProductSKUAttributeId() AND 
					   a.PimAttributeValueId = b.PimAttributeValueId;


		DECLARE @CategoryName TABLE
		( 
			CategoryName nvarchar(300), PimCategoryId int --index ind_101 (CategoryName)
		);
		INSERT INTO @CategoryName
			   SELECT ZPCAL.CategoryValue, ZPCA.PimCategoryId
			   FROM ZnodePimCategoryAttributeValue AS ZPCA
					INNER JOIN
					ZnodePimCategoryAttributeValueLocale AS ZPCAL
					ON ZPCA.PimAttributeId = 5 AND 
					ZPCA.PimCategoryAttributeValueId = ZPCAL.PimCategoryAttributeValueId;
					
		-- start Functional Validation 
		
		-----------------------------------------------
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '19', 'SKU', SKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertCatalogCategory AS ii
			   WHERE ii.SKU NOT in 
			   (
				   SELECT SKU FROM @SKU  where SKU IS NOT NULL 
			   );
		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '19', 'CategoryName', CategoryName, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertCatalogCategory AS ii
			   WHERE ii.CategoryName NOT IN 
			   (
				   SELECT CategoryName FROM @CategoryName  where CategoryName IS NOT NULL 
			   );

		UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ CategoryName - ' + ISNULL(CategoryName,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN @InsertCatalogCategory IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL


		-- End Function Validation 	
		-----------------------------------------------
		--- Delete Invalid Data after functional validatin  
		DELETE FROM @InsertCatalogCategory
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  AND RowNumber IS NOT NULL 
			--AND GUID = @NewGUID
		);

	
		IF(ISNULL(@PimCatalogId, 0) <> 0)
		BEGIN
			WITH Cte_CategorySKUAssociation
				 AS(SELECT SKU.PimProductId, 
				   (Select top 1 PimCategoryId from @CategoryName where ICC.CategoryName = CategoryName )  
				   PimCategoryId
				   , DisplayOrder, IsActive FROM @InsertCatalogCategory AS ICC INNER JOIN @SKU AS SKU ON ICC.SKU = SKU.SKU)
				 MERGE INTO ZnodePimCatalogCategory TARGET
				 USING Cte_CategorySKUAssociation SOURCE
				 ON( TARGET.PimCategoryId = SOURCE.PimCategoryId AND 
					 Target.PimCatalogId = @PimCatalogId
				   )
				 WHEN MATCHED
					   THEN UPDATE SET TARGET.PimProductId = SOURCE.PimProductId, TARGET.IsActive = SOURCE.IsActive, TARGET.DisplayOrder = SOURCE.DisplayOrder, TARGET.CreatedBy = @UserId, TARGET.CreatedDate = @GetDate, TARGET.ModifiedBy = @UserId, TARGET.ModifiedDate = @GetDate
				 WHEN NOT MATCHED
					   THEN INSERT(PimCatalogId, PimCategoryId, PimProductId, IsActive, DisplayOrder, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate) VALUES( @PimCatalogId, SOURCE.PimCategoryId, SOURCE.PimProductId, SOURCE.IsActive, SOURCE.DisplayOrder, @UserId, @GetDate, @UserId, @GetDate );
		END;
		ELSE
		BEGIN
			
			  Declare @ZnodePimCategoryProduct TABLE (PimProductId int , PimCategoryId int , Status bit , DisplayOrder int) 
			  	
			  insert into @ZnodePimCategoryProduct (PimProductId , PimCategoryId , Status , DisplayOrder )
			  SELECT SKU.PimProductId, (Select top 1 PimCategoryId from @CategoryName where ICC.CategoryName = CategoryName )  PimCategoryId
				 , IsActive , DisplayOrder FROM @InsertCatalogCategory AS ICC INNER JOIN	 @SKU AS SKU ON ICC.SKU = SKU.SKU 
			
			  INSERT into ZnodePimCategoryProduct ( PimProductId, PimCategoryId, Status, DisplayOrder, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate) 
			  Select TABL.PimProductId, TABL.PimCategoryId, TABL.Status, TABL.DisplayOrder,@UserId, @GetDate, @UserId, @GetDate   from @ZnodePimCategoryProduct TABL    
			  Where NOT EXISTS (Select top 1 1 from ZnodePimCategoryProduct ZPCP where ZPCP.PimProductId = TABL.PimProductId and  ZPCP.PimCategoryId = TABL.PimCategoryId)

		END;
		
		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM @InsertCatalogCategory
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
		WHERE ImportProcessLogId = @ImportProcessLogId;
												 
		--select 'End'
		--      SET @Status = 1;
		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;
	END TRY
	BEGIN CATCH

		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN A;
	END CATCH;
END;
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetImportProcessLog')
BEGIN 
	DROP PROCEDURE Znode_GetImportProcessLog
END
GO
CREATE PROCEDURE [dbo].[Znode_GetImportProcessLog]
( @WhereClause VARCHAR(max),
  @Rows        INT           = 100,
  @PageNo      INT           = 1,
  @Order_BY    VARCHAR(1000)  = '',
  @RowsCount   INT OUT)
AS
  /*
    Summary : Get import process log details include rowwise errors in details.    	
	Unit Testing   
	begin tran 
	DECLARE @RowsCount INT;
    EXEC Znode_GetImportProcessLog @WhereClause = 'ImportProcessLogId = 1151',@Rows = 1000,@PageNo = 0,@Order_BY = '',@RowsCount = @RowsCount OUT;
	rollback tran
    SELECT @RowsCount;
    
  */
     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY
             DECLARE @SQL NVARCHAR(MAX);
             DECLARE @TBL_ImportLog TABLE(ImportLogId INT,ImportProcessLogId INT,RowNumber BIgInt,ColumnName NVARCHAR(1000),ColumnValue NVARCHAR(max),ErrorDescription NVARCHAR(max)
										,RowId INt , CountNo Int )  ;
             SET @SQL = ' 
							;with Cte_ErrorLog AS 
							(
								SELECT zil.ImportLogId, zil.ImportProcessLogId, ISNULL(zil.RowNumber, 0) [RowNumber], ISNULL(zil.ColumnName, '''') [ColumnName],
								ISNULL(zil.Data, '''') [ColumnValue], zm.MessageName + 
								CASE 
								WHEN zm.MessageCode IN (17,4)	AND Name in (''Pricing'') AND ISNULL(zil.ColumnName, '''') NOT like ''%Quantity%'' THEN +''  ''+ dbo.Fn_GetDefaultPriceRoundOff(isnull(DefaultErrorValue,''0000000.00'') - 1)
								WHEN zm.MessageCode IN (17,4)	AND Name in (''Pricing'') AND ISNULL(zil.ColumnName, '''') like ''%Quantity%''  THEN +''  ''+ dbo.Fn_GetDefaultInventoryRoundOff(isnull(DefaultErrorValue,''0000000.00'') - 1) 
								WHEN zm.MessageCode IN (17,4)	AND Name in (''Inventory'')  THEN +''  ''+ dbo.Fn_GetDefaultInventoryRoundOff(isnull(DefaultErrorValue,''0000000.00'') - 1) 
								WHEN zm.MessageCode IN (16,41,4) AND Name in (''Pricing'') AND ISNULL(zil.ColumnName, '''') NOT like ''%Quantity%'' THEN +''  ''+ dbo.Fn_GetDefaultPriceRoundOff(isnull(DefaultErrorValue,''0000000.00'' ))
								WHEN zm.MessageCode IN (16,41,4) AND Name in (''Pricing'') AND ISNULL(zil.ColumnName, '''')  like ''%Quantity%'' THEN +''  ''+ dbo.Fn_GetDefaultInventoryRoundOff(isnull(DefaultErrorValue,''0000000.00'' ))
								WHEN zm.MessageCode IN (16,41,4) AND Name in (''Inventory'') THEN +''  ''+ dbo.Fn_GetDefaultInventoryRoundOff(isnull(DefaultErrorValue,''0000000.00'' ))
								WHEN zm.MessageCode IN (44) AND Name in (''Pricing'') THEN +''  ''+ isnull(DefaultErrorValue,''0000000.00'' )
								ELSE ''''END ''ErrorDescription'' ,zil.ModifiedDate,zil.GUID
								FROM ZnodeImportLog AS zil INNER JOIN ZnodeMessage AS zm ON zil.ErrorDescription = CONVERT(VARCHAR(50) , zm.MessageCode)
								INNER JOIN ZnodeImportProcessLog zipl ON zil.ImportProcessLogId = zipl.ImportProcessLogId
								LEFT Outer JOIN ZnodeImportTemplate zit  ON zipl.ImportTemplateId = zit.ImportTemplateId
								LEFT Outer JOIN ZnodeImportHead zih ON zit.ImportHeadId =zih.ImportHeadId 
								)
								,Cte_ErrorLogFilter As ( SELECT ImportLogId,ImportProcessLogId,[RowNumber],[ColumnName],[ColumnValue],[ErrorDescription],[ModifiedDate],GUID
												,'+dbo.Fn_GetPagingRowId(@Order_BY , 'RowNumber,ImportLogId')+',Count(*)Over() CountNo 
								 FROM Cte_ErrorLog
								 WHERE 1 = 1 '+dbo.Fn_GetFilterWhereClause(@WhereClause)+' 
							 )

							SELECT ImportLogId,ImportProcessLogId,RowNumber,ColumnName,ColumnValue,ErrorDescription,RowId, CountNo 
							FROM Cte_ErrorLogFilter '+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)

			 INSERT INTO @TBL_ImportLog (ImportLogId,ImportProcessLogId,RowNumber,ColumnName,ColumnValue,ErrorDescription,RowId, CountNo)
			 EXEC (@SQL)
				 SET @RowsCount = ISNULL((SELECT TOP 1 CountNo FROM @TBL_ImportLog), 0);
             SELECT ImportLogId,ImportProcessLogId,RowNumber,ColumnName,ColumnValue,ErrorDescription
			 FROM @TBL_ImportLog
			

		 END TRY
         BEGIN CATCH
             DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetImportProcessLog @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetImportProcessLog',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;                                    
         END CATCH;
     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportPriceList')
BEGIN 
	DROP PROCEDURE Znode_ImportPriceList
END
GO

CREATE PROCEDURE [dbo].[Znode_ImportPriceList]
(
	@TableName nvarchar(100),
	@Status bit OUT, 
	@UserId int, 
	@ImportProcessLogId int,
	@NewGUId nvarchar(200),
	@PriceListId int )
AS 
	/*
	----Summary:  Import RetailPrice List 
	----		  Input XML data extracted in table format (table variable name:  #InsertPriceForValidation) by using  @xml.nodes 
	----		  Validate data column wise and store error log into @ErrorLogForInsertPrice table 
	----          Remove wrong data from table #InsertPriceForValidation and inserted correct data into @InsertPrice table for 
	----		  further processing (Importing to target database )
	---- Version 1 : Required Validation 
	---- UomName should not be null 
	---- Data for this RetailPrice list is already available  
	---- Version 2 : Required Validation 
	---- If UomName will be null then insert first record from UomTable and If UomName is wrong then raise error
	---- SKU with retailprice data is available with price list id will insert 
	---- multiple SKU with retail price is available then updated last sku details to price table and price tier table for respective price list
	----1. Import functionality should be provided only for single price list (Validate - Pending) 
	----  Tier price : TierStartQuantity should not between TierStartQuantity and TierEndQuantity for already existing SKU 
	----  In case of update details for SKU if any kind of price value will null then avoid it to update on existing value. 
	----2. From XML only SKU and RetailPrice is mandatory
	----3. SKUActivation date sholud be less than SKUExpriration date
	----4. Activation date sholud be less than Expiration date
	----5. If Tier RetailPrice has values and TierSartQuantity /TierEndQuantity or both has null value then it should not get updated/created.
	----6. ActivationDate and ExpirationDate value for tier price will be SKUActivationDate SKUExprirationDate 
	--- Change History : 
	--Remove column which is used to store range of qunatity by single column Quantity from table ZnodeTierProduct 
	--Manditory Retail price in Znodepricetable 
	-- SKUActivationfrom date and to date will used for tier price will store in single table ZnodePrice
	--Unit Testing   
	
*/
BEGIN
	BEGIN TRAN A;
	BEGIN TRY
	    DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
		
		IF OBJECT_ID('#InsertPriceForValidation', 'U') IS NOT NULL 
			DROP TABLE #InsertPriceForValidation
		ELSE 
			CREATE TABLE #InsertPriceForValidation 
			(SKU varchar(300) NULL, TierStartQuantity varchar(300) NULL, RetailPrice varchar(300) NULL, SalesPrice varchar(300) NULL, TierPrice varchar(300) NULL, SKUActivationDate varchar(300) NULL, SKUExpirationDate varchar(300) NULL,
			Custom1 varchar(300) NULL, Custom2 varchar(300) NULL, Custom3 varchar(300) NULL, RowNumber varchar(300) NULL)
	
		--DECLARE #InsertPriceForValidation TABLE
		--( 
		--	SKU varchar(300) NULL, TierStartQuantity varchar(300) NULL, RetailPrice varchar(300) NULL, SalesPrice varchar(300) NULL, TierPrice varchar(300) NULL, SKUActivationDate varchar(300) NULL, SKUExpirationDate varchar(300) NULL, RowNumber varchar(300) NULL
		--);
		IF OBJECT_ID('#InsertPrice', 'U') IS NOT NULL 
			DROP TABLE #InsertPrice
		ELSE 
			CREATE TABLE #InsertPrice 
			( 
				SKU varchar(300), TierStartQuantity numeric(28, 6) NULL, RetailPrice numeric(28, 6) NULL, SalesPrice numeric(28, 6) NULL, TierPrice numeric(28, 6) NULL, SKUActivationDate varchar(300) NULL, SKUExpirationDate varchar(300) NULL,
				Custom1 varchar(300) NULL, Custom2 varchar(300) NULL, Custom3 varchar(300) NULL, RowNumber varchar(300)
			);
	
	
		DECLARE @SKU TABLE
		( 
				SKU nvarchar(300)
		);
		INSERT INTO @SKU
			   SELECT b.AttributeValue
			   FROM ZnodePimAttributeValue AS a
					INNER JOIN
					ZnodePimAttributeValueLocale AS b
					ON a.PimAttributeId = dbo.Fn_GetProductSKUAttributeId() AND 
					   a.PimAttributeValueId = b.PimAttributeValueId;


		--SET @CategoryXML =  REPLACE(@CategoryXML,'<?xml version="1.0" encoding="utf-16"?>','')

		DECLARE @RoundOffValue int, @MessageDisplay nvarchar(100); 
		-- Retrive RoundOff Value from global setting 

		SELECT @RoundOffValue = FeatureValues FROM ZnodeGlobalSetting WHERE FeatureName = 'PriceRoundOff';
	
		--@MessageDisplay will use to display validate message for input inventory value  

		DECLARE @sSql nvarchar(max);
		SET @sSql = ' Select @MessageDisplay_new = Convert(Numeric(28, '+CONVERT(nvarchar(200), @RoundOffValue)+'), 999999.000000000 ) ';
		EXEC SP_EXecutesql @sSql, N'@MessageDisplay_new NVARCHAR(100) OUT', @MessageDisplay_new = @MessageDisplay OUT;
		

		SET @SSQL = 'Select SKU,TierStartQuantity ,RetailPrice,SalesPrice,TierPrice,SKUActivationDate ,SKUExpirationDate ,
		 Custom1, Custom2, Custom3, RowNumber FROM '+@TableName;
		INSERT INTO #InsertPriceForValidation( SKU, TierStartQuantity, RetailPrice, SalesPrice, TierPrice, SKUActivationDate, SKUExpirationDate,
		 Custom1, Custom2, Custom3, RowNumber )
		EXEC sys.sp_sqlexec @SSQL;

			

		-- 1)  Validation for SKU is pending Proper data not found and 
		--Discussion still open for Publish version where we create SKU and use the SKU code for validation 
		--Select * from ZnodePimAttributeValue  where PimAttributeId =248
		--select * from View_ZnodePimAttributeValue Vzpa Inner join ZnodePimAttribute Zpa on Vzpa.PimAttributeId=Zpa.PimAttributeId where Zpa.AttributeCode = 'SKU'
		--Select * from ZnodePimAttribute where AttributeCode = 'SKU'
		--------------------------------------------------------------------------------------
		--2)  Start Data Type Validation for XML Data  
		--------------------------------------------------------------------------------------			
		---------------------------------------------------------------------------------------
		---------If UOM will blank then retrive top -- Finctionality pending 
		---Validate 
		
		--select * from #InsertPrice
		
		INSERT INTO #InsertPrice( SKU, TierStartQuantity, RetailPrice, SalesPrice, TierPrice, SKUActivationDate, SKUExpirationDate,
		 Custom1, Custom2, Custom3, RowNumber )
			   SELECT SKU,
					  CASE
					  WHEN CONVERT(Varchar(100),TierStartQuantity) = '' THEN 0
					  ELSE CONVERT(numeric(28, 6), TierStartQuantity)
					  END, CONVERT(numeric(28, 6), RetailPrice),
															  CASE
															  WHEN SalesPrice = '' THEN NULL
															  ELSE CONVERT(numeric(28, 6), SalesPrice)
															  END,
															  CASE
															  WHEN TierPrice = '' THEN NULL
															  ELSE CONVERT(numeric(28, 6), TierPrice)
															  END, SKUActivationDate, SKUExpirationDate,
															   Custom1, Custom2, Custom3, RowNumber
			   FROM #InsertPriceForValidation;
			
		--------------------------------------------------------------------------------------
		--- start Functional Validation 
		--------------------------------------------------------------------------------------
		--- Verify SKU is present or not 

		--INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		--	   SELECT '19', 'SKU', SKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		--	   FROM @InsertPrice
		--	   WHERE SKU NOT IN
		--	   (
		--		   SELECT ZPAVL.AttributeValue
		--		   FROM ZnodePimAttribute AS ZPA
		--				INNER JOIN
		--				ZnodePimAttributeValue AS ZPAV
		--				ON ZPA.PimAttributeId = ZPAV.PimAttributeId
		--				INNER JOIN
		--				ZnodePimAttributeValueLocale AS ZPAVL
		--				ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId
		--		   WHERE ZPA.AttributeCode = 'SKU'
		--	   );


		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '19', 'SKU', SKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		FROM #InsertPrice AS ii
		WHERE ii.SKU NOT IN
		(
			SELECT SKU
			FROM @SKU
		);

			
		--INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		--	   SELECT '26', 'RetailPrice', RetailPrice, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		--	   FROM #InsertPriceForValidation
		--	   WHERE ISNULL(CAST(RetailPrice AS numeric(28, 6)), 0) <= 0 AND 
		--			 RetailPrice <> '';
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '39', 'SKUActivationDate', SKUActivationDate, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertPrice AS IP
			   WHERE SKUActivationDate > SKUExpirationDate AND 
					 ISNULL(SKUExpirationDate, '') <> '';
					 
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '35', 'TierStartQuantity', TierStartQuantity, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertPriceForValidation
			   WHERE( TierPrice IS NULL OR TierPrice = '0') AND  TierStartQuantity  = '';

			  
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '35', 'TierPrice', TierPrice, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertPriceForValidation WHERE( TierPrice IS NULL OR  TierPrice = '') AND TierStartQuantity  <> 0;

			   
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '26', 'TierStartQuantity', TierStartQuantity, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertPriceForValidation
			   WHERE ISNULL(CAST(TierStartQuantity AS numeric(28, 6)), 0) < 0 AND 
					 TierPrice <> '';

		UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ SKU - ' + ISNULL(SKU,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN #InsertPrice IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL

 	
		-- End Function Validation 	
		---------------------------
		--- Delete Invalid Data after functional validation 
		DELETE FROM #InsertPrice
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId AND 
				  Guid = @NewGUId
		);
	
		-- Remove duplicate records 
		--insert into @RemoveDuplicateInsertPrice
		--(SKU,TierStartQuantity, RetailPrice , SalesPrice , TierPrice , Uom , UnitSize , PriceListCode , PriceListName , CurrencyId , ActivationDate , ExpirationDate 
		--, SKUActivationDate , SKUExpirationDate , RowNumber )
		--Select SKU,TierStartQuantity, RetailPrice , SalesPrice , TierPrice , Uom , UnitSize , PriceListCode , PriceListName , CurrencyId , ActivationDate , ExpirationDate 
		--, SKUActivationDate , SKUExpirationDate , RowNumber FROM @InsertPrice 
		
		--Delete from @InsertPrice 

		--insert into @InsertPrice (SKU,TierStartQuantity, RetailPrice , SalesPrice , TierPrice , Uom , UnitSize , PriceListCode , PriceListName , CurrencyId , ActivationDate , ExpirationDate 
		--, SKUActivationDate , SKUExpirationDate , RowNumber)
		--Select SKU,TierStartQuantity, RetailPrice , SalesPrice , TierPrice , Uom , UnitSize , PriceListCode , PriceListName , CurrencyId , ActivationDate , ExpirationDate 
		--, SKUActivationDate , SKUExpirationDate , RowNumber from @RemoveDuplicateInsertPrice rdip WHERE rdip.RowNumber IN
		--(
		--	SELECT MAX(ipi.RowNumber) FROM @InsertPrice ipi WHERE rdip.PriceListCode = ipi.PriceListCode AND rdip.SKU = ipi.SKU
		--);

		--Validate StartQuantity and EndQuantity from PriceTier : This validation only for existing data 
		--INSERT INTO @ErrorLogForInsertPrice (RowNumber,SKU,TierStartQuantity ,RetailPrice ,SalesPrice,TierPrice,Uom ,UnitSize,PriceListCode,PriceListName,CurrencyId ,ActivationDate,ExpirationDate,SKUActivationDate,SKUExpirationDate,SequenceNumber,ErrorDescription) 
		--Select IP.RowNumber,IP.SKU,IP.TierStartQuantity ,IP.RetailPrice ,IP.SalesPrice,IP.TierPrice,IP.Uom ,IP.UnitSize,IP.PriceListCode,IP.PriceListName,IP.CurrencyId ,IP.ActivationDate,IP.ExpirationDate,IP.SKUActivationDate,IP.SKUExpirationDate,IP.SequenceNumber,
		--'TierStartQuantity already exists in PriceTier table for SKU '
		--From @InsertPrice IP  Inner join
		--ZnodePriceList Zpl ON Zpl.Listcode = IP.PriceListcode and Zpl.ListName = IP.PriceListName
		--INNER JOIN ZnodeUOM Zu ON ltrim(rtrim(IP.Uom)) = ltrim(rtrim(Zu.Uom)) 
		--INNER JOIN ZnodePriceTier ZPT  ON ZPT.PriceListId = Zpl.PriceListId 
		--AND ZPT.SKU = IP.SKU
		--Where IP.TierStartQuantity  = ZPT.Quantity  
		--- Delete Invalid Data after  Validate StartQuantity and EndQuantity from PriceTier
		
		--INSERT INTO ZnodeUOM (Uom,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		--Select distinct ltrim(rtrim(Uom)) , @UserId,@GetDate,@UserId,@GetDate  from @InsertPrice 
		--where ltrim(rtrim(Uom)) not in (Select ltrim(rtrim(UOM)) From ZnodeUOM where UOM  is not null )
		
		DECLARE @FailedRecordCount BIGINT, @SuccessRecordCount BIGINT 
	
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;

		SELECT @SuccessRecordCount = COUNT(DISTINCT ROWNUMBER) FROM #InsertPrice WHERE 	ROWNUMBER IS NOT NULL ;

		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount,
		TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
		WHERE ImportProcessLogId = @ImportProcessLogId;

		UPDATE ZP
				SET ZP.SalesPrice = IP.SalesPrice, ZP.RetailPrice = CASE
				WHEN CONVERT(varchar(100), ISNULL(IP.RetailPrice, '')) <> '' THEN IP.RetailPrice
				END, ZP.ActivationDate = CASE
				WHEN ISNULL(IP.SKUActivationDate, '') <> '' THEN IP.SKUActivationDate
				ELSE NULL
				END, ZP.ExpirationDate = CASE
				WHEN ISNULL(IP.SKUExpirationDate, '') <> '' THEN IP.SKUExpirationDate
				ELSE NULL
				END, ZP.ModifiedBy = @UserId, ZP.ModifiedDate = @GetDate
		FROM #InsertPrice IP INNER JOIN ZnodePrice ZP ON ZP.PriceListId = @PriceListId AND  ZP.SKU = IP.SKU  
			 --Retrive last record from price list of specific SKU ListCode and Name 									
		WHERE IP.RowNumber IN
		(
			SELECT MAX(IPI.RowNumber) FROM #InsertPrice AS IPI WHERE IPI.SKU = IP.SKU 
		);
		INSERT INTO ZnodePrice( PriceListId, SKU, SalesPrice, RetailPrice, ActivationDate, ExpirationDate, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
			   SELECT @PriceListId, IP.SKU, IP.SalesPrice, IP.RetailPrice,
																						   CASE
																						   WHEN ISNULL(IP.SKUActivationDate, '') = '' THEN NULL
																						   ELSE IP.SKUActivationDate
																						   END,
																						   CASE
																						   WHEN ISNULL(IP.SKUExpirationDate, '') = '' THEN NULL
																						   ELSE IP.SKUExpirationDate
																						   END, @UserId, @GetDate, @UserId, @GetDate
			   FROM #InsertPrice AS IP
			   WHERE NOT EXISTS
			   (
				   SELECT TOP 1 1
				   FROM ZnodePrice
				   WHERE ZnodePrice.PriceListId = @PriceListId AND 
						 ZnodePrice.SKU = IP.SKU AND 
						 ISNULL(ZnodePrice.SalesPrice, 0) = ISNULL(IP.SalesPrice, 0) AND 
						 ZnodePrice.RetailPrice = IP.RetailPrice
			   ) AND 
					 IP.RowNumber IN
			   (
					SELECT MAX(IPI.RowNumber)
					FROM #InsertPrice AS IPI
					WHERE IPI.SKU = IP.SKU 
			   );

			 

		IF EXISTS
		(
			SELECT TOP 1 1
			FROM #InsertPrice
			WHERE CONVERT(varchar(100), TierStartQuantity) <> '' AND 
				  (CONVERT(varchar(100), TierPrice) <> '' OR CONVERT (varchar(100), TierPrice) IS NOT NULL)
		)
		BEGIN
		
			UPDATE ZPT
			  SET ZPT.Price = IP.TierPrice, ZPT.ModifiedBy = @UserId, ZPT.ModifiedDate = @GetDate,
			  ZPT.Custom1 = IP.Custom1,ZPT.Custom2 = IP.Custom2, ZPT.Custom3 = IP.Custom3 
			FROM #InsertPrice IP INNER JOIN ZnodePriceTier ZPT ON ZPT.PriceListId = @PriceListId AND  ZPT.SKU = IP.SKU AND ZPT.Quantity = IP.TierStartQuantity 
		    --Retrive last record from price list of specific SKU ListCode and Name 
			WHERE IP.RowNumber IN
			(
				SELECT MAX(IPI.RowNumber) FROM #InsertPrice AS IPI WHERE IPI.SKU = IP.SKU AND IPI.TierStartQuantity = IP.TierStartQuantity 
			);

			INSERT INTO ZnodePriceTier( PriceListId, SKU, Price, Quantity, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, Custom1, Custom2, Custom3 )
				   SELECT @PriceListId, IP.SKU, IP.TierPrice, IP.TierStartQuantity,  @UserId, @GetDate, @UserId, @GetDate, Custom1, Custom2, Custom3
				   FROM #InsertPrice AS IP 
				   WHERE NOT EXISTS
				   (
					   SELECT TOP 1 1 FROM ZnodePriceTier WHERE ZnodePriceTier.PriceListId = @PriceListId AND  ZnodePriceTier.SKU = IP.SKU AND 
							 ZnodePriceTier.Quantity = IP.TierStartQuantity
				   ) AND  IP.RowNumber IN
				   (
					   SELECT MAX(IPI.RowNumber) FROM #InsertPrice AS IPI WHERE IPI.SKU = IP.SKU AND  IPI.TierStartQuantity = IP.TierStartQuantity
				   );
		END;  
		--SELECT @PriceListId ID , cast(1 As Bit ) Status  
		--SELECT RowNumber , ErrorDescription , SKU , TierStartQuantity , RetailPrice , SalesPrice , TierPrice , Uom , UnitSize , PriceListCode , PriceListName , CurrencyId , ActivationDate , ExpirationDate
		--FROM @ErrorLogForInsertPrice;
		SET @Status = 1;
		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = GETDATE()
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- COMMIT TRAN ImportProducts;
		COMMIT TRAN A;
	END TRY
	BEGIN CATCH
		
		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN A;
	END CATCH;
END;
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportAssociateProducts')
BEGIN 
	DROP PROCEDURE Znode_ImportAssociateProducts
END
GO

CREATE PROCEDURE [dbo].[Znode_ImportAssociateProducts](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @PimCatalogId int= 0)
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import Product Association 
	
	-- Unit Testing : 
	--BEGIN TRANSACTION;
	--update ZnodeGlobalSetting set FeatureValues = '5' WHERE FeatureName = 'InventoryRoundOff' 
	--    DECLARE @status INT;
	--    EXEC [Znode_ImportInventory] @InventoryXML = '<ArrayOfImportInventoryModel>
	-- <ImportInventoryModel>
	--   <SKU>S1002</SKU>
	--   <Quantity>999998.33</Quantity>
	--   <ReOrderLevel>10</ReOrderLevel>
	--   <RowNumber>1</RowNumber>
	--   <ListCode>TestInventory</ListCode>
	--   <ListName>TestInventory</ListName>
	-- </ImportInventoryModel>
	--</ArrayOfImportInventoryModel>' , @status = @status OUT , @UserId = 2;
	--    SELECT @status;
	--    ROLLBACK TRANSACTION;
	--------------------------------------------------------------------------------------

BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max);
		DECLARE @GetDate datetime= dbo.Fn_GetDate();
		-- Retrive RoundOff Value from global setting 
		DECLARE @InsertProductAssociation TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, ParentSKU varchar(300), ChildSKU varchar(200), DisplayOrder int, GUID nvarchar(400)
		);
		
		IF OBJECT_ID('#InsertProduct', 'U') IS NOT NULL 
			DROP TABLE #InsertProduct
		ELSE 
		CREATE TABLE #InsertProduct 
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, ParentProductId varchar(300), ChildProductId varchar(200), DisplayOrder int, GUID nvarchar(400)
		);


		DECLARE @CategoryAttributId int;

		DECLARE @InventoryListId int;

		SET @SSQL = 'Select RowNumber,ParentSKU,ChildSKU,DisplayOrder,GUID FROM '+@TableName;
		INSERT INTO @InsertProductAssociation( RowNumber, ParentSKU,ChildSKU,DisplayOrder, GUID )
		EXEC sys.sp_sqlexec @SSQL;


		--@MessageDisplay will use to display validate message for input inventory value  
		DECLARE @SKU TABLE
		( 
						   SKU nvarchar(300), PimProductId int
		);
		INSERT INTO @SKU
			   SELECT b.AttributeValue, a.PimProductId
			   FROM ZnodePimAttributeValue AS a
					INNER JOIN
					ZnodePimAttributeValueLocale AS b
					ON a.PimAttributeId = dbo.Fn_GetProductSKUAttributeId() AND 
					   a.PimAttributeValueId = b.PimAttributeValueId;

		DECLARE @ProductType TABLE
		( 
			ProductType nvarchar(100) ,PimProductId int
		);
		INSERT INTO @ProductType
			   SELECT  ZPADV.AttributeDefaultValueCode, a.PimProductId
			   FROM ZnodePimAttributeValue AS a
					INNER JOIN
					ZnodePimProductAttributeDefaultValue AS b
					ON a.PimAttributeId = dbo.Fn_GetProductTypeAttributeId() AND 
					   a.PimAttributeValueId = b.PimAttributeValueId
					   Inner join ZnodePimAttributeDefaultValue ZPADV On b.PimAttributeDefaultValueId = ZPADV.PimAttributeDefaultValueId
					   where  ZPADV.AttributeDefaultValueCode in ('GroupedProduct','BundleProduct','ConfigurableProduct');
		-- start Functional Validation 
		-----------------------------------------------
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '19', 'ParentSKU', ParentSKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertProductAssociation AS ii
			   WHERE ii.ParentSKU NOT IN
			   (
				   SELECT SKU
				   FROM @SKU
			   );
			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '19', 'ChildSKU', ChildSKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertProductAssociation AS ii
			   WHERE ii.ChildSKU NOT IN
			   (
				   SELECT SKU
				   FROM @SKU
			   );

		--DELETE FROM @InsertProductAssociation
		--WHERE RowNumber IN
		--(
		--	SELECT DISTINCT 
		--		   RowNumber
		--	FROM ZnodeImportLog
		--	WHERE ImportProcessLogId = @ImportProcessLogId AND 
		--		  GUID = @NewGUID
		--);

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '49', 'ParentSKU',   ParentSKU , @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertProductAssociation AS ii
			   WHERE ii.ParentSKU NOT IN
			   (
				   SELECT SKU  FROM @SKU SKU inner join @ProductType  PT ON SKU.PimProductId = PT.PimProductId 
	
			   );

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '51', 'ChildSKU',   ChildSKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertProductAssociation AS ii
			   WHERE ii.ChildSKU IN
			   (
				   SELECT SKU  FROM @SKU SKU inner join @ProductType  PT ON SKU.PimProductId = PT.PimProductId 
	
			   );

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '35', 'ParentSKU',  'Configure Attribute Missing: '+ Convert(nvarchar(400),isnull(ParentSKU,'')), @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertProductAssociation AS ii Inner join @SKU PS ON 
			   ii.ParentSKU = PS.SKU 
			   Inner join @ProductType  PT ON PS.PimProductId = PT.PimProductId  AND PT.ProductType  in ('ConfigurableProduct')
			   where  PS.PimProductId NOT in 
			   (select Distinct PimProductId  from ZnodePimConfigureProductAttribute)
			   -- End Function Validation 	

			   UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ SKU - ' + isnull(ParentSKU,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN @InsertProductAssociation IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL

		-----------------------------------------------
		--- Delete Invalid Data after functional validatin  
		DELETE FROM @InsertProductAssociation
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId AND 
				  GUID = @NewGUID
		);

		insert into #InsertProduct (RowNumber,  ParentProductId , ChildProductId , DisplayOrder)
			SELECT RowNumber , SKUParent.PimProductId SKUParentId , 
				   ( Select TOP 1 SKUChild.PimProductId from @SKU AS SKUChild where  SKUChild.SKU = IPAC.ChildSKU ) SKUChildId,
				    DisplayOrder
					FROM @InsertProductAssociation AS IPAC INNER JOIN @SKU AS SKUParent ON IPAC.ParentSKU = SKUParent.SKU 

	-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM #InsertProduct
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End
	
		INSERT INTO ZnodePimProductTypeAssociation (PimParentProductId, PimProductId, DisplayOrder, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate) 
		select  ParentProductId , ChildProductId , DisplayOrder, @UserId, @GetDate, @UserId, @GetDate  from #InsertProduct 
		where  NOT Exists (Select TOP 1 1 from ZnodePimProductTypeAssociation where PimParentProductId =  #InsertProduct.ParentProductId
		AND PimProductId = #InsertProduct.ChildProductId )


		--SELECT SKUParent.PimProductId SKUParentId , 
		--		   ( Select TOP 1 SKUChild.PimProductId from @SKU AS SKUChild where  SKUChild.SKU = IPAC.ChildSKU ) SKUChildId,
		--		    DisplayOrder
		--			FROM @InsertProductAssociation AS IPAC INNER JOIN @SKU AS SKUParent ON IPAC.ParentSKU = SKUParent.SKU 



		--	WITH Cte_ProductAssociation
		--		 AS( SELECT SKUParent.PimProductId SKUParentId , 
		--		   ( Select TOP 1 SKUChild.PimProductId from @SKU AS SKUChild where  SKUChild.SKU = IPAC.ChildSKU ) SKUChildId,
		--		    DisplayOrder
		--			FROM @InsertProductAssociation AS IPAC INNER JOIN @SKU AS SKUParent ON IPAC.ParentSKU = SKUParent.SKU )

		--		 MERGE INTO ZnodePimProductTypeAssociation TARGET
		--		 USING Cte_ProductAssociation SOURCE
		--		 ON( TARGET.PimParentProductId = SOURCE.SKUParentId )
		--		 WHEN MATCHED
		--			   THEN UPDATE SET TARGET.PimProductId = SOURCE.SKUChildId,TARGET.DisplayOrder = SOURCE.DisplayOrder, TARGET.CreatedBy = @UserId, TARGET.CreatedDate = @GetDate, TARGET.ModifiedBy = @UserId, TARGET.ModifiedDate = @GetDate
		--		 WHEN NOT MATCHED
		--			   THEN INSERT(PimParentProductId, PimProductId,      DisplayOrder, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate) 
		--					VALUES(SOURCE.SKUParentId, SOURCE.SKUChildId, SOURCE.DisplayOrder, @UserId, @GetDate, @UserId, @GetDate );

				--INSERT INTO  ZnodePimConfigureProductAttribute  (PimProductId,PimFamilyId,PimAttributeId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				--SELECT  a.PimProductId , b.PimAttributeFamilyId,35,2,GETDATE(),2,GETDATE()
				--FROM View_LoadManageProduct a 
				--INNER JOIN ZnodePimProduct B ON (b.PimProductId = a.PimProductId)
				--WHERE AttributeCode = 'ProductType'
				--AND AttributeValue LIKE 'Config%'


								 
		--select 'End'
		--      SET @Status = 1;
		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;
	END TRY
	BEGIN CATCH

		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN A;
	END CATCH;
END;
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportPimProductData')
BEGIN 
	DROP PROCEDURE Znode_ImportPimProductData
END
GO
CREATE PROCEDURE [dbo].[Znode_ImportPimProductData]
(   @TableName          VARCHAR(200),
    @NewGUID            NVARCHAR(200),
    @TemplateId         NVARCHAR(200),
    @ImportProcessLogId INT,
    @UserId             INT,
    @LocaleId           INT,
    @DefaultFamilyId    INT)
AS
    
	/*
      Summary : Finally Import data into ZnodePimProduct, ZnodePimAttributeValue and ZnodePimAttributeValueLocale Table 
      Process : Flat global temporary table will split into cloumn wise and associted with Znode Attributecodes,
    		      Create group of product with their attribute code and values and inserted one by one products. 	   
    
      SourceColumnName : CSV file column headers
      TargetColumnName : Attributecode from ZnodePimAttribute Table 

	 ***  Need to log error if transaction failed during insertion of records into table.
    */

     BEGIN
		 SET NOCOUNT ON
         BEGIN TRY
             --BEGIN TRAN ImportProducts;
             DECLARE @SQLQuery NVARCHAR(MAX);
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @AttributeTypeName NVARCHAR(10), @AttributeCode NVARCHAR(300), @AttributeId INT, @IsRequired BIT, @SourceColumnName NVARCHAR(600), @PimAttributeFamilyId INT, @NewProductId INT, @PimAttributeValueId INT, @status BIT= 0; 
             --Declare error Log Table 


			 DECLARE @FamilyAttributeDetail TABLE
			 ( 
				PimAttributeId int, AttributeTypeName varchar(300), AttributeCode varchar(300), SourceColumnName nvarchar(600), IsRequired bit, PimAttributeFamilyId int
			 );
             IF @DefaultFamilyId = 0
                 BEGIN
					INSERT INTO @FamilyAttributeDetail( PimAttributeId, AttributeTypeName, AttributeCode, SourceColumnName, IsRequired, PimAttributeFamilyId )
					--Call Process to insert data of defeult family with cource column name and target column name 
					EXEC Znode_ImportGetTemplateDetails @TemplateId = @TemplateId, @IsValidationRules = 0, @IsIncludeRespectiveFamily = 1,@DefaultFamilyId = @DefaultFamilyId;
                    UPDATE @FamilyAttributeDetail SET PimAttributeFamilyId = DBO.Fn_GetCategoryDefaultFamilyId();

					---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
					Delete FAD from @FamilyAttributeDetail FAD
					where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
					and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					               inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
                 END;
             ELSE
                 BEGIN
                     INSERT INTO @FamilyAttributeDetail(PimAttributeId,AttributeTypeName,AttributeCode,SourceColumnName,IsRequired,PimAttributeFamilyId)
                     --Call Process to insert data of defeult family with cource column name and target column name 
                     EXEC Znode_ImportGetTemplateDetails @TemplateId = @TemplateId,@IsValidationRules = 0,@IsIncludeRespectiveFamily = 1,@DefaultFamilyId = @DefaultFamilyId;

					 ---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
					Delete FAD from @FamilyAttributeDetail FAD
					where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
					and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					               inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
                 END;  
				
            -- Retrive PimProductId on the basis of SKU for update product 
			SET @SQLQuery = 'UPDATE tlb SET tlb.PimProductId = ZPAV.PimProductId 
							FROM ZnodePimAttributeValue AS ZPAV INNER JOIN ZnodePimAttributeValueLocale AS ZPAVL ON 
							(ZPAVL.PimAttributeValueId = ZPAV.PimAttributeValueId) 
							INNER JOIN [dbo].[ZnodePimAttribute] ZPA on ZPAV.PimAttributeId = ZPA.PimAttributeId AND ZPA.AttributeCode= ''SKU'' 
							INNER JOIN '+@TableName+' tlb ON ZPAVL.AttributeValue = ltrim(rtrim(tlb.SKU)) ';
			EXEC sys.sp_sqlexec	@SQLQuery	 	
				 	
					
             --Read all attribute details with their datatype 
			 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.TABLES WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#DefaultAttributeValue')
				BEGIN
					   CREATE TABLE #DefaultAttributeValue (AttributeTypeName  VARCHAR(300),PimAttributeDefaultValueId INT,PimAttributeId INT,
					   AttributeDefaultValueCode  VARCHAR(100));
					   -- ELSE 
					   -- CREATE TABLE #DefaultAttributeValue (AttributeTypeName  VARCHAR(300),PimAttributeDefaultValueId INT,PimAttributeId INT,
					   -- AttributeDefaultValueCode  VARCHAR(100)
					   -- Index Ix_Default (PimAttributeId, AttributeDefaultValueCode));
					   --IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
					   --Begin
						  --Select 'Without Index'
					   --END
					   --Else
						  --Alter TABLE #DefaultAttributeValue ADD Index Ix_Default (PimAttributeId, AttributeDefaultValueCode);
					


					INSERT INTO #DefaultAttributeValue(AttributeTypeName,PimAttributeDefaultValueId,PimAttributeId,AttributeDefaultValueCode)
					--Call Process to insert default data value 
					EXEC Znode_ImportGetPimAttributeDefaultValue;
				END;
             ELSE
                BEGIN
                    DROP TABLE #DefaultAttributeValue;
                END;
             EXEC sys.sp_sqlexec
                  @SQLQuery;
          
             -- Split horizontal table into verticle table by column name and attribute Value with their 
             -- corresponding AttributeId, Default family , Default AttributeValue Id  
    --         DECLARE @PimProductDetail TABLE 
			 --(
			      
				-- PimAttributeId INT, PimAttributeFamilyId INT,ProductAttributeCode VARCHAR(300) NULL,
				--  ProductAttributeDefaultValueId INT NULL,PimAttributeValueId  INT NULL,LocaleId INT,
				--  PimProductId INT NULL,AttributeValue NVARCHAR(MAX) NULL,AssociatedProducts NVARCHAR(4000) NULL,ConfigureAttributeIds VARCHAR(2000) NULL,
				--  ConfigureFamilyIds VARCHAR(2000) NULL,RowNumber INT  INDEX Ix CLUSTERED (RowNumber) 
    --            );

			DECLARE @PimProductDetail TABLE 
			 (
			      
				  PimAttributeId INT, PimAttributeFamilyId INT,ProductAttributeCode VARCHAR(300) NULL,
				  ProductAttributeDefaultValueId INT NULL,PimAttributeValueId  INT NULL,LocaleId INT,
				  PimProductId INT NULL,AttributeValue NVARCHAR(MAX) NULL,AssociatedProducts NVARCHAR(4000) NULL,ConfigureAttributeIds VARCHAR(2000) NULL,
				  ConfigureFamilyIds VARCHAR(2000) NULL,RowNumber INT  
                );

		-- Update Record count in log 
       DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
		EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount OUTPUT
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End

			
             -- Column wise split data from source table ( global temporary table ) and inserted into temporary table variable @PimProductDetail
             -- Add PimAttributeDefaultValue 
             DECLARE Cr_AttributeDetails CURSOR LOCAL FAST_FORWARD
             FOR SELECT PimAttributeId,AttributeTypeName,AttributeCode,IsRequired,SourceColumnName,PimAttributeFamilyId FROM @FamilyAttributeDetail  WHERE ISNULL(SourceColumnName, '') <> '';
             OPEN Cr_AttributeDetails;
             FETCH NEXT FROM Cr_AttributeDetails INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @PimAttributeFamilyId;
             WHILE @@FETCH_STATUS = 0
                 BEGIN
                    SET @NewProductId = 0;
                    SET @SQLQuery = ' SELECT '''+CONVERT(VARCHAR(100), @PimAttributeFamilyId)+''' PimAttributeFamilyId , PimProductId PimProductId,'''+'['+@AttributeCode+']'+''' ProductAttributeCode ,'''+CONVERT(VARCHAR(100), @AttributeId)+''' AttributeId ,
									(SELECT TOP 1  PimAttributeDefaultValueId FROM #DefaultAttributeValue Where PimAttributeId =  '
									+ CONVERT(VARCHAR(100), @AttributeId)+'AND  AttributeDefaultValueCode = TN.['+@SourceColumnName+'] ) PimAttributeDefaultValueId ,['
									+ @SourceColumnName+'],'+CONVERT(VARCHAR(100), @LocaleId)+'LocaleId
								, RowNumber FROM '+@TableName+' TN';
								print @SQLQuery
                    INSERT INTO @PimProductDetail( PimAttributeFamilyId, PimProductId,ProductAttributeCode, PimAttributeId, ProductAttributeDefaultValueId, AttributeValue, LocaleId, RowNumber )
					
					EXEC sys.sp_sqlexec @SQLQuery;
                    FETCH NEXT FROM Cr_AttributeDetails INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @PimAttributeFamilyId;
                 END;
             CLOSE Cr_AttributeDetails;
             DEALLOCATE Cr_AttributeDetails;
			 
			
			 if object_id('tempdb..#PimProductDetail1') is not null
				drop table #PimProductDetail1

			 Select * into #PimProductDetail1 from @PimProductDetail

			 UPDATE a 
			 SET ConfigureAttributeIds =  SUBSTRING((SELECT ','+CAST(c.PimAttributeId As VARCHAR(100)) 
			 FROM #PimProductDetail1 c 
			 INNER JOIN ZnodePimAttribute b ON (b.PimAttributeId = c.PimAttributeId)
			 WHERE IsConfigurable =1  AND c.RowNumber = a.RowNumber  FOR XML PATH('')),2,4000) 
			 FROM #PimProductDetail1 a 
			WHERE EXISTS (SELECT TOP 1 1 FROM #PimProductDetail1 ab  WHERE ab.RowNumber = a.RowNumber AND	ab.ProductAttributeCode = 'ProductType' 
			 AND ab.AttributeValue = 'ConfigurableProduct' )
				
             -- In case of Yes/No : If value is not TRUE OR  1 then it will be  False else True
			 --If default Value set not need of hard code for IsActive
			 UPDATE ppdti SET ppdti.AttributeValue = CASE WHEN Upper(ISNULL(ppdti.AttributeValue, '')) in ( 'TRUE','1')  THEN 'true'  ELSE 'false' END FROM #PimProductDetail1 ppdti
                INNER JOIN #DefaultAttributeValue dav ON ppdti.PimAttributeId = dav.PimAttributeId WHERE   dav.AttributeTypeName = 'Yes/No';
             -- Pass product records one by one 
             DECLARE @IncrementalId INT= 1;
             DECLARE @SequenceId INT=
             (
                 SELECT MAX(RowNumber) FROM #PimProductDetail1
             );
             DECLARE @PimProductDetailToInsert PIMPRODUCTDETAIL;  --User define table type to pass multiple records of product in single step

             WHILE @IncrementalId <= @SequenceId
                 BEGIN
					   	INSERT INTO @PimProductDetailToInsert(PimAttributeId,PimAttributeFamilyId,ProductAttributeCode,ProductAttributeDefaultValueId,
						PimAttributeValueId,LocaleId,PimProductId,AttributeValue,AssociatedProducts,ConfigureAttributeIds,ConfigureFamilyIds)
						SELECT PimAttributeId,PimAttributeFamilyId,ProductAttributeCode,ProductAttributeDefaultValueId,PimAttributeValueId,LocaleId,
						PimProductId,AttributeValue,AssociatedProducts,ConfigureAttributeIds,ConfigureFamilyIds FROM #PimProductDetail1
						WHERE [#PimProductDetail1].RowNumber = @IncrementalId; --AND RTRIM(LTRIM(AttributeValue)) <> '';

						Delete from @PimProductDetailToInsert where RTRIM(LTRIM(ISNULL(AttributeValue,''))) = '';
	                    --ORDER BY [@PimProductDetail].RowNumber;
                        ----Call process to finally insert data into 
                        ----------------------------------------------------------
						--1. [dbo].[ZnodePimProduct]
						--2. [dbo].[ZnodePimAttributeValue]
						--3. [dbo].[ZnodePimAttributeValueLocale]
						if Exists (select TOP 1 1 from @PimProductDetailToInsert)
							EXEC [Znode_ImportInsertUpdatePimProduct] @PimProductDetail = @PimProductDetailToInsert,@UserID = @UserID,@status = @status OUT,@IsNotReturnOutput = 1;
						DELETE FROM @PimProductDetailToInsert;
						SET @IncrementalId = @IncrementalId + 1;
						
                 END;

				 DELETE FROM ZnodePimConfigureProductAttribute  
						WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePimAttributeValue  a WHERE a.PimProductId = ZnodePimConfigureProductAttribute.PimProductId AND a.PimAttributeID = ZnodePimConfigureProductAttribute.PimAttributeID )
						AND EXISTS (SELECT TOP 1 1 FROM ZnodePimAttributeValue a 
						INNER JOIN ZnodePimAttribute ty ON (ty.PimAttributeId = a.PimAttributeId)
						INNER JOIN ZnodePimProductAttributeDefaultValue t ON (t.PimAttributeValueId = a.PimAttributeValueId )
						INNER JOIN ZnodePimAttributeDefaultValue y ON (y.PimAttributeDefaultValueId = t.PimAttributeDefaultValueId)
						INNER JOIN View_loadmanageProductInternal  TU ON (TU.AttributeCode = 'SKU' AND TU.PimProductId = a.PimProductId  )
						WHERE ty.AttributeCode = 'ProductType' AND y.AttributeDefaultValueCode = 'ConfigurableProduct'
						AND a.PimProductId = ZnodePimConfigureProductAttribute.PimProductId
						AND EXISTS (SELECT TOP 1 1 FROM #PimProductDetail1 TM WHERE TM.PimAttributeID = (SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'SKU') AND TM.AttributeValue = TU.AttributeValue )) 
					   
						
					   
					    DELETE FROM ZnodePimConfigureProductAttribute 
						WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimAttributeValue a 
						INNER JOIN ZnodePimAttribute ty ON (ty.PimAttributeId = a.PimAttributeId)
						INNER JOIN ZnodePimProductAttributeDefaultValue t ON (t.PimAttributeValueId = a.PimAttributeValueId )
						INNER JOIN ZnodePimAttributeDefaultValue y ON (y.PimAttributeDefaultValueId = t.PimAttributeDefaultValueId)
						WHERE ty.AttributeCode = 'ProductType' AND y.AttributeDefaultValueCode = 'SimpleProduct'
						AND a.PimProductId = ZnodePimConfigureProductAttribute.PimProductId
						)
			 UPDATE ZnodePimConfigureProductAttribute 
			 SET PimFamilyId = b.PimAttributeFamilyId
			 FROM ZnodePimConfigureProductAttribute a
			 INNER JOIN ZnodePimProduct b ON a.PimProductId = b.PimProductId
              

             UPDATE ZnodeImportProcessLog SET Status = dbo.Fn_GetImportStatus(2), ProcessCompletedDate =  Getdate()  WHERE ImportProcessLogId = @ImportProcessLogId;
            -- COMMIT TRAN ImportProducts;
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE(),ERROR_LINE(),ERROR_PROCEDURE();
            -- UPDATE ZnodeImportProcessLog SET Status = dbo.Fn_GetImportStatus(3), ProcessCompletedDate = @GetDate WHERE ImportProcessLogId = @ImportProcessLogId;
            -- ROLLBACK TRAN ImportProducts;
         END CATCH;
     END;
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportPartialPimProductData')
BEGIN 
	DROP PROCEDURE Znode_ImportPartialPimProductData
END
GO
CREATE  PROCEDURE [dbo].[Znode_ImportPartialPimProductData]
(   @TableName          VARCHAR(200),
    @NewGUID            NVARCHAR(200),
    @TemplateId         NVARCHAR(200),
    @ImportProcessLogId INT,
    @UserId             INT,
    @LocaleId           INT,
    @DefaultFamilyId    INT)
AS
    
	/*
      Summary : Finally Import data into ZnodePimProduct, ZnodePimAttributeValue and ZnodePimAttributeValueLocale Table 
      Process : Flat global temporary table will split into cloumn wise and associted with Znode Attributecodes,
    		      Create group of product with their attribute code and values and inserted one by one products. 	   
    
      SourceColumnName : CSV file column headers
      TargetColumnName : Attributecode from ZnodePimAttribute Table 

	 ***  Need to log error if transaction failed during insertion of records into table.
    */

     BEGIN
		 SET NOCOUNT ON
         BEGIN TRY
             --BEGIN TRAN ImportProducts;
             DECLARE @SQLQuery NVARCHAR(MAX);
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @AttributeTypeName NVARCHAR(10), @AttributeCode NVARCHAR(300), @AttributeId INT, @IsRequired BIT, @SourceColumnName NVARCHAR(600), @PimAttributeFamilyId INT, @NewProductId INT, @PimAttributeValueId INT, @status BIT= 0; 
             --Declare error Log Table 


			 DECLARE @FamilyAttributeDetail TABLE
			 ( 
				PimAttributeId int, AttributeTypeName varchar(300), AttributeCode varchar(300), SourceColumnName nvarchar(600), IsRequired bit, PimAttributeFamilyId int
			 );
			 SET @DefaultFamilyId = 0 
             IF @DefaultFamilyId = 0
                 BEGIN
					INSERT INTO @FamilyAttributeDetail( PimAttributeId, AttributeTypeName, AttributeCode, SourceColumnName, IsRequired, PimAttributeFamilyId )
					--Call Process to insert data of defeult family with cource column name and target column name 
					--EXEC Znode_ImportGetTemplateDetails @TemplateId = @TemplateId, @IsValidationRules = 0, @IsIncludeRespectiveFamily = 1,@DefaultFamilyId = @DefaultFamilyId;
                    --UPDATE @FamilyAttributeDetail SET PimAttributeFamilyId = DBO.Fn_GetCategoryDefaultFamilyId();
					SELECT distinct zpa.PimAttributeId, zat.AttributeTypeName, zpa.AttributeCode, zitm.SourceColumnName, zpa.IsRequired ,0
					FROM dbo.ZnodePimAttribute AS zpa INNER JOIN dbo.ZnodeAttributeType AS zat ON zat.AttributeTypeId = zpa.AttributeTypeId 
					LEFT OUTER JOIN dbo.ZnodeImportTemplateMapping AS zitm
					ON zpa.AttributeCode = zitm.SourceColumnName AND zitm.ImportTemplateId = @TemplateId
					WHERE zpa.IsCategory = 0 

                 END;
             --Read all attribute details with their datatype 
			 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.TABLES WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#DefaultAttributeValue')
				BEGIN
					   CREATE TABLE #DefaultAttributeValue (AttributeTypeName  VARCHAR(300),PimAttributeDefaultValueId INT,PimAttributeId INT,
					   AttributeDefaultValueCode  VARCHAR(100));
					   -- ELSE 
					   -- CREATE TABLE #DefaultAttributeValue (AttributeTypeName  VARCHAR(300),PimAttributeDefaultValueId INT,PimAttributeId INT,
					   -- AttributeDefaultValueCode  VARCHAR(100)
					   -- Index Ix_Default (PimAttributeId, AttributeDefaultValueCode));
					   --IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
					   --Begin
						  --Select 'Without Index'
					   --END
					   --Else
						  --Alter TABLE #DefaultAttributeValue ADD Index Ix_Default (PimAttributeId, AttributeDefaultValueCode);
					


					INSERT INTO #DefaultAttributeValue(AttributeTypeName,PimAttributeDefaultValueId,PimAttributeId,AttributeDefaultValueCode)
					--Call Process to insert default data value 
					EXEC Znode_ImportGetPimAttributeDefaultValue;
				END;
             ELSE
                BEGIN
                    DROP TABLE #DefaultAttributeValue;
                END;
             EXEC sys.sp_sqlexec
                  @SQLQuery;
          
             -- Split horizontal table into verticle table by column name and attribute Value with their 
             -- corresponding AttributeId, Default family , Default AttributeValue Id  
    --         DECLARE @PimProductDetail TABLE 
			 --(
			      
				-- PimAttributeId INT, PimAttributeFamilyId INT,ProductAttributeCode VARCHAR(300) NULL,
				--  ProductAttributeDefaultValueId INT NULL,PimAttributeValueId  INT NULL,LocaleId INT,
				--  PimProductId INT NULL,AttributeValue NVARCHAR(MAX) NULL,AssociatedProducts NVARCHAR(4000) NULL,ConfigureAttributeIds VARCHAR(2000) NULL,
				--  ConfigureFamilyIds VARCHAR(2000) NULL,RowNumber INT  INDEX Ix CLUSTERED (RowNumber) 
    --            );

			DECLARE @PimProductDetail TABLE 
			 (
			      
				  PimAttributeId INT, PimAttributeFamilyId INT,ProductAttributeCode VARCHAR(300) NULL,
				  ProductAttributeDefaultValueId INT NULL,PimAttributeValueId  INT NULL,LocaleId INT,
				  PimProductId INT NULL,AttributeValue NVARCHAR(MAX) NULL,AssociatedProducts NVARCHAR(4000) NULL,ConfigureAttributeIds VARCHAR(2000) NULL,
				  ConfigureFamilyIds VARCHAR(2000) NULL,RowNumber INT  
                );

		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
				
		SET @SQLQuery = ' insert into ZnodeImportSuccessLog (ImportedSku,ImportedProductId,ImportedGuId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate) 
		Select SKU, PimProductId , ''' + @NewGUID  + ''', '+ Convert(nvarchar(100),@UserId) +',''' + 
		Convert(nvarchar(100),@GetDate) + ''', '+ Convert(nvarchar(100),@UserId) +',''' + 
		Convert(nvarchar(100),@GetDate) + ''' from ' + @TableName ;
		EXEC	sp_executesql @SQLQuery

		SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
		EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount
		
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount 
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End

			
             -- Column wise split data from source table ( global temporary table ) and inserted into temporary table variable @PimProductDetail
             -- Add PimAttributeDefaultValue 
             DECLARE Cr_AttributeDetails CURSOR LOCAL FAST_FORWARD
             FOR SELECT PimAttributeId,AttributeTypeName,AttributeCode,IsRequired,SourceColumnName,PimAttributeFamilyId FROM @FamilyAttributeDetail  WHERE ISNULL(SourceColumnName, '') <> '';
             OPEN Cr_AttributeDetails;
             FETCH NEXT FROM Cr_AttributeDetails INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @PimAttributeFamilyId;
             WHILE @@FETCH_STATUS = 0
                 BEGIN
                    SET @NewProductId = 0;
                    SET @SQLQuery = ' SELECT '''+CONVERT(VARCHAR(100), @PimAttributeFamilyId)+''' PimAttributeFamilyId , PimProductId PimProductId ,'''+CONVERT(VARCHAR(100), @AttributeId)+''' AttributeId ,
									(SELECT TOP 1  PimAttributeDefaultValueId FROM #DefaultAttributeValue Where PimAttributeId =  '
									+ CONVERT(VARCHAR(100), @AttributeId)+'AND  AttributeDefaultValueCode = TN.['+@SourceColumnName+'] ) PimAttributeDefaultValueId ,['
									+ @SourceColumnName+'],'+CONVERT(VARCHAR(100), @LocaleId)+'LocaleId
									
									, RowNumber FROM '+@TableName+' TN';
                    INSERT INTO @PimProductDetail( PimAttributeFamilyId, PimProductId, PimAttributeId, ProductAttributeDefaultValueId, AttributeValue, LocaleId, RowNumber )
					EXEC sys.sp_sqlexec @SQLQuery;
                    FETCH NEXT FROM Cr_AttributeDetails INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @PimAttributeFamilyId;
                 END;
             CLOSE Cr_AttributeDetails;
             DEALLOCATE Cr_AttributeDetails;
			 Select * into #PimProductDetail from @PimProductDetail
			 UPDATE a 
			 SET ConfigureAttributeIds =  SUBSTRING((SELECT ','+CAST(c.PimAttributeId As VARCHAR(100)) 
			 FROM #PimProductDetail c 
			 INNER JOIN ZnodePimAttribute b ON (b.PimAttributeId = c.PimAttributeId)
			 WHERE IsConfigurable =1  AND c.RowNumber = a.RowNumber  FOR XML PATH('')),2,4000) 
			 FROM #PimProductDetail a 
			 WHERE EXISTS (SELECT TOP 1 1 FROM #PimProductDetail ab  WHERE ab.RowNumber = a.RowNumber AND	ab.ProductAttributeCode = 'ProductType' 
			 AND ab.AttributeValue = 'ConfigurableProduct' )

             -- In case of Yes/No : If value is not TRUE OR  1 then it will be  False else True
			 --If default Value set not need of hard code for IsActive
			 UPDATE ppdti SET ppdti.AttributeValue = CASE WHEN Upper(ISNULL(ppdti.AttributeValue, '')) in ( 'Yes','TRUE','1')  THEN 'true'  ELSE 'false' END FROM #PimProductDetail ppdti
                INNER JOIN #DefaultAttributeValue dav ON ppdti.PimAttributeId = dav.PimAttributeId WHERE   dav.AttributeTypeName = 'Yes/No';
             -- Pass product records one by one 
             DECLARE @IncrementalId INT= 1;
             DECLARE @SequenceId INT=
             (
                 SELECT MAX(RowNumber) FROM #PimProductDetail
             );
             DECLARE @PimProductDetailToInsert PIMPRODUCTDETAIL;  --User define table type to pass multiple records of product in single step
		

             WHILE @IncrementalId <= @SequenceId
                 BEGIN
					   	INSERT INTO @PimProductDetailToInsert(PimAttributeId,PimAttributeFamilyId,ProductAttributeCode,ProductAttributeDefaultValueId,
						PimAttributeValueId,LocaleId,PimProductId,AttributeValue,AssociatedProducts,ConfigureAttributeIds,ConfigureFamilyIds)
						SELECT PimAttributeId,PimAttributeFamilyId,ProductAttributeCode,ProductAttributeDefaultValueId,PimAttributeValueId,LocaleId,
						PimProductId,AttributeValue,AssociatedProducts,ConfigureAttributeIds,ConfigureFamilyIds FROM #PimProductDetail
						WHERE [#PimProductDetail].RowNumber = @IncrementalId; --AND RTRIM(LTRIM(AttributeValue)) <> '';

						Delete from @PimProductDetailToInsert where RTRIM(LTRIM(AttributeValue)) = '';
	                    --ORDER BY [@PimProductDetail].RowNumber;
                        ----Call process to finally insert data into 
                        ----------------------------------------------------------
						--1. [dbo].[ZnodePimProduct]
						--2. [dbo].[ZnodePimAttributeValue]
						--3. [dbo].[ZnodePimAttributeValueLocale]
						if Exists (select TOP 1 1 from @PimProductDetailToInsert)
							EXEC [Znode_ImportPartialInsertUpdatePimProduct] @PimProductDetail = @PimProductDetailToInsert,@UserID = @UserID,@status = @status OUT,@IsNotReturnOutput = 1;
				
						DELETE FROM @PimProductDetailToInsert;
						SET @IncrementalId = @IncrementalId + 1;
					
                 END;
             UPDATE ZnodeImportProcessLog SET Status = dbo.Fn_GetImportStatus(2), ProcessCompletedDate = Getdate() WHERE ImportProcessLogId = @ImportProcessLogId;
            -- COMMIT TRAN ImportProducts;
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE(),ERROR_LINE(),ERROR_PROCEDURE();
            -- UPDATE ZnodeImportProcessLog SET Status = dbo.Fn_GetImportStatus(3), ProcessCompletedDate = @GetDate WHERE ImportProcessLogId = @ImportProcessLogId;
            
			-- ROLLBACK TRAN ImportProducts;
         END CATCH;
     END;
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportPartialProcessProductData')
BEGIN 
	DROP PROCEDURE Znode_ImportPartialProcessProductData
END
GO
CREATE PROCEDURE [dbo].[Znode_ImportPartialProcessProductData]
(@TblGUID       NVARCHAR(255), 
 @UserId        INT, 
 @IsAutoPublish BIT           = 0
)
AS
    BEGIN

/*
	Summary :   Import PimProduct ( for partial attribute import ) 
	Process :   Read table ##ProductUpdate_GUID table, create import template with columns which is exists  in 
	ZnodePimAttribute table call import which is not dependent on family.
  	                  		  
	SourceColumnName: CSV file column headers
	Unit testing 
	drop table ##ProductUpdate_3 
  
	-- 	Create TABLE ##ProductUpdate_3 (SKU nvarchar(max), ProductName nvarchar(100),ProductType nvarchar(100))
	-- 	insert into ##ProductUpdate_3  Values ('apz231','sdsfd','SimpleProduct')
	-- 	insert into ##ProductUpdate_3  Values ('gr990', 'test','SimpleProduct')
	-- 	insert into ##ProductUpdate_3  Values ('ORRK3456','Test009','SimpleProduct')
	-- 	insert into ##ProductUpdate_3  Values ('hhhhhhh','Test009','dsfsdfsdf')
	-- 	select * from ##ProductUpdate_3
	
	--EXEC [Znode_ImportPartialProcessProductData] @TblGUID = '3', @UserId =2 

	--Select * from View_ManageLinkProductList 
	--select * from ZnodeImportSuccessLog
	--select * from ZnodeImportLog
  
	*/

        BEGIN TRY 
        SET NOCOUNT ON;
        DECLARE @NewuGuId NVARCHAR(255), @SpId BIGINT, @ImportHeadId INT;
        SET @NewuGuId = @TblGUID;-- NEWID()
        DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
        DECLARE @DefaultFamilyId INT= dbo.Fn_GetDefaultPimProductFamilyId();
        DECLARE @LocaleId INT= dbo.Fn_GetDefaultLocaleId();
        DECLARE @TemplateId INT, @Sql NVARCHAR(MAX)= '', @GlobalTableName NVARCHAR(500);
        DECLARE @ImportProcessLogId INT;
		SELECT @TemplateId = ImportTemplateId FROM ZnodeImportTemplate WHERE TemplateName = 'ProductUpdate'

        SET @SpId = @@SPID;
        SET @GlobalTableName = 'tempdb..[##PartialProductDetail' + CONVERT(NVARCHAR(500), @SpId) + ']';
        IF OBJECT_ID(@GlobalTableName, 'U') IS NOT NULL
            BEGIN
                SET @Sql = 'DROP TABLE ' + @GlobalTableName;
                EXEC sp_executesql 
                     @SQL;
        END;
        DECLARE @GlobalTemporaryTable NVARCHAR(255);
        DECLARE @CreateTableScriptSql NVARCHAR(MAX)= '', @InsertColumnName NVARCHAR(MAX), @UpdateTable2Column NVARCHAR(MAX), @UpdateTable3Column NVARCHAR(MAX), @UpdateTable4Column NVARCHAR(MAX), @ImportTableColumnName NVARCHAR(MAX), @ImportTableName VARCHAR(200), @TableName NVARCHAR(255)= 'tempdb..[##ProductUpdate_' + @TblGUID + ']', @Attribute NVARCHAR(MAX);
        DECLARE @Attributecode TABLE(Attrcode NVARCHAR(255));
        CREATE TABLE #Attributecode(Attrcode NVARCHAR(255));
        CREATE TABLE #ConfigurableAttributecode
        (SKU            NVARCHAR(255), 
         PimAttributeId INT, 
         DefaultValue   NVARCHAR(255), 
         AttributeCode  NVARCHAR(255), 
         ParentSKU      NVARCHAR(255)
        );
        SELECT @ImportHeadId = ImportHeadId
        FROM dbo.ZnodeImportHead
        WHERE Name = 'ProductUpdate';

        --DELETE FROM ZnodeImportLog	WHERE ImportProcessLogId IN (SELECT	ImportProcessLogId	FROM ZnodeImportProcessLog ZIPL
        --INNER JOIN ZnodeImportTemplate ZIT ON ZIPL.ImportTemplateId = ZIT.ImportTemplateId WHERE ZIT.TemplateName = 'ProductUpdate')
        --DELETE FROM ZnodeImportProcessLog	WHERE ImportTemplateId IN (SELECT ImportTemplateId FROM ZnodeImportTemplate WHERE TemplateName = 'ProductUpdate')

        DELETE FROM ZnodeImportTemplateMapping
        WHERE ImportTemplateId = @TemplateId
        --DELETE FROM ZnodeImportTemplate
        --WHERE TemplateName = 'ProductUpdate';
		if (isnull(@TemplateId,0) = 0 ) 
		Begin 
        INSERT INTO ZnodeImportTemplate
        (ImportHeadId,TemplateName, TemplateVersion,PimAttributeFamilyId, IsActive,  CreatedBy, 
         CreatedDate, 
         ModifiedBy, 
         ModifiedDate
        )
        VALUES
        (@ImportHeadId, 
         'ProductUpdate', 
         1, 
         NULL, 
         1, 
         2, 
         GETDATE(), 
         2, 
         GETDATE()
        );
        SET @TemplateId = @@Identity;
		END
		
        SET @SQL = '
		INSERT INTO ZnodeImportTemplateMapping ( ImportTemplateId, SourceColumnName, TargetColumnName, DisplayOrder, IsActive, IsAllowNull, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
		select ' + CONVERT(NVARCHAR(100), @TemplateId) + ', a.name, PA.AttributeCode,1,1,1,' + CONVERT(NVARCHAR(100), @UserId) + ' , ''' + CONVERT(NVARCHAR(100), @GetDate) + ''' , ' + CONVERT(NVARCHAR(100), @UserId) + ', ''' + CONVERT(NVARCHAR(100), @GetDate) + '''  
		from tempdb.sys.columns a
		inner join tempdb.sys.tables b on a.object_id = b.object_id 
		inner join ZnodePimAttribute PA on a.name = PA.AttributeCode AND PA.IsCategory =0  
		where b.name in (''##ProductUpdate_' + @TblGUID + ''') ';
        EXEC (@SQL);
        --------------------------------------------
        DECLARE @SQLQuery NVARCHAR(MAX);
        IF OBJECT_ID('#WrongData', 'U') IS NOT NULL
            BEGIN
                DROP TABLE #WrongData;
        END;
        CREATE TABLE #WrongData(ColumnName NVARCHAR(100));
        SET @SQLQuery = ' INSERT INTO #WrongData (ColumnName )
		Select a.Name from tempdb.sys.columns a
		inner join tempdb.sys.tables b on a.object_id = b.object_id 
		where b.name in (''##ProductUpdate_' + @TblGUID + ''') 
		and NOT EXISTS (Select TOP 1 1 FROM ZnodePimAttribute PA WHERE a.name = PA.AttributeCode) AND a.Name not in (''SKU'',''guid'') ';
        EXEC sys.sp_sqlexec 
             @SQLQuery;
        SET @ImportProcessLogId = 0;
        IF EXISTS
        (
            SELECT TOP 1 1
            FROM #WrongData
        )
            BEGIN
                INSERT INTO ZnodeImportProcessLog
                (ImportTemplateId, 
                 STATUS, 
                 ProcessStartedDate, 
                 ProcessCompletedDate, 
                 CreatedBy, 
                 CreatedDate, 
                 ModifiedBy, 
                 ModifiedDate, 
                 ERPTaskSchedulerId
                )
                       SELECT NULL, 
                              dbo.Fn_GetImportStatus(3), 
                              @GetDate, 
                              NULL, 
                              @UserId, 
                              @GetDate, 
                              @UserId, 
                              @GetDate, 
                              NULL;
                SET @ImportProcessLogId = @@IDENTITY;
                SET @SQLQuery = '
			INSERT INTO ZnodeImportLog
					(ErrorDescription,ColumnName,Data,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId,RowNumber )
			Select 19 ,''Attribute '', ColumnName, ''' + @TblGUID + ''',' + CONVERT(NVARCHAR(100), @UserId) + ',''' + CONVERT(NVARCHAR(100), @GetDate) + ''',' + CONVERT(NVARCHAR(100), @UserId) + ',''' + CONVERT(NVARCHAR(100), @GetDate) + ''',' + CONVERT(NVARCHAR(100), @ImportProcessLogId) + ',' + ' NULL  from #WrongData ';
                EXEC sys.sp_sqlexec 
                     @SQLQuery;

                --SELECT	'Job create successfully.'
                --Return 0 

        END;
        --------------------------------------------

        SELECT @InsertColumnName = SUBSTRING(
        (
            SELECT ',[' + [TargetColumnName] + ']'
            FROM [dbo].[ZnodeImportTemplateMapping]
            WHERE [ImportTemplateId] = @TemplateId FOR XML PATH('')
        ), 2, 4000);
	
        SELECT @CreateTableScriptSql = 'CREATE TABLE ' + @GlobalTableName + ' (' + SUBSTRING(
        (
            SELECT ',[' + ISNULL([TargetColumnName], 'NULL') + '] nvarchar(max)'
            FROM [dbo].[ZnodeImportTemplateMapping]
            WHERE [ImportTemplateId] = @TemplateId FOR XML PATH('')
        ), 2, 4000) + ' , GUID nvarchar(255))';
		
        EXEC (@CreateTableScriptSql);
        IF(LEN(@InsertColumnName) > 0)
            BEGIN
                SET @SQL = 'INSERT INTO ' + @GlobalTableName + ' ( ' + @InsertColumnName + ' )	SELECT ' + @InsertColumnName + ' FROM ' + @TableName;
                PRINT @sql;
                EXEC sp_executesql 
                     @SQL;
        END;
		
		
        DECLARE @UpdateTableColumn VARCHAR(MAX);
        SET @Sql = 'UPDATE ' + @GlobalTableName + ' SET GUID= ''' + @NewuGuId + '''';
        EXEC sp_executesql 
             @SQL;
			
        --SET @Sql = 'DELETE FROM ' + @GlobalTableName + '  WHERE ISNULL(SKU, '''') = ''''' 
        --EXEC sp_executesql @SQL

        SET @Sql = 'Update ' + @GlobalTableName + ' SET SKU = Ltrim(Rtrim(SKU)) ';
        EXEC sp_executesql 
             @SQL;

        ---- Import product    
        EXEC Znode_ImportData 
             @TableName = @GlobalTableName, 
             @NewGUID = @TblGUID, 
             @TemplateId = @TemplateId, 
             @UserId = @UserId, 
             @LocaleId = @LocaleId, 
             @DefaultFamilyId = @DefaultFamilyId, 
             @PriceListId = 0, 
             @CountryCode = '',
             --,@IsDoNotCreateJob = 0
             --,@IsDoNotStartJob = 0
             --,@StepName = 'Import'-- 	,@IsDebug = 1  
             @IsAutoPublish = @IsAutoPublish, 
             @ImportProcessLogId = @ImportProcessLogId;
        SELECT 'Job create successfully.';
        END TRY
        BEGIN CATCH 
        DECLARE @Status BIT ;
        select ERROR_MESSAGE ()
        SET @Status = 0;
        DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
        @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportPartialProcessProductData @TblGUID = '''+ISNULL(@TblGUID,'''''')+''',@UserId='+ISNULL(CAST(@UserId AS
        VARCHAR(50)),'''''')+',@IsAutoPublish='+ISNULL(CAST(@IsAutoPublish AS VARCHAR(50)),'''')
        SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
        EXEC Znode_InsertProcedureErrorLog
        @ProcedureName = 'Znode_ImportPartialProcessProductData',
        @ErrorInProcedure = 'Znode_ImportPartialProcessProductData',
        @ErrorMessage = @ErrorMessage,
        @ErrorLine = @ErrorLine,
        @ErrorCall = @ErrorCall;
        END CATCH 

    END;
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportPartialValidatePimProductData')
BEGIN 
	DROP PROCEDURE Znode_ImportPartialValidatePimProductData
END
GO
CREATE PROCEDURE [dbo].[Znode_ImportPartialValidatePimProductData]
(   @ImportHeadName     VARCHAR(200),
    @TableName          VARCHAR(200),
    @NewGUID            NVARCHAR(200),
    @TemplateId         INT,
    @UserId             INT,
    @LocaleId           INT           = 1,
    @IsCategory         INT           = 0,
    @DefaultFamilyId    INT           = 0,
    @ImportProcessLogId INT,
    @PriceListId        INT,
	@CountryCode VARCHAR(100) = '',
	@PimCatalogId         INT    = 0 ,
	@PortalId int = 0,
	@IsAccountAddress bit = 0  )
AS
     SET NOCOUNT ON;

/*
    Summary :   Import PimProduct ( for partial attribute import ) 
    Process :   Admin site will upload excel / csv file in database and create global temporary table
				Procedure Znode_ImportValidatePimProductData will validate data with attribute validation rule
				If datatype validation issue found in input daata will logged into table "ZnodeImportLog"
				If Data is correct and record count in table ZnodeImportLog will be 0 then process for import data into Base tables
				To import data call procedure "Znode_ImportPimProductData"
    		  
				SourceColumnName: CSV file column headers
				TargetColumnName: Attributecode from ZnodePimAttribute Table (Consider those Attributecodes configured with default family only)
*/

     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             --BEGIN TRAN TRN_ImportValidProductData;
             DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
             DECLARE @SQLQuery NVARCHAR(MAX), @AttributeTypeName NVARCHAR(10), @AttributeCode NVARCHAR(300), @AttributeId INT, @IsRequired BIT, @SourceColumnName NVARCHAR(600), @ControlName VARCHAR(300), @ValidationName VARCHAR(100), @SubValidationName VARCHAR(300), @ValidationValue VARCHAR(300), @RegExp VARCHAR(300), @CreateDateString NVARCHAR(300), @DefaultLocaleId INT, @ImportHeadId INT, @CheckedSourceColumn NVARCHAR(600)= '', @Status BIT= 0,
			    @CsvColumnString nvarchar(max), @FailedRecordCount BIGINT,
				@SuccessRecordCount BIGINT
             DECLARE @FamilyAttributeDetail TABLE
             (PimAttributeId       INT,
              AttributeTypeName    VARCHAR(300),
              AttributeCode        VARCHAR(300),
              SourceColumnName     NVARCHAR(600),
              IsRequired           BIT,
              PimAttributeFamilyId INT
             );
             DECLARE @AttributeDetail TABLE
             (PimAttributeId    INT,
              AttributeTypeName VARCHAR(300),
              AttributeCode     VARCHAR(300),
              SourceColumnName  NVARCHAR(600),
              IsRequired        BIT,
              ControlName       VARCHAR(300),
              ValidationName    VARCHAR(100),
              SubValidationName VARCHAR(300),
              ValidationValue   VARCHAR(300),
              RegExp            VARCHAR(300)
             );

             DECLARE @GlobalTempTableColumns TABLE(ColumnName NVARCHAR);
             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM INFORMATION_SCHEMA.TABLES
                 WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#InvalidDefaultData'
             )
                 CREATE TABLE #InvalidDefaultData
                 (RowNumber  INT,
                  Value      NVARCHAR(MAX),
                  ColumnName NVARCHAR(600)
                 );
             ELSE
             DROP TABLE #InvalidDefaultData;
             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM INFORMATION_SCHEMA.TABLES
                 WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#GlobalTempTableColumns'
             )
                 BEGIN

                     SET @SQLQuery = 'SELECT Column_Name, '''+@ImportHeadName+''' AS ImportHeadName  from tempdb.INFORMATION_SCHEMA.COLUMNS	where table_name = object_name(object_id('''+@TableName+'''),
					(select database_id from sys.databases where name = ''tempdb''))';
                     CREATE TABLE #GlobalTempTableColumns
                     (ColumnName   NVARCHAR(MAX),
                      TypeOfImport NVARCHAR(100)
                     );
                     INSERT INTO #GlobalTempTableColumns
                     (ColumnName,
                      TypeOfImport
                     )
                     EXEC sys.sp_sqlexec
                          @SQLQuery;
                 END;
		  -- If Exists ( Select  count(1)  from #GlobalTempTableColumns GROUP BY ColumnName  Having count(1) > 1 )
		  -- Begin
			 --   INSERT INTO ZnodeImportLog(ErrorDescription,ColumnName,Data,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
    --               Select  46,ColumnName,'',@newGUID,@UserId,@GetDate,@UserId,@GetDate, @ImportProcessLogId  from #GlobalTempTableColumns GROUP BY ColumnName  Having count(1) > 1 
				
				----'Multiple occurance of column are not allow for'
		  -- END

             IF EXISTS
             (
                 SELECT TOP 1 1
                 FROM #GlobalTempTableColumns
                 WHERE ColumnName IN('PimCategoryId', 'PimProductId', 'RowNumber')
             )
                 BEGIN
                     INSERT INTO ZnodeImportLog
                     (ErrorDescription,
                      ColumnName,
                      Data,
                      GUID,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate,
                      ImportProcessLogId
                     )
                     VALUES
                     (43,
                      '',
                      '',
                      @newGUID,
                      @UserId,
                      @GetDate,
                      @UserId,
                      @GetDate,
                      @ImportProcessLogId
                     );
                 END;
             SET @DefaultLocaleId = dbo.Fn_GetDefaultLocaleId();
             --Remove old error log 
             --DELETE FROM ZnodeImportLog WHERE ImportProcessLogId in (select ImportProcessLogId  FROM ZnodeImportProcessLog  WHERE ImportTemplateId  = @TemplateId )
             --GUID = @NewGUID;
             --Delete FROM ZnodeImportProcessLog  WHERE ImportTemplateId  = @TemplateId 
		
             IF NOT EXISTS
             (
                 SELECT TOP 1 1  FROM ZnodeImportLog
                 WHERE Guid = @NewGUID
                       AND ErrorDescription IN(43, 42)
                 AND ImportProcessLogId = @ImportProcessLogId
             )
                 BEGIN
                     IF @ImportHeadName = 'ProductUpdate'
                      BEGIN
						  IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
							  SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimProductId int null ';
						  ELSE 
							 SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimProductId int null Primary KEY CLUSTERED(RowNumber)';
						 
						  EXEC sys.sp_sqlexec @SQLQuery;
			         END;
                     ELSE
                     IF @ImportHeadName = 'Category'
                         BEGIN
							  IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimCategoryId int null ';
							  ElSE
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimCategoryId int null Primary KEY CLUSTERED(RowNumber) ';
						  
							  EXEC sys.sp_sqlexec @SQLQuery;
                         END;
                     ELSE
                         BEGIN
							IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1) ';
							Else 
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1) Primary KEY CLUSTERED(RowNumber)';
							
							EXEC sys.sp_sqlexec @SQLQuery;
                         END;;
                 END



			--Retrive PimProductId on the basis of SKU for update product 
			SET @SQLQuery = 'UPDATE tlb SET tlb.PimProductId = ZPAV.PimProductId 
							FROM ZnodePimAttributeValue AS ZPAV INNER JOIN ZnodePimAttributeValueLocale AS ZPAVL ON 
							(ZPAVL.PimAttributeValueId = ZPAV.PimAttributeValueId) 
							INNER JOIN [dbo].[ZnodePimAttribute] ZPA on ZPAV.PimAttributeId = ZPA.PimAttributeId AND ZPA.AttributeCode= ''SKU'' 
							INNER JOIN '+@TableName+' tlb ON ZPAVL.AttributeValue = ltrim(rtrim(tlb.SKU)) ';
			EXEC sys.sp_sqlexec	@SQLQuery	 	
	
			SET @SQLQuery = 'Select 19 ,''SKU'', SKU, '''+ @newGUID + ''',' + Convert(nvarchar(100),@UserId) + ',''' +  Convert(nvarchar(100),@GetDate) + ''',' + Convert(nvarchar(100),@UserId) + ',''' + Convert(nvarchar(100),@GetDate) + ''',' +  Convert(nvarchar(100),@ImportProcessLogId)  + ',RowNumber   from  '+ @TableName + ' where PimProductId Is null ';
			INSERT INTO ZnodeImportLog
                     (ErrorDescription,ColumnName,Data,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId,RowNumber )
        	EXEC sys.sp_sqlexec	@SQLQuery	 	


			--SET @SQLQuery = '
			--INSERT INTO ZnodeImportLog
			--		(ErrorDescription,ColumnName,Data,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId,RowNumber )
			--Select 19 ,''Attribute '', a.Name , '''+ @NewGUID + ''',' + Convert(nvarchar(100),@UserId) + ',''' +  Convert(nvarchar(100),@GetDate) + ''',' + Convert(nvarchar(100),@UserId) + ',''' + Convert(nvarchar(100),@GetDate) + ''',' +  Convert(nvarchar(100),@ImportProcessLogId)  + ',' +
			--' NULL  from tempdb.sys.columns a
			--inner join tempdb.sys.tables b on a.object_id = b.object_id 
			--where b.name in (''##ProductUpdate_' + @NewGUID +''') 
			--and NOT EXISTS (Select TOP 1 1 FROM ZnodePimAttribute PA WHERE a.name = PA.AttributeCode) AND a.Name <> ''guid''' 

   --     	EXEC sys.sp_sqlexec	@SQLQuery	 	

			SET @SQLQuery = 'Delete from  '+@TableName+ ' where PimProductId Is null ';
			EXEC sys.sp_sqlexec	@SQLQuery	 	
			
			DECLARE @RecordCount Bigint 
			SET @SQLQuery = ' Select @RecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
			EXEC sp_executesql @SQLQuery, N'@RecordCount BIGINT out' , @RecordCount=@RecordCount out


			--Generate new process for current import 
            --INSERT INTO ZnodeImportProcessLog(ImportTemplateId,Status,ProcessStartedDate,ProcessCompletedDate,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
            --SELECT @TemplateId,dbo.Fn_GetImportStatus(0),@GetDate,NULL,@UserId,@GetDate,@UserId,@GetDate;
            --SET @ImportProcessLogId = @@IDENTITY;

             SET @CreateDateString = CONVERT(VARCHAR(100), @UserId)+','''+CONVERT(VARCHAR(100), @GetDate)+''','+CONVERT(VARCHAR(100), @UserId)+','''+CONVERT(VARCHAR(100), @GetDate)+''', '+CONVERT(VARCHAR(100), @ImportProcessLogId);

             SELECT TOP 1 @ImportHeadId = ImportHeadId FROM ZnodeImportTemplate WHERE ImportTemplateId = @TemplateId;
             IF @ImportHeadName IN('ProductUpdate') AND @RecordCount > 0  
                 BEGIN 
					SET @IsCategory = 0 
				    --Get all default attribute values in attribute 
                    INSERT INTO @FamilyAttributeDetail
                    (PimAttributeId,AttributeTypeName,AttributeCode,SourceColumnName,IsRequired,PimAttributeFamilyId)
                    --Call Process to insert data of defeult family with source column name and target column name 
					SELECT distinct zpa.PimAttributeId, zat.AttributeTypeName, zpa.AttributeCode, zitm.SourceColumnName, zpa.IsRequired ,0
					FROM dbo.ZnodePimAttribute AS zpa INNER JOIN dbo.ZnodeAttributeType AS zat ON zat.AttributeTypeId = zpa.AttributeTypeId 
					LEFT OUTER JOIN dbo.ZnodeImportTemplateMapping AS zitm
					ON zpa.AttributeCode = zitm.SourceColumnName AND zitm.ImportTemplateId = @TemplateId
					WHERE zpa.IsCategory = 0 
	             END;
            -- Check attributes are manditory and not provided with source table
		   	if @TABLENAME	like '%tempdb..%'
				SET @SQLQuery = 'SELECT 42 AS ErrorDescription , SourceColumnName , '''' , '''+@NewGUID+''','+@CreateDateString+' from ZnodeImportTemplateMapping where ImportTemplateId = '+CONVERT(VARCHAR(100), @TemplateId)+' and ltrim(rtrim(SourceColumnName)) <> '''' AND ltrim(rtrim(SourceColumnName)) not in ( select isnull(Name ,'''') from tempdb.sys.columns where object_id = object_id('''+@TABLENAME+'''));';
			else 
				SET @SQLQuery = 'SELECT 42 AS ErrorDescription , SourceColumnName , '''' , '''+@NewGUID+''','+@CreateDateString+' from ZnodeImportTemplateMapping where ImportTemplateId = '+CONVERT(VARCHAR(100), @TemplateId)+' and ltrim(rtrim(SourceColumnName)) <> '''' AND ltrim(rtrim(SourceColumnName)) not in ( select isnull(Name ,'''') from sys.columns where object_id = object_id('''+@TABLENAME+'''));';
		 
		 
     		INSERT INTO ZnodeImportLog(ErrorDescription, ColumnName, Data, GUID,CreatedBy, CreatedDate,  ModifiedBy,ModifiedDate,ImportProcessLogId )
            EXEC sys.sp_sqlexec  @SQLQuery;
            IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM ZnodeImportLog
                 WHERE Guid = @NewGUID
                       AND ErrorDescription IN(43, 42)
                 AND ImportProcessLogId = @ImportProcessLogId
             )  AND @RecordCount > 0  
                 BEGIN
                     --Get all default attribute values in attribute 
                     IF @ImportHeadName IN('ProductUpdate', 'Category')
                         BEGIN
                             -- Check attributes are manditory and not provided with source table
                             --INSERT INTO ZnodeImportLog
                             --(ErrorDescription,
                             -- ColumnName,
                             -- Data,
                             -- GUID,
                             -- CreatedBy,
                             -- CreatedDate,
                             -- ModifiedBy,
                             -- ModifiedDate,
                             -- ImportProcessLogId
                             --)
                             --       SELECT '14' AS ErrorDescription,
                             --              AttributeCode,
                             --              '',
                             --              @NewGUID,
                             --              @UserId,
                             --              @GetDate,
                             --              @UserId,
                             --              @GetDate,
                             --              @ImportProcessLogId
                             --       FROM @FamilyAttributeDetail
                             --       WHERE ISNULL(SourceColumnName, '') = ''
                             --             AND IsRequired = 1;  

                             -- Read all attribute details with their datatype
                             INSERT INTO @AttributeDetail
                             (PimAttributeId,
                              AttributeTypeName,
                              AttributeCode,
                              SourceColumnName,
                              IsRequired,
                              ControlName,
                              ValidationName,
                              SubValidationName,
                              ValidationValue,
                              RegExp
                             )
                             EXEC Znode_ImportGetTemplateDetails
                                  @TemplateId=@TemplateId,
								  @DefaultFamilyId=@DefaultFamilyId;

							 ---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
							 Delete FAD from @AttributeDetail FAD
							 where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
							 and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
										   inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)

                             DELETE FROM @AttributeDetail
                             WHERE AttributeTypeName = 'Image'
                                   AND ValidationName <> 'IsAllowMultiUpload';
                             IF NOT EXISTS
                             (
                                 SELECT TOP 1 1
                                 FROM INFORMATION_SCHEMA.TABLES
                                 WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#DefaultAttributeCode'
                             )
                                 BEGIN
                                     CREATE TABLE #DefaultAttributeCode
                                     (AttributeTypeName          VARCHAR(300),
                                      PimAttributeDefaultValueId INT,
                                      PimAttributeId             INT,
                                      AttributeDefaultValueCode  VARCHAR(100)
                                     );
                                     INSERT INTO #DefaultAttributeCode
                                     (AttributeTypeName,
                                      PimAttributeDefaultValueId,
                                      PimAttributeId,
                                      AttributeDefaultValueCode
                                     )
                                     --Call Process to insert default data value 
                                     EXEC Znode_ImportGetPimAttributeDefaultValue;
                                     DELETE FROM #DefaultAttributeCode
                                     WHERE AttributeTypeName = 'Yes/No';
                                 END;
                             ELSE
                                 BEGIN
                                     DROP TABLE #DefaultAttributeCode;
                                 END;
                         END;

                     --	Check attributes are not mapped with (Default / Other) family of Pim Product
                     --	INSERT INTO ZnodeImportLog ( ErrorDescription , ColumnName , Data , GUID , CreatedBy , CreatedDate , ModifiedBy , ModifiedDate , ImportProcessLogId)
                     --	SELECT '1' AS ErrorDescription , SourceColumnName , '' , @NewGUID , @UserId , @GetDate , @UserId , @GetDate , @ImportProcessLogId
                     --	FROM @AttributeDetail WHERE PimAttributeId NOT IN ( SELECT zpfgm.PimAttributeId FROM dbo.ZnodePimFamilyGroupMapper AS zpfgm);
                     --	Verify data in global temporary table (column wise)
						
                     DECLARE Cr_Attribute CURSOR LOCAL FAST_FORWARD
                     FOR SELECT PimAttributeId,
                                AttributeTypeName,
                                AttributeCode,
                                IsRequired,
                                SourceColumnName,
                                ControlName,
                                ValidationName,
                                SubValidationName,
                                ValidationValue,
                                RegExp
                         FROM @AttributeDetail
                         WHERE ISNULL(SourceColumnName, '') <> '';
                     OPEN Cr_Attribute;
                     FETCH NEXT FROM Cr_Attribute INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @ControlName, @ValidationName, @SubValidationName, @ValidationValue, @RegExp;
                     WHILE @@FETCH_STATUS = 0
                         BEGIN
				             IF @AttributeTypeName = 'Number'
                                 BEGIN
							      EXEC Znode_ImportValidateNumber
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @ImportHeadId = @ImportHeadId,
                                          @ImportProcessLogId = @ImportProcessLogId;
                                 END;
							 -- Check invalid date
							
                             IF @AttributeTypeName = 'Date'
                                 BEGIN
                                     EXEC Znode_ImportValidateDate
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @ImportHeadId = @ImportHeadId,
                                          @ImportProcessLogId = @ImportProcessLogId;
                                 END;
							 -- Check Manditory Data
		 					 IF @IsRequired = 1 AND @CheckedSourceColumn <> @SourceColumnName
								BEGIN
									SET @CheckedSourceColumn = @SourceColumnName;
									EXEC Znode_ImportValidateManditoryData
									@TableName = @TableName,
									@SourceColumnName = @SourceColumnName,
									@CreateDateString = @CreateDateString,
									@ValidationName = @ValidationName,
									@ControlName = @ControlName,
									@ValidationValue = @ValidationValue,
									@NewGUID = @NewGUID,
									@ImportHeadId = @ImportHeadId;
								END;
							 --END 
							
                             IF @AttributeTypeName = 'Text'
                                 BEGIN
								 
						              EXEC Znode_ImportValidateManditoryText
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @LocaleId = @LocaleId,
                                          @DefaultLocaleId = @DefaultLocaleId,
                                          @AttributeId = @AttributeId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @ImportHeadId = @ImportHeadId;
                                 END;
                             IF @AttributeTypeName = 'Image'
                                 BEGIN
                                     EXEC Znode_ImportValidateImageData
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @LocaleId = @LocaleId,
                                          @DefaultLocaleId = @DefaultLocaleId,
                                          @AttributeId = @AttributeId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @ImportHeadId = @ImportHeadId;
                                 END;
                             --Check Default data value is valid 
                             IF @ImportHeadName IN('ProductUpdate', 'Category')
                                 BEGIN
                                     IF @AttributeId IN
                                     (
                                         SELECT PimAttributeId
                                         FROM #DefaultAttributeCode
                                     )
                                         BEGIN
							
                                                   ---Verify Image file is exists in media table or not 
                                             SET @SQLQuery = ' INSERT INTO #InvalidDefaultData (RowNumber, Value, ColumnName) 
                                             SELECT ROWNUMBER , (Select TOP 1 Item from dbo.split(' + @SourceColumnName + ','','')  SP WHERE NOT EXISTS 
                                             (Select ToP 1 1 FROM #DefaultAttributeCode DAC WHERE 
                                              DAC.AttributeTypeName <> ''Yes/No'' AND DAC.AttributeDefaultValueCode IS NOT NULL AND DAC.PimAttributeId = 
                                             ' + CONVERT(VARCHAR(100), @AttributeId) + ' AND ltrim(rtrim(SP.Item) ) = DAC.AttributeDefaultValueCode
                                             )), ''' + @SourceColumnName + ''' as [ColumnName]  FROM ' + @TableName
                                             + ' Where ISnull(' + @SourceColumnName +  ','''') <> '''''

						
                                             EXEC sys.sp_sqlexec @SQLQuery;
                                             -- Check Invalid Image 
                                             
											 SET @SQLQuery = 'SELECT ''9 '' ErrorDescription,'''+@SourceColumnName+''' as [ColumnName], 
                                             Value AS  AttributeValue,RowNumber ,'''+@NewGUID+''',  '+@CreateDateString+' FROM #InvalidDefaultData Where Value IS NOT NULL'
                                             INSERT INTO ZnodeImportLog (ErrorDescription, ColumnName, Data, RowNumber, GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
                                             EXEC sys.sp_sqlexec @SQLQuery;

											 Delete from #InvalidDefaultData

       
                                         END;
                                 END;
							
                             FETCH NEXT FROM Cr_Attribute INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @ControlName, @ValidationName, @SubValidationName, @ValidationValue, @RegExp;
                         END;
                     CLOSE Cr_Attribute;
                     DEALLOCATE Cr_Attribute;
                     --SELECT top 1 1 FROM @FamilyAttributeDetail where  iSNULL(SourceColumnName,'') = ''  and IsRequired = 1
                 END;
            --COMMIT TRAN TRN_ImportValidProductData;
			 

		IF @ImportHeadName IN('ProductUpdate')
		 BEGIN
		 Declare @SQLQueryNew NVARCHAR(4000)
		 Declare @SourceColumnNameProduct nvarchar(4000)   	 
		 SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'SKU'
		 AND ImportTemplateId = @TemplateId

		
  	--	 SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName = ''SKU  '' + ' + '  ' +@SourceColumnNameProduct + ' ' + ' + ' + ' '  + ' ZIL.ColumnName + ''  Attribute''
		 --FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			--  WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber is not null';
            
			--SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  SKU - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		 --   FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			--WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
   --         PRINT @SQLQueryNew

            SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  SKU - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew

			EXEC sys.sp_sqlexec  @SQLQueryNew;
			
		END 

					 	 		 
  			 SET @SQLQuery = 'Delete FROM  '+@TableName+' Where Rownumber in (Select Rownumber from ZnodeImportLog  WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND Rownumber is not null)';
             EXEC sys.sp_sqlexec  @SQLQuery;

			 ---------------------------------------------------------------------------

		--	 Declare @SourceColumnNameProduct nvarchar(4000)  
		--	 Declare @SQLQueryNew NVARCHAR(4000) 	 
		-- SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'SKU'
		-- AND ImportTemplateId = @TemplateId


		--INSERT INTO ZnodeImportLog  (ErrorDescription,ColumnName, Data, GUID,CreatedBy,
  --          CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
		--	EXEC sys.sp_sqlexec  @SQLQueryNew;

		--	SET @SQLQueryNew = 'SELECT ''Successfully Imported '' ErrorDescription,''SKU'',
		--	'''+@SourceColumnNameProduct+''' AS [Data], 
  --          RowNumber ,'''+@NewGUID+''',  '+@CreateDateString+' FROM '+@TableName+' WHERE Rownumber IS NOT NULL'

------------------------------------------------------------------------------------------------

		 --SET @SQLQuery = 'Select *  FROM  '+@TableName
   --          EXEC sys.sp_sqlexec  @SQLQuery;

             IF @ImportHeadName IN('ProductUpdate')
                 BEGIN
                     IF NOT EXISTS
                
					 (
						 SELECT TOP 1 1
						 FROM ZnodeImportLog
						 WHERE Guid = @NewGUID
							   AND ErrorDescription IN (43, 42)
						 AND ImportProcessLogId = @ImportProcessLogId
					 ) AND @RecordCount > 0 
                         BEGIN
                             IF @IsCategory = 0
                                 BEGIN
                                     EXEC Znode_ImportPartialPimProductData
                                          @TableName = @TableName,
                                          @NewGUID = @NewGUID,
                                          @TemplateId = @TemplateId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @UserId = @UserId,
                                          @LocaleId = @LocaleId,
                                          @DefaultFamilyId = @DefaultFamilyId;
	
                                 END;
                            
                         END;

					ELSE 
					BEGIN
					-- Update Record count in log 					
					SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
					SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
					EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount out
					UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount , TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
					WHERE ImportProcessLogId = @ImportProcessLogId;
					END

                 END
				
			SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
			SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
			
			EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount out

			UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
			WHERE ImportProcessLogId = @ImportProcessLogId;

		   EXEC Znode_ImportReadErrorLog
                  @ImportProcessLogId = @ImportProcessLogId,
                  @NewGUID = @NewGUID;
             DROP TABLE #GlobalTempTableColumns;

             -- Finally call product insert process if error not found in error log table 
             IF EXISTS
             (
                 SELECT TOP 1 1
                 FROM ZnodeImportLog
                 WHERE ImportProcessLogId = @ImportProcessLogId
                       AND Guid = @NewGUID
             )
                 BEGIN
                     --Update process with completed status for current import 
                     UPDATE ZnodeImportProcessLog
                       SET
                           Status = dbo.Fn_GetImportStatus(3),
                           ProcessCompletedDate =  Getdate() 
                       WHERE ImportProcessLogId = @ImportProcessLogId;
                 END;
		
				--SET @SQLQuery = 'select TOP 1 * from  ' + @TableName
				--EXEC sys.sp_sqlexec @SQLQuery;
        END TRY
      
		BEGIN CATCH 
			EXEC Znode_ImportReadErrorLog   @ImportProcessLogId = @ImportProcessLogId,  @NewGUID = @NewGUID; 
				--Update process with failed status for current import 
			--	UPDATE ZnodeImportProcessLog SET Status = dbo.Fn_GetImportStatus(3),ProcessCompletedDate = @GetDate WHERE ImportProcessLogId = @ImportProcessLogId;

			SET @Status = 0;
			DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportPartialValidatePimProductData @ImportHeadName = '''+ISNULL(@ImportHeadName,'''''')+''',@TableName='''+ISNULL(CAST(@TableName AS
			VARCHAR(50)),'''''')+''',@TemplateId='+ISNULL(CAST(@TemplateId AS VARCHAR(50)),'''')+',@NewGUID='''+ISNULL(@NewGUID,'''''')+''',@UserId='+ISNULL(CAST(@UserId AS VARCHAR(50)),'''')+',@LocaleId='+ISNULL(CAST(@LocaleId AS VARCHAR(50)),'''')+',
			@IsCategory='+ISNULL(CAST(@IsCategory AS VARCHAR(50)),'''')+',@DefaultFamilyId='+ISNULL(CAST(@DefaultFamilyId AS VARCHAR(50)),'''')+',@ImportProcessLogId='+ISNULL(CAST(@ImportProcessLogId AS VARCHAR(50)),'''')+',
			@PriceListId='+ISNULL(CAST(@PriceListId AS VARCHAR(50)),'''')+',@CountryCode='''+ISNULL(CAST(@CountryCode AS VARCHAR(50)),'''''')+''',@PimCatalogId='+ISNULL(CAST(@PimCatalogId AS VARCHAR(50)),'''')+',
			@PortalId='+ISNULL(CAST(@PortalId AS VARCHAR(50)),'''')+',@IsAccountAddress='+ISNULL(CAST(@IsAccountAddress AS VARCHAR(50)),'''')

			SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    

			EXEC Znode_InsertProcedureErrorLog
			@ProcedureName = 'Znode_ImportPartialValidatePimProductData',
			@ErrorInProcedure = 'Znode_ImportPartialValidatePimProductData',
			@ErrorMessage = @ErrorMessage,
			@ErrorLine = @ErrorLine,
			@ErrorCall = @ErrorCall;
		END CATCH 

     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportInventory_Ver1')
BEGIN 
	DROP PROCEDURE Znode_ImportInventory_Ver1
END
GO

CREATE PROCEDURE [dbo].[Znode_ImportInventory_Ver1](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200))
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import Inventory data 
	--		   Input data in XML format Validate data with all scenario 
	-- Unit Testing : 
	--BEGIN TRANSACTION;
	--update ZnodeGlobalSetting set FeatureValues = '5' WHERE FeatureName = 'InventoryRoundOff' 
	--    DECLARE @status INT;
	--    EXEC [Znode_ImportInventory] @InventoryXML = '<ArrayOfImportInventoryModel>
	-- <ImportInventoryModel>
	--   <SKU>S1002</SKU>
	--   <Quantity>999998.33</Quantity>
	--   <ReOrderLevel>10</ReOrderLevel>
	--   <RowNumber>1</RowNumber>
	--   <ListCode>TestInventory</ListCode>
	--   <ListName>TestInventory</ListName>
	-- </ImportInventoryModel>
	--</ArrayOfImportInventoryModel>' , @status = @status OUT , @UserId = 2;
	--    SELECT @status;
	--    ROLLBACK TRANSACTION;
	--------------------------------------------------------------------------------------

BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @RoundOffValue int, @MessageDisplay nvarchar(100), @MessageDisplayForFloat nvarchar(100);
		DECLARE @GetDate datetime= dbo.Fn_GetDate();
		-- Retrive RoundOff Value from global setting 
		SELECT @RoundOffValue = FeatureValues
		FROM ZnodeGlobalSetting
		WHERE FeatureName = 'InventoryRoundOff';
		
		IF OBJECT_ID('tempdb.dbo.#InserInventoryForValidation', 'U') IS NOT NULL 
		DROP TABLE tempdb.dbo.#InserInventoryForValidation
		
		IF OBJECT_ID('tempdb.dbo.#InsertInventory ', 'U') IS NOT NULL 
		DROP TABLE tempdb.dbo.#InsertInventory 

		--@MessageDisplay will use to display validate message for input inventory value  

		DECLARE @sSql nvarchar(max);
		SET @sSql = ' Select @MessageDisplay_new = Convert(Numeric(28, '+CONVERT(nvarchar(200), @RoundOffValue)+'), 123.12345699 ) ';
		EXEC SP_EXecutesql @sSql, N'@MessageDisplay_new NVARCHAR(100) OUT', @MessageDisplay_new = @MessageDisplay OUT;
		SET @sSql = ' Select @MessageDisplay_new = Convert(Numeric(28, '+CONVERT(nvarchar(200), @RoundOffValue)+'), 0.999999 ) ';
		EXEC SP_EXecutesql @sSql, N'@MessageDisplay_new NVARCHAR(100) OUT', @MessageDisplay_new = @MessageDisplayForFloat OUT;
		Create TABLE tempdb..#InserInventoryForValidation 
		( 
				RowNumber int, SKU varchar(max), Quantity varchar(max), ReOrderLevel varchar(max), WarehouseCode varchar(max), GUID nvarchar(400)
		);
		CREATE TABLE tempdb..#InsertInventory  
		( 
				InsertInventoryId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, SKU varchar(300) INDEX Ix CLUSTERED (SKU), Quantity numeric(28, 6), ReOrderLevel numeric(28, 6), WarehouseCode varchar(200), GUID nvarchar(400) 
		);
		--DECLARE tempdb..#InsertInventory  TABLE
		--( 
		--		InsertInventoryId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, SKU varchar(300) INDEX Ix CLUSTERED (SKU), Quantity numeric(28, 6), ReOrderLevel numeric(28, 6), WarehouseCode varchar(200), GUID nvarchar(400) 
		--);
	
		DECLARE @SKU TABLE
		( 
				SKU nvarchar(300)
		);
			
		INSERT INTO @SKU
			   SELECT b.AttributeValue
			   FROM ZnodePimAttributeValue AS a
					INNER JOIN
					ZnodePimAttributeValueLocale AS b
					ON a.PimAttributeId = dbo.Fn_GetProductSKUAttributeId() AND 
					   a.PimAttributeValueId = b.PimAttributeValueId;

		DECLARE @InventoryListId int;
		SET @SSQL = 'Select RowNumber,SKU,Quantity,ReOrderLevel,WarehouseCode ,GUID FROM '+@TableName;
		INSERT INTO tempdb..#InserInventoryForValidation( RowNumber, SKU, Quantity, ReOrderLevel, WarehouseCode, GUID )
		EXEC sys.sp_sqlexec @SSQL;
		
		
		--Required Validation 
		--UomName should not be null 
		--Data for this Inventory list is already available  
		-- 
		-- 1)  Validation for SKU is pending Proper data not found and 
		--Discussion still open for Publish version where we create SKU and use thi SKU code for validation 
		--Select * from ZnodePimAttributeValue  where PimAttributeId =248
		--select * from View_ZnodePimAttributeValue Vzpa Inner join ZnodePimAttribute Zpa on Vzpa.PimAttributeId=Zpa.PimAttributeId where Zpa.AttributeCode = 'SKU'
		--Select * from ZnodePimAttribute where AttributeCode = 'SKU'
		--2)  Start Data Type Validation for XML Data  
		--SELECT * FROM ZnodeInventory
		--SELECT * FROM ZNodeInventoryList
		UPDATE tempdb..#InserInventoryForValidation
		  SET ReOrderLevel = 0
		WHERE ReOrderLevel = '';

		DELETE FROM tempdb..#InserInventoryForValidation
		WHERE RowNumber IN
		(

			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId AND 
				  GUID = @NewGUID
		);
	
		INSERT INTO tempdb..#InsertInventory ( RowNumber, SKU, Quantity, ReOrderLevel, WarehouseCode )
			   SELECT RowNumber, SKU, Quantity, ReOrderLevel, WarehouseCode
			   FROM tempdb..#InserInventoryForValidation;
					 
		-- start Functional Validation 
		-----------------------------------------------
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '19', 'SKU', SKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM tempdb..#InsertInventory  AS ii
			   WHERE ii.SKU NOT IN
			   (
				   SELECT SKU
				   FROM @SKU
			   );
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '19', 'WarehouseCode', WarehouseCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM tempdb..#InsertInventory  AS ii
			   WHERE NOT EXISTS
			   (
				   SELECT TOP 1 1
				   FROM ZnodeWarehouse AS zw
				   WHERE zw.WarehouseCode = ii.WarehouseCode
			   );

		UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ SKU - ' + ISNULL(SKU,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN #InsertInventory IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL


		-- End Function Validation 	
		-----------------------------------------------
		--- Delete Invalid Data after functional validatin  
		DELETE FROM tempdb..#InsertInventory 
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId AND 
				  GUID = @NewGUID
		);
		
		DECLARE @TBL_ReadyToInsertInventory TABLE
		( 
			RowNumber int, SKU varchar(300), Quantity numeric(28, 6), ReOrderLevel numeric(28, 6), WarehouseId int
		);

		INSERT INTO @TBL_ReadyToInsertInventory( RowNumber, SKU, Quantity, ReOrderLevel, WarehouseId )
			   SELECT ii.RowNumber, ii.SKU, ii.Quantity, ISNULL(ii.ReOrderLevel, 0), zw.WarehouseId
			   FROM tempdb..#InsertInventory  AS ii
					INNER JOIN
					ZnodeWarehouse AS zw
					ON ii.WarehouseCode = zw.WarehouseCode AND 
					   ii.RowNumber IN
			   (
				   SELECT MAX(ii1.RowNumber)
				   FROM tempdb..#InsertInventory  AS ii1
				   WHERE ii1.WarehouseCode = ii.WarehouseCode AND 
						 ii1.SKU = ii.SKU
			   );
				-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM @TBL_ReadyToInsertInventory
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount,
		TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End
		   	
		
		--select 'update started'  
		UPDATE zi
		  SET Quantity = rtii.Quantity, ReOrderLevel = ISNULL(rtii.ReOrderLevel, 0), ModifiedBy = @UserId, ModifiedDate = @GetDate
		FROM ZNodeInventory zi
			 INNER JOIN
			 @TBL_ReadyToInsertInventory rtii
			 ON( zi.WarehouseId = rtii.WarehouseId AND 
				 zi.SKU = rtii.SKU
			   );
			   
		--select 'update End'                
		INSERT INTO ZnodeInventory( WarehouseId, SKU, Quantity, ReOrderLevel, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
			   SELECT WarehouseId, SKU, Quantity, ISNULL(ReOrderLevel, 0), @UserId, @GetDate, @UserId, @GetDate
			   FROM @TBL_ReadyToInsertInventory AS rtii
			   WHERE NOT EXISTS
			   (
				   SELECT TOP 1 1
				   FROM ZnodeInventory AS zi
				   WHERE zi.WarehouseId = rtii.WarehouseId AND 
						 zi.SKU = rtii.SKU
			   ); 
		--select 'End'
		--      SET @Status = 1;
		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = GETDATE()
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;
	END TRY
	BEGIN CATCH

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN A;
	END CATCH;
END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportCustomer')
BEGIN 
	DROP PROCEDURE Znode_ImportCustomer
END
GO

CREATE  PROCEDURE [dbo].[Znode_ImportCustomer](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @LocaleId int= 0,@PortalId int ,@CsvColumnString nvarchar(max))
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import SEO Details
	
	-- Unit Testing : 
	--------------------------------------------------------------------------------------

BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max),@AspNetZnodeUserId nvarchar(256),@ASPNetUsersId nvarchar(256),
		@PasswordHash nvarchar(max),@SecurityStamp nvarchar(max),@RoleId nvarchar(256),@IsAllowGlobalLevelUserCreation nvarchar(10)
		Declare @ProfileId  int 
		SET @SecurityStamp = '0wVYOZNK4g4kKz9wNs-UHw2'
		SET @PasswordHash = 'APy4Tm1KbRG6oy7h3r85UDh/lCW4JeOi2O2Mfsb3OjkpWTp1YfucMAvvcmUqNaSOlA==';
		SELECT  @RoleId  = Id from AspNetRoles where   NAME = 'Customer'  

		Select @IsAllowGlobalLevelUserCreation = FeatureValues from ZnodeGlobalsetting where FeatureName = 'AllowGlobalLevelUserCreation'

		DECLARE @GetDate datetime= dbo.Fn_GetDate();
		-- Retrive RoundOff Value from global setting 

		-- Three type of import required three table varible for product , category and brand
		DECLARE @InsertCustomer TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, UserName nvarchar(512) ,FirstName	nvarchar(200),
			LastName nvarchar(200), BudgetAmount	numeric,Email	nvarchar(100),PhoneNumber	nvarchar(100),
		    EmailOptIn	bit	,ReferralStatus	nvarchar(40),IsActive	bit	,ExternalId	nvarchar(max),CreatedDate Datetime,
			ProfileName varchar(200), GUID NVARCHAR(400)
		);

			--SET @SSQL = 'SELECT RowNumber,UserName,FirstName,LastName,BudgetAmount,Email,PhoneNumber,EmailOptIn,IsActive,ExternalId,GUID FROM '+ @TableName;
		SET @SSQL = 'SELECT RowNumber,' + @CsvColumnString + ',GUID FROM '+ @TableName;
		INSERT INTO @InsertCustomer( RowNumber,UserName,FirstName,LastName,Email,PhoneNumber,       EmailOptIn,IsActive,ExternalId,CreatedDate,ProfileName,GUID )
		EXEC sys.sp_sqlexec @SSQL;
		

		
		select TOP 1 @ProfileId   =  ProfileId from ZnodePortalprofile where Portalid = @Portalid and IsDefaultRegistedProfile=1
		If( Isnull(@ProfileId ,0) = 0 ) 
		Begin
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '10', 'Default Portal Profile', '', @NewGUId, null , @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				
				UPDATE ZnodeImportProcessLog
				SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
				WHERE ImportProcessLogId = @ImportProcessLogId;

				DELETE FROM @InsertCustomer 
				SET @Status = 0;
				SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
				ROLLBACK TRAN A;
				Return 0 
		End

		--UserName,FirstName,LastName,Email,PhoneNumber,EmailOptIn,IsActive,ExternalId
	
	    -- start Functional Validation 

		-----------------------------------------------
		If @IsAllowGlobalLevelUserCreation = 'true'
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
					   SELECT '10', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
					   FROM @InsertCustomer AS ii
					    WHERE ltrim(rtrim(ii.UserName)) in 
					   (
						   SELECT UserName FROM AspNetZnodeUser   where PortalId = @PortalId
					   );
		Else 
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
					   SELECT '10', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
					   FROM @InsertCustomer AS ii
					   WHERE ltrim(rtrim(ii.UserName)) in 
					   (
						   SELECT UserName FROM AspNetZnodeUser   
					   );
		
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
					   SELECT '35', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
					   FROM @InsertCustomer AS ii
					   WHERE ii.UserName not like '%_@_%_.__%' 
				
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
					   SELECT '30', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
					   FROM @InsertCustomer AS ii
					   WHERE ltrim(rtrim(ii.UserName)) in 
					   (SELECT ltrim(rtrim(UserName))  FROM @InsertCustomer group by ltrim(rtrim(UserName))  having count(*) > 1 )

		 UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ UserName - ' + ISNULL(UserName,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN @InsertCustomer IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL

		--Note : Content page import is not required 
		
		-- End Function Validation 	
		-----------------------------------------------
		--- Delete Invalid Data after functional validatin  

		DELETE FROM @InsertCustomer
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
			--AND GUID = @NewGUID
		);


		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM @InsertCustomer
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount , 
		TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End

		-- Insert Product Data 
				
				
				DECLARE @InsertedAspNetZnodeUser TABLE (AspNetZnodeUserId nvarchar(256) ,UserName nvarchar(512),PortalId int )
				DECLARE @InsertedASPNetUsers TABLE (Id nvarchar(256) ,UserName nvarchar(512))
				DECLARE @InsertZnodeUser TABLE (UserId int,AspNetUserId nvarchar(256),CreatedDate Datetime )

				UPDATE ANU SET 
				ANU.PhoneNumber	= IC.PhoneNumber
				from AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
				INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
				INNER JOIN @InsertCustomer IC ON ANZU.UserName = IC.UserName 
				where Isnull(ANZU.PortalId,0) = Isnull(@PortalId ,0)

				UPDATE ZU SET 
				ZU.FirstName	= IC.FirstName,
				ZU.LastName		= IC.LastName,
				--ZU.MiddleName	= IC.MiddleName,
				ZU.BudgetAmount = IC.BudgetAmount,
				ZU.Email		= IC.Email,
				ZU.PhoneNumber	= IC.PhoneNumber,
				ZU.EmailOptIn	= Isnull(IC.EmailOptIn,0),
				ZU.IsActive		= IC.IsActive
				--ZU.ExternalId = ExternalId
				from AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
				INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
				INNER JOIN @InsertCustomer IC ON ANZU.UserName = IC.UserName 
				where Isnull(ANZU.PortalId,0) = Isnull(@PortalId ,0)

	
				Insert into AspNetZnodeUser (AspNetZnodeUserId, UserName, PortalId)		
				OUTPUT INSERTED.AspNetZnodeUserId, INSERTED.UserName, INSERTED.PortalId	INTO  @InsertedAspNetZnodeUser 			 
				Select NEWID(),IC.UserName, @PortalId FROM @InsertCustomer IC 
				where Not Exists (Select TOP 1 1  from AspNetZnodeUser ANZ where Isnull(ANZ.PortalId,0) = Isnull(@PortalId,0) AND ANZ.UserName = IC.UserName)

				INSERT INTO ASPNetUsers (Id,Email,EmailConfirmed,PasswordHash,SecurityStamp,PhoneNumber,PhoneNumberConfirmed,TwoFactorEnabled,
				LockoutEndDateUtc,LockOutEnabled,AccessFailedCount,PasswordChangedDate,UserName)
				output inserted.Id, inserted.UserName into @InsertedASPNetUsers
				SELECT NewId(), Email,0 ,@PasswordHash,@SecurityStamp,PhoneNumber,0,0,NULL LockoutEndDateUtc,1 LockoutEnabled,
				0,@GetDate,AspNetZnodeUserId from @InsertCustomer A INNER JOIN @InsertedAspNetZnodeUser  B 
				ON A.UserName = B.UserName
				
				INSERT INTO  ZnodeUser(AspNetUserId,FirstName,LastName,CustomerPaymentGUID,Email,PhoneNumber,EmailOptIn,
				IsActive,ExternalId, CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				OUTPUT Inserted.UserId, Inserted.AspNetUserId,Inserted.CreatedDate into @InsertZnodeUser
				SELECT IANU.Id AspNetUserId ,IC.FirstName,IC.LastName,null CustomerPaymentGUID,IC.Email
				,IC.PhoneNumber,Isnull(IC.EmailOptIn,0),IC.IsActive,IC.ExternalId, @UserId,
				CASE WHEN IC.CreatedDate IS NULL OR IC.CreatedDate = '' THEN  @Getdate ELSE IC.CreatedDate END,@UserId,@Getdate
				from @InsertCustomer IC Inner join 
				@InsertedAspNetZnodeUser IANZU ON IC.UserName = IANZU.UserName  INNER JOIN 
				@InsertedASPNetUsers IANU ON IANZU.AspNetZnodeUserId = IANU.UserName 
				  	     
				INSERT INTO AspNetUserRoles (UserId,RoleId)  Select AspNetUserId, @RoleID from @InsertZnodeUser 
				INSERT INTO ZnodeUserPortal (UserId,PortalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate) 
				SELECT UserId, @PortalId , @UserId, IZU.CreatedDate,@UserId,@Getdate 
				from @InsertZnodeUser IZU
				--Declare @ProfileId  int 
				--select TOP 1 @ProfileId   =  ProfileId from ZnodePortalprofile where Portalid = @Portalid and IsDefaultRegistedProfile=1

				--insert into ZnodeUserProfile (ProfileId,UserId,IsDefault,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				--SELECT @ProfileId  , UserId, 1 , @UserId,CreatedDate,@UserId,@Getdate from @InsertZnodeUser
---------------------------------------------------------------------------------

				declare @Profile table (ProfileId int)

				INSERT INTO ZnodeProfile (ProfileName,ShowOnPartnerSignup,Weighting,TaxExempt,DefaultExternalAccountNo,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ParentProfileId)
				OUTPUT inserted.ProfileId INTO @Profile(ProfileId)
				SELECT Distinct ProfileName, 0, null,0, replace(ltrim(rtrim(ProfileName)),' ','') as DefaultExternalAccountNo, @UserId,@Getdate, @UserId,@Getdate, null as ParentProfileId				
				from @InsertCustomer IC
				where not exists(select * from ZnodeProfile ZP where IC.ProfileName = ZP.ProfileName )
				AND ISNULL(ic.ProfileName,'') <> ''

				INSERT INTO ZnodePortalProfile (PortalId,	ProfileId,	IsDefaultAnonymousProfile,	IsDefaultRegistedProfile,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate)
				SELECT @PortalId, ProfileId, 0 AS IsDefaultAnonymousProfile, 0 AS IsDefaultRegistedProfile, @UserId,@Getdate, @UserId,@Getdate
				from @Profile

				UPDATE ZnodeUserProfile 
				SET ProfileId = COALESCE(ZP.ProfileId,@ProfileId)
				FROM ZnodeUser a
				inner join ASPNetUsers b on (b.Id = a.AspNetUserId)
				inner join AspNetZnodeUser c on (c.AspNetZnodeUserId = b.UserName)
				inner join @InsertCustomer IC on (IC.UserName = c.UserName)
				inner join ZnodeUserProfile u ON u.UserId = a.UserId
				LEFT join ZnodeProfile ZP on IC.ProfileName = ZP.ProfileName
				--where IC.ProfileName <> ''
				
				INSERT INTO ZnodeUserProfile (ProfileId,UserId,IsDefault,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				SELECT COALESCE(ZP.ProfileId,@ProfileId)  , a.UserId, 1 , @UserId,a.CreatedDate,@UserId,@Getdate 
				from ZnodeUser a
				INNER JOIN ASPNetUsers b on (b.Id = a.AspNetUserId)
				inner join AspNetZnodeUser c on (c.AspNetZnodeUserId = b.UserName)
				inner join @InsertCustomer IC on (IC.UserName = c.UserName)
				LEFT join ZnodeProfile ZP on IC.ProfileName = ZP.ProfileName
				where NOT EXISTS (SELECT TOP  1 1 FROM ZnodeUserProfile u WHERE u.UserId = a.UserId )
				AND EXISTS(SELECT * FROM @InsertZnodeUser IZU WHERE A.UserId = IZU.UserId)

		
		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;
	END TRY
	BEGIN CATCH

		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN A;
	END CATCH;
END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportCustomerAddress')
BEGIN 
	DROP PROCEDURE Znode_ImportCustomerAddress
END
GO

CREATE PROCEDURE [dbo].[Znode_ImportCustomerAddress](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @LocaleId int= 0,@PortalId int ,@CsvColumnString nvarchar(max), @IsAccountAddress bit = 0 )
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import SEO Details
	
	-- Unit Testing : 
	--------------------------------------------------------------------------------------

BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max),@IsAllowGlobalLevelUserCreation nvarchar(10)

		DECLARE @GetDate datetime= dbo.Fn_GetDate();
		-- Retrive Value from global setting 
		Select @IsAllowGlobalLevelUserCreation = FeatureValues from ZnodeGlobalsetting where FeatureName = 'AllowGlobalLevelUserCreation'
		-- Three type of import required three table varible for product , category and brand

		CREATE TABLE #InsertCustomerAddress 
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int,UserName	nvarchar(512)
			,FirstName	varchar	(300),LastName	varchar	(300),DisplayName	nvarchar(1200),Address1	varchar	(300),Address2	varchar	(300)
			,CountryName	varchar	(3000),StateName	varchar	(3000),CityName	varchar	(3000),PostalCode	varchar	(50)
			,PhoneNumber	varchar	(50),
			--Mobilenumber	varchar(50),AlternateMobileNumber	varchar(50),FaxNumber	varchar(30),
			IsDefaultBilling	bit 
			,IsDefaultShipping	bit	,IsActive	bit	,ExternalId	nvarchar(2000),CompanyName nvarchar(2000), GUID NVARCHAR(400)
		);
		
		--SET @SSQL = 'SELECT RowNumber,UserName,FirstName,LastName,MiddleName,BudgetAmount,Email,PhoneNumber,EmailOptIn,IsActive,ExternalId,GUID FROM '+ @TableName;
		--SET @SSQL = 'SELECT RowNumber,' + @CsvColumnString + ',GUID FROM '+ @TableName;
		SET @SSQL = ' INSERT INTO #InsertCustomerAddress ( RowNumber, ' + @CsvColumnString + ' ,GUID )
		SELECT RowNumber,' + @CsvColumnString + ',GUID FROM '+ @TableName;
		--INSERT INTO @InsertCustomerAddress( RowNumber,UserName,FirstName,LastName,DisplayName,Address1,Address2,CountryName,
		--									StateName,CityName,PostalCode,PhoneNumber,
		--									IsDefaultBilling,IsActive,IsDefaultShipping,ExternalId,CompanyName,GUID )
		EXEC sys.sp_sqlexec @SSQL;

	
		-- start Functional Validation 
		-----------------------------------------------
		IF (@IsAccountAddress = 0)
		BEGIN
			IF @IsAllowGlobalLevelUserCreation = 'true'
					INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
						   SELECT '19', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
						   FROM #InsertCustomerAddress AS ii
						   WHERE ii.UserName NOT IN 
						   (
							   SELECT UserName FROM AspNetZnodeUser   where PortalId = @PortalId
						   );
			ELSE 
					INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
						   SELECT '19', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
						   FROM #InsertCustomerAddress AS ii
						   WHERE ii.UserName NOT IN 
						   (
							   SELECT UserName FROM AspNetZnodeUser   
						   );

					INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
							SELECT '8', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
							FROM #InsertCustomerAddress AS ii
							WHERE ISnull(ltrim(rtrim(ii.UserName)), '') = ''

		 END

		--INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		--			   SELECT '35', 'IsDefaultBilling', IsDefaultBilling, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		--			   FROM #InsertCustomerAddress IC where  exists (
		--SELECT TOP 1 1  from AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
		--INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
		--INNER JOIN ZnodeUserAddress ZUA ON ZUA.UserId = ZU.UserId
		--INNER JOIN ZnodeAddress ZA ON ZUA.AddressId = ZA.AddressId
		--where ANZU.UserName = IC.UserName AND ZA.IsDefaultBilling =IC.IsDefaultBilling 
		--AND ZA.IsDefaultShipping =IC.IsDefaultShipping )
			
		--INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		--			   SELECT '35', 'IsDefaultBilling', IsDefaultBilling, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		--			   FROM #InsertCustomerAddress IC WHERE IsDefaultBilling = 0 AND IsDefaultShipping = 0 
				--INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				--	   SELECT '35', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				--	   FROM @InsertCustomer AS ii
				--	   WHERE ii.UserName not like '%_@_%_.__%' 
		 
		--Note : Content page import is not required 
		
		-- End Function Validation 	
		-----------------------------------------------
		--- Delete Invalid Data after functional validatin  

		--IF ( @IsAccountAddress = 1 )
		--BEGIN
		--	INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		--		SELECT '53', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		--		FROM #InsertCustomerAddress AS ii
		--		WHERE isnull(ii.UserName,'') <> ''
		--END


		UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ UserName - ' + ISNULL(UserName,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN #InsertCustomerAddress IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL


		DELETE FROM #InsertCustomerAddress
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber IS NOT NULL 
			--AND GUID = @NewGUID
		);

		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM #InsertCustomerAddress
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount ,
		TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End

		----------update ZnodeAddress
		DECLARE @AddressColumnString VARCHAR(1000), @WhereConditionString VARCHAR(1000), @UpdateColumnString VARCHAR(1000)

		SELECT @AddressColumnString = COALESCE(@AddressColumnString + ',', '')+a.ColumnName --COALESCE(@CsvColumnString + ' and ', '') +'ZA.'+ColumnName+' =  IC.'+ColumnName
		FROM ZnodeImportUpdatableColumns a
		INNER JOIN INFORMATION_SCHEMA.COLUMNS b on a.ColumnName = b.COLUMN_NAME  
		INNER JOIN dbo.Split(@CsvColumnString,',')C on b.COLUMN_NAME = c.Item
		WHERE b.TABLE_NAME = 'ZnodeAddress' 
		AND EXISTS(SELECT * FROM ZnodeImportHead IH where a.ImportHeadId = IH.ImportHeadId and IH.Name = 'ShippingAddress')

		SELECT @UpdateColumnString = COALESCE(@UpdateColumnString + ' , ', '') +'ZA.'+a.COLUMN_NAME+' =  IC.'+a.COLUMN_NAME  
		FROM INFORMATION_SCHEMA.COLUMNS a
		INNER JOIN dbo.Split(@CsvColumnString,',')b on a.COLUMN_NAME = b.Item
		WHERE NOT EXISTS (SELECT * FROM dbo.Split(@AddressColumnString,',') c WHERE a.COLUMN_NAME = c.Item )
		AND a.TABLE_NAME = 'ZnodeAddress'

		SELECT @WhereConditionString = COALESCE(@WhereConditionString + ' AND ', '') +'ZA.'+item+' =  IC.'+item from dbo.split(@AddressColumnString,',')
				
		-- Insert Product Data 
				
				CREATE TABLE #InsertedUserAddress (AddressId  nvarchar(256), UserId nvarchar(max)) 
		-- Pending for discussion include one identity column for modify address
				
				--UPDATE ANU SET 
				--ANU.PhoneNumber	= IC.PhoneNumber
				--from AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
				--INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
				--INNER JOIN @InsertCustomerAddress IC ON ANZU.UserName = IC.UserName 
				--INNER JOIN ZnodeUserAddress ZUA ON ZUA.UserId = ZU.UserId
				--INNER JOIN ZnodeAddress ZA ON ZUA.AddressId = ZA.AddressId
				 
				--where Isnull(ANZU.PortalId,0) = Isnull(@PortalId ,0)			

			    IF ( @IsAccountAddress = 1 )
				BEGIN

					UPDATE ZnodeAddress SET IsDefaultBilling = 0,  IsDefaultShipping = 0
					from AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
					INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
					INNER JOIN ZnodeUserAddress ZUA ON ZUA.UserId = ZU.UserId
					INNER JOIN ZnodeAddress ZA ON ZUA.AddressId = ZA.AddressId
					INNER JOIN #InsertCustomerAddress IC ON ANZU.UserName = IC.UserName AND ZA.IsDefaultBilling =IC.IsDefaultBilling 
															AND ZA.IsDefaultShipping =IC.IsDefaultShipping

					SET @SSQL = '
						UPDATE ZA set ModifiedBy = '+CONVERT(VARCHAR(10), @UserId)+', ModifiedDate = getdate() '+CASE WHEN ISNULL(@UpdateColumnString,'') = '' THEN '' ELSE ','+@UpdateColumnString END+' 
						FROM ZnodeAddress ZA
						INNER JOIN #InsertCustomerAddress IC ON '+CASE WHEN ISNULL(@WhereConditionString,'') = '' THEN ' 1 = 0 ' ELSE @WhereConditionString END

					EXEC (@SSQL)

					SET @SSQL = '
					Insert into ZnodeAddress (FirstName,LastName,DisplayName,Address1,Address2,Address3,CountryName,
											StateName,CityName,PostalCode,PhoneNumber,
											IsDefaultBilling,IsDefaultShipping,IsActive,ExternalId,CompanyName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)		
					OUTPUT INSERTED.AddressId INTO  #InsertedUserAddress (AddressId) 			 
					SELECT IC.FirstName,IC.LastName,IC.DisplayName,IC.Address1,IC.Address2,null,IC.CountryName,
					IC.StateName,IC.CityName,IC.PostalCode,IC.PhoneNumber,
					isnull(IC.IsDefaultBilling,0),isnull(IC.IsDefaultShipping,0),isnull(IC.IsActive,0),IC.ExternalId,IC.CompanyName, '+CONVERT(VARCHAR(10), @UserId)+' , getdate() , '+CONVERT(VARCHAR(10), @UserId)+' ,getdate()
					FROM  #InsertCustomerAddress IC
					WHERE NOT EXISTS(SELECT * FROM ZnodeAddress ZA WHERE '+CASE WHEN ISNULL(@WhereConditionString,'') = '' THEN ' 1 = 0 ' ELSE @WhereConditionString END +')'

					EXEC (@SSQL)

					DECLARE @AccountId INT
					SELECT @AccountId = AccountId FROM ZnodeUser where UserId = @UserId
					INSERT INTO ZnodeAccountAddress ( AccountId, AddressId, CreatedBy, CreatedDate,	ModifiedBy,	ModifiedDate )
					SELECT @AccountId, Addressid ,  @UserId , @GetDate, @UserId , @GetDate FROM #InsertedUserAddress UA
					WHERE NOT EXISTS ( SELECT * FROM ZnodeAccountAddress AA WHERE AccountId = @AccountId and AA.Addressid = UA.Addressid )
				END
				ELSE
				BEGIN
					
					UPDATE ZnodeAddress SET IsDefaultBilling = 0,  IsDefaultShipping = 0
					from AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
					INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
					INNER JOIN ZnodeUserAddress ZUA ON ZUA.UserId = ZU.UserId
					INNER JOIN ZnodeAddress ZA ON ZUA.AddressId = ZA.AddressId
					INNER JOIN #InsertCustomerAddress IC ON ANZU.UserName = IC.UserName AND ZA.IsDefaultBilling =IC.IsDefaultBilling 
															AND ZA.IsDefaultShipping =IC.IsDefaultShipping
					
					SET @SSQL = '
						UPDATE ZA set ModifiedBy = '+CONVERT(VARCHAR(10), @UserId)+', ModifiedDate = getdate() '+CASE WHEN ISNULL(@UpdateColumnString,'') = '' THEN '' ELSE ','+@UpdateColumnString END+' 
						FROM ZnodeAddress ZA
						INNER JOIN #InsertCustomerAddress IC ON '+CASE WHEN ISNULL(@WhereConditionString,'') = '' THEN ' 1 = 0 ' ELSE @WhereConditionString END
						--print @SSQL
					EXEC (@SSQL)

					SET @SSQL = '
					Insert into ZnodeAddress (FirstName,LastName,DisplayName,Address1,Address2,Address3,CountryName,
												StateName,CityName,PostalCode,PhoneNumber,
												IsDefaultBilling,IsDefaultShipping,IsActive,ExternalId,CompanyName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)		
					OUTPUT INSERTED.AddressId, INSERTED.Address3 INTO  #InsertedUserAddress (AddressId, UserId ) 			 
					SELECT IC.FirstName,IC.LastName,IC.DisplayName,IC.Address1,IC.Address2,convert(nvarchar(100),ZU.UserId),IC.CountryName,
					IC.StateName,IC.CityName,IC.PostalCode,IC.PhoneNumber,
					isnull(IC.IsDefaultBilling,0),isnull(IC.IsDefaultShipping,0),isnull(IC.IsActive,0),IC.ExternalId,IC.CompanyName, '+CONVERT(VARCHAR(10), @UserId)+' , getdate() , '+CONVERT(VARCHAR(10), @UserId)+' ,getdate()
					FROM AspNetZnodeUser ANZU 
					INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
					INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
					INNER JOIN #InsertCustomerAddress IC ON ANZU.UserName = IC.UserName 
					WHERE NOT EXISTS(SELECT * FROM ZnodeAddress ZA WHERE '+CASE WHEN ISNULL(@WhereConditionString,'') = '' THEN ' 1 = 0 ' ELSE @WhereConditionString END +')'
					--print @SSQL
					EXEC (@SSQL)

					INSERT INTO ZnodeUserAddress(UserId,AddressId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
					SELECT CAST( UserId AS INT ) , Addressid , @UserId , @GetDate, @UserId , @GetDate FROM  #InsertedUserAddress
				END
	
				UPDATE ZA SET ZA.Address3 = null 
				From ZnodeAddress ZA INNER JOIN #InsertedUserAddress IUA ON ZA.AddressId = IUA.AddressId 

		-- 'End'
		--      SET @Status = 1;
		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;
	END TRY
	BEGIN CATCH

		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN A;
	END CATCH;
END;
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportZipCode')
BEGIN 
	DROP PROCEDURE Znode_ImportZipCode
END
GO
CREATE PROCEDURE [dbo].[Znode_ImportZipCode](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @CountryCode nvarchar(100))
AS 
	
/*
	----Summary:  Import Zip Code data List 
    */

BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @GetDate datetime= dbo.Fn_GetDate();
		DECLARE @sSql nvarchar(max);

		DECLARE @ZipCode TABLE
		( 
		   ZIPCode nvarchar(300)
		);
		INSERT INTO @ZipCode(ZIPCode)
			   SELECT ZIP
			   FROM ZnodeCity 


		DECLARE @Tlb_ZnodeCity TABLE
		( 
			[RowNumber] [int] NOT NULL, [CityName] [nvarchar](255) NULL, [CityType] [nvarchar](50) NULL, [ZIP] [nvarchar](50) NULL, [ZIPType] [nvarchar](50) NULL, [CountyCode] [varchar](255) NULL,  [StateCode] [nvarchar](255) NULL, [Latitude] [decimal](9, 6) NULL, [Longitude] [decimal](9, 6) NULL, [CountyFIPS] [varchar](50) NULL, [StateFIPS] [varchar](50) NULL, [MSACode] [varchar](50) NULL, [TimeZone] [varchar](50) NULL, [UTC] [decimal](3, 1) NULL, [DST] [char](1) NULL PRIMARY KEY([RowNumber])
		);
		SET @SSQL = 'Select CityName,CityType,ZIP,ZIPType,CountyCode,StateCode,Latitude,Longitude,CountyFIPS,StateFIPS,MSACode,TimeZone,UTC ,RowNumber FROM '+@TableName;
		INSERT INTO @Tlb_ZnodeCity( CityName, CityType, ZIP, ZIPType, CountyCode, StateCode, Latitude, Longitude, CountyFIPS, StateFIPS, MSACode, TimeZone, UTC, RowNumber )
		EXEC sys.sp_sqlexec @SSQL;
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '19', 'StateCode', StateCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @Tlb_ZnodeCity
			   WHERE StateCode NOT IN
			   (
				   SELECT StateCode
				   FROM ZnodeState
				   WHERE CountryCode = @CountryCode
			   );

	   INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '53', 'ZIPCode', ZIP, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			  FROM @Tlb_ZnodeCity AS ii
			   WHERE ii.ZIP IN 
			   (
				   SELECT ZIP  FROM @Tlb_ZnodeCity  Group BY ZIP  HAVING COUNT(*) > 1 
			   );

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '10', 'ZIPCode', ZIP, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			  FROM @Tlb_ZnodeCity AS ii
			   WHERE ii.ZIP in 
			   (
				   SELECT ZIPCode FROM @ZipCode  where ZIPCode IS NOT NULL 
			   );

		UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ ZIPCode - ' + ISNULL(ZIP,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN @Tlb_ZnodeCity IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL

		DELETE FROM @Tlb_ZnodeCity
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber IS NOT NULL 
		);

		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM @Tlb_ZnodeCity
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount ,
		TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
		WHERE ImportProcessLogId = @ImportProcessLogId;


		INSERT INTO ZnodeCity( CityName, CityType, ZIP, ZIPType, CountyCode, CountryCode, StateCode, Latitude, Longitude, CountyFIPS, StateFIPS, MSACode, TimeZone, UTC, DST, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
			   SELECT CityName, CityType, ZIP, ZIPType, [CountyCode], @CountryCode, StateCode, Latitude, Longitude, CountyFIPS, StateFIPS, MSACode, TimeZone, UTC, DST, 2, @GetDate, 2, @GetDate
			   FROM @Tlb_ZnodeCity AS tzc
			   WHERE NOT EXISTS
			   (
				   SELECT TOP 1 1
				   FROM ZnodeCity
				   WHERE  CountryCode = @CountryCode AND 
						  StateCode = tzc.StateCode AND 
						  CityName = TZC.CityName AND 
						  ZIP = TZC.ZIP
			   ) --AND 
					 --tzc.RowNumber =
			   --(
				  -- SELECT MAX(ii1.RowNumber)
				  -- FROM @Tlb_ZnodeCity AS ii1
				  -- WHERE ii1.StateCode = tzc.StateCode
			   --);
		UPDATE ZC
		  SET ZC.CityType = TZC.CityType, ZC.CountyCode = TZC.CountyCode, ZC.Latitude = TZC.Latitude, ZC.Longitude = TZC.Longitude, ZC.CountyFIPS = TZC.CountyFIPS, ZC.StateFIPS = TZC.StateFIPS, ZC.MSACode = TZC.MSACode, ZC.TimeZone = TZC.TimeZone, ZC.UTC = TZC.UTC, ZC.DST = TZC.DST, ZC.ModifiedBy = @UserId, ZC.ModifiedDate = @GetDate
		FROM ZnodeCity ZC
			 INNER JOIN
			 @Tlb_ZnodeCity TZC
			 ON ZC.CountryCode = @CountryCode AND 
				ZC.StateCode = TZC.StateCode AND 
				ZC.CityName = TZC.CityName AND 
				ZC.ZIP = TZC.ZIP;
		SET @Status = 1;
		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- COMMIT TRAN ImportProducts;
		COMMIT TRAN A;
	END TRY
	BEGIN CATCH
		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;
		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN A;
	END CATCH;
END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportSEODetails')
BEGIN 
	DROP PROCEDURE Znode_ImportSEODetails
END
GO

CREATE PROCEDURE [dbo].[Znode_ImportSEODetails](  
   @TableName nvarchar(100), 
   @Status bit OUT, @UserId int, 
   @ImportProcessLogId int, 
   @NewGUId nvarchar(200), 
   @LocaleId int= 1,
   @PortalId int ,
   @CsvColumnString nvarchar(max))  
AS  
 --------------------------------------------------------------------------------------  
 -- Summary :  Import SEO Details  
   
 -- Unit Testing :   
 --------------------------------------------------------------------------------------  
  
BEGIN  
 BEGIN TRAN A;  
 BEGIN TRY  
   
  DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max);  
  DECLARE @GetDate datetime= dbo.Fn_GetDate();  
    
    
  DECLARE @CMSSEOTypeProduct INT ,@CMSSEOTypeCategory INT  
  
  SELECT @CMSSEOTypeProduct = CMSSEOTypeId FROM ZnodeCMSSEOType WHERE Name = 'Product'  
  SELECT @CMSSEOTypeCategory = CMSSEOTypeId FROM ZnodeCMSSEOType WHERE Name = 'Category'  
  
  
  -- Three type of import required three table varible for product , category and brand  
  DECLARE @InsertSEODetails TABLE  
  (   
   RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, ImportType varchar(20), Code nvarchar(300),   
   IsRedirect bit ,MetaInformation nvarchar(max),PortalId int ,SEOUrl nvarchar(max),IsActive varchar(10),  
   SEOTitle nvarchar(max),SEODescription nvarchar(max),SEOKeywords nvarchar(max),   
   RedirectFrom nvarchar(max),RedirectTo nvarchar(max), EnableRedirection bit,  
   GUID nvarchar(400)  
   --Index Ind_ImportType (ImportType),Index Ind_Code (Code)  
  );  
  
  DECLARE @InsertSEODetailsOFProducts TABLE  
  (   
   RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, ImportType varchar(20), Code nvarchar(300),   
   IsRedirect bit ,MetaInformation nvarchar(max),PortalId int ,SEOUrl nvarchar(max),IsActive varchar(10),  
   SEOTitle nvarchar(max),SEODescription nvarchar(max),SEOKeywords nvarchar(max),  
   RedirectFrom nvarchar(max),RedirectTo nvarchar(max), EnableRedirection bit,   
   GUID nvarchar(400)  
   --Index Ind_ImportType (ImportType),Index Ind_Code (Code)  
  );  
  
  DECLARE @InsertSEODetailsOFCategory TABLE  
  (   
   RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, ImportType varchar(20), Code nvarchar(300),   
   IsRedirect bit ,MetaInformation nvarchar(max),PortalId int ,SEOUrl nvarchar(max),IsActive varchar(10),  
   SEOTitle nvarchar(max),SEODescription nvarchar(max),SEOKeywords nvarchar(max),  
   RedirectFrom nvarchar(max),RedirectTo nvarchar(max), EnableRedirection bit,   
   GUID nvarchar(400)  
   --Index Ind_ImportType (ImportType),Index Ind_Code (Code)  
  );  
  
  DECLARE @InsertSEODetailsOFBrand TABLE  
  (   
   RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, ImportType varchar(20), Code nvarchar(300),   
   IsRedirect bit ,MetaInformation nvarchar(max),PortalId int ,SEOUrl nvarchar(max),IsActive varchar(10),  
   SEOTitle nvarchar(max),SEODescription nvarchar(max),SEOKeywords nvarchar(max),   
   RedirectFrom nvarchar(max),RedirectTo nvarchar(max), EnableRedirection bit,   
   GUID nvarchar(400)  
   --Index Ind_ImportType (ImportType),Index Ind_Code (Code)  
  );  
  
    
  DECLARE @InsertedZnodeCMSSEODetail TABLE  
  (   
   CMSSEODetailId int , SEOCode Varchar(4000), CMSSEOTypeId int  
  );  
    
  --SET @SSQL = 'Select RowNumber,ImportType,Code,IsRedirect,MetaInformation,SEOUrl,IsActive,SEOTitle,SEODescription,SEOKeywords,GUID  FROM '+@TableName;  
  SET @SSQL = 'Select RowNumber,'+@CsvColumnString+',GUID  FROM '+@TableName;  
  
  INSERT INTO @InsertSEODetails(RowNumber,ImportType,Code,IsRedirect,MetaInformation,SEOUrl,IsActive,SEOTitle,SEODescription,SEOKeywords,RedirectFrom,RedirectTo,EnableRedirection,GUID )  
  EXEC sys.sp_sqlexec @SSQL;  
  
  INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
      SELECT '30', 'SEOUrl', SEOUrl, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
      FROM @InsertSEODetails AS ii   
      where ii.SEOURL in (Select ISD.SEOURL from @InsertSEODetails ISD Group by ISD.SEOUrl having count(*) > 1 )   
  
  INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
      SELECT '10', 'SEOUrl', SEOUrl, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
      FROM @InsertSEODetails AS ii   
      where EXISTS (Select TOP 1 1 from ZnodeCMSSEODetail ZCSD WHERE ZCSD.SEOUrl = ii.SEOUrl AND ZCSD.PortalId = @PortalId  AND EXISTS  
     (SELECT TOP 1 1 FROM ZnodeCMSSEODetailLocale dl WHERE dl.CMSSEODetailId = ZCSD.CMSSEODetailId AND dl.LocaleId = @LocaleId  
           AND dl.SEODescription = ii.SEODescription AND dl.SEOTitle = ii.SEOTitle AND dl.SEOKeywords = ii.SEOKeywords))   
  
  INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
      SELECT '35', 'RedirectFrom\RedirectTo', RedirectFrom + '  ' + RedirectTo  , @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
      FROM @InsertSEODetails AS ii   
      where ii.RedirectFrom = ii.RedirectTo  
	  AND (ii.RedirectFrom <> '' AND ii.RedirectTo <> '' )
  
  INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
      SELECT '35', 'SEOUrl', SEOUrl, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId  
      FROM @InsertSEODetails AS ii  
      WHERE ltrim(rtrim(isnull(ii.SEOUrl,''))) like '% %' -----space not allowed  
  
  INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
      SELECT '19', 'ImportType', ImportType, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
      FROM @InsertSEODetails AS ii  
      WHERE ii.ImportType NOT in   
      (  
       Select NAME from ZnodeCMSSEOType where NAME NOT IN ('Content Page','BlogNews','Brand')  
      );  

  INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
      SELECT '35', 'IsActive', IsActive, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
      FROM @InsertSEODetails AS ii  
      WHERE ii.IsActive not in ('True','1','Yes','FALSE','0','No')
  

  UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ SEOCode - ' + ISNULL(Code,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN @InsertSEODetails IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL


  
  DELETE FROM @InsertSEODetails  
  WHERE RowNumber IN  
  (  
   SELECT DISTINCT   
       RowNumber  
   FROM ZnodeImportLog  
   WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null   
   --AND GUID = @NewGUID  
  );  
    
   
  
-------------------------------------------------------------------------------------------------------------------------------  
  
  INSERT INTO @InsertSEODetailsOFProducts(  RowNumber , ImportType , Code ,   
   IsRedirect ,MetaInformation ,SEOUrl ,IsActive ,  
   SEOTitle ,SEODescription ,SEOKeywords, RedirectFrom, RedirectTo,EnableRedirection, GUID )  
   SELECT RowNumber , ImportType , Code , IsRedirect ,MetaInformation ,SEOUrl , 
      CASE WHEN IsActive in ('True','1','Yes') 
	       Then 1 
           ELSE 0
      END as IsActive, SEOTitle ,SEODescription ,SEOKeywords, RedirectFrom, RedirectTo,EnableRedirection, GUID  
   FROM @InsertSEODetails WHERE ImportType = 'Product'  
  
  
  INSERT INTO @InsertSEODetailsOFCategory( RowNumber , ImportType , Code ,   
   IsRedirect ,MetaInformation,SEOUrl ,IsActive ,  
   SEOTitle ,SEODescription ,SEOKeywords, RedirectFrom, RedirectTo,EnableRedirection , GUID )  
   SELECT RowNumber , ImportType , Code , IsRedirect ,MetaInformation ,SEOUrl , 
	   CASE WHEN IsActive in ('True','1','Yes') 
			Then 1 
			ELSE 0
	   END as IsActive, SEOTitle ,SEODescription ,SEOKeywords, RedirectFrom, RedirectTo,EnableRedirection, GUID  
   FROM @InsertSEODetails WHERE ImportType = 'Category'  
  
  INSERT INTO @InsertSEODetailsOFBrand( RowNumber , ImportType , Code ,   
   IsRedirect ,MetaInformation ,SEOUrl ,IsActive ,  
   SEOTitle ,SEODescription ,SEOKeywords, RedirectFrom, RedirectTo,EnableRedirection , GUID )  
   SELECT RowNumber , ImportType , Code , IsRedirect ,MetaInformation ,SEOUrl ,
		CASE WHEN IsActive in ('True','1','Yes') 
			Then 1 
			ELSE 0
	    END as IsActive, SEOTitle ,SEODescription ,SEOKeywords, RedirectFrom, RedirectTo,EnableRedirection, GUID  
   FROM @InsertSEODetails WHERE ImportType = 'Brand'  
  
  
     -- start Functional Validation   
  --1. Product  
  --2. Category  
  --3. Content Page  
  --4. Brand  
  -----------------------------------------------  
  
    
  INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
      SELECT '19', 'SKU', CODE, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
      FROM @InsertSEODetailsOFProducts AS ii  
      WHERE ii.CODE NOT in   
      (  
     SELECT ZPAVL.AttributeValue  
     FROM ZnodePimAttributeValue ZPAV   
     inner join ZnodePimAttributeValueLocale ZPAVL ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId  
     inner join ZnodePimAttribute ZPA on ZPAV.PimAttributeId = ZPA.PimAttributeId  
     Where ZPA.AttributeCode = 'SKU' AND ZPAVL.AttributeValue IS NOT NULL   
      )  AND ImportType = 'Product';  
  
  
    
  INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
      SELECT '19', 'Category', CODE, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
      FROM @InsertSEODetailsOFCategory AS ii  
      WHERE ii.CODE NOT in   
      (  
     SELECT ZPCAVL.CategoryValue  
     FROM ZnodePimCategoryAttributeValue ZPCAV   
     INNER JOIN ZnodePimCategoryAttributeValueLocale ZPCAVL on ZPCAV.PimCategoryAttributeValueId = ZPCAVL.PimCategoryAttributeValueId  
     INNER JOIN ZnodePimAttribute ZPA on ZPCAV.PimAttributeId = ZPA.PimAttributeId  
     Where ZPA.AttributeCode = 'CategoryCode' AND ZPCAVL.CategoryValue IS NOT NULL  
      )  AND ImportType = 'Category';  
  
  INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
      SELECT '19', 'Brand', CODE, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
      FROM @InsertSEODetailsOFBrand AS ii  
      WHERE ii.CODE NOT in   
      (  
       Select BrandCode from ZnodeBrandDetails WHERE BrandCode IS NOT NULL  
      )  AND ImportType = 'Brand';  
    
    -- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM @InsertSEODetails
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount , 
		TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
		WHERE ImportProcessLogId = @ImportProcessLogId;
	

  --Note : Content page import is not required   
    
  -- End Function Validation    
  -----------------------------------------------  
  --- Delete Invalid Data after functional validatin    
  
  DELETE FROM @InsertSEODetailsOFProducts  
  WHERE RowNumber IN  
  (  
   SELECT DISTINCT   
       RowNumber  
   FROM ZnodeImportLog  
   WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null   
   --AND GUID = @NewGUID  
  );  
  
  DELETE FROM @InsertSEODetailsOFCategory  
  WHERE RowNumber IN  
  (  
   SELECT DISTINCT   
       RowNumber  
   FROM ZnodeImportLog  
   WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null   
   --AND GUID = @NewGUID  
  );  
  
  DELETE FROM @InsertSEODetailsOFBrand  
  WHERE RowNumber IN  
  (  
   SELECT DISTINCT   
       RowNumber  
   FROM ZnodeImportLog  
   WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null   
   --AND GUID = @NewGUID  
  );  
  
   
  -- Insert Product Data   
  If Exists (Select top 1 1 from @InsertSEODetailsOFProducts)  
  Begin  
   Update ZCSD SET ZCSD.IsRedirect = ISD.IsRedirect ,  
         ZCSD.MetaInformation =  ISD.MetaInformation,  
         ZCSD.SEOUrl=  ISD.SEOUrl,  
         ZCSD.IsPublish = 0  
   FROM   
   @InsertSEODetailsOFProducts ISD    
   INNER JOIN ZnodeCMSSEODetail ZCSD ON  ZCSD.CMSSEOTypeId = @CMSSEOTypeProduct AND ZCSD.SEOCode = ISD.Code  
   INNER JOIN ZnodeCMSSEODetailLocale ZCSDL ON ZCSD.CMSSEODetailId = ZCSDL.CMSSEODetailId  
   where  ZCSD.PortalId  =@PortalId  AND ZCSDL.LocaleId = @LocaleId;  
     
   Update ZCSDL SET ZCSDL.SEOTitle = ISD.SEOTitle  
       ,ZCSDL.SEODescription = ISD.SEODescription  
       ,ZCSDL.SEOKeywords= ISD.SEOKeywords  
    FROM   
   @InsertSEODetailsOFProducts ISD    
   INNER JOIN ZnodeCMSSEODetail ZCSD ON  ZCSD.CMSSEOTypeId = @CMSSEOTypeProduct AND ZCSD.SEOCode = ISD.Code  
   INNER JOIN ZnodeCMSSEODetailLocale ZCSDL ON ZCSD.CMSSEODetailId = ZCSDL.CMSSEODetailId  
   where  ZCSD.PortalId = @PortalId AND ZCSDL.LocaleId = @LocaleId;   
  
     
   insert into ZnodeCMSSEODetailLocale (CMSSEODetailId,LocaleId,SEOTitle,SEODescription,SEOKeywords,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)  
   SELECT distinct CSD.CMSSEODetailId,@LocaleId,ISD.SEOTitle,ISD.SEODescription,ISD.SEOKeywords,@USerId, @GetDate,@USerId, @GetDate  
   FROM ZnodeCMSSEODetail CSD  
   INNER JOIN @InsertSEODetailsOFProducts ISD ON CSD.SEOCode = ISD.Code AND CSD.CMSSEOTypeId = @CMSSEOTypeProduct AND CSD.SEOUrl = ISD.SEOUrl  
   WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSSEODetailLocale CSDL WHERE CSDL.LocaleId = @LocaleId AND CSD.CMSSEODetailId = CSDL.CMSSEODetailId )  
   AND CSD.portalId = @PortalId  
  
     
   Delete from @InsertedZnodeCMSSEODetail  
  
   IF NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSSEODetail SD INNER JOIN @InsertSEODetailsOFProducts DP ON SD.SEOCode = DP.Code AND SD.PortalId =  @PortalId  
                        AND  SD.CMSSEOTypeId = @CMSSEOTypeProduct)  
   BEGIN  
   INSERT INTO ZnodeCMSSEODetail(CMSSEOTypeId,SEOCode,IsRedirect,MetaInformation,PortalId,SEOUrl,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)    
   OUTPUT Inserted.CMSSEODetailId,Inserted.SEOCode,Inserted.CMSSEOTypeId INTO @InsertedZnodeCMSSEODetail    
   Select Distinct @CMSSEOTypeProduct,ISD.Code , ISD.IsRedirect,ISD.MetaInformation,@PortalId,ISD.SEOUrl,@USerId, @GetDate,@USerId, @GetDate from   
   @InsertSEODetailsOFProducts ISD    
   where NOT EXISTS (Select TOP 1 1 from ZnodeCMSSEODetail ZCSD where ZCSD.CMSSEOTypeId = @CMSSEOTypeProduct AND ZCSD.SEOCode = ISD.Code and  ZCSD.PortalId =@PortalId   );  
    
         insert into ZnodeCMSSEODetailLocale(CMSSEODetailId,LocaleId,SEOTitle,SEODescription,SEOKeywords,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)  
   Select Distinct IZCSD.CMSSEODetailId,@LocaleId,ISD.SEOTitle,ISD.SEODescription,ISD.SEOKeywords,@USerId, @GetDate,@USerId, @GetDate   
   from @InsertedZnodeCMSSEODetail IZCSD   
   INNER JOIN @InsertSEODetailsOFProducts ISD ON IZCSD.SEOCode = ISD.Code   
  
   END  
     
  
   -----RedirectUrlInsert  
  -- INSERT INTO ZnodeCMSUrlRedirect ( RedirectFrom,RedirectTo,IsActive,PortalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)  
  -- select RedirectFrom,RedirectTo,EnableRedirection,@PortalId as PortalId ,@USerId as CreatedBy,@GetDate as CreatedDate,@USerId as ModifiedBy,@GetDate as ModifiedDate  
  -- from @InsertSEODetailsOFProducts  
  -- where IsRedirect = 1  
  --END  
  
  
     INSERT INTO ZnodeCMSUrlRedirect ( RedirectFrom,RedirectTo,IsActive,PortalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)  
   select RedirectFrom,RedirectTo,EnableRedirection 
   --CASE 
   --WHEN EnableRedirection in ('True','1','Yes') Then 1 
   --WHEN EnableRedirection in ('FALSE','0','No') Then 0
   --END
 ,@PortalId as PortalId ,@USerId as CreatedBy,@GetDate as CreatedDate,@USerId as ModifiedBy,@GetDate as ModifiedDate  
   from @InsertSEODetailsOFProducts  
   where IsRedirect = 1  
  END  
  
  -- Insert Category Data   
  If Exists (Select top 1 1 from @InsertSEODetailsOFCategory)  
  Begin  
  
   Update ZCSD SET ZCSD.IsRedirect = ISD.IsRedirect ,  
         ZCSD.MetaInformation =  ISD.MetaInformation,  
         ZCSD.SEOUrl=  ISD.SEOUrl,  
         ZCSD.IsPublish = 0  
   FROM   
   @InsertSEODetailsOFCategory ISD    
   INNER JOIN ZnodeCMSSEODetail ZCSD ON  ZCSD.CMSSEOTypeId = @CMSSEOTypeCategory AND ZCSD.SEOCode = ISD.Code  
   INNER JOIN ZnodeCMSSEODetailLocale ZCSDL ON ZCSD.CMSSEODetailId = ZCSDL.CMSSEODetailId  
   where  ZCSD.PortalId  =@PortalId  AND ZCSDL.LocaleId = @LocaleId;  
     
     
   Update ZCSDL SET ZCSDL.SEOTitle = ISD.SEOTitle  
       ,ZCSDL.SEODescription = ISD.SEODescription  
       ,ZCSDL.SEOKeywords= ISD.SEOKeywords  
    FROM   
   @InsertSEODetailsOFCategory ISD    
   INNER JOIN ZnodeCMSSEODetail ZCSD ON  ZCSD.CMSSEOTypeId = @CMSSEOTypeCategory AND ZCSD.SEOCode = ISD.Code  
   INNER JOIN ZnodeCMSSEODetailLocale ZCSDL ON ZCSD.CMSSEODetailId = ZCSDL.CMSSEODetailId  
   where  ZCSD.PortalId  =@PortalId AND ZCSDL.LocaleId = @LocaleId;   
  
   insert into ZnodeCMSSEODetailLocale (CMSSEODetailId,LocaleId,SEOTitle,SEODescription,SEOKeywords,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)  
   SELECT distinct CSD.CMSSEODetailId,@LocaleId,ISD.SEOTitle,ISD.SEODescription,ISD.SEOKeywords,@USerId, @GetDate,@USerId, @GetDate  
   FROM ZnodeCMSSEODetail CSD  
   INNER JOIN @InsertSEODetailsOFProducts ISD ON CSD.SEOCode = ISD.Code AND CSD.CMSSEOTypeId = @CMSSEOTypeCategory AND CSD.SEOUrl = ISD.SEOUrl  
   WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSSEODetailLocale CSDL WHERE CSDL.LocaleId = @LocaleId AND CSD.CMSSEODetailId = CSDL.CMSSEODetailId )  
   AND CSD.portalId = @PortalId  
  
  
   Delete from @InsertedZnodeCMSSEODetail  
  
   IF NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSSEODetail SD INNER JOIN @InsertSEODetailsOFProducts DP ON SD.SEOCode = DP.Code AND SD.PortalId =  @PortalId  
                        AND  SD.CMSSEOTypeId = @CMSSEOTypeCategory)  
   BEGIN  
   INSERT INTO ZnodeCMSSEODetail(CMSSEOTypeId,SEOCode,IsRedirect,MetaInformation,PortalId,SEOUrl,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)    
   OUTPUT Inserted.CMSSEODetailId,Inserted.SEOCode,Inserted.CMSSEOTypeId INTO @InsertedZnodeCMSSEODetail    
   Select Distinct @CMSSEOTypeCategory,ISD.Code , ISD.IsRedirect,ISD.MetaInformation,@PortalId,ISD.SEOUrl,@USerId, @GetDate,@USerId, @GetDate   
   from @InsertSEODetailsOFCategory ISD    
   where NOT EXISTS (Select TOP 1 1 from ZnodeCMSSEODetail ZCSD where ZCSD.CMSSEOTypeId = @CMSSEOTypeCategory AND ZCSD.SEOCode  = ISD.Code AND ZCSD.PortalId = @PortalId );  
  
   insert into ZnodeCMSSEODetailLocale(CMSSEODetailId,LocaleId,SEOTitle,SEODescription,SEOKeywords,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)  
   Select Distinct IZCSD.CMSSEODetailId,@LocaleId,ISD.SEOTitle,ISD.SEODescription,ISD.SEOKeywords,@USerId, @GetDate,@USerId, @GetDate   
   from @InsertedZnodeCMSSEODetail IZCSD   
   INNER JOIN @InsertSEODetailsOFCategory ISD ON IZCSD.SEOCode = ISD.Code   
   WHERE IZCSD.CMSSEOTypeId =@CMSSEOTypeCategory    
   END  
  
   -----RedirectUrlInsert  
   INSERT INTO ZnodeCMSUrlRedirect ( RedirectFrom,RedirectTo,IsActive,PortalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)  
   SELECT RedirectFrom,RedirectTo,
   EnableRedirection,@PortalId as PortalId ,2 as CreatedBy,@GetDate as CreatedDate,2 as ModifiedBy,@GetDate as ModifiedDate  
   FROM @InsertSEODetailsOFProducts SDP  
   WHERE IsRedirect = 1  
  END  
             
  --select 'End'  
  --      SET @Status = 1;  
  UPDATE ZnodeImportProcessLog  
    SET Status = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = @GetDate  
  WHERE ImportProcessLogId = @ImportProcessLogId;  
  
  COMMIT TRAN A;  
 END TRY  
 BEGIN CATCH  
  
  UPDATE ZnodeImportProcessLog  
    SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate  
  WHERE ImportProcessLogId = @ImportProcessLogId;  
  
  SET @Status = 0;  
  SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();  
  ROLLBACK TRAN A;  
 END CATCH;  
END;
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportPimProductData')
BEGIN 
	DROP PROCEDURE Znode_ImportPimProductData
END
GO

CREATE PROCEDURE [dbo].[Znode_ImportPimProductData]
(   @TableName          VARCHAR(200),
    @NewGUID            NVARCHAR(200),
    @TemplateId         NVARCHAR(200),
    @ImportProcessLogId INT,
    @UserId             INT,
    @LocaleId           INT,
    @DefaultFamilyId    INT)
AS
    
	/*
      Summary : Finally Import data into ZnodePimProduct, ZnodePimAttributeValue and ZnodePimAttributeValueLocale Table 
      Process : Flat global temporary table will split into cloumn wise and associted with Znode Attributecodes,
    		      Create group of product with their attribute code and values and inserted one by one products. 	   
    
      SourceColumnName : CSV file column headers
      TargetColumnName : Attributecode from ZnodePimAttribute Table 

	 ***  Need to log error if transaction failed during insertion of records into table.
    */

     BEGIN
		 SET NOCOUNT ON
         BEGIN TRY
             BEGIN TRAN ImportProducts;
             DECLARE @SQLQuery NVARCHAR(MAX);
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @AttributeTypeName NVARCHAR(10), @AttributeCode NVARCHAR(300), @AttributeId INT, @IsRequired BIT, @SourceColumnName NVARCHAR(600), @PimAttributeFamilyId INT, @NewProductId INT, @PimAttributeValueId INT, @status BIT= 0; 
             --Declare error Log Table 


			 DECLARE @FamilyAttributeDetail TABLE
			 ( 
				PimAttributeId int, AttributeTypeName varchar(300), AttributeCode varchar(300), SourceColumnName nvarchar(600), IsRequired bit, PimAttributeFamilyId int
			 );
             IF @DefaultFamilyId = 0
                 BEGIN
					INSERT INTO @FamilyAttributeDetail( PimAttributeId, AttributeTypeName, AttributeCode, SourceColumnName, IsRequired, PimAttributeFamilyId )
					--Call Process to insert data of defeult family with cource column name and target column name 
					EXEC Znode_ImportGetTemplateDetails @TemplateId = @TemplateId, @IsValidationRules = 0, @IsIncludeRespectiveFamily = 1,@DefaultFamilyId = @DefaultFamilyId;
                    UPDATE @FamilyAttributeDetail SET PimAttributeFamilyId = DBO.Fn_GetCategoryDefaultFamilyId();

					---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
					Delete FAD from @FamilyAttributeDetail FAD
					where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
					and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					               inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
                 END;
             ELSE
                 BEGIN
                     INSERT INTO @FamilyAttributeDetail(PimAttributeId,AttributeTypeName,AttributeCode,SourceColumnName,IsRequired,PimAttributeFamilyId)
                     --Call Process to insert data of defeult family with cource column name and target column name 
                     EXEC Znode_ImportGetTemplateDetails @TemplateId = @TemplateId,@IsValidationRules = 0,@IsIncludeRespectiveFamily = 1,@DefaultFamilyId = @DefaultFamilyId;

					 ---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
					Delete FAD from @FamilyAttributeDetail FAD
					where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
					and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					               inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
                 END;  
				
            -- Retrive PimProductId on the basis of SKU for update product 
			SET @SQLQuery = 'UPDATE tlb SET tlb.PimProductId = ZPAV.PimProductId 
							FROM ZnodePimAttributeValue AS ZPAV INNER JOIN ZnodePimAttributeValueLocale AS ZPAVL ON 
							(ZPAVL.PimAttributeValueId = ZPAV.PimAttributeValueId) 
							INNER JOIN [dbo].[ZnodePimAttribute] ZPA on ZPAV.PimAttributeId = ZPA.PimAttributeId AND ZPA.AttributeCode= ''SKU'' 
							INNER JOIN '+@TableName+' tlb ON ZPAVL.AttributeValue = ltrim(rtrim(tlb.SKU)) ';
			EXEC sys.sp_sqlexec	@SQLQuery	 	
				 	
					
             --Read all attribute details with their datatype 
			 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.TABLES WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#DefaultAttributeValue')
				BEGIN
					   CREATE TABLE #DefaultAttributeValue (AttributeTypeName  VARCHAR(300),PimAttributeDefaultValueId INT,PimAttributeId INT,
					   AttributeDefaultValueCode  VARCHAR(100));
					 
					INSERT INTO #DefaultAttributeValue(AttributeTypeName,PimAttributeDefaultValueId,PimAttributeId,AttributeDefaultValueCode)
					--Call Process to insert default data value 
					EXEC Znode_ImportGetPimAttributeDefaultValue;
				END;
             ELSE
                BEGIN
                    DROP TABLE #DefaultAttributeValue;
                END;
             EXEC sys.sp_sqlexec
                  @SQLQuery;
       
			DECLARE @PimProductDetail TABLE 
			 (
			      
				  PimAttributeId INT, PimAttributeFamilyId INT,ProductAttributeCode VARCHAR(300) NULL,
				  ProductAttributeDefaultValueId INT NULL,PimAttributeValueId  INT NULL,LocaleId INT,
				  PimProductId INT NULL,AttributeValue NVARCHAR(MAX) NULL,AssociatedProducts NVARCHAR(4000) NULL,ConfigureAttributeIds VARCHAR(2000) NULL,
				  ConfigureFamilyIds VARCHAR(2000) NULL,RowNumber INT  
                );

		-- Update Record count in log 
       DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
		EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount OUTPUT
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End

			
             -- Column wise split data from source table ( global temporary table ) and inserted into temporary table variable @PimProductDetail
             -- Add PimAttributeDefaultValue 
             DECLARE Cr_AttributeDetails CURSOR LOCAL FAST_FORWARD
             FOR SELECT PimAttributeId,AttributeTypeName,AttributeCode,IsRequired,SourceColumnName,PimAttributeFamilyId FROM @FamilyAttributeDetail  WHERE ISNULL(SourceColumnName, '') <> '';
             OPEN Cr_AttributeDetails;
             FETCH NEXT FROM Cr_AttributeDetails INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @PimAttributeFamilyId;
             WHILE @@FETCH_STATUS = 0
                 BEGIN
                    SET @NewProductId = 0;
                    SET @SQLQuery = ' SELECT '''+CONVERT(VARCHAR(100), @PimAttributeFamilyId)+''' PimAttributeFamilyId , PimProductId PimProductId,'''+'['+@AttributeCode+']'+''' ProductAttributeCode ,'''+CONVERT(VARCHAR(100), @AttributeId)+''' AttributeId ,
									(SELECT TOP 1  PimAttributeDefaultValueId FROM #DefaultAttributeValue Where PimAttributeId =  '
									+ CONVERT(VARCHAR(100), @AttributeId)+'AND  AttributeDefaultValueCode = TN.['+@SourceColumnName+'] ) PimAttributeDefaultValueId ,['
									+ @SourceColumnName+'],'+CONVERT(VARCHAR(100), @LocaleId)+'LocaleId
								, RowNumber FROM '+@TableName+' TN';
								print @SQLQuery
                    INSERT INTO @PimProductDetail( PimAttributeFamilyId, PimProductId,ProductAttributeCode, PimAttributeId, ProductAttributeDefaultValueId, AttributeValue, LocaleId, RowNumber )
					
					EXEC sys.sp_sqlexec @SQLQuery;
                    FETCH NEXT FROM Cr_AttributeDetails INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @PimAttributeFamilyId;
                 END;
             CLOSE Cr_AttributeDetails;
             DEALLOCATE Cr_AttributeDetails;
			 
			
			 if object_id('tempdb..#PimProductDetail1') is not null
				drop table #PimProductDetail1

			 Select * into #PimProductDetail1 from @PimProductDetail

			 UPDATE a 
			 SET ConfigureAttributeIds =  SUBSTRING((SELECT ','+CAST(c.PimAttributeId As VARCHAR(100)) 
			 FROM #PimProductDetail1 c 
			 INNER JOIN ZnodePimAttribute b ON (b.PimAttributeId = c.PimAttributeId)
			 WHERE IsConfigurable =1  AND c.RowNumber = a.RowNumber  FOR XML PATH('')),2,4000) 
			 FROM #PimProductDetail1 a 
			WHERE EXISTS (SELECT TOP 1 1 FROM #PimProductDetail1 ab  WHERE ab.RowNumber = a.RowNumber AND	ab.ProductAttributeCode = 'ProductType' 
			 AND ab.AttributeValue = 'ConfigurableProduct' )
				
             -- In case of Yes/No : If value is not TRUE OR  1 then it will be  False else True
			 --If default Value set not need of hard code for IsActive
			 UPDATE ppdti SET ppdti.AttributeValue = CASE WHEN Upper(ISNULL(ppdti.AttributeValue, '')) in ( 'TRUE','1')  THEN 'true'  ELSE 'false' END FROM #PimProductDetail1 ppdti
                INNER JOIN #DefaultAttributeValue dav ON ppdti.PimAttributeId = dav.PimAttributeId WHERE   dav.AttributeTypeName = 'Yes/No';
            
		
		-----------Added Performance patch 
		DECLARE @PublishStateIdForDraft INT= [dbo].[Fn_GetPublishStateIdForDraftState]();
		DECLARE @PimDefaultFamily INT= dbo.Fn_GetDefaultPimProductFamilyId();
        DECLARE @pimSkuAttributeId VARCHAR(50)= [dbo].[Fn_GetProductSKUAttributeId]();
        DECLARE @PimIsDownlodableAttributeId VARCHAR(50)= [dbo].[Fn_GetIsDownloadableAttributeId]();
        DECLARE @PublishStateIdForNotPublished INT= [dbo].[Fn_GetPublishStateIdForForNotPublishedState]();

		DELETE FROM #PimProductDetail1 WHERE RTRIM(LTRIM(ISNULL(AttributeValue, ''))) = '';
        
		CREATE INDEX Inx_PimProductDetail_Bulk1 ON #PimProductDetail1(RowNumber);

        ------------------------------------Bulk Row Process
        DECLARE @MaxCount INT, @MinRow INT, @MaxRow INT, @Rows numeric(10,2);
        ---- Count of total rows for import
		SELECT @MaxCount = COUNT(*) FROM #PimProductDetail1;
		
		---- Count of rows in loop for import
		SELECT @Rows = (select top 1 FeatureValues from ZnodeGlobalSetting where FeatureName = 'ProductImportBulk')  --ceiling(@MaxCount/100.0)
        
		SELECT @MaxCount = CEILING(@MaxCount / @Rows);

        IF OBJECT_ID('tempdb..#Temp_ImportLoop') IS NOT NULL
            DROP TABLE #Temp_ImportLoop;
        
		---- To get the min and max rows for import in loop
		;WITH cte AS 
		(
			SELECT RowId = 1, 
				   MinRow = 1, 
                   MaxRow = cast(@Rows as int)
            UNION ALL
            SELECT RowId + 1, 
                   MinRow + cast(@Rows as int), 
                   MaxRow + cast(@Rows as int)
            FROM cte
            WHERE RowId + 1 <= @MaxCount
		)
        SELECT RowId, MinRow, MaxRow
        INTO #Temp_ImportLoop
        FROM cte
		option (maxrecursion 0);

        --while @MaxCount <= @minRow
        DECLARE cur_BulkData CURSOR LOCAL FAST_FORWARD
        FOR SELECT MinRow, MaxRow FROM #Temp_ImportLoop;

        OPEN cur_BulkData;
        FETCH NEXT FROM cur_BulkData INTO  @MinRow, @MaxRow;

        WHILE @@FETCH_STATUS = 0
        BEGIN
		
		BEGIN TRAN ImportProducts;

			if object_id ('tempdb..#PimProductDetail_Bulk_Process')is not null
					drop table tempdb..#PimProductDetail_Bulk_Process

			CREATE TABLE #PimProductDetail_Bulk_Process
			([PimAttributeId]                 [INT] NULL, 
				[PimAttributeFamilyId]           [INT] NULL, 
				[ProductAttributeCode]           [VARCHAR](300) NULL, 
				[ProductAttributeDefaultValueId] [INT] NULL, 
				[PimAttributeValueId]            [INT] NULL, 
				[LocaleId]                       [INT] NULL, 
				[PimProductId]                   [INT] NULL, 
				[AttributeValue]                 [NVARCHAR](MAX) NULL, 
				[AssociatedProducts]             [NVARCHAR](4000) NULL, 
				[ConfigureAttributeIds]          [VARCHAR](2000) NULL, 
				[ConfigureFamilyIds]             [VARCHAR](2000) NULL, 
				[RowNumber]                      [INT] NULL, 
				SKU1                             VARCHAR(600),
				Id Int Identity(1,1)Primary Key
			);

			CREATE INDEX Inx_PimProductDetail_Bulk_Process ON #PimProductDetail_Bulk_Process(ProductAttributeCode, PimProductId);
			CREATE INDEX Inx_PimProductDetail_Bulk_Process1 ON #PimProductDetail_Bulk_Process(RowNumber);
			CREATE INDEX Inx_PimProductDetail_Bulk_Process2 ON #PimProductDetail_Bulk_Process(ProductAttributeCode)
			CREATE INDEX Inx_PimProductDetail_Bulk_Process3 ON #PimProductDetail_Bulk_Process(PimAttributeId, PimProductId);

			---- Insert rows for import in bulk
            INSERT INTO #PimProductDetail_Bulk_Process
            ([PimAttributeId], 
                [PimAttributeFamilyId], 
                [ProductAttributeCode], 
                [ProductAttributeDefaultValueId], 
                [PimAttributeValueId], 
                [LocaleId], 
                [PimProductId], 
                [AttributeValue], 
                [AssociatedProducts], 
                [ConfigureAttributeIds], 
                [ConfigureFamilyIds], 
                [RowNumber]
            )
            SELECT [PimAttributeId], 
                    [PimAttributeFamilyId], 
                    [ProductAttributeCode], 
                    [ProductAttributeDefaultValueId], 
                    [PimAttributeValueId], 
                    [LocaleId], 
                    [PimProductId], 
                    ltrim(rtrim([AttributeValue])), 
                    [AssociatedProducts], 
                    [ConfigureAttributeIds], 
                    [ConfigureFamilyIds], 
                    [RowNumber]
            FROM #PimProductDetail1 a
            WHERE a.[RowNumber] BETWEEN @MinRow AND @MaxRow;

            ---------------------------Start Importing 
			if object_id ('tempdb..#TBL_DefaultAttributeId')is not null
				drop table #TBL_DefaultAttributeId

			if object_id ('tempdb..#TBL_MediaAttributeId')is not null
				drop table #TBL_MediaAttributeId

			if object_id ('tempdb..#TBL_TextAreaAttributeId')is not null
				drop table #TBL_TextAreaAttributeId

			if object_id ('tempdb..#TBL_MediaAttributeValue')is not null
				drop table #TBL_MediaAttributeValue

			if object_id ('tempdb..#TBL_DefaultAttributeValue')is not null
				drop table #TBL_DefaultAttributeValue

			if object_id ('tempdb..#ZnodePimAttributeValue')is not null
				drop table #ZnodePimAttributeValue

				
            CREATE TABLE #TBL_DefaultAttributeId ( PimAttributeId INT PRIMARY KEY, AttributeCode  VARCHAR(600) );

            CREATE TABLE #TBL_MediaAttributeId ( PimAttributeId INT PRIMARY KEY, AttributeCode  VARCHAR(600) );

            CREATE TABLE #TBL_TextAreaAttributeId ( PimAttributeId INT PRIMARY KEY, AttributeCode  VARCHAR(600) );
           
		    CREATE TABLE #TBL_MediaAttributeValue ( PimAttributeValueId INT, LocaleId INT, AttributeValue VARCHAR(300), MediaId INT );

            CREATE TABLE #TBL_DefaultAttributeValue ( PimAttributeValueId INT, LocaleId INT, AttributeValue INT );

            CREATE TABLE #ZnodePimAttributeValue (PimAttributeValueId  INT, PimAttributeFamilyId INT, PimAttributeId INT, PimProductId INT );

            DECLARE @ConfigureFamilyId VARCHAR(4000);

            INSERT INTO #TBL_DefaultAttributeId ( PimAttributeId, AttributeCode )
            SELECT PimAttributeId, AttributeCode
            FROM [dbo].[Fn_GetDefaultAttributeId]();

			INSERT INTO #TBL_MediaAttributeId (PimAttributeId, AttributeCode )
			SELECT PimAttributeId, AttributeCode
			FROM [dbo].[Fn_GetProductMediaAttributeId]();

            INSERT INTO #TBL_TextAreaAttributeId ( PimAttributeId, AttributeCode )
            SELECT PimAttributeId, AttributeCode
            FROM [dbo].[Fn_GetTextAreaAttributeId]();

            SELECT TOP 1 @PimAttributeFamilyId = PimAttributeFamilyId FROM #PimProductDetail_Bulk_Process;

			if object_id ('tempdb..#cte')is not null
				drop table #cte

            SELECT AttributeValue AS SKU, RowNumber
            INTO #cte
            FROM #PimProductDetail_Bulk_Process
            WHERE ProductAttributeCode = 'SKU';
              
            CREATE INDEX Inx_cte_RowNumber ON #cte(RowNumber);
            UPDATE a SET a.SKU1 = B.SKU
            FROM #PimProductDetail_Bulk_Process a
            INNER JOIN #cte b ON a.RowNumber = b.RowNumber;

            SELECT TOP 1 @LocaleId = LocaleId FROM #PimProductDetail_Bulk_Process;

            ----Update ZNodePimProduct 
            UPDATE ZNodePimProduct
            SET PimAttributeFamilyId = DP.PimAttributeFamilyId, 
                PublishStateId = @PublishStateIdForDraft, 
                ModifiedBy = @UserId, 
                ModifiedDate = @GetDate
            FROM ZNodePimProduct ZPP
            INNER JOIN #PimProductDetail_Bulk_Process DP ON ZPP.PimProductId = DP.PimProductId;
      
			if object_id ('tempdb..#ZnodePimProduct')is not null
				drop table #ZnodePimProduct

			CREATE TABLE #ZnodePimProduct(PimProductId INT,ExternalId INT  Primary key)

			--create index Idx_ZnodePimProduct_ExternalId on #ZnodePimProduct(ExternalId)

			----Insert into ZNodePimProduct 
            INSERT INTO ZnodePimProduct
            (PimAttributeFamilyId, 
                ExternalId, 
                CreatedBy, 
                CreatedDate, 
                ModifiedBy, 
                ModifiedDate, 
                PublishStateId
            )
			output inserted.PimProductId, inserted.ExternalId into #ZnodePimProduct(PimProductId,ExternalId)
            SELECT PimAttributeFamilyId, 
                    RowNumber, 
                    @UserId, 
                    @GetDate, 
                    @UserId, 
                    @GetDate, 
                    @PublishStateIdForNotPublished
            FROM #PimProductDetail_Bulk_Process
            WHERE ProductAttributeCode = 'SKU'
            AND PimProductId IS NULL;
            
			----Update newly created productIds
            UPDATE a SET a.PimProductId = b.PimProductId
            FROM #PimProductDetail_Bulk_Process a
            INNER JOIN #ZnodePimProduct b ON a.RowNumber = b.ExternalId;

            ----Insert Downloadable products into ZnodePimDownloadableProduct
            INSERT INTO ZnodePimDownloadableProduct (SKU, ProductName, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
            SELECT PDSKU.AttributeValue, PDProdName.AttributeValue, @UserId, @GetDate, @UserId, @GetDate
            FROM #PimProductDetail_Bulk_Process PDSKU
            INNER JOIN #PimProductDetail_Bulk_Process PDProdName ON PDProdName.RowNumber = PDSKU.RowNumber
            INNER JOIN #PimProductDetail_Bulk_Process PDDownload ON PDDownload.RowNumber = PDSKU.RowNumber
            WHERE PDSKU.ProductAttributeCode = @pimSkuAttributeId
            AND PDProdName.ProductAttributeCode = 'SKU'
            AND PDDownload.PimAttributeId = @PimIsDownlodableAttributeId
            AND PDDownload.AttributeValue = 'true'
            AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodePimDownloadableProduct WHERE ZnodePimDownloadableProduct.SKU = PDSKU.AttributeValue );

            ---- update ZnodePimAttributeValue : attribute data for Product
            UPDATE TARGET
            SET TARGET.PimAttributeFamilyId = CASE
                                                    WHEN Source.PimAttributeFamilyId = 0
                                                    THEN NULL
                                                    ELSE Source.PimAttributeFamilyId
                                                END, 
                    TARGET.ModifiedBy = @UserId, 
                    TARGET.ModifiedDate = @GetDate, 
                    TARGET.PimProductId = SOURCE.PimProductId
            OUTPUT INSERTED.PimAttributeValueId, 
                    INSERTED.PimAttributeFamilyId, 
                    INSERTED.PimAttributeId, 
                    INSERTED.PimProductId
                    INTO #ZnodePimAttributeValue
            FROM ZnodePimAttributeValue TARGET
            INNER JOIN #PimProductDetail_Bulk_Process SOURCE ON TARGET.PimProductId = SOURCE.PimProductId AND TARGET.PimAttributeId = SOURCE.PimAttributeId;
             
			---- Inserting attribute data for Product 
			INSERT INTO ZnodePimAttributeValue 
			( 
				PimAttributeFamilyId, 
				PimProductId, PimAttributeId, 
				PimAttributeDefaultValueId, 
				CreatedBy, 
				CreatedDate, 
				ModifiedBy, 
				ModifiedDate 
			)
            OUTPUT INSERTED.PimAttributeValueId, 
                    INSERTED.PimAttributeFamilyId, 
                    INSERTED.PimAttributeId, 
                    INSERTED.PimProductId
                    INTO #ZnodePimAttributeValue
            SELECT 
				CASE
                    WHEN Source.PimAttributeFamilyId = 0
                    THEN @PimDefaultFamily
                    ELSE Source.PimAttributeFamilyId
                END, 
                SOURCE.PimProductId, 
                ISNULL(SOURCE.PimAttributeId, 0),
                CASE
                    WHEN SOURCE.ProductAttributeDefaultValueId = 0
                    THEN NULL
                    ELSE SOURCE.ProductAttributeDefaultValueId
                END, 
                @UserId, 
                @GetDate, 
                @UserId, 
                @GetDate
            FROM #PimProductDetail_Bulk_Process SOURCE
            WHERE NOT EXISTS
            (
                SELECT *
                FROM ZnodePimAttributeValue TARGET
                WHERE TARGET.PimProductId = SOURCE.PimProductId
                        AND TARGET.PimAttributeId = SOURCE.PimAttributeId
            );

            -------------------------
			if object_id ('tempdb..#MediaData')is not null
				drop table #MediaData

            CREATE TABLE #MediaData (MediaId INT, PimProductId INT, PimAttributeId INT, PimAttributeFamilyId INT, LocaleId INT );

			---- Get Product Media Data
            INSERT INTO #MediaData ( MediaId , PimProductId , PimAttributeId , PimAttributeFamilyId , LocaleId )
            SELECT SP.Item, a.PimProductId, a.PimAttributeId, PimAttributeFamilyId, a.LocaleId
            FROM #PimProductDetail_Bulk_Process a
            INNER JOIN #TBL_MediaAttributeId c ON(c.PimAttributeId = a.PimAttributeId)
            CROSS APPLY dbo.split(a.AttributeValue, ',') SP;

			---- Get product media attribute data
            INSERT INTO #TBL_MediaAttributeValue ( PimAttributeValueId, LocaleId, AttributeValue, MediaId )
            SELECT a.PimAttributeValueId, b.LocaleId, zm.Path AttributeValue, ZM.MediaId
            FROM #ZnodePimAttributeValue AS a
            INNER JOIN #MediaData AS b ON(a.PimAttributeId = b.PimAttributeId
                                            AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0)
                                            AND a.PimProductId = b.PimProductId)
            INNER JOIN ZnodeMedia ZM ON(b.MediaId = ZM.MediaId);
     
			---- Deleting product media attribute
            DELETE FROM ZnodePimProductAttributeMedia
            WHERE EXISTS
            (
                SELECT TOP 1 1
                FROM #TBL_MediaAttributeValue TBLM
                WHERE ZnodePimProductAttributeMedia.PimAttributeValueId = TBLM.PimAttributeValueId
                        AND TBLM.MediaId <> ZnodePimProductAttributeMedia.MediaId
                        AND ZnodePimProductAttributeMedia.Localeid = @LocaleId
            );

            ---- update ZnodePimProductAttributeMedia : attribute data for Product
            UPDATE TARGET
                SET 
                    TARGET.MediaPath = SOURCE.AttributeValue, 
                    TARGET.MediaId = SOURCE.MediaId, 
                    TARGET.ModifiedBy = @UserId, 
                    TARGET.ModifiedDate = @GetDate
            FROM ZnodePimProductAttributeMedia TARGET
            INNER JOIN #TBL_MediaAttributeValue SOURCE ON TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
                                                        AND TARGET.MediaPAth = SOURCE.AttributeValue
                                                        AND TARGET.LocaleId = SOURCE.LocaleId;
    
            ---- inserting Media attribute data for Product
            INSERT INTO ZnodePimProductAttributeMedia 
			( 
				PimAttributeValueId, 
				LocaleId, MediaPath, 
				MediaId, 
				CreatedBy, 
				CreatedDate, 
				ModifiedBy, 
                ModifiedDate
            )
            SELECT SOURCE.PimAttributeValueId, 
                    SOURCE.LocaleId, 
                    SOURCE.AttributeValue, 
                    SOURCE.MediaId, 
                    @UserId, 
                    @GetDate, 
                    @UserId, 
                    @GetDate
            FROM #TBL_MediaAttributeValue SOURCE
            WHERE NOT EXISTS
            (
                SELECT *
                FROM ZnodePimProductAttributeMedia TARGET
                WHERE TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
                        AND TARGET.MediaPAth = SOURCE.AttributeValue
                        AND TARGET.LocaleId = SOURCE.LocaleId
            );

            --------------------------
			if object_id ('tempdb..#Cte_TextAreaAttributeValue')is not null
				drop table #Cte_TextAreaAttributeValue

			---- Getting text area data in temp #Cte_TextAreaAttributeValue
            SELECT a.PimAttributeValueId, 
                    b.LocaleId, 
                    AttributeValue
            INTO #Cte_TextAreaAttributeValue
            FROM #ZnodePimAttributeValue AS a
            INNER JOIN #PimProductDetail_Bulk_Process AS b ON(a.PimAttributeId = b.PimAttributeId
                                                            AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0)
                                                            AND a.PimProductId = b.PimProductId)
            INNER JOIN #TBL_TextAreaAttributeId c ON(c.PimAttributeId = b.PimAttributeId);

            ---- update ZnodePimProductAttributeTextAreaValue : attribute data for Product
            UPDATE TARGET
            SET TARGET.AttributeValue = SOURCE.AttributeValue, 
                TARGET.CreatedBy = @UserId, 
                TARGET.ModifiedBy = @UserId, 
                TARGET.ModifiedDate = @GetDate
            FROM ZnodePimProductAttributeTextAreaValue TARGET
            INNER JOIN #Cte_TextAreaAttributeValue SOURCE ON TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
                                                                      AND TARGET.LocaleId = SOURCE.LocaleId;

            ---- inserting TextAreaValue attribute data for Product
            INSERT INTO ZnodePimProductAttributeTextAreaValue
            (
				PimAttributeValueId, 
                LocaleId, 
                AttributeValue, 
                CreatedBy, 
                CreatedDate, 
                ModifiedBy, 
                ModifiedDate
            )
            SELECT SOURCE.PimAttributeValueId, 
                    SOURCE.LocaleId, 
                    SOURCE.AttributeValue, 
                    @UserId, 
                    @GetDate, 
                    @UserId, 
                    @GetDate
            FROM #Cte_TextAreaAttributeValue SOURCE
            WHERE NOT EXISTS
            (
                SELECT *
                FROM ZnodePimProductAttributeTextAreaValue TARGET
                WHERE TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
                        AND TARGET.LocaleId = SOURCE.LocaleId
            );
           
		    ---- Getting attribute default values for product
            INSERT INTO #TBL_DefaultAttributeValue ( PimAttributeValueId, LocaleId, AttributeValue )
            SELECT a.PimAttributeValueId, b.LocaleId, d.PimAttributeDefaultValueId AttributeValue
            FROM #ZnodePimAttributeValue AS a
            INNER JOIN #PimProductDetail_Bulk_Process AS b ON(a.PimAttributeId = b.PimAttributeId
                                                                AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0)
                                                                AND a.PimProductId = b.PimProductId)
            INNER JOIN #TBL_DefaultAttributeId c ON(c.PimAttributeId = b.PimAttributeId)
            CROSS APPLY dbo.split(b.AttributeValue, ',') SP
            INNER JOIN ZnodePimAttributeDefaultValue d ON d.PimAttributeId = b.PimAttributeId
                                                            AND SP.Item = d.AttributeDefaultValueCode;
			---- Deleting prodyuct attribute default value
            DELETE FROM ZnodePimProductAttributeDefaultValue
            WHERE EXISTS
            (
                SELECT TOP 1 1
                FROM #TBL_DefaultAttributeValue TBLAV
                WHERE TBLAV.PimAttributeValueId = ZnodePimProductAttributeDefaultValue.PimAttributeValueId
                        AND TBLAV.AttributeValue <> ZnodePimProductAttributeDefaultValue.PimAttributeDefaultValueId
                        AND ZnodePimProductAttributeDefaultValue.LocaleId = @LocaleId
            );

			---- update ZnodePimProductAttributeDefaultValue : attribute data for Product
			UPDATE TARGET
			SET TARGET.PimAttributeDefaultValueId = SOURCE.AttributeValue, 
				TARGET.ModifiedBy = @UserId, 
				TARGET.ModifiedDate = @GetDate
			FROM ZnodePimProductAttributeDefaultValue TARGET
					INNER JOIN #TBL_DefaultAttributeValue SOURCE ON TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
																	AND TARGET.PimAttributeDefaultValueId = SOURCE.AttributeValue
																	AND TARGET.LocaleId = SOURCE.LocaleId;

            ---- insert ZnodePimProductAttributeDefaultValue : attribute data for Product
            INSERT INTO ZnodePimProductAttributeDefaultValue
            (
				PimAttributeValueId, 
                LocaleId, 
                PimAttributeDefaultValueId, 
                CreatedBy, 
                CreatedDate, 
                ModifiedBy, 
                ModifiedDate
            )
            SELECT 
				SOURCE.PimAttributeValueId, 
                SOURCE.LocaleId, 
                SOURCE.AttributeValue, 
                @UserId, 
                @GetDate, 
                @UserId, 
                @GetDate
            FROM #TBL_DefaultAttributeValue SOURCE
            WHERE NOT EXISTS
            (
                SELECT *
                FROM ZnodePimProductAttributeDefaultValue TARGET
                WHERE TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
                        AND TARGET.PimAttributeDefaultValueId = SOURCE.AttributeValue
                        AND TARGET.LocaleId = SOURCE.LocaleId
            );
               

            IF OBJECT_ID('tempdb..#cte_ZnodePimAttributeValue') IS NOT NULL
                DROP TABLE #cte_ZnodePimAttributeValue;

			CREATE TABLE #cte_ZnodePimAttributeValue(PimAttributeValueId int, LocaleId int, AttributeValue nvarchar(max))

			CREATE INDEX Idx_cte_ZnodePimAttributeValue on #cte_ZnodePimAttributeValue(PimAttributeValueId, LocaleId)

			INSERT INTO #cte_ZnodePimAttributeValue (PimAttributeValueId, LocaleId, AttributeValue)
            SELECT a.PimAttributeValueId, b.LocaleId,AttributeValue                
            FROM #ZnodePimAttributeValue AS a
            INNER JOIN #PimProductDetail_Bulk_Process AS b ON(a.PimAttributeId = b.PimAttributeId
                                                                AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0)
                                                                AND a.PimProductId = b.PimProductId)
            WHERE NOT EXISTS ( SELECT TOP 1 1 FROM #TBL_DefaultAttributeId TBLDA WHERE TBLDA.PimAttributeId = b.PimAttributeId )
            AND NOT EXISTS ( SELECT TOP 1 1 FROM #TBL_MediaAttributeId TBLMA WHERE TBLMA.PimAttributeId = b.PimAttributeId )
            AND NOT EXISTS ( SELECT TOP 1 1 FROM #TBL_TextAreaAttributeId TBLTA WHERE TBLTA.PimAttributeId = b.PimAttributeId );

            ---- update ZnodePimAttributeValueLocale : attribute data for Product
            UPDATE TARGET
            SET TARGET.AttributeValue = SOURCE.AttributeValue, 
                TARGET.ModifiedBy = @UserId, 
                TARGET.ModifiedDate = @GetDate
            FROM ZnodePimAttributeValueLocale TARGET
            INNER JOIN #cte_ZnodePimAttributeValue SOURCE ON TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
                                                           AND TARGET.LocaleId = SOURCE.LocaleId;

            ---- inserting AttributeDefaultValue : attribute data for Product
            INSERT INTO ZnodePimAttributeValueLocale
            (
				PimAttributeValueId, 
                LocaleId, 
                AttributeValue, 
                CreatedBy, 
                CreatedDate, 
                ModifiedBy, 
                ModifiedDate
            )
            SELECT 
				SOURCE.PimAttributeValueId, 
                SOURCE.LocaleId, 
                SOURCE.AttributeValue, 
                @UserId, 
                @GetDate, 
                @UserId, 
                @GetDate
            FROM #cte_ZnodePimAttributeValue SOURCE
            WHERE NOT EXISTS
            (
                SELECT *
                FROM ZnodePimAttributeValueLocale TARGET
                WHERE TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
                        AND TARGET.LocaleId = SOURCE.LocaleId
            );

			---- Inserting configurable products into ZnodePimConfigureProductAttribute
            INSERT INTO [ZnodePimConfigureProductAttribute]
            (PimProductId, 
                PimFamilyId, 
                PimAttributeId, 
                CreatedBy, 
                CreatedDate, 
                ModifiedBy, 
                ModifiedDate
            )
            SELECT DISTINCT PD.PimProductId, 
                    NULL, 
                    q.PimAttributeId, 
                    @UserId, 
                    @GetDate, 
                    @UserId, 
                    @GetDate
            FROM #PimProductDetail_Bulk_Process PD
                CROSS APPLY dbo.Split([ConfigureAttributeIds], ',') AS b
                INNER JOIN ZnodePimAttribute AS q ON(q.PimAttributeId = b.Item)
            WHERE NOT EXISTS
            (
                SELECT TOP 1 1
                FROM ZnodePimConfigureProductAttribute RTR
                WHERE RTR.PimProductId = PD.PimProductId
                        AND RTR.PimAttributeId = q.PimAttributeId
            );


			COMMIT TRAN ImportProducts;

            FETCH NEXT FROM cur_BulkData INTO  @MinRow, @MaxRow;
        END;
    CLOSE cur_BulkData;
    DEALLOCATE cur_BulkData;
	-----------Added Performance patch end

		DELETE FROM ZnodePimConfigureProductAttribute  
			WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePimAttributeValue  a WHERE a.PimProductId = ZnodePimConfigureProductAttribute.PimProductId AND a.PimAttributeID = ZnodePimConfigureProductAttribute.PimAttributeID )
			AND EXISTS (SELECT TOP 1 1 FROM ZnodePimAttributeValue a 
			INNER JOIN ZnodePimAttribute ty ON (ty.PimAttributeId = a.PimAttributeId)
			INNER JOIN ZnodePimProductAttributeDefaultValue t ON (t.PimAttributeValueId = a.PimAttributeValueId )
			INNER JOIN ZnodePimAttributeDefaultValue y ON (y.PimAttributeDefaultValueId = t.PimAttributeDefaultValueId)
			INNER JOIN View_loadmanageProductInternal  TU ON (TU.AttributeCode = 'SKU' AND TU.PimProductId = a.PimProductId  )
			WHERE ty.AttributeCode = 'ProductType' AND y.AttributeDefaultValueCode = 'ConfigurableProduct'
			AND a.PimProductId = ZnodePimConfigureProductAttribute.PimProductId
			AND EXISTS (SELECT TOP 1 1 FROM #PimProductDetail1 TM WHERE TM.PimAttributeID = (SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'SKU') AND TM.AttributeValue = TU.AttributeValue )) 
					   
						
		----Delete simple products if inserted in table ZnodePimConfigureProductAttribute 
		DELETE FROM ZnodePimConfigureProductAttribute
		WHERE EXISTS
		(
			SELECT TOP 1 1
			FROM ZnodePimAttributeValue a
					INNER JOIN ZnodePimAttribute ty ON(ty.PimAttributeId = a.PimAttributeId)
					INNER JOIN ZnodePimProductAttributeDefaultValue t ON(t.PimAttributeValueId = a.PimAttributeValueId)
					INNER JOIN ZnodePimAttributeDefaultValue y ON(y.PimAttributeDefaultValueId = t.PimAttributeDefaultValueId)
			WHERE ty.AttributeCode = 'ProductType'
					AND y.AttributeDefaultValueCode = 'SimpleProduct'
					AND a.PimProductId = ZnodePimConfigureProductAttribute.PimProductId
		);

		---- Update family of Product in table ZnodePimConfigureProductAttribute 
		UPDATE ZnodePimConfigureProductAttribute
		SET PimFamilyId = b.PimAttributeFamilyId
		FROM ZnodePimConfigureProductAttribute a
				INNER JOIN ZnodePimProduct b ON a.PimProductId = b.PimProductId;

		---- Updating status of Import Process Log
		UPDATE ZnodeImportProcessLog
			SET 
				STATUS = dbo.Fn_GetImportStatus(2), 
				ProcessCompletedDate = GETDATE()
		WHERE ImportProcessLogId = @ImportProcessLogId;

             COMMIT TRAN ImportProducts;
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE(),ERROR_LINE(),ERROR_PROCEDURE();
            -- UPDATE ZnodeImportProcessLog SET Status = dbo.Fn_GetImportStatus(3), ProcessCompletedDate = @GetDate WHERE ImportProcessLogId = @ImportProcessLogId;
            -- ROLLBACK TRAN ImportProducts;
         END CATCH;
     END;

	 GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportValidatePimProductData')
BEGIN 
	DROP PROCEDURE Znode_ImportValidatePimProductData
END
GO
	 
CREATE PROCEDURE [dbo].[Znode_ImportValidatePimProductData]
(   @ImportHeadName     VARCHAR(200),
    @TableName          VARCHAR(200),
    @NewGUID            NVARCHAR(200),
    @TemplateId         INT,
    @UserId             INT,
    @LocaleId           INT           = 1,
    @IsCategory         INT           = 0,
    @DefaultFamilyId    INT           = 0,
    @ImportProcessLogId INT,
    @PriceListId        INT,
	@CountryCode VARCHAR(100) = '',
	@PimCatalogId         INT    = 0 ,
	@PortalId int = 0,
	@IsAccountAddress bit = 0 )
AS
     SET NOCOUNT ON;

/*
    Summary :   Import PimProduct / Price / Inventory / Category / Category Associated Data 
    Process :   Admin site will upload excel / csv file in database and create global temporary table
				Procedure Znode_ImportValidatePimProductData will validate data with attribute validation rule
				If datatype validation issue found in input daata will logged into table "ZnodeImportLog"
				If Data is correct and record count in table ZnodeImportLog will be 0 then process for import data into Base tables
				To import data call procedure "Znode_ImportPimProductData"
    		  
				SourceColumnName: CSV file column headers
				TargetColumnName: Attributecode from ZnodePimAttribute Table (Consider those Attributecodes configured with default family only)
*/

     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             --BEGIN TRAN TRN_ImportValidProductData;
             DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
             DECLARE @SQLQuery NVARCHAR(MAX), @AttributeTypeName NVARCHAR(10), @AttributeCode NVARCHAR(300), @AttributeId INT, @IsRequired BIT, @SourceColumnName NVARCHAR(600), @ControlName VARCHAR(300), @ValidationName VARCHAR(100), @SubValidationName VARCHAR(300), @ValidationValue VARCHAR(300), @RegExp VARCHAR(300), @CreateDateString NVARCHAR(300), @DefaultLocaleId INT, @ImportHeadId INT, @CheckedSourceColumn NVARCHAR(600)= '', @Status BIT= 0,
			    @CsvColumnString nvarchar(max),
				@FailedRecordCount BIGINT,
				@SuccessRecordCount BIGINT

             DECLARE @FamilyAttributeDetail TABLE
             (PimAttributeId       INT,
              AttributeTypeName    VARCHAR(300),
              AttributeCode        VARCHAR(300),
              SourceColumnName     NVARCHAR(600),
              IsRequired           BIT,
              PimAttributeFamilyId INT
             );
             DECLARE @AttributeDetail TABLE
             (PimAttributeId    INT,
              AttributeTypeName VARCHAR(300),
              AttributeCode     VARCHAR(300),
              SourceColumnName  NVARCHAR(600),
              IsRequired        BIT,
              ControlName       VARCHAR(300),
              ValidationName    VARCHAR(100),
              SubValidationName VARCHAR(300),
              ValidationValue   VARCHAR(300),
              RegExp            VARCHAR(300)
             );

			 --IF ('tempdb..#DefaultAttributeCode') IS NOT NULL
				--drop table #DefaultAttributeCode

			CREATE TABLE #DefaultAttributeCode
			(AttributeTypeName          VARCHAR(300),
			PimAttributeDefaultValueId INT,
			PimAttributeId             INT,
			AttributeDefaultValueCode  VARCHAR(100)
			);

			--SET @SQLQuery = 'Select * into _tempattribute FROM  '+@TableName
   --          EXEC sys.sp_sqlexec  @SQLQuery;



			IF( @ImportHeadName = 'B2BCustomer' )
			BEGIN
				EXEC ZnodeB2BCustomerMapping @ImportHeadName = @ImportHeadName, @TableName = @TableName
			END
		
             DECLARE @GlobalTempTableColumns TABLE(ColumnName NVARCHAR);
             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM INFORMATION_SCHEMA.TABLES
                 WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#InvalidDefaultData'
             )
                 CREATE TABLE #InvalidDefaultData
                 (RowNumber  INT,
                  Value      NVARCHAR(MAX),
                  ColumnName NVARCHAR(600)
                 );
             ELSE
             DROP TABLE #InvalidDefaultData;
             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM INFORMATION_SCHEMA.TABLES
                 WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#GlobalTempTableColumns'
             )
                 BEGIN

                     SET @SQLQuery = 'SELECT Column_Name, '''+@ImportHeadName+''' AS ImportHeadName  from tempdb.INFORMATION_SCHEMA.COLUMNS	where table_name = object_name(object_id('''+@TableName+'''),
					(select database_id from sys.databases where name = ''tempdb''))';
                     CREATE TABLE #GlobalTempTableColumns
                     (ColumnName   NVARCHAR(MAX),
                      TypeOfImport NVARCHAR(100)
                     );
                     INSERT INTO #GlobalTempTableColumns
                     (ColumnName,
                      TypeOfImport
                     )
                     EXEC sys.sp_sqlexec
                          @SQLQuery;
                 END;
		  -- If Exists ( Select  count(1)  from #GlobalTempTableColumns GROUP BY ColumnName  Having count(1) > 1 )
		  -- Begin
			 --   INSERT INTO ZnodeImportLog(ErrorDescription,ColumnName,Data,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
    --               Select  46,ColumnName,'',@newGUID,@UserId,@GetDate,@UserId,@GetDate, @ImportProcessLogId  from #GlobalTempTableColumns GROUP BY ColumnName  Having count(1) > 1 
				
				----'Multiple occurance of column are not allow for'
		  -- END

             IF EXISTS
             (
                 SELECT TOP 1 1
                 FROM #GlobalTempTableColumns
                 WHERE ColumnName IN('PimCategoryId', 'PimProductId', 'RowNumber')
             )
                 BEGIN
                     INSERT INTO ZnodeImportLog
                     (ErrorDescription,
                      ColumnName,
                      Data,
                      GUID,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate,
                      ImportProcessLogId
                     )
                     VALUES
                     (43,
                      '',
                      '',
                      @newGUID,
                      @UserId,
                      @GetDate,
                      @UserId,
                      @GetDate,
                      @ImportProcessLogId
                     );
                 END;
             SET @DefaultLocaleId = dbo.Fn_GetDefaultLocaleId();
             --Remove old error log 
             --DELETE FROM ZnodeImportLog WHERE ImportProcessLogId in (select ImportProcessLogId  FROM ZnodeImportProcessLog  WHERE ImportTemplateId  = @TemplateId )
             --GUID = @NewGUID;
             --Delete FROM ZnodeImportProcessLog  WHERE ImportTemplateId  = @TemplateId 
		
             IF NOT EXISTS
             (
                 SELECT TOP 1 1  FROM ZnodeImportLog
                 WHERE Guid = @NewGUID
                       AND ErrorDescription IN(43, 42)
                 AND ImportProcessLogId = @ImportProcessLogId
             )
                 BEGIN
                     IF @ImportHeadName = 'Product'
                      BEGIN
						  IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
							  SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimProductId int null ';
						  ELSE 
							 SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimProductId int null Primary KEY CLUSTERED(RowNumber)';
						 
						  EXEC sys.sp_sqlexec @SQLQuery;
			         END;
                     ELSE
                     IF @ImportHeadName = 'Category'
                         BEGIN
							  IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimCategoryId int null ';
							  ElSE
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimCategoryId int null Primary KEY CLUSTERED(RowNumber) ';
						  
							  EXEC sys.sp_sqlexec @SQLQuery;
                         END;
                     ELSE
                         BEGIN
							IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1) ';
							Else 
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1) Primary KEY CLUSTERED(RowNumber)';
							
							EXEC sys.sp_sqlexec @SQLQuery;
                         END;;
                 END;
				
             --Generate new process for current import 
             --INSERT INTO ZnodeImportProcessLog(ImportTemplateId,Status,ProcessStartedDate,ProcessCompletedDate,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             --SELECT @TemplateId,dbo.Fn_GetImportStatus(0),@GetDate,NULL,@UserId,@GetDate,@UserId,@GetDate;
             --SET @ImportProcessLogId = @@IDENTITY;

             SET @CreateDateString = CONVERT(VARCHAR(100), @UserId)+','''+CONVERT(VARCHAR(100), @GetDate)+''','+CONVERT(VARCHAR(100), @UserId)+','''+CONVERT(VARCHAR(100), @GetDate)+''', '+CONVERT(VARCHAR(100), @ImportProcessLogId);

             SELECT TOP 1 @ImportHeadId = ImportHeadId FROM ZnodeImportTemplate WHERE ImportTemplateId = @TemplateId;
             IF @DefaultFamilyId = 0
                AND @ImportHeadName IN('Product', 'Category')
                 BEGIN 
                     --Get all default attribute values in attribute 
                     INSERT INTO @FamilyAttributeDetail
                     (PimAttributeId,
                      AttributeTypeName,
                      AttributeCode,
                      SourceColumnName,
                      IsRequired,
                      PimAttributeFamilyId
                     )
                     --Call Process to insert data of defeult family with source column name and target column name 
                     EXEC Znode_ImportGetTemplateDetails
                          @TemplateId = @TemplateId,
                          @IsValidationRules = 0,
                          @IsIncludeRespectiveFamily = 1,
                          @IsCategory = @IsCategory,
                          @DefaultFamilyId = @DefaultFamilyId;

					---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
					Delete FAD from @FamilyAttributeDetail FAD
					where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
					and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					               inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
                 END;
             ELSE
             IF @ImportHeadName IN('Product', 'Category')
                 BEGIN
                     --Get all default attribute values in attribute 
                     INSERT INTO @FamilyAttributeDetail
                     (PimAttributeId,
                      AttributeTypeName,
                      AttributeCode,
                      SourceColumnName,
                      IsRequired,
                      PimAttributeFamilyId
                     )
                     --Call Process to insert data of defeult family with source column name and target column name 
                     EXEC Znode_ImportGetTemplateDetails
                          @TemplateId = @TemplateId,
                          @IsValidationRules = 0,
                          @IsIncludeRespectiveFamily = 1,
                          @IsCategory = @IsCategory,
                          @DefaultFamilyId = @DefaultFamilyId;

					---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
					Delete FAD from @FamilyAttributeDetail FAD
					where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
					and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					               inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
                 END;      
             -- Check attributes are manditory and not provided with source table
		   	 
			if @TABLENAME	like '%tempdb..%'
				SET @SQLQuery = 'SELECT 42 AS ErrorDescription , SourceColumnName , '''' , '''+@NewGUID+''','+@CreateDateString+' from ZnodeImportTemplateMapping where ImportTemplateId = '+CONVERT(VARCHAR(100), @TemplateId)+' and ltrim(rtrim(SourceColumnName)) <> '''' AND ltrim(rtrim(SourceColumnName)) not in ( select isnull(Name ,'''') from tempdb.sys.columns where object_id = object_id('''+@TABLENAME+'''));';
			else 
				SET @SQLQuery = 'SELECT 42 AS ErrorDescription , SourceColumnName , '''' , '''+@NewGUID+''','+@CreateDateString+' from ZnodeImportTemplateMapping where ImportTemplateId = '+CONVERT(VARCHAR(100), @TemplateId)+' and ltrim(rtrim(SourceColumnName)) <> '''' AND ltrim(rtrim(SourceColumnName)) not in ( select isnull(Name ,'''') from sys.columns where object_id = object_id('''+@TABLENAME+'''));';
		 
			Declare @Tbl_CsvDynamicColulmns TABLE (ColumnName nvarchar(300), SequenceNumber int, DataType nvarchar(50),IsRequired bit )

			INSERT INTO @Tbl_CsvDynamicColulmns(ColumnName , SequenceNumber , DataType ,IsRequired)
			SELECT DISTINCT ZITM.SourceColumnName ,ZIAV.SequenceNumber, ZIAV.AttributeTypeName, ZIAV.IsRequired
			FROM ZnodeImportAttributeValidation ZIAV LEFT OUTER JOIN 
			ZnodeImportTemplate  ZIT ON ZIT.ImportHeadId =  ZIAV.ImportHeadId AND ZIT.ImportTemplateId  = @TemplateId
			LEFT OUTER JOIN ZnodeImportTemplateMapping  ZITM ON ZITM.ImportTemplateId = ZIT.ImportTemplateId  
			and ZIAV.AttributeCode = ZITM.TargetColumnName
			AND ZITM.ImportTemplateId  = @TemplateId
			WHERE ZIAV.ImportHeadId = @ImportHeadId --ORDER BY ZIAV.SequenceNumber

		    SELECT @CsvColumnString = SUBSTRING ((Select ',' +  ISNULL(ColumnName ,'NULL') from @Tbl_CsvDynamicColulmns ORDER BY SequenceNumber FOR XML PATH ('')),2,4000) 


     		INSERT INTO ZnodeImportLog(ErrorDescription, ColumnName, Data, GUID,CreatedBy, CreatedDate,  ModifiedBy,ModifiedDate,ImportProcessLogId
             )
             EXEC sys.sp_sqlexec  @SQLQuery;
             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM ZnodeImportLog
                 WHERE Guid = @NewGUID
                       AND ErrorDescription IN(43, 42)
                 AND ImportProcessLogId = @ImportProcessLogId
             )
                 BEGIN
                     --Get all default attribute values in attribute 
                     IF @ImportHeadName IN('Product', 'Category')
                         BEGIN
                             -- Check attributes are manditory and not provided with source table
                             INSERT INTO ZnodeImportLog
                             (ErrorDescription,
                              ColumnName,
                              Data,
                              GUID,
                              CreatedBy,
                              CreatedDate,
                              ModifiedBy,
                              ModifiedDate,
                              ImportProcessLogId
                             )
                                    SELECT '14' AS ErrorDescription,
                                           AttributeCode,
                                           '',
                                           @NewGUID,
                                           @UserId,
                                           @GetDate,
                                           @UserId,
                                           @GetDate,
                                           @ImportProcessLogId
                                    FROM @FamilyAttributeDetail
                                    WHERE ISNULL(SourceColumnName, '') = ''
                                          AND IsRequired = 1;  

                             -- Read all attribute details with their datatype
                             INSERT INTO @AttributeDetail
                             (PimAttributeId,
                              AttributeTypeName,
                              AttributeCode,
                              SourceColumnName,
                              IsRequired,
                              ControlName,
                              ValidationName,
                              SubValidationName,
                              ValidationValue,
                              RegExp
                             )
                             EXEC Znode_ImportGetTemplateDetails
                                  @TemplateId=@TemplateId,
								  @DefaultFamilyId=@DefaultFamilyId;

							---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
							Delete FAD from @AttributeDetail FAD
							where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
							and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
										   inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode) 

                             DELETE FROM @AttributeDetail
                             WHERE AttributeTypeName = 'Image'
                                   AND ValidationName <> 'IsAllowMultiUpload';
                             --IF NOT EXISTS
                             --(
                             --    SELECT TOP 1 1
                             --    FROM INFORMATION_SCHEMA.TABLES
                             --    WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#DefaultAttributeCode'
                             --)
                             --    BEGIN
                             --        CREATE TABLE #DefaultAttributeCode
                             --        (AttributeTypeName          VARCHAR(300),
                             --         PimAttributeDefaultValueId INT,
                             --         PimAttributeId             INT,
                             --         AttributeDefaultValueCode  VARCHAR(100)
                             --        );
                                     INSERT INTO #DefaultAttributeCode
                                     (AttributeTypeName,
                                      PimAttributeDefaultValueId,
                                      PimAttributeId,
                                      AttributeDefaultValueCode
                                     )
                                     --Call Process to insert default data value 
                                     EXEC Znode_ImportGetPimAttributeDefaultValue;

                                     DELETE FROM #DefaultAttributeCode
                                     WHERE AttributeTypeName = 'Yes/No';
                             --    END;
                             --ELSE
                             --    BEGIN
                             --        DROP TABLE #DefaultAttributeCode;
                             --    END;
                         END;
                     ELSE
                         BEGIN
					
					
                             --Read all attribute details with their datatype
                             INSERT INTO @AttributeDetail
                             (AttributeTypeName,
                              AttributeCode,
                              SourceColumnName,
                              IsRequired,
                              ControlName,
                              ValidationName,
                              SubValidationName,
                              ValidationValue,
                              RegExp
                             )
                             EXEC [Znode_ImportGetOtherTemplateDetails]
                                  @TemplateId = @TemplateId,
                                  @ImportHeadId = @ImportHeadId;

							IF @ImportHeadName IN('B2BCustomer')
							BEGIN

								INSERT INTO @AttributeDetail
								 (PimAttributeId,
								 AttributeTypeName,
								  AttributeCode,
								  SourceColumnName,
								  IsRequired,
								  ControlName,
								  ValidationName,
								  SubValidationName,
								  ValidationValue,
								  RegExp
								 )
								 EXEC [Znode_ImportGetGlobalTemplateDetails]
									  @TemplateId = @TemplateId,
									  @ImportHeadId = @ImportHeadId;

								
								INSERT INTO #DefaultAttributeCode
								(AttributeTypeName,
								PimAttributeDefaultValueId,
								PimAttributeId,
								AttributeDefaultValueCode
								)
								--Call Process to insert default data value 
								EXEC Znode_ImportGetGlobalAttributeDefaultValue;

								DELETE FROM #DefaultAttributeCode
								WHERE AttributeTypeName = 'Yes/No';

							END
						
                             --Check attributes are not mapped with any family of Pim Product
                             INSERT INTO ZnodeImportLog
                             (ErrorDescription,
                              ColumnName,
                              Data,
                              GUID,
                              CreatedBy,
                              CreatedDate,
                              ModifiedBy,
                              ModifiedDate,
                              ImportProcessLogId
                             )
                                    SELECT DISTINCT
                                           '14' AS ErrorDescription,
                                           AttributeCode,
                                           '',
                                           @NewGUID,
                                           @UserId,
                                           @GetDate,
                                           @UserId,
                                           @GetDate,
                                           @ImportProcessLogId
                                    FROM @AttributeDetail
                                    WHERE ISNULL(SourceColumnName, '') = ''   AND IsRequired = 1;  ;

                         END;
						
                     --	Check attributes are not mapped with (Default / Other) family of Pim Product
                     --	INSERT INTO ZnodeImportLog ( ErrorDescription , ColumnName , Data , GUID , CreatedBy , CreatedDate , ModifiedBy , ModifiedDate , ImportProcessLogId)
                     --	SELECT '1' AS ErrorDescription , SourceColumnName , '' , @NewGUID , @UserId , @GetDate , @UserId , @GetDate , @ImportProcessLogId
                     --	FROM @AttributeDetail WHERE PimAttributeId NOT IN ( SELECT zpfgm.PimAttributeId FROM dbo.ZnodePimFamilyGroupMapper AS zpfgm);
                     --	Verify data in global temporary table (column wise)
					
                     DECLARE Cr_Attribute CURSOR LOCAL FAST_FORWARD
                     FOR SELECT PimAttributeId,
                                AttributeTypeName,
                                AttributeCode,
                                IsRequired,
                                SourceColumnName,
                                ControlName,
                                ValidationName,
                                SubValidationName,
                                ValidationValue,
                                RegExp
                         FROM @AttributeDetail
                         WHERE ISNULL(SourceColumnName, '') <> '';
                     OPEN Cr_Attribute;
                     FETCH NEXT FROM Cr_Attribute INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @ControlName, @ValidationName, @SubValidationName, @ValidationValue, @RegExp;
                     WHILE @@FETCH_STATUS = 0
                         BEGIN
				             IF @AttributeTypeName = 'Number'
                                 BEGIN
							      EXEC Znode_ImportValidateNumber
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @ImportHeadId = @ImportHeadId,
                                          @ImportProcessLogId = @ImportProcessLogId;
                                 END;
							 -- Check invalid date
							
                             IF @AttributeTypeName = 'Date'
                                 BEGIN
                                     EXEC Znode_ImportValidateDate
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @ImportHeadId = @ImportHeadId,
                                          @ImportProcessLogId = @ImportProcessLogId;
                                 END;
							 -- Check Manditory Data
		 					 IF @IsRequired = 1 AND @CheckedSourceColumn <> @SourceColumnName
								BEGIN
									SET @CheckedSourceColumn = @SourceColumnName;
									EXEC Znode_ImportValidateManditoryData
									@TableName = @TableName,
									@SourceColumnName = @SourceColumnName,
									@CreateDateString = @CreateDateString,
									@ValidationName = @ValidationName,
									@ControlName = @ControlName,
									@ValidationValue = @ValidationValue,
									@NewGUID = @NewGUID,
									@ImportHeadId = @ImportHeadId;
								END;
							 --END 
							
                             IF @AttributeTypeName = 'Text'
                                 BEGIN
								 
						              EXEC Znode_ImportValidateManditoryText
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @LocaleId = @LocaleId,
                                          @DefaultLocaleId = @DefaultLocaleId,
                                          @AttributeId = @AttributeId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @ImportHeadId = @ImportHeadId;
                                 END;
                             IF @AttributeTypeName = 'Image'
                                 BEGIN
                                     EXEC Znode_ImportValidateImageData
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @LocaleId = @LocaleId,
                                          @DefaultLocaleId = @DefaultLocaleId,
                                          @AttributeId = @AttributeId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @ImportHeadId = @ImportHeadId;
                                 END;
                             --Check Default data value is valid 
                             IF @ImportHeadName IN('Product', 'Category','B2BCustomer')
                                 BEGIN
                                     IF @AttributeId IN
                                     (
                                         SELECT PimAttributeId
                                         FROM #DefaultAttributeCode
                                     )
                                         BEGIN
							
                                            IF  @AttributeTypeName = 'Multi Select'
											 BEGIN
										 		 ---Verify Image file is exists in media table or not 
												 SET @SQLQuery = ' INSERT INTO #InvalidDefaultData (RowNumber, Value, ColumnName) 
												 SELECT ROWNUMBER , (Select TOP 1 Item from dbo.split(' + @SourceColumnName + ','','')  SP WHERE NOT EXISTS 
												 (Select ToP 1 1 FROM #DefaultAttributeCode DAC WHERE 
												  DAC.AttributeTypeName <> ''Yes/No'' AND DAC.AttributeDefaultValueCode IS NOT NULL AND DAC.PimAttributeId = 
												 ' + CONVERT(VARCHAR(100), @AttributeId) + ' AND ltrim(rtrim(SP.Item) ) = DAC.AttributeDefaultValueCode
												 )), ''' + @SourceColumnName + ''' as [ColumnName]  FROM ' + @TableName
												 + ' Where ISnull(' + @SourceColumnName +  ','''') <> '''''
												EXEC sys.sp_sqlexec @SQLQuery;
											  END
											  ELSE IF @AttributeTypeName = 'Simple Select'
											  BEGIN
						
												---Verify Image file is exists in media table or not 
												 SET @SQLQuery = ' INSERT INTO #InvalidDefaultData (RowNumber, Value, ColumnName) 
												 SELECT ROWNUMBER , ' + @SourceColumnName + ' , ''' + @SourceColumnName + ''' as [ColumnName]  FROM ' + @TableName
												 + ' SP Where ISnull(' + @SourceColumnName +  ','''') <> '''' AND 
												  NOT EXISTS 
												 (Select TOP 1 1 FROM #DefaultAttributeCode DAC WHERE 
												  DAC.AttributeTypeName <> ''Yes/No'' AND DAC.AttributeDefaultValueCode IS NOT NULL AND DAC.PimAttributeId = 
												 ' + CONVERT(VARCHAR(100), @AttributeId) + ' AND ltrim(rtrim(SP.' + @SourceColumnName + ') ) = DAC.AttributeDefaultValueCode ) '
							
												EXEC sys.sp_sqlexec @SQLQuery;
											  END   
												-- Check Invalid Image 
												 SET @SQLQuery = 'SELECT ''9 '' ErrorDescription,'''+@SourceColumnName+''' as [ColumnName], 
												 Value AS  AttributeValue,RowNumber ,'''+@NewGUID+''',  '+@CreateDateString+' FROM #InvalidDefaultData Where Value IS NOT NULL'
												 INSERT INTO ZnodeImportLog (ErrorDescription, ColumnName, Data, RowNumber, GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
												 EXEC sys.sp_sqlexec @SQLQuery;
												 Delete from #InvalidDefaultData

       
                                         END;
                                 END;
							
                             FETCH NEXT FROM Cr_Attribute INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @ControlName, @ValidationName, @SubValidationName, @ValidationValue, @RegExp;
                         END;
                     CLOSE Cr_Attribute;
                     DEALLOCATE Cr_Attribute;
                     --SELECT top 1 1 FROM @FamilyAttributeDetail where  iSNULL(SourceColumnName,'') = ''  and IsRequired = 1
                 END;
             

			  
------------------------------------------------------------------------------------------
		 Declare @SQLQueryNew NVARCHAR(4000)
		 Declare @SourceColumnNameProduct nvarchar(4000) 
         IF @ImportHeadName IN('Product','Pricing','ProductAssociation','Inventory')
		 BEGIN
		   	 
		 SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'SKU'
		 AND ImportTemplateId = @TemplateId


			SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  SKU - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;			
		END
		ELSE IF @ImportHeadName IN('ProductAttribute')
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'AttributeCode'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  Attribute - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'ZipCode'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'ZIP'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  ZIPCode - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'Category'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'CategoryCode'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  CategoryCode - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'CategoryAssociation'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'CategoryName'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  CategoryName - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;

		END
		ELSE IF @ImportHeadName IN ('Customer','CustomerAddress')
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'UserName'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  UserName - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'SEODetails'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'Code'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  Code - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
	-------------------------------------------------------------------------------------------------------------
	
	--DECLARE @SQLLOG NVARCHAR(MAX)

	--SET @SQLLOG = '

	--SELECT TBL.*,ZM.MessageName AS ErrorDescription INTO  tempdb..[##ImportProcessLog_'+@NewGUID+ ']
	--FROM '+@TableName+' TBL
	--INNER JOIN ZnodeImportLog ZILL ON (TBL.Rownumber = ZILL.Rownumber)
	--INNER JOIN Znodemessage ZM ON (ZM.MessageCode = ZILL.ErrorDescription)
	--WHERE ImportProcessLogId =  '+CONVERT(VARCHAR(100), @ImportProcessLogId)+'
	--AND ZILL.Rownumber IS NOT NULL	
	--'	
	-- PRINT @SQLLOG
	-- EXEC sys.sp_sqlexec  @SQLLOG;

	 --SET @SQLLOG = ''

	 --SET @SQLLOG = 'SELECT * FROM [TempDB..##ImportProcessLog_'+@NewGUID+ ']'
	 --EXEC sys.sp_sqlexec  @SQLLOG;


	--------------------------------------------------------------------------------------------------------------------
			 
  		SET @SQLQuery = 'Delete FROM  '+@TableName+' Where Rownumber IN (Select Rownumber FROM ZnodeImportLog  WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND Rownumber IS NOT NULL)';
        EXEC sys.sp_sqlexec  @SQLQuery;
			 			
	  
             IF @ImportHeadName IN('Product', 'Category')
                 BEGIN
                     IF NOT EXISTS
                     (
                         SELECT TOP 1 1
                         FROM @FamilyAttributeDetail
                         WHERE ISNULL(SourceColumnName, '') = ''
                               AND IsRequired = 1
                     ) AND NOT EXISTS
					 (
						 SELECT TOP 1 1
						 FROM ZnodeImportLog
						 WHERE Guid = @NewGUID
							   AND ErrorDescription IN(43, 42)
						 AND ImportProcessLogId = @ImportProcessLogId
					 )
                         BEGIN
                             IF @IsCategory = 0
                                 BEGIN
							
                                     EXEC Znode_ImportPimProductData
                                          @TableName = @TableName,
                                          @NewGUID = @NewGUID,
                                          @TemplateId = @TemplateId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @UserId = @UserId,
                                          @LocaleId = @LocaleId,
                                          @DefaultFamilyId = @DefaultFamilyId;

                                 END;
                             ELSE
                                 BEGIN
                                     EXEC Znode_ImportPimCategoryData
                                          @TableName = @TableName,
                                          @NewGUID = @NewGUID,
                                          @TemplateId = @TemplateId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @UserId = @UserId,
                                          @LocaleId = @LocaleId,
                                          @DefaultFamilyId = @DefaultFamilyId;
                                 END;
                         END
						 ELSE
							BEGIN
								-- Update Record count in log 
								--DECLARE @FailedRecordCount BIGINT
								--DECLARE @SuccessRecordCount BIGINT
								SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
								SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
								EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount out
								UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
								WHERE ImportProcessLogId = @ImportProcessLogId;
							END

                 END;
				IF NOT EXISTS
					 (
						 SELECT TOP 1 1
						 FROM ZnodeImportLog
						 WHERE Guid = @NewGUID
							   AND ErrorDescription IN(43, 42)
						 AND ImportProcessLogId = @ImportProcessLogId
					 )
             BEGIN
                 IF @ImportHeadName = 'Pricing'
                     BEGIN
                         EXEC [Znode_ImportPriceList]
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID,
                              @PriceListId = @PriceListId;
                     END;

                 IF @ImportHeadName = 'Inventory'
                     BEGIN
				
                         EXEC Znode_ImportInventory_Ver1
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID;
                     END;
                 IF @ImportHeadName = 'ZipCode'
                     BEGIN
						 EXEC Znode_ImportZipCode
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID,
							  @CountryCode = @CountryCode;
                     END;
					 IF @ImportHeadName = 'CategoryAssociation'
                     BEGIN
						 EXEC Znode_ImportCatalogCategory
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID,
							  @PimCatalogId = @PimCatalogId;
                     END;
					 IF @ImportHeadName = 'ProductAssociation'
                     BEGIN
						 EXEC Znode_ImportAssociateProducts
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID
                     END;
			
					 IF @ImportHeadName = 'SEODetails' AND @PortalId > 0 
                     BEGIN
						 EXEC Znode_ImportSEODetails
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
							  @LocaleId = @LocaleId,
							  @PortalId =@PortalId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID,
							  @CsvColumnString = @CsvColumnString 

				
                     END;
				
					 IF @ImportHeadName = 'ProductAttribute' 
                     BEGIN
						 EXEC Znode_ImportAttributes
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
							  @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID
				
                     END;

					 IF @ImportHeadName = 'Customer' AND @PortalId > 0 
                     BEGIN
						 EXEC Znode_ImportCustomer
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = @PortalId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString
				
                     END;
					 
					 IF @ImportHeadName = 'UserApprovers' AND @PortalId > 0 
                     BEGIN
						 EXEC Znode_ImportUserApproval
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = @PortalId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString
				
                     END;

					 IF @ImportHeadName = 'B2BCustomer' AND @PortalId > 0 
                     BEGIN

							 EXEC Znode_ImportB2BCustomer
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = @PortalId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString
				
                     END;

					 IF @ImportHeadName = 'CustomerAddress' --AND @PortalId > 0 
                     BEGIN
						 EXEC Znode_ImportCustomerAddress
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = 1, -- not implemented from forntend 
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString,
							  @IsAccountAddress = @IsAccountAddress
				
                     END;
					 IF @ImportHeadName = 'ShippingAddress' --AND @PortalId > 0 
                     BEGIN
						 EXEC Znode_ImportCustomerAddress
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = 1, -- not implemented from forntend 
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString,
							  @IsAccountAddress = @IsAccountAddress
				
                     END;
					 IF @ImportHeadName = 'StoreLocator' --AND @PortalId > 0 
                     BEGIN
					 	 EXEC Znode_ImportStoreLocatorAddress
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString
                     END;
 
				 
             END
			 ELSE 
				 BEGIN
					-- Update Record count in log 					
					SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
					SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
					EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount out
					UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount , TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
					WHERE ImportProcessLogId = @ImportProcessLogId;
				 END

             EXEC Znode_ImportReadErrorLog
                  @ImportProcessLogId = @ImportProcessLogId,
                  @NewGUID = @NewGUID;
             DROP TABLE #GlobalTempTableColumns;

             -- Finally call product insert process if error not found in error log table 
             IF EXISTS
             (
                 SELECT TOP 1 1
                 FROM ZnodeImportLog
                 WHERE ImportProcessLogId = @ImportProcessLogId
                       AND Guid = @NewGUID
             )
                 BEGIN
                     --Update process with completed status for current import 
                     UPDATE ZnodeImportProcessLog
                       SET
                           Status = dbo.Fn_GetImportStatus(3),
                           ProcessCompletedDate = GETDATE()
                       WHERE ImportProcessLogId = @ImportProcessLogId;
                 END;
				 SET @SQLQuery = 'Drop Table ' + @TableName
                 EXEC sys.sp_sqlexec @SQLQuery;
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE(),
                    ERROR_LINE(),
                    ERROR_PROCEDURE();
             EXEC Znode_ImportReadErrorLog
                  @ImportProcessLogId = @ImportProcessLogId,
                  @NewGUID = @NewGUID; 
             --Update process with failed status for current import 
             UPDATE ZnodeImportProcessLog
               SET
                   Status = dbo.Fn_GetImportStatus(3),
                   ProcessCompletedDate = @GetDate
             WHERE ImportProcessLogId = @ImportProcessLogId;
			 				 SET @SQLQuery = 'Drop Table ' + @TableName
                 EXEC sys.sp_sqlexec @SQLQuery;
             ROLLBACK TRAN TRN_ImportValidProductData;
         END CATCH;
     END;



	GO

insert into ZnodeGlobalSetting(FeatureName	,FeatureValues,	FeatureSubValues,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate)
select 'ProductImportBulk',	'500',	NULL,	2,	getdate(),2,GETDATE()
where not exists(select * from ZnodeGlobalSetting where FeatureName = 'ProductImportBulk')

GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportPimProductData')
BEGIN 
	DROP PROCEDURE Znode_ImportPimProductData
END
GO

CREATE PROCEDURE [dbo].[Znode_ImportPimProductData]
(   @TableName          VARCHAR(200),
    @NewGUID            NVARCHAR(200),
    @TemplateId         NVARCHAR(200),
    @ImportProcessLogId INT,
    @UserId             INT,
    @LocaleId           INT,
    @DefaultFamilyId    INT)
AS
    
	/*
      Summary : Finally Import data into ZnodePimProduct, ZnodePimAttributeValue and ZnodePimAttributeValueLocale Table 
      Process : Flat global temporary table will split into cloumn wise and associted with Znode Attributecodes,
    		      Create group of product with their attribute code and values and inserted one by one products. 	   
    
      SourceColumnName : CSV file column headers
      TargetColumnName : Attributecode from ZnodePimAttribute Table 

	 ***  Need to log error if transaction failed during insertion of records into table.
    */

     BEGIN
		 SET NOCOUNT ON
         BEGIN TRY
             BEGIN TRAN ImportProducts;
             DECLARE @SQLQuery NVARCHAR(MAX);
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @AttributeTypeName NVARCHAR(10), @AttributeCode NVARCHAR(300), @AttributeId INT, @IsRequired BIT, @SourceColumnName NVARCHAR(600), @PimAttributeFamilyId INT, @NewProductId INT, @PimAttributeValueId INT, @status BIT= 0; 
             --Declare error Log Table 

			
			 DECLARE @FamilyAttributeDetail TABLE
			 ( 
				PimAttributeId int, AttributeTypeName varchar(300), AttributeCode varchar(300), SourceColumnName nvarchar(600), IsRequired bit, PimAttributeFamilyId int
			 );
             IF @DefaultFamilyId = 0
                 BEGIN
					INSERT INTO @FamilyAttributeDetail( PimAttributeId, AttributeTypeName, AttributeCode, SourceColumnName, IsRequired, PimAttributeFamilyId )
					--Call Process to insert data of defeult family with cource column name and target column name 
					EXEC Znode_ImportGetTemplateDetails @TemplateId = @TemplateId, @IsValidationRules = 0, @IsIncludeRespectiveFamily = 1,@DefaultFamilyId = @DefaultFamilyId;
                    UPDATE @FamilyAttributeDetail SET PimAttributeFamilyId = DBO.Fn_GetCategoryDefaultFamilyId();

					---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
					Delete FAD from @FamilyAttributeDetail FAD
					where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
					and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					               inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
                 END;
             ELSE
                 BEGIN
                     INSERT INTO @FamilyAttributeDetail(PimAttributeId,AttributeTypeName,AttributeCode,SourceColumnName,IsRequired,PimAttributeFamilyId)
                     --Call Process to insert data of defeult family with cource column name and target column name 
                     EXEC Znode_ImportGetTemplateDetails @TemplateId = @TemplateId,@IsValidationRules = 0,@IsIncludeRespectiveFamily = 1,@DefaultFamilyId = @DefaultFamilyId;

					 ---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
					Delete FAD from @FamilyAttributeDetail FAD
					where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
					and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					               inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
                 END;  
				
            -- Retrive PimProductId on the basis of SKU for update product 
			SET @SQLQuery = 'UPDATE tlb SET tlb.PimProductId = ZPAV.PimProductId 
							FROM ZnodePimAttributeValue AS ZPAV INNER JOIN ZnodePimAttributeValueLocale AS ZPAVL ON 
							(ZPAVL.PimAttributeValueId = ZPAV.PimAttributeValueId) 
							INNER JOIN [dbo].[ZnodePimAttribute] ZPA on ZPAV.PimAttributeId = ZPA.PimAttributeId AND ZPA.AttributeCode= ''SKU'' 
							INNER JOIN '+@TableName+' tlb ON ZPAVL.AttributeValue = ltrim(rtrim(tlb.SKU)) ';
			EXEC sys.sp_sqlexec	@SQLQuery	 	
				 	
					
             --Read all attribute details with their datatype 
			 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.TABLES WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#DefaultAttributeValue')
				BEGIN
					   CREATE TABLE #DefaultAttributeValue (AttributeTypeName  VARCHAR(300),PimAttributeDefaultValueId INT,PimAttributeId INT,
					   AttributeDefaultValueCode  VARCHAR(100));
					 
					INSERT INTO #DefaultAttributeValue(AttributeTypeName,PimAttributeDefaultValueId,PimAttributeId,AttributeDefaultValueCode)
					--Call Process to insert default data value 
					EXEC Znode_ImportGetPimAttributeDefaultValue;
				END;
             ELSE
                BEGIN
                    DROP TABLE #DefaultAttributeValue;
                END;
             EXEC sys.sp_sqlexec
                  @SQLQuery;
       
			DECLARE @PimProductDetail TABLE 
			 (
			      
				  PimAttributeId INT, PimAttributeFamilyId INT,ProductAttributeCode VARCHAR(300) NULL,
				  ProductAttributeDefaultValueId INT NULL,PimAttributeValueId  INT NULL,LocaleId INT,
				  PimProductId INT NULL,AttributeValue NVARCHAR(MAX) NULL,AssociatedProducts NVARCHAR(4000) NULL,ConfigureAttributeIds VARCHAR(2000) NULL,
				  ConfigureFamilyIds VARCHAR(2000) NULL,RowNumber INT  
                );

		-- Update Record count in log 
       DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
		EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount OUTPUT
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End

			
             -- Column wise split data from source table ( global temporary table ) and inserted into temporary table variable @PimProductDetail
             -- Add PimAttributeDefaultValue 
             DECLARE Cr_AttributeDetails CURSOR LOCAL FAST_FORWARD
             FOR SELECT PimAttributeId,AttributeTypeName,AttributeCode,IsRequired,SourceColumnName,PimAttributeFamilyId FROM @FamilyAttributeDetail  WHERE ISNULL(SourceColumnName, '') <> '';
             OPEN Cr_AttributeDetails;
             FETCH NEXT FROM Cr_AttributeDetails INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @PimAttributeFamilyId;
             WHILE @@FETCH_STATUS = 0
                 BEGIN
                    SET @NewProductId = 0;
                    SET @SQLQuery = ' SELECT '''+CONVERT(VARCHAR(100), @PimAttributeFamilyId)+''' PimAttributeFamilyId , PimProductId PimProductId,'''+'['+@AttributeCode+']'+''' ProductAttributeCode ,'''+CONVERT(VARCHAR(100), @AttributeId)+''' AttributeId ,
									(SELECT TOP 1  PimAttributeDefaultValueId FROM #DefaultAttributeValue Where PimAttributeId =  '
									+ CONVERT(VARCHAR(100), @AttributeId)+'AND  AttributeDefaultValueCode = TN.['+@SourceColumnName+'] ) PimAttributeDefaultValueId ,['
									+ @SourceColumnName+'],'+CONVERT(VARCHAR(100), @LocaleId)+'LocaleId
								, RowNumber FROM '+@TableName+' TN';
								print @SQLQuery
                    INSERT INTO @PimProductDetail( PimAttributeFamilyId, PimProductId,ProductAttributeCode, PimAttributeId, ProductAttributeDefaultValueId, AttributeValue, LocaleId, RowNumber )
					
					EXEC sys.sp_sqlexec @SQLQuery;
                    FETCH NEXT FROM Cr_AttributeDetails INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @PimAttributeFamilyId;
                 END;
             CLOSE Cr_AttributeDetails;
             DEALLOCATE Cr_AttributeDetails;
			 
			
			 if object_id('tempdb..#PimProductDetail1') is not null
				drop table #PimProductDetail1

			 Select * into #PimProductDetail1 from @PimProductDetail

			 UPDATE a 
			 SET ConfigureAttributeIds =  SUBSTRING((SELECT ','+CAST(c.PimAttributeId As VARCHAR(100)) 
			 FROM #PimProductDetail1 c 
			 INNER JOIN ZnodePimAttribute b ON (b.PimAttributeId = c.PimAttributeId)
			 WHERE IsConfigurable =1  AND c.RowNumber = a.RowNumber  FOR XML PATH('')),2,4000) 
			 FROM #PimProductDetail1 a 
			WHERE EXISTS (SELECT TOP 1 1 FROM #PimProductDetail1 ab  WHERE ab.RowNumber = a.RowNumber AND	ab.ProductAttributeCode = 'ProductType' 
			 AND ab.AttributeValue = 'ConfigurableProduct' )
				
             -- In case of Yes/No : If value is not TRUE OR  1 then it will be  False else True
			 --If default Value set not need of hard code for IsActive
			 UPDATE ppdti SET ppdti.AttributeValue = CASE WHEN Upper(ISNULL(ppdti.AttributeValue, '')) in ( 'TRUE','1')  THEN 'true'  ELSE 'false' END FROM #PimProductDetail1 ppdti
                INNER JOIN #DefaultAttributeValue dav ON ppdti.PimAttributeId = dav.PimAttributeId WHERE   dav.AttributeTypeName = 'Yes/No';
            
		
		-----------Added Performance patch 
		DECLARE @PublishStateIdForDraft INT= [dbo].[Fn_GetPublishStateIdForDraftState]();
		DECLARE @PimDefaultFamily INT= dbo.Fn_GetDefaultPimProductFamilyId();
        DECLARE @pimSkuAttributeId VARCHAR(50)= [dbo].[Fn_GetProductSKUAttributeId]();
        DECLARE @PimIsDownlodableAttributeId VARCHAR(50)= [dbo].[Fn_GetIsDownloadableAttributeId]();
        DECLARE @PublishStateIdForNotPublished INT= [dbo].[Fn_GetPublishStateIdForForNotPublishedState]();

		DELETE FROM #PimProductDetail1 WHERE RTRIM(LTRIM(ISNULL(AttributeValue, ''))) = '';
        
		CREATE INDEX Inx_PimProductDetail_Bulk1 ON #PimProductDetail1(RowNumber);

        ------------------------------------Bulk Row Process
        DECLARE @MaxCount INT, @MinRow INT, @MaxRow INT, @Rows numeric(10,2);
        ---- Count of total rows for import
		SELECT @MaxCount = COUNT(*) FROM #PimProductDetail1;
		
		---- Count of rows in loop for import
		SELECT @Rows = (select top 1 FeatureValues from ZnodeGlobalSetting where FeatureName = 'ProductImportBulk')  --ceiling(@MaxCount/100.0)
        
		SELECT @MaxCount = CEILING(@MaxCount / @Rows);

        IF OBJECT_ID('tempdb..#Temp_ImportLoop') IS NOT NULL
            DROP TABLE #Temp_ImportLoop;
        
		---- To get the min and max rows for import in loop
		;WITH cte AS 
		(
			SELECT RowId = 1, 
				   MinRow = 1, 
                   MaxRow = cast(@Rows as int)
            UNION ALL
            SELECT RowId + 1, 
                   MinRow + cast(@Rows as int), 
                   MaxRow + cast(@Rows as int)
            FROM cte
            WHERE RowId + 1 <= @MaxCount
		)
        SELECT RowId, MinRow, MaxRow
        INTO #Temp_ImportLoop
        FROM cte
		option (maxrecursion 0);

        --while @MaxCount <= @minRow
        DECLARE cur_BulkData CURSOR LOCAL FAST_FORWARD
        FOR SELECT MinRow, MaxRow FROM #Temp_ImportLoop;

        OPEN cur_BulkData;
        FETCH NEXT FROM cur_BulkData INTO  @MinRow, @MaxRow;

        WHILE @@FETCH_STATUS = 0
        BEGIN
		
		BEGIN TRAN ImportProducts;

			if object_id ('tempdb..#PimProductDetail_Bulk_Process')is not null
					drop table tempdb..#PimProductDetail_Bulk_Process

			CREATE TABLE #PimProductDetail_Bulk_Process
			([PimAttributeId]                 [INT] NULL, 
				[PimAttributeFamilyId]           [INT] NULL, 
				[ProductAttributeCode]           [VARCHAR](300) NULL, 
				[ProductAttributeDefaultValueId] [INT] NULL, 
				[PimAttributeValueId]            [INT] NULL, 
				[LocaleId]                       [INT] NULL, 
				[PimProductId]                   [INT] NULL, 
				[AttributeValue]                 [NVARCHAR](MAX) NULL, 
				[AssociatedProducts]             [NVARCHAR](4000) NULL, 
				[ConfigureAttributeIds]          [VARCHAR](2000) NULL, 
				[ConfigureFamilyIds]             [VARCHAR](2000) NULL, 
				[RowNumber]                      [INT] NULL, 
				SKU1                             VARCHAR(600),
				Id Int Identity(1,1)Primary Key
			);

			CREATE INDEX Inx_PimProductDetail_Bulk_Process ON #PimProductDetail_Bulk_Process(ProductAttributeCode, PimProductId);
			CREATE INDEX Inx_PimProductDetail_Bulk_Process1 ON #PimProductDetail_Bulk_Process(RowNumber);
			CREATE INDEX Inx_PimProductDetail_Bulk_Process2 ON #PimProductDetail_Bulk_Process(ProductAttributeCode)
			CREATE INDEX Inx_PimProductDetail_Bulk_Process3 ON #PimProductDetail_Bulk_Process(PimAttributeId, PimProductId);

			---- Insert rows for import in bulk
            INSERT INTO #PimProductDetail_Bulk_Process
            ([PimAttributeId], 
                [PimAttributeFamilyId], 
                [ProductAttributeCode], 
                [ProductAttributeDefaultValueId], 
                [PimAttributeValueId], 
                [LocaleId], 
                [PimProductId], 
                [AttributeValue], 
                [AssociatedProducts], 
                [ConfigureAttributeIds], 
                [ConfigureFamilyIds], 
                [RowNumber]
            )
            SELECT [PimAttributeId], 
                    [PimAttributeFamilyId], 
                    [ProductAttributeCode], 
                    [ProductAttributeDefaultValueId], 
                    [PimAttributeValueId], 
                    [LocaleId], 
                    [PimProductId], 
                    ltrim(rtrim([AttributeValue])), 
                    [AssociatedProducts], 
                    [ConfigureAttributeIds], 
                    [ConfigureFamilyIds], 
                    [RowNumber]
            FROM #PimProductDetail1 a
            WHERE a.[RowNumber] BETWEEN @MinRow AND @MaxRow;

			--select * from @PimProductDetail

			--select * from #PimProductDetail1



            ---------------------------Start Importing 
			if object_id ('tempdb..#TBL_DefaultAttributeId')is not null
				drop table #TBL_DefaultAttributeId

			if object_id ('tempdb..#TBL_MediaAttributeId')is not null
				drop table #TBL_MediaAttributeId

			if object_id ('tempdb..#TBL_TextAreaAttributeId')is not null
				drop table #TBL_TextAreaAttributeId

			if object_id ('tempdb..#TBL_MediaAttributeValue')is not null
				drop table #TBL_MediaAttributeValue

			if object_id ('tempdb..#TBL_DefaultAttributeValue')is not null
				drop table #TBL_DefaultAttributeValue

			if object_id ('tempdb..#ZnodePimAttributeValue')is not null
				drop table #ZnodePimAttributeValue

				
            CREATE TABLE #TBL_DefaultAttributeId ( PimAttributeId INT PRIMARY KEY, AttributeCode  VARCHAR(600) );

            CREATE TABLE #TBL_MediaAttributeId ( PimAttributeId INT PRIMARY KEY, AttributeCode  VARCHAR(600) );

            CREATE TABLE #TBL_TextAreaAttributeId ( PimAttributeId INT PRIMARY KEY, AttributeCode  VARCHAR(600) );
           
		    CREATE TABLE #TBL_MediaAttributeValue ( PimAttributeValueId INT, LocaleId INT, AttributeValue VARCHAR(300), MediaId INT );

            CREATE TABLE #TBL_DefaultAttributeValue ( PimAttributeValueId INT, LocaleId INT, AttributeValue INT );

            CREATE TABLE #ZnodePimAttributeValue (PimAttributeValueId  INT, PimAttributeFamilyId INT, PimAttributeId INT, PimProductId INT );

            DECLARE @ConfigureFamilyId VARCHAR(4000);

            INSERT INTO #TBL_DefaultAttributeId ( PimAttributeId, AttributeCode )
            SELECT PimAttributeId, AttributeCode
            FROM [dbo].[Fn_GetDefaultAttributeId]();

			INSERT INTO #TBL_MediaAttributeId (PimAttributeId, AttributeCode )
			SELECT PimAttributeId, AttributeCode
			FROM [dbo].[Fn_GetProductMediaAttributeId]();

            INSERT INTO #TBL_TextAreaAttributeId ( PimAttributeId, AttributeCode )
            SELECT PimAttributeId, AttributeCode
            FROM [dbo].[Fn_GetTextAreaAttributeId]();

            SELECT TOP 1 @PimAttributeFamilyId = PimAttributeFamilyId FROM #PimProductDetail_Bulk_Process;

			if object_id ('tempdb..#cte')is not null
				drop table #cte

            SELECT AttributeValue AS SKU, RowNumber
            INTO #cte
            FROM #PimProductDetail_Bulk_Process
            WHERE ProductAttributeCode = '[SKU]';
              
			

            CREATE INDEX Inx_cte_RowNumber ON #cte(RowNumber);
            UPDATE a SET a.SKU1 = B.SKU
            FROM #PimProductDetail_Bulk_Process a
            INNER JOIN #cte b ON a.RowNumber = b.RowNumber;

		
			
            SELECT TOP 1 @LocaleId = LocaleId FROM #PimProductDetail_Bulk_Process;

            ----Update ZNodePimProduct 
            UPDATE ZNodePimProduct
            SET PimAttributeFamilyId = DP.PimAttributeFamilyId, 
                PublishStateId = @PublishStateIdForDraft, 
                ModifiedBy = @UserId, 
                ModifiedDate = @GetDate
            FROM ZNodePimProduct ZPP
            INNER JOIN #PimProductDetail_Bulk_Process DP ON ZPP.PimProductId = DP.PimProductId;
      
			if object_id ('tempdb..#ZnodePimProduct')is not null
				drop table #ZnodePimProduct

			CREATE TABLE #ZnodePimProduct(PimProductId INT,ExternalId INT  Primary key)

			--create index Idx_ZnodePimProduct_ExternalId on #ZnodePimProduct(ExternalId)


			 

			----Insert into ZNodePimProduct 
            INSERT INTO ZnodePimProduct
            (PimAttributeFamilyId, 
                ExternalId, 
                CreatedBy, 
                CreatedDate, 
                ModifiedBy, 
                ModifiedDate, 
                PublishStateId
            )
			output inserted.PimProductId, inserted.ExternalId into #ZnodePimProduct(PimProductId,ExternalId)
            SELECT PimAttributeFamilyId, 
                    RowNumber, 
                    @UserId, 
                    @GetDate, 
                    @UserId, 
                    @GetDate, 
                    @PublishStateIdForNotPublished
            FROM #PimProductDetail_Bulk_Process
            WHERE ProductAttributeCode = '[SKU]'
            AND PimProductId IS NULL;
            
			----Update newly created productIds
            UPDATE a SET a.PimProductId = b.PimProductId
            FROM #PimProductDetail_Bulk_Process a
            INNER JOIN #ZnodePimProduct b ON a.RowNumber = b.ExternalId;

            ----Insert Downloadable products into ZnodePimDownloadableProduct
            INSERT INTO ZnodePimDownloadableProduct (SKU, ProductName, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
            SELECT PDSKU.AttributeValue, PDProdName.AttributeValue, @UserId, @GetDate, @UserId, @GetDate
            FROM #PimProductDetail_Bulk_Process PDSKU
            INNER JOIN #PimProductDetail_Bulk_Process PDProdName ON PDProdName.RowNumber = PDSKU.RowNumber
            INNER JOIN #PimProductDetail_Bulk_Process PDDownload ON PDDownload.RowNumber = PDSKU.RowNumber
            WHERE PDSKU.ProductAttributeCode = @pimSkuAttributeId
            AND PDProdName.ProductAttributeCode = '[SKU]'
            AND PDDownload.PimAttributeId = @PimIsDownlodableAttributeId
            AND PDDownload.AttributeValue = 'true'
            AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodePimDownloadableProduct WHERE ZnodePimDownloadableProduct.SKU = PDSKU.AttributeValue );

            ---- update ZnodePimAttributeValue : attribute data for Product
            UPDATE TARGET
            SET TARGET.PimAttributeFamilyId = CASE
                                                    WHEN Source.PimAttributeFamilyId = 0
                                                    THEN NULL
                                                    ELSE Source.PimAttributeFamilyId
                                                END, 
                    TARGET.ModifiedBy = @UserId, 
                    TARGET.ModifiedDate = @GetDate, 
                    TARGET.PimProductId = SOURCE.PimProductId
            OUTPUT INSERTED.PimAttributeValueId, 
                    INSERTED.PimAttributeFamilyId, 
                    INSERTED.PimAttributeId, 
                    INSERTED.PimProductId
                    INTO #ZnodePimAttributeValue
            FROM ZnodePimAttributeValue TARGET
            INNER JOIN #PimProductDetail_Bulk_Process SOURCE ON TARGET.PimProductId = SOURCE.PimProductId AND TARGET.PimAttributeId = SOURCE.PimAttributeId;
             
			---- Inserting attribute data for Product 
			INSERT INTO ZnodePimAttributeValue 
			( 
				PimAttributeFamilyId, 
				PimProductId, PimAttributeId, 
				PimAttributeDefaultValueId, 
				CreatedBy, 
				CreatedDate, 
				ModifiedBy, 
				ModifiedDate 
			)
            OUTPUT INSERTED.PimAttributeValueId, 
                    INSERTED.PimAttributeFamilyId, 
                    INSERTED.PimAttributeId, 
                    INSERTED.PimProductId
                    INTO #ZnodePimAttributeValue
            SELECT 
				CASE
                    WHEN Source.PimAttributeFamilyId = 0
                    THEN @PimDefaultFamily
                    ELSE Source.PimAttributeFamilyId
                END, 
                SOURCE.PimProductId, 
                ISNULL(SOURCE.PimAttributeId, 0),
                CASE
                    WHEN SOURCE.ProductAttributeDefaultValueId = 0
                    THEN NULL
                    ELSE SOURCE.ProductAttributeDefaultValueId
                END, 
                @UserId, 
                @GetDate, 
                @UserId, 
                @GetDate
            FROM #PimProductDetail_Bulk_Process SOURCE
            WHERE NOT EXISTS
            (
                SELECT *
                FROM ZnodePimAttributeValue TARGET
                WHERE TARGET.PimProductId = SOURCE.PimProductId
                        AND TARGET.PimAttributeId = SOURCE.PimAttributeId
            );

            -------------------------
			if object_id ('tempdb..#MediaData')is not null
				drop table #MediaData

            CREATE TABLE #MediaData (MediaId INT, PimProductId INT, PimAttributeId INT, PimAttributeFamilyId INT, LocaleId INT );

			---- Get Product Media Data
            INSERT INTO #MediaData ( MediaId , PimProductId , PimAttributeId , PimAttributeFamilyId , LocaleId )
            SELECT SP.Item, a.PimProductId, a.PimAttributeId, PimAttributeFamilyId, a.LocaleId
            FROM #PimProductDetail_Bulk_Process a
            INNER JOIN #TBL_MediaAttributeId c ON(c.PimAttributeId = a.PimAttributeId)
            CROSS APPLY dbo.split(a.AttributeValue, ',') SP;

			---- Get product media attribute data
            INSERT INTO #TBL_MediaAttributeValue ( PimAttributeValueId, LocaleId, AttributeValue, MediaId )
            SELECT a.PimAttributeValueId, b.LocaleId, zm.Path AttributeValue, ZM.MediaId
            FROM #ZnodePimAttributeValue AS a
            INNER JOIN #MediaData AS b ON(a.PimAttributeId = b.PimAttributeId
                                            AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0)
                                            AND a.PimProductId = b.PimProductId)
            INNER JOIN ZnodeMedia ZM ON(b.MediaId = ZM.MediaId);
     
			---- Deleting product media attribute
            DELETE FROM ZnodePimProductAttributeMedia
            WHERE EXISTS
            (
                SELECT TOP 1 1
                FROM #TBL_MediaAttributeValue TBLM
                WHERE ZnodePimProductAttributeMedia.PimAttributeValueId = TBLM.PimAttributeValueId
                        AND TBLM.MediaId <> ZnodePimProductAttributeMedia.MediaId
                        AND ZnodePimProductAttributeMedia.Localeid = @LocaleId
            );

            ---- update ZnodePimProductAttributeMedia : attribute data for Product
            UPDATE TARGET
                SET 
                    TARGET.MediaPath = SOURCE.AttributeValue, 
                    TARGET.MediaId = SOURCE.MediaId, 
                    TARGET.ModifiedBy = @UserId, 
                    TARGET.ModifiedDate = @GetDate
            FROM ZnodePimProductAttributeMedia TARGET
            INNER JOIN #TBL_MediaAttributeValue SOURCE ON TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
                                                        AND TARGET.MediaPAth = SOURCE.AttributeValue
                                                        AND TARGET.LocaleId = SOURCE.LocaleId;
    
            ---- inserting Media attribute data for Product
            INSERT INTO ZnodePimProductAttributeMedia 
			( 
				PimAttributeValueId, 
				LocaleId, MediaPath, 
				MediaId, 
				CreatedBy, 
				CreatedDate, 
				ModifiedBy, 
                ModifiedDate
            )
            SELECT SOURCE.PimAttributeValueId, 
                    SOURCE.LocaleId, 
                    SOURCE.AttributeValue, 
                    SOURCE.MediaId, 
                    @UserId, 
                    @GetDate, 
                    @UserId, 
                    @GetDate
            FROM #TBL_MediaAttributeValue SOURCE
            WHERE NOT EXISTS
            (
                SELECT *
                FROM ZnodePimProductAttributeMedia TARGET
                WHERE TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
                        AND TARGET.MediaPAth = SOURCE.AttributeValue
                        AND TARGET.LocaleId = SOURCE.LocaleId
            );

            --------------------------
			if object_id ('tempdb..#Cte_TextAreaAttributeValue')is not null
				drop table #Cte_TextAreaAttributeValue

			---- Getting text area data in temp #Cte_TextAreaAttributeValue
            SELECT a.PimAttributeValueId, 
                    b.LocaleId, 
                    AttributeValue
            INTO #Cte_TextAreaAttributeValue
            FROM #ZnodePimAttributeValue AS a
            INNER JOIN #PimProductDetail_Bulk_Process AS b ON(a.PimAttributeId = b.PimAttributeId
                                                            AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0)
                                                            AND a.PimProductId = b.PimProductId)
            INNER JOIN #TBL_TextAreaAttributeId c ON(c.PimAttributeId = b.PimAttributeId);

            ---- update ZnodePimProductAttributeTextAreaValue : attribute data for Product
            UPDATE TARGET
            SET TARGET.AttributeValue = SOURCE.AttributeValue, 
                TARGET.CreatedBy = @UserId, 
                TARGET.ModifiedBy = @UserId, 
                TARGET.ModifiedDate = @GetDate
            FROM ZnodePimProductAttributeTextAreaValue TARGET
            INNER JOIN #Cte_TextAreaAttributeValue SOURCE ON TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
                                                                      AND TARGET.LocaleId = SOURCE.LocaleId;

            ---- inserting TextAreaValue attribute data for Product
            INSERT INTO ZnodePimProductAttributeTextAreaValue
            (
				PimAttributeValueId, 
                LocaleId, 
                AttributeValue, 
                CreatedBy, 
                CreatedDate, 
                ModifiedBy, 
                ModifiedDate
            )
            SELECT SOURCE.PimAttributeValueId, 
                    SOURCE.LocaleId, 
                    SOURCE.AttributeValue, 
                    @UserId, 
                    @GetDate, 
                    @UserId, 
                    @GetDate
            FROM #Cte_TextAreaAttributeValue SOURCE
            WHERE NOT EXISTS
            (
                SELECT *
                FROM ZnodePimProductAttributeTextAreaValue TARGET
                WHERE TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
                        AND TARGET.LocaleId = SOURCE.LocaleId
            );
           
		    ---- Getting attribute default values for product
            INSERT INTO #TBL_DefaultAttributeValue ( PimAttributeValueId, LocaleId, AttributeValue )
            SELECT a.PimAttributeValueId, b.LocaleId, d.PimAttributeDefaultValueId AttributeValue
            FROM #ZnodePimAttributeValue AS a
            INNER JOIN #PimProductDetail_Bulk_Process AS b ON(a.PimAttributeId = b.PimAttributeId
                                                                AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0)
                                                                AND a.PimProductId = b.PimProductId)
            INNER JOIN #TBL_DefaultAttributeId c ON(c.PimAttributeId = b.PimAttributeId)
            CROSS APPLY dbo.split(b.AttributeValue, ',') SP
            INNER JOIN ZnodePimAttributeDefaultValue d ON d.PimAttributeId = b.PimAttributeId
                                                            AND SP.Item = d.AttributeDefaultValueCode;
			---- Deleting prodyuct attribute default value
            DELETE FROM ZnodePimProductAttributeDefaultValue
            WHERE EXISTS
            (
                SELECT TOP 1 1
                FROM #TBL_DefaultAttributeValue TBLAV
                WHERE TBLAV.PimAttributeValueId = ZnodePimProductAttributeDefaultValue.PimAttributeValueId
                        AND TBLAV.AttributeValue <> ZnodePimProductAttributeDefaultValue.PimAttributeDefaultValueId
                        AND ZnodePimProductAttributeDefaultValue.LocaleId = @LocaleId
            );

			---- update ZnodePimProductAttributeDefaultValue : attribute data for Product
			UPDATE TARGET
			SET TARGET.PimAttributeDefaultValueId = SOURCE.AttributeValue, 
				TARGET.ModifiedBy = @UserId, 
				TARGET.ModifiedDate = @GetDate
			FROM ZnodePimProductAttributeDefaultValue TARGET
					INNER JOIN #TBL_DefaultAttributeValue SOURCE ON TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
																	AND TARGET.PimAttributeDefaultValueId = SOURCE.AttributeValue
																	AND TARGET.LocaleId = SOURCE.LocaleId;

            ---- insert ZnodePimProductAttributeDefaultValue : attribute data for Product
            INSERT INTO ZnodePimProductAttributeDefaultValue
            (
				PimAttributeValueId, 
                LocaleId, 
                PimAttributeDefaultValueId, 
                CreatedBy, 
                CreatedDate, 
                ModifiedBy, 
                ModifiedDate
            )
            SELECT 
				SOURCE.PimAttributeValueId, 
                SOURCE.LocaleId, 
                SOURCE.AttributeValue, 
                @UserId, 
                @GetDate, 
                @UserId, 
                @GetDate
            FROM #TBL_DefaultAttributeValue SOURCE
            WHERE NOT EXISTS
            (
                SELECT *
                FROM ZnodePimProductAttributeDefaultValue TARGET
                WHERE TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
                        AND TARGET.PimAttributeDefaultValueId = SOURCE.AttributeValue
                        AND TARGET.LocaleId = SOURCE.LocaleId
            );
               

            IF OBJECT_ID('tempdb..#cte_ZnodePimAttributeValue') IS NOT NULL
                DROP TABLE #cte_ZnodePimAttributeValue;

			CREATE TABLE #cte_ZnodePimAttributeValue(PimAttributeValueId int, LocaleId int, AttributeValue nvarchar(max))

			CREATE INDEX Idx_cte_ZnodePimAttributeValue on #cte_ZnodePimAttributeValue(PimAttributeValueId, LocaleId)

			INSERT INTO #cte_ZnodePimAttributeValue (PimAttributeValueId, LocaleId, AttributeValue)
            SELECT a.PimAttributeValueId, b.LocaleId,AttributeValue                
            FROM #ZnodePimAttributeValue AS a
            INNER JOIN #PimProductDetail_Bulk_Process AS b ON(a.PimAttributeId = b.PimAttributeId
                                                                AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0)
                                                                AND a.PimProductId = b.PimProductId)
            WHERE NOT EXISTS ( SELECT TOP 1 1 FROM #TBL_DefaultAttributeId TBLDA WHERE TBLDA.PimAttributeId = b.PimAttributeId )
            AND NOT EXISTS ( SELECT TOP 1 1 FROM #TBL_MediaAttributeId TBLMA WHERE TBLMA.PimAttributeId = b.PimAttributeId )
            AND NOT EXISTS ( SELECT TOP 1 1 FROM #TBL_TextAreaAttributeId TBLTA WHERE TBLTA.PimAttributeId = b.PimAttributeId );

            ---- update ZnodePimAttributeValueLocale : attribute data for Product
            UPDATE TARGET
            SET TARGET.AttributeValue = SOURCE.AttributeValue, 
                TARGET.ModifiedBy = @UserId, 
                TARGET.ModifiedDate = @GetDate
            FROM ZnodePimAttributeValueLocale TARGET
            INNER JOIN #cte_ZnodePimAttributeValue SOURCE ON TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
                                                           AND TARGET.LocaleId = SOURCE.LocaleId;

            ---- inserting AttributeDefaultValue : attribute data for Product
            INSERT INTO ZnodePimAttributeValueLocale
            (
				PimAttributeValueId, 
                LocaleId, 
                AttributeValue, 
                CreatedBy, 
                CreatedDate, 
                ModifiedBy, 
                ModifiedDate
            )
            SELECT 
				SOURCE.PimAttributeValueId, 
                SOURCE.LocaleId, 
                SOURCE.AttributeValue, 
                @UserId, 
                @GetDate, 
                @UserId, 
                @GetDate
            FROM #cte_ZnodePimAttributeValue SOURCE
            WHERE NOT EXISTS
            (
                SELECT *
                FROM ZnodePimAttributeValueLocale TARGET
                WHERE TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
                        AND TARGET.LocaleId = SOURCE.LocaleId
            );

			---- Inserting configurable products into ZnodePimConfigureProductAttribute
            INSERT INTO [ZnodePimConfigureProductAttribute]
            (PimProductId, 
                PimFamilyId, 
                PimAttributeId, 
                CreatedBy, 
                CreatedDate, 
                ModifiedBy, 
                ModifiedDate
            )
            SELECT DISTINCT PD.PimProductId, 
                    NULL, 
                    q.PimAttributeId, 
                    @UserId, 
                    @GetDate, 
                    @UserId, 
                    @GetDate
            FROM #PimProductDetail_Bulk_Process PD
                CROSS APPLY dbo.Split([ConfigureAttributeIds], ',') AS b
                INNER JOIN ZnodePimAttribute AS q ON(q.PimAttributeId = b.Item)
            WHERE NOT EXISTS
            (
                SELECT TOP 1 1
                FROM ZnodePimConfigureProductAttribute RTR
                WHERE RTR.PimProductId = PD.PimProductId
                        AND RTR.PimAttributeId = q.PimAttributeId
            );


			COMMIT TRAN ImportProducts;

            FETCH NEXT FROM cur_BulkData INTO  @MinRow, @MaxRow;
        END;
    CLOSE cur_BulkData;
    DEALLOCATE cur_BulkData;
	-----------Added Performance patch end

		DELETE FROM ZnodePimConfigureProductAttribute  
			WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePimAttributeValue  a WHERE a.PimProductId = ZnodePimConfigureProductAttribute.PimProductId AND a.PimAttributeID = ZnodePimConfigureProductAttribute.PimAttributeID )
			AND EXISTS (SELECT TOP 1 1 FROM ZnodePimAttributeValue a 
			INNER JOIN ZnodePimAttribute ty ON (ty.PimAttributeId = a.PimAttributeId)
			INNER JOIN ZnodePimProductAttributeDefaultValue t ON (t.PimAttributeValueId = a.PimAttributeValueId )
			INNER JOIN ZnodePimAttributeDefaultValue y ON (y.PimAttributeDefaultValueId = t.PimAttributeDefaultValueId)
			INNER JOIN View_loadmanageProductInternal  TU ON (TU.AttributeCode = 'SKU' AND TU.PimProductId = a.PimProductId  )
			WHERE ty.AttributeCode = 'ProductType' AND y.AttributeDefaultValueCode = 'ConfigurableProduct'
			AND a.PimProductId = ZnodePimConfigureProductAttribute.PimProductId
			AND EXISTS (SELECT TOP 1 1 FROM #PimProductDetail1 TM WHERE TM.PimAttributeID = (SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'SKU') AND TM.AttributeValue = TU.AttributeValue )) 
					   
						
		----Delete simple products if inserted in table ZnodePimConfigureProductAttribute 
		DELETE FROM ZnodePimConfigureProductAttribute
		WHERE EXISTS
		(
			SELECT TOP 1 1
			FROM ZnodePimAttributeValue a
					INNER JOIN ZnodePimAttribute ty ON(ty.PimAttributeId = a.PimAttributeId)
					INNER JOIN ZnodePimProductAttributeDefaultValue t ON(t.PimAttributeValueId = a.PimAttributeValueId)
					INNER JOIN ZnodePimAttributeDefaultValue y ON(y.PimAttributeDefaultValueId = t.PimAttributeDefaultValueId)
			WHERE ty.AttributeCode = 'ProductType'
					AND y.AttributeDefaultValueCode = 'SimpleProduct'
					AND a.PimProductId = ZnodePimConfigureProductAttribute.PimProductId
		);

		---- Update family of Product in table ZnodePimConfigureProductAttribute 
		UPDATE ZnodePimConfigureProductAttribute
		SET PimFamilyId = b.PimAttributeFamilyId
		FROM ZnodePimConfigureProductAttribute a
				INNER JOIN ZnodePimProduct b ON a.PimProductId = b.PimProductId;

		---- Updating status of Import Process Log
		UPDATE ZnodeImportProcessLog
			SET 
				STATUS = dbo.Fn_GetImportStatus(2), 
				ProcessCompletedDate = GETDATE()
		WHERE ImportProcessLogId = @ImportProcessLogId;

             COMMIT TRAN ImportProducts;
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE(),ERROR_LINE(),ERROR_PROCEDURE();
            -- UPDATE ZnodeImportProcessLog SET Status = dbo.Fn_GetImportStatus(3), ProcessCompletedDate = @GetDate WHERE ImportProcessLogId = @ImportProcessLogId;
            -- ROLLBACK TRAN ImportProducts;
         END CATCH;
     END;

	 GO
	 INSERT INTO ZnodeMessage (MessageCode,MessageType,MessageName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT 62,'Other','DefaultRegisteredProfile is not associated/configured with specified Portal',2,getdate(),2,getdate()
WHERE NOT EXISTS (SELECT * FROM  ZnodeMessage where MessageCode = '62')

GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportCustomer')
BEGIN 
	DROP PROCEDURE Znode_ImportCustomer
END
GO

CREATE  PROCEDURE [dbo].[Znode_ImportCustomer](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @LocaleId int= 0,@PortalId int ,@CsvColumnString nvarchar(max))
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import SEO Details
	
	-- Unit Testing : 
	--------------------------------------------------------------------------------------

BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max),@AspNetZnodeUserId nvarchar(256),@ASPNetUsersId nvarchar(256),
		@PasswordHash nvarchar(max),@SecurityStamp nvarchar(max),@RoleId nvarchar(256),@IsAllowGlobalLevelUserCreation nvarchar(10)
		Declare @ProfileId  int
		DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		 
		SET @SecurityStamp = '0wVYOZNK4g4kKz9wNs-UHw2'
		SET @PasswordHash = 'APy4Tm1KbRG6oy7h3r85UDh/lCW4JeOi2O2Mfsb3OjkpWTp1YfucMAvvcmUqNaSOlA==';
		SELECT  @RoleId  = Id from AspNetRoles where   NAME = 'Customer'  

		Select @IsAllowGlobalLevelUserCreation = FeatureValues from ZnodeGlobalsetting where FeatureName = 'AllowGlobalLevelUserCreation'

		DECLARE @GetDate datetime= dbo.Fn_GetDate();
		-- Retrive RoundOff Value from global setting 

		-- Three type of import required three table varible for product , category and brand
		DECLARE @InsertCustomer TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, UserName nvarchar(512) ,FirstName	nvarchar(200),
			LastName nvarchar(200), BudgetAmount	numeric,Email	nvarchar(100),PhoneNumber	nvarchar(100),
		    EmailOptIn	bit	,ReferralStatus	nvarchar(40),IsActive	bit	,ExternalId	nvarchar(max),CreatedDate Datetime,
			ProfileName varchar(200), GUID NVARCHAR(400)
		);

			--SET @SSQL = 'SELECT RowNumber,UserName,FirstName,LastName,BudgetAmount,Email,PhoneNumber,EmailOptIn,IsActive,ExternalId,GUID FROM '+ @TableName;
		SET @SSQL = 'SELECT RowNumber,' + @CsvColumnString + ',GUID FROM '+ @TableName;
		INSERT INTO @InsertCustomer( RowNumber,UserName,FirstName,LastName,Email,PhoneNumber,       EmailOptIn,IsActive,ExternalId,CreatedDate,ProfileName,GUID )
		EXEC sys.sp_sqlexec @SSQL;
		
		
		select TOP 1 @ProfileId   =  ProfileId from ZnodePortalprofile where Portalid = @Portalid and IsDefaultRegistedProfile=1
		If( Isnull(@ProfileId ,0) = 0 ) 
		Begin
		
		
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '62', 'Default Portal Profile', '', @NewGUId, 1 , @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
							
				UPDATE ZnodeImportProcessLog
				SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
				WHERE ImportProcessLogId = @ImportProcessLogId;
			

				SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog 
				WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
				Select @SuccessRecordCount = 0

				UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount , 
				TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
				WHERE ImportProcessLogId = @ImportProcessLogId;

				DELETE FROM @InsertCustomer 
				SET @Status = 0;

				COMMIT TRAN A;
				Return 0 
		End

		
		--UserName,FirstName,LastName,Email,PhoneNumber,EmailOptIn,IsActive,ExternalId
	
	    -- start Functional Validation 

		-----------------------------------------------
		If @IsAllowGlobalLevelUserCreation = 'true'
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
					   SELECT '10', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
					   FROM @InsertCustomer AS ii
					    WHERE ltrim(rtrim(ii.UserName)) in 
					   (
						   SELECT UserName FROM AspNetZnodeUser   where PortalId = @PortalId
					   );
		Else 
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
					   SELECT '10', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
					   FROM @InsertCustomer AS ii
					   WHERE ltrim(rtrim(ii.UserName)) in 
					   (
						   SELECT UserName FROM AspNetZnodeUser   
					   );
		
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
					   SELECT '35', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
					   FROM @InsertCustomer AS ii
					   WHERE ii.UserName not like '%_@_%_.__%' 
				
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
					   SELECT '30', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
					   FROM @InsertCustomer AS ii
					   WHERE ltrim(rtrim(ii.UserName)) in 
					   (SELECT ltrim(rtrim(UserName))  FROM @InsertCustomer group by ltrim(rtrim(UserName))  having count(*) > 1 )

		 UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ UserName - ' + ISNULL(UserName,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN @InsertCustomer IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL

		--Note : Content page import is not required 
		
		-- End Function Validation 	
		-----------------------------------------------
		--- Delete Invalid Data after functional validatin  

		DELETE FROM @InsertCustomer
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
			--AND GUID = @NewGUID
		);


		-- Update Record count in log 
        
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM @InsertCustomer
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount , 
		TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End

		-- Insert Product Data 
				
				
				DECLARE @InsertedAspNetZnodeUser TABLE (AspNetZnodeUserId nvarchar(256) ,UserName nvarchar(512),PortalId int )
				DECLARE @InsertedASPNetUsers TABLE (Id nvarchar(256) ,UserName nvarchar(512))
				DECLARE @InsertZnodeUser TABLE (UserId int,AspNetUserId nvarchar(256),CreatedDate Datetime )

				UPDATE ANU SET 
				ANU.PhoneNumber	= IC.PhoneNumber
				from AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
				INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
				INNER JOIN @InsertCustomer IC ON ANZU.UserName = IC.UserName 
				where Isnull(ANZU.PortalId,0) = Isnull(@PortalId ,0)

				UPDATE ZU SET 
				ZU.FirstName	= IC.FirstName,
				ZU.LastName		= IC.LastName,
				--ZU.MiddleName	= IC.MiddleName,
				ZU.BudgetAmount = IC.BudgetAmount,
				ZU.Email		= IC.Email,
				ZU.PhoneNumber	= IC.PhoneNumber,
				ZU.EmailOptIn	= Isnull(IC.EmailOptIn,0),
				ZU.IsActive		= IC.IsActive
				--ZU.ExternalId = ExternalId
				from AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
				INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
				INNER JOIN @InsertCustomer IC ON ANZU.UserName = IC.UserName 
				where Isnull(ANZU.PortalId,0) = Isnull(@PortalId ,0)

	
				Insert into AspNetZnodeUser (AspNetZnodeUserId, UserName, PortalId)		
				OUTPUT INSERTED.AspNetZnodeUserId, INSERTED.UserName, INSERTED.PortalId	INTO  @InsertedAspNetZnodeUser 			 
				Select NEWID(),IC.UserName, @PortalId FROM @InsertCustomer IC 
				where Not Exists (Select TOP 1 1  from AspNetZnodeUser ANZ where Isnull(ANZ.PortalId,0) = Isnull(@PortalId,0) AND ANZ.UserName = IC.UserName)

				INSERT INTO ASPNetUsers (Id,Email,EmailConfirmed,PasswordHash,SecurityStamp,PhoneNumber,PhoneNumberConfirmed,TwoFactorEnabled,
				LockoutEndDateUtc,LockOutEnabled,AccessFailedCount,PasswordChangedDate,UserName)
				output inserted.Id, inserted.UserName into @InsertedASPNetUsers
				SELECT NewId(), Email,0 ,@PasswordHash,@SecurityStamp,PhoneNumber,0,0,NULL LockoutEndDateUtc,1 LockoutEnabled,
				0,@GetDate,AspNetZnodeUserId from @InsertCustomer A INNER JOIN @InsertedAspNetZnodeUser  B 
				ON A.UserName = B.UserName
				
				INSERT INTO  ZnodeUser(AspNetUserId,FirstName,LastName,CustomerPaymentGUID,Email,PhoneNumber,EmailOptIn,
				IsActive,ExternalId, CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				OUTPUT Inserted.UserId, Inserted.AspNetUserId,Inserted.CreatedDate into @InsertZnodeUser
				SELECT IANU.Id AspNetUserId ,IC.FirstName,IC.LastName,null CustomerPaymentGUID,IC.Email
				,IC.PhoneNumber,Isnull(IC.EmailOptIn,0),IC.IsActive,IC.ExternalId, @UserId,
				CASE WHEN IC.CreatedDate IS NULL OR IC.CreatedDate = '' THEN  @Getdate ELSE IC.CreatedDate END,@UserId,@Getdate
				from @InsertCustomer IC Inner join 
				@InsertedAspNetZnodeUser IANZU ON IC.UserName = IANZU.UserName  INNER JOIN 
				@InsertedASPNetUsers IANU ON IANZU.AspNetZnodeUserId = IANU.UserName 
				  	     
				INSERT INTO AspNetUserRoles (UserId,RoleId)  Select AspNetUserId, @RoleID from @InsertZnodeUser 
				INSERT INTO ZnodeUserPortal (UserId,PortalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate) 
				SELECT UserId, @PortalId , @UserId, IZU.CreatedDate,@UserId,@Getdate 
				from @InsertZnodeUser IZU
				--Declare @ProfileId  int 
				--select TOP 1 @ProfileId   =  ProfileId from ZnodePortalprofile where Portalid = @Portalid and IsDefaultRegistedProfile=1

				--insert into ZnodeUserProfile (ProfileId,UserId,IsDefault,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				--SELECT @ProfileId  , UserId, 1 , @UserId,CreatedDate,@UserId,@Getdate from @InsertZnodeUser
---------------------------------------------------------------------------------

				declare @Profile table (ProfileId int)

				INSERT INTO ZnodeProfile (ProfileName,ShowOnPartnerSignup,Weighting,TaxExempt,DefaultExternalAccountNo,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ParentProfileId)
				OUTPUT inserted.ProfileId INTO @Profile(ProfileId)
				SELECT Distinct ProfileName, 0, null,0, replace(ltrim(rtrim(ProfileName)),' ','') as DefaultExternalAccountNo, @UserId,@Getdate, @UserId,@Getdate, null as ParentProfileId				
				from @InsertCustomer IC
				where not exists(select * from ZnodeProfile ZP where IC.ProfileName = ZP.ProfileName )
				AND ISNULL(ic.ProfileName,'') <> ''

				INSERT INTO ZnodePortalProfile (PortalId,	ProfileId,	IsDefaultAnonymousProfile,	IsDefaultRegistedProfile,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate)
				SELECT @PortalId, ProfileId, 0 AS IsDefaultAnonymousProfile, 0 AS IsDefaultRegistedProfile, @UserId,@Getdate, @UserId,@Getdate
				from @Profile

				UPDATE ZnodeUserProfile 
				SET ProfileId = COALESCE(ZP.ProfileId,@ProfileId)
				FROM ZnodeUser a
				inner join ASPNetUsers b on (b.Id = a.AspNetUserId)
				inner join AspNetZnodeUser c on (c.AspNetZnodeUserId = b.UserName)
				inner join @InsertCustomer IC on (IC.UserName = c.UserName)
				inner join ZnodeUserProfile u ON u.UserId = a.UserId
				LEFT join ZnodeProfile ZP on IC.ProfileName = ZP.ProfileName
				--where IC.ProfileName <> ''
				
				INSERT INTO ZnodeUserProfile (ProfileId,UserId,IsDefault,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				SELECT COALESCE(ZP.ProfileId,@ProfileId)  , a.UserId, 1 , @UserId,a.CreatedDate,@UserId,@Getdate 
				from ZnodeUser a
				INNER JOIN ASPNetUsers b on (b.Id = a.AspNetUserId)
				inner join AspNetZnodeUser c on (c.AspNetZnodeUserId = b.UserName)
				inner join @InsertCustomer IC on (IC.UserName = c.UserName)
				LEFT join ZnodeProfile ZP on IC.ProfileName = ZP.ProfileName
				where NOT EXISTS (SELECT TOP  1 1 FROM ZnodeUserProfile u WHERE u.UserId = a.UserId )
				AND EXISTS(SELECT * FROM @InsertZnodeUser IZU WHERE A.UserId = IZU.UserId)

		
		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;
	END TRY
	BEGIN CATCH
	
		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN A;
	END CATCH;
END;

GO

INSERT INTO ZnodeMessage (MessageCode,MessageType,MessageName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT 63,'Data','Unable to import some values of IsDefaultShipping or IsDefaultBilling fields because of the availability of default address in the database',
2,GETDATE(),2,GETDATE()
WHERE NOT EXISTS (SELECT * FROM  ZnodeMessage where MessageCode = '63')

GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportPriceList')
BEGIN 
	DROP PROCEDURE Znode_ImportPriceList
END
GO

CREATE PROCEDURE [dbo].[Znode_ImportPriceList]
(
	@TableName nvarchar(100),
	@Status bit OUT, 
	@UserId int, 
	@ImportProcessLogId int,
	@NewGUId nvarchar(200),
	@PriceListId int )
AS 
	/*
	----Summary:  Import RetailPrice List 
	----		  Input XML data extracted in table format (table variable name:  #InsertPriceForValidation) by using  @xml.nodes 
	----		  Validate data column wise and store error log into @ErrorLogForInsertPrice table 
	----          Remove wrong data from table #InsertPriceForValidation and inserted correct data into @InsertPrice table for 
	----		  further processing (Importing to target database )
	---- Version 1 : Required Validation 
	---- UomName should not be null 
	---- Data for this RetailPrice list is already available  
	---- Version 2 : Required Validation 
	---- If UomName will be null then insert first record from UomTable and If UomName is wrong then raise error
	---- SKU with retailprice data is available with price list id will insert 
	---- multiple SKU with retail price is available then updated last sku details to price table and price tier table for respective price list
	----1. Import functionality should be provided only for single price list (Validate - Pending) 
	----  Tier price : TierStartQuantity should not between TierStartQuantity and TierEndQuantity for already existing SKU 
	----  In case of update details for SKU if any kind of price value will null then avoid it to update on existing value. 
	----2. From XML only SKU and RetailPrice is mandatory
	----3. SKUActivation date sholud be less than SKUExpriration date
	----4. Activation date sholud be less than Expiration date
	----5. If Tier RetailPrice has values and TierSartQuantity /TierEndQuantity or both has null value then it should not get updated/created.
	----6. ActivationDate and ExpirationDate value for tier price will be SKUActivationDate SKUExprirationDate 
	--- Change History : 
	--Remove column which is used to store range of qunatity by single column Quantity from table ZnodeTierProduct 
	--Manditory Retail price in Znodepricetable 
	-- SKUActivationfrom date and to date will used for tier price will store in single table ZnodePrice
	--Unit Testing   
	
*/
BEGIN
	BEGIN TRAN A;
	BEGIN TRY
	    DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
		
		IF OBJECT_ID('#InsertPriceForValidation', 'U') IS NOT NULL 
			DROP TABLE #InsertPriceForValidation
		ELSE 
			CREATE TABLE #InsertPriceForValidation 
			(SKU varchar(300) NULL, TierStartQuantity varchar(300) NULL, RetailPrice varchar(300) NULL, SalesPrice varchar(300) NULL, TierPrice varchar(300) NULL, SKUActivationDate varchar(300) NULL, SKUExpirationDate varchar(300) NULL,
			Custom1 varchar(300) NULL, Custom2 varchar(300) NULL, Custom3 varchar(300) NULL, RowNumber varchar(300) NULL)
	
		--DECLARE #InsertPriceForValidation TABLE
		--( 
		--	SKU varchar(300) NULL, TierStartQuantity varchar(300) NULL, RetailPrice varchar(300) NULL, SalesPrice varchar(300) NULL, TierPrice varchar(300) NULL, SKUActivationDate varchar(300) NULL, SKUExpirationDate varchar(300) NULL, RowNumber varchar(300) NULL
		--);
		IF OBJECT_ID('#InsertPrice', 'U') IS NOT NULL 
			DROP TABLE #InsertPrice
		ELSE 
			CREATE TABLE #InsertPrice 
			( 
				SKU varchar(300), TierStartQuantity numeric(28, 6) NULL, RetailPrice numeric(28, 6) NULL, SalesPrice numeric(28, 6) NULL, TierPrice numeric(28, 6) NULL, SKUActivationDate varchar(300) NULL, SKUExpirationDate varchar(300) NULL,
				Custom1 varchar(300) NULL, Custom2 varchar(300) NULL, Custom3 varchar(300) NULL, RowNumber varchar(300)
			);
	
	
		DECLARE @SKU TABLE
		( 
				SKU nvarchar(300)
		);
		INSERT INTO @SKU
			   SELECT b.AttributeValue
			   FROM ZnodePimAttributeValue AS a
					INNER JOIN
					ZnodePimAttributeValueLocale AS b
					ON a.PimAttributeId = dbo.Fn_GetProductSKUAttributeId() AND 
					   a.PimAttributeValueId = b.PimAttributeValueId;


		--SET @CategoryXML =  REPLACE(@CategoryXML,'<?xml version="1.0" encoding="utf-16"?>','')

		DECLARE @RoundOffValue int, @MessageDisplay nvarchar(100); 
		-- Retrive RoundOff Value from global setting 

		SELECT @RoundOffValue = FeatureValues FROM ZnodeGlobalSetting WHERE FeatureName = 'PriceRoundOff';
	
		--@MessageDisplay will use to display validate message for input inventory value  

		DECLARE @sSql nvarchar(max);
		SET @sSql = ' Select @MessageDisplay_new = Convert(Numeric(28, '+CONVERT(nvarchar(200), @RoundOffValue)+'), 999999.000000000 ) ';
		EXEC SP_EXecutesql @sSql, N'@MessageDisplay_new NVARCHAR(100) OUT', @MessageDisplay_new = @MessageDisplay OUT;
		

		SET @SSQL = 'Select SKU,TierStartQuantity ,RetailPrice,SalesPrice,TierPrice,SKUActivationDate ,SKUExpirationDate ,
		 Custom1, Custom2, Custom3, RowNumber FROM '+@TableName;
		INSERT INTO #InsertPriceForValidation( SKU, TierStartQuantity, RetailPrice, SalesPrice, TierPrice, SKUActivationDate, SKUExpirationDate,
		 Custom1, Custom2, Custom3, RowNumber )
		EXEC sys.sp_sqlexec @SSQL;

			

		-- 1)  Validation for SKU is pending Proper data not found and 
		--Discussion still open for Publish version where we create SKU and use the SKU code for validation 
		--Select * from ZnodePimAttributeValue  where PimAttributeId =248
		--select * from View_ZnodePimAttributeValue Vzpa Inner join ZnodePimAttribute Zpa on Vzpa.PimAttributeId=Zpa.PimAttributeId where Zpa.AttributeCode = 'SKU'
		--Select * from ZnodePimAttribute where AttributeCode = 'SKU'
		--------------------------------------------------------------------------------------
		--2)  Start Data Type Validation for XML Data  
		--------------------------------------------------------------------------------------			
		---------------------------------------------------------------------------------------
		---------If UOM will blank then retrive top -- Finctionality pending 
		---Validate 
		
		--select * from #InsertPrice
		
		INSERT INTO #InsertPrice( SKU, TierStartQuantity, RetailPrice, SalesPrice, TierPrice, SKUActivationDate, SKUExpirationDate,
		 Custom1, Custom2, Custom3, RowNumber )
			   SELECT SKU,
					  CASE
					  WHEN CONVERT(Varchar(100),TierStartQuantity) = '' THEN 0
					  ELSE CONVERT(numeric(28, 6), TierStartQuantity)
					  END, CONVERT(numeric(28, 6), RetailPrice),
															  CASE
															  WHEN SalesPrice = '' THEN NULL
															  ELSE CONVERT(numeric(28, 6), SalesPrice)
															  END,
															  CASE
															  WHEN TierPrice = '' THEN NULL
															  ELSE CONVERT(numeric(28, 6), TierPrice)
															  END, SKUActivationDate, SKUExpirationDate,
															   Custom1, Custom2, Custom3, RowNumber
			   FROM #InsertPriceForValidation;
			
			
		--------------------------------------------------------------------------------------
		--- start Functional Validation 
		--------------------------------------------------------------------------------------
		--- Verify SKU is present or not 

		--INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		--	   SELECT '19', 'SKU', SKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		--	   FROM @InsertPrice
		--	   WHERE SKU NOT IN
		--	   (
		--		   SELECT ZPAVL.AttributeValue
		--		   FROM ZnodePimAttribute AS ZPA
		--				INNER JOIN
		--				ZnodePimAttributeValue AS ZPAV
		--				ON ZPA.PimAttributeId = ZPAV.PimAttributeId
		--				INNER JOIN
		--				ZnodePimAttributeValueLocale AS ZPAVL
		--				ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId
		--		   WHERE ZPA.AttributeCode = 'SKU'
		--	   );


		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '19', 'SKU', SKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		FROM #InsertPrice AS ii
		WHERE ii.SKU NOT IN
		(
			SELECT SKU
			FROM @SKU
		);

			
		--INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		--	   SELECT '26', 'RetailPrice', RetailPrice, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		--	   FROM #InsertPriceForValidation
		--	   WHERE ISNULL(CAST(RetailPrice AS numeric(28, 6)), 0) <= 0 AND 
		--			 RetailPrice <> '';
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '39', 'SKUActivationDate', SKUActivationDate, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertPrice AS IP
			   WHERE SKUActivationDate > SKUExpirationDate AND 
					 ISNULL(SKUExpirationDate, '') <> '';
					 
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '35', 'TierStartQuantity', TierStartQuantity, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertPriceForValidation
			   WHERE( TierPrice IS NULL OR TierPrice = '0') AND  TierStartQuantity  = '';
			  
			  
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '35', 'TierPrice', TierPrice, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertPriceForValidation WHERE( TierPrice IS NULL OR  TierPrice = '') AND TierStartQuantity  <> 0;

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '26', 'TierStartQuantity', TierStartQuantity, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertPriceForValidation IPV
			   WHERE TierStartQuantity = ''  
				AND	( TierPrice <> ''  OR TierPrice IS NULL ) 

			  
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '26', 'TierStartQuantity', TierStartQuantity, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertPriceForValidation IPV
			   WHERE TierStartQuantity <> '' AND 
			    ISNULL(CAST(TierStartQuantity AS numeric(28, 6)), 0) <= 0 
				AND	( TierPrice <> ''  OR TierPrice IS NULL ) 

							  
		UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ SKU - ' + ISNULL(SKU,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN #InsertPrice IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL

			 
 	
		-- End Function Validation 	
		---------------------------
		--- Delete Invalid Data after functional validation 
		DELETE FROM #InsertPrice
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId AND 
				  Guid = @NewGUId
		);
	
		-- Remove duplicate records 
		--insert into @RemoveDuplicateInsertPrice
		--(SKU,TierStartQuantity, RetailPrice , SalesPrice , TierPrice , Uom , UnitSize , PriceListCode , PriceListName , CurrencyId , ActivationDate , ExpirationDate 
		--, SKUActivationDate , SKUExpirationDate , RowNumber )
		--Select SKU,TierStartQuantity, RetailPrice , SalesPrice , TierPrice , Uom , UnitSize , PriceListCode , PriceListName , CurrencyId , ActivationDate , ExpirationDate 
		--, SKUActivationDate , SKUExpirationDate , RowNumber FROM @InsertPrice 
		
		--Delete from @InsertPrice 

		--insert into @InsertPrice (SKU,TierStartQuantity, RetailPrice , SalesPrice , TierPrice , Uom , UnitSize , PriceListCode , PriceListName , CurrencyId , ActivationDate , ExpirationDate 
		--, SKUActivationDate , SKUExpirationDate , RowNumber)
		--Select SKU,TierStartQuantity, RetailPrice , SalesPrice , TierPrice , Uom , UnitSize , PriceListCode , PriceListName , CurrencyId , ActivationDate , ExpirationDate 
		--, SKUActivationDate , SKUExpirationDate , RowNumber from @RemoveDuplicateInsertPrice rdip WHERE rdip.RowNumber IN
		--(
		--	SELECT MAX(ipi.RowNumber) FROM @InsertPrice ipi WHERE rdip.PriceListCode = ipi.PriceListCode AND rdip.SKU = ipi.SKU
		--);

		--Validate StartQuantity and EndQuantity from PriceTier : This validation only for existing data 
		--INSERT INTO @ErrorLogForInsertPrice (RowNumber,SKU,TierStartQuantity ,RetailPrice ,SalesPrice,TierPrice,Uom ,UnitSize,PriceListCode,PriceListName,CurrencyId ,ActivationDate,ExpirationDate,SKUActivationDate,SKUExpirationDate,SequenceNumber,ErrorDescription) 
		--Select IP.RowNumber,IP.SKU,IP.TierStartQuantity ,IP.RetailPrice ,IP.SalesPrice,IP.TierPrice,IP.Uom ,IP.UnitSize,IP.PriceListCode,IP.PriceListName,IP.CurrencyId ,IP.ActivationDate,IP.ExpirationDate,IP.SKUActivationDate,IP.SKUExpirationDate,IP.SequenceNumber,
		--'TierStartQuantity already exists in PriceTier table for SKU '
		--From @InsertPrice IP  Inner join
		--ZnodePriceList Zpl ON Zpl.Listcode = IP.PriceListcode and Zpl.ListName = IP.PriceListName
		--INNER JOIN ZnodeUOM Zu ON ltrim(rtrim(IP.Uom)) = ltrim(rtrim(Zu.Uom)) 
		--INNER JOIN ZnodePriceTier ZPT  ON ZPT.PriceListId = Zpl.PriceListId 
		--AND ZPT.SKU = IP.SKU
		--Where IP.TierStartQuantity  = ZPT.Quantity  
		--- Delete Invalid Data after  Validate StartQuantity and EndQuantity from PriceTier
		
		--INSERT INTO ZnodeUOM (Uom,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		--Select distinct ltrim(rtrim(Uom)) , @UserId,@GetDate,@UserId,@GetDate  from @InsertPrice 
		--where ltrim(rtrim(Uom)) not in (Select ltrim(rtrim(UOM)) From ZnodeUOM where UOM  is not null )
		
		DECLARE @FailedRecordCount BIGINT, @SuccessRecordCount BIGINT 
	
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;

		SELECT @SuccessRecordCount = COUNT(DISTINCT ROWNUMBER) FROM #InsertPrice WHERE 	ROWNUMBER IS NOT NULL ;

		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount,
		TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
		WHERE ImportProcessLogId = @ImportProcessLogId;

		UPDATE ZP
				SET ZP.SalesPrice = IP.SalesPrice, ZP.RetailPrice = CASE
				WHEN CONVERT(varchar(100), ISNULL(IP.RetailPrice, '')) <> '' THEN IP.RetailPrice
				END, ZP.ActivationDate = CASE
				WHEN ISNULL(IP.SKUActivationDate, '') <> '' THEN IP.SKUActivationDate
				ELSE NULL
				END, ZP.ExpirationDate = CASE
				WHEN ISNULL(IP.SKUExpirationDate, '') <> '' THEN IP.SKUExpirationDate
				ELSE NULL
				END, ZP.ModifiedBy = @UserId, ZP.ModifiedDate = @GetDate
		FROM #InsertPrice IP INNER JOIN ZnodePrice ZP ON ZP.PriceListId = @PriceListId AND  ZP.SKU = IP.SKU  
			 --Retrive last record from price list of specific SKU ListCode and Name 									
		WHERE IP.RowNumber IN
		(
			SELECT MAX(IPI.RowNumber) FROM #InsertPrice AS IPI WHERE IPI.SKU = IP.SKU 
		);
		INSERT INTO ZnodePrice( PriceListId, SKU, SalesPrice, RetailPrice, ActivationDate, ExpirationDate, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
			   SELECT @PriceListId, IP.SKU, IP.SalesPrice, IP.RetailPrice,
																						   CASE
																						   WHEN ISNULL(IP.SKUActivationDate, '') = '' THEN NULL
																						   ELSE IP.SKUActivationDate
																						   END,
																						   CASE
																						   WHEN ISNULL(IP.SKUExpirationDate, '') = '' THEN NULL
																						   ELSE IP.SKUExpirationDate
																						   END, @UserId, @GetDate, @UserId, @GetDate
			   FROM #InsertPrice AS IP
			   WHERE NOT EXISTS
			   (
				   SELECT TOP 1 1
				   FROM ZnodePrice
				   WHERE ZnodePrice.PriceListId = @PriceListId AND 
						 ZnodePrice.SKU = IP.SKU AND 
						 ISNULL(ZnodePrice.SalesPrice, 0) = ISNULL(IP.SalesPrice, 0) AND 
						 ZnodePrice.RetailPrice = IP.RetailPrice
			   ) AND 
					 IP.RowNumber IN
			   (
					SELECT MAX(IPI.RowNumber)
					FROM #InsertPrice AS IPI
					WHERE IPI.SKU = IP.SKU 
			   );

			 

		IF EXISTS
		(
			SELECT TOP 1 1
			FROM #InsertPrice
			WHERE CONVERT(varchar(100), TierStartQuantity) <> '' AND 
				  (CONVERT(varchar(100), TierPrice) <> '' OR CONVERT (varchar(100), TierPrice) IS NOT NULL)
		)
		BEGIN
		
			UPDATE ZPT
			  SET ZPT.Price = IP.TierPrice, ZPT.ModifiedBy = @UserId, ZPT.ModifiedDate = @GetDate,
			  ZPT.Custom1 = IP.Custom1,ZPT.Custom2 = IP.Custom2, ZPT.Custom3 = IP.Custom3 
			FROM #InsertPrice IP INNER JOIN ZnodePriceTier ZPT ON ZPT.PriceListId = @PriceListId AND  ZPT.SKU = IP.SKU AND ZPT.Quantity = IP.TierStartQuantity 
		    --Retrive last record from price list of specific SKU ListCode and Name 
			WHERE IP.RowNumber IN
			(
				SELECT MAX(IPI.RowNumber) FROM #InsertPrice AS IPI WHERE IPI.SKU = IP.SKU AND IPI.TierStartQuantity = IP.TierStartQuantity 
			);

			INSERT INTO ZnodePriceTier( PriceListId, SKU, Price, Quantity, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, Custom1, Custom2, Custom3 )
				   SELECT @PriceListId, IP.SKU, IP.TierPrice, IP.TierStartQuantity,  @UserId, @GetDate, @UserId, @GetDate, Custom1, Custom2, Custom3
				   FROM #InsertPrice AS IP 
				   WHERE NOT EXISTS
				   (
					   SELECT TOP 1 1 FROM ZnodePriceTier WHERE ZnodePriceTier.PriceListId = @PriceListId AND  ZnodePriceTier.SKU = IP.SKU AND 
							 ZnodePriceTier.Quantity = IP.TierStartQuantity
				   ) AND  IP.RowNumber IN
				   (
					   SELECT MAX(IPI.RowNumber) FROM #InsertPrice AS IPI WHERE IPI.SKU = IP.SKU AND  IPI.TierStartQuantity = IP.TierStartQuantity
				   );
		END;  
		--SELECT @PriceListId ID , cast(1 As Bit ) Status  
		--SELECT RowNumber , ErrorDescription , SKU , TierStartQuantity , RetailPrice , SalesPrice , TierPrice , Uom , UnitSize , PriceListCode , PriceListName , CurrencyId , ActivationDate , ExpirationDate
		--FROM @ErrorLogForInsertPrice;
		SET @Status = 1;
		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = GETDATE()
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- COMMIT TRAN ImportProducts;
		COMMIT TRAN A;
	END TRY
	BEGIN CATCH
		
		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN A;
	END CATCH;
END;

GO

INSERT INTO ZnodeMessage (MessageCode,MessageType,MessageName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT 64,'Data','The input values of some Display Order fields are greater than 3 digits',
2,GETDATE(),2,GETDATE()
WHERE NOT EXISTS (SELECT * FROM  ZnodeMessage where MessageCode = '64')

GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportAttributes')
BEGIN 
	DROP PROCEDURE Znode_ImportAttributes
END
GO

CREATE PROCEDURE [dbo].[Znode_ImportAttributes](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @PimCatalogId int= 0)
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import Attribute Code Name and their default input validation rule other 
	--			  flag will be inserted as default we need to modify front end
	
	-- Unit Testing: 

	--------------------------------------------------------------------------------------
BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max);
		DECLARE @GetDate datetime= dbo.Fn_GetDate(), @LocaleId int  ;
		SELECT @LocaleId = DBO.Fn_GetDefaultLocaleId();
		-- Retrive RoundOff Value from global setting 
		DECLARE @InsertPimAtrribute TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, AttributeName varchar(300), AttributeCode varchar(300), AttributeType varchar(300), DisplayOrder int, GUID nvarchar(400)
		
		);
		DECLARE @InsertedPimAttributeIds TABLE (PimAttributeId int ,AttributeTypeId int,AttributeCode nvarchar(300))
		
		SET @SSQL = 'Select RowNumber,AttributeName,AttributeCode,AttributeType,DisplayOrder ,GUID FROM '+@TableName;
		INSERT INTO @InsertPimAtrribute( RowNumber,AttributeName,AttributeCode,AttributeType,DisplayOrder ,GUID)
		EXEC sys.sp_sqlexec @SSQL;


		--@MessageDisplay will use to display validate message for input inventory value  
		DECLARE @AttributeCode TABLE
		( 
		   AttributeCode nvarchar(300)
		);
		INSERT INTO @AttributeCode
			   SELECT AttributeCode
			   FROM ZnodePimAttribute 

		-- Start Functional Validation 
		-----------------------------------------------
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '10', 'AttributeCode', AttributeCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ii.AttributeCode in 
			   (
				   SELECT AttributeCode FROM @AttributeCode  where AttributeCode is not null 
			   );
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '10', 'AttributeCode', AttributeCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ii.AttributeCode in 
			   (
				   select AttributeCode  FROM @InsertPimAtrribute  Group BY AttributeCode  having count(*) > 1 
			   );

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '19', 'AttributeType', AttributeType, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ii.AttributeType NOT in 
			   (
				   SELECT AttributeTypeName  FROM ZnodeAttributeType  where IsPimAttributeType = 1 
			   );

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '50', 'AttributeCode', AttributeCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ltrim(rtrim(isnull(ii.AttributeCode,''))) like '%[^0-9A-Za-z]%'

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '50', 'AttributeCode', AttributeCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE Isnumeric(ltrim(rtrim(isnull(ii.AttributeCode,'')))) =1

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '35', 'AttributeCode', AttributeCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ltrim(rtrim(isnull(ii.AttributeCode,''))) like '% %' -----space not allowed

        INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			SELECT '17', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			FROM @InsertPimAtrribute AS ii
			WHERE (ii.DisplayOrder <> '' OR ii.DisplayOrder IS NOT NULL )AND  ii.DisplayOrder = 0

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '64', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE (ii.DisplayOrder <> '' OR ii.DisplayOrder IS NOT NULL )AND  ii.DisplayOrder > 999


		UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ Attribute - ' + ISNULL(AttributeCode,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN @InsertPimAtrribute IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL

		-- End Function Validation 	
		-----------------------------------------------
		-- Delete Invalid Data after functional validatin  
		DELETE FROM @InsertPimAtrribute
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
		);
		
		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM @InsertPimAtrribute
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount ,
		TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End


		--- Insert data into base table ZnodePimatrribute with their validation 

		INSERT INTO ZnodePimAttribute (AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable,IsSystemDefined
			,IsConfigurable,IsPersonalizable,IsShowOnGrid,DisplayOrder,HelpDescription,IsCategory,IsHidden,IsSwatch,
			CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		
		OUTPUT Inserted.PimAttributeId,Inserted.AttributeTypeId,Inserted.AttributeCode INTO @InsertedPimAttributeIds  
		
		SELECT ZAT.AttributeTypeId,AttributeCode, 0 IsRequired , 1 IsLocalizable,1 IsFilterable, 0 IsSystemDefined, 0 IsConfigurable,
		0 IsPersonalizable,  0 IsShowOnGrid , Case when Isnull(DisplayOrder,0) = 0 then  999 else DisplayOrder end  , '' HelpDescription ,0  IsCategory , 0 IsHidden , 0 IsSwatch,
		@UserId , @GetDate ,@UserId , @GetDate from @InsertPimAtrribute IPA INNER JOIN ZnodeAttributeType ZAT 
		ON IPA.AttributeType = ZAT.AttributeTypeName  
		
		
		INSERT INTO ZnodePimAttributeLocale (LocaleId,PimAttributeId,AttributeName,Description,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		Select @LocaleId ,IPAS.PimAttributeId, IPA.AttributeName, '', @UserId , @GetDate ,@UserId , @GetDate   
		 FROM @InsertedPimAttributeIds IPAS INNER JOIN @InsertPimAtrribute IPA ON IPAS.AttributeCode= IPA.AttributeCode 
		
		INSERT INTO ZnodePimAttributeValidation
		(PimAttributeId,InputValidationId,InputValidationRuleId,Name,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT IPA.PimAttributeId,ZAIV.InputValidationId,NULL,null , @UserId , @GetDate ,@UserId , @GetDate  
		FROM @InsertedPimAttributeIds IPA INNER JOIN ZnodeAttributeInputValidation ZAIV ON IPA.AttributeTypeId = ZAIV.AttributeTypeId


		insert into ZnodePimFrontendProperties (PimAttributeId,IsComparable,IsUseInSearch,IsHtmlTags,IsFacets,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		Select PimAttributeId, 0 IsComparable, 0 IsUseInSearch,0 IsHtmlTags,0 IsFacets, @UserId CreatedBy,@GetDate CreatedDate, @UserId ModifiedBy, @GetDate ModifiedDate
		from  @InsertedPimAttributeIds
		--      SET @Status = 1;

		UPDATE ZnodeImportProcessLog
		  SET STATUS = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;
		COMMIT TRAN A;
	END TRY
	BEGIN CATCH

		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN A;
	END CATCH;
END;

GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportCatalogCategory')
BEGIN 
	DROP PROCEDURE Znode_ImportCatalogCategory
END
GO
CREATE PROCEDURE [dbo].[Znode_ImportCatalogCategory](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @PimCatalogId int= 0)
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import Catalog Category Product association
	
	-- Unit Testing : 
	--BEGIN TRANSACTION;
	--update ZnodeGlobalSetting set FeatureValues = '5' WHERE FeatureName = 'InventoryRoundOff' 
	--    DECLARE @status INT;
	--    EXEC [Znode_ImportInventory] @InventoryXML = '<ArrayOfImportInventoryModel>
	-- <ImportInventoryModel>
	--   <SKU>S1002</SKU>
	--   <Quantity>999998.33</Quantity>
	--   <ReOrderLevel>10</ReOrderLevel>
	--   <RowNumber>1</RowNumber>
	--   <ListCode>TestInventory</ListCode>
	--   <ListName>TestInventory</ListName>
	-- </ImportInventoryModel>
	--</ArrayOfImportInventoryModel>' , @status = @status OUT , @UserId = 2;
	--    SELECT @status;
	--    ROLLBACK TRANSACTION;
	--------------------------------------------------------------------------------------

BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max);
		DECLARE @GetDate datetime= dbo.Fn_GetDate();
		-- Retrive RoundOff Value from global setting 
		DECLARE @InsertCatalogCategory TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, SKU varchar(300), CategoryName varchar(200), DisplayOrder int, IsActive bit, GUID nvarchar(400)
			--,Index Ind_SKU1 (SKU),Index Ind_CategoryName (CategoryName)
		);

		DECLARE @CategoryAttributId int;

		SET @CategoryAttributId =
		(
			SELECT TOP 1 PimAttributeId
			FROM ZnodePimAttribute AS ZPA
			WHERE ZPA.AttributeCode = 'CategoryName' AND 
				  ZPA.IsCategory = 1
		);

		DECLARE @InventoryListId int;

		SET @SSQL = 'Select RowNumber,SKU,CategoryName,DisplayOrder ,IsActive,GUID FROM '+@TableName;
		INSERT INTO @InsertCatalogCategory( RowNumber, SKU, CategoryName, DisplayOrder, IsActive, GUID )
		EXEC sys.sp_sqlexec @SSQL;


		--@MessageDisplay will use to display validate message for input inventory value  
		DECLARE @SKU TABLE
		( 
		   SKU nvarchar(300), PimProductId INT--, Index Ins_SKU (SKU)
		);
		INSERT INTO @SKU
			   SELECT b.AttributeValue, a.PimProductId
			   FROM ZnodePimAttributeValue AS a
					INNER JOIN
					ZnodePimAttributeValueLocale AS b
					ON a.PimAttributeId = dbo.Fn_GetProductSKUAttributeId() AND 
					   a.PimAttributeValueId = b.PimAttributeValueId;


		DECLARE @CategoryName TABLE
		( 
			CategoryName nvarchar(300), PimCategoryId int --index ind_101 (CategoryName)
		);
		INSERT INTO @CategoryName
			   SELECT ZPCAL.CategoryValue, ZPCA.PimCategoryId
			   FROM ZnodePimCategoryAttributeValue AS ZPCA
					INNER JOIN
					ZnodePimCategoryAttributeValueLocale AS ZPCAL
					ON ZPCA.PimAttributeId = 5 AND 
					ZPCA.PimCategoryAttributeValueId = ZPCAL.PimCategoryAttributeValueId;
					
		-- start Functional Validation 
		
		-----------------------------------------------
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '19', 'SKU', SKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertCatalogCategory AS ii
			   WHERE ii.SKU NOT in 
			   (
				   SELECT SKU FROM @SKU  where SKU IS NOT NULL 
			   );
		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '19', 'CategoryName', CategoryName, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertCatalogCategory AS ii
			   WHERE ii.CategoryName NOT IN 
			   (
				   SELECT CategoryName FROM @CategoryName  where CategoryName IS NOT NULL 
			   );
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			SELECT '17', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			FROM @InsertCatalogCategory AS ii
			WHERE (ii.DisplayOrder <> '' OR ii.DisplayOrder IS NOT NULL )AND  ii.DisplayOrder = 0

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			SELECT '64', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			FROM @InsertCatalogCategory AS ii
			WHERE (ii.DisplayOrder <> '' OR ii.DisplayOrder IS NOT NULL )AND  ii.DisplayOrder > 999

		UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ CategoryName - ' + ISNULL(CategoryName,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN @InsertCatalogCategory IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL


		-- End Function Validation 	
		-----------------------------------------------
		--- Delete Invalid Data after functional validatin  
		DELETE FROM @InsertCatalogCategory
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  AND RowNumber IS NOT NULL 
			--AND GUID = @NewGUID
		);

	
		IF(ISNULL(@PimCatalogId, 0) <> 0)
		BEGIN
			WITH Cte_CategorySKUAssociation
				 AS(SELECT SKU.PimProductId, 
				   (Select top 1 PimCategoryId from @CategoryName where ICC.CategoryName = CategoryName )  
				   PimCategoryId
				   , DisplayOrder, IsActive FROM @InsertCatalogCategory AS ICC INNER JOIN @SKU AS SKU ON ICC.SKU = SKU.SKU)
				 MERGE INTO ZnodePimCatalogCategory TARGET
				 USING Cte_CategorySKUAssociation SOURCE
				 ON( TARGET.PimCategoryId = SOURCE.PimCategoryId AND 
					 Target.PimCatalogId = @PimCatalogId
				   )
				 WHEN MATCHED
					   THEN UPDATE SET TARGET.PimProductId = SOURCE.PimProductId, TARGET.IsActive = SOURCE.IsActive, TARGET.DisplayOrder = SOURCE.DisplayOrder, TARGET.CreatedBy = @UserId, TARGET.CreatedDate = @GetDate, TARGET.ModifiedBy = @UserId, TARGET.ModifiedDate = @GetDate
				 WHEN NOT MATCHED
					   THEN INSERT(PimCatalogId, PimCategoryId, PimProductId, IsActive, DisplayOrder, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate) VALUES( @PimCatalogId, SOURCE.PimCategoryId, SOURCE.PimProductId, SOURCE.IsActive, SOURCE.DisplayOrder, @UserId, @GetDate, @UserId, @GetDate );
		END;
		ELSE
		BEGIN
			
			  Declare @ZnodePimCategoryProduct TABLE (PimProductId int , PimCategoryId int , Status bit , DisplayOrder int) 
			  	
			  insert into @ZnodePimCategoryProduct (PimProductId , PimCategoryId , Status , DisplayOrder )
			  SELECT SKU.PimProductId, (Select top 1 PimCategoryId from @CategoryName where ICC.CategoryName = CategoryName )  PimCategoryId
				 , IsActive , DisplayOrder FROM @InsertCatalogCategory AS ICC INNER JOIN	 @SKU AS SKU ON ICC.SKU = SKU.SKU 
			
			  INSERT into ZnodePimCategoryProduct ( PimProductId, PimCategoryId, Status, DisplayOrder, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate) 
			  Select TABL.PimProductId, TABL.PimCategoryId, TABL.Status, TABL.DisplayOrder,@UserId, @GetDate, @UserId, @GetDate   from @ZnodePimCategoryProduct TABL    
			  Where NOT EXISTS (Select top 1 1 from ZnodePimCategoryProduct ZPCP where ZPCP.PimProductId = TABL.PimProductId and  ZPCP.PimCategoryId = TABL.PimCategoryId)

		END;
		
		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM @InsertCatalogCategory
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
		WHERE ImportProcessLogId = @ImportProcessLogId;
												 
		--select 'End'
		--      SET @Status = 1;
		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;
	END TRY
	BEGIN CATCH

		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN A;
	END CATCH;
END;

GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportAssociateProducts')
BEGIN 
	DROP PROCEDURE Znode_ImportAssociateProducts
END
GO
CREATE PROCEDURE [dbo].[Znode_ImportAssociateProducts](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @PimCatalogId int= 0)
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import Product Association 
	
	-- Unit Testing : 
	--BEGIN TRANSACTION;
	--update ZnodeGlobalSetting set FeatureValues = '5' WHERE FeatureName = 'InventoryRoundOff' 
	--    DECLARE @status INT;
	--    EXEC [Znode_ImportInventory] @InventoryXML = '<ArrayOfImportInventoryModel>
	-- <ImportInventoryModel>
	--   <SKU>S1002</SKU>
	--   <Quantity>999998.33</Quantity>
	--   <ReOrderLevel>10</ReOrderLevel>
	--   <RowNumber>1</RowNumber>
	--   <ListCode>TestInventory</ListCode>
	--   <ListName>TestInventory</ListName>
	-- </ImportInventoryModel>
	--</ArrayOfImportInventoryModel>' , @status = @status OUT , @UserId = 2;
	--    SELECT @status;
	--    ROLLBACK TRANSACTION;
	--------------------------------------------------------------------------------------

BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max);
		DECLARE @GetDate datetime= dbo.Fn_GetDate();
		-- Retrive RoundOff Value from global setting 
		DECLARE @InsertProductAssociation TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, ParentSKU varchar(300), ChildSKU varchar(200), DisplayOrder int, GUID nvarchar(400)
		);
		
		IF OBJECT_ID('#InsertProduct', 'U') IS NOT NULL 
			DROP TABLE #InsertProduct
		ELSE 
		CREATE TABLE #InsertProduct 
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, ParentProductId varchar(300), ChildProductId varchar(200), DisplayOrder int, GUID nvarchar(400)
		);


		DECLARE @CategoryAttributId int;

		DECLARE @InventoryListId int;

		SET @SSQL = 'Select RowNumber,ParentSKU,ChildSKU,DisplayOrder,GUID FROM '+@TableName;
		INSERT INTO @InsertProductAssociation( RowNumber, ParentSKU,ChildSKU,DisplayOrder, GUID )
		EXEC sys.sp_sqlexec @SSQL;


		--@MessageDisplay will use to display validate message for input inventory value  
		DECLARE @SKU TABLE
		( 
						   SKU nvarchar(300), PimProductId int
		);
		INSERT INTO @SKU
			   SELECT b.AttributeValue, a.PimProductId
			   FROM ZnodePimAttributeValue AS a
					INNER JOIN
					ZnodePimAttributeValueLocale AS b
					ON a.PimAttributeId = dbo.Fn_GetProductSKUAttributeId() AND 
					   a.PimAttributeValueId = b.PimAttributeValueId;

		DECLARE @ProductType TABLE
		( 
			ProductType nvarchar(100) ,PimProductId int
		);
		INSERT INTO @ProductType
			   SELECT  ZPADV.AttributeDefaultValueCode, a.PimProductId
			   FROM ZnodePimAttributeValue AS a
					INNER JOIN
					ZnodePimProductAttributeDefaultValue AS b
					ON a.PimAttributeId = dbo.Fn_GetProductTypeAttributeId() AND 
					   a.PimAttributeValueId = b.PimAttributeValueId
					   Inner join ZnodePimAttributeDefaultValue ZPADV On b.PimAttributeDefaultValueId = ZPADV.PimAttributeDefaultValueId
					   where  ZPADV.AttributeDefaultValueCode in ('GroupedProduct','BundleProduct','ConfigurableProduct');
		-- start Functional Validation 
		-----------------------------------------------
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '19', 'ParentSKU', ParentSKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertProductAssociation AS ii
			   WHERE ii.ParentSKU NOT IN
			   (
				   SELECT SKU
				   FROM @SKU
			   );
			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '19', 'ChildSKU', ChildSKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertProductAssociation AS ii
			   WHERE ii.ChildSKU NOT IN
			   (
				   SELECT SKU
				   FROM @SKU
			   );

		--DELETE FROM @InsertProductAssociation
		--WHERE RowNumber IN
		--(
		--	SELECT DISTINCT 
		--		   RowNumber
		--	FROM ZnodeImportLog
		--	WHERE ImportProcessLogId = @ImportProcessLogId AND 
		--		  GUID = @NewGUID
		--);

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '49', 'ParentSKU',   ParentSKU , @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertProductAssociation AS ii
			   WHERE ii.ParentSKU NOT IN
			   (
				   SELECT SKU  FROM @SKU SKU inner join @ProductType  PT ON SKU.PimProductId = PT.PimProductId 
	
			   );

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '51', 'ChildSKU',   ChildSKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertProductAssociation AS ii
			   WHERE ii.ChildSKU IN
			   (
				   SELECT SKU  FROM @SKU SKU inner join @ProductType  PT ON SKU.PimProductId = PT.PimProductId 
	
			   );

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '35', 'ParentSKU',  'Configure Attribute Missing: '+ Convert(nvarchar(400),isnull(ParentSKU,'')), @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertProductAssociation AS ii Inner join @SKU PS ON 
			   ii.ParentSKU = PS.SKU 
			   Inner join @ProductType  PT ON PS.PimProductId = PT.PimProductId  AND PT.ProductType  in ('ConfigurableProduct')
			   where  PS.PimProductId NOT in 
			   (select Distinct PimProductId  from ZnodePimConfigureProductAttribute)
			   -- End Function Validation 	

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			SELECT '17', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			FROM @InsertProductAssociation AS ii
			WHERE (ii.DisplayOrder <> '' OR ii.DisplayOrder IS NOT NULL )AND  ii.DisplayOrder = 0

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			SELECT '64', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			FROM @InsertProductAssociation AS ii
			WHERE (ii.DisplayOrder <> '' OR ii.DisplayOrder IS NOT NULL )AND  ii.DisplayOrder > 999

			   UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ SKU - ' + isnull(ParentSKU,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN @InsertProductAssociation IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL

		-----------------------------------------------
		--- Delete Invalid Data after functional validatin  
		DELETE FROM @InsertProductAssociation
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId AND 
				  GUID = @NewGUID
		);

		insert into #InsertProduct (RowNumber,  ParentProductId , ChildProductId , DisplayOrder)
			SELECT RowNumber , SKUParent.PimProductId SKUParentId , 
				   ( Select TOP 1 SKUChild.PimProductId from @SKU AS SKUChild where  SKUChild.SKU = IPAC.ChildSKU ) SKUChildId,
				    DisplayOrder
					FROM @InsertProductAssociation AS IPAC INNER JOIN @SKU AS SKUParent ON IPAC.ParentSKU = SKUParent.SKU 

	-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM #InsertProduct
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End
	
		INSERT INTO ZnodePimProductTypeAssociation (PimParentProductId, PimProductId, DisplayOrder, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate) 
		select  ParentProductId , ChildProductId , DisplayOrder, @UserId, @GetDate, @UserId, @GetDate  from #InsertProduct 
		where  NOT Exists (Select TOP 1 1 from ZnodePimProductTypeAssociation where PimParentProductId =  #InsertProduct.ParentProductId
		AND PimProductId = #InsertProduct.ChildProductId )


		--SELECT SKUParent.PimProductId SKUParentId , 
		--		   ( Select TOP 1 SKUChild.PimProductId from @SKU AS SKUChild where  SKUChild.SKU = IPAC.ChildSKU ) SKUChildId,
		--		    DisplayOrder
		--			FROM @InsertProductAssociation AS IPAC INNER JOIN @SKU AS SKUParent ON IPAC.ParentSKU = SKUParent.SKU 



		--	WITH Cte_ProductAssociation
		--		 AS( SELECT SKUParent.PimProductId SKUParentId , 
		--		   ( Select TOP 1 SKUChild.PimProductId from @SKU AS SKUChild where  SKUChild.SKU = IPAC.ChildSKU ) SKUChildId,
		--		    DisplayOrder
		--			FROM @InsertProductAssociation AS IPAC INNER JOIN @SKU AS SKUParent ON IPAC.ParentSKU = SKUParent.SKU )

		--		 MERGE INTO ZnodePimProductTypeAssociation TARGET
		--		 USING Cte_ProductAssociation SOURCE
		--		 ON( TARGET.PimParentProductId = SOURCE.SKUParentId )
		--		 WHEN MATCHED
		--			   THEN UPDATE SET TARGET.PimProductId = SOURCE.SKUChildId,TARGET.DisplayOrder = SOURCE.DisplayOrder, TARGET.CreatedBy = @UserId, TARGET.CreatedDate = @GetDate, TARGET.ModifiedBy = @UserId, TARGET.ModifiedDate = @GetDate
		--		 WHEN NOT MATCHED
		--			   THEN INSERT(PimParentProductId, PimProductId,      DisplayOrder, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate) 
		--					VALUES(SOURCE.SKUParentId, SOURCE.SKUChildId, SOURCE.DisplayOrder, @UserId, @GetDate, @UserId, @GetDate );

				--INSERT INTO  ZnodePimConfigureProductAttribute  (PimProductId,PimFamilyId,PimAttributeId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				--SELECT  a.PimProductId , b.PimAttributeFamilyId,35,2,GETDATE(),2,GETDATE()
				--FROM View_LoadManageProduct a 
				--INNER JOIN ZnodePimProduct B ON (b.PimProductId = a.PimProductId)
				--WHERE AttributeCode = 'ProductType'
				--AND AttributeValue LIKE 'Config%'


								 
		--select 'End'
		--      SET @Status = 1;
		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;
	END TRY
	BEGIN CATCH

		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN A;
	END CATCH;
END;

GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportPartialInsertUpdatePimProduct')
BEGIN 
	DROP PROCEDURE Znode_ImportPartialInsertUpdatePimProduct
END
GO

CREATE  PROCEDURE [dbo].[Znode_ImportPartialInsertUpdatePimProduct]
(
    @PimProductDetail  PIMPRODUCTDETAIL READONLY,
    @UserId            INT       ,
    @status            BIT    OUT,
    @IsNotReturnOutput BIT    = 0,
	@CopyPimProductId  INT	  = 0 )
AS
   /*
     Summary : To Insert / Update single Product with multiple attribute values 
     Update Logic: 
*/
     BEGIN
         BEGIN TRAN A;
         BEGIN TRY
			 DECLARE @PimProductId INT;
			 DECLARE @TBL_PimProductId TABLE(PimAttributeValueId INT,ZnodePimAttributeValueLocaleId INT );
			 DECLARE @TBL_CopyPimProductId TABLE(PimAttributeValueId INT,OldPimAttributeValueId INT);
			 DECLARE @PimDefaultFamily INT= dbo.Fn_GetDefaultPimProductFamilyId()
			 DECLARE @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId();
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
			 DECLARE @TBL_DefaultAttributeId TABLE (PimAttributeId INT PRIMARY KEY , AttributeCode VARCHAR(600))
			 DECLARE @TBL_MediaAttributeId TABLE (PimAttributeId INT PRIMARY KEY, AttributeCode VARCHAR(600))
			 DECLARE @TBL_TextAreaAttributeId TABLE (PimAttributeId INT PRIMARY KEY , AttributeCode VARCHAR(600))
			 DECLARE @TBL_MediaAttributeValue TABLE (PimAttributeValueId INT ,LocaleId INT ,AttributeValue VARCHAr(300),MediaId INT)
			 DECLARE @TBL_DefaultAttributeValue TABLE (PimAttributeValueId INT , LocaleId INT , AttributeValue INT)
			 DECLARE @ZnodePimAttributeValue TABLE (PimAttributeValueId  INT, PimAttributeFamilyId INT,PimAttributeId INT);

			 DECLARE @AssociatedProduct VARCHAR(4000);
			 DECLARE @ConfigureAttributeId VARCHAR(4000);
			 DECLARE @ConfigureFamilyId VARCHAR(4000);
			 DECLARE @PimAttributeFamilyId INT;
			 DECLARE @LocaleId INT 

			 DECLARE @pimSkuAttributeId VARCHAR(50) = [dbo].[Fn_GetProductSKUAttributeId] ()
			 DECLARE @pimProductNameAttributeId VARCHAR(50) =[dbo].Fn_GetProductNameAttributeId ()
			 DECLARE @PimIsDownlodableAttributeId VARCHAR(50) = [dbo].[Fn_GetIsDownloadableAttributeId]()
			 Declare @SKU nvarchar(300),@ProductName nvarchar(300)
			 Select * into ##PimProductData from @PimProductDetail
			--DECLARE @PimAttributeFamily VARCHAR(50) =  [dbo].[Fn_GetAttributeFamilyId]()
			--Update ##PimProductData SET AttributeValue = 
			--(SELECT FamilyCode from ZnodePimAttributeFamily where PimAttributeFamilyId = @PimAttributeFamilyId)
			--where PimAttributeId = @PimAttributeFamily

			--DECLARE @PimAttributeIsPublish VARCHAR(50) =  [dbo].[Fn_GetAttributeIsPublish]()
			 
			--insert into ##PimProductData ([PimAttributeId],[PimAttributeFamilyId],[ProductAttributeCode],[ProductAttributeDefaultValueId],
			--[PimAttributeValueId],	[LocaleId],[PimProductId],[AttributeValue],[AssociatedProducts],[ConfigureAttributeIds],[ConfigureFamilyIds]) 
			 
			--SELECT TOP 1 @PimAttributeIsPublish,[PimAttributeFamilyId],'PublishStatus' ProductAttributeCode,NULL ProductAttributeDefaultValueId,
			--NULL PimAttributeValueId,	[LocaleId],[PimProductId],
			--CASE when isnull([PimProductId] ,0) > 1 then 'Draft' else 'Not Publish' END AttributeValue,
			--[AssociatedProducts],[ConfigureAttributeIds],[ConfigureFamilyIds]
			--from @PimProductDetail  


			INSERT INTO @TBL_DefaultAttributeId (PimAttributeId,AttributeCode)
			 SELECT PimAttributeId,AttributeCode FROM  [dbo].[Fn_GetDefaultAttributeId] ()
			 
			 INSERT INTO @TBL_MediaAttributeId (PimAttributeId,AttributeCode)
			 SELECT PimAttributeId,AttributeCode FROM [dbo].[Fn_GetProductMediaAttributeId]()

			 INSERT INTO @TBL_TextAreaAttributeId (PimAttributeId ,AttributeCode)
			 SELECT PimAttributeId, AttributeCode   FROM [dbo].[Fn_GetTextAreaAttributeId]()

			 
			 SELECT TOP 1 @PimAttributeFamilyId = PimAttributeFamilyId
                FROM ##PimProductData;
             
			 

			 
			 
			 SELECT TOP 1 @LocaleId = LocaleId
                FROM ##PimProductData;

             -- Retrive input productId from ##PimProductData table ( having multiple attribute values with common productId) 

             SELECT TOP 1 @PimProductId = PimProductId
             FROM ##PimProductData;
			
             IF ISNULL(@PimProductId, 0) = 0
                 BEGIN
                     INSERT INTO ZnodePimProduct
                     (PimAttributeFamilyId,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate
                     )
                            SELECT @PimAttributeFamilyId,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate;
                     SET @PimProductId = SCOPE_IDENTITY();
					 If EXISTS (select TOP 1 1 from ##PimProductData where PimAttributeId = @PimIsDownlodableAttributeId and AttributeValue = 'true'  )
					 Begin
						
						Select TOP 1 @SKU  =  AttributeValue from  ##PimProductData where PimAttributeId =  @pimSkuAttributeId
						Select TOP 1 @ProductName  = AttributeValue from  ##PimProductData where PimAttributeId =  @pimProductNameAttributeId
						insert into ZnodePimDownloadableProduct(SKU,ProductName,  CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
						Select @SKU, @ProductName, @UserId , @GetDate, @UserId , @GetDate 
					 End
		

                 END;
             ELSE 
                 BEGIN
                     UPDATE ZNodePimProduct
                       SET
                          -- PimAttributeFamilyId = @PimAttributeFamilyId,
						   IsProductPublish  = 
						   -- IsProductPublish = 1 for status published
						   -- IsProductPublish = 0 for status Draft
						   -- IsProductPublish = NULL for status NOT published 
						   
						   CASE 
								when IsProductPublish =1 then  0  -- IF status is publish then status should be draft
								when IsProductPublish =0 then 0   -- IF it is draft then it should be draft 
								else null END , -- if it is not publish then it will not publish
                           ModifiedBy = @UserId,
                           ModifiedDate = @GetDate
                     WHERE PimProductId = @PimProductId;
            									
					 INSERT INTO @TBL_PimProductId(PimAttributeValueId)
					 SELECT ZPAV.PimAttributeValueId
                     FROM ZnodePimAttributeValue ZPAV
					 INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ZPAV.PimAttributeId AND ( @localeID = @DefaultLocaleId OR ZPA.IsLocalizable = 1 OR EXISTS (SELECT TOP 1 1 FROM [dbo].[Fn_GetProductMediaAttributeId]() FN WHERE FN.PimAttributeId = ZPAV.PimAttributeId)))
					 --INNER JOIN ZnodePimFamilyGroupMapper ZPFGMI  ON (ZPFGMI.PimAttributeId = ZPAV.PimAttributeId AND ZPFGMI.PimAttributeFamilyId = @PimAttributeFamilyId)
					 WHERE ZPAV.PimProductId = @PimProductId
					 AND NOT EXISTS
                     (
                        SELECT TOP 1 1
                        FROM ##PimProductData TBPDI
                        WHERE TBPDI.PimAttributeId = ZPAV.PimAttributeId
                                AND TBPDI.PimProductId = ZPAV.PimProductId
					 )
                     
		
					If EXISTS (select TOP 1 1 from ##PimProductData where PimAttributeId = @PimIsDownlodableAttributeId and AttributeValue = 'true'  )
					 Begin
						Select TOP 1 @SKU  =  AttributeValue from  ##PimProductData where PimAttributeId =  @pimSkuAttributeId
						Select TOP 1 @ProductName  = AttributeValue from  ##PimProductData where PimAttributeId =  @pimProductNameAttributeId

						insert into ZnodePimDownloadableProduct(SKU,ProductName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
						Select TOP 1 PD.AttributeValue, @ProductName,@UserId , @GetDate, @UserId , @GetDate from  ##PimProductData PD where  PD.PimAttributeId = @pimSkuAttributeId 
						AND not exists (select top 1 1 from  ZnodePimDownloadableProduct where  ZnodePimDownloadableProduct.SKU  =  PD.AttributeValue)
						IF NOT Exists (	select top 1 1 from  ZnodePimDownloadableProduct where  ZnodePimDownloadableProduct.SKU  = @SKU)
							insert into ZnodePimDownloadableProduct(SKU,ProductName,  CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
							Select @SKU, @ProductName, @UserId , @GetDate, @UserId , @GetDate 

					 End
                 END;
		
		    MERGE INTO ZnodePimAttributeValue TARGET
              USING ##PimProductData SOURCE
              ON(
				TARGET.PimProductId = @PimProductId
                AND TARGET.PimAttributeId = SOURCE.PimAttributeId)
                 WHEN MATCHED
                 THEN UPDATE SET
                                 TARGET.PimAttributeFamilyId = CASE
                                                                   WHEN Source.PimAttributeFamilyId = 0
                                                                   THEN NULL
                                                                   ELSE Source.PimAttributeFamilyId
                                                               END,
                                 TARGET.CreatedBy = @UserId,
                                 TARGET.CreatedDate = @GetDate,
                                 TARGET.ModifiedBy = @UserId,
                                 TARGET.ModifiedDate = @GetDate
                 WHEN NOT MATCHED
                 THEN INSERT(PimAttributeFamilyId,
                             PimProductId,
                             PimAttributeId,
                             PimAttributeDefaultValueId,                            
                             CreatedBy,
                             CreatedDate,
                             ModifiedBy,
                             ModifiedDate) VALUES
             (CASE
                  WHEN Source.PimAttributeFamilyId = 0
                  THEN @PimDefaultFamily
                  ELSE Source.PimAttributeFamilyId
              END,
              @PimProductId,
              SOURCE.PimAttributeId,
              CASE
                  WHEN SOURCE.ProductAttributeDefaultValueId = 0
                  THEN NULL
                  ELSE SOURCE.ProductAttributeDefaultValueId
              END,              
              @UserId,
              @GetDate,
              @UserId,
              @GetDate
             )
             
             OUTPUT INSERTED.PimAttributeValueId,
                    INSERTED.PimAttributeFamilyId,
                    INSERTED.PimAttributeId
                    INTO @ZnodePimAttributeValue;
        		 
		INSERT INTO @TBL_MediaAttributeValue (PimAttributeValueId,LocaleId , AttributeValue,MediaId)
		SELECT a.PimAttributeValueId,
                        b.LocaleId,
                         zm.Path AttributeValue
						 ,ZM.MediaId
        FROM @ZnodePimAttributeValue AS a
        INNER JOIN ##PimProductData AS b ON(a.PimAttributeId = b.PimAttributeId)
                                                --AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0))
		INNER JOIN @TBL_MediaAttributeId c ON ( c.PimAttributeId  = b.PimAttributeId )
		INNER JOIN ZnodeMedia ZM ON (EXISTS (SELECT TOP 1 1 FROM dbo.split(b.AttributeValue ,',') SP WHERE sp.Item = ZM.MediaId ))
		
		

		DELETE FROM ZnodePimProductAttributeMedia 
		WHERE EXISTS 
		 (SELECT TOP 1 1 FROM @TBL_MediaAttributeValue TBLM WHERE ZnodePimProductAttributeMedia.PimAttributeValueId = TBLM.PimAttributeValueId 
		 AND TBLM.MediaId <> ZnodePimProductAttributeMedia.MediaId  AND ZnodePimProductAttributeMedia.Localeid = @LocaleId)



		MERGE INTO ZnodePimProductAttributeMedia TARGET 
		USING @TBL_MediaAttributeValue SOURCE 
		ON (        TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
		        AND TARGET.MediaPAth = SOURCE.AttributeValue
                  AND TARGET.LocaleId = SOURCE.LocaleId)
		WHEN MATCHED THEN 
		UPDATE SET
                                 TARGET.MediaPath = SOURCE.AttributeValue,
						   TARGET.MediaId   = SOURCE.MediaId,
                                 TARGET.CreatedBy = @UserId,
                                 TARGET.CreatedDate = @GetDate,
                                 TARGET.ModifiedBy = @UserId,
                                 TARGET.ModifiedDate = @GetDate
                 WHEN NOT MATCHED
                 THEN 
		    INSERT(PimAttributeValueId,
                             LocaleId,
                             MediaPath,
							 MediaId ,
                             CreatedBy,
                             CreatedDate,
                             ModifiedBy,
                             ModifiedDate) 
			VALUES
             (SOURCE.PimAttributeValueId,
              SOURCE.LocaleId,
              SOURCE.AttributeValue,
			  SOURCE.MediaId,
              @UserId,
              @GetDate,
              @UserId,
              @GetDate
             );
		

	   ;With Cte_TextAreaAttributeValue AS 
		 (
		SELECT a.PimAttributeValueId,
                        b.LocaleId,
                        AttributeValue
        FROM @ZnodePimAttributeValue AS a
        INNER JOIN ##PimProductData AS b ON(a.PimAttributeId = b.PimAttributeId)
                                                --AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0))
		INNER JOIN @TBL_TextAreaAttributeId c ON ( c.PimAttributeId  = b.PimAttributeId )
		
		)
		
		MERGE INTO ZnodePimProductAttributeTextAreaValue TARGET 
		USING Cte_TextAreaAttributeValue SOURCE 
		ON (TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
                AND TARGET.LocaleId = SOURCE.LocaleId)
		WHEN MATCHED THEN 
		UPDATE SET
                                 TARGET.AttributeValue = SOURCE.AttributeValue,
                                 TARGET.CreatedBy = @UserId,
                                 TARGET.CreatedDate = @GetDate,
                                 TARGET.ModifiedBy = @UserId,
                                 TARGET.ModifiedDate = @GetDate
                 WHEN NOT MATCHED
                 THEN 
		    INSERT(PimAttributeValueId,
                             LocaleId,
                             AttributeValue,
                             CreatedBy,
                             CreatedDate,
                             ModifiedBy,
                             ModifiedDate) 
			VALUES
             (SOURCE.PimAttributeValueId,
              SOURCE.LocaleId,
              SOURCE.AttributeValue,
              @UserId,
              @GetDate,
              @UserId,
              @GetDate
             );
		-- SELECT a.PimAttributeValueId,
  --                      b.LocaleId,
  --                      d.PimAttributeDefaultValueId  AttributeValue,b.PimAttributeId
  --      FROM @ZnodePimAttributeValue AS a
  --        INNER JOIN ##PimProductData AS b ON(a.PimAttributeId = b.PimAttributeId
  --                                              AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0))
		--INNER JOIN @TBL_DefaultAttributeId c ON ( c.PimAttributeId  = b.PimAttributeId )
		--INNER JOIN ZnodePimAttributeDefaultValue d ON (EXISTS (SELECT TOP 1 1 FROM dbo.split(b.AttributeValue,',') SP WHERE d.PimAttributeId = b.PimAttributeId AND SP.Item = d.AttributeDefaultValueCode))
	



        INSERT INTO @TBL_DefaultAttributeValue (PimAttributeValueId,LocaleId,AttributeValue)  
		SELECT a.PimAttributeValueId,
                        b.LocaleId,
                        d.PimAttributeDefaultValueId  AttributeValue
        FROM @ZnodePimAttributeValue AS a
          INNER JOIN ##PimProductData AS b ON(a.PimAttributeId = b.PimAttributeId)
                                                --AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0))
		INNER JOIN @TBL_DefaultAttributeId c ON ( c.PimAttributeId  = b.PimAttributeId )
		INNER JOIN ZnodePimAttributeDefaultValue d ON (EXISTS (SELECT TOP 1 1 FROM dbo.split(b.AttributeValue,',') SP WHERE d.PimAttributeId = b.PimAttributeId AND SP.Item = d.AttributeDefaultValueCode))
	    
	    
		DELETE FROM ZnodePimProductAttributeDefaultValue 
		WHERE  EXISTS (SELECT TOP 1 1 FROM @TBL_DefaultAttributeValue TBLAV WHERE TBLAV.PimAttributeValueId = ZnodePimProductAttributeDefaultValue.PimAttributeValueId 
												AND TBLAV.AttributeValue   <> ZnodePimProductAttributeDefaultValue.PimAttributeDefaultValueId 
												 AND ZnodePimProductAttributeDefaultValue.LocaleId = @LocaleId )

		MERGE INTO ZnodePimProductAttributeDefaultValue TARGET 
		USING @TBL_DefaultAttributeValue SOURCE 
		ON (TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
              AND TARGET.PimAttributeDefaultValueId =  SOURCE.AttributeValue
			    AND TARGET.LocaleId = SOURCE.LocaleId)
		WHEN MATCHED THEN 
		UPDATE SET
                                 TARGET.PimAttributeDefaultValueId = SOURCE.AttributeValue,
                                 TARGET.CreatedBy = @UserId,
                                 TARGET.CreatedDate = @GetDate,
                                 TARGET.ModifiedBy = @UserId,
                                 TARGET.ModifiedDate = @GetDate
                 WHEN NOT MATCHED
                 THEN 
		    INSERT(PimAttributeValueId,
                             LocaleId,
                             PimAttributeDefaultValueId,
                             CreatedBy,
                             CreatedDate,
                             ModifiedBy,
                             ModifiedDate) 
			VALUES
             (SOURCE.PimAttributeValueId,
              SOURCE.LocaleId,
              SOURCE.AttributeValue,
              @UserId,
              @GetDate,
              @UserId,
              @GetDate
             );
			 
		
		   MERGE INTO ZnodePimAttributeValueLocale TARGET
             USING
             (
                 SELECT a.PimAttributeValueId,
                        b.LocaleId,
                        AttributeValue
                 FROM @ZnodePimAttributeValue AS a
                      INNER JOIN ##PimProductData AS b ON(a.PimAttributeId = b.PimAttributeId)
                                                             --AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0))
                 WHERE NOT EXISTS (SELECT TOP 1 1 FROM @TBL_DefaultAttributeId TBLDA WHERE TBLDA.PimAttributeId = b.PimAttributeId  )
			     AND NOT EXISTS (SELECT TOP 1 1 FROM @TBL_MediaAttributeId TBLMA WHERE TBLMA.PimAttributeId = b.PimAttributeId  )
				 AND NOT EXISTS (SELECT TOP 1 1 FROM @TBL_TextAreaAttributeId TBLTA WHERE TBLTA.PimAttributeId = b.PimAttributeId  )
			 ) SOURCE
             ON(TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
                AND TARGET.LocaleId = SOURCE.LocaleId)
                 WHEN MATCHED
                 THEN UPDATE SET
                                 TARGET.AttributeValue = SOURCE.AttributeValue,
                                 TARGET.CreatedBy = @UserId,
                                 TARGET.CreatedDate = @GetDate,
                                 TARGET.ModifiedBy = @UserId,
                                 TARGET.ModifiedDate = @GetDate
                 WHEN NOT MATCHED
                 THEN INSERT(PimAttributeValueId,
                             LocaleId,
                             AttributeValue,
                             CreatedBy,
                             CreatedDate,
                             ModifiedBy,
                             ModifiedDate) VALUES
             (SOURCE.PimAttributeValueId,
              SOURCE.LocaleId,
              SOURCE.AttributeValue,
              @UserId,
              @GetDate,
              @UserId,
              @GetDate
             );
             SET @AssociatedProduct =
             (
                 SELECT MAX(AssociatedProducts)
                 FROM ##PimProductData AS a
             );
             INSERT INTO ZnodePimProductTypeAssociation
             (PimParentProductId,
              PimProductId,
              DisplayOrder,
              CreatedBy,
              CreatedDate,
              ModifiedBy,
              ModifiedDate
             )
                    SELECT @PimProductId,
                           Item,
                           ID AS RowId,
                           @UserId,
                           @GetDate,
                           @UserId,
                           @GetDate
                    FROM dbo.Split(@AssociatedProduct, ',') AS b
                         INNER JOIN ZNodePimProduct AS q ON(q.PimProductId = b.Item)
						 WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimProductTypeAssociation PPT
						 WHERE PPT.PimParentProductId = @PimProductId AND PPT.PimProductId = b.Item)


             SET @ConfigureAttributeId =
             (
                 SELECT MAX(ConfigureAttributeIds)
                 FROM ##PimProductData AS a
             );
             SET @ConfigureFamilyId =
             (
                 SELECT MAX(ConfigureFamilyIds)
                 FROM ##PimProductData AS a
             );
             INSERT INTO [ZnodePimConfigureProductAttribute]
             (PimProductId,
              PimFamilyId,
              PimAttributeId,
              CreatedBy,
              CreatedDate,
              ModifiedBy,
              ModifiedDate
             )
                    SELECT @PimProductId,
                           @ConfigureFamilyId,
                           q.PimAttributeId,
                           @UserId,
                           @GetDate,
                           @UserId,
                           @GetDate
                    FROM dbo.Split(@ConfigureAttributeId, ',') AS b
                         INNER JOIN ZnodePimAttribute AS q ON(q.PimAttributeId = b.Item)
					WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimConfigureProductAttribute RTR  WHERE  RTR.PimProductId = @PimProductId AND RTR.PimAttributeId = q.PimAttributeId);



             IF @IsNotReturnOutput = 0
                 SELECT @PimProductId AS Id,
                        CAST(1 AS BIT) AS Status;
             SET @status = 1;

			 IF @CopyPimProductId > 0 
			 BEGIN 
			   INSERT INTO ZnodePimAttributeValueLocale  (PimAttributeValueId,LocaleId,AttributeValue,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			   SELECT ZPAVI.PimAttributeValueId,ZPAVL.LocaleId,ZPAVL.AttributeValue,@UserId,@GetDate,@UserId,@GetDate
			   FROM ZnodePimAttributeValueLocale ZPAVL 
			   INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId )
			   INNER JOIN ZnodePimAttributeValue ZPAVI ON (ZPAVI.PimAttributeId = ZPAV.PimAttributeId AND ZPAVI.PimProductId = @PimProductId )
			   WHERE ZPAVL.LocaleId <> dbo.Fn_GetDefaultLocaleId()
			   AND ZPAV.PimProductId = @CopyPimProductId

			    INSERT INTO ZnodePimProductAttributeDefaultValue  (PimAttributeValueId,LocaleId,PimAttributeDefaultValueId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			   SELECT ZPAVI.PimAttributeValueId,ZPAVL.LocaleId,ZPAVL.PimAttributeDefaultValueId,@UserId,@GetDate,@UserId,@GetDate
			   FROM ZnodePimProductAttributeDefaultValue ZPAVL 
			   INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId )
			   INNER JOIN ZnodePimAttributeValue ZPAVI ON (ZPAVI.PimAttributeId = ZPAV.PimAttributeId AND ZPAVI.PimProductId = @PimProductId )
			   WHERE ZPAVL.LocaleId <> dbo.Fn_GetDefaultLocaleId()
			   AND ZPAV.PimProductId = @CopyPimProductId


			   INSERT INTO ZnodePimProductAttributeTextAreaValue  (PimAttributeValueId,LocaleId,AttributeValue,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			   SELECT ZPAVI.PimAttributeValueId,ZPAVL.LocaleId,ZPAVL.AttributeValue,@UserId,@GetDate,@UserId,@GetDate
			   FROM ZnodePimProductAttributeTextAreaValue ZPAVL 
			   INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId )
			   INNER JOIN ZnodePimAttributeValue ZPAVI ON (ZPAVI.PimAttributeId = ZPAV.PimAttributeId AND ZPAVI.PimProductId = @PimProductId )
			   WHERE ZPAVL.LocaleId <> dbo.Fn_GetDefaultLocaleId()
			   AND ZPAV.PimProductId = @CopyPimProductId
			   			   
			   INSERT INTO ZnodePimProductAttributeMedia  (PimAttributeValueId,LocaleId,MediaPath,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			   SELECT ZPAVI.PimAttributeValueId,ZPAVL.LocaleId,ZPAVL.MediaPath,@UserId,@GetDate,@UserId,@GetDate
			   FROM ZnodePimProductAttributeMedia ZPAVL 
			   INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId )
			   INNER JOIN ZnodePimAttributeValue ZPAVI ON (ZPAVI.PimAttributeId = ZPAV.PimAttributeId AND ZPAVI.PimProductId = @PimProductId )
			   WHERE ZPAVL.LocaleId <> dbo.Fn_GetDefaultLocaleId()
			   AND ZPAV.PimProductId = @CopyPimProductId
			   
			 END 
			 
			 If Object_id ('Tempdb..##PimProductData')  is not null 
				DROP TABLE Tempdb..##PimProductData

             COMMIT TRAN A;
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE()
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportPartialInsertUpdatePimProduct @UserId = '+CAST(@UserId AS VARCHAR(50))+',@IsNotReturnOutput='+CAST(@IsNotReturnOutput AS VARCHAR(50))+',@CopyPimProductId='+CAST(@CopyPimProductId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
			 ROLLBACK TRAN A;
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_ImportPartialInsertUpdatePimProduct',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;

	 GO

	 UPDATE ZnodeImportAttributeValidation
SET IsRequired = 0
WHERE AttributeCode IN ('SEOTitle','SEOKeywords')
AND ImportHeadId = (SELECT ImportHeadId FROM ZnodeImportHead WHERE Name = 'SEODetails' )

GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportPartialInsertUpdatePimProduct')
BEGIN 
	DROP PROCEDURE Znode_ImportPartialInsertUpdatePimProduct
END
GO

CREATE  PROCEDURE [dbo].[Znode_ImportPartialInsertUpdatePimProduct]
(
    @PimProductDetail  PIMPRODUCTDETAIL READONLY,
    @UserId            INT       ,
    @status            BIT    OUT,
    @IsNotReturnOutput BIT    = 0,
	@CopyPimProductId  INT	  = 0 )
AS
   /*
     Summary : To Insert / Update single Product with multiple attribute values 
     Update Logic: 
*/
     BEGIN
         BEGIN TRAN A;
         BEGIN TRY
			 DECLARE @PimProductId INT;
			 DECLARE @TBL_PimProductId TABLE(PimAttributeValueId INT,ZnodePimAttributeValueLocaleId INT );
			 DECLARE @TBL_CopyPimProductId TABLE(PimAttributeValueId INT,OldPimAttributeValueId INT);
			 DECLARE @PimDefaultFamily INT= dbo.Fn_GetDefaultPimProductFamilyId()
			 DECLARE @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId();
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
			 DECLARE @TBL_DefaultAttributeId TABLE (PimAttributeId INT PRIMARY KEY , AttributeCode VARCHAR(600))
			 DECLARE @TBL_MediaAttributeId TABLE (PimAttributeId INT PRIMARY KEY, AttributeCode VARCHAR(600))
			 DECLARE @TBL_TextAreaAttributeId TABLE (PimAttributeId INT PRIMARY KEY , AttributeCode VARCHAR(600))
			 DECLARE @TBL_MediaAttributeValue TABLE (PimAttributeValueId INT ,LocaleId INT ,AttributeValue VARCHAr(300),MediaId INT)
			 DECLARE @TBL_DefaultAttributeValue TABLE (PimAttributeValueId INT , LocaleId INT , AttributeValue INT)
			 DECLARE @ZnodePimAttributeValue TABLE (PimAttributeValueId  INT, PimAttributeFamilyId INT,PimAttributeId INT);

			 DECLARE @AssociatedProduct VARCHAR(4000);
			 DECLARE @ConfigureAttributeId VARCHAR(4000);
			 DECLARE @ConfigureFamilyId VARCHAR(4000);
			 DECLARE @PimAttributeFamilyId INT;
			 DECLARE @LocaleId INT 

			 DECLARE @pimSkuAttributeId VARCHAR(50) = [dbo].[Fn_GetProductSKUAttributeId] ()
			 DECLARE @pimProductNameAttributeId VARCHAR(50) =[dbo].Fn_GetProductNameAttributeId ()
			 DECLARE @PimIsDownlodableAttributeId VARCHAR(50) = [dbo].[Fn_GetIsDownloadableAttributeId]()
			 Declare @SKU nvarchar(300),@ProductName nvarchar(300)
			 Select * into ##PimProductData from @PimProductDetail
			--DECLARE @PimAttributeFamily VARCHAR(50) =  [dbo].[Fn_GetAttributeFamilyId]()
			--Update ##PimProductData SET AttributeValue = 
			--(SELECT FamilyCode from ZnodePimAttributeFamily where PimAttributeFamilyId = @PimAttributeFamilyId)
			--where PimAttributeId = @PimAttributeFamily

			--DECLARE @PimAttributeIsPublish VARCHAR(50) =  [dbo].[Fn_GetAttributeIsPublish]()
			 
			--insert into ##PimProductData ([PimAttributeId],[PimAttributeFamilyId],[ProductAttributeCode],[ProductAttributeDefaultValueId],
			--[PimAttributeValueId],	[LocaleId],[PimProductId],[AttributeValue],[AssociatedProducts],[ConfigureAttributeIds],[ConfigureFamilyIds]) 
			 
			--SELECT TOP 1 @PimAttributeIsPublish,[PimAttributeFamilyId],'PublishStatus' ProductAttributeCode,NULL ProductAttributeDefaultValueId,
			--NULL PimAttributeValueId,	[LocaleId],[PimProductId],
			--CASE when isnull([PimProductId] ,0) > 1 then 'Draft' else 'Not Publish' END AttributeValue,
			--[AssociatedProducts],[ConfigureAttributeIds],[ConfigureFamilyIds]
			--from @PimProductDetail  


			INSERT INTO @TBL_DefaultAttributeId (PimAttributeId,AttributeCode)
			 SELECT PimAttributeId,AttributeCode FROM  [dbo].[Fn_GetDefaultAttributeId] ()
			 
			 INSERT INTO @TBL_MediaAttributeId (PimAttributeId,AttributeCode)
			 SELECT PimAttributeId,AttributeCode FROM [dbo].[Fn_GetProductMediaAttributeId]()

			 INSERT INTO @TBL_TextAreaAttributeId (PimAttributeId ,AttributeCode)
			 SELECT PimAttributeId, AttributeCode   FROM [dbo].[Fn_GetTextAreaAttributeId]()

			 
			 SELECT TOP 1 @PimAttributeFamilyId = PimAttributeFamilyId
                FROM ##PimProductData;
             			 
			 
			 SELECT TOP 1 @LocaleId = LocaleId
                FROM ##PimProductData;

             -- Retrive input productId from ##PimProductData table ( having multiple attribute values with common productId) 
			 DECLARE @PublishStateIdForDraft INT =  [dbo].[Fn_GetPublishStateIdForDraftState]()

             SELECT TOP 1 @PimProductId = PimProductId
             FROM ##PimProductData;
			
             IF ISNULL(@PimProductId, 0) = 0
                 BEGIN
                     INSERT INTO ZnodePimProduct
                     (PimAttributeFamilyId,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate
                     )
                            SELECT @PimAttributeFamilyId,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate;
                     SET @PimProductId = SCOPE_IDENTITY();
					 If EXISTS (select TOP 1 1 from ##PimProductData where PimAttributeId = @PimIsDownlodableAttributeId and AttributeValue = 'true'  )
					 Begin
						
						Select TOP 1 @SKU  =  AttributeValue from  ##PimProductData where PimAttributeId =  @pimSkuAttributeId
						Select TOP 1 @ProductName  = AttributeValue from  ##PimProductData where PimAttributeId =  @pimProductNameAttributeId
						insert into ZnodePimDownloadableProduct(SKU,ProductName,  CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
						Select @SKU, @ProductName, @UserId , @GetDate, @UserId , @GetDate 
					 End
		

                 END;
             ELSE 
                 BEGIN
                     UPDATE ZNodePimProduct
                       SET
                          PublishStateId = @PublishStateIdForDraft, 
                           ModifiedBy = @UserId,
                           ModifiedDate = @GetDate
                     WHERE PimProductId = @PimProductId;
            									
					 INSERT INTO @TBL_PimProductId(PimAttributeValueId)
					 SELECT ZPAV.PimAttributeValueId
                     FROM ZnodePimAttributeValue ZPAV
					 INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ZPAV.PimAttributeId AND ( @localeID = @DefaultLocaleId OR ZPA.IsLocalizable = 1 OR EXISTS (SELECT TOP 1 1 FROM [dbo].[Fn_GetProductMediaAttributeId]() FN WHERE FN.PimAttributeId = ZPAV.PimAttributeId)))
					 --INNER JOIN ZnodePimFamilyGroupMapper ZPFGMI  ON (ZPFGMI.PimAttributeId = ZPAV.PimAttributeId AND ZPFGMI.PimAttributeFamilyId = @PimAttributeFamilyId)
					 WHERE ZPAV.PimProductId = @PimProductId
					 AND NOT EXISTS
                     (
                        SELECT TOP 1 1
                        FROM ##PimProductData TBPDI
                        WHERE TBPDI.PimAttributeId = ZPAV.PimAttributeId
                                AND TBPDI.PimProductId = ZPAV.PimProductId
					 )
                     
		
					If EXISTS (select TOP 1 1 from ##PimProductData where PimAttributeId = @PimIsDownlodableAttributeId and AttributeValue = 'true'  )
					 Begin
						Select TOP 1 @SKU  =  AttributeValue from  ##PimProductData where PimAttributeId =  @pimSkuAttributeId
						Select TOP 1 @ProductName  = AttributeValue from  ##PimProductData where PimAttributeId =  @pimProductNameAttributeId

						insert into ZnodePimDownloadableProduct(SKU,ProductName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
						Select TOP 1 PD.AttributeValue, @ProductName,@UserId , @GetDate, @UserId , @GetDate from  ##PimProductData PD where  PD.PimAttributeId = @pimSkuAttributeId 
						AND not exists (select top 1 1 from  ZnodePimDownloadableProduct where  ZnodePimDownloadableProduct.SKU  =  PD.AttributeValue)
						IF NOT Exists (	select top 1 1 from  ZnodePimDownloadableProduct where  ZnodePimDownloadableProduct.SKU  = @SKU)
							insert into ZnodePimDownloadableProduct(SKU,ProductName,  CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
							Select @SKU, @ProductName, @UserId , @GetDate, @UserId , @GetDate 

					 End
                 END;
		
		    MERGE INTO ZnodePimAttributeValue TARGET
              USING ##PimProductData SOURCE
              ON(
				TARGET.PimProductId = @PimProductId
                AND TARGET.PimAttributeId = SOURCE.PimAttributeId)
                 WHEN MATCHED
                 THEN UPDATE SET
                                 TARGET.PimAttributeFamilyId = CASE
                                                                   WHEN Source.PimAttributeFamilyId = 0
                                                                   THEN NULL
                                                                   ELSE Source.PimAttributeFamilyId
                                                               END,
                                 TARGET.CreatedBy = @UserId,
                                 TARGET.CreatedDate = @GetDate,
                                 TARGET.ModifiedBy = @UserId,
                                 TARGET.ModifiedDate = @GetDate
                 WHEN NOT MATCHED
                 THEN INSERT(PimAttributeFamilyId,
                             PimProductId,
                             PimAttributeId,
                             PimAttributeDefaultValueId,                            
                             CreatedBy,
                             CreatedDate,
                             ModifiedBy,
                             ModifiedDate) VALUES
             (CASE
                  WHEN Source.PimAttributeFamilyId = 0
                  THEN @PimDefaultFamily
                  ELSE Source.PimAttributeFamilyId
              END,
              @PimProductId,
              SOURCE.PimAttributeId,
              CASE
                  WHEN SOURCE.ProductAttributeDefaultValueId = 0
                  THEN NULL
                  ELSE SOURCE.ProductAttributeDefaultValueId
              END,              
              @UserId,
              @GetDate,
              @UserId,
              @GetDate
             )
             
             OUTPUT INSERTED.PimAttributeValueId,
                    INSERTED.PimAttributeFamilyId,
                    INSERTED.PimAttributeId
                    INTO @ZnodePimAttributeValue;
        		 
		INSERT INTO @TBL_MediaAttributeValue (PimAttributeValueId,LocaleId , AttributeValue,MediaId)
		SELECT a.PimAttributeValueId,
                        b.LocaleId,
                         zm.Path AttributeValue
						 ,ZM.MediaId
        FROM @ZnodePimAttributeValue AS a
        INNER JOIN ##PimProductData AS b ON(a.PimAttributeId = b.PimAttributeId)
                                                --AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0))
		INNER JOIN @TBL_MediaAttributeId c ON ( c.PimAttributeId  = b.PimAttributeId )
		INNER JOIN ZnodeMedia ZM ON (EXISTS (SELECT TOP 1 1 FROM dbo.split(b.AttributeValue ,',') SP WHERE sp.Item = ZM.MediaId ))
		
		

		DELETE FROM ZnodePimProductAttributeMedia 
		WHERE EXISTS 
		 (SELECT TOP 1 1 FROM @TBL_MediaAttributeValue TBLM WHERE ZnodePimProductAttributeMedia.PimAttributeValueId = TBLM.PimAttributeValueId 
		 AND TBLM.MediaId <> ZnodePimProductAttributeMedia.MediaId  AND ZnodePimProductAttributeMedia.Localeid = @LocaleId)



		MERGE INTO ZnodePimProductAttributeMedia TARGET 
		USING @TBL_MediaAttributeValue SOURCE 
		ON (        TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
		        AND TARGET.MediaPAth = SOURCE.AttributeValue
                  AND TARGET.LocaleId = SOURCE.LocaleId)
		WHEN MATCHED THEN 
		UPDATE SET
                                 TARGET.MediaPath = SOURCE.AttributeValue,
						   TARGET.MediaId   = SOURCE.MediaId,
                                 TARGET.CreatedBy = @UserId,
                                 TARGET.CreatedDate = @GetDate,
                                 TARGET.ModifiedBy = @UserId,
                                 TARGET.ModifiedDate = @GetDate
                 WHEN NOT MATCHED
                 THEN 
		    INSERT(PimAttributeValueId,
                             LocaleId,
                             MediaPath,
							 MediaId ,
                             CreatedBy,
                             CreatedDate,
                             ModifiedBy,
                             ModifiedDate) 
			VALUES
             (SOURCE.PimAttributeValueId,
              SOURCE.LocaleId,
              SOURCE.AttributeValue,
			  SOURCE.MediaId,
              @UserId,
              @GetDate,
              @UserId,
              @GetDate
             );
		

	   ;With Cte_TextAreaAttributeValue AS 
		 (
		SELECT a.PimAttributeValueId,
                        b.LocaleId,
                        AttributeValue
        FROM @ZnodePimAttributeValue AS a
        INNER JOIN ##PimProductData AS b ON(a.PimAttributeId = b.PimAttributeId)
                                                --AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0))
		INNER JOIN @TBL_TextAreaAttributeId c ON ( c.PimAttributeId  = b.PimAttributeId )
		
		)
		
		MERGE INTO ZnodePimProductAttributeTextAreaValue TARGET 
		USING Cte_TextAreaAttributeValue SOURCE 
		ON (TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
                AND TARGET.LocaleId = SOURCE.LocaleId)
		WHEN MATCHED THEN 
		UPDATE SET
                                 TARGET.AttributeValue = SOURCE.AttributeValue,
                                 TARGET.CreatedBy = @UserId,
                                 TARGET.CreatedDate = @GetDate,
                                 TARGET.ModifiedBy = @UserId,
                                 TARGET.ModifiedDate = @GetDate
                 WHEN NOT MATCHED
                 THEN 
		    INSERT(PimAttributeValueId,
                             LocaleId,
                             AttributeValue,
                             CreatedBy,
                             CreatedDate,
                             ModifiedBy,
                             ModifiedDate) 
			VALUES
             (SOURCE.PimAttributeValueId,
              SOURCE.LocaleId,
              SOURCE.AttributeValue,
              @UserId,
              @GetDate,
              @UserId,
              @GetDate
             );
		-- SELECT a.PimAttributeValueId,
  --                      b.LocaleId,
  --                      d.PimAttributeDefaultValueId  AttributeValue,b.PimAttributeId
  --      FROM @ZnodePimAttributeValue AS a
  --        INNER JOIN ##PimProductData AS b ON(a.PimAttributeId = b.PimAttributeId
  --                                              AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0))
		--INNER JOIN @TBL_DefaultAttributeId c ON ( c.PimAttributeId  = b.PimAttributeId )
		--INNER JOIN ZnodePimAttributeDefaultValue d ON (EXISTS (SELECT TOP 1 1 FROM dbo.split(b.AttributeValue,',') SP WHERE d.PimAttributeId = b.PimAttributeId AND SP.Item = d.AttributeDefaultValueCode))
	



        INSERT INTO @TBL_DefaultAttributeValue (PimAttributeValueId,LocaleId,AttributeValue)  
		SELECT a.PimAttributeValueId,
                        b.LocaleId,
                        d.PimAttributeDefaultValueId  AttributeValue
        FROM @ZnodePimAttributeValue AS a
          INNER JOIN ##PimProductData AS b ON(a.PimAttributeId = b.PimAttributeId)
                                                --AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0))
		INNER JOIN @TBL_DefaultAttributeId c ON ( c.PimAttributeId  = b.PimAttributeId )
		INNER JOIN ZnodePimAttributeDefaultValue d ON (EXISTS (SELECT TOP 1 1 FROM dbo.split(b.AttributeValue,',') SP WHERE d.PimAttributeId = b.PimAttributeId AND SP.Item = d.AttributeDefaultValueCode))
	    
	    
		DELETE FROM ZnodePimProductAttributeDefaultValue 
		WHERE  EXISTS (SELECT TOP 1 1 FROM @TBL_DefaultAttributeValue TBLAV WHERE TBLAV.PimAttributeValueId = ZnodePimProductAttributeDefaultValue.PimAttributeValueId 
												AND TBLAV.AttributeValue   <> ZnodePimProductAttributeDefaultValue.PimAttributeDefaultValueId 
												 AND ZnodePimProductAttributeDefaultValue.LocaleId = @LocaleId )

		MERGE INTO ZnodePimProductAttributeDefaultValue TARGET 
		USING @TBL_DefaultAttributeValue SOURCE 
		ON (TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
              AND TARGET.PimAttributeDefaultValueId =  SOURCE.AttributeValue
			    AND TARGET.LocaleId = SOURCE.LocaleId)
		WHEN MATCHED THEN 
		UPDATE SET
                                 TARGET.PimAttributeDefaultValueId = SOURCE.AttributeValue,
                                 TARGET.CreatedBy = @UserId,
                                 TARGET.CreatedDate = @GetDate,
                                 TARGET.ModifiedBy = @UserId,
                                 TARGET.ModifiedDate = @GetDate
                 WHEN NOT MATCHED
                 THEN 
		    INSERT(PimAttributeValueId,
                             LocaleId,
                             PimAttributeDefaultValueId,
                             CreatedBy,
                             CreatedDate,
                             ModifiedBy,
                             ModifiedDate) 
			VALUES
             (SOURCE.PimAttributeValueId,
              SOURCE.LocaleId,
              SOURCE.AttributeValue,
              @UserId,
              @GetDate,
              @UserId,
              @GetDate
             );
			 
		
		   MERGE INTO ZnodePimAttributeValueLocale TARGET
             USING
             (
                 SELECT a.PimAttributeValueId,
                        b.LocaleId,
                        AttributeValue
                 FROM @ZnodePimAttributeValue AS a
                      INNER JOIN ##PimProductData AS b ON(a.PimAttributeId = b.PimAttributeId)
                                                             --AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0))
                 WHERE NOT EXISTS (SELECT TOP 1 1 FROM @TBL_DefaultAttributeId TBLDA WHERE TBLDA.PimAttributeId = b.PimAttributeId  )
			     AND NOT EXISTS (SELECT TOP 1 1 FROM @TBL_MediaAttributeId TBLMA WHERE TBLMA.PimAttributeId = b.PimAttributeId  )
				 AND NOT EXISTS (SELECT TOP 1 1 FROM @TBL_TextAreaAttributeId TBLTA WHERE TBLTA.PimAttributeId = b.PimAttributeId  )
			 ) SOURCE
             ON(TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
                AND TARGET.LocaleId = SOURCE.LocaleId)
                 WHEN MATCHED
                 THEN UPDATE SET
                                 TARGET.AttributeValue = SOURCE.AttributeValue,
                                 TARGET.CreatedBy = @UserId,
                                 TARGET.CreatedDate = @GetDate,
                                 TARGET.ModifiedBy = @UserId,
                                 TARGET.ModifiedDate = @GetDate
                 WHEN NOT MATCHED
                 THEN INSERT(PimAttributeValueId,
                             LocaleId,
                             AttributeValue,
                             CreatedBy,
                             CreatedDate,
                             ModifiedBy,
                             ModifiedDate) VALUES
             (SOURCE.PimAttributeValueId,
              SOURCE.LocaleId,
              SOURCE.AttributeValue,
              @UserId,
              @GetDate,
              @UserId,
              @GetDate
             );
             SET @AssociatedProduct =
             (
                 SELECT MAX(AssociatedProducts)
                 FROM ##PimProductData AS a
             );
             INSERT INTO ZnodePimProductTypeAssociation
             (PimParentProductId,
              PimProductId,
              DisplayOrder,
              CreatedBy,
              CreatedDate,
              ModifiedBy,
              ModifiedDate
             )
                    SELECT @PimProductId,
                           Item,
                           ID AS RowId,
                           @UserId,
                           @GetDate,
                           @UserId,
                           @GetDate
                    FROM dbo.Split(@AssociatedProduct, ',') AS b
                         INNER JOIN ZNodePimProduct AS q ON(q.PimProductId = b.Item)
						 WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimProductTypeAssociation PPT
						 WHERE PPT.PimParentProductId = @PimProductId AND PPT.PimProductId = b.Item)


             SET @ConfigureAttributeId =
             (
                 SELECT MAX(ConfigureAttributeIds)
                 FROM ##PimProductData AS a
             );
             SET @ConfigureFamilyId =
             (
                 SELECT MAX(ConfigureFamilyIds)
                 FROM ##PimProductData AS a
             );
             INSERT INTO [ZnodePimConfigureProductAttribute]
             (PimProductId,
              PimFamilyId,
              PimAttributeId,
              CreatedBy,
              CreatedDate,
              ModifiedBy,
              ModifiedDate
             )
                    SELECT @PimProductId,
                           @ConfigureFamilyId,
                           q.PimAttributeId,
                           @UserId,
                           @GetDate,
                           @UserId,
                           @GetDate
                    FROM dbo.Split(@ConfigureAttributeId, ',') AS b
                         INNER JOIN ZnodePimAttribute AS q ON(q.PimAttributeId = b.Item)
					WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimConfigureProductAttribute RTR  WHERE  RTR.PimProductId = @PimProductId AND RTR.PimAttributeId = q.PimAttributeId);



             IF @IsNotReturnOutput = 0
                 SELECT @PimProductId AS Id,
                        CAST(1 AS BIT) AS Status;
             SET @status = 1;

			 IF @CopyPimProductId > 0 
			 BEGIN 
			   INSERT INTO ZnodePimAttributeValueLocale  (PimAttributeValueId,LocaleId,AttributeValue,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			   SELECT ZPAVI.PimAttributeValueId,ZPAVL.LocaleId,ZPAVL.AttributeValue,@UserId,@GetDate,@UserId,@GetDate
			   FROM ZnodePimAttributeValueLocale ZPAVL 
			   INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId )
			   INNER JOIN ZnodePimAttributeValue ZPAVI ON (ZPAVI.PimAttributeId = ZPAV.PimAttributeId AND ZPAVI.PimProductId = @PimProductId )
			   WHERE ZPAVL.LocaleId <> dbo.Fn_GetDefaultLocaleId()
			   AND ZPAV.PimProductId = @CopyPimProductId

			    INSERT INTO ZnodePimProductAttributeDefaultValue  (PimAttributeValueId,LocaleId,PimAttributeDefaultValueId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			   SELECT ZPAVI.PimAttributeValueId,ZPAVL.LocaleId,ZPAVL.PimAttributeDefaultValueId,@UserId,@GetDate,@UserId,@GetDate
			   FROM ZnodePimProductAttributeDefaultValue ZPAVL 
			   INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId )
			   INNER JOIN ZnodePimAttributeValue ZPAVI ON (ZPAVI.PimAttributeId = ZPAV.PimAttributeId AND ZPAVI.PimProductId = @PimProductId )
			   WHERE ZPAVL.LocaleId <> dbo.Fn_GetDefaultLocaleId()
			   AND ZPAV.PimProductId = @CopyPimProductId


			   INSERT INTO ZnodePimProductAttributeTextAreaValue  (PimAttributeValueId,LocaleId,AttributeValue,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			   SELECT ZPAVI.PimAttributeValueId,ZPAVL.LocaleId,ZPAVL.AttributeValue,@UserId,@GetDate,@UserId,@GetDate
			   FROM ZnodePimProductAttributeTextAreaValue ZPAVL 
			   INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId )
			   INNER JOIN ZnodePimAttributeValue ZPAVI ON (ZPAVI.PimAttributeId = ZPAV.PimAttributeId AND ZPAVI.PimProductId = @PimProductId )
			   WHERE ZPAVL.LocaleId <> dbo.Fn_GetDefaultLocaleId()
			   AND ZPAV.PimProductId = @CopyPimProductId
			   			   
			   INSERT INTO ZnodePimProductAttributeMedia  (PimAttributeValueId,LocaleId,MediaPath,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			   SELECT ZPAVI.PimAttributeValueId,ZPAVL.LocaleId,ZPAVL.MediaPath,@UserId,@GetDate,@UserId,@GetDate
			   FROM ZnodePimProductAttributeMedia ZPAVL 
			   INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId )
			   INNER JOIN ZnodePimAttributeValue ZPAVI ON (ZPAVI.PimAttributeId = ZPAV.PimAttributeId AND ZPAVI.PimProductId = @PimProductId )
			   WHERE ZPAVL.LocaleId <> dbo.Fn_GetDefaultLocaleId()
			   AND ZPAV.PimProductId = @CopyPimProductId
			   
			 END 
			 
			 If Object_id ('Tempdb..##PimProductData')  is not null 
				DROP TABLE Tempdb..##PimProductData

             COMMIT TRAN A;
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE()
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportPartialInsertUpdatePimProduct @UserId = '+CAST(@UserId AS VARCHAR(50))+',@IsNotReturnOutput='+CAST(@IsNotReturnOutput AS VARCHAR(50))+',@CopyPimProductId='+CAST(@CopyPimProductId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
			 ROLLBACK TRAN A;
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_ImportPartialInsertUpdatePimProduct',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;

	 GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportPartialProcessProductData')
BEGIN 
	DROP PROCEDURE Znode_ImportPartialProcessProductData
END
GO
	 
CREATE PROCEDURE [dbo].[Znode_ImportPartialProcessProductData]
(@TblGUID       NVARCHAR(255), 
 @UserId        INT, 
 @IsAutoPublish BIT           = 0
)
AS
    BEGIN

/*
	Summary :   Import PimProduct ( for partial attribute import ) 
	Process :   Read table ##ProductUpdate_GUID table, create import template with columns which is exists  in 
	ZnodePimAttribute table call import which is not dependent on family.
  	                  		  
	SourceColumnName: CSV file column headers
	Unit testing 
	drop table ##ProductUpdate_3 
  
	-- 	Create TABLE ##ProductUpdate_3 (SKU nvarchar(max), ProductName nvarchar(100),ProductType nvarchar(100))
	-- 	insert into ##ProductUpdate_3  Values ('apz231','sdsfd','SimpleProduct')
	-- 	insert into ##ProductUpdate_3  Values ('gr990', 'test','SimpleProduct')
	-- 	insert into ##ProductUpdate_3  Values ('ORRK3456','Test009','SimpleProduct')
	-- 	insert into ##ProductUpdate_3  Values ('hhhhhhh','Test009','dsfsdfsdf')
	-- 	select * from ##ProductUpdate_3
	
	--EXEC [Znode_ImportPartialProcessProductData] @TblGUID = '3', @UserId =2 

	--Select * from View_ManageLinkProductList 
	--select * from ZnodeImportSuccessLog
	--select * from ZnodeImportLog
  
	*/

        BEGIN TRY 
        SET NOCOUNT ON;
        DECLARE @NewuGuId NVARCHAR(255), @SpId BIGINT, @ImportHeadId INT;
        SET @NewuGuId = @TblGUID;-- NEWID()
        DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
        DECLARE @DefaultFamilyId INT= dbo.Fn_GetDefaultPimProductFamilyId();
        DECLARE @LocaleId INT= dbo.Fn_GetDefaultLocaleId();
        DECLARE @TemplateId INT, @Sql NVARCHAR(MAX)= '', @GlobalTableName NVARCHAR(500);
        DECLARE @ImportProcessLogId INT;

		SELECT @TemplateId = ImportTemplateId FROM ZnodeImportTemplate WHERE TemplateName = 'ProductUpdate'

        SET @SpId = @@SPID;
        SET @GlobalTableName = 'tempdb..[##PartialProductDetail' + CONVERT(NVARCHAR(500), @SpId) + ']';
        IF OBJECT_ID(@GlobalTableName, 'U') IS NOT NULL
            BEGIN
                SET @Sql = 'DROP TABLE ' + @GlobalTableName;
                EXEC sp_executesql 
                     @SQL;
        END;
        DECLARE @GlobalTemporaryTable NVARCHAR(255);
        DECLARE @CreateTableScriptSql NVARCHAR(MAX)= '', @InsertColumnName NVARCHAR(MAX), @UpdateTable2Column NVARCHAR(MAX), @UpdateTable3Column NVARCHAR(MAX), @UpdateTable4Column NVARCHAR(MAX), @ImportTableColumnName NVARCHAR(MAX), @ImportTableName VARCHAR(200), @TableName NVARCHAR(255)= 'tempdb..[##ProductUpdate_' + @TblGUID + ']', @Attribute NVARCHAR(MAX);
        DECLARE @Attributecode TABLE(Attrcode NVARCHAR(255));
        CREATE TABLE #Attributecode(Attrcode NVARCHAR(255));
        CREATE TABLE #ConfigurableAttributecode
        (SKU            NVARCHAR(255), 
         PimAttributeId INT, 
         DefaultValue   NVARCHAR(255), 
         AttributeCode  NVARCHAR(255), 
         ParentSKU      NVARCHAR(255)
        );
        SELECT @ImportHeadId = ImportHeadId
        FROM dbo.ZnodeImportHead
        WHERE Name = 'ProductUpdate';

        --DELETE FROM ZnodeImportLog	WHERE ImportProcessLogId IN (SELECT	ImportProcessLogId	FROM ZnodeImportProcessLog ZIPL
        --INNER JOIN ZnodeImportTemplate ZIT ON ZIPL.ImportTemplateId = ZIT.ImportTemplateId WHERE ZIT.TemplateName = 'ProductUpdate')
        --DELETE FROM ZnodeImportProcessLog	WHERE ImportTemplateId IN (SELECT ImportTemplateId FROM ZnodeImportTemplate WHERE TemplateName = 'ProductUpdate')

        DELETE FROM ZnodeImportTemplateMapping
        WHERE ImportTemplateId = @TemplateId
        --DELETE FROM ZnodeImportTemplate
        --WHERE TemplateName = 'ProductUpdate';
		if (isnull(@TemplateId,0) = 0 ) 
		Begin 
        INSERT INTO ZnodeImportTemplate
        (ImportHeadId,TemplateName, TemplateVersion,PimAttributeFamilyId, IsActive,  CreatedBy, 
         CreatedDate, 
         ModifiedBy, 
         ModifiedDate
        )
        VALUES
        (@ImportHeadId, 
         'ProductUpdate', 
         1, 
         NULL, 
         1, 
         2, 
         GETDATE(), 
         2, 
         GETDATE()
        );
        SET @TemplateId = @@Identity;
		END
		
        SET @SQL = '
		INSERT INTO ZnodeImportTemplateMapping ( ImportTemplateId, SourceColumnName, TargetColumnName, DisplayOrder, IsActive, IsAllowNull, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
		select ' + CONVERT(NVARCHAR(100), @TemplateId) + ', a.name, PA.AttributeCode,1,1,1,' + CONVERT(NVARCHAR(100), @UserId) + ' , ''' + CONVERT(NVARCHAR(100), @GetDate) + ''' , ' + CONVERT(NVARCHAR(100), @UserId) + ', ''' + CONVERT(NVARCHAR(100), @GetDate) + '''  
		from tempdb.sys.columns a
		inner join tempdb.sys.tables b on a.object_id = b.object_id 
		inner join ZnodePimAttribute PA on a.name = PA.AttributeCode AND PA.IsCategory =0  
		where b.name in (''##ProductUpdate_' + @TblGUID + ''') ';
        EXEC (@SQL);
        --------------------------------------------


		

        DECLARE @SQLQuery NVARCHAR(MAX);
        IF OBJECT_ID('#WrongData', 'U') IS NOT NULL
            BEGIN
                DROP TABLE #WrongData;
        END;
        CREATE TABLE #WrongData(ColumnName NVARCHAR(100));
        SET @SQLQuery = ' INSERT INTO #WrongData (ColumnName )
		Select a.Name from tempdb.sys.columns a
		inner join tempdb.sys.tables b on a.object_id = b.object_id 
		where b.name in (''##ProductUpdate_' + @TblGUID + ''') 
		and NOT EXISTS (Select TOP 1 1 FROM ZnodePimAttribute PA WHERE a.name = PA.AttributeCode) AND a.Name not in (''SKU'',''guid'') ';
        EXEC sys.sp_sqlexec 
             @SQLQuery;
        SET @ImportProcessLogId = 0;

		
        IF EXISTS
        (
            SELECT TOP 1 1
            FROM #WrongData
        )
            BEGIN
			
                INSERT INTO ZnodeImportProcessLog
                (ImportTemplateId, 
                 STATUS, 
                 ProcessStartedDate, 
                 ProcessCompletedDate, 
                 CreatedBy, 
                 CreatedDate, 
                 ModifiedBy, 
                 ModifiedDate, 
                 ERPTaskSchedulerId
                )
                       SELECT @TemplateId, 
                              dbo.Fn_GetImportStatus(3), 
                              @GetDate, 
                              NULL, 
                              @UserId, 
                              @GetDate, 
                              @UserId, 
                              @GetDate, 
                              NULL;
                SET @ImportProcessLogId = @@IDENTITY;
                SET @SQLQuery = '
			INSERT INTO ZnodeImportLog
					(ErrorDescription,ColumnName,Data,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId,RowNumber )
			Select 19 ,''Attribute '', ColumnName, ''' + @TblGUID + ''',' + CONVERT(NVARCHAR(100), @UserId) + ',''' + CONVERT(NVARCHAR(100), @GetDate) + ''',' + CONVERT(NVARCHAR(100), @UserId) + ',''' + CONVERT(NVARCHAR(100), @GetDate) + ''',' + CONVERT(NVARCHAR(100), @ImportProcessLogId) + ',' + ' NULL  from #WrongData ';
                EXEC sys.sp_sqlexec 
                     @SQLQuery;

                --SELECT	'Job create successfully.'
                --Return 0 

        END;
        --------------------------------------------

        SELECT @InsertColumnName = SUBSTRING(
        (
            SELECT ',[' + [TargetColumnName] + ']'
            FROM [dbo].[ZnodeImportTemplateMapping]
            WHERE [ImportTemplateId] = @TemplateId FOR XML PATH('')
        ), 2, 4000);
	
        SELECT @CreateTableScriptSql = 'CREATE TABLE ' + @GlobalTableName + ' (' + SUBSTRING(
        (
            SELECT ',[' + ISNULL([TargetColumnName], 'NULL') + '] nvarchar(max)'
            FROM [dbo].[ZnodeImportTemplateMapping]
            WHERE [ImportTemplateId] = @TemplateId FOR XML PATH('')
        ), 2, 4000) + ' , GUID nvarchar(255))';
		
        EXEC (@CreateTableScriptSql);
        IF(LEN(@InsertColumnName) > 0)
            BEGIN
                SET @SQL = 'INSERT INTO ' + @GlobalTableName + ' ( ' + @InsertColumnName + ' )	SELECT ' + @InsertColumnName + ' FROM ' + @TableName;
                PRINT @sql;
                EXEC sp_executesql 
                     @SQL;
        END;
		
		
        DECLARE @UpdateTableColumn VARCHAR(MAX);
        SET @Sql = 'UPDATE ' + @GlobalTableName + ' SET GUID= ''' + @NewuGuId + '''';
        EXEC sp_executesql 
             @SQL;
			
        --SET @Sql = 'DELETE FROM ' + @GlobalTableName + '  WHERE ISNULL(SKU, '''') = ''''' 
        --EXEC sp_executesql @SQL

        SET @Sql = 'Update ' + @GlobalTableName + ' SET SKU = Ltrim(Rtrim(SKU)) ';
        EXEC sp_executesql 
             @SQL;

        ---- Import product    
        EXEC Znode_ImportData 
             @TableName = @GlobalTableName, 
             @NewGUID = @TblGUID, 
             @TemplateId = @TemplateId, 
             @UserId = @UserId, 
             @LocaleId = @LocaleId, 
             @DefaultFamilyId = @DefaultFamilyId, 
             @PriceListId = 0, 
             @CountryCode = '',
             --,@IsDoNotCreateJob = 0
             --,@IsDoNotStartJob = 0
             --,@StepName = 'Import'-- 	,@IsDebug = 1  
             @IsAutoPublish = @IsAutoPublish, 
             @ImportProcessLogId = @ImportProcessLogId;
        SELECT 'Job create successfully.';
        END TRY
        BEGIN CATCH 
        DECLARE @Status BIT ;
        select ERROR_MESSAGE ()
        SET @Status = 0;
        DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
        @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportPartialProcessProductData @TblGUID = '''+ISNULL(@TblGUID,'''''')+''',@UserId='+ISNULL(CAST(@UserId AS
        VARCHAR(50)),'''''')+',@IsAutoPublish='+ISNULL(CAST(@IsAutoPublish AS VARCHAR(50)),'''')
        SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
        EXEC Znode_InsertProcedureErrorLog
        @ProcedureName = 'Znode_ImportPartialProcessProductData',
        @ErrorInProcedure = 'Znode_ImportPartialProcessProductData',
        @ErrorMessage = @ErrorMessage,
        @ErrorLine = @ErrorLine,
        @ErrorCall = @ErrorCall;
        END CATCH 

    END;

	GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportSEODetails')
BEGIN 
	DROP PROCEDURE Znode_ImportSEODetails
END
GO	
CREATE PROCEDURE [dbo].[Znode_ImportSEODetails](  
   @TableName nvarchar(100), 
   @Status bit OUT, @UserId int, 
   @ImportProcessLogId int, 
   @NewGUId nvarchar(200), 
   @LocaleId int= 1,
   @PortalId int ,
   @CsvColumnString nvarchar(max))  
AS  
 --------------------------------------------------------------------------------------  
 -- Summary :  Import SEO Details  
   
 -- Unit Testing :   
 --------------------------------------------------------------------------------------  
  
BEGIN  
 BEGIN TRAN A;  
 BEGIN TRY  
   
  DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max);  
  DECLARE @GetDate datetime= dbo.Fn_GetDate();  
    
    
  DECLARE @CMSSEOTypeProduct INT ,@CMSSEOTypeCategory INT  
  
  SELECT @CMSSEOTypeProduct = CMSSEOTypeId FROM ZnodeCMSSEOType WHERE Name = 'Product'  
  SELECT @CMSSEOTypeCategory = CMSSEOTypeId FROM ZnodeCMSSEOType WHERE Name = 'Category'  
  
  
  -- Three type of import required three table varible for product , category and brand  
  DECLARE @InsertSEODetails TABLE  
  (   
   RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, ImportType varchar(20), Code nvarchar(300),   
   IsRedirect bit ,MetaInformation nvarchar(max),PortalId int ,SEOUrl nvarchar(max),IsActive varchar(10),  
   SEOTitle nvarchar(max),SEODescription nvarchar(max),SEOKeywords nvarchar(max),   
   RedirectFrom nvarchar(max),RedirectTo nvarchar(max), EnableRedirection bit,  
   GUID nvarchar(400)  
   --Index Ind_ImportType (ImportType),Index Ind_Code (Code)  
  );  
  
  DECLARE @InsertSEODetailsOFProducts TABLE  
  (   
   RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, ImportType varchar(20), Code nvarchar(300),   
   IsRedirect bit ,MetaInformation nvarchar(max),PortalId int ,SEOUrl nvarchar(max),IsActive varchar(10),  
   SEOTitle nvarchar(max),SEODescription nvarchar(max),SEOKeywords nvarchar(max),  
   RedirectFrom nvarchar(max),RedirectTo nvarchar(max), EnableRedirection bit,   
   GUID nvarchar(400)  
   --Index Ind_ImportType (ImportType),Index Ind_Code (Code)  
  );  
  
  DECLARE @InsertSEODetailsOFCategory TABLE  
  (   
   RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, ImportType varchar(20), Code nvarchar(300),   
   IsRedirect bit ,MetaInformation nvarchar(max),PortalId int ,SEOUrl nvarchar(max),IsActive varchar(10),  
   SEOTitle nvarchar(max),SEODescription nvarchar(max),SEOKeywords nvarchar(max),  
   RedirectFrom nvarchar(max),RedirectTo nvarchar(max), EnableRedirection bit,   
   GUID nvarchar(400)  
   --Index Ind_ImportType (ImportType),Index Ind_Code (Code)  
  );  
  
  DECLARE @InsertSEODetailsOFBrand TABLE  
  (   
   RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, ImportType varchar(20), Code nvarchar(300),   
   IsRedirect bit ,MetaInformation nvarchar(max),PortalId int ,SEOUrl nvarchar(max),IsActive varchar(10),  
   SEOTitle nvarchar(max),SEODescription nvarchar(max),SEOKeywords nvarchar(max),   
   RedirectFrom nvarchar(max),RedirectTo nvarchar(max), EnableRedirection bit,   
   GUID nvarchar(400)  
   --Index Ind_ImportType (ImportType),Index Ind_Code (Code)  
  );  
  
    
  DECLARE @InsertedZnodeCMSSEODetail TABLE  
  (   
   CMSSEODetailId int , SEOCode Varchar(4000), CMSSEOTypeId int  
  );  
    
  --SET @SSQL = 'Select RowNumber,ImportType,Code,IsRedirect,MetaInformation,SEOUrl,IsActive,SEOTitle,SEODescription,SEOKeywords,GUID  FROM '+@TableName;  
  SET @SSQL = 'Select RowNumber,'+@CsvColumnString+',GUID  FROM '+@TableName;  
  
  INSERT INTO @InsertSEODetails(RowNumber,ImportType,Code,IsRedirect,MetaInformation,SEOUrl,IsActive,SEOTitle,SEODescription,SEOKeywords,RedirectFrom,RedirectTo,EnableRedirection,GUID )  
  EXEC sys.sp_sqlexec @SSQL;  
  
  INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
      SELECT '30', 'SEOUrl', SEOUrl, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
      FROM @InsertSEODetails AS ii   
      where ii.SEOURL in (Select ISD.SEOURL from @InsertSEODetails ISD Group by ISD.SEOUrl having count(*) > 1 )   
  
  INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
      SELECT '10', 'SEOUrl', SEOUrl, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
      FROM @InsertSEODetails AS ii   
      where EXISTS (Select TOP 1 1 from ZnodeCMSSEODetail ZCSD WHERE ZCSD.SEOUrl = ii.SEOUrl AND ZCSD.PortalId = @PortalId
	  AND ZCSD.SEOCode <> ii.Code  AND EXISTS  
     (SELECT TOP 1 1 FROM ZnodeCMSSEODetailLocale dl WHERE dl.CMSSEODetailId = ZCSD.CMSSEODetailId AND dl.LocaleId = @LocaleId  
           AND dl.SEODescription = ii.SEODescription AND dl.SEOTitle = ii.SEOTitle AND dl.SEOKeywords = ii.SEOKeywords))   
  
  INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
      SELECT '53', 'RedirectFrom', RedirectFrom, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
      FROM @InsertSEODetails AS ii   
      where ii.RedirectFrom in (Select ISD.RedirectFrom from @InsertSEODetails ISD Group by ISD.RedirectFrom having count(*) > 1 )   
  AND (ii.RedirectFrom <> '' )

  INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
      SELECT '35', 'RedirectFrom\RedirectTo', RedirectFrom + '  ' + RedirectTo  , @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
      FROM @InsertSEODetails AS ii   
      where ii.RedirectFrom = ii.RedirectTo  
	  AND (ii.RedirectFrom <> '' AND ii.RedirectTo <> '' )
  
  INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
      SELECT '35', 'SEOUrl', SEOUrl, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId  
      FROM @InsertSEODetails AS ii  
      WHERE ltrim(rtrim(isnull(ii.SEOUrl,''))) like '% %' -----space not allowed  
  
  INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
      SELECT '19', 'ImportType', ImportType, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
      FROM @InsertSEODetails AS ii  
      WHERE ii.ImportType NOT in   
      (  
       Select NAME from ZnodeCMSSEOType where NAME NOT IN ('Content Page','BlogNews','Brand')  
      );  

  INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
      SELECT '35', 'IsActive', IsActive, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
      FROM @InsertSEODetails AS ii  
      WHERE ii.IsActive not in ('True','1','Yes','FALSE','0','No')
  

  UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ SEOCode - ' + ISNULL(Code,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN @InsertSEODetails IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL


  
  DELETE FROM @InsertSEODetails  
  WHERE RowNumber IN  
  (  
   SELECT DISTINCT   
       RowNumber  
   FROM ZnodeImportLog  
   WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null   
   --AND GUID = @NewGUID  
  );  
    
   
  
-------------------------------------------------------------------------------------------------------------------------------  
  
  INSERT INTO @InsertSEODetailsOFProducts(  RowNumber , ImportType , Code ,   
   IsRedirect ,MetaInformation ,SEOUrl ,IsActive ,  
   SEOTitle ,SEODescription ,SEOKeywords, RedirectFrom, RedirectTo,EnableRedirection, GUID )  
   SELECT RowNumber , ImportType , Code , IsRedirect ,MetaInformation ,SEOUrl , 
      CASE WHEN IsActive in ('True','1','Yes') 
	       Then 1 
           ELSE 0
      END as IsActive, SEOTitle ,SEODescription ,SEOKeywords, RedirectFrom, RedirectTo,EnableRedirection, GUID  
   FROM @InsertSEODetails WHERE ImportType = 'Product'  
  
  
  INSERT INTO @InsertSEODetailsOFCategory( RowNumber , ImportType , Code ,   
   IsRedirect ,MetaInformation,SEOUrl ,IsActive ,  
   SEOTitle ,SEODescription ,SEOKeywords, RedirectFrom, RedirectTo,EnableRedirection , GUID )  
   SELECT RowNumber , ImportType , Code , IsRedirect ,MetaInformation ,SEOUrl , 
	   CASE WHEN IsActive in ('True','1','Yes') 
			Then 1 
			ELSE 0
	   END as IsActive, SEOTitle ,SEODescription ,SEOKeywords, RedirectFrom, RedirectTo,EnableRedirection, GUID  
   FROM @InsertSEODetails WHERE ImportType = 'Category'  
  
  INSERT INTO @InsertSEODetailsOFBrand( RowNumber , ImportType , Code ,   
   IsRedirect ,MetaInformation ,SEOUrl ,IsActive ,  
   SEOTitle ,SEODescription ,SEOKeywords, RedirectFrom, RedirectTo,EnableRedirection , GUID )  
   SELECT RowNumber , ImportType , Code , IsRedirect ,MetaInformation ,SEOUrl ,
		CASE WHEN IsActive in ('True','1','Yes') 
			Then 1 
			ELSE 0
	    END as IsActive, SEOTitle ,SEODescription ,SEOKeywords, RedirectFrom, RedirectTo,EnableRedirection, GUID  
   FROM @InsertSEODetails WHERE ImportType = 'Brand'  
  
  
     -- start Functional Validation   
  --1. Product  
  --2. Category  
  --3. Content Page  
  --4. Brand  
  -----------------------------------------------  
  
    
  INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
      SELECT '19', 'SKU', CODE, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
      FROM @InsertSEODetailsOFProducts AS ii  
      WHERE ii.CODE NOT in   
      (  
     SELECT ZPAVL.AttributeValue  
     FROM ZnodePimAttributeValue ZPAV   
     inner join ZnodePimAttributeValueLocale ZPAVL ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId  
     inner join ZnodePimAttribute ZPA on ZPAV.PimAttributeId = ZPA.PimAttributeId  
     Where ZPA.AttributeCode = 'SKU' AND ZPAVL.AttributeValue IS NOT NULL   
      )  AND ImportType = 'Product';  
  
  
    
  INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
      SELECT '19', 'Category', CODE, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
      FROM @InsertSEODetailsOFCategory AS ii  
      WHERE ii.CODE NOT in   
      (  
     SELECT ZPCAVL.CategoryValue  
     FROM ZnodePimCategoryAttributeValue ZPCAV   
     INNER JOIN ZnodePimCategoryAttributeValueLocale ZPCAVL on ZPCAV.PimCategoryAttributeValueId = ZPCAVL.PimCategoryAttributeValueId  
     INNER JOIN ZnodePimAttribute ZPA on ZPCAV.PimAttributeId = ZPA.PimAttributeId  
     Where ZPA.AttributeCode = 'CategoryCode' AND ZPCAVL.CategoryValue IS NOT NULL  
      )  AND ImportType = 'Category';  
  
  INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
      SELECT '19', 'Brand', CODE, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
      FROM @InsertSEODetailsOFBrand AS ii  
      WHERE ii.CODE NOT in   
      (  
       Select BrandCode from ZnodeBrandDetails WHERE BrandCode IS NOT NULL  
      )  AND ImportType = 'Brand';  
    
    -- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM @InsertSEODetails
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount , 
		TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
		WHERE ImportProcessLogId = @ImportProcessLogId;
	

  --Note : Content page import is not required   
    
  -- End Function Validation    
  -----------------------------------------------  
  --- Delete Invalid Data after functional validatin    
  
  DELETE FROM @InsertSEODetailsOFProducts  
  WHERE RowNumber IN  
  (  
   SELECT DISTINCT   
       RowNumber  
   FROM ZnodeImportLog  
   WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null   
   --AND GUID = @NewGUID  
  );  
  
  DELETE FROM @InsertSEODetailsOFCategory  
  WHERE RowNumber IN  
  (  
   SELECT DISTINCT   
       RowNumber  
   FROM ZnodeImportLog  
   WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null   
   --AND GUID = @NewGUID  
  );  
  
  DELETE FROM @InsertSEODetailsOFBrand  
  WHERE RowNumber IN  
  (  
   SELECT DISTINCT   
       RowNumber  
   FROM ZnodeImportLog  
   WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null   
   --AND GUID = @NewGUID  
  );  
  
   
  -- Insert Product Data   
  If Exists (Select top 1 1 from @InsertSEODetailsOFProducts)  
  Begin  
   Update ZCSD SET ZCSD.IsRedirect = ISD.IsRedirect ,  
         ZCSD.MetaInformation =  ISD.MetaInformation,  
         ZCSD.SEOUrl=  ISD.SEOUrl,  
         ZCSD.IsPublish = 0  
   FROM   
   @InsertSEODetailsOFProducts ISD    
   INNER JOIN ZnodeCMSSEODetail ZCSD ON  ZCSD.CMSSEOTypeId = @CMSSEOTypeProduct AND ZCSD.SEOCode = ISD.Code  
   INNER JOIN ZnodeCMSSEODetailLocale ZCSDL ON ZCSD.CMSSEODetailId = ZCSDL.CMSSEODetailId  
   where  ZCSD.PortalId  =@PortalId  AND ZCSDL.LocaleId = @LocaleId;  
     
   Update ZCSDL SET ZCSDL.SEOTitle = ISD.SEOTitle  
       ,ZCSDL.SEODescription = ISD.SEODescription  
       ,ZCSDL.SEOKeywords= ISD.SEOKeywords  
    FROM   
   @InsertSEODetailsOFProducts ISD    
   INNER JOIN ZnodeCMSSEODetail ZCSD ON  ZCSD.CMSSEOTypeId = @CMSSEOTypeProduct AND ZCSD.SEOCode = ISD.Code  
   INNER JOIN ZnodeCMSSEODetailLocale ZCSDL ON ZCSD.CMSSEODetailId = ZCSDL.CMSSEODetailId  
   where  ZCSD.PortalId = @PortalId AND ZCSDL.LocaleId = @LocaleId;   
  
     
   insert into ZnodeCMSSEODetailLocale (CMSSEODetailId,LocaleId,SEOTitle,SEODescription,SEOKeywords,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)  
   SELECT distinct CSD.CMSSEODetailId,@LocaleId,ISD.SEOTitle,ISD.SEODescription,ISD.SEOKeywords,@USerId, @GetDate,@USerId, @GetDate  
   FROM ZnodeCMSSEODetail CSD  
   INNER JOIN @InsertSEODetailsOFProducts ISD ON CSD.SEOCode = ISD.Code AND CSD.CMSSEOTypeId = @CMSSEOTypeProduct AND CSD.SEOUrl = ISD.SEOUrl  
   WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSSEODetailLocale CSDL WHERE CSDL.LocaleId = @LocaleId AND CSD.CMSSEODetailId = CSDL.CMSSEODetailId )  
   AND CSD.portalId = @PortalId  
  
     
   Delete from @InsertedZnodeCMSSEODetail  
  
   IF NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSSEODetail SD INNER JOIN @InsertSEODetailsOFProducts DP ON SD.SEOCode = DP.Code AND SD.PortalId =  @PortalId  
                        AND  SD.CMSSEOTypeId = @CMSSEOTypeProduct)  
   BEGIN  
   INSERT INTO ZnodeCMSSEODetail(CMSSEOTypeId,SEOCode,IsRedirect,MetaInformation,PortalId,SEOUrl,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)    
   OUTPUT Inserted.CMSSEODetailId,Inserted.SEOCode,Inserted.CMSSEOTypeId INTO @InsertedZnodeCMSSEODetail    
   Select Distinct @CMSSEOTypeProduct,ISD.Code , ISD.IsRedirect,ISD.MetaInformation,@PortalId,ISD.SEOUrl,@USerId, @GetDate,@USerId, @GetDate from   
   @InsertSEODetailsOFProducts ISD    
   where NOT EXISTS (Select TOP 1 1 from ZnodeCMSSEODetail ZCSD where ZCSD.CMSSEOTypeId = @CMSSEOTypeProduct AND ZCSD.SEOCode = ISD.Code and  ZCSD.PortalId =@PortalId   );  
    
         insert into ZnodeCMSSEODetailLocale(CMSSEODetailId,LocaleId,SEOTitle,SEODescription,SEOKeywords,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)  
   Select Distinct IZCSD.CMSSEODetailId,@LocaleId,ISD.SEOTitle,ISD.SEODescription,ISD.SEOKeywords,@USerId, @GetDate,@USerId, @GetDate   
   from @InsertedZnodeCMSSEODetail IZCSD   
   INNER JOIN @InsertSEODetailsOFProducts ISD ON IZCSD.SEOCode = ISD.Code   
  
   END  
     
  
   -----RedirectUrlInsert  
  -- INSERT INTO ZnodeCMSUrlRedirect ( RedirectFrom,RedirectTo,IsActive,PortalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)  
  -- select RedirectFrom,RedirectTo,EnableRedirection,@PortalId as PortalId ,@USerId as CreatedBy,@GetDate as CreatedDate,@USerId as ModifiedBy,@GetDate as ModifiedDate  
  -- from @InsertSEODetailsOFProducts  
  -- where IsRedirect = 1  
  --END  
  
  
     INSERT INTO ZnodeCMSUrlRedirect ( RedirectFrom,RedirectTo,IsActive,PortalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)  
   select RedirectFrom,RedirectTo,EnableRedirection 
 ,@PortalId as PortalId ,@USerId as CreatedBy,@GetDate as CreatedDate,@USerId as ModifiedBy,@GetDate as ModifiedDate  
   from @InsertSEODetailsOFProducts  SDP
   where IsRedirect = 1  
   AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSUrlRedirect ZCR 
								  WHERE ZCR.RedirectFrom = SDP.RedirectFrom AND ZCR.RedirectTo = SDP.RedirectTo)
   AND (SDP.RedirectFrom <> '' AND SDP.RedirectTo <> '' )
  END  
  
  -- Insert Category Data   
  If Exists (Select top 1 1 from @InsertSEODetailsOFCategory)  
  Begin  
  
   Update ZCSD SET ZCSD.IsRedirect = ISD.IsRedirect ,  
         ZCSD.MetaInformation =  ISD.MetaInformation,  
         ZCSD.SEOUrl=  ISD.SEOUrl,  
         ZCSD.IsPublish = 0  
   FROM   
   @InsertSEODetailsOFCategory ISD    
   INNER JOIN ZnodeCMSSEODetail ZCSD ON  ZCSD.CMSSEOTypeId = @CMSSEOTypeCategory AND ZCSD.SEOCode = ISD.Code  
   INNER JOIN ZnodeCMSSEODetailLocale ZCSDL ON ZCSD.CMSSEODetailId = ZCSDL.CMSSEODetailId  
   where  ZCSD.PortalId  =@PortalId  AND ZCSDL.LocaleId = @LocaleId;  
     
     
   Update ZCSDL SET ZCSDL.SEOTitle = ISD.SEOTitle  
       ,ZCSDL.SEODescription = ISD.SEODescription  
       ,ZCSDL.SEOKeywords= ISD.SEOKeywords  
    FROM   
   @InsertSEODetailsOFCategory ISD    
   INNER JOIN ZnodeCMSSEODetail ZCSD ON  ZCSD.CMSSEOTypeId = @CMSSEOTypeCategory AND ZCSD.SEOCode = ISD.Code  
   INNER JOIN ZnodeCMSSEODetailLocale ZCSDL ON ZCSD.CMSSEODetailId = ZCSDL.CMSSEODetailId  
   where  ZCSD.PortalId  =@PortalId AND ZCSDL.LocaleId = @LocaleId;   
  
   insert into ZnodeCMSSEODetailLocale (CMSSEODetailId,LocaleId,SEOTitle,SEODescription,SEOKeywords,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)  
   SELECT distinct CSD.CMSSEODetailId,@LocaleId,ISD.SEOTitle,ISD.SEODescription,ISD.SEOKeywords,@USerId, @GetDate,@USerId, @GetDate  
   FROM ZnodeCMSSEODetail CSD  
   INNER JOIN @InsertSEODetailsOFProducts ISD ON CSD.SEOCode = ISD.Code AND CSD.CMSSEOTypeId = @CMSSEOTypeCategory AND CSD.SEOUrl = ISD.SEOUrl  
   WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSSEODetailLocale CSDL WHERE CSDL.LocaleId = @LocaleId AND CSD.CMSSEODetailId = CSDL.CMSSEODetailId )  
   AND CSD.portalId = @PortalId  
  
  
   Delete from @InsertedZnodeCMSSEODetail  
  
   IF NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSSEODetail SD INNER JOIN @InsertSEODetailsOFProducts DP ON SD.SEOCode = DP.Code AND SD.PortalId =  @PortalId  
                        AND  SD.CMSSEOTypeId = @CMSSEOTypeCategory)  
   BEGIN  
   INSERT INTO ZnodeCMSSEODetail(CMSSEOTypeId,SEOCode,IsRedirect,MetaInformation,PortalId,SEOUrl,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)    
   OUTPUT Inserted.CMSSEODetailId,Inserted.SEOCode,Inserted.CMSSEOTypeId INTO @InsertedZnodeCMSSEODetail    
   Select Distinct @CMSSEOTypeCategory,ISD.Code , ISD.IsRedirect,ISD.MetaInformation,@PortalId,ISD.SEOUrl,@USerId, @GetDate,@USerId, @GetDate   
   from @InsertSEODetailsOFCategory ISD    
   where NOT EXISTS (Select TOP 1 1 from ZnodeCMSSEODetail ZCSD where ZCSD.CMSSEOTypeId = @CMSSEOTypeCategory AND ZCSD.SEOCode  = ISD.Code AND ZCSD.PortalId = @PortalId );  
  
   insert into ZnodeCMSSEODetailLocale(CMSSEODetailId,LocaleId,SEOTitle,SEODescription,SEOKeywords,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)  
   Select Distinct IZCSD.CMSSEODetailId,@LocaleId,ISD.SEOTitle,ISD.SEODescription,ISD.SEOKeywords,@USerId, @GetDate,@USerId, @GetDate   
   from @InsertedZnodeCMSSEODetail IZCSD   
   INNER JOIN @InsertSEODetailsOFCategory ISD ON IZCSD.SEOCode = ISD.Code   
   WHERE IZCSD.CMSSEOTypeId =@CMSSEOTypeCategory    
   END  
  
   -----RedirectUrlInsert  
   INSERT INTO ZnodeCMSUrlRedirect ( RedirectFrom,RedirectTo,IsActive,PortalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)  
   SELECT RedirectFrom,RedirectTo,
   EnableRedirection,@PortalId as PortalId ,2 as CreatedBy,@GetDate as CreatedDate,2 as ModifiedBy,@GetDate as ModifiedDate  
   FROM @InsertSEODetailsOFProducts SDP  
   WHERE IsRedirect = 1 
   --AND (SDP.RedirectFrom <> '' AND SDP.RedirectTo <> '' ) 
   AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSUrlRedirect ZCR 
								  WHERE ZCR.RedirectFrom = SDP.RedirectFrom AND ZCR.RedirectTo = SDP.RedirectTo)
   AND (SDP.RedirectFrom <> '' AND SDP.RedirectTo <> '' )
   --AND ((SDP.RedirectFrom <> '' OR SDP.RedirectFrom IS NOT NULL )
   --OR ( SDP.RedirectTo <> '' OR SDP.RedirectTo IS NOT NULL ))
  END  
             
  --select 'End'  
  --      SET @Status = 1;  
  UPDATE ZnodeImportProcessLog  
    SET Status = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = @GetDate  
  WHERE ImportProcessLogId = @ImportProcessLogId;  
  
  COMMIT TRAN A;  
 END TRY  
 BEGIN CATCH  
  
  UPDATE ZnodeImportProcessLog  
    SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate  
  WHERE ImportProcessLogId = @ImportProcessLogId;  
  
  SET @Status = 0;  
  SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();  
  ROLLBACK TRAN A;  
 END CATCH;  
END;

GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishAssociatedAddons')
BEGIN 
	DROP PROCEDURE Znode_GetPublishAssociatedAddons
END
GO
CREATE  PROCEDURE [dbo].[Znode_GetPublishAssociatedAddons](@PublishCatalogId NVARCHAR(MAX) = 0,
                                                         @PimProductId    TransferId Readonly,
                                                         @VersionId        INT           = 0,
                                                         @UserId           INT,														 
														 @PimCategoryHierarchyId int = 0, 
														 @LocaleId       TransferId READONLY,
														 @PublishStateId INT = 0 
														   )
AS 
   
/*
    Summary : If PimcatalogId is provided get all products with Addons and provide above mentioned data
              If PimProductId is provided get all Addons if associated with given product id and provide above mentioned data
    			Input: @PublishCatalogId or @PimProductId
    		    output should be in XML format
              sample xml5
              <AddonEntity>
              <ZnodeProductId></ZnodeProductId>
              <ZnodeCatalogId></ZnodeCatalogId>
              <AddonGroupName></AddonGroupName>
              <TempAsscociadedZnodeProductIds></TempAsscociadedZnodeProductIds>
              </AddonEntity>
    <AddonEntity>
      <ZnodeProductId>6</ZnodeProductId>
      <ZnodeCatalogId>2</ZnodeCatalogId>
      <AddonGroupName>RadioButton</AddonGroupName>
      <TempAsscociadedZnodeProductIds>53,54,55,56,57,82</TempAsscociadedZnodeProductIds>
      <ZnodeProductId>14</ZnodeProductId>
      <ZnodeCatalogId>2</ZnodeCatalogId>
      <AddonGroupName>RadioButton</AddonGroupName>
      <TempAsscociadedZnodeProductIds>6,7</TempAsscociadedZnodeProductIds>
      <ZnodeProductId>16</ZnodeProductId>
      <ZnodeCatalogId>2</ZnodeCatalogId>
      <AddonGroupName>RadioButton</AddonGroupName>
      <TempAsscociadedZnodeProductIds>7,14,54,6</TempAsscociadedZnodeProductIds>
    </AddonEntity>
    Unit Testing 
     SELECT * FROM ZnodePublishcatalog
	begin tran
     EXEC [dbo].[Znode_GetPublishAssociatedAddons] @PublishCatalogId = '3',@userId= 2  ,@PimProductId=  '29' ,@UserId=2
	rollback tran
     EXEC [dbo].[Znode_GetPublishAssociatedAddons] @PublishCatalogId = 3 ,@PimProductId=  '' ,@UserId=2
     EXEC [dbo].[Znode_GetPublishAssociatedAddons] @PublishCatalogId =null ,@PimProductId=  6   

	DECLARE	@return_value int

	EXEC	@return_value = [dbo].[Znode_GetPublishAssociatedAddons]
	@PublishCatalogId = 3,
	@UserId = 2,
	@PimCategoryHierarchyId = 125

	SELECT	'Return Value' = @return_value


   
	*/

     BEGIN
        -- BEGIN TRANSACTION GetPublishAssociatedAddons;
         BEGIN TRY
          SET NOCOUNT ON 
			 DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
             DECLARE @LocaleIdIn INT, @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId()
			 , @Counter INT= 1
			 , @MaxRowId INT= 0;

            -- DECLARE @PimAddOnGroupId VARCHAR(MAX);

			 CREATE TABLE #TBL_PublisshIds  (PublishProductId INT , PimProductId INT , PublishCatalogId INT)

             DECLARE @TBL_LocaleId TABLE
             (RowId    INT IDENTITY(1, 1),
              LocaleId INT
             );


			 IF  @PublishCatalogId IS NULL  OR @PublishCatalogId = 0 
			 BEGIN 
			 		 
			   INSERT INTO #TBL_PublisshIds 
			   EXEC [dbo].[Znode_InsertPublishProductIds] @PublishCatalogId,@userid,@PimProductId,1
			   
			  -- SET @PimProductId = SUBSTRING((SELECT DISTINCT ','+CAST(PimProductId AS VARCHAr(50)) FROM #TBL_PublisshIds FOR XML PATH ('')),2,8000 )

			  -- SELECT 	@PimProductId	
			 END 
			 IF  ISnull(@PimCategoryHierarchyId,0) <> 0 
			 BEGIN 
			 		 
			   INSERT INTO #TBL_PublisshIds 
			   EXEC [dbo].[Znode_InsertPublishProductIds] @PublishCatalogId,@userid,@PimProductId,1,@PimCategoryHierarchyId 

			
			  -- SET @PimProductId = SUBSTRING((SELECT DISTINCT ','+CAST(PimProductId AS VARCHAr(50)) FROM #TBL_PublisshIds FOR XML PATH ('')),2,8000 )

			  -- SELECT 	@PimProductId	
			 END 
			
			
			--SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,CASE WHEN 0 = 0 OR 0 IS NULL THEN  MAX(PublishCatalogLogId) ELSE 0 END 
			--FROM ZnodePublishProduct ZPP 
			--INNEr JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
			--       WHERE zpp.PublishProductId  IN (218,214)
			--          GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId
			 CREATE TABLE #TBL_PublishCatalogId (PublishCatalogId INT,PublishProductId INT,PimProductId  INT , VersionId INT ,LocaleId INT  );

			 IF  ISnull(@PimCategoryHierarchyId,0) <> 0 
			 BEGIN 
				 INSERT INTO #TBL_PublishCatalogId 
				 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId, MAX(ZPCP.PublishCatalogLogId)  ,LocaleId 
				 FROM ZnodePublishProduct ZPP 
				 INNER JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
				 WHERE EXISTS (SELECT TOP 1 1 FROM #TBL_PublisshIds SP WHERE SP.PublishProductId = ZPP.PublishProductId   ) 
				 AND ZPCP.Publishstateid = @PublishStateId
				 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,LocaleId 
			 END 
			 ELSE 
			 Begin
				 BEGIN 
				 INSERT INTO #TBL_PublishCatalogId  
				 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,MAX(PublishCatalogLogId)  ,LocaleId 
				 FROM ZnodePublishProduct ZPP INNER JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
				 WHERE (EXISTS (SELECT TOP 1 1 FROM #TBL_PublisshIds SP WHERE SP.PublishProductId = ZPP.PublishProductId  AND  @PublishCatalogId = '0' ) 
				 OR (ZPP.PublishCatalogId =  @PublishCatalogId ))
				 AND CASE WHEN NOT EXISTS (SELECT TOP 1 1 FROM @PimProductId ) AND @PublishCatalogId <> 0   THEN  @PublishStateId ELSE  ZPCP.Publishstateid END  = @PublishStateId
				 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,LocaleId 
			 END 

			 End
			
             DECLARE @TBL_AddonGroupLocale TABLE
             (PimAddonGroupId INT,
              DisplayType     NVARCHAR(400),
              AddonGroupName  NVARCHAR(MAX),
			  LocaleId INT 
             );
           
             INSERT INTO @TBL_LocaleId(LocaleId)
                    SELECT LocaleId
                    FROM ZnodeLocale MT 
                    WHERE IsActive = 1
					AND (EXISTS (SELECT TOP 1 1  FROM @LocaleId RT WHERE RT.Id = MT.LocaleId )
					OR NOT EXISTS (SELECT TOP 1 1 FROM @LocaleId ));

          
             SET @MaxRowId = ISNULL(
                                   (
                                       SELECT MAX(RowId)
                                       FROM @TBL_LocaleId
                                   ), 0);
    
             WHILE @Counter <= @MaxRowId
                 BEGIN
                     SET @LocaleIdIn =
                     (
                         SELECT LocaleId
                         FROM @TBL_LocaleId
                         WHERE RowId = @Counter
                     );
                     INSERT INTO @TBL_AddonGroupLocale
                     (PimAddonGroupId,
                      DisplayType,
                      AddonGroupName					  
                     )
                     EXEC Znode_GetAddOnGroupLocale
                          '',
                          @LocaleIdIn;

					UPDATE @TBL_AddonGroupLocale SET LocaleId = @LocaleIdIn WHERE LocaleId IS NULL 

                    SET @Counter = @Counter + 1;
                 END;
				     
				 IF  @PublishCatalogId IS NULL  OR @PublishCatalogId = 0 
			     BEGIN 
			 		 
			         DELETE FROM ZnodePublishedXML WHERE IsAddOnXML =1  
					 AND EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId TBLV WHERE ZnodePublishedXML.PublishedId = TBLV.PublishProductId   AND ZnodePublishedXML.PublishCatalogLogId = TBLV.VersionId )
			    
			  
				 END 
				 ELSE 
				 BEGIN 
					
					 --SET @versionid  =(SELECT TOP 1 VersionId FROM #TBL_PublishCatalogId TBLV )

					 --DELETE FROM ZnodePublishedXML WHERE IsAddOnXML =1 
					 --AND PublishCatalogLogId  = @versionid 

					 ;WITH CTE_AddOnXML as
						 (
							 SELECT ZPPP.PublishProductId,ZPPP.PublishCatalogId,ZPPD.LocaleId,ZPPP.VersionId, ZPP.PublishProductId as AssociatedZnodeProductId  				 
							 FROM [ZnodePimAddOnProductDetail] AS ZPOPD
							 INNER JOIN [ZnodePimAddOnProduct] AS ZPAOP ON ZPOPD.[PimAddOnProductId] = ZPAOP.[PimAddOnProductId]
							 INNER JOIN #TBL_PublishCatalogId ZPPP ON (ZPPP.PimProductId = ZPAOP.PimProductId )
							 INNER JOIN #TBL_PublishCatalogId ZPP ON(ZPP.PimProductId = ZPOPD.[PimChildProductId] AND ZPP.PublishCatalogId = ZPPP.PublishCatalogId and ZPPP.LocaleId  = ZPP.LocaleId )
							 INNER JOIN ZnodePublishProductDetail ZPPD ON (ZPPD.PublishProductId = ZPPP.PublishProductId)
							 INNER JOIN @TBL_AddonGroupLocale TBAG ON (TBAG.PimAddonGroupId   = ZPAOP.PimAddonGroupId AND TBAG.LocaleId = ZPPD.LocaleId )
							 WHERE  ZPP.LocaleId = ZPPD.LocaleId AND ZPPP.LocaleId =  ZPPD.LocaleId 
						)
						,CTE_PublishedXML as
						(
							SELECT ZPX.PublishCatalogLogId,ZPX.PublishedId,ZPX.IsAddonXML, p.value('(./AssociatedZnodeProductId)[1]', 'INT')  as AssociatedZnodeProductId, p.value('(./LocaleId)[1]', 'INT') as LocaleId1
							FROM ZnodePublishedXML ZPX
							CROSS APPLY ZPX.PublishedXML.nodes('/AddonEntity') t(p)
							where ZPX.IsAddonXML = 1
						)
						DELETE ZPXML  
						FROM ZnodePublishedXML ZPXML
						INNER JOIN CTE_PublishedXML CPX	ON ZPXML.PublishCatalogLogId = CPX.PublishCatalogLogId AND ZPXML.PublishedId = CPX.PublishedId AND ZPXML.IsAddonXML = CPX.IsAddonXML		
						INNER JOIN CTE_AddOnXML CAX on --CPX.PublishCatalogLogId = CAX.VersionId AND
							 CPX.PublishedId = CAX.PublishProductId
							AND ZPXML.IsAddonXML = 1 
							AND CPX.LocaleId1 = CAX.LocaleId 
							AND CPX.AssociatedZnodeProductId = CAX.AssociatedZnodeProductId
				 END 
			
					--SELECT * FROM #TBL_PublishCatalogId

					DELETE FROM ZnodePublishedXml WHERE PublishCatalogLogId IN (SELECT VersionId 
					FROM #TBL_PublishCatalogId ) AND IsAddOnXML = 1 


					 MERGE INTO ZnodePublishedXML TARGET 
					 USING (
					 SELECT   ZPPP.PublishProductId,ZPPP.PublishCatalogId,ZPPD.LocaleId,ZPPP.VersionId,'<AddonEntity><VersionId>'+CAST(ZPPP.VersionId AS VARCHAR(50))+'</VersionId><ZnodeProductId>'+CAST(ZPPP.[PublishProductId] AS VARCHAR(50))+'</ZnodeProductId><ZnodeCatalogId>'
				     +CAST(ZPPP.[PublishCatalogId] AS VARCHAR(50))+'</ZnodeCatalogId><AssociatedZnodeProductId>'+CAST(ZPP.PublishProductId  AS VARCHAR(50))
					 +'</AssociatedZnodeProductId><DisplayOrder>'+CAST( ISNULL(ZPAOP.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder><AssociatedProductDisplayOrder>'
					 +CAST(ISNULL(ZPOPD.DisplayOrder,'') AS VARCHAR(50))+'</AssociatedProductDisplayOrder><RequiredType>'+ISNULL(RequiredType,'')+'</RequiredType><DisplayType>'
					 + ISNULL(DisplayType,'')+'</DisplayType><GroupName>'+ISNULL((select ''+AddonGroupName for xml path('')),'')+'</GroupName><LocaleId>'+CAST(ZPPD.LocaleId AS VARCHAR(50))+'</LocaleId><IsDefault>'+CAST(ISNULL(IsDefault,0) AS VARCHAR(50))+'</IsDefault></AddonEntity>'  ReturnXML		   
				 
                      FROM [ZnodePimAddOnProductDetail] AS ZPOPD
                           INNER JOIN [ZnodePimAddOnProduct] AS ZPAOP ON ZPOPD.[PimAddOnProductId] = ZPAOP.[PimAddOnProductId]
						    INNER JOIN #TBL_PublishCatalogId ZPPP ON (ZPPP.PimProductId = ZPAOP.PimProductId )
                           INNER JOIN #TBL_PublishCatalogId ZPP ON(ZPP.PimProductId = ZPOPD.[PimChildProductId] AND ZPP.PublishCatalogId = ZPPP.PublishCatalogId )
						   INNER JOIN ZnodePublishProductDetail ZPPD ON (ZPPD.PublishProductId = ZPPP.PublishProductId)
						   INNER JOIN @TBL_AddonGroupLocale TBAG ON (TBAG.PimAddonGroupId   = ZPAOP.PimAddonGroupId AND TBAG.LocaleId = ZPPD.LocaleId )
						   WHERE  ZPP.LocaleId = ZPPD.LocaleId AND ZPPP.LocaleId =  ZPPD.LocaleId 
					) SOURCE 
					ON (
						 TARGET.PublishCatalogLogId = SOURCE.VersionId 
						 AND TARGET.PublishedId = SOURCE.PublishProductId
						 AND TARGET.IsAddonXML = 1 
						 AND TARGET.LocaleId = SOURCE.LocaleId 
					)
					WHEN MATCHED THEN 
					UPDATE 
					SET  PublishedXML = ReturnXML
					   , ModifiedBy = @userId 
					   ,ModifiedDate = @GetDate
					WHEN NOT MATCHED THEN 
					INSERT (PublishCatalogLogId
					,PublishedId
					,PublishedXML
					,IsAddonXML
					,LocaleId
					,CreatedBy
					,CreatedDate
					,ModifiedBy
					,ModifiedDate)
					
					VALUES (Source.VersionId , Source.publishProductid,Source.ReturnXML,1,SOURCE.localeid,@userId,@getDate,@userId,@getDate);
					
					
					SELECT Cast(PublishedXML as xml) ReturnXML
					FROM #TBL_PublishCatalogId TBLPP 
					INNER JOIN ZnodePublishedXML ZPX ON (ZPX.PublishCatalogLogId = TBLPP.VersionId AND ZPX.PublishedId = TBLPP.publishProductid )
					WHERE ZPX.IsAddonXML = 1
             --SELECT ReturnXML
             --FROM @TBL_AddonXML;
		
           --  COMMIT TRANSACTION GetPublishAssociatedAddons;
         END TRY
         BEGIN CATCH
		     SELECT ERROR_MESSAGE(),ERROR_PROCEDURE()
             DECLARE @Status BIT;
             SET @Status = 0;
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPublishAssociatedAddons @PublishCatalogId = '+@PublishCatalogId+',@VersionId='+CAST(@VersionId AS VARCHAR(50))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
             SELECT 0 AS ID,
                    CAST(0 AS BIT) AS Status;
           --  ROLLBACK TRANSACTION GetPublishAssociatedAddons;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_GetPublishAssociatedAddons',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishAssociatedProducts')
BEGIN 
	DROP PROCEDURE Znode_GetPublishAssociatedProducts
END
GO
CREATE PROCEDURE [dbo].[Znode_GetPublishAssociatedProducts]
(   
	@PublishCatalogId VARCHAR(MAX) = '',
    @PimProductId     TransferId Readonly,
    @ProductType      VARCHAR(300) = 'BundleProduct',
    @VersionId        INT          = 0,
    @UserId           INT,
	@PimCategoryHierarchyId int = 0,
	@PublishStateId INT = 0  
)
AS
  /*
    Summary : If PimcatalogId is provided then get all  Bundles / Group / Configurable product and  provide above mentioned data
              If PimProductId is provided then get all Bundles / Group / Configurable if associated with given product id and provide above mentioned data
    		 Input: @PublishCatalogId or @PimProductId
    		 Output should be in XML format
             Required o/p
    			<BundleProductEntity>
    			<ZnodeProductId></ZnodeProductId>
    			<ZnodeCatalogId></ZnodeCatalogId>
    			<AsscociadedZnodeProductIds></AsscociadedZnodeProductIds>
    			</BundleProductEntity>
    Unit Testing 
    BundleProduct
	DECLARE 
    EXEC [dbo].[Znode_GetPublishAssociatedProducts] @PublishCatalogId = 1  , @ProductType = 'BundleProduct' ,@userId = 2 
    EXEC [dbo].[Znode_GetPublishAssociatedProducts] @PublishCatalogId =1 , @ProductType = 'ConfigurableProduct',@userId = 2 ,@PimCategoryHierarchyId = 7 
    Group Product
    EXEC [dbo].[Znode_GetPublishAssociatedProducts]  @PublishCatalogId ='2',@PimProductIdh =''  , @PimProducttType = 'GroupedProduct'
    EXEC [dbo].[Znode_GetPublishAssociatedProducts]  @PublishCatalogId ='',@PimProductId ='200066'  , @PimProducttType = 'GroupedProduct'
    EXEC [dbo].[Znode_GetPublishAssociatedProducts] @PimProductId ='200066'  , @PimProducttType = 'GroupedProduct'
   */
     BEGIN
         BEGIN TRAN GetPublishAssociatedProducts;
         BEGIN TRY
             SET NOCOUNT ON;

			  DECLARE @TBL_PublishCatalogId TABLE(PublishCatalogId INT,PublishProductId INT,PimProductId  INT , VersionId INT,LocaleId INT  );
			  DECLARE @PimAttributeId INT = [dbo].[Fn_GetProductTypeAttributeId]()
					  ,@PimAttributeDefaultValueId INT = (SELECT TOP 1 PimAttributeDefaultValueId FROM ZnodePimAttributeDefaultValue WHERE AttributeDefaultValueCode = @ProductType)
					,@DefaultLocaleId INT = dbo.fn_getDefaultlocaleId() 
			 DECLARE @GetDate DATETIME =dbo.Fn_GetDate()
			 
			 DECLARE @TBL_PublisshIds TABLE (PublishProductId INT , PimProductId INT , PublishCatalogId INT)
			 DECLARE  @PimProductId_New TransferId
					 
			 IF  @PublishCatalogId IS NULL  OR @PublishCatalogId = 0 
			 BEGIN 
			   INSERT INTO @TBL_PublisshIds 
			   EXEC [dbo].[Znode_InsertPublishProductIds] @PublishCatalogId,@userid,@PimProductId,1
			   
			   --SET @PimProductId = SUBSTRING((SELECT DISTINCT ','+CAST(PimProductId AS VARCHAr(50)) FROM @TBL_PublisshIds FOR XML PATH ('')),2,8000 )

			   INSERT INTO @PimProductId_New
			   SELECT DISTINCT PimProductId FROM @TBL_PublisshIds

			  -- SELECT 	@PimProductId	
			 END 
			 
			 IF  ISnull(@PimCategoryHierarchyId,0) <> 0 
			 BEGIN 
			 
			   INSERT INTO @TBL_PublisshIds 
			   EXEC [dbo].[Znode_InsertPublishProductIds] @PublishCatalogId,@userid,@PimProductId,1,@PimCategoryHierarchyId
			   
			   --SET @PimProductId = SUBSTRING((SELECT DISTINCT ','+CAST(PimProductId AS VARCHAr(50)) FROM @TBL_PublisshIds FOR XML PATH ('')),2,8000 )

			   INSERT INTO @PimProductId_New
			   SELECT PimProductId FROM @TBL_PublisshIds

			   
			 END 

			 IF  ISnull(@PimCategoryHierarchyId,0) <> 0 
			 BEGIN 
				 INSERT INTO @TBL_PublishCatalogId 
				 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,ZPP.PimProductId,MAX(PublishCatalogLogId) ,ZPCP.LocaleID  
				 FROM ZnodePublishProduct ZPP 
				 INNER JOIN ZnodePimAttributeValue ZPV ON (ZPV.PimProductId = ZPP.PimProductId )
				 INNER JOIN ZnodePimProductAttributeDefaultValue ZPAVL ON (ZPAVL.PimAttributeValueId = ZPV.PimAttributeValueId)
				 LEFT JOIN  ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
				 WHERE (EXISTS (SELECT TOP 1 1 FROM @TBL_PublisshIds SP WHERE SP.PublishProductId = ZPP.PublishProductId   ) 
				 AND  (ZPP.PublishCatalogId =  @PublishCatalogId ))
				 AND ZPV.PimAttributeId  = @PimAttributeId
				 AND ZPAVL.PimAttributeDefaultValueId= @PimAttributeDefaultValueId
				 AND ZPAVL.LocaleId = @DefaultLocaleId
				 AND ISNULL(ZPCP.LocaleId,0) <> 0 
				 AND ZPCP.PublishStateId= @PublishStateId
				 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,ZPP.PimProductId,ZPCP.LocaleID 
					
			 END
			 ELSE 
			 BEGIN 
				 INSERT INTO @TBL_PublishCatalogId 
				 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,ZPP.PimProductId,  MAX(PublishCatalogLogId) PublishCatalogLogId	,ZPCP.LocaleID 
				 FROM ZnodePublishProduct ZPP 
				 INNER JOIN ZnodePimAttributeValue ZPV ON (ZPV.PimProductId = ZPP.PimProductId )
				 INNER JOIN ZnodePimProductAttributeDefaultValue ZPAVL ON (ZPAVL.PimAttributeValueId = ZPV.PimAttributeValueId)
				 LEFT JOIN  ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
			 			 
				 WHERE (EXISTS (SELECT TOP 1 1 FROM @TBL_PublisshIds SP WHERE SP.PublishProductId = ZPP.PublishProductId  AND  @PublishCatalogId = '' ) 
				 OR (ZPP.PublishCatalogId =  @PublishCatalogId ))
				 AND ZPV.PimAttributeId  = @PimAttributeId
				 AND ZPAVL.PimAttributeDefaultValueId= @PimAttributeDefaultValueId
				 AND ZPAVL.LocaleId = @DefaultLocaleId
				 AND ISNULL(ZPCP.LocaleId,0) <> 0 
				  AND CASE WHEN NOT EXISTS (SELECT TOP 1 1 FROM @PimProductId ) AND @PublishCatalogId <> 0   THEN  @PublishStateId ELSE  ZPCP.Publishstateid END  = @PublishStateId
				 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,ZPP.PimProductId,ZPCP.LocaleID 

			 END
			 	
			
             DECLARE @TBL_ProductTypeXML TABLE
             (PublishProductId INT,
			  PublishCatalogId INT,
              ReturnXML        XML,
              VersionId        INT
             );
             DECLARE @TBL_PimProductId TABLE
             ([PimProductId]   INT,
              PublishCatalogId INT,
              PublishProductId INT
             );
            
             DECLARE @TBL_PimAssociatedEntity TABLE
             (
			  ZnodeProductId                  INT,
              ZnodeCatalogId                  INT,
              AsscociadedZnodeProductIds  VARCHAR(MAX),
			  ConfigurableProductEntity       NVARCHAR(MAX),
              LocaleId                        INT,
			  DisplayOrder					  INT,
              VersionId                       INT
             );
			

		     SET @versionid  =(SELECT TOP 1 VersionId FROM @TBL_PublishCatalogId TBLV )

             IF @ProductType = 'BundleProduct'
                 BEGIN
				    
					  IF  @PublishCatalogId IS NULL  OR @PublishCatalogId = 0 
			           BEGIN 
			 		 
			         DELETE FROM ZnodePublishedXML WHERE  IsBundleProductXML = 1 
					 AND EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId TBLV WHERE ZnodePublishedXML.PublishedId = TBLV.PublishProductId   AND ZnodePublishedXML.PublishCatalogLogId = TBLV.VersionId )
			           
			  -- SET @PimProductId = SUBSTRING((SELECT DISTINCT ','+CAST(PimProductId AS VARCHAr(50)) FROM @TBL_PublisshIds FOR XML PATH ('')),2,8000 )

			  -- SELECT 	@PimProductId	
					 END 
					 ELSE 
					 BEGIN 
				 
			         DELETE FROM ZnodePublishedXML WHERE  IsBundleProductXML = 1 
					 AND EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId TBLV WHERE ZnodePublishedXML.PublishedId = TBLV.PublishProductId   AND ZnodePublishedXML.PublishCatalogLogId = TBLV.VersionId )
			           
					 END 

					 
				 	 MERGE INTO ZnodePublishedXML TARGET 
					 USING (        
				     SELECT TBP.PublishProductId, TBP.VersionId, '<BundleProductEntity><VersionId>'+CAST(TBP.VersionId AS VARCHAR(50))+'</VersionId><ZnodeCatalogId>'+CAST(TBP.PublishCatalogId AS VARCHAR(50))+'</ZnodeCatalogId><ZnodeProductId>'
					 +CAST(TBP.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><AssociatedZnodeProductId>'
					 +CAST(TBPU.PublishProductId AS VARCHAR(50))+'</AssociatedZnodeProductId><AssociatedProductDisplayOrder>'+CAST(ZPTA.DisplayOrder AS VARCHAR(50))+'</AssociatedProductDisplayOrder></BundleProductEntity>' ReturnXML 
					 FROM @TBL_PublishCatalogId TBP
					 INNER JOIN ZnodePimProductTypeAssociation ZPTA ON(ZPTA.PimParentProductId = TBP.PimProductId)
					 INNER JOIN ZnodePublishProduct TBPU ON (TBPU.PimProductId = ZPTA.PimProductId AND TBPU.PublishCatalogId = TBP.PublishCatalogId )
					 ) SOURCE 
					ON (
								 TARGET.PublishCatalogLogId = SOURCE.versionId 
								 AND TARGET.PublishedId = SOURCE.PublishProductId
								 AND TARGET.IsBundleProductXML = 1 
								 AND TARGET.LocaleId = 0 
							)
					         WHEN MATCHED THEN 
							UPDATE 
							SET  PublishedXML = ReturnXML
							   , ModifiedBy = @userId 
							   ,ModifiedDate = @GetDate
							WHEN NOT MATCHED THEN 
							INSERT (PublishCatalogLogId
							,PublishedId
							,PublishedXML
							,IsBundleProductXML
							,LocaleId
							,CreatedBy
							,CreatedDate
							,ModifiedBy
							,ModifiedDate)

							VALUES (SOURCE.versionid , Source.PublishProductid,Source.ReturnXML,1,0,@userId,@getDate,@userId,@getDate);
						                                         
                 END;
             ELSE
             IF @ProductType = 'GroupedProduct'
                 BEGIN
				  
				     IF  @PublishCatalogId IS NULL  OR @PublishCatalogId = 0 
			           BEGIN 
			 		 
			         DELETE FROM ZnodePublishedXML WHERE  IsGroupProductXML = 1 
					 AND EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId TBLV WHERE ZnodePublishedXML.PublishedId = TBLV.PublishProductId   AND ZnodePublishedXML.PublishCatalogLogId = TBLV.VersionId )
			           
			  -- SET @PimProductId = SUBSTRING((SELECT DISTINCT ','+CAST(PimProductId AS VARCHAr(50)) FROM @TBL_PublisshIds FOR XML PATH ('')),2,8000 )

			  -- SELECT 	@PimProductId	
					 END 
					 ELSE 
					 BEGIN 
					 

						 DELETE FROM ZnodePublishedXML WHERE  IsGroupProductXML = 1 
						 AND EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId TBLV WHERE ZnodePublishedXML.PublishedId = TBLV.PublishProductId   AND ZnodePublishedXML.PublishCatalogLogId = TBLV.VersionId )
			           
					 END 

				   

				 	 MERGE INTO ZnodePublishedXML TARGET 
					 USING (  
				     SELECT TBP.PublishProductId, TBP.VersionId, '<GroupProductEntity><VersionId>'+CAST(TBP.VersionId AS VARCHAR(50))+'</VersionId><ZnodeCatalogId>'+CAST(TBP.PublishCatalogId AS VARCHAR(50))+'</ZnodeCatalogId><ZnodeProductId>'
					 +CAST(TBP.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><AssociatedZnodeProductId>'
					 +CAST(TBPU.PublishProductId AS VARCHAR(50))+'</AssociatedZnodeProductId><AssociatedProductDisplayOrder>'+CAST(ZPTA.DisplayOrder AS VARCHAR(50))+'</AssociatedProductDisplayOrder></GroupProductEntity>'  ReturnXML
					 FROM @TBL_PublishCatalogId TBP
					 INNER JOIN ZnodePimProductTypeAssociation ZPTA ON(ZPTA.PimParentProductId = TBP.PimProductId)
					 INNER JOIN ZnodePublishProduct TBPU ON (TBPU.PimProductId = ZPTA.PimProductId AND TBPU.PublishCatalogId = TBP.PublishCatalogId )
					  ) SOURCE 
					ON (
								 TARGET.PublishCatalogLogId = SOURCE.versionId 
								 AND TARGET.PublishedId = SOURCE.PublishProductId
								 AND TARGET.IsGroupProductXML = 1 
								 AND TARGET.LocaleId = 0 
							)
						   WHEN MATCHED THEN 
							UPDATE 
							SET  PublishedXML = ReturnXML
							   , ModifiedBy = @userId 
							   ,ModifiedDate = @GetDate
							WHEN NOT MATCHED THEN 
							INSERT (PublishCatalogLogId
							,PublishedId
							,PublishedXML
							,IsGroupProductXML
							,LocaleId
							,CreatedBy
							,CreatedDate
							,ModifiedBy
							,ModifiedDate)

							VALUES (SOURCE.versionid , Source.PublishProductid,Source.ReturnXML,1,0,@userId,@getDate,@userId,@getDate);
    
                 END;
             ELSE
             IF @ProductType = 'ConfigurableProduct'
             BEGIN
				IF  @PublishCatalogId IS NULL  OR @PublishCatalogId = 0 
			    BEGIN 
			 		 
					DELETE FROM ZnodePublishedXML WHERE  IsConfigProductXML = 1 
					AND EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId TBLV WHERE ZnodePublishedXML.PublishedId = TBLV.PublishProductId   AND ZnodePublishedXML.PublishCatalogLogId = TBLV.VersionId )
			           
	
				END 
			 ELSE 
			 BEGIN 
						
						--SET @versionid  =(SELECT TOP 1 VersionId FROM @TBL_PublishCatalogId TBLV )

						--DELETE FROM ZnodePublishedXML WHERE  IsConfigProductXML = 1 
						--AND PublishCatalogLogId  = @versionid

					DELETE FROM ZnodePublishedXML WHERE  IsConfigProductXML = 1 
					AND EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId TBLV 
					WHERE ZnodePublishedXML.PublishedId = TBLV.PublishProductId   
					AND ZnodePublishedXML.PublishCatalogLogId = TBLV.VersionId )
			           
					;WITH CTE_ConfigProductXML as
					(
						SELECT DISTINCT TBP.PublishProductId , TBP.VersionId, TBPU.PublishProductId as AssociatedZnodeProductId
						FROM @TBL_PublishCatalogId TBP
						INNER JOIN ZnodePimProductTypeAssociation ZPTA ON(ZPTA.PimParentProductId = TBP.PimProductId)
						INNER JOIN ZnodePublishProduct TBPU ON (TBPU.PimProductId = ZPTA.PimProductId AND TBPU.PublishCatalogId = TBP.PublishCatalogId )
					)
					,CTE_PublishedXML as
					(
						SELECT ZPX.PublishCatalogLogId,ZPX.PublishedId,ZPX.IsAddonXML,ZPX.IsConfigProductXML, p.value('(./AssociatedZnodeProductId)[1]', 'INT')  as AssociatedZnodeProductId
						FROM ZnodePublishedXML ZPX
						CROSS APPLY ZPX.PublishedXML.nodes('/ConfigurableProductEntity') t(p)
						where ZPX.IsConfigProductXML = 1
					)
					DELETE ZPXML  
					FROM ZnodePublishedXML ZPXML
					INNER JOIN CTE_PublishedXML CPX	ON ZPXML.PublishCatalogLogId = CPX.PublishCatalogLogId AND ZPXML.PublishedId = CPX.PublishedId AND ZPXML.IsConfigProductXML = CPX.IsConfigProductXML		
					INNER JOIN CTE_ConfigProductXML CAX on CPX.PublishCatalogLogId = CAX.VersionId 
					AND CPX.PublishedId = CAX.PublishProductId
					AND CPX.IsConfigProductXML = 1
					AND CPX.AssociatedZnodeProductId = CAX.AssociatedZnodeProductId

			 END 
			

				 	 MERGE INTO ZnodePublishedXML TARGET 
					 USING (  
				     SELECT DISTINCT TBP.PublishProductId , TBP.VersionId, '<ConfigurableProductEntity><VersionId>'+CAST(TBP.VersionId AS VARCHAR(50))+'</VersionId><ZnodeCatalogId>'+CAST(TBP.PublishCatalogId AS VARCHAR(50))+'</ZnodeCatalogId><ZnodeProductId>'
					 +CAST(TBP.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><AssociatedZnodeProductId>'
					 +CAST(TBPU.PublishProductId AS VARCHAR(50))+'</AssociatedZnodeProductId><AssociatedProductDisplayOrder>'+CAST(ZPTA.DisplayOrder AS VARCHAR(50))+'</AssociatedProductDisplayOrder>'
					 +(SELECT DISTINCT  ZPA.AttributeCode ConfigurableAttributeCode 
														FROM ZnodePimConfigureProductAttribute ZPCPA 
														LEFT JOIN ZnodePimAttribute ZPA ON (Zpa.PimAttributeId = ZPCPA.PimAttributeId) 
                                                        WHERE  ZPCPA.PimProductId = TBP.PimProductId 
                                                        FOR XML PATH('ConfigurableAttributeCodes')) +'</ConfigurableProductEntity>'  ReturnXML
					 FROM @TBL_PublishCatalogId TBP
					 INNER JOIN ZnodePimProductTypeAssociation ZPTA ON(ZPTA.PimParentProductId = TBP.PimProductId)
					 INNER JOIN ZnodePublishProduct TBPU ON (TBPU.PimProductId = ZPTA.PimProductId AND TBPU.PublishCatalogId = TBP.PublishCatalogId )
				    ) SOURCE 
					ON (
								 TARGET.PublishCatalogLogId = SOURCE.versionId 
								 AND TARGET.PublishedId = SOURCE.PublishProductId
								 AND TARGET.IsConfigProductXML = 1 
								 AND TARGET.LocaleId = 0 
							)
						  WHEN MATCHED THEN 
							UPDATE 
							SET  PublishedXML = ReturnXML
							   , ModifiedBy = @userId 
							   ,ModifiedDate = @GetDate
							WHEN NOT MATCHED THEN 
							INSERT (PublishCatalogLogId
							,PublishedId
							,PublishedXML
							,IsConfigProductXML
							,LocaleId
							,CreatedBy
							,CreatedDate
							,ModifiedBy
							,ModifiedDate)

							VALUES (SOURCE.versionid , Source.PublishProductid,Source.ReturnXML,1,0,@userId,@getDate,@userId,@getDate);
    
                 END;

				

				 SELECT PublishedXML ReturnXML
				 FROM ZnodePublishedXML  ZPXM 
				 WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId TBLP WHERE TBLP.VersionId = ZPXM.PublishCatalogLogId and TBLP.PublishProductid = ZPXm.PublishedId )
				 AND IsConfigProductXML = CASE WHEN @ProductType = 'ConfigurableProduct' THEN  1 ELSE 0 END 
				 AND IsGroupProductXML = CASE WHEN @ProductType = 'GroupedProduct' THEN  1 ELSE 0 END 
				 AND IsBundleProductXML = CASE WHEN @ProductType = 'BundleProduct' THEN  1 ELSE 0 END 
				  

				 -- Create Nonclustered index ind_ZnodePublishedXML_Bulk on ZnodePublishedXML(PublishCatalogLogId,IsConfigProductXML,IsGroupProductXML,IsBundleProductXML) 
				  				-- SELECT ReturnXML FROM @TBL_ProductTypeXML;
		
		    COMMIT TRAN GetPublishAssociatedProducts;
			
         END TRY
         BEGIN CATCH
		    SELECT ERROR_MESSAGE()
            DECLARE @Status BIT ;
			SET @Status = 0;
			DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPublishAssociatedProducts @PublishCatalogId = '+@PublishCatalogId+',@ProductType= '+@ProductType+',@VersionId='+CAST(@VersionId AS VARCHAR(50))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
			SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
			ROLLBACK TRANSACTION GetPublishAssociatedProducts;
			EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetPublishAssociatedProducts',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishCatalog')
BEGIN 
	DROP PROCEDURE Znode_GetPublishCatalog
END
GO
CREATE PROCEDURE [dbo].[Znode_GetPublishCatalog]
(   @PimCatalogId INT,
    @UserId       INT,
    @Status       BIT = 0 OUT,
	@PublishTimeoutSeconds INT = 0,
	@LocaleId  TransferId Readonly,
	@IsCategoryPublishInProcess BIT = 0,
	@isDebug INT = 0
	 )
AS
/*
     Summary:- This Procedure is used to get data of catalog for publish 
     Unit Testing
	 begin tran
	 DECLARE @RT transferId 
	 INSERT INTO @RT 
	 VALUES (1),()
	  DECLARE @rerer INT =0 
     EXEC Znode_GetPublishCatalog 18 ,2,@rerer OUT SELECT @rerer
	 UPDATE ZnodePublishCatalogLog SET IsCatalogPublished = 0 WHERE IsCatalogPublished IS NULL 
	 SELECT * FROM ZnodePublishcatalogLog 
	 -- SELECT CASE WHEN DATEDIFF(s, LogDateTIme ,GETDATE()) > 1500 THEN 1 ELSE 0 END, DATEDIFF(s, LogDateTIme,GETUTCDATE() ) ,*  FROM ZnodePublishCatalogLog  WHERE publishCatalogId = 5  AND isCatalogPublished IS NULL 
	 rollback tran
	*/
     BEGIN
         BEGIN TRAN GetPublishCatalog;
         BEGIN TRY

		DECLARE @LocaleIds TABLE (LocaleId INT )
		DECLARE @LocaleIDsin TransferId 
		DECLARE @PublishStateIdForProcessing  INT = [dbo].[Fn_GetPublishStateIdForProcessing]()
		,@PublishStateIdForPublishFailed INT =  [dbo].[Fn_GetPublishStateIdForPublishFailed]()
		INSERT INTO  @LocaleIDsin 
		SELECT * FROM @LocaleID
		DELETE FROM  @LocaleIDsin WHERE id = 0 


	   DECLARE @StartPublishProcess BIT = 0 
	   DECLARE @GetDate  DATETIME = dbo.Fn_GetDate();
	   DECLARE @PublishCatalogId INT= ISNULL((SELECT TOP 1 PublishCatalogId FROM ZnodePublishCatalog ZPC WHERE ZPC.PimCatalogId = @PimCatalogId), 0), @PublishCataloglogId INT= 0;
	   DECLARE @TBL_DeletePublishCataLogLogId TABLE (PublishCatalogLogId INT )
	   DECLARE @MaxCatalogLog INT = ( SELECT max(PublishcataloglogId) FROM ZnodePublishCataloglog  WHERE PimCatalogId = @PimCatalogId)
	  
	   INSERT INTO @LocaleIds 
	   SELECT id 
	   FROM @LocaleIDsin RT 
	   UNION ALL 
	   SELECT LocaleId 
	   FROM ZnodeLocale 
	   WHERE IsActive = 1
	   AND NOT EXISTS (SELECT TOP 1 1 FROM @LocaleIDsin ) 


	   INSERT INTO   @TBL_DeletePublishCataLogLogId
	   SELECT PublishCatalogLogId FROM ZnodePublishCatalogLog ZPCC WHERE ZPCC.PublishCatalogLogId < (@MaxCatalogLog - 2 )
		AND ZPCC.PimCatalogId = @PimCatalogId

  --TRUNCATE TABLE ZnodePublishedXML

--DECLARE @Deleted_Rows INT;
--SET @Deleted_Rows = 1;


--WHILE (@Deleted_Rows > 0)
--  BEGIN
--   -- Delete some small number of rows at a time
  

--  --DELETE TOP (10000) ZnodePublishedXML WHERE PublishCatalogLogId IN (SELECT PublishCatalogLogId FROM   @TBL_DeletePublishCataLogLogId) 

--  SET @Deleted_Rows = @@ROWCOUNT;
--END


	   

	 --  DELETE FROM ZnodePublishCatalogLog  
	 --   WHERE ZnodePublishCatalogLog.PublishCatalogLogId < (@MaxCatalogLog - 2 )
		--AND ZnodePublishCatalogLog.PimCatalogId = @PimCatalogId
		 
		-- SELECT PublishCatalogLogId FROM   @TBL_DeletePublishCataLogLogId

           DECLARE @CatalogProfileId VARCHAR(MAX)= '';
                                                   
           IF EXISTS (SELECT TOP 1 1 FROM ZnodePublishcatalogLog  WHERE  IsCatalogPublished  IS NULL OR  PublishStateId = @PublishStateIdForProcessing   )
			 BEGIN
		
					  SET @StartPublishProcess =1
					  SET @Status = 0;
				
			   END 
		   ELSE 
		     BEGIN
			    
			    SET @StartPublishProcess = 0
			    SET @Status = 1;
		     END 	

			 IF @isDebug =1 
			 BEGIN 
			  SELECT @StartPublishProcess
			 END 

		   IF (@PublishCatalogId <> 0 AND @StartPublishProcess = 0 )
                 BEGIN
			
					  UPDATE ZnodePublishCatalogLog SET  IsCatalogPublished = 0 ,PublishStateId = @PublishStateIdForPublishFailed 
					  WHERE PublishCatalogId = @PublishCatalogId 
					  AND  PublishStateId = @PublishStateIdForProcessing

					  UPDATE ZPC SET CatalogName = ZC.CatalogName,ExternalId = ZC.ExternalId,PimCatalogId= @PimCatalogId,CreatedBy = @UserId,
					  CreatedDate = @GetDate,ModifiedBy = @UserId,ModifiedDate = @GetDate 
					  FROM ZnodePublishCatalog ZPC 
					  INNER JOIN ZnodePimCatalog ZC ON(ZC.PimCatalogId = ZPC.PimCatalogId)
					  WHERE ZPC.PimCatalogId = @PimCatalogId;
              
			  		  INSERT INTO ZnodePublishCatalogLog (PublishCatalogId , IsProductPublished,IsCategoryPublished,IsCatalogPublished,pimCatalogId,UserId,LogDateTime,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,LocaleId,PublishStateId )
					  SELECT @PublishCatalogId,NULL,CASE WHEN @IsCategoryPublishInProcess = 1 THEN 0 ELSE NULL END,NULL,@PimCatalogId,@UserId,@GetDate,@UserId,@GetDate,@UserId,@GetDate,LocaleId,@PublishStateIdForProcessing
					  FROM @LocaleIds a
					  WHERE @PublishCataloglogId = 0 

					  SET @PublishCataloglogId = SCOPE_IDENTITY();
				 END
             ELSE IF @StartPublishProcess = 0 
                 BEGIN
				     
					  INSERT INTO ZnodePublishCatalog (PimCatalogId,CatalogName,ExternalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
                      SELECT PimCatalogId,CatalogName,ExternalId,@UserId,@GetDate,@UserId,@GetDate 
					  FROM ZnodePimCatalog AS ZPC 
					  WHERE ZPC.PimCatalogId = @PimCatalogId;
                      
					  SET @PublishCatalogId = SCOPE_IDENTITY();
                     
					  INSERT INTO ZnodePublishCatalogLog (PublishCatalogId,IsProductPublished,IsCategoryPublished,IsCatalogPublished,pimCatalogId,UserId,LogDateTime,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,LocaleId,PublishStateId )
					  SELECT @PublishCatalogId,NULL,CASE WHEN @IsCategoryPublishInProcess = 1 THEN 0 ELSE NULL END,NULL,@PimCatalogId,@UserId,@GetDate,@UserId,@GetDate,@UserId,@GetDate,LocaleId,@PublishStateIdForProcessing
					  FROM @LocaleIds
					  WHERE @PublishCataloglogId = 0 

                      SET @PublishCataloglogId = SCOPE_IDENTITY();
                 END;

				 -- here find the profile attached to the catalog 
          SET @CatalogProfileId = SUBSTRING((SELECT ','+CAST(ProfileId AS VARCHAR(20)) FROM ZnodeProfileCatalog ZPC WHERE PimCatalogId = @PimCatalogId FOR XML PATH('')), 2, 4000);              

	      
		SELECT ZPC.PublishCatalogId ZnodeCatalogId,CatalogName,@CatalogProfileId TempProfileIds,Max(PublishCatalogLogId) VersionId  ,yu.localeid LocaleId,PublishStateId
		FROM ZnodePublishCatalog ZPC
		INNER JOIN  ZnodePublishCatalogLog YU ON (YU.PublishCatalogId = ZPC.PublishCatalogId)
		WHERE ZPC.PublishCatalogId = @PublishCatalogId
		AND (YU.IsCatalogPublished IS NULL OR  YU.PublishStateId= @PublishStateIdForProcessing)
	    AND  @StartPublishProcess = 0 
		GROUP BY 	ZPC.PublishCatalogId,CatalogName,yu.localeid,YU.IsCatalogPublished,PublishStateId ;

		COMMIT TRAN GetPublishCatalog;
		
       END TRY
       BEGIN CATCH
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPublishCatalog @PimCatalogId = '+CAST(@PimCatalogId AS VARCHAR(50))+',@UserId ='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(50));
             SET @Status = 0;
             ROLLBACK TRAN GetPublishCatalog;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_GetPublishCatalog',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
       END CATCH;
     END;
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishProducts')
BEGIN 
	DROP PROCEDURE Znode_GetPublishProducts
END
GO
CREATE PROCEDURE [dbo].[Znode_GetPublishProducts](
	    @PublishCatalogId int= NULL
	  , @PublishCategoryId varchar(2000)= NULL
	  , @UserId int
	  , @NotReturnXML int= NULL
	  , @PimProductId TransferId Readonly
	  , @VersionId int= 0
	  , @IsDebug bit= 0
	  , @TokenId nvarchar(max)= ''
	  , @LocaleId TransferId READONLY 
	  , @PublishStateId INT = 0 
	  )
AS
    
/*
    Summary :	Publish Product on the basis of publish catalog
				Retrive all Product details with attributes and insert into following tables 
				1.	ZnodePublishedXml
				2.	ZnodePublishCategoryProduct
				3.	ZnodePublishProduct
				4.	ZnodePublishProductDetail

                Product details include all the type of products link, grouped, configure and bundel products (include addon) their associated products 
				collect their attributes and values into tables variables to process for publish.  
                
				Finally genrate XML for products with their attributes and inserted into ZnodePublishedXml Znode Admin process xml from sql server to mongodb
				one by one.

    Unit Testing
    
    SELECT * FROM ZnodePimCustomField WHERE CustomCode = 'Test'
    SELECT * FROM ZnodePimCatalogCategory WHERE pimCatalogId = 3 AND PimProductId = 181
    SELECT * FROM ZnodePimCustomFieldLocale WHERE PimCustomFieldId = 1
    SELECT * FROM ZnodePublishProduct WHERE PublishProductid = 213 = 30
    select * from znodepublishcatalog
    SELECT * FROM view_loadmanageProduct WHERE Attributecode = 'ProductNAme' AND AttributeValue LIKE '%Apple%'
    SELECT * FROM ZnodePimCategoryProduct WHERE  PimProductId = 181
    SELECT * FROM ZnodePimCatalogcategory WHERE pimcatalogId = 3 \
	DECLARE @ttr TransferId 
	INSERT INTO @ttr  
	SELECT 25719 
    EXEC Znode_GetPublishProducts  @PublishCatalogId = 3 ,@UserId= 2 ,@NotReturnXML= NULL,@PimProductId = @ttr,@IsDebug= 1 
    EXEC Znode_GetPublishProducts  @PublishCatalogId = null,@UserId= 2 ,@NotReturnXML= NULL,@IsDebug= 1  ,@PimProductId = 103
    EXEC Znode_GetPublishProducts  @PublishCatalogId =1,@UserId= 2 ,@RequiredXML= 1	
    SELECT * FROM 	ZnodePimCatalogCategory  WHERE pimcatalogId = 3  
    SELECT * FROM [dbo].[ZnodePimCategoryHierarchy]  WHERE pimcatalogId = 3 
 */
  
BEGIN
	
	BEGIN TRY
		SET NOCOUNT ON;
			 DECLARE @IsCatalogPublishInProcess BIT = 0
	         DECLARE @TBL_PublishIds TABLE (PublishProductId INT , PimProductId INT , PublishCatalogId INT)
			 DECLARE @PublishStateidForPriview INT = [dbo].[Fn_GetPublishStateIdForPreview]()
			 DECLARE @DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId()
			 
			 --User cananot modify / update UDT, Need to declare additinal table variable for editing in other store procedure.
			 DECLARE @PimProductId_Editable TransferId
			 
			 IF EXISTS (SELECT TOP 1 1  FROM ZnodePublishCatalogLog a 
			   INNER JOIN ZnodePimCatalogCategory b ON (b.PimCatalogId =a.PimCatalogId )
			   WHERE EXISTS ( SELECT TOP 1 1 FROM @PimProductId SP WHERE  b.PimProductId = SP.Id )
			   AND a.IsCatalogPublished IS NULL 
			   ) 
			   BEGIN 
				 SET   @IsCatalogPublishInProcess =1 
			   END 
			     
	         IF (( @PublishCatalogId IS NULL  OR @PublishCatalogId = 0 ) AND @IsCatalogPublishInProcess = 0 )
			 BEGIN 
			   -- Process call single product publish
			   INSERT INTO @TBL_PublishIds 
			   EXEC [dbo].[Znode_InsertPublishProductIds] @PublishCatalogId,@userid,@PimProductId
			
			   INSERT INTO @PimProductId_Editable
			   SELECT distinct PimProductId FROM @TBL_PublishIds
			   -- initiate single product publish 
			   EXEC Znode_GetPublishSingleProduct @PublishCatalogId,@VersionId,@PimProductId_Editable,@UserId,@TokenId , @LocaleId,@PublishStateId
			  -- SELECT 	@PimProductId	
			 END 
			 ELSE IF  @IsCatalogPublishInProcess = 0 
			 BEGIN 
				-- Process call catalog publish (include category, products with multiple types)
			     EXEC [dbo].[Znode_InsertPublishProductIds] @PublishCatalogId,@userid,@PimProductId
				 EXEC Znode_GetPublishProductbulk @PublishCatalogId=@PublishCatalogId,@VersionId=@VersionId,@PimProductId=@PimProductId,@userid=@userid,@LocaleIds= @LocaleId,@PublishStateId = @PublishStateId
				 UPDATE ZnodePimProduct SET IsProductPublish = 1,PublishStateId =  @PublishStateId 
				 WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePublishProduct ZPP WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId AND ZPP.PublishCatalogId = @PublishCatalogId)
			 END 
			
			 DECLARE @TBL_PublishCatalogId TABLE(PublishCatalogId INT,PublishProductId INT,PimProductId  INT , VersionId INT,LocaleId INT  );

			 INSERT INTO @TBL_PublishCatalogId 
			 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,MAX(PublishCatalogLogId) VersionId, ZPCP.LocaleId  
			 FROM ZnodePublishProduct ZPP 
			 LEFT JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
			 WHERE (EXISTS (SELECT TOP 1 1 FROM @TBL_PublishIds SP WHERE SP.PimProductId = ZPP.PimProductId  ))
			 and exists (select top 1 1 from @LocaleId yu where yu.Id = zpcp.LocaleId)
			 AND IsCatalogPublished = 1 
			 AND PublishStateId = @PublishStateId
			 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId , LocaleId 

			
			-- SELECT * FROM @TBL_PublishCatalogId

			IF EXISTS (SELECT TOP 1 1 FROM @PimProductId WHERE ID IS NOT NULL AND ID <> '')

			--IF @PimProductId IS NOT NULL AND @PimProductId <> ''
			BEGIN
				SELECT PublishedXML ProductXml
				FROM ZnodePublishedXml ZPX
				WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId TBLP WHERE TBLP.VersionId = ZPX.PublishCatalogLogId AND TBLP.PublishProductId = ZPX.PublishedId  )
				AND IsProductXML = 1
				AND @IsCatalogPublishInProcess = 0
				;

						
				SELECT PublishProductId  ,PublishCatalogId ,VersionId,LocaleId 
				FROM @TBL_PublishCatalogId
				WHERE @IsCatalogPublishInProcess = 0
				GROUP BY PublishProductId  ,PublishCatalogId ,VersionId,LocaleId;

				IF 	 @IsCatalogPublishInProcess = 1 
				BEGIN 
				SELECT 1 Id , 'Single product publish request cannot be processed as catalog or category publish is in progress. Please try after publish is complete.' MessageDetails,  CAST(0 AS BIT ) Status
				END 
				ELSE 
				BEGIN 
				SELECT 1 Id , ' Publish Successfull' MessageDetails, CAST(1 AS BIT ) Status
				END
				
		
				-- dataset for SEO implementation
				SELECT  SKU 
				FROM ZnodePublishProductDetail PPD 
				INNER JOIN @TBL_PublishCatalogId TPC ON (TPC.PublishProductId = PPD.PublishProductId )
				WHERE EXISTS (SELECT TOP 1 1 FROM @PimProductId tb WHERE tb.ID = TPC.PimProductId)
				AND PPD.localeid = @DefaultLocaleId
				GROUP BY SKU;
				 

			END
			
			;with Cte_PublishCatalog AS 
			(
			 SELECT max(PublishCatalogLogId) PublishCatalogLogId,a.LocaleId,PublishCatalogId 
			 FROM ZnodePublishCatalogLog  a
			 WHERE a.PublishCatalogId = @PublishCatalogId
			 GROUP BY LocaleId,PublishCatalogId			
			)

			--UPDATE ZnodePublishCatalogLog 
			--SET IsProductPublished = 1,
			--    PublishProductId = (SELECT COUNT( DISTINCT  PublishProductId) FROM ZnodePublishCategoryProduct SP  WHERE Sp.PublishCatalogId = ZnodePublishCatalogLog.PublishCatalogId --AND ZnodePublishCatalogLog.IsCatalogPublished = 1
			--						AND ( SP.PublishCategoryId in (SELECT Item FROM dbo.split(ZnodePublishCatalogLog.PublishCategoryId,',') SP ))  )
		 --   WHERE PublishCatalogLogId = @VersionId AND  @VersionId <> 0


			UPDATE ZnodePublishCatalogLog 
			SET IsProductPublished = 1 
			,PublishProductId = (SELECT COUNT(DISTINCT PublishProductId) FROM ZnodePublishCategoryProduct ZPP WHERE ZPP.PublishCatalogId = ZnodePublishCatalogLog.PublishCatalogId AND ZPP.PublishCategoryId IS NOT NULL) 
			WHERE EXISTS (SELECT TOP 1 1 FROM Cte_PublishCatalog  TY  WHERE  TY.PublishCatalogLogId =ZnodePublishCatalogLog.PublishCatalogLogId )  


			DECLARE @PimAttributeIsPublish VARCHAR(50) =  [dbo].[Fn_GetAttributeIsPublish]() 

			--UPDATE ZnodePimProduct 
			--SET IsProductPublish = 1 
			--WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId ZPP WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId)

			--SELECT * fROM @TBL_PublishCatalogId

			UPDATE ZnodePimProduct 
			SET PublishStateId =  @PublishStateId
			WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId ZPP WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId)

			--END 
	END TRY
	BEGIN CATCH
		SELECT ERROR_MESSAGE(), ERROR_PROCEDURE();
		UPDATE ZnodePublishCatalogLog 
	    SET IsCatalogPublished = 0 
		WHERE PublishCatalogLogId = @VersionId
		DECLARE @Status bit;
		SET @Status = 0;
		DECLARE @Error_procedure varchar(1000)= ERROR_PROCEDURE(), @ErrorMessage nvarchar(max)= ERROR_MESSAGE(), @ErrorLine varchar(100)= ERROR_LINE(), @ErrorCall nvarchar(max)= 'EXEC Znode_GetPublishProducts @PublishCatalogId = '+CAST(@PublishCatalogId AS varchar(max))+',@PublishCategoryId='+@PublishCategoryId+',@UserId='+CAST(@UserId AS Varchar(50))+',@NotReturnXML='+CAST(@NotReturnXML AS Varchar(50))+',@UserId = '+CAST(@UserId AS Varchar(50))+',

		@VersionId='+CAST(@VersionId AS Varchar(50))+',@TokenId='+CAST(@TokenId AS varchar(max))+',@Status='+CAST(@Status AS varchar(10));
		SELECT 0 AS ID, CAST(0 AS bit) AS Status;
		ROLLBACK TRAN GetPublishProducts;
		EXEC Znode_InsertProcedureErrorLog @ProcedureName = 'Znode_GetPublishProducts', @ErrorInProcedure = @Error_procedure, @ErrorMessage = @ErrorMessage, @ErrorLine = @ErrorLine, @ErrorCall = @ErrorCall;
	END CATCH;
END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportCustomerAddress')
BEGIN 
	DROP PROCEDURE Znode_ImportCustomerAddress
END
GO
CREATE PROCEDURE [dbo].[Znode_ImportCustomerAddress](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @LocaleId int= 0,@PortalId int ,@CsvColumnString nvarchar(max), @IsAccountAddress bit = 0 )
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import SEO Details
	
	-- Unit Testing : 
	--------------------------------------------------------------------------------------

BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max),@IsAllowGlobalLevelUserCreation nvarchar(10)

		DECLARE @GetDate datetime= dbo.Fn_GetDate();
		-- Retrive Value from global setting 
		Select @IsAllowGlobalLevelUserCreation = FeatureValues from ZnodeGlobalsetting where FeatureName = 'AllowGlobalLevelUserCreation'
		-- Three type of import required three table varible for product , category and brand

		CREATE TABLE #InsertCustomerAddress 
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int,UserName	nvarchar(512)
			,FirstName	varchar	(300),LastName	varchar	(300),DisplayName	nvarchar(1200),Address1	varchar	(300),Address2	varchar	(300)
			,CountryName	varchar	(3000),StateName	varchar	(3000),CityName	varchar	(3000),PostalCode	varchar	(50)
			,PhoneNumber	varchar	(50),
			--Mobilenumber	varchar(50),AlternateMobileNumber	varchar(50),FaxNumber	varchar(30),
			IsDefaultBilling	bit 
			,IsDefaultShipping	bit	,IsActive	bit	,ExternalId	nvarchar(2000),CompanyName nvarchar(2000), GUID NVARCHAR(400)
		);
		
		--SET @SSQL = 'SELECT RowNumber,UserName,FirstName,LastName,MiddleName,BudgetAmount,Email,PhoneNumber,EmailOptIn,IsActive,ExternalId,GUID FROM '+ @TableName;
		--SET @SSQL = 'SELECT RowNumber,' + @CsvColumnString + ',GUID FROM '+ @TableName;
		SET @SSQL = ' INSERT INTO #InsertCustomerAddress ( RowNumber, ' + @CsvColumnString + ' ,GUID )
		SELECT RowNumber,' + @CsvColumnString + ',GUID FROM '+ @TableName;
		--INSERT INTO @InsertCustomerAddress( RowNumber,UserName,FirstName,LastName,DisplayName,Address1,Address2,CountryName,
		--									StateName,CityName,PostalCode,PhoneNumber,
		--									IsDefaultBilling,IsActive,IsDefaultShipping,ExternalId,CompanyName,GUID )
		EXEC sys.sp_sqlexec @SSQL;

	
		-- start Functional Validation 
		-----------------------------------------------
		IF (@IsAccountAddress = 0)
		BEGIN
			IF @IsAllowGlobalLevelUserCreation = 'true'
					INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
						   SELECT '19', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
						   FROM #InsertCustomerAddress AS ii
						   WHERE ii.UserName NOT IN 
						   (
							   SELECT UserName FROM AspNetZnodeUser   where PortalId = @PortalId
						   );
			ELSE 
					INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
						   SELECT '19', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
						   FROM #InsertCustomerAddress AS ii
						   WHERE ii.UserName NOT IN 
						   (
							   SELECT UserName FROM AspNetZnodeUser   
						   );

					INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
							SELECT '8', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
							FROM #InsertCustomerAddress AS ii
							WHERE ISnull(ltrim(rtrim(ii.UserName)), '') = ''

		 END

		 -- error log when atleast db have 
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
					   SELECT '63', 'IsDefaultBilling/IsDefaultShipping', IsDefaultBilling, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
					   FROM #InsertCustomerAddress IC where  exists (
		SELECT TOP 1 1  from AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
		INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
		INNER JOIN ZnodeUserAddress ZUA ON ZUA.UserId = ZU.UserId
		INNER JOIN ZnodeAddress ZA ON ZUA.AddressId = ZA.AddressId
		where ANZU.UserName = IC.UserName AND ZA.IsDefaultBilling =IC.IsDefaultBilling 
		AND ZA.IsDefaultShipping =IC.IsDefaultShipping )
			
		--INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		--SELECT '35', 'IsDefaultBilling', IsDefaultBilling, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		--FROM #InsertCustomerAddress IC WHERE IsDefaultBilling = 0 AND IsDefaultShipping = 0 


		--INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		--	   SELECT '35', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		--	   FROM @InsertCustomer AS ii
		--	   WHERE ii.UserName not like '%_@_%_.__%' 
		 
		--Note : Content page import is not required 
		
		-- End Function Validation 	
		-----------------------------------------------
		--- Delete Invalid Data after functional validatin  

		--IF ( @IsAccountAddress = 1 )
		--BEGIN
		--	INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		--		SELECT '53', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		--		FROM #InsertCustomerAddress AS ii
		--		WHERE isnull(ii.UserName,'') <> ''
		--END


		UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ UserName - ' + ISNULL(UserName,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN #InsertCustomerAddress IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL


		DELETE FROM #InsertCustomerAddress
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber IS NOT NULL 
			--AND GUID = @NewGUID
		);

		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM #InsertCustomerAddress
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount ,
		TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End

		----------update ZnodeAddress
		DECLARE @AddressColumnString VARCHAR(1000), @WhereConditionString VARCHAR(1000), @UpdateColumnString VARCHAR(1000)

		SELECT @AddressColumnString = COALESCE(@AddressColumnString + ',', '')+a.ColumnName --COALESCE(@CsvColumnString + ' and ', '') +'ZA.'+ColumnName+' =  IC.'+ColumnName
		FROM ZnodeImportUpdatableColumns a
		INNER JOIN INFORMATION_SCHEMA.COLUMNS b on a.ColumnName = b.COLUMN_NAME  
		INNER JOIN dbo.Split(@CsvColumnString,',')C on b.COLUMN_NAME = c.Item
		WHERE b.TABLE_NAME = 'ZnodeAddress' 
		AND EXISTS(SELECT * FROM ZnodeImportHead IH where a.ImportHeadId = IH.ImportHeadId and IH.Name = 'ShippingAddress')

		SELECT @UpdateColumnString = COALESCE(@UpdateColumnString + ' , ', '') +'ZA.'+a.COLUMN_NAME+' =  IC.'+a.COLUMN_NAME  
		FROM INFORMATION_SCHEMA.COLUMNS a
		INNER JOIN dbo.Split(@CsvColumnString,',')b on a.COLUMN_NAME = b.Item
		WHERE NOT EXISTS (SELECT * FROM dbo.Split(@AddressColumnString,',') c WHERE a.COLUMN_NAME = c.Item )
		AND a.TABLE_NAME = 'ZnodeAddress'

		SELECT @WhereConditionString = COALESCE(@WhereConditionString + ' AND ', '') +'ZA.'+item+' =  IC.'+item from dbo.split(@AddressColumnString,',')
				
			
		-- Insert Product Data 
				
				CREATE TABLE #InsertedUserAddress (AddressId  nvarchar(256), UserId nvarchar(max)) 
		-- Pending for discussion include one identity column for modify address
				
				--UPDATE ANU SET 
				--ANU.PhoneNumber	= IC.PhoneNumber
				--from AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
				--INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
				--INNER JOIN @InsertCustomerAddress IC ON ANZU.UserName = IC.UserName 
				--INNER JOIN ZnodeUserAddress ZUA ON ZUA.UserId = ZU.UserId
				--INNER JOIN ZnodeAddress ZA ON ZUA.AddressId = ZA.AddressId
				 
				--where Isnull(ANZU.PortalId,0) = Isnull(@PortalId ,0)			

			    IF ( @IsAccountAddress = 1 )
				BEGIN

					UPDATE ZnodeAddress SET IsDefaultBilling = 0,  IsDefaultShipping = 0
					from AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
					INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
					INNER JOIN ZnodeUserAddress ZUA ON ZUA.UserId = ZU.UserId
					INNER JOIN ZnodeAddress ZA ON ZUA.AddressId = ZA.AddressId
					INNER JOIN #InsertCustomerAddress IC ON ANZU.UserName = IC.UserName AND ZA.IsDefaultBilling =IC.IsDefaultBilling 
															AND ZA.IsDefaultShipping =IC.IsDefaultShipping

					SET @SSQL = '
						UPDATE ZA set ModifiedBy = '+CONVERT(VARCHAR(10), @UserId)+', ModifiedDate = getdate() '+CASE WHEN ISNULL(@UpdateColumnString,'') = '' THEN '' ELSE ','+@UpdateColumnString END+' 
						FROM ZnodeAddress ZA
						INNER JOIN #InsertCustomerAddress IC ON '+CASE WHEN ISNULL(@WhereConditionString,'') = '' THEN ' 1 = 0 ' ELSE @WhereConditionString END

					EXEC (@SSQL)

					SET @SSQL = '
					Insert into ZnodeAddress (FirstName,LastName,DisplayName,Address1,Address2,Address3,CountryName,
											StateName,CityName,PostalCode,PhoneNumber,
											IsDefaultBilling,IsDefaultShipping,IsActive,ExternalId,CompanyName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)		
					OUTPUT INSERTED.AddressId INTO  #InsertedUserAddress (AddressId) 			 
					SELECT IC.FirstName,IC.LastName,IC.DisplayName,IC.Address1,IC.Address2,null,IC.CountryName,
					IC.StateName,IC.CityName,IC.PostalCode,IC.PhoneNumber,
					isnull(IC.IsDefaultBilling,0),isnull(IC.IsDefaultShipping,0),isnull(IC.IsActive,0),IC.ExternalId,IC.CompanyName, '+CONVERT(VARCHAR(10), @UserId)+' , getdate() , '+CONVERT(VARCHAR(10), @UserId)+' ,getdate()
					FROM  #InsertCustomerAddress IC
					WHERE NOT EXISTS(SELECT * FROM ZnodeAddress ZA WHERE '+CASE WHEN ISNULL(@WhereConditionString,'') = '' THEN ' 1 = 0 ' ELSE @WhereConditionString END +')'

					EXEC (@SSQL)

					DECLARE @AccountId INT
					SELECT @AccountId = AccountId FROM ZnodeUser where UserId = @UserId
					INSERT INTO ZnodeAccountAddress ( AccountId, AddressId, CreatedBy, CreatedDate,	ModifiedBy,	ModifiedDate )
					SELECT @AccountId, Addressid ,  @UserId , @GetDate, @UserId , @GetDate FROM #InsertedUserAddress UA
					WHERE NOT EXISTS ( SELECT * FROM ZnodeAccountAddress AA WHERE AccountId = @AccountId and AA.Addressid = UA.Addressid )
				END
				ELSE
				BEGIN
					
					UPDATE ZnodeAddress SET IsDefaultBilling = 0,  IsDefaultShipping = 0
					from AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
					INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
					INNER JOIN ZnodeUserAddress ZUA ON ZUA.UserId = ZU.UserId
					INNER JOIN ZnodeAddress ZA ON ZUA.AddressId = ZA.AddressId
					INNER JOIN #InsertCustomerAddress IC ON ANZU.UserName = IC.UserName AND ZA.IsDefaultBilling =IC.IsDefaultBilling 
															AND ZA.IsDefaultShipping =IC.IsDefaultShipping
					
					SET @SSQL = '
						UPDATE ZA set ModifiedBy = '+CONVERT(VARCHAR(10), @UserId)+', ModifiedDate = getdate() '+CASE WHEN ISNULL(@UpdateColumnString,'') = '' THEN '' ELSE ','+@UpdateColumnString END+' 
						FROM ZnodeAddress ZA
						INNER JOIN #InsertCustomerAddress IC ON '+CASE WHEN ISNULL(@WhereConditionString,'') = '' THEN ' 1 = 0 ' ELSE @WhereConditionString END
						print @SSQL
					EXEC (@SSQL)

					SET @SSQL = '
					Insert into ZnodeAddress (FirstName,LastName,DisplayName,Address1,Address2,Address3,CountryName,
												StateName,CityName,PostalCode,PhoneNumber,
												IsDefaultBilling,IsDefaultShipping,IsActive,ExternalId,CompanyName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)		
					OUTPUT INSERTED.AddressId, INSERTED.Address3 INTO  #InsertedUserAddress (AddressId, UserId ) 			 
					SELECT IC.FirstName,IC.LastName,IC.DisplayName,IC.Address1,IC.Address2,convert(nvarchar(100),ZU.UserId),IC.CountryName,
					IC.StateName,IC.CityName,IC.PostalCode,IC.PhoneNumber,
					isnull(IC.IsDefaultBilling,0),isnull(IC.IsDefaultShipping,0),isnull(IC.IsActive,0),IC.ExternalId,IC.CompanyName, '+CONVERT(VARCHAR(10), @UserId)+' , getdate() , '+CONVERT(VARCHAR(10), @UserId)+' ,getdate()
					FROM AspNetZnodeUser ANZU 
					INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
					INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
					INNER JOIN #InsertCustomerAddress IC ON ANZU.UserName = IC.UserName 
					WHERE NOT EXISTS(SELECT * FROM ZnodeAddress ZA WHERE '+CASE WHEN ISNULL(@WhereConditionString,'') = '' THEN ' 1 = 0 ' ELSE @WhereConditionString END +')'
					--print @SSQL
					EXEC (@SSQL)

					INSERT INTO ZnodeUserAddress(UserId,AddressId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
					SELECT CAST( UserId AS INT ) , Addressid , @UserId , @GetDate, @UserId , @GetDate FROM  #InsertedUserAddress
				END
	
				UPDATE ZA SET ZA.Address3 = null 
				From ZnodeAddress ZA INNER JOIN #InsertedUserAddress IUA ON ZA.AddressId = IUA.AddressId 

		-- 'End'
		--      SET @Status = 1;
		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;
	END TRY
	BEGIN CATCH

		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN A;
	END CATCH;
END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportPartialValidatePimProductData')
BEGIN 
	DROP PROCEDURE Znode_ImportPartialValidatePimProductData
END
GO
CREATE PROCEDURE [dbo].[Znode_ImportPartialValidatePimProductData]
(   @ImportHeadName     VARCHAR(200),
    @TableName          VARCHAR(200),
    @NewGUID            NVARCHAR(200),
    @TemplateId         INT,
    @UserId             INT,
    @LocaleId           INT           = 1,
    @IsCategory         INT           = 0,
    @DefaultFamilyId    INT           = 0,
    @ImportProcessLogId INT,
    @PriceListId        INT,
	@CountryCode VARCHAR(100) = '',
	@PimCatalogId         INT    = 0 ,
	@PortalId int = 0,
	@IsAccountAddress bit = 0  )
AS
     SET NOCOUNT ON;

/*
    Summary :   Import PimProduct ( for partial attribute import ) 
    Process :   Admin site will upload excel / csv file in database and create global temporary table
				Procedure Znode_ImportValidatePimProductData will validate data with attribute validation rule
				If datatype validation issue found in input daata will logged into table "ZnodeImportLog"
				If Data is correct and record count in table ZnodeImportLog will be 0 then process for import data into Base tables
				To import data call procedure "Znode_ImportPimProductData"
    		  
				SourceColumnName: CSV file column headers
				TargetColumnName: Attributecode from ZnodePimAttribute Table (Consider those Attributecodes configured with default family only)
*/

     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             --BEGIN TRAN TRN_ImportValidProductData;
             DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
             DECLARE @SQLQuery NVARCHAR(MAX), @AttributeTypeName NVARCHAR(10), @AttributeCode NVARCHAR(300), @AttributeId INT, @IsRequired BIT, @SourceColumnName NVARCHAR(600), @ControlName VARCHAR(300), @ValidationName VARCHAR(100), @SubValidationName VARCHAR(300), @ValidationValue VARCHAR(300), @RegExp VARCHAR(300), @CreateDateString NVARCHAR(300), @DefaultLocaleId INT, @ImportHeadId INT, @CheckedSourceColumn NVARCHAR(600)= '', @Status BIT= 0,
			    @CsvColumnString nvarchar(max), @FailedRecordCount BIGINT,
				@SuccessRecordCount BIGINT
             DECLARE @FamilyAttributeDetail TABLE
             (PimAttributeId       INT,
              AttributeTypeName    VARCHAR(300),
              AttributeCode        VARCHAR(300),
              SourceColumnName     NVARCHAR(600),
              IsRequired           BIT,
              PimAttributeFamilyId INT
             );
             DECLARE @AttributeDetail TABLE
             (PimAttributeId    INT,
              AttributeTypeName VARCHAR(300),
              AttributeCode     VARCHAR(300),
              SourceColumnName  NVARCHAR(600),
              IsRequired        BIT,
              ControlName       VARCHAR(300),
              ValidationName    VARCHAR(100),
              SubValidationName VARCHAR(300),
              ValidationValue   VARCHAR(300),
              RegExp            VARCHAR(300)
             );

             DECLARE @GlobalTempTableColumns TABLE(ColumnName NVARCHAR);
             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM INFORMATION_SCHEMA.TABLES
                 WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#InvalidDefaultData'
             )
                 CREATE TABLE #InvalidDefaultData
                 (RowNumber  INT,
                  Value      NVARCHAR(MAX),
                  ColumnName NVARCHAR(600)
                 );
             ELSE
             DROP TABLE #InvalidDefaultData;
             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM INFORMATION_SCHEMA.TABLES
                 WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#GlobalTempTableColumns'
             )
                 BEGIN

                     SET @SQLQuery = 'SELECT Column_Name, '''+@ImportHeadName+''' AS ImportHeadName  from tempdb.INFORMATION_SCHEMA.COLUMNS	where table_name = object_name(object_id('''+@TableName+'''),
					(select database_id from sys.databases where name = ''tempdb''))';
                     CREATE TABLE #GlobalTempTableColumns
                     (ColumnName   NVARCHAR(MAX),
                      TypeOfImport NVARCHAR(100)
                     );
                     INSERT INTO #GlobalTempTableColumns
                     (ColumnName,
                      TypeOfImport
                     )
                     EXEC sys.sp_sqlexec
                          @SQLQuery;
                 END;
		  -- If Exists ( Select  count(1)  from #GlobalTempTableColumns GROUP BY ColumnName  Having count(1) > 1 )
		  -- Begin
			 --   INSERT INTO ZnodeImportLog(ErrorDescription,ColumnName,Data,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
    --               Select  46,ColumnName,'',@newGUID,@UserId,@GetDate,@UserId,@GetDate, @ImportProcessLogId  from #GlobalTempTableColumns GROUP BY ColumnName  Having count(1) > 1 
				
				----'Multiple occurance of column are not allow for'
		  -- END

             IF EXISTS
             (
                 SELECT TOP 1 1
                 FROM #GlobalTempTableColumns
                 WHERE ColumnName IN('PimCategoryId', 'PimProductId', 'RowNumber')
             )
                 BEGIN
                     INSERT INTO ZnodeImportLog
                     (ErrorDescription,
                      ColumnName,
                      Data,
                      GUID,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate,
                      ImportProcessLogId
                     )
                     VALUES
                     (43,
                      '',
                      '',
                      @newGUID,
                      @UserId,
                      @GetDate,
                      @UserId,
                      @GetDate,
                      @ImportProcessLogId
                     );
                 END;
             SET @DefaultLocaleId = dbo.Fn_GetDefaultLocaleId();
             --Remove old error log 
             --DELETE FROM ZnodeImportLog WHERE ImportProcessLogId in (select ImportProcessLogId  FROM ZnodeImportProcessLog  WHERE ImportTemplateId  = @TemplateId )
             --GUID = @NewGUID;
             --Delete FROM ZnodeImportProcessLog  WHERE ImportTemplateId  = @TemplateId 
		
             IF NOT EXISTS
             (
                 SELECT TOP 1 1  FROM ZnodeImportLog
                 WHERE Guid = @NewGUID
                       AND ErrorDescription IN(43, 42)
                 AND ImportProcessLogId = @ImportProcessLogId
             )
                 BEGIN
                     IF @ImportHeadName = 'ProductUpdate'
                      BEGIN
						  IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
							  SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimProductId int null ';
						  ELSE 
							 SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimProductId int null Primary KEY CLUSTERED(RowNumber)';
						 
						  EXEC sys.sp_sqlexec @SQLQuery;
			         END;
                     ELSE
                     IF @ImportHeadName = 'Category'
                         BEGIN
							  IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimCategoryId int null ';
							  ElSE
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimCategoryId int null Primary KEY CLUSTERED(RowNumber) ';
						  
							  EXEC sys.sp_sqlexec @SQLQuery;
                         END;
                     ELSE
                         BEGIN
							IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1) ';
							Else 
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1) Primary KEY CLUSTERED(RowNumber)';
							
							EXEC sys.sp_sqlexec @SQLQuery;
                         END;;
                 END



			--Retrive PimProductId on the basis of SKU for update product 
			SET @SQLQuery = 'UPDATE tlb SET tlb.PimProductId = ZPAV.PimProductId 
							FROM ZnodePimAttributeValue AS ZPAV INNER JOIN ZnodePimAttributeValueLocale AS ZPAVL ON 
							(ZPAVL.PimAttributeValueId = ZPAV.PimAttributeValueId) 
							INNER JOIN [dbo].[ZnodePimAttribute] ZPA on ZPAV.PimAttributeId = ZPA.PimAttributeId AND ZPA.AttributeCode= ''SKU'' 
							INNER JOIN '+@TableName+' tlb ON ZPAVL.AttributeValue = ltrim(rtrim(tlb.SKU)) ';
			EXEC sys.sp_sqlexec	@SQLQuery	 	
	
			SET @SQLQuery = 'Select 19 ,''SKU'', SKU, '''+ @newGUID + ''',' + Convert(nvarchar(100),@UserId) + ',''' +  Convert(nvarchar(100),@GetDate) + ''',' + Convert(nvarchar(100),@UserId) + ',''' + Convert(nvarchar(100),@GetDate) + ''',' +  Convert(nvarchar(100),@ImportProcessLogId)  + ',RowNumber   from  '+ @TableName + ' where PimProductId Is null ';
			INSERT INTO ZnodeImportLog
                     (ErrorDescription,ColumnName,Data,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId,RowNumber )
        	EXEC sys.sp_sqlexec	@SQLQuery	 	


			--SET @SQLQuery = '
			--INSERT INTO ZnodeImportLog
			--		(ErrorDescription,ColumnName,Data,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId,RowNumber )
			--Select 19 ,''Attribute '', a.Name , '''+ @NewGUID + ''',' + Convert(nvarchar(100),@UserId) + ',''' +  Convert(nvarchar(100),@GetDate) + ''',' + Convert(nvarchar(100),@UserId) + ',''' + Convert(nvarchar(100),@GetDate) + ''',' +  Convert(nvarchar(100),@ImportProcessLogId)  + ',' +
			--' NULL  from tempdb.sys.columns a
			--inner join tempdb.sys.tables b on a.object_id = b.object_id 
			--where b.name in (''##ProductUpdate_' + @NewGUID +''') 
			--and NOT EXISTS (Select TOP 1 1 FROM ZnodePimAttribute PA WHERE a.name = PA.AttributeCode) AND a.Name <> ''guid''' 

   --     	EXEC sys.sp_sqlexec	@SQLQuery	 	

			SET @SQLQuery = 'Delete from  '+@TableName+ ' where PimProductId Is null ';
			EXEC sys.sp_sqlexec	@SQLQuery	 	
			
			DECLARE @RecordCount Bigint 
			SET @SQLQuery = ' Select @RecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
			EXEC sp_executesql @SQLQuery, N'@RecordCount BIGINT out' , @RecordCount=@RecordCount out


			--Generate new process for current import 
            --INSERT INTO ZnodeImportProcessLog(ImportTemplateId,Status,ProcessStartedDate,ProcessCompletedDate,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
            --SELECT @TemplateId,dbo.Fn_GetImportStatus(0),@GetDate,NULL,@UserId,@GetDate,@UserId,@GetDate;
            --SET @ImportProcessLogId = @@IDENTITY;

             SET @CreateDateString = CONVERT(VARCHAR(100), @UserId)+','''+CONVERT(VARCHAR(100), @GetDate)+''','+CONVERT(VARCHAR(100), @UserId)+','''+CONVERT(VARCHAR(100), @GetDate)+''', '+CONVERT(VARCHAR(100), @ImportProcessLogId);

             SELECT TOP 1 @ImportHeadId = ImportHeadId FROM ZnodeImportTemplate WHERE ImportTemplateId = @TemplateId;
             IF @ImportHeadName IN('ProductUpdate') AND @RecordCount > 0  
                 BEGIN 
					SET @IsCategory = 0 
				    --Get all default attribute values in attribute 
                    INSERT INTO @FamilyAttributeDetail
                    (PimAttributeId,AttributeTypeName,AttributeCode,SourceColumnName,IsRequired,PimAttributeFamilyId)
                    --Call Process to insert data of defeult family with source column name and target column name 
					SELECT distinct zpa.PimAttributeId, zat.AttributeTypeName, zpa.AttributeCode, zitm.SourceColumnName, zpa.IsRequired ,0
					FROM dbo.ZnodePimAttribute AS zpa INNER JOIN dbo.ZnodeAttributeType AS zat ON zat.AttributeTypeId = zpa.AttributeTypeId 
					LEFT OUTER JOIN dbo.ZnodeImportTemplateMapping AS zitm
					ON zpa.AttributeCode = zitm.SourceColumnName AND zitm.ImportTemplateId = @TemplateId
					WHERE zpa.IsCategory = 0 
	             END;
            -- Check attributes are manditory and not provided with source table
		   	if @TABLENAME	like '%tempdb..%'
				SET @SQLQuery = 'SELECT 42 AS ErrorDescription , SourceColumnName , '''' , '''+@NewGUID+''','+@CreateDateString+' from ZnodeImportTemplateMapping where ImportTemplateId = '+CONVERT(VARCHAR(100), @TemplateId)+' and ltrim(rtrim(SourceColumnName)) <> '''' AND ltrim(rtrim(SourceColumnName)) not in ( select isnull(Name ,'''') from tempdb.sys.columns where object_id = object_id('''+@TABLENAME+'''));';
			else 
				SET @SQLQuery = 'SELECT 42 AS ErrorDescription , SourceColumnName , '''' , '''+@NewGUID+''','+@CreateDateString+' from ZnodeImportTemplateMapping where ImportTemplateId = '+CONVERT(VARCHAR(100), @TemplateId)+' and ltrim(rtrim(SourceColumnName)) <> '''' AND ltrim(rtrim(SourceColumnName)) not in ( select isnull(Name ,'''') from sys.columns where object_id = object_id('''+@TABLENAME+'''));';
		 
		 
     		INSERT INTO ZnodeImportLog(ErrorDescription, ColumnName, Data, GUID,CreatedBy, CreatedDate,  ModifiedBy,ModifiedDate,ImportProcessLogId )
            EXEC sys.sp_sqlexec  @SQLQuery;
            IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM ZnodeImportLog
                 WHERE Guid = @NewGUID
                       AND ErrorDescription IN(43, 42)
                 AND ImportProcessLogId = @ImportProcessLogId
             )  AND @RecordCount > 0  
                 BEGIN
                     --Get all default attribute values in attribute 
                     IF @ImportHeadName IN('ProductUpdate', 'Category')
                         BEGIN
                             -- Check attributes are manditory and not provided with source table
                             --INSERT INTO ZnodeImportLog
                             --(ErrorDescription,
                             -- ColumnName,
                             -- Data,
                             -- GUID,
                             -- CreatedBy,
                             -- CreatedDate,
                             -- ModifiedBy,
                             -- ModifiedDate,
                             -- ImportProcessLogId
                             --)
                             --       SELECT '14' AS ErrorDescription,
                             --              AttributeCode,
                             --              '',
                             --              @NewGUID,
                             --              @UserId,
                             --              @GetDate,
                             --              @UserId,
                             --              @GetDate,
                             --              @ImportProcessLogId
                             --       FROM @FamilyAttributeDetail
                             --       WHERE ISNULL(SourceColumnName, '') = ''
                             --             AND IsRequired = 1;  

                             -- Read all attribute details with their datatype
                             INSERT INTO @AttributeDetail
                             (PimAttributeId,
                              AttributeTypeName,
                              AttributeCode,
                              SourceColumnName,
                              IsRequired,
                              ControlName,
                              ValidationName,
                              SubValidationName,
                              ValidationValue,
                              RegExp
                             )
                             EXEC Znode_ImportGetTemplateDetails
                                  @TemplateId=@TemplateId,
								  @DefaultFamilyId=@DefaultFamilyId;

							 ---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
							 Delete FAD from @AttributeDetail FAD
							 where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
							 and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
										   inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)

                             DELETE FROM @AttributeDetail
                             WHERE AttributeTypeName = 'Image'
                                   AND ValidationName <> 'IsAllowMultiUpload';
                             IF NOT EXISTS
                             (
                                 SELECT TOP 1 1
                                 FROM INFORMATION_SCHEMA.TABLES
                                 WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#DefaultAttributeCode'
                             )
                                 BEGIN
                                     CREATE TABLE #DefaultAttributeCode
                                     (AttributeTypeName          VARCHAR(300),
                                      PimAttributeDefaultValueId INT,
                                      PimAttributeId             INT,
                                      AttributeDefaultValueCode  VARCHAR(100)
                                     );
                                     INSERT INTO #DefaultAttributeCode
                                     (AttributeTypeName,
                                      PimAttributeDefaultValueId,
                                      PimAttributeId,
                                      AttributeDefaultValueCode
                                     )
                                     --Call Process to insert default data value 
                                     EXEC Znode_ImportGetPimAttributeDefaultValue;
                                     DELETE FROM #DefaultAttributeCode
                                     WHERE AttributeTypeName = 'Yes/No';
                                 END;
                             ELSE
                                 BEGIN
                                     DROP TABLE #DefaultAttributeCode;
                                 END;
                         END;

                     --	Check attributes are not mapped with (Default / Other) family of Pim Product
                     --	INSERT INTO ZnodeImportLog ( ErrorDescription , ColumnName , Data , GUID , CreatedBy , CreatedDate , ModifiedBy , ModifiedDate , ImportProcessLogId)
                     --	SELECT '1' AS ErrorDescription , SourceColumnName , '' , @NewGUID , @UserId , @GetDate , @UserId , @GetDate , @ImportProcessLogId
                     --	FROM @AttributeDetail WHERE PimAttributeId NOT IN ( SELECT zpfgm.PimAttributeId FROM dbo.ZnodePimFamilyGroupMapper AS zpfgm);
                     --	Verify data in global temporary table (column wise)
						
                     DECLARE Cr_Attribute CURSOR LOCAL FAST_FORWARD
                     FOR SELECT PimAttributeId,
                                AttributeTypeName,
                                AttributeCode,
                                IsRequired,
                                SourceColumnName,
                                ControlName,
                                ValidationName,
                                SubValidationName,
                                ValidationValue,
                                RegExp
                         FROM @AttributeDetail
                         WHERE ISNULL(SourceColumnName, '') <> '';
                     OPEN Cr_Attribute;
                     FETCH NEXT FROM Cr_Attribute INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @ControlName, @ValidationName, @SubValidationName, @ValidationValue, @RegExp;
                     WHILE @@FETCH_STATUS = 0
                         BEGIN
				             IF @AttributeTypeName = 'Number'
                                 BEGIN
							      EXEC Znode_ImportValidateNumber
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @ImportHeadId = @ImportHeadId,
                                          @ImportProcessLogId = @ImportProcessLogId;
                                 END;
							 -- Check invalid date
							
                             IF @AttributeTypeName = 'Date'
                                 BEGIN
                                     EXEC Znode_ImportValidateDate
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @ImportHeadId = @ImportHeadId,
                                          @ImportProcessLogId = @ImportProcessLogId;
                                 END;
							 -- Check Manditory Data
		 					 IF @IsRequired = 1 AND @CheckedSourceColumn <> @SourceColumnName
								BEGIN
									SET @CheckedSourceColumn = @SourceColumnName;
									EXEC Znode_ImportValidateManditoryData
									@TableName = @TableName,
									@SourceColumnName = @SourceColumnName,
									@CreateDateString = @CreateDateString,
									@ValidationName = @ValidationName,
									@ControlName = @ControlName,
									@ValidationValue = @ValidationValue,
									@NewGUID = @NewGUID,
									@ImportHeadId = @ImportHeadId;
								END;
							 --END 
							
                             IF @AttributeTypeName = 'Text'
                                 BEGIN
								 
						              EXEC Znode_ImportValidateManditoryText
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @LocaleId = @LocaleId,
                                          @DefaultLocaleId = @DefaultLocaleId,
                                          @AttributeId = @AttributeId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @ImportHeadId = @ImportHeadId;
                                 END;
                             IF @AttributeTypeName = 'Image'
                                 BEGIN
                                     EXEC Znode_ImportValidateImageData
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @LocaleId = @LocaleId,
                                          @DefaultLocaleId = @DefaultLocaleId,
                                          @AttributeId = @AttributeId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @ImportHeadId = @ImportHeadId;
                                 END;
                             --Check Default data value is valid 
                             IF @ImportHeadName IN('ProductUpdate', 'Category')
                                 BEGIN
                                     IF @AttributeId IN
                                     (
                                         SELECT PimAttributeId
                                         FROM #DefaultAttributeCode
                                     )
                                         BEGIN
							
                                                   ---Verify Image file is exists in media table or not 
                                             SET @SQLQuery = ' INSERT INTO #InvalidDefaultData (RowNumber, Value, ColumnName) 
                                             SELECT ROWNUMBER , (Select TOP 1 Item from dbo.split(' + @SourceColumnName + ','','')  SP WHERE NOT EXISTS 
                                             (Select ToP 1 1 FROM #DefaultAttributeCode DAC WHERE 
                                              DAC.AttributeTypeName <> ''Yes/No'' AND DAC.AttributeDefaultValueCode IS NOT NULL AND DAC.PimAttributeId = 
                                             ' + CONVERT(VARCHAR(100), @AttributeId) + ' AND ltrim(rtrim(SP.Item) ) = DAC.AttributeDefaultValueCode
                                             )), ''' + @SourceColumnName + ''' as [ColumnName]  FROM ' + @TableName
                                             + ' Where ISnull(' + @SourceColumnName +  ','''') <> '''''

						
                                             EXEC sys.sp_sqlexec @SQLQuery;
                                             -- Check Invalid Image 
                                             
											 SET @SQLQuery = 'SELECT ''9 '' ErrorDescription,'''+@SourceColumnName+''' as [ColumnName], 
                                             Value AS  AttributeValue,RowNumber ,'''+@NewGUID+''',  '+@CreateDateString+' FROM #InvalidDefaultData Where Value IS NOT NULL'
                                             INSERT INTO ZnodeImportLog (ErrorDescription, ColumnName, Data, RowNumber, GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
                                             EXEC sys.sp_sqlexec @SQLQuery;

											 Delete from #InvalidDefaultData

       
                                         END;
                                 END;
							
                             FETCH NEXT FROM Cr_Attribute INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @ControlName, @ValidationName, @SubValidationName, @ValidationValue, @RegExp;
                         END;
                     CLOSE Cr_Attribute;
                     DEALLOCATE Cr_Attribute;
                     --SELECT top 1 1 FROM @FamilyAttributeDetail where  iSNULL(SourceColumnName,'') = ''  and IsRequired = 1
                 END;
            --COMMIT TRAN TRN_ImportValidProductData;
			 

		IF @ImportHeadName IN('ProductUpdate')
		 BEGIN
		 Declare @SQLQueryNew NVARCHAR(4000)
		 Declare @SourceColumnNameProduct nvarchar(4000)   	 
		 SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'SKU'
		 AND ImportTemplateId = @TemplateId

		
  	--	 SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName = ''SKU  '' + ' + '  ' +@SourceColumnNameProduct + ' ' + ' + ' + ' '  + ' ZIL.ColumnName + ''  Attribute''
		 --FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			--  WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber is not null';
            
			--SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  SKU - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		 --   FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			--WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
   --         PRINT @SQLQueryNew

            SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  SKU - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew

			EXEC sys.sp_sqlexec  @SQLQueryNew;
			
		END 

					 	 		 
  			 SET @SQLQuery = 'Delete FROM  '+@TableName+' Where Rownumber in (Select Rownumber from ZnodeImportLog  WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND Rownumber is not null)';
             EXEC sys.sp_sqlexec  @SQLQuery;

			 ---------------------------------------------------------------------------

		--	 Declare @SourceColumnNameProduct nvarchar(4000)  
		--	 Declare @SQLQueryNew NVARCHAR(4000) 	 
		-- SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'SKU'
		-- AND ImportTemplateId = @TemplateId


		--INSERT INTO ZnodeImportLog  (ErrorDescription,ColumnName, Data, GUID,CreatedBy,
  --          CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
		--	EXEC sys.sp_sqlexec  @SQLQueryNew;

		--	SET @SQLQueryNew = 'SELECT ''Successfully Imported '' ErrorDescription,''SKU'',
		--	'''+@SourceColumnNameProduct+''' AS [Data], 
  --          RowNumber ,'''+@NewGUID+''',  '+@CreateDateString+' FROM '+@TableName+' WHERE Rownumber IS NOT NULL'

------------------------------------------------------------------------------------------------

		 --SET @SQLQuery = 'Select *  FROM  '+@TableName
   --          EXEC sys.sp_sqlexec  @SQLQuery;

             IF @ImportHeadName IN('ProductUpdate')
                 BEGIN
                     IF NOT EXISTS
                
					 (
						 SELECT TOP 1 1
						 FROM ZnodeImportLog
						 WHERE Guid = @NewGUID
							   AND ErrorDescription IN (43, 42)
						 AND ImportProcessLogId = @ImportProcessLogId
					 ) AND @RecordCount > 0 
                         BEGIN
                             IF @IsCategory = 0
                                 BEGIN
                                     EXEC Znode_ImportPartialPimProductData
                                          @TableName = @TableName,
                                          @NewGUID = @NewGUID,
                                          @TemplateId = @TemplateId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @UserId = @UserId,
                                          @LocaleId = @LocaleId,
                                          @DefaultFamilyId = @DefaultFamilyId;
	
                                 END;
                            
                         END;

					ELSE 
					BEGIN
					-- Update Record count in log 					
					SET @SQLQuery = ' Select @FailedRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
					EXEC	sp_executesql @SQLQuery , N'@FailedRecordCount BIGINT out' , @FailedRecordCount =@FailedRecordCount out
					
					SELECT @SuccessRecordCount = 0
					UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount , TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
					WHERE ImportProcessLogId = @ImportProcessLogId;
					END

                 END
				
			SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
			SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
			
			EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount out

			UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
			WHERE ImportProcessLogId = @ImportProcessLogId;

		   EXEC Znode_ImportReadErrorLog
                  @ImportProcessLogId = @ImportProcessLogId,
                  @NewGUID = @NewGUID;
             DROP TABLE #GlobalTempTableColumns;

             -- Finally call product insert process if error not found in error log table 
             IF EXISTS
             (
                 SELECT TOP 1 1
                 FROM ZnodeImportLog
                 WHERE ImportProcessLogId = @ImportProcessLogId
                       AND Guid = @NewGUID
             )
                 BEGIN
                     --Update process with completed status for current import 
                     UPDATE ZnodeImportProcessLog
                       SET
                           Status = dbo.Fn_GetImportStatus(3),
                           ProcessCompletedDate =  Getdate() 
                       WHERE ImportProcessLogId = @ImportProcessLogId;
                 END;
		
				--SET @SQLQuery = 'select TOP 1 * from  ' + @TableName
				--EXEC sys.sp_sqlexec @SQLQuery;
        END TRY
      
		BEGIN CATCH 
			EXEC Znode_ImportReadErrorLog   @ImportProcessLogId = @ImportProcessLogId,  @NewGUID = @NewGUID; 
				--Update process with failed status for current import 
			--	UPDATE ZnodeImportProcessLog SET Status = dbo.Fn_GetImportStatus(3),ProcessCompletedDate = @GetDate WHERE ImportProcessLogId = @ImportProcessLogId;

			SET @Status = 0;
			DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportPartialValidatePimProductData @ImportHeadName = '''+ISNULL(@ImportHeadName,'''''')+''',@TableName='''+ISNULL(CAST(@TableName AS
			VARCHAR(50)),'''''')+''',@TemplateId='+ISNULL(CAST(@TemplateId AS VARCHAR(50)),'''')+',@NewGUID='''+ISNULL(@NewGUID,'''''')+''',@UserId='+ISNULL(CAST(@UserId AS VARCHAR(50)),'''')+',@LocaleId='+ISNULL(CAST(@LocaleId AS VARCHAR(50)),'''')+',
			@IsCategory='+ISNULL(CAST(@IsCategory AS VARCHAR(50)),'''')+',@DefaultFamilyId='+ISNULL(CAST(@DefaultFamilyId AS VARCHAR(50)),'''')+',@ImportProcessLogId='+ISNULL(CAST(@ImportProcessLogId AS VARCHAR(50)),'''')+',
			@PriceListId='+ISNULL(CAST(@PriceListId AS VARCHAR(50)),'''')+',@CountryCode='''+ISNULL(CAST(@CountryCode AS VARCHAR(50)),'''''')+''',@PimCatalogId='+ISNULL(CAST(@PimCatalogId AS VARCHAR(50)),'''')+',
			@PortalId='+ISNULL(CAST(@PortalId AS VARCHAR(50)),'''')+',@IsAccountAddress='+ISNULL(CAST(@IsAccountAddress AS VARCHAR(50)),'''')

			SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    

			EXEC Znode_InsertProcedureErrorLog
			@ProcedureName = 'Znode_ImportPartialValidatePimProductData',
			@ErrorInProcedure = 'Znode_ImportPartialValidatePimProductData',
			@ErrorMessage = @ErrorMessage,
			@ErrorLine = @ErrorLine,
			@ErrorCall = @ErrorCall;
		END CATCH 

     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportValidatePimProductData')
BEGIN 
	DROP PROCEDURE Znode_ImportValidatePimProductData
END
GO
CREATE PROCEDURE [dbo].[Znode_ImportValidatePimProductData]
(   @ImportHeadName     VARCHAR(200),
    @TableName          VARCHAR(200),
    @NewGUID            NVARCHAR(200),
    @TemplateId         INT,
    @UserId             INT,
    @LocaleId           INT           = 1,
    @IsCategory         INT           = 0,
    @DefaultFamilyId    INT           = 0,
    @ImportProcessLogId INT,
    @PriceListId        INT,
	@CountryCode VARCHAR(100) = '',
	@PimCatalogId         INT    = 0 ,
	@PortalId int = 0,
	@IsAccountAddress bit = 0 )
AS
     SET NOCOUNT ON;

/*
    Summary :   Import PimProduct / Price / Inventory / Category / Category Associated Data 
    Process :   Admin site will upload excel / csv file in database and create global temporary table
				Procedure Znode_ImportValidatePimProductData will validate data with attribute validation rule
				If datatype validation issue found in input daata will logged into table "ZnodeImportLog"
				If Data is correct and record count in table ZnodeImportLog will be 0 then process for import data into Base tables
				To import data call procedure "Znode_ImportPimProductData"
    		  
				SourceColumnName: CSV file column headers
				TargetColumnName: Attributecode from ZnodePimAttribute Table (Consider those Attributecodes configured with default family only)
*/

     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             --BEGIN TRAN TRN_ImportValidProductData;
             DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
             DECLARE @SQLQuery NVARCHAR(MAX), @AttributeTypeName NVARCHAR(100), @AttributeCode NVARCHAR(300), @AttributeId INT, @IsRequired BIT, @SourceColumnName NVARCHAR(600), @ControlName VARCHAR(300), @ValidationName VARCHAR(100), @SubValidationName VARCHAR(300), @ValidationValue VARCHAR(300), @RegExp VARCHAR(300), @CreateDateString NVARCHAR(300), @DefaultLocaleId INT, @ImportHeadId INT, @CheckedSourceColumn NVARCHAR(600)= '', @Status BIT= 0,
			    @CsvColumnString nvarchar(max),
				@FailedRecordCount BIGINT,
				@SuccessRecordCount BIGINT

             DECLARE @FamilyAttributeDetail TABLE
             (PimAttributeId       INT,
              AttributeTypeName    VARCHAR(300),
              AttributeCode        VARCHAR(300),
              SourceColumnName     NVARCHAR(600),
              IsRequired           BIT,
              PimAttributeFamilyId INT
             );
             DECLARE @AttributeDetail TABLE
             (PimAttributeId    INT,
              AttributeTypeName VARCHAR(300),
              AttributeCode     VARCHAR(300),
              SourceColumnName  NVARCHAR(600),
              IsRequired        BIT,
              ControlName       VARCHAR(300),
              ValidationName    VARCHAR(100),
              SubValidationName VARCHAR(300),
              ValidationValue   VARCHAR(300),
              RegExp            VARCHAR(300)
             );

			 --IF ('tempdb..#DefaultAttributeCode') IS NOT NULL
				--drop table #DefaultAttributeCode

			CREATE TABLE #DefaultAttributeCode
			(AttributeTypeName          VARCHAR(300),
			PimAttributeDefaultValueId INT,
			PimAttributeId             INT,
			AttributeDefaultValueCode  VARCHAR(100)
			);

			--SET @SQLQuery = 'Select * into _tempSeo FROM  '+@TableName
   --          EXEC sys.sp_sqlexec  @SQLQuery;


			IF( @ImportHeadName = 'B2BCustomer' )
			BEGIN
				EXEC ZnodeB2BCustomerMapping @ImportHeadName = @ImportHeadName, @TableName = @TableName
			END
		
             DECLARE @GlobalTempTableColumns TABLE(ColumnName NVARCHAR);
             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM INFORMATION_SCHEMA.TABLES
                 WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#InvalidDefaultData'
             )
                 CREATE TABLE #InvalidDefaultData
                 (RowNumber  INT,
                  Value      NVARCHAR(MAX),
                  ColumnName NVARCHAR(600)
                 );
             ELSE
             DROP TABLE #InvalidDefaultData;
             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM INFORMATION_SCHEMA.TABLES
                 WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#GlobalTempTableColumns'
             )
                 BEGIN

                     SET @SQLQuery = 'SELECT Column_Name, '''+@ImportHeadName+''' AS ImportHeadName  from tempdb.INFORMATION_SCHEMA.COLUMNS	where table_name = object_name(object_id('''+@TableName+'''),
					(select database_id from sys.databases where name = ''tempdb''))';
                     CREATE TABLE #GlobalTempTableColumns
                     (ColumnName   NVARCHAR(MAX),
                      TypeOfImport NVARCHAR(100)
                     );
                     INSERT INTO #GlobalTempTableColumns
                     (ColumnName,
                      TypeOfImport
                     )
                     EXEC sys.sp_sqlexec
                          @SQLQuery;
                 END;
		  -- If Exists ( Select  count(1)  from #GlobalTempTableColumns GROUP BY ColumnName  Having count(1) > 1 )
		  -- Begin
			 --   INSERT INTO ZnodeImportLog(ErrorDescription,ColumnName,Data,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
    --               Select  46,ColumnName,'',@newGUID,@UserId,@GetDate,@UserId,@GetDate, @ImportProcessLogId  from #GlobalTempTableColumns GROUP BY ColumnName  Having count(1) > 1 
				
				----'Multiple occurance of column are not allow for'
		  -- END

             IF EXISTS
             (
                 SELECT TOP 1 1
                 FROM #GlobalTempTableColumns
                 WHERE ColumnName IN('PimCategoryId', 'PimProductId', 'RowNumber')
             )
                 BEGIN
                     INSERT INTO ZnodeImportLog
                     (ErrorDescription,
                      ColumnName,
                      Data,
                      GUID,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate,
                      ImportProcessLogId
                     )
                     VALUES
                     (43,
                      '',
                      '',
                      @newGUID,
                      @UserId,
                      @GetDate,
                      @UserId,
                      @GetDate,
                      @ImportProcessLogId
                     );
                 END;
             SET @DefaultLocaleId = dbo.Fn_GetDefaultLocaleId();
             --Remove old error log 
             --DELETE FROM ZnodeImportLog WHERE ImportProcessLogId in (select ImportProcessLogId  FROM ZnodeImportProcessLog  WHERE ImportTemplateId  = @TemplateId )
             --GUID = @NewGUID;
             --Delete FROM ZnodeImportProcessLog  WHERE ImportTemplateId  = @TemplateId 
		
             IF NOT EXISTS
             (
                 SELECT TOP 1 1  FROM ZnodeImportLog
                 WHERE Guid = @NewGUID
                       AND ErrorDescription IN(43, 42)
                 AND ImportProcessLogId = @ImportProcessLogId
             )
                 BEGIN
                     IF @ImportHeadName = 'Product'
                      BEGIN
						  IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
							  SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimProductId int null ';
						  ELSE 
							 SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimProductId int null Primary KEY CLUSTERED(RowNumber)';
						 
						  EXEC sys.sp_sqlexec @SQLQuery;
			         END;
                     ELSE
                     IF @ImportHeadName = 'Category'
                         BEGIN
							  IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimCategoryId int null ';
							  ElSE
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimCategoryId int null Primary KEY CLUSTERED(RowNumber) ';
						  
							  EXEC sys.sp_sqlexec @SQLQuery;
                         END;
                     ELSE
                         BEGIN
							IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1) ';
							Else 
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1) Primary KEY CLUSTERED(RowNumber)';
							
							EXEC sys.sp_sqlexec @SQLQuery;
                         END;;
                 END;
				
             --Generate new process for current import 
             --INSERT INTO ZnodeImportProcessLog(ImportTemplateId,Status,ProcessStartedDate,ProcessCompletedDate,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             --SELECT @TemplateId,dbo.Fn_GetImportStatus(0),@GetDate,NULL,@UserId,@GetDate,@UserId,@GetDate;
             --SET @ImportProcessLogId = @@IDENTITY;

             SET @CreateDateString = CONVERT(VARCHAR(100), @UserId)+','''+CONVERT(VARCHAR(100), @GetDate)+''','+CONVERT(VARCHAR(100), @UserId)+','''+CONVERT(VARCHAR(100), @GetDate)+''', '+CONVERT(VARCHAR(100), @ImportProcessLogId);

             SELECT TOP 1 @ImportHeadId = ImportHeadId FROM ZnodeImportTemplate WHERE ImportTemplateId = @TemplateId;
             IF @DefaultFamilyId = 0
                AND @ImportHeadName IN('Product', 'Category')
                 BEGIN 
                     --Get all default attribute values in attribute 
                     INSERT INTO @FamilyAttributeDetail
                     (PimAttributeId,
                      AttributeTypeName,
                      AttributeCode,
                      SourceColumnName,
                      IsRequired,
                      PimAttributeFamilyId
                     )
                     --Call Process to insert data of defeult family with source column name and target column name 
                     EXEC Znode_ImportGetTemplateDetails
                          @TemplateId = @TemplateId,
                          @IsValidationRules = 0,
                          @IsIncludeRespectiveFamily = 1,
                          @IsCategory = @IsCategory,
                          @DefaultFamilyId = @DefaultFamilyId;

					---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
					Delete FAD from @FamilyAttributeDetail FAD
					where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
					and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					               inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
                 END;
             ELSE
             IF @ImportHeadName IN('Product', 'Category')
                 BEGIN
                     --Get all default attribute values in attribute 
                     INSERT INTO @FamilyAttributeDetail
                     (PimAttributeId,
                      AttributeTypeName,
                      AttributeCode,
                      SourceColumnName,
                      IsRequired,
                      PimAttributeFamilyId
                     )
                     --Call Process to insert data of defeult family with source column name and target column name 
                     EXEC Znode_ImportGetTemplateDetails
                          @TemplateId = @TemplateId,
                          @IsValidationRules = 0,
                          @IsIncludeRespectiveFamily = 1,
                          @IsCategory = @IsCategory,
                          @DefaultFamilyId = @DefaultFamilyId;

					---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
					Delete FAD from @FamilyAttributeDetail FAD
					where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
					and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					               inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
                 END;      
             -- Check attributes are manditory and not provided with source table
		   	 
			if @TABLENAME	like '%tempdb..%'
				SET @SQLQuery = 'SELECT 42 AS ErrorDescription , SourceColumnName , '''' , '''+@NewGUID+''','+@CreateDateString+' from ZnodeImportTemplateMapping where ImportTemplateId = '+CONVERT(VARCHAR(100), @TemplateId)+' and ltrim(rtrim(SourceColumnName)) <> '''' AND ltrim(rtrim(SourceColumnName)) not in ( select isnull(Name ,'''') from tempdb.sys.columns where object_id = object_id('''+@TABLENAME+'''));';
			else 
				SET @SQLQuery = 'SELECT 42 AS ErrorDescription , SourceColumnName , '''' , '''+@NewGUID+''','+@CreateDateString+' from ZnodeImportTemplateMapping where ImportTemplateId = '+CONVERT(VARCHAR(100), @TemplateId)+' and ltrim(rtrim(SourceColumnName)) <> '''' AND ltrim(rtrim(SourceColumnName)) not in ( select isnull(Name ,'''') from sys.columns where object_id = object_id('''+@TABLENAME+'''));';
		 
			Declare @Tbl_CsvDynamicColulmns TABLE (ColumnName nvarchar(300), SequenceNumber int, DataType nvarchar(50),IsRequired bit )

			INSERT INTO @Tbl_CsvDynamicColulmns(ColumnName , SequenceNumber , DataType ,IsRequired)
			SELECT DISTINCT ZITM.SourceColumnName ,ZIAV.SequenceNumber, ZIAV.AttributeTypeName, ZIAV.IsRequired
			FROM ZnodeImportAttributeValidation ZIAV LEFT OUTER JOIN 
			ZnodeImportTemplate  ZIT ON ZIT.ImportHeadId =  ZIAV.ImportHeadId AND ZIT.ImportTemplateId  = @TemplateId
			LEFT OUTER JOIN ZnodeImportTemplateMapping  ZITM ON ZITM.ImportTemplateId = ZIT.ImportTemplateId  
			and ZIAV.AttributeCode = ZITM.TargetColumnName
			AND ZITM.ImportTemplateId  = @TemplateId
			WHERE ZIAV.ImportHeadId = @ImportHeadId --ORDER BY ZIAV.SequenceNumber

		    SELECT @CsvColumnString = SUBSTRING ((Select ',' +  ISNULL(ColumnName ,'NULL') from @Tbl_CsvDynamicColulmns ORDER BY SequenceNumber FOR XML PATH ('')),2,4000) 


     		INSERT INTO ZnodeImportLog(ErrorDescription, ColumnName, Data, GUID,CreatedBy, CreatedDate,  ModifiedBy,ModifiedDate,ImportProcessLogId
             )
             EXEC sys.sp_sqlexec  @SQLQuery;
             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM ZnodeImportLog
                 WHERE Guid = @NewGUID
                       AND ErrorDescription IN(43, 42)
                 AND ImportProcessLogId = @ImportProcessLogId
             )
                 BEGIN
                     --Get all default attribute values in attribute 
                     IF @ImportHeadName IN('Product', 'Category')
                         BEGIN
                             -- Check attributes are manditory and not provided with source table
                             INSERT INTO ZnodeImportLog
                             (ErrorDescription,
                              ColumnName,
                              Data,
                              GUID,
                              CreatedBy,
                              CreatedDate,
                              ModifiedBy,
                              ModifiedDate,
                              ImportProcessLogId
                             )
                                    SELECT '14' AS ErrorDescription,
                                           AttributeCode,
                                           '',
                                           @NewGUID,
                                           @UserId,
                                           @GetDate,
                                           @UserId,
                                           @GetDate,
                                           @ImportProcessLogId
                                    FROM @FamilyAttributeDetail
                                    WHERE ISNULL(SourceColumnName, '') = ''
                                          AND IsRequired = 1;  

                             -- Read all attribute details with their datatype
                             INSERT INTO @AttributeDetail
                             (PimAttributeId,
                              AttributeTypeName,
                              AttributeCode,
                              SourceColumnName,
                              IsRequired,
                              ControlName,
                              ValidationName,
                              SubValidationName,
                              ValidationValue,
                              RegExp
                             )
                             EXEC Znode_ImportGetTemplateDetails
                                  @TemplateId=@TemplateId,
								  @DefaultFamilyId=@DefaultFamilyId;

							---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
							Delete FAD from @AttributeDetail FAD
							where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
							and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
										   inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode) 

                             DELETE FROM @AttributeDetail
                             WHERE AttributeTypeName = 'Image'
                                   AND ValidationName <> 'IsAllowMultiUpload';
                             --IF NOT EXISTS
                             --(
                             --    SELECT TOP 1 1
                             --    FROM INFORMATION_SCHEMA.TABLES
                             --    WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#DefaultAttributeCode'
                             --)
                             --    BEGIN
                             --        CREATE TABLE #DefaultAttributeCode
                             --        (AttributeTypeName          VARCHAR(300),
                             --         PimAttributeDefaultValueId INT,
                             --         PimAttributeId             INT,
                             --         AttributeDefaultValueCode  VARCHAR(100)
                             --        );
                                     INSERT INTO #DefaultAttributeCode
                                     (AttributeTypeName,
                                      PimAttributeDefaultValueId,
                                      PimAttributeId,
                                      AttributeDefaultValueCode
                                     )
                                     --Call Process to insert default data value 
                                     EXEC Znode_ImportGetPimAttributeDefaultValue;

                                     DELETE FROM #DefaultAttributeCode
                                     WHERE AttributeTypeName = 'Yes/No';
                             --    END;
                             --ELSE
                             --    BEGIN
                             --        DROP TABLE #DefaultAttributeCode;
                             --    END;
                         END;
                     ELSE
                         BEGIN
					
					
                             --Read all attribute details with their datatype
                             INSERT INTO @AttributeDetail
                             (AttributeTypeName,
                              AttributeCode,
                              SourceColumnName,
                              IsRequired,
                              ControlName,
                              ValidationName,
                              SubValidationName,
                              ValidationValue,
                              RegExp
                             )
                             EXEC [Znode_ImportGetOtherTemplateDetails]
                                  @TemplateId = @TemplateId,
                                  @ImportHeadId = @ImportHeadId;

							IF @ImportHeadName IN('B2BCustomer')
							BEGIN

								INSERT INTO @AttributeDetail
								 (PimAttributeId,
								 AttributeTypeName,
								  AttributeCode,
								  SourceColumnName,
								  IsRequired,
								  ControlName,
								  ValidationName,
								  SubValidationName,
								  ValidationValue,
								  RegExp
								 )
								 EXEC [Znode_ImportGetGlobalTemplateDetails]
									  @TemplateId = @TemplateId,
									  @ImportHeadId = @ImportHeadId;

								
								INSERT INTO #DefaultAttributeCode
								(AttributeTypeName,
								PimAttributeDefaultValueId,
								PimAttributeId,
								AttributeDefaultValueCode
								)
								--Call Process to insert default data value 
								EXEC Znode_ImportGetGlobalAttributeDefaultValue;

								DELETE FROM #DefaultAttributeCode
								WHERE AttributeTypeName = 'Yes/No';

							END
						
                             --Check attributes are not mapped with any family of Pim Product
                             INSERT INTO ZnodeImportLog
                             (ErrorDescription,
                              ColumnName,
                              Data,
                              GUID,
                              CreatedBy,
                              CreatedDate,
                              ModifiedBy,
                              ModifiedDate,
                              ImportProcessLogId
                             )
                                    SELECT DISTINCT
                                           '14' AS ErrorDescription,
                                           AttributeCode,
                                           '',
                                           @NewGUID,
                                           @UserId,
                                           @GetDate,
                                           @UserId,
                                           @GetDate,
                                           @ImportProcessLogId
                                    FROM @AttributeDetail
                                    WHERE ISNULL(SourceColumnName, '') = ''   AND IsRequired = 1;  ;

                         END;
						
                     --	Check attributes are not mapped with (Default / Other) family of Pim Product
                     --	INSERT INTO ZnodeImportLog ( ErrorDescription , ColumnName , Data , GUID , CreatedBy , CreatedDate , ModifiedBy , ModifiedDate , ImportProcessLogId)
                     --	SELECT '1' AS ErrorDescription , SourceColumnName , '' , @NewGUID , @UserId , @GetDate , @UserId , @GetDate , @ImportProcessLogId
                     --	FROM @AttributeDetail WHERE PimAttributeId NOT IN ( SELECT zpfgm.PimAttributeId FROM dbo.ZnodePimFamilyGroupMapper AS zpfgm);
                     --	Verify data in global temporary table (column wise)
					
                     DECLARE Cr_Attribute CURSOR LOCAL FAST_FORWARD
                     FOR SELECT PimAttributeId,
                                AttributeTypeName,
                                AttributeCode,
                                IsRequired,
                                SourceColumnName,
                                ControlName,
                                ValidationName,
                                SubValidationName,
                                ValidationValue,
                                RegExp
                         FROM @AttributeDetail
                         WHERE ISNULL(SourceColumnName, '') <> '';
                     OPEN Cr_Attribute;
                     FETCH NEXT FROM Cr_Attribute INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @ControlName, @ValidationName, @SubValidationName, @ValidationValue, @RegExp;
                     WHILE @@FETCH_STATUS = 0
                         BEGIN
				             IF @AttributeTypeName = 'Number'
                                 BEGIN
							      EXEC Znode_ImportValidateNumber
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @ImportHeadId = @ImportHeadId,
                                          @ImportProcessLogId = @ImportProcessLogId;
                                 END;
							 -- Check invalid date
							
                             IF @AttributeTypeName = 'Date'
                                 BEGIN
                                     EXEC Znode_ImportValidateDate
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @ImportHeadId = @ImportHeadId,
                                          @ImportProcessLogId = @ImportProcessLogId;
                                 END;
							 -- Check Manditory Data
		 					 IF @IsRequired = 1 AND @CheckedSourceColumn <> @SourceColumnName
								BEGIN
									SET @CheckedSourceColumn = @SourceColumnName;
									EXEC Znode_ImportValidateManditoryData
									@TableName = @TableName,
									@SourceColumnName = @SourceColumnName,
									@CreateDateString = @CreateDateString,
									@ValidationName = @ValidationName,
									@ControlName = @ControlName,
									@ValidationValue = @ValidationValue,
									@NewGUID = @NewGUID,
									@ImportHeadId = @ImportHeadId;
								END;
							 --END 
							
                             IF @AttributeTypeName = 'Text'
                                 BEGIN
								 
						              EXEC Znode_ImportValidateManditoryText
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @LocaleId = @LocaleId,
                                          @DefaultLocaleId = @DefaultLocaleId,
                                          @AttributeId = @AttributeId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @ImportHeadId = @ImportHeadId;
                                 END;
                             IF @AttributeTypeName = 'Image'
                                 BEGIN
                                     EXEC Znode_ImportValidateImageData
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @LocaleId = @LocaleId,
                                          @DefaultLocaleId = @DefaultLocaleId,
                                          @AttributeId = @AttributeId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @ImportHeadId = @ImportHeadId;
                                 END;

					

                             --Check Default data value is valid 
                             IF @ImportHeadName IN('Product', 'Category','B2BCustomer')
                                 BEGIN
                                     IF @AttributeId IN
                                     (
                                         SELECT PimAttributeId
                                         FROM #DefaultAttributeCode
                                     )
                                         BEGIN
							
                                            IF  @AttributeTypeName = 'Multi Select'
											 BEGIN
										 		 ---Verify Image file is exists in media table or not 
												 SET @SQLQuery = ' INSERT INTO #InvalidDefaultData (RowNumber, Value, ColumnName) 
												 SELECT ROWNUMBER , (Select TOP 1 Item from dbo.split(' + @SourceColumnName + ','','')  SP WHERE NOT EXISTS 
												 (Select ToP 1 1 FROM #DefaultAttributeCode DAC WHERE 
												  DAC.AttributeTypeName <> ''Yes/No'' AND DAC.AttributeDefaultValueCode IS NOT NULL AND DAC.PimAttributeId = 
												 ' + CONVERT(VARCHAR(100), @AttributeId) + ' AND ltrim(rtrim(SP.Item) ) = DAC.AttributeDefaultValueCode
												 )), ''' + @SourceColumnName + ''' as [ColumnName]  FROM ' + @TableName
												 + ' Where ISnull(' + @SourceColumnName +  ','''') <> '''''
												EXEC sys.sp_sqlexec @SQLQuery;
											  END
											  ELSE IF @AttributeTypeName = 'Simple Select'
											  BEGIN
						
												---Verify Image file is exists in media table or not 
												 SET @SQLQuery = ' INSERT INTO #InvalidDefaultData (RowNumber, Value, ColumnName) 
												 SELECT ROWNUMBER , ' + @SourceColumnName + ' , ''' + @SourceColumnName + ''' as [ColumnName]  FROM ' + @TableName
												 + ' SP Where ISnull(' + @SourceColumnName +  ','''') <> '''' AND 
												  NOT EXISTS 
												 (Select TOP 1 1 FROM #DefaultAttributeCode DAC WHERE 
												  DAC.AttributeTypeName <> ''Yes/No'' AND DAC.AttributeDefaultValueCode IS NOT NULL AND DAC.PimAttributeId = 
												 ' + CONVERT(VARCHAR(100), @AttributeId) + ' AND ltrim(rtrim(SP.' + @SourceColumnName + ') ) = DAC.AttributeDefaultValueCode ) '
							
												EXEC sys.sp_sqlexec @SQLQuery;
											  END   
												-- Check Invalid Image 
												 SET @SQLQuery = 'SELECT ''9 '' ErrorDescription,'''+@SourceColumnName+''' as [ColumnName], 
												 Value AS  AttributeValue,RowNumber ,'''+@NewGUID+''',  '+@CreateDateString+' FROM #InvalidDefaultData Where Value IS NOT NULL'
												 INSERT INTO ZnodeImportLog (ErrorDescription, ColumnName, Data, RowNumber, GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
												 EXEC sys.sp_sqlexec @SQLQuery;
												 Delete from #InvalidDefaultData

       
                                         END;
                                 END;
							
                             FETCH NEXT FROM Cr_Attribute INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @ControlName, @ValidationName, @SubValidationName, @ValidationValue, @RegExp;
                         END;
                     CLOSE Cr_Attribute;
                     DEALLOCATE Cr_Attribute;
                     --SELECT top 1 1 FROM @FamilyAttributeDetail where  iSNULL(SourceColumnName,'') = ''  and IsRequired = 1
                 END;
             
			 
			  
------------------------------------------------------------------------------------------
		 Declare @SQLQueryNew NVARCHAR(4000)
		 Declare @SourceColumnNameProduct nvarchar(4000) 
         IF @ImportHeadName IN('Product','Pricing','ProductAssociation','Inventory')
		 BEGIN
		  	 
		 SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'SKU'
		 AND ImportTemplateId = @TemplateId


			SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  SKU - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;			
		END
		ELSE IF @ImportHeadName IN('ProductAttribute')
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'AttributeCode'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  Attribute - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'ZipCode'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'ZIP'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  ZIPCode - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'Category'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'CategoryCode'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  CategoryCode - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'CategoryAssociation'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'CategoryName'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  CategoryName - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;

		END
		ELSE IF @ImportHeadName IN ('Customer','CustomerAddress')
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'UserName'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  UserName - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'SEODetails'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'Code'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  Code - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
	-------------------------------------------------------------------------------------------------------------
	
	--DECLARE @SQLLOG NVARCHAR(MAX)

	--SET @SQLLOG = '

	--SELECT TBL.*,ZM.MessageName AS ErrorDescription INTO  tempdb..[##ImportProcessLog_'+@NewGUID+ ']
	--FROM '+@TableName+' TBL
	--INNER JOIN ZnodeImportLog ZILL ON (TBL.Rownumber = ZILL.Rownumber)
	--INNER JOIN Znodemessage ZM ON (ZM.MessageCode = ZILL.ErrorDescription)
	--WHERE ImportProcessLogId =  '+CONVERT(VARCHAR(100), @ImportProcessLogId)+'
	--AND ZILL.Rownumber IS NOT NULL	
	--'	
	-- PRINT @SQLLOG
	-- EXEC sys.sp_sqlexec  @SQLLOG;

	 --SET @SQLLOG = ''

	 --SET @SQLLOG = 'SELECT * FROM [TempDB..##ImportProcessLog_'+@NewGUID+ ']'
	 --EXEC sys.sp_sqlexec  @SQLLOG;


	--------------------------------------------------------------------------------------------------------------------
			 
  		SET @SQLQuery = 'Delete FROM  '+@TableName+' Where Rownumber IN (Select Rownumber FROM ZnodeImportLog  WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND Rownumber IS NOT NULL)';
        EXEC sys.sp_sqlexec  @SQLQuery;
			 			
	  
             IF @ImportHeadName IN('Product', 'Category')
                 BEGIN
                     IF NOT EXISTS
                     (
                         SELECT TOP 1 1
                         FROM @FamilyAttributeDetail
                         WHERE ISNULL(SourceColumnName, '') = ''
                               AND IsRequired = 1
                     ) AND NOT EXISTS
					 (
						 SELECT TOP 1 1
						 FROM ZnodeImportLog
						 WHERE Guid = @NewGUID
							   AND ErrorDescription IN(43, 42)
						 AND ImportProcessLogId = @ImportProcessLogId
					 )
                         BEGIN
                             IF @IsCategory = 0
                                 BEGIN
							
                                     EXEC Znode_ImportPimProductData
                                          @TableName = @TableName,
                                          @NewGUID = @NewGUID,
                                          @TemplateId = @TemplateId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @UserId = @UserId,
                                          @LocaleId = @LocaleId,
                                          @DefaultFamilyId = @DefaultFamilyId;

                                 END;
                             ELSE
                                 BEGIN
                                     EXEC Znode_ImportPimCategoryData
                                          @TableName = @TableName,
                                          @NewGUID = @NewGUID,
                                          @TemplateId = @TemplateId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @UserId = @UserId,
                                          @LocaleId = @LocaleId,
                                          @DefaultFamilyId = @DefaultFamilyId;
                                 END;
                         END
						 ELSE
							BEGIN
								-- Update Record count in log 
								
							
								--SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
								--EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount out
								--UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
								--WHERE ImportProcessLogId = @ImportProcessLogId;

								SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
								SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
								EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount out
								UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
								WHERE ImportProcessLogId = @ImportProcessLogId;
							END

                 END;
				IF NOT EXISTS
					 (
						 SELECT TOP 1 1
						 FROM ZnodeImportLog
						 WHERE Guid = @NewGUID
							   AND ErrorDescription IN(43, 42)
						 AND ImportProcessLogId = @ImportProcessLogId
					 )
             BEGIN
                 IF @ImportHeadName = 'Pricing'
                     BEGIN
                         EXEC [Znode_ImportPriceList]
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID,
                              @PriceListId = @PriceListId;
                     END;

                 IF @ImportHeadName = 'Inventory'
                     BEGIN
				
                         EXEC Znode_ImportInventory_Ver1
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID;
                     END;
                 IF @ImportHeadName = 'ZipCode'
                     BEGIN
						 EXEC Znode_ImportZipCode
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID,
							  @CountryCode = @CountryCode;
                     END;
					 IF @ImportHeadName = 'CategoryAssociation'
                     BEGIN
						 EXEC Znode_ImportCatalogCategory
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID,
							  @PimCatalogId = @PimCatalogId;
                     END;
					 IF @ImportHeadName = 'ProductAssociation'
                     BEGIN
						 EXEC Znode_ImportAssociateProducts
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID
                     END;
			
					 IF @ImportHeadName = 'SEODetails' AND @PortalId > 0 
                     BEGIN
						 EXEC Znode_ImportSEODetails
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
							  @LocaleId = @LocaleId,
							  @PortalId =@PortalId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID,
							  @CsvColumnString = @CsvColumnString 

				
                     END;
				
					 IF @ImportHeadName = 'ProductAttribute' 
                     BEGIN
						 EXEC Znode_ImportAttributes
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
							  @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID
				
                     END;

					 IF @ImportHeadName = 'Customer' AND @PortalId > 0 
                     BEGIN
					
					
						 EXEC Znode_ImportCustomer
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = @PortalId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString
				
                     END;
					 
					 IF @ImportHeadName = 'UserApprovers' AND @PortalId > 0 
                     BEGIN
						 EXEC Znode_ImportUserApproval
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = @PortalId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString
				
                     END;

					 IF @ImportHeadName = 'B2BCustomer' AND @PortalId > 0 
                     BEGIN

							 EXEC Znode_ImportB2BCustomer
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = @PortalId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString
				
                     END;

					 IF @ImportHeadName = 'CustomerAddress' --AND @PortalId > 0 
                     BEGIN
						 EXEC Znode_ImportCustomerAddress
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = 1, -- not implemented from forntend 
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString,
							  @IsAccountAddress = @IsAccountAddress
				
                     END;
					 IF @ImportHeadName = 'ShippingAddress' --AND @PortalId > 0 
                     BEGIN
						 EXEC Znode_ImportCustomerAddress
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = 1, -- not implemented from forntend 
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString,
							  @IsAccountAddress = @IsAccountAddress
				
                     END;
					 IF @ImportHeadName = 'StoreLocator' --AND @PortalId > 0 
                     BEGIN
					 	 EXEC Znode_ImportStoreLocatorAddress
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString
                     END;
 
				 
             END
			 ELSE 
				 BEGIN
					-- Update Record count in log 	
					SET @SQLQuery = ' Select @FailedRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
					EXEC	sp_executesql @SQLQuery , N'@FailedRecordCount BIGINT out' , @FailedRecordCount =@FailedRecordCount out
					--SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS  NULL AND  ImportProcessLogId = @ImportProcessLogId;
					SELECT @SuccessRecordCount = 0
									
					UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
					WHERE ImportProcessLogId = @ImportProcessLogId;
					--SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
					--SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
					--EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount out
					--UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount , TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
					--WHERE ImportProcessLogId = @ImportProcessLogId;
				 END

             EXEC Znode_ImportReadErrorLog
                  @ImportProcessLogId = @ImportProcessLogId,
                  @NewGUID = @NewGUID;
             DROP TABLE #GlobalTempTableColumns;

             -- Finally call product insert process if error not found in error log table 
             IF EXISTS
             (
                 SELECT TOP 1 1
                 FROM ZnodeImportLog
                 WHERE ImportProcessLogId = @ImportProcessLogId
                       AND Guid = @NewGUID
             )
                 BEGIN
                     --Update process with completed status for current import 
                     UPDATE ZnodeImportProcessLog
                       SET
                           Status = dbo.Fn_GetImportStatus(3),
                           ProcessCompletedDate = GETDATE()
                       WHERE ImportProcessLogId = @ImportProcessLogId;
                 END;
				 SET @SQLQuery = 'Drop Table ' + @TableName
                 EXEC sys.sp_sqlexec @SQLQuery;
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE(),
                    ERROR_LINE(),
                    ERROR_PROCEDURE();
             EXEC Znode_ImportReadErrorLog
                  @ImportProcessLogId = @ImportProcessLogId,
                  @NewGUID = @NewGUID; 
             --Update process with failed status for current import 
             UPDATE ZnodeImportProcessLog
               SET
                   Status = dbo.Fn_GetImportStatus(3),
                   ProcessCompletedDate = @GetDate
             WHERE ImportProcessLogId = @ImportProcessLogId;
			 				 SET @SQLQuery = 'Drop Table ' + @TableName
                 EXEC sys.sp_sqlexec @SQLQuery;
             ROLLBACK TRAN TRN_ImportValidProductData;
         END CATCH;
     END;
GO


 IF NOT EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodePublishCategoryProduct' AND COLUMN_NAME = 'ProductIndex')
BEGIN 
ALTER TABLE [dbo].[ZnodePublishCategoryProduct]
    ADD [ProductIndex] INT NULL;
END

GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishCategory')
BEGIN 
	DROP PROCEDURE Znode_GetPublishCategory
END
GO
CREATE PROCEDURE [dbo].[Znode_GetPublishCategory]
(   @PublishCatalogId INT,
    @UserId           INT,
    @VersionId        INT,
    @Status           BIT = 0 OUT,
    @IsDebug          BIT = 0,
	@LocaleId         TransferID READONLY)
AS 
/*
       Summary:Publish category with their respective products and details 
	            The result is fetched in xml form   
       Unit Testing   
       Begin transaction 
       SELECT * FROM ZnodePIMAttribute 
	   SELECT * FROM ZnodePublishCatalog 
	   SELECT * FROM ZnodePublishCategory WHERE publishCAtegoryID = 167 


       EXEC [Znode_GetPublishCategory] @PublishCatalogId = 3,@VersionId = 0 ,@UserId =2 ,@IsDebug = 1 
     


       Rollback Transaction 
	*/
     BEGIN
         BEGIN TRAN GetPublishCategory;
         BEGIN TRY
             SET NOCOUNT ON;
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @LocaleIdIn INT= 0, @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId(), @Counter INT= 1, @MaxId INT= 0, @CategoryIdCount INT;
             DECLARE @IsActive BIT= [dbo].[Fn_GetIsActiveTrue]();
             DECLARE @AttributeIds VARCHAR(MAX)= '', @PimCategoryIds VARCHAR(MAX)= '', @DeletedPublishCategoryIds VARCHAR(MAX)= '', @DeletedPublishProductIds VARCHAR(MAX);
             --get the pim catalog id 
			 DECLARE @PimCatalogId INT=(SELECT PimCatalogId FROM ZnodePublishcatalog WHERE PublishCatalogId = @PublishCatalogId); 

             DECLARE @TBL_AttributeIds TABLE
             (PimAttributeId       INT,
              ParentPimAttributeId INT,
              AttributeTypeId      INT,
              AttributeCode        VARCHAR(600),
              IsRequired           BIT,
              IsLocalizable        BIT,
              IsFilterable         BIT,
              IsSystemDefined      BIT,
              IsConfigurable       BIT,
              IsPersonalizable     BIT,
              DisplayOrder         INT,
              HelpDescription      VARCHAR(MAX),
              IsCategory           BIT,
              IsHidden             BIT,
              CreatedDate          DATETIME,
              ModifiedDate         DATETIME,
              AttributeName        NVARCHAR(MAX),
              AttributeTypeName    VARCHAR(300)
             );
             DECLARE @TBL_AttributeDefault TABLE
             (PimAttributeId            INT,
              AttributeDefaultValueCode VARCHAR(100),
              IsEditable                BIT,
              AttributeDefaultValue     NVARCHAR(MAX)
			  ,DisplayOrder   INT
             );
             DECLARE @TBL_AttributeValue TABLE
             (PimCategoryAttributeValueId INT,
              PimCategoryId               INT,
              CategoryValue               NVARCHAR(MAX),
              AttributeCode               VARCHAR(300),
              PimAttributeId              INT
             );
             DECLARE @TBL_LocaleIds TABLE
             (RowId     INT IDENTITY(1, 1),
              LocaleId  INT,
              IsDefault BIT
             );
             DECLARE @TBL_PimCategoryIds TABLE
             (PimCategoryId       INT,
              PimParentCategoryId INT,
              DisplayOrder        INT,
              ActivationDate      DATETIME,
              ExpirationDate      DATETIME,
              CategoryName        NVARCHAR(MAX),
              ProfileId           VARCHAR(MAX),
              IsActive            BIT,
			  PimCategoryHierarchyId INT,
			  ParentPimCategoryHierarchyId INT ,
			   CategoryCode  NVARCHAR(MAX)             );


             DECLARE @TBL_PublishPimCategoryIds TABLE
             (PublishCategoryId       INT,
              PimCategoryId           INT,
              PublishProductId        varchar(max),
              PublishParentCategoryId INT ,
			  PimCategoryHierarchyId INT ,parentPimCategoryHierarchyId INT,
			  RowIndex INT
             );
             DECLARE @TBL_DeletedPublishCategoryIds TABLE
             (PublishCategoryId INT,
              PublishProductId  INT
             );
             DECLARE @TBL_CategoryXml TABLE
             (PublishCategoryId INT,
              CategoryXml       XML,
              LocaleId          INT
             );
             INSERT INTO @TBL_LocaleIds
             (LocaleId,
              IsDefault
             )
			  -- here collect all locale ids
             SELECT LocaleId,IsDefault FROM ZnodeLocale MT WHERE IsActive = @IsActive
			  AND (EXISTS (SELECT TOP 1 1  FROM @LocaleId RT WHERE RT.Id = MT.LocaleId )
			 OR NOT EXISTS (SELECT TOP 1 1 FROM @LocaleId ));

             INSERT INTO @TBL_PimCategoryIds(PimCategoryId,PimParentCategoryId,DisplayOrder,ActivationDate,ExpirationDate,IsActive,PimCategoryHierarchyId,ParentPimCategoryHierarchyId)
             SELECT DISTINCT ZPCH.PimCategoryId,ZPCH2.PimCategoryId  PimParentCategoryId,ZPCH.DisplayOrder,ZPCH.ActivationDate,ZPCH.ExpirationDate,ZPCH.IsActive ,ZPCH.PimCategoryHierarchyId,ZPCH.ParentPimCategoryHierarchyId
			 FROM ZnodePimCategoryHierarchy AS ZPCH 
			 LEFT JOIN ZnodePimCategoryHierarchy AS ZPCH2 ON (ZPCH2.PimCategoryHierarchyId = ZPCH. ParentPimCategoryHierarchyId ) 
			 WHERE ZPCH.PimCatalogId = @PimCatalogId; 
             -- AND IsActive = @IsActive ; -- As discussed with @anup active flag maintain on demo site 23/12/2016
			 --	SELECT * FROM @TBL_PimCategoryIds
			 -- here is find the deleted publish category id on basis of publish catalog
             INSERT INTO @TBL_DeletedPublishCategoryIds(PublishCategoryId,PublishProductId)
             SELECT ZPC.PublishCategoryId,ZPCP.PublishProductId 
			 FROM ZnodePublishCategoryProduct ZPCP
             INNER JOIN ZnodePublishCategory AS ZPC ON(ZPCP.PublishCategoryId = ZPC.PublishCategoryId AND ZPCP.PublishCatalogId = ZPC.PublishCatalogId)                                                  
             INNER JOIN ZnodePublishProduct ZPP ON(zpp.PublishProductId = zpcp.PublishProductId AND zpp.PublishCatalogId = zpcp.PublishCatalogId)
             INNER JOIN ZnodePublishCatalog ZPCC ON(ZPCC.PublishCatalogId = ZPCP.PublishCatalogId)
             WHERE ZPC.PublishCatalogId = @PublishCataLogId 
			 AND NOT EXISTS(SELECT TOP 1 1 FROM ZnodePimCategoryHierarchy AS TBPC WHERE TBPC.PimCategoryId = ZPC.PimCategoryId AND TBPC.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId
			 AND TBPC.PimCatalogId = ZPCC.PimCatalogId);

			 -- here is find the deleted publish category id on basis of publish catalog
             SET @DeletedPublishCategoryIds = ISNULL(SUBSTRING((SELECT ','+CAST(PublishCategoryId AS VARCHAR(50)) FROM @TBL_DeletedPublishCategoryIds AS ZPC
                                              GROUP BY ZPC.PublishCategoryId FOR XML PATH('') ), 2, 4000), '');
			 -- here is find the deleted publish category id on basis of publish catalog
             SET @DeletedPublishProductIds = '';
			 -- Delete the publish category id 
	
	        --   SELECT * FROM @TBL_DeletedPublishCategoryIds 

             EXEC Znode_DeletePublishCatalog @PublishCatalogIds = @PublishCatalogId,@PublishCategoryIds = @DeletedPublishCategoryIds,@PublishProductIds = @DeletedPublishProductIds; 
			
             MERGE INTO ZnodePublishCategory TARGET USING  @TBL_PimCategoryIds SOURCE ON
			 (
			 TARGET.PimCategoryId = SOURCE.PimCategoryId 
			 AND TARGET.PublishCatalogId = @PublishCataLogId 
			 AND TARGET.PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId
			 )
			 WHEN MATCHED THEN UPDATE SET TARGET.PimParentCategoryId = SOURCE.PimParentCategoryId,TARGET.CreatedBy = @UserId,TARGET.CreatedDate = @GetDate,
             TARGET.ModifiedBy = @UserId,TARGET.ModifiedDate = @GetDate,PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId,ParentPimCategoryHierarchyId=SOURCE.ParentPimCategoryHierarchyId
             WHEN NOT MATCHED THEN INSERT(PimCategoryId,PublishCatalogId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PimCategoryHierarchyId,ParentPimCategoryHierarchyId) 
			 VALUES(SOURCE.PimCategoryId,@PublishCatalogId,@UserId,@GetDate,@UserId,@GetDate,SOURCE.PimCategoryHierarchyId,SOURCE.ParentPimCategoryHierarchyId)
             OUTPUT INSERTED.PublishCategoryId,INSERTED.PimCategoryId,INSERTED.PimCategoryHierarchyId,INSERTED.parentPimCategoryHierarchyId INTO @TBL_PublishPimCategoryIds(PublishCategoryId,PimCategoryId,PimCategoryHierarchyId,parentPimCategoryHierarchyId);
			
    --         UPDATE TBPC SET PublishParentCategoryId = TBPCS.PublishCategoryId 
			 --FROM @TBL_PublishPimCategoryIds TBPC
    --         INNER JOIN @TBL_PimCategoryIds TBC ON(TBC.PimCategoryId = TBPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId)
    --         INNER JOIN @TBL_PublishPimCategoryIds TBPCS ON(TBC.PimCategoryHierarchyId = TBPCS.parentPimCategoryHierarchyId  ) 
			 --WHERE TBC.parentPimCategoryHierarchyId IS NOT NULL;
           
		     -- here update the publish parent category id
             UPDATE ZPC SET [PimParentCategoryId] =TBPC.[PimCategoryId] 
			 FROM ZnodePublishCategory ZPC
             INNER JOIN ZnodePublishCategory TBPC ON(ZPC.parentPimCategoryHierarchyId = TBPC.PimCategoryHierarchyId  ) 
			 WHERE ZPC.PublishCatalogId =@PublishCatalogId
			 AND ZPC.ParentPimCategoryHierarchyId IS NOT NULL
			 AND TBPC.PublishCatalogId =@PublishCatalogId
			 ;
			 UPDATE a
			 SET  a.PublishParentCategoryId = b.PublishCategoryId
			FROM ZnodePublishCategory a 
			INNER JOIN ZnodePublishCategory b   ON (a.parentpimCategoryHierarchyId = b.pimCategoryHierarchyId)
			WHERE a.parentpimCategoryHierarchyId IS NOT NULL 
			AND a.PublishCatalogId =@PublishCatalogId
			AND b.PublishCatalogId =@PublishCatalogId

			 --UPDATE ZPC SET [PimParentCategoryId] = TBPC.[PimCategoryId] 
			 --FROM ZnodePublishCategory ZPC
    --         INNER JOIN ZnodePublishCategory TBPC ON(ZPC.parentPimCategoryHierarchyId = TBPC.PimCategoryHierarchyId  ) 
			 --WHERE ZPC.PublishCatalogId =@PublishCatalogId
			 --AND ZPC.ParentPimCategoryHierarchyId IS NOT NULL ;

			 -- product are published here 
            --  EXEC Znode_GetPublishProducts @PublishCatalogId,0,@UserId,1,0,0;

             SET @MaxId =(SELECT MAX(RowId)FROM @TBL_LocaleIds);
			 DECLARE @TransferID TRANSFERID 
			 INSERT INTO @TransferID 
			 SELECT DISTINCT  PimCategoryId
			 FROM @TBL_PublishPimCategoryIds 

             SET @PimCategoryIds = SUBSTRING((SELECT ','+CAST(PimCategoryId AS VARCHAR(50)) FROM @TBL_PublishPimCategoryIds FOR XML PATH('')), 2, 4000);
			 
             WHILE @Counter <= @MaxId -- Loop on Locale id 
                 BEGIN
                     SET @LocaleIdIn =(SELECT LocaleId FROM @TBL_LocaleIds WHERE RowId = @Counter);
                   
				     SET @AttributeIds = SUBSTRING((SELECT ','+CAST(ZPCAV.PimAttributeId AS VARCHAR(50)) FROM ZnodePimCategoryAttributeValue ZPCAV 
										 WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimCategoryIds TBPC WHERE TBPC.PimCategoryId = ZPCAV.PimCategoryId) GROUP BY ZPCAV.PimAttributeId FOR XML PATH('')), 2, 4000);
                
				     SET @CategoryIdCount =(SELECT COUNT(1) FROM @TBL_PimCategoryIds);

                     INSERT INTO @TBL_AttributeIds (PimAttributeId,ParentPimAttributeId,AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable,IsSystemDefined,
					 IsConfigurable,IsPersonalizable,DisplayOrder,HelpDescription,IsCategory,IsHidden,CreatedDate,ModifiedDate,AttributeName,AttributeTypeName)
                     EXEC [Znode_GetPimAttributesDetails] @AttributeIds,@LocaleIdIn;

                     INSERT INTO @TBL_AttributeDefault (PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder)
                     EXEC [dbo].[Znode_GetAttributeDefaultValueLocale] @AttributeIds,@LocaleIdIn;

                     INSERT INTO @TBL_AttributeValue (PimCategoryAttributeValueId,PimCategoryId,CategoryValue,AttributeCode,PimAttributeId)
                     EXEC [dbo].[Znode_GetCategoryAttributeValueId] @TransferID,@AttributeIds,@LocaleIdIn;

					-- SELECT * FROM @TBL_AttributeValue WHERE PimCategoryId = 281


                     ;WITH Cte_UpdateDefaultAttributeValue
                     AS (
					  SELECT TBAV.PimCategoryId,TBAV.PimAttributeId,SUBSTRING((SELECT ','+AttributeDefaultValue FROM @TBL_AttributeDefault TBD WHERE TBAV.PimAttributeId = TBD.PimAttributeId
						AND EXISTS(SELECT TOP 1 1 FROM Split(TBAV.CategoryValue, ',') SP WHERE SP.Item = TBD.AttributeDefaultValueCode)FOR XML PATH('')), 2, 4000) DefaultCategoryAttributeValue
						FROM @TBL_AttributeValue TBAV WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_AttributeDefault TBAD WHERE TBAD.PimAttributeId = TBAV.PimAttributeId))
					 
					 -- update the default value with locale 
                     UPDATE TBAV SET CategoryValue = CTUDFAV.DefaultCategoryAttributeValue FROM @TBL_AttributeValue TBAV 
					 INNER JOIN Cte_UpdateDefaultAttributeValue CTUDFAV ON(CTUDFAV.PimCategoryId = TBAV.PimCategoryId AND CTUDFAV.PimAttributeId = TBAV.PimAttributeId)
					 WHERE CategoryValue IS NULL ;
					 
					 -- here is update the media path  
                     WITH Cte_productMedia
                     AS (SELECT TBA.PimCategoryId,TBA.PimAttributeId,[dbo].[FN_GetThumbnailMediaPathPublish](SUBSTRING((SELECT ','+zm.PATH FROM ZnodeMedia ZM WHERE EXISTS
					    (SELECT TOP 1 1 FROM dbo.split(TBA.CategoryValue, ',') SP WHERE SP.Item = CAST(Zm.MediaId AS VARCHAR(50)))FOR XML PATH('')), 2, 4000)) CategoryValue
						FROM @TBL_AttributeValue TBA WHERE EXISTS(SELECT TOP 1 1 FROM [dbo].[Fn_GetProductMediaAttributeId]() FNMA WHERE FNMA.PImAttributeId = TBA.PimATtributeId))
                         
					 UPDATE TBAV SET CategoryValue = CTCM.CategoryValue 
					 FROM @TBL_AttributeValue TBAV 
					 INNER JOIN Cte_productMedia CTCM ON(CTCM.PimCategoryId = TBAV.PimCategoryId
					 AND CTCM.PimAttributeId = TBAV.PimAttributeId);

                     WITH Cte_PublishProductIds
					 AS (SELECT TBPC.PublishcategoryId,SUBSTRING((SELECT ','+CAST(PublishProductId AS VARCHAR(50))
					  FROM ZnodePublishCategoryProduct ZPCP 
					  WHERE ZPCP.PublishCategoryId = TBPC.publishCategoryId
					  AND ZPCP.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId
                      AND ZPCP.PublishCatalogId = @PublishCatalogId FOR XML PATH('')), 2, 8000) PublishProductId ,PimCategoryHierarchyId
					  FROM @TBL_PublishPimCategoryIds TBPC)
                          
					 UPDATE TBPPC SET PublishProductId = CTPP.PublishProductId FROM @TBL_PublishPimCategoryIds TBPPC INNER JOIN Cte_PublishProductIds CTPP ON(TBPPC.PublishCategoryId = CTPP.PublishCategoryId 
					 AND TBPPC.PimCategoryHierarchyId = CTPP.PimCategoryHierarchyId);

                     WITH Cte_CategoryProfile
                     AS (SELECT PimCategoryId,ZPCC.PimCategoryHierarchyId,SUBSTRING(( SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
					 FROM ZnodeProfileCatalog ZPC 
					 INNER JOIN ZnodeProfileCategoryHierarchy ZPRCC ON(ZPRCC.PimCategoryHierarchyId = ZPCC.PimCategoryHierarchyId
                        AND ZPRCC.ProfileCatalogId = ZPC.ProfileCatalogId) 
						WHERE ZPC.PimCatalogId = ZPCC.PimCatalogId FOR XML PATH('')), 2, 4000) ProfileIds
                      
					   FROM ZnodePimCategoryHierarchy ZPCC 
					   WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimCategoryIds TBPC 
					   WHERE TBPC.PimCategoryId = ZPCC.PimCategoryId AND ZPCC.PimCatalogId = @PimCatalogId 
					   AND ZPCC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId))
                          
				     UPDATE TBPC SET TBPC.ProfileId = CTCP.ProfileIds FROM @TBL_PimCategoryIds TBPC 
					 LEFT JOIN Cte_CategoryProfile CTCP ON(CTCP.PimCategoryId = TBPC.PimCategoryId AND CTCP.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId );
                     
					 UPDATE TBPC SET TBPC.CategoryName = TBAV.CategoryValue FROM @TBL_PimCategoryIds TBPC INNER JOIN @TBL_AttributeValue TBAV ON(TBAV.PimCategoryId = TBPC.PimCategoryId
                     AND EXISTS(SELECT TOP 1 1 FROM [dbo].[Fn_GetCategoryNameAttribute]() FNGCNA WHERE FNGCNA.PimAttributeId = TBAV.PimAttributeId));


					  UPDATE TBPC SET TBPC.CategoryCode = TBAV.CategoryValue FROM @TBL_PimCategoryIds TBPC INNER JOIN @TBL_AttributeValue TBAV ON(TBAV.PimCategoryId = TBPC.PimCategoryId
					 AND EXISTS(SELECT TOP 1 1 FROM dbo.Fn_GetCategoryCodeAttribute() FNGCNA WHERE FNGCNA.PimAttributeId = TBAV.PimAttributeId)
					 )


					DECLARE @UpdateCategoryLog  TABLE (PublishCatalogLogId INT , LocaleId INT ,PublishCatalogId INT  )
					INSERT INTO @UpdateCategoryLog
					SELECT MAX(PublishCatalogLogId) PublishCatalogLogId , LocaleId , PublishCatalogId 
					FROM ZnodePublishCatalogLog a 
					WHERE a.PublishCatalogId =@PublishCatalogId
					AND  a.LocaleId = @LocaleIdIn 
					GROUP BY 	LocaleId,PublishCatalogId 



					 -- here update the publish category details 
                     ;WITH Cte_UpdateCategoryDetails
                     AS (
					 SELECT TBC.PimCategoryId,PublishCategoryId,CategoryName, TBPPC.PimCategoryHierarchyId,CategoryCode
					 FROM @TBL_PimCategoryIds TBC
                     INNER JOIN @TBL_PublishPimCategoryIds TBPPC ON(TBC.PimCategoryId = TBPPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPPC.PimCategoryHierarchyId)
					 )						
                     MERGE INTO ZnodePublishCategoryDetail TARGET USING Cte_UpdateCategoryDetails SOURCE ON(TARGET.PublishCategoryId = SOURCE.PublishCategoryId
					 AND TARGET.LocaleId = @LocaleIdIn)
                     WHEN MATCHED THEN UPDATE SET PublishCategoryId = SOURCE.PublishcategoryId,PublishCategoryName = SOURCE.CategoryName,LocaleId = @LocaleIdIn,ModifiedBy = @userId,ModifiedDate = @GetDate,CategoryCode=SOURCE.CategoryCode
                     WHEN NOT MATCHED THEN INSERT(PublishCategoryId,PublishCategoryName,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,CategoryCode) VALUES
                     (SOURCE.PublishCategoryId,SOURCE.CategoryName,@LocaleIdIn,@userId,@GetDate,@userId,@GetDate,SOURCE.CategoryCode);

					 IF OBJECT_ID('tempdb..#Index') is not null
					BEGIN 
						DROP TABLE #Index
					END 
					CREATE TABLE #Index (RowIndex int ,PimCategoryId int , PimCategoryHierarchyId  int,ParentPimCategoryHierarchyId int )		
					insert into  #Index ( RowIndex ,PimCategoryId , PimCategoryHierarchyId,ParentPimCategoryHierarchyId)
					SELECT CAST(Row_number() OVER (Partition By TBL.PimCategoryId Order by ISNULL(TBL.PimCategoryId,0) desc) AS VARCHAR(100))
					,ZPC.PimCategoryId, ZPC.PimCategoryHierarchyId, ZPC.ParentPimCategoryHierarchyId
					FROM @TBL_PublishPimCategoryIds TBL
					INNER JOIN ZnodePublishCategory ZPC ON (TBL.PimCategoryId = ZPC.PimCategoryId AND TBL.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId)
					WHERE ZPC.PublishCatalogId = @PublishCatalogId

					UPDATE TBP SET  TBP.[RowIndex]=  IDX.RowIndex 
					FROM @TBL_PublishPimCategoryIds TBP INNER JOIN #Index IDX ON (IDX.PimCategoryId = TBP.PimCategoryId AND IDX.PimCategoryHierarchyId = TBP.PimCategoryHierarchyId)  

                     ;WITH Cte_CategoryXML
                     AS (SELECT PublishcategoryId,PimCategoryId,(SELECT ISNULL(TYU.PublishCatalogLogId,'') VersionId,TBPC.PublishCategoryId ZnodeCategoryId,@PublishCatalogId ZnodeCatalogId
																		,THR.PublishParentCategoryId TempZnodeParentCategoryIds,ZPC.CatalogName ,
																		 ISNULL(DisplayOrder, '0') DisplayOrder,@LocaleIdIn LocaleId,ActivationDate 
																		 ,ExpirationDate,TBC.IsActive,ISNULL(CategoryName, '') Name,ProfileId TempProfileIds,ISNULL(TBPC.PublishProductId, '') TempProductIds
																		 ,ISNULL(TBPC.RowIndex,1) CategoryIndex
																		 ,ISNULL(CategoryCode,'') CategoryCode
                        FROM @TBL_PublishPimCategoryIds TBPC 
						INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId= @PublishCatalogId)
						LEFT JOIN @UpdateCategoryLog TYU ON (TYU.PublishCatalogId = @PublishCatalogId AND TYU.LocaleId = @LocaleIdIn)
						INNER JOIN ZnodePublishCAtegory THR ON (THR.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId AND THR.PimCategoryId = TBPC.PimCategoryId AND THR.PublishCatalogId= @PublishCatalogId )
						INNER JOIN @TBL_PimCategoryIds TBC ON(TBC.PimCategoryId = TBPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId) WHERE TBPC.PublishCategoryId = TBPCO.PublishCategoryId 
						FOR XML PATH('')) CategoryXml 
						FROM @TBL_PublishPimCategoryIds TBPCO),

                     Cte_CategoryAttributeXml
                     AS (SELECT CTCX.PublishCategoryId,'<CategoryEntity>'+ISNULL(CategoryXml, '')+ISNULL((SELECT(SELECT TBA.AttributeCode,TBA.AttributeName,ISNULL(IsUseInSearch, 0) IsUseInSearch,
                        ISNULL(IsHtmlTags, 0) IsHtmlTags,ISNULL(IsComparable, 0) IsComparable,(SELECT ''+TBAV.CategoryValue FOR XML PATH('')) AttributeValues,TBA.AttributeTypeName FROM @TBL_AttributeValue TBAV
                        INNER JOIN @TBL_AttributeIds TBA ON(TBAV.PimAttributeId = TBA.PimAttributeId) LEFT JOIN ZnodePimFrontendProperties ZPFP ON(ZPFP.PimAttributeId = TBA.PimAttributeId)
                        WHERE CTCX.PimCategoryId = TBAV.PimCategoryId AND TBAO.PimAttributeId = TBA.PimAttributeId FOR XML PATH('AttributeEntity'), TYPE) FROM @TBL_AttributeIds TBAO
                        FOR XML PATH('Attributes')), '')+'</CategoryEntity>' CategoryXMl FROM Cte_CategoryXML CTCX)

                     INSERT INTO @TBL_CategoryXml(PublishCategoryId,CategoryXml,LocaleId)
                     SELECT PublishCategoryId,CategoryXml,@LocaleIdIn LocaleId FROM Cte_CategoryAttributeXml;
                   
				     DELETE FROM @TBL_AttributeIds;
                     DELETE FROM @TBL_AttributeDefault;
                     DELETE FROM @TBL_AttributeValue;
                     SET @Counter = @Counter + 1;
                 END;

    --         UPDATE ZnodePublishCatalogLog SET PublishCategoryId = SUBSTRING((SELECT ','+CAST(PublishCategoryId AS VARCHAR(50)) FROM @TBL_CategoryXml
			 --GROUP BY PublishCategoryId																				
    --         FOR XML PATH('')), 2, 4000), IsCategoryPublished = 1 WHERE PublishCatalogLogId = @VersionId;

			 UPDATE ZnodePublishCatalogLog 
			 SET PublishCategoryId = (SELECT COunt(DISTINCT PublishCategoryId ) FROM ZnodePublishCategory WHERE PublishCatalogId =@PublishCatalogId), IsCategoryPublished = 1 
			 WHERE EXISTS (SELECT TOP 1 1 FROM @UpdateCategoryLog TY WHERE TY.PublishCatalogLogId =  ZnodePublishCatalogLog.PublishCatalogLogId ) ;

             DELETE FROM ZnodePublishedXml WHERE PublishCataloglogId = @VersionId;
            
             INSERT INTO ZnodePublishedXml (PublishCatalogLogId,PublishedId,PublishedXML,IsCategoryXML,IsProductXML,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             SELECT @VersionId PublishCataloglogId,PublishCategoryId,CategoryXml,1,0,LocaleId,@UserId,@GetDate,@UserId,@GetDate FROM @TBL_CategoryXml WHERE @VersionId <> 0;
             
			 SELECT CategoryXml  
			 FROM @TBL_CategoryXml 
			 

			 --UPDATE ZnodePimCategory 
			 --SET IsCategoryPublish =1 
			 --WHERE pimCategoryId IN (SELECT PimCategoryId FROM @TBL_PimCategoryIds)

			 UPDATE ZnodePimCategory 
			 SET PublishStateId = Dbo.Fn_GetPublishStateIdForPreview()
			 WHERE pimCategoryId IN (SELECT PimCategoryId FROM @TBL_CategoryXml)

              
             COMMIT TRAN GetPublishCategory;
			 
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE();
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPublishCategory @PublishCatalogId = '+CAST(@PublishCatalogId AS VARCHAR(50))+',@UserId ='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(50));
             SET @Status = 0;
             ROLLBACK TRAN GetPublishCategory;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_GetPublishCategory',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishCategoryGroup')
BEGIN 
	DROP PROCEDURE Znode_GetPublishCategoryGroup
END
GO
CREATE  PROCEDURE [dbo].[Znode_GetPublishCategoryGroup]
(   
	@PublishCatalogId INT,
    @UserId           INT,
    @VersionId        INT,
    @Status           BIT = 0 OUT,
	@PimCategoryHierarchyId int = 0, 
    @IsDebug          BIT = 0,
	@LocaleId TransferId READONLY,
	@PublishStateId INT = 0 
)
AS 
/*

       Summary:Publish category with their respective products and details 
	            The result is fetched in xml form   
       Unit Testing   
       Begin transaction 
       SELECT * FROM ZnodePIMAttribute 
	   SELECT * FROM ZnodePublishCatalog 
	   SELECT * FROM ZnodePublishCategory WHERE publishCAtegoryID = 167 


       EXEC [Znode_GetPublishCategory] @PublishCatalogId = 5,@VersionId = 0 ,@UserId =2 ,@IsDebug = 1 
       EXEC [Znode_GetPublishCategory] @PublishCatalogId = 5,@VersionId = 0 ,@UserId =2 ,@IsDebug = 1 ,@PimCategoryHierarchyId = ? 


       Rollback Transaction 
	*/
     BEGIN
         BEGIN TRAN GetPublishCategory;
         BEGIN TRY
             SET NOCOUNT ON;
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @LocaleIdIn INT= 0, @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId(), @Counter INT= 1, @MaxId INT= 0, @CategoryIdCount INT;
             DECLARE @IsActive BIT= [dbo].[Fn_GetIsActiveTrue]();
             DECLARE @AttributeIds VARCHAR(MAX)= '', @PimCategoryIds VARCHAR(MAX)= '', @DeletedPublishCategoryIds VARCHAR(MAX)= '', @DeletedPublishProductIds VARCHAR(MAX);
             --get the pim catalog id 
			 DECLARE @PimCatalogId INT=(SELECT PimCatalogId FROM ZnodePublishcatalog WHERE PublishCatalogId = @PublishCatalogId); 

             DECLARE @TBL_AttributeIds TABLE
             (PimAttributeId       INT,
              ParentPimAttributeId INT,
              AttributeTypeId      INT,
              AttributeCode        VARCHAR(600),
              IsRequired           BIT,
              IsLocalizable        BIT,
              IsFilterable         BIT,
              IsSystemDefined      BIT,
              IsConfigurable       BIT,
              IsPersonalizable     BIT,
              DisplayOrder         INT,
              HelpDescription      VARCHAR(MAX),
              IsCategory           BIT,
              IsHidden             BIT,
              CreatedDate          DATETIME,
              ModifiedDate         DATETIME,
              AttributeName        NVARCHAR(MAX),
              AttributeTypeName    VARCHAR(300)
             );
             DECLARE @TBL_AttributeDefault TABLE
             (PimAttributeId            INT,
              AttributeDefaultValueCode VARCHAR(100),
              IsEditable                BIT,
              AttributeDefaultValue     NVARCHAR(MAX)
			  ,DisplayOrder   INT
             );
             DECLARE @TBL_AttributeValue TABLE
             (PimCategoryAttributeValueId INT,
              PimCategoryId               INT,
              CategoryValue               NVARCHAR(MAX),
              AttributeCode               VARCHAR(300),
              PimAttributeId              INT
             );
             DECLARE @TBL_LocaleIds TABLE
             (RowId     INT IDENTITY(1, 1),
              LocaleId  INT,
              IsDefault BIT
             );
             DECLARE @TBL_PimCategoryIds TABLE
             (PimCategoryId       INT,
              PimParentCategoryId INT,
              DisplayOrder        INT,
              ActivationDate      DATETIME,
              ExpirationDate      DATETIME,
              CategoryName        NVARCHAR(MAX),
              ProfileId           VARCHAR(MAX),
              IsActive            BIT,PimCategoryHierarchyId INT,ParentPimCategoryHierarchyId INT   ,
			  CategoryCode  NVARCHAR(MAX)    );


             DECLARE @TBL_PublishPimCategoryIds TABLE
             (PublishCategoryId       INT,
              PimCategoryId           INT,
              PublishProductId        varchar(max),
              PublishParentCategoryId INT ,
			  PimCategoryHierarchyId INT ,parentPimCategoryHierarchyId INT
             );

			  DECLARE @TBL_PublishPimCategoryIdsLatest TABLE
             (PublishCategoryId       INT,
              PimCategoryId           INT,
              PublishProductId        varchar(max),
              PublishParentCategoryId INT ,
			  PimCategoryHierarchyId INT ,parentPimCategoryHierarchyId INT,PublishCatalogLogId INT,LocaleId INT  
             );

             DECLARE @TBL_DeletedPublishCategoryIds TABLE
             (PublishCategoryId INT,
              PublishProductId  INT
             );

			     DECLARE @TBL_DeletedPublishCategoryIds_new TABLE
             (PublishCategoryId INT,
              PublishProductId  INT
             );
             DECLARE @TBL_CategoryXml TABLE
             (PublishCategoryId INT,
              CategoryXml       XML,
              LocaleId          INT
			  ,PublishCatalogLogId INT
             );
             INSERT INTO @TBL_LocaleIds
             (LocaleId,
              IsDefault
             )
			  -- here collect all locale ids
             SELECT LocaleId,IsDefault FROM ZnodeLocale mt WHERE IsActive = @IsActive
			  AND (EXISTS (SELECT TOP 1 1  FROM @LocaleId RT WHERE RT.Id = MT.LocaleId )
			 OR NOT EXISTS (SELECT TOP 1 1 FROM @LocaleId ));


			IF @PimCategoryHierarchyId > 0 
			Begin 
				 DECLARE @TBL_CategoryCategoryHierarchyIds TABLE (CategoryId int,ParentCategoryId int,PimCategoryHierarchyId INT ,ParentPimCategoryHierarchyId INT  ) 
				 INSERT INTO @TBL_CategoryCategoryHierarchyIds(CategoryId , ParentCategoryId, PimCategoryHierarchyId , ParentPimCategoryHierarchyId)
				 Select Distinct PimCategoryId , Null,PimCategoryHierarchyId,NULL FROM (
				 SELECT PimCategoryId,ParentPimCategoryId,PimCategoryHierarchyId,ParentPimCategoryHierarchyId from DBO.[Fn_GetRecurciveCategoryIds_PimCategoryHierarchy](@PimCategoryHierarchyId,@PimCatalogId)
				 Union 
				 Select PimCategoryId , null,PimCategoryHierarchyId,NULL  from ZnodePimCategoryHierarchy where PimCategoryHierarchyId = @PimCategoryHierarchyId 
				 Union 
				 Select PimCategoryId , null,PimCategoryHierarchyId,NULL  from [Fn_GetRecurciveCategoryIds_PimCategoryHierarchyIdNew] (@PimCategoryHierarchyId,@PimCatalogId) ) Category  

			
				 INSERT INTO @TBL_PimCategoryIds(PimCategoryId,PimParentCategoryId,DisplayOrder,ActivationDate,ExpirationDate,IsActive,PimCategoryHierarchyId,ParentPimCategoryHierarchyId)
				
				 SELECT DISTINCT ZPCH.PimCategoryId,ZPCH2.PimCategoryId  PimParentCategoryId,ZPCH.DisplayOrder,ZPCH.ActivationDate,ZPCH.ExpirationDate,ZPCH.IsActive ,ZPCH.PimCategoryHierarchyId,ZPCH.ParentPimCategoryHierarchyId
				 FROM ZnodePimCategoryHierarchy AS ZPCH 
				 LEFT JOIN ZnodePimCategoryHierarchy AS ZPCH2 ON (ZPCH2.PimCategoryHierarchyId = ZPCH. ParentPimCategoryHierarchyId ) 
				 WHERE ZPCH.PimCatalogId = @PimCatalogId  AND ZPCH.PimCategoryHierarchyId in 
				 (SELECT PimCategoryHierarchyId from @TBL_CategoryCategoryHierarchyIds where CategoryId is not null )  ; 
				
				-- Delete from @TBL_PimCategoryIds where PimCategoryId  in (
				-- select PimCategoryId  from ZnodePublishCategory where PublishCatalogId = @PublishCatalogId 
				--)
		
	
		  
				SELECT @VersionId  = PublishCatalogLogId from ZnodePublishCatalogLog where PublishCatalogId = @PublishCatalogId  and IsCatalogPublished =1 

			

			 	 INSERT INTO @TBL_DeletedPublishCategoryIds (PublishCategoryId,PublishProductId)
				 SELECT ZPC.PublishCategoryId,ZPCP.PublishProductId 
				 FROM ZnodePublishCategory AS ZPC 
				 LEFT JOIN  ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishCategoryId = ZPC.PublishCategoryId AND ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND  ZPCP.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId  )                                                  
				 LEFT JOIN ZnodePublishProduct ZPP ON (zpp.PublishProductId = zpcp.PublishProductId AND zpp.PublishCatalogId = zpcp.PublishCatalogId)
				 LEFT JOIN ZnodePublishCatalog ZPCC ON (ZPCC.PublishCatalogId = ZPCP.PublishCatalogId)
				 WHERE ZPC.PublishCatalogId = @PublishCataLogId 
				 --AND NOT EXISTS
				 --(SELECT TOP 1 1 FROM ZnodePimCatalogCategory AS TBPC WHERE TBPC.PimCategoryId = ZPC.PimCategoryId 
				 --AND TBPC.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId AND TBPC.PimProductId = ZPP.PimProductId 
				 --AND TBPC.PimCatalogId = ZPCC.PimCatalogId  AND  ZPCP.PimCategoryHierarchyId=  @PimCategoryHierarchyId   ) 
				 AND ZPC.ParentPimCategoryHierarchyId  in (@PimCategoryHierarchyId)
				 AND ZPC.PimCategoryHierarchyId NOT IN (select PimCategoryHierarchyId FROM @TBL_PimCategoryIds)  ;
				

				 INSERT INTO @TBL_DeletedPublishCategoryIds_new (PublishCategoryId,PublishProductId)
				  SELECT ZPC.PublishCategoryId,ZPCP.PublishProductId 
				 FROM ZnodePublishCategory AS ZPC 
				 LEFT JOIN  ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishCategoryId = ZPC.PublishCategoryId AND ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND  ZPCP.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId  )                                                  
				 LEFT JOIN ZnodePublishProduct ZPP ON (zpp.PublishProductId = zpcp.PublishProductId AND zpp.PublishCatalogId = zpcp.PublishCatalogId)
				 LEFT JOIN ZnodePublishCatalog ZPCC ON (ZPCC.PublishCatalogId = ZPCP.PublishCatalogId)
				 WHERE ZPC.PublishCatalogId = @PublishCataLogId 
				 AND ZPC.ParentPimCategoryHierarchyId  in (@PimCategoryHierarchyId)
				 AND ZPC.PimCategoryHierarchyId NOT IN (select PimCategoryHierarchyId FROM @TBL_PimCategoryIds)
				 AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimCategoryHierarchy TU WHERE TU.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId )  ;

			End
			ELSE 
			Begin
				INSERT INTO @TBL_PimCategoryIds(PimCategoryId,PimParentCategoryId,DisplayOrder,ActivationDate,ExpirationDate,IsActive,PimCategoryHierarchyId,ParentPimCategoryHierarchyId)
				SELECT DISTINCT ZPCH.PimCategoryId,ZPCH2.PimCategoryId  PimParentCategoryId,ZPCH.DisplayOrder,ZPCH.ActivationDate,ZPCH.ExpirationDate,ZPCH.IsActive ,ZPCH.PimCategoryHierarchyId,ZPCH.ParentPimCategoryHierarchyId
				FROM ZnodePimCategoryHierarchy AS ZPCH 
				LEFT JOIN ZnodePimCategoryHierarchy AS ZPCH2 ON (ZPCH2.PimCategoryHierarchyId = ZPCH. ParentPimCategoryHierarchyId ) 
				WHERE ZPCH.PimCatalogId = @PimCatalogId; 

			 -- AND IsActive = @IsActive ; -- As discussed with @anup active flag maintain on demo site 23/12/2016
			 --	SELECT * FROM @TBL_PimCategoryIds
			 -- here is find the deleted publish category id on basis of publish catalog

             INSERT INTO @TBL_DeletedPublishCategoryIds_new(PublishCategoryId,PublishProductId)
			 SELECT ZPC.PublishCategoryId,ZPCP.PublishProductId 
				 FROM ZnodePublishCategoryProduct ZPCP
				 INNER JOIN ZnodePublishCategory AS ZPC ON(ZPCP.PublishCategoryId = ZPC.PublishCategoryId AND ZPCP.PublishCatalogId = ZPC.PublishCatalogId)                                                  
				 INNER JOIN ZnodePublishProduct ZPP ON(zpp.PublishProductId = zpcp.PublishProductId AND zpp.PublishCatalogId = zpcp.PublishCatalogId)
				 INNER JOIN ZnodePublishCatalog ZPCC ON(ZPCC.PublishCatalogId = ZPCP.PublishCatalogId)
				 WHERE ZPC.PublishCatalogId = @PublishCataLogId 
				 AND NOT EXISTS
				 (SELECT TOP 1 1 FROM ZnodePimCatalogCategory AS TBPC WHERE TBPC.PimCategoryId = ZPC.PimCategoryId 
				 AND TBPC.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId AND TBPC.PimProductId = ZPP.PimProductId 
				 AND TBPC.PimCatalogId = ZPCC.PimCatalogId);

			End
			
          

			 -- here is find the deleted publish category id on basis of publish catalog
             SET @DeletedPublishCategoryIds = ISNULL(SUBSTRING((SELECT ','+CAST(PublishCategoryId AS VARCHAR(50)) FROM @TBL_DeletedPublishCategoryIds_new AS ZPC
                                              GROUP BY ZPC.PublishCategoryId FOR XML PATH('') ), 2, 4000), '');
			 -- here is find the deleted publish category id on basis of publish catalog
             SET @DeletedPublishProductIds = '';
			 -- Delete the publish category id 
	         EXEC Znode_DeletePublishCatalog @PublishCatalogIds = @PublishCatalogId,@PublishCategoryIds = @DeletedPublishCategoryIds,@PublishProductIds = @DeletedPublishProductIds; 
			
			

             MERGE INTO ZnodePublishCategory TARGET USING  @TBL_PimCategoryIds SOURCE ON
			 (
				 TARGET.PimCategoryId = SOURCE.PimCategoryId 
				 AND TARGET.PublishCatalogId = @PublishCataLogId 
				 AND TARGET.PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId
			 )
			 WHEN MATCHED THEN UPDATE SET TARGET.PimParentCategoryId = SOURCE.PimParentCategoryId,TARGET.CreatedBy = @UserId,TARGET.CreatedDate = @GetDate,
             TARGET.ModifiedBy = @UserId,TARGET.ModifiedDate = @GetDate,PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId,ParentPimCategoryHierarchyId=SOURCE.ParentPimCategoryHierarchyId
             WHEN NOT MATCHED THEN INSERT(PimCategoryId,PublishCatalogId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PimCategoryHierarchyId,ParentPimCategoryHierarchyId) 
			 VALUES(SOURCE.PimCategoryId,@PublishCatalogId,@UserId,@GetDate,@UserId,@GetDate,SOURCE.PimCategoryHierarchyId
			 ,SOURCE.ParentPimCategoryHierarchyId)
             OUTPUT INSERTED.PublishCategoryId,INSERTED.PimCategoryId,INSERTED.PimCategoryHierarchyId,
			 INSERTED.parentPimCategoryHierarchyId 
			 INTO @TBL_PublishPimCategoryIds(PublishCategoryId,PimCategoryId,PimCategoryHierarchyId,parentPimCategoryHierarchyId);
			       
				   
		     -- here update the publish parent category id
             UPDATE ZPC SET [PimParentCategoryId] =TBPC.[PimCategoryId] 
				FROM ZnodePublishCategory ZPC
				INNER JOIN ZnodePublishCategory TBPC ON(ZPC.parentPimCategoryHierarchyId = TBPC.PimCategoryHierarchyId  ) 
				WHERE ZPC.PublishCatalogId =@PublishCatalogId
				AND ZPC.ParentPimCategoryHierarchyId IS NOT NULL
				AND TBPC.PublishCatalogId =@PublishCatalogId
				AND ZPC.PimCategoryId in (select PimCategoryId FROM @TBL_PimCategoryIds);
				;
			 UPDATE a
				SET  a.PublishParentCategoryId = b.PublishCategoryId
				FROM ZnodePublishCategory a 
				INNER JOIN ZnodePublishCategory b   ON (a.parentpimCategoryHierarchyId = b.pimCategoryHierarchyId)
				WHERE a.parentpimCategoryHierarchyId IS NOT NULL 
				AND a.PublishCatalogId =@PublishCatalogId
				AND b.PublishCatalogId =@PublishCatalogId
				AND a.PimCategoryId in (select PimCategoryId FROM @TBL_PimCategoryIds);

			 --UPDATE ZPC SET [PimParentCategoryId] = TBPC.[PimCategoryId] 
			 --FROM ZnodePublishCategory ZPC
    --         INNER JOIN ZnodePublishCategory TBPC ON(ZPC.parentPimCategoryHierarchyId = TBPC.PimCategoryHierarchyId  ) 
			 --WHERE ZPC.PublishCatalogId =@PublishCatalogId
			 --AND ZPC.ParentPimCategoryHierarchyId IS NOT NULL ;

			 -- product are published here 
            --  EXEC Znode_GetPublishProducts @PublishCatalogId,0,@UserId,1,0,0;

             SET @MaxId =(SELECT MAX(RowId)FROM @TBL_LocaleIds);
			 DECLARE @TransferID TRANSFERID 
			 INSERT INTO @TransferID 
			 SELECT DISTINCT  PimCategoryId
			 FROM @TBL_PublishPimCategoryIds 

          
			 INSERT INTO @TBL_PublishPimCategoryIdsLatest 
			 SELECT a.*,Max(b.PublishCatalogLogId) PublishCatalogLogId,b.LocaleId
			 FROM @TBL_PublishPimCategoryIds a
			 LEFT JOIN ZnodePublishCatalogLog b ON (b.PublishCatalogId = @PublishCatalogId)
			 WHERE EXISTS (SELECT TOP 1 1  FROM @LocaleId YTU WHERE YTU.Id = b.LocaleId )
			 AND b.PublishStateId = @PublishStateId
			 GROUP BY a.PublishCategoryId  ,PimCategoryId ,a.PublishProductId ,PublishParentCategoryId ,
			  PimCategoryHierarchyId  ,parentPimCategoryHierarchyId,b.LocaleId

			 
			 
             WHILE @Counter <= @MaxId -- Loop on Locale id 
                 BEGIN
                     SET @LocaleIdIn =(SELECT LocaleId FROM @TBL_LocaleIds WHERE RowId = @Counter);
                   
				     SET @AttributeIds = SUBSTRING((SELECT ','+CAST(ZPCAV.PimAttributeId AS VARCHAR(50)) FROM ZnodePimCategoryAttributeValue ZPCAV 
										 WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimCategoryIds TBPC WHERE TBPC.PimCategoryId = ZPCAV.PimCategoryId) GROUP BY ZPCAV.PimAttributeId FOR XML PATH('')), 2, 4000);
                
				     SET @CategoryIdCount =(SELECT COUNT(1) FROM @TBL_PimCategoryIds);

                     INSERT INTO @TBL_AttributeIds (PimAttributeId,ParentPimAttributeId,AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable,IsSystemDefined,
					 IsConfigurable,IsPersonalizable,DisplayOrder,HelpDescription,IsCategory,IsHidden,CreatedDate,ModifiedDate,AttributeName,AttributeTypeName)
                     EXEC [Znode_GetPimAttributesDetails] @AttributeIds,@LocaleIdIn;

                     INSERT INTO @TBL_AttributeDefault (PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder)
                     EXEC [dbo].[Znode_GetAttributeDefaultValueLocale] @AttributeIds,@LocaleIdIn;

                     INSERT INTO @TBL_AttributeValue (PimCategoryAttributeValueId,PimCategoryId,CategoryValue,AttributeCode,PimAttributeId)
                     EXEC [dbo].[Znode_GetCategoryAttributeValueId] @TransferID,@AttributeIds,@LocaleIdIn;

					-- SELECT * FROM @TBL_AttributeValue WHERE PimCategoryId = 281


                     ;WITH Cte_UpdateDefaultAttributeValue
                     AS (
					  SELECT TBAV.PimCategoryId,TBAV.PimAttributeId,SUBSTRING((SELECT ','+AttributeDefaultValue FROM @TBL_AttributeDefault TBD WHERE TBAV.PimAttributeId = TBD.PimAttributeId
						AND EXISTS(SELECT TOP 1 1 FROM Split(TBAV.CategoryValue, ',') SP WHERE SP.Item = TBD.AttributeDefaultValueCode)FOR XML PATH('')), 2, 4000) DefaultCategoryAttributeValue
						FROM @TBL_AttributeValue TBAV WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_AttributeDefault TBAD WHERE TBAD.PimAttributeId = TBAV.PimAttributeId))
					 
					 -- update the default value with locale 
                     UPDATE TBAV SET CategoryValue = CTUDFAV.DefaultCategoryAttributeValue FROM @TBL_AttributeValue TBAV 
					 INNER JOIN Cte_UpdateDefaultAttributeValue CTUDFAV ON(CTUDFAV.PimCategoryId = TBAV.PimCategoryId AND CTUDFAV.PimAttributeId = TBAV.PimAttributeId)
					 WHERE CategoryValue IS NULL ;
					 
					 -- here is update the media path  
                     WITH Cte_productMedia
                     AS (SELECT TBA.PimCategoryId,TBA.PimAttributeId,[dbo].[FN_GetThumbnailMediaPathPublish](SUBSTRING((SELECT ','+zm.PATH FROM ZnodeMedia ZM WHERE EXISTS
					    (SELECT TOP 1 1 FROM dbo.split(TBA.CategoryValue, ',') SP WHERE SP.Item = CAST(Zm.MediaId AS VARCHAR(50)))FOR XML PATH('')), 2, 4000)) CategoryValue
						FROM @TBL_AttributeValue TBA WHERE EXISTS(SELECT TOP 1 1 FROM [dbo].[Fn_GetProductMediaAttributeId]() FNMA WHERE FNMA.PImAttributeId = TBA.PimATtributeId))
                         
					 UPDATE TBAV SET CategoryValue = CTCM.CategoryValue 
					 FROM @TBL_AttributeValue TBAV 
					 INNER JOIN Cte_productMedia CTCM ON(CTCM.PimCategoryId = TBAV.PimCategoryId
					 AND CTCM.PimAttributeId = TBAV.PimAttributeId);

                     WITH Cte_PublishProductIds
					 AS (SELECT TBPC.PublishcategoryId,SUBSTRING((SELECT ','+CAST(PublishProductId AS VARCHAR(50))
					  FROM ZnodePublishCategoryProduct ZPCP 
					  WHERE ZPCP.PublishCategoryId = TBPC.publishCategoryId
					  AND ZPCP.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId
                      AND ZPCP.PublishCatalogId = @PublishCatalogId FOR XML PATH('')), 2, 8000) PublishProductId ,PimCategoryHierarchyId
					  FROM @TBL_PublishPimCategoryIds TBPC)
                          
					 UPDATE TBPPC SET PublishProductId = CTPP.PublishProductId FROM @TBL_PublishPimCategoryIds TBPPC INNER JOIN Cte_PublishProductIds CTPP ON(TBPPC.PublishCategoryId = CTPP.PublishCategoryId 
					 AND TBPPC.PimCategoryHierarchyId = CTPP.PimCategoryHierarchyId);

					 WITH Cte_CategoryProfile
						AS (SELECT PimCategoryId,ZPCC.PimCategoryHierarchyId,SUBSTRING(( SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
						FROM ZnodeProfileCatalog ZPC 
						INNER JOIN ZnodeProfileCategoryHierarchy ZPRCC ON(ZPRCC.PimCategoryHierarchyId = ZPCC.PimCategoryHierarchyId
						AND ZPRCC.ProfileCatalogId = ZPC.ProfileCatalogId) 
						WHERE ZPC.PimCatalogId = ZPCC.PimCatalogId FOR XML PATH('')), 2, 4000) ProfileIds
                      
						FROM ZnodePimCategoryHierarchy ZPCC 
						WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimCategoryIds TBPC 
						WHERE TBPC.PimCategoryId = ZPCC.PimCategoryId AND ZPCC.PimCatalogId = @PimCatalogId 
						AND ZPCC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId))
                          
				     UPDATE TBPC SET TBPC.ProfileId = CTCP.ProfileIds FROM @TBL_PimCategoryIds TBPC 
					 LEFT JOIN Cte_CategoryProfile CTCP ON(CTCP.PimCategoryId = TBPC.PimCategoryId AND CTCP.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId );
                     
					 UPDATE TBPC SET TBPC.CategoryName = TBAV.CategoryValue FROM @TBL_PimCategoryIds TBPC INNER JOIN @TBL_AttributeValue TBAV ON(TBAV.PimCategoryId = TBPC.PimCategoryId
                     AND EXISTS(SELECT TOP 1 1 FROM [dbo].[Fn_GetCategoryNameAttribute]() FNGCNA WHERE FNGCNA.PimAttributeId = TBAV.PimAttributeId));

					   UPDATE TBPC SET TBPC.CategoryCode = TBAV.CategoryValue FROM @TBL_PimCategoryIds TBPC INNER JOIN @TBL_AttributeValue TBAV ON(TBAV.PimCategoryId = TBPC.PimCategoryId
					 AND EXISTS(SELECT TOP 1 1 FROM dbo.Fn_GetCategoryCodeAttribute() FNGCNA WHERE FNGCNA.PimAttributeId = TBAV.PimAttributeId)
					 )


					-- SELECT * FROM @TBL_AttributeValue WHERE pimCategoryId = 369

					 -- here update the publish category details 
                     ;WITH Cte_UpdateCategoryDetails
                     AS 
					 (
							 SELECT TBC.PimCategoryId,PublishCategoryId,CategoryName, TBPPC.PimCategoryHierarchyId,CategoryCode
							 FROM @TBL_PimCategoryIds TBC
							 INNER JOIN @TBL_PublishPimCategoryIds TBPPC ON(TBC.PimCategoryId = TBPPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPPC.PimCategoryHierarchyId)
					 )						
                     MERGE INTO ZnodePublishCategoryDetail TARGET USING Cte_UpdateCategoryDetails SOURCE ON(
					 TARGET.PublishCategoryId = SOURCE.PublishCategoryId
					 AND TARGET.LocaleId = @LocaleIdIn)
                     WHEN MATCHED THEN UPDATE SET PublishCategoryId = SOURCE.PublishcategoryId,PublishCategoryName = SOURCE.CategoryName,LocaleId = @LocaleIdIn,ModifiedBy = @userId,ModifiedDate = @GetDate,CategoryCode=SOURCE.CategoryCode
                     WHEN NOT MATCHED THEN INSERT(PublishCategoryId,PublishCategoryName,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,CategoryCode) VALUES
                     (SOURCE.PublishCategoryId,SOURCE.CategoryName,@LocaleIdIn,@userId,@GetDate,@userId,@GetDate,SOURCE.CategoryCode);

                     ;WITH Cte_CategoryXML
                     AS (SELECT PublishCatalogLogId,PublishcategoryId,PimCategoryId,(SELECT PublishCatalogLogId VersionId,TBPC.PublishCategoryId ZnodeCategoryId,@PublishCatalogId ZnodeCatalogId
																		,THR.PublishParentCategoryId TempZnodeParentCategoryIds,ZPC.CatalogName ,
																		 ISNULL(DisplayOrder, '0') DisplayOrder,@LocaleIdIn LocaleId,ActivationDate 
																		 ,ExpirationDate,TBC.IsActive,ISNULL(CategoryName, '') Name,ProfileId TempProfileIds,ISNULL(PublishProductId, '') TempProductIds,ISNULL(CategoryCode,'') CategoryCode 
                        FROM @TBL_PublishPimCategoryIdsLatest TBPC 
						INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId= @PublishCatalogId)
						INNER JOIN ZnodePublishCAtegory THR ON (THR.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId AND THR.PimCategoryId = TBPC.PimCategoryId AND THR.PublishCatalogId= @PublishCatalogId )
						INNER JOIN @TBL_PimCategoryIds TBC ON(TBC.PimCategoryId = TBPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId) 
						WHERE TBPC.PublishCategoryId = TBPCO.PublishCategoryId 
						AND TBPC.LocaleId = @localeIdIn
						FOR XML PATH('')) CategoryXml 
						FROM @TBL_PublishPimCategoryIdsLatest TBPCO 
						WHERE LocaleId = @localeIdIn),

                     Cte_CategoryAttributeXml
                     AS (SELECT PublishCatalogLogId, CTCX.PublishCategoryId,'<CategoryEntity>'+ISNULL(CategoryXml, '')+ISNULL((SELECT(SELECT TBA.AttributeCode,TBA.AttributeName,ISNULL(IsUseInSearch, 0) IsUseInSearch,
                        ISNULL(IsHtmlTags, 0) IsHtmlTags,ISNULL(IsComparable, 0) IsComparable,(SELECT ''+TBAV.CategoryValue FOR XML PATH('')) AttributeValues,TBA.AttributeTypeName FROM @TBL_AttributeValue TBAV
                        INNER JOIN @TBL_AttributeIds TBA ON(TBAV.PimAttributeId = TBA.PimAttributeId) LEFT JOIN ZnodePimFrontendProperties ZPFP ON(ZPFP.PimAttributeId = TBA.PimAttributeId)
                        WHERE CTCX.PimCategoryId = TBAV.PimCategoryId AND TBAO.PimAttributeId = TBA.PimAttributeId FOR XML PATH('AttributeEntity'), TYPE) FROM @TBL_AttributeIds TBAO
                        FOR XML PATH('Attributes')), '')+'</CategoryEntity>' CategoryXMl FROM Cte_CategoryXML CTCX)

                     INSERT INTO @TBL_CategoryXml(PublishCategoryId,CategoryXml,LocaleId,PublishCatalogLogId)
                     SELECT PublishCategoryId,CategoryXml,@localeIdIn LocaleId,PublishCatalogLogId 
					 FROM Cte_CategoryAttributeXml;
                   
				     DELETE FROM @TBL_AttributeIds;
                     DELETE FROM @TBL_AttributeDefault;
                     DELETE FROM @TBL_AttributeValue;
                     SET @Counter = @Counter + 1;
                 END;

				

				 -----------------------
			IF @PimCategoryHierarchyId > 0 
			Begin 
				Select PublishCategoryId ,PublishCatalogLogId VersionId	, @PimCatalogId PimCatalogId	, LocaleId
				into #OutPublish  
				FROM @TBL_CategoryXml  
				--group by PimCatalogId,VersionId,PublishCategoryId
  

				Alter TABLE #OutPublish ADD Id int Identity 

				SET @MaxId =(SELECT COUNT(*) FROM #OutPublish);
				--SET @PimCategoryIds = SUBSTRING((SELECT ','+CAST(PimCategoryId AS VARCHAR(50)) FROM @TBL_PublishPimCategoryIds FOR XML PATH('')), 2, 4000);
				Declare @ExistingPublishCategoryId  nvarchar(max), @PublishCategoryId  int 
				SET @Counter =1 
				WHILE @Counter <= @MaxId -- Loop on Locale id 
				BEGIN
					SELECT @VersionId = VersionId  ,
					@PublishCategoryId = PublishCategoryId 
					from #OutPublish where Id = @Counter

					SELECT @ExistingPublishCategoryId  = PublishCategoryId 
					FROM ZnodePublishCatalogLog ZPCL 
					where ZPCL.PublishCatalogLogId = @VersionId  and IsCategoryPublished =1 

			IF NOT EXISTS (SELECT TOP 1 1 FROM Split(@ExistingPublishCategoryId  , ',') SP WHERE SP.Item = Convert(nvarchar(50),  @PublishCategoryId) )
					BEGIN
					
						If Isnull(@ExistingPublishCategoryId,'')  = '' 
							SET @ExistingPublishCategoryId  = Convert(nvarchar(100),@PublishCategoryId )
						else 
							SET @ExistingPublishCategoryId  = Isnull(@ExistingPublishCategoryId,'') + ',' +  Convert(nvarchar(100),@PublishCategoryId )

							
				
						UPDATE ZnodePublishCatalogLog SET PublishCategoryId = @MaxId ,
						ModifiedDate = @GetDate
						WHERE PublishCatalogLogId = @VersionId;
					END
					DELETE FROM ZnodePublishedXml where  IsCategoryXML =1  and  PublishCataloglogId = @VersionId  and  PublishedId = @PublishCategoryId 
					SET @Counter  = @Counter  + 1  
				END
			END 
			ElSE
			Begin
				 UPDATE ZnodePublishCatalogLog 
				 SET PublishCategoryId = (SELECT COUNT(PublishCategoryId)  FROM @TBL_CategoryXml
				 GROUP BY PublishCategoryId																				
				 ), IsCategoryPublished = 1 WHERE PublishCatalogLogId = @VersionId;

				 DELETE FROM ZnodePublishedXml WHERE PublishCataloglogId = @VersionId;
             End
             
			 INSERT INTO ZnodePublishedXml (PublishCatalogLogId,PublishedId,PublishedXML,IsCategoryXML,IsProductXML,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             SELECT PublishCatalogLogId PublishCataloglogId,PublishCategoryId,CategoryXml,1,0,LocaleId,@UserId,@GetDate,@UserId,@GetDate 
			 FROM @TBL_CategoryXml 
		
			
			-----------------------------------------------------------------------------------------------------------------------------
		
	
			 Select Distinct PublishCategoryId from @TBL_DeletedPublishCategoryIds
			 UNION
			--not published parentcategory
			SELECT DISTINCT PublishCategoryId FROM ZnodePublishCategory A
			INNER JOIN @TBL_PimCategoryIds B ON (A.PimCategoryId = B.PimCategoryId)
			WHERE A.PublishCatalogId = @PublishCataLogId AND B.PimCategoryHierarchyId = A.PimCategoryHierarchyId
			--UNION
			--SELECT DISTINCT PublishCategoryId from ZnodePublishCategory A
			--INNER JOIN @TBL_PimCategoryIds B ON (A.PimParentCategoryId = B.PimCategoryId)
			--WHERE
			--A.PublishCatalogId =@PublishCataLogId

			 SELECT CategoryXml 
			 FROM @TBL_CategoryXml 
			
			 UPDATE ZnodePimCategory SET IsCategoryPublish =1,PublishStateId = @PublishStateId WHERE pimCategoryId IN (SELECT PimCategoryId FROM @TBL_PimCategoryIds)
             COMMIT TRAN GetPublishCategory;
			 
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE();
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPublishCategoryGroup @PublishCatalogId = '+CAST(@PublishCatalogId AS VARCHAR(50))+',@UserId ='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(50));
             SET @Status = 0;
             ROLLBACK TRAN GetPublishCategory;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_GetPublishCategoryGroup',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishProductbulk')
BEGIN 
	DROP PROCEDURE Znode_GetPublishProductbulk
END
GO
CREATE PROCEDURE [dbo].[Znode_GetPublishProductbulk]
(
@PublishCatalogId INT = 0 
,@VersionId       VARCHAR(50) = 0 
,@PimProductId    TransferId Readonly
,@UserId		  INT = 0 
,@PimCategoryHierarchyId  INT = 0 
,@PimCatalogId INT = 0 
,@LocaleIds TransferId READONLY
,@PublishStateId INT = 0 
)
With RECOMPILE
AS
-- 
/*
DECLARE @rrte transferId 
INSERT INTO @rrte
SELECT 1 

EXEC Znode_GetPublishProductbulk @PublishCatalogId=3,@UserId= 2 ,@localeIDs = @rrte,@PublishStateId = 3 

*/
BEGIN 
  BEGIN TRY 
 SET NOCOUNT ON 

EXEC Znode_InsertUpdatePimAttributeXML 1 
EXEC Znode_InsertUpdateCustomeFieldXML 1
EXEC Znode_InsertUpdateAttributeDefaultValue 1 


   IF OBJECT_ID('tempdb..#PimProductAttributeXML') is not null
   BEGIN 
	 DROP TABLE #PimProductAttributeXML
   END
   IF OBJECT_ID('tempdb..#PimDefaultValueLocale') is not null
   BEGIN 
    DROP TABLE #PimDefaultValueLocale
   END
   IF OBJECT_ID('tempdb..#TBL_CategoryCategoryHierarchyIds') is not null
   BEGIN 
    DROP TABLE #TBL_CategoryCategoryHierarchyIds
   END

   DECLARE @PimMediaAttributeId INT = dbo.Fn_GetProductImageAttributeId()
   
   CREATE TABLE #PimProductAttributeXML (PimAttributeXMLId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )
  	
   CREATE TABLE #TBL_CategoryCategoryHierarchyIds  (CategoryId int , ParentCategoryId int ) 
	
   If (@PimCategoryHierarchyId <> 0 AND @PimCatalogId <> 0 )
		INSERT INTO #TBL_CategoryCategoryHierarchyIds(CategoryId , ParentCategoryId )
			Select Distinct PimCategoryId , Null FROM (
				SELECT PimCategoryId,ParentPimCategoryId from DBO.[Fn_GetRecurciveCategoryIds](@PimCategoryHierarchyId,@PimCatalogId)
				Union 
				Select PimCategoryId , null  from ZnodePimCategoryHierarchy where PimCategoryHierarchyId = @PimCategoryHierarchyId 
				Union 
				Select PimCategoryId , null  from [Fn_GetRecurciveCategoryIds_new] (@PimCategoryHierarchyId,@PimCatalogId) ) Category  


   CREATE TABLE #PimDefaultValueLocale  (PimAttributeDefaultXMLId INT  PRIMARY KEY ,PimAttributeDefaultValueId INT ,LocaleId INT ) 
   DECLARE @ProductNamePimAttributeId INT = dbo.Fn_GetProductNameAttributeId(),@DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId(),@LocaleId INT = 0 
		,@SkuPimAttributeId  INT =  dbo.Fn_GetProductSKUAttributeId() , @IsActivePimAttributeId INT =  dbo.Fn_GetProductIsActiveAttributeId()
   DECLARE @GetDate DATETIME =dbo.Fn_GetDate()
   DECLARE @TBL_LocaleId  TABLE (RowId INT IDENTITY(1,1) PRIMARY KEY  , LocaleId INT )
			
			INSERT INTO @TBL_LocaleId (LocaleId)
			SELECT  LocaleId
			FROM ZnodeLocale MT 
			WHERE IsActive = 1
			AND (EXISTS (SELECT TOP 1 1  FROM @LocaleIds RT WHERE RT.Id = MT.LocaleId )
			OR NOT EXISTS (SELECT TOP 1 1 FROM @LocaleIds )) 

  DECLARE @Counter INT =1 ,@maxCountId INT = (SELECT max(RowId) FROM @TBL_LocaleId ) 
 

 CREATE TABLE #TBL_PublishCatalogId (PublishCatalogId INT,PublishProductId INT,PimProductId  INT   , VersionId INT, PublishCategoryId int ,LocaleId INT )

 CREATE INDEX idx_#TBL_PublishCatalogIdPimProductId on #TBL_PublishCatalogId(PimProductId)

  CREATE INDEX idx_#TBL_PublishCatalogIdPimPublishCatalogId on #TBL_PublishCatalogId(PublishCatalogId)

  If (@PimCategoryHierarchyId <> 0 AND @PimCatalogId <> 0 )
  BEGIN
			 INSERT INTO #TBL_PublishCatalogId(PublishCatalogId ,PublishProductId ,PimProductId  , VersionId ,PublishCategoryId ,LocaleId)  
			 SELECT distinct ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,MAX(ZPCP.PublishCataloglogId ) VersionId ,ZPC.PublishCategoryId,ZPCP.LocaleId
				 FROM ZnodePublishProduct ZPP INNER JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
				 INNER JOIN ZnodePublishCategoryProduct ZPPP ON ZPP.PublishProductId  = ZPPP.PublishProductId  
				 AND ZPCP.PublishCatalogId = ZPPP.PublishCatalogId
				 INNER JOIN ZnodePublishCategory ZPC ON ZPC.PublishCatalogId = ZPPP.PublishCatalogId AND ZPPP.PublishCategoryId = ZPC.PublishCategoryId 
				 WHERE ZPP.PublishCatalogId = @PublishCatalogId  and ZPCP.PublishStateId =  @PublishStateId
				 AND 
				 ZPC.PimCategoryId in (Select CategoryId from #TBL_CategoryCategoryHierarchyIds )
				 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId ,ZPC.PublishCategoryId,ZPCP.LocaleId	

			INSERT INTO #TBL_PublishCatalogId(PublishCatalogId ,PublishProductId ,PimProductId  , VersionId ,PublishCategoryId ,LocaleId)
			SELECT DISTINCT ZPP.PublishCatalogId,ZPP.PublishProductId,PimProductId,MAX(ZPCP.PublishCatalogLogId) VersionId,NULL, ZPCP.LocaleId
				 FROM ZnodePublishProduct ZPP 
				 INNER JOIN ZnodePublishCatalogLog ZPCP ON 
				 (ZPCP.PublishCatalogId = ZPP.PublishCatalogId) 
				 WHERE				 (EXISTS (SELECT TOP 1 1 FROM @pimProductId SP WHERE SP.Id = ZPP.PimProductId ))
				 AND (ZPP.PublishCatalogId = @publishCatalogId )
				 AND NOT Exists (Select TOP 1 1 from #TBL_PublishCatalogId TPL where TPL.PublishProductId = ZPP.PublishProductId)
				 AND ZPCP.PublishStateId =  @PublishStateId
			GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId , ZPCP.LocaleId



  END
  ELSE 
  BEGIN
			INSERT INTO #TBL_PublishCatalogId(PublishCatalogId ,PublishProductId,PimProductId ,VersionId,LocaleId  ) 
			 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,  
											MAX(PublishCatalogLogId) ,ZPCP.LocaleId
				 FROM ZnodePublishProduct ZPP 
				 INNER JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
				 WHERE (EXISTS (SELECT TOP 1 1 FROM @PimProductId SP 
				 WHERE SP.Id = ZPP.PimProductId  AND  (@PublishCatalogId IS NULL OR @PublishCatalogId = 0 ))
				 OR  (ZPP.PublishCatalogId = @PublishCatalogId ))
				 --AND  ZPCP.PublishStateId =  @PublishStateId
				 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId ,ZPCP.LocaleId
  END
           
		     DECLARE   @TBL_ZnodeTempPublish TABLE (PimProductId INT , AttributeCode VARCHAR(300) ,AttributeValue NVARCHAR(max) ) 			
			 DECLARE @TBL_AttributeVAlueLocale TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT,LocaleId INT 
			 )

	
	
		
WHILE @Counter <= @maxCountId
BEGIN
 
 SET @LocaleId = (SELECT TOP 1 LocaleId FROM @TBL_LocaleId MT 
  WHERE  RowId = @Counter)
 
  INSERT INTO #PimProductAttributeXML 
  SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeXML
  WHERE LocaleId = @LocaleId
  
  IF( @LocaleId <> @DefaultLocaleId )
  BEGIN
	INSERT INTO #PimProductAttributeXML 
	SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
	FROM ZnodePimAttributeXML ZPAX
	WHERE ZPAX.LocaleId = @DefaultLocaleId  
	AND NOT EXISTS (SELECT TOP 1 1 FROM #PimProductAttributeXML ZPAXI WHERE ZPAXI.PimAttributeId = ZPAX.PimAttributeId )
  END

  INSERT INTO #PimDefaultValueLocale
  SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultXML
  WHERE localeId = @LocaleId

  IF( @LocaleId <> @DefaultLocaleId )
  BEGIN
	INSERT INTO #PimDefaultValueLocale 
	SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
	FROM ZnodePimAttributeDefaultXML ZX
	WHERE localeId = @DefaultLocaleId
	AND NOT EXISTS (SELECT TOP 1 1 FROM #PimDefaultValueLocale TRTR WHERE TRTR.PimAttributeDefaultValueId = ZX.PimAttributeDefaultValueId)
  END
  	 
  CREATE TABLE #TBL_CustomeFiled  (PimCustomeFieldXMLId INT ,CustomCode VARCHAR(300),PimProductId INT ,LocaleId INT )

  INSERT INTO #TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,RTR.PimProductId ,RTR.LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML RTR 
  INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = RTR.PimProductId AND RTR.LocaleID = ZPP.LocaleId)
  WHERE RTR.LocaleId = @LocaleId
 
 
  INSERT INTO #TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,ITR.PimProductId ,ITR.LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML ITR
  INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ITR.PimProductId AND ITR.LocaleID = ZPP.LocaleId)
  WHERE ITR.LocaleId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM #TBL_CustomeFiled TBL  WHERE ITR.CustomCode = TBL.CustomCode AND ITR.PimProductId = TBL.PimProductId)
       
       
	 SELECT VIR.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId,VIR.LocaleId , VIR.AttributeValue, VIR.AttributeCode ,ROW_NUMBER() Over(Partition By VIR.PimProductId,PimAttributeId ORDER BY VIR.PimProductId,PimAttributeId  ) RowId
	 INTO #TBL_AttributeVAlue
	 FROM View_LoadManageProductInternal VIR
	 WHERE ( LocaleId = @DefaultLocaleId OR LocaleId = @LocaleId )
	 AND EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
	  UNION ALL 
	 SELECT VIR.PimProductId,VIR.PimAttributeId,ZPDE.PimProductAttributeMediaId,ZPDE.LocaleId ,ZPDE.MediaPath AS AttributeValue, d.AttributeCode ,ROW_NUMBER() Over(Partition By VIR.PimProductId,VIR.PimAttributeId ORDER BY VIR.PimProductId,VIR.PimAttributeId  ) RowId
	 FROM ZnodePimAttributeValue  VIR
	 INNER JOIN ZnodePimProductAttributeMedia ZPDE ON (ZPDE.PimAttributeValueId = VIR.PimAttributeValueId )
	 INNER JOIN ZnodePimAttribute d ON ( d.PimAttributeId=VIR.PimAttributeId )
	 WHERE ( ZPDE.LocaleId = @DefaultLocaleId OR ZPDE.LocaleId = @LocaleId )
	 AND EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
	  Union All
	 SELECT VIR.PimProductId,VIR.PimAttributeId,ZPDVL.PimAttributeDefaultValueLocaleId,ZPDVL.LocaleId ,ZPDVL.AttributeDefaultValue AS AttributeValue, d.AttributeCode ,ROW_NUMBER() Over(Partition By VIR.PimProductId,VIR.PimAttributeId ORDER BY VIR.PimProductId,VIR.PimAttributeId  ) RowId
	 FROM ZnodePimAttributeValue  VIR
	 INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1  )
	 INNER JOIN ZnodePimAttributeDefaultValue ZPADV ON ZPADV.PimAttributeId = D.PimAttributeId
	 INNER JOIN ZnodePimAttributeDefaultValueLocale ZPDVL   on (ZPADV.PimAttributeDefaultValueId = ZPDVL.PimAttributeDefaultValueId)
	 --INNER JOIN ZnodePimProductAttributeDefaultValue ZPDVP ON (ZPDVP.PimAttributeValueId = VIR.PimAttributeValueId AND ZPADV.PimAttributeDefaultValueId = ZPDVP.PimAttributeDefaultValueId )
	 WHERE ( ZPDVL.LocaleId = @DefaultLocaleId OR ZPDVL.LocaleId = @LocaleId )
	 AND EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
	 Union All 
	SELECT VIR.PimProductId,VIR.PimAttributeId,'','','',D.AttributeCode,ROW_NUMBER() Over(Partition By VIR.PimProductId,VIR.PimAttributeId ORDER BY VIR.PimProductId,VIR.PimAttributeId  ) RowId
	FROM ZnodePimAttributeValue  VIR
	INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1 )
	WHERE  EXISTS(SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )

	 
	 UPDATE #TBL_AttributeVAlue SET rowid = (SELECT MAX(rowid) FROM #TBL_AttributeVAlue b WHERE a.PimProductId=b.PimProductId AND a.PimAttributeId = b.PimAttributeId )
	 FROM #TBL_AttributeVAlue a
	
  SET @versionId = (SELECT TOP 1 VersionId FROM #TBL_PublishCatalogId) 
  

 IF OBJECT_ID('tempdb..#Cte_GetData') IS NOT NULL
 BEGIN 
 DROP TABLE #Cte_GetData
 END 

 CREATE TABLE #Cte_GetData (PimProductId INT,AttributeCode VARCHAR(600),AttributeValue NVARCHAR(max),VersionId INT)

 CREATE INDEX idx_#Cte_GetDataPimProductId ON #Cte_GetData(PimProductId)


INSERT INTO #Cte_GetData(PimProductId ,AttributeCode,AttributeValue,VersionId)
SELECT  a.PimProductId,a.AttributeCode , '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(a.AttributeValue,'')+'</AttributeValues> </AttributeEntity>  </Attributes>'  AttributeValue,VersionId
FROM #TBL_AttributeVAlue a 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = a.PimAttributeId )
INNER JOIN #PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId)
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = a.PimProductId)
WHERE a.LocaleId  = CASE WHEN a.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END
AND NOT EXISTS (SELECT TOP 1 1 FROM Fn_GetProductMediaAttributeId() TY WHERE TY.PimAttributeId = c.PimAttributeId)
 


INSERT INTO #Cte_GetData(PimProductId ,AttributeCode,AttributeValue,VersionId)
SELECT THB.PimProductId,THB.CustomCode,'<Attributes><AttributeEntity>'+CustomeFiledXML+'</AttributeEntity></Attributes>' ,VersionId
FROM ZnodePimCustomeFieldXML THB 
INNER JOIN #TBL_CustomeFiled TRTE ON (TRTE.PimCustomeFieldXMLId = THB.PimCustomeFieldXMLId)
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = THB.PimProductId)
UNION ALL 
SELECT ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues></AttributeValues>'+'<SelectValues>'+
			   STUFF((
                    SELECT '  '+ DefaultValueXML  FROM ZnodePimAttributeDefaultXML AA 
				 INNER JOIN #PimDefaultValueLocale GH ON (GH.PimAttributeDefaultXMLId = AA.PimAttributeDefaultXMLId)
				 INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId )
				 WHERE (ZPADV.PimAttributeValueId = ZPAV.PimAttributeValueId)
    FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</SelectValues> </AttributeEntity></Attributes>' AttributeValue ,VersionId
FROM ZnodePimAttributeValue ZPAV  
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
AND EXISTS (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)

---for PLP

INSERT INTO #Cte_GetData(PimProductId ,AttributeCode,AttributeValue,VersionId)
SELECT DISTINCT  UOP.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues></AttributeValues>'+'<SelectValues>'+
			   STUFF((
                    SELECT DISTINCT '  '+REPLACE(DefaultValueXML,'</SelectValuesEntity>','<VariantDisplayOrder>'+CAST(ISNULL(ZPA.DisplayOrder,0) AS VARCHAR(200))+'</VariantDisplayOrder>
					<VariantSKU>'+ISNULL(ZPAVL_SKU.AttributeValue,'')+'</VariantSKU>
					<VariantImagePath>'+ISNULL((SELECT ''+ZM.Path FOR XML Path ('')),'')+'</VariantImagePath></SelectValuesEntity>')   
				 FROM ZnodePimAttributeDefaultXML AA 
				 INNER JOIN #PimDefaultValueLocale GH ON (GH.PimAttributeDefaultXMLId = AA.PimAttributeDefaultXMLId)
				 INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId )
				 INNER JOIN ZnodePimAttributeValue ZPAV1 ON (ZPAV1.PimAttributeValueId= ZPADV.PimAttributeValueId )
				 -- check/join for active variants 
				 INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId =ZPAV1.PimProductId)
				 INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON (ZPAV.PimAttributevalueid = ZPAVL.PimAttributeValueId AND ZPAVL.AttributeValue = 'True')
				 INNER JOIN ZnodePimProductTypeAssociation YUP ON (YUP.PimProductId = ZPAV1.PimProductId)
				 -- SKU
				 INNER JOIN ZnodePimAttributeValue ZPAV_SKU ON(YUP.PimProductId = ZPAV_SKU.PimProductId)
				 INNER JOIN ZnodePimAttributeValueLocale ZPAVL_SKU ON (ZPAVL_SKU.PimAttributeValueId = ZPAV_SKU.PimAttributeValueId)
				 LEFT  JOIN ZnodePimAttributeValue ZPAV12 ON (ZPAV12.PimProductId= YUP.PimProductId  AND ZPAV12.PimAttributeId = @PimMediaAttributeId ) 
				 LEFT JOIN ZnodePimProductAttributeMedia ZPAVM ON (ZPAVM.PimAttributeValueId= ZPAV12.PimAttributeValueId ) 
				 LEFT JOIN ZnodeMedia ZM ON (ZM.MediaId = ZPAVM.MediaId)
				 LEFT JOIN ZnodePimAttribute ZPA ON (ZPA.PimattributeId = ZPAV1.PimAttributeId)
				 WHERE (YUP.PimParentProductId  = UOP.PimProductId AND ZPAV1.pimAttributeId = UOP.PimAttributeId )
				 -- Active Variants
				 AND ZPAV.PimAttributeId = (SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'IsActive')
				 -- VariantSKU
				 AND ZPAV_SKU.PimAttributeId = (SELECT PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'SKU')
FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</SelectValues> </AttributeEntity></Attributes>' AttributeValue ,VersionId
FROM ZnodePimConfigureProductAttribute UOP 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = UOP.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = UOP.PimProductId)
WHERE  EXISTS (SELECT * FROM #PimProductAttributeXML b WHERE b.PimAttributeXMLId = c.PimAttributeXMLId)


INSERT INTO #Cte_GetData(PimProductId ,AttributeCode,AttributeValue,VersionId)
SELECT DISTINCT  ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+SUBSTRING((SELECT DISTINCT  ',' +ZPPG.MediaPath FROM ZnodePimProductAttributeMedia ZPPG
     INNER JOIN #TBL_AttributeVAlue FTRE ON (FTRE.PimProductId = ZPAV.PimProductId AND FTRE.PimAttributeId = ZPAV.PimAttributeId  AND FTRE.LocaleId  = CASE WHEN FTRE.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )
	 WHERE ZPPG.PimProductAttributeMediaId = FTRE.ZnodePimAttributeValueLocaleId
	 FOR XML PATH ('')
 ),2,4000)+'</AttributeValues></AttributeEntity></Attributes>' AttributeValue ,VersionId	 
FROM ZnodePimAttributeValue ZPAV 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeMedia ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
AND EXISTS (SELECT * FROM #PimProductAttributeXML b WHERE b.PimAttributeXMLId = c.PimAttributeXMLId)

insert into #Cte_GetData(PimProductId ,AttributeCode,AttributeValue,VersionId)
SELECT ZPLP.PimParentProductId ,c.AttributeCode, '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(SUBSTRING((SELECT ','+CAST(PublishProductId AS VARCHAR(50)) 
							 FROM #TBL_PublishCatalogId ZPPI 
							 INNER JOIN ZnodePimLinkProductDetail ZPLPI ON (ZPLPI.PimProductId = ZPPI.PimProductId)
							 WHERE ZPLPI.PimParentProductId = ZPLP.PimParentProductId
							 AND ZPLPI.PimAttributeId   = ZPLP.PimAttributeId
							 FOR XML PATH ('') ),2,4000),'')+'</AttributeValues></AttributeEntity></Attributes>'   AttributeValue ,ZPP.VersionId
							
FROM ZnodePimLinkProductDetail ZPLP  
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPLP.PimParentProductId)
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPLP.PimAttributeId )
WHERE EXISTS (SELECT * FROM #PimProductAttributeXML b WHERE b.PimAttributeXMLId = c.PimAttributeXMLId)
GROUP BY ZPLP.PimParentProductId , ZPP.PublishProductId  ,ZPLP.PimAttributeId,c.AttributeCode,c.AttributeXML,ZPP.PublishCatalogId,ZPP.VersionId



SELECT a.PimProductId ,CAST((SELECT ''+dbo.FN_trim(b.AttributeValue) FOR XML PATH(''))  AS NVARCHAR(max)) AttributeValue , b.LocaleId  ,a.PimAttributeId,c.AttributeCode ,b.ZnodePimAttributeValueLocaleId
INTO #View_LoadManageProductInternal
FROM ZnodePimAttributeValue a 
INNER JOIN  ZnodePimAttributeValueLocale b ON ( b.PimAttributeValueId = a.PimAttributeValueId )
INNER JOIN ZnodePimAttribute c ON ( c.PimAttributeId=a.PimAttributeId )
WHERE c.AttributeCode = 'SKU'

INSERT INTO #Cte_GetData(PimProductId ,AttributeCode,AttributeValue,VersionId)
SELECT ZPAV.PimProductId,'DefaultSkuForConfigurable' ,'<Attributes><AttributeEntity>'+REPLACE(REPLACE (c.AttributeXML,'ProductType','DefaultSkuForConfigurable'),'Product Type','Default Sku For Configurable')+'<AttributeValues>'+
 (SELECT TOP 1 AttributeValue FROM #View_LoadManageProductInternal ad 
 INNER JOIN ZnodePimProductTypeAssociation yt ON (yt.PimProductId = ad.PimProductId)
 WHERE Ad.AttributeCode = 'SKU'
 AND yt.PimParentProductId = ZPAV.PimProductId
 ORDER BY yt.DisplayOrder , yt.PimProductTypeAssociationId ASC)
+'</AttributeValues></AttributeEntity></Attributes>' AttributeValue ,ZPP.VersionId
FROM ZnodePimAttributeValue ZPAV  
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL 
INNER JOIN ZnodePimAttributeDefaultValue dr ON (dr.PimAttributeDefaultValueId = ZPADVL.PimAttributeDefaultValueId)
 WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId
 AND dr.AttributeDefaultValueCode= 'ConfigurableProduct' 
)
AND EXISTS (SELECT * FROM #PimProductAttributeXML b WHERE b.PimAttributeXMLId = c.PimAttributeXMLId)
AND c.AttributeCode = 'ProductType' 


---------brand details 
CREATE TABLE #Cte_BrandData (PimProductId INT,BrandXML NVARCHAR(max))

INSERT INTO #Cte_BrandData ( PimProductId, BrandXML )
SELECT  DISTINCT ZBP.PimProductId,'<Brands><BrandEntity><BrandId>'+CAST(ZBD.BrandId AS VARCHAR(50))+'</BrandId><BrandCode>'+ZBD.BrandCode+'</BrandCode><BrandName>'+ZBDL.BrandName+'</BrandName></BrandEntity></Brands>' as BrandXML					   		   
FROM [ZnodeBrandDetails] AS ZBD
INNER JOIN ZnodeBrandDetaillocale ZBDL ON ZBD.BrandId = ZBDL.BrandId
INNER JOIN [ZnodeBrandProduct] AS ZBP ON ZBD.BrandId = ZBP.BrandId

--  --CREATE INDEX IND_Znode

  DELETE tu FROM ZnodePublishedXml tu  WHERE 
  EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId TY WHERE TY.VersionId = tu.PublishCatalogLogId AND Tu.PublishedId = ty.PublishProductId  )
  AND IsProductXML = 1   AND LocaleId = @LocaleId 

  
--  --ALTER INDEX ALL ON ZnodePublishedXml  REBUILD WITH (FILLFACTOR = 80 ) 
  If (@PimCategoryHierarchyId <> 0 AND @PimCatalogId <> 0 )
  BEGIN
		
		--Collect index of other categorys
		IF OBJECT_ID('tempdb..#Index') IS NOT NULL
		BEGIN 
			DROP TABLE #Index
		END 
		CREATE TABLE #Index (RowIndex int ,PublishCategoryId int , PublishProductId  int )		
		INSERT INTO  #Index ( RowIndex ,PublishCategoryId , PublishProductId )
		SELECT CAST(ROW_NUMBER()Over(Partition BY ZPC.PublishProductId 
		Order BY ISNULL(ZPC.PublishCategoryId,'0') desc )   AS VARCHAR(100)),
		ZPC.PublishCategoryId , ZPC.PublishProductId
		FROM ZnodePublishCategoryProduct ZPC where ZPC.PublishCatalogId = @PublishCatalogId
		
	

		--Publish parent products with index number 
		INSERT INTO ZnodePublishedXml (PublishCatalogLogId,PublishedId,PublishedXML,IsProductXML,LocaleId
		,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PublishCategoryId)
		SELECT zpp.VersionId,zpp.PublishProductId,'<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'+CAST(ISNULL(ZPCP.PublishCategoryId,'')  AS VARCHAR(50))+'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKU>'+'<SKULower>'+CAST(ISNULL((SELECT ''+LOWER(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
		+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +'</IsParentProducts><CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000)) +'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
		+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
						FROM ZnodeProfileCatalog ZPFC 
						INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
						WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+
						'</TempProfileIds>
						 <ProductIndex>'+ CAST(ZPCP.ProductIndex AS VARCHAR(200))+
						'</ProductIndex>
						<IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
		'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
		ISNULL(STUFF(( SELECT '  '+ BrandXML  FROM #Cte_BrandData BD WHERE BD.PimProductId = ZPP.PimProductId   
				FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, ''),'')+
		STUFF(( SELECT '  '+ AttributeValue  FROM #Cte_GetData TY WHERE TY.PimProductId = ZPP.PimProductId AND TY.VersionId = ZPP.VersionId   
		FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>' xmlvalue,1,@LocaleId,@UserId , @GetDate , @UserId,@GetDate
		,ZPCP.PublishCategoryId
		FROM  #TBL_PublishCatalogId zpp
		INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
		INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
		LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT JOIN ZnodePublishCategory ZPC ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId 
		AND ZPP.PublishCategoryId = ZPC.PublishCategoryId 
		)
		LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId AND  ZPCCF.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId
		)
		LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ISNULL(ZPCP.PublishCategoryId,0) AND ZPCD.LocaleId = @LocaleId )
		WHERE ZPPDFG.LocaleId = @LocaleId AND ZPP.LocaleId = @LocaleId AND  ZPC.PimCategoryId in (Select CategoryId from #TBL_CategoryCategoryHierarchyIds ) 
		and zpp.PublishCategoryId IS NOT NULL

		
	
	 --Publish only associate product 
	 INSERT INTO ZnodePublishedXml (PublishCatalogLogId,PublishedId,PublishedXML,IsProductXML,LocaleId
		,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PublishCategoryId)
		SELECT zpp.VersionId,zpp.PublishProductId,'<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'+CAST(ISNULL(ZPCP.PublishCategoryId,'')  AS VARCHAR(50))+'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKU>'+'<SKULower>'+CAST(ISNULL((SELECT ''+LOWER(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
		+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +'</IsParentProducts><CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000)) +'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
		+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
						FROM ZnodeProfileCatalog ZPFC 
						INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
						WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+
						'</TempProfileIds>
						 <ProductIndex>'+ CAST(ZPCP.ProductIndex AS VARCHAr(200))+
						'</ProductIndex>
						<IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
		'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
		STUFF(( SELECT '  '+ AttributeValue  FROM #Cte_GetData TY WHERE TY.PimProductId = ZPP.PimProductId   AND TY.VersionId= ZPP.VersionId
		FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>' xmlvalue,1,@LocaleId,@UserId , @GetDate , @UserId,@GetDate
		,ZPCP.PublishCategoryId
		FROM  #TBL_PublishCatalogId zpp
		INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
		INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
		LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT JOIN ZnodePublishCategory ZPC ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId 
		AND ZPP.PublishCategoryId = ZPC.PublishCategoryId )
		AND ZPC.PimCategoryId in (Select CategoryId from #TBL_CategoryCategoryHierarchyIds )
		LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId AND  ZPCCF.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId
		AND ZPCCF.PimCategoryId in (Select CategoryId from #TBL_CategoryCategoryHierarchyIds ))
		LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ISNULL(ZPCP.PublishCategoryId,0) AND ZPCD.LocaleId = @LocaleId )
		WHERE ZPPDFG.LocaleId = @LocaleId AND ZPP.LocaleId = @LocaleId AND zpp.PublishCategoryId IS NULL
		
  END
  ELSE
  BEGIN

      INSERT INTO ZnodePublishedXml (PublishCatalogLogId
		,PublishedId
		,PublishedXML
		,IsProductXML
		,LocaleId
		,CreatedBy
		,CreatedDate
		,ModifiedBy
		,ModifiedDate
		,PublishCategoryId)
		SELECT zpp.VersionId,zpp.PublishProductId,'<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'+CAST(ISNULL(ZPCP.PublishCategoryId,'')  AS VARCHAR(50))+'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKU>'+'<SKULower>'+CAST(ISNULL((SELECT ''+LOWER(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
		+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +'</IsParentProducts><CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000)) +'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
		+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
						FROM ZnodeProfileCatalog ZPFC 
						INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
						WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+'</TempProfileIds><ProductIndex>'+CAST(ROW_NUMBER()Over(Partition BY zpp.PublishProductId Order BY ISNULL(ZPC.PublishCategoryId,'0') ) AS VARCHAr(100))+'</ProductIndex><IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
		'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
		STUFF(( SELECT '  '+ AttributeValue  FROM #Cte_GetData TY WHERE TY.PimProductId = ZPP.PimProductId   AND TY.VersionId = ZPP.VersionId
		FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>' xmlvalue,1,@LocaleId,@UserId , @GetDate , @UserId,@GetDate
		,ZPCP.PublishCategoryId
		
		FROM  #TBL_PublishCatalogId zpp
		INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
		INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
		LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT JOIN ZnodePublishCategory ZPC ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId )
		LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId AND  ZPCCF.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId)
		LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ISNULL(ZPCP.PublishCategoryId,0) AND ZPCD.LocaleId = @LocaleId )
		WHERE ZPPDFG.LocaleId = @LocaleId AND ZPP.LocaleId = @LocaleId

      
END 
 

DELETE FROM #TBL_CustomeFiled
DELETE FROM #PimDefaultValueLocale
 IF OBJECT_ID('tempdb..#PimProductAttributeXML') is not null
 BEGIN 
 DELETE FROM #PimProductAttributeXML
 END
 IF OBJECT_ID('tempdb..#Cte_GetData') is not null
 BEGIN 
 DROP TABLE #Cte_GetData
 END
   IF OBJECT_ID('tempdb..#Cte_BrandData') is not null
 BEGIN 
 DROP TABLE #Cte_BrandData
 END
  IF OBJECT_ID('tempdb..#TBL_AttributeVAlue') is not null
 BEGIN 
 DROP TABLE #TBL_AttributeVAlue
 END
 IF OBJECT_ID('tempdb..#View_LoadManageProductInternal') is not null
 BEGIN 
 DROP TABLE #View_LoadManageProductInternal
 END
 IF OBJECT_ID('tempdb..#TBL_CustomeFiled') is not null
 BEGIN 
 DROP TABLE #TBL_CustomeFiled
 END
SET @Counter = @counter + 1 
END 
END TRY 
BEGIN CATCH 

 SELECT ERROR_MESSAGE()
 UPDATE ZnodePublishCatalogLog 
	    SET IsCatalogPublished = 0 
		,IsCategoryPublished = 0,IsProductPublished= 0  
		WHERE EXISTS (SELECT TOP 1 1 from #TBL_PublishCatalogId TR WHERE TR.VersionId = ZnodePublishCatalogLog.PublishCatalogLogId)
END CATCH 
END
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishProducts')
BEGIN 
	DROP PROCEDURE Znode_GetPublishProducts
END
GO
CREATE PROCEDURE [dbo].[Znode_GetPublishProducts](
	    @PublishCatalogId int= NULL
	  , @PublishCategoryId varchar(2000)= NULL
	  , @UserId int
	  , @NotReturnXML int= NULL
	  , @PimProductId TransferId Readonly
	  , @VersionId int= 0
	  , @IsDebug bit= 0
	  , @TokenId nvarchar(max)= ''
	  , @LocaleId TransferId READONLY 
	  , @PublishStateId INT = 0 
	  )
AS
    
/*
    Summary :	Publish Product on the basis of publish catalog
				Retrive all Product details with attributes and insert into following tables 
				1.	ZnodePublishedXml
				2.	ZnodePublishCategoryProduct
				3.	ZnodePublishProduct
				4.	ZnodePublishProductDetail

                Product details include all the type of products link, grouped, configure and bundel products (include addon) their associated products 
				collect their attributes and values into tables variables to process for publish.  
                
				Finally genrate XML for products with their attributes and inserted into ZnodePublishedXml Znode Admin process xml from sql server to mongodb
				one by one.

    Unit Testing
    
    SELECT * FROM ZnodePimCustomField WHERE CustomCode = 'Test'
    SELECT * FROM ZnodePimCatalogCategory WHERE pimCatalogId = 3 AND PimProductId = 181
    SELECT * FROM ZnodePimCustomFieldLocale WHERE PimCustomFieldId = 1
    SELECT * FROM ZnodePublishProduct WHERE PublishProductid = 213 = 30
    select * from znodepublishcatalog
    SELECT * FROM view_loadmanageProduct WHERE Attributecode = 'ProductNAme' AND AttributeValue LIKE '%Apple%'
    SELECT * FROM ZnodePimCategoryProduct WHERE  PimProductId = 181
    SELECT * FROM ZnodePimCatalogcategory WHERE pimcatalogId = 3 \
	DECLARE @ttr TransferId 
	INSERT INTO @ttr  
	SELECT 25719 
    EXEC Znode_GetPublishProducts  @PublishCatalogId = 3 ,@UserId= 2 ,@NotReturnXML= NULL,@PimProductId = @ttr,@IsDebug= 1 
    EXEC Znode_GetPublishProducts  @PublishCatalogId = null,@UserId= 2 ,@NotReturnXML= NULL,@IsDebug= 1  ,@PimProductId = 103
    EXEC Znode_GetPublishProducts  @PublishCatalogId =1,@UserId= 2 ,@RequiredXML= 1	
    SELECT * FROM 	ZnodePimCatalogCategory  WHERE pimcatalogId = 3  
    SELECT * FROM [dbo].[ZnodePimCategoryHierarchy]  WHERE pimcatalogId = 3 
 */
  
BEGIN
	
	BEGIN TRY
		SET NOCOUNT ON;
			 DECLARE @IsCatalogPublishInProcess BIT = 0
	         DECLARE @TBL_PublishIds TABLE (PublishProductId INT , PimProductId INT , PublishCatalogId INT)
			 DECLARE @PublishStateidForPriview INT = [dbo].[Fn_GetPublishStateIdForPreview]()
			 DECLARE @DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId()
			 
			 --User cananot modify / update UDT, Need to declare additinal table variable for editing in other store procedure.
			 DECLARE @PimProductId_Editable TransferId
			 
			 IF EXISTS (SELECT TOP 1 1  FROM ZnodePublishCatalogLog a 
			   INNER JOIN ZnodePimCatalogCategory b ON (b.PimCatalogId =a.PimCatalogId )
			   WHERE EXISTS ( SELECT TOP 1 1 FROM @PimProductId SP WHERE  b.PimProductId = SP.Id )
			   AND a.IsCatalogPublished IS NULL 
			   ) 
			   BEGIN 
				 SET   @IsCatalogPublishInProcess =1 
			   END 
			     
	         IF (( @PublishCatalogId IS NULL  OR @PublishCatalogId = 0 ) AND @IsCatalogPublishInProcess = 0 )
			 BEGIN 
			   -- Process call single product publish
			   INSERT INTO @TBL_PublishIds 
			   EXEC [dbo].[Znode_InsertPublishProductIds] @PublishCatalogId,@userid,@PimProductId
			
			   INSERT INTO @PimProductId_Editable
			   SELECT distinct PimProductId FROM @TBL_PublishIds
			   -- initiate single product publish 
			   EXEC Znode_GetPublishSingleProduct @PublishCatalogId,@VersionId,@PimProductId_Editable,@UserId,@TokenId , @LocaleId,@PublishStateId
			  -- SELECT 	@PimProductId	
			 END 
			 ELSE IF  @IsCatalogPublishInProcess = 0 
			 BEGIN 
				-- Process call catalog publish (include category, products with multiple types)
			     EXEC [dbo].[Znode_InsertPublishProductIds] @PublishCatalogId,@userid,@PimProductId
				 EXEC Znode_GetPublishProductbulk @PublishCatalogId=@PublishCatalogId,@VersionId=@VersionId,@PimProductId=@PimProductId,@userid=@userid,@LocaleIds= @LocaleId,@PublishStateId = @PublishStateId
				 UPDATE ZnodePimProduct SET IsProductPublish = 1,PublishStateId =  @PublishStateId 
				 WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePublishProduct ZPP WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId AND ZPP.PublishCatalogId = @PublishCatalogId)
			 END 
			
			 DECLARE @TBL_PublishCatalogId TABLE(PublishCatalogId INT,PublishProductId INT,PimProductId  INT , VersionId INT,LocaleId INT  );

			 INSERT INTO @TBL_PublishCatalogId 
			 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,MAX(PublishCatalogLogId) VersionId, ZPCP.LocaleId  
			 FROM ZnodePublishProduct ZPP 
			 LEFT JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
			 WHERE (EXISTS (SELECT TOP 1 1 FROM @TBL_PublishIds SP WHERE SP.PimProductId = ZPP.PimProductId  ))
			 and exists (select top 1 1 from @LocaleId yu where yu.Id = zpcp.LocaleId)
			 AND IsCatalogPublished = 1 
			 AND PublishStateId = @PublishStateId
			 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId , LocaleId 

			
			-- SELECT * FROM @TBL_PublishCatalogId

			IF EXISTS (SELECT TOP 1 1 FROM @PimProductId WHERE ID IS NOT NULL AND ID <> '')

			--IF @PimProductId IS NOT NULL AND @PimProductId <> ''
			BEGIN
				SELECT PublishedXML ProductXml
				FROM ZnodePublishedXml ZPX
				WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId TBLP WHERE TBLP.VersionId = ZPX.PublishCatalogLogId AND TBLP.PublishProductId = ZPX.PublishedId  )
				AND IsProductXML = 1
				AND @IsCatalogPublishInProcess = 0
				;

						
				SELECT PublishProductId  ,PublishCatalogId ,VersionId,LocaleId 
				FROM @TBL_PublishCatalogId
				WHERE @IsCatalogPublishInProcess = 0
				GROUP BY PublishProductId  ,PublishCatalogId ,VersionId,LocaleId;

				IF 	 @IsCatalogPublishInProcess = 1 
				BEGIN 
				SELECT 1 Id , 'Single product publish request cannot be processed as catalog or category publish is in progress. Please try after publish is complete.' MessageDetails,  CAST(0 AS BIT ) Status
				END 
				ELSE 
				BEGIN 
				SELECT 1 Id , ' Publish Successfull' MessageDetails, CAST(1 AS BIT ) Status
				END
				
		
				-- dataset for SEO implementation
				SELECT  SKU 
				FROM ZnodePublishProductDetail PPD 
				INNER JOIN @TBL_PublishCatalogId TPC ON (TPC.PublishProductId = PPD.PublishProductId )
				WHERE EXISTS (SELECT TOP 1 1 FROM @PimProductId tb WHERE tb.ID = TPC.PimProductId)
				AND PPD.localeid = @DefaultLocaleId
				GROUP BY SKU;
				 

			END
			
			
			 SELECT max(PublishCatalogLogId) PublishCatalogLogId,a.LocaleId,PublishCatalogId 
			INTO #Cte_PublishCatalog
			 FROM ZnodePublishCatalogLog  a
			 WHERE a.PublishCatalogId = @PublishCatalogId
			 GROUP BY LocaleId,PublishCatalogId			
			

			--UPDATE ZnodePublishCatalogLog 
			--SET IsProductPublished = 1,
			--    PublishProductId = (SELECT COUNT( DISTINCT  PublishProductId) FROM ZnodePublishCategoryProduct SP  WHERE Sp.PublishCatalogId = ZnodePublishCatalogLog.PublishCatalogId --AND ZnodePublishCatalogLog.IsCatalogPublished = 1
			--						AND ( SP.PublishCategoryId in (SELECT Item FROM dbo.split(ZnodePublishCatalogLog.PublishCategoryId,',') SP ))  )
		 --   WHERE PublishCatalogLogId = @VersionId AND  @VersionId <> 0


			UPDATE ZnodePublishCatalogLog 
			SET IsProductPublished = 1 
			,PublishProductId = (SELECT  COUNT(DISTINCT PublishProductId) FROM ZnodePublishCategoryProduct ZPP WHERE ZPP.PublishCatalogId = ZnodePublishCatalogLog.PublishCatalogId AND ZPP.PublishCategoryId IS NOT NULL) 
			WHERE EXISTS (SELECT TOP 1 1 FROM #Cte_PublishCatalog  TY  WHERE  TY.PublishCatalogLogId =ZnodePublishCatalogLog.PublishCatalogLogId )  


			DECLARE @PimAttributeIsPublish VARCHAR(50) =  [dbo].[Fn_GetAttributeIsPublish]() 

			--UPDATE ZnodePimProduct 
			--SET IsProductPublish = 1 
			--WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId ZPP WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId)

			--SELECT * fROM @TBL_PublishCatalogId

			UPDATE ZnodePimProduct 
			SET PublishStateId =  @PublishStateId
			WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId ZPP WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId)

			--END 
	END TRY
	BEGIN CATCH
		SELECT ERROR_MESSAGE(), ERROR_PROCEDURE();
	
		DECLARE @Status bit;
		SET @Status = 0;
		DECLARE @Error_procedure varchar(1000)= ERROR_PROCEDURE(), @ErrorMessage nvarchar(max)= ERROR_MESSAGE(), @ErrorLine varchar(100)= ERROR_LINE(), @ErrorCall nvarchar(max)= 'EXEC Znode_GetPublishProducts @PublishCatalogId = '+CAST(@PublishCatalogId AS varchar(max))+',@PublishCategoryId='+@PublishCategoryId+',@UserId='+CAST(@UserId AS Varchar(50))+',@NotReturnXML='+CAST(@NotReturnXML AS Varchar(50))+',@UserId = '+CAST(@UserId AS Varchar(50))+',

		@VersionId='+CAST(@VersionId AS Varchar(50))+',@TokenId='+CAST(@TokenId AS varchar(max))+',@Status='+CAST(@Status AS varchar(10));
		SELECT 0 AS ID, CAST(0 AS bit) AS Status;
		ROLLBACK TRAN GetPublishProducts;
		
		UPDATE ZnodePublishCatalogLog 
	    SET IsCatalogPublished = 0 
		,IsCategoryPublished = 0,IsProductPublished= 0  
		WHERE EXISTS (SELECT TOP 1 1 from #Cte_PublishCatalog TR WHERE TR.PublishCatalogLogId = ZnodePublishCatalogLog.PublishCatalogLogId) 
		EXEC Znode_InsertProcedureErrorLog @ProcedureName = 'Znode_GetPublishProducts', @ErrorInProcedure = @Error_procedure, @ErrorMessage = @ErrorMessage, @ErrorLine = @ErrorLine, @ErrorCall = @ErrorCall;
	END CATCH;
END;
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishSingleProduct')
BEGIN 
	DROP PROCEDURE Znode_GetPublishSingleProduct
END
GO
CREATE PROCEDURE [dbo].[Znode_GetPublishSingleProduct]
(
@PublishCatalogId INT = 0 
,@VersionId       VARCHAR(50) = 0 
,@PimProductId    TransferId Readonly 
,@UserId		  INT = 0 
,@TokenId nvarchar(max)= ''	
,@LocaleIds TransferId READONLY
,@PublishStateId INT = 0  
)
AS


--Declare @PimProductId TransferId 
--insert into @PimProductId  select 128 
-- EXEC [Znode_GetPublishSingleProduct]  @PublishCatalogId = 0 ,@VersionId= 0 ,@PimProductId =@PimProductId, @UserId=2 

BEGIN 
  
 SET NOCOUNT ON 

EXEC Znode_InsertUpdatePimAttributeXML 1 
EXEC Znode_InsertUpdateCustomeFieldXML 1
EXEC Znode_InsertUpdateAttributeDefaultValue 1 

 IF OBJECT_ID('tempdb..#Cte_BrandData') is not null
 BEGIN 
 DROP TABLE #Cte_BrandData
 END 

DECLARE @PimProductAttributeXML TABLE(PimAttributeXMLId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )
DECLARE @PimDefaultValueLocale  TABLE (PimAttributeDefaultXMLId INT  PRIMARY KEY ,PimAttributeDefaultValueId INT ,LocaleId INT ) 
DECLARE @ProductNamePimAttributeId INT = dbo.Fn_GetProductNameAttributeId(),@DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId(),@LocaleId INT = 0 
		,@SkuPimAttributeId  INT =  dbo.Fn_GetProductSKUAttributeId() , @IsActivePimAttributeId INT =  dbo.Fn_GetProductIsActiveAttributeId()
DECLARE @GetDate DATETIME =dbo.Fn_GetDate()
DECLARE @TBL_LocaleId  TABLE (RowId INT IDENTITY(1,1) PRIMARY KEY  , LocaleId INT )

			INSERT INTO @TBL_LocaleId (LocaleId)
			SELECT  LocaleId
			FROM ZnodeLocale MT
			WHERE IsActive = 1
			AND (EXISTS (SELECT TOP 1 1  FROM @LocaleIds RT WHERE RT.Id = MT.LocaleId )
			OR NOT EXISTS (SELECT TOP 1 1 FROM @LocaleIds )) 


DECLARE @Counter INT =1 ,@maxCountId INT = (SELECT max(RowId) FROM @TBL_LocaleId ) 

 DECLARE @TBL_PublishCatalogId TABLE(PublishCatalogId INT,PublishProductId INT,PimProductId  INT   , VersionId INT ,LocaleId INT  )

			 INSERT INTO @TBL_PublishCatalogId 
			 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId, MAX(PublishCatalogLogId) ,LocaleId
			 FROM ZnodePublishProduct ZPP 
			 INNER JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
			 WHERE (EXISTS (SELECT TOP 1 1 FROM @PimProductId SP WHERE SP.Id = ZPP.PimProductId  AND  (@PublishCatalogId IS NULL OR @PublishCatalogId = 0 ))
			 OR  (ZPP.PublishCatalogId = @PublishCatalogId ))
			 AND IsCatalogPublished =1
			 AND ZPCP.PublishStateId = @PublishStateId 
			 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,LocaleId
		
             DECLARE   @TBL_ZnodeTempPublish TABLE (PimProductId INT , AttributeCode VARCHAR(300) ,AttributeValue NVARCHAR(max) ) 			
			 DECLARE @TBL_AttributeVAlueLocale TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT,LocaleId INT ,AttributeValue Nvarchar(1000) )

			 INSERT INTO @TBL_AttributeVAlueLocale (PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId ,LocaleId ,AttributeValue )
			 SELECT VIR.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId,VIR.LocaleId, ''
			 FROM View_LoadManageProductInternal VIR
			 INNER JOIN @TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = VIR.PimProductId)
			 UNION ALL 
			 SELECT VIR.PimProductId,PimAttributeId,PimProductAttributeMediaId,ZPDE.LocaleId , ''
			 FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimProductAttributeMedia ZPDE ON (ZPDE.PimAttributeValueId = VIR.PimAttributeValueId )
			 WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
			 Union All 
			 SELECT VIR.PimProductId,VIR.PimAttributeId,ZPDVL.PimAttributeDefaultValueLocaleId,ZPDVL.LocaleId ,ZPDVL.AttributeDefaultValue
			   FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1 )
			 INNER JOIN ZnodePimAttributeDefaultValue ZPADV ON ZPADV.PimAttributeId = D.PimAttributeId
			 INNER JOIN ZnodePimAttributeDefaultValueLocale ZPDVL   on (ZPADV.PimAttributeDefaultValueId = ZPDVL.PimAttributeDefaultValueId)
			 --INNER JOIN ZnodePimProductAttributeDefaultValue ZPDVP ON (ZPDVP.PimAttributeValueId = VIR.PimAttributeValueId AND ZPADV.PimAttributeDefaultValueId = ZPDVP.PimAttributeDefaultValueId )
			 WHERE ( ZPDVL.LocaleId = @DefaultLocaleId OR ZPDVL.LocaleId = @LocaleId )
			 AND EXISTS(SELECT TOP 1 1 FROM @TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
			 Union All 
			 SELECT VIR.PimProductId,VIR.PimAttributeId,'','' ,''
			 FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1 )
			 WHERE  EXISTS(SELECT TOP 1 1 FROM @TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )



	

WHILE @Counter <= @maxCountId
BEGIN
 SET @LocaleId = (SELECT TOP 1 LocaleId FROM @TBL_LocaleId WHERE RowId = @Counter)
 
  INSERT INTO @PimProductAttributeXML 
  SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeXML
  WHERE LocaleId = @LocaleId

  INSERT INTO @PimProductAttributeXML 
  SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeXML ZPAX
  WHERE ZPAX.LocaleId = @DefaultLocaleId  
  AND NOT EXISTS (SELECT TOP 1 1 FROM @PimProductAttributeXML ZPAXI WHERE ZPAXI.PimAttributeId = ZPAX.PimAttributeId )

  INSERT INTO @PimDefaultValueLocale
  SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultXML
  WHERE localeId = @LocaleId

  INSERT INTO @PimDefaultValueLocale 
   SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultXML ZX
  WHERE localeId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM @PimDefaultValueLocale TRTR WHERE TRTR.PimAttributeDefaultValueId = ZX.PimAttributeDefaultValueId)
  
 
  DECLARE @TBL_AttributeVAlue TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT  )
  DECLARE @TBL_CustomeFiled TABLE (PimCustomeFieldXMLId INT ,CustomCode VARCHAR(300),PimProductId INT ,LocaleId INT )

  INSERT INTO @TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,RTR.PimProductId ,RTR.LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML RTR 
  INNER JOIN @TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = RTR.PimProductId)
  WHERE RTR.LocaleId = @LocaleId
 

  INSERT INTO @TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,ITR.PimProductId ,ITR.LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML ITR
  INNER JOIN @TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ITR.PimProductId)
  WHERE ITR.LocaleId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM @TBL_CustomeFiled TBL  WHERE ITR.CustomCode = TBL.CustomCode AND ITR.PimProductId = TBL.PimProductId)
  

    INSERT INTO @TBL_AttributeVAlue (PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId )
    SELECT PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId
	FROM @TBL_AttributeVAlueLocale
    WHERE LocaleId = @LocaleId

    
	INSERT INTO @TBL_AttributeVAlue(PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId )
	SELECT VI.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId
	FROM @TBL_AttributeVAlueLocale VI 
    WHERE VI.LocaleId = @DefaultLocaleId 
	AND NOT EXISTS (SELECT TOP 1 1 FROM @TBL_AttributeVAlue  CTE WHERE CTE.PimProductId = VI.PimProductId AND CTE.PimAttributeId = VI.PimAttributeId )
 
INSERT INTO @TBL_ZnodeTempPublish  
SELECT  a.PimProductId,a.AttributeCode , '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(a.AttributeValue,'')+'</AttributeValues> </AttributeEntity>  </Attributes>'  AttributeValue
FROM View_LoadManageProductInternal a 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = a.PimAttributeId )
INNER JOIN @PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
INNER JOIN @TBL_AttributeValue CTE ON (Cte.PimAttributeId = a.PimAttributeId AND Cte.ZnodePimAttributeValueLocaleId = a.ZnodePimAttributeValueLocaleId)
UNION ALL 
SELECT  a.PimProductId,c.AttributeCode , '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+TAVL.AttributeValue+'</AttributeValues> </AttributeEntity>  </Attributes>'  AttributeValue
FROM ZnodePimAttributeValue  a 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = a.PimAttributeId )
INNER JOIN @PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
INNER JOIN ZnodePImAttribute ZPA  ON (ZPA.PimAttributeId = a.PimAttributeId)
INNER JOIN @TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = a.PimProductId)
Inner JOIN @TBL_AttributeVAlueLocale TAVL ON  (c.PimAttributeId = TAVL.PimAttributeId  and ZPP.PimProductId = TAVL.PimProductId )
WHERE ZPA.IsPersonalizable = 1 
AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodePimAttributeValueLocale q WHERE q.PimAttributeValueId = a.PimAttributeValueId) 



UNION ALL 
SELECT THB.PimProductId,THB.CustomCode,'<Attributes><AttributeEntity>'+CustomeFiledXML +'</AttributeEntity></Attributes>' 
FROM ZnodePimCustomeFieldXML THB 
INNER JOIN @TBL_CustomeFiled TRTE ON (TRTE.PimCustomeFieldXMLId = THB.PimCustomeFieldXMLId)
UNION ALL 
SELECT ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues></AttributeValues>'+'<SelectValues>'+
			   STUFF((
                    SELECT '  '+ DefaultValueXML  FROM ZnodePimAttributeDefaultXML AA 
				 INNER JOIN @PimDefaultValueLocale GH ON (GH.PimAttributeDefaultXMLId = AA.PimAttributeDefaultXMLId)
				 INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId )
				 WHERE (ZPADV.PimAttributeValueId = ZPAV.PimAttributeValueId)
    FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</SelectValues> </AttributeEntity></Attributes>' AttributeValue
 
FROM ZnodePimAttributeValue ZPAV  With (NoLock)
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN @PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
INNER JOIN @TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
UNION ALL 
SELECT DISTINCT  ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+SUBSTRING((SELECT DISTINCT ',' +MediaPath 
	FROM ZnodePimProductAttributeMedia ZPPG
	INNER JOIN  @TBL_AttributeVAlue TBLV ON (TBLV.PimProductId=  ZPAV.PimProductId AND TBLV.PimAttributeId = ZPAV.PimAttributeId )
    WHERE ZPPG.PimProductAttributeMediaId = TBLV.ZnodePimAttributeValueLocaleId
	FOR XML PATH ('')
 ),2,4000)+'</AttributeValues></AttributeEntity></Attributes>' AttributeValue
 	 
FROM ZnodePimAttributeValue ZPAV 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN @PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
INNER JOIN @TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeMedia ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
UNION ALL 
SELECT ZPLP.PimParentProductId ,c.AttributeCode, '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(SUBSTRING((SELECT ','+CAST(PublishProductId AS VARCHAR(50)) 
							 FROM @TBL_PublishCatalogId ZPPI 
							 INNER JOIN ZnodePimLinkProductDetail ZPLPI ON (ZPLPI.PimProductId = ZPPI.PimProductId)
							 WHERE ZPLPI.PimParentProductId = ZPLP.PimParentProductId
							 AND ZPLPI.PimAttributeId   = ZPLP.PimAttributeId
							 FOR XML PATH ('') ),2,4000),'')+'</AttributeValues></AttributeEntity></Attributes>'   AttributeValue 
							
FROM ZnodePimLinkProductDetail ZPLP 
INNER JOIN @TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPLP.PimParentProductId)
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPLP.PimAttributeId )
INNER JOIN @PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
GROUP BY ZPLP.PimParentProductId , ZPP.PublishProductId  ,ZPLP.PimAttributeId,c.AttributeCode,c.AttributeXML,ZPP.PublishCatalogId

UNION ALL 
SELECT ZPAV.PimProductId,'DefaultSkuForConfigurable' ,'<Attributes><AttributeEntity>'+REPLACE(REPLACE (c.AttributeXML,'ProductType','DefaultSkuForConfigurable'),'Product Type','Default Sku For Configurable')+'<AttributeValues>'+
 (SELECT TOP 1 AttributeValue FROM View_LoadManageProductInternal ad 
 INNER JOIN ZnodePimProductTypeAssociation yt ON (yt.PimProductId = ad.PimProductId)
 WHERE Ad.AttributeCode = 'SKU'
 AND yt.PimParentProductId = ZPAV.PimProductId
ORDER BY yt.DisplayOrder , yt.PimProductTypeAssociationId ASC)
+'</AttributeValues></AttributeEntity></Attributes>' AttributeValue 
FROM ZnodePimAttributeValue ZPAV  
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN @TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL 
INNER JOIN ZnodePimAttributeDefaultValue dr ON (dr.PimAttributeDefaultValueId = ZPADVL.PimAttributeDefaultValueId)
 WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId
 AND dr.AttributeDefaultValueCode= 'ConfigurableProduct' 
)
AND EXISTS (select * from @PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)
AND c.AttributeCode = 'ProductType' 

---------brand details 
CREATE TABLE #Cte_BrandData (PimProductId int,BrandXML nvarchar(max))

INSERT INTO #Cte_BrandData ( PimProductId, BrandXML )
SELECT  DISTINCT ZBP.PimProductId,'<Brands><BrandEntity><BrandId>'+CAST(ZBD.BrandId AS VARCHAR(50))+'</BrandId><BrandCode>'+ZBD.BrandCode+'</BrandCode><BrandName>'+ZBDL.BrandName+'</BrandName></BrandEntity></Brands>' as BrandXML					   		   
FROM [ZnodeBrandDetails] AS ZBD
INNER JOIN ZnodeBrandDetaillocale ZBDL ON ZBD.BrandId = ZBDL.BrandId
INNER JOIN [ZnodeBrandProduct] AS ZBP ON ZBD.BrandId = ZBP.BrandId

 DELETE FROM ZnodePublishedXML WHERE  IsProductXML = 1  AND LocaleId = @localeId 
								AND  EXISTS ( SELECT TOP 1 1 FROM  @TBL_PublishCatalogId  TBL WHERE TBL.VersionId  = ZnodePublishedXML.PublishCatalogLogId AND TBL.PublishProductId = ZnodePublishedXML.PublishedId)


;WITH CTE AS
(
SELECT ROW_NUMBER() OVER (PARTITION BY PimProductId	,AttributeCode
ORDER BY PimProductId	,AttributeCode) AS RN
FROM @TBL_ZnodeTempPublish
)

DELETE FROM CTE WHERE RN<>1


 

  
 MERGE INTO ZnodePublishedXML TARGET 
 USING (
 SELECT zpp.PublishProductId,zpp.VersionId ,'<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'+CAST(ISNULL(ZPC.PublishCategoryId,'')  AS VARCHAR(50))+'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKU><SKULower>'+CAST(ISNULL((SELECT ''+Lower(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +'</IsParentProducts><CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000)) +'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
					FROM ZnodeProfileCatalog ZPFC 
					INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
					WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+'</TempProfileIds><ProductIndex>'+CAST(ISNULL(ZPCP.ProductIndex,1)  AS VARCHAr(100))+'</ProductIndex><IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
ISNULL(STUFF(( SELECT '  '+ BrandXML  FROM #Cte_BrandData BD WHERE BD.PimProductId = ZPP.PimProductId   
				FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, ''),'')+
STUFF(( SELECT '  '+ AttributeValue  FROM @TBL_ZnodeTempPublish TY WHERE TY.PimProductId = ZPP.PimProductId   
    FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>' xmlvalue
FROM  @TBL_PublishCatalogId zpp
INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
LEFT JOIN ZnodePublishCategory ZPC ON (ZPC.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId)
LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId AND  ZPCCF.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId)
LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ZPCP.PublishCategoryId AND ZPCD.LocaleId = @LocaleId )
WHERE ZPPDFG.LocaleId = @LocaleId
AND zpp.LocaleId = @LocaleId
) SOURCE 
ON (
     TARGET.PublishCatalogLogId = SOURCE.versionId 
	 AND TARGET.PublishedId = SOURCE.PublishProductId
	 AND TARGET.IsProductXML = 1 
	 AND TARGET.LocaleId = @localeId 
)
WHEN MATCHED THEN 
UPDATE 
SET  PublishedXML = xmlvalue
   , ModifiedBy = @userId 
   ,ModifiedDate = @GetDate
   ,ImportedGuId = @TokenId 
WHEN NOT MATCHED THEN 
INSERT (PublishCatalogLogId
,PublishedId
,PublishedXML
,IsProductXML
,LocaleId
,CreatedBy
,CreatedDate
,ModifiedBy
,ModifiedDate,ImportedGuId)

VALUES (SOURCE.versionid , Source.publishProductid,Source.xmlvalue,1,@localeid,@userId,@getDate,@userId,@getDate,@TokenId);

DELETE FROM @TBL_ZnodeTempPublish

DELETE FROM @PimProductAttributeXML
DELETE FROM @TBL_CustomeFiled
DELETE FROM @PimDefaultValueLocale
DELETE FROM @TBL_AttributeValue 

 IF OBJECT_ID('tempdb..#Cte_BrandData') is not null
 BEGIN 
 DROP TABLE #Cte_BrandData
 END 

SET @Counter = @counter + 1 
END

END
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_InsertPublishProductIds')
BEGIN 
	DROP PROCEDURE Znode_InsertPublishProductIds
END
GO
CREATE  PROCEDURE [dbo].[Znode_InsertPublishProductIds]
(
	 @PublishCatalogId           INT            = NULL,
     @UserId                     INT				  ,
	 @PimProductId               TransferId Readonly,
	 @IsCallAssociated           BIT           = 0,
	 @PimCategoryHierarchyId	 INT		   = 0  ,
	 @IsDebug					 INT		   = 0     
	)
AS
    
/*
  Summary :	Publish Product on the basis of publish catalog
				Retrive all Product details with attributes and insert into following tables 
				1.	ZnodePublishedXml
				2.	ZnodePublishCategoryProduct
				3.	ZnodePublishProduct
				4.	ZnodePublishProductDetail

                Product details include all the type of products link, grouped, configure and bundel products (include addon) their associated products 
				collect their attributes and values into tables variables to process for publish.  
                
				Finally genrate XML for products with their attributes and inserted into ZnodePublishedXml Znode Admin process xml from sql server to mongodb
				one by one.

     Unit Testing
    
     SELECT * FROM ZnodePimCustomField WHERE CustomCode = 'Test'
     SELECT * FROM ZnodePimCatalogCategory WHERE pimCatalogId = 3 AND PimProductId = 181
     SELECT * FROM ZnodePimCustomFieldLocale WHERE PimCustomFieldId = 1
	 SELECT * FROM ZnodePublishProduct WHERE PublishProductid = 213 = 30
     select * from znodepublishcatalog
	 SELECT * FROM view_loadmanageProduct WHERE Attributecode = 'ProductNAme' AND AttributeValue LIKE '%Apple%'
     SELECT * FROM ZnodePimCategoryProduct WHERE  PimProductId = 181
	 SELECT * FROM ZnodePimCatalogcategory WHERE pimcatalogId = 3 
     EXEC Znode_GetPublishProducts  @PublishCatalogId = 5 ,@UserId= 2 ,@NotReturnXML= NULL,@PimProductId = 117,@IsDebug= 1 
	 	DECLARE @ttr TransferId 
	INSERT INTO @ttr  
	SELECT 25719 
     EXEC Znode_InsertPublishProductIds  @PublishCatalogId = 3,@UserId= 2  ,@PimProductId = @ttr  ,@IsDebug= 1 
     EXEC Znode_GetPublishProducts  @PublishCatalogId =1,@UserId= 2 ,@RequiredXML= 1	
	 SELECT * FROM 	ZnodePimCatalogCategory  WHERE pimcatalogId = 3  
	 SELECT * FROM [dbo].[ZnodePimCategoryHierarchy]  WHERE pimcatalogId = 3 
    */ 

     BEGIN
      --  BEGIN TRAN InsertPublishProductIds;
         BEGIN TRY
			SET NOCOUNT ON;
		
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate(); 
			 DECLARE @PimCatalogId int= ISNULL((SELECT PimCatalogId FROM ZnodePublishcatalog WHERE PublishCatalogId = @PublishCatalogId), 0);  --- this variable is used to carry y pim catalog id by using published catalog id
			 DECLARE 
			  @ProductNamePimAttributeId INT = dbo.Fn_GetProductNameAttributeId(),
			  @DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId(),
			  @LocaleId INT = 0,
			  @SkuPimAttributeId  INT =  dbo.Fn_GetProductSKUAttributeId(), 
			  @IsActivePimAttributeId INT =  dbo.Fn_GetProductIsActiveAttributeId(),
			  @ProductTypeAttributeId INT = dbo.Fn_GetProductTypeAttributeId()

			 DECLARE @TBL_LocaleId  TABLE (RowId INT IDENTITY(1,1) PRIMARY KEY  , LocaleId INT )
			 INSERT INTO @TBL_LocaleId (LocaleId) SELECT LocaleId FROM ZnodeLocale WHERE IsActive = 1
			 
			 -- This variable used to carry the locale in loop 
			 -- This variable is used to carry the default locale which is globaly set
             DECLARE @Counter INT =1 ,@maxCountId INT = (SELECT max(RowId) FROM @TBL_LocaleId ) 
			 DECLARE @DeletePublishProductId VARCHAR(MAX)= '', @PimProductIds VARCHAR(MAX)= '', @PimAttributeId VARCHAR(MAX)= '';
             DECLARE @TBL_CategoryHierarchyIds TABLE (CategoryId int,ParentCategoryId int ) 
			 DECLARE @TBL_PublishCategoryIds TABLE (PublishCategoryId  int ) 
		
			 -- This table will used to hold the all currently active locale ids  
			 
			IF Object_ID ('tempdb..#ActiveProduct') is not null
				drop table #ActiveProduct

			IF Object_ID ('tempdb..#TBL_PimProductIds') is not null
				drop table #TBL_PimProductIds

			 --this table holds all active product data
			-- CREATE TABLE #ActiveProduct ( PimProductId INT ) 
			 --
			 --INSERT INTO #ActiveProduct ( PimProductId )
				 --SELECT PAV.PimProductId FROM ZnodePimAttributeValue PAV
				 --INNER JOIN ZnodePimAttributeValueLocale PAVL ON PAV.PimAttributeValueId = PAVL.PimAttributeValueId
				 --INNER JOIN ZnodePimAttribute PA  ON PAV.PimAttributeId = PA.PimAttributeId
				 --WHERE PA.AttributeCode = 'IsActive' AND PAVL.AttributeValue = 'true'

		     -- This table hold the complete xml of product with other information like category and catalog
             CREATE TABLE #TBL_PimProductIds(PimProductId INT  ,PimCategoryId INT,PimCatalogId INT,PublishCatalogId INT,IsParentProducts BIT ,DisplayOrder INT,ProductName NVARCHAR(MAX),SKU  NVARCHAR(MAX),
											 IsActive NVARCHAR(MAX),PimAttributeFamilyId INT ,ProfileId   VARCHAR(MAX),CategoryDisplayOrder INT ,ProductIndex INT,PimCategoryHierarchyId INT ,PRIMARY KEY (PimCatalogId,PimCategoryId,PimCategoryHierarchyId,PimProductId)  )

			  -- This table is used to hold the product which publish in current process 
             DECLARE @TBL_PublishProductIds TABLE(PublishProductId  INT  ,PimProductId INT,PublishCatalogId  INT
													,PublishCategoryId VARCHAR(MAX),CategoryProfileIds VARCHAR(max),VersionId INT , PRIMARY KEY (PimProductId,PublishProductId,PublishCatalogId)); 
	 
			--Retrive category data : parent / client
			
				
			---------------
			-- this check is used when this procedure is call by internal procedure to publish only product and no need to return publish xml;    
			--Collected list of products for  publish 
       
			If @PimCategoryHierarchyId = 0 
			Begin

				INSERT INTO #TBL_PimProductIds ( PimProductId, PimCategoryId, IsParentProducts, DisplayOrder, PimCatalogId,CategoryDisplayOrder,PublishCatalogId,PimCategoryHierarchyId )
				SELECT DISTINCT ZPCC.PimProductId, ZPCC.PimCategoryId, 1 AS IsParentProducts, NULL AS DisplayOrder, ZPCC.PimCatalogId,ZPCC.DisplayOrder ,ZPC.PublishCatalogId,ISNULL(ZPCC.PimCategoryHierarchyId,0)
				FROM ZnodePimCatalogCategory AS ZPCC
				INNER JOIN ZnodePublishCatalog ZPC ON ZPC.PimCatalogId = ZPCC.PimCatalogId
		    	WHERE  (ZPCC.PimCatalogId = @PimCatalogId OR EXISTS( SELECT TOP 1 1 FROM @PimProductId SP WHERE SP.Id = ZPCC.PimProductId) ) AND ZPCC.PimProductId IS NOT NULL
				--AND EXISTS ( SELECT * FROM #ActiveProduct PAV WHERE ZPCC.PimProductId = PAV.PimProductId )

			END
			ELSE
			BEGIN
				
				INSERT INTO @TBL_CategoryHierarchyIds(CategoryId , ParentCategoryId )
				Select Distinct PimCategoryId , Null FROM (
				SELECT PimCategoryId,ParentPimCategoryId from DBO.[Fn_GetRecurciveCategoryIds](@PimCategoryHierarchyId,@PimCatalogId)
				Union 
				Select PimCategoryId , null  from ZnodePimCategoryHierarchy where PimCategoryHierarchyId = @PimCategoryHierarchyId 
				Union 
				Select PimCategoryId , null  from [Fn_GetRecurciveCategoryIds_new] (@PimCategoryHierarchyId,@PimCatalogId) ) Category  


				INSERT INTO  @TBL_PublishCategoryIds 
				select ZPC.PublishCategoryId from ZnodePublishCategory ZPC 
				Inner join  @TBL_CategoryHierarchyIds CT1 On 
				ZPC.PimCategoryId = CT1.CategoryId 
			
			
				INSERT INTO #TBL_PimProductIds ( PimProductId, PimCategoryId, IsParentProducts, DisplayOrder, PimCatalogId,CategoryDisplayOrder,PublishCatalogId,PimCategoryHierarchyId )
				SELECT DISTINCT ZPCC.PimProductId, ZPCC.PimCategoryId, 1 AS IsParentProducts, NULL AS DisplayOrder, ZPCC.PimCatalogId,ZPCC.DisplayOrder ,ZPC.PublishCatalogId,ISNULL(ZPCC.PimCategoryHierarchyId,0)
				FROM ZnodePimCatalogCategory AS ZPCC
				INNER JOIN ZnodePublishCatalog ZPC ON ZPC.PimCatalogId = ZPCC.PimCatalogId
		    	WHERE  (ZPCC.PimCatalogId = @PimCatalogId OR EXISTS( SELECT TOP 1 1 FROM @PimProductId SP WHERE SP.Id = ZPCC.PimProductId) ) AND ZPCC.PimProductId IS NOT NULL
				--AND EXISTS ( SELECT * FROM #ActiveProduct PAV WHERE ZPCC.PimProductId = PAV.PimProductId )
				AND (
						ZPCC.PimCategoryId in 
							(
								Select CategoryId from @TBL_CategoryHierarchyIds
							) 
					) 



				SELECT ZPCP.PublishCatalogId,THO.PimProductId,PimCategoryHierarchyId,ProductIndex
				INTO #TBL_PublishCategoryProduct 
				FROM ZnodePublishCategoryProduct ZPCP 
				INNER JOIN ZnodePublishProduct THO ON (THO.PublishProductId = ZPCP.PublishProductId  AND ZPCP.PublishCatalogId = THO.PublishCatalogId)
				WHERE ZPCP.PublishCatalogId = @PublishCatalogId
				AND EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductIds TYU WHERE TYU.PimProductId  =  THO.PimProductId )


				

				UPDATE  #TBL_PimProductIds 
				SET ProductIndex = CASE WHEN EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCategoryProduct TH WHERE TH.PimProductId = #TBL_PimProductIds.PimProductId 
				  AND #TBL_PimProductIds.PimCategoryHierarchyId = TH.PimCategoryHierarchyId  ) THEN (SELECT TOP  1 ProductIndex FROM #TBL_PublishCategoryProduct TM WHERE TM.PimProductId = #TBL_PimProductIds.PimProductId 
				  AND #TBL_PimProductIds.PimCategoryHierarchyId = TM.PimCategoryHierarchyId  )

				  WHEN EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCategoryProduct TH WHERE TH.PimProductId = #TBL_PimProductIds.PimProductId 
				  AND #TBL_PimProductIds.PimCategoryHierarchyId <> TH.PimCategoryHierarchyId  )  
				  THEN (SELECT TOP  1 MAX(ProductIndex)+1  FROM #TBL_PublishCategoryProduct TM1 WHERE TM1.PimProductId = #TBL_PimProductIds.PimProductId 
				   )

				  ELSE  1 END 


					
			END
						
             --Collected list of link products for  publish
			 INSERT INTO #TBL_PimProductIds( PimProductId, PimCategoryId, IsParentProducts, DisplayOrder, PimCatalogId , PublishCatalogId,PimCategoryHierarchyId)
				 SELECT ZPLPD.PimProductId, ZPCC.PimCategoryId, 0 AS IsParentProducts, NULL AS DisplayOrder, CTPP.PimCatalogId,CTPP.PublishCatalogId,isnull(ZPCC.PimCategoryHierarchyId,0)
				 FROM ZnodePimLinkProductDetail AS ZPLPD
				 INNER JOIN #TBL_PimProductIds AS CTPP ON ZPLPD.PimParentProductId = CTPP.PimProductId AND  IsParentProducts = 1 
				 INNER JOIN ZnodePimCatalogCategory AS ZPCC ON ZPCC.PimProductId = ZPLPD.PimProductId AND ZPCC.PimCatalogId = CTPP.PimCatalogId
				 WHERE NOT EXISTS ( SELECT TOP 1 1 FROM #TBL_PimProductIds AS CTPPI WHERE CTPPI.PimProductId = ZPLPD.PimProductId) 
				-- AND EXISTS ( SELECT TOP 1 1 FROM ZnodePimAttributeValue AS VILMP WHERE VILMP.PimProductId = ZPLPD.PimProductId ) 
				 AND ZPCC.PimProductId IS NOT NULL
				-- AND EXISTS (SELECT * FROM #ActiveProduct PAV WHERE ZPLPD.PimProductId = PAV.PimProductId )
				 GROUP BY ZPLPD.PimProductId, ZPCC.PimCategoryId,CTPP.PimCatalogId,CTPP.PublishCatalogId ,ZPCC.PimCategoryHierarchyId

				
             --Collected list of Addon products for  publish
  
		     INSERT INTO #TBL_PimProductIds( PimProductId, PimCategoryId, IsParentProducts, DisplayOrder, PimCatalogId,PublishCatalogId,PimCategoryHierarchyId)
					 SELECT ZPAPD.PimChildProductId, ISNULL(ZPCC.PimCategoryId,0) AS PublishCategoryId, 0 AS IsParentProducts, null AS DisplayOrder,CTALP.PimCatalogId,CTALP.PublishCatalogId,ISNULL(ZPCC.PimCategoryHierarchyId,0)
					 FROM ZnodePimAddOnProductDetail AS ZPAPD 
					 INNER JOIN ZnodePimAddOnProduct AS ZPAP ON ZPAP.PimAddOnProductId = ZPAPD.PimAddOnProductId
					 INNER JOIN #TBL_PimProductIds AS CTALP ON CTALP.PimProductId = ZPAP.PimProductId AND  IsParentProducts = 1
					 LEFT JOIN ZnodePimCatalogCategory AS ZPCC ON ZPCC.PimProductId = ZPAPD.PimChildProductId AND ZPCC.PimCatalogId = CTALP.PimCatalogId
					 WHERE NOT EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductIds AS CTALPI WHERE CTALPI.PimProductId = ZPAPD.PimChildProductId) 
				---	 AND EXISTS(SELECT TOP 1 1FROM ZnodePimAttributeValue AS VILMP WHERE VILMP.PimProductId = ZPAPD.PimChildProductId) 
					-- AND EXISTS ( SELECT * FROM #ActiveProduct PAV WHERE ZPAPD.PimChildProductId = PAV.PimProductId ) 
					 GROUP BY ZPAPD.PimChildProductId, ZPCC.PimCategoryId , CTALP.PimCatalogId,CTALP.PublishCatalogId,ZPCC.PimCategoryHierarchyId

					 				 	

             --Collected list of Bundle / Group / Config products for  publish
             INSERT INTO #TBL_PimProductIds(PimProductId,PimCategoryId,IsParentProducts,DisplayOrder,PimCatalogId,PublishCatalogId,PimCategoryHierarchyId)
                    SELECT ZPTA.PimProductId,ISNULL(ZPCC.PimCategoryId,0),0 AS IsParentProducts,NULL DisplayOrder,CTAAP.PimCatalogId,CTAAP.PublishCatalogId,ISNULL(ZPCC.PimCategoryHierarchyId,0)
                    FROM ZnodePimProductTypeAssociation AS ZPTA INNER JOIN #TBL_PimProductIds AS CTAAP ON CTAAP.PimProductId = ZPTA.PimParentProductId AND IsParentProducts = 1
                    LEFT JOIN ZnodePimCatalogCategory AS ZPCC ON ZPCC.PimProductId = ZPTA.PimProductId AND ZPCC.PimCatalogId = CTAAP.PimCatalogId
                    WHERE NOT EXISTS( SELECT TOP 1 1 FROM #TBL_PimProductIds AS CTAAPI WHERE CTAAPI.PimProductId = ZPTA.PimProductId)
					--AND EXISTS(SELECT TOP 1 1 FROM ZnodePimAttributeValue AS VILMP WHERE VILMP.PimProductId = ZPTA.PimProductId)
					--AND EXISTS ( SELECT * FROM #ActiveProduct PAV WHERE ZPTA.PimProductId = PAV.PimProductId ) 
					GROUP BY ZPTA.PimProductId,ZPCC.PimCategoryId,CTAAP.PimCatalogId,CTAAP.PublishCatalogId,ZPCC.PimCategoryHierarchyId
        				

			   UPDATE TBPP
               SET PublishCatalogId = ZPC.PublishCatalogId 
			   FROM #TBL_PimProductIds TBPP 
			   INNER JOIN ZnodePublishCatalog ZPC ON ZpC.PimCatalogId = TBPP.PimCatalogId;
        
		DECLARE @PublishProductId TRANSFERId 

		
		IF @PublishCatalogId IS NOT NULL AND @PublishCatalogId <> 0 
			BEGIN
			If @PimCategoryHierarchyId = 0 
			BEGIN
			  -- SELECT * FROM @TBL_PimProductIds AS TBP
				INSERT INTO @PublishProductId
				SELECT DISTINCT ZPP.PublishProductId 
				FROM ZnodePublishProduct AS ZPP 
				INNER JOIN ZnodePublishCategoryProduct ZPPC ON (ZPPC.PublishProductId = ZPP.PublishProductId AND ZPPC.PublishCatalogId = ZPP.PublishCatalogId)
				--INNER JOIN ZnodePublishCategory ZPC ON (ZPC.PublishCategoryId = ZPPC.PublishCategoryId)
				WHERE NOT EXISTS
				(SELECT TOP 1 1 FROM #TBL_PimProductIds AS TBP WHERE ZPP.PimProductId = TBP.PimProductId 
				AND TBP.PublishCatalogId = ZPP.PublishCatalogId 
				AND ISNULL(TBP.PimCategoryHierarchyId,0) = ISNULL(ZPPC.PimCategoryHierarchyId,0) )
				AND ZPP.PublishCatalogId = @PublishCatalogId
				--Remove extra products from catalog
			END
			ELSE 
			BEGIN
				INSERT INTO @PublishProductId
				SELECT DISTINCT ZPP.PublishProductId 
				FROM ZnodePublishProduct AS ZPP 
				INNER JOIN ZnodePublishCategoryProduct ZPPC ON (ZPPC.PublishProductId = ZPP.PublishProductId AND ZPPC.PublishCatalogId = ZPP.PublishCatalogId)
				INNER JOIN ZnodePublishCategory ZPC ON (ZPC.PublishCatalogId = ZPPC.PublishCatalogId  AND   ZPC.PublishCategoryId = ZPPC.PublishCategoryId)
				WHERE NOT EXISTS
				(SELECT TOP 1 1 FROM #TBL_PimProductIds AS TBP WHERE ZPP.PimProductId = TBP.PimProductId 
				AND TBP.PublishCatalogId = ZPP.PublishCatalogId 
				AND ISNULL(TBP.PimCategoryHierarchyId,0) = ISNULL(ZPPC.PimCategoryHierarchyId,0))
				AND ZPP.PublishCatalogId = @PublishCatalogId
				AND ZPC.PimCategoryId  in 
				(
					Select CategoryId from @TBL_CategoryHierarchyIds
				)
			
			   


			END
		END
		ELSE IF @IsCallAssociated = 0 
		BEGIN 
			DECLARE @TBL_ProductIdscollect TABLE(PublishProductId INT , PimproductId INT , PublishcatalogId  INT  , ProductType NVARCHAr(max))
			If @PimCategoryHierarchyId = 0 
			Begin
				INSERT INTO @TBL_ProductIdscollect (PublishProductId,PimproductId,PublishcatalogId,ProductType)
				SELECT PublishProductId,ZPAV.PimproductId,TBPOCI.PublishcatalogId,ZPATF.AttributeDefaultValueCode
				FROM ZnodePimAttributeValue ZPAV 
				INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON (ZPADV.PimAttributeValueId = ZPAV.PimAttributeValueId )
				INNER JOIN #TBL_PimProductIds TBLIDF ON (TBLIDF.PimProductId = ZPAV.PimProductId )
				INNER JOIN ZnodePublishProduct TBPOCI ON (TBPOCI.PimProductId = TBLIDF.PimProductId AND TBPOCI.PublishCatalogId = TBLIDF.PublishCatalogId 	)
				INNER JOIN ZnodePimAttributeDefaultValue ZPATF ON (ZPATF.PimAttributeId =  @ProductTypeAttributeId 
								AND ZPADV.PimAttributeDefaultValueId = ZPATF.PimAttributeDefaultValueId )
				 WHERE  IsParentProducts = 1	
				 AND LocaleId =@DefaultLocaleId
			END 
			Else 
			Begin
				INSERT INTO @TBL_ProductIdscollect (PublishProductId,PimproductId,PublishcatalogId,ProductType)
				SELECT TBPOCI.PublishProductId,ZPAV.PimproductId,TBPOCI.PublishcatalogId,ZPATF.AttributeDefaultValueCode
				FROM ZnodePimAttributeValue ZPAV 
				INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON (ZPADV.PimAttributeValueId = ZPAV.PimAttributeValueId )
				INNER JOIN #TBL_PimProductIds TBLIDF ON (TBLIDF.PimProductId = ZPAV.PimProductId )
				INNER JOIN ZnodePublishProduct TBPOCI ON (TBPOCI.PimProductId = TBLIDF.PimProductId AND TBPOCI.PublishCatalogId = TBLIDF.PublishCatalogId 	)
				INNER JOIN ZnodePimAttributeDefaultValue ZPATF ON (ZPATF.PimAttributeId =  @ProductTypeAttributeId 
								AND ZPADV.PimAttributeDefaultValueId = ZPATF.PimAttributeDefaultValueId )
				INNER JOIN ZnodePublishCategoryProduct  ZPCP ON ZPCP.PublishCatalogId = TBPOCI.PublishCatalogId AND 
				ZPCP.PublishProductId = TBPOCI.PublishProductId
				INNER JOIN ZnodePublishCategory ZPC ON  (ZPC.PublishCatalogId = ZPCP.PublishCatalogId  AND ZPC.PublishCategoryId = ZPCP.PublishCategoryId)
				 WHERE  IsParentProducts = 1	AND LocaleId =@DefaultLocaleId
				 AND ZPC.PimCategoryId  in 
				(
					Select CategoryId from @TBL_CategoryHierarchyIds
				
				) 
			END 

			IF EXISTS (SELECT TOP 1 1 FROM @TBL_ProductIdscollect WHERE ProductType IN ('GroupedProduct','BundleProduct','ConfigurableProduct','SimpleProduct') )
		 
			BEGIN 
	
			   DECLARE @TBL_DeleteTrackProduct TABLE (PublishProductId INT,AssociatedZnodeProductId INT  ,PublishCatalogId INT,PublishCatalogLogId INT ,IsDelete BIT , PublishCategoryId int  )

			   ;With Cte_PublishProduct AS
			   (
				 SELECT TBL.PublishProductId,PimproductId,TBL.PublishcatalogId,ProductType ,MAx(PublishCatalogLogId) PublishCatalogLogId
				 FROM  @TBL_ProductIdscollect TBL 
				 INNER JOIN ZnodePublishCatalogLog TBLG ON (TBLG.PublishCatalogId = TBL.PublishcatalogId)
				 WHERE IsCatalogPublished = 1 
				 GROUP BY TBL.PublishProductId,PimproductId,TBL.PublishcatalogId,ProductType

			   )
			   , Cte_ConfigData AS 
				 (
				 SELECT p.value('(./AssociatedZnodeProductId)[1]', 'INT')  AssociatedZnodeProductId,PublishProductId,PimproductId,PublishcatalogId,ProductType,CTR.PublishCatalogLogId
				 FROM ZnodePublishedXml ZPXML 
				 INNER JOIN Cte_PublishProduct CTR ON (CTR.PublishCatalogLogId = ZPXML.PublishCatalogLogId AND CTR.PublishProductId = ZPXML.PublishedId)
				 CROSS APPLY ZPXML.PublishedXML.nodes('/ConfigurableProductEntity') t(p)
				 WHERE  IsConfigProductXML = 1 and 
				 (ZPXML.PublishCategoryId in (Select PublishCategoryId from @TBL_PublishCategoryIds) OR @PimCategoryHierarchyId = 0 ) 
				 AND ProductType = 'ConfigurableProduct'
				 UNION ALL 
				  SELECT p.value('(./AssociatedZnodeProductId)[1]', 'INT')  AssociatedZnodeProductId,PublishProductId,PimproductId,PublishcatalogId,ProductType,CTR.PublishCatalogLogId
				 FROM ZnodePublishedXml ZPXML 
				 INNER JOIN Cte_PublishProduct CTR ON (CTR.PublishCatalogLogId = ZPXML.PublishCatalogLogId AND CTR.PublishProductId = ZPXML.PublishedId)
				 CROSS APPLY ZPXML.PublishedXML.nodes('/GroupProductEntity') t(p)
				 WHERE  IsGroupProductXML = 1 and 
				 (ZPXML.PublishCategoryId in (Select PublishCategoryId from @TBL_PublishCategoryIds) OR @PimCategoryHierarchyId = 0 ) 
				 AND ProductType = 'GroupedProduct'
				 UNION ALL 
				  SELECT p.value('(./AssociatedZnodeProductId)[1]', 'INT')  AssociatedZnodeProductId,PublishProductId,PimproductId,PublishcatalogId,ProductType,CTR.PublishCatalogLogId
				 FROM ZnodePublishedXml ZPXML 
				 INNER JOIN Cte_PublishProduct CTR ON (CTR.PublishCatalogLogId = ZPXML.PublishCatalogLogId AND CTR.PublishProductId = ZPXML.PublishedId)
				 CROSS APPLY ZPXML.PublishedXML.nodes('/BundleProductEntity') t(p)
				 WHERE  IsBundleProductXML = 1 and 
				 (ZPXML.PublishCategoryId in (Select PublishCategoryId from @TBL_PublishCategoryIds) OR @PimCategoryHierarchyId = 0 ) 
				 AND ProductType = 'BundleProduct'
				 UNION ALL 
				 SELECT p.value('(./AssociatedZnodeProductId)[1]', 'INT')  AssociatedZnodeProductId,PublishProductId,PimproductId,PublishcatalogId,ProductType,CTR.PublishCatalogLogId
				 FROM ZnodePublishedXml ZPXML 
				 INNER JOIN Cte_PublishProduct CTR ON (CTR.PublishCatalogLogId = ZPXML.PublishCatalogLogId AND CTR.PublishProductId = ZPXML.PublishedId)
				 CROSS APPLY ZPXML.PublishedXML.nodes('/AddonEntity') t(p)
				 WHERE  IsAddOnXML = 1 and 
				 (ZPXML.PublishCategoryId in (Select PublishCategoryId from @TBL_PublishCategoryIds) OR @PimCategoryHierarchyId = 0 ) 
				 AND LocaleId = @DefaultLocaleId 
			
				 )

			--	 SELECT * FROM ZnodePublishCatalogLog WHERE PublishCatalogId = 8 

			INSERT INTO @TBL_DeleteTrackProduct (PublishProductId,AssociatedZnodeProductId,PublishcatalogId,PublishCatalogLogId)
			SELECT ZPP.PublishProductId,AssociatedZnodeProductId,PublishcatalogId,PublishCatalogLogId 
			FROM Cte_ConfigData ZPP	
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM  @TBL_PublishProductIds TBLP WHERE TBLP.PublishProductId = ZPP.AssociatedZnodeProductId)
		
	

			;With Cte_updateStatus AS
			(
		 
				 SELECT  PublishProductId,PublishcatalogId
				  FROM @TBL_DeleteTrackProduct CTR 
				 WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishedXml ZPXML  
				 CROSS APPLY ZPXML.PublishedXML.nodes('/ConfigurableProductEntity') t(p)
				 WHERE  IsConfigProductXML = 1 
				 AND  CTR.PublishCatalogLogId = ZPXML.PublishCatalogLogId 
				 AND LocaleId = @DefaultLocaleId 
				 AND CTR.PublishProductId = p.value('(./AssociatedZnodeProductId)[1]', 'INT') 
				 AND CTR.PublishProductId = ZPXML.PublishedId ) 

				 UNION ALL 
				  SELECT PublishProductId,PublishcatalogId
				 FROM @TBL_DeleteTrackProduct CTR 
				 WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishedXml ZPXML  
				 CROSS APPLY ZPXML.PublishedXML.nodes('/GroupProductEntity') t(p)
				 WHERE  IsGroupProductXML = 1 
				 AND  CTR.PublishCatalogLogId = ZPXML.PublishCatalogLogId 
				 AND LocaleId = @DefaultLocaleId 
				 AND CTR.PublishProductId = p.value('(./AssociatedZnodeProductId)[1]', 'INT') 
				 AND CTR.PublishProductId = ZPXML.PublishedId ) 

				 UNION ALL 
				  SELECT  PublishProductId,PublishcatalogId
				   FROM @TBL_DeleteTrackProduct CTR 
				 WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishedXml ZPXML  
				 CROSS APPLY ZPXML.PublishedXML.nodes('/BundleProductEntity') t(p)
				 WHERE  IsBundleProductXML = 1 
				 AND  CTR.PublishCatalogLogId = ZPXML.PublishCatalogLogId 
				 AND LocaleId = @DefaultLocaleId 
				 AND CTR.PublishProductId = p.value('(./AssociatedZnodeProductId)[1]', 'INT') 
				 AND CTR.PublishProductId = ZPXML.PublishedId ) 


				 UNION ALL 
				 SELECT PublishProductId,PublishcatalogId
				 FROM @TBL_DeleteTrackProduct CTR 
				 WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishedXml ZPXML  
				 CROSS APPLY ZPXML.PublishedXML.nodes('/AddonEntity') t(p)
				 WHERE  IsAddOnXML = 1 
				 AND  CTR.PublishCatalogLogId = ZPXML.PublishCatalogLogId 
				 AND LocaleId = @DefaultLocaleId 
				 AND CTR.PublishProductId = p.value('(./AssociatedZnodeProductId)[1]', 'INT') 
				 AND CTR.PublishProductId = ZPXML.PublishedId ) 
		
			)

			UPDATE a 
			SET IsDelete = CASE WHEN TYR.PublishProductId IS NULL THEN 1 ELSE 0 END 
			FROM @TBL_DeleteTrackProduct a 
			LEFT JOIN Cte_updateStatus TYR ON (TYR.PublishProductId = a.PublishProductId AND TYR.PublishCatalogId = a.PublishCatalogId)

		
			INSERT INTO @PublishProductId 
			SELECT DISTINCT AssociatedZnodeProductId 
			FROM @TBL_DeleteTrackProduct
			WHERE IsDelete =1  
		--	AND 1=0

		END 

	
		INSERT INTO @PublishProductId
		SELECT distinct PublishProductid
		FROM ZnodePublishProduct ZPP
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId =  ZPP.PublishCatalogId )
        WHERE Not EXISTS (SELECT TOP 1 1 FROM ZnodePimCatalogCategory ZPPP WHERE (ZPPP.PimCatalogid = ZPc.PimCatalogId AND ZPPP.PimProductId = ZPP.PimProductId))  
		AND EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductIds TYR WHERE TYR.PimProductId = ZPP.PimProductId )
		AND NOT EXISTS (SELECT TOP 1 1 FROM @PublishProductId YTR WHERE YTR.Id = ZPP.PublishProductId  )
		--AND  1=0	
		END  
	
		EXEC dbo.Znode_DeletePublishCatalogProduct  @PublishProductIds = @PublishProductId,@PublishCatalogId = @PublishCatalogId ,
		@PimCategoryHierarchyId  =@PimCategoryHierarchyId  ,
		@PimCatalogId  = @PimCatalogId 

			   IF  @IsDebug = 1 
			   BEGIN 
			SELECT * FROM #TBL_PimProductIds
			 END 
			 -- This merge statement is used for crude oprtaion with publisgh product table
			MERGE INTO ZnodePublishProduct TARGET USING  (
				SELECT PimProductId, PublishCatalogId
				FROM #TBL_PimProductIds AS TBP
				GROUP BY PimProductId, PublishCatalogId
			 )  SOURCE
				ON --check for if already exists then just update otherwise insert the product  
				TARGET.PimProductId = SOURCE.PimProductId AND  TARGET.PublishCatalogId = SOURCE.PublishCataLogId 
				WHEN MATCHED      THEN UPDATE SET TARGET.CreatedBy = @UserId, TARGET.CreatedDate = @GetDate, TARGET.ModifiedBy = @UserId, TARGET.ModifiedDate = @GetDate	
				WHEN NOT MATCHED  THEN INSERT(PimProductId, PublishCatalogId, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate) 
									   VALUES( SOURCE.PimProductId, SOURCE.PublishCatalogId, @UserId, @GetDate, @UserId, @GetDate )
				OUTPUT INSERTED.PublishProductId, INSERTED.PimProductId, INSERTED.PublishCatalogId
				INTO @TBL_PublishProductIds(PublishProductId, PimProductId, PublishCatalogId); 
			
			-- Here used the ouput clause to catch what data inserted or updated into variable table
	    	
	

	          SELECT PublishProductId,
				 ISNULL(ZPC.PublishCategoryId,0)PublishCategoryId,
				 TBP.PublishCatalogId,ZPC.PimCategoryHierarchyId,CASE WHEN ISNULL(@PimCategoryHierarchyId,0) <> 0  THEN TBP.ProductIndex ELSE     ROW_NUMBER()Over(Partition BY TBPP.PublishProductId Order BY ISNULL(ZPC.PublishCategoryId,0)) END  ProductIndex
				 INTO #TB_CategoryProduct 
				 FROM #TBL_PimProductIds AS TBP 
				 LEFT JOIN ZnodePublishCategory AS ZPC ON (ISNULL(TBP.PimCategoryId, 0) = ISNULL(ZPC.PimCategoryId, -1) AND ZPC.PublishCatalogId = TBP.PublishCatalogId 
				 AND ISNULL(ZPC.PimCategoryHierarchyId, 0) = ISNULL(TBP.PimCategoryHierarchyId, -1))
				 INNER JOIN @TBL_PublishProductIds AS TBPP ON TBP.PimProductId = TBPP.PimProductId
				 AND TBP.PublishCatalogId = TBPP.PublishCatalogId
				 GROUP BY PublishProductId, ZPC.PublishCategoryId, TBP.PublishCatalogId,ZPC.PimCategoryHierarchyId,TBP.ProductIndex
		
			
			-- This merge staetment is used for crude opration with  ZnodePublishCategoryProduct table
			 MERGE INTO ZnodePublishCategoryProduct TARGET 
			 USING  #TB_Categoryproduct SOURCE
					ON  TARGET.PublishCatalogId = SOURCE.PublishCatalogId AND ISNULL(TARGET.PublishCategoryId, 0) = ISNULL(SOURCE.PublishCategoryId, 0) AND TARGET.PublishProductId = SOURCE.PublishProductId 
					
					WHEN MATCHED THEN UPDATE SET TARGET.PublishCategoryId = CASE WHEN SOURCE.PublishCategoryId = 0 THEN NULL ELSE SOURCE.PublishCategoryId END 
												 ,TARGET.CreatedBy = @UserId, TARGET.CreatedDate = @GetDate, TARGET.ModifiedBy = @UserId, TARGET.ModifiedDate = @GetDate,TARGET.PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId				
					WHEN NOT MATCHED THEN INSERT(PublishProductId,PublishCategoryId,PublishCatalogId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PimCategoryHierarchyId,ProductIndex) 
										  VALUES(SOURCE.PublishProductId,CASE WHEN SOURCE.PublishCategoryId =0 THEN NULL ELSE SOURCE.PublishCategoryId  END , SOURCE.PublishCatalogId,@UserId,@GetDate,@userId,@GetDate,SOURCE.PimCategoryHierarchyId,Source.ProductIndex);
   
    
   WHILE @Counter <= @maxCountId
   BEGIN 
    SET @LocaleId = (SELECT TOP 1 LocaleId FROM @TBL_LocaleId WHERE RowId = @Counter)
   
     
	 SELECT VIR.PimProductId,PimAttributeId,AttributeValue,ZnodePimAttributeValueLocaleId,VIR.LocaleId ,COUNT(*)Over(Partition By VIR.PimProductId,PimAttributeId ORDER BY VIR.PimProductId,PimAttributeId  ) RowId
	 INTO #TBL_AttributeVAlue
	 FROM View_LoadManageProductInternal VIR
	 WHERE (LocaleId = @DefaultLocaleId OR LocaleId = @LocaleId )
	 AND EXISTS (SELECT TOP 1 1 FROM @TBL_PublishProductIds ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
	 AND (PimAttributeId = @ProductNamePimAttributeId  OR PimAttributeId = @SKUPimAttributeId OR PimAttributeId = @IsActivePimAttributeId  )
  
   

		
	          MERGE INTO ZnodePublishProductDetail   TARGET
			  USING  (SELECT   ZPP.PublishProductId ,TBLA.AttributeValue PRoductName,TBLAI.AttributeValue SKU ,ISNULL(TBLAII.AttributeValue,'0') IsActive --,TBLAIII.AttributeValue ProductType
						FROM  @TBL_PublishProductIds zpp
						INNER JOIN #TBL_AttributeVAlue TBLA ON (TBLA.PimAttributeId = @ProductNamePimAttributeId AND TBLA.PimProductId = ZPP.PimProductId AND TBLA.LocaleId  = CASE WHEN TBLA.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )
					--	INNER JOIN @TBL_AttributeVAlue  TBLA ON (TBLA.PimProductId = ZPP.PimProductId AND TBLA.PimAttributeId = @ProductNamePimAttributeId)
					    INNER JOIN #TBL_AttributeVAlue TBLAI ON (TBLAI.PimAttributeId = @SKUPimAttributeId AND TBLAI.PimProductId = ZPP.PimProductId AND TBLAI.LocaleId  = CASE WHEN TBLAI.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )
					--	INNER JOIN @TBL_AttributeVAlue  TBLAI ON (TBLAI.PimProductId = ZPP.PimProductId AND TBLAI.PimAttributeId = @SKUPimAttributeId)
					    INNER JOIN #TBL_AttributeVAlue TBLAII ON (TBLAII.PimAttributeId = @IsActivePimAttributeId AND TBLAII.PimProductId = ZPP.PimProductId AND TBLAII.LocaleId  = CASE WHEN TBLAII.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )
						--INNER JOIN #TBL_AttributeVAlue TBLAIII ON (TBLAIII.PimAttributeId = @ProductTypePimAttributeId AND TBLAIII.PimProductId = ZPP.PimProductId AND TBLAIII.LocaleId  = CASE WHEN TBLAIII.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )
					--	INNER JOIN @TBL_AttributeVAlue  TBLAIII ON (TBLAII.PimProductId = ZPP.PimProductId AND TBLAII.PimAttributeId = @ProductTypeAttributeId)
						GROUP BY ZPP.PublishProductId,TBLA.AttributeValue,TBLAI.AttributeValue,TBLAII.AttributeValue --,TBLAIII.AttributeValue
						)   SOURCE
			ON (TARGET.PublishProductId = SOURCE.PublishProductId
				 AND TARGET.LocaleId = @LocaleId 
			) 
			WHEN MATCHED THEN 
			UPDATE 
			SET TARGET.ProductName   = SOURCE.ProductName
				,TARGET.SKU			 = SOURCE.SKU
				,TARGET.IsActive	= SOURCE.IsActive
				,TARGET.ModifiedBy	 = @userid
				,TARGET.ModifiedDate  = @GetDate
			WHEN NOT MATCHED THEN 
			INSERT (PublishProductId
					,ProductName
					,SKU
					,IsActive
					,LocaleId
					,CreatedBy
					,CreatedDate
					,ModifiedBy
					,ModifiedDate)
			VALUES ( SOURCE.PublishProductId
					,SOURCE.ProductName
					,SOURCE.SKU
					,SOURCE.IsActive
					,@LocaleId
					,@userId
					,@GetDate
					,@userId
					,@GetDate);

		 
         DROP TABLE #TBL_AttributeVAlue 
		
		 SET @Counter = @counter + 1 
			  END 

		IF @PublishCatalogId IS NULL OR @PublishCatalogId =0 
		BEGIN 
			SELECT PublishProductId, PimProductId, PublishCatalogId 
			FROM @TBL_PublishProductIds
		END 
		IF (ISnull(@PimCategoryHierarchyId ,0) <> 0 ) 
		Begin
			SELECT PublishProductId, PimProductId, PublishCatalogId 
			FROM @TBL_PublishProductIds
		End 

		--COMMIT TRAN InsertPublishProductIds;
		END TRY 
		BEGIN CATCH 
		 SELECT ERROR_MESSAGE()
            UPDATE ZnodePublishCatalogLog 
			SET IsCatalogPublished = 0 
			,IscategoryPublished = 0 
			,IsProductPublished = 0 
			,PublishStateId = 1 
		    WHERE PublishCatalogLogId IN (SELECT Max(PublishCatalogLogId) FROM ZnodePublishCatalogLog WHERE PublishCatalogId = @PublishCatalogId  GROUP BY PublishStateId , PublishCatalogId )
		END CATCH 
	END
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishProductbulk')
BEGIN 
	DROP PROCEDURE Znode_GetPublishProductbulk
END
GO
CREATE PROCEDURE [dbo].[Znode_GetPublishProductbulk]
(
@PublishCatalogId INT = 0 
,@VersionId       VARCHAR(50) = 0 
,@PimProductId    TransferId Readonly
,@UserId		  INT = 0 
,@PimCategoryHierarchyId  INT = 0 
,@PimCatalogId INT = 0 
,@LocaleIds TransferId READONLY
,@PublishStateId INT = 0 
)
With RECOMPILE
AS
-- 
/*
DECLARE @rrte transferId 
INSERT INTO @rrte
SELECT 1 

EXEC Znode_GetPublishProductbulk @PublishCatalogId=3,@UserId= 2 ,@localeIDs = @rrte,@PublishStateId = 3 

*/
BEGIN 
  BEGIN TRY 
 SET NOCOUNT ON 

EXEC Znode_InsertUpdatePimAttributeXML 1 
EXEC Znode_InsertUpdateCustomeFieldXML 1
EXEC Znode_InsertUpdateAttributeDefaultValue 1 


   IF OBJECT_ID('tempdb..#PimProductAttributeXML') is not null
   BEGIN 
	 DROP TABLE #PimProductAttributeXML
   END
   IF OBJECT_ID('tempdb..#PimDefaultValueLocale') is not null
   BEGIN 
    DROP TABLE #PimDefaultValueLocale
   END
   IF OBJECT_ID('tempdb..#TBL_CategoryCategoryHierarchyIds') is not null
   BEGIN 
    DROP TABLE #TBL_CategoryCategoryHierarchyIds
   END

   DECLARE @PimMediaAttributeId INT = dbo.Fn_GetProductImageAttributeId()
   
   CREATE TABLE #PimProductAttributeXML (PimAttributeXMLId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )
  	
   CREATE TABLE #TBL_CategoryCategoryHierarchyIds  (CategoryId int , ParentCategoryId int ) 
	
   If (@PimCategoryHierarchyId <> 0 AND @PimCatalogId <> 0 )
		INSERT INTO #TBL_CategoryCategoryHierarchyIds(CategoryId , ParentCategoryId )
			Select Distinct PimCategoryId , Null FROM (
				SELECT PimCategoryId,ParentPimCategoryId from DBO.[Fn_GetRecurciveCategoryIds](@PimCategoryHierarchyId,@PimCatalogId)
				Union 
				Select PimCategoryId , null  from ZnodePimCategoryHierarchy where PimCategoryHierarchyId = @PimCategoryHierarchyId 
				Union 
				Select PimCategoryId , null  from [Fn_GetRecurciveCategoryIds_new] (@PimCategoryHierarchyId,@PimCatalogId) ) Category  


   CREATE TABLE #PimDefaultValueLocale  (PimAttributeDefaultXMLId INT  PRIMARY KEY ,PimAttributeDefaultValueId INT ,LocaleId INT ) 
   DECLARE @ProductNamePimAttributeId INT = dbo.Fn_GetProductNameAttributeId(),@DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId(),@LocaleId INT = 0 
		,@SkuPimAttributeId  INT =  dbo.Fn_GetProductSKUAttributeId() , @IsActivePimAttributeId INT =  dbo.Fn_GetProductIsActiveAttributeId()
   DECLARE @GetDate DATETIME =dbo.Fn_GetDate()
   DECLARE @TBL_LocaleId  TABLE (RowId INT IDENTITY(1,1) PRIMARY KEY  , LocaleId INT )
			
			INSERT INTO @TBL_LocaleId (LocaleId)
			SELECT  LocaleId
			FROM ZnodeLocale MT 
			WHERE IsActive = 1
			AND (EXISTS (SELECT TOP 1 1  FROM @LocaleIds RT WHERE RT.Id = MT.LocaleId )
			OR NOT EXISTS (SELECT TOP 1 1 FROM @LocaleIds )) 

  DECLARE @Counter INT =1 ,@maxCountId INT = (SELECT max(RowId) FROM @TBL_LocaleId ) 
 

 CREATE TABLE #TBL_PublishCatalogId (PublishCatalogId INT,PublishProductId INT,PimProductId  INT   , VersionId INT, PublishCategoryId int ,LocaleId INT )

 CREATE INDEX idx_#TBL_PublishCatalogIdPimProductId on #TBL_PublishCatalogId(PimProductId)

  CREATE INDEX idx_#TBL_PublishCatalogIdPimPublishCatalogId on #TBL_PublishCatalogId(PublishCatalogId)

  If (@PimCategoryHierarchyId <> 0 AND @PimCatalogId <> 0 )
  BEGIN
			 INSERT INTO #TBL_PublishCatalogId(PublishCatalogId ,PublishProductId ,PimProductId  , VersionId ,PublishCategoryId ,LocaleId)  
			 SELECT distinct ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,MAX(ZPCP.PublishCataloglogId ) VersionId ,ZPC.PublishCategoryId,ZPCP.LocaleId
				 FROM ZnodePublishProduct ZPP INNER JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
				 INNER JOIN ZnodePublishCategoryProduct ZPPP ON ZPP.PublishProductId  = ZPPP.PublishProductId  
				 AND ZPCP.PublishCatalogId = ZPPP.PublishCatalogId
				 INNER JOIN ZnodePublishCategory ZPC ON ZPC.PublishCatalogId = ZPPP.PublishCatalogId AND ZPPP.PublishCategoryId = ZPC.PublishCategoryId 
				 WHERE ZPP.PublishCatalogId = @PublishCatalogId  and ZPCP.PublishStateId =  @PublishStateId
				 AND 
				 ZPC.PimCategoryId in (Select CategoryId from #TBL_CategoryCategoryHierarchyIds )
				 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId ,ZPC.PublishCategoryId,ZPCP.LocaleId	

			INSERT INTO #TBL_PublishCatalogId(PublishCatalogId ,PublishProductId ,PimProductId  , VersionId ,PublishCategoryId ,LocaleId)
			SELECT DISTINCT ZPP.PublishCatalogId,ZPP.PublishProductId,PimProductId,MAX(ZPCP.PublishCatalogLogId) VersionId,NULL, ZPCP.LocaleId
				 FROM ZnodePublishProduct ZPP 
				 INNER JOIN ZnodePublishCatalogLog ZPCP ON 
				 (ZPCP.PublishCatalogId = ZPP.PublishCatalogId) 
				 WHERE				 (EXISTS (SELECT TOP 1 1 FROM @pimProductId SP WHERE SP.Id = ZPP.PimProductId ))
				 AND (ZPP.PublishCatalogId = @publishCatalogId )
				 AND NOT Exists (Select TOP 1 1 from #TBL_PublishCatalogId TPL where TPL.PublishProductId = ZPP.PublishProductId)
				 AND ZPCP.PublishStateId =  @PublishStateId
			GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId , ZPCP.LocaleId



  END
  ELSE 
  BEGIN
			INSERT INTO #TBL_PublishCatalogId(PublishCatalogId ,PublishProductId,PimProductId ,VersionId,LocaleId  ) 
			 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,  
											MAX(PublishCatalogLogId) ,ZPCP.LocaleId
				 FROM ZnodePublishProduct ZPP 
				 INNER JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
				 WHERE (EXISTS (SELECT TOP 1 1 FROM @PimProductId SP 
				 WHERE SP.Id = ZPP.PimProductId  AND  (@PublishCatalogId IS NULL OR @PublishCatalogId = 0 ))
				 OR  (ZPP.PublishCatalogId = @PublishCatalogId ))
				 --AND  ZPCP.PublishStateId =  @PublishStateId
				 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId ,ZPCP.LocaleId
  END
           
		     DECLARE   @TBL_ZnodeTempPublish TABLE (PimProductId INT , AttributeCode VARCHAR(300) ,AttributeValue NVARCHAR(max) ) 			
			 DECLARE @TBL_AttributeVAlueLocale TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT,LocaleId INT 
			 )

	
	
		
WHILE @Counter <= @maxCountId
BEGIN
 
 SET @LocaleId = (SELECT TOP 1 LocaleId FROM @TBL_LocaleId MT 
  WHERE  RowId = @Counter)
 
  INSERT INTO #PimProductAttributeXML 
  SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeXML
  WHERE LocaleId = @LocaleId
  
  IF( @LocaleId <> @DefaultLocaleId )
  BEGIN
	INSERT INTO #PimProductAttributeXML 
	SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
	FROM ZnodePimAttributeXML ZPAX
	WHERE ZPAX.LocaleId = @DefaultLocaleId  
	AND NOT EXISTS (SELECT TOP 1 1 FROM #PimProductAttributeXML ZPAXI WHERE ZPAXI.PimAttributeId = ZPAX.PimAttributeId )
  END

  INSERT INTO #PimDefaultValueLocale
  SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultXML
  WHERE localeId = @LocaleId

  IF( @LocaleId <> @DefaultLocaleId )
  BEGIN
	INSERT INTO #PimDefaultValueLocale 
	SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
	FROM ZnodePimAttributeDefaultXML ZX
	WHERE localeId = @DefaultLocaleId
	AND NOT EXISTS (SELECT TOP 1 1 FROM #PimDefaultValueLocale TRTR WHERE TRTR.PimAttributeDefaultValueId = ZX.PimAttributeDefaultValueId)
  END
  	 
  CREATE TABLE #TBL_CustomeFiled  (PimCustomeFieldXMLId INT ,CustomCode VARCHAR(300),PimProductId INT ,LocaleId INT )

  INSERT INTO #TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,RTR.PimProductId ,RTR.LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML RTR 
  INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = RTR.PimProductId AND RTR.LocaleID = ZPP.LocaleId)
  WHERE RTR.LocaleId = @LocaleId
 
 
  INSERT INTO #TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,ITR.PimProductId ,ITR.LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML ITR
  INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ITR.PimProductId AND ITR.LocaleID = ZPP.LocaleId)
  WHERE ITR.LocaleId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM #TBL_CustomeFiled TBL  WHERE ITR.CustomCode = TBL.CustomCode AND ITR.PimProductId = TBL.PimProductId)
       
       
	 SELECT VIR.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId,VIR.LocaleId , VIR.AttributeValue, VIR.AttributeCode ,ROW_NUMBER() Over(Partition By VIR.PimProductId,PimAttributeId ORDER BY VIR.PimProductId,PimAttributeId  ) RowId
	 INTO #TBL_AttributeVAlue
	 FROM View_LoadManageProductInternal VIR
	 WHERE ( LocaleId = @DefaultLocaleId OR LocaleId = @LocaleId )
	 AND EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
	  UNION ALL 
	 SELECT VIR.PimProductId,VIR.PimAttributeId,ZPDE.PimProductAttributeMediaId,ZPDE.LocaleId ,ZPDE.MediaPath AS AttributeValue, d.AttributeCode ,ROW_NUMBER() Over(Partition By VIR.PimProductId,VIR.PimAttributeId ORDER BY VIR.PimProductId,VIR.PimAttributeId  ) RowId
	 FROM ZnodePimAttributeValue  VIR
	 INNER JOIN ZnodePimProductAttributeMedia ZPDE ON (ZPDE.PimAttributeValueId = VIR.PimAttributeValueId )
	 INNER JOIN ZnodePimAttribute d ON ( d.PimAttributeId=VIR.PimAttributeId )
	 WHERE ( ZPDE.LocaleId = @DefaultLocaleId OR ZPDE.LocaleId = @LocaleId )
	 AND EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
	  Union All
	 SELECT VIR.PimProductId,VIR.PimAttributeId,ZPDVL.PimAttributeDefaultValueLocaleId,ZPDVL.LocaleId ,ZPDVL.AttributeDefaultValue AS AttributeValue, d.AttributeCode ,ROW_NUMBER() Over(Partition By VIR.PimProductId,VIR.PimAttributeId ORDER BY VIR.PimProductId,VIR.PimAttributeId  ) RowId
	 FROM ZnodePimAttributeValue  VIR
	 INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1  )
	 INNER JOIN ZnodePimAttributeDefaultValue ZPADV ON ZPADV.PimAttributeId = D.PimAttributeId
	 INNER JOIN ZnodePimAttributeDefaultValueLocale ZPDVL   on (ZPADV.PimAttributeDefaultValueId = ZPDVL.PimAttributeDefaultValueId)
	 --INNER JOIN ZnodePimProductAttributeDefaultValue ZPDVP ON (ZPDVP.PimAttributeValueId = VIR.PimAttributeValueId AND ZPADV.PimAttributeDefaultValueId = ZPDVP.PimAttributeDefaultValueId )
	 WHERE ( ZPDVL.LocaleId = @DefaultLocaleId OR ZPDVL.LocaleId = @LocaleId )
	 AND EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
	 Union All 
	SELECT VIR.PimProductId,VIR.PimAttributeId,'','','',D.AttributeCode,ROW_NUMBER() Over(Partition By VIR.PimProductId,VIR.PimAttributeId ORDER BY VIR.PimProductId,VIR.PimAttributeId  ) RowId
	FROM ZnodePimAttributeValue  VIR
	INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1 )
	WHERE  EXISTS(SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )

	 
	 UPDATE #TBL_AttributeVAlue SET rowid = (SELECT MAX(rowid) FROM #TBL_AttributeVAlue b WHERE a.PimProductId=b.PimProductId AND a.PimAttributeId = b.PimAttributeId )
	 FROM #TBL_AttributeVAlue a
	
  SET @versionId = (SELECT TOP 1 VersionId FROM #TBL_PublishCatalogId) 
  

 IF OBJECT_ID('tempdb..#Cte_GetData') IS NOT NULL
 BEGIN 
 DROP TABLE #Cte_GetData
 END 

 CREATE TABLE #Cte_GetData (PimProductId INT,AttributeCode VARCHAR(600),AttributeValue NVARCHAR(max),VersionId INT)

 CREATE INDEX idx_#Cte_GetDataPimProductId ON #Cte_GetData(PimProductId)


INSERT INTO #Cte_GetData(PimProductId ,AttributeCode,AttributeValue,VersionId)
SELECT  a.PimProductId,a.AttributeCode , '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(a.AttributeValue,'')+'</AttributeValues> </AttributeEntity>  </Attributes>'  AttributeValue,VersionId
FROM #TBL_AttributeVAlue a 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = a.PimAttributeId )
INNER JOIN #PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId)
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = a.PimProductId)
WHERE a.LocaleId  = CASE WHEN a.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END
AND NOT EXISTS (SELECT TOP 1 1 FROM Fn_GetProductMediaAttributeId() TY WHERE TY.PimAttributeId = c.PimAttributeId)
 


INSERT INTO #Cte_GetData(PimProductId ,AttributeCode,AttributeValue,VersionId)
SELECT THB.PimProductId,THB.CustomCode,'<Attributes><AttributeEntity>'+CustomeFiledXML+'</AttributeEntity></Attributes>' ,VersionId
FROM ZnodePimCustomeFieldXML THB 
INNER JOIN #TBL_CustomeFiled TRTE ON (TRTE.PimCustomeFieldXMLId = THB.PimCustomeFieldXMLId)
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = THB.PimProductId)
UNION ALL 
SELECT ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues></AttributeValues>'+'<SelectValues>'+
			   STUFF((
                    SELECT '  '+ DefaultValueXML  FROM ZnodePimAttributeDefaultXML AA 
				 INNER JOIN #PimDefaultValueLocale GH ON (GH.PimAttributeDefaultXMLId = AA.PimAttributeDefaultXMLId)
				 INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId )
				 WHERE (ZPADV.PimAttributeValueId = ZPAV.PimAttributeValueId)
    FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</SelectValues> </AttributeEntity></Attributes>' AttributeValue ,VersionId
FROM ZnodePimAttributeValue ZPAV  
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
AND EXISTS (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)

---for PLP

INSERT INTO #Cte_GetData(PimProductId ,AttributeCode,AttributeValue,VersionId)
SELECT DISTINCT  UOP.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues></AttributeValues>'+'<SelectValues>'+
			   STUFF((
                    SELECT DISTINCT '  '+REPLACE(DefaultValueXML,'</SelectValuesEntity>','<VariantDisplayOrder>'+CAST(ISNULL(ZPA.DisplayOrder,0) AS VARCHAR(200))+'</VariantDisplayOrder>
					<VariantSKU>'+ISNULL(ZPAVL_SKU.AttributeValue,'')+'</VariantSKU>
					<VariantImagePath>'+ISNULL((SELECT ''+ZM.Path FOR XML Path ('')),'')+'</VariantImagePath></SelectValuesEntity>')   
				 FROM ZnodePimAttributeDefaultXML AA 
				 INNER JOIN #PimDefaultValueLocale GH ON (GH.PimAttributeDefaultXMLId = AA.PimAttributeDefaultXMLId)
				 INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId )
				 INNER JOIN ZnodePimAttributeValue ZPAV1 ON (ZPAV1.PimAttributeValueId= ZPADV.PimAttributeValueId )
				 -- check/join for active variants 
				 INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId =ZPAV1.PimProductId)
				 INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON (ZPAV.PimAttributevalueid = ZPAVL.PimAttributeValueId AND ZPAVL.AttributeValue = 'True')
				 INNER JOIN ZnodePimProductTypeAssociation YUP ON (YUP.PimProductId = ZPAV1.PimProductId)
				 -- SKU
				 INNER JOIN ZnodePimAttributeValue ZPAV_SKU ON(YUP.PimProductId = ZPAV_SKU.PimProductId)
				 INNER JOIN ZnodePimAttributeValueLocale ZPAVL_SKU ON (ZPAVL_SKU.PimAttributeValueId = ZPAV_SKU.PimAttributeValueId)
				 LEFT  JOIN ZnodePimAttributeValue ZPAV12 ON (ZPAV12.PimProductId= YUP.PimProductId  AND ZPAV12.PimAttributeId = @PimMediaAttributeId ) 
				 LEFT JOIN ZnodePimProductAttributeMedia ZPAVM ON (ZPAVM.PimAttributeValueId= ZPAV12.PimAttributeValueId ) 
				 LEFT JOIN ZnodeMedia ZM ON (ZM.MediaId = ZPAVM.MediaId)
				 LEFT JOIN ZnodePimAttribute ZPA ON (ZPA.PimattributeId = ZPAV1.PimAttributeId)
				 WHERE (YUP.PimParentProductId  = UOP.PimProductId AND ZPAV1.pimAttributeId = UOP.PimAttributeId )
				 -- Active Variants
				 AND ZPAV.PimAttributeId = (SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'IsActive')
				 -- VariantSKU
				 AND ZPAV_SKU.PimAttributeId = (SELECT PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'SKU')
FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</SelectValues> </AttributeEntity></Attributes>' AttributeValue ,VersionId
FROM ZnodePimConfigureProductAttribute UOP 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = UOP.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = UOP.PimProductId)
WHERE  EXISTS (SELECT * FROM #PimProductAttributeXML b WHERE b.PimAttributeXMLId = c.PimAttributeXMLId)


INSERT INTO #Cte_GetData(PimProductId ,AttributeCode,AttributeValue,VersionId)
SELECT DISTINCT  ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+SUBSTRING((SELECT DISTINCT  ',' +ZPPG.MediaPath FROM ZnodePimProductAttributeMedia ZPPG
     INNER JOIN #TBL_AttributeVAlue FTRE ON (FTRE.PimProductId = ZPAV.PimProductId AND FTRE.PimAttributeId = ZPAV.PimAttributeId  AND FTRE.LocaleId  = CASE WHEN FTRE.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )
	 WHERE ZPPG.PimProductAttributeMediaId = FTRE.ZnodePimAttributeValueLocaleId
	 FOR XML PATH ('')
 ),2,4000)+'</AttributeValues></AttributeEntity></Attributes>' AttributeValue ,VersionId	 
FROM ZnodePimAttributeValue ZPAV 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeMedia ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
AND EXISTS (SELECT * FROM #PimProductAttributeXML b WHERE b.PimAttributeXMLId = c.PimAttributeXMLId)

insert into #Cte_GetData(PimProductId ,AttributeCode,AttributeValue,VersionId)
SELECT ZPLP.PimParentProductId ,c.AttributeCode, '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(SUBSTRING((SELECT ','+CAST(PublishProductId AS VARCHAR(50)) 
							 FROM #TBL_PublishCatalogId ZPPI 
							 INNER JOIN ZnodePimLinkProductDetail ZPLPI ON (ZPLPI.PimProductId = ZPPI.PimProductId)
							 WHERE ZPLPI.PimParentProductId = ZPLP.PimParentProductId
							 AND ZPLPI.PimAttributeId   = ZPLP.PimAttributeId
							 FOR XML PATH ('') ),2,4000),'')+'</AttributeValues></AttributeEntity></Attributes>'   AttributeValue ,ZPP.VersionId
							
FROM ZnodePimLinkProductDetail ZPLP  
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPLP.PimParentProductId)
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPLP.PimAttributeId )
WHERE EXISTS (SELECT * FROM #PimProductAttributeXML b WHERE b.PimAttributeXMLId = c.PimAttributeXMLId)
GROUP BY ZPLP.PimParentProductId , ZPP.PublishProductId  ,ZPLP.PimAttributeId,c.AttributeCode,c.AttributeXML,ZPP.PublishCatalogId,ZPP.VersionId



SELECT a.PimProductId ,CAST((SELECT ''+dbo.FN_trim(b.AttributeValue) FOR XML PATH(''))  AS NVARCHAR(max)) AttributeValue , b.LocaleId  ,a.PimAttributeId,c.AttributeCode ,b.ZnodePimAttributeValueLocaleId
INTO #View_LoadManageProductInternal
FROM ZnodePimAttributeValue a 
INNER JOIN  ZnodePimAttributeValueLocale b ON ( b.PimAttributeValueId = a.PimAttributeValueId )
INNER JOIN ZnodePimAttribute c ON ( c.PimAttributeId=a.PimAttributeId )
WHERE c.AttributeCode = 'SKU'

INSERT INTO #Cte_GetData(PimProductId ,AttributeCode,AttributeValue,VersionId)
SELECT ZPAV.PimProductId,'DefaultSkuForConfigurable' ,'<Attributes><AttributeEntity>'+REPLACE(REPLACE (c.AttributeXML,'ProductType','DefaultSkuForConfigurable'),'Product Type','Default Sku For Configurable')+'<AttributeValues>'+
 (SELECT TOP 1 AttributeValue FROM #View_LoadManageProductInternal ad 
 INNER JOIN ZnodePimProductTypeAssociation yt ON (yt.PimProductId = ad.PimProductId)
 WHERE Ad.AttributeCode = 'SKU'
 AND yt.PimParentProductId = ZPAV.PimProductId
 ORDER BY yt.DisplayOrder , yt.PimProductTypeAssociationId ASC)
+'</AttributeValues></AttributeEntity></Attributes>' AttributeValue ,ZPP.VersionId
FROM ZnodePimAttributeValue ZPAV  
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL 
INNER JOIN ZnodePimAttributeDefaultValue dr ON (dr.PimAttributeDefaultValueId = ZPADVL.PimAttributeDefaultValueId)
 WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId
 AND dr.AttributeDefaultValueCode= 'ConfigurableProduct' 
)
AND EXISTS (SELECT * FROM #PimProductAttributeXML b WHERE b.PimAttributeXMLId = c.PimAttributeXMLId)
AND c.AttributeCode = 'ProductType' 


---------brand details 
CREATE TABLE #Cte_BrandData (PimProductId INT,BrandXML NVARCHAR(max))

INSERT INTO #Cte_BrandData ( PimProductId, BrandXML )
SELECT  DISTINCT ZBP.PimProductId,'<Brands><BrandEntity><BrandId>'+CAST(ZBD.BrandId AS VARCHAR(50))+'</BrandId><BrandCode>'+ZBD.BrandCode+'</BrandCode><BrandName>'+ZBDL.BrandName+'</BrandName></BrandEntity></Brands>' as BrandXML					   		   
FROM [ZnodeBrandDetails] AS ZBD
INNER JOIN ZnodeBrandDetaillocale ZBDL ON ZBD.BrandId = ZBDL.BrandId
INNER JOIN [ZnodeBrandProduct] AS ZBP ON ZBD.BrandId = ZBP.BrandId

--  --CREATE INDEX IND_Znode

  DELETE tu FROM ZnodePublishedXml tu  WHERE 
  EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId TY WHERE TY.VersionId = tu.PublishCatalogLogId AND Tu.PublishedId = ty.PublishProductId  )
  AND IsProductXML = 1   AND LocaleId = @LocaleId 

  
--  --ALTER INDEX ALL ON ZnodePublishedXml  REBUILD WITH (FILLFACTOR = 80 ) 
  If (@PimCategoryHierarchyId <> 0 AND @PimCatalogId <> 0 )
  BEGIN
		
		--Collect index of other categorys
		IF OBJECT_ID('tempdb..#Index') IS NOT NULL
		BEGIN 
			DROP TABLE #Index
		END 
		CREATE TABLE #Index (RowIndex int ,PublishCategoryId int , PublishProductId  int )		
		INSERT INTO  #Index ( RowIndex ,PublishCategoryId , PublishProductId )
		SELECT CAST(ROW_NUMBER()Over(Partition BY ZPC.PublishProductId 
		Order BY ISNULL(ZPC.PublishCategoryId,'0') desc )   AS VARCHAR(100)),
		ZPC.PublishCategoryId , ZPC.PublishProductId
		FROM ZnodePublishCategoryProduct ZPC where ZPC.PublishCatalogId = @PublishCatalogId
		
	

		--Publish parent products with index number 
		INSERT INTO ZnodePublishedXml (PublishCatalogLogId,PublishedId,PublishedXML,IsProductXML,LocaleId
		,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PublishCategoryId)
		SELECT zpp.VersionId,zpp.PublishProductId,'<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'+CAST(ISNULL(ZPCP.PublishCategoryId,'')  AS VARCHAR(50))+'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKU>'+'<SKULower>'+CAST(ISNULL((SELECT ''+LOWER(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
		+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +'</IsParentProducts><CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000)) +'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
		+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
						FROM ZnodeProfileCatalog ZPFC 
						INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
						WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+
						'</TempProfileIds>
						 <ProductIndex>'+ CAST(ISNULL(ZPCP.ProductIndex,1) AS VARCHAR(200))+
						'</ProductIndex>
						<IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
		'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
		ISNULL(STUFF(( SELECT '  '+ BrandXML  FROM #Cte_BrandData BD WHERE BD.PimProductId = ZPP.PimProductId   
				FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, ''),'')+
		STUFF(( SELECT '  '+ AttributeValue  FROM #Cte_GetData TY WHERE TY.PimProductId = ZPP.PimProductId AND TY.VersionId = ZPP.VersionId   
		FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>' xmlvalue,1,@LocaleId,@UserId , @GetDate , @UserId,@GetDate
		,ZPCP.PublishCategoryId
		FROM  #TBL_PublishCatalogId zpp
		INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
		INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
		LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT JOIN ZnodePublishCategory ZPC ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId 
		AND ZPP.PublishCategoryId = ZPC.PublishCategoryId 
		)
		LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId AND  ZPCCF.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId
		)
		LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ISNULL(ZPCP.PublishCategoryId,0) AND ZPCD.LocaleId = @LocaleId )
		WHERE ZPPDFG.LocaleId = @LocaleId AND ZPP.LocaleId = @LocaleId AND  ZPC.PimCategoryId in (Select CategoryId from #TBL_CategoryCategoryHierarchyIds ) 
		and zpp.PublishCategoryId IS NOT NULL

		
	
	 --Publish only associate product 
	 INSERT INTO ZnodePublishedXml (PublishCatalogLogId,PublishedId,PublishedXML,IsProductXML,LocaleId
		,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PublishCategoryId)
		SELECT zpp.VersionId,zpp.PublishProductId,'<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'+CAST(ISNULL(ZPCP.PublishCategoryId,'')  AS VARCHAR(50))+'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKU>'+'<SKULower>'+CAST(ISNULL((SELECT ''+LOWER(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
		+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +'</IsParentProducts><CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000)) +'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
		+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
						FROM ZnodeProfileCatalog ZPFC 
						INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
						WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+
						'</TempProfileIds>
						 <ProductIndex>'+ CAST(ISNULL(ZPCP.ProductIndex,1) AS VARCHAr(200))+
						'</ProductIndex>
						<IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
		'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
		STUFF(( SELECT '  '+ AttributeValue  FROM #Cte_GetData TY WHERE TY.PimProductId = ZPP.PimProductId   AND TY.VersionId= ZPP.VersionId
		FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>' xmlvalue,1,@LocaleId,@UserId , @GetDate , @UserId,@GetDate
		,ZPCP.PublishCategoryId
		FROM  #TBL_PublishCatalogId zpp
		INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
		INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
		LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT JOIN ZnodePublishCategory ZPC ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId 
		AND ZPP.PublishCategoryId = ZPC.PublishCategoryId )
		AND ZPC.PimCategoryId in (Select CategoryId from #TBL_CategoryCategoryHierarchyIds )
		LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId AND  ZPCCF.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId
		AND ZPCCF.PimCategoryId in (Select CategoryId from #TBL_CategoryCategoryHierarchyIds ))
		LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ISNULL(ZPCP.PublishCategoryId,0) AND ZPCD.LocaleId = @LocaleId )
		WHERE ZPPDFG.LocaleId = @LocaleId AND ZPP.LocaleId = @LocaleId AND zpp.PublishCategoryId IS NULL
		
  END
  ELSE
  BEGIN

      INSERT INTO ZnodePublishedXml (PublishCatalogLogId
		,PublishedId
		,PublishedXML
		,IsProductXML
		,LocaleId
		,CreatedBy
		,CreatedDate
		,ModifiedBy
		,ModifiedDate
		,PublishCategoryId)
		SELECT zpp.VersionId,zpp.PublishProductId,'<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'+CAST(ISNULL(ZPCP.PublishCategoryId,'')  AS VARCHAR(50))+'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKU>'+'<SKULower>'+CAST(ISNULL((SELECT ''+LOWER(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
		+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +'</IsParentProducts><CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000)) +'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
		+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
						FROM ZnodeProfileCatalog ZPFC 
						INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
						WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+'</TempProfileIds><ProductIndex>'+CAST(ROW_NUMBER()Over(Partition BY zpp.PublishProductId Order BY ISNULL(ZPC.PublishCategoryId,'0') ) AS VARCHAr(100))+'</ProductIndex><IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
		'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
		STUFF(( SELECT '  '+ AttributeValue  FROM #Cte_GetData TY WHERE TY.PimProductId = ZPP.PimProductId   AND TY.VersionId = ZPP.VersionId
		FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>' xmlvalue,1,@LocaleId,@UserId , @GetDate , @UserId,@GetDate
		,ZPCP.PublishCategoryId
		
		FROM  #TBL_PublishCatalogId zpp
		INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
		INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
		LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT JOIN ZnodePublishCategory ZPC ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId )
		LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId AND  ZPCCF.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId)
		LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ISNULL(ZPCP.PublishCategoryId,0) AND ZPCD.LocaleId = @LocaleId )
		WHERE ZPPDFG.LocaleId = @LocaleId AND ZPP.LocaleId = @LocaleId

      
END 
 

DELETE FROM #TBL_CustomeFiled
DELETE FROM #PimDefaultValueLocale
 IF OBJECT_ID('tempdb..#PimProductAttributeXML') is not null
 BEGIN 
 DELETE FROM #PimProductAttributeXML
 END
 IF OBJECT_ID('tempdb..#Cte_GetData') is not null
 BEGIN 
 DROP TABLE #Cte_GetData
 END
   IF OBJECT_ID('tempdb..#Cte_BrandData') is not null
 BEGIN 
 DROP TABLE #Cte_BrandData
 END
  IF OBJECT_ID('tempdb..#TBL_AttributeVAlue') is not null
 BEGIN 
 DROP TABLE #TBL_AttributeVAlue
 END
 IF OBJECT_ID('tempdb..#View_LoadManageProductInternal') is not null
 BEGIN 
 DROP TABLE #View_LoadManageProductInternal
 END
 IF OBJECT_ID('tempdb..#TBL_CustomeFiled') is not null
 BEGIN 
 DROP TABLE #TBL_CustomeFiled
 END
SET @Counter = @counter + 1 
END 
END TRY 
BEGIN CATCH 

 SELECT ERROR_MESSAGE()
 UPDATE ZnodePublishCatalogLog 
	    SET IsCatalogPublished = 0 
		,IsCategoryPublished = 0,IsProductPublished= 0  
		WHERE EXISTS (SELECT TOP 1 1 from #TBL_PublishCatalogId TR WHERE TR.VersionId = ZnodePublishCatalogLog.PublishCatalogLogId)
END CATCH 
END

GO

DELETE FROM ZnodePublishCategoryProduct 

GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_DeleteContentPage')
BEGIN 
	DROP PROCEDURE Znode_DeleteContentPage
END
GO

CREATE PROCEDURE [dbo].[Znode_DeleteContentPage]
( @CMSContentPageId VARCHAR(2000),
  @Status           BIT OUT)
AS 
  /*  
     Summary : Remove content page details with their referance data 
			   Here complete delete the ContentPages and their references without any check  
			   If passed @CMSContentPageIds are matched with deleted count then data set return true other wise false 
			   dbo.Split function use to make comma separeted data in table rows 
			   1 ZnodeCMSContentPagesProfile
			   2 ZnodeCMSContentPagesLocale
			   3 ZnodeCMSContentPageGroupMapping
			   4 ZnodeCMSSEODetail
			   5 ZnodeCMSContentPages
     Unit Testing 
	 begin tran
     DEclare @Status bit 
     EXEC Znode_DeleteContentPage  29 ,@Status =@Status OUT 
	 rollback tran
       
    */
	 BEGIN
         BEGIN TRAN DeleteContentPage;
         BEGIN TRY
             SET NOCOUNT ON;
             DECLARE @TBL_DeleteContentPage TABLE(CMSContentPagesId INT,PageName NVARCHAR(200),PortalId INT );  -- table holds the CMSContentPagesId id 
             INSERT INTO @TBL_DeleteContentPage
                    SELECT a.CMSContentPagesId,a.PageName, a.PortalId
                    FROM [dbo].[ZnodeCMSContentPages] AS a
                         INNER JOIN dbo.Split(@CMSContentPageId, ',') AS b ON(a.CMSContentPagesId = b.Item); -- dbo.Split function use to make ',' separeted data in table rows 
             DELETE FROM ZnodeCMSContentPagesProfile
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteContentPage AS TBDCP
                 WHERE TBDCP.CMSContentPagesId = ZnodeCMSContentPagesProfile.CMSContentPagesId
             );
             DELETE FROM ZnodeCMSContentPagesLocale
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteContentPage AS TBDCP
                 WHERE TBDCP.CMSContentPagesId = ZnodeCMSContentPagesLocale.CMSContentPagesId
             );
             DELETE FROM ZnodeCMSContentPageGroupMapping
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteContentPage AS TBDCP
                 WHERE TBDCP.CMSContentPagesId = ZnodeCMSContentPageGroupMapping.CMSContentPagesId
             );
             DELETE FROM ZnodeCMSWidgetCategory
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteContentPage AS TBDCP
                 WHERE TBDCP.CMSContentPagesId = ZnodeCMSWidgetCategory.CMSMappingId
                       AND ZnodeCMSWidgetCategory.TypeOFMapping = 'ContentPageMapping'
             );
             DELETE FROM ZnodeCMSWidgetProduct
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteContentPage AS TBDCP
                 WHERE TBDCP.CMSContentPagesId = ZnodeCMSWidgetProduct.CMSMappingId
                       AND ZnodeCMSWidgetProduct.TypeOFMapping = 'ContentPageMapping'
             );
             DELETE FROM ZnodeCMSWidgetSliderBanner
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteContentPage AS TBDCP
                 WHERE TBDCP.CMSContentPagesId = ZnodeCMSWidgetSliderBanner.CMSMappingId
                       AND ZnodeCMSWidgetSliderBanner.TypeOFMapping = 'ContentPageMapping'
             );
             DELETE FROM ZnodeCMSWidgetTitleConfiguration
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteContentPage AS TBDCP
                 WHERE TBDCP.CMSContentPagesId = ZnodeCMSWidgetTitleConfiguration.CMSMappingId
                       AND ZnodeCMSWidgetTitleConfiguration.TypeOFMapping = 'ContentPageMapping'
             );
             DELETE FROM ZnodeCMSSEODetailLocale
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM ZnodeCMSSEODetail
                 WHERE EXISTS
                 (
                     SELECT TOP 1 1
                     FROM @TBL_DeleteContentPage AS TBDCP
                     WHERE TBDCP.PageName = ZnodeCMSSEODetail.SEOCode
					 AND TBDCP.PortalId = ZnodeCMSSEODetail.PortalId
                 )
                       AND ZnodeCMSSEODetail.CMSSEOTypeId IN
                 (
                     SELECT CMSSEOTypeId
                     FROM ZnodeCMSSEOType
                     WHERE NAME = 'Content Page'
                 )
                       AND ZnodeCMSSEODetail.CMSSEODetailId = ZnodeCMSSEODetailLocale.CMSSEODetailId
             );
             DELETE FROM ZnodeCMSSEODetail
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteContentPage AS TBDCP
                 WHERE TBDCP.PageName = ZnodeCMSSEODetail.SEOCode
				 AND TBDCP.PortalId = ZnodeCMSSEODetail.PortalId
             )
                   AND ZnodeCMSSEODetail.CMSSEOTypeId IN
             (
                 SELECT CMSSEOTypeId
                 FROM ZnodeCMSSEOType
                 WHERE NAME = 'Content Page'
             );
             DELETE FROM ZnodeCMSContentPagesLocale
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteContentPage AS TBDCP
                 WHERE TBDCP.CMSContentPagesId = ZnodeCMSContentPagesLocale.CMSContentPagesId
             );
             DELETE FROM ZnodeCMSContentPages
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteContentPage AS TBDCP
                 WHERE TBDCP.CMSContentPagesId = ZnodeCMSContentPages.CMSContentPagesId
             );
             IF
             (
                 SELECT COUNT(1)
                 FROM @TBL_DeleteContentPage
             ) =
             (   -- if count are equal then  dataset status are return true other wise false 
                 SELECT COUNT(1)
                 FROM dbo.Split(@CMSContentPageId, ',')
             ) 
                 BEGIN
                     SELECT 1 AS ID,
                            CAST(1 AS BIT) AS [Status];
                     SET @Status = 1;
                 END;
             ELSE
                 BEGIN
                     SELECT 0 AS ID,
                            CAST(0 AS BIT) AS [Status];
                     SET @Status = 0;
                 END;
             COMMIT TRAN DeleteContentPage;
         END TRY
         BEGIN CATCH
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_DeleteContentPage @CMSContentPageId = '+@CMSContentPageId+',@Status='+CAST(@Status AS VARCHAR(50));
             SET @Status = 0;
             SELECT 0 AS ID,
                    CAST(0 AS BIT) AS [Status];
             ROLLBACK TRAN DeleteContentPage;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_DeleteContentPage',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO

--after beta
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetFilterPimProductId')
BEGIN 
	DROP PROCEDURE Znode_GetFilterPimProductId
END
GO

CREATE  PROCEDURE [dbo].[Znode_GetFilterPimProductId]
(
  @WhereClause XML 
 ,@PimProductId TransferId Readonly 
 ,@LocaleId   INT 
)
AS 
BEGIN 
SET NOCOUNT ON 

DECLARE  @DefaultLocaleId INT = dbo.Fn_GetDefaultLocaleID()
		,@SQL NVARCHAR(max)
		,@InternalProductWhereClause NVARCHAR(max)

DECLARE @WorkingProcess INT = 0 

DECLARE @TBL_FilterClause TABLE (ID INT IDENTITY(1,1),AttributeValue NVARCHAR(max),AttributeCode NVARCHAr(max),PimAttributeId INT ,AttributeTypeName VARCHAR(300),AttributeCodeOrg VARCHAR(600))

DECLARE @WhereClauseXML XML = @WhereClause 


IF EXISTS (SELECT TOP 1 1 FROM @WhereClauseXml.nodes ( '//ArrayOfWhereClauseModel/WhereClauseModel'  ) AS Tbl(Col) 
WHERE Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)')  LIKE  '% in (%')
BEGIN 
 SET @WorkingProcess = 1
 INSERT INTO @TBL_FilterClause (AttributeValue,AttributeCode,AttributeTypeName,PimAttributeId,AttributeCodeOrg)
SELECT  Tbl.Col.value ( 'attributevalue[1]' , 'NVARCHAR(max)') AS AttributeValue
,Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)') AS AttributeValue,ZTY.AttributeTypeName,ZPA.PimAttributeId,AttributeCode AttributeCodeOrg
FROM @WhereClauseXml.nodes ( '//ArrayOfWhereClauseModel/WhereClauseModel'  ) AS Tbl(Col)
LEFT JOIN  ZnodePimAttribute ZPA  ON ((Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)')  LIKE '%in (%' OR dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''','')) 
									= ZPA.AttributeCode ) AND IsCategory = 0 
AND ( ZPA.IsShowOnGrid = 1 OR ZPA.IsConfigurable =1  )  )
LEFT JOIN ZnodeAttributeType ZTY ON (ZTY.AttributeTypeId = ZPA.AttributeTypeId)

END 
ELSE 
BEGIN 

INSERT INTO @TBL_FilterClause (AttributeValue,AttributeCode,AttributeTypeName,PimAttributeId,AttributeCodeOrg)
SELECT  Tbl.Col.value ( 'attributevalue[1]' , 'NVARCHAR(max)') AS AttributeValue
,Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)') AS AttributeValue,ZTY.AttributeTypeName,ZPA.PimAttributeId,AttributeCode AttributeCodeOrg
FROM @WhereClauseXml.nodes ( '//ArrayOfWhereClauseModel/WhereClauseModel'  ) AS Tbl(Col)
LEFT JOIN ZnodePimAttribute ZPA  ON (dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''','')) 
									= ZPA.AttributeCode AND ZPA.IsCategory = 0 
AND ( ZPA.IsShowOnGrid = 1 OR ZPA.IsConfigurable =1  )  )
LEFT JOIN ZnodeAttributeType ZTY ON (ZTY.AttributeTypeId = ZPA.AttributeTypeId)


END 



CREATE TABLE #TBL_PimProductId (PimProductId INT)

CREATE TABLE #TBL_PimProductIdDelete (PimProductId INT )

  INSERT INTO #TBL_PimProductId (PimProductId )
  SELECT Id 
  FROM @PimProductId

  SELECT ZPAV.PimProductId ,PimAttributeValueId 
			,ZPAV.CreatedDate,ZPAV.ModifiedDate,TBLA.AttributeCodeOrg AttributeCode
  INTO #TBL_AttributeValueId 
  FROM  ZnodePimAttributeValue ZPAV 
  INNER JOIN @TBL_FilterClause TBLA ON (TBLA.PimAttributeId = ZPAV.PimAttributeId)
  INNER JOIN #TBL_PimProductId YT ON (YT.PimProductId = ZPAV.PimProductId OR NOT EXISTS (SELECT TOP 1 1 #TBL_PimProductId))
 



IF @WorkingProcess =1 
BEGIN 
 DECLARE @PimAttributeId_in TransferId 

 INSERT INTO @PimAttributeId_in 
 SELECT PimAttributeId
 FROM  @TBL_FilterClause 
 WHERE AttributeTypeName IN ('Simple Select','Multi Select') 
 AND AttributeCode LIKE '%in (%'

 

 CREATE TABLE #TBL_AttributeDefaultValue_in ( PimAttributeId INT ,
              AttributeDefaultValueCode VARCHAR(max),IsEditable INT,AttributeDefaultValue NVARCHAR(max),DisplayOrder INT,PimAttributeDefaultValueId INT  )    
 INSERT INTO #TBL_AttributeDefaultValue_in(PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder,PimAttributeDefaultValueId)
 EXEC Znode_GetAttributeDefaultValueLocaleNew_TansferId @PimAttributeId_in, @LocaleId;
 
 DECLARE @WhereClauseInCom NVARCHAR(max) = (SELECT TOP 1 AttributeValue FROM @TBL_FilterClause WHERE AttributeCode LIKE '%in (%') 


SET @SQL = '
   ;With Cte_AttributeValue AS 
   (
   SELECT PimAttributeValueId 
   FROM ZnodePimAttributeValueLocale 
   WHERE AttributeValue '+@WhereClauseInCom+'
   UNION ALL 
   SELECT PimAttributeValueId 
   FROM ZnodePimProductAttributeTextAreaValue   
   WHERE AttributeValue '+@WhereClauseInCom+'
   UNION ALL 
   SELECT ZPADV.PimAttributeValueID 
   FROM ZnodePimProductAttributeDefaultValue ZPADV 
   INNER JOIN #TBL_AttributeDefaultValue_in TBL ON (TBL.PimAttributeDefaultValueId = ZPADV.PimAttributeDefaultValueId)
   WHERE TBL.AttributeDefaultValue '+@WhereClauseInCom+'
   )
   
   SELECT PimProductId 
   FROM #TBL_AttributeValueId ZPAV 
   INNER JOIN  Cte_AttributeValue CTAC ON (CTAC.PimAttributeValueId = ZPAV.PimAttributeVaLueId )
   GROUP BY PimProductId
   UNION ALL  
   SELECT PimProductId 
   FROM ZnodePimProduct a
   INNER JOIN ZnodePimFamilyLocale b ON (b.PimAttributeFamilyId = a.PimAttributeFamilyId) 
   WHERE b.AttributeFamilyName '+@WhereClauseInCom+'
   GROUP BY PimProductId
   UNION ALL 
   SELECT  TBLAV.PimProductId 
   FROM ZnodePimProduct TBLAV
   WHERE CASE WHEN TBLAV.IsProductPublish  IS NULL THEN ''Not Published'' 
         WHEN TBLAV.IsProductPublish = 0 THEN ''Draft''
	     ELSE  ''Published'' END '+@WhereClauseInCom+'
   GROUP BY TBLAV.PimProductId 
   '
   
   DELETE FROM #TBL_PimProductIdDelete 
   INSERT INTO #TBL_PimProductIdDelete  (PimProductId)
   EXEC (@SQL)
   DELETE FROM #TBL_PimProductId
   INSERT INTO #TBL_PimProductId
   SELECT PimProductId FROM #TBL_PimProductIdDelete
   INSERT INTO #TBL_PimProductId
   SELECT -1 
   WHERE NOT EXISTS (SELECT TOP 1 1  FROM #TBL_PimProductId)

 --  IF NOT EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId ) AND EXISTS (SELECT TOP 1 1  FROM @PimProductId Having Max (ID) = 0 )
 --  BEGIN
 
 --   INSERT INTO  #TBL_PimProductId (PimProductId)
	--SELECT 0 
 --  END 
  DELETE  FROM @TBL_FilterClause WHERE AttributeCode LIKE '% in (%'

   DROP TABLE #TBL_AttributeDefaultValue_in
   SET @WorkingProcess  = 0 
   
END 

  IF EXISTS (SELECT TOP 1 1 FROM @TBL_FilterClause WHERE AttributeCode <> '' AND ISNULL(AttributeValue,'') = '')
  BEGIN 
  
   SET  @InternalProductWhereClause = STUFF( (  SELECT ' INNER JOIN #TBL_AttributeValueId AS ZPAVL'+CAST(ID AS VARCHAR(200))+
									' ON ( TBLAV.PimProductId = ZPAVL'+CAST(ID AS VARCHAR(200))+'.PimProductId AND ZPAVL'+CAST(ID AS VARCHAR(200))+'.AttributeCode '+AttributeCode+
									' )'				
							FROM @TBL_FilterClause
							WHERE ISNULL(AttributeValue,'') = ''
							FOR XML PATH (''), TYPE).value('.', ' Nvarchar(max)'), 1, 0, '')
   ----Change for configurable product varient page seach


   SET @SQL = ' 
				SELECT  TBLAV.PimProductId 
				FROM #TBL_AttributeValueId TBLAV '+@InternalProductWhereClause+' 
				WHERE EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId TBLP WHERE TBLP.PimProductId = TBLAV.PimProductId )
				GROUP BY TBLAV.PimProductId 
			'
   ----Comment code for Change for configurable product varient page seach
   --SET @SQL = ' 
			--	SELECT  TBLAV.PimProductId 
			--	FROM #TBL_AttributeValueId TBLAV '+@InternalProductWhereClause+' '+CASE WHEN NOT EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId ) THEN '' 
			--				ELSE ' WHERE EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId TBLP WHERE TBLP.PimProductId = TBLAV.PimProductId ) ' END+'
			--	GROUP BY TBLAV.PimProductId 
			--'

   DELETE FROM #TBL_PimProductIdDelete 
   INSERT INTO #TBL_PimProductIdDelete  (PimProductId)
   EXEC (@SQL)
   DELETE FROM #TBL_PimProductId
   INSERT INTO #TBL_PimProductId
   SELECT PimProductId FROM #TBL_PimProductIdDelete
   INSERT INTO #TBL_PimProductId
   SELECT -1 
   WHERE NOT EXISTS (SELECT TOP 1 1  FROM #TBL_PimProductId)
   DELETE FROM @TBL_FilterClause WHERE ISNULL(AttributeValue,'') = ''
   IF NOT EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId ) AND EXISTS (SELECT TOP 1 1  FROM @PimProductId Having Max (ID) = 0 )
   BEGIN
    INSERT INTO  #TBL_PimProductId (PimProductId)
	SELECT 0 
   END
  
  END 

IF EXISTS (SELECT TOP 1 1 FROM @TBL_FilterClause WHERE AttributeTypeName IN ('Simple Select','Multi Select') )
BEGIN
 DECLARE @PimAttributeId TransferId 

 INSERT INTO @PimAttributeId 
 SELECT DISTINCT PimAttributeId
 FROM  @TBL_FilterClause WHERE AttributeTypeName IN ('Simple Select','Multi Select') 

 CREATE TABLE #TBL_AttributeDefaultValue ( PimAttributeId INT ,
              AttributeDefaultValueCode VARCHAR(max),IsEditable INT,AttributeDefaultValue NVARCHAR(max),DisplayOrder INT,PimAttributeDefaultValueId INT  )    
 INSERT INTO #TBL_AttributeDefaultValue(PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder,PimAttributeDefaultValueId)
 EXEC Znode_GetAttributeDefaultValueLocaleNew_TansferId @PimAttributeId, @LocaleId;
 
  IF @DefaultLocaleId = @LocaleID AND  @WorkingProcess = 0 
  BEGIN 


  SET  @InternalProductWhereClause = STUFF( (  SELECT ' INNER JOIN Cte_AttributeValue AS ZPAVL'+CAST(ID AS VARCHAR(200))+
									' ON ( TBLAV.PimProductId = ZPAVL'+CAST(ID AS VARCHAR(200))+'.PimProductId AND ZPAVL'+CAST(ID AS VARCHAR(200))+'.AttributeCode '+AttributeCode+
									+' AND ZPAVL'+CAST(ID AS VARCHAR(200))+'.AttributeValue '+AttributeValue+' AND ZPAVL'+CAST(ID AS VARCHAR(200))+
									'.LocaleId='+CAST(@LocaleID AS VARCHAR(200))+' )'				
							FROM @TBL_FilterClause
							WHERE AttributeTypeName IN ('Simple Select','Multi Select')
							AND AttributeValue <> ''
							AND AttributeValue IS NOT NULL
							FOR XML PATH (''), TYPE).value('.', ' Nvarchar(max)'), 1, 0, '')

							--select @InternalProductWhereClause
							--select * from @TBL_FilterClause
							--select * from #TBL_AttributeValueId
							--select * from #TBL_AttributeDefaultValue

  SET @SQL = ' ;With Cte_AttributeValue AS 
			   (
	            SELECT TBLAV.PimAttributeValueId ,SUBSTRING((SELECT '',''+AttributeDefaultValue FROM #TBL_AttributeDefaultValue TTR 
				INNER JOIN ZnodePimProductAttributeDefaultValue ZPAVL ON (TTR.PimAttributeDefaultValueId = ZPAVL.PimAttributeDefaultValueId )
				WHERE ZPAVL.PimAttributeValueId = TBLAV.PimAttributeValueId  
				AND ZPAVL.LocaleId = '+Cast(@localeId AS VARCHAR(200))+'
				FOR XML PATH('''') ),2,4000) AttributeValue
				    ,  '+Cast(@localeId AS VARCHAR(200))+' LocaleId,TBLAV.AttributeCode,TBLAV.PimProductId
				FROM #TBL_AttributeValueId TBLAV
				'+CASE WHEN NOT EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId ) THEN '' 
							ELSE ' WHERE EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId TBLP WHERE TBLP.PimProductId = TBLAV.PimProductId ) ' END+'
				GROUP BY TBLAV.PimAttributeValueId,TBLAV.AttributeCode,TBLAV.PimProductId
			   )
  
				SELECT  TBLAV.PimProductId
				FROM #TBL_AttributeValueId TBLAV
				'+@InternalProductWhereClause+'	GROUP BY TBLAV.PimProductId '
			
				
  END 
  ELSE IF  @WorkingProcess = 0 
  BEGIN 

  SET  @InternalProductWhereClause = 
							STUFF( (  SELECT ' INNER JOIN Cte_AttributeValue AS ZPAVL'+CAST(ID AS VARCHAR(200))+
									' ON ( TBLAV.PimProductId = ZPAVL'+CAST(ID AS VARCHAR(200))+'.PimProductId AND ZPAVL'+CAST(ID AS VARCHAR(200))+'.AttributeCode '+AttributeCode+
									' AND ZPAVL'+CAST(ID AS VARCHAR(200))+'.AttributeValue '+AttributeValue+'  )'				
							FROM @TBL_FilterClause
							WHERE AttributeTypeName IN ('Simple Select','Multi Select')
							AND AttributeValue <> ''
							AND AttributeValue IS NOT NULL
							FOR XML PATH (''), TYPE).value('.', ' Nvarchar(max)'), 1, 0, '')
  SET @SQL = '  			 
			   SELECT TBLAV.PimAttributeValueId,ZPAVL.PimAttributeDefaultValueId , ZPAVL.LocaleId ,COUNT(*)Over(Partition By TBLAV.PimAttributeValueId ,TBLAV.PimProductId ORDER BY TBLAV.PimAttributeValueId ,TBLAV.PimProductId  ) RowId
			   INTO #temp_Table 
			   FROM #TBL_AttributeValueId TBLAV 
			   INNER JOIN ZnodePimProductAttributeDefaultValue ZPAVL ON (ZPAVL.PimAttributeValueId = TBLAV.PimAttributeValueId)
			   WHERE (ZPAVL.LocaleId = '+Cast(@localeId AS VARCHAR(200))+' OR ZPAVL.LocaleId = '+Cast(@DefaultlocaleId AS VARCHAR(200))+')
				
				;with Cte_AttributeValue AS 
			   (
	            SELECT TBLAV.PimAttributeValueId ,SUBSTRING((SELECT '',''+AttributeDefaultValue FROM #TBL_AttributeDefaultValue TTR 
				INNER JOIN #temp_Table  ZPAVL ON (TTR.PimAttributeDefaultValueId = ZPAVL.PimAttributeDefaultValueId )
				WHERE ZPAVL.PimAttributeValueId = TBLAV.PimAttributeValueId  
				AND ZPAVL.LocaleId = CASE WHEN ZPAVL.RowId = 2 THEN '+CAST(@LocaleId AS Varchar(300))+' ELSE '+Cast(@DefaultLocaleId AS Varchar(300))+' END  
				FOR XML PATH('''') ),2,4000) AttributeValue,TBLAV.AttributeCode ,TBLAV.PimProductId 
				FROM #TBL_AttributeValueId TBLAV
				'+CASE WHEN NOT EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId ) THEN '' 
							ELSE ' WHERE EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId TBLP WHERE TBLP.PimProductId = TBLAV.PimProductId ) ' END+'
				GROUP BY TBLAV.PimAttributeValueId,TBLAV.AttributeCode ,TBLAV.PimProductId 
			   )
  
				SELECT   TBLAV.PimProductId
				FROM  #TBL_AttributeValueId TBLAV
				'+@InternalProductWhereClause+'	GROUP BY TBLAV.PimProductId '

  END 
   PRINT @SQL 
   
   DELETE FROM #TBL_PimProductIdDelete 
   INSERT INTO #TBL_PimProductIdDelete  (PimProductId)
   EXEC (@SQL)
   DELETE FROM #TBL_PimProductId
   INSERT INTO #TBL_PimProductId
   SELECT PimProductId FROM #TBL_PimProductIdDelete
   --INSERT INTO #TBL_PimProductId
   --SELECT -1 
   --WHERE NOT EXISTS (SELECT TOP 1 1  FROM #TBL_PimProductId)
   
 --  IF NOT EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId ) AND EXISTS (SELECT TOP 1 1  FROM @PimProductId Having Max (ID) = 0 )
 --  BEGIN
 --   INSERT INTO  #TBL_PimProductId (PimProductId)
	--SELECT 0 
 --  END
   DROP TABLE #TBL_AttributeDefaultValue

END 

IF EXISTS (SELECT TOP 1 1 FROM @TBL_FilterClause WHERE AttributeTypeName IN ('Text','Number','Datetime','Yes/No') )
BEGIN  
   
  IF @DefaultLocaleId = @LocaleID AND @WorkingProcess = 0 
  BEGIN 
  SET  @InternalProductWhereClause = 
							STUFF( (  SELECT ' INNER JOIN View_PimProducttextValue AS ZPAVL'+CAST(ID AS VARCHAR(200))+
									' ON ( TBLAV.PimProductId = ZPAVL'+CAST(ID AS VARCHAR(200))+'.PimProductId AND ZPAVL'+CAST(ID AS VARCHAR(200))+'.AttributeCode '+AttributeCode+
									' AND ZPAVL'+CAST(ID AS VARCHAR(200))+'.AttributeValue '+AttributeValue+' AND ZPAVL'+CAST(ID AS VARCHAR(200))+
									'.LocaleId='+CAST(@LocaleID AS VARCHAR(200))+' )'				
							FROM @TBL_FilterClause
							WHERE AttributeTypeName IN ('Text','Number','Datetime','Yes/No')
							FOR XML PATH (''), TYPE).value('.', ' Nvarchar(max)'), 1, 0, '')
 
  SET @SQL = '	SELECT  TBLAV.PimProductId 
				FROM #TBL_AttributeValueId TBLAV
				'+@InternalProductWhereClause+'
				'+CASE WHEN NOT EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId ) THEN '' 
							ELSE ' WHERE EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId TBLP WHERE TBLP.PimProductId = TBLAV.PimProductId   ) ' END 
				+' GROUP BY TBLAV.PimProductId '

  END 
  ELSE IF @WorkingProcess = 0 
  BEGIN 
  SET  @InternalProductWhereClause = 
							STUFF( (  SELECT ' INNER JOIN Cte_AttributeDetails AS ZPAVL'+CAST(ID AS VARCHAR(200))+
									' ON ( TBLAV.PimProductId = ZPAVL'+CAST(ID AS VARCHAR(200))+'.PimProductId AND ZPAVL'+CAST(ID AS VARCHAR(200))+'.AttributeCode '+AttributeCode+
									' AND ZPAVL'+CAST(ID AS VARCHAR(200))+'.AttributeValue '+AttributeValue+' AND ZPAVL'+CAST(ID AS VARCHAR(200))+
									'.LocaleId = CASE WHEN ZPAVL'+CAST(ID AS VARCHAR(200))+'.RowId = 2 THEN  '+CAST(@LocaleId AS Varchar(300))+' ELSE '+Cast(@DefaultLocaleId AS Varchar(300))+' END  )'				
							FROM @TBL_FilterClause
							WHERE AttributeTypeName IN ('Text','Number','Datetime','Yes/No')
							FOR XML PATH (''), TYPE).value('.', ' Nvarchar(max)'), 1, 0, '')
  SET @SQL = ' 
     ;With Cte_AttributeDetails AS 
	 (
	 SELECT TBLAV.PimProductId,ZPAVL.AttributeValue,TBLAV.AttributeCode,ZPAVL.LocaleId ,COUNT(*)Over(Partition By TBLAV.PimProductId,TBLAV.AttributeCode ORDER BY TBLAV.PimProductId,TBLAV.AttributeCode  ) RowId
	 FROM #TBL_AttributeValueId TBLAV 
	 INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON (ZPAVL.PimAttributeValueId = TBLAV.PimAttributeValueId )
	 WHERE (LocaleId = '+Cast(@DefaultLocaleId AS Varchar(300))+' OR LocaleId = '+CAST(@LocaleId AS Varchar(300))+' )'+CASE WHEN NOT EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId ) THEN '' 
							ELSE ' AND EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId TBLP WHERE TBLP.PimProductId = TBLAV.PimProductId ) ' END +'
	 ) 
	 SELECT  TBLAV.PimProductId 
  	 FROM #TBL_AttributeValueId TBLAV
	 '+@InternalProductWhereClause+'
	 GROUP BY TBLAV.PimProductId 
	 '
	 

  END 
   PRINT @SQL
   DELETE FROM #TBL_PimProductIdDelete 
   INSERT INTO #TBL_PimProductIdDelete  (PimProductId)
   EXEC (@SQL)
   DELETE FROM #TBL_PimProductId
   INSERT INTO #TBL_PimProductId
   SELECT PimProductId FROM #TBL_PimProductIdDelete

END 

IF EXISTS (SELECT TOP 1 1 FROM @TBL_FilterClause WHERE AttributeTypeName IN ('Text Area') )
BEGIN    
  IF @DefaultLocaleId = @LocaleID AND @WorkingProcess = 0 
  BEGIN 
  SET  @InternalProductWhereClause = 
								STUFF( (  SELECT ' INNER JOIN View_PimProductTextAreaValue AS ZPAVL'+CAST(ID AS VARCHAR(200))+
									' ON ( TBLAV.PimProductId = ZPAVL'+CAST(ID AS VARCHAR(200))+'.PimProductId AND ZPAVL'+CAST(ID AS VARCHAR(200))+'.AttributeCode '+AttributeCode+
									' AND ZPAVL'+CAST(ID AS VARCHAR(200))+'.AttributeValue '+AttributeValue+' AND ZPAVL'+CAST(ID AS VARCHAR(200))+
									'.LocaleId='+CAST(@LocaleID AS VARCHAR(200))+' )'				
							FROM @TBL_FilterClause
							WHERE AttributeTypeName IN ('Text Area')
							FOR XML PATH (''), TYPE).value('.', ' Nvarchar(max)'), 1, 0, '')
 
  SET @SQL = '
              SELECT  TBLAV.PimProductId 
				FROM #TBL_AttributeValueId TBLAV
				'+@InternalProductWhereClause+CASE WHEN NOT EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId ) THEN '' 
							ELSE ' WHERE EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId TBLP WHERE TBLP.PimProductId = TBLAV.PimProductId ) ' END 
							+' GROUP BY TBLAV.PimProductId '
  END 
  ELSE IF @WorkingProcess = 0 
  BEGIN 
  SET  @InternalProductWhereClause = 
							STUFF( (  SELECT ' INNER JOIN Cte_AttributeDetails AS ZPAVL'+CAST(ID AS VARCHAR(200))+
									' ON ( TBLAV.PimProductId = ZPAVL'+CAST(ID AS VARCHAR(200))+'.PimProductId AND ZPAVL'+CAST(ID AS VARCHAR(200))+'.AttributeCode '+AttributeCode+
									' AND ZPAVL'+CAST(ID AS VARCHAR(200))+'.AttributeValue '+AttributeValue+' AND ZPAVL'+CAST(ID AS VARCHAR(200))+
									'.LocaleId = CASE WHEN ZPAVL'+CAST(ID AS VARCHAR(200))+'.RowId = 2 THEN  '+CAST(@LocaleId AS Varchar(300))+' ELSE '+Cast(@DefaultLocaleId AS Varchar(300))+' END  )'				
							FROM @TBL_FilterClause
							WHERE AttributeTypeName IN ('Text Area')
							FOR XML PATH (''), TYPE).value('.', ' Nvarchar(max)'), 1, 0, '')
  SET @SQL = ' 
     ;With Cte_AttributeDetails AS 
	 (
	 SELECT TBLAV.PimProductId,TBLAV.AttributeCode,ZPAVL.AttributeValue,ZPAVL.LocaleId ,COUNT(*)Over(Partition By TBLAV.PimProductId,TBLAV.AttributeCode ORDER BY TBLAV.PimProductId,TBLAV.AttributeCode  ) RowId
	 FROM #TBL_AttributeValueId TBLAV 
	 INNER JOIN ZnodePimProductAttributeTextAreaValue ZPAVL ON (ZPAVL.PimAttributeValueId = TBLAV.PimAttributeValueId )
	 WHERE (LocaleId = '+Cast(@DefaultLocaleId AS Varchar(300))+' OR LocaleId = '+CAST(@LocaleId AS Varchar(300))+' )
	 
	 ) 
	 SELECT  TBLAV.PimProductId 
  	 FROM #TBL_AttributeValueId TBLAV
	 '+@InternalProductWhereClause+CASE WHEN NOT EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId ) THEN '' 
							ELSE ' WHERE EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId TBLP WHERE TBLP.PimProductId = TBLAV.PimProductId ) ' END 
							+' 
							GROUP BY TBLAV.PimProductId 	
							'
   END 
   PRINT @SQL
   DELETE FROM #TBL_PimProductIdDelete 
   INSERT INTO #TBL_PimProductIdDelete  (PimProductId)
   EXEC (@SQL)
   DELETE FROM #TBL_PimProductId
   INSERT INTO #TBL_PimProductId
   SELECT PimProductId FROM #TBL_PimProductIdDelete

END 
IF EXISTS (SELECT TOP 1 1 FROM @TBL_FilterClause WHERE AttributeCode  LIKE '%PublishStatus%' )
BEGIN    
 
  SET @SQL = '
              SELECT  TBLAV.PimProductId 
				FROM ZnodePimProduct TBLAV
				WHERE CASE WHEN TBLAV.IsProductPublish  IS NULL THEN ''Not Published'' 
				WHEN TBLAV.IsProductPublish = 0 THEN ''Draft''
				ELSE  ''Published'' END '+(SELECT TOP 1 AttributeValue FROM @TBL_FilterClause WHERE AttributeCode LIKE '%PublishStatus%')+CASE WHEN NOT EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId ) THEN '' 
							ELSE ' AND EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId TBLP WHERE TBLP.PimProductId = TBLAV.PimProductId ) ' END 
							+' GROUP BY TBLAV.PimProductId '
  
   PRINT @SQL
   DELETE FROM #TBL_PimProductIdDelete 
   INSERT INTO #TBL_PimProductIdDelete  (PimProductId)
   EXEC (@SQL)
   DELETE FROM #TBL_PimProductId
   INSERT INTO #TBL_PimProductId
   SELECT PimProductId FROM #TBL_PimProductIdDelete

END 
IF EXISTS (SELECT TOP 1 1 FROM @TBL_FilterClause WHERE AttributeCode  LIKE '%AttributeFamily%' )
BEGIN 

 ;With Cte_attributeValue AS 
   (
	 SELECT ZPAF.PimAttributeFamilyId,FamilyCode,AttributeFamilyName ,ZPFL.LocaleId
	 FROM ZnodePimAttributeFamily ZPAF
	 INNER JOIN ZnodePimFamilyLocale ZPFL ON (ZPFL.PimAttributeFamilyId = ZPAF.PimAttributeFamilyId) 
	 WHERE ZPFL.LocaleId IN (@DefaultLocaleId,@LocaleId)
	 ) 
   , Cte_AttributeValueAttribute AS (
	  SELECT PimAttributeFamilyId,FamilyCode,AttributeFamilyName
	   FROM Cte_attributeValue RTY 
	   WHERE LocaleId = @LocaleId
      )
   , Cte_AttributeValueTht AS (
      SELECT PimAttributeFamilyId,FamilyCode,AttributeFamilyName
	  FROM Cte_AttributeValueAttribute
	  UNION ALL 
	  SELECT PimAttributeFamilyId,FamilyCode,AttributeFamilyName
	  FROM Cte_attributeValue TYY  
	  WHERE NOT EXISTS (SELECT TOP 1 1 FROM Cte_AttributeValueAttribute THE WHERE THE.PimAttributeFamilyId = TYY.PimAttributeFamilyId )
	  AND TYY.LocaleId = @DefaultLocaleId
	  )
  
  SELECT PimAttributeFamilyId,FamilyCode,AttributeFamilyName
  INTO #TBL_FamilyLocale
  FROM Cte_AttributeValueTht 


  SET @SQL = '
                SELECT  TBLAV.PimProductId 
				FROM ZnodePimProduct TBLAV 
				INNER JOIN #TBL_FamilyLocale THY ON (THY.PimAttributeFamilyId = TBLAV.PimAttributeFamilyId )
				WHERE AttributeFamilyName '+(SELECT TOP 1 AttributeValue FROM @TBL_FilterClause WHERE AttributeCode LIKE '%AttributeFamily%')+CASE WHEN NOT EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId ) THEN '' 
							ELSE ' AND EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId TBLP WHERE TBLP.PimProductId = TBLAV.PimProductId ) ' END 
							+' GROUP BY TBLAV.PimProductId '
  
   
  
   PRINT @SQL
   DELETE FROM #TBL_PimProductIdDelete 
   INSERT INTO #TBL_PimProductIdDelete  (PimProductId)
   EXEC (@SQL)
   DELETE FROM #TBL_PimProductId
   INSERT INTO #TBL_PimProductId
   SELECT PimProductId FROM #TBL_PimProductIdDelete

END 
SET @SQL = '
 IF EXISTS ( SELECT TOP 1 1 FROM tempdb..sysobjects WHERE name = ''##Temp_PimProductId'+CAST(@@SPID AS VARCHAR(500))+''' )
  BEGIN 
   DROP TABLE ##Temp_PimProductId'+CAST(@@SPID AS VARCHAR(500))+'
  END 
 CREATE TABLE ##Temp_PimProductId'+CAST(@@SPID AS VARCHAR(500))+' (PimProductId INT )
 INSERT INTO  ##Temp_PimProductId'+CAST(@@SPID AS VARCHAR(500))+'
 SELECT PimProductId 
 FROM #TBL_PimProductId
'
   EXEC (@SQL)
   DROP TABLE #TBL_PimProductId
   DROP TABLE #TBL_AttributeValueId
   DROP TABLE #TBL_PimProductIdDelete
 END

 GO

 IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetOmsOrderDetail')
BEGIN 
	DROP PROCEDURE Znode_GetOmsOrderDetail
END
GO

CREATE PROCEDURE [dbo].[Znode_GetOmsOrderDetail]
( @WhereClause NVARCHAR(MAx),
  @Rows        INT            = 100,
  @PageNo      INT            = 1,
  @Order_BY    VARCHAR(1000)  = '',
  @RowsCount   INT OUT			,
  @UserId	   INT = 0 ,
  @IsFromAdmin int=0
  )
AS
    /*
     Summary : This procedure is used to get the oms order detils
			   Records are fetched for those users who placed the order i.e UserId is Present in ZnodeUser and  ZnodeOmsOrderDetails tables
	 Unit Testing:

     EXEC Znode_GetOmsOrderDetail '',@Order_BY = '',@RowsCount= 0, @UserId = 0 ,@Rows = 80, @PageNo = 1

*/
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             DECLARE @SQL NVARCHAR(MAX), @ProcessType  varchar(50)='Order'

			 DECLARE @OrderLineItemRelationshipTypeId INT
			 SET @OrderLineItemRelationshipTypeId = ( SELECT top 1 OrderLineItemRelationshipTypeId  FROM ZnodeOmsOrderLineItemRelationshipType where Name = 'AddOns' )

             DECLARE @TBL_OrderList TABLE (OmsOrderId INT,OrderNumber VARCHAR(200),PortalId INT,StoreName NVARCHAR(MAX),CurrencyCode VARCHAR(100),OrderState NVARCHAR(MAX),ShippingId INT ,
				PaymentTypeId INT,PaymentSettingId INT,PaymentStatus NVARCHAR(MAX),PaymentType VARCHAR(100),ShippingStatus BIT ,OrderDate DATETIME,UserId INT,UserName VARCHAR(300),PaymentTransactionToken NVARCHAR(600),Total NUMERIC(28,6),
				OrderItem NVARCHAR(1000),OmsOrderDetailsId INT, ItemCount INT,PODocumentPath NVARCHAR(600),IsInRMA BIT,CreatedByName NVARCHAr(max),ModifiedByName NVARCHAR(max),RowId INT,CountNo INT,Email NVARCHAR(MAX),PhoneNumber NVARCHAR(MAX),
				SubTotal NUMERIC(28,6),TaxCost NUMERIC(28,6),ShippingCost NUMERIC(28,6),BillingPostalCode NVARCHAR(200),ShippingPostalCode NVARCHAR(200),OrderModifiedDate datetime, PaymentDisplayName nvarchar(1200), ExternalId nvarchar(1000)
				,CreditCardExpMonth	int,CreditCardExpYear	int,CardType	varchar(50),CreditCardNumber varchar(10),PaymentExternalId nvarchar(1000),CultureCode nvarchar(1000) ,PublishState nvarchar(600) 
				)

			if object_id('tempdb..##OrderList') is not null
				drop table ##OrderList


			if object_id('tempdb..##Cte_OrderLineItem') is not null
				drop table ##Cte_OrderLineItem

             SET @SQL = '
			  SELECT Zoo.OmsOrderId,Zoo.OrderNumber, Zp.PortalId,Zp.StoreName ,ZODD.CurrencyCode,case when ZOS.IsShowToCustomer=0 and '+cast( @IsFromAdmin as varchar(50))+' = 0 then ZOSC.Description else  ZOS.Description end  OrderState,ZODD.ShippingId,ZODD.PaymentTypeId,ZODD.PaymentSettingId
				,ZOPS.Name PaymentStatus,ZPS.Name PaymentType,CAST(1 AS BIT) ShippingStatus ,ZODD.OrderDate,ZODD.UserId,ISNULL(ZODD.FirstName,'''')
						+'' ''+ISNULL(ZODD.LastName,'''') UserName ,ZODD.PaymentTransactionToken ,ZODD.Total ,ZODD.OmsOrderDetailsId,ZODD.PoDocument,ZVGD.UserName CreatedBy , ZVGDI.UserName ModifiedBy
						,ZU.Email ,ZU.PhoneNumber ,ZODD.SubTotal ,ZODD.TaxCost ,ZODD.ShippingCost,ZODD.BillingPostalCode,
						ZODD.ModifiedDate AS OrderModifiedDate,  ZODD.PaymentDisplayName  ,isnull(Zoo.ExternalId,0) ExternalId,ZODD.CreditCardExpMonth,ZODD.CultureCode
						,ZODD.CreditCardExpYear,ZODD.CardType,ZODD.CreditCardNumber,ZODD.PaymentExternalId,ZODPS.DisplayName as PublishState
			  INTO ##OrderList
			  FROM ZnodeOmsOrder ZOO
			  INNER JOIN ZnodeOmsOrderDetails ZODD ON (ZODD.OmsOrderId = ZOO.OmsOrderId)
			  INNER JOIN ZnodePortal ZP ON (ZP.PortalId = ZODD.portalId )
			  LEFT JOIN ZnodePublishState ZODPS ON (ZODPS.PublishStateId = ZOO.PublishStateId)
			  LEFT JOIN ZnodePaymentType ZPS ON (ZPS.PaymentTypeId = ZODD.PaymentTypeId )
			  LEFT JOIN  ZnodeOmsOrderStateShowToCustomer ZOSC ON (ZOSC.OmsOrderStateId = ZODD.OmsOrderStateId)
			  LEFT JOIN ZnodeOmsOrderState ZOS ON (ZOS.OmsOrderStateId = ZODD.OmsOrderStateId)
			  LEFT JOIN ZnodeOmsPaymentState ZOPS ON (ZOPS.OmsPaymentStateId = ZODD.OmsPaymentStateId)
			  LEFT JOIN ZnodeUser ZU ON (ZU.UserId = ZODD.UserId)
			  LEFT JOIN [dbo].[View_GetUserDetails]  ZVGD ON (ZVGD.UserId = ZODD.CreatedBy )
			  LEFT JOIN [dbo].[View_GetUserDetails]  ZVGDI ON (ZVGDI.UserId = ZODD.ModifiedBy)
			  LEFT JOIN ZnodeShipping ZS ON (ZS.ShippingId = ZODD.ShippingId)
			  LEFT OUTER JOIN ZnodePaymentSetting ZPSS ON (ZPSS.PaymentSettingId = ZODD.PaymentSettingId)
			  LEFT JOIN ZnodePortalPaymentSetting ZPPS ON (ZPPS.PaymentSettingId = ZPSS.PaymentSettingId  AND ZPPS.PortalId = ZODD.PortalId   )
			  WHERE  ZODD.IsActive = 1
		       AND (EXISTS (SELECT TOP 1 1 FROM dbo.Fn_GetRecurciveUserId ('+CAST(@UserId AS VARCHAR(50))+','''+@ProcessType+''' ) FNRU WHERE FNRU.UserId = ZU.UserId ) OR '+CAST(@UserId AS VARCHAR(50))+' =0 )
			  
			  ALTER TABLE ##OrderList ADD ShippingPostalCode VARCHAR(50)

			  UPDATE OL set ol.ShippingPostalCode = sp.ShipToPostalCode
			  from ##OrderList OL
			  cross apply (select top 1 ShipToPostalCode from ZnodeOmsOrderShipment where OmsOrderShipmentId in  (select OmsOrderShipmentId from ZnodeOmsOrderLineItems where OmsOrderDetailsId = OL.OmsOrderDetailsId))sp

			  SELECT ZOOLI.ProductName,ZOOLI.Price,Count(ZOOLI.OmsOrderLineItemsId)Over(PARTITION BY Ol.OmsOrderId Order by ZOOLI.OmsOrderDetailsId) CountId
			  ,Row_Number()Over( PARTITION BY Ol.OmsOrderId Order BY ZOOLI.Price DESC, ZOOLI.ProductName) RowId,Ol.OmsOrderId
			  ,CAST(Case when ZRRLI.RmaRequestItemId IS NULL THEN 0 ELSE 1 END AS BIT )  IsInRMA  ,OL.CreatedBy ,OL.ModifiedBy
			  into ##Cte_OrderLineItem
			  FROM ZnodeOmsOrderLineItems  ZOOLI
			  LEFT JOIN ##OrderList OL ON ( OL.OmsOrderDetailsId = ZOOLI.OmsOrderDetailsId )
			  LEFT JOIN ZnodeRmaRequestItem ZRRLI ON (ZRRLI.OmsOrderLineItemsId = ZOOLI.OmsOrderLineItemsId )
			  WHERE ZOOLI.Quantity > 0 AND ParentOmsOrderLineItemsId IS NOT NULL AND OrderLineItemRelationshipTypeId <> '+cast(@OrderLineItemRelationshipTypeId as varchar(10))+'
			

		    ;with Cte_GetOrderData AS 
			(
				SELECT distinct OL.*, CTOLI.ProductName,CountId ,IsInRMA
				FROM ##OrderList OL
				LEFT JOIN ##Cte_OrderLineItem CTOLI ON (CTOLI.OmsOrderId = OL.OmsOrderId AND CTOLI.RowId = 1 )
			)
			, Cte_OrderLineDescribe AS 
			(
				SELECT distinct *,'+dbo.Fn_GetPagingRowId(@Order_BY,'OmsOrderId DESC,OmsOrderDetailsId DESC')+',Count(*)Over() CountNo
				FROM Cte_GetOrderData
				WHERE 1= 1 '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'
		    )
			SELECT OmsOrderId,OrderNumber,PortalId,StoreName,CurrencyCode,OrderState,ShippingId,
			PaymentTypeId,PaymentSettingId,PaymentStatus,PaymentType,ShippingStatus,OrderDate,UserId,UserName,PaymentTransactionToken,Total,
			ProductName OrderItem,OmsOrderDetailsId,CountId ItemCount, PoDocument AS PODocumentPath,IsInRMA ,CASE WHEN CreatedBy IS NULL THEN email  ELSE CreatedBy END AS CreatedByName ,ModifiedBy as ModifiedByName,RowId,CountNo,
			Email,PhoneNumber,SubTotal,TaxCost,ShippingCost,BillingPostalCode, ShippingPostalCode,OrderModifiedDate,PaymentDisplayName, ExternalId,CreditCardExpMonth
						,CreditCardExpYear,CardType,CreditCardNumber,PaymentExternalId,CultureCode,PublishState 
			FROM Cte_OrderLineDescribe
			'+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)
			 

			INSERT INTO @TBL_OrderList(OmsOrderId,OrderNumber,PortalId,StoreName,CurrencyCode,OrderState,ShippingId,
			PaymentTypeId,PaymentSettingId,PaymentStatus,PaymentType,ShippingStatus,OrderDate,UserId,UserName,PaymentTransactionToken,Total,
			OrderItem,OmsOrderDetailsId, ItemCount, PODocumentPath,IsInRMA ,CreatedByName ,ModifiedByName,RowId,CountNo,Email,PhoneNumber,SubTotal,TaxCost,ShippingCost,BillingPostalCode,ShippingPostalCode,OrderModifiedDate,PaymentDisplayName ,ExternalId,CreditCardExpMonth
						,CreditCardExpYear,CardType,CreditCardNumber ,PaymentExternalId,CultureCode,PublishState)
		    EXEC(@SQL)

			SET @RowsCount = ISNULL((SELECT TOP 1 CountNo FROM @TBL_OrderList),0)

			SELECT OmsOrderId,OrderNumber,PortalId,StoreName,CurrencyCode,OrderState,ShippingId,
			PaymentTypeId,PaymentSettingId,PaymentStatus,PaymentType,ShippingStatus,OrderDate,UserId,UserName,PaymentTransactionToken,Total,
			OrderItem,OmsOrderDetailsId, ItemCount, PODocumentPath,IsInRMA ,CreatedByName ,ModifiedByName,Email,PhoneNumber,SubTotal,TaxCost,ShippingCost,BillingPostalCode,ShippingPostalCode,OrderModifiedDate,PaymentDisplayName,ExternalId,CreditCardExpMonth,CreditCardExpYear,CardType,CreditCardNumber,PaymentExternalId,CultureCode,PublishState
			FROM @TBL_OrderList
			ORDER BY RowId

			if object_id('tempdb..##OrderList') is not null
				drop table ##OrderList


			if object_id('tempdb..##Cte_OrderLineItem') is not null
				drop table ##Cte_OrderLineItem

          END TRY
         BEGIN CATCH
             DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetOmsOrderDetail @WhereClause = '''+ISNULL(CAST(@WhereClause AS VARCHAR(max)),'''''')+''',@Rows='''+ISNULL(CAST(@Rows AS VARCHAR(50)),'''''')+''',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',
			 @Order_BY='+ISNULL(@Order_BY,'''''')+',@UserId = '+ISNULL(CAST(@UserId AS VARCHAR(50)),'''')+',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')+',@IsFromAdmin='+ISNULL(CAST(@IsFromAdmin AS VARCHAR(10)),'''');
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetOmsOrderDetail',
				@ErrorInProcedure = 'Znode_GetOmsOrderDetail',
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;

	 GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportAssociateProducts')
BEGIN 
	DROP PROCEDURE Znode_ImportAssociateProducts
END
GO


CREATE PROCEDURE [dbo].[Znode_ImportAssociateProducts](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @PimCatalogId int= 0)
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import Product Association 
	
	-- Unit Testing : 
	--BEGIN TRANSACTION;
	--update ZnodeGlobalSetting set FeatureValues = '5' WHERE FeatureName = 'InventoryRoundOff' 
	--    DECLARE @status INT;
	--    EXEC [Znode_ImportInventory] @InventoryXML = '<ArrayOfImportInventoryModel>
	-- <ImportInventoryModel>
	--   <SKU>S1002</SKU>
	--   <Quantity>999998.33</Quantity>
	--   <ReOrderLevel>10</ReOrderLevel>
	--   <RowNumber>1</RowNumber>
	--   <ListCode>TestInventory</ListCode>
	--   <ListName>TestInventory</ListName>
	-- </ImportInventoryModel>
	--</ArrayOfImportInventoryModel>' , @status = @status OUT , @UserId = 2;
	--    SELECT @status;
	--    ROLLBACK TRANSACTION;
	--------------------------------------------------------------------------------------

BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max);
		DECLARE @GetDate datetime= dbo.Fn_GetDate();

		IF OBJECT_ID('TEMPDB..#InsertProductAssociation') IS NOT NULL 
			DROP TABLE #InsertProductAssociation

		IF OBJECT_ID('TEMPDB..#InsertProduct') IS NOT NULL 
			DROP TABLE #InsertProduct

		IF OBJECT_ID('TEMPDB..#SKU') IS NOT NULL 
			DROP TABLE #SKU
		-- Retrive RoundOff Value from global setting 

		CREATE TABLE #InsertProductAssociation 
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, ParentSKU varchar(300), ChildSKU varchar(200), DisplayOrder int, GUID nvarchar(400)
		);
		
		CREATE TABLE #InsertProduct 
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, ParentProductId varchar(300), ChildProductId varchar(200), DisplayOrder int, GUID nvarchar(400)
		);


		DECLARE @CategoryAttributId int;

		DECLARE @InventoryListId int;

		SET @SSQL = 'Select RowNumber,ParentSKU,ChildSKU,DisplayOrder,GUID FROM '+@TableName;
		INSERT INTO #InsertProductAssociation( RowNumber, ParentSKU,ChildSKU,DisplayOrder, GUID )
		EXEC sys.sp_sqlexec @SSQL;


		--@MessageDisplay will use to display validate message for input inventory value  
		CREATE TABLE #SKU 
		( 
						   SKU nvarchar(300), PimProductId int
		);
		INSERT INTO #SKU
			   SELECT b.AttributeValue, a.PimProductId
			   FROM ZnodePimAttributeValue AS a
					INNER JOIN
					ZnodePimAttributeValueLocale AS b
					ON a.PimAttributeId = dbo.Fn_GetProductSKUAttributeId() AND 
					   a.PimAttributeValueId = b.PimAttributeValueId;

		DECLARE @ProductType TABLE
		( 
			ProductType nvarchar(100) ,PimProductId int
		);
		INSERT INTO @ProductType
			   SELECT  ZPADV.AttributeDefaultValueCode, a.PimProductId
			   FROM ZnodePimAttributeValue AS a
					INNER JOIN
					ZnodePimProductAttributeDefaultValue AS b
					ON a.PimAttributeId = dbo.Fn_GetProductTypeAttributeId() AND 
					   a.PimAttributeValueId = b.PimAttributeValueId
					   Inner join ZnodePimAttributeDefaultValue ZPADV On b.PimAttributeDefaultValueId = ZPADV.PimAttributeDefaultValueId
					   where  ZPADV.AttributeDefaultValueCode in ('GroupedProduct','BundleProduct','ConfigurableProduct');
		-- start Functional Validation 
		-----------------------------------------------
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '19', 'ParentSKU', ParentSKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertProductAssociation AS ii
			   WHERE NOT EXISTS( SELECT SKU FROM #SKU SKU WHERE ii.ParentSKU = SKU.SKU)

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '19', 'ChildSKU', ChildSKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertProductAssociation AS ii
			   WHERE NOT EXISTS( SELECT SKU FROM #SKU SKU WHERE ii.ChildSKU = SKU.SKU)

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '53', 'ParentSKU / ChildSKU', ParentSKU+' / '+ChildSKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertProductAssociation AS ii
			   WHERE ii.ParentSKU IN
			   (
				   select ParentSKU from #InsertProductAssociation
					group by ParentSKU,ChildSKU
					having count(1)>1
			   );

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '49', 'ParentSKU',   ParentSKU , @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertProductAssociation AS ii
			   WHERE not exists
			   (
				   SELECT SKU  FROM #SKU SKU inner join @ProductType  PT ON SKU.PimProductId = PT.PimProductId and ii.ParentSKU = SKU.SKU
	
			   );

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '51', 'ChildSKU',   ChildSKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertProductAssociation AS ii
			   WHERE exists 
			   (
				   SELECT SKU  FROM #SKU SKU inner join @ProductType  PT ON SKU.PimProductId = PT.PimProductId and ii.ChildSKU = SKU.SKU
	
			   );

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '35', 'ParentSKU',  'Configure Attribute Missing: '+ Convert(nvarchar(400),isnull(ParentSKU,'')), @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertProductAssociation AS ii Inner join #SKU PS ON 
			   ii.ParentSKU = PS.SKU 
			   Inner join @ProductType  PT ON PS.PimProductId = PT.PimProductId  AND PT.ProductType  in ('ConfigurableProduct')
			   where  NOT exists 
			   (select PimProductId  from ZnodePimConfigureProductAttribute d where PS.PimProductId = d.PimProductId)
			   -- End Function Validation 	

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			SELECT '17', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			FROM #InsertProductAssociation AS ii
			WHERE (ii.DisplayOrder <> '' OR ii.DisplayOrder IS NOT NULL )AND  ii.DisplayOrder = 0

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			SELECT '64', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			FROM #InsertProductAssociation AS ii
			WHERE (ii.DisplayOrder <> '' OR ii.DisplayOrder IS NOT NULL )AND  ii.DisplayOrder > 999

			   UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ SKU - ' + isnull(ParentSKU,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN #InsertProductAssociation IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL

		-----------------------------------------------
		--- Delete Invalid Data after functional validatin  
		DELETE FROM #InsertProductAssociation
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId AND 
				  GUID = @NewGUID
		);

		insert into #InsertProduct (RowNumber,  ParentProductId , ChildProductId , DisplayOrder)
			SELECT RowNumber , SKUParent.PimProductId SKUParentId , 
				   ( Select TOP 1 SKUChild.PimProductId from #SKU AS SKUChild where  SKUChild.SKU = IPAC.ChildSKU ) SKUChildId,
				    DisplayOrder
					FROM #InsertProductAssociation AS IPAC INNER JOIN #SKU AS SKUParent ON IPAC.ParentSKU = SKUParent.SKU 

	-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM #InsertProduct
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End
	
		UPDATE B set b.ModifiedDate = @GetDate, b.ModifiedBy = @UserId, b.DisplayOrder = case when a.DisplayOrder is not null then a.DisplayOrder else b.DisplayOrder end
		from #InsertProduct A
		INNER JOIN ZnodePimProductTypeAssociation B ON a.ParentProductId = b.PimParentProductId and a.ChildProductId = b.PimProductId

		INSERT INTO ZnodePimProductTypeAssociation (PimParentProductId, PimProductId, DisplayOrder, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate) 
		select  ParentProductId , ChildProductId , DisplayOrder, @UserId, @GetDate, @UserId, @GetDate  from #InsertProduct 
		where  NOT Exists (Select TOP 1 1 from ZnodePimProductTypeAssociation where PimParentProductId =  #InsertProduct.ParentProductId
		AND PimProductId = #InsertProduct.ChildProductId )

								 
		
		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;
	END TRY
	BEGIN CATCH

		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN A;
	END CATCH;
END;

	 GO

     IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_DeleteMedia')
BEGIN 
	DROP PROCEDURE Znode_DeleteMedia
END
GO
CREATE PROCEDURE [dbo].[Znode_DeleteMedia]
( @MediaId VARCHAR(2000)= '',
  @Status  BIT           = 1 OUT,
  @MediaIds TransferId READONLY ,
  @IsCallInternal BIT = 0 )
AS
/*
   
     Summary : Remove media with their reference data 
			   This Procedure is used to check the media is associated to the product or not 
			   If passed @MediaIds are matched with deleted count then data set return true other wise false 
			   dbo.Split function use to make comma separeted data in table rows 
			   1 ZnodeMediaAttributeValue
			   2 ZnodeMediaCategory
			   3 ZnodeMedia
     Unit Testing 
	 begin tran
     Declare @Status bit 
     EXEC Znode_DeleteMedia 32,@Status= @Status
	 rollback tran
  
*/
     BEGIN
         BEGIN TRAN DeleteMedia;
         BEGIN TRY 

             ----- Declare the variable table for store the comma separeted value in row
          
             --- this is for media path with server 
             DECLARE @TBL_MediaIds TABLE(MediaId INT);
             DECLARE @TBL_DeletedMediaId TABLE
             (
			  MediaId   INT,
              MediaPath VARCHAR(3000),
			  MediaConfigurationId INT
             );
             DECLARE @TBL_DeletedMediaId_forOther TABLE
             (MediaId   INT,
              MediaPath VARCHAR(3000),
			   MediaConfigurationId INT
             );
			 -- dbo.Split function use to make comma separeted data in table rows
             INSERT INTO @TBL_MediaIds(MediaId)
                    SELECT Item
                    FROM dbo.Split(@MediaId, ','  
                    ) AS a
					WHERE @MediaId <> '';
			 
			 INSERT INTO @TBL_MediaIds
			 SELECT	id 
			 FROM @MediaIds 

             INSERT INTO @TBL_DeletedMediaId_forOther
                    SELECT zm.MediaId,
                           zm.[Path],
						   zm.MediaConfigurationId
                    FROM ZnodeMedia AS zm
                         INNER JOIN @TBL_MediaIds AS tm ON(tm.MediaId = zm.MediaId);

             /*------------------------------------------------------This code comment after requirment change ---------------------------------------------------------*/

             /*		   WHERE NOT EXISTS (SELECT TOP 1 1  																											   */

             /*         FROM  ZnodePimAttribute a 																													   */

             /*         INNEr JOIN ZnodeAttributeType b ON (a.AttributeTypeId   = b.AttributeTypeId )																   */

             /*         INNER JOIN ZnodePimAttributeValue c ON (c.PimAttributeId = a.PimAttributeId) 																   */

             /*         INNER JOIN ZnodePimAttributeValueLocale d on( d.PimAttributeValueId= c.PimAttributeValueId )												   */

             /*         WHERE EXISTS (SELECT TOP 1 1 FROM dbo.split(d.AttributeValue , ',')  qw WHERE qw.Item = CAST(zm.MediaId AS VARCHAr(1000))	)				   */

             /*         AND b.AttributeTypeName IN ('Image','File','Audio','Video'))	 																			   */

             /*         AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimProductImage zpi  WHERE zpi.MediaId = zm.MediaId)												   */

             /*         AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSPortalTheme zct WHERE zct.MediaId = zm.MediaId)												   */

             /*         -- when its complicated to handle all where conditions within single query 																	   */

             -------------------------------------------------------------------------------------------------------------------------------------------------------------
             INSERT INTO @TBL_DeletedMediaId
                    SELECT MediaId,
                           MediaPath,
						    MediaConfigurationId 
                    FROM @TBL_DeletedMediaId_forOther AS zm;

             /*------------------------------------------------------This code commented after requirment change ---------------------------------------------------------*/

             /*        WHERE NOT EXISTS (SELECT TOP 1 1																												*/

             /*        FROM  ZnodePimAttribute a 																														*/

             /*        INNEr JOIN ZnodeAttributeType b ON (a.AttributeTypeId   = b.AttributeTypeId )																	*/

             /*        INNER JOIN ZnodePimCategoryAttributeValue c ON (c.PimAttributeId = a.PimAttributeId) 															*/

             /*        INNER JOIN ZnodePimCategoryAttributeValueLocale d on( d.PimCategoryAttributeValueId= c.PimCategoryAttributeValueId )							*/

             /*        WHERE EXISTS (SELECT TOP 1 1 FROM dbo.split(d.CategoryValue , ',')  qw WHERE qw.Item = CAST(zm.MediaId AS VARCHAr(1000))	)					*/

             /*        AND b.AttributeTypeName IN ('Image','File','Audio','Video'))																					*/

             /*        AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimGlobalDisplaySetting zpg WHERE zpg.MediaId = zm.MediaId)											*/

             /*        AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSWidgetTitleConfiguration zcwtc WHERE zcwtc.mediaId = zm.MediaId)									*/

             /*        AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSSliderBanner zcb WHERE zcb.MediaId = zm.MediaId)													*/

             /*        --- Above conditions check the media are associated with product or portal or theme if associated the n not deleted other wise deleted			*/

             ------------------------------------------------------------------------------------------------------------------------------------------------------------

             DELETE FROM ZnodeMediaAttributeValue
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM ZnodeMediaCategory AS zmc
                 WHERE EXISTS
                 (
                     SELECT TOP 1 1
                     FROM @TBL_DeletedMediaId AS td
                     WHERE td.mediaId = zmc.MediaId
                 )
                       AND zmc.MediaCategoryId = ZnodeMediaAttributeValue.MediaCategoryId
             );
             DELETE FROM ZnodeMediaCategory
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeletedMediaId AS td
                 WHERE td.mediaId = ZnodeMediaCategory.MediaId
             );
			 DELETE FROM ZnodeBlogNewsContent WHERE BlogNewsId IN (SELECT BlogNewsId FROM ZnodeBlogNews
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeletedMediaId AS td
                 WHERE td.mediaId = ZnodeBlogNews.MediaId
             ))
			 DELETE FROM ZnodeBlogNewsCommentLocale WHERE BlogNewsCommentId IN (SELECT BlogNewsCommentId 
			 FROM ZnodeBlogNewsComment WHERE BlogNewsId IN (SELECT BlogNewsId FROM ZnodeBlogNews
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeletedMediaId AS td
                 WHERE td.mediaId = ZnodeBlogNews.MediaId
             )))
			 DELETE FROM ZnodeBlogNewsComment WHERE BlogNewsId IN (SELECT BlogNewsId FROM ZnodeBlogNews
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeletedMediaId AS td
                 WHERE td.mediaId = ZnodeBlogNews.MediaId
             ))
			 DELETE FROM ZnodeBlogNewsLocale WHERE BlogNewsId IN (SELECT BlogNewsId FROM ZnodeBlogNews
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeletedMediaId AS td
                 WHERE td.mediaId = ZnodeBlogNews.MediaId
             ))
			  
			 DELETE FROM ZnodeBlogNews
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeletedMediaId AS td
                 WHERE td.mediaId = ZnodeBlogNews.MediaId
             );
             DELETE FROM ZnodeMedia
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeletedMediaId AS td
                 WHERE td.mediaId = ZnodeMedia.MediaId
             );

             IF
             (
                 SELECT COUNT(1)
                 FROM @TBL_MediaIds
             ) =
             (
                 SELECT COUNT(1)
                 FROM @TBL_DeletedMediaId -- here check if count of both table are same then its return true other wise false 
             )
                 BEGIN
				     IF @IsCallInternal =1 
					 BEGIN 
					  SELECT 0 id  , '' MessageDetail, 1 Status 
					 END 
                     SELECT MediaId Id ,
                            MediaPath MessageDetails  ,
						   CAST(1 AS BIT) AS [Status]
                     FROM @TBL_DeletedMediaId TBLD
				    SET @Status = 1;
                 END
             ELSE  
                 BEGIN
				     IF @IsCallInternal =1 
					 BEGIN 
					  SELECT 0 id  , '' MessageDetail, 0 Status 
					 END
                     SELECT MediaId Id ,
                            MediaPath MessageDetails,
                            CAST(0 AS BIT) AS [Status]
                     FROM @TBL_DeletedMediaId;
                     SET @Status = 0;
                 END;
             COMMIT TRAN DeleteMedia;
         END TRY
         BEGIN CATCH
		     SELECT ERROR_MESSAGE()
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(),
		    @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_DeleteMedia @MediaId = '+@MediaId+',
		    @Status='+CAST(@Status AS VARCHAR(50));
             SELECT 1 AS ID,
                    '' AS [MessageDetails],
                    CAST(0 AS BIT) AS [Status];
             SET @Status = 0;
             ROLLBACK TRAN DeleteMedia;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_DeleteMedia',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
	 GO


IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_DeleteUserDetails')
BEGIN 
	DROP PROCEDURE Znode_DeleteUserDetails
END
GO

CREATE PROCEDURE [dbo].[Znode_DeleteUserDetails]
(
       @UserId VARCHAR(2000) = NULL ,
       @Status INT OUT	  , 
	   @UserIds Transferid READONLY , 
	   @IsForceFullyDelete BIT =0  ,@IsCallInternal   BIT = 0 
)
AS
/*
Summary: This Procedure Is used to delete user details
Unit Testing:
EXEC Znode_DeleteUserDetails 

*/
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             BEGIN TRAN A;
			 DECLARE @StatusOut Table (Id INT ,Message NVARCHAR(max), Status BIT )
             DECLARE @V_table TABLE (
                                    USERID1 NVARCHAR(200)
                                    );
             DECLARE @V_tabledeleted TABLE (
                                           UserId1      INT ,
                                           AspnetUserid NVARCHAR(1000)
                                           );
             DECLARE @TBL_DeleteduserName TABLE (
                                                id NVARCHAR(MAX)
                                                );
             INSERT INTO @V_tabledeleted
                    SELECT ITEM , b.AspNetUserId
                    FROM dbo.split ( @UserId , ','
                                   ) AS a INNER JOIN ZnodeUser AS b ON ( a.Item = b.UserId )
								   WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeOmsOrderDetails zood WHERE zood.UserId= b.UserId)
					 AND UserId <> 2 
		     INSERT INTO @V_tabledeleted 						   
			  	 SELECT a.Id , b.AspNetUserId
                    FROM @UserIds AS a 
					INNER JOIN ZnodeUser AS b ON ( a.Id = b.UserId )
								   WHERE (NOT EXISTS (SELECT TOP 1 1 FROM ZnodeOmsOrderDetails zood WHERE zood.UserId= b.UserId) OR @IsForceFullyDelete =1 )	
								   AND UserId <> 2 			  
             DELETE FROM ZnodeUserProfile
             WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS a
                            WHERE a.UserId1 = ZnodeUserProfile.UserId
                          );
             DELETE FROM ZnodeUserAddress
             WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS a
                            WHERE a.UserId1 = ZnodeUserAddress.UserId
                          ); 

			--------
			delete from ZnodeOmsPersonalizeCartItem 
			where OmsSavedCartLineItemId in (
				select OmsSavedCartLineItemId  from ZnodeOmsSavedCartLineItem where OmsSavedCartId in (
				select OmsSavedCartId FROM ZnodeOmsSavedCart
				where OmsCookieMappingId in (select OmsCookieMappingId from ZnodeOmsCookieMapping
										 WHERE EXISTS ( SELECT TOP 1 1
														FROM @V_tabledeleted AS a
														WHERE a.UserId1 = ZnodeOmsCookieMapping.UserId
													  ))));

			delete from ZnodeOmsSavedCartLineItem where OmsSavedCartId in (
			select OmsSavedCartId FROM ZnodeOmsSavedCart
			where OmsCookieMappingId in (select OmsCookieMappingId from ZnodeOmsCookieMapping
										 WHERE EXISTS ( SELECT TOP 1 1
														FROM @V_tabledeleted AS a
														WHERE a.UserId1 = ZnodeOmsCookieMapping.UserId
													  )));

			DELETE FROM ZnodeOmsSavedCart
			where OmsCookieMappingId in (select OmsCookieMappingId from ZnodeOmsCookieMapping
										 WHERE EXISTS ( SELECT TOP 1 1
														FROM @V_tabledeleted AS a
														WHERE a.UserId1 = ZnodeOmsCookieMapping.UserId
													  ));

			DELETE FROM ZnodeOmsCookieMapping
             WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS a
                            WHERE a.UserId1 = ZnodeOmsCookieMapping.UserId
                          );

			DELETE FROM ZnodeGiftCard            
             WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS a
                            WHERE a.UserId1 = ZnodeGiftCard.UserId
                          );
		   ---------

             DELETE FROM ZnodeAccountUserOrderApproval
             WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS a
                            WHERE a.UserId1 = ZnodeAccountUserOrderApproval.UserId
                          );
             DELETE FROM AspNetUserRoles
             WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS a
                            WHERE a.aspNetUserId = AspNetUserRoles.UserId
                          );
         
             DELETE FROM dbo.ZnodeAccountUserPermission
             WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS a
                            WHERE a.UserId1 = ZnodeAccountUserPermission.UserId
                          );
             DELETE FROM ZnodeUserPortal
             WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS a
                            WHERE a.UserId1 = ZnodeUserPortal.UserId
                          );
             DELETE FROM ZnodeAccountUserOrderApproval
             WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS TBDL
                            WHERE TBDL.UserId1 = ZnodeAccountUserOrderApproval.UserId
                                  OR
                                  TBDL.UserId1 = ZnodeAccountUserOrderApproval.ApprovalUserId
                          );
			 DELETE FROM ZnodeOmsUsersReferralUrl 
			  WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS TBDL
                            WHERE TBDL.UserId1 = ZnodeOmsUsersReferralUrl.UserId
                           );
			 DELETE FROM ZnodeOmsReferralCommission 
			 WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS TBDL
                            WHERE TBDL.UserId1 = ZnodeOmsReferralCommission.UserId      
                          );
			DELETE FROM ZnodeUserWishList 
			WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS TBDL
                            WHERE TBDL.UserId1 = ZnodeUserWishList.UserId      
                          );
			 DELETE FROM ZnodeDepartmentUser 
			 WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS TBDL
                            WHERE TBDL.UserId1 = ZnodeDepartmentUser.UserId      
                          );
			 DELETE FROM ZnodeUserPromotion 
			 WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS TBDL
                            WHERE TBDL.UserId1 = ZnodeUserPromotion.UserId      
                          );

			 DELETE FROM AspNetUserClaims 
			 WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS TBDL
                            WHERE TBDL.UserId1 = AspNetUserClaims.UserId      
                          ); 
			 DELETE FROM ZnodeNote 
			 WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS TBDL
                            WHERE TBDL.UserId1 = ZnodeNote.UserId      
                          ); 

			 DELETE FROM ZnodeOmsQuotePersonalizeItem WHERE OmsQuoteLineItemId IN (SELECT OmsQuoteLineItemId FROM ZnodeOmsQuoteLineItem  WHERE OmsQuoteId IN (SELECT OmsQuoteId FROM ZnodeOmsQuote 
			  WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS TBDL
                            WHERE TBDL.UserId1 = ZnodeOmsQuote.UserId      
                          ) )) 
			 DELETE FROM ZnodeOmsQuoteLineItem  WHERE OmsQuoteId IN (SELECT OmsQuoteId FROM ZnodeOmsQuote 
			  WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS TBDL
                            WHERE TBDL.UserId1 = ZnodeOmsQuote.UserId      
                          ) )
			 DELETE FROM ZnodeOmsQuote 
			  WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS TBDL
                            WHERE TBDL.UserId1 = ZnodeOmsQuote.UserId      
                          ); 
			 DELETE FROM ZnodeAccountUserPermission 
			  WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS TBDL
                            WHERE TBDL.UserId1 = ZnodeAccountUserPermission.UserId      
                          ); 
			  DELETE FROM ZnodePriceListUser 
			  WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS TBDL
                            WHERE TBDL.UserId1 = ZnodePriceListUser.UserId      
                          ); 
			  DELETE FROM ZnodeMediaFolderUser 
			  WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS TBDL
                            WHERE TBDL.UserId1 = ZnodeMediaFolderUser.UserId      
                          ); 
			  DELETE FROM ZnodeAccountUserOrderApproval 
			  WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS TBDL
                            WHERE TBDL.UserId1 = ZnodeAccountUserOrderApproval.UserId      
                          ); 
			 DELETE FROM ZnodeOmsTemplateLineItem WHERE OmsTemplateId IN (SELECT OmsTemplateId 
			 FROM ZnodeOmsTemplate WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS TBDL
                            WHERE TBDL.UserId1 = ZnodeOmsTemplate.UserId      
                          ) )

			 DELETE FROM dbo.ZnodeFormBuilderGlobalAttributeValueLocale   WHERE FormBuilderGlobalAttributeValueId IN 
			 (SELECT FormBuilderGlobalAttributeValueId  FROM dbo.ZnodeFormBuilderGlobalAttributeValue  WHERE FormBuilderSubmitId IN (SELECT FormBuilderSubmitId FROM dbo.ZnodeFormBuilderSubmit WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS TBDL
                            WHERE TBDL.UserId1 = ZnodeFormBuilderSubmit.UserId      
                          ) ))

			  DELETE FROM dbo.ZnodeFormBuilderGlobalAttributeValue  WHERE FormBuilderSubmitId IN (SELECT FormBuilderSubmitId FROM dbo.ZnodeFormBuilderSubmit WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS TBDL
                            WHERE TBDL.UserId1 = ZnodeFormBuilderSubmit.UserId      
                          ) )
			  DELETE FROM dbo.ZnodeFormBuilderSubmit WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS TBDL
                            WHERE TBDL.UserId1 = ZnodeFormBuilderSubmit.UserId      
                          )  
			 
			 DELETE FROM ZnodeOmsTemplate  WHERE  EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS TBDL
                            WHERE TBDL.UserId1 = ZnodeOmsTemplate.UserId      
                          ) 
			 
			 
			DELETE FROM ZnodeCaseRequestHistory WHERE CaseRequestId IN (SELECT CaseRequestId  FROM ZnodeCaseRequest  WHERE EXISTS (SELECT TOP  1 1 FROM @V_tabledeleted AS TBDL WHERE TBDL.UserId1 = ZnodeCaseRequest.UserId))
			  DELETE FROM ZnodeCaseRequest  WHERE EXISTS (SELECT TOP  1 1 FROM @V_tabledeleted AS TBDL WHERE TBDL.UserId1 = ZnodeCaseRequest.UserId)
			  DECLARE @OrderId Transferid 
			 INSERT INTO @OrderId 
			 SELECT DISTINCT  a.OmsOrderId 
			 FROM ZnodeOMsOrder A 
			 INNER JOIN ZnodeOmsOrderDetails b ON(b.OmsOrderId = a.OmsOrderId)
			 WHERE EXISTS (SELECT TOP 1  1 FROM @V_tabledeleted t WHERE b.UserId = t.UserId1 )
			 INSERT INTO @StatusOut (Id ,Status) 
			EXEC  Znode_DeleteOrderById   @OmsOrderIds =@OrderId ,@Status = 0 
			UPDATE ZnodePublishCatalogLog	 SET Userid =2 
			WHERE UserId IN (SELECT UserId1 FROM @V_tabledeleted t)

			
			 DELETE FROM ZnodeCMSCustomerReview WHERE UserId IN (SELECT UserId1 FROM @V_tabledeleted t)
             DELETE FROM ZnodeBlogNewsCommentLocale where BlogNewsCommentId in (select BlogNewsCommentId from  ZnodeBlogNewsComment WHERE UserId IN
			  (SELECT UserId1 FROM @V_tabledeleted t))
			 DELETE FROM ZnodeBlogNewsComment WHERE UserId IN (SELECT UserId1 FROM @V_tabledeleted t)

			 DELETE FROM ZnodeUser
             OUTPUT deleted.UserId
                    INTO @V_table
             WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS a
                            WHERE a.UserId1 = ZnodeUser.UserId
                          );

             DELETE FROM AspNetUsers
             OUTPUT deleted.UserName
                    INTO @TBL_DeleteduserName
             WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS a
                            WHERE a.AspnetUserid = AspNetUsers.Id
                          );

             DELETE FROM AspNetZnodeUser
             WHERE EXISTS ( SELECT TOP 1 1
                            FROM @TBL_DeleteduserName AS TBUN
                            WHERE TBUN.id = AspNetZnodeUser.AspNetZnodeUserId
                          );
			 
			 
			  IF  @IsCallInternal = 0  
			  BEGIN 
             IF ( SELECT COUNT(1)
                  FROM @V_tabledeleted
                ) = ( SELECT COUNT(1)
                      FROM dbo.split ( @UserId , ','
                                     )
                    ) OR @UserId IS NULL 
                 BEGIN
                     SELECT 0 AS ID , CAST(1 AS BIT) AS Status;
                 END;
             ELSE
                 BEGIN
                     SELECT 0 AS ID , CAST(0 AS BIT) AS Status;
                 END;
		       END 
             SET @Status = 1;
             COMMIT TRAN A;
         END TRY
         BEGIN CATCH
		 SELECT ERROR_MESSAGE()
              DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_DeleteUserDetails @UserId = '+@UserId+',@Status='+CAST(@Status AS VARCHAR(200));
             SET @Status = 0;
             SELECT 0 AS ID,
                    CAST(0 AS BIT) AS Status;
			 ROLLBACK TRAN A;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_DeleteUserDetails',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_PurgeData')
BEGIN 
	DROP PROCEDURE Znode_PurgeData
END
GO


CREATE PROCEDURE [dbo].[Znode_PurgeData] 
(
 
  @DeleteAllProduct    							BIT = 0 -- This flag 1 will delete all product except ids in @ExceptProductId  table 
 ,@DeleteAllCategory							BIT = 0 -- This flag 1 will delete all category except ids in @ExceptCategoryId  table 
 ,@DeleteAllCatalog								BIT = 0 -- This flag 1 will delete all catalog except ids in @ExceptCatalogId  table 
 ,@DeleteAllSaveCart							Bit = 0	-- This flag 1 will delete all save carts of users.  
 ,@DeleteAllOrder								BIT = 0	-- This flag 1 will delete all orders. 
 ,@DeleteAllAccount								BIT = 0 -- This flag 1 will delete all Account. 
 ,@DeleteAllUser								BIT = 0 -- This flag 1 will delete all user. 
 ,@DeleteAllStore 								BIT = 0 -- This flag 1 will delete all store. 
 ,@DeleteAllGlobalAttribute  					BIT = 0 -- This flag 1 will delete all Global Attribute. 
 ,@DeleteAllProductCategoryAttribute			BIT = 0 -- This flag 1 will delete all Pim Attribute. 
 ,@DeleteAllMedia								BIT = 0 -- This flag 1 will delete all media. 
 ,@DeleteAllWarehouse							BIT = 0 -- This flag 1 will delete all warhouse. 
 ,@DeleteAllPricelist							BIT = 0 -- This flag 1 will delete all price list. 
 ,@DeleteAllProfile								BIT = 0 -- This flag 1 will delete all Profiles. 
 ,@DeleteAllSiteSearchData						BIT = 0	-- This flag 1 will delete all data related to search. 
 ,@DeleteAllCMSData								BIT = 0 -- This flag 1 will delete all CMS data. 
 ,@DeleteAllBrand								BIT = 0 -- This flag 1 will delete all brand. 
 ,@DeleteAllVendor								BIT = 0 -- This flag 1 will delete all vendor. 
 ,@DeleteAllCmsSeoDetails						BIT = 0 -- This flag 1 will delete all Seo details .   
 ,@ResetDomainData								BIT = 0 -- This flag 1 will delete and rest all domain. 
 ,@ExceptProductId								TransferId Readonly
 ,@ExceptCategoryId								TransferId Readonly
 ,@ExceptCatalogId								TransferId Readonly
 ,@ExceptAccountId								TransferId Readonly
 ,@ExceptUserId 								TransferId Readonly
 ,@ExceptStoreId 								TransferId Readonly 
 ,@ExceptGlobalAttributeId 						TransferId Readonly
 ,@ExceptProductCategoryAttributeId 		    TransferId Readonly
 ,@ExceptMediaId								TransferId Readonly
 ,@ExceptWarehouseId							TransferId ReadOnly 
 ,@ExceptPricelistId							TransferId ReadOnly 
 ,@ExceptProfileId								TransferId ReadOnly
 ,@ExceptSeoType								VARCHAR(2000) = ''
 ,@ResetIdentity								BIT = 0    -- Reset identity 
 ,@DeleteAllData								BIT = 0 	
 ,@DeleteAllShippingMethods						BIT = 0 
 ,@DeleteAllPaymentMethods						BIT = 0 
 ,@DeleteAllTaxes								BIT = 0 
)
AS 
BEGIN 
SET NOCOUNT ON 
 	 BEGIN TRY
	    DECLARE @StatusOut Table (Id INT ,Message NVARCHAR(max), Status BIT )
		DECLARE @DeletedIds TransferId 
		DECLARE @PortalId INT , @CMSThemeId INT , @CMSThemeCSSId INT,@PublishCatalogId INT
		,@PimCatalogId INT  
		DELETE FROM @DeletedIds DELETE FROM @StatusOut 
		IF  Object_Id('elmah_error')	 <> 0 
		BEGIN 
			 TRUNCATE TABLE elmah_error
			 DELETE FROM ZnodeImportLog
			 DELETE FROM ZnodeImportProcesslog
			 DELETE FROM ZnodeActivityLog	
             DELETE FROM ZnodePasswordLog	
             DELETE FROM ZnodeProceduresErrorLog
		END 
	
		DECLARE @DeleteId  NVARCHAR(max)= '', @StoreData NVARCHAR(max),@RunTime INT =1 
		DELETE FROM @DeletedIds DELETE FROM @StatusOut 
		IF  @DeleteAllVendor = 1   OR @DeleteAllData =1 
			BEGIN 
			 	INSERT INTO @DeletedIds 
				SELECT PimVendorId 
				FROM ZnodePimVendor ZP 
							
				INSERT INTO @StatusOut(id ,Status) 
				EXEC [dbo].[Znode_DeleteVendor] @PimVendorIds = @DeletedIds ,@Status = 0  
			    
				DELETE FROM ZnodePimProductAttributeDefaultValue WHERE PimAttributeValueId IN (
				SELECT PimAttributeValueId  
				FROM ZnodePimAttributeValue WHERE PimAttributeId = (SELECT PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode= 'Vendor') )
				
				DELETE FROM ZnodePimAttributeValue WHERE PimAttributeId = (SELECT PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode= 'Vendor') 

				DELETE FROM ZnodePimAttributeDefaultValueLocale  WHERE PimAttributeDefaultValueId IN (
				SELECT PimAttributeDefaultValueId FROM ZnodePimAttributeDefaultValue WHERE AttributeDefaultValueCode IN (SELECT VendorCode FROM ZnodePimVendor ))
				
				DELETE FROM  ZnodePimAttributeDefaultValue WHERE AttributeDefaultValueCode IN (SELECT VendorCode FROM ZnodePimVendor )

			    PRINT '<-- Vendor Data Deleted Sucessfully-->'
				
			END
			DELETE FROM @DeletedIds DELETE FROM @StatusOut 
			IF  @DeleteAllBrand = 1  OR @DeleteAllData =1 
			BEGIN 
			   INSERT INTO @DeletedIds 
			   SELECT BrandId
			   FROM ZnodeBrandDetails a
			   INSERT INTO @StatusOut (Id ,Status) 
			   EXEC [dbo].[Znode_DeleteBrand] @BrandIds = @DeletedIds, @Status = 0   
			 IF  EXISTS (SELECT TOP 1 1  FROM @StatusOut WHERE Status = 1 )
				BEGIN 
		     	PRINT '<-- Brand Data Deleted Sucessfully-->'
			   END
			   ELSE 
				BEGIN 
				PRINT '<-- Brand Data Not Deleted Properly -->' 
				END  
		    END 
				
		DELETE FROM @DeletedIds DELETE FROM @StatusOut 
		IF  @DeleteAllProduct = 1  OR @DeleteAllData =1 
		BEGIN 
		   	 INSERT INTO @DeletedIds 
		     SELECT PimProductId 
			 FROM ZnodePimProduct ZPP 
			 WHERE NOT EXISTS (SELECT TOP 1 1 FROM @ExceptProductId WHERE id = ZPP.PimProductId) 
			  INSERT INTO @StatusOut (Id ,Status) 
			  EXEC [dbo].[Znode_DeletePimProducts] @PimProductIds=@DeletedIds , @Status = 0   
			
			SELECT PimAddonGroupId,PimProductId,PimAddOnProductId  
			INTO #Temp_Addon 
			FROM ZnodePimAddOnProduct ZPP
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM @ExceptProductId WHERE id = ZPP.PimProductId)

			DELETE FROM ZnodePimAddOnProductDetail WHERE NOT EXISTS (SELECT TOP 1 1 FROM #Temp_Addon t 
							 WHERE t.PimAddOnProductId  = ZnodePimAddOnProductDetail.PimAddOnProductId )
			
			DELETE FROM  ZnodePimAddOnProduct  WHERE NOT EXISTS (SELECT TOP 1 1 FROM #Temp_Addon t 
							 WHERE t.PimAddOnProductId  = ZnodePimAddOnProduct.PimAddOnProductId )
			
			DELETE FROM ZnodePimAddonGroupLocale WHERE NOT EXISTS (SELECT TOP 1 1 FROM #Temp_Addon t 
							 WHERE t.PimAddonGroupId  = ZnodePimAddonGroupLocale.PimAddonGroupId )
			DELETE FROM ZnodePimAddonGroupProduct 	WHERE NOT EXISTS (SELECT TOP 1 1 FROM #Temp_Addon t 
							 WHERE t.PimAddonGroupId  = ZnodePimAddonGroupProduct.PimAddonGroupId )
			DELETE FROM ZnodePimAddonGroup 	WHERE NOT EXISTS (SELECT TOP 1 1 FROM #Temp_Addon t 
							 WHERE t.PimAddonGroupId  = ZnodePimAddonGroup.PimAddonGroupId )
			IF  EXISTS (SELECT TOP 1 1  FROM @StatusOut WHERE Status = 1 )
				BEGIN 
		     	PRINT '<-- Product Data Deleted Sucessfully-->'
			    END
			    ELSE 
				BEGIN 
				PRINT '<-- Product Data Not Deleted Properly -->' 
				END  
			  
	    END 
		DELETE FROM @DeletedIds DELETE FROM @StatusOut 
		IF  @DeleteAllCategory = 1 	  OR @DeleteAllData =1 
		BEGIN   
		   		INSERT INTO @DeletedIds 
				SELECT  PimCategoryId 
				FROM ZnodePimCategory ZPC
				WHERE NOT EXISTS  (SELECT TOP 1 1 FROM @ExceptCategoryId WHERE id =ZPC.PimCategoryId )
				--Remove extra products from catalog
				INSERT INTO @StatusOut (Id ,Status) 
				EXEC Znode_DeletePimCategory @PimCategoryId = @DeletedIds, @Status = 1;
			
				IF  EXISTS (SELECT TOP 1 1  FROM @StatusOut WHERE Status = 1 )
				BEGIN 
		     	PRINT '<-- Category Data Deleted Sucessfully-->'
			    END
			    ELSE 
				BEGIN 
				PRINT '<-- Category Data Not Deleted Properly -->' 
				END     
		  END
		  DELETE FROM @DeletedIds DELETE FROM @StatusOut 
		  IF  @DeleteAllCatalog = 1 	OR @DeleteAllData =1 
		   BEGIN
		   	 INSERT INTO @DeletedIds 
		   	 SELECT PimCatalogId 
			 FROM ZnodePimCatalog ZP 
			 WHERE NOT EXISTS (SELECT TOP 1 1  FROM @ExceptCatalogId WHERE id = ZP.PimCatalogId)
		   	 INSERT INTO @StatusOut (Id ,Message,Status) 
			 EXEC [dbo].[Znode_DeletePimCatalog] @PimCatalogId = @DeletedIds ,@IsForceFullyDelete = 1  
		      

			 IF  EXISTS (SELECT TOP 1 1  FROM @StatusOut WHERE Status = 1 )
				BEGIN 
		     	PRINT '<-- Catalog Data Deleted Sucessfully-->'
			    END
			    ELSE 
				BEGIN 
				PRINT '<-- Catalog Data Not Deleted Properly -->' 
				END  
           END
		   DELETE FROM @DeletedIds DELETE FROM @StatusOut 
		   IF  @DeleteAllOrder = 1 	OR @DeleteAllData =1 
		   BEGIN
				 INSERT INTO @DeletedIds 
		   		 SELECT OmsOrderID 
				 FROM ZnodeOmsOrder  ZP 
				 INSERT INTO @StatusOut (Id ,Status) 
			     EXEC [dbo].[Znode_DeleteOrderById] @OmsOrderIds = @DeletedIds , @status = 0  
		    
		        IF  EXISTS (SELECT TOP 1 1  FROM @StatusOut WHERE Status = 1 )
				BEGIN 
		     	PRINT '<-- Order Data Deleted Sucessfully-->'
			    END
			    ELSE 
				BEGIN 
				PRINT '<-- Order Data Not Deleted Properly -->' 
				END  
		  END
		
		   DELETE FROM @DeletedIds DELETE FROM @StatusOut
		   IF  @DeleteAllSaveCart = 1  OR @DeleteAllData =1 
		   BEGIN
		      DELETE FROM ZnodeOmsPersonalizeCartItem
			  DELETE FROM ZnodeOmsSavedCartLineItem 
			  DELETE FROM ZnodeOmsSavedCart
			  DELETE FROM ZnodeOmsCookieMapping
			  DELETE FROM ZnodeOmsQuotePersonalizeItem 
			  DELETE FROM ZnodeOmsQuoteLineItem
			  DELETE FROM ZnodeOmsQuote
			  DELETE FROM ZnodeOmsTemplateLineItem 
			  DELETE FROM ZnodeOmsTemplate
			 
		      PRINT '<-- Save Cart & Quote Data Deleted Sucessfully -->'
			  
		   END
		   DELETE FROM @DeletedIds DELETE FROM @StatusOut 
		   IF  @DeleteAllUser = 1 OR @DeleteAllData =1 
		   BEGIN  
		  
			   INSERT INTO @DeletedIds 
			   SELECT UserId
			   FROM ZnodeUser ZU 
			   WHERE NOT EXISTS (SELECT TOP 1  1 FROM @ExceptUserId RT WHERE RT.Id = ZU.UserId) 
			 --  INSERT INTO @StatusOut (Id ,Status) 
			   EXEC Znode_DeleteUserDetails @UserIds =@DeletedIds ,@Status = 0 , @IsForceFullyDelete =1 

			DELETE FROM AspNetUsers  WHERE NOT EXISTS (SELECT TOP 1 1 FROM AspNetZnodeUser rt WHERE rt.AspNetZnodeUserId = AspNetUsers.UserName )

		     	PRINT '<-- User Data Deleted Sucessfully-->'
			  
		   END
	    DELETE FROM @DeletedIds DELETE FROM @StatusOut 
		IF  @DeleteAllAccount = 1 	OR @DeleteAllData =1 
		  BEGIN    
				 INSERT INTO @DeletedIds 
				  SELECT AccountId
			      FROM ZnodeAccount ZU 
			      WHERE NOT EXISTS (SELECT TOP 1  1 FROM @ExceptAccountId RT WHERE RT.Id = ZU.AccountiD) 
			    -- INSERT INTO @StatusOut (Id ,Status) 
				  EXEC Znode_DeleteAccount @AccountIds =  @DeletedIds,@Status= 0,@IsForceFullyDelete =1  
				 
		     	PRINT '<-- Accouts Data Deleted Sucessfully-->'
			    
		  END
		 DELETE FROM @DeletedIds DELETE FROM @StatusOut 
		 IF  @DeleteAllGlobalAttribute = 1 	 OR @DeleteAllData =1 
		   BEGIN 
		   	INSERT INTO @DeletedIds 
			SELECT GlobalAttributeId 
			FROM ZnodeGlobalAttribute ZP 
			WHERE NOT EXISTS (SELECT TOP 1 1  FROM @ExceptGlobalAttributeId a WHERE a.Id = ZP.GlobalAttributeId)
			AND ISNULL(ZP.IsSystemDefined,0) <> 1
			INSERT INTO @StatusOut (Id ,Status) 	   
			EXEC [dbo].[Znode_DeleteGlobalAttribute] @GlobalAttributeIds= @DeletedIds,@Status =0 , 	@IsForceFullyDelete= 1    
			
			DELETE FROM ZnodeGlobalAttributeGroupLocale	WHERE GlobalAttributeGroupId IN  (SELECT GlobalAttributeGroupId  FROM ZnodeGlobalAttributeGroup WHERE IsSystemDefined <> 1 )
			DELETE FROM ZnodeGlobalAttributeGroupMapper WHERE GlobalAttributeGroupId IN  (SELECT GlobalAttributeGroupId  FROM ZnodeGlobalAttributeGroup WHERE IsSystemDefined <> 1)
			DELETE FROM ZnodeGlobalGroupEntityMapper WHERE GlobalAttributeGroupId IN  (SELECT GlobalAttributeGroupId  FROM ZnodeGlobalAttributeGroup WHERE IsSystemDefined <> 1)
			DELETE FROM ZnodeFormBuilderAttributeMapper	WHERE GlobalAttributeGroupId IN  (SELECT GlobalAttributeGroupId  FROM ZnodeGlobalAttributeGroup WHERE IsSystemDefined <> 1)
			DELETE FROM ZnodeGlobalAttributeGroup	WHERE GlobalAttributeGroupId IN  (SELECT GlobalAttributeGroupId  FROM ZnodeGlobalAttributeGroup WHERE IsSystemDefined <> 1)   
			 
			   IF  EXISTS (SELECT TOP 1 1  FROM @StatusOut WHERE Status = 1 )
				BEGIN 
		     	PRINT '<-- Global Attribute Data Deleted Sucessfully-->'
			    END
			    ELSE 
				BEGIN 
				PRINT '<-- Global Attribute Not Deleted Properly -->' 
				END 	   
		   END  
		   DELETE FROM @DeletedIds DELETE FROM @StatusOut 
		   IF  @DeleteAllProductCategoryAttribute = 1  OR @DeleteAllData =1 
		   BEGIN 
			   	INSERT INTO @DeletedIds 
				SELECT PimAttributeId
				FROM ZnodePimAttribute ZP 
				WHERE NOT EXISTS (SELECT TOP 1 1  FROM @ExceptProductCategoryAttributeId WHERE id = ZP.PimAttributeId )
				AND ZP.IsSystemDefined <> 1 
				INSERT INTO @StatusOut (Id ,Status) 			
				EXEC Znode_DeletePimAttributeWithReference @PimAttributeIds = @DeletedIds  , @Status = 1  
			  
			    DELETE FROM ZnodePimAttributeGroupLocale 
					WHERE PimAttributeGroupId IN (SELECT PimAttributeGroupId FROM ZnodePimAttributeGroup WHERE IsSystemDefined <> 1  )
				DELETE FROM ZnodePimFamilyGroupMapper 
					WHERE PimAttributeGroupId IN (SELECT PimAttributeGroupId FROM ZnodePimAttributeGroup WHERE IsSystemDefined <> 1  )
				DELETE FROM ZnodePimAttributeGroup WHERE IsSystemDefined <> 1  

				
				DELETE FROM ZnodePimFamilyLocale WHERE  PimAttributeFamilyId IN (SELECT PimAttributeFamilyId FROM ZnodePimAttributeFamily WHERE IsSystemDefined <> 1  )
				UPDATE ZP SET PimAttributeFamilyId = dbo.Fn_GetDefaultPimProductFamilyId() FROM ZnodePimProduct  ZP  WHERE  PimAttributeFamilyId IN (SELECT PimAttributeFamilyId FROM ZnodePimAttributeFamily WHERE IsSystemDefined <> 1  )

				DELETE FROM ZnodeImportTemplateMapping WHERE ImportTemplateId IN (SELECT ImportTemplateId FROM ZnodeImportTemplate WHERE PimAttributeFamilyId IN (SELECT PimAttributeFamilyId FROM ZnodePimAttributeFamily WHERE IsSystemDefined <> 1  ))
				DELETE FROM ZnodeImportTemplate WHERE PimAttributeFamilyId IN (SELECT PimAttributeFamilyId FROM ZnodePimAttributeFamily WHERE IsSystemDefined <> 1  )
				DELETE FROM ZnodePimFamilyGroupMapper 
					WHERE PimAttributeFamilyId IN (SELECT PimAttributeFamilyId FROM ZnodePimAttributeFamily WHERE IsSystemDefined <> 1  )
				
				DELETE  FROM ZnodePimAttributeFamily WHERE IsSystemDefined <> 1 
				UPDATE ZP SET PimAttributeFamilyId = dbo.Fn_GetDefaultPimProductFamilyId() FROM ZnodePimAttributeValue  ZP  WHERE  PimAttributeFamilyId IN (SELECT PimAttributeFamilyId FROM ZnodePimAttributeFamily WHERE IsSystemDefined <> 1  ) 
			   	IF  EXISTS (SELECT TOP 1 1  FROM @StatusOut WHERE Status = 1 )
				BEGIN 
		     	PRINT '<-- PIM Attribute Data Deleted Sucessfully-->'
			    END
			    ELSE 
				BEGIN 
				PRINT '<-- PIM Attribute Not Deleted Properly -->' 
				END 
		   END
		   DELETE FROM @DeletedIds 
		   DELETE FROM @StatusOut 
		   IF  @DeleteAllMedia = 1  OR @DeleteAllData =1 
		   BEGIN 
		  		INSERT INTO @DeletedIds 
		   		SELECT  MediaId   
				FROM ZnodeMedia ZP 
				WHERE NOT EXISTS (SELECT TOP 1 1  FROM @ExceptMediaId WHERE id = ZP.Mediaid )
				INSERT INTO @StatusOut (Id ,Message,Status)
				EXEC Znode_DeleteMedia @MediaIds = @DeletedIds  , @Status = 1  ,@IsCallInternal =1 
				DELETE FROM ZnodeMediaPathLocale WHERE MediaPathId IN (SELECT MediaPathId FROM ZnodeMediaPath WHERE PathCode<>'Root')
				DELETE FROM ZnodeMediaPath WHERE PathCode<>'Root'
				IF  EXISTS (SELECT TOP 1 1  FROM @StatusOut WHERE Status = 1 )
				BEGIN 
		     	PRINT '<-- Media Data Deleted Sucessfully-->'
			    END
			    ELSE 
				BEGIN 
				PRINT '<-- Media Not Deleted Properly -->' 
				END
				
		   END 
		   DELETE FROM @DeletedIds DELETE FROM @StatusOut 
		
		   IF  @DeleteAllWarehouse = 1 OR @DeleteAllData =1 
		   BEGIN 
		   	
		   		SET @DeleteId =  SUBSTRING((
				SELECT  ',' + CONVERT(NVARCHAR(500), WarehouseId)  
				FROM ZnodeWarehouse ZP 
				WHERE NOT EXISTS (SELECT TOP 1 1  FROM @ExceptWarehouseId WHERE id = ZP.WarehouseId )
				FOR XML PATH ('')
				),2,4000) 
				INSERT INTO @StatusOut (Id ,Status)
			    EXEC Znode_DeleteWarehouse @WarehouseId = @DeleteId  , @Status = 1 
		
				IF  EXISTS (SELECT TOP 1 1  FROM @StatusOut WHERE Status = 1 )
				BEGIN 
		     	PRINT '<-- Warehouse Data Deleted Sucessfully-->'
			    END
			    ELSE 
				BEGIN 
				PRINT '<-- Warehouse Not Deleted Properly -->' 
				END
		    END 
			DELETE FROM @DeletedIds DELETE FROM @StatusOut 
		
			IF  @DeleteAllPricelist = 1   OR @DeleteAllData =1 
		    BEGIN 
				SET @DeleteId =  SUBSTRING((
				SELECT ',' + CONVERT(NVARCHAR(500), PriceListId)  
				FROM ZnodePriceList ZP 
				WHERE NOT EXISTS (SELECT TOP 1 1  FROM @ExceptPricelistId WHERE id = ZP.PriceListId )
				FOR XML PATH ('')
				),2,4000) 
			  
				INSERT INTO @StatusOut (Id ,Status)  
				EXEC Znode_DeletePriceList @PriceListId = @DeleteId  , @Status = 1 
		      
			   IF  EXISTS (SELECT TOP 1 1  FROM @StatusOut WHERE Status = 1 )
				BEGIN 
		     	PRINT '<-- Price List Data Deleted Sucessfully-->'
			    END
			    ELSE 
				BEGIN 
				PRINT '<-- Price List Not Deleted Properly -->' 
				END
		    END
		
			DELETE FROM @DeletedIds DELETE FROM @StatusOut 
			IF  @DeleteAllProfile = 1  OR @DeleteAllData =1 
			 BEGIN 
				SET @DeleteId =  SUBSTRING((
				SELECT ',' + CONVERT(NVARCHAR(500), ProfileId)  
				FROM ZnodeProfile ZP 
				WHERE NOT EXISTS (SELECT TOP 1 1  FROM @ExceptProfileId WHERE id = ZP.ProfileId )
				FOR XML PATH ('')
				),2,4000) 
		   	 	INSERT INTO @StatusOut (Id ,Status)
				EXEC  Znode_DeleteProfile  @ProfileId=@DeleteId, @Status = 0 ,	@IsForceFullyDelete =1 
				
				IF  EXISTS (SELECT TOP 1 1  FROM @StatusOut WHERE Status = 1 )
				BEGIN 
		     	PRINT '<-- Profile Data Deleted Sucessfully-->'
			    END
			    ELSE 
				BEGIN 
				PRINT '<-- Profile Not Deleted Properly -->' 
				END
		    END
			DELETE FROM @DeletedIds DELETE FROM @StatusOut 
			IF  @DeleteAllSiteSearchData  = 1  OR @DeleteAllData =1 
			BEGIN 
			
					DELETE FROM ZnodeSearchIndexServerStatus
					DELETE FROM ZnodeSearchIndexMonitor
					DELETE FROM ZnodeCatalogIndex
					DELETE FROM ZnodePublishCatalogSearchProfile
					DELETE FROM ZnodeCatalogIndex
					DELETE FROM ZnodeCMSCustomerReview 
					DELETE FROM ZnodePublishPortalLog
					DELETE FROM ZnodeListViewFilter
					DELETE FROM ZnodeListView
			
					PRINT '<-- Site Search Data Deleted Sucessfully-->'
			 END
			 DELETE FROM @DeletedIds DELETE FROM @StatusOut 
			 IF  @DeleteAllCMSData = 1 	OR @DeleteAllData =1 
			 BEGIN 
				IF EXISTS (SELECT TOP 1 1  FROM SYS.Tables WHERE name = '_ZnodeCMSPortalTheme' )
				BEGIN
				 DROP TABLE _ZnodeCMSPortalTheme 
				END 
				SELECT * 
				INTO _ZnodeCMSPortalTheme
				FROM ZnodeCMSPortalTheme
				DELETE FROM ZnodeCMSContentPagesProfile 
				DELETE FROM ZnodeFormWidgetEmailConfiguration
				DELETE FROM ZnodeCMSWidgetTitleConfigurationLocale
				DELETE FROM ZnodeCMSWidgetTitleConfiguration
				DELETE FROM ZnodeCMSTextWidgetConfiguration
				DELETE FROM ZnodeCMSFormWidgetConfiguration
				DELETE FROM ZnodeCMSPortalProductPage
				DELETE FROM ZnodeCMSContentPageGroupMapping
				DELETE FROM ZnodeCMSContentPageGroupLocale
				DELETE FROM ZnodeCMSContentPageGroup
				DELETE FROM ZnodeCMSContentPagesLocale
				DELETE FROM ZnodeCMSContentPages
				DELETE FROM ZnodeCMSContentPagesProfile
				DELETE FROM ZnodeCMSPortalTheme  
			    DELETE FROM ZnodeCMSThemeCSS 
				DELETE FROM ZnodeCMSTheme  
				DELETE FROM ZnodeEmailTemplateMapper
				DELETE FROM ZnodeEmailTemplateLocale
				DELETE FROM ZnodeEmailTemplateAreas
				DELETE FROM ZnodeEmailTemplate
			    DELETE FROM ZnodeCMSWidgetSliderBanner
				DELETE FROM ZnodeCMSSliderBannerLocale
				DELETE FROM ZnodeCMSSliderBanner
				DELETE FROM ZnodeCMSSlider
				DELETE FROM ZnodeCmsPortalMessage
				DELETE FROM ZnodeCMSPortalMessageKeyTag
				DELETE FROM ZnodeCMSMessage 
				DELETE FROM ZnodeCMSMessageKey 
				DELETE FROM ZnodeCMSTemplate
				DELETE FROM ZnodeFormBuilderGlobalAttributeValueLocale 
				DELETE FROM ZnodeFormBuilderGlobalAttributeValue
				DELETE FROM ZnodeFormBuilderAttributeMapper 
				DELETE FROM ZnodeFormBuilderSubmit 
				DELETE FROM ZnodeFormBuilder

				IF NOT EXISTS (SELECT TOP 1 1  FROM ZnodeCMSTheme)
				BEGIN 
			   INSERT INTO ZnodeCMSTheme(Name
			,CreatedBy
			,CreatedDate
			,ModIFiedBy
			,ModIFiedDate
			,IsParentTheme
			,ParentThemeId)
			SELECT 'Default',2,GETDATE(),2,GETDATE(),1,NULL
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSTheme WHERE Name = 'Default')

			SET @CMSThemeId = CASE WHEN @CMSThemeId	 IS NULL THEN (SELECT TOP 1 CMSThemeId FROM ZnodeCMSTheme WHERE Name = 'Default'   )  ELSE  @CMSThemeId END 
			INSERT INTO ZnodeCMSThemeCSS  (CMSThemeId
			,CSSName
			,CreatedBy
			,CreatedDate
			,ModIFiedBy
			,ModIFiedDate)
			SELECT @CMSThemeId,'DefaultCSS',2,GETDATE(),2,GETDATE()
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSThemeCSS WHERE CSSName = 'DefaultCSS')
	  	
			SET @CMSThemeCSSId = CASE WHEN @CMSThemeCSSId IS NULL THEN (SELECT TOP 1 CMSThemeCSSId FROM ZnodeCMSThemeCSS 
			WHERE CSSName = 'DefaultCSS'
			) ELSE 	@CMSThemeCSSId END 

			 INSERT INTO ZnodeCMSPortalTheme (PortalId
					,CMSThemeId
					,CMSThemeCSSId
					,MediaId
					,FavIconId
					,WebsiteTitle
					,CreatedBy
					,CreatedDate
					,ModifiedBy
					,ModifiedDate)
			 SELECT DISTINCT PortalId
					,@CMSThemeId
					,@CMSThemeCSSId
					,MediaId
					,FavIconId
					,WebsiteTitle
					,2
					,GETDATE()
					,2
					,GETDATE() 
			 FROM _ZnodeCMSPortalTheme	TYU 
			 WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodeCMSPortalTheme TY  WHERE TY.PortalId = TYU.PortalId AND TY.CMSThemeId = @CMSThemeId AND TY.CMSThemeCSSId = @CMSThemeCSSId)
			 
			 END 

			 PRINT '<-- CMS Data Deleted Sucessfully-->'	  			   
			 IF  NOT EXISTS (SELECT TOP 1 1  FROM ZnodeCMSContentPageGroup )
			 BEGIN 
			    DECLARE @GroupId INT =0 
				INSERT INTO ZnodeCMSContentPageGroup (ParentCMSContentPageGroupId ,Code,CreatedBy,CreatedDate,ModIFiedBy,ModIFiedDate)
				SELECT NULL,'Root',2,GETDATE(),2,GETDATE()
			    SET @GroupId = SCOPE_IDENTITY()
				INSERT INTO ZnodeCMSContentPageGroupLocale(CMSContentPageGroupId,Name,LocaleId,CreatedBy,CreatedDate,ModIFiedBy,ModIFiedDate)
			    SELECT @GroupId,'Root',1,2,GETDATE(),2,GETDATE()
			 END
			 END 
	 		 DELETE FROM @DeletedIds DELETE FROM @StatusOut 
			 IF  @DeleteAllCmsSeoDetails =1 OR @DeleteAllData =1 
			 BEGIN 
			 
			   DELETE FROM ZnodeCMSSEODetailLocale 
			   WHERE CMSSEODetailId IN (SELECT CMSSEODetailId FROM ZnodeCMSSEODetail a 
			   INNER JOIN ZnodeCMSSEOType b ON (b.CMSSEOTypeId = a.CMSSEOTypeId)
			   WHERE NOT EXISTS (SELECT TOP 1 1 FROM dbo.split(@ExceptSeoType,',') t WHERE t.Item = b.Name))
			  
			   DELETE FROM ZnodeCMSSEODetail 
			   WHERE CMSSEODetailId IN (SELECT CMSSEODetailId FROM ZnodeCMSSEODetail a 
			   INNER JOIN ZnodeCMSSEOType b ON (b.CMSSEOTypeId = a.CMSSEOTypeId)
			   WHERE NOT EXISTS (SELECT TOP 1 1 FROM dbo.split(@ExceptSeoType,',') t WHERE t.Item = b.Name))
			   PRINT '<-- SEO Data Deleted Sucessfully-->'
			END 
			
		DELETE FROM @DeletedIds DELETE FROM @StatusOut 
		IF  @DeleteAllStore = 1   OR @DeleteAllData =1 
		   BEGIN 
		   DECLARE @TBL_PortalIds TABLE	 ( PortalId int	);
		   DECLARE @TBL_Promotion TABLE ( PromotionId int	);
		  	IF NOT EXISTS (SELECT TOP 1 1 FROM sys.tables WHERE Name = '_ZnodeDomain')
			BEGIN
				   CREATE TABLE  _ZnodeDomain (PortalId INT  ,DomainName NVARCHAR(max),IsActive BIT ,ApplicationType NVARCHAR(max),CreatedBy INT
		   ,CreatedDate DATETIME ,ModifiedBy INT ,ModIFiedDate DATETIME )
			END 


		   INSERT INTO _ZnodeDomain ( PortalId,DomainName ,IsActive  ,ApplicationType ,CreatedBy,CreatedDate ,ModIFiedBy ,ModIFiedDate) 
		   SELECT PortalId,DomainName ,IsActive  ,ApplicationType ,CreatedBy,CreatedDate ,ModIFiedBy ,ModIFiedDate
		   FROM ZnodeDomain 
		   DECLARE @TBL_DeletedUsers TABLE (AspNetUserId NVARCHAR(1000))

		       SET @DeleteId = Substring((select  ',' + convert(nvarchar(500), PromotionId)  
					FROM ZnodePromotion  SP
					WHERE NOT EXISTS (SELECT TOP 1 1  FROM @ExceptStoreId WHERE id = SP.PortalId )
					for XML Path ('')),2,4000) 
			   
			   

		-- inserting PortalIds which are not present in Order and Quote
		   INSERT INTO @TBL_PortalIds 
		   SELECT PortalId FROM ZnodePortal AS SP
		   WHERE NOT EXISTS (SELECT TOP 1 1  FROM @ExceptStoreId WHERE id = SP.PortalId );

		  	INSERT INTO @StatusOut (Id ,Status)
				EXEC Znode_DeletePromotion  @PromotionId = @DeleteId ,@Status = 1;

		
				IF  EXISTS (SELECT TOP 1 1  FROM @StatusOut WHERE Status = 1 )
				BEGIN 
		     	PRINT '<-- Store Promotion Data Deleted Sucessfully-->'
			    END
			    ELSE 
				BEGIN 
				PRINT '<-- Store Promotion Data Not Deleted Properly -->' 
				END	

-------------------------------------------------

			   DELETE FROM ZnodeGiftCardHistory	
                 WHERE EXISTS( SELECT *  FROM ZnodeGiftCard B	
                               WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS a	
                                                              WHERE a.PortalId = B.PortalId	) AND ZnodeGiftCardHistory.GiftCardId = B.GiftCardId );
	
	
                    DELETE FROM ZnodeRmaRequestItem	
                    WHERE EXISTS( SELECT *  FROM ZnodeGiftCard B WHERE EXISTS ( SELECT TOP 1 1	FROM @TBL_PortalIds AS a  WHERE a.PortalId = B.PortalId	
                              ) AND ZnodeRmaRequestItem.GiftCardId = B.GiftCardId );
	
	
                DELETE FROM ZnodeGiftCardLocale
                    WHERE EXISTS( SELECT *  FROM ZnodeGiftCard B	
                                            WHERE EXISTS ( SELECT TOP 1 1	FROM @TBL_PortalIds AS a	
                                             WHERE a.PortalId = B.PortalId	  ) AND ZnodeGiftCardLocale.GiftCardId = B.GiftCardId );
	
                    	
                    DELETE FROM ZnodeGiftCard	
                    WHERE EXISTS ( SELECT TOP 1 1	
                        FROM @TBL_PortalIds AS a	
                        WHERE a.PortalId = ZnodeGiftCard.PortalId	 );
		
                    DELETE FROM ZnodePortalLoginProvider	
                    WHERE EXISTS ( SELECT TOP 1 1	  FROM @TBL_PortalIds AS a	 WHERE a.PortalId = ZnodePortalLoginProvider.PortalId  );

--------------------------------------------------------------------------------------------------------

		 DELETE FROM  ZnodeBrandPortal  WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeBrandPortal.PortalId);
	    DELETE FROM  ZnodeCustomPortalDetail  WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCustomPortalDetail.PortalId);
		
		 DELETE FROM  ZnodeSupplier WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeSupplier.PortalId)

	     DELETE FROM  ZnodeOmsTemplateLineItem  WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP INNER JOIN ZnodeOmsTemplate ZOT ON 
	     TBP.PortalId = ZOT.PortalId AND ZOT.OmsTemplateId = ZnodeOmsTemplateLineItem.OmsTemplateId);

	     DELETE FROM ZnodeOmsTemplate WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeOmsTemplate.PortalId);
	     DELETE FROM  ZnodeOmsUsersReferralUrl WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeOmsUsersReferralUrl.PortalId)

		DELETE FROM ZnodePortalShipping WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalShipping.PortalId);
		DELETE FROM ZnodePortalTaxClass WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalTaxClass.PortalId);
		DELETE FROM ZnodePortalPaymentSetting WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalPaymentSetting.PortalId);
		DELETE FROM ZnodeCMSPortalMessageKeyTag WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSPortalMessageKeyTag.PortalId);
		DELETE FROM ZnodePriceListProfile WHERE PortalProfileID IN (SELECT PortalProfileID FROM ZnodePortalProfile WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalProfile.PortalId))
		DELETE FROM ZnodePortalProfile WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalProfile.PortalId);
		DELETE FROM ZnodePortalFeatureMapper WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalFeatureMapper.PortalId);
		DELETE FROM ZnodePortalShippingDetails WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalShippingDetails.PortalId);
		DELETE FROM ZnodePortalUnit WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalUnit.PortalId);
		DELETE FROM ZnodeDomain WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeDomain.PortalId);
		
		DELETE FROM ZnodePortalSearchProfile   WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalSearchProfile.PortalId);
		DELETE FROM dbo.ZnodePortalPixelTracking WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalPixelTracking.PortalId); 
		DELETE FROM ZnodeRobotsTxt WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeRobotsTxt.PortalId);
		DELETE FROM ZnodePortalSmtpSetting WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalSmtpSetting.PortalId);
		DELETE FROM ZnodeActivityLog WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeActivityLog.PortalId);
		DELETE FROM ZnodePortalCatalog WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalCatalog.PortalId );
		DELETE FROM ZnodeCMSPortalMessage  WHERE EXISTS  ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSPortalMessage.PortalId );
		DELETE FROM ZnodeGoogleTagManager WHERE  EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeGoogleTagManager.PortalId);
		DELETE FROM ZnodeTaxRuleTypes WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeTaxRuleTypes.PortalId);
		DELETE FROM ZnodeCMSContentPagesProfile WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeCMSContentPages ZCCP  
											WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZCCP.PortalId) AND ZCCP.CMSContentPagesId = ZnodeCMSContentPagesProfile.CMSContentPagesId )
		DELETE FROM ZnodeCMSContentPageGroupMapping WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeCMSContentPages ZCCP  
																	WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZCCP.PortalId) AND ZCCP.CMSContentPagesId = ZnodeCMSContentPageGroupMapping.CMSContentPagesId )
	     DELETE FROM ZnodeCMSContentPagesLocale WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeCMSContentPages ZCCP  
																	WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZCCP.PortalId) AND ZCCP.CMSContentPagesId = ZnodeCMSContentPagesLocale.CMSContentPagesId )
		
		DELETE FROM ZnodeBlogNewsCommentLocale WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeBlogNewsComment ZBC
													WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeBlogNews ZBN
														WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZBN.PortalId) AND ZBN.BlogNewsId = ZBC.BlogNewsId ) and ZBC.BlogNewsCommentId = ZnodeBlogNewsCommentLocale.BlogNewsCommentId)
		DELETE FROM ZnodeBlogNewsComment WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeBlogNews ZBN
													WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZBN.PortalId) AND ZBN.BlogNewsId = ZnodeBlogNewsComment.BlogNewsId )
		 
		DELETE FROM ZnodeBlogNewsContent WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeBlogNews ZBN
													WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZBN.PortalId) AND ZBN.BlogNewsId = ZnodeBlogNewsContent.BlogNewsId )
		DELETE FROM ZnodeBlogNewsLocale WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeBlogNews ZBN
		WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZBN.PortalId) AND ZBN.BlogNewsId = ZnodeBlogNewsLocale.BlogNewsId )
													
		DELETE FROM ZnodeBlogNews WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeBlogNews.PortalId)
		DELETE FROM  ZnodeFormWidgetEmailConfiguration 	WHERE CMSContentPagesId IN (SELECT CMSContentPagesId FROM ZnodeCMSContentPages WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSContentPages.PortalId))
		DELETE FROM ZnodeCMSContentPages WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSContentPages.PortalId);
		DELETE FROM ZnodeCaseRequestHistory WHERE CaseRequestId IN (SELECT CaseRequestId   FROM ZnodeCaseRequest WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCaseRequest.PortalId))
		DELETE FROM ZnodeCaseRequest WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCaseRequest.PortalId);
		DELETE FROM ZnodePortalLocale WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalLocale.PortalId);
		DELETE FROM ZnodeShippingPortal WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeShippingPortal.PortalId);
		DELETE FROM ZnodePortalDisplaySetting WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalDisplaySetting.PortalId);
		
		DELETE FROM   @DeletedIds
		INSERT INTO @DeletedIds 
		SELECT DISTINCT UserId 
		FROM ZnodeUserPortal 
		WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeUserPortal.PortalId);

		--INSERT INTO @StatusOut (Id ,Status) 
		EXEC [dbo].Znode_DeleteUserDetails @UserIds = @DeletedIds , @status = 0,@IsForceFullyDelete =1 ,@IsCallInternal=1 
		
		DELETE FROM AspNetZnodeUser OUTPUT DELETED.AspNetZnodeUserId   INTO @TBL_DeletedUsers WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = AspNetZnodeUser.PortalId )
		
		DELETE FROM ZnodePortalAlternateWarehouse WHERE EXISTS ( SELECT TOP 1 1 FROM ZnodePortalWareHouse AS ZPWH WHERE EXISTS (
				SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZPWH.PortalId ) AND  ZPWH.PortalWarehouseId = ZnodePortalAlternateWarehouse.PortalWarehouseId);
		DELETE FROM ZnodePortalWareHouse WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalWareHouse.PortalId);
		DELETE ZnodePriceListPortal WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePriceListPortal.PortalId );
		
		DELETE FROM ZnodeEmailTemplateMapper WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeEmailTemplateMapper.PortalId);
		DELETE FROM ZnodeGIFtCard WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeGIFtCard.PortalId );
		DELETE FROM ZnodeCMSPortalProductPage WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSPortalProductPage.PortalId);

		DELETE FROM ZnodeCMSPortalSEOSetting WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSPortalSEOSetting.PortalId);

		DELETE FROM ZnodeCMSPortalTheme WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSPortalTheme.PortalId);

		DELETE FROM ZnodeCMSSEODetailLocale WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP INNER JOIN ZnodeCMSSEODetail AS zcsd ON TBP.PortalId = zcsd.PortalId WHERE zcsd.CMSSEODetailId = ZnodeCMSSEODetailLocale.CMSSEODetailId);
		 
		DELETE FROM ZnodeCMSSEODetail WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSSEODetail.PortalId);
		DELETE FROM ZnodePortalAccount WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalAccount.PortalId);
		DELETE FROM ZnodePortalAddress WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalAddress.PortalId);
		DELETE FROM ZnodePortalCountry WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalCountry.PortalId);
		DELETE FROM ZnodeCMSUrlRedirect WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSUrlRedirect.PortalId);
		DELETE FROM ZnodeTaxPortaL  WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeTaxPortaL.PortalId);
	   	INSERT INTO @TBL_Promotion( PromotionId ) SELECT PromotionId FROM ZnodePromotion WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePromotion.PortalId);
		DELETE FROM ZnodePromotionProduct WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_Promotion AS TBP WHERE TBP.PromotionId = ZnodePromotionProduct.PromotionId);
		DELETE FROM dbo.ZnodePromotionCoupon  WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_Promotion AS TBP WHERE TBP.PromotionId = ZnodePromotionCoupon.PromotionId);
		DELETE FROM ZnodePromotionCategory WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_Promotion AS TBP WHERE TBP.PromotionId = ZnodePromotionCategory.PromotionId);
		DELETE FROM ZnodePromotionCatalogs WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_Promotion AS TBP WHERE TBP.PromotionId = ZnodePromotionCatalogs.PromotionId);
		DELETE FROM ZnodePromotion WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_Promotion AS TBP WHERE TBP.PromotionId = ZnodePromotion.PromotionId);
		DELETE FROM ZnodeBlogNewsLocale WHERE exists (select top 1 1 from ZnodeBlogNews ZBN
													WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZBN.PortalId) AND ZBN.BlogNewsId = ZnodeBlogNewsLocale.BlogNewsId )
		
        DELETE a FROM ZnodeFormBuilderGlobalAttributeValueLocale	a 
			INNER JOIN ZnodeFormBuilderGlobalAttributeValue aa ON (a.FormBuilderGlobalAttributeValueId = aa.FormBuilderGlobalAttributeValueId)INNER JOIN ZnodeFormBuilderSubmit b ON (b.FormBuilderSubmitId =aa.FormBuilderSubmitId)
			 WHERE EXISTS ( SELECT TOP 1 1
									   FROM @TBL_PortalIds AS TBDL
									   WHERE TBDL.PortalId = b.PortalId      
									 ); 
		DELETE a FROM ZnodeFormBuilderGlobalAttributeValue a INNER JOIN ZnodeFormBuilderSubmit b ON (b.FormBuilderSubmitId =a.FormBuilderSubmitId)
		 WHERE EXISTS ( SELECT TOP 1 1
								   FROM @TBL_PortalIds AS TBDL
								   WHERE TBDL.PortalId = b.PortalId      
								 ); 
		DELETE FROM ZnodeFormBuilderSubmit 
		WHERE EXISTS ( SELECT TOP 1 1
								   FROM @TBL_PortalIds AS TBDL
								   WHERE TBDL.PortalId = ZnodeFormBuilderSubmit.PortalId      
								 );   
		DELETE FROM   @DeletedIds
		INSERT INTO @DeletedIds 
		SELECT DISTINCT a.OmsOrderId 
		FROM ZnodeOmsOrder A 
		INNER JOIN ZnodeOMsOrderDetails b  ON (b.OmsOrderId = a.OmsOrderId )
		WHERE   EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = b.PortalId)

		INSERT INTO @StatusOut (Id ,Status) 
		EXEC [dbo].[Znode_DeleteOrderById] @OmsOrderIds = @DeletedIds , @status = 0 

		DELETE FROM @DeletedIds DELETE FROM @StatusOut 									  
		
		DELETE FROM dbo.ZnodeSearchSynonyms	 WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalCatalog Tt WHERE Tt.PublishCatalogId = ZnodeSearchSynonyms.PublishCatalogId )
		DELETE FROM ZnodePublishedXml 
		DELETE FROM ZnodePublishCatalogLog	 WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalCatalog Tt WHERE Tt.PublishCatalogId = ZnodePublishCatalogLog.PublishCatalogId )
		DELETE FROM ZnodePublishCatalogSearchProfile WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalCatalog Tt WHERE Tt.PublishCatalogId = ZnodePublishCatalogSearchProfile.PublishCatalogId )
		DELETE FROM ZnodePublishCategoryProduct   WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalCatalog Tt WHERE Tt.PublishCatalogId = ZnodePublishCategoryProduct.PublishCatalogId )
		DELETE FROM ZnodePublishCategoryDetail 	WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePublishCategoryProduct Tt WHERE Tt.PublishCategoryId = ZnodePublishCategoryDetail.PublishCategoryId )
		DELETE FROM ZnodePublishProductDetail WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePublishCategoryProduct Tt WHERE Tt.PublishCategoryId = ZnodePublishProductDetail.PublishProductId )
		
		DELETE FROM ZnodeCMSWidgetCategory WHERE PublishCategoryId IN (SELECT PublishCategoryId FROM ZnodePublishCategory   WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalCatalog Tt WHERE Tt.PublishCatalogId = ZnodePublishCategory.PublishCatalogId ))

		DELETE FROM ZnodePublishCategory   WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalCatalog Tt WHERE Tt.PublishCatalogId = ZnodePublishCategory.PublishCatalogId )
		DELETE FROM dbo.ZnodeCMSWidgetProduct	WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePublishCategoryProduct Tt WHERE Tt.PublishProductId = ZnodeCMSWidgetProduct.PublishProductId )
		DELETE FROM dbo.ZnodeSearchGlobalProductBoost	WHERE PublishProductId IN (SELECT PublishProductId FROM ZnodePublishProduct	 WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalCatalog Tt WHERE Tt.PublishCatalogId = ZnodePublishProduct.PublishCatalogId ))
		DELETE FROM ZnodeCMSCustomerReview 
			WHERE PublishProductId IN (SELECT PublishProductId FROM ZnodePublishProduct	 WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalCatalog Tt WHERE Tt.PublishCatalogId = ZnodePublishProduct.PublishCatalogId ))
		DELETE FROM ZnodePublishProduct	 WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalCatalog Tt WHERE Tt.PublishCatalogId = ZnodePublishProduct.PublishCatalogId )
		DELETE FROM dbo.ZnodeSearchIndexServerStatus WHERE SearchIndexMonitorId IN (SELECT SearchIndexMonitorId FROM dbo.ZnodeSearchIndexMonitor WHERE CatalogIndexId IN (SELECT CatalogIndexId FROM ZnodeCatalogIndex	 WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalCatalog Tt WHERE Tt.PublishCatalogId = ZnodeCatalogIndex.PublishCatalogId )))
		DELETE FROM dbo.ZnodeSearchIndexMonitor WHERE CatalogIndexId IN (SELECT CatalogIndexId FROM ZnodeCatalogIndex	 WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalCatalog Tt WHERE Tt.PublishCatalogId = ZnodeCatalogIndex.PublishCatalogId ))
		DELETE FROM  ZnodeCatalogIndex   WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalCatalog Tt WHERE Tt.PublishCatalogId = ZnodeCatalogIndex.PublishCatalogId )
		DELETE FROM ZnodeSearchDocumentMapping WHERE PublishCatalogId IN (SELECT PublishCatalogId FROM ZnodePublishCatalog	  WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalCatalog Tt WHERE Tt.PublishCatalogId = ZnodePublishCatalog.PublishCatalogId ))
		
		DELETE FROM ZnodePublishCatalog	  WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalCatalog Tt WHERE Tt.PublishCatalogId = ZnodePublishCatalog.PublishCatalogId )
		DELETE FROM ZnodeOmsPersonalizeCartItem WHERE OmsSavedCartLineItemId IN (SELECT OmsSavedCartLineItemId FROM ZnodeOmsSavedCartLineItem WHERE OmsSavedCartId IN (SELECT OmsSavedCartId FROM ZnodeOmsSavedCart WHERE OmsCookieMappingId IN (SELECT OmsCookieMappingId FROM ZnodeOmsCookieMapping WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeOmsCookieMapping.PortalId) ) 	 )) 
		DELETE FROM ZnodeOmsSavedCartLineItem WHERE OmsSavedCartId IN (SELECT OmsSavedCartId FROM ZnodeOmsSavedCart WHERE OmsCookieMappingId IN (SELECT OmsCookieMappingId FROM ZnodeOmsCookieMapping WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeOmsCookieMapping.PortalId) ) 	 )
		DELETE FROM ZnodeOmsSavedCart WHERE OmsCookieMappingId IN (SELECT OmsCookieMappingId FROM ZnodeOmsCookieMapping WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeOmsCookieMapping.PortalId) ) 
		DELETE FROM ZnodeOmsCookieMapping WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeOmsCookieMapping.PortalId); 
		DELETE FROM ZnodeDomain WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeDomain.PortalId);
		DELETE FROM ZnodePortal WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortal.PortalId);
		
		PRINT '<-- Store Data Deleted Sucessfully-->'
	   
	   IF  NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortal) 
	   BEGIN 
	        SET @CMSThemeId = NULL 
			SET @CMSThemeCSSId = NULL  
			
	        SET IDENTITY_INSERT [dbo].[ZnodePortal] ON 
			INSERT [dbo].[ZnodePortal] ([PortalId], [CompanyName], [StoreName], [LogoPath], [UseSSL], [AdminEmail], [SalesEmail], [CustomerServiceEmail], [SalesPhoneNumber], [CustomerServicePhoneNumber], [ImageNotAvailablePath], [ShowSwatchInCategory], [ShowAlternateImageInCategory], [ExternalID], [MobileLogoPath], [DefaultOrderStateID], [DefaultReviewStatus], [SplashCategoryID], [SplashImageFile], [MobileTheme], [CopyContentBasedOnPortalId], [CreatedBy], [CreatedDate], [ModIFiedBy], [ModIFiedDate], [InStockMsg], [OutOfStockMsg], [BackOrderMsg], [OrderAmount], [Email], [StoreCode]) 
			VALUES (1, N'DemoStore', N'DemoStore', NULL, 0, N'test@znode.com', N'test@znode.com', N'test@znode.com', N'123456789', N'123456789', N'', 0, 0, NULL, NULL, 50, N'N', NULL, NULL, NULL, NULL, 2, CAST(N'2018-04-23T01:05:48.620' AS DateTime), 2, CAST(N'2018-04-23T01:05:48.620' AS DateTime), N'Demo', N'Demo', N'Demo', NULL, NULL, 'DemoStore')
			SET IDENTITY_INSERT [dbo].[ZnodePortal] OFF
			SET @PortalId  = 1
			INSERT INTO ZnodePimCatalog (CatalogName,IsActive,ExternalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			SELECT 'DefaultCatalog' , 1 ,NULL,2 ,GETDATE(),2,GETDATE() 
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimCatalog r WHERE r.CatalogName = 'DefaultCatalog' )
			SET @PimCatalogId = CASE WHEN @PimCatalogId IS nULL THEN (SELECT TOP 1 PimCatalogId FROM ZnodePimCatalog WHERE	CatalogName = 'DefaultCatalog'  ) ELSE  @PimCatalogId END 	
			INSERT INTO ZnodePublishCatalog (PimCatalogId
			,CatalogName
			,ExternalId
			,CreatedBy
			,CreatedDate
			,ModIFiedBy
			,ModIFiedDate
			,Tokem)
			SELECT @PimCatalogId,'DefaultCatalog' , '',2,GETDATE(),2,GETDAte(),''
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishCatalog WHERE CatalogName = 'DefaultCatalog')
			SET  @PublishCatalogId = CASE WHEN  @PublishCatalogId IS nULL THEN (SELECT TOP 1 PublishCatalogId  FROM ZnodePublishCatalog WHERE CatalogName = 'DefaultCatalog'   )  ELSE @PublishCatalogId END 
			INSERT INTO ZnodeCMSTheme(Name
			,CreatedBy
			,CreatedDate
			,ModIFiedBy
			,ModIFiedDate
			,IsParentTheme
			,ParentThemeId)
			SELECT 'Default',2,GETDATE(),2,GETDATE(),1,NULL
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSTheme WHERE Name = 'Default')
			SET  @CMSThemeId = CASE WHEN @CMSThemeId IS nULL THEN (SELECT TOP 1 CMSThemeId FROM ZnodeCMSTheme WHERE Name = 'Default'   )  ELSE @CMSThemeId END  
		
			INSERT INTO ZnodeCMSThemeCSS  (CMSThemeId
			,CSSName
			,CreatedBy
			,CreatedDate
			,ModIFiedBy
			,ModIFiedDate)
			SELECT @CMSThemeId,'DefaultCSS',2,GETDATE(),2,GETDATE()
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSThemeCSS WHERE CSSName = 'DefaultCSS')
			SET  @CMSThemeCSSId = CASE WHEN @CMSThemeCSSId IS nULL THEN (SELECT TOP 1 CMSThemeCSSId FROM ZnodeCMSThemeCSS WHERE CSSName = 'DefaultCSS'  )  ELSE @CMSThemeCSSId END  
		
			INSERT INTO ZnodeCMSPortalTheme (PortalId
			,CMSThemeId
			,CMSThemeCSSId
			,MediaId
			,FavIconId
			,WebsiteTitle
			,CreatedBy
			,CreatedDate
			,ModIFiedBy
			,ModIFiedDate	)    
			SELECT  @PortalId,@CMSThemeId,@CMSThemeCSSId,NULL,NULL,NULL,2,GETDATE(),2,GETDATE()
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSPortalTheme WHERE PortalId  = @PortalId  )
			INSERT INTO ZnodePortalCatalog (PortalId
			,PublishCatalogId
			,CreatedBy
			,CreatedDate
			,ModIFiedBy
			,ModIFiedDate)
			SELECT @PortalId,@PublishCatalogId,2,GETDATE(),2,GETDATE()
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePortalCatalog WHERE PortalId  = @PortalId )
			
			INSERT INTO ZnodeDomain (PortalId,DomainName ,IsActive,ApplicationType,CreatedBy ,CreatedDate ,ModIFiedBy ,ModIFiedDate)
			SELECT DISTINCT 1,DomainName ,IsActive,ApplicationType,CreatedBy ,GETDATE()CreatedDate ,ModIFiedBy ,GETDATE()ModIFiedDate 
			FROM _ZnodeDomain  TR
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeDomain TY WHERE TR.PortalId = TY.PortalId AND TR.DomainName = TY.DomainName) 
			GROUP BY DomainName ,IsActive,ApplicationType,CreatedBy,ModifiedBy

			INSERT INTO ZnodePortalUnit (PortalId,CurrencyId,WeightUnit,DimensionUnit,CurrencySuffix,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			SELECT @PortalId,(SELECT TOP 1 CurrencyId FROM ZnodeCulture WHERE CultureCode = 'en-US' ) 
			,'Lbs','IN','USD',2,GETDATE(),2,GETDATE()
			WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalUnit  WHERE PortalId = @PortalId AND CurrencyId = (SELECT TOP 1 CurrencyId FROM ZnodeCulture WHERE CultureCode = 'en-US')  )

	   END 
	   
		
		   END  
			 DELETE FROM @DeletedIds DELETE FROM @StatusOut 
			 IF  @ResetDomainData = 1  OR @DeleteAllData =1     
			 BEGIN 
			  DECLARE @OneportalId INT = (SELECT TOP 1 PortalId  FROM ZnodePortal)
			  DELETE FROM ZnodeDomain 
			  INSERT INTO znodedomain(PortalId,DomainName,	IsActive,	ApiKey,	ApplicationType,	CreatedBy,	CreatedDate	,ModIFiedBy	,ModIFiedDate)
			  SELECT @OneportalId, 'localhost:6766',1, '115915F1-7E6B-4386-A623-9779F27D9A5E','Admin',2,GETDATE(),2,GETDATE()
			  WHERE NOT EXISTS(SELECT * FROM znodedomain WHERE DomainName = 'localhost:6766'  and PortalId = (SELECT TOP 1 PortalId FROM ZnodePortal ))
			  
			  INSERT INTO znodedomain(PortalId,DomainName,	IsActive,	ApiKey,	ApplicationType,	CreatedBy,	CreatedDate	,ModIFiedBy	,ModIFiedDate)
			  SELECT @OneportalId, 'localhost:3288',1, 'c58cc0c0-1349-4001-8416-cf1cea7960e8','WebStore',2,GETDATE(),2,GETDATE()
			  WHERE NOT EXISTS(SELECT * FROM znodedomain WHERE DomainName = 'localhost:3288'  and PortalId = (SELECT TOP 1 PortalId FROM ZnodePortal ))
			  
			  INSERT INTO znodedomain(PortalId,DomainName,	IsActive,	ApiKey,	ApplicationType,	CreatedBy,	CreatedDate	,ModIFiedBy	,ModIFiedDate)
			  SELECT @OneportalId, 'localhost:44762',1, '8a8b4931-7d57-42e8-a005-b1c0cce49f1d','Api',2,GETDATE(),2,GETDATE()
			  WHERE NOT EXISTS(SELECT * FROM znodedomain WHERE DomainName = 'localhost:44762' and PortalId = (SELECT TOP 1 PortalId FROM ZnodePortal ) )
			  
			  INSERT INTO znodedomain(PortalId,DomainName,	IsActive,	ApiKey,	ApplicationType,	CreatedBy,	CreatedDate	,ModIFiedBy	,ModIFiedDate)
			  SELECT  @OneportalId  , 'localhost',1, '115915F1-7E6B-4386-A623-9779F27D9A5E','Admin',2,GETDATE(),2,GETDATE()
			  WHERE NOT EXISTS(SELECT * FROM znodedomain WHERE DomainName = 'localhost'  and PortalId = (SELECT TOP 1 PortalId FROM ZnodePortal ))
			 PRINT '<-- Domain reset Sucessfully-->'
			 END 
		DELETE FROM @DeletedIds DELETE FROM @StatusOut 
		IF @DeleteAllShippingMethods = 1 OR @DeleteAllData =1 
		BEGIN 
		
		   	SET @DeleteId = Substring((select  ',' + convert(nvarchar(500), ShippingId)  
					FROM ZnodeShipping for XML Path ('')),2,4000) 
		  -- INSERT INTO @StatusOut (Id ,Status)

		   EXEC Znode_DeleteShipping  @ShippingId = @DeleteId , @Status =0 ,@IsForceFullyDelete =1 
		   
		 PRINT '<-- Shipping Methods are Deleted Sucessfully-->'
			   
		END
		DELETE FROM @DeletedIds DELETE FROM @StatusOut  
		IF @DeleteAllPaymentMethods	 = 1  OR @DeleteAllData =1 
		BEGIN 
			 	 
		INSERT INTO @DeletedIds 
		SELECT DISTINCT a.OmsOrderId 
		FROM ZnodeOmsOrder A 
		INNER JOIN ZnodeOMsOrderDetails b  ON (b.OmsOrderId = a.OmsOrderId )
		WHERE   EXISTS ( SELECT TOP 1 1 FROM ZnodePaymentSetting AS TBP WHERE TBP.PaymentSettingId = b.PaymentSettingId)

		INSERT INTO @StatusOut (Id ,Status) 
		EXEC [dbo].[Znode_DeleteOrderById] @OmsOrderIds = @DeletedIds , @status = 0 
		 
		 DELETE FROM ZnodePortalPaymentSetting 
		 DELETE FROM ZnodeProfilePaymentSetting
		 DELETE FROM ZnodePaymentSetting
		
			  
		 PRINT '<-- Payment Methods are Deleted Sucessfully-->'
			   
		END 
		DELETE FROM @DeletedIds DELETE FROM @StatusOut 
		IF @DeleteAllTaxes	= 1 OR @DeleteAllData =1 		
		BEGIN 
		 
		  	SET @DeleteId = Substring((select  ',' + convert(nvarchar(500), TaxClassId)  
					FROM ZnodeTaxClass for XML Path ('')),2,4000) 
		-- INSERT INTO @StatusOut (Id ,Status) 
		 EXEC [dbo].[Znode_DeleteTaxClass] @TaxClassId =  @DeleteId, @status = 0 , @IsForceFullyDelete =1 
		 DELETE FROM ZnodeTaxRuleTypes   
     	 PRINT '<-- Taxes Data Deleted Sucessfully-->'
		 		 
		END 
		IF  @ResetIdentity =1  OR @DeleteAllData =1 
		 BEGIN
		 DECLARE @table_name varchar(100)= NULL, @showReport bit= 0, @debug bit= 0
	
		IF  OBJECT_ID('tempdb..#reseed_temp1') < 0 
			Drop TABLE #reseed_temp1 
		CREATE TABLE   #reseed_temp1 
		( 
					 tbame varchar(100), mvalue varchar(20) DEFAULT 0
		)

			DECLARE @Tablename varchar(256), @columnname varchar(256), @IndentValue numeric, @query varchar(4000), @query1 nvarchar(4000), @id int;

			DECLARE Cur_Reseed CURSOR LOCAL FAST_FORWARD
			FOR SELECT b.name, c.name
				FROM sys.objects AS a, sys.objects AS b, sys.columns AS c
				WHERE a.type = 'PK' AND 
					  a.parent_object_id = b.object_id AND 
					  b.object_id = c.object_id AND 
					  c.column_id = 1 AND 
					  is_identity <> 0 AND 
					  b.name NOT LIKE '%-%' AND 
					  b.name NOT LIKE '%(%' AND 
					  RTRIM(LTRIM(b.name)) = RTRIM(LTRIM(COALESCE(@table_name, b.name)));

			OPEN Cur_Reseed;

			FETCH NEXT FROM Cur_Reseed INTO @Tablename, @columnname;

			WHILE(@@FETCH_STATUS = 0)

			BEGIN

				 IF  @columnname <> ''

				BEGIN

					SET @query = 'insert into #reseed_temp1  (tbame, mvalue) ( select  '''+@Tablename+''', max( '+@columnname+') from '+@Tablename+')';

					EXECUTE (@query);

					SELECT @Tablename = tbame, @IndentValue = isnull(mvalue,1)
					FROM #reseed_temp1 ;



					DBCC CHECKIDENT(@Tablename, RESEED, @IndentValue);



				END;

				FETCH NEXT FROM Cur_Reseed INTO @Tablename, @columnname;

			END;
			CLOSE Cur_Reseed;
			DEALLOCATE Cur_Reseed;
			DROP TABLE #reseed_temp1
		PRINT '<---Reset Identity Sucessfully-->'
		END   
		--COMMIT TRAN  CleanUpProcess
	 END TRY 
	 BEGIN CATCH 
	 SELECT ERROR_MESSAGE()
	--ROLLBACK TRAN CleanUpProcess
	 END CATCH  
END
GO

UPDATE ZnodeApplicationSetting
SET Setting = '<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>OmsOrderId</name>      <headertext>Checkbox</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>OrderNumber</name>      <headertext>Order No</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>y</isallowlink>      <islinkactionurl>/Order/Manage</islinkactionurl>      <islinkparamfield>OmsOrderId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>UserName</name>      <headertext>Customer Name</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>Email</name>      <headertext>Email</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>PhoneNumber</name>      <headertext>Phone Number</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>StoreName</name>      <headertext>Store Name</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>OrderState</name>      <headertext>Order Status</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>orderState</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>8</id>      <name>PaymentStatus</name>      <headertext>Payment Status</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>paymentStatus</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>9</id>      <name>PaymentDisplayName</name>      <headertext>Payment Name</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>paymentType</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>10</id>      <name>OrderTotalWithCurrency</name>      <headertext>Total</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>11</id>      <name>SubTotalAmount</name>      <headertext>SubTotal</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>12</id>      <name>Tax</name>      <headertext>Tax</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>13</id>      <name>Shipping</name>      <headertext>Shipping</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>14</id>      <name>BillingPostalCode</name>      <headertext>Billing Zip Code</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>15</id>      <name>ShippingPostalCode</name>      <headertext>Shipping Zip Code</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>16</id>      <name>OrderDateWithTime</name>      <headertext>Order Date</headertext>      <width>0</width>      <datatype>DateTime</datatype>      <columntype>DateTime</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>17</id>      <name>CreatedByName</name>      <headertext>Created By</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>Boolean</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>18</id>      <name>PublishState</name>      <headertext>Application Type</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>19</id>      <name>ModifiedByName</name>      <headertext>Modified By</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>Boolean</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>20</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>View|void-payment</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>View</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/Order/Manage</manageactionurl>      <manageparamfield>OmsOrderId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>'
WHere ItemName = 'ZnodeOrder'

GO

UPDATE ZnodeApplicationSetting
SET Setting = '<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>ShippingId</name>      <headertext>Checkbox</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>ShippingTypeName</name>      <headertext>Shipping Type</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>ShippingName</name>      <headertext>Shipping Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>ShippingCode</name>      <headertext>Shipping Code</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>Description</name>      <headertext>Description</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>DestinationCountryCode</name>      <headertext>Country Code</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>HandlingCharge</name>      <headertext>Handling Charge</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>8</id>      <name>DisplayOrder</name>      <headertext>Display Order</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>9</id>      <name>IsActive</name>      <headertext>Enable</headertext>      <width>40</width>      <datatype>Boolean</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>10</id>      <name>ZipCode</name>      <headertext>Zip Code</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>11</id>      <name>PublishState</name>      <headertext>Application Type</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>DropDown</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>12</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>Edit|Delete</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>shippingId,PortalId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Edit|Delete</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/Store/EditAssociatedShipping|/Store/UnAssociateAssociatedShipping</manageactionurl>      <manageparamfield>shippingId,PortalId|shippingId,PortalId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>'
WHere ItemName = 'ZnodeAssociatedShippingListToPortal'

GO



DECLARE @_MinJID int,@_MaxJID int
IF OBJECT_ID('tempdb..#Temptable') IS NOT NULL
	DROP TABLE #Temptable 
CREATE  TABLE #Temptable (RowId int identity, CMSMessageKeyId INT,CMSMessageId int)
	INSERT INTO #Temptable
	SELECT  CMSMessageKeyId,CMSMessageId
	FROM ZnodeCMSPortalMessage ZCPM
	GROUP BY CMSMessageKeyId,CMSMessageId
	HAVING COUNT(CMSMessageKeyId) - (select count(*) from ZnodeCMSMessage ZCM where ZCM.CMSMessageId=ZCPM.CMSMessageId)> 0

	SELECT @_MinJID = MIN(RowId),@_MaxJID = MAX(RowId)  FROM #Temptable

WHILE @_MinJID <= @_MaxJID
   BEGIN
  
			DECLARE @CMSMessageId int = (select CMSMessageId from #Temptable where RowId = @_MinJID)
			DECLARE @PortalCount int = (select count(*) from ZnodeCMSPortalMessage where CMSMessageKeyId = (select CMSMessageId from #Temptable where RowId = @_MinJID))
			DECLARE @MessageKeyCount int = (select Count(*) from ZnodeCMSMessage where CMSMessageId =@CMSMessageId)
			DECLARE @InsertingRowCount int = @PortalCount - @MessageKeyCount
			DECLARE @index int = 1

			WHILE @index <= @InsertingRowCount
			BEGIN
				DECLARE @firstCMSPortalMessageId int=0,@NewlyCMSMessageId int,@RemainingCMSPortalMessageId INT
				INSERT INTO ZnodeCMSMessage (LocaleId,Message,IsPublished,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PublishStateId)
				select LocaleId,Message,IsPublished,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PublishStateId FROM ZnodeCMSMessage where CMSMessageId = @CMSMessageId
				SET @NewlyCMSMessageId =SCOPE_IDENTITY()
				SELECT TOP 1 @firstCMSPortalMessageId = CMSPortalMessageId FROM ZnodeCMSPortalMessage WHERE CMSMessageId = @CMSMessageId
				SET  @RemainingCMSPortalMessageId = (SELECT TOP 1 CMSPortalMessageId FROM ZnodeCMSPortalMessage WHERE CMSMessageId = @CMSMessageId and CMSMessageId not in (@firstCMSPortalMessageId))
				UPDATE ZnodeCMSPortalMessage set CMSMessageId =@NewlyCMSMessageId  WHERE CMSPortalMessageId = @RemainingCMSPortalMessageId
				SET @index = @index + 1

			end
			
		SET @_MinJID = @_MinJID + 1;
	END
GO 


UPDATE ZnodeApplicationSetting
SET Setting = '<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>ShippingId</name>      <headertext>Checkbox</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>ShippingTypeName</name>      <headertext>Shipping Type</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>ShippingCode</name>      <headertext>Shipping Code</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>Description</name>      <headertext>Description</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>DestinationCountryCode</name>      <headertext>Country Code</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>HandlingCharge</name>      <headertext>Handling Charge</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>DisplayOrder</name>      <headertext>Display Order</headertext>      <width>30</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>3</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>8</id>      <name>IsActive</name>      <headertext>Enable</headertext>      <width>40</width>      <datatype>Boolean</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>9</id>      <name>ZipCode</name>      <headertext>Zip Code</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>10</id>      <name>PublishState</name>      <headertext>Application Type</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>DropDown</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>11</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>Edit|Delete</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>PortalId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Edit|Delete</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/Profiles/UpdateProfileShipping|/Profiles/UnAssociateAssociatedShipping</manageactionurl>      <manageparamfield>shippingId,profileId|shippingId,profileId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>12</id>      <name>ProfileName</name>      <headertext>Profile Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>13</id>      <name>ShippingId</name>      <headertext>ShippingId</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>'
WHere ItemName = 'ZnodeAssociatedShippingListToProfile'
GO 
UPDATE ZnodeApplicationSetting
SET Setting = '<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>PaymentSettingId</name>      <headertext>Checkbox</headertext>      <width>40</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>PaymentSettingId</islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>ID</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>PaymentCode</name>      <headertext>Payment Code</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>PaymentTypeId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>PaymentTypeId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Payment Option</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>PaymentDisplayName</name>      <headertext>Payment Display Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>PaymentTypeId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>PaymentTypeId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Payment Option</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>GatewayName</name>      <headertext>Payment Gateway</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>PaymentGatewayId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>PaymentGatewayId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Payment Gateway</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>IsActive</name>      <headertext>Enable</headertext>      <width>40</width>      <datatype>Boolean</datatype>      <columntype>Boolean</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>IsActive</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>IsActive</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Enable</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>DisplayOrder</name>      <headertext>Display Order</headertext>      <width>30</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>3</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>PublishState</name>      <headertext>Application Type</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>DropDown</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>8</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>50</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>Edit|Delete</format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>y</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>PaymentSettingId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>PaymentSettingId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Edit|Delete</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/Profiles/UpdateProfilePaymentSetting|/Profiles/RemoveAssociatedPaymentSetting</manageactionurl>      <manageparamfield>PaymentSettingId,ProfileId|PaymentSettingId,ProfileId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>'
WHere ItemName = 'AssociatedPaymentListToProfile'
GO 

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishProductAttribute')
BEGIN 
	DROP PROCEDURE Znode_GetPublishProductAttribute
END
GO

CREATE PROCEDURE [dbo].[Znode_GetPublishProductAttribute]
(@PublishCatalogId INT)
AS 
/*
     Summary :- This Procedure is used to get the publish Product attribute details for a PublishCatalogId 
     Unit Testing 
     EXEC Znode_GetPublishProductAttribute 5
	 select * from znodepublishcatalog
     
*/
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;

			SELECT DISTINCT ZPP.PublishCatalogId ZnodeCatalogId,AttributeCode,AttributeTypeName,IsComparable,IsHtmlTags,IsFacets,IsUseInSearch,IsPersonalizable,                   
			IsConfigurable , ZPAL.AttributeName , ZPAL.LocaleId 
			,ZPA.DisplayOrder,ZPADVL.PimAttributeDefaultValueId, ZPAV.PimAttributeValueId
			INTO #AttributeValueFacet
			FROM ZnodePimAttribute ZPA 
			INNER JOIN ZnodeAttributeType ZAT ON(ZAT.AttributeTypeId = ZPA.AttributeTypeId)
			INNER JOIN ZnodePimAttributeLocale ZPAL on ZPA.PimAttributeId = ZPAL.PimAttributeId
			INNER JOIN ZnodePimFrontendProperties ZPFP ON(ZPFP.PimAttributeId = ZPA.PimAttributeId)
			INNER JOIN ZnodePimAttributeValue ZPAV ON(ZPAV.PimAttributeId = ZPA.PimAttributeId)
			INNER JOIN ZnodePublishProduct ZPP ON(ZPP.PimProductId = ZPAV.PimProductId) 
			LEFT JOIN ZnodePimProductAttributeDefaultValue ZPADVL 
			ON (ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
			WHERE PublishCatalogId = @PublishCatalogId;

            SELECT DISTINCT ZPA.ZnodeCatalogId,AttributeCode,AttributeTypeName,IsComparable,IsHtmlTags,IsFacets,IsUseInSearch,IsPersonalizable,                   
			IsConfigurable , ZPA.AttributeName , ZPA.LocaleId 
			,ZPA.DisplayOrder,ZPDAV.DisplayOrder AS DefaultValueDisplayOrder, CASE WHEN AttributeCode IN ('Brand','ProductType','OutOfStockOptions') THEN ZPDAV.AttributeDefaultValueCode ELSE ZPDAVL.AttributeDefaultValue END
			AttributeDefaultValue
			FROM #AttributeValueFacet ZPA 
			INNER JOIN ZnodePimAttributeDefaultValue ZPDAV ON (ZPDAV.PimAttributeDefaultValueId = ZPA.PimAttributeDefaultValueId)
			INNER JOIN ZnodePimAttributeDefaultValueLocale ZPDAVL ON (ZPDAVL.PimAttributeDefaultValueId = ZPDAV.PimAttributeDefaultValueId)
		
		    UNION ALL
			SELECT DISTINCT ZPA.ZnodeCatalogId,AttributeCode,AttributeTypeName,IsComparable,IsHtmlTags,IsFacets,IsUseInSearch,IsPersonalizable,                   
			IsConfigurable , ZPA.AttributeName , ZPA.LocaleId 
			,ZPA.DisplayOrder,NULL AS DefaultValueDisplayOrder, NULL AS AttributeDefaultValue
			FROM #AttributeValueFacet ZPA 
			INNER JOIN ZnodePimAttributeValueLocale ZPDAV ON (ZPDAV.PimAttributeValueId = ZPA.PimAttributeValueId)
			UNION ALL
			SELECT DISTINCT ZPA.ZnodeCatalogId,AttributeCode,AttributeTypeName,IsComparable,IsHtmlTags,IsFacets,IsUseInSearch,IsPersonalizable,                   
			IsConfigurable , ZPA.AttributeName , ZPA.LocaleId 
			,ZPA.DisplayOrder,NULL AS DefaultValueDisplayOrder, NULL AS AttributeDefaultValue
			FROM #AttributeValueFacet ZPA 
			INNER JOIN ZnodePimProductAttributeTextAreaValue ZPDAV ON (ZPDAV.PimAttributeValueId = ZPA.PimAttributeValueId)
			UNION ALL
			SELECT DISTINCT ZPA.ZnodeCatalogId,AttributeCode,AttributeTypeName,IsComparable,IsHtmlTags,IsFacets,IsUseInSearch,IsPersonalizable,                   
			IsConfigurable , ZPA.AttributeName , ZPA.LocaleId 
			,ZPA.DisplayOrder,NULL AS DefaultValueDisplayOrder, NULL AS AttributeDefaultValue
			FROM #AttributeValueFacet ZPA 
			INNER JOIN ZnodePimProductAttributeMedia ZPDAV ON (ZPDAV.PimAttributeValueId = ZPA.PimAttributeValueId)
			

         END TRY
         BEGIN CATCH
            DECLARE @Status BIT ;
			SET @Status = 0;
			DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(),
			 @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPublishProductAttribute @PublishCatalogId= '+CAST(@PublishCatalogId AS VARCHAR(10))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
			SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
			EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetPublishProductAttribute',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;

