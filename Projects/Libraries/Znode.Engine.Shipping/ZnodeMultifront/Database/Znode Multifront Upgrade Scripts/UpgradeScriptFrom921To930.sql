
IF EXISTS (SELECT TOP 1 1 FROM Sys.Tables WHERE Name = 'ZnodeMultifront')
BEGIN 
 IF EXISTS (SELECT TOP 1 1 FROM ZnodeMultifront where BuildVersion =   930  )
 BEGIN 
 PRINT 'Script is already executed....'
  SET NOEXEC ON 
 END 
END
ELSE 
BEGIN 
   SET NOEXEC ON
END 
INSERT INTO [dbo].[ZnodeMultifront] ( [VersionName], [Descriptions], [MajorVersion], [MinorVersion], [LowerVersion], [BuildVersion], [PatchIndex], [CreatedBy], 
[CreatedDate], [ModifiedBy], [ModifiedDate]) 
VALUES ( N'Znode_Multifront_9_3_0', N'Upgrade GA Release By 9_3_0',9,3,0,930,0,2, GETDATE(),2, GETDATE())
GO 
SET ANSI_NULLS ON
GO

IF  EXISTS (SELECT * FROM   sys.objects WHERE  type IN( 'F' ) and OBJECT_NAME(parent_object_id) = 'ZnodeCMSCustomerReview' and name ='FK_ZnodeCMSCustomerReview_ZnodePublishProduct')
BEGIN 
ALTER TABLE ZnodeCMSCustomerReview DROP CONSTRAINT FK_ZnodeCMSCustomerReview_ZnodePublishProduct
END

GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.columns WHERE TABLE_NAME = 'ZnodeCMSCustomerReview' and column_name = 'PublishProductId')
BEGIN
	ALTER TABLE ZnodeCMSCustomerReview ALTER COLUMN PublishProductId INT 
END
GO

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeCMSCustomerReview' AND COLUMN_NAME = 'SKU')
BEGIN
ALTER TABLE ZnodeCMSCustomerReview ADD SKU VARCHAR(600) NULL
END
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishProducts')
BEGIN 
	DROP PROCEDURE Znode_GetPublishProducts
END
GO
CREATE PROCEDURE [dbo].[Znode_GetPublishProducts](
	    @PublishCatalogId int= NULL
	  , @PublishCategoryId varchar(2000)= NULL
	  , @UserId int
	  , @NotReturnXML int= NULL
	  , @PimProductId TransferId Readonly
	  , @VersionId int= 0
	  , @IsDebug bit= 0
	  , @TokenId nvarchar(max)= ''
	  , @LocaleId TransferId READONLY 
	  , @PublishStateId INT = 0 
	  )
AS
    
/*
    Summary :	Publish Product on the basis of publish catalog
				Retrive all Product details with attributes and insert into following tables 
				1.	ZnodePublishedXml
				2.	ZnodePublishCategoryProduct
				3.	ZnodePublishProduct
				4.	ZnodePublishProductDetail

                Product details include all the type of products link, grouped, configure and bundel products (include addon) their associated products 
				collect their attributes and values into tables variables to process for publish.  
                
				Finally genrate XML for products with their attributes and inserted into ZnodePublishedXml Znode Admin process xml from sql server to mongodb
				one by one.

    Unit Testing
    
    SELECT * FROM ZnodePimCustomField WHERE CustomCode = 'Test'
    SELECT * FROM ZnodePimCatalogCategory WHERE pimCatalogId = 3 AND PimProductId = 181
    SELECT * FROM ZnodePimCustomFieldLocale WHERE PimCustomFieldId = 1
    SELECT * FROM ZnodePublishProduct WHERE PublishProductid = 213 = 30
    select * from znodepublishcatalog
    SELECT * FROM view_loadmanageProduct WHERE Attributecode = 'ProductNAme' AND AttributeValue LIKE '%Apple%'
    SELECT * FROM ZnodePimCategoryProduct WHERE  PimProductId = 181
    SELECT * FROM ZnodePimCatalogcategory WHERE pimcatalogId = 3 \
	DECLARE @ttr TransferId 
	INSERT INTO @ttr  
	SELECT 25719 
    EXEC Znode_GetPublishProducts  @PublishCatalogId = 3 ,@UserId= 2 ,@NotReturnXML= NULL,@PimProductId = @ttr,@IsDebug= 1 
    EXEC Znode_GetPublishProducts  @PublishCatalogId = null,@UserId= 2 ,@NotReturnXML= NULL,@IsDebug= 1  ,@PimProductId = 103
    EXEC Znode_GetPublishProducts  @PublishCatalogId =1,@UserId= 2 ,@RequiredXML= 1	
    SELECT * FROM 	ZnodePimCatalogCategory  WHERE pimcatalogId = 3  
    SELECT * FROM [dbo].[ZnodePimCategoryHierarchy]  WHERE pimcatalogId = 3 
 */
  
BEGIN
	
	BEGIN TRY
		SET NOCOUNT ON;
			 DECLARE @IsCatalogPublishInProcess BIT = 0
	         DECLARE @TBL_PublishIds TABLE (PublishProductId INT , PimProductId INT , PublishCatalogId INT)
			 DECLARE @PublishStateidForPriview INT = [dbo].[Fn_GetPublishStateIdForPreview]()
			 DECLARE @DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId()
			 
			 --User cananot modify / update UDT, Need to declare additinal table variable for editing in other store procedure.
			 DECLARE @PimProductId_Editable TransferId
			 
			 ------To update SKU on basis of PublishProductId
			 UPDATE ZCCR set ZCCR.SKU = ZPPD.SKU
			 FROM ZnodePublishProductDetail ZPPD
			 INNER JOIN ZnodeCMSCustomerReview ZCCR on ZPPD.PublishProductId = ZCCR.PublishProductId
			 INNER JOIN ZnodePublishProduct ZPP on ZPPD.PublishProductId = ZPP.PublishProductId
			 where ZCCR.SKU is null and ZPP.PublishCatalogId = @PublishCatalogId

			 IF EXISTS (SELECT TOP 1 1  FROM ZnodePublishCatalogLog a 
			   INNER JOIN ZnodePimCatalogCategory b ON (b.PimCatalogId =a.PimCatalogId )
			   WHERE EXISTS ( SELECT TOP 1 1 FROM @PimProductId SP WHERE  b.PimProductId = SP.Id )
			   AND a.IsCatalogPublished IS NULL 
			   ) 
			   BEGIN 
				 SET   @IsCatalogPublishInProcess =1 
			   END 
			     
	         IF (( @PublishCatalogId IS NULL  OR @PublishCatalogId = 0 ) AND @IsCatalogPublishInProcess = 0 )
			 BEGIN 
			   -- Process call single product publish
			   INSERT INTO @TBL_PublishIds 
			   EXEC [dbo].[Znode_InsertPublishProductIds] @PublishCatalogId,@userid,@PimProductId
			
			   INSERT INTO @PimProductId_Editable
			   SELECT distinct PimProductId FROM @TBL_PublishIds
			   -- initiate single product publish 
			   EXEC Znode_GetPublishSingleProduct @PublishCatalogId,@VersionId,@PimProductId_Editable,@UserId,@TokenId , @LocaleId,@PublishStateId
			  -- SELECT 	@PimProductId	
			 END 
			 ELSE IF  @IsCatalogPublishInProcess = 0 
			 BEGIN 
				-- Process call catalog publish (include category, products with multiple types)
			     EXEC [dbo].[Znode_InsertPublishProductIds] @PublishCatalogId,@userid,@PimProductId
				 EXEC Znode_GetPublishProductbulk @PublishCatalogId=@PublishCatalogId,@VersionId=@VersionId,@PimProductId=@PimProductId,@userid=@userid,@LocaleIds= @LocaleId,@PublishStateId = @PublishStateId
				 UPDATE ZnodePimProduct SET IsProductPublish = 1,PublishStateId =  @PublishStateId 
				 WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePublishProduct ZPP WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId AND ZPP.PublishCatalogId = @PublishCatalogId)
			 END 
			
			 DECLARE @TBL_PublishCatalogId TABLE(PublishCatalogId INT,PublishProductId INT,PimProductId  INT , VersionId INT,LocaleId INT  );

			 INSERT INTO @TBL_PublishCatalogId 
			 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,MAX(PublishCatalogLogId) VersionId, ZPCP.LocaleId  
			 FROM ZnodePublishProduct ZPP 
			 LEFT JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
			 WHERE (EXISTS (SELECT TOP 1 1 FROM @TBL_PublishIds SP WHERE SP.PimProductId = ZPP.PimProductId  ))
			 and exists (select top 1 1 from @LocaleId yu where yu.Id = zpcp.LocaleId)
			 AND IsCatalogPublished = 1 
			 AND PublishStateId = @PublishStateId
			 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId , LocaleId 

			
			-- SELECT * FROM @TBL_PublishCatalogId

			IF EXISTS (SELECT TOP 1 1 FROM @PimProductId WHERE ID IS NOT NULL AND ID <> '')

			--IF @PimProductId IS NOT NULL AND @PimProductId <> ''
			BEGIN
				SELECT PublishedXML ProductXml
				FROM ZnodePublishedXml ZPX
				WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId TBLP WHERE TBLP.VersionId = ZPX.PublishCatalogLogId AND TBLP.PublishProductId = ZPX.PublishedId  )
				AND IsProductXML = 1
				AND @IsCatalogPublishInProcess = 0
				;

						
				SELECT PublishProductId  ,PublishCatalogId ,VersionId,LocaleId 
				FROM @TBL_PublishCatalogId
				WHERE @IsCatalogPublishInProcess = 0
				GROUP BY PublishProductId  ,PublishCatalogId ,VersionId,LocaleId;

				IF 	 @IsCatalogPublishInProcess = 1 
				BEGIN 
				SELECT 1 Id , 'Single product publish request cannot be processed as catalog or category publish is in progress. Please try after publish is complete.' MessageDetails,  CAST(0 AS BIT ) Status
				END 
				ELSE 
				BEGIN 
				SELECT 1 Id , ' Publish Successfull' MessageDetails, CAST(1 AS BIT ) Status
				END
				
		
				-- dataset for SEO implementation
				SELECT  SKU 
				FROM ZnodePublishProductDetail PPD 
				INNER JOIN @TBL_PublishCatalogId TPC ON (TPC.PublishProductId = PPD.PublishProductId )
				WHERE EXISTS (SELECT TOP 1 1 FROM @PimProductId tb WHERE tb.ID = TPC.PimProductId)
				AND PPD.localeid = @DefaultLocaleId
				GROUP BY SKU;
				 

			END
			
			
			 SELECT max(PublishCatalogLogId) PublishCatalogLogId,a.LocaleId,PublishCatalogId 
			INTO #Cte_PublishCatalog
			 FROM ZnodePublishCatalogLog  a
			 WHERE a.PublishCatalogId = @PublishCatalogId
			 GROUP BY LocaleId,PublishCatalogId			
			

			--UPDATE ZnodePublishCatalogLog 
			--SET IsProductPublished = 1,
			--    PublishProductId = (SELECT COUNT( DISTINCT  PublishProductId) FROM ZnodePublishCategoryProduct SP  WHERE Sp.PublishCatalogId = ZnodePublishCatalogLog.PublishCatalogId --AND ZnodePublishCatalogLog.IsCatalogPublished = 1
			--						AND ( SP.PublishCategoryId in (SELECT Item FROM dbo.split(ZnodePublishCatalogLog.PublishCategoryId,',') SP ))  )
		 --   WHERE PublishCatalogLogId = @VersionId AND  @VersionId <> 0


			UPDATE ZnodePublishCatalogLog 
			SET IsProductPublished = 1 
			,PublishProductId = (SELECT  COUNT(DISTINCT PublishProductId) FROM ZnodePublishCategoryProduct ZPP WHERE ZPP.PublishCatalogId = ZnodePublishCatalogLog.PublishCatalogId AND ZPP.PublishCategoryId IS NOT NULL) 
			WHERE EXISTS (SELECT TOP 1 1 FROM #Cte_PublishCatalog  TY  WHERE  TY.PublishCatalogLogId =ZnodePublishCatalogLog.PublishCatalogLogId )  


			DECLARE @PimAttributeIsPublish VARCHAR(50) =  [dbo].[Fn_GetAttributeIsPublish]() 

			-----Update PublishProductId on basis of SKU
			update ZCCR set ZCCR.PublishProductId = ZPPD.PublishProductId
			from ZnodePublishProductDetail ZPPD
			inner join ZnodeCMSCustomerReview ZCCR on ZPPD.SKU = ZCCR.SKU
			INNER JOIN ZnodePublishProduct ZPP on ZPPD.PublishProductId = ZPP.PublishProductId
			where ZPP.PublishCatalogId = @PublishCatalogId

			--UPDATE ZnodePimProduct 
			--SET IsProductPublish = 1 
			--WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId ZPP WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId)

			--SELECT * fROM @TBL_PublishCatalogId

			UPDATE ZnodePimProduct 
			SET PublishStateId =  @PublishStateId
			WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId ZPP WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId)

			--END 
	END TRY
	BEGIN CATCH
		SELECT ERROR_MESSAGE(), ERROR_PROCEDURE();
	
		DECLARE @Status bit;
		SET @Status = 0;
		DECLARE @Error_procedure varchar(1000)= ERROR_PROCEDURE(), @ErrorMessage nvarchar(max)= ERROR_MESSAGE(), @ErrorLine varchar(100)= ERROR_LINE(), @ErrorCall nvarchar(max)= 'EXEC Znode_GetPublishProducts @PublishCatalogId = '+CAST(@PublishCatalogId AS varchar(max))+',@PublishCategoryId='+@PublishCategoryId+',@UserId='+CAST(@UserId AS Varchar(50))+',@NotReturnXML='+CAST(@NotReturnXML AS Varchar(50))+',@UserId = '+CAST(@UserId AS Varchar(50))+',

		@VersionId='+CAST(@VersionId AS Varchar(50))+',@TokenId='+CAST(@TokenId AS varchar(max))+',@Status='+CAST(@Status AS varchar(10));
		SELECT 0 AS ID, CAST(0 AS bit) AS Status;
		ROLLBACK TRAN GetPublishProducts;
		
		UPDATE ZnodePublishCatalogLog 
	    SET IsCatalogPublished = 0 
		,IsCategoryPublished = 0,IsProductPublished= 0  
		WHERE EXISTS (SELECT TOP 1 1 from #Cte_PublishCatalog TR WHERE TR.PublishCatalogLogId = ZnodePublishCatalogLog.PublishCatalogLogId) 
		EXEC Znode_InsertProcedureErrorLog @ProcedureName = 'Znode_GetPublishProducts', @ErrorInProcedure = @Error_procedure, @ErrorMessage = @ErrorMessage, @ErrorLine = @ErrorLine, @ErrorCall = @ErrorCall;
	END CATCH;
END;

GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_DeletePublishCatalogProduct')
BEGIN 
	DROP PROCEDURE Znode_DeletePublishCatalogProduct
END
GO
CREATE PROCEDURE [dbo].[Znode_DeletePublishCatalogProduct]
(   
   	@PublishProductIds	Transferid READONLY 
	,@PublishCatalogId   INT = 0 
	,@PimCategoryHierarchyId int = 0 
	,@PimCatalogId int = 0 
	
)
AS
   /*
    Summary:Delete the publish product from all related references 
    Unit Testing   
	begin tran
	SELECT * FROM ZnodePublishCatalog 
    EXEC Znode_DeletePublishCatalog @PublishCatalogIds =5 ,@IsDeleteCatalogId = 1 , @PublishCategoryIds = ''
	rollback tran
   */ 
     BEGIN
         BEGIN TRANSACTION A;
         BEGIN TRY
             SET NOCOUNT ON;
	
	         DECLARE @TBL_DeleteIds TABLE (PublishCatalogId INT ,PublishCategoryId INT ,PublishProductId INT )  
			 DECLARE @TBL_DeleteCategoryProduct TABLE (PublishCategoryProductId INT )			 
			 DECLARE @TBL_CategoryCategoryHierarchyIds TABLE (CategoryId int , ParentCategoryId int )
			 
		
			If @PimCategoryHierarchyId <> 0 AND @PimCatalogId <>  0 
			Begin
				INSERT INTO @TBL_CategoryCategoryHierarchyIds(CategoryId , ParentCategoryId )
				Select Distinct PimCategoryId , Null FROM (
				SELECT PimCategoryId,ParentPimCategoryId from DBO.[Fn_GetRecurciveCategoryIds](@PimCategoryHierarchyId,@PimCatalogId)
				Union 
				Select PimCategoryId , null  from ZnodePimCategoryHierarchy where PimCategoryHierarchyId = @PimCategoryHierarchyId 
				Union 
				Select PimCategoryId , null  from [Fn_GetRecurciveCategoryIds_new] (@PimCategoryHierarchyId,@PimCatalogId) ) Category  


				INSERT INTO @TBL_DeleteIds (PublishCatalogId,PublishProductId,PublishCategoryId  )
				 SELECT ZPP.PublishCatalogId,ZPP.PublishProductId ,ZPCP.PublishCategoryId
				 FROM ZnodePublishProduct  ZPP 
				 INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId) 
				 LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND ZPCP.PublishProductId = ZPP.PublishProductId )
				 LEFT JOIN ZnodePublishCategory  ZPPC ON (ZPPC.PublishCatalogId = ZPC.PublishCatalogId AND ZPPC.PublishCategoryId = ZPCP.PublishCategoryId)
				 AND ZPPC.PimCategoryId in 
							(
								Select CategoryId from @TBL_CategoryCategoryHierarchyIds
							) 
				 WHERE EXISTS (SELECT TOP 1 1 FROM @PublishProductIds ZPCC WHERE ZPCC.Id = ZPP.PublishProductId )
				 
				 --AND NOT EXISTS ( SELECT * FROM ZnodePublishedXML PX where zpp.PublishProductId = PX.PublishedId )
			 
				 INSERT INTO @TBL_DeleteCategoryProduct 
				 SELECT PublishCategoryProductId 
				 FROM ZnodePublishCategoryProduct a 
				 INNER JOIN ZnodePublishProduct ZPP ON (ZPP.PublishProductId = a.PublishProductId AND ZPP.PublishCatalogId = a.PublishCatalogId)
				 INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = a.PublishCatalogId )
				 INNER JOIN ZnodePublishCategory ZPCC ON (ZPCC.PublishCategoryId = a.PublishCategoryId)
				 WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimCatalogCategory ZPDF WHERE ZPDF.PimCatalogId = ZPC.PimCatalogId AND ZPDF.PimCategoryId = ZPCC.PimCategoryId AND ZPDF.PimProductId = ZPP.PimProductId  )
				 AND ZPCC.PimCategoryId in 
							(
								Select CategoryId from @TBL_CategoryCategoryHierarchyIds
							) 


				 AND a.PublishCatalogId = @PublishCatalogId
			END 
			Else 
			Begin
				 INSERT INTO @TBL_DeleteIds (PublishCatalogId,PublishProductId,PublishCategoryId  )
				 SELECT ZPP.PublishCatalogId,ZPP.PublishProductId ,ZPCP.PublishCategoryId
				 FROM ZnodePublishProduct  ZPP 
				 INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId) 
				 LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND ZPCP.PublishProductId = ZPP.PublishProductId )
				 LEFT JOIN ZnodePublishCategory  ZPPC ON (ZPPC.PublishCatalogId = ZPC.PublishCatalogId AND ZPPC.PublishCategoryId = ZPCP.PublishCategoryId)
				 WHERE EXISTS (SELECT TOP 1 1 FROM @PublishProductIds ZPCC WHERE ZPCC.Id = ZPP.PublishProductId )

				 --AND NOT EXISTS ( SELECT * FROM ZnodePublishedXML PX where zpp.PublishProductId = PX.PublishedId )
			 
				 INSERT INTO @TBL_DeleteCategoryProduct 
				 SELECT PublishCategoryProductId 
				 FROM ZnodePublishCategoryProduct a 
				 INNER JOIN ZnodePublishProduct ZPP ON (ZPP.PublishProductId = a.PublishProductId AND ZPP.PublishCatalogId = a.PublishCatalogId)
				 INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = a.PublishCatalogId )
				 INNER JOIN ZnodePublishCategory ZPCC ON (ZPCC.PublishCategoryId = a.PublishCategoryId)
				 WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimCatalogCategory ZPDF WHERE ZPDF.PimCatalogId = ZPC.PimCatalogId AND ZPDF.PimCategoryId = ZPCC.PimCategoryId AND ZPDF.PimProductId = ZPP.PimProductId  )
				 --AND NOT EXISTS ( SELECT * FROM ZnodePublishedXML PX where a.PublishProductId = PX.PublishedId )
				 AND a.PublishCatalogId = @PublishCatalogId
			 END 
					
						
		     UPDATE 	TBL 
			 SET PublishCategoryId = NULL 
			 FROM @TBL_DeleteIds TBL 
			 WHERE  EXISTS  (SELECT TOP 1 1 FROM ZnodePublishCategoryProduct ZPCC 
			 WHERE  TBL.PublishCatalogId = ZPCC.PublishCatalogId AND ZPCC.PublishCategoryId = TBL.PublishCategoryId   AND TBL.PublishProductId <> ZPCC.PublishProductId ) 			 

			 DELETE FROM [ZnodeCMSWidgetCategory]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS w
                 WHERE w.[PublishCategoryId] = [ZnodeCMSWidgetCategory].[PublishCategoryId]
             )
			
			 ;
         
             DELETE FROM [ZnodeCMSWidgetProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishProductId] = [ZnodeCMSWidgetProduct].[PublishProductId]
             );
             --DELETE FROM [ZnodeCMSCustomerReview]
             --WHERE EXISTS
             --(
             --    SELECT TOP 1 1
             --    FROM @TBL_DeleteIds AS qw
             --    WHERE qw.[PublishProductId] = [ZnodeCMSCustomerReview].[PublishProductId]
             --);
             DELETE FROM ZnodeUserWishList
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE EXISTS
                 (
                     SELECT TOP 1 1
                     FROM ZnodePublishProductDetail ZPPD
                     WHERE ZPPD.SKU = ZnodeUserWishList.SKU
                           AND qw.[PublishProductId] = ZPPD.[PublishProductId]
                 )
             );
            

             DELETE FROM [ZnodePromotionProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishProductId] = [ZnodePromotionProduct].[PublishProductId]
             );
             DELETE FROM [ZnodePromotionCategory]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS w
                 WHERE w.[PublishCategoryId] = [ZnodePromotionCategory].[PublishCategoryId]
             );
             DELETE FROM [ZnodePublishCategoryDetail]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS w
                 WHERE w.[PublishCategoryId] = [ZnodePublishCategoryDetail].[PublishCategoryId]
             );	
            
             --DELETE FROM ZnodeCMSSEODetailLocale
             --WHERE EXISTS
             --(
             --    SELECT TOP 1 1
             --    FROM [ZnodeCMSSEODetail]
             --    WHERE EXISTS
             --    (
             --        SELECT TOP 1 1
             --        FROM @TBL_DeleteIds AS qw
             --        WHERE qw.[PublishProductId] = [ZnodeCMSSEODetail].[SEOId]
             --    )
             --          AND EXISTS
             --    (
             --        SELECT TOP 1 1
             --        FROM [ZnodeCMSSEOType] AS we
             --        WHERE we.[CMSSEOTypeId] = [ZnodeCMSSEODetail].[CMSSEODetailId]
             --              AND [Name] = 'Product'
             --    )
             --          AND [ZnodeCMSSEODetail].CMSSEODetailId = ZnodeCMSSEODetailLocale.CMSSEODetailId
             --);
             --DELETE FROM [ZnodeCMSSEODetail]
             --WHERE EXISTS
             --(
             --    SELECT TOP 1 1
             --    FROM @TBL_DeleteIds AS qw
             --    WHERE qw.[PublishProductId] = [ZnodeCMSSEODetail].[SEOId]
             --)
             --      AND EXISTS
             --(
             --    SELECT TOP 1 1
             --    FROM [ZnodeCMSSEOType] AS we
             --    WHERE we.[CMSSEOTypeId] = [ZnodeCMSSEODetail].[CMSSEODetailId]
             --          AND [Name] = 'Product'
             --);
            
             DELETE FROM [ZnodePublishCategoryProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishProductId] = [ZnodePublishCategoryProduct].[PublishProductId]
             )
			 OR 
			 EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteCategoryProduct AS qw
                 WHERE qw.PublishCategoryProductId = [ZnodePublishCategoryProduct].PublishCategoryProductId
             )
			 ;
             DELETE FROM [ZnodePublishCategoryProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS w
                 WHERE w.[PublishCategoryId] = [ZnodePublishCategoryProduct].[PublishCategoryId]
             );
			  DELETE FROM dbo.ZnodeSearchGlobalProductBoost WHERE 
			 EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishProductId] = ZnodeSearchGlobalProductBoost.[PublishProductId]
              );
             DELETE FROM [ZnodePublishProductDetail]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishProductId] = [ZnodePublishProductDetail].[PublishProductId]
             );
             DELETE FROM [ZNodePublishProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishProductId] = [ZNodePublishProduct].[PublishProductId]
             
			 );
		
			 DELETE FROM ZnodePublishCategoryDetail 
			 WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishCategoryId] = ZnodePublishCategoryDetail.[PublishCategoryId]
              );
			
			DELETE FROM ZnodeSearchGlobalProductCategoryBoost 
			 WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishCategoryId] = ZnodeSearchGlobalProductCategoryBoost.[PublishCategoryId]
             
			 );
			 DELETE FROM ZnodePublishCategory
			 WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishCategoryId] = ZnodePublishCategory.[PublishCategoryId]
             
			 );

			 			 				
             COMMIT TRANSACTION A;
			 
         END TRY
         BEGIN CATCH
		      SELECT ERROR_MESSAGE() 
			 
         END CATCH;
     END;

	 GO


IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_InsertPublishProductIds')
BEGIN 
	DROP PROCEDURE Znode_InsertPublishProductIds
END
GO


CREATE  PROCEDURE [dbo].[Znode_InsertPublishProductIds]
(
	 @PublishCatalogId           INT            = NULL,
     @UserId                     INT				  ,
	 @PimProductId               TransferId Readonly,
	 @IsCallAssociated           BIT           = 0,
	 @PimCategoryHierarchyId	 INT		   = 0  ,
	 @IsDebug					 INT		   = 0     
	)
AS
    
/*
  Summary :	Publish Product on the basis of publish catalog
				Retrive all Product details with attributes and insert into following tables 
				1.	ZnodePublishedXml
				2.	ZnodePublishCategoryProduct
				3.	ZnodePublishProduct
				4.	ZnodePublishProductDetail

                Product details include all the type of products link, grouped, configure and bundel products (include addon) their associated products 
				collect their attributes and values into tables variables to process for publish.  
                
				Finally genrate XML for products with their attributes and inserted into ZnodePublishedXml Znode Admin process xml from sql server to mongodb
				one by one.

     Unit Testing
    
     SELECT * FROM ZnodePimCustomField WHERE CustomCode = 'Test'
     SELECT * FROM ZnodePimCatalogCategory WHERE pimCatalogId = 3 AND PimProductId = 181
     SELECT * FROM ZnodePimCustomFieldLocale WHERE PimCustomFieldId = 1
	 SELECT * FROM ZnodePublishProduct WHERE PublishProductid = 213 = 30
     select * from znodepublishcatalog
	 SELECT * FROM view_loadmanageProduct WHERE Attributecode = 'ProductNAme' AND AttributeValue LIKE '%Apple%'
     SELECT * FROM ZnodePimCategoryProduct WHERE  PimProductId = 181
	 SELECT * FROM ZnodePimCatalogcategory WHERE pimcatalogId = 3 
     EXEC Znode_GetPublishProducts  @PublishCatalogId = 5 ,@UserId= 2 ,@NotReturnXML= NULL,@PimProductId = 117,@IsDebug= 1 
	 	DECLARE @ttr TransferId 
	INSERT INTO @ttr  
	SELECT 25719 
     EXEC Znode_InsertPublishProductIds  @PublishCatalogId = 3,@UserId= 2  ,@PimProductId = @ttr  ,@IsDebug= 1 
     EXEC Znode_GetPublishProducts  @PublishCatalogId =1,@UserId= 2 ,@RequiredXML= 1	
	 SELECT * FROM 	ZnodePimCatalogCategory  WHERE pimcatalogId = 3  
	 SELECT * FROM [dbo].[ZnodePimCategoryHierarchy]  WHERE pimcatalogId = 3 
    */ 

     BEGIN
      --  BEGIN TRAN InsertPublishProductIds;
         BEGIN TRY
			SET NOCOUNT ON;
		
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate(); 
			 DECLARE @PimCatalogId int= ISNULL((SELECT PimCatalogId FROM ZnodePublishcatalog WHERE PublishCatalogId = @PublishCatalogId), 0);  --- this variable is used to carry y pim catalog id by using published catalog id
			 DECLARE 
			  @ProductNamePimAttributeId INT = dbo.Fn_GetProductNameAttributeId(),
			  @DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId(),
			  @LocaleId INT = 0,
			  @SkuPimAttributeId  INT =  dbo.Fn_GetProductSKUAttributeId(), 
			  @IsActivePimAttributeId INT =  dbo.Fn_GetProductIsActiveAttributeId(),
			  @ProductTypeAttributeId INT = dbo.Fn_GetProductTypeAttributeId()

			 DECLARE @TBL_LocaleId  TABLE (RowId INT IDENTITY(1,1) PRIMARY KEY  , LocaleId INT )
			 INSERT INTO @TBL_LocaleId (LocaleId) SELECT LocaleId FROM ZnodeLocale WHERE IsActive = 1
			 
			 -- This variable used to carry the locale in loop 
			 -- This variable is used to carry the default locale which is globaly set
             DECLARE @Counter INT =1 ,@maxCountId INT = (SELECT max(RowId) FROM @TBL_LocaleId ) 
			 DECLARE @DeletePublishProductId VARCHAR(MAX)= '', @PimProductIds VARCHAR(MAX)= '', @PimAttributeId VARCHAR(MAX)= '';
             DECLARE @TBL_CategoryHierarchyIds TABLE (CategoryId int,ParentCategoryId int ) 
			 DECLARE @TBL_PublishCategoryIds TABLE (PublishCategoryId  int ) 
		
			 -- This table will used to hold the all currently active locale ids  
			 
			IF Object_ID ('tempdb..#ActiveProduct') is not null
				drop table #ActiveProduct

			IF Object_ID ('tempdb..#TBL_PimProductIds') is not null
				drop table #TBL_PimProductIds

			 --this table holds all active product data
			-- CREATE TABLE #ActiveProduct ( PimProductId INT ) 
			 --
			 --INSERT INTO #ActiveProduct ( PimProductId )
				 --SELECT PAV.PimProductId FROM ZnodePimAttributeValue PAV
				 --INNER JOIN ZnodePimAttributeValueLocale PAVL ON PAV.PimAttributeValueId = PAVL.PimAttributeValueId
				 --INNER JOIN ZnodePimAttribute PA  ON PAV.PimAttributeId = PA.PimAttributeId
				 --WHERE PA.AttributeCode = 'IsActive' AND PAVL.AttributeValue = 'true'

		     -- This table hold the complete xml of product with other information like category and catalog
             CREATE TABLE #TBL_PimProductIds(PimProductId INT  ,PimCategoryId INT,PimCatalogId INT,PublishCatalogId INT,IsParentProducts BIT ,DisplayOrder INT,ProductName NVARCHAR(MAX),SKU  NVARCHAR(MAX),
											 IsActive NVARCHAR(MAX),PimAttributeFamilyId INT ,ProfileId   VARCHAR(MAX),CategoryDisplayOrder INT ,ProductIndex INT,PimCategoryHierarchyId INT ,PRIMARY KEY (PimCatalogId,PimCategoryId,PimCategoryHierarchyId,PimProductId)  )

			  -- This table is used to hold the product which publish in current process 
             DECLARE @TBL_PublishProductIds TABLE(PublishProductId  INT  ,PimProductId INT,PublishCatalogId  INT
													,PublishCategoryId VARCHAR(MAX),CategoryProfileIds VARCHAR(max),VersionId INT , PRIMARY KEY (PimProductId,PublishProductId,PublishCatalogId)); 
	 
			--Retrive category data : parent / client
			
				
			---------------
			-- this check is used when this procedure is call by internal procedure to publish only product and no need to return publish xml;    
			--Collected list of products for  publish 
       
			If @PimCategoryHierarchyId = 0 
			Begin

				INSERT INTO #TBL_PimProductIds ( PimProductId, PimCategoryId, IsParentProducts, DisplayOrder, PimCatalogId,CategoryDisplayOrder,PublishCatalogId,PimCategoryHierarchyId )
				SELECT DISTINCT ZPCC.PimProductId, ZPCC.PimCategoryId, 1 AS IsParentProducts, NULL AS DisplayOrder, ZPCC.PimCatalogId,ZPCC.DisplayOrder ,ZPC.PublishCatalogId,ISNULL(ZPCC.PimCategoryHierarchyId,0)
				FROM ZnodePimCatalogCategory AS ZPCC
				INNER JOIN ZnodePublishCatalog ZPC ON ZPC.PimCatalogId = ZPCC.PimCatalogId
		    	WHERE  (ZPCC.PimCatalogId = @PimCatalogId OR EXISTS( SELECT TOP 1 1 FROM @PimProductId SP WHERE SP.Id = ZPCC.PimProductId) ) AND ZPCC.PimProductId IS NOT NULL
				--AND EXISTS ( SELECT * FROM #ActiveProduct PAV WHERE ZPCC.PimProductId = PAV.PimProductId )

			END
			ELSE
			BEGIN
				
				INSERT INTO @TBL_CategoryHierarchyIds(CategoryId , ParentCategoryId )
				Select Distinct PimCategoryId , Null FROM (
				SELECT PimCategoryId,ParentPimCategoryId from DBO.[Fn_GetRecurciveCategoryIds](@PimCategoryHierarchyId,@PimCatalogId)
				Union 
				Select PimCategoryId , null  from ZnodePimCategoryHierarchy where PimCategoryHierarchyId = @PimCategoryHierarchyId 
				Union 
				Select PimCategoryId , null  from [Fn_GetRecurciveCategoryIds_new] (@PimCategoryHierarchyId,@PimCatalogId) ) Category  


				INSERT INTO  @TBL_PublishCategoryIds 
				select ZPC.PublishCategoryId from ZnodePublishCategory ZPC 
				Inner join  @TBL_CategoryHierarchyIds CT1 On 
				ZPC.PimCategoryId = CT1.CategoryId 
			
			
				INSERT INTO #TBL_PimProductIds ( PimProductId, PimCategoryId, IsParentProducts, DisplayOrder, PimCatalogId,CategoryDisplayOrder,PublishCatalogId,PimCategoryHierarchyId )
				SELECT DISTINCT ZPCC.PimProductId, ZPCC.PimCategoryId, 1 AS IsParentProducts, NULL AS DisplayOrder, ZPCC.PimCatalogId,ZPCC.DisplayOrder ,ZPC.PublishCatalogId,ISNULL(ZPCC.PimCategoryHierarchyId,0)
				FROM ZnodePimCatalogCategory AS ZPCC
				INNER JOIN ZnodePublishCatalog ZPC ON ZPC.PimCatalogId = ZPCC.PimCatalogId
		    	WHERE  (ZPCC.PimCatalogId = @PimCatalogId OR EXISTS( SELECT TOP 1 1 FROM @PimProductId SP WHERE SP.Id = ZPCC.PimProductId) ) AND ZPCC.PimProductId IS NOT NULL
				--AND EXISTS ( SELECT * FROM #ActiveProduct PAV WHERE ZPCC.PimProductId = PAV.PimProductId )
				AND (
						ZPCC.PimCategoryId in 
							(
								Select CategoryId from @TBL_CategoryHierarchyIds
							) 
					) 



				SELECT ZPCP.PublishCatalogId,THO.PimProductId,PimCategoryHierarchyId,ProductIndex
				INTO #TBL_PublishCategoryProduct 
				FROM ZnodePublishCategoryProduct ZPCP 
				INNER JOIN ZnodePublishProduct THO ON (THO.PublishProductId = ZPCP.PublishProductId  AND ZPCP.PublishCatalogId = THO.PublishCatalogId)
				WHERE ZPCP.PublishCatalogId = @PublishCatalogId
				AND EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductIds TYU WHERE TYU.PimProductId  =  THO.PimProductId )


				

UPDATE  #TBL_PimProductIds 
SET ProductIndex = CASE WHEN EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCategoryProduct TH WHERE TH.PimProductId = #TBL_PimProductIds.PimProductId 
	AND #TBL_PimProductIds.PimCategoryHierarchyId = TH.PimCategoryHierarchyId  ) THEN (SELECT TOP  1 ProductIndex FROM #TBL_PublishCategoryProduct TM WHERE TM.PimProductId = #TBL_PimProductIds.PimProductId 
	AND #TBL_PimProductIds.PimCategoryHierarchyId = TM.PimCategoryHierarchyId  )

	WHEN EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCategoryProduct TH WHERE TH.PimProductId = #TBL_PimProductIds.PimProductId 
	AND #TBL_PimProductIds.PimCategoryHierarchyId <> TH.PimCategoryHierarchyId  )  
	THEN (SELECT TOP  1 MAX(isnull(ProductIndex,0))+1  FROM #TBL_PublishCategoryProduct TM1 WHERE TM1.PimProductId = #TBL_PimProductIds.PimProductId 
	)

				  ELSE  1 END 


					
			END
						
             --Collected list of link products for  publish
			 INSERT INTO #TBL_PimProductIds( PimProductId, PimCategoryId, IsParentProducts, DisplayOrder, PimCatalogId , PublishCatalogId,PimCategoryHierarchyId)
				 SELECT ZPLPD.PimProductId, ZPCC.PimCategoryId, 0 AS IsParentProducts, NULL AS DisplayOrder, CTPP.PimCatalogId,CTPP.PublishCatalogId,isnull(ZPCC.PimCategoryHierarchyId,0)
				 FROM ZnodePimLinkProductDetail AS ZPLPD
				 INNER JOIN #TBL_PimProductIds AS CTPP ON ZPLPD.PimParentProductId = CTPP.PimProductId AND  IsParentProducts = 1 
				 INNER JOIN ZnodePimCatalogCategory AS ZPCC ON ZPCC.PimProductId = ZPLPD.PimProductId AND ZPCC.PimCatalogId = CTPP.PimCatalogId
				 WHERE NOT EXISTS ( SELECT TOP 1 1 FROM #TBL_PimProductIds AS CTPPI WHERE CTPPI.PimProductId = ZPLPD.PimProductId) 
				-- AND EXISTS ( SELECT TOP 1 1 FROM ZnodePimAttributeValue AS VILMP WHERE VILMP.PimProductId = ZPLPD.PimProductId ) 
				 AND ZPCC.PimProductId IS NOT NULL
				-- AND EXISTS (SELECT * FROM #ActiveProduct PAV WHERE ZPLPD.PimProductId = PAV.PimProductId )
				 GROUP BY ZPLPD.PimProductId, ZPCC.PimCategoryId,CTPP.PimCatalogId,CTPP.PublishCatalogId ,ZPCC.PimCategoryHierarchyId

				
             --Collected list of Addon products for  publish
  
		     INSERT INTO #TBL_PimProductIds( PimProductId, PimCategoryId, IsParentProducts, DisplayOrder, PimCatalogId,PublishCatalogId,PimCategoryHierarchyId)
					 SELECT ZPAPD.PimChildProductId, ISNULL(ZPCC.PimCategoryId,0) AS PublishCategoryId, 0 AS IsParentProducts, null AS DisplayOrder,CTALP.PimCatalogId,CTALP.PublishCatalogId,ISNULL(ZPCC.PimCategoryHierarchyId,0)
					 FROM ZnodePimAddOnProductDetail AS ZPAPD 
					 INNER JOIN ZnodePimAddOnProduct AS ZPAP ON ZPAP.PimAddOnProductId = ZPAPD.PimAddOnProductId
					 INNER JOIN #TBL_PimProductIds AS CTALP ON CTALP.PimProductId = ZPAP.PimProductId AND  IsParentProducts = 1
					 LEFT JOIN ZnodePimCatalogCategory AS ZPCC ON ZPCC.PimProductId = ZPAPD.PimChildProductId AND ZPCC.PimCatalogId = CTALP.PimCatalogId
					 WHERE NOT EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductIds AS CTALPI WHERE CTALPI.PimProductId = ZPAPD.PimChildProductId) 
				---	 AND EXISTS(SELECT TOP 1 1FROM ZnodePimAttributeValue AS VILMP WHERE VILMP.PimProductId = ZPAPD.PimChildProductId) 
					-- AND EXISTS ( SELECT * FROM #ActiveProduct PAV WHERE ZPAPD.PimChildProductId = PAV.PimProductId ) 
					 GROUP BY ZPAPD.PimChildProductId, ZPCC.PimCategoryId , CTALP.PimCatalogId,CTALP.PublishCatalogId,ZPCC.PimCategoryHierarchyId

					 				 	

             --Collected list of Bundle / Group / Config products for  publish
             INSERT INTO #TBL_PimProductIds(PimProductId,PimCategoryId,IsParentProducts,DisplayOrder,PimCatalogId,PublishCatalogId,PimCategoryHierarchyId)
                    SELECT ZPTA.PimProductId,ISNULL(ZPCC.PimCategoryId,0),0 AS IsParentProducts,NULL DisplayOrder,CTAAP.PimCatalogId,CTAAP.PublishCatalogId,ISNULL(ZPCC.PimCategoryHierarchyId,0)
                    FROM ZnodePimProductTypeAssociation AS ZPTA INNER JOIN #TBL_PimProductIds AS CTAAP ON CTAAP.PimProductId = ZPTA.PimParentProductId AND IsParentProducts = 1
                    LEFT JOIN ZnodePimCatalogCategory AS ZPCC ON ZPCC.PimProductId = ZPTA.PimProductId AND ZPCC.PimCatalogId = CTAAP.PimCatalogId
                    WHERE NOT EXISTS( SELECT TOP 1 1 FROM #TBL_PimProductIds AS CTAAPI WHERE CTAAPI.PimProductId = ZPTA.PimProductId)
					--AND EXISTS(SELECT TOP 1 1 FROM ZnodePimAttributeValue AS VILMP WHERE VILMP.PimProductId = ZPTA.PimProductId)
					--AND EXISTS ( SELECT * FROM #ActiveProduct PAV WHERE ZPTA.PimProductId = PAV.PimProductId ) 
					GROUP BY ZPTA.PimProductId,ZPCC.PimCategoryId,CTAAP.PimCatalogId,CTAAP.PublishCatalogId,ZPCC.PimCategoryHierarchyId
        				

			   UPDATE TBPP
               SET PublishCatalogId = ZPC.PublishCatalogId 
			   FROM #TBL_PimProductIds TBPP 
			   INNER JOIN ZnodePublishCatalog ZPC ON ZpC.PimCatalogId = TBPP.PimCatalogId;
        
		DECLARE @PublishProductId TRANSFERId 

		
		IF @PublishCatalogId IS NOT NULL AND @PublishCatalogId <> 0 
			BEGIN
			If @PimCategoryHierarchyId = 0 
			BEGIN
			  -- SELECT * FROM @TBL_PimProductIds AS TBP
				INSERT INTO @PublishProductId
				SELECT DISTINCT ZPP.PublishProductId 
				FROM ZnodePublishProduct AS ZPP 
				INNER JOIN ZnodePublishCategoryProduct ZPPC ON (ZPPC.PublishProductId = ZPP.PublishProductId AND ZPPC.PublishCatalogId = ZPP.PublishCatalogId)
				--INNER JOIN ZnodePublishCategory ZPC ON (ZPC.PublishCategoryId = ZPPC.PublishCategoryId)
				WHERE NOT EXISTS
				(SELECT TOP 1 1 FROM #TBL_PimProductIds AS TBP WHERE ZPP.PimProductId = TBP.PimProductId 
				AND TBP.PublishCatalogId = ZPP.PublishCatalogId 
				AND ISNULL(TBP.PimCategoryHierarchyId,0) = ISNULL(ZPPC.PimCategoryHierarchyId,0) )
				AND ZPP.PublishCatalogId = @PublishCatalogId
				--Remove extra products from catalog
			END
			ELSE 
			BEGIN
				INSERT INTO @PublishProductId
				SELECT DISTINCT ZPP.PublishProductId 
				FROM ZnodePublishProduct AS ZPP 
				INNER JOIN ZnodePublishCategoryProduct ZPPC ON (ZPPC.PublishProductId = ZPP.PublishProductId AND ZPPC.PublishCatalogId = ZPP.PublishCatalogId)
				INNER JOIN ZnodePublishCategory ZPC ON (ZPC.PublishCatalogId = ZPPC.PublishCatalogId  AND   ZPC.PublishCategoryId = ZPPC.PublishCategoryId)
				WHERE NOT EXISTS
				(SELECT TOP 1 1 FROM #TBL_PimProductIds AS TBP WHERE ZPP.PimProductId = TBP.PimProductId 
				AND TBP.PublishCatalogId = ZPP.PublishCatalogId 
				AND ISNULL(TBP.PimCategoryHierarchyId,0) = ISNULL(ZPPC.PimCategoryHierarchyId,0))
				AND ZPP.PublishCatalogId = @PublishCatalogId
				AND ZPC.PimCategoryId  in 
				(
					Select CategoryId from @TBL_CategoryHierarchyIds
				)
			
			   


			END
		END
		ELSE IF @IsCallAssociated = 0 
		BEGIN 
			DECLARE @TBL_ProductIdscollect TABLE(PublishProductId INT , PimproductId INT , PublishcatalogId  INT  , ProductType NVARCHAr(max))
			If @PimCategoryHierarchyId = 0 
			Begin
				INSERT INTO @TBL_ProductIdscollect (PublishProductId,PimproductId,PublishcatalogId,ProductType)
				SELECT PublishProductId,ZPAV.PimproductId,TBPOCI.PublishcatalogId,ZPATF.AttributeDefaultValueCode
				FROM ZnodePimAttributeValue ZPAV 
				INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON (ZPADV.PimAttributeValueId = ZPAV.PimAttributeValueId )
				INNER JOIN #TBL_PimProductIds TBLIDF ON (TBLIDF.PimProductId = ZPAV.PimProductId )
				INNER JOIN ZnodePublishProduct TBPOCI ON (TBPOCI.PimProductId = TBLIDF.PimProductId AND TBPOCI.PublishCatalogId = TBLIDF.PublishCatalogId 	)
				INNER JOIN ZnodePimAttributeDefaultValue ZPATF ON (ZPATF.PimAttributeId =  @ProductTypeAttributeId 
								AND ZPADV.PimAttributeDefaultValueId = ZPATF.PimAttributeDefaultValueId )
				 WHERE  IsParentProducts = 1	
				 AND LocaleId =@DefaultLocaleId
			END 
			Else 
			Begin
				INSERT INTO @TBL_ProductIdscollect (PublishProductId,PimproductId,PublishcatalogId,ProductType)
				SELECT TBPOCI.PublishProductId,ZPAV.PimproductId,TBPOCI.PublishcatalogId,ZPATF.AttributeDefaultValueCode
				FROM ZnodePimAttributeValue ZPAV 
				INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON (ZPADV.PimAttributeValueId = ZPAV.PimAttributeValueId )
				INNER JOIN #TBL_PimProductIds TBLIDF ON (TBLIDF.PimProductId = ZPAV.PimProductId )
				INNER JOIN ZnodePublishProduct TBPOCI ON (TBPOCI.PimProductId = TBLIDF.PimProductId AND TBPOCI.PublishCatalogId = TBLIDF.PublishCatalogId 	)
				INNER JOIN ZnodePimAttributeDefaultValue ZPATF ON (ZPATF.PimAttributeId =  @ProductTypeAttributeId 
								AND ZPADV.PimAttributeDefaultValueId = ZPATF.PimAttributeDefaultValueId )
				INNER JOIN ZnodePublishCategoryProduct  ZPCP ON ZPCP.PublishCatalogId = TBPOCI.PublishCatalogId AND 
				ZPCP.PublishProductId = TBPOCI.PublishProductId
				INNER JOIN ZnodePublishCategory ZPC ON  (ZPC.PublishCatalogId = ZPCP.PublishCatalogId  AND ZPC.PublishCategoryId = ZPCP.PublishCategoryId)
				 WHERE  IsParentProducts = 1	AND LocaleId =@DefaultLocaleId
				 AND ZPC.PimCategoryId  in 
				(
					Select CategoryId from @TBL_CategoryHierarchyIds
				
				) 
			END 

			IF EXISTS (SELECT TOP 1 1 FROM @TBL_ProductIdscollect WHERE ProductType IN ('GroupedProduct','BundleProduct','ConfigurableProduct','SimpleProduct') )
		 
			BEGIN 
	
			   DECLARE @TBL_DeleteTrackProduct TABLE (PublishProductId INT,AssociatedZnodeProductId INT  ,PublishCatalogId INT,PublishCatalogLogId INT ,IsDelete BIT , PublishCategoryId int  )

			   ;With Cte_PublishProduct AS
			   (
				 SELECT TBL.PublishProductId,PimproductId,TBL.PublishcatalogId,ProductType ,MAx(PublishCatalogLogId) PublishCatalogLogId
				 FROM  @TBL_ProductIdscollect TBL 
				 INNER JOIN ZnodePublishCatalogLog TBLG ON (TBLG.PublishCatalogId = TBL.PublishcatalogId)
				 WHERE IsCatalogPublished = 1 
				 GROUP BY TBL.PublishProductId,PimproductId,TBL.PublishcatalogId,ProductType

			   )
			   , Cte_ConfigData AS 
				 (
				 SELECT p.value('(./AssociatedZnodeProductId)[1]', 'INT')  AssociatedZnodeProductId,PublishProductId,PimproductId,PublishcatalogId,ProductType,CTR.PublishCatalogLogId
				 FROM ZnodePublishedXml ZPXML 
				 INNER JOIN Cte_PublishProduct CTR ON (CTR.PublishCatalogLogId = ZPXML.PublishCatalogLogId AND CTR.PublishProductId = ZPXML.PublishedId)
				 CROSS APPLY ZPXML.PublishedXML.nodes('/ConfigurableProductEntity') t(p)
				 WHERE  IsConfigProductXML = 1 and 
				 (ZPXML.PublishCategoryId in (Select PublishCategoryId from @TBL_PublishCategoryIds) OR @PimCategoryHierarchyId = 0 ) 
				 AND ProductType = 'ConfigurableProduct'
				 UNION ALL 
				  SELECT p.value('(./AssociatedZnodeProductId)[1]', 'INT')  AssociatedZnodeProductId,PublishProductId,PimproductId,PublishcatalogId,ProductType,CTR.PublishCatalogLogId
				 FROM ZnodePublishedXml ZPXML 
				 INNER JOIN Cte_PublishProduct CTR ON (CTR.PublishCatalogLogId = ZPXML.PublishCatalogLogId AND CTR.PublishProductId = ZPXML.PublishedId)
				 CROSS APPLY ZPXML.PublishedXML.nodes('/GroupProductEntity') t(p)
				 WHERE  IsGroupProductXML = 1 and 
				 (ZPXML.PublishCategoryId in (Select PublishCategoryId from @TBL_PublishCategoryIds) OR @PimCategoryHierarchyId = 0 ) 
				 AND ProductType = 'GroupedProduct'
				 UNION ALL 
				  SELECT p.value('(./AssociatedZnodeProductId)[1]', 'INT')  AssociatedZnodeProductId,PublishProductId,PimproductId,PublishcatalogId,ProductType,CTR.PublishCatalogLogId
				 FROM ZnodePublishedXml ZPXML 
				 INNER JOIN Cte_PublishProduct CTR ON (CTR.PublishCatalogLogId = ZPXML.PublishCatalogLogId AND CTR.PublishProductId = ZPXML.PublishedId)
				 CROSS APPLY ZPXML.PublishedXML.nodes('/BundleProductEntity') t(p)
				 WHERE  IsBundleProductXML = 1 and 
				 (ZPXML.PublishCategoryId in (Select PublishCategoryId from @TBL_PublishCategoryIds) OR @PimCategoryHierarchyId = 0 ) 
				 AND ProductType = 'BundleProduct'
				 UNION ALL 
				 SELECT p.value('(./AssociatedZnodeProductId)[1]', 'INT')  AssociatedZnodeProductId,PublishProductId,PimproductId,PublishcatalogId,ProductType,CTR.PublishCatalogLogId
				 FROM ZnodePublishedXml ZPXML 
				 INNER JOIN Cte_PublishProduct CTR ON (CTR.PublishCatalogLogId = ZPXML.PublishCatalogLogId AND CTR.PublishProductId = ZPXML.PublishedId)
				 CROSS APPLY ZPXML.PublishedXML.nodes('/AddonEntity') t(p)
				 WHERE  IsAddOnXML = 1 and 
				 (ZPXML.PublishCategoryId in (Select PublishCategoryId from @TBL_PublishCategoryIds) OR @PimCategoryHierarchyId = 0 ) 
				 AND LocaleId = @DefaultLocaleId 
			
				 )

			--	 SELECT * FROM ZnodePublishCatalogLog WHERE PublishCatalogId = 8 

			INSERT INTO @TBL_DeleteTrackProduct (PublishProductId,AssociatedZnodeProductId,PublishcatalogId,PublishCatalogLogId)
			SELECT ZPP.PublishProductId,AssociatedZnodeProductId,PublishcatalogId,PublishCatalogLogId 
			FROM Cte_ConfigData ZPP	
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM  @TBL_PublishProductIds TBLP WHERE TBLP.PublishProductId = ZPP.AssociatedZnodeProductId)
		
	

			;With Cte_updateStatus AS
			(
		 
				 SELECT  PublishProductId,PublishcatalogId
				  FROM @TBL_DeleteTrackProduct CTR 
				 WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishedXml ZPXML  
				 CROSS APPLY ZPXML.PublishedXML.nodes('/ConfigurableProductEntity') t(p)
				 WHERE  IsConfigProductXML = 1 
				 AND  CTR.PublishCatalogLogId = ZPXML.PublishCatalogLogId 
				 AND LocaleId = @DefaultLocaleId 
				 AND CTR.PublishProductId = p.value('(./AssociatedZnodeProductId)[1]', 'INT') 
				 AND CTR.PublishProductId = ZPXML.PublishedId ) 

				 UNION ALL 
				  SELECT PublishProductId,PublishcatalogId
				 FROM @TBL_DeleteTrackProduct CTR 
				 WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishedXml ZPXML  
				 CROSS APPLY ZPXML.PublishedXML.nodes('/GroupProductEntity') t(p)
				 WHERE  IsGroupProductXML = 1 
				 AND  CTR.PublishCatalogLogId = ZPXML.PublishCatalogLogId 
				 AND LocaleId = @DefaultLocaleId 
				 AND CTR.PublishProductId = p.value('(./AssociatedZnodeProductId)[1]', 'INT') 
				 AND CTR.PublishProductId = ZPXML.PublishedId ) 

				 UNION ALL 
				  SELECT  PublishProductId,PublishcatalogId
				   FROM @TBL_DeleteTrackProduct CTR 
				 WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishedXml ZPXML  
				 CROSS APPLY ZPXML.PublishedXML.nodes('/BundleProductEntity') t(p)
				 WHERE  IsBundleProductXML = 1 
				 AND  CTR.PublishCatalogLogId = ZPXML.PublishCatalogLogId 
				 AND LocaleId = @DefaultLocaleId 
				 AND CTR.PublishProductId = p.value('(./AssociatedZnodeProductId)[1]', 'INT') 
				 AND CTR.PublishProductId = ZPXML.PublishedId ) 


				 UNION ALL 
				 SELECT PublishProductId,PublishcatalogId
				 FROM @TBL_DeleteTrackProduct CTR 
				 WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishedXml ZPXML  
				 CROSS APPLY ZPXML.PublishedXML.nodes('/AddonEntity') t(p)
				 WHERE  IsAddOnXML = 1 
				 AND  CTR.PublishCatalogLogId = ZPXML.PublishCatalogLogId 
				 AND LocaleId = @DefaultLocaleId 
				 AND CTR.PublishProductId = p.value('(./AssociatedZnodeProductId)[1]', 'INT') 
				 AND CTR.PublishProductId = ZPXML.PublishedId ) 
		
			)

			UPDATE a 
			SET IsDelete = CASE WHEN TYR.PublishProductId IS NULL THEN 1 ELSE 0 END 
			FROM @TBL_DeleteTrackProduct a 
			LEFT JOIN Cte_updateStatus TYR ON (TYR.PublishProductId = a.PublishProductId AND TYR.PublishCatalogId = a.PublishCatalogId)

		
			INSERT INTO @PublishProductId 
			SELECT DISTINCT AssociatedZnodeProductId 
			FROM @TBL_DeleteTrackProduct
			WHERE IsDelete =1  
		--	AND 1=0

		END 

	
		INSERT INTO @PublishProductId
		SELECT distinct PublishProductid
		FROM ZnodePublishProduct ZPP
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId =  ZPP.PublishCatalogId )
        WHERE Not EXISTS (SELECT TOP 1 1 FROM ZnodePimCatalogCategory ZPPP WHERE (ZPPP.PimCatalogid = ZPc.PimCatalogId AND ZPPP.PimProductId = ZPP.PimProductId))  
		AND EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductIds TYR WHERE TYR.PimProductId = ZPP.PimProductId )
		AND NOT EXISTS (SELECT TOP 1 1 FROM @PublishProductId YTR WHERE YTR.Id = ZPP.PublishProductId  )
		AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishCategoryProduct TY WHERE TY.PublishProductId = ZPP.PublishProductId AND TY.PublishCatalogId = ZPP.PublishcatalogId  )
		--AND  1=0	
		END  
	
		EXEC dbo.Znode_DeletePublishCatalogProduct  @PublishProductIds = @PublishProductId,@PublishCatalogId = @PublishCatalogId ,
		@PimCategoryHierarchyId  =@PimCategoryHierarchyId  ,
		@PimCatalogId  = @PimCatalogId 

			   IF  @IsDebug = 1 
			   BEGIN 
			SELECT * FROM #TBL_PimProductIds
			 END 
			 -- This merge statement is used for crude oprtaion with publisgh product table
			MERGE INTO ZnodePublishProduct TARGET USING  (
				SELECT PimProductId, PublishCatalogId
				FROM #TBL_PimProductIds AS TBP
				GROUP BY PimProductId, PublishCatalogId
			 )  SOURCE
				ON --check for if already exists then just update otherwise insert the product  
				TARGET.PimProductId = SOURCE.PimProductId AND  TARGET.PublishCatalogId = SOURCE.PublishCataLogId 
				WHEN MATCHED      THEN UPDATE SET TARGET.CreatedBy = @UserId, TARGET.CreatedDate = @GetDate, TARGET.ModifiedBy = @UserId, TARGET.ModifiedDate = @GetDate	
				WHEN NOT MATCHED  THEN INSERT(PimProductId, PublishCatalogId, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate) 
									   VALUES( SOURCE.PimProductId, SOURCE.PublishCatalogId, @UserId, @GetDate, @UserId, @GetDate )
				OUTPUT INSERTED.PublishProductId, INSERTED.PimProductId, INSERTED.PublishCatalogId
				INTO @TBL_PublishProductIds(PublishProductId, PimProductId, PublishCatalogId); 
			
			-- Here used the ouput clause to catch what data inserted or updated into variable table
	    	
	

	          SELECT PublishProductId,
				 ISNULL(ZPC.PublishCategoryId,0)PublishCategoryId,
				 TBP.PublishCatalogId,ZPC.PimCategoryHierarchyId,CASE WHEN ISNULL(@PimCategoryHierarchyId,0) <> 0  THEN TBP.ProductIndex ELSE     ROW_NUMBER()Over(Partition BY TBPP.PublishProductId Order BY ISNULL(ZPC.PublishCategoryId,0)) END  ProductIndex
				 INTO #TB_CategoryProduct 
				 FROM #TBL_PimProductIds AS TBP 
				 LEFT JOIN ZnodePublishCategory AS ZPC ON (ISNULL(TBP.PimCategoryId, 0) = ISNULL(ZPC.PimCategoryId, -1) AND ZPC.PublishCatalogId = TBP.PublishCatalogId 
				 AND ISNULL(ZPC.PimCategoryHierarchyId, 0) = ISNULL(TBP.PimCategoryHierarchyId, -1))
				 INNER JOIN @TBL_PublishProductIds AS TBPP ON TBP.PimProductId = TBPP.PimProductId
				 AND TBP.PublishCatalogId = TBPP.PublishCatalogId
				 GROUP BY PublishProductId, ZPC.PublishCategoryId, TBP.PublishCatalogId,ZPC.PimCategoryHierarchyId,TBP.ProductIndex
		
			
			-- This merge staetment is used for crude opration with  ZnodePublishCategoryProduct table
			 MERGE INTO ZnodePublishCategoryProduct TARGET 
			 USING  #TB_Categoryproduct SOURCE
					ON  TARGET.PublishCatalogId = SOURCE.PublishCatalogId AND ISNULL(TARGET.PublishCategoryId, 0) = ISNULL(SOURCE.PublishCategoryId, 0) AND TARGET.PublishProductId = SOURCE.PublishProductId 
					
					WHEN MATCHED THEN UPDATE SET TARGET.PublishCategoryId = CASE WHEN SOURCE.PublishCategoryId = 0 THEN NULL ELSE SOURCE.PublishCategoryId END 
												 ,TARGET.CreatedBy = @UserId, TARGET.CreatedDate = @GetDate, TARGET.ModifiedBy = @UserId, TARGET.ModifiedDate = @GetDate,TARGET.PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId				
												 ,ProductIndex = case when Source.ProductIndex is null then 1 else  Source.ProductIndex end
					WHEN NOT MATCHED THEN INSERT(PublishProductId,PublishCategoryId,PublishCatalogId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PimCategoryHierarchyId,ProductIndex) 
										  VALUES(SOURCE.PublishProductId,CASE WHEN SOURCE.PublishCategoryId =0 THEN NULL ELSE SOURCE.PublishCategoryId  END , SOURCE.PublishCatalogId,@UserId,@GetDate,@userId,@GetDate,SOURCE.PimCategoryHierarchyId,case when Source.ProductIndex is null then 1 else  Source.ProductIndex end);
   
    
   WHILE @Counter <= @maxCountId
   BEGIN 
    SET @LocaleId = (SELECT TOP 1 LocaleId FROM @TBL_LocaleId WHERE RowId = @Counter)
   
     
	 SELECT VIR.PimProductId,PimAttributeId,AttributeValue,ZnodePimAttributeValueLocaleId,VIR.LocaleId ,COUNT(*)Over(Partition By VIR.PimProductId,PimAttributeId ORDER BY VIR.PimProductId,PimAttributeId  ) RowId
	 INTO #TBL_AttributeVAlue
	 FROM View_LoadManageProductInternal VIR
	 WHERE (LocaleId = @DefaultLocaleId OR LocaleId = @LocaleId )
	 AND EXISTS (SELECT TOP 1 1 FROM @TBL_PublishProductIds ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
	 AND (PimAttributeId = @ProductNamePimAttributeId  OR PimAttributeId = @SKUPimAttributeId OR PimAttributeId = @IsActivePimAttributeId  )
  
   

		
	          MERGE INTO ZnodePublishProductDetail   TARGET
			  USING  (SELECT   ZPP.PublishProductId ,TBLA.AttributeValue PRoductName,TBLAI.AttributeValue SKU ,ISNULL(TBLAII.AttributeValue,'0') IsActive --,TBLAIII.AttributeValue ProductType
						FROM  @TBL_PublishProductIds zpp
						INNER JOIN #TBL_AttributeVAlue TBLA ON (TBLA.PimAttributeId = @ProductNamePimAttributeId AND TBLA.PimProductId = ZPP.PimProductId AND TBLA.LocaleId  = CASE WHEN TBLA.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )
					--	INNER JOIN @TBL_AttributeVAlue  TBLA ON (TBLA.PimProductId = ZPP.PimProductId AND TBLA.PimAttributeId = @ProductNamePimAttributeId)
					    INNER JOIN #TBL_AttributeVAlue TBLAI ON (TBLAI.PimAttributeId = @SKUPimAttributeId AND TBLAI.PimProductId = ZPP.PimProductId AND TBLAI.LocaleId  = CASE WHEN TBLAI.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )
					--	INNER JOIN @TBL_AttributeVAlue  TBLAI ON (TBLAI.PimProductId = ZPP.PimProductId AND TBLAI.PimAttributeId = @SKUPimAttributeId)
					    INNER JOIN #TBL_AttributeVAlue TBLAII ON (TBLAII.PimAttributeId = @IsActivePimAttributeId AND TBLAII.PimProductId = ZPP.PimProductId AND TBLAII.LocaleId  = CASE WHEN TBLAII.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )
						--INNER JOIN #TBL_AttributeVAlue TBLAIII ON (TBLAIII.PimAttributeId = @ProductTypePimAttributeId AND TBLAIII.PimProductId = ZPP.PimProductId AND TBLAIII.LocaleId  = CASE WHEN TBLAIII.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )
					--	INNER JOIN @TBL_AttributeVAlue  TBLAIII ON (TBLAII.PimProductId = ZPP.PimProductId AND TBLAII.PimAttributeId = @ProductTypeAttributeId)
						GROUP BY ZPP.PublishProductId,TBLA.AttributeValue,TBLAI.AttributeValue,TBLAII.AttributeValue --,TBLAIII.AttributeValue
						)   SOURCE
			ON (TARGET.PublishProductId = SOURCE.PublishProductId
				 AND TARGET.LocaleId = @LocaleId 
			) 
			WHEN MATCHED THEN 
			UPDATE 
			SET TARGET.ProductName   = SOURCE.ProductName
				,TARGET.SKU			 = SOURCE.SKU
				,TARGET.IsActive	= SOURCE.IsActive
				,TARGET.ModifiedBy	 = @userid
				,TARGET.ModifiedDate  = @GetDate
			WHEN NOT MATCHED THEN 
			INSERT (PublishProductId
					,ProductName
					,SKU
					,IsActive
					,LocaleId
					,CreatedBy
					,CreatedDate
					,ModifiedBy
					,ModifiedDate)
			VALUES ( SOURCE.PublishProductId
					,SOURCE.ProductName
					,SOURCE.SKU
					,SOURCE.IsActive
					,@LocaleId
					,@userId
					,@GetDate
					,@userId
					,@GetDate);

		 
         DROP TABLE #TBL_AttributeVAlue 
		
		 SET @Counter = @counter + 1 
			  END 

		IF @PublishCatalogId IS NULL OR @PublishCatalogId =0 
		BEGIN 
			SELECT PublishProductId, PimProductId, PublishCatalogId 
			FROM @TBL_PublishProductIds
		END 
		IF (ISnull(@PimCategoryHierarchyId ,0) <> 0 ) 
		Begin
			SELECT PublishProductId, PimProductId, PublishCatalogId 
			FROM @TBL_PublishProductIds
		End 

		--COMMIT TRAN InsertPublishProductIds;
		END TRY 
		BEGIN CATCH 
		 SELECT ERROR_MESSAGE()
            UPDATE ZnodePublishCatalogLog 
			SET IsCatalogPublished = 0 
			,IscategoryPublished = 0 
			,IsProductPublished = 0 
			,PublishStateId = 1 
		    WHERE PublishCatalogLogId IN (SELECT Max(PublishCatalogLogId) FROM ZnodePublishCatalogLog WHERE PublishCatalogId = @PublishCatalogId  GROUP BY PublishStateId , PublishCatalogId )
		END CATCH 
	END

	GO
		
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportPimProductData')
BEGIN 
	DROP PROCEDURE Znode_ImportPimProductData
END
GO


CREATE PROCEDURE [dbo].[Znode_ImportPimProductData]
(   @TableName          VARCHAR(200),
    @NewGUID            NVARCHAR(200),
    @TemplateId         NVARCHAR(200),
    @ImportProcessLogId INT,
    @UserId             INT,
    @LocaleId           INT,
    @DefaultFamilyId    INT)
AS
    
	/*
      Summary : Finally Import data into ZnodePimProduct, ZnodePimAttributeValue and ZnodePimAttributeValueLocale Table 
      Process : Flat global temporary table will split into cloumn wise and associted with Znode Attributecodes,
    		      Create group of product with their attribute code and values and inserted one by one products. 	   
    
      SourceColumnName : CSV file column headers
      TargetColumnName : Attributecode from ZnodePimAttribute Table 

	 ***  Need to log error if transaction failed during insertion of records into table.
    */

     BEGIN
		 SET NOCOUNT ON
         BEGIN TRY
             BEGIN TRAN ImportProducts;
             DECLARE @SQLQuery NVARCHAR(MAX);
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @AttributeTypeName NVARCHAR(10), @AttributeCode NVARCHAR(300), @AttributeId INT, @IsRequired BIT, @SourceColumnName NVARCHAR(600), @PimAttributeFamilyId INT, @NewProductId INT, @PimAttributeValueId INT, @status BIT= 0; 
             --Declare error Log Table 

			
			 DECLARE @FamilyAttributeDetail TABLE
			 ( 
				PimAttributeId int, AttributeTypeName varchar(300), AttributeCode varchar(300), SourceColumnName nvarchar(600), IsRequired bit, PimAttributeFamilyId int
			 );
             IF @DefaultFamilyId = 0
                 BEGIN
					INSERT INTO @FamilyAttributeDetail( PimAttributeId, AttributeTypeName, AttributeCode, SourceColumnName, IsRequired, PimAttributeFamilyId )
					--Call Process to insert data of defeult family with cource column name and target column name 
					EXEC Znode_ImportGetTemplateDetails @TemplateId = @TemplateId, @IsValidationRules = 0, @IsIncludeRespectiveFamily = 1,@DefaultFamilyId = @DefaultFamilyId;
                    UPDATE @FamilyAttributeDetail SET PimAttributeFamilyId = DBO.Fn_GetCategoryDefaultFamilyId();

					---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
					Delete FAD from @FamilyAttributeDetail FAD
					where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
					and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					               inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
                 END;
             ELSE
                 BEGIN
                     INSERT INTO @FamilyAttributeDetail(PimAttributeId,AttributeTypeName,AttributeCode,SourceColumnName,IsRequired,PimAttributeFamilyId)
                     --Call Process to insert data of defeult family with cource column name and target column name 
                     EXEC Znode_ImportGetTemplateDetails @TemplateId = @TemplateId,@IsValidationRules = 0,@IsIncludeRespectiveFamily = 1,@DefaultFamilyId = @DefaultFamilyId;

					 ---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
					Delete FAD from @FamilyAttributeDetail FAD
					where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
					and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					               inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
                 END;  
				
            -- Retrive PimProductId on the basis of SKU for update product 
			SET @SQLQuery = 'UPDATE tlb SET tlb.PimProductId = ZPAV.PimProductId 
							FROM ZnodePimAttributeValue AS ZPAV INNER JOIN ZnodePimAttributeValueLocale AS ZPAVL ON 
							(ZPAVL.PimAttributeValueId = ZPAV.PimAttributeValueId) 
							INNER JOIN [dbo].[ZnodePimAttribute] ZPA on ZPAV.PimAttributeId = ZPA.PimAttributeId AND ZPA.AttributeCode= ''SKU'' 
							INNER JOIN '+@TableName+' tlb ON ZPAVL.AttributeValue = ltrim(rtrim(tlb.SKU)) ';
			EXEC sys.sp_sqlexec	@SQLQuery	 	
				 	
					
             --Read all attribute details with their datatype 
			 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.TABLES WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#DefaultAttributeValue')
				BEGIN
					   CREATE TABLE #DefaultAttributeValue (AttributeTypeName  VARCHAR(300),PimAttributeDefaultValueId INT,PimAttributeId INT,
					   AttributeDefaultValueCode  VARCHAR(100));
					 
					INSERT INTO #DefaultAttributeValue(AttributeTypeName,PimAttributeDefaultValueId,PimAttributeId,AttributeDefaultValueCode)
					--Call Process to insert default data value 
					EXEC Znode_ImportGetPimAttributeDefaultValue;
				END;
             ELSE
                BEGIN
                    DROP TABLE #DefaultAttributeValue;
                END;
             EXEC sys.sp_sqlexec
                  @SQLQuery;
       
			DECLARE @PimProductDetail TABLE 
			 (
			      
				  PimAttributeId INT, PimAttributeFamilyId INT,ProductAttributeCode VARCHAR(300) NULL,
				  ProductAttributeDefaultValueId INT NULL,PimAttributeValueId  INT NULL,LocaleId INT,
				  PimProductId INT NULL,AttributeValue NVARCHAR(MAX) NULL,AssociatedProducts NVARCHAR(4000) NULL,ConfigureAttributeIds VARCHAR(2000) NULL,
				  ConfigureFamilyIds VARCHAR(2000) NULL,RowNumber INT  
                );

		-- Update Record count in log 
       DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
		EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount OUTPUT
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End

			
             -- Column wise split data from source table ( global temporary table ) and inserted into temporary table variable @PimProductDetail
             -- Add PimAttributeDefaultValue 
             DECLARE Cr_AttributeDetails CURSOR LOCAL FAST_FORWARD
             FOR SELECT PimAttributeId,AttributeTypeName,AttributeCode,IsRequired,SourceColumnName,PimAttributeFamilyId FROM @FamilyAttributeDetail  WHERE ISNULL(SourceColumnName, '') <> '';
             OPEN Cr_AttributeDetails;
             FETCH NEXT FROM Cr_AttributeDetails INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @PimAttributeFamilyId;
             WHILE @@FETCH_STATUS = 0
                 BEGIN
                    SET @NewProductId = 0;
                    SET @SQLQuery = ' SELECT '''+CONVERT(VARCHAR(100), @PimAttributeFamilyId)+''' PimAttributeFamilyId , PimProductId PimProductId,'''+'['+@AttributeCode+']'+''' ProductAttributeCode ,'''+CONVERT(VARCHAR(100), @AttributeId)+''' AttributeId ,
									(SELECT TOP 1  PimAttributeDefaultValueId FROM #DefaultAttributeValue Where PimAttributeId =  '
									+ CONVERT(VARCHAR(100), @AttributeId)+'AND  AttributeDefaultValueCode = TN.['+@SourceColumnName+'] ) PimAttributeDefaultValueId ,['
									+ @SourceColumnName+'],'+CONVERT(VARCHAR(100), @LocaleId)+'LocaleId
								, RowNumber FROM '+@TableName+' TN';
								print @SQLQuery
                    INSERT INTO @PimProductDetail( PimAttributeFamilyId, PimProductId,ProductAttributeCode, PimAttributeId, ProductAttributeDefaultValueId, AttributeValue, LocaleId, RowNumber )
					
					EXEC sys.sp_sqlexec @SQLQuery;
                    FETCH NEXT FROM Cr_AttributeDetails INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @PimAttributeFamilyId;
                 END;
             CLOSE Cr_AttributeDetails;
             DEALLOCATE Cr_AttributeDetails;
			 
			
			 if object_id('tempdb..#PimProductDetail1') is not null
				drop table #PimProductDetail1

			 Select * into #PimProductDetail1 from @PimProductDetail

			 UPDATE a 
			 SET ConfigureAttributeIds =  SUBSTRING((SELECT ','+CAST(c.PimAttributeId As VARCHAR(100)) 
			 FROM #PimProductDetail1 c 
			 INNER JOIN ZnodePimAttribute b ON (b.PimAttributeId = c.PimAttributeId)
			 WHERE IsConfigurable =1  AND c.RowNumber = a.RowNumber  FOR XML PATH('')),2,4000) 
			 FROM #PimProductDetail1 a 
			WHERE EXISTS (SELECT TOP 1 1 FROM #PimProductDetail1 ab  WHERE ab.RowNumber = a.RowNumber AND	ab.ProductAttributeCode = '[ProductType]' 
			 AND ab.AttributeValue = 'ConfigurableProduct' )
				
             -- In case of Yes/No : If value is not TRUE OR  1 then it will be  False else True
			 --If default Value set not need of hard code for IsActive
			 UPDATE ppdti SET ppdti.AttributeValue = CASE WHEN Upper(ISNULL(ppdti.AttributeValue, '')) in ( 'TRUE','1')  THEN 'true'  ELSE 'false' END FROM #PimProductDetail1 ppdti
                INNER JOIN #DefaultAttributeValue dav ON ppdti.PimAttributeId = dav.PimAttributeId WHERE   dav.AttributeTypeName = 'Yes/No';
            
		
		-----------Added Performance patch 
		DECLARE @PublishStateIdForDraft INT= [dbo].[Fn_GetPublishStateIdForDraftState]();
		DECLARE @PimDefaultFamily INT= dbo.Fn_GetDefaultPimProductFamilyId();
        DECLARE @pimSkuAttributeId VARCHAR(50)= [dbo].[Fn_GetProductSKUAttributeId]();
        DECLARE @PimIsDownlodableAttributeId VARCHAR(50)= [dbo].[Fn_GetIsDownloadableAttributeId]();
        DECLARE @PublishStateIdForNotPublished INT= [dbo].[Fn_GetPublishStateIdForForNotPublishedState]();

		DELETE FROM #PimProductDetail1 WHERE RTRIM(LTRIM(ISNULL(AttributeValue, ''))) = '';
        
		CREATE INDEX Inx_PimProductDetail_Bulk1 ON #PimProductDetail1(RowNumber);

        ------------------------------------Bulk Row Process
        DECLARE @MaxCount INT, @MinRow INT, @MaxRow INT, @Rows numeric(10,2);
        ---- Count of total rows for import
		SELECT @MaxCount = COUNT(*) FROM #PimProductDetail1;
		
		---- Count of rows in loop for import
		SELECT @Rows = (select top 1 FeatureValues from ZnodeGlobalSetting where FeatureName = 'ProductImportBulk')  --ceiling(@MaxCount/100.0)
        
		SELECT @MaxCount = CEILING(@MaxCount / @Rows);

        IF OBJECT_ID('tempdb..#Temp_ImportLoop') IS NOT NULL
            DROP TABLE #Temp_ImportLoop;
        
		---- To get the min and max rows for import in loop
		;WITH cte AS 
		(
			SELECT RowId = 1, 
				   MinRow = 1, 
                   MaxRow = cast(@Rows as int)
            UNION ALL
            SELECT RowId + 1, 
                   MinRow + cast(@Rows as int), 
                   MaxRow + cast(@Rows as int)
            FROM cte
            WHERE RowId + 1 <= @MaxCount
		)
        SELECT RowId, MinRow, MaxRow
        INTO #Temp_ImportLoop
        FROM cte
		option (maxrecursion 0);

        --while @MaxCount <= @minRow
        DECLARE cur_BulkData CURSOR LOCAL FAST_FORWARD
        FOR SELECT MinRow, MaxRow FROM #Temp_ImportLoop;

        OPEN cur_BulkData;
        FETCH NEXT FROM cur_BulkData INTO  @MinRow, @MaxRow;

        WHILE @@FETCH_STATUS = 0
        BEGIN
		
		BEGIN TRAN ImportProducts;

			if object_id ('tempdb..#PimProductDetail_Bulk_Process')is not null
					drop table tempdb..#PimProductDetail_Bulk_Process

			CREATE TABLE #PimProductDetail_Bulk_Process
			([PimAttributeId]                 [INT] NULL, 
				[PimAttributeFamilyId]           [INT] NULL, 
				[ProductAttributeCode]           [VARCHAR](300) NULL, 
				[ProductAttributeDefaultValueId] [INT] NULL, 
				[PimAttributeValueId]            [INT] NULL, 
				[LocaleId]                       [INT] NULL, 
				[PimProductId]                   [INT] NULL, 
				[AttributeValue]                 [NVARCHAR](MAX) NULL, 
				[AssociatedProducts]             [NVARCHAR](4000) NULL, 
				[ConfigureAttributeIds]          [VARCHAR](2000) NULL, 
				[ConfigureFamilyIds]             [VARCHAR](2000) NULL, 
				[RowNumber]                      [INT] NULL, 
				SKU1                             VARCHAR(600),
				Id Int Identity(1,1)Primary Key
			);

			CREATE INDEX Inx_PimProductDetail_Bulk_Process ON #PimProductDetail_Bulk_Process(ProductAttributeCode, PimProductId);
			CREATE INDEX Inx_PimProductDetail_Bulk_Process1 ON #PimProductDetail_Bulk_Process(RowNumber);
			CREATE INDEX Inx_PimProductDetail_Bulk_Process2 ON #PimProductDetail_Bulk_Process(ProductAttributeCode)
			CREATE INDEX Inx_PimProductDetail_Bulk_Process3 ON #PimProductDetail_Bulk_Process(PimAttributeId, PimProductId);

			---- Insert rows for import in bulk
            INSERT INTO #PimProductDetail_Bulk_Process
            ([PimAttributeId], 
                [PimAttributeFamilyId], 
                [ProductAttributeCode], 
                [ProductAttributeDefaultValueId], 
                [PimAttributeValueId], 
                [LocaleId], 
                [PimProductId], 
                [AttributeValue], 
                [AssociatedProducts], 
                [ConfigureAttributeIds], 
                [ConfigureFamilyIds], 
                [RowNumber]
            )
            SELECT [PimAttributeId], 
                    [PimAttributeFamilyId], 
                    [ProductAttributeCode], 
                    [ProductAttributeDefaultValueId], 
                    [PimAttributeValueId], 
                    [LocaleId], 
                    [PimProductId], 
                    ltrim(rtrim([AttributeValue])), 
                    [AssociatedProducts], 
                    [ConfigureAttributeIds], 
                    [ConfigureFamilyIds], 
                    [RowNumber]
            FROM #PimProductDetail1 a
            WHERE a.[RowNumber] BETWEEN @MinRow AND @MaxRow;

			--select * from @PimProductDetail

			--select * from #PimProductDetail1



            ---------------------------Start Importing 
			if object_id ('tempdb..#TBL_DefaultAttributeId')is not null
				drop table #TBL_DefaultAttributeId

			if object_id ('tempdb..#TBL_MediaAttributeId')is not null
				drop table #TBL_MediaAttributeId

			if object_id ('tempdb..#TBL_TextAreaAttributeId')is not null
				drop table #TBL_TextAreaAttributeId

			if object_id ('tempdb..#TBL_MediaAttributeValue')is not null
				drop table #TBL_MediaAttributeValue

			if object_id ('tempdb..#TBL_DefaultAttributeValue')is not null
				drop table #TBL_DefaultAttributeValue

			if object_id ('tempdb..#ZnodePimAttributeValue')is not null
				drop table #ZnodePimAttributeValue

				
            CREATE TABLE #TBL_DefaultAttributeId ( PimAttributeId INT PRIMARY KEY, AttributeCode  VARCHAR(600) );

            CREATE TABLE #TBL_MediaAttributeId ( PimAttributeId INT PRIMARY KEY, AttributeCode  VARCHAR(600) );

            CREATE TABLE #TBL_TextAreaAttributeId ( PimAttributeId INT PRIMARY KEY, AttributeCode  VARCHAR(600) );
           
		    CREATE TABLE #TBL_MediaAttributeValue ( PimAttributeValueId INT, LocaleId INT, AttributeValue VARCHAR(300), MediaId INT );

            CREATE TABLE #TBL_DefaultAttributeValue ( PimAttributeValueId INT, LocaleId INT, AttributeValue INT );

            CREATE TABLE #ZnodePimAttributeValue (PimAttributeValueId  INT, PimAttributeFamilyId INT, PimAttributeId INT, PimProductId INT );

            DECLARE @ConfigureFamilyId VARCHAR(4000);

            INSERT INTO #TBL_DefaultAttributeId ( PimAttributeId, AttributeCode )
            SELECT PimAttributeId, AttributeCode
            FROM [dbo].[Fn_GetDefaultAttributeId]();

			INSERT INTO #TBL_MediaAttributeId (PimAttributeId, AttributeCode )
			SELECT PimAttributeId, AttributeCode
			FROM [dbo].[Fn_GetProductMediaAttributeId]();

            INSERT INTO #TBL_TextAreaAttributeId ( PimAttributeId, AttributeCode )
            SELECT PimAttributeId, AttributeCode
            FROM [dbo].[Fn_GetTextAreaAttributeId]();

            SELECT TOP 1 @PimAttributeFamilyId = PimAttributeFamilyId FROM #PimProductDetail_Bulk_Process;

			if object_id ('tempdb..#cte')is not null
				drop table #cte

            SELECT AttributeValue AS SKU, RowNumber
            INTO #cte
            FROM #PimProductDetail_Bulk_Process
            WHERE ProductAttributeCode = '[SKU]';
              
			

            CREATE INDEX Inx_cte_RowNumber ON #cte(RowNumber);
            UPDATE a SET a.SKU1 = B.SKU
            FROM #PimProductDetail_Bulk_Process a
            INNER JOIN #cte b ON a.RowNumber = b.RowNumber;

		
			
            SELECT TOP 1 @LocaleId = LocaleId FROM #PimProductDetail_Bulk_Process;

            ----Update ZNodePimProduct 
            UPDATE ZNodePimProduct
            SET PimAttributeFamilyId = DP.PimAttributeFamilyId, 
                PublishStateId = @PublishStateIdForDraft, 
                ModifiedBy = @UserId, 
                ModifiedDate = @GetDate
            FROM ZNodePimProduct ZPP
            INNER JOIN #PimProductDetail_Bulk_Process DP ON ZPP.PimProductId = DP.PimProductId;
      
			if object_id ('tempdb..#ZnodePimProduct')is not null
				drop table #ZnodePimProduct

			CREATE TABLE #ZnodePimProduct(PimProductId INT,ExternalId INT  Primary key)

			--create index Idx_ZnodePimProduct_ExternalId on #ZnodePimProduct(ExternalId)


			 

			----Insert into ZNodePimProduct 
            INSERT INTO ZnodePimProduct
            (PimAttributeFamilyId, 
                ExternalId, 
                CreatedBy, 
                CreatedDate, 
                ModifiedBy, 
                ModifiedDate, 
                PublishStateId
            )
			output inserted.PimProductId, inserted.ExternalId into #ZnodePimProduct(PimProductId,ExternalId)
            SELECT PimAttributeFamilyId, 
                    RowNumber, 
                    @UserId, 
                    @GetDate, 
                    @UserId, 
                    @GetDate, 
                    @PublishStateIdForNotPublished
            FROM #PimProductDetail_Bulk_Process
            WHERE ProductAttributeCode = '[SKU]'
            AND PimProductId IS NULL;
            
			----Update newly created productIds
            UPDATE a SET a.PimProductId = b.PimProductId
            FROM #PimProductDetail_Bulk_Process a
            INNER JOIN #ZnodePimProduct b ON a.RowNumber = b.ExternalId;

            ----Insert Downloadable products into ZnodePimDownloadableProduct
            INSERT INTO ZnodePimDownloadableProduct (SKU, ProductName, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
            SELECT PDSKU.AttributeValue, PDProdName.AttributeValue, @UserId, @GetDate, @UserId, @GetDate
            FROM #PimProductDetail_Bulk_Process PDSKU
            INNER JOIN #PimProductDetail_Bulk_Process PDProdName ON PDProdName.RowNumber = PDSKU.RowNumber
            INNER JOIN #PimProductDetail_Bulk_Process PDDownload ON PDDownload.RowNumber = PDSKU.RowNumber
            WHERE PDSKU.ProductAttributeCode = @pimSkuAttributeId
            AND PDProdName.ProductAttributeCode = '[SKU]'
            AND PDDownload.PimAttributeId = @PimIsDownlodableAttributeId
            AND PDDownload.AttributeValue = 'true'
            AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodePimDownloadableProduct WHERE ZnodePimDownloadableProduct.SKU = PDSKU.AttributeValue );

            ---- update ZnodePimAttributeValue : attribute data for Product
            UPDATE TARGET
            SET TARGET.PimAttributeFamilyId = CASE
                                                    WHEN Source.PimAttributeFamilyId = 0
                                                    THEN NULL
                                                    ELSE Source.PimAttributeFamilyId
                                                END, 
                    TARGET.ModifiedBy = @UserId, 
                    TARGET.ModifiedDate = @GetDate, 
                    TARGET.PimProductId = SOURCE.PimProductId
            OUTPUT INSERTED.PimAttributeValueId, 
                    INSERTED.PimAttributeFamilyId, 
                    INSERTED.PimAttributeId, 
                    INSERTED.PimProductId
                    INTO #ZnodePimAttributeValue
            FROM ZnodePimAttributeValue TARGET
            INNER JOIN #PimProductDetail_Bulk_Process SOURCE ON TARGET.PimProductId = SOURCE.PimProductId AND TARGET.PimAttributeId = SOURCE.PimAttributeId;
             
			---- Inserting attribute data for Product 
			INSERT INTO ZnodePimAttributeValue 
			( 
				PimAttributeFamilyId, 
				PimProductId, PimAttributeId, 
				PimAttributeDefaultValueId, 
				CreatedBy, 
				CreatedDate, 
				ModifiedBy, 
				ModifiedDate 
			)
            OUTPUT INSERTED.PimAttributeValueId, 
                    INSERTED.PimAttributeFamilyId, 
                    INSERTED.PimAttributeId, 
                    INSERTED.PimProductId
                    INTO #ZnodePimAttributeValue
            SELECT 
				CASE
                    WHEN Source.PimAttributeFamilyId = 0
                    THEN @PimDefaultFamily
                    ELSE Source.PimAttributeFamilyId
                END, 
                SOURCE.PimProductId, 
                ISNULL(SOURCE.PimAttributeId, 0),
                CASE
                    WHEN SOURCE.ProductAttributeDefaultValueId = 0
                    THEN NULL
                    ELSE SOURCE.ProductAttributeDefaultValueId
                END, 
                @UserId, 
                @GetDate, 
                @UserId, 
                @GetDate
            FROM #PimProductDetail_Bulk_Process SOURCE
            WHERE NOT EXISTS
            (
                SELECT *
                FROM ZnodePimAttributeValue TARGET
                WHERE TARGET.PimProductId = SOURCE.PimProductId
                        AND TARGET.PimAttributeId = SOURCE.PimAttributeId
            );

            -------------------------
			if object_id ('tempdb..#MediaData')is not null
				drop table #MediaData

            CREATE TABLE #MediaData (MediaId INT, PimProductId INT, PimAttributeId INT, PimAttributeFamilyId INT, LocaleId INT );

			---- Get Product Media Data
            INSERT INTO #MediaData ( MediaId , PimProductId , PimAttributeId , PimAttributeFamilyId , LocaleId )
            SELECT SP.Item, a.PimProductId, a.PimAttributeId, PimAttributeFamilyId, a.LocaleId
            FROM #PimProductDetail_Bulk_Process a
            INNER JOIN #TBL_MediaAttributeId c ON(c.PimAttributeId = a.PimAttributeId)
            CROSS APPLY dbo.split(a.AttributeValue, ',') SP;

			---- Get product media attribute data
            INSERT INTO #TBL_MediaAttributeValue ( PimAttributeValueId, LocaleId, AttributeValue, MediaId )
            SELECT a.PimAttributeValueId, b.LocaleId, zm.Path AttributeValue, ZM.MediaId
            FROM #ZnodePimAttributeValue AS a
            INNER JOIN #MediaData AS b ON(a.PimAttributeId = b.PimAttributeId
                                            AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0)
                                            AND a.PimProductId = b.PimProductId)
            INNER JOIN ZnodeMedia ZM ON(b.MediaId = ZM.MediaId);
     
			---- Deleting product media attribute
            DELETE FROM ZnodePimProductAttributeMedia
            WHERE EXISTS
            (
                SELECT TOP 1 1
                FROM #TBL_MediaAttributeValue TBLM
                WHERE ZnodePimProductAttributeMedia.PimAttributeValueId = TBLM.PimAttributeValueId
                        AND TBLM.MediaId <> ZnodePimProductAttributeMedia.MediaId
                        AND ZnodePimProductAttributeMedia.Localeid = @LocaleId
            );

            ---- update ZnodePimProductAttributeMedia : attribute data for Product
            UPDATE TARGET
                SET 
                    TARGET.MediaPath = SOURCE.AttributeValue, 
                    TARGET.MediaId = SOURCE.MediaId, 
                    TARGET.ModifiedBy = @UserId, 
                    TARGET.ModifiedDate = @GetDate
            FROM ZnodePimProductAttributeMedia TARGET
            INNER JOIN #TBL_MediaAttributeValue SOURCE ON TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
                                                        AND TARGET.MediaPAth = SOURCE.AttributeValue
                                                        AND TARGET.LocaleId = SOURCE.LocaleId;
    
            ---- inserting Media attribute data for Product
            INSERT INTO ZnodePimProductAttributeMedia 
			( 
				PimAttributeValueId, 
				LocaleId, MediaPath, 
				MediaId, 
				CreatedBy, 
				CreatedDate, 
				ModifiedBy, 
                ModifiedDate
            )
            SELECT SOURCE.PimAttributeValueId, 
                    SOURCE.LocaleId, 
                    SOURCE.AttributeValue, 
                    SOURCE.MediaId, 
                    @UserId, 
                    @GetDate, 
                    @UserId, 
                    @GetDate
            FROM #TBL_MediaAttributeValue SOURCE
            WHERE NOT EXISTS
            (
                SELECT *
                FROM ZnodePimProductAttributeMedia TARGET
                WHERE TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
                        AND TARGET.MediaPAth = SOURCE.AttributeValue
                        AND TARGET.LocaleId = SOURCE.LocaleId
            );

            --------------------------
			if object_id ('tempdb..#Cte_TextAreaAttributeValue')is not null
				drop table #Cte_TextAreaAttributeValue

			---- Getting text area data in temp #Cte_TextAreaAttributeValue
            SELECT a.PimAttributeValueId, 
                    b.LocaleId, 
                    AttributeValue
            INTO #Cte_TextAreaAttributeValue
            FROM #ZnodePimAttributeValue AS a
            INNER JOIN #PimProductDetail_Bulk_Process AS b ON(a.PimAttributeId = b.PimAttributeId
                                                            AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0)
                                                            AND a.PimProductId = b.PimProductId)
            INNER JOIN #TBL_TextAreaAttributeId c ON(c.PimAttributeId = b.PimAttributeId);

            ---- update ZnodePimProductAttributeTextAreaValue : attribute data for Product
            UPDATE TARGET
            SET TARGET.AttributeValue = SOURCE.AttributeValue, 
                TARGET.CreatedBy = @UserId, 
                TARGET.ModifiedBy = @UserId, 
                TARGET.ModifiedDate = @GetDate
            FROM ZnodePimProductAttributeTextAreaValue TARGET
            INNER JOIN #Cte_TextAreaAttributeValue SOURCE ON TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
                                                                      AND TARGET.LocaleId = SOURCE.LocaleId;

            ---- inserting TextAreaValue attribute data for Product
            INSERT INTO ZnodePimProductAttributeTextAreaValue
            (
				PimAttributeValueId, 
                LocaleId, 
                AttributeValue, 
                CreatedBy, 
                CreatedDate, 
                ModifiedBy, 
                ModifiedDate
            )
            SELECT SOURCE.PimAttributeValueId, 
                    SOURCE.LocaleId, 
                    SOURCE.AttributeValue, 
                    @UserId, 
                    @GetDate, 
                    @UserId, 
                    @GetDate
            FROM #Cte_TextAreaAttributeValue SOURCE
            WHERE NOT EXISTS
            (
                SELECT *
                FROM ZnodePimProductAttributeTextAreaValue TARGET
                WHERE TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
                        AND TARGET.LocaleId = SOURCE.LocaleId
            );
           
		    ---- Getting attribute default values for product
            INSERT INTO #TBL_DefaultAttributeValue ( PimAttributeValueId, LocaleId, AttributeValue )
            SELECT a.PimAttributeValueId, b.LocaleId, d.PimAttributeDefaultValueId AttributeValue
            FROM #ZnodePimAttributeValue AS a
            INNER JOIN #PimProductDetail_Bulk_Process AS b ON(a.PimAttributeId = b.PimAttributeId
                                                                AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0)
                                                                AND a.PimProductId = b.PimProductId)
            INNER JOIN #TBL_DefaultAttributeId c ON(c.PimAttributeId = b.PimAttributeId)
            CROSS APPLY dbo.split(b.AttributeValue, ',') SP
            INNER JOIN ZnodePimAttributeDefaultValue d ON d.PimAttributeId = b.PimAttributeId
                                                            AND SP.Item = d.AttributeDefaultValueCode;
			---- Deleting prodyuct attribute default value
            DELETE FROM ZnodePimProductAttributeDefaultValue
            WHERE EXISTS
            (
                SELECT TOP 1 1
                FROM #TBL_DefaultAttributeValue TBLAV
                WHERE TBLAV.PimAttributeValueId = ZnodePimProductAttributeDefaultValue.PimAttributeValueId
                        AND TBLAV.AttributeValue <> ZnodePimProductAttributeDefaultValue.PimAttributeDefaultValueId
                        AND ZnodePimProductAttributeDefaultValue.LocaleId = @LocaleId
            );

			---- update ZnodePimProductAttributeDefaultValue : attribute data for Product
			UPDATE TARGET
			SET TARGET.PimAttributeDefaultValueId = SOURCE.AttributeValue, 
				TARGET.ModifiedBy = @UserId, 
				TARGET.ModifiedDate = @GetDate
			FROM ZnodePimProductAttributeDefaultValue TARGET
					INNER JOIN #TBL_DefaultAttributeValue SOURCE ON TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
																	AND TARGET.PimAttributeDefaultValueId = SOURCE.AttributeValue
																	AND TARGET.LocaleId = SOURCE.LocaleId;

            ---- insert ZnodePimProductAttributeDefaultValue : attribute data for Product
            INSERT INTO ZnodePimProductAttributeDefaultValue
            (
				PimAttributeValueId, 
                LocaleId, 
                PimAttributeDefaultValueId, 
                CreatedBy, 
                CreatedDate, 
                ModifiedBy, 
                ModifiedDate
            )
            SELECT 
				SOURCE.PimAttributeValueId, 
                SOURCE.LocaleId, 
                SOURCE.AttributeValue, 
                @UserId, 
                @GetDate, 
                @UserId, 
                @GetDate
            FROM #TBL_DefaultAttributeValue SOURCE
            WHERE NOT EXISTS
            (
                SELECT *
                FROM ZnodePimProductAttributeDefaultValue TARGET
                WHERE TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
                        AND TARGET.PimAttributeDefaultValueId = SOURCE.AttributeValue
                        AND TARGET.LocaleId = SOURCE.LocaleId
            );
               

            IF OBJECT_ID('tempdb..#cte_ZnodePimAttributeValue') IS NOT NULL
                DROP TABLE #cte_ZnodePimAttributeValue;

			CREATE TABLE #cte_ZnodePimAttributeValue(PimAttributeValueId int, LocaleId int, AttributeValue nvarchar(max))

			CREATE INDEX Idx_cte_ZnodePimAttributeValue on #cte_ZnodePimAttributeValue(PimAttributeValueId, LocaleId)

			INSERT INTO #cte_ZnodePimAttributeValue (PimAttributeValueId, LocaleId, AttributeValue)
            SELECT a.PimAttributeValueId, b.LocaleId,AttributeValue                
            FROM #ZnodePimAttributeValue AS a
            INNER JOIN #PimProductDetail_Bulk_Process AS b ON(a.PimAttributeId = b.PimAttributeId
                                                                AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0)
                                                                AND a.PimProductId = b.PimProductId)
            WHERE NOT EXISTS ( SELECT TOP 1 1 FROM #TBL_DefaultAttributeId TBLDA WHERE TBLDA.PimAttributeId = b.PimAttributeId )
            AND NOT EXISTS ( SELECT TOP 1 1 FROM #TBL_MediaAttributeId TBLMA WHERE TBLMA.PimAttributeId = b.PimAttributeId )
            AND NOT EXISTS ( SELECT TOP 1 1 FROM #TBL_TextAreaAttributeId TBLTA WHERE TBLTA.PimAttributeId = b.PimAttributeId );

            ---- update ZnodePimAttributeValueLocale : attribute data for Product
            UPDATE TARGET
            SET TARGET.AttributeValue = SOURCE.AttributeValue, 
                TARGET.ModifiedBy = @UserId, 
                TARGET.ModifiedDate = @GetDate
            FROM ZnodePimAttributeValueLocale TARGET
            INNER JOIN #cte_ZnodePimAttributeValue SOURCE ON TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
                                                           AND TARGET.LocaleId = SOURCE.LocaleId;

            ---- inserting AttributeDefaultValue : attribute data for Product
            INSERT INTO ZnodePimAttributeValueLocale
            (
				PimAttributeValueId, 
                LocaleId, 
                AttributeValue, 
                CreatedBy, 
                CreatedDate, 
                ModifiedBy, 
                ModifiedDate
            )
            SELECT 
				SOURCE.PimAttributeValueId, 
                SOURCE.LocaleId, 
                SOURCE.AttributeValue, 
                @UserId, 
                @GetDate, 
                @UserId, 
                @GetDate
            FROM #cte_ZnodePimAttributeValue SOURCE
            WHERE NOT EXISTS
            (
                SELECT *
                FROM ZnodePimAttributeValueLocale TARGET
                WHERE TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
                        AND TARGET.LocaleId = SOURCE.LocaleId
            );

			---- Inserting configurable products into ZnodePimConfigureProductAttribute
            INSERT INTO [ZnodePimConfigureProductAttribute]
            (PimProductId, 
                PimFamilyId, 
                PimAttributeId, 
                CreatedBy, 
                CreatedDate, 
                ModifiedBy, 
                ModifiedDate
            )
            SELECT DISTINCT PD.PimProductId, 
                    NULL, 
                    q.PimAttributeId, 
                    @UserId, 
                    @GetDate, 
                    @UserId, 
                    @GetDate
            FROM #PimProductDetail_Bulk_Process PD
                CROSS APPLY dbo.Split([ConfigureAttributeIds], ',') AS b
                INNER JOIN ZnodePimAttribute AS q ON(q.PimAttributeId = b.Item)
            WHERE NOT EXISTS
            (
                SELECT TOP 1 1
                FROM ZnodePimConfigureProductAttribute RTR
                WHERE RTR.PimProductId = PD.PimProductId
                        AND RTR.PimAttributeId = q.PimAttributeId
            );


			COMMIT TRAN ImportProducts;

            FETCH NEXT FROM cur_BulkData INTO  @MinRow, @MaxRow;
        END;
    CLOSE cur_BulkData;
    DEALLOCATE cur_BulkData;
	-----------Added Performance patch end

		DELETE FROM ZnodePimConfigureProductAttribute  
			WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePimAttributeValue  a WHERE a.PimProductId = ZnodePimConfigureProductAttribute.PimProductId AND a.PimAttributeID = ZnodePimConfigureProductAttribute.PimAttributeID )
			AND EXISTS (SELECT TOP 1 1 FROM ZnodePimAttributeValue a 
			INNER JOIN ZnodePimAttribute ty ON (ty.PimAttributeId = a.PimAttributeId)
			INNER JOIN ZnodePimProductAttributeDefaultValue t ON (t.PimAttributeValueId = a.PimAttributeValueId )
			INNER JOIN ZnodePimAttributeDefaultValue y ON (y.PimAttributeDefaultValueId = t.PimAttributeDefaultValueId)
			INNER JOIN View_loadmanageProductInternal  TU ON (TU.AttributeCode = 'SKU' AND TU.PimProductId = a.PimProductId  )
			WHERE ty.AttributeCode = 'ProductType' AND y.AttributeDefaultValueCode = 'ConfigurableProduct'
			AND a.PimProductId = ZnodePimConfigureProductAttribute.PimProductId
			AND EXISTS (SELECT TOP 1 1 FROM #PimProductDetail1 TM WHERE TM.PimAttributeID = (SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'SKU') AND TM.AttributeValue = TU.AttributeValue )) 
					   
						
		----Delete simple products if inserted in table ZnodePimConfigureProductAttribute 
		DELETE FROM ZnodePimConfigureProductAttribute
		WHERE EXISTS
		(
			SELECT TOP 1 1
			FROM ZnodePimAttributeValue a
					INNER JOIN ZnodePimAttribute ty ON(ty.PimAttributeId = a.PimAttributeId)
					INNER JOIN ZnodePimProductAttributeDefaultValue t ON(t.PimAttributeValueId = a.PimAttributeValueId)
					INNER JOIN ZnodePimAttributeDefaultValue y ON(y.PimAttributeDefaultValueId = t.PimAttributeDefaultValueId)
			WHERE ty.AttributeCode = 'ProductType'
					AND y.AttributeDefaultValueCode = 'SimpleProduct'
					AND a.PimProductId = ZnodePimConfigureProductAttribute.PimProductId
		);

		---- Update family of Product in table ZnodePimConfigureProductAttribute 
		UPDATE ZnodePimConfigureProductAttribute
		SET PimFamilyId = b.PimAttributeFamilyId
		FROM ZnodePimConfigureProductAttribute a
				INNER JOIN ZnodePimProduct b ON a.PimProductId = b.PimProductId;

		---- Updating status of Import Process Log
		UPDATE ZnodeImportProcessLog
			SET 
				STATUS = dbo.Fn_GetImportStatus(2), 
				ProcessCompletedDate = GETDATE()
		WHERE ImportProcessLogId = @ImportProcessLogId;

             COMMIT TRAN ImportProducts;
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE(),ERROR_LINE(),ERROR_PROCEDURE();
            -- UPDATE ZnodeImportProcessLog SET Status = dbo.Fn_GetImportStatus(3), ProcessCompletedDate = @GetDate WHERE ImportProcessLogId = @ImportProcessLogId;
            -- ROLLBACK TRAN ImportProducts;
         END CATCH;
     END;

	 GO
	 IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportInsertUpdatePimCategory')
BEGIN 
	DROP PROCEDURE Znode_ImportInsertUpdatePimCategory
END
GO
CREATE PROCEDURE [dbo].[Znode_ImportInsertUpdatePimCategory]
(   @InsertCategory PIMCATEGORYDETAIL READONLY,
	@Status         BIT OUT,
	@UserId         INT               = 0)
AS
   /* Summary :- This Procedure is used to get the converted category xml into table and call insert update category procedure 
     Unit Testing 
     EXEC Znode_ImportInsertUpdatePimCategory
	*/
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             DECLARE @DefaultCategoryfamily INT= Dbo.fn_GetDefaultvalue('CategoryFamily');
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
			 DECLARE @TBL_PimCategoryId TABLE (PimCategoryAttributeValueId INT,PimCategoryAttributeValueLocaleId INT )
			  DECLARE @PublishStateIdForDraft INT =  [dbo].[Fn_GetPublishStateIdForDraftState]()
			  DECLARE @PublishStateIdForNotPublished INT = [dbo].[Fn_GetPublishStateIdForForNotPublishedState]() 
             DECLARE @PimCategoryAttributeValueId TABLE
             (PimCategoryAttributeValueId INT,
              PimCategoryId               INT,
              PimAttributeId              INT,
              PimAttributeFamilyId        INT
             );
             DECLARE @PimAttributeFamilyId INT;
             DECLARE @PimCategoryId INT;
            
			 SELECT TOP 1 @PimCategoryId = PimCategoryId
             FROM @InsertCategory;
             
			 SELECT TOP 1 @PimAttributeFamilyId = PimAttributeFamilyId
             FROM @InsertCategory;
             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM ZnodePimcategory AS a
                      INNER JOIN @InsertCategory AS b ON(a.PimCategoryId = b.PimCategoryId)
             )
                 BEGIN
                     INSERT INTO ZnodePimcategory
                     (PimAttributeFamilyId,
                      IsActive,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate ,
					  PublishStateid
                     )
                            SELECT PimAttributeFamilyId,
                                   1,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate ,@PublishStateIdForNotPublished
                            FROM @InsertCategory
                            GROUP BY PimCategoryId,
                                     PimAttributeFamilyId;
                     SET @PimCategoryId = SCOPE_IDENTITY();


					  INSERT INTO ZnodePimCategoryAttributeValue
             (PimCategoryId,
              PimAttributeFamilyId,
              PimAttributeId,
              PimAttributeDefaultValueId,
              CreatedBy,
              CreatedDate,
              ModifiedBy,
              ModifiedDate
             )
             OUTPUT INSERTED.PimCategoryAttributeValueId,
                    INSERTED.PimCategoryId,
                    INSERTED.PimAttributeId,
                    INSERTED.PimAttributeFamilyId
                    INTO @PimCategoryAttributeValueId
                    SELECT @PimCategoryId,
                           PimAttributeFamilyId,
                           PimAttributeId,
                           CASE
                               WHEN PimAttributeDefaultValueId = 0
                               THEN NULL
                               ELSE PimAttributeDefaultValueId
                           END,
                           @UserId,
                           @GetDate,
                           @UserId,
                           @GetDate
                    FROM @InsertCategory AS a
                    WHERE NOT EXISTS
                    (
                        SELECT TOP 1 1
                        FROM ZnodePimCategoryAttributeValue AS b
                        WHERE b.PimAttributeId = a.PimAttributeId
                              AND b.PimCategoryId = a.PimCategoryId
                    );

            
             INSERT INTO ZnodePimCategoryAttributeValueLocale
             (LocaleId,
              PimCategoryAttributeValueId,
              CategoryValue,
              CreatedBy,
              CreatedDate,
              ModifiedBy,
              ModifiedDate
             )
                    SELECT DISTINCT
                           LocaleId,
                           b.PimCategoryAttributeValueId,
                           a.AttributeValue,
                           @UserId,
                           @GetDate,
                           @UserId,
                           @GetDate
                    FROM @InsertCategory AS a
                         INNER JOIN @PimCategoryAttributeValueId AS b ON(b.PimAttributeId = a.PimAttributeId
                                                                         AND b.PimAttributeFamilyId = a.PimAttributeFamilyId)
                    WHERE NOT EXISTS
                    (
                        SELECT TOP 1 1
                        FROM ZnodePimCategoryAttributeValueLocale AS c
                        WHERE c.PimCategoryAttributeValueId = b.PimCategoryAttributeValueId
                              AND c.LocaleId = a.LocaleId
                    );

                 END;
             ELSE
			 BEGIN 
             UPDATE ZnodePimcategory
               SET
                   PimAttributeFamilyId = @PimAttributeFamilyId,
                   ModifiedBy = @UserId,
                   ModifiedDate = @GetDate,
				   IsCategoryPublish  = 
					-- IsCategoryPublish = 1 for status published
					-- IsCategoryPublish = 0 for status Draft
					-- IsCategoryPublish = NULL for status NOT published 
						   
					CASE 
					when IsCategoryPublish =1 then  0  -- IF status is publish then status should be draft
					when IsCategoryPublish =0 then 0   -- IF it is draft then it should be draft 
					else null END,  -- if it is not publish then it will not publish
					PublishStateid = @PublishStateIdForDraft 
             WHERE PimCategoryId = @PimCategoryId;
			 
			 UPDATE a
               SET
                   PimAttributeFamilyId = b.PimAttributeFamilyId,
                   --PimAttributeDefaultValueId = b.PimAttributeDefaultValueId,
                   ModifiedBy = @UserId,
                   ModifiedDate = @GetDate
             OUTPUT INSERTED.PimCategoryAttributeValueId,
                    INSERTED.PimCategoryId,
                    INSERTED.PimAttributeId,
                    INSERTED.PimAttributeFamilyId
                    INTO @PimCategoryAttributeValueId
             FROM ZnodePimCategoryAttributeValue a
                  INNER JOIN @InsertCategory b ON(b.PimAttributeId = a.PimAttributeId
                                                  AND b.PimCategoryId = a.PimCategoryId);

			  INSERT INTO ZnodePimCategoryAttributeValue
             (PimCategoryId,
              PimAttributeFamilyId,
              PimAttributeId,
              PimAttributeDefaultValueId,
              CreatedBy,
              CreatedDate,
              ModifiedBy,
              ModifiedDate
             )
             OUTPUT INSERTED.PimCategoryAttributeValueId,
                    INSERTED.PimCategoryId,
                    INSERTED.PimAttributeId,
                    INSERTED.PimAttributeFamilyId
                    INTO @PimCategoryAttributeValueId
                    SELECT PimCategoryId,
                           PimAttributeFamilyId,
                           PimAttributeId,
                           CASE
                               WHEN PimAttributeDefaultValueId = 0
                               THEN NULL
                               ELSE PimAttributeDefaultValueId
                           END,
                           @UserId,
                           @GetDate,
                           @UserId,
                           @GetDate
                    FROM @InsertCategory AS a
                    WHERE NOT EXISTS
                    (
                        SELECT TOP 1 1
                        FROM ZnodePimCategoryAttributeValue AS b
                        WHERE b.PimAttributeId = a.PimAttributeId
                              AND b.PimCategoryId = a.PimCategoryId
                    ) and isnull(a.PimCategoryId,0) <> 0;

			 UPDATE a
               SET
                   CategoryValue = c.AttributeValue,
                   ModifiedBy = @UserId,
                   ModifiedDate = @GetDate
             FROM ZnodePimCategoryAttributeValueLocale a
                  INNER JOIN @PimCategoryAttributeValueId b ON(a.PimCategoryAttributeValueId = b.PimCategoryAttributeValueId)
                  INNER JOIN @InsertCategory c ON(b.PimAttributeId = c.PimAttributeId
                                                  AND c.LocaleId = a.LocaleId);

			INSERT INTO ZnodePimCategoryAttributeValueLocale
             (LocaleId,
              PimCategoryAttributeValueId,
              CategoryValue,
              CreatedBy,
              CreatedDate,
              ModifiedBy,
              ModifiedDate
             )
                    SELECT DISTINCT
                           LocaleId,
                           b.PimCategoryAttributeValueId,
                           a.AttributeValue,
                           @UserId,
                           @GetDate,
                           @UserId,
                           @GetDate
                    FROM @InsertCategory AS a
                         INNER JOIN @PimCategoryAttributeValueId AS b ON(b.PimAttributeId = a.PimAttributeId
                                                                         AND b.PimAttributeFamilyId = a.PimAttributeFamilyId)
                    WHERE NOT EXISTS
                    (
                        SELECT TOP 1 1
                        FROM ZnodePimCategoryAttributeValueLocale AS c
                        WHERE c.PimCategoryAttributeValueId = b.PimCategoryAttributeValueId
                              AND c.LocaleId = a.LocaleId
                    );

		 END 
          
             
            
             SELECT @PimCategoryId AS ID,
                    CAST(1 AS BIT) AS Status;
         END TRY
         BEGIN CATCH
            
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportInsertUpdatePimCategory @UserId = '+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_ImportInsertUpdatePimCategory',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
	 GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportPimCategoryData')
BEGIN 
	DROP PROCEDURE Znode_ImportPimCategoryData
END
GO
CREATE PROCEDURE [dbo].[Znode_ImportPimCategoryData]
(   @TableName          VARCHAR(200),
    @NewGUID            NVARCHAR(200),
    @TemplateId         NVARCHAR(200),
    @ImportProcessLogId INT,
    @UserId             INT,
    @LocaleId           INT,
    @DefaultFamilyId    INT)
AS

    /*
      Summary : Finally Import data into ZnodePimProduct, ZnodePimAttributeValue and ZnodePimAttributeValueLocale Table 
      Process : Flat global temporary table will split into cloumn wise and associted with Znode Attributecodes,
    		    Create group of product with their attribute code and values and inseerted one by one products. 	   
    
      SourceColumnName : CSV file column headers
      TargetColumnName : Attributecode from ZnodePimAttribute Table 

	 ***  Need to log error if transaction failed during insertion of records into table.

	EXEC Znode_ImportPimCategoryData 
    */

     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY
             
             DECLARE @SQLQuery NVARCHAR(MAX);
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @AttributeTypeName NVARCHAR(10), @AttributeCode NVARCHAR(300), @AttributeId INT, @IsRequired BIT, @SourceColumnName NVARCHAR(600), @PimAttributeFamilyId INT, @NewProductId INT, @PimAttributeValueId INT, @status BIT= 0; 
             --Declare error Log Table 

			 IF OBJECT_ID('tempdb.dbo.#DuplicateCategory', 'U') IS NOT NULL 
		     DROP TABLE tempdb.dbo.#DuplicateCategory

             DECLARE @FamilyAttributeDetail TABLE
             (PimAttributeId       INT,
              AttributeTypeName    VARCHAR(300),
              AttributeCode        VARCHAR(300),
              SourceColumnName     NVARCHAR(600),
              IsRequired           BIT,
              PimAttributeFamilyId INT
             );
             IF @DefaultFamilyId = 0
                 BEGIN
                     INSERT INTO @FamilyAttributeDetail
                     (PimAttributeId,
                      AttributeTypeName,
                      AttributeCode,
                      SourceColumnName,
                      IsRequired,
                      PimAttributeFamilyId
                     )
                     --Call Process to insert data of defeult family with cource column name and target column name 
                     EXEC Znode_ImportGetTemplateDetails
                          @TemplateId = @TemplateId,
                          @IsValidationRules = 0,
                          @IsIncludeRespectiveFamily = 1,
                          @IsCategory = 1,
						  @DefaultFamilyId=@DefaultFamilyId;
                     UPDATE @FamilyAttributeDetail
                       SET
                           PimAttributeFamilyId = DBO.Fn_GetCategoryDefaultFamilyId();

					---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
					Delete FAD from @FamilyAttributeDetail FAD
					where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
					and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					               inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
                 END;
             ELSE
                 BEGIN
                     INSERT INTO @FamilyAttributeDetail
                     (PimAttributeId,
                      AttributeTypeName,
                      AttributeCode,
                      SourceColumnName,
                      IsRequired,
                      PimAttributeFamilyId
                     )
                     --Call Process to insert data of defeult family with cource column name and target column name 
                     EXEC Znode_ImportGetTemplateDetails
                          @TemplateId = @TemplateId,
                          @IsValidationRules = 0,
                          @IsIncludeRespectiveFamily = 1,
                          @DefaultFamilyId = @DefaultFamilyId,
                          @IsCategory = 1;

					---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
					Delete FAD from @FamilyAttributeDetail FAD
					where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
					and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					               inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
                 END;  
			 --Read all matched CategoryId with respect to their CategoryCode 
			 --SET @SQLQuery = 
			 --SELECT * FROM ZnodePimCategoryAttributeValue zpca INNER JOIN ZnodePimCategoryAttributeValueLocale zpcal 
			 --ON zpca.PimCategoryAttributeValueId = zpcal.PimCategoryAttributeValueId Inner join ZnodePimAttribute ZPA on zpca.PimAttributeId = zpa.PimAttributeId 
			 --AND ZPA.IsCategory =1 AND ZPA.AttributeCode = 'CategoryCode' 
			 --Inner join ' + @TableName +' tlb ON zpcal.CategoryValue = tlb.CategoryCode

		
             --Read all attribute details with their datatype 

             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM INFORMATION_SCHEMA.TABLES
                 WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#DefaultAttributeValue'
             )
                 BEGIN
                     CREATE TABLE #DefaultAttributeValue
                     (AttributeTypeName          VARCHAR(300),
                      PimAttributeDefaultValueId INT,
                      PimAttributeId             INT,
                      AttributeDefaultValueCode  VARCHAR(100)
                     );
                     INSERT INTO #DefaultAttributeValue
                     (AttributeTypeName,
                      PimAttributeDefaultValueId,
                      PimAttributeId,
                      AttributeDefaultValueCode
                     )
                     --Call Process to insert default data value 
                     EXEC Znode_ImportGetPimAttributeDefaultValue;
                 END;
             ELSE
                 BEGIN
                     DROP TABLE #DefaultAttributeValue;
                 END;  
         
             -- Split horizontal table into verticle table by column name and attribute Value with their 
             -- corresponding AttributeId, Default family , Default AttributeValue Id  
             DECLARE @PimCategoryDetail TABLE
             ([PimCategoryId]              [INT] NULL,
              [PimAttributeId]             [INT] NULL,
              [PimAttributeValueId]        [INT] NULL,
              [PimAttributeDefaultValueId] [INT] NULL,
              [PimAttributeFamilyId]       [INT] NULL,
              [LocaleId]                   [INT] NULL,
              [AttributeCode]              [VARCHAR](500) NULL,
              [AttributeValue]             [NVARCHAR](MAX) NULL,
              [RowNumber]                  INT 
             );
             -- Column wise split data from source table ( global temporary table ) and inserted into temporary table variable @PimCategoryDetail
             -- Add PimAttributeDefaultValue 

             DECLARE Cr_AttributeDetails CURSOR LOCAL FAST_FORWARD
             FOR SELECT PimAttributeId,
                        AttributeTypeName,
                        AttributeCode,
                        IsRequired,
                        SourceColumnName,
                        PimAttributeFamilyId
                 FROM @FamilyAttributeDetail
                 WHERE ISNULL(SourceColumnName, '') <> '';
             OPEN Cr_AttributeDetails;
             FETCH NEXT FROM Cr_AttributeDetails INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @PimAttributeFamilyId;
             WHILE @@FETCH_STATUS = 0
                 BEGIN
                     SET @NewProductId = 0;
                     SET @SQLQuery = 'SELECT '''+CONVERT(VARCHAR(100), @PimAttributeFamilyId)+''' PimAttributeFamilyId, 0 PimCategoryId,'''+CONVERT(VARCHAR(100), @AttributeId)+''' AttributeId ,
						   (SELECT TOP 1 PimAttributeDefaultValueId FROM #DefaultAttributeValue Where PimAttributeId =  '+CONVERT(VARCHAR(100), @AttributeId)+'AND  AttributeDefaultValueCode = TN.'+@SourceColumnName+' ) PimAttributeDefaultValueId,'+@SourceColumnName+','+CONVERT(VARCHAR(100), @LocaleId)+'LocaleId,RowNumber FROM '+@TableName+' TN';
                     INSERT INTO @PimCategoryDetail
                     ([PimAttributeFamilyId],
                      [PimCategoryId],
                      [PimAttributeId],
                      [PimAttributeDefaultValueId],
                      AttributeValue,
                      LocaleId,
                      RowNumber
                     )
                     EXEC sys.sp_sqlexec
                          @SQLQuery;
                     FETCH NEXT FROM Cr_AttributeDetails INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @PimAttributeFamilyId;
                 END;
             CLOSE Cr_AttributeDetails;
             DEALLOCATE Cr_AttributeDetails;
             UPDATE ppdti
               SET
                   ppdti.AttributeValue = CASE
                                              WHEN ppdti.AttributeValue = 'Yes/No'
                                              THEN 'False'
                                          END
             FROM @PimCategoryDetail ppdti
                  INNER JOIN #DefaultAttributeValue dav ON dav.PimAttributeDefaultValueId = ppdti.PimAttributeDefaultValueId
             WHERE ISNULL(ppdti.AttributeValue, '') = '';

			 SELECT PCD.AttributeValue
			 INTO #DuplicateCategory
			 FROM @PimCategoryDetail PCD
			 INNER JOIN ZnodePimAttribute PA ON (PCD.PimAttributeId = PA.PimAttributeId)
			 where PA.AttributeCode = 'CategoryCode' 
			 GROUP BY PCD.AttributeValue
			 Having Count(*) > 1


			INSERT INTO ZnodeImportLog
			(ErrorDescription,ColumnName,Data,RowNumber,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
			 SELECT '53' ,'CategoryCode',PCD.AttributeValue,PCD.RowNumber,@NewGUID,2,GETDATE(),2,GETDATE(),@ImportProcessLogId
			 FROM @PimCategoryDetail PCD
			 WHERE RowNumber IN (SELECT RowNumber frOM #DuplicateCategory DC 
								 INNER JOIN ZnodePimAttribute PA ON (PCD.PimAttributeId = PA.PimAttributeId)
								 WHERE PA.AttributeCode = 'CategoryCode' 
								 AND PCD.AttributeValue = DC.AttributeValue )

			
			 ----update mediaid for CategoryImage
			 select zm.FileName,max(MediaId) as MediaId, PCD.RowNumber
			 into #CategoryImage
			 from ZnodeMedia ZM
			 inner join @PimCategoryDetail PCD on ZM.FileName = PCD.AttributeValue
			 where exists(select * from ZnodePimAttribute c where PCD.PimAttributeId = c.PimAttributeId and c.AttributeCode = 'CategoryImage')
			 group by zm.FileName, PCD.RowNumber 
			 
			update a set a.AttributeValue = b.MediaId
			from @PimCategoryDetail a
			inner join #CategoryImage b on a.AttributeValue = b.FileName and a.RowNumber = b.RowNumber
				
			 ----update PimCategoryId present in znode on basis of CategoryCode
			 update d set  d.PimCategoryId = a.PimCategoryId
			 from ZnodePimCategoryAttributeValue a
			 inner join ZnodePimCategoryAttributeValueLocale b on a.PimCategoryAttributeValueId = b.PimCategoryAttributeValueId
			 inner join ZnodePimAttribute c on a.PimAttributeId = c.PimAttributeId
			 inner join @PimCategoryDetail d on d.AttributeValue = b.CategoryValue and c.PimAttributeId = d.PimAttributeId
			 where c.AttributeCode = 'CategoryCode' 

			 ----update PimCategoryId for other attributes if category is present
			 ;WITH CTE_UpdateCategoryId AS
			(
				select PimCategoryId, RowNumber from @PimCategoryDetail where isnull(PimCategoryId,0) <> 0
			)
			UPDATE PCD set PCD.PimCategoryId = UC.PimCategoryId
			FROM @PimCategoryDetail PCD
			INNER JOIN CTE_UpdateCategoryId UC on PCD.RowNumber = UC.RowNumber
			 ---------------------------

             -- Pass product records one by one 
             DECLARE @IncrementalId INT= 1;
             DECLARE @SequenceId INT=
             (
                 SELECT MAX(RowNumber)
                 FROM @PimCategoryDetail
             );
             DECLARE @PimCategoryDetailToInsert PIMCATEGORYDETAIL;  --User define table type to pass multiple records of product in single step

             WHILE @IncrementalId <= @SequenceId
                 BEGIN
                     INSERT INTO @PimCategoryDetailToInsert
                     ([PimCategoryId],
                      [PimAttributeId],
                      [PimAttributeValueId],
                      [PimAttributeDefaultValueId],
                      [PimAttributeFamilyId],
                      [LocaleId],
                      [AttributeCode],
                      [AttributeValue]
                     )
                            SELECT [PimCategoryId],
                                   [PimAttributeId],
                                   [PimAttributeValueId],
                                   [PimAttributeDefaultValueId],
                                   [PimAttributeFamilyId],
                                   [LocaleId],
                                   [AttributeCode],
                                   [AttributeValue]
                            FROM @PimCategoryDetail
                            WHERE [@PimCategoryDetail].RowNumber = @IncrementalId AND LTRIM(RTRIM([AttributeValue])) <> '';
                     --ORDER BY [@PimCategoryDetail].RowNumber;
                     ----Call process to finally insert data into 
                     ----------------------------------------------------------
                     --1. [dbo].[ZnodePimProduct]
                     --2. [dbo].[ZnodePimAttributeValue]
                     --3. [dbo].[ZnodePimAttributeValueLocale]

                     EXEC [Znode_ImportInsertUpdatePimCategory]
                          @InsertCategory = @PimCategoryDetailToInsert,
                          @UserID = @UserID,
                          @status = @status OUT;--,@IsNotReturnOutput=1;
                     DELETE FROM @PimCategoryDetailToInsert;
                     SET @IncrementalId = @IncrementalId + 1;
                 END;

			
				-- Update Record count in log 
				DECLARE @FailedRecordCount BIGINT
				DECLARE @SuccessRecordCount BIGINT
				SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
				SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
				EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount OUTPUT
				UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
				WHERE ImportProcessLogId = @ImportProcessLogId;
				

             UPDATE ZnodeImportProcessLog
             SET   Status = dbo.Fn_GetImportStatus(2),
                   ProcessCompletedDate = @GetDate
             WHERE ImportProcessLogId = @ImportProcessLogId;		   	  
            
			IF OBJECT_ID('tempdb.dbo.#DuplicateCategory', 'U') IS NOT NULL 
		     DROP TABLE tempdb.dbo.#DuplicateCategory

         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE(),
                    ERROR_LINE(),
                    ERROR_PROCEDURE();
             UPDATE ZnodeImportProcessLog
               SET
                   Status = dbo.Fn_GetImportStatus(3),
                   ProcessCompletedDate = @GetDate
             WHERE ImportProcessLogId = @ImportProcessLogId;
            
         END CATCH;
     END;
	 GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportValidateManditoryText')
BEGIN 
	DROP PROCEDURE Znode_ImportValidateManditoryText
END
GO

CREATE PROCEDURE [dbo].[Znode_ImportValidateManditoryText]
	(@TableName          VARCHAR(200),
	@SourceColumnName   NVARCHAR(600),
	@CreateDateString   NVARCHAR(300),
	@ValidationName     VARCHAR(100),
	@ControlName        VARCHAR(300),
	@ValidationValue    VARCHAR(300),
	@NewGUID            NVARCHAR(200),
	@LocaleId           INT = 1 ,
	@DefaultLocaleId    INT,
	@AttributeId        INT,
	@ImportProcessLogId INT,
	@ImportHeadId     INT           = 0)
AS
     
 /*
	Summary:  Text 
             --------------------------
              Control   Validation Rule
             --------------------------
             1 Select	ValidationRule
             2 Text	RegularExpression
             3 Number	MaxCharacters
             4 Yes/No	UniqueValue

	Unit Testing:
	EXEC Znode_ImportValidateManditoryText
	 */
	 
	 BEGIN
        BEGIN TRY 
            SET NOCOUNT ON


             DECLARE @SQLQuery NVARCHAR(MAX), @ImportHeadName NVARCHAR(100);
             SET @ImportHeadName = DBO.Fn_GetDefaultImportHead(@ImportHeadId);
			 
			 IF @ControlName = 'Number' AND @ValidationName IN('MaxCharacters')  AND ISNULL(@ValidationValue, '') <> ''
                 BEGIN
                     SET @SQLQuery = @TableName+'  WHERE LEN('+@SourceColumnName+') > ' +   @ValidationValue + ' AND Isnull('+@SourceColumnName+','''') <> ''''';
                    

					IF @ValidationName = 'MaxCharacters'
                         EXEC Znode_ImportGenerateErrorLog
                              @ImportHeadName = @ImportHeadName,
                              @QueryCriteria = @SQLQuery,
                              @SourceColumnName = @SourceColumnName,
                              @CreateDateString = @CreateDateString,
                              @ErrorCode = '44',
                              @ValidationValue = @ValidationValue;
                  END;
             IF @ControlName = 'Yes/No' AND @ValidationName IN('UniqueValue') AND @ValidationValue = 'true'
                 BEGIN
					-- Check duplicate value exist in global temporary table 
					SET @SQLQuery = 'SELECT ''53'' ErrorDescription,'''+@SourceColumnName+''' as [ColumnName], '+@SourceColumnName+' AS  AttributeValue,RowNumber ,GUID,  '+@CreateDateString+' 
					FROM '+@TableName+'   WHERE RowNumber in (Select RowNumber from '+@TableName+' where '+@SourceColumnName+' in (Select '+@SourceColumnName+' from '+@TableName+' GROUP BY '+@SourceColumnName+' having COUNT(*) > 1) )';
                     
					INSERT INTO ZnodeImportLog (ErrorDescription, ColumnName, Data, RowNumber, GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
					EXEC sys.sp_sqlexec @SQLQuery;

					---- Check duplicate value exist in znode database
					--If (@ImportHeadName in  ('Product'))
					--BEGIN
					-- SET @SQLQuery = 'SELECT ''10 '' ErrorDescription,'''+@SourceColumnName+''' as [ColumnName], '+@SourceColumnName+' AS  AttributeValue,tlb.RowNumber ,GUID,  '+@CreateDateString+' 
					--				  FROM ZnodePimAttributeValue AS ZPAV INNER JOIN ZnodePimAttributeValueLocale AS ZPAVL ON 
					--				  (ZPAVL.PimAttributeValueId = ZPAV.PimAttributeValueId AND ZPAVL.LocaleId IN ('+CONVERT(VARCHAR(100), @LocaleId)+','+CONVERT(VARCHAR(100), @DefaultLocaleId)+')) 
					--				  INNER JOIN '+@TableName+' tlb ON ZPAVL.AttributeValue = tlb.'+@SourceColumnName+' 
					--				  WHERE ZPAV.PimAttributeId = '+CONVERT(VARCHAR(100), @AttributeId)+' AND ZPAVL.AttributeValue <> ''''';

					-- INSERT INTO ZnodeImportLog
					-- (ErrorDescription,ColumnName,Data,RowNumber,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
					-- EXEC sys.sp_sqlexec @SQLQuery;

					-- --Remove wrong data from table 
					-- --SET @SQLQuery = 'DELETE FROM '+@TableName+' WHERE RowNumber in (Select Isnull(RowNumber,0) FROM ZnodeImportLog 
					--	--			  WHERE ErrorDescription =10 AND ImportProcessLogId  = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+');';
					-- --EXEC sys.sp_sqlexec @SQLQuery;
					--END

					--If (@ImportHeadName in  ('Category'))
					--BEGIN
				
					--	SET @SQLQuery = 'SELECT ''10 '' ErrorDescription,'''+@SourceColumnName+''' as [ColumnName], '+@SourceColumnName+' AS  AttributeValue,tlb.RowNumber ,GUID,  '+@CreateDateString+' 
					--	FROM ZnodePimCategoryAttributeValue AS ZPAV INNER JOIN ZnodePimCategoryAttributeValueLocale AS ZPAVL ON 
					--	(ZPAVL.PimCategoryAttributeValueId = ZPAV.PimCategoryAttributeValueId AND ZPAVL.LocaleId IN ('+CONVERT(VARCHAR(100), @LocaleId)+','+CONVERT(VARCHAR(100), @DefaultLocaleId)+')) 
					--	INNER JOIN '+@TableName+' tlb ON ZPAVL.CategoryValue = tlb.'+@SourceColumnName+' 
					--	WHERE ZPAV.PimAttributeId = '+CONVERT(VARCHAR(100), @AttributeId)+' AND ZPAVL.CategoryValue <> ''''';
					
					--	INSERT INTO ZnodeImportLog
					--	(ErrorDescription,ColumnName,Data,RowNumber,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
					--	EXEC sys.sp_sqlexec @SQLQuery;
					
					-- END
					---- Check duplicate value exist in znode database
				
				     If (@ImportHeadName in  ('Category'))
					BEGIN
						SET @SQLQuery = 'SELECT ''35 '' ErrorDescription,'''+@SourceColumnName+''' as [ColumnName], '+@SourceColumnName+' AS  AttributeValue,tlb.RowNumber ,GUID,  '+@CreateDateString+' 
						FROM '+@TableName+' tlb
						WHERE ltrim(rtrim(isnull(tlb.CategoryCode,''''))) like ''% %'''
						;

						INSERT INTO ZnodeImportLog
						(ErrorDescription,ColumnName,Data,RowNumber,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
						EXEC sys.sp_sqlexec @SQLQuery;

						SET @SQLQuery = 'SELECT ''35 '' ErrorDescription,'''+@SourceColumnName+''' as [ColumnName], '+@SourceColumnName+' AS  AttributeValue,tlb.RowNumber ,GUID,  '+@CreateDateString+' 
						FROM '+@TableName+' tlb
						WHERE ltrim(rtrim(isnull(tlb.CategoryCode,''''))) like ''%[^0-9A-Za-z]%'''
						;

						INSERT INTO ZnodeImportLog
						(ErrorDescription,ColumnName,Data,RowNumber,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
						EXEC sys.sp_sqlexec @SQLQuery;

						SET @SQLQuery = 'SELECT ''35 '' ErrorDescription,'''+@SourceColumnName+''' as [ColumnName], '+@SourceColumnName+' AS  AttributeValue,tlb.RowNumber ,GUID,  '+@CreateDateString+' 
						FROM '+@TableName+' tlb
						WHERE ltrim(rtrim(isnull(tlb.CategoryCode,''''))) NOT LIKE ''%[^0-9]%'''
						;

						INSERT INTO ZnodeImportLog
						(ErrorDescription,ColumnName,Data,RowNumber,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
						EXEC sys.sp_sqlexec @SQLQuery;

						
					END

                 END;
         END TRY
         BEGIN CATCH
               DECLARE @Status BIT ;
		     SET @Status = 0;
			 DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportValidateManditoryText @TableName = '+@TableName+',@SourceColumnName='+@SourceColumnName+',@CreateDateString='+@CreateDateString+',@ValidationName='+@ValidationName+',@ControlName = '+@ControlName+',@ValidationValue='+@ValidationValue+',@NewGUID='+@NewGUID+',@LocaleId='+CAST(@LocaleId AS VARCHAR(50))+',@DefaultLocaleId='+CAST(@DefaultLocaleId AS VARCHAR(50))+',@AttributeId='+CAST(@AttributeId AS VARCHAR(50))+',@ImportHeadId='+CAST(@ImportHeadId AS VARCHAR(50))+',@ImportProcessLogId='+CAST(@ImportProcessLogId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_ImportValidateManditoryText',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
	 GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_CopyPortal')
BEGIN 
	DROP PROCEDURE Znode_CopyPortal
END
GO

    
CREATE PROCEDURE [dbo].[Znode_CopyPortal]    
(    
   @PortalId int,     
   @StoreName varchar(500),    
   @CompanyName varchar(500),     
   @UserId int,    
   @StoreCode nvarchar(200),    
   @Status bit OUT)    
AS    
    /*    
     
 Summary: Create copy of existing portal    
 Copy all corresponding data into following list of tables Catalog,Profile,Units,Countries,Shipping,Locale,SMTP    
    
 ZnodeTaxClass ZnodeTaxClassPortal;ZnodeTaxRuleTypes ZnodeCaseRequest,ZnodeUserPortal ZnodeDomain,AspNetZnodeUser ZnodePortalAccount,    
 ZnodePortal ZnodePortalAddress,ZnodePortalCatalog ZnodePortalLocale,ZnodePortalFeatureMapper, ZnodeOmsUsersReferralUrl,ZnodePortalProfile ,ZnodePortalSetting    
 ZnodePortalShippingDetails ZnodePortalSmtpSetting,ZnodePortalWarehouse ,ZnodeOmsCookieMapping,ZnodePortalUnit ,ZnodePromotion,    
 ZnodePriceListPortal ,ZnodeActivityLog,ZnodeShippingPortal,ZnodeGiftCard ,ZnodeCMSContentPages,ZnodePortalDisplaySetting ,ZnodeCMSPortalMessage,    
 ZnodeCMSPortalProductPage ,ZnodeCMSPortalSEOSetting ,ZnodeCMSPortalTheme    
        
 Unit Testing       
    ------------------------------------------------------------------------------    
               
    begin tran    
    DECLARE @Status  bit     
       EXEC Znode_CopyPortal @PortalId =2 ,@StoreName  ='copy OF Maxwells FF' , @CompanyName = 'copy OF Maxwells FF' ,@UserId = 2, @StoreCode = '',@Status = @Status OUT     
       rollback tran    
    select @Status    
       SELECT * FROM dbo.ZnodePortal zp WHERE zp.CompanyName = 'copy OF Maxwells FF'    
       SELECT * FROM ZnodePortalCatalog WHERE dbo.ZnodePortalCatalog.PortalId IN (SELECT portalid FROM dbo.ZnodePortal zp  WHERE zp.CompanyName = 'copy OF Maxwells FF')    
       SELECT * FROM ZnodePortalProfile WHERE dbo.ZnodePortalProfile.PortalId IN (SELECT portalid FROM dbo.ZnodePortal zp  WHERE zp.CompanyName = 'copy OF Maxwells FF')    
       SELECT * FROM ZnodePortalUnit WHERE dbo.ZnodePortalUnit.PortalId IN (SELECT portalid FROM dbo.ZnodePortal zp  WHERE zp.CompanyName = 'copy OF Maxwells FF')    
       SELECT * FROM ZnodePortalCountry WHERE dbo.ZnodePortalCountry.PortalId IN (SELECT portalid FROM dbo.ZnodePortal zp  WHERE zp.CompanyName = 'copy OF Maxwells FF')    
       SELECT * FROM ZnodePortalShippingDetails WHERE dbo.ZnodePortalShippingDetails.PortalId IN (SELECT portalid FROM dbo.ZnodePortal zp  WHERE zp.CompanyName = 'copy OF Maxwells FF')    
       SELECT * FROM ZnodePortalLocale WHERE dbo.ZnodePortalLocale.PortalId IN (SELECT portalid FROM dbo.ZnodePortal zp  WHERE zp.CompanyName = 'copy OF Maxwells FF')    
       SELECT * FROM ZnodePortalSmtpSetting WHERE dbo.ZnodePortalSmtpSetting.PortalId IN (SELECT portalid FROM dbo.ZnodePortal zp  WHERE zp.CompanyName = 'copy OF Maxwells FF')    
          
    ---------------------------------------------------------------------------     
     */    
BEGIN    
 BEGIN TRAN A;    
 BEGIN TRY    
  SET NOCOUNT ON;    
  DECLARE @GetDate DATETIME = dbo.Fn_GetDate();    
  -- hold the newly created pim catalog id     
  DECLARE @NewPortalId int;     
  --Check if store name is not already exist then process copy    
      
      
  IF @StoreCode NOT IN (select  storecode from ZnodePortal )    
  BEGIN    
      
  IF EXISTS ( SELECT TOP 1 1 FROM dbo.ZnodePortal AS zp WHERE PortalId = @PortalId  )     
  AND @CompanyName <> '' AND @StoreName <> '' AND @StoreCode <> '' --AND  @StoreCode <> (select  storecode from ZnodePortal )     
      
  BEGIN    
    
   INSERT INTO dbo.ZnodePortal(    
   --PortalId - this column value is auto-generated    
   CompanyName, StoreName, LogoPath, UseSSL, AdminEmail, SalesEmail, CustomerServiceEmail, SalesPhoneNumber, CustomerServicePhoneNumber, ImageNotAvailablePath, ShowSwatchInCategory, ShowAlternateImageInCategory, ExternalID, MobileLogoPath, DefaultOrderStateID, DefaultReviewStatus, SplashCategoryID, SplashImageFile, MobileTheme,InStockMsg,OutOfStockMsg,BackOrderMsg,CreatedBy, CreatedDate, ModifiedBy, ModifiedDate ,StoreCode)    
   SELECT @CompanyName, @StoreName, LogoPath, UseSSL, AdminEmail, SalesEmail, CustomerServiceEmail, SalesPhoneNumber, CustomerServicePhoneNumber, ImageNotAvailablePath, ShowSwatchInCategory, ShowAlternateImageInCategory, ExternalID, MobileLogoPath, DefaultOrderStateID, DefaultReviewStatus, SplashCategoryID, SplashImageFile, MobileTheme,InStockMsg,OutOfStockMsg,BackOrderMsg, @UserId, @GetDate, @UserId, @GetDate ,@StoreCode    
   FROM ZnodePortal    
   WHERE PortalId = @PortalId;    
   SET @NewPortalId = SCOPE_IDENTITY();    
  END;    
  END    
    
  -- copy all data if New portalId will generate    
  IF @NewPortalId > -0     
  BEGIN    
   INSERT INTO dbo.ZnodePortalCatalog(    
   --PortalCatalogId - this column value is auto-generated    
   PortalId, PublishCatalogId, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )    
       SELECT @NewPortalId, PublishCatalogId, @UserId, @GetDate, @UserId, @GetDate    
       FROM ZnodePortalCatalog    
       WHERE PortalId = @PortalId;    
   INSERT INTO dbo.ZnodePortalProfile(    
   --PortalProfileID - this column value is auto-generated    
   PortalId, ProfileId, IsDefaultAnonymousProfile, IsDefaultRegistedProfile, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )    
       SELECT @NewPortalId, ProfileId, IsDefaultAnonymousProfile, IsDefaultRegistedProfile, @UserId, @GetDate, @UserId, @GetDate    
       FROM ZnodePortalProfile    
       WHERE PortalId = @PortalId;    
   INSERT INTO dbo.ZnodePortalUnit(    
   --PortalUnitId - this column value is auto-generated    
   PortalId, CurrencyId,CultureId, WeightUnit, DimensionUnit,CurrencySuffix, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )    
       SELECT @NewPortalId, CurrencyId,CultureId, WeightUnit, DimensionUnit,CurrencySuffix, @UserId, @GetDate, @UserId, @GetDate    
       FROM ZnodePortalUnit    
       WHERE PortalId = @PortalId;    
   INSERT INTO dbo.ZnodePortalCountry(    
   --PortalCountryId - this column value is auto-generated    
   PortalId, CountryCode, IsDefault, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )    
       SELECT @NewPortalId, CountryCode, IsDefault, @UserId, @GetDate, @UserId, @GetDate    
       FROM ZnodePortalCountry    
       WHERE PortalId = @PortalId;    
   INSERT INTO dbo.ZnodeShippingPortal(    
   --ShippingPortalId - this column value is auto-generated    
   PortalId, ShippingOriginAddress1, ShippingOriginAddress2, ShippingOriginCity, ShippingOriginStateCode, ShippingOriginZipCode, ShippingOriginCountryCode, ShippingOriginPhone, FedExAccountNumber, FedExLTLAccountNumber, FedExMeterNumber, FedExProductionKey, FedExSecurityCode, FedExDropoffType, FedExPackagingType, FedExUseDiscountRate, FedExAddInsurance, UPSUserName, UPSPassword, UPSKey, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, PublishStateId )    
       SELECT @NewPortalId, ShippingOriginAddress1, ShippingOriginAddress2, ShippingOriginCity, ShippingOriginStateCode, ShippingOriginZipCode, ShippingOriginCountryCode, ShippingOriginPhone, FedExAccountNumber, FedExLTLAccountNumber, FedExMeterNumber, FedExProductionKey, FedExSecurityCode, FedExDropoffType, FedExPackagingType, FedExUseDiscountRate, FedExAddInsurance, UPSUserName, UPSPassword, UPSKey, @UserId, @GetDate, @UserId, @GetDate, PublishStateId    
       FROM ZnodeShippingPortal    
       WHERE PortalId = @PortalId;    
   INSERT INTO dbo.ZnodePortalLocale(    
   --PortalLocaleId - this column value is auto-generated    
   PortalId, LocaleId, IsDefault, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )    
       SELECT @NewPortalId, LocaleId, IsDefault, @UserId, @GetDate, @UserId, @GetDate    
       FROM ZnodePortalLocale    
       WHERE PortalId = @PortalId;    
   INSERT INTO dbo.ZnodePortalSmtpSetting(    
   --PortalSmtpSettingId - this column value is auto-generated    
   PortalId, ServerName, UserName, Password, Port, IsEnableSsl, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate,DisableAllEmails )    
       SELECT @NewPortalId, ServerName, UserName, Password, Port, IsEnableSsl, @UserId, @GetDate, @UserId, @GetDate,DisableAllEmails    
 FROM ZnodePortalSmtpSetting    
       WHERE PortalId = @PortalId;    
   INSERT INTO dbo.ZnodePortalDisplaySetting(    
   --PortalDisplaySettingsId - this column value is auto-generated    
   PortalId, MediaId, MaxDisplayItems, MaxSmallThumbnailWidth, MaxSmallWidth, MaxMediumWidth, MaxThumbnailWidth, MaxLargeWidth, MaxCrossSellWidth, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )    
       SELECT @NewPortalId, MediaId, MaxDisplayItems, MaxSmallThumbnailWidth, MaxSmallWidth, MaxMediumWidth, MaxThumbnailWidth, MaxLargeWidth, MaxCrossSellWidth, @UserId, @GetDate, @UserId, @GetDate    
       FROM ZnodePortalDisplaySetting    
       WHERE PortalId = @PortalId;    
   INSERT INTO dbo.ZnodeCMSPortalTheme(    
   --CMSPortalThemeId - this column value is auto-generated    
   PortalId, CMSThemeId, CMSThemeCSSId, MediaId, WebsiteTitle, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )    
       SELECT @NewPortalId, CMSThemeId, CMSThemeCSSId, MediaId, WebsiteTitle, @UserId, @GetDate, @UserId, @GetDate    
       FROM ZnodeCMSPortalTheme    
       WHERE PortalId = @PortalId;    
   INSERT INTO dbo.ZnodePortalFeatureMapper(    
   --PortalFeatureMapperId - this column value is auto-generated    
   PortalId, PortalFeatureId, PortalFeatureMapperValue, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )    
       SELECT @NewPortalId, PortalFeatureId, PortalFeatureMapperValue, @UserId, @GetDate, @UserId, @GetDate    
       FROM ZnodePortalFeatureMapper    
       WHERE PortalId = @PortalId;    
       
      EXEC Znode_CopyPortalMessageAndContentPages @PortalId,@NewPortalId,@userId,0    
          
   EXEC Znode_CopyPortalEmailTemplate @NewPortalId,@PortalId,@userId    
   -- If copy process will complete successfully then return status 1     
   -- return the data set if     
   SELECT @PortalId AS ID, CAST(1 AS bit) AS [Status];     
   SET @Status = CAST(1 AS bit);    
   COMMIT TRAN A;    
  END;    
  ELSE    
  BEGIN    
   -- If copy process will not complete successfully then return status 0     
   SELECT @PortalId AS ID, CAST(0 AS bit) AS [Status];    
   SET @Status = CAST(0 AS bit);    
   ROLLBACK TRAN A;    
  END;    
 END TRY    
 BEGIN CATCH     
   select ERROR_MESSAGE()    
       SET @Status = 0;    
       DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_CopyPortal @PortalId = '+CAST(@PortalId AS VARCHAR(200))+',@StoreName='+@StoreName+',@CompanyName='+@CompanyName+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));    
                      
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                        
        
             EXEC Znode_InsertProcedureErrorLog    
    @ProcedureName = 'Znode_CopyPortal',    
    @ErrorInProcedure = @Error_procedure,    
    @ErrorMessage = @ErrorMessage,    
    @ErrorLine = @ErrorLine,    
    @ErrorCall = @ErrorCall;    
 END CATCH;    
END

GO


IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_CopyPortal')
BEGIN 
	DROP PROCEDURE Znode_CopyPortal
END
GO
    
CREATE PROCEDURE [dbo].[Znode_CopyPortal]    
(    
   @PortalId int,     
   @StoreName varchar(500),    
   @CompanyName varchar(500),     
   @UserId int,    
   @StoreCode nvarchar(200),    
   @Status bit OUT)    
AS    
    /*    
     
 Summary: Create copy of existing portal    
 Copy all corresponding data into following list of tables Catalog,Profile,Units,Countries,Shipping,Locale,SMTP    
    
 ZnodeTaxClass ZnodeTaxClassPortal;ZnodeTaxRuleTypes ZnodeCaseRequest,ZnodeUserPortal ZnodeDomain,AspNetZnodeUser ZnodePortalAccount,    
 ZnodePortal ZnodePortalAddress,ZnodePortalCatalog ZnodePortalLocale,ZnodePortalFeatureMapper, ZnodeOmsUsersReferralUrl,ZnodePortalProfile ,ZnodePortalSetting    
 ZnodePortalShippingDetails ZnodePortalSmtpSetting,ZnodePortalWarehouse ,ZnodeOmsCookieMapping,ZnodePortalUnit ,ZnodePromotion,    
 ZnodePriceListPortal ,ZnodeActivityLog,ZnodeShippingPortal,ZnodeGiftCard ,ZnodeCMSContentPages,ZnodePortalDisplaySetting ,ZnodeCMSPortalMessage,    
 ZnodeCMSPortalProductPage ,ZnodeCMSPortalSEOSetting ,ZnodeCMSPortalTheme    
        
 Unit Testing       
    ------------------------------------------------------------------------------    
               
    begin tran    
    DECLARE @Status  bit     
       EXEC Znode_CopyPortal @PortalId =2 ,@StoreName  ='copy OF Maxwells FF' , @CompanyName = 'copy OF Maxwells FF' ,@UserId = 2, @StoreCode = '',@Status = @Status OUT     
       rollback tran    
    select @Status    
       SELECT * FROM dbo.ZnodePortal zp WHERE zp.CompanyName = 'copy OF Maxwells FF'    
       SELECT * FROM ZnodePortalCatalog WHERE dbo.ZnodePortalCatalog.PortalId IN (SELECT portalid FROM dbo.ZnodePortal zp  WHERE zp.CompanyName = 'copy OF Maxwells FF')    
       SELECT * FROM ZnodePortalProfile WHERE dbo.ZnodePortalProfile.PortalId IN (SELECT portalid FROM dbo.ZnodePortal zp  WHERE zp.CompanyName = 'copy OF Maxwells FF')    
       SELECT * FROM ZnodePortalUnit WHERE dbo.ZnodePortalUnit.PortalId IN (SELECT portalid FROM dbo.ZnodePortal zp  WHERE zp.CompanyName = 'copy OF Maxwells FF')    
       SELECT * FROM ZnodePortalCountry WHERE dbo.ZnodePortalCountry.PortalId IN (SELECT portalid FROM dbo.ZnodePortal zp  WHERE zp.CompanyName = 'copy OF Maxwells FF')    
       SELECT * FROM ZnodePortalShippingDetails WHERE dbo.ZnodePortalShippingDetails.PortalId IN (SELECT portalid FROM dbo.ZnodePortal zp  WHERE zp.CompanyName = 'copy OF Maxwells FF')    
       SELECT * FROM ZnodePortalLocale WHERE dbo.ZnodePortalLocale.PortalId IN (SELECT portalid FROM dbo.ZnodePortal zp  WHERE zp.CompanyName = 'copy OF Maxwells FF')    
       SELECT * FROM ZnodePortalSmtpSetting WHERE dbo.ZnodePortalSmtpSetting.PortalId IN (SELECT portalid FROM dbo.ZnodePortal zp  WHERE zp.CompanyName = 'copy OF Maxwells FF')    
          
    ---------------------------------------------------------------------------     
     */    
BEGIN    
 BEGIN TRAN A;    
 BEGIN TRY    
  SET NOCOUNT ON;    
  DECLARE @GetDate DATETIME = dbo.Fn_GetDate();    
  -- hold the newly created pim catalog id     
  DECLARE @NewPortalId int;     
  --Check if store name is not already exist then process copy    
      
      
  IF @StoreCode NOT IN (select  storecode from ZnodePortal )    
  BEGIN    
      
  IF EXISTS ( SELECT TOP 1 1 FROM dbo.ZnodePortal AS zp WHERE PortalId = @PortalId  )     
  AND @CompanyName <> '' AND @StoreName <> '' AND @StoreCode <> '' --AND  @StoreCode <> (select  storecode from ZnodePortal )     
      
  BEGIN    
    
   INSERT INTO dbo.ZnodePortal(    
   --PortalId - this column value is auto-generated    
   CompanyName, StoreName, LogoPath, UseSSL, AdminEmail, SalesEmail, CustomerServiceEmail, SalesPhoneNumber, CustomerServicePhoneNumber, ImageNotAvailablePath, ShowSwatchInCategory, ShowAlternateImageInCategory, ExternalID, MobileLogoPath, DefaultOrderStateID, DefaultReviewStatus, SplashCategoryID, SplashImageFile, MobileTheme,InStockMsg,OutOfStockMsg,BackOrderMsg,CreatedBy, CreatedDate, ModifiedBy, ModifiedDate ,StoreCode)    
   SELECT @CompanyName, @StoreName, LogoPath, UseSSL, AdminEmail, SalesEmail, CustomerServiceEmail, SalesPhoneNumber, CustomerServicePhoneNumber, ImageNotAvailablePath, ShowSwatchInCategory, ShowAlternateImageInCategory, ExternalID, MobileLogoPath, DefaultOrderStateID, DefaultReviewStatus, SplashCategoryID, SplashImageFile, MobileTheme,InStockMsg,OutOfStockMsg,BackOrderMsg, @UserId, @GetDate, @UserId, @GetDate ,@StoreCode    
   FROM ZnodePortal    
   WHERE PortalId = @PortalId;    
   SET @NewPortalId = SCOPE_IDENTITY();    
  END;    
  END    
    
  -- copy all data if New portalId will generate    
  IF @NewPortalId > -0     
  BEGIN    
   INSERT INTO dbo.ZnodePortalCatalog(    
   --PortalCatalogId - this column value is auto-generated    
   PortalId, PublishCatalogId, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )    
       SELECT @NewPortalId, PublishCatalogId, @UserId, @GetDate, @UserId, @GetDate    
       FROM ZnodePortalCatalog    
       WHERE PortalId = @PortalId;    
   INSERT INTO dbo.ZnodePortalProfile(    
   --PortalProfileID - this column value is auto-generated    
   PortalId, ProfileId, IsDefaultAnonymousProfile, IsDefaultRegistedProfile, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )    
       SELECT @NewPortalId, ProfileId, IsDefaultAnonymousProfile, IsDefaultRegistedProfile, @UserId, @GetDate, @UserId, @GetDate    
       FROM ZnodePortalProfile    
       WHERE PortalId = @PortalId;    
   INSERT INTO dbo.ZnodePortalUnit(    
   --PortalUnitId - this column value is auto-generated    
   PortalId, CurrencyId,CultureId, WeightUnit, DimensionUnit,CurrencySuffix, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )    
       SELECT @NewPortalId, CurrencyId,CultureId, WeightUnit, DimensionUnit,CurrencySuffix, @UserId, @GetDate, @UserId, @GetDate    
       FROM ZnodePortalUnit    
       WHERE PortalId = @PortalId;    
   INSERT INTO dbo.ZnodePortalCountry(    
   --PortalCountryId - this column value is auto-generated    
   PortalId, CountryCode, IsDefault, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )    
       SELECT @NewPortalId, CountryCode, IsDefault, @UserId, @GetDate, @UserId, @GetDate    
       FROM ZnodePortalCountry    
       WHERE PortalId = @PortalId;    
   INSERT INTO dbo.ZnodeShippingPortal(    
   --ShippingPortalId - this column value is auto-generated    
   PortalId, ShippingOriginAddress1, ShippingOriginAddress2, ShippingOriginCity, ShippingOriginStateCode, ShippingOriginZipCode, ShippingOriginCountryCode, ShippingOriginPhone, FedExAccountNumber, FedExLTLAccountNumber, FedExMeterNumber, FedExProductionKey, FedExSecurityCode, FedExDropoffType, FedExPackagingType, FedExUseDiscountRate, FedExAddInsurance, UPSUserName, UPSPassword, UPSKey, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, PublishStateId )    
       SELECT @NewPortalId, ShippingOriginAddress1, ShippingOriginAddress2, ShippingOriginCity, ShippingOriginStateCode, ShippingOriginZipCode, ShippingOriginCountryCode, ShippingOriginPhone, FedExAccountNumber, FedExLTLAccountNumber, FedExMeterNumber, FedExProductionKey, FedExSecurityCode, FedExDropoffType, FedExPackagingType, FedExUseDiscountRate, FedExAddInsurance, UPSUserName, UPSPassword, UPSKey, @UserId, @GetDate, @UserId, @GetDate, PublishStateId    
       FROM ZnodeShippingPortal    
       WHERE PortalId = @PortalId;    
   INSERT INTO dbo.ZnodePortalLocale(    
   --PortalLocaleId - this column value is auto-generated    
   PortalId, LocaleId, IsDefault, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )    
       SELECT @NewPortalId, LocaleId, IsDefault, @UserId, @GetDate, @UserId, @GetDate    
       FROM ZnodePortalLocale    
       WHERE PortalId = @PortalId;    
   INSERT INTO dbo.ZnodePortalSmtpSetting(    
   --PortalSmtpSettingId - this column value is auto-generated    
   PortalId, ServerName, UserName, Password, Port, IsEnableSsl, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate,DisableAllEmails )    
       SELECT @NewPortalId, ServerName, UserName, Password, Port, IsEnableSsl, @UserId, @GetDate, @UserId, @GetDate,DisableAllEmails    
 FROM ZnodePortalSmtpSetting    
       WHERE PortalId = @PortalId;    
   INSERT INTO dbo.ZnodePortalDisplaySetting(    
   --PortalDisplaySettingsId - this column value is auto-generated    
   PortalId, MediaId, MaxDisplayItems, MaxSmallThumbnailWidth, MaxSmallWidth, MaxMediumWidth, MaxThumbnailWidth, MaxLargeWidth, MaxCrossSellWidth, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )    
       SELECT @NewPortalId, MediaId, MaxDisplayItems, MaxSmallThumbnailWidth, MaxSmallWidth, MaxMediumWidth, MaxThumbnailWidth, MaxLargeWidth, MaxCrossSellWidth, @UserId, @GetDate, @UserId, @GetDate    
       FROM ZnodePortalDisplaySetting    
       WHERE PortalId = @PortalId;    
   INSERT INTO dbo.ZnodeCMSPortalTheme(    
   --CMSPortalThemeId - this column value is auto-generated    
   PortalId, CMSThemeId, CMSThemeCSSId, MediaId, WebsiteTitle, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )    
       SELECT @NewPortalId, CMSThemeId, CMSThemeCSSId, MediaId, WebsiteTitle, @UserId, @GetDate, @UserId, @GetDate    
       FROM ZnodeCMSPortalTheme    
       WHERE PortalId = @PortalId;    
   INSERT INTO dbo.ZnodePortalFeatureMapper(    
   --PortalFeatureMapperId - this column value is auto-generated    
   PortalId, PortalFeatureId, PortalFeatureMapperValue, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )    
       SELECT @NewPortalId, PortalFeatureId, PortalFeatureMapperValue, @UserId, @GetDate, @UserId, @GetDate    
       FROM ZnodePortalFeatureMapper    
       WHERE PortalId = @PortalId;    
       
      EXEC Znode_CopyPortalMessageAndContentPages @PortalId,@NewPortalId,@userId,0    
          
   EXEC Znode_CopyPortalEmailTemplate @NewPortalId,@PortalId,@userId    
   -- If copy process will complete successfully then return status 1     
   -- return the data set if     
   SELECT @PortalId AS ID, CAST(1 AS bit) AS [Status];     
   SET @Status = CAST(1 AS bit);    
   COMMIT TRAN A;    
  END;    
  ELSE    
  BEGIN    
   -- If copy process will not complete successfully then return status 0     
   SELECT @PortalId AS ID, CAST(0 AS bit) AS [Status];    
   SET @Status = CAST(0 AS bit);    
   ROLLBACK TRAN A;    
  END;    
 END TRY    
 BEGIN CATCH     
      
       SET @Status = 0;    
       DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_CopyPortal @PortalId = '+CAST(@PortalId AS VARCHAR(200))+',@StoreName='+@StoreName+',@CompanyName='+@CompanyName+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));    
                      
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                        
        
             EXEC Znode_InsertProcedureErrorLog    
    @ProcedureName = 'Znode_CopyPortal',    
    @ErrorInProcedure = @Error_procedure,    
    @ErrorMessage = @ErrorMessage,    
    @ErrorLine = @ErrorLine,    
    @ErrorCall = @ErrorCall;    
 END CATCH;    
END;
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_UpdateInventory')
BEGIN 
	DROP PROCEDURE Znode_UpdateInventory
END
GO
CREATE PROCEDURE [dbo].[Znode_UpdateInventory]
(
	@SkuXml xml,
	@PortalId int, 
	@UserId int, 
	@Status bit OUT, 
	@IsDebug bit= 0)
AS 
	/*
	Summary: (13671)   Inventory will be updated on the basis of "InventoryTracking" (Attribute Code) value in locale table 
				    If value id "DisablePurchasing" then subtracts currently selected quantity only when it will greater than zero.
				    If "AllowBackordering" then inventory will become negative
				    If "DontTrackInventory" then don't update inventory.
				    inventory will be get deducted from associated warehouse where quantity is available as per warehouse precedence. 
				    Validate total quantity 
	Input Parameters:
	SKU(Comma separated multiple), PortalId
	Unit Testing   
		Declare @Status bit 
		Exec Znode_UpdateInventory  @SkuXml = '<ArrayOfOrderWarehouseLineItemsModel>
		<OrderWarehouseLineItemsModel>
		<OrderLineItemId>418</OrderLineItemId>
		<SKU>ap1534</SKU>
		<InventoryTracking>DisablePurchasing</InventoryTracking>
		<Quantity>1.000000</Quantity>
		</OrderWarehouseLineItemsModel>
		<OrderWarehouseLineItemsModel>
		<OrderLineItemId>419</OrderLineItemId>
		<SKU>al8907</SKU>
		<InventoryTracking>DisablePurchasing</InventoryTracking>
		<Quantity>1.000000</Quantity>
		</OrderWarehouseLineItemsModel>
		</ArrayOfOrderWarehouseLineItemsModel>',@PortalId = 1,@UserId = 2,@Status = @Status

	*/
BEGIN
	BEGIN TRAN UpdateInventory;
	BEGIN TRY
		SET NOCOUNT ON;
		DECLARE @TBL_XmlReturnToTable TABLE
		( 
			OrderLineItemId int, SKU nvarchar(max), InventoryTracking nvarchar(1000), Quantity numeric(28, 6), SequenceNo int IDENTITY
		);
		DECLARE @TBL_ErrorInventoryTracking TABLE
		( 
			SKU nvarchar(max), Quantity numeric(28, 6), InventoryTracking nvarchar(2000)
		);
		INSERT INTO @TBL_XmlReturnToTable( OrderLineItemId, SKU, InventoryTracking, Quantity )
			   SELECT Tbl.Col.value( 'OrderLineItemId[1]', 'INT' ) AS OrderLineItemId, Tbl.Col.value( 'SKU[1]', 'NVARCHAR(2000)' ) AS SKU, Tbl.Col.value( 'InventoryTracking[1]', 'NVARCHAR(2000)' ) AS InventoryTracking, Tbl.Col.value( 'Quantity[1]', 'Numeric(28,6)' ) AS Quantity
			   FROM @SkuXml.nodes( '//ArrayOfOrderWarehouseLineItemsModel/OrderWarehouseLineItemsModel' ) AS Tbl(Col)
			   WHERE Tbl.Col.value( 'InventoryTracking[1]', 'NVARCHAR(2000)' ) <> 'DontTrackInventory' 
			   AND Tbl.Col.value( 'Quantity[1]', 'Numeric(28,6)' ) > 0
			   ;
		DECLARE @Cur_WarehouseId int, @Cur_PortalId int, @Cur_PortalWarehouseId int, @Cur_WarehouseSequence int, @Cur_SKU varchar(200), @Cur_Quantity numeric(28, 6), @Cur_ReOrderLevel numeric(28, 6), @Cur_InventoryId int;
             
	
		DECLARE @RecurringQuantity numeric(28, 6), @BalanceQuantity numeric(28, 6)
		SET @Status = 0; 
      		

		DECLARE @TBL_CalculateQuntity TABLE
		( 
			WarehouseId int, SKU varchar(200), MainQuantity numeric(28, 6), InventoryId int, OrderQuantity numeric(28, 6), UpdatedQuantity numeric(28, 6), WarehouseSequenceId int, InventoryTracking nvarchar(2000)
		);
		DECLARE @TBL_AllwareHouseToportal TABLE
		( 
			WarehouseId int, PortalId int, PortalWarehouseId int, WarehouseSequenceFirst int, WarehouseSequence int, SKU varchar(200), Quantity numeric(28, 6), ReOrderLevel numeric(28, 6), InventoryId int
		);

		INSERT INTO @TBL_AllwareHouseToportal( WarehouseId, PortalId, PortalWarehouseId, SKU, Quantity, ReOrderLevel, InventoryId, WarehouseSequence, WarehouseSequenceFirst )
			SELECT ZPW.WarehouseId, ZPW.PortalId, zpw.PortalWarehouseId, zi.SKU, zi.Quantity, zi.ReOrderLevel, zi.InventoryId, DENSE_RANK() OVER(ORDER BY ZPW.WarehouseId), 1
			FROM dbo.ZnodeInventory AS zi
			LEFT JOIN [ZnodePortalWarehouse] AS ZPW ON ZPW.WarehouseId = ZI.WareHouseId AND  ZPW.PortalId = @PortalId
			WHERE EXISTS ( SELECT TOP 1 1  FROM @TBL_XmlReturnToTable AS TBXRT WHERE RTRIM(LTRIM(TBXRT.SKU)) = RTRIM(LTRIM(zi.SKU))) ORDER BY ZPW.Precedence DESC;
			
		INSERT INTO @TBL_AllwareHouseToportal( WarehouseId, PortalId, PortalWarehouseId, SKU, Quantity, ReOrderLevel, InventoryId, WarehouseSequence, WarehouseSequenceFirst )
			SELECT zpaw.WarehouseId, @PortalId, zpaw.PortalWarehouseId, zi.SKU, zi.Quantity, zi.ReOrderLevel, zi.InventoryId, DENSE_RANK() OVER (ORDER BY zpaw.WarehouseId),
			CASE WHEN EXISTS ( SELECT TOP 1 1 FROM @TBL_AllwareHouseToportal WE WHERE WE.SKU = ZI.SKU  ) THEN 2 ELSE 1 END
				FROM dbo.ZnodeInventory AS zi INNER JOIN [dbo].[ZnodePortalAlternateWarehouse] AS zpaw ON zpaw.WarehouseId = ZI.WareHouseId
				WHERE EXISTS ( SELECT TOP 1 1 FROM [ZnodePortalWarehouse] AS a WHERE zpaw.PortalWarehouseId = a.PortalWarehouseId AND  a.PortalId = @PortalId) AND 
				EXISTS ( SELECT TOP 1 1 FROM @TBL_XmlReturnToTable AS TBXRT WHERE RTRIM(LTRIM(TBXRT.SKU)) = RTRIM(LTRIM(zi.SKU))) ORDER BY ZPAW.Precedence DESC;
   
		
		--Total Avaialble qunatity in all warehouse 
		IF EXISTS ( SELECT TOP 1 1 FROM @TBL_XmlReturnToTable WHERE InventoryTracking = 'DisablePurchasing')
		BEGIN

			INSERT INTO @TBL_ErrorInventoryTracking 
			SELECT TBAHL.SKU, SUM(TBAHL.Quantity), InventoryTracking 
			FROM @TBL_XmlReturnToTable AS TBXML
			LEFT JOIN @TBL_AllwareHouseToportal AS TBAHL ON(TBAHL.SKU = TBXML.SKU) 
			INNER JOIN ZnodeOmsOrderLineItems b on (TBXML.orderlineitemid = b.OmsOrderLineItemsId)
			WHERE InventoryTracking = 'DisablePurchasing'
			AND b.OrderLineItemRelationshipTypeId IS NOT NULL
			GROUP BY TBAHL.SKU, InventoryTracking HAVING SUM(TBAHL.Quantity) < 1 ORDER BY TBAHL.SKU;
			IF EXISTS ( SELECT TOP 1 1 FROM @TBL_ErrorInventoryTracking )
			BEGIN
				SET @Status = 0;
				RAISERROR(15600, -1, -1, 'DisablePurchasing');
			END;
		END;

			

			INSERT INTO @TBL_CalculateQuntity
			   SELECT WarehouseId, TBXML.SKU, TBAHL.Quantity, TBAHL.InventoryId, TBXML.Quantity, NULL AS UpdatedQuantity, DENSE_RANK() 
			   OVER(ORDER BY WarehouseSequenceFirst,WarehouseSequence), InventoryTracking
			   FROM @TBL_XmlReturnToTable AS TBXML	
			   INNER  JOIN @TBL_AllwareHouseToportal AS TBAHL ON(TBAHL.SKU = TBXML.SKU)
			   ORDER BY  WarehouseSequenceFirst,WarehouseSequence;

			 
		
		UPDATE @TBL_CalculateQuntity 
		SET UpdatedQuantity = MainQuantity - OrderQuantity  
		WHERE WarehouseSequenceId = 1;
				
		DECLARE @CountToRepeate int= ( SELECT count( distinct WarehouseId) FROM @TBL_CalculateQuntity),@Initializationofloop int= 2;
       
		WHILE @Initializationofloop <= @CountToRepeate 
				AND EXISTS (SELECT TOP 1 1 FROM @TBL_CalculateQuntity AS a 
					WHERE UpdatedQuantity < 0  )
		BEGIN
		 
			UPDATE a  
			SET a.UpdatedQuantity = a.MainQuantity + b.UpdatedQuantity 
			FROM @TBL_CalculateQuntity a 
			INNER JOIN @TBL_CalculateQuntity b ON (a.Sku = b.Sku AND b.WarehouseSequenceId = (@Initializationofloop - 1)) 
			WHERE a.WarehouseSequenceId = @Initializationofloop 
			AND b.UpdatedQuantity < 0
			AND b.UpdatedQuantity IS NOT NULL 
			

			UPDATE @TBL_CalculateQuntity 
			SET UpdatedQuantity  = 0 
			WHERE WarehouseSequenceId = @Initializationofloop -1 
			AND UpdatedQuantity < 0
			AND UpdatedQuantity IS NOT NULL 
			

			SET @Initializationofloop = @Initializationofloop + 1;
		END; 
		
		   IF EXISTS (SELECT TOP 1 1 FROM @TBL_CalculateQuntity WHERE ISNULL(UpdatedQuantity,0) < 0 AND @CountToRepeate >1)
		   BEGIN 
		    UPDATE a  
			SET a.UpdatedQuantity = b.UpdatedQuantity 
			FROM @TBL_CalculateQuntity a 
			INNER JOIN @TBL_CalculateQuntity b ON (a.Sku = b.Sku AND b.WarehouseSequenceId = @Initializationofloop -1 ) 
			WHERE a.WarehouseSequenceId = 1 
			AND ISNULL(b.UpdatedQuantity,0) < 0

			UPDATE @TBL_CalculateQuntity 
			SET UpdatedQuantity  = 0 
			WHERE WarehouseSequenceId = @Initializationofloop -1 
		    AND ISNULL(UpdatedQuantity,0) < 0
		   END 
			

		--If "AllowBackordering" then inventory will go to be negative conside only single warehouse
		IF EXISTS(SELECT TOP 1 1 FROM @TBL_XmlReturnToTable WHERE InventoryTracking = 'AllowBackordering')
		BEGIN
			UPDATE ZI SET Quantity = Isnull(TBCQ.UpdatedQuantity,0) 
			FROM dbo.ZnodeInventory ZI 
			INNER JOIN @TBL_CalculateQuntity TBCQ ON(Zi.InventoryId = TBCQ.InventoryId)
			WHERE InventoryTracking = 'AllowBackordering' AND  UpdatedQuantity IS NOT NULL  ;
			SET @Status = 1;
		END;
		
					-- If @InventoryTracking is "DisablePurchasing" then subtracts currently selected quantity only when it will greater than zero.
				IF EXISTS ( SELECT TOP 1 1 FROM @TBL_XmlReturnToTable WHERE InventoryTracking = 'DisablePurchasing')
				BEGIN
					SET @BalanceQuantity = 1;
					UPDATE ZI 
					SET Quantity = CASE WHEN TBCQ.UpdatedQuantity < 0 THEN 0 ELSE TBCQ.UpdatedQuantity END 
					FROM dbo.ZnodeInventory ZI 
					INNER JOIN  @TBL_CalculateQuntity TBCQ ON(Zi.InventoryId = TBCQ.InventoryId) WHERE InventoryTracking = 'DisablePurchasing'
					AND TBCQ.UpdatedQuantity IS NOT NULL 
					;
				END;
		
	

		INSERT INTO ZnodeOmsOrderWarehouse( OmsOrderLineItemsId, WarehouseId,Quantity, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
		SELECT OrderLineItemId, WarehouseId,CASE WHEN UpdatedQuantity = 0 THEN MainQuantity ELSE MainQuantity - UpdatedQuantity END , @UserId, dbo.Fn_GetDate(), @UserId, dbo.Fn_GetDate() 
		FROM @TBL_CalculateQuntity AS TBCQ 
		INNER JOIN @TBL_XmlReturnToTable AS TBXR
			   ON(TBXR.SKU = TBCQ.SKU) WHERE UpdatedQuantity IS NOT NULL;

		SELECT SKU, Quantity, InventoryTracking
		FROM @TBL_ErrorInventoryTracking;
		SET @Status = 1;
		COMMIT TRAN UpdateInventory;
	END TRY
	BEGIN CATCH
		SET @Status = 0;
		SELECT SKU, Quantity, InventoryTracking
		FROM @TBL_ErrorInventoryTracking;
		
		ROLLBACK TRAN UpdateInventory;
	END CATCH;
END;
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_CopyPortalMessageAndContentPages')
BEGIN 
	DROP PROCEDURE Znode_CopyPortalMessageAndContentPages
END
GO
CREATE PROCEDURE [dbo].[Znode_CopyPortalMessageAndContentPages]
(	@CopyPortalId    INT,
    @PortalId        INT,
    @UserId          INT,
    @Status          INT = 1 OUT)
AS 
    
	/*
     Summary :- This procedure is used to copy existing portal messages and content pages to the another portal 
     Fn_GetDefaultValue use to find the defualt value of locale 
     copy only default locale data and active records 
     Affected tables "ZnodeCMSContentPages" copy the record of one portal to another portal 
     "ZnodeCMSContentPagesLocale" copy the record of one portal to another portal 
     "ZnodeCMSPortalMessage" copy the record of one portal to another portal 
     Unit Testing
	 begin tran
     EXEC Znode_CopyPortalMessageAndContentPages @CopyPortalId = 1 ,@PortalId = 1 ,@UserId = 2 ,@Status =0 
     rollback tran  
   */
    
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @TBL_ContentPageDetail TABLE
             (
			    CMSContentPagesId    INT,
                OldCMSContentPagesId INT,
				PageName NVARCHAR(200)
                
             );
             DECLARE @TBL_CMSSEODetailId TABLE
             (
			    CMSSEODetailId    INT,
                OldCMSSEODetailId INT 
                 
             );
			 -- copy the  messages for portal

             INSERT INTO ZnodeCMSPortalMessage (PortalId, CMSMessageKeyId,CMSMessageId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             SELECT DISTINCT @PortalId,ZCPM.CMSMessageKeyId,ZCPM.CMSMessageId,@UserId,@GetDate,@UserId,@GetDate
             FROM ZnodeCMSPortalMessage AS ZCPM
             INNER JOIN ZnodeCMSMessage AS ZCM ON(ZCM.CMSMessageId = ZCPM.CMSMessageId)
             WHERE ZCPM.PortalId = @CopyPortalId;  
            
			 INSERT INTO ZnodeCMSPortalMessageKeyTag (PortalId,CMSMessageKeyId,TagXML,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             SELECT @PortalId,CMSMessageKeyId,TagXML,@UserId,@GetDate,@UserId,@GetDate
             FROM ZnodeCMSPortalMessageKeyTag ZCPMT
             WHERE PortalId = @CopyPortalId;
			 -- this cte use to collect the required data to merge with ZnodeCMSContentPages 
             WITH Cte_CMSContentPages
             AS 
             (SELECT DISTINCT ZCCP.CMSContentPagesId,@PortalId AS PortalId,CMSTemplateId,PageName,ActivationDate,ExpirationDate,IsActive,@UserId AS CreatedBy,@GetDate AS CreatedDate,@UserId AS ModifiedBy,@GetDate AS ModifiedDate 
	         FROM ZnodeCMSContentPages AS ZCCP
             WHERE IsActive = 1 AND PortalId = @CopyPortalId)
			 -- merge use for catching the output 
             MERGE INTO ZnodeCMSContentPages TARGET
             USING Cte_CMSContentPages SOURCE 
             ON 1 = 0
                      WHEN NOT MATCHED
                      THEN INSERT(PortalId,CMSTemplateId,PageName,ActivationDate,ExpirationDate,IsActive,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
					  VALUES (SOURCE.PortalId,SOURCE.CMSTemplateId,SOURCE.PageName,SOURCE.ActivationDate,SOURCE.ExpirationDate,SOURCE.IsActive,SOURCE.CreatedBy,SOURCE.CreatedDate,SOURCE.ModifiedBy,SOURCE.ModifiedDate)
                      OUTPUT Inserted.CMSContentPagesId,
                      SOURCE.CMSContentPagesId,Inserted.PageName 
                      INTO @TBL_ContentPageDetail;

             -- here collect the inserted data for further use 

             INSERT INTO ZnodeCMSContentPageGroupMapping (CMSContentPageGroupId,CMSContentPagesId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             SELECT CMSContentPageGroupId,TBCPD.CMSContentPagesId,@UserId,@GetDate,@userId,@GetDate
			 FROM ZnodeCMSContentPageGroupMapping ZCCPGM
             INNER JOIN @TBL_ContentPageDetail TBCPD ON(TBCPD.OldCMSContentPagesId = ZCCPGM.CMSContentPagesId);

             INSERT INTO ZnodeCMSContentPagesLocale(CMSContentPagesId,LocaleId,PageTitle,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             SELECT TBCPD.CMSContentPagesId,LocaleId,PageTitle,@UserId,@GetDate,@userId,@GetDate -- insert default locale records 
             FROM ZnodeCMSContentPagesLocale AS ZCCPL
             INNER JOIN @TBL_ContentPageDetail AS TBCPD ON(TBCPD.OldCMSContentPagesId = ZCCPL.CMSContentPagesId);

             INSERT INTO ZnodeCMSContentPagesProfile (ProfileId,CMSContentPagesId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             SELECT ProfileId,TBCPD.CMSContentPagesId,@UserId,@GetDate,@userId,@GetDate
             FROM ZnodeCMSContentPagesProfile ZCPP
             INNER JOIN @TBL_ContentPageDetail TBCPD ON(TBCPD.OldCMSContentPagesId = ZCPP.CMSContentPagesId)
             WHERE EXISTS  ( SELECT TOP 1 1 FROM ZnodePortalProfile ZPP WHERE ZPP.PortalId = @CopyPortalId AND isnull(ZPP.ProfileId,0) = isnull(ZCPP.ProfileId,0) )
             -- this cte use to collect the required data to merge with ZnodeCMSContentPages 
			 ;WITH Cte_CMSSEODetails
             AS  
             (
			 SELECT ZCSD.CMSSEODetailId,ZCSD.CMSSEOTypeId,TBCPD.CMSContentPagesId,IsRedirect,MetaInformation,@PortalId PortalId,SEOUrl,@UserId CREATEDBy,@GetDate CREATEDDATE,@userId MODIFIEDBY,@GetDate MODIFIEDDATE
			 ,ZCSD.IsPublish,ZCSD.SEOCode
             FROM ZnodeCMSSEODetail ZCSD
             INNER JOIN @TBL_ContentPageDetail TBCPD ON(TBCPD.PageName = ZCSD.SEOCode)
             INNER JOIN ZnodeCMSSEOType ZCST ON(ZCST.CMSSEOTypeId = ZCSD.CMSSEOTypeId AND ZCST.Name = 'Content Page')
			 WHERE ZCSD.PortalId = @CopyPortalId)
			 -- merge use for catching the output
             MERGE INTO ZnodeCMSSEODetail TARGET
             USING Cte_CMSSEODetails SOURCE 
             ON 1 = 0
             WHEN NOT MATCHED
             THEN INSERT(CMSSEOTypeId,SEOId,IsRedirect,MetaInformation,PortalId,SEOUrl,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,IsPublish,SEOCode)
			 VALUES (SOURCE.CMSSEOTypeId,NULL,SOURCE.IsRedirect,SOURCE.MetaInformation,SOURCE.PortalId,SOURCE.SEOUrl,SOURCE.CreatedBy,SOURCE.CreatedDate,SOURCE.ModifiedBy,SOURCE.ModifiedDate,SOURCE.IsPublish,SOURCE.SEOCode)
             OUTPUT Inserted.CMSSEODetailId,
             SOURCE.CMSSEODetailId 
             INTO @TBL_CMSSEODetailId;

             INSERT INTO ZnodeCMSSEODetailLocale (CMSSEODetailId,LocaleId,SEOTitle,SEODescription,SEOKeywords,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             SELECT TBCPD.CMSSEODetailId,LocaleId,SEOTitle,SEODescription,SEOKeywords,@UserId CREATEDBy,@GetDate CREATEDDATE,@userId MODIFIEDBY,@GetDate MODIFIEDDATE
             FROM ZnodeCMSSEODetailLocale ZCSDl
             INNER JOIN @TBL_CMSSEODetailId TBCPD ON(TBCPD.OldCMSSEODetailId = ZCSDl.CMSSEODetailId);
                          
			 INSERT INTO ZnodePortalCountry (PortalId,CountryCode,IsDefault,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate) 
			 SELECT @PortalId,CountryCode,IsDefault,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
			 FROM ZnodePortalCountry ZPC
			 WHERE PortalId = @CopyPortalId
			 AND IsDefault = 1 
			 AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodePortalCountry ZPPP WHERE ZPPP.PortalId = @PortalId AND ZPPP.CountryCode = CountryCode );

			 EXEC Znode_CopyPortalEmailTemplate @PortalId,@CopyPortalId,@userId
			 SET @Status = 1;
			 SELECT @CopyPortalId AS ID,CAST(1 AS BIT) AS [Status];
         END TRY
         BEGIN CATCH
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= ' EXEC Znode_CopyPortalMessageAndContentPages @CopyPortalId = '+CAST(@CopyPortalId AS VARCHAR(100))+' ,@PortalId='+CAST(@PortalId AS VARCHAR(100))+' ,@UserId= '+CAST(@UserId AS VARCHAR(100))+',@Status='+CAST(@Status AS VARCHAR(50));
             SELECT @PortalId AS ID,
                    CAST(0 AS BIT) AS [Status];
             SET @Status = 0;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_CopyPortalMessageAndContentPages',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
	 GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportHighlight')
BEGIN 
	DROP PROCEDURE Znode_ImportHighlight
END
GO
CREATE PROCEDURE [dbo].[Znode_ImportHighlight](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @PimCatalogId int= 0)
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import Attribute Code Name and their default input validation rule other 
	--			  flag will be inserted as default we need to modify front end
	
	-- Unit Testing: 

	--------------------------------------------------------------------------------------
BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max);
		DECLARE @GetDate datetime= dbo.Fn_GetDate(), @LocaleId int  ;
		SELECT @LocaleId = DBO.Fn_GetDefaultLocaleId();
		-- Retrive RoundOff Value from global setting 
		DECLARE @InsertPimAtrribute TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY,
			RowNumber int, HighlightCode varchar(300), HighlightName varchar(1000),DisplayPopup varchar(300),Hyperlink varchar(1000),HighlightType varchar(300),IsActive varchar(100),DisplayOrder int,HighlightImage varchar(500),HighlightImagePath varchar(500), Description varchar(max), ShortDescription varchar(max), ImageAltTag varchar(400), GUID nvarchar(400)
		
		);
		DECLARE @InsertedPimAttributeIds TABLE (PimAttributeId int ,PimAttributeDefaultValueId int,AttributeDefaultValueCode nvarchar(300))
		
		SET @SSQL = 'Select RowNumber,HighlightCode, HighlightName,DisplayPopup,Hyperlink,HighlightType,IsActive,DisplayOrder,HighlightImage,HighlightImagePath,Description,ShortDescription,ImageAltTag ,GUID FROM '+@TableName;
		INSERT INTO @InsertPimAtrribute( RowNumber,HighlightCode, HighlightName,DisplayPopup,Hyperlink,HighlightType,IsActive,DisplayOrder,HighlightImage,HighlightImagePath,Description,ShortDescription,ImageAltTag ,GUID)
		EXEC sys.sp_sqlexec @SSQL;


		--@MessageDisplay will use to display validate message for input inventory value  
		DECLARE @HighlightAttributeDefaultCode TABLE
		( 
		   AttributeDefaultCode nvarchar(300)
		);
		INSERT INTO @HighlightAttributeDefaultCode
			   SELECT AttributeDefaultValueCode
			   FROM ZnodePimAttributeDefaultValue ZPADV
			   inner join ZnodePimAttribute ZPA on ZPADV.PimAttributeId = ZPA.PimAttributeId
			   where ZPA.AttributeCode = 'Highlights' 

		-- Start Functional Validation 
		-----------------------------------------------
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '10', 'HighlightCode', HighlightCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ii.HighlightCode not in 
			   (
				   SELECT AttributeDefaultCode FROM @HighlightAttributeDefaultCode 
			   );
		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '35', 'DisplayPopup', DisplayPopup, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM @InsertPimAtrribute AS ii  
			WHERE ii.DisplayPopup not in ('True','1','Yes','FALSE','0','No','')

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '35', 'IsActive', IsActive, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM @InsertPimAtrribute AS ii  
			WHERE ii.IsActive not in ('True','1','Yes','FALSE','0','No','')

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '19', 'HighlightType', HighlightType, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ii.HighlightType NOT in 
			   (
				   SELECT HT.Name  FROM ZnodeHighlightType  HT
			   );

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			SELECT '17', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			FROM @InsertPimAtrribute AS ii
			WHERE (ii.DisplayOrder <> '' OR ii.DisplayOrder IS NOT NULL ) AND  ii.DisplayOrder = 0

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			SELECT '64', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			FROM @InsertPimAtrribute AS ii
			WHERE (ii.DisplayOrder <> '' OR ii.DisplayOrder IS NOT NULL )AND  ii.DisplayOrder > 999

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '35', 'HighlightCode', HighlightCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ltrim(rtrim(isnull(ii.HighlightCode,''))) like '% %' 

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '10', 'HighlightCode', HighlightCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ii.HighlightCode in 
			   (
				   select HighlightCode  FROM @InsertPimAtrribute  Group BY HighlightCode  having count(*) > 1 
			   );

		UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ Highlight - ' + ISNULL(HighlightCode,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN @InsertPimAtrribute IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL


		-- End Function Validation 	
		-----------------------------------------------
		-- Delete Invalid Data after functional validatin  
		DELETE FROM @InsertPimAtrribute
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
		);
		
		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM @InsertPimAtrribute
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount ,
		TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
		WHERE ImportProcessLogId = @ImportProcessLogId;
		

		DECLARE @MediaId INT
		SET @MediaId = (SELECT TOP 1 MediaId from @InsertPimAtrribute IPA INNER JOIN ZnodeMedia ZM ON IPA.HighlightImage = ZM.FileName and IPA.HighlightImagePath = ZM.Path)

		if (isnull(@MediaId,0)=0)
			SET @MediaId = (SELECT max(MediaId) from @InsertPimAtrribute IPA INNER JOIN ZnodeMedia ZM ON IPA.HighlightImage = ZM.FileName)

		DECLARE @InsertedZnodeHighlight TABLE(HighlightId INT,HighlightCode VARCHAR(600)) 

			UPDATE ZH SET ZH.DisplayPopup = IPA.DisplayPopup, ZH.Hyperlink = IPA.Hyperlink, ZH.IsActive = case when IPA.IsActive in ('True','1','Yes') then 1 else 0 end,
			       ZH.DisplayOrder = IPA.DisplayOrder , ZH.ModifiedBy = @UserId, ZH.ModifiedDate = @GetDate 
			FROM @InsertPimAtrribute IPA 
			INNER JOIN ZnodeHighlightType ZHT on IPA.HighlightType = ZHT.Name
			INNER JOIN ZnodeHighlight ZH ON IPA.HighlightCode = ZH.HighlightCode and ZHT.HighlightTypeId = ZH.HighlightTypeId

			UPDATE ZHL SET ZHL.Name = IPA.HighlightName, ZHL.Description = IPA.Description, ZHL.ShortDescription = IPA.ShortDescription, ZHL.ImageAltTag = IPA.ImageAltTag
			       , ZHL.ModifiedBy = @UserId, ZHL.ModifiedDate = @GetDate 
			FROM @InsertPimAtrribute IPA 
			INNER JOIN ZnodeHighlightType ZHT on IPA.HighlightType = ZHT.Name
			INNER JOIN ZnodeHighlight ZH ON IPA.HighlightCode = ZH.HighlightCode and ZHT.HighlightTypeId = ZH.HighlightTypeId
			INNER JOIN ZnodeHighlightLocale ZHL  ON ZH.HighlightId = ZHL.HighlightId 

			INSERT INTO ZnodeHighlight (MediaId,HighlightCode,DisplayPopup,Hyperlink,HighlightTypeId,IsActive,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			OUTPUT Inserted.HighlightId,Inserted.HighlightCode INTO @InsertedZnodeHighlight
			SELECT DISTINCT @MediaId,IPA.HighlightCode, IPA.DisplayPopup , IPA.Hyperlink, ZHT.HighlightTypeId,
				   case when IPA.IsActive in ('True','1','Yes') then 1 else 0 end, Case when Isnull(IPA.DisplayOrder,0) = 0 then  999 else IPA.DisplayOrder end  , @UserId , @GetDate ,@UserId , @GetDate 
			FROM @InsertPimAtrribute IPA 
			INNER JOIN ZnodeHighlightType ZHT on IPA.HighlightType = ZHT.Name
			WHERE NOT EXISTS(select * from ZnodeHighlight ZH where ZH.HighlightCode = IPA.HighlightCode and ZH.HighlightTypeId = ZHT.HighlightTypeId)

			INSERT INTO ZnodeHighlightLocale(LocaleId,HighlightId,ImageAltTag,Name,Description,ShortDescription,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			SELECT DISTINCT @LocaleId, IZH.HighlightId, IPA.ImageAltTag, IPA.HighlightName, IPA.Description, IPA.ShortDescription, @UserId , @GetDate ,@UserId , @GetDate
			FROM @InsertPimAtrribute IPA 
			INNER JOIN @InsertedZnodeHighlight IZH on IPA.HighlightCode = IZH.HighlightCode 


		UPDATE ZnodeImportProcessLog
		  SET STATUS = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = Getdate()
		WHERE ImportProcessLogId = @ImportProcessLogId;
		COMMIT TRAN A;
	END TRY
	BEGIN CATCH

		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = Getdate()
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN A;
	END CATCH;
END;

GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportValidatePimProductData')
BEGIN 
	DROP PROCEDURE Znode_ImportValidatePimProductData
END
GO

CREATE PROCEDURE [dbo].[Znode_ImportValidatePimProductData]
(   @ImportHeadName     VARCHAR(200),
    @TableName          VARCHAR(200),
    @NewGUID            NVARCHAR(200),
    @TemplateId         INT,
    @UserId             INT,
    @LocaleId           INT           = 1,
    @IsCategory         INT           = 0,
    @DefaultFamilyId    INT           = 0,
    @ImportProcessLogId INT,
    @PriceListId        INT,
	@CountryCode VARCHAR(100) = '',
	@PimCatalogId         INT    = 0 ,
	@PortalId int = 0,
	@IsAccountAddress bit = 0 )
AS
     SET NOCOUNT ON;

/*
    Summary :   Import PimProduct / Price / Inventory / Category / Category Associated Data 
    Process :   Admin site will upload excel / csv file in database and create global temporary table
				Procedure Znode_ImportValidatePimProductData will validate data with attribute validation rule
				If datatype validation issue found in input daata will logged into table "ZnodeImportLog"
				If Data is correct and record count in table ZnodeImportLog will be 0 then process for import data into Base tables
				To import data call procedure "Znode_ImportPimProductData"
    		  
				SourceColumnName: CSV file column headers
				TargetColumnName: Attributecode from ZnodePimAttribute Table (Consider those Attributecodes configured with default family only)
*/

     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             --BEGIN TRAN TRN_ImportValidProductData;
             DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
             DECLARE @SQLQuery NVARCHAR(MAX), @AttributeTypeName NVARCHAR(100), @AttributeCode NVARCHAR(300), @AttributeId INT, @IsRequired BIT, @SourceColumnName NVARCHAR(600), @ControlName VARCHAR(300), @ValidationName VARCHAR(100), @SubValidationName VARCHAR(300), @ValidationValue VARCHAR(300), @RegExp VARCHAR(300), @CreateDateString NVARCHAR(300), @DefaultLocaleId INT, @ImportHeadId INT, @CheckedSourceColumn NVARCHAR(600)= '', @Status BIT= 0,
			    @CsvColumnString nvarchar(max),
				@FailedRecordCount BIGINT,
				@SuccessRecordCount BIGINT

             DECLARE @FamilyAttributeDetail TABLE
             (PimAttributeId       INT,
              AttributeTypeName    VARCHAR(300),
              AttributeCode        VARCHAR(300),
              SourceColumnName     NVARCHAR(600),
              IsRequired           BIT,
              PimAttributeFamilyId INT
             );
             DECLARE @AttributeDetail TABLE
             (PimAttributeId    INT,
              AttributeTypeName VARCHAR(300),
              AttributeCode     VARCHAR(300),
              SourceColumnName  NVARCHAR(600),
              IsRequired        BIT,
              ControlName       VARCHAR(300),
              ValidationName    VARCHAR(100),
              SubValidationName VARCHAR(300),
              ValidationValue   VARCHAR(300),
              RegExp            VARCHAR(300)
             );

		

			CREATE TABLE #DefaultAttributeCode
			(AttributeTypeName          VARCHAR(300),
			PimAttributeDefaultValueId INT,
			PimAttributeId             INT,
			AttributeDefaultValueCode  VARCHAR(100)
			);


			IF( @ImportHeadName = 'B2BCustomer' )
			BEGIN
				EXEC ZnodeB2BCustomerMapping @ImportHeadName = @ImportHeadName, @TableName = @TableName
			END
		
             DECLARE @GlobalTempTableColumns TABLE(ColumnName NVARCHAR);
             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM INFORMATION_SCHEMA.TABLES
                 WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#InvalidDefaultData'
             )
                 CREATE TABLE #InvalidDefaultData
                 (RowNumber  INT,
                  Value      NVARCHAR(MAX),
                  ColumnName NVARCHAR(600)
                 );
             ELSE
             DROP TABLE #InvalidDefaultData;
             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM INFORMATION_SCHEMA.TABLES
                 WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#GlobalTempTableColumns'
             )
                 BEGIN

                     SET @SQLQuery = 'SELECT Column_Name, '''+@ImportHeadName+''' AS ImportHeadName  from tempdb.INFORMATION_SCHEMA.COLUMNS	where table_name = object_name(object_id('''+@TableName+'''),
					(select database_id from sys.databases where name = ''tempdb''))';
                     CREATE TABLE #GlobalTempTableColumns
                     (ColumnName   NVARCHAR(MAX),
                      TypeOfImport NVARCHAR(100)
                     );
                     INSERT INTO #GlobalTempTableColumns
                     (ColumnName,
                      TypeOfImport
                     )
                     EXEC sys.sp_sqlexec
                          @SQLQuery;
                 END;
		 

             IF EXISTS
             (
                 SELECT TOP 1 1
                 FROM #GlobalTempTableColumns
                 WHERE ColumnName IN('PimCategoryId', 'PimProductId', 'RowNumber')
             )
                 BEGIN
                     INSERT INTO ZnodeImportLog
                     (ErrorDescription,
                      ColumnName,
                      Data,
                      GUID,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate,
                      ImportProcessLogId
                     )
                     VALUES
                     (43,
                      '',
                      '',
                      @newGUID,
                      @UserId,
                      @GetDate,
                      @UserId,
                      @GetDate,
                      @ImportProcessLogId
                     );
                 END;
             SET @DefaultLocaleId = dbo.Fn_GetDefaultLocaleId();
             --Remove old error log 
		
             IF NOT EXISTS
             (
                 SELECT TOP 1 1  FROM ZnodeImportLog
                 WHERE Guid = @NewGUID
                       AND ErrorDescription IN(43, 42)
                 AND ImportProcessLogId = @ImportProcessLogId
             )
                 BEGIN
                     IF @ImportHeadName = 'Product'
                      BEGIN
						  IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
							  SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimProductId int null ';
						  ELSE 
							 SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimProductId int null Primary KEY CLUSTERED(RowNumber)';
						 
						  EXEC sys.sp_sqlexec @SQLQuery;
			         END;
                     ELSE
                     IF @ImportHeadName = 'Category'
                         BEGIN
							  IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimCategoryId int null ';
							  ElSE
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimCategoryId int null Primary KEY CLUSTERED(RowNumber) ';
						  
							  EXEC sys.sp_sqlexec @SQLQuery;
                         END;
                     ELSE
                         BEGIN
							IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1) ';
							Else 
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1) Primary KEY CLUSTERED(RowNumber)';
							
							EXEC sys.sp_sqlexec @SQLQuery;
                         END;;
                 END;
				
             --Generate new process for current import 
             
             SET @CreateDateString = CONVERT(VARCHAR(100), @UserId)+','''+CONVERT(VARCHAR(100), @GetDate)+''','+CONVERT(VARCHAR(100), @UserId)+','''+CONVERT(VARCHAR(100), @GetDate)+''', '+CONVERT(VARCHAR(100), @ImportProcessLogId);

             SELECT TOP 1 @ImportHeadId = ImportHeadId FROM ZnodeImportTemplate WHERE ImportTemplateId = @TemplateId;
             IF @DefaultFamilyId = 0
                AND @ImportHeadName IN('Product', 'Category')
                 BEGIN 
                     --Get all default attribute values in attribute 
                     INSERT INTO @FamilyAttributeDetail
                     (PimAttributeId,
                      AttributeTypeName,
                      AttributeCode,
                      SourceColumnName,
                      IsRequired,
                      PimAttributeFamilyId
                     )
                     --Call Process to insert data of defeult family with source column name and target column name 
                     EXEC Znode_ImportGetTemplateDetails
                          @TemplateId = @TemplateId,
                          @IsValidationRules = 0,
                          @IsIncludeRespectiveFamily = 1,
                          @IsCategory = @IsCategory,
                          @DefaultFamilyId = @DefaultFamilyId;

					---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
					Delete FAD from @FamilyAttributeDetail FAD
					where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
					and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					               inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
                 END;
             ELSE
             IF @ImportHeadName IN('Product', 'Category')
                 BEGIN
                     --Get all default attribute values in attribute 
                     INSERT INTO @FamilyAttributeDetail
                     (PimAttributeId,
                      AttributeTypeName,
                      AttributeCode,
                      SourceColumnName,
                      IsRequired,
                      PimAttributeFamilyId
                     )
                     --Call Process to insert data of defeult family with source column name and target column name 
                     EXEC Znode_ImportGetTemplateDetails
                          @TemplateId = @TemplateId,
                          @IsValidationRules = 0,
                          @IsIncludeRespectiveFamily = 1,
                          @IsCategory = @IsCategory,
                          @DefaultFamilyId = @DefaultFamilyId;

					---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
					Delete FAD from @FamilyAttributeDetail FAD
					where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
					and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					               inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
                 END;      
             -- Check attributes are manditory and not provided with source table
		   	 
			if @TABLENAME	like '%tempdb..%'
				SET @SQLQuery = 'SELECT 42 AS ErrorDescription , SourceColumnName , '''' , '''+@NewGUID+''','+@CreateDateString+' from ZnodeImportTemplateMapping where ImportTemplateId = '+CONVERT(VARCHAR(100), @TemplateId)+' and ltrim(rtrim(SourceColumnName)) <> '''' AND ltrim(rtrim(SourceColumnName)) not in ( select isnull(Name ,'''') from tempdb.sys.columns where object_id = object_id('''+@TABLENAME+'''));';
			else 
				SET @SQLQuery = 'SELECT 42 AS ErrorDescription , SourceColumnName , '''' , '''+@NewGUID+''','+@CreateDateString+' from ZnodeImportTemplateMapping where ImportTemplateId = '+CONVERT(VARCHAR(100), @TemplateId)+' and ltrim(rtrim(SourceColumnName)) <> '''' AND ltrim(rtrim(SourceColumnName)) not in ( select isnull(Name ,'''') from sys.columns where object_id = object_id('''+@TABLENAME+'''));';
		 
			Declare @Tbl_CsvDynamicColulmns TABLE (ColumnName nvarchar(300), SequenceNumber int, DataType nvarchar(50),IsRequired bit )

			INSERT INTO @Tbl_CsvDynamicColulmns(ColumnName , SequenceNumber , DataType ,IsRequired)
			SELECT DISTINCT ZITM.SourceColumnName ,ZIAV.SequenceNumber, ZIAV.AttributeTypeName, ZIAV.IsRequired
			FROM ZnodeImportAttributeValidation ZIAV LEFT OUTER JOIN 
			ZnodeImportTemplate  ZIT ON ZIT.ImportHeadId =  ZIAV.ImportHeadId AND ZIT.ImportTemplateId  = @TemplateId
			LEFT OUTER JOIN ZnodeImportTemplateMapping  ZITM ON ZITM.ImportTemplateId = ZIT.ImportTemplateId  
			and ZIAV.AttributeCode = ZITM.TargetColumnName
			AND ZITM.ImportTemplateId  = @TemplateId
			WHERE ZIAV.ImportHeadId = @ImportHeadId 


		    SELECT @CsvColumnString = SUBSTRING ((Select ',' +  ISNULL(ColumnName ,'NULL') from @Tbl_CsvDynamicColulmns ORDER BY SequenceNumber FOR XML PATH ('')),2,4000) 


     		INSERT INTO ZnodeImportLog(ErrorDescription, ColumnName, Data, GUID,CreatedBy, CreatedDate,  ModifiedBy,ModifiedDate,ImportProcessLogId
             )
             EXEC sys.sp_sqlexec  @SQLQuery;
             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM ZnodeImportLog
                 WHERE Guid = @NewGUID
                       AND ErrorDescription IN(43, 42)
                 AND ImportProcessLogId = @ImportProcessLogId
             )
                 BEGIN
                     --Get all default attribute values in attribute 
                     IF @ImportHeadName IN('Product', 'Category')
                         BEGIN
                             -- Check attributes are manditory and not provided with source table
                             INSERT INTO ZnodeImportLog
                             (ErrorDescription,
                              ColumnName,
                              Data,
                              GUID,
                              CreatedBy,
                              CreatedDate,
                              ModifiedBy,
                              ModifiedDate,
                              ImportProcessLogId
                             )
                                    SELECT '14' AS ErrorDescription,
                                           AttributeCode,
                                           '',
                                           @NewGUID,
                                           @UserId,
                                           @GetDate,
                                           @UserId,
                                           @GetDate,
                                           @ImportProcessLogId
                                    FROM @FamilyAttributeDetail
                                    WHERE ISNULL(SourceColumnName, '') = ''
                                          AND IsRequired = 1;  

                             -- Read all attribute details with their datatype
                             INSERT INTO @AttributeDetail
                             (PimAttributeId,
                              AttributeTypeName,
                              AttributeCode,
                              SourceColumnName,
                              IsRequired,
                              ControlName,
                              ValidationName,
                              SubValidationName,
                              ValidationValue,
                              RegExp
                             )
                             EXEC Znode_ImportGetTemplateDetails
                                  @TemplateId=@TemplateId,
								  @DefaultFamilyId=@DefaultFamilyId;

							---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
							Delete FAD from @AttributeDetail FAD
							where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
							and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
										   inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode) 

                             DELETE FROM @AttributeDetail
                             WHERE AttributeTypeName = 'Image'
                                   AND ValidationName <> 'IsAllowMultiUpload';
                          
                                     INSERT INTO #DefaultAttributeCode
                                     (AttributeTypeName,
                                      PimAttributeDefaultValueId,
                                      PimAttributeId,
                                      AttributeDefaultValueCode
                                     )
                                     --Call Process to insert default data value 
                                     EXEC Znode_ImportGetPimAttributeDefaultValue;

                                     DELETE FROM #DefaultAttributeCode
                                     WHERE AttributeTypeName = 'Yes/No';
                             
                         END;
                     ELSE
                         BEGIN
					
					
                             --Read all attribute details with their datatype
                             INSERT INTO @AttributeDetail
                             (AttributeTypeName,
                              AttributeCode,
                              SourceColumnName,
                              IsRequired,
                              ControlName,
                              ValidationName,
                              SubValidationName,
                              ValidationValue,
                              RegExp
                             )
                             EXEC [Znode_ImportGetOtherTemplateDetails]
                                  @TemplateId = @TemplateId,
                                  @ImportHeadId = @ImportHeadId;

							IF @ImportHeadName IN('B2BCustomer')
							BEGIN

								INSERT INTO @AttributeDetail
								 (PimAttributeId,
								 AttributeTypeName,
								  AttributeCode,
								  SourceColumnName,
								  IsRequired,
								  ControlName,
								  ValidationName,
								  SubValidationName,
								  ValidationValue,
								  RegExp
								 )
								 EXEC [Znode_ImportGetGlobalTemplateDetails]
									  @TemplateId = @TemplateId,
									  @ImportHeadId = @ImportHeadId;

								
								INSERT INTO #DefaultAttributeCode
								(AttributeTypeName,
								PimAttributeDefaultValueId,
								PimAttributeId,
								AttributeDefaultValueCode
								)
								--Call Process to insert default data value 
								EXEC Znode_ImportGetGlobalAttributeDefaultValue;

								DELETE FROM #DefaultAttributeCode
								WHERE AttributeTypeName = 'Yes/No';

							END
						
                             --Check attributes are not mapped with any family of Pim Product
                             INSERT INTO ZnodeImportLog
                             (ErrorDescription,
                              ColumnName,
                              Data,
                              GUID,
                              CreatedBy,
                              CreatedDate,
                              ModifiedBy,
                              ModifiedDate,
                              ImportProcessLogId
                             )
                                    SELECT DISTINCT
                                           '14' AS ErrorDescription,
                                           AttributeCode,
                                           '',
                                           @NewGUID,
                                           @UserId,
                                           @GetDate,
                                           @UserId,
                                           @GetDate,
                                           @ImportProcessLogId
                                    FROM @AttributeDetail
                                    WHERE ISNULL(SourceColumnName, '') = ''   AND IsRequired = 1;  ;

                         END;
						
                     --	Check attributes are not mapped with (Default / Other) family of Pim Product
                   
                     --	Verify data in global temporary table (column wise)
					
                     DECLARE Cr_Attribute CURSOR LOCAL FAST_FORWARD
                     FOR SELECT PimAttributeId,
                                AttributeTypeName,
                                AttributeCode,
                                IsRequired,
                                SourceColumnName,
                                ControlName,
                                ValidationName,
                                SubValidationName,
                                ValidationValue,
                                RegExp
                         FROM @AttributeDetail
                         WHERE ISNULL(SourceColumnName, '') <> '';
                     OPEN Cr_Attribute;
                     FETCH NEXT FROM Cr_Attribute INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @ControlName, @ValidationName, @SubValidationName, @ValidationValue, @RegExp;
                     WHILE @@FETCH_STATUS = 0
                         BEGIN
				             IF @AttributeTypeName = 'Number'
                                 BEGIN
							      EXEC Znode_ImportValidateNumber
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @ImportHeadId = @ImportHeadId,
                                          @ImportProcessLogId = @ImportProcessLogId;
                                 END;
							 -- Check invalid date
							
                             IF @AttributeTypeName = 'Date'
                                 BEGIN
                                     EXEC Znode_ImportValidateDate
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @ImportHeadId = @ImportHeadId,
                                          @ImportProcessLogId = @ImportProcessLogId;
                                 END;
							 -- Check Manditory Data
		 					 IF @IsRequired = 1 AND @CheckedSourceColumn <> @SourceColumnName
								BEGIN
									SET @CheckedSourceColumn = @SourceColumnName;
									EXEC Znode_ImportValidateManditoryData
									@TableName = @TableName,
									@SourceColumnName = @SourceColumnName,
									@CreateDateString = @CreateDateString,
									@ValidationName = @ValidationName,
									@ControlName = @ControlName,
									@ValidationValue = @ValidationValue,
									@NewGUID = @NewGUID,
									@ImportHeadId = @ImportHeadId;
								END;
							 --END 
							
                             IF @AttributeTypeName = 'Text'
                                 BEGIN
								 
						              EXEC Znode_ImportValidateManditoryText
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @LocaleId = @LocaleId,
                                          @DefaultLocaleId = @DefaultLocaleId,
                                          @AttributeId = @AttributeId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @ImportHeadId = @ImportHeadId;
                                 END;
                             IF @AttributeTypeName = 'Image'
                                 BEGIN
                                     EXEC Znode_ImportValidateImageData
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @LocaleId = @LocaleId,
                                          @DefaultLocaleId = @DefaultLocaleId,
                                          @AttributeId = @AttributeId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @ImportHeadId = @ImportHeadId;
                                 END;

					

                             --Check Default data value is valid 
                             IF @ImportHeadName IN('Product', 'Category','B2BCustomer')
                                 BEGIN
                                     IF @AttributeId IN
                                     (
                                         SELECT PimAttributeId
                                         FROM #DefaultAttributeCode
                                     )
                                         BEGIN
							
                                            IF  @AttributeTypeName = 'Multi Select'
											 BEGIN
										 		 ---Verify Image file is exists in media table or not 
												 SET @SQLQuery = ' INSERT INTO #InvalidDefaultData (RowNumber, Value, ColumnName) 
												 SELECT ROWNUMBER , (Select TOP 1 Item from dbo.split(' + @SourceColumnName + ','','')  SP WHERE NOT EXISTS 
												 (Select ToP 1 1 FROM #DefaultAttributeCode DAC WHERE 
												  DAC.AttributeTypeName <> ''Yes/No'' AND DAC.AttributeDefaultValueCode IS NOT NULL AND DAC.PimAttributeId = 
												 ' + CONVERT(VARCHAR(100), @AttributeId) + ' AND ltrim(rtrim(SP.Item) ) = DAC.AttributeDefaultValueCode
												 )), ''' + @SourceColumnName + ''' as [ColumnName]  FROM ' + @TableName
												 + ' Where ISnull(' + @SourceColumnName +  ','''') <> '''''
												EXEC sys.sp_sqlexec @SQLQuery;
											  END
											  ELSE IF @AttributeTypeName = 'Simple Select'
											  BEGIN
						
												---Verify Image file is exists in media table or not 
												 SET @SQLQuery = ' INSERT INTO #InvalidDefaultData (RowNumber, Value, ColumnName) 
												 SELECT ROWNUMBER , ' + @SourceColumnName + ' , ''' + @SourceColumnName + ''' as [ColumnName]  FROM ' + @TableName
												 + ' SP Where ISnull(' + @SourceColumnName +  ','''') <> '''' AND 
												  NOT EXISTS 
												 (Select TOP 1 1 FROM #DefaultAttributeCode DAC WHERE 
												  DAC.AttributeTypeName <> ''Yes/No'' AND DAC.AttributeDefaultValueCode IS NOT NULL AND DAC.PimAttributeId = 
												 ' + CONVERT(VARCHAR(100), @AttributeId) + ' AND ltrim(rtrim(SP.' + @SourceColumnName + ') ) = DAC.AttributeDefaultValueCode ) '
							
												EXEC sys.sp_sqlexec @SQLQuery;
											  END   
												-- Check Invalid Image 
												 SET @SQLQuery = 'SELECT ''9 '' ErrorDescription,'''+@SourceColumnName+''' as [ColumnName], 
												 Value AS  AttributeValue,RowNumber ,'''+@NewGUID+''',  '+@CreateDateString+' FROM #InvalidDefaultData Where Value IS NOT NULL'
												 INSERT INTO ZnodeImportLog (ErrorDescription, ColumnName, Data, RowNumber, GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
												 EXEC sys.sp_sqlexec @SQLQuery;
												 Delete from #InvalidDefaultData

       
                                         END;
                                 END;
							
                             FETCH NEXT FROM Cr_Attribute INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @ControlName, @ValidationName, @SubValidationName, @ValidationValue, @RegExp;
                         END;
                     CLOSE Cr_Attribute;
                     DEALLOCATE Cr_Attribute;
                     
                 END;
             

		 Declare @SQLQueryNew NVARCHAR(4000)
		 Declare @SourceColumnNameProduct nvarchar(4000) 
         IF @ImportHeadName IN('Product','Pricing','ProductAssociation','Inventory')
		 BEGIN
		  	 
		 SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'SKU'
		 AND ImportTemplateId = @TemplateId


			SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  SKU - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            
			EXEC sys.sp_sqlexec  @SQLQueryNew;			
		END
		ELSE IF @ImportHeadName IN('ProductAttribute')
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'AttributeCode'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  Attribute - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'ZipCode'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'ZIP'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  ZIPCode - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
           
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'Category'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'CategoryCode'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  CategoryCode - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
          
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'CategoryAssociation'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'CategoryName'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  CategoryName - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
           
			EXEC sys.sp_sqlexec  @SQLQueryNew;

		END
		ELSE IF @ImportHeadName IN ('Customer','CustomerAddress')
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'UserName'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  UserName - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'SEODetails'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'Code'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  Code - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'Highlight'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'HighlightCode'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  HighlightCode - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
	
			 
  		SET @SQLQuery = 'Delete FROM  '+@TableName+' Where Rownumber IN (Select Rownumber FROM ZnodeImportLog  WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND Rownumber IS NOT NULL)';
        EXEC sys.sp_sqlexec  @SQLQuery;
			 			
	  
             IF @ImportHeadName IN('Product', 'Category')
                 BEGIN
                     IF NOT EXISTS
                     (
                         SELECT TOP 1 1
                         FROM @FamilyAttributeDetail
                         WHERE ISNULL(SourceColumnName, '') = ''
                               AND IsRequired = 1
                     ) AND NOT EXISTS
					 (
						 SELECT TOP 1 1
						 FROM ZnodeImportLog
						 WHERE Guid = @NewGUID
							   AND ErrorDescription IN(43, 42)
						 AND ImportProcessLogId = @ImportProcessLogId
					 )
                         BEGIN
                             IF @IsCategory = 0
                                 BEGIN
							
                                     EXEC Znode_ImportPimProductData
                                          @TableName = @TableName,
                                          @NewGUID = @NewGUID,
                                          @TemplateId = @TemplateId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @UserId = @UserId,
                                          @LocaleId = @LocaleId,
                                          @DefaultFamilyId = @DefaultFamilyId;

                                 END;
                             ELSE
                                 BEGIN
                                     EXEC Znode_ImportPimCategoryData
                                          @TableName = @TableName,
                                          @NewGUID = @NewGUID,
                                          @TemplateId = @TemplateId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @UserId = @UserId,
                                          @LocaleId = @LocaleId,
                                          @DefaultFamilyId = @DefaultFamilyId;
                                 END;
                         END
						 ELSE
							BEGIN
								-- Update Record count in log 
								

								SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
								SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
								EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount out
								UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
								WHERE ImportProcessLogId = @ImportProcessLogId;
							END

                 END;
				IF NOT EXISTS
					 (
						 SELECT TOP 1 1
						 FROM ZnodeImportLog
						 WHERE Guid = @NewGUID
							   AND ErrorDescription IN(43, 42)
						 AND ImportProcessLogId = @ImportProcessLogId
					 )
             BEGIN
                 IF @ImportHeadName = 'Pricing'
                     BEGIN
                         EXEC [Znode_ImportPriceList]
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID,
                              @PriceListId = @PriceListId;
                     END;

                 IF @ImportHeadName = 'Inventory'
                     BEGIN
				
                         EXEC Znode_ImportInventory_Ver1
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID;
                     END;
                 IF @ImportHeadName = 'ZipCode'
                     BEGIN
						 EXEC Znode_ImportZipCode
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID,
							  @CountryCode = @CountryCode;
                     END;
					 IF @ImportHeadName = 'CategoryAssociation'
                     BEGIN
						 EXEC Znode_ImportCatalogCategory
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID,
							  @PimCatalogId = @PimCatalogId;
                     END;
					 IF @ImportHeadName = 'ProductAssociation'
                     BEGIN
						 EXEC Znode_ImportAssociateProducts
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID
                     END;
			
					 IF @ImportHeadName = 'SEODetails' AND @PortalId > 0 
                     BEGIN
						 EXEC Znode_ImportSEODetails
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
							  @LocaleId = @LocaleId,
							  @PortalId =@PortalId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID,
							  @CsvColumnString = @CsvColumnString 

				
                     END;
				
					 IF @ImportHeadName = 'ProductAttribute' 
                     BEGIN
						 EXEC Znode_ImportAttributes
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
							  @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID
				
                     END;

					 IF @ImportHeadName = 'Customer' AND @PortalId > 0 
                     BEGIN
					
					
						 EXEC Znode_ImportCustomer
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = @PortalId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString
				
                     END;
					 
					 IF @ImportHeadName = 'UserApprovers' AND @PortalId > 0 
                     BEGIN
						 EXEC Znode_ImportUserApproval
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = @PortalId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString
				
                     END;

					 IF @ImportHeadName = 'B2BCustomer' AND @PortalId > 0 
                     BEGIN

							 EXEC Znode_ImportB2BCustomer
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = @PortalId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString
				
                     END;

					 IF @ImportHeadName = 'CustomerAddress'  
                     BEGIN
						 EXEC Znode_ImportCustomerAddress
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = 1, -- not implemented from forntend 
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString,
							  @IsAccountAddress = @IsAccountAddress
				
                     END;
					 IF @ImportHeadName = 'ShippingAddress' 
                     BEGIN
						 EXEC Znode_ImportCustomerAddress
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = 1, -- not implemented from forntend 
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString,
							  @IsAccountAddress = @IsAccountAddress
				
                     END;
					 IF @ImportHeadName = 'StoreLocator' 
                     BEGIN
					 	 EXEC Znode_ImportStoreLocatorAddress
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString
                     END;

					IF @ImportHeadName = 'Highlight'
					BEGIN
					EXEC Znode_ImportHighlight 
					@TableName = @TableName, 
					@Status = @Status, 
					@UserId = @UserId, 
					@ImportProcessLogId = @ImportProcessLogId, 
					@NewGUID = @NewGUID 
					END;

				 
             END
			 ELSE 
				 BEGIN
					-- Update Record count in log 	
					SET @SQLQuery = ' Select @FailedRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
					EXEC	sp_executesql @SQLQuery , N'@FailedRecordCount BIGINT out' , @FailedRecordCount =@FailedRecordCount out
					--SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS  NULL AND  ImportProcessLogId = @ImportProcessLogId;
					SELECT @SuccessRecordCount = 0
									
					UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
					WHERE ImportProcessLogId = @ImportProcessLogId;
				
				 END

             EXEC Znode_ImportReadErrorLog
                  @ImportProcessLogId = @ImportProcessLogId,
                  @NewGUID = @NewGUID;
             DROP TABLE #GlobalTempTableColumns;

             -- Finally call product insert process if error not found in error log table 
             IF EXISTS
             (
                 SELECT TOP 1 1
                 FROM ZnodeImportLog
                 WHERE ImportProcessLogId = @ImportProcessLogId
                       AND Guid = @NewGUID
             )
                 BEGIN
                     --Update process with completed status for current import 
                     UPDATE ZnodeImportProcessLog
                       SET
                           Status = dbo.Fn_GetImportStatus(3),
                           ProcessCompletedDate = GETDATE()
                       WHERE ImportProcessLogId = @ImportProcessLogId;
                 END;
				 SET @SQLQuery = 'Drop Table ' + @TableName
                 EXEC sys.sp_sqlexec @SQLQuery;
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE(),
                    ERROR_LINE(),
                    ERROR_PROCEDURE();
             EXEC Znode_ImportReadErrorLog
                  @ImportProcessLogId = @ImportProcessLogId,
                  @NewGUID = @NewGUID; 
             --Update process with failed status for current import 
             UPDATE ZnodeImportProcessLog
               SET
                   Status = dbo.Fn_GetImportStatus(3),
                   ProcessCompletedDate = @GetDate
             WHERE ImportProcessLogId = @ImportProcessLogId;
			 				 SET @SQLQuery = 'Drop Table ' + @TableName
                 EXEC sys.sp_sqlexec @SQLQuery;
             --ROLLBACK TRAN TRN_ImportValidProductData;
         END CATCH;
     END;

	 GO
	 

insert into ZnodeImportHead(Name,IsUsedInImport,IsUsedInDynamicReport,IsActive,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,IsCsvUploader)
select 'Highlight', 1, 0, 1, 2, getdate(),2,GETDATE(),null
where not exists( select * from ZnodeImportHead where Name = 'Highlight')
GO
insert into ZnodeImportTemplate(ImportHeadId,TemplateName,TemplateVersion,PimAttributeFamilyId,IsActive,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight'), 'HighlightTemplate',null,null,1,2,getdate(),2,GETDATE()
where not exists( select * from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight') and TemplateName = 'HighlightTemplate' )
and exists( select * from ZnodeImportHead where Name = 'Highlight')

GO
insert into ZnodeImportTemplateMapping(ImportTemplateId,	SourceColumnName,	TargetColumnName,	DisplayOrder,	IsActive,	IsAllowNull,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate)
select ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight') and TemplateName = 'HighlightTemplate' ),
       'HighlightCode','HighlightCode', 1,1,1,2,getdate(),2,GETDATE()
where not exists (select * from ZnodeImportTemplateMapping where ImportTemplateId = ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight') and TemplateName = 'HighlightTemplate' )
and SourceColumnName = 'HighlightCode')
and exists(select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight') and TemplateName = 'HighlightTemplate' )

GO
insert into ZnodeImportTemplateMapping(ImportTemplateId,	SourceColumnName,	TargetColumnName,	DisplayOrder,	IsActive,	IsAllowNull,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate)
select ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight') and TemplateName = 'HighlightTemplate' ),
       'HighlightName','HighlightName', 1,1,1,2,getdate(),2,GETDATE()
where not exists (select * from ZnodeImportTemplateMapping where ImportTemplateId = ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight') and TemplateName = 'HighlightTemplate' )
and SourceColumnName = 'HighlightName')
and exists(select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight') and TemplateName = 'HighlightTemplate' )

GO
insert into ZnodeImportTemplateMapping(ImportTemplateId,	SourceColumnName,	TargetColumnName,	DisplayOrder,	IsActive,	IsAllowNull,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate)
select ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight') and TemplateName = 'HighlightTemplate' ),
       'DisplayPopup','DisplayPopup', 1,1,1,2,getdate(),2,GETDATE()
where not exists (select * from ZnodeImportTemplateMapping where ImportTemplateId = ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight') and TemplateName = 'HighlightTemplate' )
and SourceColumnName = 'DisplayPopup')
and exists(select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight') and TemplateName = 'HighlightTemplate' )

GO
insert into ZnodeImportTemplateMapping(ImportTemplateId,	SourceColumnName,	TargetColumnName,	DisplayOrder,	IsActive,	IsAllowNull,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate)
select ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight') and TemplateName = 'HighlightTemplate' ),
       'Hyperlink','Hyperlink', 1,1,1,2,getdate(),2,GETDATE()
where not exists (select * from ZnodeImportTemplateMapping where ImportTemplateId = ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight') and TemplateName = 'HighlightTemplate' )
and SourceColumnName = 'Hyperlink')
and exists(select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight') and TemplateName = 'HighlightTemplate' )

GO
insert into ZnodeImportTemplateMapping(ImportTemplateId,	SourceColumnName,	TargetColumnName,	DisplayOrder,	IsActive,	IsAllowNull,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate)
select ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight') and TemplateName = 'HighlightTemplate' ),
       'HighlightType','HighlightType', 1,1,1,2,getdate(),2,GETDATE()
where not exists (select * from ZnodeImportTemplateMapping where ImportTemplateId = ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight') and TemplateName = 'HighlightTemplate' )
and SourceColumnName = 'HighlightType')
and exists(select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight') and TemplateName = 'HighlightTemplate' )

GO
insert into ZnodeImportTemplateMapping(ImportTemplateId,	SourceColumnName,	TargetColumnName,	DisplayOrder,	IsActive,	IsAllowNull,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate)
select ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight') and TemplateName = 'HighlightTemplate' ),
       'IsActive','IsActive', 1,1,1,2,getdate(),2,GETDATE()
where not exists (select * from ZnodeImportTemplateMapping where ImportTemplateId = ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight') and TemplateName = 'HighlightTemplate' )
and SourceColumnName = 'IsActive')
and exists(select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight') and TemplateName = 'HighlightTemplate' )

GO
insert into ZnodeImportTemplateMapping(ImportTemplateId,	SourceColumnName,	TargetColumnName,	DisplayOrder,	IsActive,	IsAllowNull,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate)
select ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight') and TemplateName = 'HighlightTemplate' ),
       'DisplayOrder','DisplayOrder', 1,1,1,2,getdate(),2,GETDATE()
where not exists (select * from ZnodeImportTemplateMapping where ImportTemplateId = ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight') and TemplateName = 'HighlightTemplate' )
and SourceColumnName = 'DisplayOrder')
and exists(select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight') and TemplateName = 'HighlightTemplate' )

GO
insert into ZnodeImportTemplateMapping(ImportTemplateId,	SourceColumnName,	TargetColumnName,	DisplayOrder,	IsActive,	IsAllowNull,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate)
select ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight') and TemplateName = 'HighlightTemplate' ),
       'HighlightImage','HighlightImage', 1,1,1,2,getdate(),2,GETDATE()
where not exists (select * from ZnodeImportTemplateMapping where ImportTemplateId = ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight') and TemplateName = 'HighlightTemplate' )
and SourceColumnName = 'HighlightImage')
and exists(select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight') and TemplateName = 'HighlightTemplate' )

GO
insert into ZnodeImportTemplateMapping(ImportTemplateId,	SourceColumnName,	TargetColumnName,	DisplayOrder,	IsActive,	IsAllowNull,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate)
select ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight') and TemplateName = 'HighlightTemplate' ),
       'HighlightImagePath','HighlightImagePath', 1,1,1,2,getdate(),2,GETDATE()
where not exists (select * from ZnodeImportTemplateMapping where ImportTemplateId = ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight') and TemplateName = 'HighlightTemplate' )
and SourceColumnName = 'HighlightImagePath')
and exists(select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight') and TemplateName = 'HighlightTemplate' )

GO
insert into ZnodeImportTemplateMapping(ImportTemplateId,	SourceColumnName,	TargetColumnName,	DisplayOrder,	IsActive,	IsAllowNull,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate)
select ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight') and TemplateName = 'HighlightTemplate' ),
       'Description','Description', 1,1,1,2,getdate(),2,GETDATE()
where not exists (select * from ZnodeImportTemplateMapping where ImportTemplateId = ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight') and TemplateName = 'HighlightTemplate' )
and SourceColumnName = 'Description')
and exists(select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight') and TemplateName = 'HighlightTemplate' )

GO
insert into ZnodeImportTemplateMapping(ImportTemplateId,	SourceColumnName,	TargetColumnName,	DisplayOrder,	IsActive,	IsAllowNull,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate)
select ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight') and TemplateName = 'HighlightTemplate' ),
       'ShortDescription','ShortDescription', 1,1,1,2,getdate(),2,GETDATE()
where not exists (select * from ZnodeImportTemplateMapping where ImportTemplateId = ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight') and TemplateName = 'HighlightTemplate' )
and SourceColumnName = 'ShortDescription')
and exists(select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight') and TemplateName = 'HighlightTemplate' )

GO
insert into ZnodeImportTemplateMapping(ImportTemplateId,	SourceColumnName,	TargetColumnName,	DisplayOrder,	IsActive,	IsAllowNull,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate)
select ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight') and TemplateName = 'HighlightTemplate' ),
       'ImageAltTag','ImageAltTag', 1,1,1,2,getdate(),2,GETDATE()
where not exists (select * from ZnodeImportTemplateMapping where ImportTemplateId = ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight') and TemplateName = 'HighlightTemplate' )
and SourceColumnName = 'ImageAltTag')
and exists(select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight') and TemplateName = 'HighlightTemplate' )

GO
-------------
INSERT INTO ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
SELECT 'Text', 'HighlightCode', (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight'),1,'Text','RegularExpression',NULL,'','',NULL,2,GETDATE(),2,GETDATE(),1
WHERE NOT EXISTS(SELECT * FROM ZnodeImportAttributeValidation WHERE AttributeCode = 'HighlightCode' AND ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight'))

GO
INSERT INTO ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
SELECT 'Text', 'HighlightName', (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight'),1,'Text','RegularExpression',NULL,'','',NULL,2,GETDATE(),2,GETDATE(),2
WHERE NOT EXISTS(SELECT * FROM ZnodeImportAttributeValidation WHERE AttributeCode = 'HighlightName' AND ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight'))

GO
INSERT INTO ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
SELECT 'Text', 'DisplayPopup', (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight'),0,'Text','RegularExpression',NULL,'','',NULL,2,GETDATE(),2,GETDATE(),3
WHERE NOT EXISTS(SELECT * FROM ZnodeImportAttributeValidation WHERE AttributeCode = 'DisplayPopup' AND ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight'))
GO
INSERT INTO ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
SELECT 'Text', 'Hyperlink', (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight'),0,'Text','RegularExpression',NULL,'','',NULL,2,GETDATE(),2,GETDATE(),4
WHERE NOT EXISTS(SELECT * FROM ZnodeImportAttributeValidation WHERE AttributeCode = 'Hyperlink' AND ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight'))
GO
INSERT INTO ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
SELECT 'Text', 'HighlightType', (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight'),0,'Text','RegularExpression',NULL,'','',NULL,2,GETDATE(),2,GETDATE(),5
WHERE NOT EXISTS(SELECT * FROM ZnodeImportAttributeValidation WHERE AttributeCode = 'HighlightType' AND ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight'))
GO
INSERT INTO ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
SELECT 'Text', 'IsActive', (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight'),0,'Text','RegularExpression',NULL,'','',NULL,2,GETDATE(),2,GETDATE(),6
WHERE NOT EXISTS(SELECT * FROM ZnodeImportAttributeValidation WHERE AttributeCode = 'IsActive' AND ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight'))
GO
INSERT INTO ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
SELECT 'Number', 'DisplayOrder', (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight'),0,'Yes/No','AllowNegative',NULL,'false','',NULL,2,GETDATE(),2,GETDATE(),7
WHERE NOT EXISTS(SELECT * FROM ZnodeImportAttributeValidation WHERE AttributeCode = 'DisplayOrder' AND ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight') and 
  ValidationName = 'AllowNegative' )
  GO
INSERT INTO ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
SELECT 'Number', 'DisplayOrder', (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight'),0,'Yes/No','AllowDecimals',NULL,'false','',NULL,2,GETDATE(),2,GETDATE(),7
WHERE NOT EXISTS(SELECT * FROM ZnodeImportAttributeValidation WHERE AttributeCode = 'DisplayOrder' AND ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight') and 
  ValidationName = 'AllowDecimals' )
 GO
INSERT INTO ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
SELECT 'Number', 'DisplayOrder', (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight'),0,'Yes/No','MinNumber',NULL,'1','',NULL,2,GETDATE(),2,GETDATE(),7
WHERE NOT EXISTS(SELECT * FROM ZnodeImportAttributeValidation WHERE AttributeCode = 'DisplayOrder' AND ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight') and 
  ValidationName = 'MinNumber' )
    
INSERT INTO ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
SELECT 'Number', 'DisplayOrder', (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight'),0,'Yes/No','MaxNumber',NULL,'999999','',NULL,2,GETDATE(),2,GETDATE(),7
WHERE NOT EXISTS(SELECT * FROM ZnodeImportAttributeValidation WHERE AttributeCode = 'DisplayOrder' AND ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight') and 
  ValidationName = 'MaxNumber' )
  
  GO
INSERT INTO ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
SELECT 'Text', 'HighlightImage', (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight'),0,'Text','RegularExpression',NULL,'','',NULL,2,GETDATE(),2,GETDATE(),8
WHERE NOT EXISTS(SELECT * FROM ZnodeImportAttributeValidation WHERE AttributeCode = 'HighlightImage' AND ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight'))
  
  GO
INSERT INTO ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
SELECT 'Text', 'HighlightImagePath', (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight'),0,'Text','RegularExpression',NULL,'','',NULL,2,GETDATE(),2,GETDATE(),9
WHERE NOT EXISTS(SELECT * FROM ZnodeImportAttributeValidation WHERE AttributeCode = 'HighlightImagePath' AND ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight'))
  
  GO
INSERT INTO ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
SELECT 'Text', 'Description', (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight'),0,'Text','RegularExpression',NULL,'','',NULL,2,GETDATE(),2,GETDATE(),10
WHERE NOT EXISTS(SELECT * FROM ZnodeImportAttributeValidation WHERE AttributeCode = 'Description' AND ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight'))
  
  GO
INSERT INTO ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
SELECT 'Text', 'ShortDescription', (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight'),0,'Text','RegularExpression',NULL,'','',NULL,2,GETDATE(),2,GETDATE(),11
WHERE NOT EXISTS(SELECT * FROM ZnodeImportAttributeValidation WHERE AttributeCode = 'ShortDescription' AND ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight'))
  
  GO
INSERT INTO ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
SELECT 'Text', 'ImageAltTag', (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight'),0,'Text','RegularExpression',NULL,'','',NULL,2,GETDATE(),2,GETDATE(),12
WHERE NOT EXISTS(SELECT * FROM ZnodeImportAttributeValidation WHERE AttributeCode = 'ImageAltTag' AND ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Highlight'))

GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'ZnodeReport_GetCouponFiltered')
BEGIN 
	DROP PROCEDURE ZnodeReport_GetCouponFiltered
END
GO

CREATE PROCEDURE [dbo].[ZnodeReport_GetCouponFiltered]  
(   @BeginDate    DATE         = NULL,  
 @EndDate      DATE         = NULL,  
 @PortalId     VARCHAR(MAX) = '',  
 @DiscountCode NVARCHAR(50) = '',  
 @DiscountType VARCHAR(600) = '')  
AS   
/*  
     Summary:- this procedure is used to get coupon filtered ( include promotion details )  
      
     EXEC ZnodeReport_GetCouponFiltered @DiscountCode = 'o' ,@PortalId = '2,4,5' ,@DiscountType = 'pro'  
*/  
     BEGIN  
  BEGIN TRY  
         SET NOCOUNT ON;   
  
         DECLARE @ZnodeOmsOrderDiscount TABLE  
         (OmsOrderDiscountId INT,  
          OmsOrderDetailsId  INT,  
          OmsOrderLineItemId INT,  
          OmsDiscountTypeId  INT,  
          DiscountCode       VARCHAR(50),  
          DiscountAmount     NUMERIC(28, 6),  
          Description        NVARCHAR(MAX),  
          CreatedBy          INT,  
          CreatedDate        DATETIME,  
          ModifiedBy         INT,  
          ModifiedDate       DATETIME,  
          PortalId           INT,  
          Total              NUMERIC(28, 6),  
    Symbol    NVARCHAR(100),  
    OmsOrderDate       Datetime  
  
         );  
         INSERT INTO @ZnodeOmsOrderDiscount  
         (OmsOrderDiscountId,  
          OmsOrderDetailsId,  
            
          OmsDiscountTypeId,  
          DiscountCode,  
          DiscountAmount,  
          Description,  
          CreatedBy,  
          CreatedDate,  
          ModifiedBy,  
          ModifiedDate,  
          PortalId,  
          Total,Symbol,  
    OmsOrderDate  
         )  
                SELECT Distinct zood.OmsOrderDiscountId,  
                       ISNULL(zood.OmsOrderDetailsId, zooli.OmsOrderDetailsId),  
                        
                       zood.OmsDiscountTypeId,  
                       zood.DiscountCode,  
                       zood.DiscountAmount,  
                       zood.Description,  
                       zood.CreatedBy,  
                       zood.CreatedDate,  
                       zood.ModifiedBy,  
                       zood.ModifiedDate,  
                       zoods.PortalId,  
                       zoods.Total, ISNULL(ZC.Symbol,dbo.Fn_GetDefaultCurrencySymbol()) Symbol,zoods.OrderDate  
                FROM ZnodeOmsOrderDiscount AS zood  
                     LEFT OUTER JOIN ZnodeOmsOrderLineItems AS zooli ON zood.OmsOrderLineItemId = zooli.OmsOrderLineItemsId  
                     LEFT OUTER JOIN ZnodeOmsOrderDetails AS zoods 
					 ON ISNULL(zood.OmsOrderDetailsId, zooli.OmsOrderDetailsId) = zoods.OmsOrderDetailsId and zoods.IsActive=1 
	       LEFT JOIN ZnodeCulture ZC ON (ZC.CultureCode = ZOODS.CurrencyCode)  
      ;  
         SELECT zood.DiscountCode AS CouponCode,  
                zdt.[Name] AS DiscountType,  
                zp.[StoreName] AS StoreName,  
                COUNT(zood.DiscountCode) AS TotalCount,  
                [dbo].[Fn_GetDefaultPriceRoundOff](SUM(zood.Total)) AS Total,  
                [dbo].[Fn_GetDefaultPriceRoundOff](SUM(zood.DiscountAmount)) AS DiscountAmount,  
                ISNULL(zpr.[description], znpc.[description]) AS Description,  
                ISNULL(zpr.StartDate, znpc.StartDate) AS StartDate,  
                ISNULL(zpr.EndDate, znpc.EndDate) AS EndDate,Symbol  
         FROM @ZnodeOmsOrderDiscount AS zood  
              INNER JOIN ZnodePortal AS zp ON zood.PortalId = zp.PortalId  
              LEFT OUTER JOIN ZNodePromotion AS zpr ON zood.DiscountCode = zpr.PromoCode  
              LEFT OUTER JOIN ZnodePromotionCoupon AS zprc ON zood.DiscountCode = zprc.Code  
              LEFT OUTER JOIN ZNodePromotion AS znpc ON zprc.PromotionId = znpc.PromotionId  
              LEFT OUTER JOIN ZnodeOmsDiscountType AS zdt ON zood.OmsDiscountTypeId = zdt.OmsDiscountTypeId  
         WHERE((EXISTS  
               (  
                   SELECT TOP 1 1  
                   FROM dbo.split(@PortalId, ',') AS SP  
                   WHERE CAST(zp.PortalId AS VARCHAR(100)) = SP.Item  
                         OR @PortalId = ''  
               )))  
              AND (ISNULL(zood.DiscountCode, '') LIKE '%'+@DiscountCode+'%'  
                   OR @DiscountCode = '')  
              AND (ISNULL(zdt.[Name], '') LIKE '%'+@DiscountType+'%'  
                   OR @DiscountType = '')  
     AND (CAST(zood.OmsOrderDate AS DATE) BETWEEN CASE  
    WHEN @BeginDate IS NULL  
     THEN CAST(zood.OmsOrderDate AS DATE)  
    ELSE @BeginDate  
    END AND CASE  
    WHEN @EndDate IS NULL  
    THEN CAST(zood.OmsOrderDate AS DATE)  
    ELSE @EndDate  
    END  
   )  
         GROUP BY zp.StoreName,  
                  zood.DiscountCode,  
                  ISNULL(zpr.[description], znpc.[description]),  
                  ISNULL(zpr.StartDate, znpc.StartDate),  
                  ISNULL(zpr.EndDate, znpc.EndDate),  
                  zdt.Name,  
                  zood.PortalId,Symbol;  
  
  END TRY  
  BEGIN CATCH  
  DECLARE @Status BIT ;  
       SET @Status = 0;  
       DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),  
    @ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeReport_GetCouponFiltered @PortalId = '+@PortalId+',@BeginDate='+CAST(@BeginDate AS VARCHAR(200))+',@EndDate='+CAST(@EndDate AS VARCHAR(200))+',@DiscountCode='+@DiscountCode+',@DiscountType='+@DiscountType+',@Status
='+CAST(@Status AS VARCHAR(10));  
                    
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                      
      
             EXEC Znode_InsertProcedureErrorLog  
    @ProcedureName = 'ZnodeReport_GetCouponFiltered',  
    @ErrorInProcedure = @Error_procedure,  
    @ErrorMessage = @ErrorMessage,  
    @ErrorLine = @ErrorLine,  
    @ErrorCall = @ErrorCall;  
  END CATCH  
     END;
	 GO

	 
SELECT CMSSEODetailId,PortalId,CMSSEOTYPEID,SEOCode ,SEOURL,ROW_NUMBER()OVER(PARTITION BY PortalID,CMSSEOTYPEID,SEOCode ,SEOURL ORDER BY CMSSEODetailId  ) RowId 
INTO #ZnodeCMSSEODetail
FROM ZnodeCMSSEODetail 


DELETE FROM ZnodeCMSSEODetailLocale WHERE EXISTS (SELECT TOP 1 1 FROM #ZnodeCMSSEODetail RT WHERE RT.CMSSEODetailId = ZnodeCMSSEODetailLocale.CMSSEODetailId AND RT.RowId <> 1 )
DELETE FROM ZnodeCMSSEODetail WHERE EXISTS (SELECT TOP 1 1 FROM #ZnodeCMSSEODetail RT WHERE RT.CMSSEODetailId = ZnodeCMSSEODetail.CMSSEODetailId AND RT.RowId <> 1 )

GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ManageProductList_XML')
BEGIN 
	DROP PROCEDURE Znode_ManageProductList_XML
END
GO
CREATE  PROCEDURE [dbo].[Znode_ManageProductList_XML]
(   @WhereClause						 XML,
    @Rows								 INT           = 100,
    @PageNo								 INT           = 1,
    @Order_BY			 VARCHAR(1000) = '',
    @LocaleId			 INT           = 1,
    @PimProductId		 VARCHAR(2000) = 0,
    @IsProductNotIn	 BIT           = 0,
	@IsCallForAttribute BIT		   = 0,
	@AttributeCode      VARCHAR(max ) = '' ,
	@IsDebug            Bit		   = 0 )
AS
    
/*
		  Summary:-   This Procedure is used for get product List  
				    Procedure will pivot verticle table(ZnodePimattributeValues) into horizontal table with columns 
				    ProductId,ProductName,ProductType,AttributeFamily,SKU,Price,Quantity,IsActive,ImagePath,Assortment,LocaleId,DisplayOrder
        
		  Unit Testing
		  
exec Znode_ManageProductList_XML @WhereClause=N'',@Rows=50,@PageNo=1,@Order_By=N'',@LocaleId=1,@PimProductId=N'',@IsProductNotIn=1,@IsCallForAttribute=0,@AttributeCode=''
          select * from ZnodeAttributeType  WHERE AttributeValue LIKE '%&%'
		  UPDATE VieW_lOADMANAGEpRODUCT SET  AttributeValue = 'A & B'  WHERE AttributeValue LIKE '% and %' AND PimProductId = 158
    */

     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY
		 SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 
             DECLARE @PimProductIds TransferId,  
					 @FirstWhereClause NVARCHAR(MAX)= '', 
					 @SQL NVARCHAR(MAX)= '' ,
					 @OutPimProductIds VARCHAR(max),
					 @ProductXML NVARCHAR(max) ;

             DECLARE @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId()
					 ,@RowsCount INT =0 ;
             DECLARE @TransferPimProductId TransferId 
			 DECLARE @TBL_AttributeDefaultValue TABLE
             (PimAttributeId            INT,
              AttributeDefaultValueCode VARCHAR(100),
              IsEditable                BIT,
              AttributeDefaultValue     NVARCHAR(MAX)
			  ,DisplayOrder INT 
			  ,PimAttributedefaultValueId INT 
             );
             DECLARE @TBL_AttributeDetails AS TABLE
             (PimProductId   INT,
              AttributeValue NVARCHAR(MAX),
              AttributeCode  VARCHAR(600),
              PimAttributeId INT,
			  AttributeDefaultValue NVARCHAR(MAX)
             );
			   DECLARE @TBL_AttributeDetailsLocale AS TABLE
             (PimProductId   INT,
              AttributeValue NVARCHAR(MAX),
              AttributeCode  VARCHAR(600),
              PimAttributeId INT
             );
			 DECLARE @TBL_MultiSelectAttribute TABLE (PimAttributeId INT , AttributeCode VARCHAR(600))
			
			 DECLARE @TBL_MediaAttribute TABLE (Id INT ,PimAttributeId INT ,AttributeCode VARCHAR(600) )
			 
			 DECLARE @TBL_ProductIds TABLE 
			 (
			  PimProductId INT,
			  ModifiedDate DATETIME  
			 )

			 DECLARE @FamilyDetails TABLE
             (
			  PimProductId         INT,
              PimAttributeFamilyId INT,
              FamilyName           NVARCHAR(Max)
             );
             DECLARE @DefaultAttributeFamily INT= dbo.Fn_GetDefaultPimProductFamilyId();
             DECLARE @ProductIdTable TABLE
             (PimProductId INT,
              CountId      INT,
              RowId        INT IDENTITY(1,1)
             );
          		
             IF EXISTS ( SELECT TOP 1 1 FROM @WhereClause.nodes ( '//ArrayOfWhereClauseModel/WhereClauseModel'  ) AS Tbl(Col)
			 WHERE dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  =  'Brand'
                OR dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  = 'Vendor'
                OR dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  =  'ShippingCostRules'
                OR dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  =  'Highlights') and @IsCallForAttribute=1
                 BEGIN
                DECLARE @AttributeCodeValue TABLE (AttributeValue NVARCHAr(max),AttributeCode NVARCHAR(max))

				INSERT INTO @AttributeCodeValue(AttributeValue,AttributeCode)
				SELECT  Tbl.Col.value ( 'attributevalue[1]' , 'NVARCHAR(max)') AS AttributeValue
						 ,Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)') AS AttributeCode
				FROM @WhereClause.nodes ( '//ArrayOfWhereClauseModel/WhereClauseModel'  ) AS Tbl(Col)
				WHERE dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  =  'Brand'
                OR dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  = 'Vendor'
                OR dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  =  'ShippingCostRules'
                OR dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  =  'Highlights'
				
				
			

				SET @SQL =   
				           ';WIth Cte_DefaultValue AS (
										  SELECT AttributeDefaultValueCode , ZPDF.PimAttributeId ,FNPA.AttributeCode
										  FROM ZnodePImAttributeDefaultValue ZPDF
										  INNER JOIN [dbo].[Fn_GetProductDefaultFilterAttributes] () FNPA ON ( FNPA.PimAttributeId = ZPDF.PimAttributeId) 
										)
										, Cte_productIds AS 
										(
										  SELECT a.PimProductId, c.AttributeCode , CTDV.AttributeDefaultValueCode AttributeValue,b.ModifiedDate 
										  FROM  ZnodePimAttributeValue a
										  LEFT JOIN ZnodePimAttribute c ON(c.PimAttributeId = a.PimAttributeId)
										  LEFT JOIN ZnodePimAttributeValueLocale b ON(b.PimAttributeValueId = a.PimAttributeValueId)  
										  INNER JOIN Cte_DefaultValue CTDV ON (CTDV.AttributeCode = c.AttributeCode 
										  AND EXISTS (SELECT TOP 1 1 FROM dbo.split(b.AttributeValue,'','') SP WHERE SP.Item = CTDV.AttributeDefaultValueCode) )
										  Union all 
										  
											SELECT a.PimProductId,c.AttributeCode,ZPADV.AttributeDefaultValueCode AttributeValue ,a.ModifiedDate 
											FROM ZnodePimProductAttributeDefaultValue ZPPADV
											INNER JOIN ZnodePimAttributeDefaultValue ZPADV ON (ZPPADV.PimAttributeDefaultValueId = ZPADV.PimAttributeDefaultValueId)
											LEFT JOIN ZnodePimAttributeValue a ON (a.PimAttributeValueId = ZPPADV.PimAttributeValueId )
											LEFT JOIN ZnodePimAttribute c ON ( c.PimAttributeId=a.PimAttributeId )
											INNER JOIN Cte_DefaultValue CTDV ON (CTDV.AttributeCode = c.AttributeCode )
										)										
										SELECT PimProductId ,ModifiedDate
										FROM Cte_productIds WHERE  AttributeCode '+(SELECT TOP 1 AttributeCode  FROM @AttributeCodeValue )+' AND 
										AttributeValue '+(SELECT TOP 1 AttributeValue  FROM @AttributeCodeValue )+' GROUP BY PimProductId,ModifiedDate Order By ModifiedDate DESC ';

					 SET @Order_BY = CASE WHEN @Order_BY = '' THEN 'ModifiedDate DESC' ELSE @Order_BY END 
					 	
					 SET @WhereClause = CAST(REPLACE(CAST(@WhereClause AS NVARCHAR(max)),'<WhereClauseModel><attributecode>'+(SELECT TOP 1 AttributeCode  FROM @AttributeCodeValue )+'</attributecode><attributevalue>'+(SELECT TOP 1 AttributeValue   FROM @AttributeCodeValue )+'</attributevalue></WhereClauseModel>','') AS XML )
					
				     INSERT INTO @TBL_ProductIds ( PimProductId, ModifiedDate )
					 EXEC (@SQL);

                     INSERT INTO @ProductIdTable( PimProductId )
                     SELECT PimProductId 
					 FROM @TBL_ProductIds

                     INSERT INTO @TransferPimProductId
					 SELECT PimProductId
                     FROM @ProductIdTable
                   
				   			   
                     DELETE FROM @ProductIdTable;
   
                 END
	            ELSE IF @PimProductId <> ''
			    BEGIN 
		
				 INSERT INTO @TransferPimProductId(id)
				 SELECT Item 
				 FROM dbo.split(@PimProductId,',')
			    END 

				
				
	 DECLARE  @ProductListIdRTR TransferId
	 DECLARE @TAb Transferid 
	 DECLARE @tBL_mainList TABLE (Id INT,RowId INT)
	 	IF @PimProductId <> ''  OR   @IsCallForAttribute=1 
		BEGIN 
	 SET @IsProductNotIn = CASE WHEN @IsProductNotIn = 0 THEN 1  
					 WHEN @IsProductNotIn = 1 THEN 0 END 
		END 
	 INSERT INTO @ProductListIdRTR
	 EXEC Znode_GetProductList  @IsProductNotIn,@TransferPimProductId
	 
	 IF CAST(@WhereClause AS NVARCHAR(max))<> N''
	 BEGIN 
	 
	  SET @SQL = 'SELECT Distinct PimProductId FROM ##Temp_PimProductId'+CAST(@@SPID AS VARCHAR(500))

	  EXEC Znode_GetFilterPimProductId @WhereClause,@ProductListIdRTR,@localeId
	  
      INSERT INTO @TAB 
	  EXEC (@SQL)
	 
	 END 
	 
	

	 IF EXISTS (SELECT Top 1 1 FROM @TAb ) OR CAST(@WhereClause AS NVARCHAR(max)) <> N''
	 BEGIN 
	 
	 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
	 SET @order_by = REPLACE(@order_by,'DisplayOrder','ProductName')
	 INSERT INTO @TBL_MainList(id,RowId)
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @TAb ,@AttributeCode,@localeId
	 
	 END 
	 ELSE 
	 BEGIN
	      
	 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
	 SET @order_by = REPLACE(@order_by,'DisplayOrder','ProductName')
	 INSERT INTO @TBL_MainList(id,RowId)
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @ProductListIdRTR ,@AttributeCode,@localeId 
	 END 
             

  			 INSERT INTO @PimProductIds ( Id  )
			 SELECT id FROM @TBL_MainList

			 DECLARE @TBL_PimProductIds transferId 
			 INSERT INTO @TBL_PimProductIds
			 SELECT id 
             FROM @PimProductIds
			 			 	
			 DECLARE @PimAttributeIds TransferId  
			 INSERT INTO @PimAttributeIds
			 SELECT PimAttributeId  
			 FROM [dbo].[Fn_GetProductGridAttributes]()
			 
			

			 INSERT INTO @TBL_AttributeDetails
             (PimProductId,
              AttributeValue,
              AttributeCode,
              PimAttributeId,
			  AttributeDefaultValue
             )
             EXEC Znode_GetProductsAttributeValue_newTesting
                  @TBL_PimProductIds,
                  @PimAttributeIds,
                  @localeId;
			
			UPDATE @TBL_AttributeDetails
			SET AttributeValue = ISNULL(AttributeValue,'')
			WHERE AttributeValue IS NULL 
		

		    declare @SKU SelectColumnList
			declare @TBL_Inventorydetails table (Quantity NVARCHAR(MAx),PimProductId INT)

			INSERT INTO @SKU
			SELECT AttributeValue 
			FROM @TBL_AttributeDetails
			WHERE AttributeCode = 'SKU'

			
			INSERT INTO @TBL_InventoryDetails(Quantity,PimProductId)
			EXEC Znode_GetPimProductAttributeInventory @SKU

	

			 INSERT INTO @FamilyDetails
             (PimAttributeFamilyId,
              PimProductId
             )
             EXEC [dbo].[Znode_GetPimProductAttributeFamilyId]
                  @PimProductIds,
                  1;
             
		 UPDATE a
               SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
                  INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                       AND LocaleId = @LocaleId);
             UPDATE a
               SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
                  INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                       AND LocaleId = @DefaultLocaleId)
             WHERE a.FamilyName IS NULL
                   OR a.FamilyName = '';
           	
			INSERT INTO @TBL_AttributeDetails             (PimProductId,              AttributeValue,              AttributeCode,              PimAttributeId             )
			SELECT PimProductId ,FamilyName, 'AttributeFamily',NULL
			FROM @FamilyDetails 
			
			INSERT INTO @TBL_AttributeDetails             (PimProductId,              AttributeValue,              AttributeCode,              PimAttributeId             )
			SELECT a.ID PimProductId ,th.DisplayName, 'PublishStatus',NULL
			FROM @PimProductIds a 
			INNER JOIN ZnodePimProduct b ON (b.PimProductId = a.ID)
			LEFT JOIN ZnodePublishState th ON (th.PublishStateId = b.PublishStateId)

	  INSERT INTO @TBL_AttributeDetailsLocale (PimProductId ,PimAttributeId,AttributeCode )
			SELECT  TBLAD.PimProductId ,TBLAD.PimAttributeId,TBLAD.AttributeCode 
			FROM @TBL_AttributeDetails TBLAD 
			GROUP BY  TBLAD.PimProductId ,TBLAD.PimAttributeId,TBLAD.AttributeCode 
       
	    
					

	    UPDATE TBLPP 
		SET AttributeValue = CTDD.AttributeValue 
		FROM  @TBL_AttributeDetails CTDD 
		INNER JOIN @TBL_AttributeDetailsLocale TBLPP ON (TBLPP.PimProductId = CTDD.PimProductId AND TBLPP.AttributeCode  = CTDD.AttributeCode)
		WHERE TBLPP.AttributeValue IS NULL 

    	SET @ProductXML =  '<MainProduct>'+ STUFF( (  SELECT '<Product>'+'<PimProductId>'+CAST(TBAD.PimProductId AS VARCHAR(50))+'</PimProductId>'
																		+'<AvailableInventory>'+CAST(ISNULL(IDD.[Quantity],'') AS VARCHAR(50))+'</AvailableInventory>'
		+ STUFF(    (  SELECT '<'+TBADI.AttributeCode+'>'+CAST( (SELECT  ''+TBADI.AttributeValue FOR XML PATH('')) AS NVARCHAR(max))+'</'+TBADI.AttributeCode+'>'   
															FROM @TBL_AttributeDetailsLocale TBADI      
															 WHERE TBADI.PimProductId = TBAD.PimProductId 
															 ORDER BY TBADI.PimProductId DESC
															 FOR XML PATH (''), TYPE
																).value('.', ' Nvarchar(max)'), 1, 0, '')+'</Product>'	   

		FROM @TBL_AttributeDetailsLocale TBAD
		INNER JOIN @TBL_MainList TBPI ON (TBAD.PimProductid = TBPI.id )
		LEFT JOIN @TBL_ProductIds TPT ON TBAD.PimProductId = TPT.PimProductId
		LEFT JOIN @TBL_InventoryDetails IDD ON (TBPI.id = IDD.PimProductId)
		GROUP BY TBAD.pimProductid, TPT.ModifiedDate,TBPI.RowId,IDD.Quantity
		ORDER BY TBPI.RowId 
		FOR XML PATH (''),TYPE).value('.', ' Nvarchar(max)'), 1, 0, '')+'</MainProduct>'
			

			SELECT  CAST(@ProductXML AS XML ) ProductXMl
		   
		     SELECT AttributeCode ,  ZPAL.AttributeName
			 FROM ZnodePimAttribute ZPA 
			 LEFT JOIN ZnodePiMAttributeLOcale ZPAL ON (ZPAL.PimAttributeId = ZPA.PimAttributeId )
             WHERE LocaleId = 1  
			 AND  IsCategory = 0 
			 AND ZPA.IsShowOnGrid = 1  
			 UNION ALL 
			 SELECT 'PublishStatus','Publish Status'

     IF EXISTS (SELECT Top 1 1 FROM @TAb )
	 BEGIN 

		  SELECT (SELECT COUNT(1) FROM @TAb) AS RowsCount   
	 END 
	 ELSE 
	 BEGIN
	 		  SELECT (SELECT COUNT(1) FROM @ProductListIdRTR) AS RowsCount   
	 END 
		;

             -- find the all locale values 
         END TRY
         BEGIN CATCH
		    SELECT ERROR_MESSAGE()
                DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ManageProductList_XML @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@LocaleId = '+CAST(@LocaleId AS VARCHAR(50))+',@PimProductId='+@PimProductId+',@IsProductNotIn='+CAST(@IsProductNotIn AS VARCHAR(50))+',@IsCallForAttribute='+CAST(@IsCallForAttribute AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_ManageProductList_XML',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;

         END CATCH;

     END;
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ManageCategoryList_XML')
BEGIN 
	DROP PROCEDURE Znode_ManageCategoryList_XML
END
GO

CREATE PROCEDURE [dbo].[Znode_ManageCategoryList_XML](
      @WhereClause      XML ,
      @Rows             INT            = 100 ,
      @PageNo           INT            = 1 ,
      @Order_BY         NVARCHAR(1000) = '' ,
      @LocaleId         INT            = 1 ,
      @ProfileCatalogId INT            = 0)
AS
    /*
	   Summary: This Procedure is used to get all category list 
				The Result displays CategortName with PimCategoryId where CategoryName and CategoryImage are pivoted values
	   Unit Testing 	  
	   EXEC Znode_ManageCategoryList_XML '' ,@LocaleId= 1
	
    */
     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY
		 SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
             DECLARE @TBL_PimcategoryDetails TABLE (PimCategoryId INT,CountId INT,RowId INT);
             DECLARE @TBL_CategoryIds TABLE (PimCategoryId INT ,ParentPimcategoryId INT);
             DECLARE @TBL_AttributeValue TABLE (PimCategoryAttributeValueId INT,PimCategoryId INT,CategoryValue NVARCHAR(MAX), AttributeCode VARCHAR(300), PimAttributeId  INT);
             DECLARE @TBL_FamilyDetails TABLE (PimCategoryId INT , PimAttributeFamilyId INT , AttributeFamilyName  NVARCHAR(MAX));
             DECLARE @TBL_DefaultAttributeValue TABLE (PimAttributeId INT ,AttributeDefaultValueCode VARCHAR(600) , IsEditable BIT ,AttributeDefaultValue NVARCHAR(MAX),DisplayOrder int);
			 DECLARE @TBL_MediaAttribute TABLE (Id INT ,PimAttributeId INT ,AttributeCode VARCHAR(600) )
             DECLARE @TBL_ProfileCatalogCategory TABLE (ProfileCatalogId INT ,PimCategoryId INT);
             DECLARE @PimCategoryIds VARCHAR(MAX)= '' , @PimAttributeIds VARCHAR(MAX),@CategoryXML NVARCHAr(max);
			 DECLARE @RowsCount INT 

		 IF @ProfileCatalogId > 0
			 BEGIN
			 INSERT INTO @TBL_ProfileCatalogCategory (ProfileCatalogId , PimCategoryId)
			 SELECT ZPC.ProfileCatalogId , PimCategoryId
			 FROM ZnodePimCatalogCategory AS ZCC INNER JOIN ZnodeProfileCatalog AS ZPC ON ( ZPC.PimCatalogId = ZCC.PimCatalogId )
			 WHERE ZPC.ProfileCatalogId = @ProfileCatalogId AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodeProfileCatalogCategory AS ZPCC WHERE ZPCC.PimCatalogCategoryId = ZCC.PimCatalogCategoryId);
                     
			 SET @PimCategoryIds = SUBSTRING( ( SELECT DISTINCT ','+CAST(PimCategoryId AS VARCHAR(20)) FROM @TBL_ProfileCatalogCategory FOR XML PATH('') ) , 2 , 4000);
			 END;

			
              INSERT INTO @TBL_PimcategoryDetails ( PimCategoryId , CountId , RowId)
             EXEC Znode_GetCategoryIdForPaging @WhereClause , @Rows , @PageNo , @Order_BY , @RowsCount  , @LocaleId , '' , @PimCategoryIds , 1; 


             SET @PimCategoryIds =  SUBSTRING( ( SELECT ','+ CAST(PimCategoryId AS VARCHAR(100)) FROM @TBL_PimcategoryDetails FOR XML PATH('')) , 2 , 4000);
             SET @PimAttributeIds = SUBSTRING( ( SELECT ','+ CAST(PimAttributeId AS VARCHAR(100)) FROM [dbo].[Fn_GetCategoryGridAttributeDetails]() FOR XML PATH('')) , 2 , 4000);

			 INSERT INTO @TBL_AttributeValue ( PimCategoryAttributeValueId , PimCategoryId , CategoryValue , AttributeCode , PimAttributeId)
             EXEC [dbo].[Znode_GetCategoryAttributeValue] @PimCategoryIds , @PimAttributeIds , @LocaleId;

             INSERT INTO @TBL_FamilyDetails ( PimAttributeFamilyId , AttributeFamilyName , PimCategoryId)
             EXEC Znode_GetCategoryFamilyDetails @PimCategoryIds , @LocaleId;
             
		     INSERT INTO @TBL_DefaultAttributeValue ( PimAttributeId , AttributeDefaultValueCode , IsEditable , AttributeDefaultValue,DisplayOrder)
             EXEC [dbo].[Znode_GetAttributeDefaultValueLocale] @PimAttributeIds , @LocaleId;
             
			 SET @RowsCount = ISNULL((SELECT TOP 1 CountId FROM @TBL_PimcategoryDetails ),0)
			 
			 INSERT INTO @TBL_MediaAttribute (Id,PimAttributeId,AttributeCode )
			 SELECT Id,PimAttributeId,AttributeCode 
			 FROM [dbo].[Fn_GetProductMediaAttributeId]()
			 		
		     ;WITH Cte_DefaultCategoryValue
              AS (SELECT PimCategoryId , PimAttributeId ,SUBSTRING( ( SELECT ','+AttributeDefaultValue FROM @TBL_DefaultAttributeValue AS TBDAV WHERE TBDAV.PimAttributeId = TBAV.PimAttributeId 
			     AND EXISTS ( SELECT TOP 1 1 FROM dbo.Split ( TBAV.CategoryValue , ',') AS SP WHERE sp.Item = TBDAV.AttributeDefaultValueCode)
                 FOR XML PATH('')) , 2 , 4000) AS AttributeValue FROM @TBL_AttributeValue AS TBAV							 
				 WHERE EXISTS ( SELECT TOP 1 1 FROM [dbo].[Fn_GetCategoryDefaultValueAttribute]() AS SP WHERE SP.PimAttributeId = TBAV.PimAttributeId))

             UPDATE TBAV SET TBAV.CategoryValue = CTDCV.AttributeValue
             FROM @TBL_AttributeValue TBAV 
			 INNER JOIN Cte_DefaultCategoryValue CTDCV ON ( CTDCV.PimCategoryId = TBAV.PimCategoryId AND CTDCV.PimAttributeId = TBAV.PimAttributeId );
                   
		    UPDATE  TBAV
			SET CategoryValue  = SUBSTRING ((SELECT ','+[dbo].FN_GetMediaThumbnailMediaPath(zm.Path) FROM ZnodeMedia ZM  WHERE EXISTS (SELECT TOP 1 1 FROM dbo.split(TBAV.CategoryValue ,',') SP  WHERE SP.Item = CAST(ZM.MediaId AS VARCHAR(50)) ) FOR XML PATH('')),2,4000)
			FROM @TBL_AttributeValue TBAV 
			INNER JOIN @TBL_MediaAttribute TBMA ON (TBMA.PimAttributeId = TBAV.PimAttributeId)	   
			
			INSERT INTO @TBL_AttributeValue ( PimCategoryId , CategoryValue , AttributeCode )

            SELECT PimCategoryId,AttributeFamilyName , 'AttributeFamily'
			FROM @TBL_FamilyDetails 				                           
		    

			INSERT INTO @TBL_AttributeValue             ( PimCategoryId , CategoryValue , AttributeCode     )
			
			SELECT a.PimCategoryId PimCategoryId 
			,th.DisplayName, 'PublishStatus'
			FROM @TBL_PimcategoryDetails a 
			INNER JOIN ZnodePimCategory b ON (b.PimCategoryId = a.PimCategoryId)
			LEFT JOIN ZnodePublishState th ON (th.PublishStateId = b.PublishStateId)

			SET @CategoryXML =  '<MainCategory>'+ STUFF( (  SELECT '<Category>'+'<PimCategoryId>'+CAST(TBAD.PimCategoryId AS VARCHAR(50))+'</PimCategoryId>'+ STUFF(    (  SELECT '<'+TBADI.AttributeCode+'>'+CAST((SELECT ''+TBADI.CategoryValue FOR XML PATH('')) AS NVARCHAR(max))+'</'+TBADI.AttributeCode+'>'   
															FROM @TBL_AttributeValue TBADI      
															 WHERE TBADI.PimCategoryId = TBAD.PimCategoryId 
															 ORDER BY TBADI.PimCategoryId DESC
															 FOR XML PATH (''), TYPE
																).value('.', ' Nvarchar(max)'), 1, 0, '')+'</Category>'	   

			FROM @TBL_AttributeValue TBAD
			INNER JOIN @TBL_PimcategoryDetails TBPI ON (TBAD.PimCategoryId = TBPI.PimCategoryId )
			GROUP BY TBAD.PimCategoryId,TBPI.RowId 
			ORDER BY TBPI.RowId 
			FOR XML PATH (''),TYPE).value('.', ' Nvarchar(max)'), 1, 0, '')+'</MainCategory>'


			SELECT  @CategoryXML  CategoryXMl
		   
		     SELECT AttributeCode ,  ZPAL.AttributeName
			 FROM ZnodePimAttribute ZPA 
			 LEFT JOIN ZnodePiMAttributeLOcale ZPAL ON (ZPAL.PimAttributeId = ZPA.PimAttributeId )
             WHERE LocaleId = 1 
			 AND IsCategory = 1  
			 AND ZPA.IsShowOnGrid = 1  
			 UNION ALL 
			 SELECT 'PublishStatus','Publish Status'
		    SELECT ISNULL(@RowsCount,0) AS RowsCount;


         END TRY
         BEGIN CATCH
                DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ManageCategoryList_XML @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@LocaleId = '+CAST(@LocaleId AS VARCHAR(50))+',@ProfileCatalogId='+CAST(@ProfileCatalogId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_ManageCategoryList_XML',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
	 GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetImportTemplateLogs')
BEGIN 
	DROP PROCEDURE Znode_GetImportTemplateLogs
END
GO

CREATE PROCEDURE [dbo].[Znode_GetImportTemplateLogs]
( @WhereClause NVARCHAR(max),
  @Rows        INT           = 100,
  @PageNo      INT           = 1,
  @Order_BY    VARCHAR(1000)  = '',
  @RowsCount   INT OUT)
AS
    /*
	
    Summary : Get Import Template Log details and errorlog associated to it
     Unit Testing 
	 begin tran
    DECLARE @RowsCount INT;
    EXEC Znode_GetImportTemplateLogs @WhereClause = '',@Rows = 1000,@PageNo = 1,@Order_BY = NULL,@RowsCount = @RowsCount OUT;
	rollback tran
   
    */
	 BEGIN
        BEGIN TRY
		SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
          SET NOCOUNT ON;
		     DECLARE @SQL NVARCHAR(MAX);
             DECLARE @TBL_ErrorLog TABLE(ImportHeadId INT, ImportName NVARCHAR(100),TemplateName VARCHAR(300) ,[Status] VARCHAR(50) ,ProcessStartedDate DATETIME ,ProcessCompletedDate DATETIME
										,ImportTemplateId INT,ImportProcessLogId INT ,RowId INT,CountNo  INT)

             SET @SQL = ' 
					   ;With Cte_ErrorLog AS (
						select zih.ImportHeadId, zih.NAME ImportName, zit.TemplateName TemplateName ,zipl.Status ,
						zipl.ProcessStartedDate,
						zipl.ProcessCompletedDate,zipl.ImportTemplateId ,zipl.ImportProcessLogId,zipl.Createdby
						from ZnodeImportHead zih inner join  ZnodeImportTemplate zit ON zih.ImportHeadId = zit.ImportHeadId  
						Inner join ZnodeImportProcessLog zipl on zit.ImportTemplateId = zipl.ImportTemplateId
						) 
						,Cte_ErrorlogFilter AS
						(

					   SELECT ImportHeadId,ImportName,TemplateName,Status,ProcessStartedDate,ProcessCompletedDate,ImportTemplateId
								,ImportProcessLogId,'+dbo.Fn_GetPagingRowId(@Order_BY,'ImportProcessLogId DESC')+', Count(*)Over() CountNo
					   FROM Cte_ErrorLog
					   WHERE 1 = 1 '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'
						) 
					   SELECT ImportHeadId, ImportName,TemplateName ,Status,ProcessStartedDate,ProcessCompletedDate,ImportTemplateId ,ImportProcessLogId,RowId,CountNo 
					   FROM Cte_ErrorlogFilter 
					   '+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)
	       
			 INSERT INTO @TBL_ErrorLog (ImportHeadId, ImportName,TemplateName ,[Status],ProcessStartedDate,ProcessCompletedDate,ImportTemplateId ,ImportProcessLogId,RowId,CountNo )
			 EXEC(@SQl)												
             SET @RowsCount = ISNULL((SELECT TOP 1 CountNo FROM @TBL_ErrorLog ), 0);

			 SELECT ImportHeadId, ImportName,TemplateName ,Status,ProcessStartedDate,ProcessCompletedDate,ImportTemplateId ,ImportProcessLogId
			 FROM @TBL_ErrorLog
           
         END TRY
         BEGIN CATCH
              DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetImportTemplateLogs @WhereClause = '''+ISNULL(@WhereClause,'''''')+''',@Rows='+ISNULL(CAST(@Rows AS
			VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetImportTemplateLogs',
				@ErrorInProcedure = 'Znode_GetImportTemplateLogs',
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;                   
         END CATCH;
     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetSeoDetailsForPublish')
BEGIN 
	DROP PROCEDURE Znode_GetSeoDetailsForPublish
END
GO

CREATE PROCEDURE [dbo].[Znode_GetSeoDetailsForPublish]
(   
	@PortalId INT=0,
	@IsBrand  Bit = 0  ,
	@SeoCode    NVARCHAR(4000) = '',
	@SeoType  NVARCHAR(200) = '',
	@LocaleId int = 0 
)
AS 
   /*
     Summary:- This Procedure is used to get the Seo Detials on the bassis of Portal 
     Unit Testing 
	 Znode_GetSeoDetailsForPublish @PortalId=0, @IsBrand=0, @SeoId = '14',@SeoType = 'Product'
	 EXEC [_Znode_GetSeoDetailsForPublish]  @PortalId=19, @IsBrand=1, @SeoCode = '' ,@SeoType = 'BlogNews,Content Page',@LocaleId=1
   */
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             DECLARE @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId();

		IF OBJECT_ID('tempdb..#CMSTempDetails') IS NOT NULL
		DROP TABLE #CMSTempDetails

		CREATE TABLE #CMSTempDetails(
			[PortalId] [int] NULL,
			[CMSSEODetailId] [int] NOT NULL,
			[SEOTitle] [nvarchar](max) NULL,
			[SEOKeywords] [nvarchar](max) NULL,
			[SEOUrl] [nvarchar](max) NULL,
			[ModifiedDate] [datetime] NOT NULL,
			[SEODescription] [nvarchar](max) NULL,
			[MetaInformation] [nvarchar](max) NULL,
			[IsRedirect] [bit] NULL,
			[CMSSEODetailLocaleId] [int] NOT NULL,
			[LocaleId] [int] NULL,
			[CMSSEOTypeId] [int] NOT NULL,
			[SEOTypeName] [nvarchar](100) NULL,
			[PublishStatus] [varchar](50) NULL,
			[SEOCode] [nvarchar](2000) NULL
		)



				INSERT INTO #CMSTempDetails
				SELECT ZCSD.PortalId, ZCSD.CMSSEODetailId, ZCSDL.SEOTitle, ZCSDL.SEOKeywords, lower(ZCSD.SEOUrl) as SEOUrl,ZCSD.ModifiedDate,ZCSDL.SEODescription, ZCSD.MetaInformation,ZCSD.IsRedirect,
					   ZCSDL.CMSSEODetailLocaleId, ZCSDL.LocaleId, ZCSD.CMSSEOTypeId, ZCST.Name AS SEOTypeName, TYU.DisplayName   AS PublishStatus,ZCSD.SEOCode 
				FROM ZnodeCMSSEODetail AS ZCSD
				LEFT JOIN ZnodePublishState  TYU ON (TYU.PublishStateId = ZCSD.PublishStateId) 
				INNER JOIN ZnodeCMSSEOType AS ZCST ON ( ZCST.CMSSEOTypeId = ZCSD.CMSSEOTypeId )                                                 
				INNER JOIN ZnodeCMSSEODetailLocale AS ZCSDL ON ( ZCSDL.CMSSEODetailId = ZCSD.CMSSEODetailId )
				WHERE (ZCSD.PortalId= @PortalId OR @PortalId = 0 ) AND ZCST.Name <> 'Brand'
				AND EXISTS (SELECT TOP 1 1 FROM dbo.Split(@SeoCode,',') SP WHERE SP.Item = ZCSD.SEOCode  OR @SeoCode = '')
				AND EXISTS (SELECT TOP 1 1 FROM dbo.Split(@SeoType,',') SP WHERE SP.Item = ZCST.Name  OR @SeoType = '')
				AND ZCSDL.LocaleId IN (@LocaleId,dbo.Fn_GetDefaultLocaleId())
				UNION ALL
				SELECT ZCSD.PortalId, ZCSD.CMSSEODetailId, ZCSDL.SEOTitle, ZCSDL.SEOKeywords, lower(ZCSD.SEOUrl) as SEOUrl,ZCSD.ModifiedDate,ZCSDL.SEODescription, ZCSD.MetaInformation,ZCSD.IsRedirect,
					   ZCSDL.CMSSEODetailLocaleId, ZCSDL.LocaleId, ZCSD.CMSSEOTypeId, ZCST.Name AS SEOTypeName, TYU.DisplayName AS PublishStatus,ZCSD.SEOCode 
				FROM ZnodeCMSSEODetail AS ZCSD 
				LEFT JOIN ZnodePublishState  TYU ON (TYU.PublishStateId = ZCSD.PublishStateId)
				INNER JOIN ZnodeCMSSEOType AS ZCST ON ( ZCST.CMSSEOTypeId = ZCSD.CMSSEOTypeId )                                                  
				INNER JOIN ZnodeCMSSEODetailLocale AS ZCSDL ON ( ZCSDL.CMSSEODetailId = ZCSD.CMSSEODetailId )
				WHERE @IsBrand = 1 AND ZCST.Name = 'Brand'  
				AND EXISTS (SELECT TOP 1 1 FROM dbo.Split(@SeoCode,',') SP WHERE SP.Item = ZCSD.SEOCode  OR @SeoCode = '' )
				AND EXISTS (SELECT TOP 1 1 FROM dbo.Split(@SeoType,',') SP WHERE SP.Item = ZCST.Name  OR @SeoType = '')
				AND ZCSDL.LocaleId IN (@LocaleId,dbo.Fn_GetDefaultLocaleId())
				

						
			SELECT PortalId, CMSSEODetailId, SEOTitle, SEOKeywords, SEOUrl, SEODescription, MetaInformation, IsRedirect, CMSSEODetailLocaleId, LocaleId, CMSSEOTypeId, SEOTypeName, PublishStatus,SEOCode   
			FROM #CMSTempDetails
			where LocaleId = @LocaleId  
			UNION ALL
			SELECT PortalId, CMSSEODetailId, SEOTitle, SEOKeywords, SEOUrl, SEODescription, MetaInformation, IsRedirect, CMSSEODetailLocaleId, @LocaleId LocaleId, CMSSEOTypeId, SEOTypeName, PublishStatus,SEOCode   
			FROM #CMSTempDetails CSD
			WHERE 
			NOT EXISTS( SELECT TOP 1 1 FROM #CMSTempDetails CSD1 
						WHERE CSD.CMSSEOTypeId = CSD1.CMSSEOTypeId AND CSD.SEOCode = CSD1.SEOCode AND  CSD1.LocaleId = @LocaleId)
			AND LocaleId = dbo.Fn_GetDefaultLocaleId()

			
         END TRY
         BEGIN CATCH
             DECLARE @Status BIT ;
		    SET @Status = 0;
		    DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetSeoDetailsForPublish @PortalId = '+CAST(@PortalId AS VARCHAR(10))+',@IsBrand ='+CAST(@IsBrand AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
            SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
            EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetSeoDetailsForPublish',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO


IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportAddonAssociation')
	DROP PROC Znode_ImportAddonAssociation
GO
CREATE PROCEDURE [dbo].[Znode_ImportAddonAssociation](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @PimCatalogId int= 0)
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import Attribute Code Name and their default input validation rule other 
	--			  flag will be inserted as default we need to modify front end
	
	-- Unit Testing: 

	--------------------------------------------------------------------------------------
BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @SSQL nvarchar(max);
		DECLARE @GetDate datetime= dbo.Fn_GetDate(), @LocaleId int  ;
		SELECT @LocaleId = DBO.Fn_GetDefaultLocaleId();

		IF OBJECT_ID('TEMPDB..#InsertProductAddonAssociation') IS NOT NULL
			DROP TABLE #InsertProductAddonAssociation

		IF OBJECT_ID('TEMPDB..#SKU') IS NOT NULL
			DROP TABLE #SKU

		IF OBJECT_ID('TEMPDB..#InsertZnodePimAddOnProduct') IS NOT NULL
			DROP TABLE #InsertZnodePimAddOnProduct

		CREATE TABLE #InsertZnodePimAddOnProduct ( PimAddOnProductId int,PimAddonGroupId int,PimProductId int)

		CREATE TABLE #InsertProductAddonAssociation
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, SKU varchar(300),AddonGroupName varchar(300),AddOnSKU varchar(300),DisplayOrder int, IsDefault varchar(10), GUID nvarchar(400)
		
		);

		CREATE TABLE #SKU 
		( 
			SKU nvarchar(300), PimProductId int
		);

		----Get All SKU Data From DB
		INSERT INTO #SKU (SKU, PimProductId)
		SELECT ZPAVL.AttributeValue, ZPAV.PimProductId
		FROM ZnodePimAttributeValue AS ZPAV
		INNER JOIN ZnodePimAttributeValueLocale AS ZPAVL ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId
		INNER JOIN ZnodePimAttribute ZPA ON ZPAV.PimAttributeId = ZPA.PimAttributeId
		WHERE ZPA.AttributeCode = 'SKU';

		SET @SSQL = 'Select RowNumber,SKU,AddonGroupName,AddOnSKU,DisplayOrder,IsDefault,GUID FROM '+@TableName;
		INSERT INTO #InsertProductAddonAssociation( RowNumber,SKU,AddonGroupName,AddOnSKU,DisplayOrder,IsDefault,GUID )
		EXEC sys.sp_sqlexec @SSQL;

		SELECT SKU,AddonGroupName,AddOnSKU 
		INTO #DuplicateProductAddonAssociation 
		FROM #InsertProductAddonAssociation 
		Group BY SKU,AddonGroupName,AddOnSKU  having count(*) > 1

		----Checking AddonGroupName present in DB
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '19', 'AddonGroupName', AddonGroupName, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		FROM #InsertProductAddonAssociation AS ii
		WHERE NOT EXISTS ( SELECT * FROM ZnodePimAddonGroupLocale i where i.AddonGroupName = ii.AddonGroupName );

		----Checking SKU present in DB
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '19', 'SKU', SKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		FROM #InsertProductAddonAssociation AS ii
		WHERE NOT EXISTS( SELECT * FROM #SKU SKU WHERE ii.SKU = SKU.SKU)

		----Checking AddOnSKU present in DB
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '19', 'AddOnSKU', AddOnSKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		FROM #InsertProductAddonAssociation AS ii
		WHERE NOT EXISTS( SELECT * FROM #SKU SKU WHERE ii.AddOnSKU = SKU.SKU)
		
		----Duplicate Record (SKU \ AddOnSKU \ AddonGroupName)
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '53', 'SKU \ AddOnSKU \ AddonGroupName ', SKU+' \ '+AddOnSKU+' \ '+AddonGroupName, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		FROM #InsertProductAddonAssociation AS ii
		WHERE EXISTS ( select * FROM #DuplicateProductAddonAssociation i WHERE i.SKU = ii.SKU and i.AddOnSKU = ii.AddOnSKU and i.AddonGroupName = ii.AddonGroupName );

		----Checking is default value data validation
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
		SELECT '35', 'IsDefault', IsDefault, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
		FROM #InsertProductAddonAssociation AS ii  
		WHERE ISNULL(ii.IsDefault,0) not in ('True','1','Yes','FALSE','0','No','')
		
		UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ SKU - ' + isnull(SKU,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN #InsertProductAddonAssociation IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL

		-- Delete Invalid Data after functional validatin  
		DELETE FROM #InsertProductAddonAssociation
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
		);
		
		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM #InsertProductAddonAssociation
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount 
		WHERE ImportProcessLogId = @ImportProcessLogId;

		-----Inserting records in ZnodePimAddOnProduct
		INSERT INTO ZnodePimAddOnProduct(PimAddonGroupId,PimProductId,DisplayOrder,RequiredType,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		OUTPUT inserted.PimAddOnProductId, inserted.PimAddonGroupId,inserted.PimProductId into #InsertZnodePimAddOnProduct (PimAddOnProductId,PimAddonGroupId,PimProductId)
		SELECT DISTINCT ZPAGL.PimAddonGroupId,SKU.PimProductId, 999 AS DisplayOrder,'Required' RequiredType,@UserId as CreatedBy,@GetDate,@UserId as ModifiedBy,@GetDate
		FROM #InsertProductAddonAssociation IPAA
		INNER JOIN #SKU SKU ON SKU.SKU = IPAA.SKU
		INNER JOIN ZnodePimAddonGroupLocale ZPAGL on ZPAGL.AddonGroupName = IPAA.AddonGroupName
		WHERE NOT EXISTS(SELECT * FROM ZnodePimAddOnProduct ZPAP where ZPAP.PimAddonGroupId = ZPAGL.PimAddonGroupId and ZPAP.PimProductId = SKU.PimProductId )

		-----Inserting records in ZnodePimAddOnProductDetail
		INSERT INTO ZnodePimAddOnProductDetail(PimAddOnProductId,PimChildProductId,IsDefault,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT DISTINCT ZPAP.PimAddOnProductId, SKU.PimProductId as PimChildProductId, CASE WHEN isnull(IPAA.IsDefault,0) IN ('True','1','Yes') THEN 1 ELSE 0 END, ISNULL(IPAA.DisplayOrder,999),@UserId ,@GetDate,@UserId,@GetDate 
		FROM #InsertProductAddonAssociation IPAA
		INNER JOIN #SKU SKU1 ON SKU1.SKU = IPAA.SKU
		INNER JOIN #SKU SKU ON SKU.SKU = IPAA.AddOnSKU
		INNER JOIN ZnodePimAddonGroupLocale ZPAGL on IPAA.AddonGroupName = ZPAGL.AddonGroupName
		INNER JOIN ZnodePimAddOnProduct ZPAP on SKU1.PimProductId = ZPAP.PimProductId and ZPAP.PimAddonGroupId = ZPAGL.PimAddonGroupId
		WHERE NOT EXISTS(SELECT * FROM ZnodePimAddOnProductDetail ZPAPD WHERE ZPAPD.PimAddOnProductId = ZPAP.PimAddOnProductId and ZPAPD.PimChildProductId = SKU.PimProductId )

		UPDATE ZnodeImportProcessLog
		SET STATUS = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = GETDATE()
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;

	END TRY
	BEGIN CATCH

		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = GETDATE()
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN A;
	END CATCH;
END;

GO

----------ZnodeImportHead
insert into ZnodeImportHead(Name,IsUsedInImport,IsUsedInDynamicReport,IsActive,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,IsCsvUploader)
select 'AddonAssociation', 1, 0, 1, 2, getdate(),2,GETDATE(),null
where not exists( select * from ZnodeImportHead where Name = 'AddonAssociation')

GO
-----ZnodeImportTemplate
insert into ZnodeImportTemplate(ImportHeadId,TemplateName,TemplateVersion,PimAttributeFamilyId,IsActive,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AddonAssociation'), 'AddonAssociationTemplate',null,null,1,2,getdate(),2,GETDATE()
where not exists( select * from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AddonAssociation') and TemplateName = 'AddonAssociationTemplate' )
and exists( select * from ZnodeImportHead where Name = 'AddonAssociation')
GO
---------ZnodeImportTemplateMapping
insert into ZnodeImportTemplateMapping(ImportTemplateId,	SourceColumnName,	TargetColumnName,	DisplayOrder,	IsActive,	IsAllowNull,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate)
select ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AddonAssociation') and TemplateName = 'AddonAssociationTemplate' ),
       'SKU','SKU', 1,1,1,2,getdate(),2,GETDATE()
where not exists (select * from ZnodeImportTemplateMapping where ImportTemplateId = ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AddonAssociation') and TemplateName = 'AddonAssociationTemplate' )
and SourceColumnName = 'SKU')
and exists(select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AddonAssociation') and TemplateName = 'AddonAssociationTemplate' )

GO
insert into ZnodeImportTemplateMapping(ImportTemplateId,	SourceColumnName,	TargetColumnName,	DisplayOrder,	IsActive,	IsAllowNull,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate)
select ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AddonAssociation') and TemplateName = 'AddonAssociationTemplate' ),
       'AddonGroupName','AddonGroupName', 1,1,1,2,getdate(),2,GETDATE()
where not exists (select * from ZnodeImportTemplateMapping where ImportTemplateId = ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AddonAssociation') and TemplateName = 'AddonAssociationTemplate' )
and SourceColumnName = 'AddonGroupName')
and exists(select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AddonAssociation') and TemplateName = 'AddonAssociationTemplate' )

GO
insert into ZnodeImportTemplateMapping(ImportTemplateId,	SourceColumnName,	TargetColumnName,	DisplayOrder,	IsActive,	IsAllowNull,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate)
select ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AddonAssociation') and TemplateName = 'AddonAssociationTemplate' ),
       'AddOnSKU','AddOnSKU', 1,1,1,2,getdate(),2,GETDATE()
where not exists (select * from ZnodeImportTemplateMapping where ImportTemplateId = ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AddonAssociation') and TemplateName = 'AddonAssociationTemplate' )
and SourceColumnName = 'AddOnSKU')
and exists(select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AddonAssociation') and TemplateName = 'AddonAssociationTemplate' )
GO
insert into ZnodeImportTemplateMapping(ImportTemplateId,	SourceColumnName,	TargetColumnName,	DisplayOrder,	IsActive,	IsAllowNull,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate)
select ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AddonAssociation') and TemplateName = 'AddonAssociationTemplate' ),
       'DisplayOrder','DisplayOrder', 1,1,1,2,getdate(),2,GETDATE()
where not exists (select * from ZnodeImportTemplateMapping where ImportTemplateId = ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AddonAssociation') and TemplateName = 'AddonAssociationTemplate' )
and SourceColumnName = 'DisplayOrder')
and exists(select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AddonAssociation') and TemplateName = 'AddonAssociationTemplate' )
GO
insert into ZnodeImportTemplateMapping(ImportTemplateId,	SourceColumnName,	TargetColumnName,	DisplayOrder,	IsActive,	IsAllowNull,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate)
select ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AddonAssociation') and TemplateName = 'AddonAssociationTemplate' ),
       'IsDefault','IsDefault', 1,1,1,2,getdate(),2,GETDATE()
where not exists (select * from ZnodeImportTemplateMapping where ImportTemplateId = ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AddonAssociation') and TemplateName = 'AddonAssociationTemplate' )
and SourceColumnName = 'IsDefault')
and exists(select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AddonAssociation') and TemplateName = 'AddonAssociationTemplate' )
GO
---------ZnodeImportAttributeValidation
INSERT INTO ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
SELECT 'Text', 'SKU', (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AddonAssociation'),1,'Text','RegularExpression',NULL,'','',NULL,2,GETDATE(),2,GETDATE(),1
WHERE NOT EXISTS(SELECT * FROM ZnodeImportAttributeValidation WHERE AttributeCode = 'SKU' AND ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AddonAssociation'))
GO
INSERT INTO ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
SELECT 'Text', 'AddonGroupName', (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AddonAssociation'),1,'Text','RegularExpression',NULL,'','',NULL,2,GETDATE(),2,GETDATE(),2
WHERE NOT EXISTS(SELECT * FROM ZnodeImportAttributeValidation WHERE AttributeCode = 'AddonGroupName' AND ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AddonAssociation'))
GO
INSERT INTO ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
SELECT 'Text', 'AddOnSKU', (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AddonAssociation'),1,'Text','RegularExpression',NULL,'','',NULL,2,GETDATE(),2,GETDATE(),3
WHERE NOT EXISTS(SELECT * FROM ZnodeImportAttributeValidation WHERE AttributeCode = 'AddOnSKU' AND ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AddonAssociation'))
GO
INSERT INTO ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
SELECT 'Number', 'DisplayOrder', (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AddonAssociation'),0,'Yes/No','AllowNegative',NULL,'false','',NULL,2,GETDATE(),2,GETDATE(),4
WHERE NOT EXISTS(SELECT * FROM ZnodeImportAttributeValidation WHERE AttributeCode = 'DisplayOrder' AND ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AddonAssociation') and 
  ValidationName = 'AllowNegative' )
  GO
INSERT INTO ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
SELECT 'Number', 'DisplayOrder', (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AddonAssociation'),0,'Yes/No','AllowDecimals',NULL,'false','',NULL,2,GETDATE(),2,GETDATE(),4
WHERE NOT EXISTS(SELECT * FROM ZnodeImportAttributeValidation WHERE AttributeCode = 'DisplayOrder' AND ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AddonAssociation') and 
  ValidationName = 'AllowDecimals' )
 GO 
INSERT INTO ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
SELECT 'Number', 'DisplayOrder', (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AddonAssociation'),0,'Yes/No','MinNumber',NULL,'1','',NULL,2,GETDATE(),2,GETDATE(),4
WHERE NOT EXISTS(SELECT * FROM ZnodeImportAttributeValidation WHERE AttributeCode = 'DisplayOrder' AND ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AddonAssociation') and 
  ValidationName = 'MinNumber' )
 GO   
INSERT INTO ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
SELECT 'Number', 'DisplayOrder', (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AddonAssociation'),0,'Yes/No','MaxNumber',NULL,'999999','',NULL,2,GETDATE(),2,GETDATE(),4
WHERE NOT EXISTS(SELECT * FROM ZnodeImportAttributeValidation WHERE AttributeCode = 'DisplayOrder' AND ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AddonAssociation') and 
  ValidationName = 'MaxNumber' )
  
GO
INSERT INTO ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
SELECT 'Text', 'IsDefault', (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AddonAssociation'),0,'Text','RegularExpression',NULL,'','',NULL,2,GETDATE(),2,GETDATE(),5
WHERE NOT EXISTS(SELECT * FROM ZnodeImportAttributeValidation WHERE AttributeCode = 'IsDefault' AND ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AddonAssociation'))
GO
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportValidatePimProductData')
BEGIN 
	DROP PROCEDURE Znode_ImportValidatePimProductData
END
GO

CREATE PROCEDURE [dbo].[Znode_ImportValidatePimProductData]
(   @ImportHeadName     VARCHAR(200),
    @TableName          VARCHAR(200),
    @NewGUID            NVARCHAR(200),
    @TemplateId         INT,
    @UserId             INT,
    @LocaleId           INT           = 1,
    @IsCategory         INT           = 0,
    @DefaultFamilyId    INT           = 0,
    @ImportProcessLogId INT,
    @PriceListId        INT,
	@CountryCode VARCHAR(100) = '',
	@PimCatalogId         INT    = 0 ,
	@PortalId int = 0,
	@IsAccountAddress bit = 0 )
AS
     SET NOCOUNT ON;

/*
    Summary :   Import PimProduct / Price / Inventory / Category / Category Associated Data 
    Process :   Admin site will upload excel / csv file in database and create global temporary table
				Procedure Znode_ImportValidatePimProductData will validate data with attribute validation rule
				If datatype validation issue found in input daata will logged into table "ZnodeImportLog"
				If Data is correct and record count in table ZnodeImportLog will be 0 then process for import data into Base tables
				To import data call procedure "Znode_ImportPimProductData"
    		  
				SourceColumnName: CSV file column headers
				TargetColumnName: Attributecode from ZnodePimAttribute Table (Consider those Attributecodes configured with default family only)
*/

     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             --BEGIN TRAN TRN_ImportValidProductData;
             DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
             DECLARE @SQLQuery NVARCHAR(MAX), @AttributeTypeName NVARCHAR(100), @AttributeCode NVARCHAR(300), @AttributeId INT, @IsRequired BIT, @SourceColumnName NVARCHAR(600), @ControlName VARCHAR(300), @ValidationName VARCHAR(100), @SubValidationName VARCHAR(300), @ValidationValue VARCHAR(300), @RegExp VARCHAR(300), @CreateDateString NVARCHAR(300), @DefaultLocaleId INT, @ImportHeadId INT, @CheckedSourceColumn NVARCHAR(600)= '', @Status BIT= 0,
			    @CsvColumnString nvarchar(max),
				@FailedRecordCount BIGINT,
				@SuccessRecordCount BIGINT

             DECLARE @FamilyAttributeDetail TABLE
             (PimAttributeId       INT,
              AttributeTypeName    VARCHAR(300),
              AttributeCode        VARCHAR(300),
              SourceColumnName     NVARCHAR(600),
              IsRequired           BIT,
              PimAttributeFamilyId INT
             );
             DECLARE @AttributeDetail TABLE
             (PimAttributeId    INT,
              AttributeTypeName VARCHAR(300),
              AttributeCode     VARCHAR(300),
              SourceColumnName  NVARCHAR(600),
              IsRequired        BIT,
              ControlName       VARCHAR(300),
              ValidationName    VARCHAR(100),
              SubValidationName VARCHAR(300),
              ValidationValue   VARCHAR(300),
              RegExp            VARCHAR(300)
             );


			CREATE TABLE #DefaultAttributeCode
			(AttributeTypeName          VARCHAR(300),
			PimAttributeDefaultValueId INT,
			PimAttributeId             INT,
			AttributeDefaultValueCode  VARCHAR(100)
			);


			IF( @ImportHeadName = 'B2BCustomer' )
			BEGIN
				EXEC ZnodeB2BCustomerMapping @ImportHeadName = @ImportHeadName, @TableName = @TableName
			END
		
             DECLARE @GlobalTempTableColumns TABLE(ColumnName NVARCHAR);
             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM INFORMATION_SCHEMA.TABLES
                 WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#InvalidDefaultData'
             )
                 CREATE TABLE #InvalidDefaultData
                 (RowNumber  INT,
                  Value      NVARCHAR(MAX),
                  ColumnName NVARCHAR(600)
                 );
             ELSE
             DROP TABLE #InvalidDefaultData;
             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM INFORMATION_SCHEMA.TABLES
                 WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#GlobalTempTableColumns'
             )
                 BEGIN

                     SET @SQLQuery = 'SELECT Column_Name, '''+@ImportHeadName+''' AS ImportHeadName  from tempdb.INFORMATION_SCHEMA.COLUMNS	where table_name = object_name(object_id('''+@TableName+'''),
					(select database_id from sys.databases where name = ''tempdb''))';
                     CREATE TABLE #GlobalTempTableColumns
                     (ColumnName   NVARCHAR(MAX),
                      TypeOfImport NVARCHAR(100)
                     );
                     INSERT INTO #GlobalTempTableColumns
                     (ColumnName,
                      TypeOfImport
                     )
                     EXEC sys.sp_sqlexec
                          @SQLQuery;
                 END;
		 

             IF EXISTS
             (
                 SELECT TOP 1 1
                 FROM #GlobalTempTableColumns
                 WHERE ColumnName IN('PimCategoryId', 'PimProductId', 'RowNumber')
             )
                 BEGIN
                     INSERT INTO ZnodeImportLog
                     (ErrorDescription,
                      ColumnName,
                      Data,
                      GUID,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate,
                      ImportProcessLogId
                     )
                     VALUES
                     (43,
                      '',
                      '',
                      @newGUID,
                      @UserId,
                      @GetDate,
                      @UserId,
                      @GetDate,
                      @ImportProcessLogId
                     );
                 END;
             SET @DefaultLocaleId = dbo.Fn_GetDefaultLocaleId();
            
		
             IF NOT EXISTS
             (
                 SELECT TOP 1 1  FROM ZnodeImportLog
                 WHERE Guid = @NewGUID
                       AND ErrorDescription IN(43, 42)
                 AND ImportProcessLogId = @ImportProcessLogId
             )
                 BEGIN
                     IF @ImportHeadName = 'Product'
                      BEGIN
						  IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
							  SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimProductId int null ';
						  ELSE 
							 SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimProductId int null Primary KEY CLUSTERED(RowNumber)';
						 
						  EXEC sys.sp_sqlexec @SQLQuery;
			         END;
                     ELSE
                     IF @ImportHeadName = 'Category'
                         BEGIN
							  IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimCategoryId int null ';
							  ElSE
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimCategoryId int null Primary KEY CLUSTERED(RowNumber) ';
						  
							  EXEC sys.sp_sqlexec @SQLQuery;
                         END;
                     ELSE
                         BEGIN
							IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1) ';
							Else 
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1) Primary KEY CLUSTERED(RowNumber)';
							
							EXEC sys.sp_sqlexec @SQLQuery;
                         END;;
                 END;
				
             --Generate new process for current import 
             --INSERT INTO ZnodeImportProcessLog(ImportTemplateId,Status,ProcessStartedDate,ProcessCompletedDate,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             --SELECT @TemplateId,dbo.Fn_GetImportStatus(0),@GetDate,NULL,@UserId,@GetDate,@UserId,@GetDate;
             --SET @ImportProcessLogId = @@IDENTITY;

             SET @CreateDateString = CONVERT(VARCHAR(100), @UserId)+','''+CONVERT(VARCHAR(100), @GetDate)+''','+CONVERT(VARCHAR(100), @UserId)+','''+CONVERT(VARCHAR(100), @GetDate)+''', '+CONVERT(VARCHAR(100), @ImportProcessLogId);

             SELECT TOP 1 @ImportHeadId = ImportHeadId FROM ZnodeImportTemplate WHERE ImportTemplateId = @TemplateId;
             IF @DefaultFamilyId = 0
                AND @ImportHeadName IN('Product', 'Category')
                 BEGIN 
                     --Get all default attribute values in attribute 
                     INSERT INTO @FamilyAttributeDetail
                     (PimAttributeId,
                      AttributeTypeName,
                      AttributeCode,
                      SourceColumnName,
                      IsRequired,
                      PimAttributeFamilyId
                     )
                     --Call Process to insert data of defeult family with source column name and target column name 
                     EXEC Znode_ImportGetTemplateDetails
                          @TemplateId = @TemplateId,
                          @IsValidationRules = 0,
                          @IsIncludeRespectiveFamily = 1,
                          @IsCategory = @IsCategory,
                          @DefaultFamilyId = @DefaultFamilyId;

					---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
					Delete FAD from @FamilyAttributeDetail FAD
					where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
					and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					               inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
                 END;
             ELSE
             IF @ImportHeadName IN('Product', 'Category')
                 BEGIN
                     --Get all default attribute values in attribute 
                     INSERT INTO @FamilyAttributeDetail
                     (PimAttributeId,
                      AttributeTypeName,
                      AttributeCode,
                      SourceColumnName,
                      IsRequired,
                      PimAttributeFamilyId
                     )
                     --Call Process to insert data of defeult family with source column name and target column name 
                     EXEC Znode_ImportGetTemplateDetails
                          @TemplateId = @TemplateId,
                          @IsValidationRules = 0,
                          @IsIncludeRespectiveFamily = 1,
                          @IsCategory = @IsCategory,
                          @DefaultFamilyId = @DefaultFamilyId;

					---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
					Delete FAD from @FamilyAttributeDetail FAD
					where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
					and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					               inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
                 END;      
             -- Check attributes are manditory and not provided with source table
		   	 
			if @TABLENAME	like '%tempdb..%'
				SET @SQLQuery = 'SELECT 42 AS ErrorDescription , SourceColumnName , '''' , '''+@NewGUID+''','+@CreateDateString+' from ZnodeImportTemplateMapping where ImportTemplateId = '+CONVERT(VARCHAR(100), @TemplateId)+' and ltrim(rtrim(SourceColumnName)) <> '''' AND ltrim(rtrim(SourceColumnName)) not in ( select isnull(Name ,'''') from tempdb.sys.columns where object_id = object_id('''+@TABLENAME+'''));';
			else 
				SET @SQLQuery = 'SELECT 42 AS ErrorDescription , SourceColumnName , '''' , '''+@NewGUID+''','+@CreateDateString+' from ZnodeImportTemplateMapping where ImportTemplateId = '+CONVERT(VARCHAR(100), @TemplateId)+' and ltrim(rtrim(SourceColumnName)) <> '''' AND ltrim(rtrim(SourceColumnName)) not in ( select isnull(Name ,'''') from sys.columns where object_id = object_id('''+@TABLENAME+'''));';
		 
			Declare @Tbl_CsvDynamicColulmns TABLE (ColumnName nvarchar(300), SequenceNumber int, DataType nvarchar(50),IsRequired bit )

			INSERT INTO @Tbl_CsvDynamicColulmns(ColumnName , SequenceNumber , DataType ,IsRequired)
			SELECT DISTINCT ZITM.SourceColumnName ,ZIAV.SequenceNumber, ZIAV.AttributeTypeName, ZIAV.IsRequired
			FROM ZnodeImportAttributeValidation ZIAV LEFT OUTER JOIN 
			ZnodeImportTemplate  ZIT ON ZIT.ImportHeadId =  ZIAV.ImportHeadId AND ZIT.ImportTemplateId  = @TemplateId
			LEFT OUTER JOIN ZnodeImportTemplateMapping  ZITM ON ZITM.ImportTemplateId = ZIT.ImportTemplateId  
			and ZIAV.AttributeCode = ZITM.TargetColumnName
			AND ZITM.ImportTemplateId  = @TemplateId
			WHERE ZIAV.ImportHeadId = @ImportHeadId --ORDER BY ZIAV.SequenceNumber


		    SELECT @CsvColumnString = SUBSTRING ((Select ',' +  ISNULL(ColumnName ,'NULL') from @Tbl_CsvDynamicColulmns ORDER BY SequenceNumber FOR XML PATH ('')),2,4000) 


     		INSERT INTO ZnodeImportLog(ErrorDescription, ColumnName, Data, GUID,CreatedBy, CreatedDate,  ModifiedBy,ModifiedDate,ImportProcessLogId
             )
             EXEC sys.sp_sqlexec  @SQLQuery;
             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM ZnodeImportLog
                 WHERE Guid = @NewGUID
                       AND ErrorDescription IN(43, 42)
                 AND ImportProcessLogId = @ImportProcessLogId
             )
                 BEGIN
                     --Get all default attribute values in attribute 
                     IF @ImportHeadName IN('Product', 'Category')
                         BEGIN
                             -- Check attributes are manditory and not provided with source table
                             INSERT INTO ZnodeImportLog
                             (ErrorDescription,
                              ColumnName,
                              Data,
                              GUID,
                              CreatedBy,
                              CreatedDate,
                              ModifiedBy,
                              ModifiedDate,
                              ImportProcessLogId
                             )
                                    SELECT '14' AS ErrorDescription,
                                           AttributeCode,
                                           '',
                                           @NewGUID,
                                           @UserId,
                                           @GetDate,
                                           @UserId,
                                           @GetDate,
                                           @ImportProcessLogId
                                    FROM @FamilyAttributeDetail
                                    WHERE ISNULL(SourceColumnName, '') = ''
                                          AND IsRequired = 1;  

                             -- Read all attribute details with their datatype
                             INSERT INTO @AttributeDetail
                             (PimAttributeId,
                              AttributeTypeName,
                              AttributeCode,
                              SourceColumnName,
                              IsRequired,
                              ControlName,
                              ValidationName,
                              SubValidationName,
                              ValidationValue,
                              RegExp
                             )
                             EXEC Znode_ImportGetTemplateDetails
                                  @TemplateId=@TemplateId,
								  @DefaultFamilyId=@DefaultFamilyId;

							---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
							Delete FAD from @AttributeDetail FAD
							where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
							and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
										   inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode) 

                             DELETE FROM @AttributeDetail
                             WHERE AttributeTypeName = 'Image'
                                   AND ValidationName <> 'IsAllowMultiUpload';
                             --IF NOT EXISTS
                             --(
                             --    SELECT TOP 1 1
                             --    FROM INFORMATION_SCHEMA.TABLES
                             --    WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#DefaultAttributeCode'
                             --)
                             --    BEGIN
                             --        CREATE TABLE #DefaultAttributeCode
                             --        (AttributeTypeName          VARCHAR(300),
                             --         PimAttributeDefaultValueId INT,
                             --         PimAttributeId             INT,
                             --         AttributeDefaultValueCode  VARCHAR(100)
                             --        );
                                     INSERT INTO #DefaultAttributeCode
                                     (AttributeTypeName,
                                      PimAttributeDefaultValueId,
                                      PimAttributeId,
                                      AttributeDefaultValueCode
                                     )
                                     --Call Process to insert default data value 
                                     EXEC Znode_ImportGetPimAttributeDefaultValue;

                                     DELETE FROM #DefaultAttributeCode
                                     WHERE AttributeTypeName = 'Yes/No';
                             
                         END;
                     ELSE
                         BEGIN
					
					
                             --Read all attribute details with their datatype
                             INSERT INTO @AttributeDetail
                             (AttributeTypeName,
                              AttributeCode,
                              SourceColumnName,
                              IsRequired,
                              ControlName,
                              ValidationName,
                              SubValidationName,
                              ValidationValue,
                              RegExp
                             )
                             EXEC [Znode_ImportGetOtherTemplateDetails]
                                  @TemplateId = @TemplateId,
                                  @ImportHeadId = @ImportHeadId;

							IF @ImportHeadName IN('B2BCustomer')
							BEGIN

								INSERT INTO @AttributeDetail
								 (PimAttributeId,
								 AttributeTypeName,
								  AttributeCode,
								  SourceColumnName,
								  IsRequired,
								  ControlName,
								  ValidationName,
								  SubValidationName,
								  ValidationValue,
								  RegExp
								 )
								 EXEC [Znode_ImportGetGlobalTemplateDetails]
									  @TemplateId = @TemplateId,
									  @ImportHeadId = @ImportHeadId;

								
								INSERT INTO #DefaultAttributeCode
								(AttributeTypeName,
								PimAttributeDefaultValueId,
								PimAttributeId,
								AttributeDefaultValueCode
								)
								--Call Process to insert default data value 
								EXEC Znode_ImportGetGlobalAttributeDefaultValue;

								DELETE FROM #DefaultAttributeCode
								WHERE AttributeTypeName = 'Yes/No';

							END
						
                             --Check attributes are not mapped with any family of Pim Product
                             INSERT INTO ZnodeImportLog
                             (ErrorDescription,
                              ColumnName,
                              Data,
                              GUID,
                              CreatedBy,
                              CreatedDate,
                              ModifiedBy,
                              ModifiedDate,
                              ImportProcessLogId
                             )
                                    SELECT DISTINCT
                                           '14' AS ErrorDescription,
                                           AttributeCode,
                                           '',
                                           @NewGUID,
                                           @UserId,
                                           @GetDate,
                                           @UserId,
                                           @GetDate,
                                           @ImportProcessLogId
                                    FROM @AttributeDetail
                                    WHERE ISNULL(SourceColumnName, '') = ''   AND IsRequired = 1;  ;

                         END;
						
                     --	Check attributes are not mapped with (Default / Other) family of Pim Product
                     --	INSERT INTO ZnodeImportLog ( ErrorDescription , ColumnName , Data , GUID , CreatedBy , CreatedDate , ModifiedBy , ModifiedDate , ImportProcessLogId)
                     --	SELECT '1' AS ErrorDescription , SourceColumnName , '' , @NewGUID , @UserId , @GetDate , @UserId , @GetDate , @ImportProcessLogId
                     --	FROM @AttributeDetail WHERE PimAttributeId NOT IN ( SELECT zpfgm.PimAttributeId FROM dbo.ZnodePimFamilyGroupMapper AS zpfgm);
                     --	Verify data in global temporary table (column wise)
					
                     DECLARE Cr_Attribute CURSOR LOCAL FAST_FORWARD
                     FOR SELECT PimAttributeId,
                                AttributeTypeName,
                                AttributeCode,
                                IsRequired,
                                SourceColumnName,
                                ControlName,
                                ValidationName,
                                SubValidationName,
                                ValidationValue,
                                RegExp
                         FROM @AttributeDetail
                         WHERE ISNULL(SourceColumnName, '') <> '';
                     OPEN Cr_Attribute;
                     FETCH NEXT FROM Cr_Attribute INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @ControlName, @ValidationName, @SubValidationName, @ValidationValue, @RegExp;
                     WHILE @@FETCH_STATUS = 0
                         BEGIN
				             IF @AttributeTypeName = 'Number'
                                 BEGIN
							      EXEC Znode_ImportValidateNumber
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @ImportHeadId = @ImportHeadId,
                                          @ImportProcessLogId = @ImportProcessLogId;
                                 END;
							 -- Check invalid date
							
                             IF @AttributeTypeName = 'Date'
                                 BEGIN
                                     EXEC Znode_ImportValidateDate
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @ImportHeadId = @ImportHeadId,
                                          @ImportProcessLogId = @ImportProcessLogId;
                                 END;
							 -- Check Manditory Data
		 					 IF @IsRequired = 1 AND @CheckedSourceColumn <> @SourceColumnName
								BEGIN
									SET @CheckedSourceColumn = @SourceColumnName;
									EXEC Znode_ImportValidateManditoryData
									@TableName = @TableName,
									@SourceColumnName = @SourceColumnName,
									@CreateDateString = @CreateDateString,
									@ValidationName = @ValidationName,
									@ControlName = @ControlName,
									@ValidationValue = @ValidationValue,
									@NewGUID = @NewGUID,
									@ImportHeadId = @ImportHeadId;
								END;
						
							
                             IF @AttributeTypeName = 'Text'
                                 BEGIN
								 
						              EXEC Znode_ImportValidateManditoryText
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @LocaleId = @LocaleId,
                                          @DefaultLocaleId = @DefaultLocaleId,
                                          @AttributeId = @AttributeId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @ImportHeadId = @ImportHeadId;
                                 END;
                             IF @AttributeTypeName = 'Image'
                                 BEGIN
                                     EXEC Znode_ImportValidateImageData
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @LocaleId = @LocaleId,
                                          @DefaultLocaleId = @DefaultLocaleId,
                                          @AttributeId = @AttributeId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @ImportHeadId = @ImportHeadId;
                                 END;

					

                             --Check Default data value is valid 
                             IF @ImportHeadName IN('Product', 'Category','B2BCustomer')
                                 BEGIN
                                     IF @AttributeId IN
                                     (
                                         SELECT PimAttributeId
                                         FROM #DefaultAttributeCode
                                     )
                                         BEGIN
							
                                            IF  @AttributeTypeName = 'Multi Select'
											 BEGIN
										 		 ---Verify Image file is exists in media table or not 
												 SET @SQLQuery = ' INSERT INTO #InvalidDefaultData (RowNumber, Value, ColumnName) 
												 SELECT ROWNUMBER , (Select TOP 1 Item from dbo.split(' + @SourceColumnName + ','','')  SP WHERE NOT EXISTS 
												 (Select ToP 1 1 FROM #DefaultAttributeCode DAC WHERE 
												  DAC.AttributeTypeName <> ''Yes/No'' AND DAC.AttributeDefaultValueCode IS NOT NULL AND DAC.PimAttributeId = 
												 ' + CONVERT(VARCHAR(100), @AttributeId) + ' AND ltrim(rtrim(SP.Item) ) = DAC.AttributeDefaultValueCode
												 )), ''' + @SourceColumnName + ''' as [ColumnName]  FROM ' + @TableName
												 + ' Where ISnull(' + @SourceColumnName +  ','''') <> '''''
												EXEC sys.sp_sqlexec @SQLQuery;
											  END
											  ELSE IF @AttributeTypeName = 'Simple Select'
											  BEGIN
						
												---Verify Image file is exists in media table or not 
												 SET @SQLQuery = ' INSERT INTO #InvalidDefaultData (RowNumber, Value, ColumnName) 
												 SELECT ROWNUMBER , ' + @SourceColumnName + ' , ''' + @SourceColumnName + ''' as [ColumnName]  FROM ' + @TableName
												 + ' SP Where ISnull(' + @SourceColumnName +  ','''') <> '''' AND 
												  NOT EXISTS 
												 (Select TOP 1 1 FROM #DefaultAttributeCode DAC WHERE 
												  DAC.AttributeTypeName <> ''Yes/No'' AND DAC.AttributeDefaultValueCode IS NOT NULL AND DAC.PimAttributeId = 
												 ' + CONVERT(VARCHAR(100), @AttributeId) + ' AND ltrim(rtrim(SP.' + @SourceColumnName + ') ) = DAC.AttributeDefaultValueCode ) '
							
												EXEC sys.sp_sqlexec @SQLQuery;
											  END   
												-- Check Invalid Image 
												 SET @SQLQuery = 'SELECT ''9 '' ErrorDescription,'''+@SourceColumnName+''' as [ColumnName], 
												 Value AS  AttributeValue,RowNumber ,'''+@NewGUID+''',  '+@CreateDateString+' FROM #InvalidDefaultData Where Value IS NOT NULL'
												 INSERT INTO ZnodeImportLog (ErrorDescription, ColumnName, Data, RowNumber, GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
												 EXEC sys.sp_sqlexec @SQLQuery;
												 Delete from #InvalidDefaultData

       
                                         END;
                                 END;
							
                             FETCH NEXT FROM Cr_Attribute INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @ControlName, @ValidationName, @SubValidationName, @ValidationValue, @RegExp;
                         END;
                     CLOSE Cr_Attribute;
                     DEALLOCATE Cr_Attribute;
                     
                 END;
             

		 Declare @SQLQueryNew NVARCHAR(4000)
		 Declare @SourceColumnNameProduct nvarchar(4000) 
         IF @ImportHeadName IN('Product','Pricing','ProductAssociation','Inventory')
		 BEGIN
		  	 
		 SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'SKU'
		 AND ImportTemplateId = @TemplateId


			SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  SKU - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;			
		END
		ELSE IF @ImportHeadName IN('ProductAttribute')
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'AttributeCode'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  Attribute - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'ZipCode'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'ZIP'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  ZIPCode - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'Category'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'CategoryCode'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  CategoryCode - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'CategoryAssociation'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'CategoryName'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  CategoryName - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;

		END
		ELSE IF @ImportHeadName IN ('Customer','CustomerAddress')
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'UserName'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  UserName - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'SEODetails'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'Code'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  Code - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'Highlight'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'HighlightCode'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  HighlightCode - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'AddonAssociation'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'SKU'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  SKU - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
	
			 
  		SET @SQLQuery = 'Delete FROM  '+@TableName+' Where Rownumber IN (Select Rownumber FROM ZnodeImportLog  WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND Rownumber IS NOT NULL)';
        EXEC sys.sp_sqlexec  @SQLQuery;
			 			
	  
             IF @ImportHeadName IN('Product', 'Category')
                 BEGIN
                     IF NOT EXISTS
                     (
                         SELECT TOP 1 1
                         FROM @FamilyAttributeDetail
                         WHERE ISNULL(SourceColumnName, '') = ''
                               AND IsRequired = 1
                     ) AND NOT EXISTS
					 (
						 SELECT TOP 1 1
						 FROM ZnodeImportLog
						 WHERE Guid = @NewGUID
							   AND ErrorDescription IN(43, 42)
						 AND ImportProcessLogId = @ImportProcessLogId
					 )
                         BEGIN
                             IF @IsCategory = 0
                                 BEGIN
							
                                     EXEC Znode_ImportPimProductData
                                          @TableName = @TableName,
                                          @NewGUID = @NewGUID,
                                          @TemplateId = @TemplateId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @UserId = @UserId,
                                          @LocaleId = @LocaleId,
                                          @DefaultFamilyId = @DefaultFamilyId;

                                 END;
                             ELSE
                                 BEGIN
                                     EXEC Znode_ImportPimCategoryData
                                          @TableName = @TableName,
                                          @NewGUID = @NewGUID,
                                          @TemplateId = @TemplateId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @UserId = @UserId,
                                          @LocaleId = @LocaleId,
                                          @DefaultFamilyId = @DefaultFamilyId;
                                 END;
                         END
						 ELSE
							BEGIN
								-- Update Record count in log 
								

								SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
								SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
								EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount out
								UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
								WHERE ImportProcessLogId = @ImportProcessLogId;
							END

                 END;
				IF NOT EXISTS
					 (
						 SELECT TOP 1 1
						 FROM ZnodeImportLog
						 WHERE Guid = @NewGUID
							   AND ErrorDescription IN(43, 42)
						 AND ImportProcessLogId = @ImportProcessLogId
					 )
             BEGIN
                 IF @ImportHeadName = 'Pricing'
                     BEGIN
                         EXEC [Znode_ImportPriceList]
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID,
                              @PriceListId = @PriceListId;
                     END;

                 IF @ImportHeadName = 'Inventory'
                     BEGIN
				
                         EXEC Znode_ImportInventory_Ver1
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID;
                     END;
                 IF @ImportHeadName = 'ZipCode'
                     BEGIN
						 EXEC Znode_ImportZipCode
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID,
							  @CountryCode = @CountryCode;
                     END;
					 IF @ImportHeadName = 'CategoryAssociation'
                     BEGIN
						 EXEC Znode_ImportCatalogCategory
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID,
							  @PimCatalogId = @PimCatalogId;
                     END;
					 IF @ImportHeadName = 'ProductAssociation'
                     BEGIN
						 EXEC Znode_ImportAssociateProducts
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID
                     END;
			
					 IF @ImportHeadName = 'SEODetails' AND @PortalId > 0 
                     BEGIN
						 EXEC Znode_ImportSEODetails
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
							  @LocaleId = @LocaleId,
							  @PortalId =@PortalId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID,
							  @CsvColumnString = @CsvColumnString 

				
                     END;
				
					 IF @ImportHeadName = 'ProductAttribute' 
                     BEGIN
						 EXEC Znode_ImportAttributes
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
							  @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID
				
                     END;

					 IF @ImportHeadName = 'Customer' AND @PortalId > 0 
                     BEGIN
					
					
						 EXEC Znode_ImportCustomer
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = @PortalId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString
				
                     END;
					 
					 IF @ImportHeadName = 'UserApprovers' AND @PortalId > 0 
                     BEGIN
						 EXEC Znode_ImportUserApproval
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = @PortalId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString
				
                     END;

					 IF @ImportHeadName = 'B2BCustomer' AND @PortalId > 0 
                     BEGIN

							 EXEC Znode_ImportB2BCustomer
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = @PortalId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString
				
                     END;

					 IF @ImportHeadName = 'CustomerAddress' --AND @PortalId > 0 
                     BEGIN
						 EXEC Znode_ImportCustomerAddress
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = 1, -- not implemented from forntend 
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString,
							  @IsAccountAddress = @IsAccountAddress
				
                     END;
					 IF @ImportHeadName = 'ShippingAddress' --AND @PortalId > 0 
                     BEGIN
						 EXEC Znode_ImportCustomerAddress
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = 1, -- not implemented from forntend 
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString,
							  @IsAccountAddress = @IsAccountAddress
				
                     END;
					 IF @ImportHeadName = 'StoreLocator' --AND @PortalId > 0 
                     BEGIN
					 	 EXEC Znode_ImportStoreLocatorAddress
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString
                     END;

					IF @ImportHeadName = 'Highlight'
					BEGIN
					EXEC Znode_ImportHighlight 
					@TableName = @TableName, 
					@Status = @Status, 
					@UserId = @UserId, 
					@ImportProcessLogId = @ImportProcessLogId, 
					@NewGUID = @NewGUID 
					END;

					IF @ImportHeadName = 'AddonAssociation'
					BEGIN
					EXEC Znode_ImportAddonAssociation 
					@TableName = @TableName, 
					@Status = @Status, 
					@UserId = @UserId, 
					@ImportProcessLogId = @ImportProcessLogId, 
					@NewGUID = @NewGUID,
					@PimCatalogId = @PimCatalogId
					END;

				 
             END
			 ELSE 
				 BEGIN
					-- Update Record count in log 	
					SET @SQLQuery = ' Select @FailedRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
					EXEC	sp_executesql @SQLQuery , N'@FailedRecordCount BIGINT out' , @FailedRecordCount =@FailedRecordCount out
					
					SELECT @SuccessRecordCount = 0
									
					UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
					WHERE ImportProcessLogId = @ImportProcessLogId;
					
				 END

             EXEC Znode_ImportReadErrorLog
                  @ImportProcessLogId = @ImportProcessLogId,
                  @NewGUID = @NewGUID;
             DROP TABLE #GlobalTempTableColumns;

             -- Finally call product insert process if error not found in error log table 
             IF EXISTS
             (
                 SELECT TOP 1 1
                 FROM ZnodeImportLog
                 WHERE ImportProcessLogId = @ImportProcessLogId
                       AND Guid = @NewGUID
             )
                 BEGIN
                     --Update process with completed status for current import 
                     UPDATE ZnodeImportProcessLog
                       SET
                           Status = dbo.Fn_GetImportStatus(3),
                           ProcessCompletedDate = GETDATE()
                       WHERE ImportProcessLogId = @ImportProcessLogId;
                 END;
				 SET @SQLQuery = 'Drop Table ' + @TableName
                 EXEC sys.sp_sqlexec @SQLQuery;
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE(),
                    ERROR_LINE(),
                    ERROR_PROCEDURE();
             EXEC Znode_ImportReadErrorLog
                  @ImportProcessLogId = @ImportProcessLogId,
                  @NewGUID = @NewGUID; 
             --Update process with failed status for current import 
             UPDATE ZnodeImportProcessLog
               SET
                   Status = dbo.Fn_GetImportStatus(3),
                   ProcessCompletedDate = GETDATE()
             WHERE ImportProcessLogId = @ImportProcessLogId;
			 				 SET @SQLQuery = 'Drop Table ' + @TableName
                 EXEC sys.sp_sqlexec @SQLQuery;
             --ROLLBACK TRAN TRN_ImportValidProductData;
         END CATCH;
     END;

	 GO

	 

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportHighlight')
BEGIN 
	DROP PROCEDURE Znode_ImportHighlight
END
GO

CREATE PROCEDURE [dbo].[Znode_ImportHighlight](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @PimCatalogId int= 0)
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import Attribute Code Name and their default input validation rule other 
	--			  flag will be inserted as default we need to modify front end
	
	-- Unit Testing: 

	--------------------------------------------------------------------------------------
BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max);
		DECLARE @GetDate datetime= dbo.Fn_GetDate(), @LocaleId int  ;
		SELECT @LocaleId = DBO.Fn_GetDefaultLocaleId();
		-- Retrive RoundOff Value from global setting 
		DECLARE @InsertPimAtrribute TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY,
			RowNumber int, HighlightCode varchar(300), HighlightName varchar(1000),DisplayPopup varchar(300),Hyperlink varchar(1000),HighlightType varchar(300),IsActive varchar(100),DisplayOrder int,HighlightImage varchar(500),HighlightImagePath varchar(500), Description varchar(max), ShortDescription varchar(max), ImageAltTag varchar(400), GUID nvarchar(400)
		
		);
		DECLARE @InsertedPimAttributeIds TABLE (PimAttributeId int ,PimAttributeDefaultValueId int,AttributeDefaultValueCode nvarchar(300))
		
		SET @SSQL = 'Select RowNumber,HighlightCode, HighlightName,DisplayPopup,Hyperlink,HighlightType,IsActive,DisplayOrder,HighlightImage,HighlightImagePath,Description,ShortDescription,ImageAltTag ,GUID FROM '+@TableName;
		INSERT INTO @InsertPimAtrribute( RowNumber,HighlightCode, HighlightName,DisplayPopup,Hyperlink,HighlightType,IsActive,DisplayOrder,HighlightImage,HighlightImagePath,Description,ShortDescription,ImageAltTag ,GUID)
		EXEC sys.sp_sqlexec @SSQL;


		--@MessageDisplay will use to display validate message for input inventory value  
		DECLARE @HighlightAttributeDefaultCode TABLE
		( 
		   AttributeDefaultCode nvarchar(300)
		);
		INSERT INTO @HighlightAttributeDefaultCode
			   SELECT AttributeDefaultValueCode
			   FROM ZnodePimAttributeDefaultValue ZPADV
			   inner join ZnodePimAttribute ZPA on ZPADV.PimAttributeId = ZPA.PimAttributeId
			   where ZPA.AttributeCode = 'Highlights' 

		-- Start Functional Validation 
		-----------------------------------------------
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '9', 'HighlightCode', HighlightCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ii.HighlightCode not in 
			   (
				   SELECT AttributeDefaultCode FROM @HighlightAttributeDefaultCode 
			   );
		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '35', 'DisplayPopup', DisplayPopup, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM @InsertPimAtrribute AS ii  
			WHERE ii.DisplayPopup not in ('True','1','Yes','FALSE','0','No','')

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '35', 'IsActive', IsActive, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM @InsertPimAtrribute AS ii  
			WHERE ii.IsActive not in ('True','1','Yes','FALSE','0','No','')

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '19', 'HighlightType', HighlightType, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ii.HighlightType NOT in 
			   (
				   SELECT HT.Name  FROM ZnodeHighlightType  HT
			   );

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			SELECT '17', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			FROM @InsertPimAtrribute AS ii
			WHERE (ii.DisplayOrder <> '' OR ii.DisplayOrder IS NOT NULL ) AND  ii.DisplayOrder = 0

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			SELECT '64', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			FROM @InsertPimAtrribute AS ii
			WHERE (ii.DisplayOrder <> '' OR ii.DisplayOrder IS NOT NULL )AND  ii.DisplayOrder > 999

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '35', 'HighlightCode', HighlightCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ltrim(rtrim(isnull(ii.HighlightCode,''))) like '% %' 

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '53', 'HighlightCode', HighlightCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ii.HighlightCode in 
			   (
				   select HighlightCode  FROM @InsertPimAtrribute  Group BY HighlightCode  having count(*) > 1 
			   );

		UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ Highlight - ' + ISNULL(HighlightCode,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN @InsertPimAtrribute IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL


		-- End Function Validation 	
		-----------------------------------------------
		-- Delete Invalid Data after functional validatin  
		DELETE FROM @InsertPimAtrribute
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
		);
		
		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM @InsertPimAtrribute
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount ,
		TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
		WHERE ImportProcessLogId = @ImportProcessLogId;
		

		DECLARE @MediaId INT
		SET @MediaId = (SELECT TOP 1 MediaId from @InsertPimAtrribute IPA INNER JOIN ZnodeMedia ZM ON IPA.HighlightImage = ZM.FileName and IPA.HighlightImagePath = ZM.Path)

		if (isnull(@MediaId,0)=0)
			SET @MediaId = (SELECT max(MediaId) from @InsertPimAtrribute IPA INNER JOIN ZnodeMedia ZM ON IPA.HighlightImage = ZM.FileName)

		DECLARE @InsertedZnodeHighlight TABLE(HighlightId INT,HighlightCode VARCHAR(600)) 

			UPDATE ZH SET ZH.DisplayPopup = IPA.DisplayPopup, ZH.Hyperlink = IPA.Hyperlink, ZH.IsActive = case when IPA.IsActive in ('True','1','Yes') then 1 else 0 end,
			       ZH.DisplayOrder = IPA.DisplayOrder , ZH.ModifiedBy = @UserId, ZH.ModifiedDate = @GetDate 
			FROM @InsertPimAtrribute IPA 
			INNER JOIN ZnodeHighlightType ZHT on IPA.HighlightType = ZHT.Name
			INNER JOIN ZnodeHighlight ZH ON IPA.HighlightCode = ZH.HighlightCode and ZHT.HighlightTypeId = ZH.HighlightTypeId

			UPDATE ZHL SET ZHL.Name = IPA.HighlightName, ZHL.Description = IPA.Description, ZHL.ShortDescription = IPA.ShortDescription, ZHL.ImageAltTag = IPA.ImageAltTag
			       , ZHL.ModifiedBy = @UserId, ZHL.ModifiedDate = @GetDate 
			FROM @InsertPimAtrribute IPA 
			INNER JOIN ZnodeHighlightType ZHT on IPA.HighlightType = ZHT.Name
			INNER JOIN ZnodeHighlight ZH ON IPA.HighlightCode = ZH.HighlightCode and ZHT.HighlightTypeId = ZH.HighlightTypeId
			INNER JOIN ZnodeHighlightLocale ZHL  ON ZH.HighlightId = ZHL.HighlightId 

			INSERT INTO ZnodeHighlight (MediaId,HighlightCode,DisplayPopup,Hyperlink,HighlightTypeId,IsActive,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			OUTPUT Inserted.HighlightId,Inserted.HighlightCode INTO @InsertedZnodeHighlight
			SELECT DISTINCT @MediaId,IPA.HighlightCode, IPA.DisplayPopup , IPA.Hyperlink, ZHT.HighlightTypeId,
				   case when IPA.IsActive in ('True','1','Yes') then 1 else 0 end, Case when Isnull(IPA.DisplayOrder,0) = 0 then  999 else IPA.DisplayOrder end  , @UserId , @GetDate ,@UserId , @GetDate 
			FROM @InsertPimAtrribute IPA 
			INNER JOIN ZnodeHighlightType ZHT on IPA.HighlightType = ZHT.Name
			WHERE NOT EXISTS(select * from ZnodeHighlight ZH where ZH.HighlightCode = IPA.HighlightCode and ZH.HighlightTypeId = ZHT.HighlightTypeId)

			INSERT INTO ZnodeHighlightLocale(LocaleId,HighlightId,ImageAltTag,Name,Description,ShortDescription,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			SELECT DISTINCT @LocaleId, IZH.HighlightId, IPA.ImageAltTag, IPA.HighlightName, IPA.Description, IPA.ShortDescription, @UserId , @GetDate ,@UserId , @GetDate
			FROM @InsertPimAtrribute IPA 
			INNER JOIN @InsertedZnodeHighlight IZH on IPA.HighlightCode = IZH.HighlightCode 


		UPDATE ZnodeImportProcessLog
		  SET STATUS = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = Getdate()
		WHERE ImportProcessLogId = @ImportProcessLogId;
		COMMIT TRAN A;
	END TRY
	BEGIN CATCH

		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = Getdate()
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN A;
	END CATCH;
END;

GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportAttributes')
BEGIN 
	DROP PROCEDURE Znode_ImportAttributes
END
GO

CREATE PROCEDURE [dbo].[Znode_ImportAttributes](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @PimCatalogId int= 0)
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import Attribute Code Name and their default input validation rule other 
	--			  flag will be inserted as default we need to modify front end
	
	-- Unit Testing: 

	--------------------------------------------------------------------------------------
BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max);
		DECLARE @GetDate datetime= dbo.Fn_GetDate(), @LocaleId int  ;
		SELECT @LocaleId = DBO.Fn_GetDefaultLocaleId();
		-- Retrive RoundOff Value from global setting 
		DECLARE @InsertPimAtrribute TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, AttributeName varchar(300), AttributeCode varchar(300), AttributeType varchar(300), DisplayOrder int, GUID nvarchar(400)
		
		);
		DECLARE @InsertedPimAttributeIds TABLE (PimAttributeId int ,AttributeTypeId int,AttributeCode nvarchar(300))
		
		SET @SSQL = 'Select RowNumber,AttributeName,AttributeCode,AttributeType,DisplayOrder ,GUID FROM '+@TableName;
		INSERT INTO @InsertPimAtrribute( RowNumber,AttributeName,AttributeCode,AttributeType,DisplayOrder ,GUID)
		EXEC sys.sp_sqlexec @SSQL;


		--@MessageDisplay will use to display validate message for input inventory value  
		DECLARE @AttributeCode TABLE
		( 
		   AttributeCode nvarchar(300)
		);
		INSERT INTO @AttributeCode
			   SELECT AttributeCode
			   FROM ZnodePimAttribute 

		-- Start Functional Validation 
		-----------------------------------------------
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '10', 'AttributeCode', AttributeCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ii.AttributeCode in 
			   (
				   SELECT AttributeCode FROM @AttributeCode  where AttributeCode is not null 
			   );
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '53', 'AttributeCode', AttributeCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ii.AttributeCode in 
			   (
				   select AttributeCode  FROM @InsertPimAtrribute  Group BY AttributeCode  having count(*) > 1 
			   );

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '19', 'AttributeType', AttributeType, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ii.AttributeType NOT in 
			   (
				   SELECT AttributeTypeName  FROM ZnodeAttributeType  where IsPimAttributeType = 1 
			   );

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '50', 'AttributeCode', AttributeCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ltrim(rtrim(isnull(ii.AttributeCode,''))) like '%[^0-9A-Za-z]%'

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '50', 'AttributeCode', AttributeCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE Isnumeric(ltrim(rtrim(isnull(ii.AttributeCode,'')))) =1

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '35', 'AttributeCode', AttributeCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ltrim(rtrim(isnull(ii.AttributeCode,''))) like '% %' -----space not allowed

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			SELECT '17', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			FROM @InsertPimAtrribute AS ii
			WHERE (ii.DisplayOrder <> '' OR ii.DisplayOrder IS NOT NULL )AND  ii.DisplayOrder = 0

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '64', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE (ii.DisplayOrder <> '' OR ii.DisplayOrder IS NOT NULL )AND  ii.DisplayOrder > 999


		UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ Attribute - ' + ISNULL(AttributeCode,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN @InsertPimAtrribute IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL

		-- End Function Validation 	
		-----------------------------------------------
		-- Delete Invalid Data after functional validatin  
		DELETE FROM @InsertPimAtrribute
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
		);
		
		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM @InsertPimAtrribute
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount ,
		TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End


		--- Insert data into base table ZnodePimatrribute with their validation 

		INSERT INTO ZnodePimAttribute (AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable,IsSystemDefined
			,IsConfigurable,IsPersonalizable,IsShowOnGrid,DisplayOrder,HelpDescription,IsCategory,IsHidden,IsSwatch,
			CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		
		OUTPUT Inserted.PimAttributeId,Inserted.AttributeTypeId,Inserted.AttributeCode INTO @InsertedPimAttributeIds  
		
		SELECT ZAT.AttributeTypeId,AttributeCode, 0 IsRequired , 1 IsLocalizable,1 IsFilterable, 0 IsSystemDefined, 0 IsConfigurable,
		0 IsPersonalizable,  0 IsShowOnGrid , Case when Isnull(DisplayOrder,0) = 0 then  999 else DisplayOrder end  , '' HelpDescription ,0  IsCategory , 0 IsHidden , 0 IsSwatch,
		@UserId , @GetDate ,@UserId , @GetDate from @InsertPimAtrribute IPA INNER JOIN ZnodeAttributeType ZAT 
		ON IPA.AttributeType = ZAT.AttributeTypeName  
		
		
		INSERT INTO ZnodePimAttributeLocale (LocaleId,PimAttributeId,AttributeName,Description,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		Select @LocaleId ,IPAS.PimAttributeId, IPA.AttributeName, '', @UserId , @GetDate ,@UserId , @GetDate   
		 FROM @InsertedPimAttributeIds IPAS INNER JOIN @InsertPimAtrribute IPA ON IPAS.AttributeCode= IPA.AttributeCode 
		
		INSERT INTO ZnodePimAttributeValidation
		(PimAttributeId,InputValidationId,InputValidationRuleId,Name,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT IPA.PimAttributeId,ZAIV.InputValidationId,NULL,null , @UserId , @GetDate ,@UserId , @GetDate  
		FROM @InsertedPimAttributeIds IPA INNER JOIN ZnodeAttributeInputValidation ZAIV ON IPA.AttributeTypeId = ZAIV.AttributeTypeId


		insert into ZnodePimFrontendProperties (PimAttributeId,IsComparable,IsUseInSearch,IsHtmlTags,IsFacets,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		Select PimAttributeId, 0 IsComparable, 0 IsUseInSearch,0 IsHtmlTags,0 IsFacets, @UserId CreatedBy,@GetDate CreatedDate, @UserId ModifiedBy, @GetDate ModifiedDate
		from  @InsertedPimAttributeIds
	

		UPDATE ZnodeImportProcessLog
		  SET STATUS = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = GETDATE()
		WHERE ImportProcessLogId = @ImportProcessLogId;
		COMMIT TRAN A;
	END TRY
	BEGIN CATCH

		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = GETDATE()
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN A;
	END CATCH;
END;
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportAddonAssociation')
BEGIN 
	DROP PROCEDURE Znode_ImportAddonAssociation
END
GO

CREATE PROCEDURE [dbo].[Znode_ImportAddonAssociation](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @PimCatalogId int= 0)
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import Attribute Code Name and their default input validation rule other 
	--			  flag will be inserted as default we need to modify front end
	
	-- Unit Testing: 

	--------------------------------------------------------------------------------------
BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @SSQL nvarchar(max);
		DECLARE @GetDate datetime= dbo.Fn_GetDate(), @LocaleId int  ;
		SELECT @LocaleId = DBO.Fn_GetDefaultLocaleId();

		IF OBJECT_ID('TEMPDB..#InsertProductAddonAssociation') IS NOT NULL
			DROP TABLE #InsertProductAddonAssociation

		IF OBJECT_ID('TEMPDB..#SKU') IS NOT NULL
			DROP TABLE #SKU

		IF OBJECT_ID('TEMPDB..#InsertZnodePimAddOnProduct') IS NOT NULL
			DROP TABLE #InsertZnodePimAddOnProduct

		CREATE TABLE #InsertZnodePimAddOnProduct ( PimAddOnProductId int,PimAddonGroupId int,PimProductId int)

		CREATE TABLE #InsertProductAddonAssociation
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, SKU varchar(300),AddonGroupName varchar(300),AddOnSKU varchar(300),DisplayOrder int, IsDefault varchar(10), GUID nvarchar(400)
		
		);

		CREATE TABLE #SKU 
		( 
			SKU nvarchar(300), PimProductId int
		);

		----Get All SKU Data From DB
		INSERT INTO #SKU (SKU, PimProductId)
		SELECT ZPAVL.AttributeValue, ZPAV.PimProductId
		FROM ZnodePimAttributeValue AS ZPAV
		INNER JOIN ZnodePimAttributeValueLocale AS ZPAVL ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId
		INNER JOIN ZnodePimAttribute ZPA ON ZPAV.PimAttributeId = ZPA.PimAttributeId
		WHERE ZPA.AttributeCode = 'SKU';

		SET @SSQL = 'Select RowNumber,SKU,AddonGroupName,AddOnSKU,DisplayOrder,IsDefault,GUID FROM '+@TableName;
		INSERT INTO #InsertProductAddonAssociation( RowNumber,SKU,AddonGroupName,AddOnSKU,DisplayOrder,IsDefault,GUID )
		EXEC sys.sp_sqlexec @SSQL;

		SELECT SKU,AddonGroupName,AddOnSKU 
		INTO #DuplicateProductAddonAssociation 
		FROM #InsertProductAddonAssociation 
		Group BY SKU,AddonGroupName,AddOnSKU  having count(*) > 1

		----Checking AddonGroupName present in DB
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '19', 'AddonGroupName', AddonGroupName, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		FROM #InsertProductAddonAssociation AS ii
		WHERE NOT EXISTS ( SELECT * FROM ZnodePimAddonGroupLocale i where i.AddonGroupName = ii.AddonGroupName );

		----Checking SKU present in DB
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '19', 'SKU', SKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		FROM #InsertProductAddonAssociation AS ii
		WHERE NOT EXISTS( SELECT * FROM #SKU SKU WHERE ii.SKU = SKU.SKU)

		----Checking AddOnSKU present in DB
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '19', 'AddOnSKU', AddOnSKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		FROM #InsertProductAddonAssociation AS ii
		WHERE NOT EXISTS( SELECT * FROM #SKU SKU WHERE ii.AddOnSKU = SKU.SKU)
		
		----Duplicate Record (SKU \ AddOnSKU \ AddonGroupName)
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '53', 'SKU \ AddOnSKU \ AddonGroupName ', SKU+' \ '+AddOnSKU+' \ '+AddonGroupName, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		FROM #InsertProductAddonAssociation AS ii
		WHERE EXISTS ( select * FROM #DuplicateProductAddonAssociation i WHERE i.SKU = ii.SKU and i.AddOnSKU = ii.AddOnSKU and i.AddonGroupName = ii.AddonGroupName );

		----Checking is default value data validation
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
		SELECT '35', 'IsDefault', IsDefault, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
		FROM #InsertProductAddonAssociation AS ii  
		WHERE ISNULL(ii.IsDefault,0) not in ('True','1','Yes','FALSE','0','No','')
		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			SELECT '17', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			FROM #InsertProductAddonAssociation AS ii
			WHERE (ii.DisplayOrder <> '' OR ii.DisplayOrder IS NOT NULL ) AND  ii.DisplayOrder = 0

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			SELECT '64', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			FROM #InsertProductAddonAssociation AS ii
			WHERE (ii.DisplayOrder <> '' OR ii.DisplayOrder IS NOT NULL )AND  ii.DisplayOrder > 999

		UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ SKU - ' + isnull(SKU,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN #InsertProductAddonAssociation IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL

		-- Delete Invalid Data after functional validatin  
		DELETE FROM #InsertProductAddonAssociation
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
		);
		
		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM #InsertProductAddonAssociation
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount 
		WHERE ImportProcessLogId = @ImportProcessLogId;


		UPDATE PAPD
		SET PAPD.ModifiedBy =@UserId  ,PAPD.ModifiedDate = GETDATE(),
		PAPD.IsDefault = case when IPAA.IsDefault in ('True','1','Yes') then 1 else 0 end,
		PAPD.DisplayOrder = CASE WHEN IPAA.DisplayOrder IS NOT NULL THEN IPAA.DisplayOrder ELSE PAPD.DisplayOrder END
		FROM #InsertProductAddonAssociation IPAA
		INNER JOIN #SKU SKU ON SKU.SKU = IPAA.SKU
		INNER JOIN #SKU SKU1 ON SKU1.SKU = IPAA.AddOnSKU
		INNER JOIN ZnodePimAddonGroupLocale ZPAGL on ZPAGL.AddonGroupName = IPAA.AddonGroupName
		INNER JOIN ZnodePimAddOnProduct PAP ON (PAP.PimProductId = SKU.PimProductId AND PAP.PimAddonGroupId = ZPAGL.PimAddonGroupId)
		INNER JOIN ZnodePimAddOnProductDetail PAPD ON (PAPD.PimAddOnProductId =PAP.PimAddOnProductId AND SKU1.PimProductId = PAPD.PimChildProductId )

		-----Inserting records in ZnodePimAddOnProduct
		INSERT INTO ZnodePimAddOnProduct(PimAddonGroupId,PimProductId,DisplayOrder,RequiredType,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		OUTPUT inserted.PimAddOnProductId, inserted.PimAddonGroupId,inserted.PimProductId into #InsertZnodePimAddOnProduct (PimAddOnProductId,PimAddonGroupId,PimProductId)
		SELECT DISTINCT ZPAGL.PimAddonGroupId,SKU.PimProductId, 999 as DisplayOrder,
		'Required' RequiredType,@UserId as CreatedBy,@GetDate,@UserId as ModifiedBy,@GetDate
		FROM #InsertProductAddonAssociation IPAA
		INNER JOIN #SKU SKU ON SKU.SKU = IPAA.SKU
		INNER JOIN ZnodePimAddonGroupLocale ZPAGL on ZPAGL.AddonGroupName = IPAA.AddonGroupName
		WHERE NOT EXISTS(SELECT * FROM ZnodePimAddOnProduct ZPAP where ZPAP.PimAddonGroupId = ZPAGL.PimAddonGroupId and ZPAP.PimProductId = SKU.PimProductId )

		-----Inserting records in ZnodePimAddOnProductDetail
		INSERT INTO ZnodePimAddOnProductDetail(PimAddOnProductId,PimChildProductId,IsDefault,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT DISTINCT ZPAP.PimAddOnProductId, SKU.PimProductId as PimChildProductId, CASE WHEN isnull(IPAA.IsDefault,0) IN ('True','1','Yes') THEN 1 ELSE 0 END, ISNULL(IPAA.DisplayOrder,999),@UserId ,@GetDate,@UserId,@GetDate 
		FROM #InsertProductAddonAssociation IPAA
		INNER JOIN #SKU SKU1 ON SKU1.SKU = IPAA.SKU
		INNER JOIN #SKU SKU ON SKU.SKU = IPAA.AddOnSKU
		INNER JOIN ZnodePimAddonGroupLocale ZPAGL on IPAA.AddonGroupName = ZPAGL.AddonGroupName
		INNER JOIN ZnodePimAddOnProduct ZPAP on SKU1.PimProductId = ZPAP.PimProductId and ZPAP.PimAddonGroupId = ZPAGL.PimAddonGroupId
		WHERE NOT EXISTS(SELECT * FROM ZnodePimAddOnProductDetail ZPAPD WHERE ZPAPD.PimAddOnProductId = ZPAP.PimAddOnProductId and ZPAPD.PimChildProductId = SKU.PimProductId )

		UPDATE ZnodeImportProcessLog
		SET STATUS = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = GETDATE()
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;

	END TRY
	BEGIN CATCH

		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = GETDATE()
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN A;
	END CATCH;
END;

GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetProductList')
BEGIN 
	DROP PROCEDURE Znode_GetProductList
END
GO


CREATE  PROCEDURE [dbo].[Znode_GetProductList]
(
 @IsAssociated BIT = 0
 ,@PimProductId Transferid Readonly ,
 @PimCatalogId INT = 0
)
AS 
BEGIN 

 IF @IsAssociated = 0  --AND NOT EXISTS (SELECT Max(id) FROM @PimProductId WHERE id = 0)
 BEGIN 
   IF @PimCatalogId = 0
         BEGIN
		 SELECT PimProductId 
		 FROM ZnodePimProduct ZPP 
		 WHERE NOT EXISTS (SELECT TOP 1  1 FROM @PimProductId WHERE id = ZPP.PimProductId )
		 AND PimProductId IS NOT NULL 
		 END
   ELSE IF @PimCatalogId = -1
		BEGIN
		SELECT PimProductId 
		FROM ZnodePimProduct ZPP 
		WHERE NOT EXISTS (SELECT TOP 1  1 FROM @PimProductId WHERE id = ZPP.PimProductId )
		AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimCatalogCategory ZPCC 
										   WHERE ZPP.PimProductId = ZPCC.PimProductId)
		AND PimProductId IS NOT NULL
		END
   ELSE
		BEGIN
		SELECT PimProductId 
		FROM ZnodePimProduct ZPP 
		WHERE NOT EXISTS (SELECT TOP 1  1 FROM @PimProductId WHERE id = ZPP.PimProductId )
		AND EXISTS (SELECT TOP 1 1 FROM ZnodePimCatalogCategory ZPCC WHERE ZPP.PimProductId = ZPCC.PimProductId
										AND ZPCC.PimCatalogId = @PimCatalogId)
		AND PimProductId IS NOT NULL
		END
 END 
 ELSE IF NOT EXISTS (SELECT TOP 1 1  FROM @PimProductId HAVING max(id) = 0)
 BEGIN

 SELECT PimProductId 
 FROM ZnodePimProduct ZPP 
 WHERE  EXISTS (SELECT TOP 1  1 FROM @PimProductId WHERE id = ZPP.PimProductId )
  AND PimProductId IS NOT NULL 
 END 
 ELSE 
 BEGIN 
  SELECT 0 PimProductId
END 
END

GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ManageCategoryList_XML')
BEGIN 
	DROP PROCEDURE Znode_ManageCategoryList_XML
END
GO
--
CREATE PROCEDURE [dbo].[Znode_ManageCategoryList_XML](
      @WhereClause      XML ,
      @Rows             INT            = 100 ,
      @PageNo           INT            = 1 ,
      @Order_BY         NVARCHAR(1000) = '' ,
      @LocaleId         INT            = 1 ,
      @ProfileCatalogId INT            = 0,
	  @PimCatalogId     INT            = 0)
AS
    /*
	   Summary: This Procedure is used to get all category list 
				The Result displays CategortName with PimCategoryId where CategoryName and CategoryImage are pivoted values
	   Unit Testing 	  
	   EXEC Znode_ManageCategoryList_XML '' ,@LocaleId= 1
	
    */
     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY
		 SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 
             DECLARE @TBL_PimcategoryDetails TABLE (PimCategoryId INT,CountId INT,RowId INT);
             DECLARE @TBL_CategoryIds TABLE (PimCategoryId INT ,ParentPimcategoryId INT);
             DECLARE @TBL_AttributeValue TABLE (PimCategoryAttributeValueId INT,PimCategoryId INT,CategoryValue NVARCHAR(MAX), AttributeCode VARCHAR(300), PimAttributeId  INT);
             DECLARE @TBL_FamilyDetails TABLE (PimCategoryId INT , PimAttributeFamilyId INT , AttributeFamilyName  NVARCHAR(MAX));
             DECLARE @TBL_DefaultAttributeValue TABLE (PimAttributeId INT ,AttributeDefaultValueCode VARCHAR(600) , IsEditable BIT ,AttributeDefaultValue NVARCHAR(MAX),DisplayOrder int);
			 DECLARE @TBL_MediaAttribute TABLE (Id INT ,PimAttributeId INT ,AttributeCode VARCHAR(600) )
             DECLARE @TBL_ProfileCatalogCategory TABLE (ProfileCatalogId INT ,PimCategoryId INT);
             DECLARE @PimCategoryIds VARCHAR(MAX)= '' , @PimAttributeIds VARCHAR(MAX),@CategoryXML NVARCHAr(max);
			 DECLARE @RowsCount INT 

		 IF @ProfileCatalogId > 0
			 BEGIN
			 INSERT INTO @TBL_ProfileCatalogCategory (ProfileCatalogId , PimCategoryId)
			 SELECT ZPC.ProfileCatalogId , PimCategoryId
			 FROM ZnodePimCatalogCategory AS ZCC INNER JOIN ZnodeProfileCatalog AS ZPC ON ( ZPC.PimCatalogId = ZCC.PimCatalogId )
			 WHERE ZPC.ProfileCatalogId = @ProfileCatalogId AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodeProfileCatalogCategory AS ZPCC WHERE ZPCC.PimCatalogCategoryId = ZCC.PimCatalogCategoryId);
                     
			 SET @PimCategoryIds = SUBSTRING( ( SELECT DISTINCT ','+CAST(PimCategoryId AS VARCHAR(20)) FROM @TBL_ProfileCatalogCategory FOR XML PATH('') ) , 2 , 4000);
			 END;

			IF @PimCatalogId = -1
			BEGIN
			SET @PimCategoryIds = SUBSTRING( ( SELECT DISTINCT ','+CAST(PimCategoryId AS VARCHAR(2000))
			FROM ZnodePimCategory ZPC 
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimCatalogCategory ZPCC 
			WHERE ZPC.PimCategoryId = ZPCC.PimCategoryId)
			AND ZPC.PimCategoryId IS NOT NULL
			FOR XML PATH('') ) , 2 , 4000);

			END
			ELSE IF @PimCatalogId <> 0 AND @PimCatalogId <> -1
			BEGIN
			SET @PimCategoryIds = SUBSTRING( ( SELECT DISTINCT ','+CAST(PimCategoryId AS VARCHAR(2000)) 
			FROM ZnodePimCategory ZPC 
			WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimCatalogCategory ZPCC WHERE ZPC.PimCategoryId = ZPCC.PimCategoryId
			AND ZPCC.PimCatalogId = @PimCatalogId)
			AND ZPC.PimCategoryId IS NOT NULL
			FOR XML PATH('') ) , 2 , 4000);
			END


              INSERT INTO @TBL_PimcategoryDetails ( PimCategoryId , CountId , RowId)
             EXEC Znode_GetCategoryIdForPaging @WhereClause , @Rows , @PageNo , @Order_BY , @RowsCount  , @LocaleId , '' , @PimCategoryIds , 1; 


             SET @PimCategoryIds =  SUBSTRING( ( SELECT ','+ CAST(PimCategoryId AS VARCHAR(100)) FROM @TBL_PimcategoryDetails FOR XML PATH('')) , 2 , 4000);
             SET @PimAttributeIds = SUBSTRING( ( SELECT ','+ CAST(PimAttributeId AS VARCHAR(100)) FROM [dbo].[Fn_GetCategoryGridAttributeDetails]() FOR XML PATH('')) , 2 , 4000);

			 INSERT INTO @TBL_AttributeValue ( PimCategoryAttributeValueId , PimCategoryId , CategoryValue , AttributeCode , PimAttributeId)
             EXEC [dbo].[Znode_GetCategoryAttributeValue] @PimCategoryIds , @PimAttributeIds , @LocaleId;

             INSERT INTO @TBL_FamilyDetails ( PimAttributeFamilyId , AttributeFamilyName , PimCategoryId)
             EXEC Znode_GetCategoryFamilyDetails @PimCategoryIds , @LocaleId;
             
		     INSERT INTO @TBL_DefaultAttributeValue ( PimAttributeId , AttributeDefaultValueCode , IsEditable , AttributeDefaultValue,DisplayOrder)
             EXEC [dbo].[Znode_GetAttributeDefaultValueLocale] @PimAttributeIds , @LocaleId;
             
			 SET @RowsCount = ISNULL((SELECT TOP 1 CountId FROM @TBL_PimcategoryDetails ),0)
			 
			 INSERT INTO @TBL_MediaAttribute (Id,PimAttributeId,AttributeCode )
			 SELECT Id,PimAttributeId,AttributeCode 
			 FROM [dbo].[Fn_GetProductMediaAttributeId]()
			 		
		     ;WITH Cte_DefaultCategoryValue
              AS (SELECT PimCategoryId , PimAttributeId ,SUBSTRING( ( SELECT ','+AttributeDefaultValue FROM @TBL_DefaultAttributeValue AS TBDAV WHERE TBDAV.PimAttributeId = TBAV.PimAttributeId 
			     AND EXISTS ( SELECT TOP 1 1 FROM dbo.Split ( TBAV.CategoryValue , ',') AS SP WHERE sp.Item = TBDAV.AttributeDefaultValueCode)
                 FOR XML PATH('')) , 2 , 4000) AS AttributeValue FROM @TBL_AttributeValue AS TBAV							 
				 WHERE EXISTS ( SELECT TOP 1 1 FROM [dbo].[Fn_GetCategoryDefaultValueAttribute]() AS SP WHERE SP.PimAttributeId = TBAV.PimAttributeId))

             UPDATE TBAV SET TBAV.CategoryValue = CTDCV.AttributeValue
             FROM @TBL_AttributeValue TBAV 
			 INNER JOIN Cte_DefaultCategoryValue CTDCV ON ( CTDCV.PimCategoryId = TBAV.PimCategoryId AND CTDCV.PimAttributeId = TBAV.PimAttributeId );
                   
		    UPDATE  TBAV
			SET CategoryValue  = SUBSTRING ((SELECT ','+[dbo].FN_GetMediaThumbnailMediaPath(zm.Path) FROM ZnodeMedia ZM  WHERE EXISTS (SELECT TOP 1 1 FROM dbo.split(TBAV.CategoryValue ,',') SP  WHERE SP.Item = CAST(ZM.MediaId AS VARCHAR(50)) ) FOR XML PATH('')),2,4000)
			FROM @TBL_AttributeValue TBAV 
			INNER JOIN @TBL_MediaAttribute TBMA ON (TBMA.PimAttributeId = TBAV.PimAttributeId)	   
			
			INSERT INTO @TBL_AttributeValue ( PimCategoryId , CategoryValue , AttributeCode )

            SELECT PimCategoryId,AttributeFamilyName , 'AttributeFamily'
			FROM @TBL_FamilyDetails 				                           
		    

			INSERT INTO @TBL_AttributeValue             ( PimCategoryId , CategoryValue , AttributeCode     )
			--SELECT a.PimCategoryId  ,
			--CASE WHEN IsCategoryPublish = 1 THEN   'Published' WHEN IsCategoryPublish = 0 
			--THEN 'Draft'  ELSE 'Not Published' END, 'PublishStatus'
			--FROM @TBL_PimcategoryDetails a 
			--INNER JOIN ZnodePimCategory b ON (b.PimCategoryId = a.PimCategoryId)

			SELECT a.PimCategoryId PimCategoryId 
			,th.DisplayName, 'PublishStatus'
			FROM @TBL_PimcategoryDetails a 
			INNER JOIN ZnodePimCategory b ON (b.PimCategoryId = a.PimCategoryId)
			LEFT JOIN ZnodePublishState th ON (th.PublishStateId = b.PublishStateId)

			SET @CategoryXML =  '<MainCategory>'+ STUFF( (  SELECT '<Category>'+'<PimCategoryId>'+CAST(TBAD.PimCategoryId AS VARCHAR(50))+'</PimCategoryId>'+ STUFF(    (  SELECT '<'+TBADI.AttributeCode+'>'+CAST((SELECT ''+TBADI.CategoryValue FOR XML PATH('')) AS NVARCHAR(max))+'</'+TBADI.AttributeCode+'>'   
															FROM @TBL_AttributeValue TBADI      
															 WHERE TBADI.PimCategoryId = TBAD.PimCategoryId 
															 ORDER BY TBADI.PimCategoryId DESC
															 FOR XML PATH (''), TYPE
																).value('.', ' Nvarchar(max)'), 1, 0, '')+'</Category>'	   

			FROM @TBL_AttributeValue TBAD
			INNER JOIN @TBL_PimcategoryDetails TBPI ON (TBAD.PimCategoryId = TBPI.PimCategoryId )
			GROUP BY TBAD.PimCategoryId,TBPI.RowId 
			ORDER BY TBPI.RowId 
			FOR XML PATH (''),TYPE).value('.', ' Nvarchar(max)'), 1, 0, '')+'</MainCategory>'


			SELECT  @CategoryXML  CategoryXMl
		   
		     SELECT AttributeCode ,  ZPAL.AttributeName
			 FROM ZnodePimAttribute ZPA 
			 LEFT JOIN ZnodePiMAttributeLOcale ZPAL ON (ZPAL.PimAttributeId = ZPA.PimAttributeId )
             WHERE LocaleId = 1 
			 AND IsCategory = 1  
			 AND ZPA.IsShowOnGrid = 1  
			 UNION ALL 
			 SELECT 'PublishStatus','Publish Status'
		    SELECT ISNULL(@RowsCount,0) AS RowsCount;



			
			 --SELECT  PIV.PimCategoryId , PIV.CategoryName , ZPC.IsActive AS [Status] , dbo.FN_GetMediaThumbnailMediaPath ( Zm.Path ) AS CategoryImage , @LocaleId AS LocaleId , ISNULL(TBFD.AttributeFamilyName , '') AS AttributeFamilyName
             
			 --FROM @TBL_PimcategoryDetails AS TBCD 
			 --INNER JOIN ( SELECT PimCategoryId , CategoryValue , AttributeCode  FROM @TBL_AttributeValue) AS TBAV PIVOT(MAX(CategoryValue)                                                             
			 --FOR AttributeCode IN([CategoryName] , [CategoryImage])) PIV ON ( PIV.PimCategoryId = TBCD.PimCategoryId )
			 --LEFT JOIN @TBL_FamilyDetails AS TBFD ON ( TBFD.PimCategoryId = PIV.PimCategoryId )
			 --LEFT JOIN ZnodeMedia AS ZM ON ( CAST(ZM.MediaId AS VARCHAR(50)) = PIV.[CategoryImage] )
			 --LEFT JOIN ZnodePimCategory AS ZPC ON ( ZPC.PimCategoryId = PIV.PimCategoryId ) 
			 --ORDER BY RowId;
             
             --SET @RowsCount = ISNULL( ( SELECT TOP 1 CountId FROM @TBL_PimcategoryDetails) , 0);
         END TRY
         BEGIN CATCH
                DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ManageCategoryList_XML @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@LocaleId = '+CAST(@LocaleId AS VARCHAR(50))+',@ProfileCatalogId='+CAST(@ProfileCatalogId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_ManageCategoryList_XML',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
	 GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ManageProductList_XML')
BEGIN 
	DROP PROCEDURE Znode_ManageProductList_XML
END
GO


CREATE  PROCEDURE [dbo].[Znode_ManageProductList_XML]
(   @WhereClause						 XML,
    @Rows								 INT           = 100,
    @PageNo								 INT           = 1,
    @Order_BY			 VARCHAR(1000) = '',
    @LocaleId			 INT           = 1,
    @PimProductId		 VARCHAR(2000) = 0,
    @IsProductNotIn	 BIT           = 0,
	@IsCallForAttribute BIT		   = 0,
	@AttributeCode      VARCHAR(max ) = '' ,
	@PimCatalogId   INT = 0,
	@IsDebug            Bit		   = 0 )
AS
    
/*
		  Summary:-   This Procedure is used for get product List  
				    Procedure will pivot verticle table(ZnodePimattributeValues) into horizontal table with columns 
				    ProductId,ProductName,ProductType,AttributeFamily,SKU,Price,Quantity,IsActive,ImagePath,Assortment,LocaleId,DisplayOrder
        
		  Unit Testing
		  
exec Znode_ManageProductList_XML @WhereClause=N'',@Rows=50,@PageNo=1,@Order_By=N'',@LocaleId=1,@PimProductId=N'',@IsProductNotIn=1,@IsCallForAttribute=0,@AttributeCode=''
          select * from ZnodeAttributeType  WHERE AttributeValue LIKE '%&%'
		  UPDATE VieW_lOADMANAGEpRODUCT SET  AttributeValue = 'A & B'  WHERE AttributeValue LIKE '% and %' AND PimProductId = 158
    */

     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY
		 SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 
             DECLARE @PimProductIds TransferId, --VARCHAR(MAX), 
					 @FirstWhereClause NVARCHAR(MAX)= '', 
					 @SQL NVARCHAR(MAX)= '' ,
					 @OutPimProductIds VARCHAR(max),
					 @ProductXML NVARCHAR(max) ;

             DECLARE @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId()
					 ,@RowsCount INT =0 ;
             DECLARE @TransferPimProductId TransferId 
			 DECLARE @TBL_AttributeDefaultValue TABLE
             (PimAttributeId            INT,
              AttributeDefaultValueCode VARCHAR(100),
              IsEditable                BIT,
              AttributeDefaultValue     NVARCHAR(MAX)
			  ,DisplayOrder INT 
			  ,PimAttributedefaultValueId INT 
             );
             DECLARE @TBL_AttributeDetails AS TABLE
             (PimProductId   INT,
              AttributeValue NVARCHAR(MAX),
              AttributeCode  VARCHAR(600),
              PimAttributeId INT,
			  AttributeDefaultValue NVARCHAR(MAX)
             );
			   DECLARE @TBL_AttributeDetailsLocale AS TABLE
             (PimProductId   INT,
              AttributeValue NVARCHAR(MAX),
              AttributeCode  VARCHAR(600),
              PimAttributeId INT
             );
			 DECLARE @TBL_MultiSelectAttribute TABLE (PimAttributeId INT , AttributeCode VARCHAR(600))
			
			 DECLARE @TBL_MediaAttribute TABLE (Id INT ,PimAttributeId INT ,AttributeCode VARCHAR(600) )
			 
			 DECLARE @TBL_ProductIds TABLE 
			 (
			  PimProductId INT,
			  ModifiedDate DATETIME  
			 )

			 DECLARE @FamilyDetails TABLE
             (
			  PimProductId         INT,
              PimAttributeFamilyId INT,
              FamilyName           NVARCHAR(Max)
             );
             DECLARE @DefaultAttributeFamily INT= dbo.Fn_GetDefaultPimProductFamilyId();
             DECLARE @ProductIdTable TABLE
             (PimProductId INT,
              CountId      INT,
              RowId        INT IDENTITY(1,1)
             );
          		
             IF EXISTS ( SELECT TOP 1 1 FROM @WhereClause.nodes ( '//ArrayOfWhereClauseModel/WhereClauseModel'  ) AS Tbl(Col)
			 WHERE dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  =  'Brand'
                OR dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  = 'Vendor'
                OR dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  =  'ShippingCostRules'
                OR dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  =  'Highlights') and @IsCallForAttribute=1
                 BEGIN
                DECLARE @AttributeCodeValue TABLE (AttributeValue NVARCHAr(max),AttributeCode NVARCHAR(max))

				INSERT INTO @AttributeCodeValue(AttributeValue,AttributeCode)
				SELECT  Tbl.Col.value ( 'attributevalue[1]' , 'NVARCHAR(max)') AS AttributeValue
						 ,Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)') AS AttributeCode
				FROM @WhereClause.nodes ( '//ArrayOfWhereClauseModel/WhereClauseModel'  ) AS Tbl(Col)
				WHERE dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  =  'Brand'
                OR dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  = 'Vendor'
                OR dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  =  'ShippingCostRules'
                OR dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  =  'Highlights'
							

				SET @SQL =   
				           ';WIth Cte_DefaultValue AS (
										  SELECT AttributeDefaultValueCode , ZPDF.PimAttributeId ,FNPA.AttributeCode
										  FROM ZnodePImAttributeDefaultValue ZPDF
										  INNER JOIN [dbo].[Fn_GetProductDefaultFilterAttributes] () FNPA ON ( FNPA.PimAttributeId = ZPDF.PimAttributeId) 
										)
										, Cte_productIds AS 
										(
										  SELECT a.PimProductId, c.AttributeCode , CTDV.AttributeDefaultValueCode AttributeValue,b.ModifiedDate 
										  FROM  ZnodePimAttributeValue a
										  LEFT JOIN ZnodePimAttribute c ON(c.PimAttributeId = a.PimAttributeId)
										  LEFT JOIN ZnodePimAttributeValueLocale b ON(b.PimAttributeValueId = a.PimAttributeValueId)  
										  INNER JOIN Cte_DefaultValue CTDV ON (CTDV.AttributeCode = c.AttributeCode 
										  AND EXISTS (SELECT TOP 1 1 FROM dbo.split(b.AttributeValue,'','') SP WHERE SP.Item = CTDV.AttributeDefaultValueCode) )
										  Union all 
										  
											SELECT a.PimProductId,c.AttributeCode,ZPADV.AttributeDefaultValueCode AttributeValue ,a.ModifiedDate 
											FROM ZnodePimProductAttributeDefaultValue ZPPADV
											INNER JOIN ZnodePimAttributeDefaultValue ZPADV ON (ZPPADV.PimAttributeDefaultValueId = ZPADV.PimAttributeDefaultValueId)
											LEFT JOIN ZnodePimAttributeValue a ON (a.PimAttributeValueId = ZPPADV.PimAttributeValueId )
											LEFT JOIN ZnodePimAttribute c ON ( c.PimAttributeId=a.PimAttributeId )
											INNER JOIN Cte_DefaultValue CTDV ON (CTDV.AttributeCode = c.AttributeCode )
										)										
										SELECT PimProductId ,ModifiedDate
										FROM Cte_productIds WHERE  AttributeCode '+(SELECT TOP 1 AttributeCode  FROM @AttributeCodeValue )+' AND 
										AttributeValue '+(SELECT TOP 1 AttributeValue  FROM @AttributeCodeValue )+' 
										GROUP BY PimProductId,ModifiedDate Order By ModifiedDate DESC ';


					 SET @Order_BY = CASE WHEN @Order_BY = '' THEN 'ModifiedDate DESC' ELSE @Order_BY END 
					 	
					 SET @WhereClause = CAST(REPLACE(CAST(@WhereClause AS NVARCHAR(max)),'<WhereClauseModel><attributecode>'+(SELECT TOP 1 AttributeCode  FROM @AttributeCodeValue )+'</attributecode><attributevalue>'+(SELECT TOP 1 AttributeValue   FROM @AttributeCodeValue )+'</attributevalue></WhereClauseModel>','') AS XML )
					
				     INSERT INTO @TBL_ProductIds ( PimProductId, ModifiedDate )
					 EXEC (@SQL);
			  					 
					
						 INSERT INTO @ProductIdTable( PimProductId )
						 SELECT PimProductId 
						 FROM @TBL_ProductIds
					

                     INSERT INTO @TransferPimProductId
					 SELECT PimProductId
                     FROM @ProductIdTable
                   
				   			  
     DELETE FROM @ProductIdTable;
   --  SET @WhereClause = CAST(REPLACE(CAST(@WhereClause AS NVARCHAR(MAX)), @FirstWhereClause, ' 1 = 1') AS XML);
                 END
	            ELSE IF @PimProductId <> ''
			    BEGIN 
		
				 INSERT INTO @TransferPimProductId(id)
				 SELECT Item 
				 FROM dbo.split(@PimProductId,',')
			    END 
		
			
	 DECLARE  @ProductListIdRTR TransferId
	 DECLARE @TAb Transferid 
	 DECLARE @tBL_mainList TABLE (Id INT,RowId INT)
	 	IF @PimProductId <> ''  OR   @IsCallForAttribute=1 --OR (CAST(@WhereClause AS NVARCHAR(max))= N'' AND @Order_by <> N'' AND @AttributeCode = N'')
		BEGIN 
	 SET @IsProductNotIn = CASE WHEN @IsProductNotIn = 0 THEN 1  
					 WHEN @IsProductNotIn = 1 THEN 0 END 
		END 
	
	 INSERT INTO @ProductListIdRTR
	 EXEC Znode_GetProductList  @IsProductNotIn,@TransferPimProductId , @PimCatalogId

	 IF CAST(@WhereClause AS NVARCHAR(max))<> N''
	 BEGIN 
	 
	  SET @SQL = 'SELECT Distinct PimProductId FROM ##Temp_PimProductId'+CAST(@@SPID AS VARCHAR(500))

	  EXEC Znode_GetFilterPimProductId @WhereClause,@ProductListIdRTR,@localeId
	  
      INSERT INTO @TAB 
	  EXEC (@SQL)
	 
	 END 
	 
	

	 IF EXISTS (SELECT Top 1 1 FROM @TAb ) OR CAST(@WhereClause AS NVARCHAR(max)) <> N''
	 BEGIN 
	 
	 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
	 SET @order_by = REPLACE(@order_by,'DisplayOrder','ProductName')
	 INSERT INTO @TBL_MainList(id,RowId)
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @TAb ,@AttributeCode,@localeId
	 
	 END 
	 ELSE 
	 BEGIN
	      
	 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
	 SET @order_by = REPLACE(@order_by,'DisplayOrder','ProductName')
	 INSERT INTO @TBL_MainList(id,RowId)
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @ProductListIdRTR ,@AttributeCode,@localeId 
	 END 
          

  			 INSERT INTO @PimProductIds ( Id  )
			 SELECT id FROM @TBL_MainList

			 DECLARE @TBL_PimProductIds transferId 
			 INSERT INTO @TBL_PimProductIds
			 SELECT id 
             FROM @PimProductIds
			 			 	
			 DECLARE @PimAttributeIds TransferId  
			 INSERT INTO @PimAttributeIds
			 SELECT PimAttributeId  
			 FROM [dbo].[Fn_GetProductGridAttributes]()
			 
			

			 INSERT INTO @TBL_AttributeDetails
             (PimProductId,
              AttributeValue,
              AttributeCode,
              PimAttributeId,
			  AttributeDefaultValue
             )
             EXEC Znode_GetProductsAttributeValue_newTesting
                  @TBL_PimProductIds,
                  @PimAttributeIds,
                  @localeId;
			
			UPDATE @TBL_AttributeDetails
			SET AttributeValue = ISNULL(AttributeValue,'')
			WHERE AttributeValue IS NULL 

----------------------------------------------------------------------------------------------------

			

		    declare @SKU SelectColumnList
			declare @TBL_Inventorydetails table (Quantity NVARCHAR(MAx),PimProductId INT)

			INSERT INTO @SKU
			SELECT AttributeValue 
			FROM @TBL_AttributeDetails
			WHERE AttributeCode = 'SKU'

			
			INSERT INTO @TBL_InventoryDetails(Quantity,PimProductId)
			EXEC Znode_GetPimProductAttributeInventory @SKU


			 INSERT INTO @FamilyDetails
             (PimAttributeFamilyId,
              PimProductId
             )
             EXEC [dbo].[Znode_GetPimProductAttributeFamilyId]
                  @PimProductIds,
                  1;
             
		 UPDATE a
               SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
                  INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                       AND LocaleId = @LocaleId);
             UPDATE a
               SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
                  INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                       AND LocaleId = @DefaultLocaleId)
             WHERE a.FamilyName IS NULL
                   OR a.FamilyName = '';
           	
			INSERT INTO @TBL_AttributeDetails             (PimProductId,              AttributeValue,              AttributeCode,              PimAttributeId             )
			SELECT PimProductId ,FamilyName, 'AttributeFamily',NULL
			FROM @FamilyDetails 
			
			INSERT INTO @TBL_AttributeDetails             (PimProductId,              AttributeValue,              AttributeCode,              PimAttributeId             )
			SELECT a.ID PimProductId ,th.DisplayName, 'PublishStatus',NULL
			FROM @PimProductIds a 
			INNER JOIN ZnodePimProduct b ON (b.PimProductId = a.ID)
			LEFT JOIN ZnodePublishState th ON (th.PublishStateId = b.PublishStateId)

	  INSERT INTO @TBL_AttributeDetailsLocale (PimProductId ,PimAttributeId,AttributeCode )
			SELECT  TBLAD.PimProductId ,TBLAD.PimAttributeId,TBLAD.AttributeCode 
			FROM @TBL_AttributeDetails TBLAD 
			GROUP BY  TBLAD.PimProductId ,TBLAD.PimAttributeId,TBLAD.AttributeCode 
       					

	    UPDATE TBLPP 
		SET AttributeValue = CTDD.AttributeValue 
		FROM  @TBL_AttributeDetails CTDD 
		INNER JOIN @TBL_AttributeDetailsLocale TBLPP ON (TBLPP.PimProductId = CTDD.PimProductId AND TBLPP.AttributeCode  = CTDD.AttributeCode)
		WHERE TBLPP.AttributeValue IS NULL 

    	SET @ProductXML =  '<MainProduct>'+ STUFF( (  SELECT '<Product>'+'<PimProductId>'+CAST(TBAD.PimProductId AS VARCHAR(50))+'</PimProductId>'
																		+'<AvailableInventory>'+CAST(ISNULL(IDD.[Quantity],'') AS VARCHAR(50))+'</AvailableInventory>'
		+ STUFF(    (  SELECT '<'+TBADI.AttributeCode+'>'+CAST( (SELECT  ''+TBADI.AttributeValue FOR XML PATH('')) AS NVARCHAR(max))+'</'+TBADI.AttributeCode+'>'   
															FROM @TBL_AttributeDetailsLocale TBADI      
															 WHERE TBADI.PimProductId = TBAD.PimProductId 
															 ORDER BY TBADI.PimProductId DESC
															 FOR XML PATH (''), TYPE
																).value('.', ' Nvarchar(max)'), 1, 0, '')+'</Product>'	   

		FROM @TBL_AttributeDetailsLocale TBAD
		INNER JOIN @TBL_MainList TBPI ON (TBAD.PimProductid = TBPI.id )
		LEFT JOIN @TBL_ProductIds TPT ON TBAD.PimProductId = TPT.PimProductId
		LEFT JOIN @TBL_InventoryDetails IDD ON (TBPI.id = IDD.PimProductId)
		GROUP BY TBAD.pimProductid, TPT.ModifiedDate,TBPI.RowId,IDD.Quantity
		ORDER BY TBPI.RowId 
		FOR XML PATH (''),TYPE).value('.', ' Nvarchar(max)'), 1, 0, '')+'</MainProduct>'
			--FOR XML PATH ('MainProduct'))


			SELECT  CAST(@ProductXML AS XML ) ProductXMl
		   
		     SELECT AttributeCode ,  ZPAL.AttributeName
			 FROM ZnodePimAttribute ZPA 
			 LEFT JOIN ZnodePiMAttributeLOcale ZPAL ON (ZPAL.PimAttributeId = ZPA.PimAttributeId )
             WHERE LocaleId = 1  
			 AND  IsCategory = 0 
			 AND ZPA.IsShowOnGrid = 1  
			 UNION ALL 
			 SELECT 'PublishStatus','Publish Status'

     IF EXISTS (SELECT Top 1 1 FROM @TAb )
	 BEGIN 

		  SELECT (SELECT COUNT(1) FROM @TAb) AS RowsCount   
	 END 
	 ELSE 
	 BEGIN
	 		  SELECT (SELECT COUNT(1) FROM @ProductListIdRTR) AS RowsCount   
	 END 
		;

             -- find the all locale values 
         END TRY
         BEGIN CATCH
		    SELECT ERROR_MESSAGE()
                DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ManageProductList_XML @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@LocaleId = '+CAST(@LocaleId AS VARCHAR(50))+',@PimProductId='+@PimProductId+',@IsProductNotIn='+CAST(@IsProductNotIn AS VARCHAR(50))+',@IsCallForAttribute='+CAST(@IsCallForAttribute AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_ManageProductList_XML',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;

         END CATCH;

     END;
	 GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportAttributes')
BEGIN 
	DROP PROCEDURE Znode_ImportAttributes
END
GO

CREATE PROCEDURE [dbo].[Znode_ImportAttributes](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @PimCatalogId int= 0)
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import Attribute Code Name and their default input validation rule other 
	--			  flag will be inserted as default we need to modify front end
	
	-- Unit Testing: 

	--------------------------------------------------------------------------------------
BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max);
		DECLARE @GetDate datetime= dbo.Fn_GetDate(), @LocaleId int  ;
		SELECT @LocaleId = DBO.Fn_GetDefaultLocaleId();
		-- Retrive RoundOff Value from global setting 
		DECLARE @InsertPimAtrribute TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, AttributeName varchar(300), AttributeCode varchar(300), AttributeType varchar(300), DisplayOrder int, GUID nvarchar(400)
		
		);
		DECLARE @InsertedPimAttributeIds TABLE (PimAttributeId int ,AttributeTypeId int,AttributeCode nvarchar(300))
		
		SET @SSQL = 'Select RowNumber,AttributeName,AttributeCode,AttributeType,DisplayOrder ,GUID FROM '+@TableName;
		INSERT INTO @InsertPimAtrribute( RowNumber,AttributeName,AttributeCode,AttributeType,DisplayOrder ,GUID)
		EXEC sys.sp_sqlexec @SSQL;


		--@MessageDisplay will use to display validate message for input inventory value  
		DECLARE @AttributeCode TABLE
		( 
		   AttributeCode nvarchar(300)
		);
		INSERT INTO @AttributeCode
			   SELECT AttributeCode
			   FROM ZnodePimAttribute 

		-- Start Functional Validation 
		-----------------------------------------------
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '10', 'AttributeCode', AttributeCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ii.AttributeCode in 
			   (
				   SELECT AttributeCode FROM @AttributeCode  where AttributeCode is not null 
			   );
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '53', 'AttributeCode', AttributeCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ii.AttributeCode in 
			   (
				   select AttributeCode  FROM @InsertPimAtrribute  Group BY AttributeCode  having count(*) > 1 
			   );

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '19', 'AttributeType', AttributeType, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ii.AttributeType NOT in 
			   (
				   SELECT AttributeTypeName  FROM ZnodeAttributeType  where IsPimAttributeType = 1 
			   );

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '50', 'AttributeCode', AttributeCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ltrim(rtrim(isnull(ii.AttributeCode,''))) like '%[^0-9A-Za-z]%'

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '50', 'AttributeCode', AttributeCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE Isnumeric(ltrim(rtrim(isnull(ii.AttributeCode,'')))) =1

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '35', 'AttributeCode', AttributeCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ltrim(rtrim(isnull(ii.AttributeCode,''))) like '% %' -----space not allowed

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			SELECT '17', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			FROM @InsertPimAtrribute AS ii
			WHERE (ii.DisplayOrder <> '' OR ii.DisplayOrder IS NOT NULL )AND  ii.DisplayOrder = 0

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '64', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE (ii.DisplayOrder <> '' OR ii.DisplayOrder IS NOT NULL )AND  ii.DisplayOrder > 999


		UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ Attribute - ' + ISNULL(AttributeCode,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN @InsertPimAtrribute IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL

		-- End Function Validation 	
		-----------------------------------------------
		-- Delete Invalid Data after functional validatin  
		DELETE FROM @InsertPimAtrribute
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
		);
		
		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM @InsertPimAtrribute
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount ,
		TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End


		--- Insert data into base table ZnodePimatrribute with their validation 

		INSERT INTO ZnodePimAttribute (AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable,IsSystemDefined
			,IsConfigurable,IsPersonalizable,IsShowOnGrid,DisplayOrder,HelpDescription,IsCategory,IsHidden,IsSwatch,
			CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		
		OUTPUT Inserted.PimAttributeId,Inserted.AttributeTypeId,Inserted.AttributeCode INTO @InsertedPimAttributeIds  
		
		SELECT ZAT.AttributeTypeId,AttributeCode, 0 IsRequired , 1 IsLocalizable,1 IsFilterable, 0 IsSystemDefined, 0 IsConfigurable,
		0 IsPersonalizable,  0 IsShowOnGrid , Case when Isnull(DisplayOrder,0) = 0 then  999 else DisplayOrder end  , '' HelpDescription ,0  IsCategory , 0 IsHidden , 0 IsSwatch,
		@UserId , @GetDate ,@UserId , @GetDate from @InsertPimAtrribute IPA INNER JOIN ZnodeAttributeType ZAT 
		ON IPA.AttributeType = ZAT.AttributeTypeName  
		
		
		INSERT INTO ZnodePimAttributeLocale (LocaleId,PimAttributeId,AttributeName,Description,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		Select @LocaleId ,IPAS.PimAttributeId, IPA.AttributeName, '', @UserId , @GetDate ,@UserId , @GetDate   
		 FROM @InsertedPimAttributeIds IPAS INNER JOIN @InsertPimAtrribute IPA ON IPAS.AttributeCode= IPA.AttributeCode 
		
		INSERT INTO ZnodePimAttributeValidation
		(PimAttributeId,InputValidationId,InputValidationRuleId,Name,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT IPA.PimAttributeId,ZAIV.InputValidationId,NULL,null , @UserId , @GetDate ,@UserId , @GetDate  
		FROM @InsertedPimAttributeIds IPA INNER JOIN ZnodeAttributeInputValidation ZAIV ON IPA.AttributeTypeId = ZAIV.AttributeTypeId


		insert into ZnodePimFrontendProperties (PimAttributeId,IsComparable,IsUseInSearch,IsHtmlTags,IsFacets,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		Select PimAttributeId, 0 IsComparable, 0 IsUseInSearch,0 IsHtmlTags,0 IsFacets, @UserId CreatedBy,@GetDate CreatedDate, @UserId ModifiedBy, @GetDate ModifiedDate
		from  @InsertedPimAttributeIds
		--      SET @Status = 1;

		UPDATE ZnodeImportProcessLog
		  SET STATUS = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = GETDATE()
		WHERE ImportProcessLogId = @ImportProcessLogId;
		COMMIT TRAN A;
	END TRY
	BEGIN CATCH

		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = GETDATE()
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN A;
	END CATCH;
END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportHighlight')
BEGIN 
	DROP PROCEDURE Znode_ImportHighlight
END
GO

CREATE PROCEDURE [dbo].[Znode_ImportHighlight](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @PimCatalogId int= 0)
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import Attribute Code Name and their default input validation rule other 
	--			  flag will be inserted as default we need to modify front end
	
	-- Unit Testing: 

	--------------------------------------------------------------------------------------
BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max);
		DECLARE @GetDate datetime= dbo.Fn_GetDate(), @LocaleId int  ;
		SELECT @LocaleId = DBO.Fn_GetDefaultLocaleId();
		-- Retrive RoundOff Value from global setting 
		DECLARE @InsertPimAtrribute TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY,
			RowNumber int, HighlightCode varchar(300), HighlightName varchar(1000),DisplayPopup varchar(300),Hyperlink varchar(1000),HighlightType varchar(300),IsActive varchar(100),DisplayOrder int,HighlightImage varchar(500),HighlightImagePath varchar(500), Description varchar(max), ShortDescription varchar(max), ImageAltTag varchar(400), GUID nvarchar(400)
		
		);
		DECLARE @InsertedPimAttributeIds TABLE (PimAttributeId int ,PimAttributeDefaultValueId int,AttributeDefaultValueCode nvarchar(300))
		
		SET @SSQL = 'Select RowNumber,HighlightCode, HighlightName,DisplayPopup,Hyperlink,HighlightType,IsActive,DisplayOrder,HighlightImage,HighlightImagePath,Description,ShortDescription,ImageAltTag ,GUID FROM '+@TableName;
		INSERT INTO @InsertPimAtrribute( RowNumber,HighlightCode, HighlightName,DisplayPopup,Hyperlink,HighlightType,IsActive,DisplayOrder,HighlightImage,HighlightImagePath,Description,ShortDescription,ImageAltTag ,GUID)
		EXEC sys.sp_sqlexec @SSQL;


		--@MessageDisplay will use to display validate message for input inventory value  
		DECLARE @HighlightAttributeDefaultCode TABLE
		( 
		   AttributeDefaultCode nvarchar(300)
		);
		INSERT INTO @HighlightAttributeDefaultCode
			   SELECT AttributeDefaultValueCode
			   FROM ZnodePimAttributeDefaultValue ZPADV
			   inner join ZnodePimAttribute ZPA on ZPADV.PimAttributeId = ZPA.PimAttributeId
			   where ZPA.AttributeCode = 'Highlights' 

		-- Start Functional Validation 
		-----------------------------------------------
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '9', 'HighlightCode', HighlightCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ii.HighlightCode not in 
			   (
				   SELECT AttributeDefaultCode FROM @HighlightAttributeDefaultCode 
			   );
		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '35', 'DisplayPopup', DisplayPopup, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM @InsertPimAtrribute AS ii  
			WHERE ii.DisplayPopup not in ('True','1','Yes','FALSE','0','No','')

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '35', 'IsActive', IsActive, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM @InsertPimAtrribute AS ii  
			WHERE ii.IsActive not in ('True','1','Yes','FALSE','0','No','')

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '19', 'HighlightType', HighlightType, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ii.HighlightType NOT in 
			   (
				   SELECT HT.Name  FROM ZnodeHighlightType  HT
			   );

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			SELECT '17', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			FROM @InsertPimAtrribute AS ii
			WHERE (ii.DisplayOrder <> '' OR ii.DisplayOrder IS NOT NULL ) AND  ii.DisplayOrder = 0

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			SELECT '64', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			FROM @InsertPimAtrribute AS ii
			WHERE (ii.DisplayOrder <> '' OR ii.DisplayOrder IS NOT NULL )AND  ii.DisplayOrder > 999

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '35', 'HighlightCode', HighlightCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ltrim(rtrim(isnull(ii.HighlightCode,''))) like '% %' 

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '53', 'HighlightCode', HighlightCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ii.HighlightCode in 
			   (
				   select HighlightCode  FROM @InsertPimAtrribute  Group BY HighlightCode  having count(*) > 1 
			   );

		UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ Highlight - ' + ISNULL(HighlightCode,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN @InsertPimAtrribute IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL


		-- End Function Validation 	
		-----------------------------------------------
		-- Delete Invalid Data after functional validatin  
		DELETE FROM @InsertPimAtrribute
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
		);
		
		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM @InsertPimAtrribute
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount ,
		TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
		WHERE ImportProcessLogId = @ImportProcessLogId;
		

		DECLARE @MediaId INT
		SET @MediaId = (SELECT TOP 1 MediaId from @InsertPimAtrribute IPA INNER JOIN ZnodeMedia ZM ON IPA.HighlightImage = ZM.FileName and IPA.HighlightImagePath = ZM.Path)

		if (isnull(@MediaId,0)=0)
			SET @MediaId = (SELECT max(MediaId) from @InsertPimAtrribute IPA INNER JOIN ZnodeMedia ZM ON IPA.HighlightImage = ZM.FileName)

		DECLARE @InsertedZnodeHighlight TABLE(HighlightId INT,HighlightCode VARCHAR(600)) 

			UPDATE ZH SET ZH.DisplayPopup = IPA.DisplayPopup, ZH.Hyperlink = IPA.Hyperlink, ZH.IsActive = case when IPA.IsActive in ('True','1','Yes') then 1 else 0 end,
			       ZH.DisplayOrder = IPA.DisplayOrder , ZH.ModifiedBy = @UserId, ZH.ModifiedDate = @GetDate 
			FROM @InsertPimAtrribute IPA 
			INNER JOIN ZnodeHighlightType ZHT on IPA.HighlightType = ZHT.Name
			INNER JOIN ZnodeHighlight ZH ON IPA.HighlightCode = ZH.HighlightCode and ZHT.HighlightTypeId = ZH.HighlightTypeId

			UPDATE ZHL SET ZHL.Name = IPA.HighlightName, ZHL.Description = IPA.Description, ZHL.ShortDescription = IPA.ShortDescription, ZHL.ImageAltTag = IPA.ImageAltTag
			       , ZHL.ModifiedBy = @UserId, ZHL.ModifiedDate = @GetDate 
			FROM @InsertPimAtrribute IPA 
			INNER JOIN ZnodeHighlightType ZHT on IPA.HighlightType = ZHT.Name
			INNER JOIN ZnodeHighlight ZH ON IPA.HighlightCode = ZH.HighlightCode and ZHT.HighlightTypeId = ZH.HighlightTypeId
			INNER JOIN ZnodeHighlightLocale ZHL  ON ZH.HighlightId = ZHL.HighlightId 

			INSERT INTO ZnodeHighlight (MediaId,HighlightCode,DisplayPopup,Hyperlink,HighlightTypeId,IsActive,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			OUTPUT Inserted.HighlightId,Inserted.HighlightCode INTO @InsertedZnodeHighlight
			SELECT DISTINCT @MediaId,IPA.HighlightCode, IPA.DisplayPopup , IPA.Hyperlink, ZHT.HighlightTypeId,
				   case when IPA.IsActive in ('True','1','Yes') then 1 else 0 end, Case when Isnull(IPA.DisplayOrder,0) = 0 then  999 else IPA.DisplayOrder end  , @UserId , @GetDate ,@UserId , @GetDate 
			FROM @InsertPimAtrribute IPA 
			INNER JOIN ZnodeHighlightType ZHT on IPA.HighlightType = ZHT.Name
			WHERE NOT EXISTS(select * from ZnodeHighlight ZH where ZH.HighlightCode = IPA.HighlightCode and ZH.HighlightTypeId = ZHT.HighlightTypeId)

			INSERT INTO ZnodeHighlightLocale(LocaleId,HighlightId,ImageAltTag,Name,Description,ShortDescription,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			SELECT DISTINCT @LocaleId, IZH.HighlightId, IPA.ImageAltTag, IPA.HighlightName, IPA.Description, IPA.ShortDescription, @UserId , @GetDate ,@UserId , @GetDate
			FROM @InsertPimAtrribute IPA 
			INNER JOIN @InsertedZnodeHighlight IZH on IPA.HighlightCode = IZH.HighlightCode 


		UPDATE ZnodeImportProcessLog
		  SET STATUS = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = Getdate()
		WHERE ImportProcessLogId = @ImportProcessLogId;
		COMMIT TRAN A;
	END TRY
	BEGIN CATCH

		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = Getdate()
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN A;
	END CATCH;
END;
GO

UPDATE ZnodeApplicationSetting 
SET Setting='<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>UserId</name>      <headertext>Checkbox</headertext>      <width>40</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>UserId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>UserName</name>      <headertext>Username</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>y</isallowlink>      <islinkactionurl>/Customer/CustomerEdit</islinkactionurl>      <islinkparamfield>UserId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>FullName</name>      <headertext>Full Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>y</isallowlink>      <islinkactionurl>/Customer/CustomerEdit</islinkactionurl>      <islinkparamfield>UserId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>Email</name>      <headertext>Email ID</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>AccountId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Email Id</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>PhoneNumber</name>      <headertext>Phone Number</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>AccountId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Phone Number</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>Accountname</name>      <headertext>Account</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>AccountId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Account</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>RoleName</name>      <headertext>Role Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>8</id>      <name>StoreName</name>      <headertext>Store Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>9</id>      <name>DepartmentName</name>      <headertext>Department Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>10</id>      <name>LastName</name>      <headertext>Last Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>y</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>AccountId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Last Name</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>11</id>      <name>IsLock</name>      <headertext>Is Lock</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>y</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>AccountId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Is Lock</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>12</id>      <name>CreatedDate</name>      <headertext>Created Date </headertext>      <width>60</width>      <datatype>Date</datatype>      <columntype>DateTime</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>13</id>      <name>CompanyName</name>      <headertext>Company Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>14</id>      <name>CityName</name>      <headertext>City</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>15</id>      <name>StateName</name>      <headertext>State</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>16</id>      <name>PostalCode</name>      <headertext>Postal Code</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>17</id>      <name>CountryName</name>      <headertext>Country</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>18</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>Manage|Disable|Delete</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>y</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>AccountId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Manage|Lock|Delete</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/Customer/CustomerEdit|/User/CustomerEnableDisableAccount|/User/CustomerDelete</manageactionurl>      <manageparamfield>UserId|UserId,IsLock|UserId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>grid-action</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>'
WHERE ItemName ='ZnodeCustomerAccount'

GO

UPDATE ZnodeApplicationSetting 
SET Setting='<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>UserId</name>      <headertext>Checkbox</headertext>      <width>40</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>UserId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>UserName</name>      <headertext>Username</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>y</isallowlink>      <islinkactionurl>/User/EditUser</islinkactionurl>      <islinkparamfield>UserId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>UserId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>FullName</name>      <headertext>Full Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>y</isallowlink>      <islinkactionurl>/User/EditUser</islinkactionurl>      <islinkparamfield>UserId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>UserId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>Email</name>      <headertext>Email ID</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>UserId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>UserId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Email Id</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>PhoneNumber</name>      <headertext>Phone Number</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>UserId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>UserId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Phone Number</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>RoleName</name>      <headertext>Role Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>UserId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>UserId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Full Name</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>Edit|Disable|Delete</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>UserId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>UserId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Edit|Lock|Delete</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/User/EditUser|/User/EnableDisableAccount|/User/DeleteUser</manageactionurl>      <manageparamfield>UserId|UserId,IsLock|UserId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>grid-action</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>8</id>      <name>LastName</name>      <headertext>Last Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>UserId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>UserId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Last Name</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>9</id>      <name>IsLock</name>      <headertext>Is Lock</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>UserId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>UserId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Is Lock</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>10</id>      <name>Edit</name>      <headertext>Edit</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Edit</displaytext>      <editactionurl>/Account/EditUser</editactionurl>      <editparamfield>Id</editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>11</id>      <name>Delete</name>      <headertext>Delete</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Delete</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>/Account/DeleteUser</deleteactionurl>      <deleteparamfield>UserId</deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>12</id>      <name>View</name>      <headertext>View</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>View</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>/Account/ManageUser</viewactionurl>      <viewparamfield>UserId</viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>'
WHERE ItemName ='ZnodeUser'

GO
UPDATE ZnodeApplicationSetting 
SET Setting='<?xml version="1.0" encoding="utf-16"?><columns><column><id>1</id><name>UserId</name><headertext>Checkbox</headertext><width>40</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>y</ischeckbox><checkboxparamfield>UserId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>3</id><name>FullName</name><headertext>Full Name</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield>AccountId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>AccountId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Full Name</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>6</id><name>UserName</name><headertext>Username</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield>AccountId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>AccountId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>User Name</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>5</id><name>Email</name><headertext>Email ID</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield>AccountId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>AccountId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Email Id</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>7</id><name>RoleName</name><headertext>Role Name</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield>AccountId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>AccountId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Phone Number</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>8</id><name>DepartmentName</name><headertext>Department</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield>AccountId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>AccountId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Phone Number</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>10</id><name>Manage</name><headertext>Pending Order History</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format>View</format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield>AccountId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>AccountId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>View</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl>/Account/AccountQuoteList</manageactionurl><manageparamfield>UserId,AccountId</manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class>grid-action</Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>11</id><name>Manage</name><headertext>Order History</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format>View</format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield>AccountId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>AccountId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>View</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl>/Account/AccountUserOrderList</manageactionurl><manageparamfield>UserId,AccountId</manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class>grid-action</Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>12</id><name>Manage</name><headertext>Action</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format>Edit|Disable|Delete</format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield>AccountId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>AccountId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Edit|Lock|Delete</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl>/Account/CustomerEdit|/Account/CustomerEnableDisableAccount|/Account/CustomerDelete</manageactionurl><manageparamfield>UserId,AccountId|AccountId,UserId,IsLock|UserId</manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class>grid-action</Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>13</id><name>LastName</name><headertext>Last Name</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>y</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield>AccountId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>AccountId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Last Name</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>14</id><name>IsLock</name><headertext>Is Lock</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>y</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield>AccountId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>AccountId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Is Lock</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>15</id><name>AccountId</name><headertext>User ID</headertext><width>40</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>y</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield>AccountId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>AccountId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Is Lock</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column></columns>'
WHERE ItemName ='ZnodeAccountsCustomer'

GO


insert into ZnodeApplicationSetting (GroupName,ItemName,Setting,ViewOptions,FrontPageName,FrontObjectName,IsCompressed,OrderByFields,ItemNameWithoutCurrency,CreatedByName,ModifiedByName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 
'Table',	'ZnodeGuestAccount',	'<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>UserId</name>      <headertext>Checkbox</headertext>      <width>40</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>UserId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>FullName</name>      <headertext>Full Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>y</isallowlink>      <islinkactionurl>/Customer/CustomerEdit</islinkactionurl>      <islinkparamfield>UserId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>Email</name>      <headertext>Email ID</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>AccountId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Email Id</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>RoleName</name>      <headertext>Role Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>StoreName</name>      <headertext>Store Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>DepartmentName</name>      <headertext>Department Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>LastName</name>      <headertext>Last Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>y</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>AccountId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Last Name</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>8</id>      <name>CreatedDate</name>      <headertext>Created Date </headertext>      <width>60</width>      <datatype>Date</datatype>      <columntype>DateTime</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>9</id>      <name>CompanyName</name>      <headertext>Company Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>10</id>      <name>CityName</name>      <headertext>City</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>11</id>      <name>StateName</name>      <headertext>State</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>12</id>      <name>PostalCode</name>      <headertext>Postal Code</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>13</id>      <name>CountryName</name>      <headertext>Country</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>14</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>Manage|Delete</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>y</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>AccountId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Manage|Delete</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/Customer/CustomerEdit|/User/CustomerDelete</manageactionurl>      <manageparamfield>UserId|UserId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>grid-action</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>',	
'ZnodeGuestAccount',	'ZnodeGuestAccount',	'ZnodeGuestAccount',	0,	NULL,	NULL,	NULL,	NULL,	2,	getdate(),	2	, getdate()
where not exists (select TOP 1 1 from ZnodeApplicationSetting where ItemName = 'ZnodeGuestAccount')

GO

UPDATE ZnodeApplicationSetting 
SET Setting='<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>UserId</name>      <headertext>Checkbox</headertext>      <width>40</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>UserId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>FullName</name>      <headertext>Full Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>y</isallowlink>      <islinkactionurl>/Customer/CustomerEdit</islinkactionurl>      <islinkparamfield>UserId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>Email</name>      <headertext>Email ID</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>AccountId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Email Id</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>RoleName</name>      <headertext>Role Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>StoreName</name>      <headertext>Store Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>DepartmentName</name>      <headertext>Department Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>LastName</name>      <headertext>Last Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>y</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>AccountId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Last Name</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>8</id>      <name>CreatedDate</name>      <headertext>Created Date </headertext>      <width>60</width>      <datatype>Date</datatype>      <columntype>DateTime</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>9</id>      <name>CompanyName</name>      <headertext>Company Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>10</id>      <name>CityName</name>      <headertext>City</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>11</id>      <name>StateName</name>      <headertext>State</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>12</id>      <name>PostalCode</name>      <headertext>Postal Code</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>13</id>      <name>CountryName</name>      <headertext>Country</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>14</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>Manage</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>y</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>AccountId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Manage</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/Customer/CustomerEdit</manageactionurl>      <manageparamfield>UserId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>grid-action</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>'
WHERE ItemName ='ZnodeGuestAccount'

GO
IF NOT EXISTS (SELECT TOP 1 1 FROM ZnodeMenu WHERE MenuName ='Guest User')
BEGIN 
INSERT INTO ZnodeMenu
(ParentMenuId,MenuName,MenuSequence,AreaName,ControllerName,ActionName,CSSClassName,IsActive,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT (SELECT MenuId FROM ZnodeMenu WHERE MenuName = 'Customers' AND ControllerName = 'Customer'),'Guest User',4,NULL,'Customer','GuestUserList','z-customers',1,2,getdate(),2,getdate()
WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeMenu WHERE MenuName = 'Guest User' AND ControllerName = 'Customer')
END

GO
Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Customer','GuestUserList',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Customer' and ActionName = 'GuestUserList')


insert into ZnodeActionMenu ( MenuId,	ActionId, CreatedBy ,CreatedDate,	ModifiedBy, ModifiedDate )
select 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Guest User' AND ControllerName = 'Customer')	
   ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Customer' and ActionName= 'GuestUserList') ,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
    (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Guest User' AND ControllerName = 'Customer') and ActionId = 
    (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Customer' and ActionName= 'GuestUserList'))

insert into ZnodeMenuActionsPermission ( MenuId, ActionId, AccessPermissionId,	CreatedBy ,CreatedDate,	ModifiedBy, ModifiedDate )
select 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Guest User' AND ControllerName = 'Customer'),
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Customer' and ActionName= 'GuestUserList')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Guest User' AND ControllerName = 'Customer') and ActionId = 
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Customer' and ActionName= 'GuestUserList'))

GO
IF NOT EXISTS(SELECT TOP 1 1 FROM ZnodeEmailTemplate WHERE TemplateName='ShopperToAdmin')
BEGIN
INSERT INTO ZnodeEmailTemplate (TemplateName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT 'ShopperToAdmin',2,GETUTCDATE(),2,GETUTCDATE()

INSERT INTO ZnodeEmailTemplateLocale(
EmailTemplateId,Subject,Descriptions,Content,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT (SELECT EmailTemplateId FROM ZnodeEmailTemplate Where TemplateName='ShopperToAdmin'),'Admin Application Access Rights',
'ShopperToAdmin','<!DOCTYPE html><html><body><div style="font-family: Arial, Helvetica; border: 1px solid black;">  <div style="background-color: #6074a6; font-size: 1.5em; font-weight: bold; padding-top: .5em; padding-bottom: .5em; padding-left: 1em; border-bottom: solid 1px #edffff; color: white;">&nbsp;Admin Application Access Rights</div>  <div style="padding: 1em;">  <div>Dear #DisplayName#,</div>  <br />  <div>Your account has been given the admin application access rights. You can login to the admin application using the link given below:-.<br /><br /></div>  <div style="overflow-wrap: break-word; width: 100%; display: inline-block;">#LogInUrl#</div>  <br />  <div>For any clarifications, please contact the customer service at </div> #ContactNo# <br /> <br />  <div>Thank you<br /> Store Admin</div>  </div>  </div></body></html>',
1,2,GETUTCDATE(),2,GETUTCDATE()

INSERT INTO ZnodeEmailTemplateAreas(
Name,Code,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT 'ShopperToAdmin','ShopperToAdmin',2,GETUTCDATE(),2,GETUTCDATE()

INSERT INTO ZnodeEmailTemplateMapper (
EmailTemplateId,PortalId,EmailTemplateAreasId,IsActive,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,IsEnableBcc)
SELECT (SELECT EmailTemplateId FROM ZnodeEmailTemplate Where TemplateName='ShopperToAdmin')EmailTemplateId,
1 PortalId,(SELECT EmailTemplateAreasId  FROM ZnodeEmailTemplateAreas WHERE Code='ShopperToAdmin')EmailTemplateAreasId,1 IsActive,
2,GETUTCDATE(),2,GETUTCDATE(),0 IsEnableBcc
END

GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_AdminUsers')
BEGIN 
	DROP PROCEDURE Znode_AdminUsers
END
GO

CREATE PROCEDURE [dbo].[Znode_AdminUsers]
(	@RoleName		VARCHAR(200),
    @UserName		VARCHAR(200),
    @WhereClause	VARCHAR(MAX)  = '',
    @Rows			INT           = 100,
    @PageNo			INT           = 1,
    @Order_By		VARCHAR(1000) = '',
    @RowCount		INT        = 0 OUT,
	@IsCallOnSite   BIT = 0 ,
	@PortalId		VARCHAR(1000) = 0,
	@IsGuestUser    BIT = 0 )
AS
   /* 
      Summary: List of users with detsils and shows link with ASPNet tables 
      This procedure is used for finding both users and admin users 
      here use three view "View_RoleUsers" for check  @UserName is present or not 
      "View_AdminUserDetail"  this view use for admin users 
      "View_CustomerUserDetail" Use for customer users 
      Unit Testing   
	  SELECT * FROM ZnodeUser 
      DECLARE @EDE INT=0  EXEC Znode_AdminUsers '','admin@znode.com',@WhereClause='',@Order_By='',@PageNo= 1 ,@Rows= 214,@IsCallOnSite='false',@PortalId=0,@RowCount=@EDE OUT  SELECT @EDE
   */
     BEGIN
         BEGIN TRY
            SET NOCOUNT ON;
			
            DECLARE @SQL NVARCHAR(MAX)= '', @PaginationWhereClause VARCHAR(300)= dbo.Fn_GetRowsForPagination(@PageNo, @Rows, ' WHERE RowId');
             
			IF @PortalId  <> '0' 
			BEGIN 
			    SET @WhereClause = CASE WHEN  @WhereClause = '' THEN ' (PortalId IN ('+@PortalId+') OR PortalId IS NULL) ' ELSE @WhereClause+' AND (PortalId IN ('+@PortalId+') OR PortalId IS NULL) ' END 
			END 
			IF EXISTS
            (
            SELECT TOP 1 1
            FROM View_RoleUsers
            WHERE Username = @UserName
            )
			-- this check for admin user
            AND @RoleName <> ''  

			BEGIN
				SET @SQL = ' 
				--;with Cte_AdminUserDetail AS 
				--(
					 
				SELECT  DISTINCT A.UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,A.CreatedBy,A.CreatedDate,A.ModifiedBy,A.ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId ,CustomerPaymentGUID
				INTO #Cte_AdminUserDetail
				FROM View_AdminUserDetail A
				'+CASE WHEN @PortalId  <> '0' THEN ' INNER JOIN ZnodeUserPortal ZUP ON (ZUP.UserId = A.UserId) 'ELSE '' END  +'	 
				'+dbo.Fn_GetWhereClause(@WhereClause, ' WHERE ')+'
				--),
				;with Cte_AdminUserDetailRowId AS 
				(
				SELECT UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId,CustomerPaymentGUID ,RANK()Over('+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC')+',UserId DESC) RowId
				FROM  #Cte_AdminUserDetail
				)
					 
				SELECT UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId,CustomerPaymentGUID ,RowId 
				INTO #AccountDetails
				FROM Cte_AdminUserDetailRowId 
					 
				SET @Count= ISNULL((SELECT  Count(1) FROM #AccountDetails ),0)
					 
				SELECT DISTINCT UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId ,CustomerPaymentGUID
				FROM #AccountDetails '+@PaginationWhereClause+' '+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC' );
			    PRINT @SQL
				EXEC SP_executesql
				@SQL,
				N'@Count INT OUT',
				@Count = @RowCount OUT;
			END;
			-- For Customer user
            ELSE   
      BEGIN
				IF @roleName = ''
				BEGIN
			
				SET @SQL = '
				
				SELECT DISTINCT UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
				EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,IsActive,IsLock,FullName,
				AccountName,PermissionsName,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId , ExternalId,
				BudgetAmount,AccountUserOrderApprovalId,ApprovalName,ApprovalUserId,PermissionCode,CustomerPaymentGUID ,StoreName,PortalId,
				CountryName, CityName, StateName, PostalCode, CompanyName
				INTO #Cte_CustomerUserDetail
				FROM View_CustomerUserAddDetail a 
				
				WHERE 
				(EXISTS   -- this will check for customer 
				(
				SELECT TOP 1 1
				FROM AspNetUserRoles AS b
				WHERE a.AspNetUserId = b.userid
				AND EXISTS
				(SELECT TOP 1 1	FROM AspNetRoles AS d	WHERE(d.TypeOfRole is NULL OR d.TypeOfRole = ''B2B'')	AND d.Id = b.RoleId	)   
				) OR AspNetuserId IS NULL OR '+CAST(CAST(@IsCallOnSite AS INT ) AS VARCHAR(50))+'= ''1'' ) 
				'+ case when @IsGuestUser = 1 THEN 'AND a.AspNetuserId IS NULL' ELSE 'AND a.AspNetuserId IS NOT NULL
				' END +dbo.Fn_GetWhereClause(@WhereClause, ' AND ')+' 
				
				;With Cte_CustomerUserDetailRowId  AS 
				(
				SELECT UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
				EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,IsActive,IsLock,FullName,
				AccountName,PermissionsName,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId , ExternalId,
				BudgetAmount,AccountUserOrderApprovalId,ApprovalName,ApprovalUserId,PermissionCode,CustomerPaymentGUID ,RANK()Over('+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC')+',UserId DESC) RowId ,StoreName,PortalId,
				CountryName, CityName, StateName, PostalCode, CompanyName
				FROM #Cte_CustomerUserDetail -- genrate the unique rowid 
				)
					 			 
				SELECT UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
				EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,IsActive,IsLock,FullName,
				AccountName,PermissionsName,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId , ExternalId,
				BudgetAmount,AccountUserOrderApprovalId,ApprovalName,ApprovalUserId,PermissionCode,CustomerPaymentGUID ,RowId,StoreName,PortalId,
				CountryName, CityName, StateName, PostalCode, CompanyName
				INTO #AccountDetail FROM Cte_CustomerUserDetailRowId  

				SET @Count= ISNULL((SELECT  Count(1) FROM #AccountDetail    ),0)

												  
				SELECT DISTINCT UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
				EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,IsActive,IsLock,FullName,
				AccountName,PermissionsName,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId , ExternalId,
				BudgetAmount,AccountUserOrderApprovalId,ApprovalName,ApprovalUserId,PermissionCode ,CustomerPaymentGUID,StoreName,PortalId,
				CountryName, CityName, StateName, PostalCode, CompanyName
				FROM #AccountDetail '+@PaginationWhereClause+' '+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC');
                PRINT @SQL    					
				EXEC SP_executesql
				@SQL,
				N'@Count INT OUT',
				@Count = @RowCount OUT;
				END;
            ELSE
				BEGIN
					SELECT * FROM View_CustomerUserDetail AS VICUD WHERE 1 = 0;
					SET @RowCount = 0;
				END;
            END;			
         END TRY
         BEGIN CATCH
            DECLARE @ERROR_PROCEDURE VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_AdminUsers @RoleName = '+@RoleName+' ,@UserName='+@UserName+',@WhereClause='+@WhereClause+' ,@Rows= '+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_By='+@Order_By+',@RowCount='+CAST(@RowCount AS VARCHAR(50));
            EXEC Znode_InsertProcedureErrorLog
            @ProcedureName    = 'Znode_AdminUsers',
            @ErrorInProcedure = @ERROR_PROCEDURE,
            @ErrorMessage     = @ErrorMessage,
            @ErrorLine        = @ErrorLine,
            @ErrorCall        = @ErrorCall;
         END CATCH;


     END;
	 GO	 
IF EXISTS (SELECT * FROM SYS.VIEWS WHERE NAME = 'View_CustomerUserAddDetail')
DROP VIEW View_CustomerUserAddDetail
go

CREATE   VIEW [dbo].[View_CustomerUserAddDetail]
AS
     SELECT a.userId,
            a.AspNetuserId,
            azu.UserName,
            a.FirstName,
            a.MiddleName,
            a.LastName,
            a.PhoneNumber,
            a.Email,
            a.EmailOptIn,
            a.CreatedBy,
            CONVERT( DATE, a.CreatedDate) CreatedDate,
            A.ModifiedBy,
            CONVERT( DATE, a.ModifiedDate) ModifiedDate,
            ur.RoleId,
            r.Name RoleName,
            CASE
                WHEN B.LockoutEndDateUtc IS NULL
                THEN CAST(1 AS    BIT)
                ELSE CAST(0 AS BIT)
            END IsActive,
            CAST(CASE WHEN ISNULL(LockoutEndDateUtc, 0) = 0 THEN  0 ELSE  1 END  AS    BIT) AS IsLock,
            (ISNULL(RTRIM(LTRIM(a.FirstName)), '')+' '+ISNULL(RTRIM(LTRIM(a.MiddleName)), '')+CASE
                                                                                                  WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '') = ''
                                                                                                  THEN ''
                                                                                                  ELSE ' '
                                                                                              END+ISNULL(RTRIM(LTRIM(a.LastName)), '')) FullName,
            e.Name AccountName,
            h.PermissionsName,
            j.DepartmentName,
            i.DepartmentId,
            a.AccountId,
            f.AccountPermissionAccessId,
            a.ExternalId,
            CASE
                WHEN a.AccountId IS NULL
                THEN 0
                ELSE 1
            END IsAccountCustomer,
            a.BudgetAmount,
            ZAUOA.AccountUserOrderApprovalId,
            (ISNULL(RTRIM(LTRIM(ZU.FirstName)), '')+' '+ISNULL(RTRIM(LTRIM(ZU.MiddleName)), '')+CASE
                                                                                                    WHEN ISNULL(RTRIM(LTRIM(ZU.MiddleName)), '') = ''
                                                                                                    THEN ''
                                                                                                    ELSE ' '
                                                                                                END+ISNULL(RTRIM(LTRIM(ZU.LastName)), '')) ApprovalName,
            ZAUOA.ApprovalUserId,
            h.PermissionCode,
            CASE
                WHEN a.AccountId IS NULL
                THEN up.PortalId
                ELSE ZPA.PortalId
            END PortalId
			,r.TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser
			,a.CustomerPaymentGUID
			,CASE WHEN zp.StoreName IS NULL THEN 'ALL' ELSE zp.StoreName END StoreName
			,
			Case when a.AccountId  is not null then ZAA.CountryName else ZA.CountryName end CountryName ,
			Case when a.AccountId  is not null then ZAA.CityName else ZA.CityName end CityName ,
			Case when a.AccountId  is not null then ZAA.StateName else ZA.StateName end StateName ,
			Case when a.AccountId  is not null then ZAA.PostalCode else ZA.PostalCode end PostalCode ,
			Case when a.AccountId  is not null then ZAA.CompanyName else ZA.CompanyName end CompanyName 
     FROM ZnodeUser a
          left JOIN ASPNetUsers B ON(a.AspNetuserId = b.Id)
          LEFT JOIN ZnodeAccount e ON(e.AccountId = a.AccountId)
          LEFT JOIN AspNetUserRoles ur ON(ur.UserId = a.AspNetUserId)
          LEFT JOIN AspNetRoles r ON(r.Id = ur.RoleId)
          LEFT JOIN ZnodeDepartmentUser i ON(i.UserId = a.UserId)
          LEFT JOIN ZnodeDepartment j ON(j.DepartmentId = i.DepartmentId)
          LEFT JOIN ZnodeAccountUserPermission f ON(f.UserId = a.UserId)
          LEFT JOIN ZnodeAccountPermissionAccess g ON(g.AccountPermissionAccessId = f.AccountPermissionAccessId)
          LEFT JOIN ZnodeAccessPermission h ON(h.AccessPermissionId = g.AccessPermissionId)
          LEFT JOIN ZnodeAccountUserOrderApproval ZAUOA ON a.UserId = ZAUOA.UserID
          LEFT JOIN ZnodeUser ZU ON(ZU.UserId = ZAUOA.ApprovalUserId)
          LEFT JOIN ZnodeUserPortal up ON(up.UserId = a.UserId)
                                          
          LEFT JOIN ZnodePortalAccount ZPA ON(ZPA.AccountId = a.AccountId)
                                
          LEFT JOIN AspNetZnodeUser azu ON(azu.AspNetZnodeUserId = b.UserName)
	      LEFT JOIN ZnodePortal zp ON (up.PortalId = zp.PortalId)
		  LEFT JOIN ZnodeAddress ZA on ZA.AddressId 
				in (Select AddressId from  ZnodeUserAddress ZUA where a.UserId = ZUA.UserId)  and ZA.IsDefaultBilling =  1
		  LEFT JOIN ZnodeAddress ZAA on ZAA.AddressId 
				in (Select AddressId from  ZnodeAccountAddress ZUAA where a.AccountId = ZUAA.AccountId) and ZAA.IsDefaultBilling = 1 
	
	  WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeUSer ZUQ WHERE ZUQ.UserId = a.UserId AND ZUQ.EmailOptIn = 1 AND ZUQ.AspNetUserId IS NULL )
	
	GO
IF NOT EXISTS (SELECT * FROM sys.tables where name = 'ZnodePortalCustomCss')
BEGIN
CREATE TABLE [dbo].[ZnodePortalCustomCss] (
    [PortalCustomCssId]  INT            IDENTITY (1, 1) NOT NULL,
    [PortalId]           INT            NOT NULL,
    [DynamicCssStyle]    NVARCHAR (MAX) NULL,
    [WYSIWYGFormatStyle] NVARCHAR (MAX) NULL,
    [IsActive]           BIT            CONSTRAINT [DF_ZnodePortalCustomCss_IsActive] DEFAULT ((1)) NOT NULL,
    [PublishStateId]     TINYINT        CONSTRAINT [DF_ZnodePortalCustomCss_PublishStateId] DEFAULT ((1)) NOT NULL,
    [CreatedBy]          INT            NOT NULL,
    [CreatedDate]        DATETIME       NOT NULL,
    [ModifiedBy]         INT            NOT NULL,
    [ModifiedDate]       DATETIME       NOT NULL,
    CONSTRAINT [PK_ZnodePortalCustomCss] PRIMARY KEY CLUSTERED ([PortalCustomCssId] ASC),
    CONSTRAINT [FK_ZnodePortalCustomCss_ZnodePortal] FOREIGN KEY ([PortalId]) REFERENCES [dbo].[ZnodePortal] ([PortalId])
);

END
GO
UPDATE ZnodeApplicationSetting 
SET Setting='<?xml version="1.0" encoding="utf-16"?> <columns>  <column>   <id>1</id>   <name>PortalId</name>   <headertext>Checkbox</headertext>   <width>40</width>   <datatype>Int32</datatype>   <columntype>Int32</columntype>   <allowsorting>true</allowsorting>   <allowpaging>false</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>y</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>2</id>   <name>StoreCode</name>   <headertext>Store Code</headertext>   <width>60</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>500</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>y</iscontrol>   <controltype>Text</controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>3</id>   <name>StoreName</name>   <headertext>Store Name</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>false</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>y</isallowlink>   <islinkactionurl>/Store/UpdateStore</islinkactionurl>   <islinkparamfield>StoreCode</islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield>PortalId</checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>4</id>   <name>CompanyName</name>   <headertext>Brand</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield>PortalId</islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield>PortalId</checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext>Brand</displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>5</id>   <name>PublishStatus</name>   <headertext>Publish Status</headertext>   <width>60</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>500</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>y</iscontrol>   <controltype>Text</controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>6</id>   <name>CatalogName</name>   <headertext>Catalog Name</headertext>   <width>60</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>n</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>500</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>y</iscontrol>   <controltype>Text</controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>7</id>   <name>ThemeName</name>   <headertext>Theme Name</headertext>   <width>60</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>n</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>500</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>y</iscontrol>   <controltype>Text</controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>8</id>   <name>CSSName</name>   <headertext>CSS Name</headertext>   <width>60</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>n</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>500</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>y</iscontrol>   <controltype>Text</controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>9</id>   <name>Manage</name>   <headertext>Action</headertext>   <width>50</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>false</allowsorting>   <allowpaging>true</allowpaging>   <format>Manage|Preview|Copy|Publish|View|Delete</format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>y</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>y</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield>StoreCode</islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield>Id</checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext>Manage|Preview|Copy|Publish|Publish History|Delete</displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl>/Store/UpdateStore||/Store/CopyStore|/Store/PublishStoreSetting|/Store/GetPortalPublishStatus|/Store/DeleteStoreByStoreCode</manageactionurl>   <manageparamfield>StoreCode|DomainUrl|PortalId|PortalId|PortalId,UrlEncodedStoreName|StoreCode</manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column> </columns>'
WHERE ItemName ='Znodestore'

GO

insert into ZnodeApplicationSetting (GroupName,ItemName,Setting,ViewOptions,FrontPageName,FrontObjectName,IsCompressed,OrderByFields,ItemNameWithoutCurrency,CreatedByName,ModifiedByName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 
'Table',	'ZnodeStoreExperience',	'<?xml version="1.0" encoding="utf-16"?> <columns>  <column>   <id>1</id>   <name>PortalId</name>   <headertext>Checkbox</headertext>   <width>40</width>   <datatype>Int32</datatype>   <columntype>Int32</columntype>   <allowsorting>true</allowsorting>   <allowpaging>false</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>y</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>2</id>   <name>StoreCode</name>   <headertext>Store Code</headertext>   <width>60</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>500</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>y</iscontrol>   <controltype>Text</controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>3</id>   <name>StoreName</name>   <headertext>Store Name</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>false</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>y</isallowlink>   <islinkactionurl>/Store/UpdateStore</islinkactionurl>   <islinkparamfield>StoreCode</islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield>PortalId</checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>4</id>   <name>CompanyName</name>   <headertext>Brand</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield>PortalId</islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield>PortalId</checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext>Brand</displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>5</id>   <name>PublishStatus</name>   <headertext>Publish Status</headertext>   <width>60</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>500</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>y</iscontrol>   <controltype>Text</controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>7</id>   <name>ThemeName</name>   <headertext>Theme Name</headertext>   <width>60</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>n</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>500</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>y</iscontrol>   <controltype>Text</controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>8</id>   <name>CSSName</name>   <headertext>CSS Name</headertext>   <width>60</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>n</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>500</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>y</iscontrol>   <controltype>Text</controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>9</id>   <name>Manage</name>   <headertext>Action</headertext>   <width>50</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>false</allowsorting>   <allowpaging>true</allowpaging>   <format>Manage|Publish</format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>y</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>y</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield>StoreCode</islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield>Id</checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext>Manage|Publish</displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl>/StoreExperience/StoreSetting|/StoreExperience/PublishStoreSetting</manageactionurl>   <manageparamfield>PortalId|PortalId</manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column> </columns>',	
'ZnodeStoreExperience',	'ZnodeStoreExperience',	'ZnodeStoreExperience',	0,NULL,	NULL,	NULL,	NULL,	2,	getdate(),	2	, getdate()
where not exists (select TOP 1 1 from ZnodeApplicationSetting where ItemName = 'ZnodeStoreExperience')

GO
UPDATE ZnodeApplicationSetting 
SET Setting='<?xml version="1.0" encoding="utf-16"?> <columns>  <column>   <id>1</id>   <name>PortalId</name>   <headertext>Checkbox</headertext>   <width>40</width>   <datatype>Int32</datatype>   <columntype>Int32</columntype>   <allowsorting>true</allowsorting>   <allowpaging>false</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>y</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>2</id>   <name>StoreCode</name>   <headertext>Store Code</headertext>   <width>60</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>500</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>y</iscontrol>   <controltype>Text</controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>3</id>   <name>StoreName</name>   <headertext>Store Name</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>false</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>y</isallowlink>   <islinkactionurl>StoreSetting</islinkactionurl>   <islinkparamfield>PortalId</islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield>PortalId</checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>4</id>   <name>CompanyName</name>   <headertext>Brand</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield>PortalId</islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield>PortalId</checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext>Brand</displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>5</id>   <name>PublishStatus</name>   <headertext>Publish Status</headertext>   <width>60</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>500</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>y</iscontrol>   <controltype>Text</controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>6</id>   <name>ThemeName</name>   <headertext>Theme Name</headertext>   <width>60</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>n</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>500</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>y</iscontrol>   <controltype>Text</controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>7</id>   <name>CSSName</name>   <headertext>CSS Name</headertext>   <width>60</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>n</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>500</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>y</iscontrol>   <controltype>Text</controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>8</id>   <name>Manage</name>   <headertext>Action</headertext>   <width>50</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>false</allowsorting>   <allowpaging>true</allowpaging>   <format>Manage|Publish</format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>y</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>y</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield>StoreCode</islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield>Id</checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext>Manage|Publish</displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl>/StoreExperience/StoreSetting|/StoreExperience/PublishStoreSetting</manageactionurl>   <manageparamfield>PortalId|PortalId</manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column> </columns>'
WHERE ItemName ='ZnodeStoreExperience'

GO
IF NOT EXISTS (SELECT TOP 1 1 FROM ZnodeMenu WHERE MenuName ='Store Experience')
BEGIN 
INSERT INTO ZnodeMenu
(ParentMenuId,MenuName,MenuSequence,AreaName,ControllerName,ActionName,CSSClassName,IsActive,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT (SELECT MenuId FROM ZnodeMenu WHERE MenuName = 'CMS' AND ControllerName = 'Content'),'Store Experience',1,NULL,'StoreExperience','list','z-displaysettings',1,2,getdate(),2,getdate()
WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeMenu WHERE MenuName = 'Store Experience' AND ControllerName = 'StoreExperience')
END

GO

UPDATE ZnodeMenu
SET MenuSequence =2
WHERE MenuName = 'Pages' AND ControllerName = 'Content'
GO
Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'StoreExperience','StoreSetting',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'StoreExperience' and ActionName = 'StoreSetting')


insert into ZnodeActionMenu ( MenuId,	ActionId, CreatedBy ,CreatedDate,	ModifiedBy, ModifiedDate )
select 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'CMS' AND ControllerName = 'Content')	
   ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'StoreExperience' and ActionName= 'StoreSetting') ,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
    (select TOP 1 MenuId from ZnodeMenu where MenuName = 'CMS' AND ControllerName = 'Content') and ActionId = 
    (select TOP 1 ActionId from ZnodeActions where ControllerName = 'StoreExperience' and ActionName= 'StoreSetting'))

insert into ZnodeMenuActionsPermission ( MenuId, ActionId, AccessPermissionId,	CreatedBy ,CreatedDate,	ModifiedBy, ModifiedDate )
select 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'CMS' AND ControllerName = 'Content'),
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'StoreExperience' and ActionName= 'StoreSetting')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'CMS' AND ControllerName = 'Content') and ActionId = 
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'StoreExperience' and ActionName= 'StoreSetting'))

GO

insert into ZnodeActionMenu ( MenuId,	ActionId, CreatedBy ,CreatedDate,	ModifiedBy, ModifiedDate )
select 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Store Experience' AND ControllerName = 'StoreExperience')	
   ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'StoreExperience' and ActionName= 'StoreSetting') ,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
    (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Store Experience' AND ControllerName = 'StoreExperience') and ActionId = 
    (select TOP 1 ActionId from ZnodeActions where ControllerName = 'StoreExperience' and ActionName= 'StoreSetting'))

insert into ZnodeMenuActionsPermission ( MenuId, ActionId, AccessPermissionId,	CreatedBy ,CreatedDate,	ModifiedBy, ModifiedDate )
select 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Store Experience' AND ControllerName = 'StoreExperience'),
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'StoreExperience' and ActionName= 'StoreSetting')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Store Experience' AND ControllerName = 'StoreExperience') and ActionId = 
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'StoreExperience' and ActionName= 'StoreSetting'))

GO
--------------------

update zam
set MenuId = (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Store Experience' AND ControllerName = 'StoreExperience')
from ZnodeActionMenu zam
where ActionId = (select TOP 1 ActionId from ZnodeActions where ControllerName = 'WebSite' and ActionName= 'ManageCMSWidgetSliderBanner') 
AND MenuId = 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store')

GO
update zam
set MenuId = (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Store Experience' AND ControllerName = 'StoreExperience')
from ZnodeActionMenu zam
where ActionId = (select TOP 1 ActionId from ZnodeActions where ControllerName = 'WebSite' and ActionName= 'GetAssociatedProductList') 
AND MenuId = 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store')
GO
update zam
set MenuId = (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Store Experience' AND ControllerName = 'StoreExperience')
from ZnodeActionMenu zam
where ActionId = (select TOP 1 ActionId from ZnodeActions where ControllerName = 'WebSite' and ActionName= 'GetAssociatedCategoryList') 
AND MenuId = 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store')

GO

update zam
set MenuId = (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Store Experience' AND ControllerName = 'StoreExperience')
from ZnodeActionMenu zam
where ActionId = (select TOP 1 ActionId from ZnodeActions where ControllerName = 'WebSite' and ActionName= 'GetAssociatedBrandList') 
AND MenuId = 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store')

update zam
set MenuId = (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Store Experience' AND ControllerName = 'StoreExperience')
from ZnodeActionMenu zam
where ActionId = (select TOP 1 ActionId from ZnodeActions where ControllerName = 'WebSite' and ActionName= 'GetLinkWidgetConfigurationList') 
AND MenuId = 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store')

GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_DeletePortalByPortalId')
BEGIN 
	DROP PROCEDURE Znode_DeletePortalByPortalId
END
GO
CREATE PROCEDURE [dbo].[Znode_DeletePortalByPortalId]
(
	 @PortalId	varchar(2000) = '' ,
	 @StoreCode varchar(2000) = '',
	 @Status	bit OUT
)
AS
	/*
	 Summary : This Procedure Is Used to delete the all records of portal if order is not place against portal  
	 --Unit Testing   
	 BEGIN TRANSACTION 
	 DECLARE @Status    BIT = 0
	 EXEC Znode_DeletePortalByPortalId @PortalId = '1,7,8', @Status   = @Status   OUT
	 SELECT @Status   
	 ROLLBACK TRANSACTION

	*/
BEGIN
	BEGIN TRAN DeletePortalByPortalId;
	BEGIN TRY
		SET NOCOUNT ON;

		--SET @PortalId = (SELECT PortalId FROM ZnodePortal ZP  )

		DECLARE @TBL_PortalIds TABLE
		( 
								 PortalId int
		);
		DECLARE @TBL_Promotion TABLE
		( 
								 PromotionId int
		);
		DECLARE @TBL_DeletedUsers TABLE (AspNetUserId NVARCHAR(1000))

		DECLARE @TBL_DeletedZnodeUsers TABLE (UserId NVARCHAR(1000))

		DECLARE @DeletedIds varchar(max)= '';
		-- inserting PortalIds which are not present in Order and Quote

		
		INSERT INTO @TBL_PortalIds 
		SELECT PortalId FROM ZnodePortal ZP
		WHERE CASE WHEN @StoreCode = '' THEN CAST(PortalId AS NVARCHAR(2000)) ELSE StoreCode END IN (

		SELECT Item FROM dbo.Split( CASE WHEN @StoreCode = '' THEN @PortalId ELSE @StoreCode END, ',' ) AS SP ) 
		AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodeOmsOrderDetails AS ZOD WHERE ZOD.PortalId = ZP.PortalId) 
		--AND  NOT EXISTS (SELECT TOP 1 1 FROM ZnodeOmsQuote AS ZOQ WHERE ZOQ.PortalId = ZP.PortalId );

		
		--END
		--select * from @TBL_PortalIds
		DELETE FROM dbo.ZnodeRobotsTxt WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeRobotsTxt.PortalId)

		DELETE FROM dbo.ZnodePortalPixelTracking WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalPixelTracking.PortalId)

		DELETE ZOH
		FROM ZnodeOmsQuotePersonalizeItem ZOH
		INNER JOIN ZnodeOmsQuoteLineItem ZOM ON ZOH.OmsQuoteLineItemId = ZOM.OmsQuoteLineItemId
		WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeOmsQuote ZOQ  
										WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZOQ.PortalId) AND ZOQ.OmsQuoteId = ZOM.OmsQuoteId )

		DELETE ZOH
		FROM ZnodeOmsHistory ZOH
		INNER JOIN ZnodeOmsNotes ZOM ON ZOH.OmsNotesId = ZOM.OmsNotesId
		WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeOmsQuote ZOQ  
										WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZOQ.PortalId) AND ZOQ.OmsQuoteId = ZOM.OmsQuoteId )

		DELETE FROM ZnodeOmsQuoteLineItem WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeOmsQuote ZOQ  
										WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZOQ.PortalId) AND ZOQ.OmsQuoteId = ZnodeOmsQuoteLineItem.OmsQuoteId )

		DELETE FROM ZnodeOmsNotes WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeOmsQuote ZOQ  
																	WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZOQ.PortalId) AND ZOQ.OmsQuoteId = ZnodeOmsNotes.OmsQuoteId )

		DELETE FROM ZnodeOmsQuote WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeOmsQuote.PortalId);

	     DELETE FROM  ZnodeCustomPortalDetail  WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCustomPortalDetail.PortalId);
	     DELETE FROM  ZnodeSupplier WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeSupplier.PortalId)

	     DELETE FROM  ZnodeOmsTemplateLineItem  WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP INNER JOIN ZnodeOmsTemplate ZOT ON 
	     TBP.PortalId = ZOT.PortalId AND ZOT.OmsTemplateId = ZnodeOmsTemplateLineItem.OmsTemplateId);

	     DELETE FROM ZnodeOmsTemplate WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeOmsTemplate.PortalId);
	     DELETE FROM  ZnodeOmsUsersReferralUrl WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeOmsUsersReferralUrl.PortalId)

		DELETE FROM ZnodePortalShipping WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalShipping.PortalId);
		DELETE FROM ZnodePortalTaxClass WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalTaxClass.PortalId);
		DELETE FROM ZnodePortalPaymentSetting WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalPaymentSetting.PortalId);
		DELETE FROM ZnodeCMSPortalMessageKeyTag WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSPortalMessageKeyTag.PortalId);
		DELETE FROM ZnodePortalProfile WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalProfile.PortalId);
		DELETE FROM ZnodePortalFeatureMapper WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalFeatureMapper.PortalId);
		DELETE FROM ZnodePortalShippingDetails WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalShippingDetails.PortalId);
		DELETE FROM ZnodePortalUnit WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalUnit.PortalId);
		DELETE FROM ZnodeDomain WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeDomain.PortalId);
		DELETE FROM ZnodePortalSmtpSetting WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalSmtpSetting.PortalId);
		DELETE FROM ZnodeActivityLog WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeActivityLog.PortalId);
		DELETE FROM ZnodePortalCatalog WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalCatalog.PortalId );
		DELETE FROM ZnodeCMSPortalMessage  WHERE EXISTS  ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSPortalMessage.PortalId );
		--DELETE FROM ZnodeTaxRule WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeTaxRule.PortalId);
		DELETE FROM ZnodeGoogleTagManager WHERE  EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeGoogleTagManager.PortalId);
		DELETE FROM ZnodeTaxRuleTypes WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeTaxRuleTypes.PortalId);
		DELETE FROM ZnodeCMSContentPagesProfile WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeCMSContentPages ZCCP  
																	WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZCCP.PortalId) AND ZCCP.CMSContentPagesId = ZnodeCMSContentPagesProfile.CMSContentPagesId )
		DELETE FROM ZnodeCMSContentPageGroupMapping WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeCMSContentPages ZCCP  
																	WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZCCP.PortalId) AND ZCCP.CMSContentPagesId = ZnodeCMSContentPageGroupMapping.CMSContentPagesId )
	     DELETE FROM ZnodeCMSContentPagesLocale WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeCMSContentPages ZCCP  
																	WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZCCP.PortalId) AND ZCCP.CMSContentPagesId = ZnodeCMSContentPagesLocale.CMSContentPagesId )
		DELETE FROM ZnodeFormWidgetEmailConfiguration WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeCMSContentPages ZCCP  
																	WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZCCP.PortalId) AND ZCCP.CMSContentPagesId = ZnodeFormWidgetEmailConfiguration.CMSContentPagesId )
		DELETE FROM ZnodeCMSContentPages WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSContentPages.PortalId);
		
		 DELETE FROM ZnodeCaseRequestHistory WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeCaseRequest ZCR  
			WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZCR.PortalId) AND ZCR.CaseRequestId = ZnodeCaseRequestHistory.CaseRequestId )

		 DELETE FROM ZnodeNote WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeCaseRequest ZCR  
			WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZCR.PortalId) AND ZCR.CaseRequestId = ZnodeNote.CaseRequestId )
		
		DELETE FROM ZnodeCaseRequest WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCaseRequest.PortalId);
		DELETE FROM ZnodePortalLocale WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalLocale.PortalId);
		DELETE FROM ZnodeShippingPortal WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeShippingPortal.PortalId);
		DELETE FROM ZnodePortalDisplaySetting WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalDisplaySetting.PortalId);
		DELETE FROM ZnodeUserPortal WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeUserPortal.PortalId);
		DELETE FROM AspNetZnodeUser OUTPUT DELETED.AspNetZnodeUserId   INTO @TBL_DeletedUsers WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = AspNetZnodeUser.PortalId )
		
	  

		DELETE FROM ZnodePortalAlternateWarehouse WHERE EXISTS ( SELECT TOP 1 1 FROM ZnodePortalWareHouse AS ZPWH WHERE EXISTS (
				SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZPWH.PortalId ) AND  ZPWH.PortalWarehouseId = ZnodePortalAlternateWarehouse.PortalWarehouseId);
		DELETE FROM ZnodePortalWareHouse WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalWareHouse.PortalId);
		DELETE ZnodePriceListPortal WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePriceListPortal.PortalId );
		
		DELETE FROM ZnodeEmailTemplateMapper WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeEmailTemplateMapper.PortalId);
		DELETE FROM ZnodeGiftCard WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeGiftCard.PortalId );
		DELETE FROM ZnodeCMSPortalProductPage WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSPortalProductPage.PortalId);

		DELETE FROM ZnodeCMSPortalSEOSetting WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSPortalSEOSetting.PortalId);

		DELETE FROM ZnodeCMSPortalTheme WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSPortalTheme.PortalId);

		DELETE FROM ZnodeCMSSEODetailLocale WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP INNER JOIN ZnodeCMSSEODetail AS zcsd ON TBP.PortalId = zcsd.PortalId WHERE zcsd.CMSSEODetailId = ZnodeCMSSEODetailLocale.CMSSEODetailId);

		DELETE FROM ZnodeCMSSEODetail WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSSEODetail.PortalId);
		DELETE FROM ZnodePortalAccount WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalAccount.PortalId);

		DELETE FROM ZnodePortalAddress WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalAddress.PortalId);

		DELETE FROM ZnodeOmsCookieMapping WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeOmsCookieMapping.PortalId);

		DELETE FROM ZnodePortalCountry WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalCountry.PortalId);

		DELETE FROM ZnodeCMSUrlRedirect WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSUrlRedirect.PortalId);

		DELETE FROM ZnodePortalCustomCss WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalCustomCss.PortalId);
		   
		/* Remove Search index */
		--DELETE FROM ZnodeSearchIndexServerStatus WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP INNER JOIN ZnodePortalIndex AS zpi ON TBP.PortalId = zpi.PortalId
		--		 INNER JOIN ZnodeSearchIndexMonitor AS zsim ON zpi.PortalIndexId = zsim.PortalIndexId WHERE zsim.SearchIndexMonitorId = ZnodeSearchIndexServerStatus.SearchIndexMonitorId);
		--DELETE FROM ZnodeSearchIndexMonitor WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP INNER JOIN ZnodePortalIndex AS zpi ON TBP.PortalId = zpi.PortalId WHERE zpi.PortalIndexId = ZnodeSearchIndexMonitor.PortalIndexId );
		--DELETE FROM ZnodePortalIndex WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalIndex.PortalId);
		/* Remove Search index */
		DELETE FROM ZnodePromotion WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePromotion.PortalId);
		DELETE FROM ZnodeTaxPortaL  WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeTaxPortaL.PortalId);

		INSERT INTO @TBL_Promotion( PromotionId ) SELECT PromotionId FROM ZnodePromotion WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePromotion.PortalId);
		DELETE FROM ZnodePromotionProduct WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_Promotion AS TBP WHERE TBP.PromotionId = ZnodePromotionProduct.PromotionId);

		DELETE FROM ZnodePromotionCategory WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_Promotion AS TBP WHERE TBP.PromotionId = ZnodePromotionCategory.PromotionId);
		DELETE FROM ZnodePromotionCatalogs WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_Promotion AS TBP WHERE TBP.PromotionId = ZnodePromotionCatalogs.PromotionId);
		DELETE FROM ZnodePromotion WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_Promotion AS TBP WHERE TBP.PromotionId = ZnodePromotion.PromotionId);

		
		DELETE FROM ZnodeBlogNewsLocale where exists (select top 1 1 from ZnodeBlogNews ZBN
													where EXISTS (SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZBN.PortalId) AND ZBN.BlogNewsId = ZnodeBlogNewsLocale.BlogNewsId )



		DELETE FROM ZnodeBlogNewsCommentLocale where exists (select top 1 1 from ZnodeBlogNewsComment ZBC
													where exists (select top 1 1 from ZnodeBlogNews ZBN
														where exists (select top 1 1 from @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZBN.PortalId) AND ZBN.BlogNewsId = ZBC.BlogNewsId ) and ZBC.BlogNewsCommentId = ZnodeBlogNewsCommentLocale.BlogNewsCommentId)
													



		DELETE FROM ZnodeBlogNewsComment WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeBlogNews ZBN
													WHERE EXISTS (select top 1 1 from @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZBN.PortalId) AND ZBN.BlogNewsId = ZnodeBlogNewsComment.BlogNewsId )



		DELETE FROM ZnodeBlogNews WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeBlogNews.PortalId)

		DELETE ZFBGAVL
		FROM ZnodeFormBuilderGlobalAttributeValueLocale ZFBGAVL
		INNER JOIN ZnodeFormBuilderGlobalAttributeValue ZFBGAV ON ZFBGAVL.FormBuilderGlobalAttributeValueId = ZFBGAV.FormBuilderGlobalAttributeValueId
		WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeFormBuilderSubmit ZFBS
														WHERE EXISTS (select top 1 1 from @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZFBS.PortalId) AND ZFBS.FormBuilderSubmitId = ZFBGAV.FormBuilderSubmitId )


		DELETE FROM ZnodeFormBuilderGlobalAttributeValue WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeFormBuilderSubmit ZFBS
														WHERE EXISTS (select top 1 1 from @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZFBS.PortalId) AND ZFBS.FormBuilderSubmitId = ZnodeFormBuilderGlobalAttributeValue.FormBuilderSubmitId )

	DELETE FROM ZnodeFormBuilderSubmit WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeFormBuilderSubmit.PortalId)

		DELETE FROM ZnodeCaseRequestHistory WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeCaseRequest ZCR  
	WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZCR.PortalId) AND ZCR.CaseRequestId = ZnodeCaseRequestHistory.CaseRequestId )

		DELETE FROM ZnodeNote WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeCaseRequest ZCR  
	WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZCR.PortalId) AND ZCR.CaseRequestId = ZnodeNote.CaseRequestId )

	DECLARE @DeleteUserId VARCHAR(MAX)
	  SET @DeleteUserId = SUBSTRING((SELECT TOP 100 ','+CAST(UserId AS VARCHAR(2000)) FROM ZnodeUser WHERE EXISTS 
					(SELECT TOP 1 1 FROM AspNetUsers ANU WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_DeletedUsers TBDU WHERE ANU.UserName = TBDU.AspNetUserId) AND ZnodeUser.AspNetUserId = ANU.Id) 
					FOR XML PATH('')), 2, 4000);

	
	    EXEC Znode_DeleteUserDetails @UserId = @DeleteUserId, @Status = 0,  @IsCallInternal = 1 

		
		DELETE FROM ZnodePortal WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortal.PortalId);
		
		
			IF (SELECT Count(1) FROM @TBL_PortalIds) = (SELECT Count(1) FROM dbo.Split( CASE WHEN @StoreCode = '' THEN @PortalId ELSE @StoreCode END, ',' ) )	 	
			BEGIN 		
			SELECT 1 AS ID, CAST(1 AS bit) AS Status;
			SET @Status = 1;
			END
		 
		ELSE 
			BEGIN 
			SELECT 0 AS ID, CAST(0 AS bit) AS Status;
			SET @Status = 0;
			END 
		
		

		COMMIT TRAN DeletePortalByPortalId;
	END TRY
	BEGIN CATCH
	
		 
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_DeletePortalByPortalId @PortalId = '+ISNULL(@PortalId,'''''')+',@StoreCode = '+ISNULL(@StoreCode,'''''')+',@Status='+ISNULL(CAST(@Status AS VARCHAR(10)),'''');
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		     ROLLBACK TRAN DeletePortalByPortalId;
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_DeletePortalByPortalId',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
	END CATCH;
END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_DeletePortalByStoreCode')
BEGIN 
	DROP PROCEDURE Znode_DeletePortalByStoreCode
END
GO
CREATE  PROCEDURE [dbo].[Znode_DeletePortalByStoreCode]
(
	 @PortalId	varchar(2000)
	,@Status	bit OUT)
AS
	/*
	 Summary : This Procedure Is Used to delete the all records of portal if order is not place against portal  
	 --Unit Testing   
	 BEGIN TRANSACTION 
	 DECLARE @Status    BIT = 0
	 EXEC Znode_DeletePortalByPortalId @PortalId = 36, @Status   = @Status   OUT
	 SELECT @Status   
	 ROLLBACK TRANSACTION
	*/
BEGIN
	BEGIN TRAN DeletePortalByPortalId;
	BEGIN TRY
		SET NOCOUNT ON;
		DECLARE @TBL_PortalIds TABLE
		( 
								 PortalId int
		);
		DECLARE @TBL_Promotion TABLE
		( 
								 PromotionId int
		);
		DECLARE @TBL_DeletedUsers TABLE (AspNetUserId NVARCHAR(1000))

		DECLARE @DeletedIds varchar(max)= '';
		-- inserting PortalIds which are not present in Order and Quote

		INSERT INTO @TBL_PortalIds 
		SELECT Item FROM dbo.Split( @PortalId, ',' ) AS SP 
		WHERE NOT EXISTS ( SELECT TOP 1 1 FROM ZnodeOmsOrderDetails AS ZOD WHERE ZOD.PortalId = Sp.Item) 
		AND  NOT EXISTS (SELECT TOP 1 1 FROM ZnodeOmsQuote AS ZOQ WHERE ZOQ.PortalId = Sp.Item );


	     DELETE FROM  ZnodeCustomPortalDetail  WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCustomPortalDetail.PortalId);
	     DELETE FROM  ZnodeSupplier WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeSupplier.PortalId)

	     DELETE FROM  ZnodeOmsTemplateLineItem  WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP INNER JOIN ZnodeOmsTemplate ZOT ON 
	     TBP.PortalId = ZOT.PortalId AND ZOT.OmsTemplateId = ZnodeOmsTemplateLineItem.OmsTemplateId);

	     DELETE FROM ZnodeOmsTemplate WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeOmsTemplate.PortalId);
	     DELETE FROM  ZnodeOmsUsersReferralUrl WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeOmsUsersReferralUrl.PortalId)

		DELETE FROM ZnodePortalShipping WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalShipping.PortalId);
		DELETE FROM ZnodePortalTaxClass WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalTaxClass.PortalId);
		DELETE FROM ZnodePortalPaymentSetting WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalPaymentSetting.PortalId);
		DELETE FROM ZnodeCMSPortalMessageKeyTag WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSPortalMessageKeyTag.PortalId);
		DELETE FROM ZnodePortalProfile WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalProfile.PortalId);
		DELETE FROM ZnodePortalFeatureMapper WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalFeatureMapper.PortalId);
		DELETE FROM ZnodePortalShippingDetails WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalShippingDetails.PortalId);
		DELETE FROM ZnodePortalUnit WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalUnit.PortalId);
		DELETE FROM ZnodeDomain WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeDomain.PortalId);
		DELETE FROM ZnodePortalSmtpSetting WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalSmtpSetting.PortalId);
		DELETE FROM ZnodeActivityLog WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeActivityLog.PortalId);
		DELETE FROM ZnodePortalCatalog WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalCatalog.PortalId );
		DELETE FROM ZnodeCMSPortalMessage  WHERE EXISTS  ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSPortalMessage.PortalId );
		--DELETE FROM ZnodeTaxRule WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeTaxRule.PortalId);
		DELETE FROM ZnodeGoogleTagManager WHERE  EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeGoogleTagManager.PortalId);
		DELETE FROM ZnodeTaxRuleTypes WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeTaxRuleTypes.PortalId);
		DELETE FROM ZnodeCMSContentPagesProfile WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeCMSContentPages ZCCP  
																	WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZCCP.PortalId) AND ZCCP.CMSContentPagesId = ZnodeCMSContentPagesProfile.CMSContentPagesId )
		DELETE FROM ZnodeCMSContentPageGroupMapping WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeCMSContentPages ZCCP  
																	WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZCCP.PortalId) AND ZCCP.CMSContentPagesId = ZnodeCMSContentPageGroupMapping.CMSContentPagesId )
	     DELETE FROM ZnodeCMSContentPagesLocale WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeCMSContentPages ZCCP  
																	WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZCCP.PortalId) AND ZCCP.CMSContentPagesId = ZnodeCMSContentPagesLocale.CMSContentPagesId )
		DELETE FROM ZnodeCMSContentPages WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSContentPages.PortalId);
		DELETE FROM ZnodeCaseRequest WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCaseRequest.PortalId);
		DELETE FROM ZnodePortalLocale WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalLocale.PortalId);
		DELETE FROM ZnodeShippingPortal WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeShippingPortal.PortalId);
		DELETE FROM ZnodePortalDisplaySetting WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalDisplaySetting.PortalId);
		DELETE FROM ZnodeUserPortal WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeUserPortal.PortalId);
		DELETE FROM AspNetZnodeUser OUTPUT DELETED.AspNetZnodeUserId   INTO @TBL_DeletedUsers WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = AspNetZnodeUser.PortalId )
		
		DELETE FROM ZnodePortalAlternateWarehouse WHERE EXISTS ( SELECT TOP 1 1 FROM ZnodePortalWareHouse AS ZPWH WHERE EXISTS (
				SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZPWH.PortalId ) AND  ZPWH.PortalWarehouseId = ZnodePortalAlternateWarehouse.PortalWarehouseId);
		DELETE FROM ZnodePortalWareHouse WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalWareHouse.PortalId);
		DELETE ZnodePriceListPortal WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePriceListPortal.PortalId );
		
		DELETE FROM ZnodeEmailTemplateMapper WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeEmailTemplateMapper.PortalId);
		DELETE FROM ZnodeGiftCard WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeGiftCard.PortalId );
		DELETE FROM ZnodeCMSPortalProductPage WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSPortalProductPage.PortalId);

		DELETE FROM ZnodeCMSPortalSEOSetting WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSPortalSEOSetting.PortalId);

		DELETE FROM ZnodeCMSPortalTheme WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSPortalTheme.PortalId);

		DELETE FROM ZnodeCMSSEODetailLocale WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP INNER JOIN ZnodeCMSSEODetail AS zcsd ON TBP.PortalId = zcsd.PortalId WHERE zcsd.CMSSEODetailId = ZnodeCMSSEODetailLocale.CMSSEODetailId);

		DELETE FROM ZnodeCMSSEODetail WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSSEODetail.PortalId);
		DELETE FROM ZnodePortalAccount WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalAccount.PortalId);

		DELETE FROM ZnodePortalAddress WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalAddress.PortalId);

		DELETE FROM ZnodeOmsCookieMapping WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeOmsCookieMapping.PortalId);

		DELETE FROM ZnodePortalCountry WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalCountry.PortalId);

		DELETE FROM ZnodeCMSUrlRedirect WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSUrlRedirect.PortalId);

		DELETE FROM ZnodePortalCustomCss WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalCustomCss.PortalId);
		   
		/* Remove Search index */
		--DELETE FROM ZnodeSearchIndexServerStatus WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP INNER JOIN ZnodePortalIndex AS zpi ON TBP.PortalId = zpi.PortalId
		--		 INNER JOIN ZnodeSearchIndexMonitor AS zsim ON zpi.PortalIndexId = zsim.PortalIndexId WHERE zsim.SearchIndexMonitorId = ZnodeSearchIndexServerStatus.SearchIndexMonitorId);
		--DELETE FROM ZnodeSearchIndexMonitor WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP INNER JOIN ZnodePortalIndex AS zpi ON TBP.PortalId = zpi.PortalId WHERE zpi.PortalIndexId = ZnodeSearchIndexMonitor.PortalIndexId );
		--DELETE FROM ZnodePortalIndex WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalIndex.PortalId);
		/* Remove Search index */
		DELETE FROM ZnodePromotion WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePromotion.PortalId);
		DELETE FROM ZnodeTaxPortaL  WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeTaxPortaL.PortalId);

		INSERT INTO @TBL_Promotion( PromotionId ) SELECT PromotionId FROM ZnodePromotion WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePromotion.PortalId);
		DELETE FROM ZnodePromotionProduct WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_Promotion AS TBP WHERE TBP.PromotionId = ZnodePromotionProduct.PromotionId);

		DELETE FROM ZnodePromotionCategory WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_Promotion AS TBP WHERE TBP.PromotionId = ZnodePromotionCategory.PromotionId);
		DELETE FROM ZnodePromotionCatalogs WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_Promotion AS TBP WHERE TBP.PromotionId = ZnodePromotionCatalogs.PromotionId);
		DELETE FROM ZnodePromotion WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_Promotion AS TBP WHERE TBP.PromotionId = ZnodePromotion.PromotionId);

		
		DELETE FROM ZnodeBlogNewsLocale where exists (select top 1 1 from ZnodeBlogNews ZBN
													where EXISTS (SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZBN.PortalId) AND ZBN.BlogNewsId = ZnodeBlogNewsLocale.BlogNewsId )



		DELETE FROM ZnodeBlogNewsCommentLocale where exists (select top 1 1 from ZnodeBlogNewsComment ZBC
													where exists (select top 1 1 from ZnodeBlogNews ZBN
														where exists (select top 1 1 from @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZBN.PortalId) AND ZBN.BlogNewsId = ZBC.BlogNewsId ) and ZBC.BlogNewsCommentId = ZnodeBlogNewsCommentLocale.BlogNewsCommentId)
													



		DELETE FROM ZnodeBlogNewsComment WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeBlogNews ZBN
													WHERE EXISTS (select top 1 1 from @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZBN.PortalId) AND ZBN.BlogNewsId = ZnodeBlogNewsComment.BlogNewsId )



		DELETE FROM ZnodeBlogNews WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeBlogNews.PortalId)

		DELETE FROM ZnodePortal WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortal.PortalId);

		IF (SELECT Count(1) FROM @TBL_PortalIds) = (SELECT Count(1) FROM dbo.Split( @PortalId, ',' ) )
		BEGIN 
		SELECT 1 AS ID, CAST(1 AS bit) AS Status;
		SET @Status = 1;
		END 
		ELSE 
		BEGIN 
		SELECT 0 AS ID, CAST(0 AS bit) AS Status;
		SET @Status = 0;

		END 
		COMMIT TRAN DeletePortalByPortalId;
	END TRY
	BEGIN CATCH
		 
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_DeletePortalByPortalId @PortalId = '+@PortalId+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		     ROLLBACK TRAN DeletePortalByPortalId;
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_DeletePortalByPortalId',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
	END CATCH;
END;

GO

IF NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimAttribute  where AttributeCode in ('GalleryImages') )
BEGIN

INSERT INTO ZnodePimAttribute (AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable,IsSystemDefined
,IsConfigurable,IsPersonalizable,IsShowOnGrid,DisplayOrder,HelpDescription,IsCategory,IsHidden,IsSwatch,
CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)	
 	
SELECT (select top 1 AttributeTypeId from ZnodeAttributeType ATT WHERE AttributeTypeName ='Image' ),'GalleryImages', 0 IsRequired , 0 IsLocalizable,1 IsFilterable, 1 IsSystemDefined, 0 IsConfigurable,
0 IsPersonalizable,  0 IsShowOnGrid , 999  , '' HelpDescription ,0  IsCategory , 0 IsHidden , null,
2 , getdate() ,2 , getdate() 
 
			
INSERT INTO ZnodePimAttributeLocale (LocaleId,PimAttributeId,AttributeName,Description,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
Select 1 ,(SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute where AttributeCode in ('GalleryImages'))
, 'Gallery Images', NULL, 2 , getdate() ,2 , getdate()    
 
		
INSERT INTO ZnodePimAttributeValidation
(PimAttributeId,InputValidationId,InputValidationRuleId,Name,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT (SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute where AttributeCode in ('GalleryImages'))
,ZAIV.InputValidationId,ZAIVR.InputValidationRuleId,null , 2 , getdate() ,2 , getdate()
FROM ZnodeAttributeInputValidation ZAIV 
INNER JOIN ZnodeAttributeInputValidationRule ZAIVR ON(ZAIVR.InputValidationId = ZAIV.InputValidationId )
WHERE  ZAIV.AttributeTypeId  = (select top 1 AttributeTypeId from ZnodeAttributeType WHERE AttributeTypeName = 'Image')

insert into ZnodePimFrontendProperties (PimAttributeId,IsComparable,IsUseInSearch,IsHtmlTags,IsFacets,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
Select (SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute where AttributeCode in ('GalleryImages'))
, 0 IsComparable, 0 IsUseInSearch,0 IsHtmlTags,0 IsFacets, 2 , getdate() ,2 , getdate()

END
GO
Update ZnodePimAttribute SET IsSystemDefined=1 where AttributeCode in ('GalleryImages')

GO

IF NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimAttribute  where AttributeCode in ('FreeShipping') )
BEGIN

INSERT INTO ZnodePimAttribute (AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable,IsSystemDefined
,IsConfigurable,IsPersonalizable,IsShowOnGrid,DisplayOrder,HelpDescription,IsCategory,IsHidden,IsSwatch,
CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)	
SELECT (select top 1 AttributeTypeId from ZnodeAttributeType ATT WHERE AttributeTypeName ='Yes/No' ),'FreeShipping', 0 IsRequired , 0 IsLocalizable,1 IsFilterable, 1 IsSystemDefined, 0 IsConfigurable,
0 IsPersonalizable,  0 IsShowOnGrid , 999  , 'Enable free shipping for this product. All other shipping rules will be ignored.' ,0  IsCategory , 0 IsHidden , null,
2 , getdate() ,2 , getdate() 
 
INSERT INTO ZnodePimAttributeLocale (LocaleId,PimAttributeId,AttributeName,Description,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
Select 1 ,(SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute where AttributeCode in ('FreeShipping'))
, 'Free Shipping', NULL, 2 , getdate() ,2 , getdate()    
 		
INSERT INTO ZnodePimAttributeValidation
(PimAttributeId,InputValidationId,InputValidationRuleId,Name,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT (SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute where AttributeCode in ('FreeShipping'))
,ZAIV.InputValidationId,ZAIVR.InputValidationRuleId,null , 2 , getdate() ,2 , getdate()
FROM ZnodeAttributeInputValidation ZAIV 
INNER JOIN ZnodeAttributeInputValidationRule ZAIVR ON(ZAIVR.InputValidationId = ZAIV.InputValidationId )
WHERE  ZAIV.AttributeTypeId  = (select top 1 AttributeTypeId from ZnodeAttributeType WHERE AttributeTypeName = 'Yes/No')

insert into ZnodePimFrontendProperties (PimAttributeId,IsComparable,IsUseInSearch,IsHtmlTags,IsFacets,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
Select (SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute where AttributeCode in ('FreeShipping'))
, 0 IsComparable, 0 IsUseInSearch,0 IsHtmlTags,0 IsFacets, 2 , getdate() ,2 , getdate()

END
GO
Update ZnodePimAttribute SET IsSystemDefined=1 where AttributeCode in ('FreeShipping')

GO

IF NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimAttribute  where AttributeCode in ('ShippingCostRules') )
BEGIN

INSERT INTO ZnodePimAttribute (AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable,IsSystemDefined
,IsConfigurable,IsPersonalizable,IsShowOnGrid,DisplayOrder,HelpDescription,IsCategory,IsHidden,IsSwatch,
CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)	
SELECT (select top 1 AttributeTypeId from ZnodeAttributeType ATT WHERE AttributeTypeName ='Simple Select' ),'ShippingCostRules', 0 IsRequired , 0 IsLocalizable,1 IsFilterable, 1 IsSystemDefined, 0 IsConfigurable,
0 IsPersonalizable,  0 IsShowOnGrid , 999  , '' ,0  IsCategory , 0 IsHidden , null,
2 , getdate() ,2 , getdate() 
 
INSERT INTO ZnodePimAttributeLocale (LocaleId,PimAttributeId,AttributeName,Description,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
Select 1 ,(SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute where AttributeCode in ('ShippingCostRules'))
, 'Shipping Cost', NULL, 2 , getdate() ,2 , getdate()    
 		
INSERT INTO ZnodePimAttributeValidation
(PimAttributeId,InputValidationId,InputValidationRuleId,Name,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT (SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute where AttributeCode in ('ShippingCostRules'))
,ZAIV.InputValidationId,ZAIVR.InputValidationRuleId,null , 2 , getdate() ,2 , getdate()
FROM ZnodeAttributeInputValidation ZAIV 
INNER JOIN ZnodeAttributeInputValidationRule ZAIVR ON(ZAIVR.InputValidationId = ZAIV.InputValidationId )
WHERE  ZAIV.AttributeTypeId  = (select top 1 AttributeTypeId from ZnodeAttributeType WHERE AttributeTypeName = 'Simple Select')

insert into ZnodePimFrontendProperties (PimAttributeId,IsComparable,IsUseInSearch,IsHtmlTags,IsFacets,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
Select (SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute where AttributeCode in ('ShippingCostRules'))
, 0 IsComparable, 0 IsUseInSearch,0 IsHtmlTags,0 IsFacets, 2 , getdate() ,2 , getdate()

END
GO
Update ZnodePimAttribute SET IsSystemDefined=1 where AttributeCode in ('ShippingCostRules')

GO
IF NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimAttribute  where AttributeCode in ('ShippingInformation') )
BEGIN

INSERT INTO ZnodePimAttribute (AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable,IsSystemDefined
,IsConfigurable,IsPersonalizable,IsShowOnGrid,DisplayOrder,HelpDescription,IsCategory,IsHidden,IsSwatch,
CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)	
SELECT (select top 1 AttributeTypeId from ZnodeAttributeType ATT WHERE AttributeTypeName ='Text Area' ),'ShippingInformation', 0 IsRequired , 0 IsLocalizable,1 IsFilterable, 1 IsSystemDefined, 0 IsConfigurable,
0 IsPersonalizable,  0 IsShowOnGrid , 999  , 'Enter information about shipping methods and shipping time for this product. Leave blank to disable this tab.' ,0  IsCategory , 0 IsHidden , null,
2 , getdate() ,2 , getdate() 
 
INSERT INTO ZnodePimAttributeLocale (LocaleId,PimAttributeId,AttributeName,Description,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
Select 1 ,(SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute where AttributeCode in ('ShippingInformation'))
, 'Shipping Information', NULL, 2 , getdate() ,2 , getdate()    
 		
INSERT INTO ZnodePimAttributeValidation
(PimAttributeId,InputValidationId,InputValidationRuleId,Name,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT (SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute where AttributeCode in ('ShippingInformation'))
,ZAIV.InputValidationId,ZAIVR.InputValidationRuleId,null , 2 , getdate() ,2 , getdate()
FROM ZnodeAttributeInputValidation ZAIV 
INNER JOIN ZnodeAttributeInputValidationRule ZAIVR ON(ZAIVR.InputValidationId = ZAIV.InputValidationId )
WHERE  ZAIV.AttributeTypeId  = (select top 1 AttributeTypeId from ZnodeAttributeType WHERE AttributeTypeName = 'Text Area')

insert into ZnodePimFrontendProperties (PimAttributeId,IsComparable,IsUseInSearch,IsHtmlTags,IsFacets,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
Select (SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute where AttributeCode in ('ShippingInformation'))
, 0 IsComparable, 0 IsUseInSearch,0 IsHtmlTags,0 IsFacets, 2 , getdate() ,2 , getdate()

END
GO
Update ZnodePimAttribute SET IsSystemDefined=1 where AttributeCode in ('ShippingInformation')

GO
IF NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimAttribute  where AttributeCode in ('ShipSeparately') )
BEGIN

INSERT INTO ZnodePimAttribute (AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable,IsSystemDefined
,IsConfigurable,IsPersonalizable,IsShowOnGrid,DisplayOrder,HelpDescription,IsCategory,IsHidden,IsSwatch,
CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)	
SELECT (select top 1 AttributeTypeId from ZnodeAttributeType ATT WHERE AttributeTypeName ='Yes/No' ),'ShipSeparately', 0 IsRequired , 0 IsLocalizable,1 IsFilterable, 1 IsSystemDefined, 0 IsConfigurable,
0 IsPersonalizable,  0 IsShowOnGrid , 999  , '' ,0  IsCategory , 0 IsHidden , null,
2 , getdate() ,2 , getdate() 
 
INSERT INTO ZnodePimAttributeLocale (LocaleId,PimAttributeId,AttributeName,Description,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
Select 1 ,(SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute where AttributeCode in ('ShipSeparately'))
, 'Ship Separately', NULL, 2 , getdate() ,2 , getdate()    
 		
INSERT INTO ZnodePimAttributeValidation
(PimAttributeId,InputValidationId,InputValidationRuleId,Name,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT (SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute where AttributeCode in ('ShipSeparately'))
,ZAIV.InputValidationId,ZAIVR.InputValidationRuleId,null , 2 , getdate() ,2 , getdate()
FROM ZnodeAttributeInputValidation ZAIV 
INNER JOIN ZnodeAttributeInputValidationRule ZAIVR ON(ZAIVR.InputValidationId = ZAIV.InputValidationId )
WHERE  ZAIV.AttributeTypeId  = (select top 1 AttributeTypeId from ZnodeAttributeType WHERE AttributeTypeName = 'Yes/No')

insert into ZnodePimFrontendProperties (PimAttributeId,IsComparable,IsUseInSearch,IsHtmlTags,IsFacets,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
Select (SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute where AttributeCode in ('ShipSeparately'))
, 0 IsComparable, 0 IsUseInSearch,0 IsHtmlTags,0 IsFacets, 2 , getdate() ,2 , getdate()

END
GO
Update ZnodePimAttribute SET IsSystemDefined=1 where AttributeCode in ('ShipSeparately')

GO
IF NOT EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeUserWishList' AND COLUMN_NAME = 'AddOnSKUs')
BEGIN 
ALTER TABLE [dbo].[ZnodeUserWishList]
    ADD [AddOnSKUs] NVARCHAR (1000) NULL;
END

GO
IF NOT EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeCMSPortalTheme' AND COLUMN_NAME = 'WebsiteDescription')
BEGIN 
ALTER TABLE [dbo].[ZnodeCMSPortalTheme]
    ADD [WebsiteDescription] NVARCHAR (MAX) NULL;
END

GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_CopyPortal')
BEGIN 
	DROP PROCEDURE Znode_CopyPortal
END
GO
    
CREATE PROCEDURE [dbo].[Znode_CopyPortal]    
(    
   @PortalId int,     
   @StoreName varchar(500),    
   @CompanyName varchar(500),     
   @UserId int,    
   @StoreCode nvarchar(200),    
   @Status bit OUT)    
AS    
    /*    
     
 Summary: Create copy of existing portal    
 Copy all corresponding data into following list of tables Catalog,Profile,Units,Countries,Shipping,Locale,SMTP    
    
 ZnodeTaxClass ZnodeTaxClassPortal;ZnodeTaxRuleTypes ZnodeCaseRequest,ZnodeUserPortal ZnodeDomain,AspNetZnodeUser ZnodePortalAccount,    
 ZnodePortal ZnodePortalAddress,ZnodePortalCatalog ZnodePortalLocale,ZnodePortalFeatureMapper, ZnodeOmsUsersReferralUrl,ZnodePortalProfile ,ZnodePortalSetting    
 ZnodePortalShippingDetails ZnodePortalSmtpSetting,ZnodePortalWarehouse ,ZnodeOmsCookieMapping,ZnodePortalUnit ,ZnodePromotion,    
 ZnodePriceListPortal ,ZnodeActivityLog,ZnodeShippingPortal,ZnodeGiftCard ,ZnodeCMSContentPages,ZnodePortalDisplaySetting ,ZnodeCMSPortalMessage,    
 ZnodeCMSPortalProductPage ,ZnodeCMSPortalSEOSetting ,ZnodeCMSPortalTheme    
        
 Unit Testing       
    ------------------------------------------------------------------------------    
               
    begin tran    
    DECLARE @Status  bit     
       EXEC Znode_CopyPortal @PortalId =2 ,@StoreName  ='copy OF Maxwells FF' , @CompanyName = 'copy OF Maxwells FF' ,@UserId = 2, @StoreCode = '',@Status = @Status OUT     
       rollback tran    
    select @Status    
       SELECT * FROM dbo.ZnodePortal zp WHERE zp.CompanyName = 'copy OF Maxwells FF'    
       SELECT * FROM ZnodePortalCatalog WHERE dbo.ZnodePortalCatalog.PortalId IN (SELECT portalid FROM dbo.ZnodePortal zp  WHERE zp.CompanyName = 'copy OF Maxwells FF')    
       SELECT * FROM ZnodePortalProfile WHERE dbo.ZnodePortalProfile.PortalId IN (SELECT portalid FROM dbo.ZnodePortal zp  WHERE zp.CompanyName = 'copy OF Maxwells FF')    
       SELECT * FROM ZnodePortalUnit WHERE dbo.ZnodePortalUnit.PortalId IN (SELECT portalid FROM dbo.ZnodePortal zp  WHERE zp.CompanyName = 'copy OF Maxwells FF')    
       SELECT * FROM ZnodePortalCountry WHERE dbo.ZnodePortalCountry.PortalId IN (SELECT portalid FROM dbo.ZnodePortal zp  WHERE zp.CompanyName = 'copy OF Maxwells FF')    
       SELECT * FROM ZnodePortalShippingDetails WHERE dbo.ZnodePortalShippingDetails.PortalId IN (SELECT portalid FROM dbo.ZnodePortal zp  WHERE zp.CompanyName = 'copy OF Maxwells FF')    
       SELECT * FROM ZnodePortalLocale WHERE dbo.ZnodePortalLocale.PortalId IN (SELECT portalid FROM dbo.ZnodePortal zp  WHERE zp.CompanyName = 'copy OF Maxwells FF')    
       SELECT * FROM ZnodePortalSmtpSetting WHERE dbo.ZnodePortalSmtpSetting.PortalId IN (SELECT portalid FROM dbo.ZnodePortal zp  WHERE zp.CompanyName = 'copy OF Maxwells FF')    
          
    ---------------------------------------------------------------------------     
     */    
BEGIN    
 BEGIN TRAN A;    
 BEGIN TRY    
  SET NOCOUNT ON;    
  DECLARE @GetDate DATETIME = dbo.Fn_GetDate();    
  -- hold the newly created pim catalog id     
  DECLARE @NewPortalId int;     
  --Check if store name is not already exist then process copy    
      
      
  IF @StoreCode NOT IN (select  storecode from ZnodePortal )    
  BEGIN    
      
  IF EXISTS ( SELECT TOP 1 1 FROM dbo.ZnodePortal AS zp WHERE PortalId = @PortalId  )     
  AND @CompanyName <> '' AND @StoreName <> '' AND @StoreCode <> '' --AND  @StoreCode <> (select  storecode from ZnodePortal )     
      
  BEGIN    
    
   INSERT INTO dbo.ZnodePortal(    
   --PortalId - this column value is auto-generated    
   CompanyName, StoreName, LogoPath, UseSSL, AdminEmail, SalesEmail, CustomerServiceEmail, SalesPhoneNumber, CustomerServicePhoneNumber, ImageNotAvailablePath, ShowSwatchInCategory, ShowAlternateImageInCategory, ExternalID, MobileLogoPath, DefaultOrderStateID, DefaultReviewStatus, SplashCategoryID, SplashImageFile, MobileTheme,InStockMsg,OutOfStockMsg,BackOrderMsg,CreatedBy, CreatedDate, ModifiedBy, ModifiedDate ,StoreCode)    
   SELECT @CompanyName, @StoreName, LogoPath, UseSSL, AdminEmail, SalesEmail, CustomerServiceEmail, SalesPhoneNumber, CustomerServicePhoneNumber, ImageNotAvailablePath, ShowSwatchInCategory, ShowAlternateImageInCategory, ExternalID, MobileLogoPath, DefaultOrderStateID, DefaultReviewStatus, SplashCategoryID, SplashImageFile, MobileTheme,InStockMsg,OutOfStockMsg,BackOrderMsg, @UserId, @GetDate, @UserId, @GetDate ,@StoreCode    
   FROM ZnodePortal    
   WHERE PortalId = @PortalId;    
   SET @NewPortalId = SCOPE_IDENTITY();    
  END;    
  END    
    
  -- copy all data if New portalId will generate    
  IF @NewPortalId > -0     
  BEGIN    
   INSERT INTO dbo.ZnodePortalCatalog(    
   --PortalCatalogId - this column value is auto-generated    
   PortalId, PublishCatalogId, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )    
       SELECT @NewPortalId, PublishCatalogId, @UserId, @GetDate, @UserId, @GetDate    
       FROM ZnodePortalCatalog    
       WHERE PortalId = @PortalId;    
   INSERT INTO dbo.ZnodePortalProfile(    
   --PortalProfileID - this column value is auto-generated    
   PortalId, ProfileId, IsDefaultAnonymousProfile, IsDefaultRegistedProfile, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )    
       SELECT @NewPortalId, ProfileId, IsDefaultAnonymousProfile, IsDefaultRegistedProfile, @UserId, @GetDate, @UserId, @GetDate    
       FROM ZnodePortalProfile    
       WHERE PortalId = @PortalId;    
   INSERT INTO dbo.ZnodePortalUnit(    
   --PortalUnitId - this column value is auto-generated    
   PortalId, CurrencyId,CultureId, WeightUnit, DimensionUnit,CurrencySuffix, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )    
       SELECT @NewPortalId, CurrencyId,CultureId, WeightUnit, DimensionUnit,CurrencySuffix, @UserId, @GetDate, @UserId, @GetDate    
       FROM ZnodePortalUnit    
       WHERE PortalId = @PortalId;    
   INSERT INTO dbo.ZnodePortalCountry(    
   --PortalCountryId - this column value is auto-generated    
   PortalId, CountryCode, IsDefault, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )    
       SELECT @NewPortalId, CountryCode, IsDefault, @UserId, @GetDate, @UserId, @GetDate    
       FROM ZnodePortalCountry    
       WHERE PortalId = @PortalId;    
   INSERT INTO dbo.ZnodeShippingPortal(    
   --ShippingPortalId - this column value is auto-generated    
   PortalId, ShippingOriginAddress1, ShippingOriginAddress2, ShippingOriginCity, ShippingOriginStateCode, ShippingOriginZipCode, ShippingOriginCountryCode, ShippingOriginPhone, FedExAccountNumber, FedExLTLAccountNumber, FedExMeterNumber, FedExProductionKey, FedExSecurityCode, FedExDropoffType, FedExPackagingType, FedExUseDiscountRate, FedExAddInsurance, UPSUserName, UPSPassword, UPSKey, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )    
       SELECT @NewPortalId, ShippingOriginAddress1, ShippingOriginAddress2, ShippingOriginCity, ShippingOriginStateCode, ShippingOriginZipCode, ShippingOriginCountryCode, ShippingOriginPhone, FedExAccountNumber, FedExLTLAccountNumber, FedExMeterNumber, FedExProductionKey, FedExSecurityCode, FedExDropoffType, FedExPackagingType, FedExUseDiscountRate, FedExAddInsurance, UPSUserName, UPSPassword, UPSKey, @UserId, @GetDate, @UserId, @GetDate    
       FROM ZnodeShippingPortal    
       WHERE PortalId = @PortalId;    
   INSERT INTO dbo.ZnodePortalLocale(    
   --PortalLocaleId - this column value is auto-generated    
   PortalId, LocaleId, IsDefault, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )    
       SELECT @NewPortalId, LocaleId, IsDefault, @UserId, @GetDate, @UserId, @GetDate    
       FROM ZnodePortalLocale    
       WHERE PortalId = @PortalId;    
   INSERT INTO dbo.ZnodePortalSmtpSetting(    
   --PortalSmtpSettingId - this column value is auto-generated    
   PortalId, ServerName, UserName, Password, Port, IsEnableSsl, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate,DisableAllEmails )    
       SELECT @NewPortalId, ServerName, UserName, Password, Port, IsEnableSsl, @UserId, @GetDate, @UserId, @GetDate,DisableAllEmails    
 FROM ZnodePortalSmtpSetting    
       WHERE PortalId = @PortalId;    
   INSERT INTO dbo.ZnodePortalDisplaySetting(    
   --PortalDisplaySettingsId - this column value is auto-generated    
   PortalId, MediaId, MaxDisplayItems, MaxSmallThumbnailWidth, MaxSmallWidth, MaxMediumWidth, MaxThumbnailWidth, MaxLargeWidth, MaxCrossSellWidth, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )    
       SELECT @NewPortalId, MediaId, MaxDisplayItems, MaxSmallThumbnailWidth, MaxSmallWidth, MaxMediumWidth, MaxThumbnailWidth, MaxLargeWidth, MaxCrossSellWidth, @UserId, @GetDate, @UserId, @GetDate    
       FROM ZnodePortalDisplaySetting    
       WHERE PortalId = @PortalId;    
   INSERT INTO dbo.ZnodeCMSPortalTheme(    
   --CMSPortalThemeId - this column value is auto-generated    
   PortalId, CMSThemeId, CMSThemeCSSId, MediaId, WebsiteTitle, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate,WebsiteDescription )    
       SELECT @NewPortalId, CMSThemeId, CMSThemeCSSId, MediaId, WebsiteTitle, @UserId, @GetDate, @UserId, @GetDate ,WebsiteDescription   
       FROM ZnodeCMSPortalTheme    
       WHERE PortalId = @PortalId;    
   INSERT INTO dbo.ZnodePortalFeatureMapper(    
   --PortalFeatureMapperId - this column value is auto-generated    
   PortalId, PortalFeatureId, PortalFeatureMapperValue, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )    
       SELECT @NewPortalId, PortalFeatureId, PortalFeatureMapperValue, @UserId, @GetDate, @UserId, @GetDate    
       FROM ZnodePortalFeatureMapper    
       WHERE PortalId = @PortalId;    
       
      EXEC Znode_CopyPortalMessageAndContentPages @PortalId,@NewPortalId,@userId,0    
          
   EXEC Znode_CopyPortalEmailTemplate @NewPortalId,@PortalId,@userId    
   -- If copy process will complete successfully then return status 1     
   -- return the data set if     
   SELECT @PortalId AS ID, CAST(1 AS bit) AS [Status];     
   SET @Status = CAST(1 AS bit);    
   COMMIT TRAN A;    
  END;    
  ELSE    
  BEGIN    
   -- If copy process will not complete successfully then return status 0     
   SELECT @PortalId AS ID, CAST(0 AS bit) AS [Status];    
   SET @Status = CAST(0 AS bit);    
   ROLLBACK TRAN A;    
  END;    
 END TRY    
 BEGIN CATCH     
   select ERROR_MESSAGE()    
       SET @Status = 0;    
       DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_CopyPortal @PortalId = '+CAST(@PortalId AS VARCHAR(200))+',@StoreName='+@StoreName+',@CompanyName='+@CompanyName+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));    
                      
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                        
        
             EXEC Znode_InsertProcedureErrorLog    
    @ProcedureName = 'Znode_CopyPortal',    
    @ErrorInProcedure = @Error_procedure,    
    @ErrorMessage = @ErrorMessage,    
    @ErrorLine = @ErrorLine,    
    @ErrorCall = @ErrorCall;    
 END CATCH;    
END;
GO
IF NOT EXISTS(SELECT TOP 1 1 FROM ZnodeEmailTemplate WHERE TemplateName='LowInventoryOrderNotificationTemplate')
BEGIN
INSERT INTO ZnodeEmailTemplate (TemplateName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT 'LowInventoryOrderNotificationTemplate',2,GETUTCDATE(),2,GETUTCDATE()

INSERT INTO ZnodeEmailTemplateLocale(
EmailTemplateId,Subject,Descriptions,Content,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT (SELECT EmailTemplateId FROM ZnodeEmailTemplate Where TemplateName='LowInventoryOrderNotificationTemplate'),'Low Inventory Order Notification Template',
'LowInventoryOrderNotificationTemplate','<!DOCTYPE html><html><body><div style="background-color: #005286; font-size: 1.5em; font-weight: bold; padding-top: .5em; padding-bottom: .5em; padding-left: 1em; border-bottom: solid 1px #edffff; color: white;">#StoreLogo# Notification</div>  <div style="padding: 1em;">  <div>&nbsp;</div>  <div>Team,</div>  <div>&nbsp;</div>  <div>A Concurrent order has resulted in negative inventory for some products.</div>  <div>&nbsp;</div>  <div>The details of the order and the negative inventory products are given below:</div>  </div>  <div>  <div style="font-family: Arial, Helvetica; font-size: 10px; text-align: left; color: #292a2a; border: solid 1px #c3c3c3; margin-top: 10px;">  <div style="padding: 10px;">  <table style="font-family: Verdana, Helvetica, sans-serif; color: #333333; font-size: 10px;" border="0" width="100%" cellspacing="3" cellpadding="0">  <tbody>  <tr style="height: 12.3125px;">  <td style="height: 12.3125px;" colspan="5"><hr /></td>  </tr>  <tr style="height: 18px;">  <td style="height: 18px;" colspan="2" align="left" nowrap="nowrap" width="25%">  <div style="color: #292a2a; font-weight: bold; font-size: 11px; padding-bottom: 5px;">Order Information</div>  </td>  </tr>  <tr style="height: 13px;">  <td style="height: 13px;" align="left" nowrap="nowrap" width="10%"><strong>Order Number:</strong></td>  <td style="height: 13px;" align="left" nowrap="nowrap" width="30%">#OrderId#</td>  </tr>  <tr style="height: 13px;">  <td style="height: 13px;" align="left" nowrap="nowrap"><strong>Order Date:</strong></td>  <td style="height: 13px;" align="left" nowrap="nowrap">#OrderDate#</td>  </tr>  </tbody>  </table>  <div data-info="#AddressItems#">  <table width="100%" cellspacing="0" cellpadding="3">  <tbody>  <tr style="background-color: #eff3fb; height: 16px;">  <td style="border: 1px solid silver; font-family: Verdana, Helvetica, sans-serif; color: #333333; font-size: 10px; padding: 0px 5px; height: 16px; width: 10.0314%;"><strong>SKU</strong></td>  <td style="border: 1px solid silver; font-family: Verdana, Helvetica, sans-serif; color: #333333; font-size: 10px; height: 16px; width: 10%;" align="center"><strong>Qty</strong></td>  </tr>  <tr style="height: 81.3264px;" data-info="#LineItems#OmsOrderShipmentID##">  <td style="border: 1px solid silver; font-family: Verdana, Helvetica, sans-serif; color: #333333; font-size: 10px; padding: 0px 5px; height: 81.3264px; width: 10.0314%;" align="left">#SKU#&nbsp;</td>  <td style="border: 1px solid silver; font-family: Verdana, Helvetica, sans-serif; color: #333333; font-size: 10px; padding: 0px 5px; height: 81.3264px; width: 10%;" align="center">#Quantity#</td>  </tr>  </tbody>  </table>  </div>  </div>  </div>  <p>&nbsp;</p>  <p>Please take a look at the details.</p>  <p>&nbsp;</p>  <p>Thank You,</p>  <p>Admin</p>  </div></body></html>',
1,2,GETUTCDATE(),2,GETUTCDATE()

INSERT INTO ZnodeEmailTemplateAreas(
Name,Code,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT 'LowInventoryOrderNotificationTemplate','LowInventoryOrderNotificationTemplate',2,GETUTCDATE(),2,GETUTCDATE()

DECLARE @EmailtemplateIdRepair INT = (SELECT EmailTemplateId FROM ZnodeEmailTemplate WHERE TemplateName = 'LowInventoryOrderNotificationTemplate') 
DECLARE @emailTemplateAreaRepair INT = (SELECT EmailTemplateAreasId FROM ZnodeEmailTemplateAreas WHERE Code = 'LowInventoryOrderNotificationTemplate') 

INSERT INTO ZnodeEmailTemplateMapper (EmailTemplateId,PortalId,EmailTemplateAreasId,IsActive,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,IsEnableBcc)
SELECT @EmailtemplateIdRepair,a.PortalId,@emailTemplateAreaRepair,1,2,GETDATE(),2,GETDATE(),0
FROM ZnodePortal a 
WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeEmailTemplateMapper m WHERE m.EmailTemplateId = @EmailtemplateIdRepair AND m.EmailTemplateAreasId = @emailTemplateAreaRepair AND m.PortalId = a.PortalId )

END
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_UpdateInventory')
BEGIN 
	DROP PROCEDURE Znode_UpdateInventory
END
GO

CREATE PROCEDURE [dbo].[Znode_UpdateInventory]
(
	@SkuXml xml,
	@PortalId int, 
	@UserId int, 
	@Status bit OUT, 
	@IsDebug bit= 0)
AS 
	/*
	Summary: (13671)   Inventory will be updated on the basis of "InventoryTracking" (Attribute Code) value in locale table 
				    If value id "DisablePurchasing" then subtracts currently selected quantity only when it will greater than zero.
				    If "AllowBackordering" then inventory will become negative
				    If "DontTrackInventory" then don't update inventory.
				    inventory will be get deducted from associated warehouse where quantity is available as per warehouse precedence. 
				    Validate total quantity 
	Input Parameters:
	SKU(Comma separated multiple), PortalId
	Unit Testing   
		Declare @Status bit 
		Exec Znode_UpdateInventory  @SkuXml = '<ArrayOfOrderWarehouseLineItemsModel>
		<OrderWarehouseLineItemsModel>
		<OrderLineItemId>418</OrderLineItemId>
		<SKU>ap1534</SKU>
		<InventoryTracking>DisablePurchasing</InventoryTracking>
		<Quantity>1.000000</Quantity>
		</OrderWarehouseLineItemsModel>
		<OrderWarehouseLineItemsModel>
		<OrderLineItemId>419</OrderLineItemId>
		<SKU>al8907</SKU>
		<InventoryTracking>DisablePurchasing</InventoryTracking>
		<Quantity>1.000000</Quantity>
		</OrderWarehouseLineItemsModel>
		</ArrayOfOrderWarehouseLineItemsModel>',@PortalId = 1,@UserId = 2,@Status = @Status

	*/
BEGIN
	BEGIN TRAN UpdateInventory;
	BEGIN TRY
		SET NOCOUNT ON;
		DECLARE @TBL_XmlReturnToTable TABLE
		( 
			OrderLineItemId int, SKU nvarchar(max), InventoryTracking nvarchar(1000), Quantity numeric(28, 6),
			AllowBackOrder VARCHAR(100), SequenceNo int IDENTITY
		);
		DECLARE @TBL_ErrorInventoryTracking TABLE
		( 
			SKU nvarchar(max), Quantity numeric(28, 6), InventoryTracking nvarchar(2000)
		);
		INSERT INTO @TBL_XmlReturnToTable( OrderLineItemId, SKU, InventoryTracking, Quantity,AllowBackOrder )
			   SELECT Tbl.Col.value( 'OrderLineItemId[1]', 'INT' ) AS OrderLineItemId, Tbl.Col.value( 'SKU[1]', 'NVARCHAR(2000)' ) AS SKU, Tbl.Col.value( 'InventoryTracking[1]', 'NVARCHAR(2000)' ) AS InventoryTracking, Tbl.Col.value( 'Quantity[1]', 'Numeric(28,6)' ) AS Quantity
			   , Tbl.Col.value( 'AllowBackOrder[1]', 'VARCHAR(100)' ) AS AllowBackOrder
			   FROM @SkuXml.nodes( '//ArrayOfOrderWarehouseLineItemsModel/OrderWarehouseLineItemsModel' ) AS Tbl(Col)
			   WHERE Tbl.Col.value( 'InventoryTracking[1]', 'NVARCHAR(2000)' ) <> 'DontTrackInventory' 
			   AND Tbl.Col.value( 'Quantity[1]', 'Numeric(28,6)' ) > 0
			   ;
		DECLARE @Cur_WarehouseId int, @Cur_PortalId int, @Cur_PortalWarehouseId int, @Cur_WarehouseSequence int, @Cur_SKU varchar(200), @Cur_Quantity numeric(28, 6), @Cur_ReOrderLevel numeric(28, 6), @Cur_InventoryId int;
             
			
	
		DECLARE @RecurringQuantity numeric(28, 6), @BalanceQuantity numeric(28, 6)
		SET @Status = 0; 
      		

		DECLARE @TBL_CalculateQuntity TABLE
		( 
			WarehouseId int, SKU varchar(200), MainQuantity numeric(28, 6), InventoryId int, OrderQuantity numeric(28, 6), UpdatedQuantity numeric(28, 6), WarehouseSequenceId int, InventoryTracking nvarchar(2000)
			, AllowBackOrder varchar(100)
		);
		
		DECLARE @TBL_AllwareHouseToportal TABLE
		( 
			WarehouseId int, PortalId int, PortalWarehouseId int, WarehouseSequenceFirst int, WarehouseSequence int, SKU varchar(200), Quantity numeric(28, 6), ReOrderLevel numeric(28, 6), InventoryId int
		);
		

		INSERT INTO @TBL_AllwareHouseToportal( WarehouseId, PortalId, PortalWarehouseId, SKU, Quantity, ReOrderLevel, InventoryId, WarehouseSequence, WarehouseSequenceFirst )
			SELECT ZPW.WarehouseId, ZPW.PortalId, zpw.PortalWarehouseId, zi.SKU, zi.Quantity, zi.ReOrderLevel, zi.InventoryId, DENSE_RANK() OVER(ORDER BY ZPW.WarehouseId), 1
			FROM dbo.ZnodeInventory AS zi
			LEFT JOIN [ZnodePortalWarehouse] AS ZPW ON ZPW.WarehouseId = ZI.WareHouseId AND  ZPW.PortalId = @PortalId
			WHERE EXISTS ( SELECT TOP 1 1  FROM @TBL_XmlReturnToTable AS TBXRT WHERE RTRIM(LTRIM(TBXRT.SKU)) = RTRIM(LTRIM(zi.SKU))) ORDER BY ZPW.Precedence DESC;
			
		INSERT INTO @TBL_AllwareHouseToportal( WarehouseId, PortalId, PortalWarehouseId, SKU, Quantity, ReOrderLevel, InventoryId, WarehouseSequence, WarehouseSequenceFirst )
			SELECT zpaw.WarehouseId, @PortalId, zpaw.PortalWarehouseId, zi.SKU, zi.Quantity, zi.ReOrderLevel, zi.InventoryId, DENSE_RANK() OVER (ORDER BY zpaw.WarehouseId),
			CASE WHEN EXISTS ( SELECT TOP 1 1 FROM @TBL_AllwareHouseToportal WE WHERE WE.SKU = ZI.SKU  ) THEN 2 ELSE 1 END
				FROM dbo.ZnodeInventory AS zi INNER JOIN [dbo].[ZnodePortalAlternateWarehouse] AS zpaw ON zpaw.WarehouseId = ZI.WareHouseId
				WHERE EXISTS ( SELECT TOP 1 1 FROM [ZnodePortalWarehouse] AS a WHERE zpaw.PortalWarehouseId = a.PortalWarehouseId AND  a.PortalId = @PortalId) AND 
				EXISTS ( SELECT TOP 1 1 FROM @TBL_XmlReturnToTable AS TBXRT WHERE RTRIM(LTRIM(TBXRT.SKU)) = RTRIM(LTRIM(zi.SKU))) ORDER BY ZPAW.Precedence DESC;
   
		--INSERT INTO @TBL_AllwareHouseToportal( WarehouseId, PortalId, PortalWarehouseId, SKU, Quantity, ReOrderLevel, InventoryId, WarehouseSequence, WarehouseSequenceFirst )
		--	SELECT ZPW.WarehouseId, ZPW.PortalId, zpw.PortalWarehouseId, zi.SKU, zi.Quantity, zi.ReOrderLevel, zi.InventoryId, DENSE_RANK() OVER(ORDER BY ZPW.WarehouseId), 1
		--	FROM dbo.ZnodeInventory AS zi
		--	LEFT JOIN [ZnodePortalWarehouse] AS ZPW ON ZPW.WarehouseId = ZI.WareHouseId AND  ZPW.PortalId = @PortalId
		--	WHERE EXISTS ( SELECT TOP 1 1  FROM @TBL_XmlReturnToTable AS TBXRT WHERE RTRIM(LTRIM(TBXRT.SKU)) = RTRIM(LTRIM(zi.SKU))) ORDER BY ZPW.Precedence DESC;

		
		--Total Avaialble qunatity in all warehouse 
		IF EXISTS ( SELECT TOP 1 1 FROM @TBL_XmlReturnToTable WHERE InventoryTracking = 'DisablePurchasing')
		BEGIN

			INSERT INTO @TBL_ErrorInventoryTracking 
			SELECT TBAHL.SKU, SUM(TBAHL.Quantity), InventoryTracking 
			FROM @TBL_XmlReturnToTable AS TBXML
			LEFT JOIN @TBL_AllwareHouseToportal AS TBAHL ON(TBAHL.SKU = TBXML.SKU) 
			INNER JOIN ZnodeOmsOrderLineItems b on (TBXML.orderlineitemid = b.OmsOrderLineItemsId)
			WHERE InventoryTracking = 'DisablePurchasing'
			AND b.OrderLineItemRelationshipTypeId IS NOT NULL
			GROUP BY TBAHL.SKU, InventoryTracking HAVING SUM(TBAHL.Quantity) < 1 ORDER BY TBAHL.SKU;
			IF EXISTS ( SELECT TOP 1 1 FROM @TBL_ErrorInventoryTracking )
			BEGIN
				SET @Status = 0;
				RAISERROR(15600, -1, -1, 'DisablePurchasing');
			END;
		END;

		

			INSERT INTO @TBL_CalculateQuntity
			   SELECT WarehouseId, TBXML.SKU, TBAHL.Quantity, TBAHL.InventoryId, TBXML.Quantity, NULL AS UpdatedQuantity, DENSE_RANK() 
			   OVER(ORDER BY WarehouseSequenceFirst,WarehouseSequence), InventoryTracking, TBXML.AllowBackOrder
			   FROM @TBL_XmlReturnToTable AS TBXML	
			   INNER  JOIN @TBL_AllwareHouseToportal AS TBAHL ON(TBAHL.SKU = TBXML.SKU)
			   ORDER BY  WarehouseSequenceFirst,WarehouseSequence;

		
		
		UPDATE @TBL_CalculateQuntity 
		SET UpdatedQuantity = MainQuantity - OrderQuantity  
		WHERE WarehouseSequenceId = 1;
				
		DECLARE @CountToRepeate int= ( SELECT count( distinct WarehouseId) FROM @TBL_CalculateQuntity),@Initializationofloop int= 2;
       
		WHILE @Initializationofloop <= @CountToRepeate 
				AND EXISTS (SELECT TOP 1 1 FROM @TBL_CalculateQuntity AS a 
					WHERE UpdatedQuantity < 0  )
		BEGIN
		 
			UPDATE a  
			SET a.UpdatedQuantity = a.MainQuantity + b.UpdatedQuantity 
			FROM @TBL_CalculateQuntity a 
			INNER JOIN @TBL_CalculateQuntity b ON (a.Sku = b.Sku AND b.WarehouseSequenceId = (@Initializationofloop - 1)) 
			WHERE a.WarehouseSequenceId = @Initializationofloop 
			AND b.UpdatedQuantity < 0
			AND b.UpdatedQuantity IS NOT NULL 
			--AND a.WarehouseSequenceId = @Initializationofloop - 1

			UPDATE @TBL_CalculateQuntity 
			SET UpdatedQuantity  = 0 
			WHERE WarehouseSequenceId = @Initializationofloop -1 
			--AND  InventoryTracking <> 'AllowBackordering'
			AND UpdatedQuantity < 0
			AND UpdatedQuantity IS NOT NULL 
			--AND WarehouseSequenceId = @Initializationofloop - 1

			SET @Initializationofloop = @Initializationofloop + 1;
		END; 
		
		
		   IF EXISTS (SELECT TOP 1 1 FROM @TBL_CalculateQuntity WHERE ISNULL(UpdatedQuantity,0) < 0 AND @CountToRepeate >1)
		   BEGIN 
		    UPDATE a  
			SET a.UpdatedQuantity = b.UpdatedQuantity 
			FROM @TBL_CalculateQuntity a 
			INNER JOIN @TBL_CalculateQuntity b ON (a.Sku = b.Sku AND b.WarehouseSequenceId = @Initializationofloop -1 ) 
			WHERE a.WarehouseSequenceId = 1 
			AND ISNULL(b.UpdatedQuantity,0) < 0

			UPDATE @TBL_CalculateQuntity 
			SET UpdatedQuantity  = 0 
			WHERE WarehouseSequenceId = @Initializationofloop -1 
			--AND  InventoryTracking <> 'AllowBackordering'
		    AND ISNULL(UpdatedQuantity,0) < 0
		   END 
			
			
		--If "AllowBackordering" then inventory will go to be negative conside only single warehouse
		IF EXISTS(SELECT TOP 1 1 FROM @TBL_XmlReturnToTable WHERE InventoryTracking = 'AllowBackordering')
		BEGIN
			UPDATE ZI SET Quantity = Isnull(TBCQ.UpdatedQuantity,0) 
			FROM dbo.ZnodeInventory ZI 
			INNER JOIN @TBL_CalculateQuntity TBCQ ON(Zi.InventoryId = TBCQ.InventoryId)
			WHERE InventoryTracking = 'AllowBackordering' AND  UpdatedQuantity IS NOT NULL  ;
			SET @Status = 1;
		END;
		
					-- If @InventoryTracking is "DisablePurchasing" then subtracts currently selected quantity only when it will greater than zero.
				IF EXISTS ( SELECT TOP 1 1 FROM @TBL_XmlReturnToTable WHERE InventoryTracking = 'DisablePurchasing')
				BEGIN
					SET @BalanceQuantity = 1;
					UPDATE ZI 
					SET Quantity = CASE WHEN TBCQ.UpdatedQuantity < 0 THEN 0 ELSE TBCQ.UpdatedQuantity END 
					FROM dbo.ZnodeInventory ZI 
					INNER JOIN  @TBL_CalculateQuntity TBCQ ON(Zi.InventoryId = TBCQ.InventoryId) WHERE InventoryTracking = 'DisablePurchasing'
					AND TBCQ.UpdatedQuantity IS NOT NULL 
					;
				END;
		
	
		--	SELECT * FROM @TBL_CalculateQuntity
		--SELECT OrderLineItemId, WarehouseId, @UserId, dbo.Fn_GetDate(), @UserId, dbo.Fn_GetDate() 
		--FROM @TBL_CalculateQuntity AS TBCQ 
		--INNER JOIN @TBL_XmlReturnToTable AS TBXR
		--	   ON(TBXR.SKU = TBCQ.SKU) WHERE UpdatedQuantity IS NOT NULL;


		INSERT INTO ZnodeOmsOrderWarehouse( OmsOrderLineItemsId, WarehouseId,Quantity, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
		SELECT OrderLineItemId, WarehouseId,CASE WHEN UpdatedQuantity = 0 THEN MainQuantity ELSE MainQuantity - UpdatedQuantity END , @UserId, dbo.Fn_GetDate(), @UserId, dbo.Fn_GetDate() 
		FROM @TBL_CalculateQuntity AS TBCQ 
		INNER JOIN @TBL_XmlReturnToTable AS TBXR
			   ON(TBXR.SKU = TBCQ.SKU) WHERE UpdatedQuantity IS NOT NULL;

		SELECT DISTINCT SKU, UpdatedQuantity AS Quantity, InventoryTracking,CAST(AllowBackOrder AS BIT) AllowBackOrder
		FROM @TBL_CalculateQuntity;

		--SELECT SKU,  Quantity, InventoryTracking 
		--FROM @TBL_ErrorInventoryTracking

		SET @Status = 1;
		COMMIT TRAN UpdateInventory;
	END TRY
	BEGIN CATCH
	
		SET @Status = 0;
		SELECT SKU, Quantity, InventoryTracking
		FROM @TBL_ErrorInventoryTracking;
		
		ROLLBACK TRAN UpdateInventory;
	END CATCH;
END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportInsertUpdatePimCategory')
BEGIN 
	DROP PROCEDURE Znode_ImportInsertUpdatePimCategory
END
GO
CREATE PROCEDURE [dbo].[Znode_ImportInsertUpdatePimCategory]
(   @InsertCategory PIMCATEGORYDETAIL READONLY,
	@Status         BIT OUT,
	@UserId         INT               = 0,
	@IsImport BIT =0)
AS
   /* Summary :- This Procedure is used to get the converted category xml into table and call insert update category procedure 
     Unit Testing 
     EXEC Znode_ImportInsertUpdatePimCategory
	*/
     BEGIN
         BEGIN TRY 
             SET NOCOUNT ON;
             DECLARE @DefaultCategoryfamily INT= Dbo.fn_GetDefaultvalue('CategoryFamily');
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
			 DECLARE @TBL_PimCategoryId TABLE (PimCategoryAttributeValueId INT,PimCategoryAttributeValueLocaleId INT )
			  DECLARE @PublishStateIdForDraft INT =  [dbo].[Fn_GetPublishStateIdForDraftState]()
			  DECLARE @PublishStateIdForNotPublished INT = [dbo].[Fn_GetPublishStateIdForForNotPublishedState]() 
             DECLARE @PimCategoryAttributeValueId TABLE
             (PimCategoryAttributeValueId INT,
              PimCategoryId               INT,
              PimAttributeId              INT,
              PimAttributeFamilyId        INT
             );
             DECLARE @PimAttributeFamilyId INT;
             DECLARE @PimCategoryId INT;
            
			 SELECT TOP 1 @PimCategoryId = PimCategoryId
             FROM @InsertCategory;
             
			 SELECT TOP 1 @PimAttributeFamilyId = PimAttributeFamilyId
             FROM @InsertCategory;
             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM ZnodePimcategory AS a
                      INNER JOIN @InsertCategory AS b ON(a.PimCategoryId = b.PimCategoryId)
             )
                 BEGIN
                     INSERT INTO ZnodePimcategory
                     (PimAttributeFamilyId,
                      IsActive,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate ,
					  PublishStateid
                     )
                            SELECT PimAttributeFamilyId,
                                   1,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate ,@PublishStateIdForNotPublished
                            FROM @InsertCategory
                            GROUP BY PimCategoryId,
                                     PimAttributeFamilyId;
                     SET @PimCategoryId = SCOPE_IDENTITY();


					  INSERT INTO ZnodePimCategoryAttributeValue
             (PimCategoryId,
              PimAttributeFamilyId,
              PimAttributeId,
              PimAttributeDefaultValueId,
              CreatedBy,
              CreatedDate,
              ModifiedBy,
              ModifiedDate
             )
             OUTPUT INSERTED.PimCategoryAttributeValueId,
                    INSERTED.PimCategoryId,
                    INSERTED.PimAttributeId,
                    INSERTED.PimAttributeFamilyId
                    INTO @PimCategoryAttributeValueId
                    SELECT @PimCategoryId,
                           PimAttributeFamilyId,
                           PimAttributeId,
                           CASE
                               WHEN PimAttributeDefaultValueId = 0
                               THEN NULL
                               ELSE PimAttributeDefaultValueId
                           END,
                           @UserId,
                           @GetDate,
                           @UserId,
                           @GetDate
                    FROM @InsertCategory AS a
                    WHERE NOT EXISTS
                    (
                        SELECT TOP 1 1
                        FROM ZnodePimCategoryAttributeValue AS b
                        WHERE b.PimAttributeId = a.PimAttributeId
                              AND b.PimCategoryId = a.PimCategoryId
                    );

            
             INSERT INTO ZnodePimCategoryAttributeValueLocale
             (LocaleId,
              PimCategoryAttributeValueId,
              CategoryValue,
              CreatedBy,
              CreatedDate,
              ModifiedBy,
              ModifiedDate
             )
                    SELECT DISTINCT
                           LocaleId,
                           b.PimCategoryAttributeValueId,
                           a.AttributeValue,
                           @UserId,
                           @GetDate,
                           @UserId,
                           @GetDate
                    FROM @InsertCategory AS a
                         INNER JOIN @PimCategoryAttributeValueId AS b ON(b.PimAttributeId = a.PimAttributeId
                                                                         AND b.PimAttributeFamilyId = a.PimAttributeFamilyId)
                    WHERE NOT EXISTS
                    (
                        SELECT TOP 1 1
                        FROM ZnodePimCategoryAttributeValueLocale AS c
                        WHERE c.PimCategoryAttributeValueId = b.PimCategoryAttributeValueId
                              AND c.LocaleId = a.LocaleId
                    );

                 END;
             ELSE
			 BEGIN   
             UPDATE ZnodePimcategory
               SET
                   PimAttributeFamilyId = @PimAttributeFamilyId,
                   ModifiedBy = @UserId,
                   ModifiedDate = @GetDate,
				   IsCategoryPublish  = 
					-- IsCategoryPublish = 1 for status published
					-- IsCategoryPublish = 0 for status Draft
					-- IsCategoryPublish = NULL for status NOT published 
						   
					CASE 
					when IsCategoryPublish =1 then  0  -- IF status is publish then status should be draft
					when IsCategoryPublish =0 then 0   -- IF it is draft then it should be draft 
					else null END,  -- if it is not publish then it will not publish
					PublishStateid = @PublishStateIdForDraft 
             WHERE PimCategoryId = @PimCategoryId;
			 
			 UPDATE a
               SET
                   PimAttributeFamilyId = b.PimAttributeFamilyId,
                   --PimAttributeDefaultValueId = b.PimAttributeDefaultValueId,
                   ModifiedBy = @UserId,
                   ModifiedDate = @GetDate
             OUTPUT INSERTED.PimCategoryAttributeValueId,
                    INSERTED.PimCategoryId,
                    INSERTED.PimAttributeId,
                    INSERTED.PimAttributeFamilyId
                    INTO @PimCategoryAttributeValueId
             FROM ZnodePimCategoryAttributeValue a
                  INNER JOIN @InsertCategory b ON(b.PimAttributeId = a.PimAttributeId
                                                  AND b.PimCategoryId = a.PimCategoryId);

			  INSERT INTO ZnodePimCategoryAttributeValue
             (PimCategoryId,
              PimAttributeFamilyId,
              PimAttributeId,
              PimAttributeDefaultValueId,
              CreatedBy,
              CreatedDate,
              ModifiedBy,
              ModifiedDate
             )
             OUTPUT INSERTED.PimCategoryAttributeValueId,
                    INSERTED.PimCategoryId,
                    INSERTED.PimAttributeId,
                    INSERTED.PimAttributeFamilyId
                    INTO @PimCategoryAttributeValueId
                    SELECT PimCategoryId,
                           PimAttributeFamilyId,
                           PimAttributeId,
                           CASE
                               WHEN PimAttributeDefaultValueId = 0
                               THEN NULL
                               ELSE PimAttributeDefaultValueId
                           END,
                           @UserId,
                           @GetDate,
                           @UserId,
                           @GetDate
                    FROM @InsertCategory AS a
                    WHERE NOT EXISTS
                    (
                        SELECT TOP 1 1
                        FROM ZnodePimCategoryAttributeValue AS b
                        WHERE b.PimAttributeId = a.PimAttributeId
                              AND b.PimCategoryId = a.PimCategoryId
                    ) and isnull(a.PimCategoryId,0) <> 0;
					 
			 UPDATE a
               SET
                   CategoryValue = c.AttributeValue,
                   ModifiedBy = @UserId,
                   ModifiedDate = @GetDate
             FROM ZnodePimCategoryAttributeValueLocale a
                  INNER JOIN @PimCategoryAttributeValueId b ON(a.PimCategoryAttributeValueId = b.PimCategoryAttributeValueId)
                  INNER JOIN @InsertCategory c ON(b.PimAttributeId = c.PimAttributeId
                                                  AND c.LocaleId = a.LocaleId);

			INSERT INTO ZnodePimCategoryAttributeValueLocale
             (LocaleId,
              PimCategoryAttributeValueId,
              CategoryValue,
              CreatedBy,
              CreatedDate,
              ModifiedBy,
              ModifiedDate
             )
                    SELECT DISTINCT
                           LocaleId,
                           b.PimCategoryAttributeValueId,
                           a.AttributeValue,
                           @UserId,
                           @GetDate,
                           @UserId,
                           @GetDate
                    FROM @InsertCategory AS a
                         INNER JOIN @PimCategoryAttributeValueId AS b ON(b.PimAttributeId = a.PimAttributeId
                                                                         AND b.PimAttributeFamilyId = a.PimAttributeFamilyId)
                    WHERE NOT EXISTS
                    (
                        SELECT TOP 1 1
                        FROM ZnodePimCategoryAttributeValueLocale AS c
                        WHERE c.PimCategoryAttributeValueId = b.PimCategoryAttributeValueId
                              AND c.LocaleId = a.LocaleId
                    );

					IF @IsImport =0
					BEGIN
					INSERT INTO @TBL_PimCategoryId(PimCategoryAttributeValueId,PimCategoryAttributeValueLocaleId)
                            SELECT ZPAV.PimCategoryAttributeValueId,ZPAVL.PimCategoryAttributeValueLocaleId
                            FROM ZnodePimCategoryAttributeValue ZPAV
                            INNER JOIN ZnodePimCategoryAttributeValueLocale ZPAVL ON (ZPAVL.PimCategoryAttributeValueId = ZPAV.PimCategoryAttributeValueId AND EXISTS
                            (
                                SELECT TOP 1 1
                                FROM @InsertCategory TBPD
                                WHERE TBPD.LocaleId = ZPAVL.LocaleId
                                     -- AND TBPD.PimAttributeFamilyId = ZPAV.PimAttributeFamilyId
                            )) 
							WHERE EXISTS
                            (
                                SELECT TOP 1 1
                                FROM @InsertCategory TBPD
                                WHERE TBPD.PimCategoryId = ZPAV.PimCategoryId
                                      AND TBPD.PimAttributeFamilyId = ZPAV.PimAttributeFamilyId
                            )
                                  AND NOT EXISTS
                            (
                                SELECT TOP 1 1
                                FROM @InsertCategory TBPDI
                                WHERE TBPDI.PimAttributeId = ZPAV.PimAttributeId
                                      AND TBPDI.PimCategoryId = ZPAV.PimCategoryId
                                      AND TBPDI.PimAttributeFamilyId = ZPAV.PimAttributeFamilyId
                            )
                                  AND EXISTS
                            (
                                SELECT TOP 1 1
                                FROM ZnodePimAttribute ZPA
                                WHERE ZPA.PimAttributeId = ZPAV.PimAttributeId
                                      AND IsLocalizable = 1
                            );

					INSERT INTO @TBL_PimCategoryId(PimCategoryAttributeValueId,PimCategoryAttributeValueLocaleId)
					SELECT ZPAV.PimCategoryAttributeValueId,PimCategoryAttributeValueLocaleId
					FROM ZnodePimCategoryAttributeValue ZPAV 
					INNER JOIN ZnodePimCategoryAttributeValueLocale ZPAVL ON (ZPAVL.PimCategoryAttributeValueId = ZPAV.PimCategoryAttributeValueId AND EXISTS
                            (
                                SELECT TOP 1 1
                                FROM @InsertCategory TBPD
                                WHERE TBPD.LocaleId = ZPAVL.LocaleId
                                     -- AND TBPD.PimAttributeFamilyId = ZPAV.PimAttributeFamilyId
                            )) 
					INNER JOIN ZnodePimFamilyGroupMapper ZPFGMI  ON (ZPFGMI.PimAttributeId = ZPAV.PimAttributeId AND ZPFGMI.PimAttributeFamilyId = @PimAttributeFamilyId)
					WHERE EXISTS
                            (
                                SELECT TOP 1 1
                                FROM @InsertCategory TBPD
                                WHERE TBPD.PimCategoryId = ZPAV.PimCategoryId 
                                     -- AND TBPD.PimAttributeFamilyId = ZPAV.PimAttributeFamilyId
                            )
                                  AND NOT EXISTS
                            (
                                SELECT TOP 1 1
                                FROM @InsertCategory TBPDI
                                WHERE TBPDI.PimAttributeId = ZPAV.PimAttributeId
                                      AND TBPDI.PimCategoryId = ZPAV.PimCategoryId
                                     -- AND TBPDI.PimAttributeFamilyId = ZPAV.PimAttributeFamilyId
                            )
					 DELETE FROM ZnodePimCategoryAttributeValueLocale
                     WHERE EXISTS
                     (
                         SELECT TOP 1 1
                         FROM @TBL_PimCategoryId TBPD
                         WHERE TBPD.PimCategoryAttributeValueId = ZnodePimCategoryAttributeValueLocale.PimCategoryAttributeValueId AND TBPD.PimCategoryAttributeValueLocaleId = ZnodePimCategoryAttributeValueLocale.PimCategoryAttributeValueLocaleId
                     );

                     DELETE FROM ZnodePimCategoryAttributeValue
                     WHERE EXISTS
                     (
                         SELECT TOP 1 1
                         FROM @TBL_PimCategoryId TBPD
                         WHERE TBPD.PimCategoryAttributeValueId = ZnodePimCategoryAttributeValue.PimCategoryAttributeValueId
                     )
					 AND  NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimCategoryAttributeValueLocale ZPCVL WHERE ZPCVL.PimCategoryAttributeValueId = ZnodePimCategoryAttributeValue.PimCategoryAttributeValueId)
                      
					 ;
					END

		 END 
          
             
            
             SELECT @PimCategoryId AS ID,
                    CAST(1 AS BIT) AS Status;
         END TRY
         BEGIN CATCH
            
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportInsertUpdatePimCategory @UserId = '+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_ImportInsertUpdatePimCategory',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
	 GO
	 
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportPimCategoryData')
BEGIN 
	DROP PROCEDURE Znode_ImportPimCategoryData
END
GO
CREATE PROCEDURE [dbo].[Znode_ImportPimCategoryData]
(   @TableName          VARCHAR(200),
    @NewGUID            NVARCHAR(200),
    @TemplateId         NVARCHAR(200),
    @ImportProcessLogId INT,
    @UserId             INT,
    @LocaleId           INT,
    @DefaultFamilyId    INT)
AS

    /*
      Summary : Finally Import data into ZnodePimProduct, ZnodePimAttributeValue and ZnodePimAttributeValueLocale Table 
      Process : Flat global temporary table will split into cloumn wise and associted with Znode Attributecodes,
    		    Create group of product with their attribute code and values and inseerted one by one products. 	   
    
      SourceColumnName : CSV file column headers
      TargetColumnName : Attributecode from ZnodePimAttribute Table 

	 ***  Need to log error if transaction failed during insertion of records into table.

	EXEC Znode_ImportPimCategoryData 
    */

     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY
             
             DECLARE @SQLQuery NVARCHAR(MAX);
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @AttributeTypeName NVARCHAR(10), @AttributeCode NVARCHAR(300), @AttributeId INT, @IsRequired BIT, @SourceColumnName NVARCHAR(600), @PimAttributeFamilyId INT, @NewProductId INT, @PimAttributeValueId INT, @status BIT= 0; 
             --Declare error Log Table 

			 IF OBJECT_ID('tempdb.dbo.#DuplicateCategory', 'U') IS NOT NULL 
		     DROP TABLE tempdb.dbo.#DuplicateCategory

             DECLARE @FamilyAttributeDetail TABLE
             (PimAttributeId       INT,
              AttributeTypeName    VARCHAR(300),
              AttributeCode        VARCHAR(300),
              SourceColumnName     NVARCHAR(600),
              IsRequired           BIT,
              PimAttributeFamilyId INT
             );
             IF @DefaultFamilyId = 0
                 BEGIN
                     INSERT INTO @FamilyAttributeDetail
                     (PimAttributeId,
                      AttributeTypeName,
                      AttributeCode,
                      SourceColumnName,
                      IsRequired,
                      PimAttributeFamilyId
                     )
                     --Call Process to insert data of defeult family with cource column name and target column name 
                     EXEC Znode_ImportGetTemplateDetails
                          @TemplateId = @TemplateId,
                          @IsValidationRules = 0,
                          @IsIncludeRespectiveFamily = 1,
                          @IsCategory = 1,
						  @DefaultFamilyId=@DefaultFamilyId;
                     UPDATE @FamilyAttributeDetail
                       SET
                           PimAttributeFamilyId = DBO.Fn_GetCategoryDefaultFamilyId();

					---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
					Delete FAD from @FamilyAttributeDetail FAD
					where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
					and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					               inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
                 END;
             ELSE
                 BEGIN
                     INSERT INTO @FamilyAttributeDetail
                     (PimAttributeId,
                      AttributeTypeName,
                      AttributeCode,
                      SourceColumnName,
                      IsRequired,
                      PimAttributeFamilyId
                     )
                     --Call Process to insert data of defeult family with cource column name and target column name 
                     EXEC Znode_ImportGetTemplateDetails
                          @TemplateId = @TemplateId,
                          @IsValidationRules = 0,
                          @IsIncludeRespectiveFamily = 1,
                          @DefaultFamilyId = @DefaultFamilyId,
                          @IsCategory = 1;

					---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
					Delete FAD from @FamilyAttributeDetail FAD
					where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
					and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					               inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
                 END;  
			 --Read all matched CategoryId with respect to their CategoryCode 
			 --SET @SQLQuery = 
			 --SELECT * FROM ZnodePimCategoryAttributeValue zpca INNER JOIN ZnodePimCategoryAttributeValueLocale zpcal 
			 --ON zpca.PimCategoryAttributeValueId = zpcal.PimCategoryAttributeValueId Inner join ZnodePimAttribute ZPA on zpca.PimAttributeId = zpa.PimAttributeId 
			 --AND ZPA.IsCategory =1 AND ZPA.AttributeCode = 'CategoryCode' 
			 --Inner join ' + @TableName +' tlb ON zpcal.CategoryValue = tlb.CategoryCode

		
             --Read all attribute details with their datatype 

             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM INFORMATION_SCHEMA.TABLES
                 WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#DefaultAttributeValue'
             )
                 BEGIN
                     CREATE TABLE #DefaultAttributeValue
                     (AttributeTypeName          VARCHAR(300),
                      PimAttributeDefaultValueId INT,
                      PimAttributeId             INT,
                      AttributeDefaultValueCode  VARCHAR(100)
                     );
                     INSERT INTO #DefaultAttributeValue
                     (AttributeTypeName,
                      PimAttributeDefaultValueId,
                      PimAttributeId,
                      AttributeDefaultValueCode
                     )
                     --Call Process to insert default data value 
                     EXEC Znode_ImportGetPimAttributeDefaultValue;
                 END;
             ELSE
                 BEGIN
                     DROP TABLE #DefaultAttributeValue;
                 END;  
         
             -- Split horizontal table into verticle table by column name and attribute Value with their 
             -- corresponding AttributeId, Default family , Default AttributeValue Id  
             DECLARE @PimCategoryDetail TABLE
             ([PimCategoryId]              [INT] NULL,
              [PimAttributeId]             [INT] NULL,
              [PimAttributeValueId]        [INT] NULL,
              [PimAttributeDefaultValueId] [INT] NULL,
              [PimAttributeFamilyId]       [INT] NULL,
              [LocaleId]                   [INT] NULL,
              [AttributeCode]              [VARCHAR](500) NULL,
              [AttributeValue]             [NVARCHAR](MAX) NULL,
              [RowNumber]                  INT 
             );
             -- Column wise split data from source table ( global temporary table ) and inserted into temporary table variable @PimCategoryDetail
             -- Add PimAttributeDefaultValue 

             DECLARE Cr_AttributeDetails CURSOR LOCAL FAST_FORWARD
             FOR SELECT PimAttributeId,
                        AttributeTypeName,
                        AttributeCode,
                        IsRequired,
                        SourceColumnName,
                        PimAttributeFamilyId
                 FROM @FamilyAttributeDetail
                 WHERE ISNULL(SourceColumnName, '') <> '';
             OPEN Cr_AttributeDetails;
             FETCH NEXT FROM Cr_AttributeDetails INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @PimAttributeFamilyId;
             WHILE @@FETCH_STATUS = 0
                 BEGIN
                     SET @NewProductId = 0;
                     SET @SQLQuery = 'SELECT '''+CONVERT(VARCHAR(100), @PimAttributeFamilyId)+''' PimAttributeFamilyId, 0 PimCategoryId,'''+CONVERT(VARCHAR(100), @AttributeId)+''' AttributeId ,
						   (SELECT TOP 1 PimAttributeDefaultValueId FROM #DefaultAttributeValue Where PimAttributeId =  '+CONVERT(VARCHAR(100), @AttributeId)+'AND  AttributeDefaultValueCode = TN.'+@SourceColumnName+' ) PimAttributeDefaultValueId,'+@SourceColumnName+','+CONVERT(VARCHAR(100), @LocaleId)+'LocaleId,RowNumber FROM '+@TableName+' TN';
                     INSERT INTO @PimCategoryDetail
                     ([PimAttributeFamilyId],
                      [PimCategoryId],
                      [PimAttributeId],
                      [PimAttributeDefaultValueId],
                      AttributeValue,
                      LocaleId,
                      RowNumber
                     )
                     EXEC sys.sp_sqlexec
                          @SQLQuery;
                     FETCH NEXT FROM Cr_AttributeDetails INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @PimAttributeFamilyId;
                 END;
             CLOSE Cr_AttributeDetails;
             DEALLOCATE Cr_AttributeDetails;
             UPDATE ppdti
               SET
                   ppdti.AttributeValue = CASE
                                              WHEN ppdti.AttributeValue = 'Yes/No'
                                              THEN 'False'
                                          END
             FROM @PimCategoryDetail ppdti
                  INNER JOIN #DefaultAttributeValue dav ON dav.PimAttributeDefaultValueId = ppdti.PimAttributeDefaultValueId
             WHERE ISNULL(ppdti.AttributeValue, '') = '';

			 SELECT PCD.AttributeValue
			 INTO #DuplicateCategory
			 FROM @PimCategoryDetail PCD
			 INNER JOIN ZnodePimAttribute PA ON (PCD.PimAttributeId = PA.PimAttributeId)
			 where PA.AttributeCode = 'CategoryCode' 
			 GROUP BY PCD.AttributeValue
			 Having Count(*) > 1


			INSERT INTO ZnodeImportLog
			(ErrorDescription,ColumnName,Data,RowNumber,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
			 SELECT '53' ,'CategoryCode',PCD.AttributeValue,PCD.RowNumber,@NewGUID,2,GETDATE(),2,GETDATE(),@ImportProcessLogId
			 FROM @PimCategoryDetail PCD
			 WHERE RowNumber IN (SELECT RowNumber frOM #DuplicateCategory DC 
								 INNER JOIN ZnodePimAttribute PA ON (PCD.PimAttributeId = PA.PimAttributeId)
								 WHERE PA.AttributeCode = 'CategoryCode' 
								 AND PCD.AttributeValue = DC.AttributeValue )

			
			 ----update mediaid for CategoryImage
			 select zm.FileName,max(MediaId) as MediaId, PCD.RowNumber
			 into #CategoryImage
			 from ZnodeMedia ZM
			 inner join @PimCategoryDetail PCD on ZM.FileName = PCD.AttributeValue
			 where exists(select * from ZnodePimAttribute c where PCD.PimAttributeId = c.PimAttributeId and c.AttributeCode = 'CategoryImage')
			 group by zm.FileName, PCD.RowNumber 
			 
			update a set a.AttributeValue = b.MediaId
			from @PimCategoryDetail a
			inner join #CategoryImage b on a.AttributeValue = b.FileName and a.RowNumber = b.RowNumber
				
			 ----update PimCategoryId present in znode on basis of CategoryCode
			 update d set  d.PimCategoryId = a.PimCategoryId
			 from ZnodePimCategoryAttributeValue a
			 inner join ZnodePimCategoryAttributeValueLocale b on a.PimCategoryAttributeValueId = b.PimCategoryAttributeValueId
			 inner join ZnodePimAttribute c on a.PimAttributeId = c.PimAttributeId
			 inner join @PimCategoryDetail d on d.AttributeValue = b.CategoryValue and c.PimAttributeId = d.PimAttributeId
			 where c.AttributeCode = 'CategoryCode' 

			 ----update PimCategoryId for other attributes if category is present
			 ;WITH CTE_UpdateCategoryId AS
			(
				select PimCategoryId, RowNumber from @PimCategoryDetail where isnull(PimCategoryId,0) <> 0
			)
			UPDATE PCD set PCD.PimCategoryId = UC.PimCategoryId
			FROM @PimCategoryDetail PCD
			INNER JOIN CTE_UpdateCategoryId UC on PCD.RowNumber = UC.RowNumber
			 ---------------------------

             -- Pass product records one by one 
             DECLARE @IncrementalId INT= 1;
             DECLARE @SequenceId INT=
             (
                 SELECT MAX(RowNumber)
                 FROM @PimCategoryDetail
             );
             DECLARE @PimCategoryDetailToInsert PIMCATEGORYDETAIL;  --User define table type to pass multiple records of product in single step

             WHILE @IncrementalId <= @SequenceId
                 BEGIN
                     INSERT INTO @PimCategoryDetailToInsert
                     ([PimCategoryId],
                      [PimAttributeId],
                      [PimAttributeValueId],
                      [PimAttributeDefaultValueId],
                      [PimAttributeFamilyId],
                      [LocaleId],
                      [AttributeCode],
                      [AttributeValue]
                     )
                            SELECT [PimCategoryId],
                                   [PimAttributeId],
                                   [PimAttributeValueId],
                                   [PimAttributeDefaultValueId],
                                   [PimAttributeFamilyId],
                                   [LocaleId],
                                   [AttributeCode],
                                   [AttributeValue]
                            FROM @PimCategoryDetail
                            WHERE [@PimCategoryDetail].RowNumber = @IncrementalId AND LTRIM(RTRIM([AttributeValue])) <> '';
                     --ORDER BY [@PimCategoryDetail].RowNumber;
                     ----Call process to finally insert data into 
                     ----------------------------------------------------------
                     --1. [dbo].[ZnodePimProduct]
                     --2. [dbo].[ZnodePimAttributeValue]
                     --3. [dbo].[ZnodePimAttributeValueLocale]

                     EXEC [Znode_ImportInsertUpdatePimCategory]
                          @InsertCategory = @PimCategoryDetailToInsert,
                          @UserID = @UserID,
                          @status = @status OUT,
						  @IsImport=1;--,@IsNotReturnOutput=1;
                     DELETE FROM @PimCategoryDetailToInsert;
                     SET @IncrementalId = @IncrementalId + 1;
                 END;

			
				-- Update Record count in log 
				DECLARE @FailedRecordCount BIGINT
				DECLARE @SuccessRecordCount BIGINT
				SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
				SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
				EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount OUTPUT
				UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
				WHERE ImportProcessLogId = @ImportProcessLogId;
				

             UPDATE ZnodeImportProcessLog
             SET   Status = dbo.Fn_GetImportStatus(2),
                   ProcessCompletedDate = @GetDate
             WHERE ImportProcessLogId = @ImportProcessLogId;		   	  
            
			IF OBJECT_ID('tempdb.dbo.#DuplicateCategory', 'U') IS NOT NULL 
		     DROP TABLE tempdb.dbo.#DuplicateCategory

         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE(),
                    ERROR_LINE(),
                    ERROR_PROCEDURE();
             UPDATE ZnodeImportProcessLog
               SET
                   Status = dbo.Fn_GetImportStatus(3),
                   ProcessCompletedDate = @GetDate
             WHERE ImportProcessLogId = @ImportProcessLogId;
            
         END CATCH;
     END;
	 GO
	 Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'StoreExperience','List',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'StoreExperience' and ActionName = 'List')


insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy ,CreatedDate,	ModifiedBy, ModifiedDate )
select 
 (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Store Experience' AND ControllerName = 'StoreExperience')	
    ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'StoreExperience' and ActionName= 'List') ,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
     (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Store Experience' AND ControllerName = 'StoreExperience') and ActionId = 
     (select TOP 1 ActionId from ZnodeActions where ControllerName = 'StoreExperience' and ActionName= 'List'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy ,CreatedDate,	ModifiedBy, ModifiedDate )
select 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Store Experience' AND ControllerName = 'StoreExperience'),
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'StoreExperience' and ActionName= 'List')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Store Experience' AND ControllerName = 'StoreExperience') and ActionId = 
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'StoreExperience' and ActionName= 'List'))

GO


IF  EXISTS (SELECT * FROM   sys.objects WHERE  type IN( 'F' ) and OBJECT_NAME(parent_object_id) = 'ZnodeCMSWidgetCategory' and name ='FK_ZnodeCMSOfferPageCategory_ZnodePublishCategory')
BEGIN 
ALTER TABLE ZnodeCMSWidgetCategory DROP CONSTRAINT FK_ZnodeCMSOfferPageCategory_ZnodePublishCategory
END

GO

IF  EXISTS (SELECT * FROM   sys.objects WHERE  type IN( 'F' ) and OBJECT_NAME(parent_object_id) = 'ZnodeCMSWidgetCategory' and name ='FK_ZnodeCMSWidgetCategory_ZnodePublishCategory')
BEGIN 
ALTER TABLE ZnodeCMSWidgetCategory DROP CONSTRAINT FK_ZnodeCMSWidgetCategory_ZnodePublishCategory
END

GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.columns WHERE TABLE_NAME = 'ZnodeCMSWidgetCategory' and column_name = 'PublishCategoryId')
BEGIN
	ALTER TABLE ZnodeCMSWidgetCategory ALTER COLUMN PublishCategoryId INT NULL
END
GO

IF NOT EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeCMSWidgetCategory' AND COLUMN_NAME = 'CategoryCode')
BEGIN 
	ALTER TABLE [dbo].[ZnodeCMSWidgetCategory]
    ADD [CategoryCode] VARCHAR(600) NULL
      
END
GO

IF  EXISTS (SELECT * FROM   sys.objects WHERE  type IN( 'F' ) and OBJECT_NAME(parent_object_id) = 'ZnodeCMSWidgetProduct' and name ='FK_ZnodeCMSOfferPageProduct_ZnodePublishProduct')
BEGIN 
ALTER TABLE ZnodeCMSWidgetProduct DROP CONSTRAINT FK_ZnodeCMSOfferPageProduct_ZnodePublishProduct
END

GO

IF  EXISTS (SELECT * FROM   sys.objects WHERE  type IN( 'F' ) and OBJECT_NAME(parent_object_id) = 'ZnodeCMSWidgetProduct' and name ='FK_ZnodeCMSWidgetProduct_ZnodePublishProduct')
BEGIN 
ALTER TABLE ZnodeCMSWidgetProduct DROP CONSTRAINT FK_ZnodeCMSWidgetProduct_ZnodePublishProduct
END

GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.columns WHERE TABLE_NAME = 'ZnodeCMSWidgetProduct' and column_name = 'PublishProductId')
BEGIN
	ALTER TABLE ZnodeCMSWidgetProduct ALTER COLUMN PublishProductId INT NULL
END
GO

IF NOT EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeCMSWidgetProduct' AND COLUMN_NAME = 'SKU')
BEGIN 
	ALTER TABLE [dbo].[ZnodeCMSWidgetProduct]
    ADD [SKU] VARCHAR(600) NULL
      
END
GO

UPDATE ZCCR set ZCCR.SKU = ZPPD.SKU
FROM ZnodePublishProductDetail ZPPD
INNER JOIN ZnodeCMSWidgetProduct ZCCR on ZPPD.PublishProductId = ZCCR.PublishProductId
INNER JOIN ZnodePublishProduct ZPP on ZPPD.PublishProductId = ZPP.PublishProductId
where ZCCR.SKU is null

GO
UPDATE ZCCR set ZCCR.CategoryCode = ZPPD.CategoryCode
FROM ZnodePublishCategoryDetail ZPPD
INNER JOIN ZnodeCMSWidgetCategory ZCCR on ZPPD.PublishCategoryId = ZCCR.PublishCategoryId
INNER JOIN ZnodePublishCategory ZPP on ZPPD.PublishCategoryId = ZPP.PublishCategoryId
where ZCCR.CategoryCode is null 

GO
UPDATE ZnodeApplicationSetting 
SET Setting='<?xml version="1.0" encoding="utf-16"?> <columns>  <column>   <id>1</id>   <name>CategoryCode</name>   <headertext>Checkbox</headertext>   <width>0</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>y</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>2</id>   <name>CategoryCode</name>   <headertext>Category Code</headertext>   <width>0</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>3</id>   <name>CategoryName</name>   <headertext>Category Name</headertext>   <width>0</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column> </columns>'
WHERE ItemName ='AssociateCategorytToSpecialOffer'

GO
UPDATE ZnodeApplicationSetting 
SET Setting='<?xml version="1.0" encoding="utf-16"?> <columns>  <column>   <id>1</id>   <name>CMSWidgetCategoryId</name>   <headertext>Checkbox</headertext>   <width>0</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>false</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>y</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>2</id>   <name>CategoryCode</name>   <headertext>Category Code</headertext>   <width>0</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>3</id>   <name>CategoryName</name>   <headertext>Category Name</headertext>   <width>30</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>4</id>   <name>DisplayOrder</name>   <headertext>Display Order</headertext>   <width>0</width>   <datatype>Int32</datatype>   <columntype>Int32</columntype>   <allowsorting>false</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>3</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>y</iscontrol>   <controltype>Text</controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>5</id>   <name>Manage</name>   <headertext>Action</headertext>   <width>0</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>false</allowsorting>   <allowpaging>true</allowpaging>   <format>Edit|Delete</format>   <isvisible>y</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext>Edit|Delete</displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl>/WebSite/EditCMSWidgetCategory|/WebSite/RemoveAssociatedCategories</manageactionurl>   <manageparamfield>cmsWidgetCategoryId|cmsWidgetCategoryId</manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column> </columns>'
WHERE ItemName ='ZnodeCMSWidgetCategory'

GO

UPDATE ZnodeApplicationSetting 
SET Setting='<?xml version="1.0" encoding="utf-16"?> <columns>  <column>   <id>1</id>   <name>CMSWidgetProductId</name>   <headertext>Checkbox</headertext>   <width>30</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>false</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>y</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>2</id>   <name>SKU</name>   <headertext>SKU</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>3</id>   <name>Image</name>   <headertext>Image</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>false</allowsorting>   <allowpaging>false</allowpaging>   <format></format>   <isvisible>n</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield>ImagePath,ProductImage</imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class>imageicon</Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>4</id>   <name>ProductName</name>   <headertext>Product Name</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>5</id>   <name>ProductType</name>   <headertext>Product Type</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>false</allowsorting>   <allowpaging>false</allowpaging>   <format></format>   <isvisible>n</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>6</id>   <name>CreatedDate</name>   <headertext>Created Date</headertext>   <width>40</width>   <datatype>DateTime</datatype>   <columntype>DateTime</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>n</isvisible>   <mustshow>n</mustshow>   <musthide>y</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>7</id>   <name>ModifiedDate</name>   <headertext>Modified Date</headertext>   <width>40</width>   <datatype>DateTime</datatype>   <columntype>DateTime</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>n</isvisible>   <mustshow>n</mustshow>   <musthide>y</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>8</id>   <name>DisplayOrder</name>   <headertext>Display Order</headertext>   <width>0</width>   <datatype>Int32</datatype>   <columntype>Int32</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>3</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>y</iscontrol>   <controltype>Text</controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>9</id>   <name>Manage</name>   <headertext>Action</headertext>   <width>30</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>false</allowsorting>   <allowpaging>true</allowpaging>   <format>Edit|Delete</format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext>Edit|Delete</displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl>/WebSite/EditCMSAssociateProduct|/WebSite/UnassociateProduct</manageactionurl>   <manageparamfield>CMSWidgetProductId|CMSWidgetProductId</manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column> </columns>'
WHERE ItemName ='AssociatedCMSOfferPageProduct'

GO
UPDATE ZnodeApplicationSetting 
SET Setting='<?xml version="1.0" encoding="utf-16"?> <columns><column>   <id>1</id>   <name>SKU</name>   <headertext>Checkbox</headertext>   <width>30</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>false</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>y</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>2</id>   <name>SKU</name>   <headertext>SKU</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>3</id>   <name>Image</name>   <headertext>Image</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>false</allowsorting>   <allowpaging>false</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield>ImagePath,ProductImage</imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class>imageicon</Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>4</id>   <name>ProductName</name>   <headertext>Product Name</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column></columns>'
WHERE ItemName ='UnAssociatedCMSOfferPageProduct'

GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_DeletePublishCatalogProduct')
BEGIN 
	DROP PROCEDURE Znode_DeletePublishCatalogProduct
END
GO

CREATE PROCEDURE [dbo].[Znode_DeletePublishCatalogProduct]
(   
   	@PublishProductIds	Transferid READONLY 
	,@PublishCatalogId   INT = 0 
	,@PimCategoryHierarchyId int = 0 
	,@PimCatalogId int = 0 
	
)
AS
   /*
    Summary:Delete the publish product from all related references 
    Unit Testing   
	begin tran
	SELECT * FROM ZnodePublishCatalog 
    EXEC Znode_DeletePublishCatalog @PublishCatalogIds =5 ,@IsDeleteCatalogId = 1 , @PublishCategoryIds = ''
	rollback tran
   */ 
     BEGIN
         BEGIN TRANSACTION A;
         BEGIN TRY
             SET NOCOUNT ON;
	
	         DECLARE @TBL_DeleteIds TABLE (PublishCatalogId INT ,PublishCategoryId INT ,PublishProductId INT )  
			 DECLARE @TBL_DeleteCategoryProduct TABLE (PublishCategoryProductId INT )			 
			 DECLARE @TBL_CategoryCategoryHierarchyIds TABLE (CategoryId int , ParentCategoryId int )
			 
		
			If @PimCategoryHierarchyId <> 0 AND @PimCatalogId <>  0 
			Begin
				INSERT INTO @TBL_CategoryCategoryHierarchyIds(CategoryId , ParentCategoryId )
				Select Distinct PimCategoryId , Null FROM (
				SELECT PimCategoryId,ParentPimCategoryId from DBO.[Fn_GetRecurciveCategoryIds](@PimCategoryHierarchyId,@PimCatalogId)
				Union 
				Select PimCategoryId , null  from ZnodePimCategoryHierarchy where PimCategoryHierarchyId = @PimCategoryHierarchyId 
				Union 
				Select PimCategoryId , null  from [Fn_GetRecurciveCategoryIds_new] (@PimCategoryHierarchyId,@PimCatalogId) ) Category  


				INSERT INTO @TBL_DeleteIds (PublishCatalogId,PublishProductId,PublishCategoryId  )
				 SELECT ZPP.PublishCatalogId,ZPP.PublishProductId ,ZPCP.PublishCategoryId
				 FROM ZnodePublishProduct  ZPP 
				 INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId) 
				 LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND ZPCP.PublishProductId = ZPP.PublishProductId )
				 LEFT JOIN ZnodePublishCategory  ZPPC ON (ZPPC.PublishCatalogId = ZPC.PublishCatalogId AND ZPPC.PublishCategoryId = ZPCP.PublishCategoryId)
				 AND ZPPC.PimCategoryId in 
							(
								Select CategoryId from @TBL_CategoryCategoryHierarchyIds
							) 
				 WHERE EXISTS (SELECT TOP 1 1 FROM @PublishProductIds ZPCC WHERE ZPCC.Id = ZPP.PublishProductId )
				 
				 --AND NOT EXISTS ( SELECT * FROM ZnodePublishedXML PX where zpp.PublishProductId = PX.PublishedId )
			 
				 INSERT INTO @TBL_DeleteCategoryProduct 
				 SELECT PublishCategoryProductId 
				 FROM ZnodePublishCategoryProduct a 
				 INNER JOIN ZnodePublishProduct ZPP ON (ZPP.PublishProductId = a.PublishProductId AND ZPP.PublishCatalogId = a.PublishCatalogId)
				 INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = a.PublishCatalogId )
				 INNER JOIN ZnodePublishCategory ZPCC ON (ZPCC.PublishCategoryId = a.PublishCategoryId)
				 WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimCatalogCategory ZPDF WHERE ZPDF.PimCatalogId = ZPC.PimCatalogId AND ZPDF.PimCategoryId = ZPCC.PimCategoryId AND ZPDF.PimProductId = ZPP.PimProductId  )
				 AND ZPCC.PimCategoryId in 
							(
								Select CategoryId from @TBL_CategoryCategoryHierarchyIds
							) 


				 AND a.PublishCatalogId = @PublishCatalogId
			END 
			Else 
			Begin
				 INSERT INTO @TBL_DeleteIds (PublishCatalogId,PublishProductId,PublishCategoryId  )
				 SELECT ZPP.PublishCatalogId,ZPP.PublishProductId ,ZPCP.PublishCategoryId
				 FROM ZnodePublishProduct  ZPP 
				 INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId) 
				 LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND ZPCP.PublishProductId = ZPP.PublishProductId )
				 LEFT JOIN ZnodePublishCategory  ZPPC ON (ZPPC.PublishCatalogId = ZPC.PublishCatalogId AND ZPPC.PublishCategoryId = ZPCP.PublishCategoryId)
				 WHERE EXISTS (SELECT TOP 1 1 FROM @PublishProductIds ZPCC WHERE ZPCC.Id = ZPP.PublishProductId )

				 --AND NOT EXISTS ( SELECT * FROM ZnodePublishedXML PX where zpp.PublishProductId = PX.PublishedId )
			 
				 INSERT INTO @TBL_DeleteCategoryProduct 
				 SELECT PublishCategoryProductId 
				 FROM ZnodePublishCategoryProduct a 
				 INNER JOIN ZnodePublishProduct ZPP ON (ZPP.PublishProductId = a.PublishProductId AND ZPP.PublishCatalogId = a.PublishCatalogId)
				 INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = a.PublishCatalogId )
				 INNER JOIN ZnodePublishCategory ZPCC ON (ZPCC.PublishCategoryId = a.PublishCategoryId)
				 WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimCatalogCategory ZPDF WHERE ZPDF.PimCatalogId = ZPC.PimCatalogId AND ZPDF.PimCategoryId = ZPCC.PimCategoryId AND ZPDF.PimProductId = ZPP.PimProductId  )
				 --AND NOT EXISTS ( SELECT * FROM ZnodePublishedXML PX where a.PublishProductId = PX.PublishedId )
				 AND a.PublishCatalogId = @PublishCatalogId
			 END 
					
						
		     UPDATE 	TBL 
			 SET PublishCategoryId = NULL 
			 FROM @TBL_DeleteIds TBL 
			 WHERE  EXISTS  (SELECT TOP 1 1 FROM ZnodePublishCategoryProduct ZPCC 
			 WHERE  TBL.PublishCatalogId = ZPCC.PublishCatalogId AND ZPCC.PublishCategoryId = TBL.PublishCategoryId   AND TBL.PublishProductId <> ZPCC.PublishProductId ) 			 

			 --DELETE FROM [ZnodeCMSWidgetCategory]
    --         WHERE EXISTS
    --         (
    --             SELECT TOP 1 1
    --             FROM @TBL_DeleteIds AS w
    --             WHERE w.[PublishCategoryId] = [ZnodeCMSWidgetCategory].[PublishCategoryId]
    --         )
			
			 --;
         
    --         DELETE FROM [ZnodeCMSWidgetProduct]
    --         WHERE EXISTS
    --         (
    --             SELECT TOP 1 1
    --             FROM @TBL_DeleteIds AS qw
    --             WHERE qw.[PublishProductId] = [ZnodeCMSWidgetProduct].[PublishProductId]
    --         );
             --DELETE FROM [ZnodeCMSCustomerReview]
             --WHERE EXISTS
             --(
             --    SELECT TOP 1 1
             --    FROM @TBL_DeleteIds AS qw
             --    WHERE qw.[PublishProductId] = [ZnodeCMSCustomerReview].[PublishProductId]
             --);
             DELETE FROM ZnodeUserWishList
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE EXISTS
                 (
                     SELECT TOP 1 1
                     FROM ZnodePublishProductDetail ZPPD
                     WHERE ZPPD.SKU = ZnodeUserWishList.SKU
                           AND qw.[PublishProductId] = ZPPD.[PublishProductId]
                 )
             );
            

             DELETE FROM [ZnodePromotionProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishProductId] = [ZnodePromotionProduct].[PublishProductId]
             );
             DELETE FROM [ZnodePromotionCategory]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS w
                 WHERE w.[PublishCategoryId] = [ZnodePromotionCategory].[PublishCategoryId]
             );
             DELETE FROM [ZnodePublishCategoryDetail]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS w
                 WHERE w.[PublishCategoryId] = [ZnodePublishCategoryDetail].[PublishCategoryId]
             );	
            
             --DELETE FROM ZnodeCMSSEODetailLocale
             --WHERE EXISTS
             --(
             --    SELECT TOP 1 1
             --    FROM [ZnodeCMSSEODetail]
             --    WHERE EXISTS
             --    (
             --        SELECT TOP 1 1
             --        FROM @TBL_DeleteIds AS qw
             --        WHERE qw.[PublishProductId] = [ZnodeCMSSEODetail].[SEOId]
             --    )
             --          AND EXISTS
             --    (
             --        SELECT TOP 1 1
             --        FROM [ZnodeCMSSEOType] AS we
             --        WHERE we.[CMSSEOTypeId] = [ZnodeCMSSEODetail].[CMSSEODetailId]
             --              AND [Name] = 'Product'
             --    )
             --          AND [ZnodeCMSSEODetail].CMSSEODetailId = ZnodeCMSSEODetailLocale.CMSSEODetailId
             --);
             --DELETE FROM [ZnodeCMSSEODetail]
             --WHERE EXISTS
             --(
             --    SELECT TOP 1 1
             --    FROM @TBL_DeleteIds AS qw
             --    WHERE qw.[PublishProductId] = [ZnodeCMSSEODetail].[SEOId]
             --)
             --      AND EXISTS
             --(
             --    SELECT TOP 1 1
             --    FROM [ZnodeCMSSEOType] AS we
             --    WHERE we.[CMSSEOTypeId] = [ZnodeCMSSEODetail].[CMSSEODetailId]
             --          AND [Name] = 'Product'
             --);
            
             DELETE FROM [ZnodePublishCategoryProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishProductId] = [ZnodePublishCategoryProduct].[PublishProductId]
             )
			 OR 
			 EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteCategoryProduct AS qw
                 WHERE qw.PublishCategoryProductId = [ZnodePublishCategoryProduct].PublishCategoryProductId
             )
			 ;
             DELETE FROM [ZnodePublishCategoryProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS w
                 WHERE w.[PublishCategoryId] = [ZnodePublishCategoryProduct].[PublishCategoryId]
             );
			  DELETE FROM dbo.ZnodeSearchGlobalProductBoost WHERE 
			 EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishProductId] = ZnodeSearchGlobalProductBoost.[PublishProductId]
              );
             DELETE FROM [ZnodePublishProductDetail]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishProductId] = [ZnodePublishProductDetail].[PublishProductId]
             );
             DELETE FROM [ZNodePublishProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishProductId] = [ZNodePublishProduct].[PublishProductId]
             
			 );
		
			 DELETE FROM ZnodePublishCategoryDetail 
			 WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishCategoryId] = ZnodePublishCategoryDetail.[PublishCategoryId]
              );
			
			DELETE FROM ZnodeSearchGlobalProductCategoryBoost 
			 WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishCategoryId] = ZnodeSearchGlobalProductCategoryBoost.[PublishCategoryId]
             
			 );
			 DELETE FROM ZnodePublishCategory
			 WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishCategoryId] = ZnodePublishCategory.[PublishCategoryId]
             
			 );

			 			 				
             COMMIT TRANSACTION A;
			 
         END TRY
         BEGIN CATCH
		      SELECT ERROR_MESSAGE() 
			 
         END CATCH;
     END;
	 GO
	 
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_DeletePublishCatalog')
BEGIN 
	DROP PROCEDURE Znode_DeletePublishCatalog
END
GO


CREATE PROCEDURE [dbo].[Znode_DeletePublishCatalog]
(   @PublishCatalogIds  VARCHAR(1000),
	@PublishCategoryIds VARCHAR(1000) = NULL,
	@PublishProductIds  VARCHAR(1000) = NULL,
	@IsDeleteCatalogId  BIT           = 0)
AS
   /*
    Summary:Delete the publish product from all related references 
    Unit Testing   
	begin tran
	SELECT * FROM ZnodePublishCatalog 
    EXEC Znode_DeletePublishCatalog @PublishCatalogIds =5 ,@IsDeleteCatalogId = 1 , @PublishCategoryIds = ''
	rollback tran
   */ 
     BEGIN
         BEGIN TRANSACTION A;
         BEGIN TRY
             SET NOCOUNT ON;
	
             DECLARE @TBL_DeletedCatalog TABLE(PublishCatalogId INT);
             DECLARE @TBL_DeletedCategory TABLE([PublishCategoryId] INT);
             DECLARE @TBL_DeleteProduct TABLE([PublishProductId] INT);
             INSERT INTO @TBL_DeletedCatalog
                    SELECT [item]
                    FROM [dbo].[Split](@PublishCatalogIds, ',');

             INSERT INTO @TBL_DeletedCategory
                    SELECT PublishCategoryId
                    FROM ZnodePublishCategory AS PC
                    WHERE( EXISTS
                         (
                             SELECT TOP 1 1
                             FROM [dbo].[Split](@PublishCategoryIds, ',') AS m
                             WHERE m.Item = PC.PublishCategoryId
                         ));

             INSERT INTO @TBL_DeleteProduct
                    SELECT [PublishProductId]
                    FROM [ZNodePublishProduct] AS adf
                    WHERE(EXISTS
                         (
                             SELECT TOP 1 1
                             FROM [dbo].[Split](@PublishProductIds, ',') AS de
                             WHERE de.[Item] = adf.[PublishProductId]
                         )
                   );
             --DELETE FROM [ZnodeCMSWidgetCategory]
             --WHERE EXISTS
             --(
             --    SELECT TOP 1 1
             --    FROM @TBL_DeletedCategory AS w
             --    WHERE w.[PublishCategoryId] = [ZnodeCMSWidgetCategory].[PublishCategoryId]
             --);
         
             --DELETE FROM [ZnodeCMSWidgetProduct]
             --WHERE EXISTS
             --(
             --    SELECT TOP 1 1
             --    FROM @TBL_DeleteProduct AS qw
             --    WHERE qw.[PublishProductId] = [ZnodeCMSWidgetProduct].[PublishProductId]
             --);
             DELETE FROM [ZnodeCMSCustomerReview]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteProduct AS qw
                 WHERE qw.[PublishProductId] = [ZnodeCMSCustomerReview].[PublishProductId]
             );
             DELETE FROM ZnodeUserWishList
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteProduct AS qw
                 WHERE EXISTS
                 (
                     SELECT TOP 1 1
                     FROM ZnodePublishProductDetail ZPPD
                     WHERE ZPPD.SKU = ZnodeUserWishList.SKU
                           AND qw.[PublishProductId] = ZPPD.[PublishProductId]
                 )
             );
            

             DELETE FROM [ZnodePromotionProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteProduct AS qw
                 WHERE qw.[PublishProductId] = [ZnodePromotionProduct].[PublishProductId]
             );
             DELETE FROM [ZnodePromotionCategory]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeletedCategory AS w
                 WHERE w.[PublishCategoryId] = [ZnodePromotionCategory].[PublishCategoryId]
             );
             DELETE FROM [ZnodePublishCategoryDetail]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeletedCategory AS w
                 WHERE w.[PublishCategoryId] = [ZnodePublishCategoryDetail].[PublishCategoryId]
             );	
            
             --DELETE FROM ZnodeCMSSEODetailLocale
             --WHERE EXISTS
             --(
             --    SELECT TOP 1 1
             --    FROM [ZnodeCMSSEODetail]
             --    WHERE EXISTS
             --    (
             --        SELECT TOP 1 1
             --        FROM @TBL_DeleteProduct AS qw
             --        WHERE qw.[PublishProductId] = [ZnodeCMSSEODetail].[SEOId]
             --    )
             --          AND EXISTS
             --    (
             --        SELECT TOP 1 1
             --        FROM [ZnodeCMSSEOType] AS we
             --        WHERE we.[CMSSEOTypeId] = [ZnodeCMSSEODetail].[CMSSEODetailId]
             --              AND [Name] = 'Product'
             --    )
             --          AND [ZnodeCMSSEODetail].CMSSEODetailId = ZnodeCMSSEODetailLocale.CMSSEODetailId
             --);
             --DELETE FROM [ZnodeCMSSEODetail]
             --WHERE EXISTS
             --(
             --    SELECT TOP 1 1
             --    FROM @TBL_DeleteProduct AS qw
             --    WHERE qw.[PublishProductId] = [ZnodeCMSSEODetail].[SEOId]
             --)
             --      AND EXISTS
             --(
             --    SELECT TOP 1 1
             --    FROM [ZnodeCMSSEOType] AS we
             --    WHERE we.[CMSSEOTypeId] = [ZnodeCMSSEODetail].[CMSSEODetailId]
             --          AND [Name] = 'Product'
             --);
            
             DELETE FROM [ZnodePublishCategoryProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteProduct AS qw
                 WHERE qw.[PublishProductId] = [ZnodePublishCategoryProduct].[PublishProductId]
             );
             DELETE FROM [ZnodePublishCategoryProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeletedCategory AS w
                 WHERE w.[PublishCategoryId] = [ZnodePublishCategoryProduct].[PublishCategoryId]
             );
             DELETE FROM [ZnodePublishProductDetail]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteProduct AS qw
                 WHERE qw.[PublishProductId] = [ZnodePublishProductDetail].[PublishProductId]
             );
             DELETE FROM [ZNodePublishProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteProduct AS qw
                 WHERE qw.[PublishProductId] = [ZNodePublishProduct].[PublishProductId]
             
			 );

			 --DELETE FROM ZnodePublishCategoryDetail 
			 -- WHERE EXISTS
			 --(
				--SELECT TOP 1 1 
				--FROM @TBL_DeletedCategory AS w
				--WHERE w.PublishCategoryId = ZnodePublishCategoryDetail.PublishCategoryId			 
			 --);

			 DELETE FROM ZnodePublishCategory
			 WHERE EXISTS
			 (
				SELECT TOP 1 1 
				FROM @TBL_DeletedCategory AS w
				WHERE w.PublishCategoryId = ZnodePublishCategory.PublishCategoryId			 
			 );

			 DELETE FROM ZnodePublishCategoryProduct 
			 WHERE [PublishCatalogId] = @PublishCatalogIds AND @IsDeleteCatalogId = 1

			 DELETE FROM ZnodePublishProductDetail 
			 WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePublishProduct  
						WHERE [PublishCatalogId] = @PublishCatalogIds AND @IsDeleteCatalogId = 1 
						AND ZnodePublishProductDetail.PublishProductId = ZnodePublishProduct.PublishProductId  )
             DELETE FROM ZnodePublishProduct  
						WHERE [PublishCatalogId] = @PublishCatalogIds AND @IsDeleteCatalogId = 1 

			 DELETE FROM ZnodePublishCategoryDetail 
			 WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePublishCategory  
						WHERE [PublishCatalogId] = @PublishCatalogIds AND @IsDeleteCatalogId = 1 
						AND ZnodePublishCategoryDetail.PublishCategoryId = ZnodePublishCategory.PublishCategoryId)
             DELETE FROM ZnodePublishCategory  
						WHERE [PublishCatalogId] = @PublishCatalogIds AND @IsDeleteCatalogId = 1 

			 DELETE FROM ZnodePublishedXml WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePublishCataLogLog 
						WHERE [PublishCatalogId] = @PublishCatalogIds AND @IsDeleteCatalogId = 1 
						AND ZnodePublishedXml.PublishCatalogLogId = ZnodePublishCataLogLog.PublishCatalogLogId  )

			 DELETE FROM ZnodePublishCataLogLog WHERE [PublishCatalogId] = @PublishCatalogIds AND @IsDeleteCatalogId = 1;

			 DELETE FROM znodeSearchIndexServerStatus 
					WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeSearchIndexMonitor a WHERE EXISTS 
					(SELECT TOP 1 1 FROM ZnodeCatalogIndex b WHERE b.publishcatalogid =@PublishCatalogIds AND @IsDeleteCatalogId = 1 AND b.catalogindexid = a.catalogindexid) AND a.SearchIndexMonitorid = znodeSearchIndexServerStatus.SearchIndexMonitorid )

			 DELETE FROM ZnodeSearchIndexMonitor
					WHERE EXISTS (SELECT TOP 1 1  FROM ZnodeCatalogIndex b where b.publishcatalogid =@PublishCatalogIds AND @IsDeleteCatalogId = 1 AND b.catalogindexid = ZnodeSearchIndexMonitor.catalogindexid)


			 DELETE FROM ZnodeCatalogIndex
			 WHERE publishcatalogid =@PublishCatalogIds AND @IsDeleteCatalogId = 1

			
             DELETE FROM ZnodePublishCatalog
             WHERE [PublishCatalogId] = @PublishCatalogIds
                   AND @PublishCategoryIds IS NULL
                   AND @PublishProductIds IS NULL
                   AND @IsDeleteCatalogId = 1;
				  
				
             COMMIT TRANSACTION A;
			 
         END TRY
         BEGIN CATCH
		     
			  DECLARE @Status BIT ;
              DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			  @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_DeletePublishCatalog @PublishCatalogIds = '''+ISNULL(@PublishCatalogIds,'''')+''',@PublishCategoryIds='''+ISNULL(@PublishCategoryIds,'''')+''',@PublishProductIds='''+ISNULL(@PublishProductIds,'''')+''',@IsDeleteCatalogId='+ISNULL(CAST(@IsDeleteCatalogId AS VARCHAR(200)),'''')+',@Status='+CAST(@Status AS VARCHAR(200));
             SET @Status = 0;
             SELECT 0 AS ID,
                    CAST(0 AS BIT) AS Status;
			 ROLLBACK TRAN A;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_DeletePublishCatalog',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
	 GO
	 
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishCategoryGroup')
BEGIN 
	DROP PROCEDURE Znode_GetPublishCategoryGroup
END
GO


CREATE  PROCEDURE [dbo].[Znode_GetPublishCategoryGroup]
(   
	@PublishCatalogId INT,
    @UserId           INT,
    @VersionId        INT,
    @Status           BIT = 0 OUT,
	@PimCategoryHierarchyId int = 0, 
    @IsDebug          BIT = 0,
	@LocaleId TransferId READONLY,
	@PublishStateId INT = 0 
)
AS 
/*

       Summary:Publish category with their respective products and details 
	            The result is fetched in xml form   
       Unit Testing   
       Begin transaction 
       SELECT * FROM ZnodePIMAttribute 
	   SELECT * FROM ZnodePublishCatalog 
	   SELECT * FROM ZnodePublishCategory WHERE publishCAtegoryID = 167 


       EXEC [Znode_GetPublishCategory] @PublishCatalogId = 5,@VersionId = 0 ,@UserId =2 ,@IsDebug = 1 
       EXEC [Znode_GetPublishCategory] @PublishCatalogId = 5,@VersionId = 0 ,@UserId =2 ,@IsDebug = 1 ,@PimCategoryHierarchyId = ? 


       Rollback Transaction 
	*/
     BEGIN
         BEGIN TRAN GetPublishCategory;
         BEGIN TRY
             SET NOCOUNT ON;
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @LocaleIdIn INT= 0, @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId(), @Counter INT= 1, @MaxId INT= 0, @CategoryIdCount INT;
             DECLARE @IsActive BIT= [dbo].[Fn_GetIsActiveTrue]();
             DECLARE @AttributeIds VARCHAR(MAX)= '', @PimCategoryIds VARCHAR(MAX)= '', @DeletedPublishCategoryIds VARCHAR(MAX)= '', @DeletedPublishProductIds VARCHAR(MAX);
             --get the pim catalog id 
			 DECLARE @PimCatalogId INT=(SELECT PimCatalogId FROM ZnodePublishcatalog WHERE PublishCatalogId = @PublishCatalogId); 

             DECLARE @TBL_AttributeIds TABLE
             (PimAttributeId       INT,
              ParentPimAttributeId INT,
              AttributeTypeId      INT,
              AttributeCode        VARCHAR(600),
              IsRequired           BIT,
              IsLocalizable        BIT,
              IsFilterable         BIT,
              IsSystemDefined      BIT,
              IsConfigurable       BIT,
              IsPersonalizable     BIT,
              DisplayOrder         INT,
              HelpDescription      VARCHAR(MAX),
              IsCategory           BIT,
              IsHidden             BIT,
              CreatedDate          DATETIME,
              ModifiedDate         DATETIME,
              AttributeName        NVARCHAR(MAX),
              AttributeTypeName    VARCHAR(300)
             );
             DECLARE @TBL_AttributeDefault TABLE
             (PimAttributeId            INT,
              AttributeDefaultValueCode VARCHAR(100),
              IsEditable                BIT,
              AttributeDefaultValue     NVARCHAR(MAX)
			  ,DisplayOrder   INT
             );
             DECLARE @TBL_AttributeValue TABLE
             (PimCategoryAttributeValueId INT,
              PimCategoryId               INT,
              CategoryValue               NVARCHAR(MAX),
              AttributeCode               VARCHAR(300),
              PimAttributeId              INT
             );
             DECLARE @TBL_LocaleIds TABLE
             (RowId     INT IDENTITY(1, 1),
              LocaleId  INT,
              IsDefault BIT
             );
             DECLARE @TBL_PimCategoryIds TABLE
             (PimCategoryId       INT,
              PimParentCategoryId INT,
              DisplayOrder        INT,
              ActivationDate      DATETIME,
              ExpirationDate      DATETIME,
              CategoryName        NVARCHAR(MAX),
              ProfileId           VARCHAR(MAX),
              IsActive            BIT,PimCategoryHierarchyId INT,ParentPimCategoryHierarchyId INT   ,
			  CategoryCode  NVARCHAR(MAX)    );


             DECLARE @TBL_PublishPimCategoryIds TABLE
             (PublishCategoryId       INT,
              PimCategoryId           INT,
              PublishProductId        varchar(max),
              PublishParentCategoryId INT ,
			  PimCategoryHierarchyId INT ,parentPimCategoryHierarchyId INT
			  
             );

			  DECLARE @TBL_PublishPimCategoryIdsLatest TABLE
             (PublishCategoryId       INT,
              PimCategoryId           INT,
              PublishProductId        varchar(max),
              PublishParentCategoryId INT ,
			  PimCategoryHierarchyId INT ,parentPimCategoryHierarchyId INT,PublishCatalogLogId INT,LocaleId INT 
			  ,RowIndex INT 
             );

             DECLARE @TBL_DeletedPublishCategoryIds TABLE
             (PublishCategoryId INT,
              PublishProductId  INT
             );

			     DECLARE @TBL_DeletedPublishCategoryIds_new TABLE
             (PublishCategoryId INT,
              PublishProductId  INT
             );
             DECLARE @TBL_CategoryXml TABLE
             (PublishCategoryId INT,
              CategoryXml       XML,
              LocaleId          INT
			  ,PublishCatalogLogId INT
             );
             INSERT INTO @TBL_LocaleIds
             (LocaleId,
              IsDefault
             )
			  -- here collect all locale ids
             SELECT LocaleId,IsDefault FROM ZnodeLocale mt WHERE IsActive = @IsActive
			  AND (EXISTS (SELECT TOP 1 1  FROM @LocaleId RT WHERE RT.Id = MT.LocaleId )
			 OR NOT EXISTS (SELECT TOP 1 1 FROM @LocaleId ));


			IF @PimCategoryHierarchyId > 0 
			Begin 
				 DECLARE @TBL_CategoryCategoryHierarchyIds TABLE (CategoryId int,ParentCategoryId int,PimCategoryHierarchyId INT ,ParentPimCategoryHierarchyId INT  ) 
				 INSERT INTO @TBL_CategoryCategoryHierarchyIds(CategoryId , ParentCategoryId, PimCategoryHierarchyId , ParentPimCategoryHierarchyId)
				 Select Distinct PimCategoryId , Null,PimCategoryHierarchyId,NULL FROM (
				 SELECT PimCategoryId,ParentPimCategoryId,PimCategoryHierarchyId,ParentPimCategoryHierarchyId from DBO.[Fn_GetRecurciveCategoryIds_PimCategoryHierarchy](@PimCategoryHierarchyId,@PimCatalogId)
				 Union 
				 Select PimCategoryId , null,PimCategoryHierarchyId,NULL  from ZnodePimCategoryHierarchy where PimCategoryHierarchyId = @PimCategoryHierarchyId 
				 Union 
				 Select PimCategoryId , null,PimCategoryHierarchyId,NULL  from [Fn_GetRecurciveCategoryIds_PimCategoryHierarchyIdNew] (@PimCategoryHierarchyId,@PimCatalogId) ) Category  

			
				 INSERT INTO @TBL_PimCategoryIds(PimCategoryId,PimParentCategoryId,DisplayOrder,ActivationDate,ExpirationDate,IsActive,PimCategoryHierarchyId,ParentPimCategoryHierarchyId)
				
				 SELECT DISTINCT ZPCH.PimCategoryId,ZPCH2.PimCategoryId  PimParentCategoryId,ZPCH.DisplayOrder,ZPCH.ActivationDate,ZPCH.ExpirationDate,ZPCH.IsActive ,ZPCH.PimCategoryHierarchyId,ZPCH.ParentPimCategoryHierarchyId
				 FROM ZnodePimCategoryHierarchy AS ZPCH 
				 LEFT JOIN ZnodePimCategoryHierarchy AS ZPCH2 ON (ZPCH2.PimCategoryHierarchyId = ZPCH. ParentPimCategoryHierarchyId ) 
				 WHERE ZPCH.PimCatalogId = @PimCatalogId  AND ZPCH.PimCategoryHierarchyId in 
				 (SELECT PimCategoryHierarchyId from @TBL_CategoryCategoryHierarchyIds where CategoryId is not null )  ; 
				
				-- Delete from @TBL_PimCategoryIds where PimCategoryId  in (
				-- select PimCategoryId  from ZnodePublishCategory where PublishCatalogId = @PublishCatalogId 
				--)
		
	
		  
				SELECT @VersionId  = PublishCatalogLogId from ZnodePublishCatalogLog where PublishCatalogId = @PublishCatalogId  and IsCatalogPublished =1 

			

			 	 INSERT INTO @TBL_DeletedPublishCategoryIds (PublishCategoryId,PublishProductId)
				 SELECT ZPC.PublishCategoryId,ZPCP.PublishProductId 
				 FROM ZnodePublishCategory AS ZPC 
				 LEFT JOIN  ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishCategoryId = ZPC.PublishCategoryId AND ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND  ZPCP.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId  )                                                  
				 LEFT JOIN ZnodePublishProduct ZPP ON (zpp.PublishProductId = zpcp.PublishProductId AND zpp.PublishCatalogId = zpcp.PublishCatalogId)
				 LEFT JOIN ZnodePublishCatalog ZPCC ON (ZPCC.PublishCatalogId = ZPCP.PublishCatalogId)
				 WHERE ZPC.PublishCatalogId = @PublishCataLogId 
				 --AND NOT EXISTS
				 --(SELECT TOP 1 1 FROM ZnodePimCatalogCategory AS TBPC WHERE TBPC.PimCategoryId = ZPC.PimCategoryId 
				 --AND TBPC.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId AND TBPC.PimProductId = ZPP.PimProductId 
				 --AND TBPC.PimCatalogId = ZPCC.PimCatalogId  AND  ZPCP.PimCategoryHierarchyId=  @PimCategoryHierarchyId   ) 
				 AND ZPC.ParentPimCategoryHierarchyId  in (@PimCategoryHierarchyId)
				 AND ZPC.PimCategoryHierarchyId NOT IN (select PimCategoryHierarchyId FROM @TBL_PimCategoryIds)  ;
				

				 INSERT INTO @TBL_DeletedPublishCategoryIds_new (PublishCategoryId,PublishProductId)
				  SELECT ZPC.PublishCategoryId,ZPCP.PublishProductId 
				 FROM ZnodePublishCategory AS ZPC 
				 LEFT JOIN  ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishCategoryId = ZPC.PublishCategoryId AND ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND  ZPCP.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId  )                                                  
				 LEFT JOIN ZnodePublishProduct ZPP ON (zpp.PublishProductId = zpcp.PublishProductId AND zpp.PublishCatalogId = zpcp.PublishCatalogId)
				 LEFT JOIN ZnodePublishCatalog ZPCC ON (ZPCC.PublishCatalogId = ZPCP.PublishCatalogId)
				 WHERE ZPC.PublishCatalogId = @PublishCataLogId 
				 AND ZPC.ParentPimCategoryHierarchyId  in (@PimCategoryHierarchyId)
				 AND ZPC.PimCategoryHierarchyId NOT IN (select PimCategoryHierarchyId FROM @TBL_PimCategoryIds)
				 AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimCategoryHierarchy TU WHERE TU.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId )  ;

			End
			ELSE 
			Begin
				INSERT INTO @TBL_PimCategoryIds(PimCategoryId,PimParentCategoryId,DisplayOrder,ActivationDate,ExpirationDate,IsActive,PimCategoryHierarchyId,ParentPimCategoryHierarchyId)
				SELECT DISTINCT ZPCH.PimCategoryId,ZPCH2.PimCategoryId  PimParentCategoryId,ZPCH.DisplayOrder,ZPCH.ActivationDate,ZPCH.ExpirationDate,ZPCH.IsActive ,ZPCH.PimCategoryHierarchyId,ZPCH.ParentPimCategoryHierarchyId
				FROM ZnodePimCategoryHierarchy AS ZPCH 
				LEFT JOIN ZnodePimCategoryHierarchy AS ZPCH2 ON (ZPCH2.PimCategoryHierarchyId = ZPCH. ParentPimCategoryHierarchyId ) 
				WHERE ZPCH.PimCatalogId = @PimCatalogId; 

			 -- AND IsActive = @IsActive ; -- As discussed with @anup active flag maintain on demo site 23/12/2016
			 --	SELECT * FROM @TBL_PimCategoryIds
			 -- here is find the deleted publish category id on basis of publish catalog

             INSERT INTO @TBL_DeletedPublishCategoryIds_new(PublishCategoryId,PublishProductId)
			 SELECT ZPC.PublishCategoryId,ZPCP.PublishProductId 
				 FROM ZnodePublishCategoryProduct ZPCP
				 INNER JOIN ZnodePublishCategory AS ZPC ON(ZPCP.PublishCategoryId = ZPC.PublishCategoryId AND ZPCP.PublishCatalogId = ZPC.PublishCatalogId)                                                  
				 INNER JOIN ZnodePublishProduct ZPP ON(zpp.PublishProductId = zpcp.PublishProductId AND zpp.PublishCatalogId = zpcp.PublishCatalogId)
				 INNER JOIN ZnodePublishCatalog ZPCC ON(ZPCC.PublishCatalogId = ZPCP.PublishCatalogId)
				 WHERE ZPC.PublishCatalogId = @PublishCataLogId 
				 AND NOT EXISTS
				 (SELECT TOP 1 1 FROM ZnodePimCatalogCategory AS TBPC WHERE TBPC.PimCategoryId = ZPC.PimCategoryId 
				 AND TBPC.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId AND TBPC.PimProductId = ZPP.PimProductId 
				 AND TBPC.PimCatalogId = ZPCC.PimCatalogId);

			End
			
          

			 -- here is find the deleted publish category id on basis of publish catalog
             SET @DeletedPublishCategoryIds = ISNULL(SUBSTRING((SELECT ','+CAST(PublishCategoryId AS VARCHAR(50)) FROM @TBL_DeletedPublishCategoryIds_new AS ZPC
                                              GROUP BY ZPC.PublishCategoryId FOR XML PATH('') ), 2, 4000), '');
			 -- here is find the deleted publish category id on basis of publish catalog
             SET @DeletedPublishProductIds = '';
			 -- Delete the publish category id 
	         EXEC Znode_DeletePublishCatalog @PublishCatalogIds = @PublishCatalogId,@PublishCategoryIds = @DeletedPublishCategoryIds,@PublishProductIds = @DeletedPublishProductIds; 
			
			

             MERGE INTO ZnodePublishCategory TARGET USING  @TBL_PimCategoryIds SOURCE ON
			 (
				 TARGET.PimCategoryId = SOURCE.PimCategoryId 
				 AND TARGET.PublishCatalogId = @PublishCataLogId 
				 AND TARGET.PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId
			 )
			 WHEN MATCHED THEN UPDATE SET TARGET.PimParentCategoryId = SOURCE.PimParentCategoryId,TARGET.CreatedBy = @UserId,TARGET.CreatedDate = @GetDate,
             TARGET.ModifiedBy = @UserId,TARGET.ModifiedDate = @GetDate,PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId,ParentPimCategoryHierarchyId=SOURCE.ParentPimCategoryHierarchyId
             WHEN NOT MATCHED THEN INSERT(PimCategoryId,PublishCatalogId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PimCategoryHierarchyId,ParentPimCategoryHierarchyId) 
			 VALUES(SOURCE.PimCategoryId,@PublishCatalogId,@UserId,@GetDate,@UserId,@GetDate,SOURCE.PimCategoryHierarchyId
			 ,SOURCE.ParentPimCategoryHierarchyId)
             OUTPUT INSERTED.PublishCategoryId,INSERTED.PimCategoryId,INSERTED.PimCategoryHierarchyId,
			 INSERTED.parentPimCategoryHierarchyId 
			 INTO @TBL_PublishPimCategoryIds(PublishCategoryId,PimCategoryId,PimCategoryHierarchyId,parentPimCategoryHierarchyId);
			       
				   
		     -- here update the publish parent category id
             UPDATE ZPC SET [PimParentCategoryId] =TBPC.[PimCategoryId] 
				FROM ZnodePublishCategory ZPC
				INNER JOIN ZnodePublishCategory TBPC ON(ZPC.parentPimCategoryHierarchyId = TBPC.PimCategoryHierarchyId  ) 
				WHERE ZPC.PublishCatalogId =@PublishCatalogId
				AND ZPC.ParentPimCategoryHierarchyId IS NOT NULL
				AND TBPC.PublishCatalogId =@PublishCatalogId
				AND ZPC.PimCategoryId in (select PimCategoryId FROM @TBL_PimCategoryIds);
				;
			 UPDATE a
				SET  a.PublishParentCategoryId = b.PublishCategoryId
				FROM ZnodePublishCategory a 
				INNER JOIN ZnodePublishCategory b   ON (a.parentpimCategoryHierarchyId = b.pimCategoryHierarchyId)
				WHERE a.parentpimCategoryHierarchyId IS NOT NULL 
				AND a.PublishCatalogId =@PublishCatalogId
				AND b.PublishCatalogId =@PublishCatalogId
				AND a.PimCategoryId in (select PimCategoryId FROM @TBL_PimCategoryIds);

			 --UPDATE ZPC SET [PimParentCategoryId] = TBPC.[PimCategoryId] 
			 --FROM ZnodePublishCategory ZPC
    --         INNER JOIN ZnodePublishCategory TBPC ON(ZPC.parentPimCategoryHierarchyId = TBPC.PimCategoryHierarchyId  ) 
			 --WHERE ZPC.PublishCatalogId =@PublishCatalogId
			 --AND ZPC.ParentPimCategoryHierarchyId IS NOT NULL ;

			 -- product are published here 
            --  EXEC Znode_GetPublishProducts @PublishCatalogId,0,@UserId,1,0,0;

             SET @MaxId =(SELECT MAX(RowId)FROM @TBL_LocaleIds);
			 DECLARE @TransferID TRANSFERID 
			 INSERT INTO @TransferID 
			 SELECT DISTINCT  PimCategoryId
			 FROM @TBL_PublishPimCategoryIds 

		          
			 INSERT INTO @TBL_PublishPimCategoryIdsLatest (PublishCategoryId,PimCategoryId,PublishProductId,
			PublishParentCategoryId,PimCategoryHierarchyId,parentPimCategoryHierarchyId, PublishCatalogLogId,
			LocaleId ) 
			 SELECT a.*,Max(b.PublishCatalogLogId) PublishCatalogLogId,b.LocaleId
			 FROM @TBL_PublishPimCategoryIds a
			 LEFT JOIN ZnodePublishCatalogLog b ON (b.PublishCatalogId = @PublishCatalogId)
			 WHERE EXISTS (SELECT TOP 1 1  FROM @LocaleId YTU WHERE YTU.Id = b.LocaleId )
			 AND b.PublishStateId = @PublishStateId
			 GROUP BY a.PublishCategoryId  ,PimCategoryId ,a.PublishProductId ,PublishParentCategoryId ,
			  PimCategoryHierarchyId  ,parentPimCategoryHierarchyId,b.LocaleId

			 			 
             WHILE @Counter <= @MaxId -- Loop on Locale id 
                 BEGIN
                     SET @LocaleIdIn =(SELECT LocaleId FROM @TBL_LocaleIds WHERE RowId = @Counter);
                   
				     SET @AttributeIds = SUBSTRING((SELECT ','+CAST(ZPCAV.PimAttributeId AS VARCHAR(50)) FROM ZnodePimCategoryAttributeValue ZPCAV 
										 WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimCategoryIds TBPC WHERE TBPC.PimCategoryId = ZPCAV.PimCategoryId) GROUP BY ZPCAV.PimAttributeId FOR XML PATH('')), 2, 4000);
                
				     SET @CategoryIdCount =(SELECT COUNT(1) FROM @TBL_PimCategoryIds);

                     INSERT INTO @TBL_AttributeIds (PimAttributeId,ParentPimAttributeId,AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable,IsSystemDefined,
					 IsConfigurable,IsPersonalizable,DisplayOrder,HelpDescription,IsCategory,IsHidden,CreatedDate,ModifiedDate,AttributeName,AttributeTypeName)
                     EXEC [Znode_GetPimAttributesDetails] @AttributeIds,@LocaleIdIn;

                     INSERT INTO @TBL_AttributeDefault (PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder)
                     EXEC [dbo].[Znode_GetAttributeDefaultValueLocale] @AttributeIds,@LocaleIdIn;

                     INSERT INTO @TBL_AttributeValue (PimCategoryAttributeValueId,PimCategoryId,CategoryValue,AttributeCode,PimAttributeId)
                     EXEC [dbo].[Znode_GetCategoryAttributeValueId] @TransferID,@AttributeIds,@LocaleIdIn;

					-- SELECT * FROM @TBL_AttributeValue WHERE PimCategoryId = 281


                     ;WITH Cte_UpdateDefaultAttributeValue
                     AS (
					  SELECT TBAV.PimCategoryId,TBAV.PimAttributeId,SUBSTRING((SELECT ','+AttributeDefaultValue FROM @TBL_AttributeDefault TBD WHERE TBAV.PimAttributeId = TBD.PimAttributeId
						AND EXISTS(SELECT TOP 1 1 FROM Split(TBAV.CategoryValue, ',') SP WHERE SP.Item = TBD.AttributeDefaultValueCode)FOR XML PATH('')), 2, 4000) DefaultCategoryAttributeValue
						FROM @TBL_AttributeValue TBAV WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_AttributeDefault TBAD WHERE TBAD.PimAttributeId = TBAV.PimAttributeId))
					 
					 -- update the default value with locale 
                     UPDATE TBAV SET CategoryValue = CTUDFAV.DefaultCategoryAttributeValue FROM @TBL_AttributeValue TBAV 
					 INNER JOIN Cte_UpdateDefaultAttributeValue CTUDFAV ON(CTUDFAV.PimCategoryId = TBAV.PimCategoryId AND CTUDFAV.PimAttributeId = TBAV.PimAttributeId)
					 WHERE CategoryValue IS NULL ;
					 
					 -- here is update the media path  
                     WITH Cte_productMedia
                     AS (SELECT TBA.PimCategoryId,TBA.PimAttributeId,[dbo].[FN_GetThumbnailMediaPathPublish](SUBSTRING((SELECT ','+zm.PATH FROM ZnodeMedia ZM WHERE EXISTS
					    (SELECT TOP 1 1 FROM dbo.split(TBA.CategoryValue, ',') SP WHERE SP.Item = CAST(Zm.MediaId AS VARCHAR(50)))FOR XML PATH('')), 2, 4000)) CategoryValue
						FROM @TBL_AttributeValue TBA WHERE EXISTS(SELECT TOP 1 1 FROM [dbo].[Fn_GetProductMediaAttributeId]() FNMA WHERE FNMA.PImAttributeId = TBA.PimATtributeId))
                         
					 UPDATE TBAV SET CategoryValue = CTCM.CategoryValue 
					 FROM @TBL_AttributeValue TBAV 
					 INNER JOIN Cte_productMedia CTCM ON(CTCM.PimCategoryId = TBAV.PimCategoryId
					 AND CTCM.PimAttributeId = TBAV.PimAttributeId);

                     WITH Cte_PublishProductIds
					 AS (SELECT TBPC.PublishcategoryId,SUBSTRING((SELECT ','+CAST(PublishProductId AS VARCHAR(50))
					  FROM ZnodePublishCategoryProduct ZPCP 
					  WHERE ZPCP.PublishCategoryId = TBPC.publishCategoryId
					  AND ZPCP.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId
                      AND ZPCP.PublishCatalogId = @PublishCatalogId FOR XML PATH('')), 2, 8000) PublishProductId ,PimCategoryHierarchyId
					  FROM @TBL_PublishPimCategoryIds TBPC)
                          
					 UPDATE TBPPC SET PublishProductId = CTPP.PublishProductId FROM @TBL_PublishPimCategoryIds TBPPC INNER JOIN Cte_PublishProductIds CTPP ON(TBPPC.PublishCategoryId = CTPP.PublishCategoryId 
					 AND TBPPC.PimCategoryHierarchyId = CTPP.PimCategoryHierarchyId);

					 WITH Cte_CategoryProfile
						AS (SELECT PimCategoryId,ZPCC.PimCategoryHierarchyId,SUBSTRING(( SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
						FROM ZnodeProfileCatalog ZPC 
						INNER JOIN ZnodeProfileCategoryHierarchy ZPRCC ON(ZPRCC.PimCategoryHierarchyId = ZPCC.PimCategoryHierarchyId
						AND ZPRCC.ProfileCatalogId = ZPC.ProfileCatalogId) 
						WHERE ZPC.PimCatalogId = ZPCC.PimCatalogId FOR XML PATH('')), 2, 4000) ProfileIds
                      
						FROM ZnodePimCategoryHierarchy ZPCC 
						WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimCategoryIds TBPC 
						WHERE TBPC.PimCategoryId = ZPCC.PimCategoryId AND ZPCC.PimCatalogId = @PimCatalogId 
						AND ZPCC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId))
                          
				     UPDATE TBPC SET TBPC.ProfileId = CTCP.ProfileIds FROM @TBL_PimCategoryIds TBPC 
					 LEFT JOIN Cte_CategoryProfile CTCP ON(CTCP.PimCategoryId = TBPC.PimCategoryId AND CTCP.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId );
                     
					 UPDATE TBPC SET TBPC.CategoryName = TBAV.CategoryValue FROM @TBL_PimCategoryIds TBPC INNER JOIN @TBL_AttributeValue TBAV ON(TBAV.PimCategoryId = TBPC.PimCategoryId
                     AND EXISTS(SELECT TOP 1 1 FROM [dbo].[Fn_GetCategoryNameAttribute]() FNGCNA WHERE FNGCNA.PimAttributeId = TBAV.PimAttributeId));

					   UPDATE TBPC SET TBPC.CategoryCode = TBAV.CategoryValue FROM @TBL_PimCategoryIds TBPC INNER JOIN @TBL_AttributeValue TBAV ON(TBAV.PimCategoryId = TBPC.PimCategoryId
					 AND EXISTS(SELECT TOP 1 1 FROM dbo.Fn_GetCategoryCodeAttribute() FNGCNA WHERE FNGCNA.PimAttributeId = TBAV.PimAttributeId)
					 )


					-- SELECT * FROM @TBL_AttributeValue WHERE pimCategoryId = 369

					 -- here update the publish category details 
                     ;WITH Cte_UpdateCategoryDetails
                     AS 
					 (
							 SELECT TBC.PimCategoryId,PublishCategoryId,CategoryName, TBPPC.PimCategoryHierarchyId,CategoryCode
							 FROM @TBL_PimCategoryIds TBC
							 INNER JOIN @TBL_PublishPimCategoryIds TBPPC ON(TBC.PimCategoryId = TBPPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPPC.PimCategoryHierarchyId)
					 )						
                     MERGE INTO ZnodePublishCategoryDetail TARGET USING Cte_UpdateCategoryDetails SOURCE ON(
					 TARGET.PublishCategoryId = SOURCE.PublishCategoryId
					 AND TARGET.LocaleId = @LocaleIdIn)
                     WHEN MATCHED THEN UPDATE SET PublishCategoryId = SOURCE.PublishcategoryId,PublishCategoryName = SOURCE.CategoryName,LocaleId = @LocaleIdIn,ModifiedBy = @userId,ModifiedDate = @GetDate,CategoryCode=SOURCE.CategoryCode
                     WHEN NOT MATCHED THEN INSERT(PublishCategoryId,PublishCategoryName,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,CategoryCode) VALUES
                     (SOURCE.PublishCategoryId,SOURCE.CategoryName,@LocaleIdIn,@userId,@GetDate,@userId,@GetDate,SOURCE.CategoryCode);

------------------------------------------------------------------
					IF OBJECT_ID('tempdb..#Index') is not null
					BEGIN 
						DROP TABLE #Index
					END 
					CREATE TABLE #Index (RowIndex int ,PimCategoryId int , PimCategoryHierarchyId  int,ParentPimCategoryHierarchyId int )		
					insert into  #Index ( RowIndex ,PimCategoryId , PimCategoryHierarchyId,ParentPimCategoryHierarchyId)
					SELECT CAST(Row_number() OVER (Partition By TBL.PimCategoryId Order by ISNULL(TBL.PimCategoryId,0) desc) AS VARCHAR(100))
					,ZPC.PimCategoryId, ZPC.PimCategoryHierarchyId, ZPC.ParentPimCategoryHierarchyId
					FROM @TBL_PublishPimCategoryIdsLatest TBL
					INNER JOIN ZnodePublishCategory ZPC ON (TBL.PimCategoryId = ZPC.PimCategoryId AND TBL.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId)
					WHERE ZPC.PublishCatalogId = @PublishCatalogId

					UPDATE TBP SET  TBP.[RowIndex]=  IDX.RowIndex 
					FROM @TBL_PublishPimCategoryIdsLatest TBP INNER JOIN #Index IDX ON (IDX.PimCategoryId = TBP.PimCategoryId AND IDX.PimCategoryHierarchyId = TBP.PimCategoryHierarchyId)  

					------------------------------------------------------------------


                     ;WITH Cte_CategoryXML
                     AS (SELECT PublishCatalogLogId,PublishcategoryId,PimCategoryId,(SELECT PublishCatalogLogId VersionId,TBPC.PublishCategoryId ZnodeCategoryId,@PublishCatalogId ZnodeCatalogId
																		,THR.PublishParentCategoryId TempZnodeParentCategoryIds,ZPC.CatalogName ,
																		 ISNULL(DisplayOrder, '0') DisplayOrder,@LocaleIdIn LocaleId,ActivationDate 
																		 ,ExpirationDate,TBC.IsActive,ISNULL(CategoryName, '') Name,ProfileId TempProfileIds,ISNULL(PublishProductId, '') TempProductIds,ISNULL(CategoryCode,'') CategoryCode 
																		 ,ISNULL(TBPC.RowIndex,1) CategoryIndex
                        FROM @TBL_PublishPimCategoryIdsLatest TBPC 
						INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId= @PublishCatalogId)
						INNER JOIN ZnodePublishCAtegory THR ON (THR.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId AND THR.PimCategoryId = TBPC.PimCategoryId AND THR.PublishCatalogId= @PublishCatalogId )
						INNER JOIN @TBL_PimCategoryIds TBC ON(TBC.PimCategoryId = TBPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId) 
						WHERE TBPC.PublishCategoryId = TBPCO.PublishCategoryId 
						AND TBPC.LocaleId = @localeIdIn
						FOR XML PATH('')) CategoryXml 
						FROM @TBL_PublishPimCategoryIdsLatest TBPCO 
						WHERE LocaleId = @localeIdIn),

                     Cte_CategoryAttributeXml
                     AS (SELECT PublishCatalogLogId, CTCX.PublishCategoryId,'<CategoryEntity>'+ISNULL(CategoryXml, '')+ISNULL((SELECT(SELECT TBA.AttributeCode,TBA.AttributeName,ISNULL(IsUseInSearch, 0) IsUseInSearch,
                        ISNULL(IsHtmlTags, 0) IsHtmlTags,ISNULL(IsComparable, 0) IsComparable,(SELECT ''+TBAV.CategoryValue FOR XML PATH('')) AttributeValues,TBA.AttributeTypeName FROM @TBL_AttributeValue TBAV
                        INNER JOIN @TBL_AttributeIds TBA ON(TBAV.PimAttributeId = TBA.PimAttributeId) LEFT JOIN ZnodePimFrontendProperties ZPFP ON(ZPFP.PimAttributeId = TBA.PimAttributeId)
                        WHERE CTCX.PimCategoryId = TBAV.PimCategoryId AND TBAO.PimAttributeId = TBA.PimAttributeId FOR XML PATH('AttributeEntity'), TYPE) FROM @TBL_AttributeIds TBAO
                        FOR XML PATH('Attributes')), '')+'</CategoryEntity>' CategoryXMl FROM Cte_CategoryXML CTCX)

                     INSERT INTO @TBL_CategoryXml(PublishCategoryId,CategoryXml,LocaleId,PublishCatalogLogId)
                     SELECT PublishCategoryId,CategoryXml,@localeIdIn LocaleId,PublishCatalogLogId 
					 FROM Cte_CategoryAttributeXml;
                   
				     DELETE FROM @TBL_AttributeIds;
                     DELETE FROM @TBL_AttributeDefault;
                     DELETE FROM @TBL_AttributeValue;
                     SET @Counter = @Counter + 1;
                 END;

				

				 -----------------------
			IF @PimCategoryHierarchyId > 0 
			Begin 
				Select PublishCategoryId ,PublishCatalogLogId VersionId	, @PimCatalogId PimCatalogId	, LocaleId
				into #OutPublish  
				FROM @TBL_CategoryXml  
				--group by PimCatalogId,VersionId,PublishCategoryId
  

				Alter TABLE #OutPublish ADD Id int Identity 

				SET @MaxId =(SELECT COUNT(*) FROM #OutPublish);
				--SET @PimCategoryIds = SUBSTRING((SELECT ','+CAST(PimCategoryId AS VARCHAR(50)) FROM @TBL_PublishPimCategoryIds FOR XML PATH('')), 2, 4000);
				Declare @ExistingPublishCategoryId  nvarchar(max), @PublishCategoryId  int 
				SET @Counter =1 
				WHILE @Counter <= @MaxId -- Loop on Locale id 
				BEGIN
					SELECT @VersionId = VersionId  ,
					@PublishCategoryId = PublishCategoryId 
					from #OutPublish where Id = @Counter

					SELECT @ExistingPublishCategoryId  = PublishCategoryId 
					FROM ZnodePublishCatalogLog ZPCL 
					where ZPCL.PublishCatalogLogId = @VersionId  and IsCategoryPublished =1 

			IF NOT EXISTS (SELECT TOP 1 1 FROM Split(@ExistingPublishCategoryId  , ',') SP WHERE SP.Item = Convert(nvarchar(50),  @PublishCategoryId) )
					BEGIN
					
						If Isnull(@ExistingPublishCategoryId,'')  = '' 
							SET @ExistingPublishCategoryId  = Convert(nvarchar(100),@PublishCategoryId )
						else 
							SET @ExistingPublishCategoryId  = Isnull(@ExistingPublishCategoryId,'') + ',' +  Convert(nvarchar(100),@PublishCategoryId )

							
				
						UPDATE ZnodePublishCatalogLog SET PublishCategoryId = @MaxId ,
						ModifiedDate = @GetDate
						WHERE PublishCatalogLogId = @VersionId;
					END
					DELETE FROM ZnodePublishedXml where  IsCategoryXML =1  and  PublishCataloglogId = @VersionId  and  PublishedId = @PublishCategoryId 
					SET @Counter  = @Counter  + 1  
				END
			END 
			ElSE
			Begin
				 UPDATE ZnodePublishCatalogLog 
				 SET PublishCategoryId = (SELECT COUNT(PublishCategoryId)  FROM @TBL_CategoryXml
				 GROUP BY PublishCategoryId																				
				 ), IsCategoryPublished = 1 WHERE PublishCatalogLogId = @VersionId;

				 DELETE FROM ZnodePublishedXml WHERE PublishCataloglogId = @VersionId;
             End
             
			 INSERT INTO ZnodePublishedXml (PublishCatalogLogId,PublishedId,PublishedXML,IsCategoryXML,IsProductXML,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             SELECT PublishCatalogLogId PublishCataloglogId,PublishCategoryId,CategoryXml,1,0,LocaleId,@UserId,@GetDate,@UserId,@GetDate 
			 FROM @TBL_CategoryXml 
		
			
			-----------------------------------------------------------------------------------------------------------------------------
		
	
			 Select Distinct PublishCategoryId from @TBL_DeletedPublishCategoryIds
			 UNION
			--not published parentcategory
			SELECT DISTINCT PublishCategoryId FROM ZnodePublishCategory A
			INNER JOIN @TBL_PimCategoryIds B ON (A.PimCategoryId = B.PimCategoryId)
			WHERE A.PublishCatalogId = @PublishCataLogId AND B.PimCategoryHierarchyId = A.PimCategoryHierarchyId
			--UNION
			--SELECT DISTINCT PublishCategoryId from ZnodePublishCategory A
			--INNER JOIN @TBL_PimCategoryIds B ON (A.PimParentCategoryId = B.PimCategoryId)
			--WHERE
			--A.PublishCatalogId =@PublishCataLogId

			 SELECT CategoryXml 
			 FROM @TBL_CategoryXml 
			
			 UPDATE ZnodePimCategory SET IsCategoryPublish =1,PublishStateId = @PublishStateId WHERE pimCategoryId IN (SELECT PimCategoryId FROM @TBL_PimCategoryIds)
             COMMIT TRAN GetPublishCategory;
			 
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE();
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPublishCategoryGroup @PublishCatalogId = '+CAST(@PublishCatalogId AS VARCHAR(50))+',@UserId ='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(50));
             SET @Status = 0;
             ROLLBACK TRAN GetPublishCategory;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_GetPublishCategoryGroup',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
	 GO

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodePimCatalog' AND COLUMN_NAME = 'PortalId')
BEGIN
ALTER TABLE ZnodePimCatalog ADD PortalId INT NULL
END
GO
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodePimCatalog' AND COLUMN_NAME = 'IsAllowIndexing')
BEGIN
ALTER TABLE ZnodePimCatalog ADD IsAllowIndexing BIT NULL
END
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishProductbulk')
BEGIN 
	DROP PROCEDURE Znode_GetPublishProductbulk
END
GO

CREATE PROCEDURE [dbo].[Znode_GetPublishProductbulk]
(
@PublishCatalogId INT = 0 
,@VersionId       VARCHAR(50) = 0 
,@PimProductId    TransferId Readonly
,@UserId		  INT = 0 
,@PimCategoryHierarchyId  INT = 0 
,@PimCatalogId INT = 0 
,@LocaleIds TransferId READONLY
,@PublishStateId INT = 0 
)
With RECOMPILE
AS
-- 
/*
DECLARE @rrte transferId 
INSERT INTO @rrte
SELECT 1 

EXEC Znode_GetPublishProductbulk @PublishCatalogId=3,@UserId= 2 ,@localeIDs = @rrte,@PublishStateId = 3 

*/
BEGIN 
  BEGIN TRY 
 SET NOCOUNT ON 

EXEC Znode_InsertUpdatePimAttributeXML 1 
EXEC Znode_InsertUpdateCustomeFieldXML 1
EXEC Znode_InsertUpdateAttributeDefaultValue 1 

DECLARE @PortalId INT = (SELECT TOP 1 POrtalId FROM ZnodePortalCatalog WHERE PublishCatalogId = @PublishCatalogId)
DECLARE @PriceListId INT = (SELECT TOP 1 PriceListId FROM ZnodePriceListPortal WHERE PortalId = @PortalId
ORDER BY Precedence ASC )
DECLARE @DomainUrl varchar(max) = (select TOp 1 URL FROM ZnodeMediaConfiguration WHERE IsActive =1)
DECLARE @MaxSmallWidth INT  = (SELECT TOP 1  MAX(MaxSmallWidth) FROM ZnodePortalDisplaySetting WHERE PortalId = @PortalId)


   IF OBJECT_ID('tempdb..#PimProductAttributeXML') is not null
   BEGIN 
	 DROP TABLE #PimProductAttributeXML
   END
   IF OBJECT_ID('tempdb..#PimDefaultValueLocale') is not null
   BEGIN 
    DROP TABLE #PimDefaultValueLocale
   END
   IF OBJECT_ID('tempdb..#TBL_CategoryCategoryHierarchyIds') is not null
   BEGIN 
    DROP TABLE #TBL_CategoryCategoryHierarchyIds
   END

   DECLARE @PimMediaAttributeId INT = dbo.Fn_GetProductImageAttributeId()
   
   CREATE TABLE #PimProductAttributeXML (PimAttributeXMLId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )
  	
   CREATE TABLE #TBL_CategoryCategoryHierarchyIds  (CategoryId int , ParentCategoryId int ) 
	
   If (@PimCategoryHierarchyId <> 0 AND @PimCatalogId <> 0 )
		INSERT INTO #TBL_CategoryCategoryHierarchyIds(CategoryId , ParentCategoryId )
			Select Distinct PimCategoryId , Null FROM (
				SELECT PimCategoryId,ParentPimCategoryId from DBO.[Fn_GetRecurciveCategoryIds](@PimCategoryHierarchyId,@PimCatalogId)
				Union 
				Select PimCategoryId , null  from ZnodePimCategoryHierarchy where PimCategoryHierarchyId = @PimCategoryHierarchyId 
				Union 
				Select PimCategoryId , null  from [Fn_GetRecurciveCategoryIds_new] (@PimCategoryHierarchyId,@PimCatalogId) ) Category  


   CREATE TABLE #PimDefaultValueLocale  (PimAttributeDefaultXMLId INT  PRIMARY KEY ,PimAttributeDefaultValueId INT ,LocaleId INT ) 
   DECLARE @ProductNamePimAttributeId INT = dbo.Fn_GetProductNameAttributeId(),@DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId(),@LocaleId INT = 0 
		,@SkuPimAttributeId  INT =  dbo.Fn_GetProductSKUAttributeId() , @IsActivePimAttributeId INT =  dbo.Fn_GetProductIsActiveAttributeId()
   DECLARE @GetDate DATETIME =dbo.Fn_GetDate()
   DECLARE @TBL_LocaleId  TABLE (RowId INT IDENTITY(1,1) PRIMARY KEY  , LocaleId INT )
			
			INSERT INTO @TBL_LocaleId (LocaleId)
			SELECT  LocaleId
			FROM ZnodeLocale MT 
			WHERE IsActive = 1
			AND (EXISTS (SELECT TOP 1 1  FROM @LocaleIds RT WHERE RT.Id = MT.LocaleId )
			OR NOT EXISTS (SELECT TOP 1 1 FROM @LocaleIds )) 

  DECLARE @Counter INT =1 ,@maxCountId INT = (SELECT max(RowId) FROM @TBL_LocaleId ) 
 

 CREATE TABLE #TBL_PublishCatalogId (PublishCatalogId INT,PublishProductId INT,PimProductId  INT   , VersionId INT, PublishCategoryId int ,LocaleId INT )

 CREATE INDEX idx_#TBL_PublishCatalogIdPimProductId on #TBL_PublishCatalogId(PimProductId)

  CREATE INDEX idx_#TBL_PublishCatalogIdPimPublishCatalogId on #TBL_PublishCatalogId(PublishCatalogId)

  If (@PimCategoryHierarchyId <> 0 AND @PimCatalogId <> 0 )
  BEGIN
			 INSERT INTO #TBL_PublishCatalogId(PublishCatalogId ,PublishProductId ,PimProductId  , VersionId ,PublishCategoryId ,LocaleId)  
			 SELECT distinct ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,MAX(ZPCP.PublishCataloglogId ) VersionId ,ZPC.PublishCategoryId,ZPCP.LocaleId
				 FROM ZnodePublishProduct ZPP INNER JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
				 INNER JOIN ZnodePublishCategoryProduct ZPPP ON ZPP.PublishProductId  = ZPPP.PublishProductId  
				 AND ZPCP.PublishCatalogId = ZPPP.PublishCatalogId
				 INNER JOIN ZnodePublishCategory ZPC ON ZPC.PublishCatalogId = ZPPP.PublishCatalogId AND ZPPP.PublishCategoryId = ZPC.PublishCategoryId 
				 WHERE ZPP.PublishCatalogId = @PublishCatalogId  and ZPCP.PublishStateId =  @PublishStateId
				 AND 
				 ZPC.PimCategoryId in (Select CategoryId from #TBL_CategoryCategoryHierarchyIds )
				 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId ,ZPC.PublishCategoryId,ZPCP.LocaleId	

			INSERT INTO #TBL_PublishCatalogId(PublishCatalogId ,PublishProductId ,PimProductId  , VersionId ,PublishCategoryId ,LocaleId)
			SELECT DISTINCT ZPP.PublishCatalogId,ZPP.PublishProductId,PimProductId,MAX(ZPCP.PublishCatalogLogId) VersionId,NULL, ZPCP.LocaleId
				 FROM ZnodePublishProduct ZPP 
				 INNER JOIN ZnodePublishCatalogLog ZPCP ON 
				 (ZPCP.PublishCatalogId = ZPP.PublishCatalogId) 
				 WHERE				 (EXISTS (SELECT TOP 1 1 FROM @pimProductId SP WHERE SP.Id = ZPP.PimProductId ))
				 AND (ZPP.PublishCatalogId = @publishCatalogId )
				 AND NOT Exists (Select TOP 1 1 from #TBL_PublishCatalogId TPL where TPL.PublishProductId = ZPP.PublishProductId)
				 AND ZPCP.PublishStateId =  @PublishStateId
			GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId , ZPCP.LocaleId



  END
  ELSE 
  BEGIN
			INSERT INTO #TBL_PublishCatalogId(PublishCatalogId ,PublishProductId,PimProductId ,VersionId,LocaleId  ) 
			 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,  
											MAX(PublishCatalogLogId) ,ZPCP.LocaleId
				 FROM ZnodePublishProduct ZPP 
				 INNER JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
				 WHERE (EXISTS (SELECT TOP 1 1 FROM @PimProductId SP 
				 WHERE SP.Id = ZPP.PimProductId  AND  (@PublishCatalogId IS NULL OR @PublishCatalogId = 0 ))
				 OR  (ZPP.PublishCatalogId = @PublishCatalogId ))
				 --AND  ZPCP.PublishStateId =  @PublishStateId
				 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId ,ZPCP.LocaleId
  END
           
		     DECLARE   @TBL_ZnodeTempPublish TABLE (PimProductId INT , AttributeCode VARCHAR(300) ,AttributeValue NVARCHAR(max) ) 			
			 DECLARE @TBL_AttributeVAlueLocale TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT,LocaleId INT 
			 )

	
	SELECT RetailPrice,SalesPrice,ZC.CurrencyCode,ZCC.CultureCode ,ZCC.Symbol CurrencySuffix,TYU.PublishProductId
	INTO #ZnodePrice
	FROM ZnodePrice ZP 
	INNER JOIN ZnodePriceList ZPL ON (ZPL.PriceListId = ZP.PriceListId)
	INNER JOIN ZnodeCurrency ZC oN (ZC.CurrencyId = ZPL.CurrencyId )
	INNER JOIN ZnodeCulture ZCC ON (ZCC.CultureId = ZPL.CultureId)
	INNER JOIN ZnodePublishProductDetail TY ON (TY.SKU = ZP.SKU ) 
	INNER JOIN ZnodePublishProduct TYU ON (TYU.PublishProductId = TY.PublishProductId) 
	WHERE ZP.PriceListId = @PriceListId 
	AND TY.LocaleId = @DefaultLocaleId
	AND TYU.PublishCatalogId = @PublishCatalogId
	AND EXISTS (SELECT TOP 1 1 FROM ZnodePriceListPortal ZPLP 
	INNER JOIN ZnodePimCatalog ZPC on ZPC.PortalId=ZPLP.PortalId WHERE ZPLP.PriceListId=ZP.PriceListId )
	

	SELECT ZCSD.SEOUrl , ZCDL.SEODescription,ZCDL.SEOKeywords ,ZCDL.SEOTitle, TYU.PublishProductId
	INTO #ProductSKU 
	FROM ZnodeCMSSEODetail ZCSD 
	INNER JOIN ZnodeCMSSEODetailLocale ZCDL ON (ZCDL.CMSSEODetailId = ZCSD.CMSSEODetailId)
	INNER JOIN ZnodePublishProductDetail TY ON (TY.SKU = ZCSD.SEOCode AND ZCDL.LocaleId = TY.LocaleId) 
	INNER JOIN ZnodePublishProduct TYU ON (TYU.PublishProductId = TY.PublishProductId)
	WHERE CMSSEOTypeId = (SELECT TOP 1 CMSSEOTypeId FROM ZnodeCMSSEOType WHERE Name = 'Product') 
	AND ZCDL.LocaleId = @DefaultLocaleId
	AND TYU.PublishCatalogId = @PublishCatalogId
	AND ZCSD.PublishStateId = @PublishStateId
	SELECT  TYU.PublishProductId , @DomainUrl +'Catalog/'  + CAST(@PortalId AS VARCHAr(100)) + '/'+ CAST(@MaxSmallWidth AS VARCHAR(100)) + '/' + RT.MediaPath AS ImageSmallPath   
	INTO #ProductImages
	FROM ZnodePimAttributeValue ZPAV 
	INNER JOIN ZnodePublishProduct TYU ON (TYU.PimProductId  = ZPAV.PimProductId)
	INNER JOIN ZnodePimProductAttributeMedia  RT ON ( RT.PimAttributeValueId = ZPAV.PimAttributeValueId )
	WHERE  TYU.PublishCatalogId = @PublishCatalogId
	AND RT.LocaleId = @DefaultLocaleId
	AND ZPAV.PimAttributeId = (SELECT TOp 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'ProductImage')
	


		
		
WHILE @Counter <= @maxCountId
BEGIN
 
 SET @LocaleId = (SELECT TOP 1 LocaleId FROM @TBL_LocaleId MT 
  WHERE  RowId = @Counter)
 
  INSERT INTO #PimProductAttributeXML 
  SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeXML
  WHERE LocaleId = @LocaleId
  
  IF( @LocaleId <> @DefaultLocaleId )
  BEGIN
	INSERT INTO #PimProductAttributeXML 
	SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
	FROM ZnodePimAttributeXML ZPAX
	WHERE ZPAX.LocaleId = @DefaultLocaleId  
	AND NOT EXISTS (SELECT TOP 1 1 FROM #PimProductAttributeXML ZPAXI WHERE ZPAXI.PimAttributeId = ZPAX.PimAttributeId )
  END

  INSERT INTO #PimDefaultValueLocale
  SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultXML
  WHERE localeId = @LocaleId

  IF( @LocaleId <> @DefaultLocaleId )
  BEGIN
	INSERT INTO #PimDefaultValueLocale 
	SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
	FROM ZnodePimAttributeDefaultXML ZX
	WHERE localeId = @DefaultLocaleId
	AND NOT EXISTS (SELECT TOP 1 1 FROM #PimDefaultValueLocale TRTR WHERE TRTR.PimAttributeDefaultValueId = ZX.PimAttributeDefaultValueId)
  END
  	 
  CREATE TABLE #TBL_CustomeFiled  (PimCustomeFieldXMLId INT ,CustomCode VARCHAR(300),PimProductId INT ,LocaleId INT )

  INSERT INTO #TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,RTR.PimProductId ,RTR.LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML RTR 
  INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = RTR.PimProductId AND RTR.LocaleID = ZPP.LocaleId)
  WHERE RTR.LocaleId = @LocaleId
 
 
  INSERT INTO #TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,ITR.PimProductId ,ITR.LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML ITR
  INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ITR.PimProductId AND ITR.LocaleID = ZPP.LocaleId)
  WHERE ITR.LocaleId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM #TBL_CustomeFiled TBL  WHERE ITR.CustomCode = TBL.CustomCode AND ITR.PimProductId = TBL.PimProductId)
       
       
	 SELECT VIR.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId,VIR.LocaleId , VIR.AttributeValue, VIR.AttributeCode ,ROW_NUMBER() Over(Partition By VIR.PimProductId,PimAttributeId ORDER BY VIR.PimProductId,PimAttributeId  ) RowId
	 INTO #TBL_AttributeVAlue
	 FROM View_LoadManageProductInternal VIR
	 WHERE ( LocaleId = @DefaultLocaleId OR LocaleId = @LocaleId )
	 AND EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
	  UNION ALL 
	 SELECT VIR.PimProductId,VIR.PimAttributeId,ZPDE.PimProductAttributeMediaId,ZPDE.LocaleId ,ZPDE.MediaPath AS AttributeValue, d.AttributeCode ,ROW_NUMBER() Over(Partition By VIR.PimProductId,VIR.PimAttributeId ORDER BY VIR.PimProductId,VIR.PimAttributeId  ) RowId
	 FROM ZnodePimAttributeValue  VIR
	 INNER JOIN ZnodePimProductAttributeMedia ZPDE ON (ZPDE.PimAttributeValueId = VIR.PimAttributeValueId )
	 INNER JOIN ZnodePimAttribute d ON ( d.PimAttributeId=VIR.PimAttributeId )
	 WHERE ( ZPDE.LocaleId = @DefaultLocaleId OR ZPDE.LocaleId = @LocaleId )
	 AND EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
	  Union All
	 SELECT VIR.PimProductId,VIR.PimAttributeId,ZPDVL.PimAttributeDefaultValueLocaleId,ZPDVL.LocaleId ,ZPDVL.AttributeDefaultValue AS AttributeValue, d.AttributeCode ,ROW_NUMBER() Over(Partition By VIR.PimProductId,VIR.PimAttributeId ORDER BY VIR.PimProductId,VIR.PimAttributeId  ) RowId
	 FROM ZnodePimAttributeValue  VIR
	 INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1  )
	 INNER JOIN ZnodePimAttributeDefaultValue ZPADV ON ZPADV.PimAttributeId = D.PimAttributeId
	 INNER JOIN ZnodePimAttributeDefaultValueLocale ZPDVL   on (ZPADV.PimAttributeDefaultValueId = ZPDVL.PimAttributeDefaultValueId)
	 --INNER JOIN ZnodePimProductAttributeDefaultValue ZPDVP ON (ZPDVP.PimAttributeValueId = VIR.PimAttributeValueId AND ZPADV.PimAttributeDefaultValueId = ZPDVP.PimAttributeDefaultValueId )
	 WHERE ( ZPDVL.LocaleId = @DefaultLocaleId OR ZPDVL.LocaleId = @LocaleId )
	 AND EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
	 Union All 
	SELECT VIR.PimProductId,VIR.PimAttributeId,'','','',D.AttributeCode,ROW_NUMBER() Over(Partition By VIR.PimProductId,VIR.PimAttributeId ORDER BY VIR.PimProductId,VIR.PimAttributeId  ) RowId
	FROM ZnodePimAttributeValue  VIR
	INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1 )
	WHERE  EXISTS(SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )

	 
	 UPDATE #TBL_AttributeVAlue SET rowid = (SELECT MAX(rowid) FROM #TBL_AttributeVAlue b WHERE a.PimProductId=b.PimProductId AND a.PimAttributeId = b.PimAttributeId )
	 FROM #TBL_AttributeVAlue a
	
  --SET @versionId = (SELECT TOP 1 VersionId FROM #TBL_PublishCatalogId) 
  

 IF OBJECT_ID('tempdb..#Cte_GetData') IS NOT NULL
 BEGIN 
 DROP TABLE #Cte_GetData
 END 

 CREATE TABLE #Cte_GetData (PimProductId INT,AttributeCode VARCHAR(600),AttributeValue NVARCHAR(max),VersionId INT)

 CREATE INDEX idx_#Cte_GetDataPimProductId ON #Cte_GetData(PimProductId)


INSERT INTO #Cte_GetData(PimProductId ,AttributeCode,AttributeValue,VersionId)
SELECT  a.PimProductId,a.AttributeCode , '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(a.AttributeValue,'')+'</AttributeValues> </AttributeEntity>  </Attributes>'  AttributeValue,VersionId
FROM #TBL_AttributeVAlue a 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = a.PimAttributeId )
INNER JOIN #PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId)
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = a.PimProductId)
WHERE a.LocaleId  = CASE WHEN a.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END
AND NOT EXISTS (SELECT TOP 1 1 FROM Fn_GetProductMediaAttributeId() TY WHERE TY.PimAttributeId = c.PimAttributeId)
 


INSERT INTO #Cte_GetData(PimProductId ,AttributeCode,AttributeValue,VersionId)
SELECT THB.PimProductId,THB.CustomCode,'<Attributes><AttributeEntity>'+CustomeFiledXML+'</AttributeEntity></Attributes>' ,VersionId
FROM ZnodePimCustomeFieldXML THB 
INNER JOIN #TBL_CustomeFiled TRTE ON (TRTE.PimCustomeFieldXMLId = THB.PimCustomeFieldXMLId)
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = THB.PimProductId)
UNION ALL 
SELECT ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues></AttributeValues>'+'<SelectValues>'+
			   STUFF((
                    SELECT '  '+ DefaultValueXML  FROM ZnodePimAttributeDefaultXML AA 
				 INNER JOIN #PimDefaultValueLocale GH ON (GH.PimAttributeDefaultXMLId = AA.PimAttributeDefaultXMLId)
				 INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId )
				 WHERE (ZPADV.PimAttributeValueId = ZPAV.PimAttributeValueId)
    FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</SelectValues> </AttributeEntity></Attributes>' AttributeValue ,VersionId
FROM ZnodePimAttributeValue ZPAV  
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
AND EXISTS (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)

---for PLP

INSERT INTO #Cte_GetData(PimProductId ,AttributeCode,AttributeValue,VersionId)
SELECT DISTINCT  UOP.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues></AttributeValues>'+'<SelectValues>'+
			   STUFF((
                    SELECT DISTINCT '  '+REPLACE(DefaultValueXML,'</SelectValuesEntity>','<VariantDisplayOrder>'+CAST(ISNULL(ZPA.DisplayOrder,0) AS VARCHAR(200))+'</VariantDisplayOrder>
					<VariantSKU>'+ISNULL(ZPAVL_SKU.AttributeValue,'')+'</VariantSKU>
					<VariantImagePath>'+ISNULL((SELECT ''+ZM.Path FOR XML Path ('')),'')+'</VariantImagePath></SelectValuesEntity>')   
				 FROM ZnodePimAttributeDefaultXML AA 
				 INNER JOIN #PimDefaultValueLocale GH ON (GH.PimAttributeDefaultXMLId = AA.PimAttributeDefaultXMLId)
				 INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId )
				 INNER JOIN ZnodePimAttributeValue ZPAV1 ON (ZPAV1.PimAttributeValueId= ZPADV.PimAttributeValueId )
				 -- check/join for active variants 
				 INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId =ZPAV1.PimProductId)
				 INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON (ZPAV.PimAttributevalueid = ZPAVL.PimAttributeValueId AND ZPAVL.AttributeValue = 'True')
				 INNER JOIN ZnodePimProductTypeAssociation YUP ON (YUP.PimProductId = ZPAV1.PimProductId)
				 -- SKU
				 INNER JOIN ZnodePimAttributeValue ZPAV_SKU ON(YUP.PimProductId = ZPAV_SKU.PimProductId)
				 INNER JOIN ZnodePimAttributeValueLocale ZPAVL_SKU ON (ZPAVL_SKU.PimAttributeValueId = ZPAV_SKU.PimAttributeValueId)
				 LEFT  JOIN ZnodePimAttributeValue ZPAV12 ON (ZPAV12.PimProductId= YUP.PimProductId  AND ZPAV12.PimAttributeId = @PimMediaAttributeId ) 
				 LEFT JOIN ZnodePimProductAttributeMedia ZPAVM ON (ZPAVM.PimAttributeValueId= ZPAV12.PimAttributeValueId ) 
				 LEFT JOIN ZnodeMedia ZM ON (ZM.MediaId = ZPAVM.MediaId)
				 LEFT JOIN ZnodePimAttribute ZPA ON (ZPA.PimattributeId = ZPAV1.PimAttributeId)
				 WHERE (YUP.PimParentProductId  = UOP.PimProductId AND ZPAV1.pimAttributeId = UOP.PimAttributeId )
				 -- Active Variants
				 AND ZPAV.PimAttributeId = (SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'IsActive')
				 -- VariantSKU
				 AND ZPAV_SKU.PimAttributeId = (SELECT PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'SKU')
FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</SelectValues> </AttributeEntity></Attributes>' AttributeValue ,VersionId
FROM ZnodePimConfigureProductAttribute UOP 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = UOP.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = UOP.PimProductId)
WHERE  EXISTS (SELECT * FROM #PimProductAttributeXML b WHERE b.PimAttributeXMLId = c.PimAttributeXMLId)


INSERT INTO #Cte_GetData(PimProductId ,AttributeCode,AttributeValue,VersionId)
SELECT DISTINCT  ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+SUBSTRING((SELECT DISTINCT  ',' +ZPPG.MediaPath FROM ZnodePimProductAttributeMedia ZPPG
     INNER JOIN #TBL_AttributeVAlue FTRE ON (FTRE.PimProductId = ZPAV.PimProductId AND FTRE.PimAttributeId = ZPAV.PimAttributeId  AND FTRE.LocaleId  = CASE WHEN FTRE.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )
	 WHERE ZPPG.PimProductAttributeMediaId = FTRE.ZnodePimAttributeValueLocaleId
	 FOR XML PATH ('')
 ),2,4000)+'</AttributeValues></AttributeEntity></Attributes>' AttributeValue ,VersionId	 
FROM ZnodePimAttributeValue ZPAV 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeMedia ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
AND EXISTS (SELECT * FROM #PimProductAttributeXML b WHERE b.PimAttributeXMLId = c.PimAttributeXMLId)

insert into #Cte_GetData(PimProductId ,AttributeCode,AttributeValue,VersionId)
SELECT ZPLP.PimParentProductId ,c.AttributeCode, '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(SUBSTRING((SELECT DISTINCT ','+CAST(PublishProductId AS VARCHAR(50)) 
							 FROM #TBL_PublishCatalogId ZPPI 
							 INNER JOIN ZnodePimLinkProductDetail ZPLPI ON (ZPLPI.PimProductId = ZPPI.PimProductId)
							 WHERE ZPLPI.PimParentProductId = ZPLP.PimParentProductId
							 AND ZPLPI.PimAttributeId   = ZPLP.PimAttributeId
							 FOR XML PATH ('') ),2,4000),'')+'</AttributeValues></AttributeEntity></Attributes>'   AttributeValue ,ZPP.VersionId
							
FROM ZnodePimLinkProductDetail ZPLP  
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPLP.PimParentProductId)
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPLP.PimAttributeId )
WHERE EXISTS (SELECT * FROM #PimProductAttributeXML b WHERE b.PimAttributeXMLId = c.PimAttributeXMLId)
GROUP BY ZPLP.PimParentProductId , ZPP.PublishProductId  ,ZPLP.PimAttributeId,c.AttributeCode,c.AttributeXML,ZPP.PublishCatalogId,ZPP.VersionId



SELECT a.PimProductId ,CAST((SELECT ''+dbo.FN_trim(b.AttributeValue) FOR XML PATH(''))  AS NVARCHAR(max)) AttributeValue , b.LocaleId  ,a.PimAttributeId,c.AttributeCode ,b.ZnodePimAttributeValueLocaleId
INTO #View_LoadManageProductInternal
FROM ZnodePimAttributeValue a 
INNER JOIN  ZnodePimAttributeValueLocale b ON ( b.PimAttributeValueId = a.PimAttributeValueId )
INNER JOIN ZnodePimAttribute c ON ( c.PimAttributeId=a.PimAttributeId )
WHERE c.AttributeCode = 'SKU'

INSERT INTO #Cte_GetData(PimProductId ,AttributeCode,AttributeValue,VersionId)
SELECT ZPAV.PimProductId,'DefaultSkuForConfigurable' ,'<Attributes><AttributeEntity>'+REPLACE(REPLACE (c.AttributeXML,'ProductType','DefaultSkuForConfigurable'),'Product Type','Default Sku For Configurable')+'<AttributeValues>'+
 (SELECT TOP 1 AttributeValue FROM #View_LoadManageProductInternal ad 
 INNER JOIN ZnodePimProductTypeAssociation yt ON (yt.PimProductId = ad.PimProductId)
 WHERE Ad.AttributeCode = 'SKU'
 AND yt.PimParentProductId = ZPAV.PimProductId
 ORDER BY yt.DisplayOrder , yt.PimProductTypeAssociationId ASC)
+'</AttributeValues></AttributeEntity></Attributes>' AttributeValue ,ZPP.VersionId
FROM ZnodePimAttributeValue ZPAV  
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL 
INNER JOIN ZnodePimAttributeDefaultValue dr ON (dr.PimAttributeDefaultValueId = ZPADVL.PimAttributeDefaultValueId)
 WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId
 AND dr.AttributeDefaultValueCode= 'ConfigurableProduct' 
)
AND EXISTS (SELECT * FROM #PimProductAttributeXML b WHERE b.PimAttributeXMLId = c.PimAttributeXMLId)
AND c.AttributeCode = 'ProductType' 


---------brand details 
CREATE TABLE #Cte_BrandData (PimProductId INT,BrandXML NVARCHAR(max))

INSERT INTO #Cte_BrandData ( PimProductId, BrandXML )
SELECT  DISTINCT ZBP.PimProductId,'<Brands><BrandEntity><BrandId>'+CAST(ZBD.BrandId AS VARCHAR(50))+'</BrandId><BrandCode>'+ZBD.BrandCode+'</BrandCode><BrandName>'+ZBDL.BrandName+'</BrandName></BrandEntity></Brands>' as BrandXML					   		   
FROM [ZnodeBrandDetails] AS ZBD
INNER JOIN ZnodeBrandDetaillocale ZBDL ON ZBD.BrandId = ZBDL.BrandId
INNER JOIN [ZnodeBrandProduct] AS ZBP ON ZBD.BrandId = ZBP.BrandId

--  --CREATE INDEX IND_Znode

  DELETE tu FROM ZnodePublishedXml tu  WHERE 
  EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId TY WHERE TY.VersionId = tu.PublishCatalogLogId AND Tu.PublishedId = ty.PublishProductId  )
  AND IsProductXML = 1   AND LocaleId = @LocaleId 

  
--  --ALTER INDEX ALL ON ZnodePublishedXml  REBUILD WITH (FILLFACTOR = 80 ) 
  If (@PimCategoryHierarchyId <> 0 AND @PimCatalogId <> 0 )
  BEGIN
		
		--Collect index of other categorys
		IF OBJECT_ID('tempdb..#Index') IS NOT NULL
		BEGIN 
			DROP TABLE #Index
		END 
		CREATE TABLE #Index (RowIndex int ,PublishCategoryId int , PublishProductId  int )		
		INSERT INTO  #Index ( RowIndex ,PublishCategoryId , PublishProductId )
		SELECT CAST(ROW_NUMBER()Over(Partition BY ZPC.PublishProductId 
		Order BY ISNULL(ZPC.PublishCategoryId,'0') desc )   AS VARCHAR(100)),
		ZPC.PublishCategoryId , ZPC.PublishProductId
		FROM ZnodePublishCategoryProduct ZPC where ZPC.PublishCatalogId = @PublishCatalogId
		
	

		--Publish parent products with index number 
			INSERT INTO ZnodePublishedXml (PublishCatalogLogId,PublishedId,PublishedXML,IsProductXML,LocaleId
			,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PublishCategoryId)
			SELECT zpp.VersionId,zpp.PublishProductId,'<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'+CAST(ISNULL(ZPCP.PublishCategoryId,'')  AS VARCHAR(50))+'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKU>'+'<SKULower>'+CAST(ISNULL((SELECT ''+LOWER(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
			+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +'</IsParentProducts><CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000)) +'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
			+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
			FROM ZnodeProfileCatalog ZPFC 
			INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
			WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+
			'</TempProfileIds>
			<ProductIndex>'+ CAST(ISNULL(ZPCP.ProductIndex,1) AS VARCHAR(200))+
			'</ProductIndex>'
			+'<RetailPrice>'+ISNULL(CAST(RetailPrice  AS VARCHAr(500)),'')+'</RetailPrice>'
			+'<SalesPrice>'+ISNULL(CAST(SalesPrice AS VARCHAr(500)), '') +'</SalesPrice>'
			+'<CurrencyCode>'+ISNULL(CurrencyCode,'') +'</CurrencyCode>'
			+'<CultureCode>'+ISNULL(CultureCode,'') +'</CultureCode>'
			+'<CurrencySuffix>'+ISNULL(CurrencySuffix,'') +'</CurrencySuffix>'
			+'<SeoUrl>'+ISNULL(SEOUrl,'') +'</SeoUrl>'
			+'<SeoDescription>'+ISNULL(SEODescription,'') +'</SeoDescription>'
			+'<SeoKeywords>'+ISNULL(SEOKeywords,'') +'</SeoKeywords>'
			+'<SeoTitle>'+ISNULL(SEOTitle,'') +'</SeoTitle>'
			+'<ImageSmallPath>'+ISNULL(ImageSmallPath,'') +'</ImageSmallPath><IndexId>'
			+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId><IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
			'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
			ISNULL(STUFF(( SELECT '  '+ BrandXML  FROM #Cte_BrandData BD WHERE BD.PimProductId = ZPP.PimProductId   
			FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, ''),'')+
			STUFF(( SELECT '  '+ AttributeValue  FROM #Cte_GetData TY WHERE TY.PimProductId = ZPP.PimProductId AND TY.VersionId = ZPP.VersionId   
			FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>' xmlvalue,1,@LocaleId,@UserId , @GetDate , @UserId,@GetDate
			,ZPCP.PublishCategoryId
			FROM  #TBL_PublishCatalogId zpp
			INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
			INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
			LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
			LEFT JOIN ZnodePublishCategory ZPC ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId 
			AND ZPP.PublishCategoryId = ZPC.PublishCategoryId 
			)
			LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId AND  ZPCCF.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId
			)
			LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ISNULL(ZPCP.PublishCategoryId,0) AND ZPCD.LocaleId = @LocaleId )
			LEFT JOIN #ZnodePrice TBZP ON (TBZP.PublishProductId = ZPP.PublishProductId)
			LEFT JOIN #ProductSKU TBPS ON (TBPS.PublishProductId = ZPP.PublishProductId)
			LEFT JOIN #ProductImages TBPI ON (TBPI.PublishProductId = ZPP.PublishProductId)
			WHERE ZPPDFG.LocaleId = @LocaleId AND ZPP.LocaleId = @LocaleId AND  ZPC.PimCategoryId in (Select CategoryId from #TBL_CategoryCategoryHierarchyIds ) 
			and zpp.PublishCategoryId IS NOT NULL

		
	
	 --Publish only associate product 
	 INSERT INTO ZnodePublishedXml (PublishCatalogLogId,PublishedId,PublishedXML,IsProductXML,LocaleId
		,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PublishCategoryId)
		SELECT zpp.VersionId,zpp.PublishProductId,'<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'+CAST(ISNULL(ZPCP.PublishCategoryId,'')  AS VARCHAR(50))+'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKU>'+'<SKULower>'+CAST(ISNULL((SELECT ''+LOWER(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
		+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +'</IsParentProducts><CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000)) +'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
		+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
						FROM ZnodeProfileCatalog ZPFC 
						INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
						WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+
						'</TempProfileIds>
						 <ProductIndex>'+ CAST(ISNULL(ZPCP.ProductIndex,1) AS VARCHAr(200))+
						'</ProductIndex>'
						+'<RetailPrice>'+ISNULL(CAST(RetailPrice  AS VARCHAr(500)),'')+'</RetailPrice>'
		+'<SalesPrice>'+ISNULL(CAST(SalesPrice AS VARCHAr(500)), '') +'</SalesPrice>'
+'<CurrencyCode>'+ISNULL(CurrencyCode,'') +'</CurrencyCode>'
+'<CultureCode>'+ISNULL(CultureCode,'') +'</CultureCode>'
+'<CurrencySuffix>'+ISNULL(CurrencySuffix,'') +'</CurrencySuffix>'
+'<SeoUrl>'+ISNULL(SEOUrl,'') +'</SeoUrl>'
+'<SeoDescription>'+ISNULL(SEODescription,'') +'</SeoDescription>'
+'<SeoKeywords>'+ISNULL(SEOKeywords,'') +'</SeoKeywords>'
+'<SeoTitle>'+ISNULL(SEOTitle,'') +'</SeoTitle>'
+'<ImageSmallPath>'+ISNULL(ImageSmallPath,'') +'</ImageSmallPath><IndexId>'
+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId><IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
		'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
		STUFF(( SELECT '  '+ AttributeValue  FROM #Cte_GetData TY WHERE TY.PimProductId = ZPP.PimProductId   AND TY.VersionId= ZPP.VersionId
		FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>' xmlvalue,1,@LocaleId,@UserId , @GetDate , @UserId,@GetDate
		,ZPCP.PublishCategoryId
		FROM  #TBL_PublishCatalogId zpp
		INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
		INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
		LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT JOIN ZnodePublishCategory ZPC ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId 
		AND ZPP.PublishCategoryId = ZPC.PublishCategoryId )
		AND ZPC.PimCategoryId in (Select CategoryId from #TBL_CategoryCategoryHierarchyIds )
		LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId AND  ZPCCF.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId
		AND ZPCCF.PimCategoryId in (Select CategoryId from #TBL_CategoryCategoryHierarchyIds ))
		LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ISNULL(ZPCP.PublishCategoryId,0) AND ZPCD.LocaleId = @LocaleId )
		LEFT JOIN #ZnodePrice TBZP ON (TBZP.PublishProductId = ZPP.PublishProductId)
		LEFT JOIN #ProductSKU TBPS ON (TBPS.PublishProductId = ZPP.PublishProductId)
		LEFT JOIN #ProductImages TBPI ON (TBPI.PublishProductId = ZPP.PublishProductId)

		WHERE ZPPDFG.LocaleId = @LocaleId AND ZPP.LocaleId = @LocaleId AND zpp.PublishCategoryId IS NULL
		
  END
  ELSE
  BEGIN

      INSERT INTO ZnodePublishedXml (PublishCatalogLogId
		,PublishedId
		,PublishedXML
		,IsProductXML
		,LocaleId
		,CreatedBy
		,CreatedDate
		,ModifiedBy
		,ModifiedDate
		,PublishCategoryId)
		SELECT zpp.VersionId,zpp.PublishProductId, '<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'+CAST(ISNULL(ZPCP.PublishCategoryId,'')  AS VARCHAR(50))+'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKU>'+'<SKULower>'+CAST(ISNULL((SELECT ''+LOWER(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
		+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +'</IsParentProducts><CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000)) +'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
		+'<RetailPrice>'+ISNULL(CAST(RetailPrice  AS VARCHAr(500)),'')+'</RetailPrice>'
		+'<SalesPrice>'+ISNULL(CAST(SalesPrice AS VARCHAr(500)), '') +'</SalesPrice>'
		+'<CurrencyCode>'+ISNULL(CurrencyCode,'') +'</CurrencyCode>'
		+'<CultureCode>'+ISNULL(CultureCode,'') +'</CultureCode>'
		+'<CurrencySuffix>'+ISNULL(CurrencySuffix,'') +'</CurrencySuffix>'
		+'<SeoUrl>'+ISNULL(SEOUrl,'') +'</SeoUrl>'
		+'<SeoDescription>'+ISNULL((SELECT ''+SEODescription FOR XML PATH('') ),'') +'</SeoDescription>'
		+'<SeoKeywords>'+ISNULL((SELECT ''+SEOKeywords FOR XML PATH('')),'') +'</SeoKeywords>'
		+'<SeoTitle>'+ISNULL((SELECT ''+SEOTitle FOR XML PATH('')),'') +'</SeoTitle>'
		+'<ImageSmallPath>'+ISNULL(ImageSmallPath,'') +'</ImageSmallPath>'
		+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
						FROM ZnodeProfileCatalog ZPFC 
						INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
						WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+'</TempProfileIds><ProductIndex>'+CAST(ROW_NUMBER()Over(Partition BY zpp.PublishProductId Order BY ISNULL(ZPC.PublishCategoryId,'0') ) AS VARCHAr(100))+'</ProductIndex><IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
		'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
		STUFF(( SELECT '  '+ AttributeValue  FROM #Cte_GetData TY WHERE TY.PimProductId = ZPP.PimProductId   AND TY.VersionId = ZPP.VersionId
		FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>'  xmlvalue,1,@LocaleId,@UserId , @GetDate , @UserId,@GetDate
		,ZPCP.PublishCategoryId
		
		FROM  #TBL_PublishCatalogId zpp
		INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
		INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
		LEFT JOIN #ZnodePrice TBZP ON (TBZP.PublishProductId = ZPP.PublishProductId)
		LEFT JOIN #ProductSKU TBPS ON (TBPS.PublishProductId = ZPP.PublishProductId)
		LEFT JOIN #ProductImages TBPI ON (TBPI.PublishProductId = ZPP.PublishProductId)
		LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT JOIN ZnodePublishCategory ZPC ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId )
		LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId AND  ZPCCF.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId)
		LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ISNULL(ZPCP.PublishCategoryId,0) AND ZPCD.LocaleId = @LocaleId )
		WHERE ZPPDFG.LocaleId = @LocaleId AND ZPP.LocaleId = @LocaleId
		ORDER BY zpp.PublishProductId ASC 

      
END 
 

DELETE FROM #TBL_CustomeFiled
DELETE FROM #PimDefaultValueLocale
 IF OBJECT_ID('tempdb..#PimProductAttributeXML') is not null
 BEGIN 
 DELETE FROM #PimProductAttributeXML
 END
 IF OBJECT_ID('tempdb..#Cte_GetData') is not null
 BEGIN 
 DROP TABLE #Cte_GetData
 END
   IF OBJECT_ID('tempdb..#Cte_BrandData') is not null
 BEGIN 
 DROP TABLE #Cte_BrandData
 END
  IF OBJECT_ID('tempdb..#TBL_AttributeVAlue') is not null
 BEGIN 
 DROP TABLE #TBL_AttributeVAlue
 END
 IF OBJECT_ID('tempdb..#View_LoadManageProductInternal') is not null
 BEGIN 
 DROP TABLE #View_LoadManageProductInternal
 END
 IF OBJECT_ID('tempdb..#TBL_CustomeFiled') is not null
 BEGIN 
 DROP TABLE #TBL_CustomeFiled
 END
SET @Counter = @counter + 1 
END 
END TRY 
BEGIN CATCH 

 SELECT ERROR_MESSAGE()
 UPDATE ZnodePublishCatalogLog 
	    SET IsCatalogPublished = 0 
		,IsCategoryPublished = 0,IsProductPublished= 0  
		WHERE EXISTS (SELECT TOP 1 1 from #TBL_PublishCatalogId TR WHERE TR.VersionId = ZnodePublishCatalogLog.PublishCatalogLogId)
END CATCH 
END

GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishSingleProduct')
BEGIN 
	DROP PROCEDURE Znode_GetPublishSingleProduct
END
GO

CREATE PROCEDURE [dbo].[Znode_GetPublishSingleProduct]
(
@PublishCatalogId INT = 0 
,@VersionId       VARCHAR(50) = 0 
,@PimProductId    TransferId Readonly 
,@UserId		  INT = 0 
,@TokenId nvarchar(max)= ''	
,@LocaleIds TransferId READONLY
,@PublishStateId INT = 0  
)
AS


--Declare @PimProductId TransferId 
--insert into @PimProductId  select 128 
-- EXEC [Znode_GetPublishSingleProduct]  @PublishCatalogId = 0 ,@VersionId= 0 ,@PimProductId =@PimProductId, @UserId=2 

BEGIN 
  
 SET NOCOUNT ON 

EXEC Znode_InsertUpdatePimAttributeXML 1 
EXEC Znode_InsertUpdateCustomeFieldXML 1
EXEC Znode_InsertUpdateAttributeDefaultValue 1 

 IF OBJECT_ID('tempdb..#Cte_BrandData') is not null
 BEGIN 
	DROP TABLE #Cte_BrandData
 END 

--DECLARE @PimProductAttributeXML TABLE(PimAttributeXMLId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )
CREATE TABLE #PimProductAttributeXML (PimAttributeXMLId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )
DECLARE @PimDefaultValueLocale  TABLE (PimAttributeDefaultXMLId INT  PRIMARY KEY ,PimAttributeDefaultValueId INT ,LocaleId INT ) 
DECLARE @ProductNamePimAttributeId INT = dbo.Fn_GetProductNameAttributeId(),@DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId(),@LocaleId INT = 0 
		,@SkuPimAttributeId  INT =  dbo.Fn_GetProductSKUAttributeId() , @IsActivePimAttributeId INT =  dbo.Fn_GetProductIsActiveAttributeId()
DECLARE @GetDate DATETIME =dbo.Fn_GetDate()
DECLARE @TBL_LocaleId  TABLE (RowId INT IDENTITY(1,1) PRIMARY KEY  , LocaleId INT )

DECLARE @DomainUrl varchar(max) = (select TOp 1 URL FROM ZnodeMediaConfiguration WHERE IsActive =1)

			INSERT INTO @TBL_LocaleId (LocaleId)
			SELECT  LocaleId
			FROM ZnodeLocale MT
			WHERE IsActive = 1
			AND (EXISTS (SELECT TOP 1 1  FROM @LocaleIds RT WHERE RT.Id = MT.LocaleId )
			OR NOT EXISTS (SELECT TOP 1 1 FROM @LocaleIds )) 


DECLARE @Counter INT =1 ,@maxCountId INT = (SELECT max(RowId) FROM @TBL_LocaleId ) 

 CREATE TABLE #TBL_PublishCatalogId (PublishCatalogId INT,PublishProductId INT,PimProductId  INT   , VersionId INT ,LocaleId INT, PriceListId INT , PortalId INT ,MaxSmallWidth NVARCHAr(max)  )
CREATE INDEX idx_#TBL_PublishCatalogIdPimProductId on #TBL_PublishCatalogId(PimProductId)
CREATE INDEX idx_#TBL_PublishCatalogIdPimPublishCatalogId on #TBL_PublishCatalogId(PublishCatalogId)

			 INSERT INTO #TBL_PublishCatalogId 
			 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId, MAX(PublishCatalogLogId) ,LocaleId ,(SELECT TOP 1 PriceListId FROM ZnodePriceListPortal NT WHERE TY.PortalId =  NT.PortalId
			 ORDER BY NT.Precedence ASC ) , TY.PortalId
							, (SELECT TOP 1  MAX(MaxSmallWidth) FROM ZnodePortalDisplaySetting TYR WHERE TYR.PortalId = TY.PortalId)
			 FROM ZnodePublishProduct ZPP 
			 INNER JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
			 LEFT JOIN ZnodePortalCatalog TY ON (TY.PublishCatalogId = ZPP.PublishCatalogId)
			 WHERE (EXISTS (SELECT TOP 1 1 FROM @PimProductId SP WHERE SP.Id = ZPP.PimProductId  AND  (@PublishCatalogId IS NULL OR @PublishCatalogId = 0 ))
			 OR  (ZPP.PublishCatalogId = @PublishCatalogId ))
			 AND IsCatalogPublished =1
			 AND ZPCP.PublishStateId = @PublishStateId 
			 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,LocaleId, TY.PortalId
		
             DECLARE   @TBL_ZnodeTempPublish TABLE (PimProductId INT , AttributeCode VARCHAR(300) ,AttributeValue NVARCHAR(max) ) 			
			 DECLARE @TBL_AttributeVAlueLocale TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT,LocaleId INT ,AttributeValue Nvarchar(1000) )

			 INSERT INTO @TBL_AttributeVAlueLocale (PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId ,LocaleId ,AttributeValue )
			 SELECT VIR.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId,VIR.LocaleId, ''
			 FROM View_LoadManageProductInternal VIR
			 INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = VIR.PimProductId)
			 UNION ALL 
			 SELECT VIR.PimProductId,PimAttributeId,PimProductAttributeMediaId,ZPDE.LocaleId , ''
			 FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimProductAttributeMedia ZPDE ON (ZPDE.PimAttributeValueId = VIR.PimAttributeValueId )
			 WHERE EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
			 Union All 
			 SELECT VIR.PimProductId,VIR.PimAttributeId,ZPDVL.PimAttributeDefaultValueLocaleId,ZPDVL.LocaleId ,ZPDVL.AttributeDefaultValue
			   FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1 )
			 INNER JOIN ZnodePimAttributeDefaultValue ZPADV ON ZPADV.PimAttributeId = D.PimAttributeId
			 INNER JOIN ZnodePimAttributeDefaultValueLocale ZPDVL   on (ZPADV.PimAttributeDefaultValueId = ZPDVL.PimAttributeDefaultValueId)
			 --INNER JOIN ZnodePimProductAttributeDefaultValue ZPDVP ON (ZPDVP.PimAttributeValueId = VIR.PimAttributeValueId AND ZPADV.PimAttributeDefaultValueId = ZPDVP.PimAttributeDefaultValueId )
			 WHERE ( ZPDVL.LocaleId = @DefaultLocaleId OR ZPDVL.LocaleId = @LocaleId )
			 AND EXISTS(SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
			 Union All 
			 SELECT VIR.PimProductId,VIR.PimAttributeId,'','' ,''
			 FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1 )
			 WHERE  EXISTS(SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )

			SELECT RetailPrice,SalesPrice,ZC.CurrencyCode,ZCC.CultureCode ,ZCC.Symbol CurrencySuffix,TYU.PublishProductId
			INTO #ZnodePrice
			FROM ZnodePrice ZP 
			INNER JOIN ZnodePriceList ZPL ON (ZPL.PriceListId = ZP.PriceListId)
			INNER JOIN ZnodeCurrency ZC oN (ZC.CurrencyId = ZPL.CurrencyId )
			INNER JOIN ZnodeCulture ZCC ON (ZCC.CultureId = ZPL.CultureId)
			INNER JOIN ZnodePublishProductDetail TY ON (TY.SKU = ZP.SKU ) 
			INNER JOIN ZnodePublishProduct TYU ON (TYU.PublishProductId = TY.PublishProductId)
			--INNER JOIN ZnodePriceListPortal ZPLP ON ZPLP.PriceListId=ZP.PriceListId
			--INNER JOIN ZnodePimCatalog ZPC on ZPC.PortalId=ZPLP.PortalId 
			WHERE EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId TYUR WHERE TYUR.PriceListId = ZPL.PriceListId AND TYUR.PublishCatalogId = TYU.PublishCatalogId
			AND TYU.PublishProductId = TYUR.PublishProductId)
			AND TY.LocaleId = dbo.Fn_GetDefaultLocaleId()
			AND EXISTS (SELECT TOP 1 1 FROM ZnodePriceListPortal ZPLP 
	        INNER JOIN ZnodePimCatalog ZPC on ZPC.PortalId=ZPLP.PortalId WHERE ZPLP.PriceListId=ZP.PriceListId )
			--ORDER BY ZPLP.Precedence ASC
			

			SELECT ZCSD.SEOUrl , ZCDL.SEODescription,ZCDL.SEOKeywords ,ZCDL.SEOTitle, TYU.PublishProductId
			INTO #ProductSKU 
			FROM ZnodeCMSSEODetail ZCSD 
			INNER JOIN ZnodeCMSSEODetailLocale ZCDL ON (ZCDL.CMSSEODetailId = ZCSD.CMSSEODetailId)
			INNER JOIN ZnodePublishProductDetail TY ON (TY.SKU = ZCSD.SEOCode AND ZCDL.LocaleId = TY.LocaleId) 
			INNER JOIN ZnodePublishProduct TYU ON (TYU.PublishProductId = TY.PublishProductId)
			WHERE CMSSEOTypeId = (SELECT TOP 1 CMSSEOTypeId FROM ZnodeCMSSEOType WHERE Name = 'Product') 
			AND EXISTS (SELECT TOP 1 1  FROM #TBL_PublishCatalogId TYUR WHERE  TYUR.PublishCatalogId = TYU.PublishCatalogId
			AND TYU.PublishProductId = TYUR.PublishProductId)
			AND ZCDL.LocaleId = dbo.Fn_GetDefaultLocaleId()
			
			
			SELECT  TYU.PublishProductId , @DomainUrl +'Catalog/'  + CAST(PortalId AS VARCHAr(100)) + '/'+ CAST(MaxSmallWidth AS VARCHAR(100)) + '/' + RT.MediaPath AS ImageSmallPath   
			INTO #ProductImages
			FROM ZnodePimAttributeValue ZPAV 
			INNER JOIN ZnodePublishProduct TYU ON (TYU.PimProductId  = ZPAV.PimProductId)
			INNER JOIN ZnodePimProductAttributeMedia  RT ON ( RT.PimAttributeValueId = ZPAV.PimAttributeValueId )
			LEFT JOIN #TBL_PublishCatalogId TUI ON (TUI.PublishProductId = TYU.PublishProductId AND TUI.PublishCatalogId = TYU.PublishCatalogId)
			WHERE  RT.LocaleId = dbo.Fn_GetDefaultLocaleId()
			AND ZPAV.PimAttributeId = (SELECT TOp 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'ProductImage')



WHILE @Counter <= @maxCountId
BEGIN
 SET @LocaleId = (SELECT TOP 1 LocaleId FROM @TBL_LocaleId WHERE RowId = @Counter)
 
  INSERT INTO #PimProductAttributeXML 
  SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeXML
  WHERE LocaleId = @LocaleId

  INSERT INTO #PimProductAttributeXML 
  SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeXML ZPAX
  WHERE ZPAX.LocaleId = @DefaultLocaleId  
  AND NOT EXISTS (SELECT TOP 1 1 FROM #PimProductAttributeXML ZPAXI WHERE ZPAXI.PimAttributeId = ZPAX.PimAttributeId )

  INSERT INTO @PimDefaultValueLocale
  SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultXML
  WHERE localeId = @LocaleId

  INSERT INTO @PimDefaultValueLocale 
   SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultXML ZX
  WHERE localeId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM @PimDefaultValueLocale TRTR WHERE TRTR.PimAttributeDefaultValueId = ZX.PimAttributeDefaultValueId)
  
 
  --DECLARE @TBL_AttributeVAlue TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT  )
  --DECLARE @TBL_CustomeFiled TABLE (PimCustomeFieldXMLId INT ,CustomCode VARCHAR(300),PimProductId INT ,LocaleId INT )
  CREATE TABLE #TBL_CustomeFiled  (PimCustomeFieldXMLId INT ,CustomCode VARCHAR(300),PimProductId INT ,LocaleId INT )
  CREATE TABLE #TBL_AttributeVAlue (PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT  )



  INSERT INTO #TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,RTR.PimProductId ,RTR.LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML RTR 
  INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = RTR.PimProductId)
  WHERE RTR.LocaleId = @LocaleId
 

  INSERT INTO #TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,ITR.PimProductId ,ITR.LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML ITR
  INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ITR.PimProductId)
  WHERE ITR.LocaleId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM #TBL_CustomeFiled TBL  WHERE ITR.CustomCode = TBL.CustomCode AND ITR.PimProductId = TBL.PimProductId)
  

    INSERT INTO #TBL_AttributeVAlue (PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId )
    SELECT PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId
	FROM @TBL_AttributeVAlueLocale
    WHERE LocaleId = @LocaleId

    
	INSERT INTO #TBL_AttributeVAlue(PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId )
	SELECT VI.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId
	FROM @TBL_AttributeVAlueLocale VI 
    WHERE VI.LocaleId = @DefaultLocaleId 
	AND NOT EXISTS (SELECT TOP 1 1 FROM #TBL_AttributeVAlue  CTE WHERE CTE.PimProductId = VI.PimProductId AND CTE.PimAttributeId = VI.PimAttributeId )
 
INSERT INTO @TBL_ZnodeTempPublish  
SELECT  a.PimProductId,a.AttributeCode , '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(a.AttributeValue,'')+'</AttributeValues> </AttributeEntity>  </Attributes>'  AttributeValue
FROM View_LoadManageProductInternal a 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = a.PimAttributeId )
INNER JOIN #PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
INNER JOIN #TBL_AttributeValue CTE ON (Cte.PimAttributeId = a.PimAttributeId AND Cte.ZnodePimAttributeValueLocaleId = a.ZnodePimAttributeValueLocaleId)
UNION ALL 
SELECT  a.PimProductId,c.AttributeCode , '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+TAVL.AttributeValue+'</AttributeValues> </AttributeEntity>  </Attributes>'  AttributeValue
FROM ZnodePimAttributeValue  a 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = a.PimAttributeId )
INNER JOIN #PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
INNER JOIN ZnodePImAttribute ZPA  ON (ZPA.PimAttributeId = a.PimAttributeId)
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = a.PimProductId)
Inner JOIN @TBL_AttributeVAlueLocale TAVL ON  (c.PimAttributeId = TAVL.PimAttributeId  and ZPP.PimProductId = TAVL.PimProductId )
WHERE ZPA.IsPersonalizable = 1 
AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodePimAttributeValueLocale q WHERE q.PimAttributeValueId = a.PimAttributeValueId) 



UNION ALL 
SELECT THB.PimProductId,THB.CustomCode,'<Attributes><AttributeEntity>'+CustomeFiledXML +'</AttributeEntity></Attributes>' 
FROM ZnodePimCustomeFieldXML THB 
INNER JOIN #TBL_CustomeFiled TRTE ON (TRTE.PimCustomeFieldXMLId = THB.PimCustomeFieldXMLId)
UNION ALL 
SELECT ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues></AttributeValues>'+'<SelectValues>'+
			   STUFF((
                    SELECT '  '+ DefaultValueXML  FROM ZnodePimAttributeDefaultXML AA 
				 INNER JOIN @PimDefaultValueLocale GH ON (GH.PimAttributeDefaultXMLId = AA.PimAttributeDefaultXMLId)
				 INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId )
				 WHERE (ZPADV.PimAttributeValueId = ZPAV.PimAttributeValueId)
    FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</SelectValues> </AttributeEntity></Attributes>' AttributeValue
 
FROM ZnodePimAttributeValue ZPAV  With (NoLock)
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
UNION ALL 
SELECT DISTINCT  ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+SUBSTRING((SELECT DISTINCT ',' +MediaPath 
	FROM ZnodePimProductAttributeMedia ZPPG
	INNER JOIN  #TBL_AttributeVAlue TBLV ON (TBLV.PimProductId=  ZPAV.PimProductId AND TBLV.PimAttributeId = ZPAV.PimAttributeId )
    WHERE ZPPG.PimProductAttributeMediaId = TBLV.ZnodePimAttributeValueLocaleId
	FOR XML PATH ('')
 ),2,4000)+'</AttributeValues></AttributeEntity></Attributes>' AttributeValue
 	 
FROM ZnodePimAttributeValue ZPAV 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeMedia ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
UNION ALL 
SELECT ZPLP.PimParentProductId ,c.AttributeCode, '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(SUBSTRING((SELECT ','+CAST(PublishProductId AS VARCHAR(50)) 
							 FROM ZnodePublishProduct ZPPI 
							 INNER JOIN ZnodePimLinkProductDetail ZPLPI ON (ZPLPI.PimProductId = ZPPI.PimProductId)
							 WHERE ZPLPI.PimParentProductId = ZPLP.PimParentProductId
							 AND ZPLPI.PimAttributeId   = ZPLP.PimAttributeId
							 AND ZPPI.PublishCatalogId = ZPP.PublishCatalogId
							 FOR XML PATH ('') ),2,4000),'')+'</AttributeValues></AttributeEntity></Attributes>'   AttributeValue 
							
FROM ZnodePimLinkProductDetail ZPLP 
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPLP.PimParentProductId)
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPLP.PimAttributeId )
INNER JOIN #PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
GROUP BY ZPLP.PimParentProductId , ZPP.PublishProductId  ,ZPLP.PimAttributeId,c.AttributeCode,c.AttributeXML,ZPP.PublishCatalogId

UNION ALL 
SELECT ZPAV.PimProductId,'DefaultSkuForConfigurable' ,'<Attributes><AttributeEntity>'+REPLACE(REPLACE (c.AttributeXML,'ProductType','DefaultSkuForConfigurable'),'Product Type','Default Sku For Configurable')+'<AttributeValues>'+
 (SELECT TOP 1 AttributeValue FROM View_LoadManageProductInternal ad 
 INNER JOIN ZnodePimProductTypeAssociation yt ON (yt.PimProductId = ad.PimProductId)
 WHERE Ad.AttributeCode = 'SKU'
 AND yt.PimParentProductId = ZPAV.PimProductId
ORDER BY yt.DisplayOrder , yt.PimProductTypeAssociationId ASC)
+'</AttributeValues></AttributeEntity></Attributes>' AttributeValue 
FROM ZnodePimAttributeValue ZPAV  
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL 
INNER JOIN ZnodePimAttributeDefaultValue dr ON (dr.PimAttributeDefaultValueId = ZPADVL.PimAttributeDefaultValueId)
 WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId
 AND dr.AttributeDefaultValueCode= 'ConfigurableProduct' 
)
AND EXISTS (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)
AND c.AttributeCode = 'ProductType' 

---------brand details 
CREATE TABLE #Cte_BrandData (PimProductId int,BrandXML nvarchar(max))

INSERT INTO #Cte_BrandData ( PimProductId, BrandXML )
SELECT  DISTINCT ZBP.PimProductId,'<Brands><BrandEntity><BrandId>'+CAST(ZBD.BrandId AS VARCHAR(50))+'</BrandId><BrandCode>'+ZBD.BrandCode+'</BrandCode><BrandName>'+ZBDL.BrandName+'</BrandName></BrandEntity></Brands>' as BrandXML					   		   
FROM [ZnodeBrandDetails] AS ZBD
INNER JOIN ZnodeBrandDetaillocale ZBDL ON ZBD.BrandId = ZBDL.BrandId
INNER JOIN [ZnodeBrandProduct] AS ZBP ON ZBD.BrandId = ZBP.BrandId

 DELETE FROM ZnodePublishedXML WHERE  IsProductXML = 1  AND LocaleId = @localeId 
								AND  EXISTS ( SELECT TOP 1 1 FROM  #TBL_PublishCatalogId  TBL WHERE TBL.VersionId  = ZnodePublishedXML.PublishCatalogLogId AND TBL.PublishProductId = ZnodePublishedXML.PublishedId)


;WITH CTE AS
(
SELECT ROW_NUMBER() OVER (PARTITION BY PimProductId	,AttributeCode
ORDER BY PimProductId	,AttributeCode) AS RN
FROM @TBL_ZnodeTempPublish
)

DELETE FROM CTE WHERE RN<>1


 

  
 MERGE INTO ZnodePublishedXML TARGET 
 USING (
 SELECT zpp.PublishProductId,zpp.VersionId ,
'<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+
CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'
+CAST(ISNULL(ZPC.PublishCategoryId,'')  AS VARCHAR(50))+
'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+
'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+
'</SKU><SKULower>'+CAST(ISNULL((SELECT ''+Lower(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ 
'</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +
'</IsParentProducts>'
+'<RetailPrice>'+ISNULL(CAST(RetailPrice  AS VARCHAr(500)),'')+'</RetailPrice>'
+'<SalesPrice>'+ISNULL(CAST(SalesPrice AS VARCHAr(500)), '') +'</SalesPrice>'
+'<CurrencyCode>'+ISNULL(CurrencyCode,'') +'</CurrencyCode>'
+'<CultureCode>'+ISNULL(CultureCode,'') +'</CultureCode>'
+'<CurrencySuffix>'+ISNULL(CurrencySuffix,'') +'</CurrencySuffix>'
+'<SeoUrl>'+ISNULL(SEOUrl,'') +'</SeoUrl>'
+'<SeoDescription>'+ISNULL(SEODescription,'') +'</SeoDescription>'
+'<SeoKeywords>'+ISNULL(SEOKeywords,'') +'</SeoKeywords>'
+'<SeoTitle>'+ISNULL(SEOTitle,'') +'</SeoTitle>'
+'<ImageSmallPath>'+ISNULL(ImageSmallPath,'') +'</ImageSmallPath>'
+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
FROM ZnodeProfileCatalog ZPFC 
INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+'</TempProfileIds><ProductIndex>'+CAST(ISNULL(ZPCP.ProductIndex,1)  AS VARCHAr(100))+'</ProductIndex><IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
+'<CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000))+
'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+
'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
+'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
ISNULL(STUFF(( SELECT '  '+ BrandXML  FROM #Cte_BrandData BD WHERE BD.PimProductId = ZPP.PimProductId   
				FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, ''),'')+
STUFF(( SELECT '  '+ AttributeValue  FROM @TBL_ZnodeTempPublish TY WHERE TY.PimProductId = ZPP.PimProductId   
	FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>' xmlvalue
	FROM  #TBL_PublishCatalogId zpp
	INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
	INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)

	LEFT JOIN #ZnodePrice TBZP ON (TBZP.PublishProductId = ZPP.PublishProductId)
	LEFT JOIN #ProductSKU TBPS ON (TBPS.PublishProductId = ZPP.PublishProductId)
	LEFT JOIN #ProductImages TBPI ON (TBPI.PublishProductId = ZPP.PublishProductId)

	LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
	LEFT JOIN ZnodePublishCategory ZPC ON (ZPC.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId)
	LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId AND  ZPCCF.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId)
	LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ZPCP.PublishCategoryId AND ZPCD.LocaleId = @LocaleId )
	WHERE ZPPDFG.LocaleId = @LocaleId
	AND zpp.LocaleId = @LocaleId
	) SOURCE 
	ON (
     TARGET.PublishCatalogLogId = SOURCE.versionId 
	 AND TARGET.PublishedId = SOURCE.PublishProductId
	 AND TARGET.IsProductXML = 1 
	 AND TARGET.LocaleId = @localeId 
)
WHEN MATCHED THEN 
UPDATE 
SET  PublishedXML = xmlvalue
   , ModifiedBy = @userId 
   ,ModifiedDate = @GetDate
   ,ImportedGuId = @TokenId 
WHEN NOT MATCHED THEN 
INSERT (PublishCatalogLogId
,PublishedId
,PublishedXML
,IsProductXML
,LocaleId
,CreatedBy
,CreatedDate
,ModifiedBy
,ModifiedDate,ImportedGuId)

VALUES (SOURCE.versionid , Source.publishProductid,Source.xmlvalue,1,@localeid,@userId,@getDate,@userId,@getDate,@TokenId);

DELETE FROM @TBL_ZnodeTempPublish
IF OBJECT_ID('tempdb..#PimProductAttributeXML') is not null
 BEGIN 
	DELETE FROM #PimProductAttributeXML
 END
 IF OBJECT_ID('tempdb..#TBL_CustomeFiled') is not null
 BEGIN 
 DROP TABLE #TBL_CustomeFiled
 END
 IF OBJECT_ID('tempdb..#TBL_AttributeVAlue') is not null
 BEGIN 
 DROP TABLE #TBL_AttributeVAlue
 END
 
DELETE FROM @PimDefaultValueLocale


 IF OBJECT_ID('tempdb..#Cte_BrandData') is not null
 BEGIN 
 DROP TABLE #Cte_BrandData
 END 

SET @Counter = @counter + 1 
END

END
GO


IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishProducts')
BEGIN 
	DROP PROCEDURE Znode_GetPublishProducts
END
GO
CREATE PROCEDURE [dbo].[Znode_GetPublishProducts](
	    @PublishCatalogId int= NULL
	  , @PublishCategoryId varchar(2000)= NULL
	  , @UserId int
	  , @NotReturnXML int= NULL
	  , @PimProductId TransferId Readonly
	  , @VersionId int= 0
	  , @IsDebug bit= 0
	  , @TokenId nvarchar(max)= ''
	  , @LocaleId TransferId READONLY 
	  , @PublishStateId INT = 0 
	  )
AS
    
/*
    Summary :	Publish Product on the basis of publish catalog
				Retrive all Product details with attributes and insert into following tables 
				1.	ZnodePublishedXml
				2.	ZnodePublishCategoryProduct
				3.	ZnodePublishProduct
				4.	ZnodePublishProductDetail

                Product details include all the type of products link, grouped, configure and bundel products (include addon) their associated products 
				collect their attributes and values into tables variables to process for publish.  
                
				Finally genrate XML for products with their attributes and inserted into ZnodePublishedXml Znode Admin process xml from sql server to mongodb
				one by one.

    Unit Testing
    
    SELECT * FROM ZnodePimCustomField WHERE CustomCode = 'Test'
    SELECT * FROM ZnodePimCatalogCategory WHERE pimCatalogId = 3 AND PimProductId = 181
    SELECT * FROM ZnodePimCustomFieldLocale WHERE PimCustomFieldId = 1
    SELECT * FROM ZnodePublishProduct WHERE PublishProductid = 213 = 30
    select * from znodepublishcatalog
    SELECT * FROM view_loadmanageProduct WHERE Attributecode = 'ProductNAme' AND AttributeValue LIKE '%Apple%'
    SELECT * FROM ZnodePimCategoryProduct WHERE  PimProductId = 181
    SELECT * FROM ZnodePimCatalogcategory WHERE pimcatalogId = 3 \
	DECLARE @ttr TransferId 
	INSERT INTO @ttr  
	SELECT 25719 
    EXEC Znode_GetPublishProducts  @PublishCatalogId = 3 ,@UserId= 2 ,@NotReturnXML= NULL,@PimProductId = @ttr,@IsDebug= 1 
    EXEC Znode_GetPublishProducts  @PublishCatalogId = null,@UserId= 2 ,@NotReturnXML= NULL,@IsDebug= 1  ,@PimProductId = 103
    EXEC Znode_GetPublishProducts  @PublishCatalogId =1,@UserId= 2 ,@RequiredXML= 1	
    SELECT * FROM 	ZnodePimCatalogCategory  WHERE pimcatalogId = 3  
    SELECT * FROM [dbo].[ZnodePimCategoryHierarchy]  WHERE pimcatalogId = 3 
 */
  
BEGIN
	
	BEGIN TRY
		SET NOCOUNT ON;
			 DECLARE @IsCatalogPublishInProcess BIT = 0
	         DECLARE @TBL_PublishIds TABLE (PublishProductId INT , PimProductId INT , PublishCatalogId INT)
			 DECLARE @PublishStateidForPriview INT = [dbo].[Fn_GetPublishStateIdForPreview]()
			 DECLARE @DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId()
			 
			 --User cananot modify / update UDT, Need to declare additinal table variable for editing in other store procedure.
			 DECLARE @PimProductId_Editable TransferId
			 
			 ------To update SKU on basis of PublishProductId
			 UPDATE ZCCR set ZCCR.SKU = ZPPD.SKU
			 FROM ZnodePublishProductDetail ZPPD
			 INNER JOIN ZnodeCMSCustomerReview ZCCR on ZPPD.PublishProductId = ZCCR.PublishProductId
			 INNER JOIN ZnodePublishProduct ZPP on ZPPD.PublishProductId = ZPP.PublishProductId
			 where ZCCR.SKU is null and ZPP.PublishCatalogId = @PublishCatalogId

			 IF EXISTS (SELECT TOP 1 1  FROM ZnodePublishCatalogLog a 
			   INNER JOIN ZnodePimCatalogCategory b ON (b.PimCatalogId =a.PimCatalogId )
			   WHERE EXISTS ( SELECT TOP 1 1 FROM @PimProductId SP WHERE  b.PimProductId = SP.Id )
			   AND a.IsCatalogPublished IS NULL 
			   ) 
			   BEGIN 
				 SET   @IsCatalogPublishInProcess =1 
			   END 
			     
	         IF (( @PublishCatalogId IS NULL  OR @PublishCatalogId = 0 ) AND @IsCatalogPublishInProcess = 0 )
			 BEGIN 
			   -- Process call single product publish
			   INSERT INTO @TBL_PublishIds 
			   EXEC [dbo].[Znode_InsertPublishProductIds] @PublishCatalogId,@userid,@PimProductId
			
			   INSERT INTO @PimProductId_Editable
			   SELECT distinct PimProductId FROM @TBL_PublishIds
			   -- initiate single product publish 
			   EXEC Znode_GetPublishSingleProduct @PublishCatalogId,@VersionId,@PimProductId_Editable,@UserId,@TokenId , @LocaleId,@PublishStateId
			  -- SELECT 	@PimProductId	
			 END 
			 ELSE IF  @IsCatalogPublishInProcess = 0 
			 BEGIN 
				-- Process call catalog publish (include category, products with multiple types)
			     EXEC [dbo].[Znode_InsertPublishProductIds] @PublishCatalogId,@userid,@PimProductId
				 EXEC Znode_GetPublishProductbulk @PublishCatalogId=@PublishCatalogId,@VersionId=@VersionId,@PimProductId=@PimProductId,@userid=@userid,@LocaleIds= @LocaleId,@PublishStateId = @PublishStateId
				 UPDATE ZnodePimProduct SET IsProductPublish = 1,PublishStateId =  @PublishStateId 
				 WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePublishProduct ZPP WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId AND ZPP.PublishCatalogId = @PublishCatalogId)
			 END 
			
			 DECLARE @TBL_PublishCatalogId TABLE(PublishCatalogId INT,PublishProductId INT,PimProductId  INT , VersionId INT,LocaleId INT  );

			 INSERT INTO @TBL_PublishCatalogId 
			 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,MAX(PublishCatalogLogId) VersionId, ZPCP.LocaleId  
			 FROM ZnodePublishProduct ZPP 
			 LEFT JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
			 WHERE (EXISTS (SELECT TOP 1 1 FROM @TBL_PublishIds SP WHERE SP.PimProductId = ZPP.PimProductId  ))
			 and exists (select top 1 1 from @LocaleId yu where yu.Id = zpcp.LocaleId)
			 AND IsCatalogPublished = 1 
			 AND PublishStateId = @PublishStateId
			 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId , LocaleId 

			
			-- SELECT * FROM @TBL_PublishCatalogId

			IF EXISTS (SELECT TOP 1 1 FROM @PimProductId WHERE ID IS NOT NULL AND ID <> '')

			--IF @PimProductId IS NOT NULL AND @PimProductId <> ''
			BEGIN
				SELECT PublishedXML ProductXml
				FROM ZnodePublishedXml ZPX
				WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId TBLP WHERE TBLP.VersionId = ZPX.PublishCatalogLogId AND TBLP.PublishProductId = ZPX.PublishedId  )
				AND IsProductXML = 1
				AND @IsCatalogPublishInProcess = 0
				;

						
				SELECT PublishProductId  ,PublishCatalogId ,VersionId,LocaleId 
				FROM @TBL_PublishCatalogId
				WHERE @IsCatalogPublishInProcess = 0
				GROUP BY PublishProductId  ,PublishCatalogId ,VersionId,LocaleId;

				IF 	 @IsCatalogPublishInProcess = 1 
				BEGIN 
				SELECT 1 Id , 'Single product publish request cannot be processed as catalog or category publish is in progress. Please try after publish is complete.' MessageDetails,  CAST(0 AS BIT ) Status
				END 
				ELSE 
				BEGIN 
				SELECT 1 Id , ' Publish Successfull' MessageDetails, CAST(1 AS BIT ) Status
				END
				
		
				-- dataset for SEO implementation
				SELECT  SKU 
				FROM ZnodePublishProductDetail PPD 
				INNER JOIN @TBL_PublishCatalogId TPC ON (TPC.PublishProductId = PPD.PublishProductId )
				WHERE EXISTS (SELECT TOP 1 1 FROM @PimProductId tb WHERE tb.ID = TPC.PimProductId)
				AND PPD.localeid = @DefaultLocaleId
				GROUP BY SKU;
				 

			END
			
			
			 SELECT max(PublishCatalogLogId) PublishCatalogLogId,a.LocaleId,PublishCatalogId 
			INTO #Cte_PublishCatalog
			 FROM ZnodePublishCatalogLog  a
			 WHERE a.PublishCatalogId = @PublishCatalogId
			 GROUP BY LocaleId,PublishCatalogId			
			

			--UPDATE ZnodePublishCatalogLog 
			--SET IsProductPublished = 1,
			--    PublishProductId = (SELECT COUNT( DISTINCT  PublishProductId) FROM ZnodePublishCategoryProduct SP  WHERE Sp.PublishCatalogId = ZnodePublishCatalogLog.PublishCatalogId --AND ZnodePublishCatalogLog.IsCatalogPublished = 1
			--						AND ( SP.PublishCategoryId in (SELECT Item FROM dbo.split(ZnodePublishCatalogLog.PublishCategoryId,',') SP ))  )
		 --   WHERE PublishCatalogLogId = @VersionId AND  @VersionId <> 0


			UPDATE ZnodePublishCatalogLog 
			SET IsProductPublished = 1 
			,PublishProductId = (SELECT  COUNT(DISTINCT PublishProductId) FROM ZnodePublishCategoryProduct ZPP WHERE ZPP.PublishCatalogId = ZnodePublishCatalogLog.PublishCatalogId AND ZPP.PublishCategoryId IS NOT NULL) 
			WHERE EXISTS (SELECT TOP 1 1 FROM #Cte_PublishCatalog  TY  WHERE  TY.PublishCatalogLogId =ZnodePublishCatalogLog.PublishCatalogLogId )  


			DECLARE @PimAttributeIsPublish VARCHAR(50) =  [dbo].[Fn_GetAttributeIsPublish]() 

			-----Update PublishProductId on basis of SKU
			update ZCCR set ZCCR.PublishProductId = ZPPD.PublishProductId
			from ZnodePublishProductDetail ZPPD
			inner join ZnodeCMSCustomerReview ZCCR on ZPPD.SKU = ZCCR.SKU
			INNER JOIN ZnodePublishProduct ZPP on ZPPD.PublishProductId = ZPP.PublishProductId
			where ZPP.PublishCatalogId = @PublishCatalogId

			--UPDATE ZnodePimProduct 
			--SET IsProductPublish = 1 
			--WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId ZPP WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId)

			--SELECT * fROM @TBL_PublishCatalogId

			UPDATE ZnodePimProduct 
			SET PublishStateId =  @PublishStateId
			WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId ZPP WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId)

			--END 
	END TRY
	BEGIN CATCH
		SELECT ERROR_MESSAGE(), ERROR_PROCEDURE();
	
		DECLARE @Status bit;
		SET @Status = 0;
		DECLARE @Error_procedure varchar(1000)= ERROR_PROCEDURE(), @ErrorMessage nvarchar(max)= ERROR_MESSAGE(), @ErrorLine varchar(100)= ERROR_LINE(), @ErrorCall nvarchar(max)= 'EXEC Znode_GetPublishProducts @PublishCatalogId = '+CAST(@PublishCatalogId AS varchar(max))+',@PublishCategoryId='+@PublishCategoryId+',@UserId='+CAST(@UserId AS Varchar(50))+',@NotReturnXML='+CAST(@NotReturnXML AS Varchar(50))+',@UserId = '+CAST(@UserId AS Varchar(50))+',

		@VersionId='+CAST(@VersionId AS Varchar(50))+',@TokenId='+CAST(@TokenId AS varchar(max))+',@Status='+CAST(@Status AS varchar(10));
		SELECT 0 AS ID, CAST(0 AS bit) AS Status;
		
		
		UPDATE ZnodePublishCatalogLog 
	    SET IsCatalogPublished = 0 
		,IsCategoryPublished = 0,IsProductPublished= 0  
		WHERE EXISTS (SELECT TOP 1 1 from #Cte_PublishCatalog TR WHERE TR.PublishCatalogLogId = ZnodePublishCatalogLog.PublishCatalogLogId) 
		EXEC Znode_InsertProcedureErrorLog @ProcedureName = 'Znode_GetPublishProducts', @ErrorInProcedure = @Error_procedure, @ErrorMessage = @ErrorMessage, @ErrorLine = @ErrorLine, @ErrorCall = @ErrorCall;
	END CATCH;
END;
GO 

UPDATE ZnodeApplicationSetting 
SET Setting='<?xml version="1.0" encoding="utf-16"?><columns><column><id>1</id><name>UserId</name><headertext>Customer ID</headertext><width>40</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>true</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>y</isconditional><isallowlink>y</isallowlink><islinkactionurl>/Order/GetCustomerDetails</islinkactionurl><islinkparamfield>PortalId,UserId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class>display-none</Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>3</id><name>FullName</name><headertext>Full Name</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield>AccountId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>AccountId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Full Name</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>6</id><name>UserName</name><headertext>Username</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield>UserId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>UserId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>5</id><name>Email</name><headertext>Email ID</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield>UserId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>UserId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>7</id><name>Accountname</name><headertext>Account Name</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield>UserId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>UserId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>7</id><name>RoleName</name><headertext>Role Name</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield>AccountId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>AccountId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Phone Number</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column></columns>'
WHERE ItemName ='ZnodeOrderCustomer'

GO
UPDATE ZnodeApplicationSetting 
SET Setting='<?xml version="1.0" encoding="utf-16"?><columns><column><id>1</id><name>UserId</name><headertext>Checkbox</headertext><width>40</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>y</ischeckbox><checkboxparamfield>UserId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>3</id><name>FullName</name><headertext>Full Name</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield>AccountId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>AccountId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Full Name</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>6</id><name>UserName</name><headertext>Username</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield>AccountId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>AccountId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>User Name</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>5</id><name>Email</name><headertext>Email ID</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield>AccountId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>AccountId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Email Id</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>7</id><name>RoleName</name><headertext>Role Name</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield>AccountId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>AccountId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Phone Number</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>8</id><name>DepartmentName</name><headertext>Department</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield>AccountId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>AccountId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Phone Number</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>10</id><name>Manage</name><headertext>Pending Order History</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format>View</format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield>AccountId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>AccountId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>View</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl>/Account/AccountQuoteList</manageactionurl><manageparamfield>UserId,AccountId</manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class>grid-action</Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>11</id><name>Manage</name><headertext>Order History</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format>View</format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield>AccountId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>AccountId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>View</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl>/Account/AccountUserOrderList</manageactionurl><manageparamfield>UserId,AccountId</manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class>grid-action</Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>12</id><name>Manage</name><headertext>Action</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format>Edit|Disable|Delete</format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield>AccountId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>AccountId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Edit|Lock|Delete</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl>/Account/CustomerEdit|/Account/CustomerEnableDisableAccount|/Account/CustomerDelete</manageactionurl><manageparamfield>UserId,AccountId|AccountId,UserId,IsLock|UserId</manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class>grid-action</Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>13</id><name>LastName</name><headertext>Last Name</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>y</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield>AccountId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>AccountId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Last Name</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>14</id><name>IsLock</name><headertext>Is Lock</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>y</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield>AccountId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>AccountId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Is Lock</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>15</id><name>AccountId</name><headertext>User ID</headertext><width>40</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>y</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield>AccountId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>AccountId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Is Lock</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column></columns>'
WHERE ItemName ='ZnodeAccountsCustomer'

GO
UPDATE ZnodeApplicationSetting 
SET Setting='<?xml version="1.0" encoding="utf-16"?><columns><column><id>1</id><name>PriceListUserId</name><headertext>Checkbox</headertext><width>0</width><datatype>String</datatype><columntype>Int32</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>y</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>2</id><name>FullName</name><headertext>Full Name</headertext><width>0</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>5</id><name>UserName</name><headertext>User Name</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield>AccountId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>AccountId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>User Name</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>4</id><name>EmailId</name><headertext>Email ID</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield>AccountId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>AccountId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Email Id</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>3</id><name>StoreName</name><headertext>Store Name</headertext><width>0</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>6</id><name>Manage</name><headertext>Action</headertext><width>0</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format>Delete</format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Delete</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl>/Price/DeleteAssociatedCustomer</manageactionurl><manageparamfield>priceListUserId,priceListId</manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column></columns>'
WHERE ItemName ='PriceListAccount'

GO
UPDATE ZnodeApplicationSetting 
SET Setting='<?xml version="1.0" encoding="utf-16"?><columns><column><id>1</id><name>UserId</name><headertext>Customer ID</headertext><width>40</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>true</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>y</isconditional><isallowlink>y</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class>display-none</Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>2</id><name>FullName</name><headertext>Full Name</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>y</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield>AccountId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>AccountId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Full Name</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class>fullname</Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>3</id><name>UserName</name><headertext>Username</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield>UserId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>UserId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class>username</Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>4</id><name>Email</name><headertext>Email ID</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield>UserId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>UserId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class>email-id</Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>5</id><name>Accountname</name><headertext>Account Name</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield>UserId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>UserId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>6</id><name>RoleName</name><headertext>Role Name</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield>AccountId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>AccountId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Phone Number</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column></columns>'
WHERE ItemName ='ZnodeGiftCardCustomer'
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_UpdateInventory')
BEGIN 
	DROP PROCEDURE Znode_UpdateInventory
END
GO
Create PROCEDURE [dbo].[Znode_UpdateInventory]
(
	@SkuXml xml,
	@PortalId int, 
	@UserId int, 
	@Status bit OUT, 
	@IsDebug bit= 0)
AS 
	/*
	Summary: (13671)   Inventory will be updated on the basis of "InventoryTracking" (Attribute Code) value in locale table 
				    If value id "DisablePurchasing" then subtracts currently selected quantity only when it will greater than zero.
				    If "AllowBackordering" then inventory will become negative
				    If "DontTrackInventory" then don't update inventory.
				    inventory will be get deducted from associated warehouse where quantity is available as per warehouse precedence. 
				    Validate total quantity 
	Input Parameters:
	SKU(Comma separated multiple), PortalId
	Unit Testing   
		Declare @Status bit 
		Exec Znode_UpdateInventory  @SkuXml = '<ArrayOfOrderWarehouseLineItemsModel>
		<OrderWarehouseLineItemsModel>
		<OrderLineItemId>418</OrderLineItemId>
		<SKU>ap1534</SKU>
		<InventoryTracking>DisablePurchasing</InventoryTracking>
		<Quantity>1.000000</Quantity>
		</OrderWarehouseLineItemsModel>
		<OrderWarehouseLineItemsModel>
		<OrderLineItemId>419</OrderLineItemId>
		<SKU>al8907</SKU>
		<InventoryTracking>DisablePurchasing</InventoryTracking>
		<Quantity>1.000000</Quantity>
		</OrderWarehouseLineItemsModel>
		</ArrayOfOrderWarehouseLineItemsModel>',@PortalId = 1,@UserId = 2,@Status = @Status

	*/
BEGIN
	BEGIN TRAN UpdateInventory;
	BEGIN TRY
		SET NOCOUNT ON;
		DECLARE @RoundOffValue INT= dbo.Fn_GetDefaultValue('InventoryRoundOff');
		DECLARE @TBL_XmlReturnToTable TABLE
		( 
			OrderLineItemId int, SKU nvarchar(max), InventoryTracking nvarchar(1000), Quantity numeric(28, 6),
			AllowBackOrder VARCHAR(100), SequenceNo int IDENTITY
		);
		DECLARE @TBL_ErrorInventoryTracking TABLE
		( 
			SKU nvarchar(max), Quantity numeric(28, 6), InventoryTracking nvarchar(2000), AllowBackOrder varchar(100)
		);
		INSERT INTO @TBL_XmlReturnToTable( OrderLineItemId, SKU, InventoryTracking, Quantity,AllowBackOrder )
			   SELECT Tbl.Col.value( 'OrderLineItemId[1]', 'INT' ) AS OrderLineItemId, Tbl.Col.value( 'SKU[1]', 'NVARCHAR(2000)' ) AS SKU, Tbl.Col.value( 'InventoryTracking[1]', 'NVARCHAR(2000)' ) AS InventoryTracking, Tbl.Col.value( 'Quantity[1]', 'Numeric(28,6)' ) AS Quantity
			   , Tbl.Col.value( 'AllowBackOrder[1]', 'VARCHAR(100)' ) AS AllowBackOrder
			   FROM @SkuXml.nodes( '//ArrayOfOrderWarehouseLineItemsModel/OrderWarehouseLineItemsModel' ) AS Tbl(Col)
			   WHERE Tbl.Col.value( 'InventoryTracking[1]', 'NVARCHAR(2000)' ) <> 'DontTrackInventory' 
			   AND Tbl.Col.value( 'Quantity[1]', 'Numeric(28,6)' ) > 0
			   ;
		DECLARE @Cur_WarehouseId int, @Cur_PortalId int, @Cur_PortalWarehouseId int, @Cur_WarehouseSequence int, @Cur_SKU varchar(200), @Cur_Quantity numeric(28, 6), @Cur_ReOrderLevel numeric(28, 6), @Cur_InventoryId int;
             
			
	
		DECLARE @RecurringQuantity numeric(28, 6), @BalanceQuantity numeric(28, 6)
		SET @Status = 0; 
      		

		DECLARE @TBL_CalculateQuntity TABLE
		( 
			WarehouseId int, SKU varchar(200), MainQuantity numeric(28, 6), InventoryId int, OrderQuantity numeric(28, 6), UpdatedQuantity numeric(28, 6), WarehouseSequenceId int, InventoryTracking nvarchar(2000)
			, AllowBackOrder varchar(100)
		);
		
		DECLARE @TBL_AllwareHouseToportal TABLE
		( 
			WarehouseId int, PortalId int, PortalWarehouseId int, WarehouseSequenceFirst int, WarehouseSequence int, SKU varchar(200), Quantity numeric(28, 6), ReOrderLevel numeric(28, 6), InventoryId int
		);
		
	
		INSERT INTO @TBL_AllwareHouseToportal( WarehouseId, PortalId, PortalWarehouseId, SKU, Quantity, ReOrderLevel, InventoryId, WarehouseSequence, WarehouseSequenceFirst )
			SELECT ZPW.WarehouseId, ZPW.PortalId, zpw.PortalWarehouseId, zi.SKU, zi.Quantity, zi.ReOrderLevel, zi.InventoryId, DENSE_RANK() OVER(ORDER BY ZPW.WarehouseId), 1
			FROM dbo.ZnodeInventory AS zi
			LEFT JOIN [ZnodePortalWarehouse] AS ZPW ON ZPW.WarehouseId = ZI.WareHouseId AND  ZPW.PortalId = @PortalId
			WHERE EXISTS ( SELECT TOP 1 1  FROM @TBL_XmlReturnToTable AS TBXRT WHERE RTRIM(LTRIM(TBXRT.SKU)) = RTRIM(LTRIM(zi.SKU))) ORDER BY ZPW.Precedence DESC;
			
		INSERT INTO @TBL_AllwareHouseToportal( WarehouseId, PortalId, PortalWarehouseId, SKU, Quantity, ReOrderLevel, InventoryId, WarehouseSequence, WarehouseSequenceFirst )
			SELECT zpaw.WarehouseId, @PortalId, zpaw.PortalWarehouseId, zi.SKU, zi.Quantity, zi.ReOrderLevel, zi.InventoryId, DENSE_RANK() OVER (ORDER BY zpaw.WarehouseId),
			CASE WHEN EXISTS ( SELECT TOP 1 1 FROM @TBL_AllwareHouseToportal WE WHERE WE.SKU = ZI.SKU  ) THEN 2 ELSE 1 END
				FROM dbo.ZnodeInventory AS zi INNER JOIN [dbo].[ZnodePortalAlternateWarehouse] AS zpaw ON zpaw.WarehouseId = ZI.WareHouseId
				WHERE EXISTS ( SELECT TOP 1 1 FROM [ZnodePortalWarehouse] AS a WHERE zpaw.PortalWarehouseId = a.PortalWarehouseId AND  a.PortalId = @PortalId) AND 
				EXISTS ( SELECT TOP 1 1 FROM @TBL_XmlReturnToTable AS TBXRT WHERE RTRIM(LTRIM(TBXRT.SKU)) = RTRIM(LTRIM(zi.SKU))) ORDER BY ZPAW.Precedence DESC;
   
		--INSERT INTO @TBL_AllwareHouseToportal( WarehouseId, PortalId, PortalWarehouseId, SKU, Quantity, ReOrderLevel, InventoryId, WarehouseSequence, WarehouseSequenceFirst )
		--	SELECT ZPW.WarehouseId, ZPW.PortalId, zpw.PortalWarehouseId, zi.SKU, zi.Quantity, zi.ReOrderLevel, zi.InventoryId, DENSE_RANK() OVER(ORDER BY ZPW.WarehouseId), 1
		--	FROM dbo.ZnodeInventory AS zi
		--	LEFT JOIN [ZnodePortalWarehouse] AS ZPW ON ZPW.WarehouseId = ZI.WareHouseId AND  ZPW.PortalId = @PortalId
		--	WHERE EXISTS ( SELECT TOP 1 1  FROM @TBL_XmlReturnToTable AS TBXRT WHERE RTRIM(LTRIM(TBXRT.SKU)) = RTRIM(LTRIM(zi.SKU))) ORDER BY ZPW.Precedence DESC;

		
		--Total Avaialble qunatity in all warehouse 
		IF EXISTS ( SELECT TOP 1 1 FROM @TBL_XmlReturnToTable WHERE InventoryTracking = 'DisablePurchasing')
		BEGIN

			INSERT INTO @TBL_ErrorInventoryTracking 
			SELECT TBAHL.SKU, SUM(TBAHL.Quantity), InventoryTracking,TBXML.AllowBackOrder 
			FROM @TBL_XmlReturnToTable AS TBXML
			LEFT JOIN @TBL_AllwareHouseToportal AS TBAHL ON(TBAHL.SKU = TBXML.SKU) 
			INNER JOIN ZnodeOmsOrderLineItems b on (TBXML.orderlineitemid = b.OmsOrderLineItemsId)
			WHERE InventoryTracking = 'DisablePurchasing'
			AND b.OrderLineItemRelationshipTypeId IS NOT NULL
			GROUP BY TBXML.AllowBackOrder ,TBAHL.SKU, InventoryTracking HAVING SUM(TBAHL.Quantity) < 1 ORDER BY TBAHL.SKU;
			IF EXISTS ( SELECT TOP 1 1 FROM @TBL_ErrorInventoryTracking )
			BEGIN
				SET @Status = 0;
				RAISERROR(15600, -1, -1, 'DisablePurchasing');
			END;
		END;

		

			INSERT INTO @TBL_CalculateQuntity
			   SELECT WarehouseId, TBXML.SKU, TBAHL.Quantity, TBAHL.InventoryId, TBXML.Quantity, NULL AS UpdatedQuantity, DENSE_RANK() 
			   OVER(ORDER BY WarehouseSequenceFirst,WarehouseSequence), InventoryTracking, TBXML.AllowBackOrder
			   FROM @TBL_XmlReturnToTable AS TBXML	
			   INNER  JOIN @TBL_AllwareHouseToportal AS TBAHL ON(TBAHL.SKU = TBXML.SKU)
			   ORDER BY  WarehouseSequenceFirst,WarehouseSequence;

		
		
		UPDATE @TBL_CalculateQuntity 
		SET UpdatedQuantity = MainQuantity - OrderQuantity  
		WHERE WarehouseSequenceId = 1;
		 		
		DECLARE @CountToRepeate int= ( SELECT count( distinct WarehouseId) FROM @TBL_CalculateQuntity),@Initializationofloop int= 2;
       
		WHILE @Initializationofloop <= @CountToRepeate 
				AND EXISTS (SELECT TOP 1 1 FROM @TBL_CalculateQuntity AS a 
					WHERE UpdatedQuantity < 0  )
		BEGIN
		 
			UPDATE a  
			SET a.UpdatedQuantity = a.MainQuantity + b.UpdatedQuantity 
			FROM @TBL_CalculateQuntity a 
			INNER JOIN @TBL_CalculateQuntity b ON (a.Sku = b.Sku AND b.WarehouseSequenceId = (@Initializationofloop - 1)) 
			WHERE a.WarehouseSequenceId = @Initializationofloop 
			AND b.UpdatedQuantity < 0
			AND b.UpdatedQuantity IS NOT NULL 
			--AND a.WarehouseSequenceId = @Initializationofloop - 1

			UPDATE @TBL_CalculateQuntity 
			SET UpdatedQuantity  = 0 
			WHERE WarehouseSequenceId = @Initializationofloop -1 
			--AND  InventoryTracking <> 'AllowBackordering'
			AND UpdatedQuantity < 0
			AND UpdatedQuantity IS NOT NULL 
			--AND WarehouseSequenceId = @Initializationofloop - 1


			SET @Initializationofloop = @Initializationofloop + 1;
		END; 
		
		
		   IF EXISTS (SELECT TOP 1 1 FROM @TBL_CalculateQuntity WHERE ISNULL(UpdatedQuantity,0) < 0 AND @CountToRepeate >1)
		   BEGIN 
		    UPDATE a  
			SET a.UpdatedQuantity = b.UpdatedQuantity 
			FROM @TBL_CalculateQuntity a 
			INNER JOIN @TBL_CalculateQuntity b ON (a.Sku = b.Sku AND b.WarehouseSequenceId = @Initializationofloop -1 ) 
			WHERE a.WarehouseSequenceId = 1 
			AND ISNULL(b.UpdatedQuantity,0) < 0

			UPDATE @TBL_CalculateQuntity 
			SET UpdatedQuantity  = 0 
			WHERE WarehouseSequenceId = @Initializationofloop -1 
			--AND  InventoryTracking <> 'AllowBackordering'
		    AND ISNULL(UpdatedQuantity,0) < 0
		   END 
			
			
		--If "AllowBackordering" then inventory will go to be negative conside only single warehouse
		IF EXISTS(SELECT TOP 1 1 FROM @TBL_XmlReturnToTable WHERE InventoryTracking = 'AllowBackordering')
		BEGIN
			UPDATE ZI SET Quantity = Isnull(TBCQ.UpdatedQuantity,0) 
			FROM dbo.ZnodeInventory ZI 
			INNER JOIN @TBL_CalculateQuntity TBCQ ON(Zi.InventoryId = TBCQ.InventoryId)
			WHERE InventoryTracking = 'AllowBackordering' AND  UpdatedQuantity IS NOT NULL  ;
			SET @Status = 1;
		END;
		
					-- If @InventoryTracking is "DisablePurchasing" then subtracts currently selected quantity only when it will greater than zero.
				IF EXISTS ( SELECT TOP 1 1 FROM @TBL_XmlReturnToTable WHERE InventoryTracking = 'DisablePurchasing')
				BEGIN
					SET @BalanceQuantity = 1;
					UPDATE ZI 
					SET Quantity = CASE WHEN TBCQ.UpdatedQuantity < 0 THEN 0 ELSE TBCQ.UpdatedQuantity END 
					FROM dbo.ZnodeInventory ZI 
					INNER JOIN  @TBL_CalculateQuntity TBCQ ON(Zi.InventoryId = TBCQ.InventoryId) WHERE InventoryTracking = 'DisablePurchasing'
					AND TBCQ.UpdatedQuantity IS NOT NULL 
					;
				END;
		
	
		--	SELECT * FROM @TBL_CalculateQuntity
		--SELECT OrderLineItemId, WarehouseId, @UserId, dbo.Fn_GetDate(), @UserId, dbo.Fn_GetDate() 
		--FROM @TBL_CalculateQuntity AS TBCQ 
		--INNER JOIN @TBL_XmlReturnToTable AS TBXR
		--	   ON(TBXR.SKU = TBCQ.SKU) WHERE UpdatedQuantity IS NOT NULL;
		
		INSERT INTO ZnodeOmsOrderWarehouse( OmsOrderLineItemsId, WarehouseId,Quantity, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
		SELECT OrderLineItemId, WarehouseId,CASE WHEN UpdatedQuantity = 0 THEN MainQuantity ELSE MainQuantity - UpdatedQuantity END , @UserId, dbo.Fn_GetDate(), @UserId, dbo.Fn_GetDate() 
		FROM @TBL_CalculateQuntity AS TBCQ 
		INNER JOIN @TBL_XmlReturnToTable AS TBXR
			   ON(TBXR.SKU = TBCQ.SKU) WHERE UpdatedQuantity IS NOT NULL;

			   -- SET @PriceDetail = SUBSTRING(CAST(@Price AS VARCHAR(100)),1, CHARINDEX('.', CAST(@Price AS VARCHAR(100)))+@RoundOffValue);
	  
		SELECT DISTINCT SKU,
		--CAST(SUBSTRING(CAST(UpdatedQuantity AS VARCHAR(100)),1, CHARINDEX('.', CAST(UpdatedQuantity AS VARCHAR(100)),4)+@RoundOffValue) as NUMERIc(28,6)) Quantity,
		 [dbo].[Fn_GetDefaultPriceRoundOffReturnNumeric](UpdatedQuantity) AS Quantity,
		  InventoryTracking,CAST(AllowBackOrder AS BIT) AllowBackOrder
		FROM @TBL_CalculateQuntity
		WHERE UpdatedQuantity IS NOT NULL;
		 

		--SELECT SKU,  Quantity, InventoryTracking 
		--FROM @TBL_ErrorInventoryTracking

		SET @Status = 1;
		COMMIT TRAN UpdateInventory;
	END TRY
	BEGIN CATCH
	
		SET @Status = 0;
		SELECT SKU, Quantity, InventoryTracking,AllowBackOrder
		FROM @TBL_ErrorInventoryTracking;
		
		ROLLBACK TRAN UpdateInventory;
	END CATCH;
END;
 GO 
 
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishSingleCategory')
BEGIN 
	DROP PROCEDURE Znode_GetPublishSingleCategory
END
GO 
CREATE PROCEDURE [dbo].[Znode_GetPublishSingleCategory]
(   @PimCategoryId    INT, 
    @UserId           INT,
    @Status           int = 0 OUT,
	@IsDebug          BIT = 0
	,@LocaleIds		  TransferId READONLY )
AS 
/*
       Summary:Publish category with their respective products and details 
	            The result is fetched in xml form   
       Unit Testing   
	            During Catalog Publish Publish status should be updated 
				   
       Begin transaction 
       SELECT * FROM ZnodePIMAttribute 
	   SELECT * FROM ZnodePublishCatalog 
	   SELECT * FROM ZnodePublishCategory WHERE publishCAtegoryID = 167 

       EXEC [Znode_GetPublishSingleCategory @PublishCatalogId = 5,@VersionId = 0 ,@UserId =2 ,@IsDebug = 1 
       Rollback Transaction 
	*/
     BEGIN
         BEGIN TRAN GetPublishCategory;
         BEGIN TRY
             SET NOCOUNT ON;
			 DECLARE @PublishCatalogLogId int , @PublishCataLogId int , @VersionId  int ,@PimCatalogId int 
			 
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @LocaleId INT= 0, @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId(), @Counter INT= 1, @MaxId INT= 0, @CategoryIdCount INT;
             DECLARE @IsActive BIT= [dbo].[Fn_GetIsActiveTrue]();
             DECLARE @AttributeIds VARCHAR(MAX)= '', @PimCategoryIds VARCHAR(MAX)= '', @DeletedPublishCategoryIds VARCHAR(MAX)= '', @DeletedPublishProductIds VARCHAR(MAX);
			 
			 DECLARE @TBL_PublishCatalogId TABLE(PublishCatalogId INT,PimCatalogId  INT , VersionId INT )

			 INSERT INTO @TBL_PublishCatalogId  (PublishCatalogId,PimCatalogId,VersionId ) 
			 SELECT ZPCL.PublishCatalogId, ZPCL.PimCatalogId,ZPCL.PublishCatalogLogId
			 FROM ZnodePimCategoryHierarchy ZPCH INNER JOIN ZnodePublishCatalogLog  ZPCL 
			 ON ZPCH.PimCatalogId = ZPCL.PimCatalogId and ZPCH.PimCategoryId = @PimCategoryId 
			 where  PublishCatalogLogId in (Select MAX (PublishCatalogLogId) from ZnodePublishCatalogLog ZPCL where 
			 ZPCH.PimCatalogId = ZPCL.PimCatalogId)

			 IF NOT EXISTS (Select TOP 1 1 from @TBL_PublishCatalogId) OR NOT EXISTS (select TOP 1 1  from ZnodePimCatalogCategory where PimCategoryId = @PimCategoryId  )
			 Begin
				SET @Status = 1  -- Category not associated or catalog not publish
				ROLLBACK TRAN GetPublishCategory;
				Return 0 ;
			 END 

             DECLARE @TBL_AttributeIds TABLE
             (PimAttributeId       INT,
              ParentPimAttributeId INT,
              AttributeTypeId      INT,
              AttributeCode        VARCHAR(600),
              IsRequired           BIT,
              IsLocalizable        BIT,
              IsFilterable         BIT,
              IsSystemDefined      BIT,
              IsConfigurable       BIT,
              IsPersonalizable     BIT,
              DisplayOrder         INT,
              HelpDescription      VARCHAR(MAX),
              IsCategory           BIT,
              IsHidden             BIT,
              CreatedDate          DATETIME,
              ModifiedDate         DATETIME,
              AttributeName        NVARCHAR(MAX),
              AttributeTypeName    VARCHAR(300)
             );
             DECLARE @TBL_AttributeDefault TABLE
             (
				  PimAttributeId            INT,
				  AttributeDefaultValueCode VARCHAR(100),
				  IsEditable                BIT,
				  AttributeDefaultValue     NVARCHAR(MAX),
				  DisplayOrder   INT
             );
             DECLARE @TBL_AttributeValue TABLE
             (
				  PimCategoryAttributeValueId INT,
				  PimCategoryId               INT,
				  CategoryValue               NVARCHAR(MAX),
				  AttributeCode               VARCHAR(300),
				  PimAttributeId              INT
             );
             DECLARE @TBL_LocaleIds TABLE
             (
				  RowId     INT IDENTITY(1, 1),
				  LocaleId  INT,
				  IsDefault BIT
             );
             DECLARE @TBL_PimCategoryIds TABLE
             (
				  PimCategoryId       INT,
				  PimParentCategoryId INT,
				  DisplayOrder        INT,
				  ActivationDate      DATETIME,
				  ExpirationDate      DATETIME,
				  CategoryName        NVARCHAR(MAX),
				  ProfileId           VARCHAR(MAX),
				  IsActive            BIT,
				  PimCategoryHierarchyId INT,
				  ParentPimCategoryHierarchyId INT,
				  PublishCatalogId INT,
				  PimCatalogId  INT,
				  VersionId INT  ,
				  CategoryCode  NVARCHAR(MAX)          
			 );
             DECLARE @TBL_PublishPimCategoryIds TABLE
             (PublishCategoryId       INT,
              PimCategoryId           INT,
              PublishProductId        varchar(max),
              PublishParentCategoryId INT ,
			  PimCategoryHierarchyId INT ,
			  parentPimCategoryHierarchyId INT,
			  RowIndex INT
             );
             DECLARE @TBL_DeletedPublishCategoryIds TABLE
             (PublishCategoryId INT,
              PublishProductId  INT
             );
             DECLARE @TBL_CategoryXml TABLE
             (PublishCategoryId INT,
              CategoryXml       XML,
              LocaleId          INT
			 
             );
             INSERT INTO @TBL_LocaleIds
             (LocaleId,
              IsDefault
             )
			  -- here collect all locale ids
            SELECT LocaleId,IsDefault FROM ZnodeLocale MT WHERE IsActive = @IsActive
			AND (EXISTS (SELECT TOP 1 1  FROM @LocaleIds RT WHERE RT.Id = MT.LocaleId )
			OR NOT EXISTS (SELECT TOP 1 1 FROM @LocaleIds )) ;

             INSERT INTO @TBL_PimCategoryIds(PimCategoryId,PimParentCategoryId,DisplayOrder,ActivationDate,ExpirationDate,IsActive,PimCategoryHierarchyId,ParentPimCategoryHierarchyId,
			 PublishCatalogId,PimCatalogId,VersionId)
			 --select @PimCategoryId, NULL , NULL , NULL , NULL ,NULL , NULL ,NULL 
			 SELECT DISTINCT ZPCH.PimCategoryId,ZPCH2.PimCategoryId  PimParentCategoryId,ZPCH.DisplayOrder,ZPCH.ActivationDate,ZPCH.ExpirationDate,ZPCH.IsActive ,ZPCH.PimCategoryHierarchyId,ZPCH.ParentPimCategoryHierarchyId,
			 PublishCatalogId,PCI.PimCatalogId,VersionId
			 FROM ZnodePimCategoryHierarchy AS ZPCH 
			 LEFT JOIN ZnodePimCategoryHierarchy AS ZPCH2 ON (ZPCH2.PimCategoryHierarchyId = ZPCH. ParentPimCategoryHierarchyId ) 
			 Inner join @TBL_PublishCatalogId PCI on ZPCH.PimCatalogId = PCI.PimCatalogId 
			 WHERE ZPCH.PimCategoryId = @PimCategoryId ; 

			 MERGE INTO ZnodePublishCategory TARGET USING 
			 ( Select PC.PimCategoryId,
					  PC.PimCategoryHierarchyId,
					  PC.PimParentCategoryId,
					  PC.ParentPimCategoryHierarchyId,
					  PC.PublishCatalogId
					  FROM @TBL_PimCategoryIds PC ) 
			 SOURCE ON
			 (
				 TARGET.PimCategoryId = SOURCE.PimCategoryId 
				 AND TARGET.PublishCatalogId = SOURCE.PublishCatalogId 
				 AND TARGET.PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId
			 )
			 WHEN MATCHED THEN UPDATE SET TARGET.PimParentCategoryId = SOURCE.PimParentCategoryId,TARGET.CreatedBy = @UserId,TARGET.CreatedDate = @GetDate,
				TARGET.ModifiedBy = @UserId,TARGET.ModifiedDate = @GetDate,
			 PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId,ParentPimCategoryHierarchyId=SOURCE.ParentPimCategoryHierarchyId
             
			 WHEN NOT MATCHED THEN 
			 INSERT(PimCategoryId,PublishCatalogId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
			 ,PimCategoryHierarchyId,ParentPimCategoryHierarchyId) 
			 VALUES(SOURCE.PimCategoryId,SOURCE.PublishCatalogId,@UserId,@GetDate,@UserId,@GetDate,SOURCE.PimCategoryHierarchyId
			 ,SOURCE.ParentPimCategoryHierarchyId)

				OUTPUT INSERTED.PublishCategoryId,INSERTED.PimCategoryId,INSERTED.PimCategoryHierarchyId,
			 INSERTED.parentPimCategoryHierarchyId 
			 INTO @TBL_PublishPimCategoryIds(PublishCategoryId,PimCategoryId,PimCategoryHierarchyId,parentPimCategoryHierarchyId);
			     	    
			 -- here update the publish parent category id
            UPDATE ZPC SET [PimParentCategoryId] =TBPC.[PimCategoryId] 
			FROM ZnodePublishCategory ZPC
            INNER JOIN ZnodePublishCategory TBPC ON(ZPC.parentPimCategoryHierarchyId = TBPC.PimCategoryHierarchyId  ) 
			WHERE ZPC.PublishCatalogId = TBPC.PublishCatalogId 
			AND TBPC.PublishCatalogId  in (Select PublishCatalogId from @TBL_PublishCatalogId)
			AND ZPC.ParentPimCategoryHierarchyId IS NOT NULL AND 
			ZPC.PimCategoryId = @PimCategoryId  ;

			UPDATE a
			SET  a.PublishParentCategoryId = b.PublishCategoryId
			FROM ZnodePublishCategory a 
			INNER JOIN ZnodePublishCategory b   ON (a.parentpimCategoryHierarchyId = b.pimCategoryHierarchyId)
			WHERE a.parentpimCategoryHierarchyId IS NOT NULL 
			AND a.PublishCatalogId = b.PublishCatalogId AND b.PublishCatalogId in (Select PublishCatalogId from @TBL_PublishCatalogId)
			AND a.PimCategoryId = @PimCategoryId 
			 --UPDATE ZPC SET [PimParentCategoryId] = TBPC.[PimCategoryId] 
			 --FROM ZnodePublishCategory ZPC
			 --INNER JOIN ZnodePublishCategory TBPC ON(ZPC.parentPimCategoryHierarchyId = TBPC.PimCategoryHierarchyId  ) 
			 --WHERE ZPC.PublishCatalogId =@PublishCatalogId
			 --AND ZPC.ParentPimCategoryHierarchyId IS NOT NULL ;

			 -- product are published here 
            --  EXEC Znode_GetPublishProducts @PublishCatalogId,0,@UserId,1,0,0;
			
		     SET @MaxId =(SELECT MAX(RowId)FROM @TBL_LocaleIds);
			 DECLARE @TransferID TRANSFERID 
			 INSERT INTO @TransferID 
			 SELECT DISTINCT  PimCategoryId	 FROM @TBL_PublishPimCategoryIds 

             SET @PimCategoryIds = SUBSTRING((SELECT ','+CAST(PimCategoryId AS VARCHAR(50)) FROM @TBL_PublishPimCategoryIds FOR XML PATH('')), 2, 4000);
			 
             WHILE @Counter <= @MaxId -- Loop on Locale id 
                 BEGIN
                     SET @LocaleId =(SELECT LocaleId FROM @TBL_LocaleIds WHERE RowId = @Counter);
                   
				     SET @AttributeIds = SUBSTRING((SELECT ','+CAST(ZPCAV.PimAttributeId AS VARCHAR(50)) FROM ZnodePimCategoryAttributeValue ZPCAV 
										 WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimCategoryIds TBPC WHERE TBPC.PimCategoryId = ZPCAV.PimCategoryId) GROUP BY ZPCAV.PimAttributeId FOR XML PATH('')), 2, 4000);
                
				     SET @CategoryIdCount =(SELECT COUNT(1) FROM @TBL_PimCategoryIds);

                     INSERT INTO @TBL_AttributeIds (PimAttributeId,ParentPimAttributeId,AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable,IsSystemDefined,
					 IsConfigurable,IsPersonalizable,DisplayOrder,HelpDescription,IsCategory,IsHidden,CreatedDate,ModifiedDate,AttributeName,AttributeTypeName)
                     EXEC [Znode_GetPimAttributesDetails] @AttributeIds,@LocaleId;

                     INSERT INTO @TBL_AttributeDefault (PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder)
                     EXEC [dbo].[Znode_GetAttributeDefaultValueLocale] @AttributeIds,@LocaleId;

                     INSERT INTO @TBL_AttributeValue (PimCategoryAttributeValueId,PimCategoryId,CategoryValue,AttributeCode,PimAttributeId)
                     EXEC [dbo].[Znode_GetCategoryAttributeValueId] @TransferID,@AttributeIds,@LocaleId;

					-- SELECT * FROM @TBL_AttributeValue WHERE PimCategoryId = 281

					--select * from @TBL_AttributeValue



                     ;WITH Cte_UpdateDefaultAttributeValue
                     AS (
					  SELECT TBAV.PimCategoryId,TBAV.PimAttributeId,SUBSTRING((SELECT ','+AttributeDefaultValue FROM @TBL_AttributeDefault TBD WHERE TBAV.PimAttributeId = TBD.PimAttributeId
						AND EXISTS(SELECT TOP 1 1 FROM Split(TBAV.CategoryValue, ',') SP WHERE SP.Item = TBD.AttributeDefaultValueCode)FOR XML PATH('')), 2, 4000) DefaultCategoryAttributeValue
						FROM @TBL_AttributeValue TBAV WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_AttributeDefault TBAD WHERE TBAD.PimAttributeId = TBAV.PimAttributeId))
					 
					 -- update the default value with locale 
                     UPDATE TBAV SET CategoryValue = CTUDFAV.DefaultCategoryAttributeValue FROM @TBL_AttributeValue TBAV 
					 INNER JOIN Cte_UpdateDefaultAttributeValue CTUDFAV ON(CTUDFAV.PimCategoryId = TBAV.PimCategoryId AND CTUDFAV.PimAttributeId = TBAV.PimAttributeId)
					 WHERE CategoryValue IS NULL ;
					 
					 -- here is update the media path  
                     WITH Cte_productMedia
                     AS (SELECT TBA.PimCategoryId,TBA.PimAttributeId,[dbo].[FN_GetThumbnailMediaPathPublish](SUBSTRING((SELECT ','+zm.PATH FROM ZnodeMedia ZM WHERE EXISTS
					    (SELECT TOP 1 1 FROM dbo.split(TBA.CategoryValue, ',') SP WHERE SP.Item = CAST(Zm.MediaId AS VARCHAR(50)))FOR XML PATH('')), 2, 4000)) CategoryValue
						FROM @TBL_AttributeValue TBA WHERE EXISTS(SELECT TOP 1 1 FROM [dbo].[Fn_GetProductMediaAttributeId]() FNMA WHERE FNMA.PImAttributeId = TBA.PimATtributeId))
                         
					 UPDATE TBAV SET CategoryValue = CTCM.CategoryValue 
					 FROM @TBL_AttributeValue TBAV 
					 INNER JOIN Cte_productMedia CTCM ON(CTCM.PimCategoryId = TBAV.PimCategoryId
					 AND CTCM.PimAttributeId = TBAV.PimAttributeId);

                     WITH Cte_PublishProductIds
					 AS (SELECT TBPC.PublishcategoryId,SUBSTRING((SELECT ','+CAST(PublishProductId AS VARCHAR(50))
					  FROM ZnodePublishCategoryProduct ZPCP 
					  WHERE ZPCP.PublishCategoryId = TBPC.publishCategoryId
					  AND ZPCP.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId
                      AND ZPCP.PublishCatalogId in (Select PublishCatalogId from @TBL_PublishCatalogId)
					   FOR XML PATH('')), 2, 8000) PublishProductId ,PimCategoryHierarchyId
					  FROM @TBL_PublishPimCategoryIds TBPC)
                          
					 UPDATE TBPPC SET PublishProductId = CTPP.PublishProductId FROM @TBL_PublishPimCategoryIds TBPPC INNER JOIN Cte_PublishProductIds CTPP ON(TBPPC.PublishCategoryId = CTPP.PublishCategoryId 
					 AND TBPPC.PimCategoryHierarchyId = CTPP.PimCategoryHierarchyId);

                     WITH Cte_CategoryProfile
                     AS (SELECT PimCategoryId,ZPCC.PimCategoryHierarchyId,SUBSTRING(( SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
					 FROM ZnodeProfileCatalog ZPC 
					 INNER JOIN ZnodeProfileCategoryHierarchy ZPRCC ON(ZPRCC.PimCategoryHierarchyId = ZPCC.PimCategoryHierarchyId
                        AND ZPRCC.ProfileCatalogId = ZPC.ProfileCatalogId) 
						WHERE ZPC.PimCatalogId = ZPCC.PimCatalogId FOR XML PATH('')), 2, 4000) ProfileIds
                      
					   FROM ZnodePimCategoryHierarchy ZPCC 
					   WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimCategoryIds TBPC 
					   WHERE TBPC.PimCategoryId = ZPCC.PimCategoryId AND ZPCC.PimCatalogId in (Select PimCatalogId from @TBL_PublishCatalogId)
					   AND ZPCC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId))
                          
				     UPDATE TBPC SET TBPC.ProfileId = CTCP.ProfileIds FROM @TBL_PimCategoryIds TBPC 
					 LEFT JOIN Cte_CategoryProfile CTCP ON(CTCP.PimCategoryId = TBPC.PimCategoryId AND CTCP.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId );
                     
					 UPDATE TBPC SET TBPC.CategoryName = TBAV.CategoryValue FROM @TBL_PimCategoryIds TBPC INNER JOIN @TBL_AttributeValue TBAV ON(TBAV.PimCategoryId = TBPC.PimCategoryId
                     AND EXISTS(SELECT TOP 1 1 FROM [dbo].[Fn_GetCategoryNameAttribute]() FNGCNA WHERE FNGCNA.PimAttributeId = TBAV.PimAttributeId))


					 UPDATE TBPC SET TBPC.CategoryCode = TBAV.CategoryValue FROM @TBL_PimCategoryIds TBPC INNER JOIN @TBL_AttributeValue TBAV ON(TBAV.PimCategoryId = TBPC.PimCategoryId
					 AND EXISTS(SELECT TOP 1 1 FROM dbo.Fn_GetCategoryCodeAttribute() FNGCNA WHERE FNGCNA.PimAttributeId = TBAV.PimAttributeId)
					 )
					 
					 --select * from @TBL_PimCategoryIds

					 --select * from @TBL_AttributeValue
					-- SELECT * FROM @TBL_AttributeValue WHERE pimCategoryId = 369


					 -- here update the publish category details 
                     ;WITH Cte_UpdateCategoryDetails
                     AS (
					 SELECT TBC.PimCategoryId,PublishCategoryId,CategoryName, TBPPC.PimCategoryHierarchyId,CategoryCode
					 FROM @TBL_PimCategoryIds TBC
                     INNER JOIN @TBL_PublishPimCategoryIds TBPPC ON(TBC.PimCategoryId = TBPPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPPC.PimCategoryHierarchyId)
					 )						
                     MERGE INTO ZnodePublishCategoryDetail TARGET USING Cte_UpdateCategoryDetails SOURCE ON(TARGET.PublishCategoryId = SOURCE.PublishCategoryId
					 AND TARGET.LocaleId = @LocaleId)
                     WHEN MATCHED THEN UPDATE SET PublishCategoryId = SOURCE.PublishcategoryId,PublishCategoryName = SOURCE.CategoryName,LocaleId = @LocaleId,ModifiedBy = @userId,ModifiedDate = @GetDate,CategoryCode= SOURCE.CategoryCode
                     WHEN NOT MATCHED THEN INSERT(PublishCategoryId,PublishCategoryName,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,CategoryCode) VALUES
                     (SOURCE.PublishCategoryId,SOURCE.CategoryName,@LocaleId,@userId,@GetDate,@userId,@GetDate,CategoryCode);


					DECLARE @UpdateCategoryLog  TABLE (PublishCatalogLogId INT , LocaleId INT ,PublishCatalogId INT  )
					INSERT INTO @UpdateCategoryLog
					SELECT MAX(PublishCatalogLogId) PublishCatalogLogId , LocaleId , PublishCatalogId 
					FROM ZnodePublishCatalogLog a 
					WHERE a.PublishCatalogId =@PublishCatalogId
					AND  a.LocaleId = @LocaleId 
					GROUP BY 	LocaleId,PublishCatalogId  

					-----------------------------------------------------------------
					IF OBJECT_ID('tempdb..#Index') is not null
					BEGIN 
						DROP TABLE #Index
					END 
					CREATE TABLE #Index (RowIndex int ,PimCategoryId int , PimCategoryHierarchyId  int,ParentPimCategoryHierarchyId int )		
					insert into  #Index ( RowIndex ,PimCategoryId , PimCategoryHierarchyId,ParentPimCategoryHierarchyId)
					SELECT CAST(Row_number() OVER (Partition By TBL.PimCategoryId Order by ISNULL(TBL.PimCategoryId,0) desc) AS VARCHAR(100))
					,ZPC.PimCategoryId, ZPC.PimCategoryHierarchyId, ZPC.ParentPimCategoryHierarchyId
					FROM @TBL_PublishPimCategoryIds TBL
					INNER JOIN ZnodePublishCategory ZPC ON (TBL.PimCategoryId = ZPC.PimCategoryId AND TBL.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId)
					WHERE ZPC.PublishCatalogId = @PublishCatalogId

					UPDATE TBP SET  TBP.[RowIndex]=  IDX.RowIndex 
					FROM @TBL_PublishPimCategoryIds TBP INNER JOIN #Index IDX ON (IDX.PimCategoryId = TBP.PimCategoryId AND IDX.PimCategoryHierarchyId = TBP.PimCategoryHierarchyId)  

					------------------------------------------------------------------

                     ;WITH Cte_CategoryXML
                     AS (SELECT PublishcategoryId,PimCategoryId,(SELECT TY.PublishCatalogLogId,TBPC.PublishCategoryId ZnodeCategoryId,TBC.PublishCatalogId ZnodeCatalogId
																		,THR.PublishParentCategoryId TempZnodeParentCategoryIds,ZPC.CatalogName ,
																		 ISNULL(DisplayOrder, '0') DisplayOrder,@LocaleId LocaleId,ActivationDate 
																		 ,ExpirationDate,TBC.IsActive,ISNULL(CategoryName, '') Name,ProfileId TempProfileIds,ISNULL(PublishProductId, '') TempProductIds,ISNULL(CategoryCode,'') as CategoryCode
																		 ,ISNULL(TBPC.RowIndex,1) CategoryIndex
                        FROM @TBL_PublishPimCategoryIds TBPC 
						INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId in  (Select PublishCatalogId from @TBL_PublishCatalogId))
						INNER JOIN ZnodePublishCAtegory THR ON (THR.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId AND THR.PimCategoryId = TBPC.PimCategoryId AND THR.PublishCatalogId in  (Select PublishCatalogId from @TBL_PublishCatalogId) )
						LEFT JOIN @UpdateCategoryLog TY ON ( TY.PublishCatalogId IN (Select PublishCatalogId from @TBL_PublishCatalogId) AND TY.localeId = @LocaleId  )
						INNER JOIN @TBL_PimCategoryIds TBC ON(TBC.PimCategoryId = TBPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId) WHERE TBPC.PublishCategoryId = TBPCO.PublishCategoryId 
						FOR XML PATH('')) CategoryXml 
						FROM @TBL_PublishPimCategoryIds TBPCO),


                     Cte_CategoryAttributeXml
                     AS (SELECT CTCX.PublishCategoryId,'<CategoryEntity>'+ISNULL(CategoryXml, '')+
					  ISNULL((SELECT(SELECT TBA.AttributeCode,TBA.AttributeName,ISNULL(IsUseInSearch, 0) IsUseInSearch,
                        ISNULL(IsHtmlTags, 0) IsHtmlTags,ISNULL(IsComparable, 0) IsComparable,TBAV.CategoryValue AttributeValues,TBA.AttributeTypeName FROM @TBL_AttributeValue TBAV
                        INNER JOIN @TBL_AttributeIds TBA ON(TBAV.PimAttributeId = TBA.PimAttributeId) LEFT JOIN ZnodePimFrontendProperties ZPFP ON(ZPFP.PimAttributeId = TBA.PimAttributeId)
                        WHERE CTCX.PimCategoryId = TBAV.PimCategoryId AND TBAO.PimAttributeId = TBA.PimAttributeId FOR XML PATH('AttributeEntity'), TYPE) FROM @TBL_AttributeIds TBAO
                        FOR XML PATH('Attributes')), '')+'</CategoryEntity>' CategoryXMl FROM Cte_CategoryXML CTCX)

						
                     INSERT INTO @TBL_CategoryXml(PublishCategoryId,CategoryXml,LocaleId)
                     SELECT PublishCategoryId,CategoryXml,@LocaleId LocaleId FROM Cte_CategoryAttributeXml;

                  
				     DELETE FROM @TBL_AttributeIds;
                     DELETE FROM @TBL_AttributeDefault;
                     DELETE FROM @TBL_AttributeValue;
                     SET @Counter = @Counter + 1;
                 END;
	
			Select PublishCategoryId ,VersionId	, PimCatalogId	, LocaleId,PublishCatalogId
			into #OutPublish from @TBL_PublishCatalogId CLI CROSS JOIN @TBL_CategoryXml  
			--group by PimCatalogId,VersionId,PublishCategoryId

			Alter TABLE #OutPublish ADD Id int Identity 
			SET @MaxId =(SELECT COUNT(*) FROM #OutPublish);
			 --SET @PimCategoryIds = SUBSTRING((SELECT ','+CAST(PimCategoryId AS VARCHAR(50)) FROM @TBL_PublishPimCategoryIds FOR XML PATH('')), 2, 4000);
			Declare @ExistingPublishCategoryId  nvarchar(max), @PublishCategoryId  int 
			SET @Counter =1 
            WHILE @Counter <= @MaxId -- Loop on Locale id 
            BEGIN
				SELECT @VersionId = VersionId  ,
				@PublishCategoryId = PublishCategoryId 
				from #OutPublish where ID = @Counter

				SELECT @ExistingPublishCategoryId  = PublishCategoryId FROM ZnodePublishCatalogLog ZPCL 
				where ZPCL.PublishCatalogLogId = @VersionId  and IsCategoryPublished =1 
	
				IF NOT EXISTS (SELECT TOP 1 1 FROM Split(@ExistingPublishCategoryId  , ',') SP WHERE SP.Item = Convert(nvarchar(50),  @PublishCategoryId) )
				BEGIN
				--	SET @ExistingPublishCategoryId  = @ExistingPublishCategoryId + ',' +  Convert(nvarchar(100),@PublishCategoryId )
					UPDATE ZnodePublishCatalogLog SET PublishCategoryId = (SELECT COUNT(DISTINCT PublishCategoryId ) FROM ZnodePublishCategoryProduct RG WHERE RG.PublishCatalogId IN (SELECT DISTINCT PublishCatalogId FROM @TBL_PublishCatalogId) AND RG.PublishCatalogId = ZnodePublishCatalogLog.PublishCatalogId ) ,
					ModifiedDate = @GetDate
					 WHERE EXISTS (SELECT TOP 1 1  FROM #OutPublish TR WHERE TR.versionId = ZnodePublishCatalogLog.PublishCatalogLogId )  ;
				END
				-- DELETE FROM ZnodePublishedXml where  IsCategoryXML =1  and  PublishCataloglogId = @VersionId  and  PublishedId = @PublishCategoryId 
				SET @Counter  = @Counter  + 1  
			END
           	Select distinct 
			SUBSTRING(( SELECT Distinct ',' + CAST(PublishCategoryId AS VARCHAR(50)) FROM #OutPublish CLO
			FOR XML PATH('')), 2, 4000) PublishCategoryId,
			SUBSTRING(( SELECT Distinct ',' + CAST(VersionId	 AS VARCHAR(50)) FROM #OutPublish CLO
			FOR XML PATH('')), 2, 4000) VersionId,	
			SUBSTRING(( SELECT Distinct ',' + CAST(PublishCatalogId	 AS VARCHAR(50)) FROM #OutPublish CLO
			FOR XML PATH('')), 2, 4000) PimCatalogId,
			SUBSTRING(( SELECT Distinct ',' + CAST(LocaleId AS VARCHAR(50)) FROM #OutPublish CLO
			FOR XML PATH('')), 2, 4000) LocaleId
			from #OutPublish
			--group by PimCatalogId,VersionId,PublishCategoryId

			--Select PublishCategoryId ,VersionId	, PimCatalogId, LocaleId  from #OutPublish 

			Select CategoryXml from @TBL_CategoryXml 

			SELECT CategoryCode FROM @TBL_PimCategoryIds
			GROUP BY CategoryCode

			UPDATE ZnodePimCategory	SET IsCategoryPublish = 1 WHERE PimCategoryId = @PimCategoryId 

			Commit TRAN GetPublishCategory;
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE();
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPublishCategory @PublishCatalogId = '+CAST(@PublishCatalogId AS VARCHAR(50))+',@UserId ='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(50));
             SET @Status = 0 -- Publish Falies 
             ROLLBACK TRAN GetPublishCategory;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_GetPublishCategory',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
	 GO
	 IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'ZnodeDevExpressReport_GetOrderDetails')
BEGIN 
	DROP PROCEDURE ZnodeDevExpressReport_GetOrderDetails
END
GO 
CREATE PROCEDURE [dbo].[ZnodeDevExpressReport_GetOrderDetails]
(   
	@BeginDate      DATETIME         ,
    @EndDate        DATETIME         ,
    @StoreName      NVARCHAR(max) = '',
	@OrderStatus    NVARCHAR(MAX) = ''
	)
AS 
/*
     Summary:- this procedure is used to get the order details 
    
     EXEC ZnodeDevExpressReport_GetOrderDetails @BeginDate = '2019-07-01 00:00:00.513', @EndDate = '2019-07-30 00:00:00.513',@OrderStatus =  'submitted|shipped|in progress|in production|pending payment|CANCELLED|RETURNED|FAILED|Success'
*/
     BEGIN
	 BEGIN TRY
         SET NOCOUNT ON;

		 IF OBJECT_ID('TEMPDB..#TBL_OMSOrder') IS NOT NULL
		DROP TABLE #TBL_OMSOrder

		DECLARE @SQL NVARCHAR(MAX)
        DECLARE @DateFormateId int 
	    SET @DateFormateId  = DBO.Fn_GetReportDateTimeFormat();
		DECLARE @RoundOffValue INT= dbo.Fn_GetDefaultValue('PriceRoundOff');
		
		DECLARE @TBL_PortalId TABLE (PortalId INT );
		INSERT INTO @TBL_PortalId
		SELECT PortalId 
		FROM ZnodePortal ZP 
		INNER JOIN dbo.split(@StoreName,'|') SP ON (SP.Item = ZP.StoreName)

		SELECT DISTINCT
		ZOO.OrderNumber,ZOO.[OmsOrderID],ZOOD.[PortalId],ZOOD.[UserId],ZOOD.[OmsOrderStateId],ZOOD.[ShippingID],ZOOD.[PaymentTypeId],ZOOD.[BillingFirstName],ZOOD.[BillingLastName],
        ZOOD.[BillingCompanyName], ZOOD.[BillingStreet1],ZOOD.[BillingStreet2], ZOOD.[BillingCity],ZOOD.[BillingStateCode],ZOOD.[BillingPostalCode],ZOOD.[BillingCountry], ZOOD.[BillingPhoneNumber],ZOOD.[BillingEmailId],
		SUBSTRING(CAST(ZOOD.[TaxCost] AS VARCHAR(100)),1, CHARINDEX('.', CAST(ZOOD.[TaxCost] AS VARCHAR(100)))+@RoundOffValue) as TaxCost,
		SUBSTRING(CAST(ZOOD.[ShippingCost] AS VARCHAR(100)),1, CHARINDEX('.', CAST(ZOOD.[ShippingCost] AS VARCHAR(100)))+@RoundOffValue) as [ShippingCost],
		SUBSTRING(CAST(ZOOD.[SubTotal] AS VARCHAR(100)),1, CHARINDEX('.', CAST(ZOOD.[SubTotal] AS VARCHAR(100)))+@RoundOffValue) as [SubTotal],
		SUBSTRING(CAST(ZOOD.[DiscountAmount] AS VARCHAR(100)),1, CHARINDEX('.', CAST(ZOOD.[DiscountAmount] AS VARCHAR(100)))+@RoundOffValue) as [DiscountAmount],
		SUBSTRING(CAST(ZOOD.[Total] AS VARCHAR(100)),1, CHARINDEX('.', CAST(ZOOD.[Total] AS VARCHAR(100)))+@RoundOffValue) as [TotalAmount],
        CONVERT(varchar(100),ZOOD.[OrderDate],@DateFormateId) OrderDate,
        ZOOD.[ShippingNumber],
		ZOOD.[TrackingNumber],
		ZOOD.[CouponCode],
		ZOOD.[PromoDescription],
		ZOOD.[ReferralUserId],
		ZOOD.[PurchaseOrderNumber],
		ZOOD.[OmsPaymentStateId],
        ZOOD.[WebServiceDownloadDate],
		ZOOD.[PaymentSettingID],
		ZOOD.[ShipDate],
		ZOOD.[ReturnDate],
		ZOTOD.[SalesTax],ZOTOD.[VAT],ZOTOD.[GST],ZOTOD.[PST],ZOTOD.[HST],
        P.[StoreName] AS 'StoreName',
		OS.[OrderStateName] AS 'OrderStatus',
		ZOOD.PaymentDisplayName AS 'PaymentTypeName',
		ST.[Name] AS 'ShippingTypeName' ,
		CASE WHEN REPLACE(ISNULL(ZU.FirstName,'')+' '+ISNULL(ZU.LastName,''),' ','') = '' THEN APZ.UserName ELSE ISNULL(ZU.FirstName,'')+' '+ISNULL(ZU.LastName,'') END  CustomerName ,
		ISNULL(ZC.Symbol,[dbo].[Fn_GetDefaultCurrencySymbol]()) Symbol,
		OSP.ShipToCity AS 'ShippingCity',
		OSP.ShipToStateCode AS 'ShippingStateCode',
		OSP.ShipToCountry AS 'ShippingCountryCode'
		INTO #TBL_OMSOrder
		FROM ZNodeOmsOrder ZOO 
        INNER JOIN ZnodeOmsOrderDetails ZOOD ON(ZOOD.OmsOrderId = ZOO.OmsOrderId AND IsActive = 1) 
		INNER JOIN ZNodePortal P ON P.PortalID = ZOOD.PortalId
        LEFT JOIN ZNodeOmsOrderState OS ON OS.OmsOrderStateID = ZOOD.OmsOrderStateID
        LEFT JOIN ZNodeOmsOrderShipment OSP ON(EXISTS
                                            (  SELECT TOP 1 1 FROM ZnodeOmsOrderLineItems ZOOLI WHERE ZOOLI.OmsOrderShipmentId = OSP.OmsOrderShipmentId AND ZOOLI.OmsOrderDetailsId = ZOOD.OmsOrderDetailsId ))
        LEFT JOIN ZnodeOmsTaxOrderDetails ZOTOD ON(ZOTOD.OmsOrderDetailsId = ZOOD.OmsOrderDetailsId)
        LEFT JOIN ZNodeShipping S ON S.ShippingID = OSP.ShippingID
        LEFT JOIN ZNodeShippingTypes ST ON ST.ShippingTypeID = S.ShippingTypeID
        LEFT JOIN ZNodePaymentType PT ON PT.PaymentTypeID = ZOOD.PaymentTypeId
		LEFT JOIN ZnodeCulture ZC ON (ZC.CultureCode  = ZOOD.CultureCode )
		LEFT JOIN ZnodeUser  ZU ON (ZU.UserId = ZOOD.UserId )
		LEFT JOIN AspNetUsers AP ON (AP.Id = ZU.AspNetUserId)
		LEFT JOIN AspNetZnodeUser APZ ON (APZ.AspNetZnodeUserId = AP.UserName)
        WHERE CAST(ZOOD.OrderDate AS DATETIME) BETWEEN @BeginDate AND @EndDate
		AND (EXISTS (SELECT TOP 1 1 FROM @TBL_PortalId rt WHERE rt.PortalId = ZOOD.PortalId)
				OR NOT EXISTS (SELECT TOP 1 1 FROM @TBL_PortalId ))
		AND EXISTS (SELECT TOP 1 1 FROM dbo.split(@OrderStatus,'|') SP WHERE SP.Item = OS.OrderStateName)
	
		
		SELECT OrderNumber,OmsOrderID,PortalId ,UserId,OmsOrderStateId,ShippingID,PaymentTypeId,BillingFirstName,BillingLastName,
		BillingCompanyName,BillingStreet1,BillingStreet2, BillingCity,BillingStateCode,BillingPostalCode,BillingCountry,BillingPhoneNumber,BillingEmailId,
		CAST(tbl.TaxCost AS NUMERIC(28,6)) TaxCost,CAST(ShippingCost AS NUMERIC(28,6)) ShippingCost,
		CAST(SubTotal AS NUMERIC(28,6)) SubTotal,CAST(DiscountAmount AS NUMERIC(28,6)) DiscountAmount,CAST(TotalAmount AS NUMERIC(28,6)) TotalAmount,OrderDate,ShippingNumber,TrackingNumber,CouponCode,PromoDescription,ReferralUserId,PurchaseOrderNumber,OmsPaymentStateId,
        WebServiceDownloadDate,PaymentSettingID,ShipDate,ReturnDate, SalesTax,VAT,GST,PST,HST,StoreName,OrderStatus,PaymentTypeName,ShippingTypeName,CustomerName,Symbol 
		,ShippingCity,ShippingCountryCode,ShippingStateCode
		FROM #TBL_OMSOrder tbl
		Order by CAST(OrderDate  AS DATETIME)
			
		IF OBJECT_ID('TEMPDB..#TBL_OMSOrder') IS NOT NULL
		DROP TABLE #TBL_OMSOrder

		END TRY
		BEGIN CATCH
		DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeReport_GetOrderDetails @BeginDate='+CAST(@BeginDate AS VARCHAR(200))+',@EndDate='+CAST(@EndDate AS VARCHAR(200))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'ZnodeReport_GetOrderDetails',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
		END CATCH
     END;
	 GO 

	 Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'StoreExperience','PublishStoreCMSContent',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'StoreExperience' and ActionName = 'PublishStoreCMSContent')
go
insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy ,CreatedDate,	ModifiedBy, ModifiedDate )
select 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Store Experience' AND ControllerName = 'StoreExperience'),
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'StoreExperience' and ActionName= 'PublishStoreCMSContent')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Store Experience' AND ControllerName = 'StoreExperience') and ActionId = 
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'StoreExperience' and ActionName= 'PublishStoreCMSContent'))
GO
Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'StoreExperience','SaveWebSiteLogo',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'StoreExperience' and ActionName = 'SaveWebSiteLogo')
go
insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy ,CreatedDate,	ModifiedBy, ModifiedDate )
select 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Store Experience' AND ControllerName = 'StoreExperience'),
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'StoreExperience' and ActionName= 'SaveWebSiteLogo')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Store Experience' AND ControllerName = 'StoreExperience') and ActionId = 
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'StoreExperience' and ActionName= 'SaveWebSiteLogo'))
GO
Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'DynamicContent','GetEditorFormats',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'DynamicContent' and ActionName = 'GetEditorFormats')
go
insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy ,CreatedDate,	ModifiedBy, ModifiedDate )
select 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Store Experience' AND ControllerName = 'StoreExperience'),
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'DynamicContent' and ActionName= 'GetEditorFormats')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Store Experience' AND ControllerName = 'StoreExperience') and ActionId = 
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'DynamicContent' and ActionName= 'GetEditorFormats'))
GO



UPDATE ZnodeApplicationSetting 
SET Setting='<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>PortalId</name>      <headertext>Checkbox</headertext>      <width>40</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>StoreCode</name>      <headertext>Store Code</headertext>      <width>60</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>500</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>StoreName</name>      <headertext>Store Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>y</isallowlink>      <islinkactionurl>/StoreExperience/StoreSetting</islinkactionurl>      <islinkparamfield>PortalId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>PortalId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>CompanyName</name>      <headertext>Brand</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>PortalId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>PortalId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Brand</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>PublishStatus</name>      <headertext>Publish Status</headertext>      <width>60</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>500</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>ThemeName</name>      <headertext>Theme Name</headertext>      <width>60</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>500</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>CSSName</name>      <headertext>CSS Name</headertext>      <width>60</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>500</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>8</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>50</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>Manage|Publish</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>y</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>StoreCode</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>Id</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Manage|Publish</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/StoreExperience/StoreSetting|/StoreExperience/PublishStoreCMSContent</manageactionurl>      <manageparamfield>PortalId|PortalId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>'
WHERE ItemName ='ZnodeStoreExperience'
GO


if exists(select * from sys.procedures where name = 'Znode_GetPublishProductbulk')
	drop proc Znode_GetPublishProductbulk
go
create PROCEDURE [dbo].[Znode_GetPublishProductbulk]
(
@PublishCatalogId INT = 0 
,@VersionId       VARCHAR(50) = 0 
,@PimProductId    TransferId Readonly
,@UserId		  INT = 0 
,@PimCategoryHierarchyId  INT = 0 
,@PimCatalogId INT = 0 
,@LocaleIds TransferId READONLY
,@PublishStateId INT = 0 
)
With RECOMPILE
AS
-- 
/*
DECLARE @rrte transferId 
INSERT INTO @rrte
SELECT 1 

EXEC Znode_GetPublishProductbulk @PublishCatalogId=3,@UserId= 2 ,@localeIDs = @rrte,@PublishStateId = 3 

*/
BEGIN 
  BEGIN TRY 
 SET NOCOUNT ON 

EXEC Znode_InsertUpdatePimAttributeXML 1 
EXEC Znode_InsertUpdateCustomeFieldXML 1
EXEC Znode_InsertUpdateAttributeDefaultValue 1 

DECLARE @PortalId INT = (SELECT TOP 1 POrtalId FROM ZnodePortalCatalog WHERE PublishCatalogId = @PublishCatalogId)
DECLARE @PriceListId INT = (SELECT TOP 1 PriceListId FROM ZnodePriceListPortal WHERE PortalId = @PortalId
ORDER BY Precedence ASC )
DECLARE @DomainUrl varchar(max) = (select TOp 1 URL FROM ZnodeMediaConfiguration WHERE IsActive =1)
DECLARE @MaxSmallWidth INT  = (SELECT TOP 1  MAX(MaxSmallWidth) FROM ZnodePortalDisplaySetting WHERE PortalId = @PortalId)


   IF OBJECT_ID('tempdb..#PimProductAttributeXML') is not null
   BEGIN 
	 DROP TABLE #PimProductAttributeXML
   END
   IF OBJECT_ID('tempdb..#PimDefaultValueLocale') is not null
   BEGIN 
    DROP TABLE #PimDefaultValueLocale
   END
   IF OBJECT_ID('tempdb..#TBL_CategoryCategoryHierarchyIds') is not null
   BEGIN 
    DROP TABLE #TBL_CategoryCategoryHierarchyIds
   END

   DECLARE @PimMediaAttributeId INT = dbo.Fn_GetProductImageAttributeId()
   
   CREATE TABLE #PimProductAttributeXML (PimAttributeXMLId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )
  	
   CREATE TABLE #TBL_CategoryCategoryHierarchyIds  (CategoryId int , ParentCategoryId int ) 
	
   If (@PimCategoryHierarchyId <> 0 AND @PimCatalogId <> 0 )
		INSERT INTO #TBL_CategoryCategoryHierarchyIds(CategoryId , ParentCategoryId )
			Select Distinct PimCategoryId , Null FROM (
				SELECT PimCategoryId,ParentPimCategoryId from DBO.[Fn_GetRecurciveCategoryIds](@PimCategoryHierarchyId,@PimCatalogId)
				Union 
				Select PimCategoryId , null  from ZnodePimCategoryHierarchy where PimCategoryHierarchyId = @PimCategoryHierarchyId 
				Union 
				Select PimCategoryId , null  from [Fn_GetRecurciveCategoryIds_new] (@PimCategoryHierarchyId,@PimCatalogId) ) Category  


   CREATE TABLE #PimDefaultValueLocale  (PimAttributeDefaultXMLId INT  PRIMARY KEY ,PimAttributeDefaultValueId INT ,LocaleId INT ) 
   DECLARE @ProductNamePimAttributeId INT = dbo.Fn_GetProductNameAttributeId(),@DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId(),@LocaleId INT = 0 
		,@SkuPimAttributeId  INT =  dbo.Fn_GetProductSKUAttributeId() , @IsActivePimAttributeId INT =  dbo.Fn_GetProductIsActiveAttributeId()
   DECLARE @GetDate DATETIME =dbo.Fn_GetDate()
   DECLARE @TBL_LocaleId  TABLE (RowId INT IDENTITY(1,1) PRIMARY KEY  , LocaleId INT )
			
			INSERT INTO @TBL_LocaleId (LocaleId)
			SELECT  LocaleId
			FROM ZnodeLocale MT 
			WHERE IsActive = 1
			AND (EXISTS (SELECT TOP 1 1  FROM @LocaleIds RT WHERE RT.Id = MT.LocaleId )
			OR NOT EXISTS (SELECT TOP 1 1 FROM @LocaleIds )) 

  DECLARE @Counter INT =1 ,@maxCountId INT = (SELECT max(RowId) FROM @TBL_LocaleId ) 
 

 CREATE TABLE #TBL_PublishCatalogId (PublishCatalogId INT,PublishProductId INT,PimProductId  INT   , VersionId INT, PublishCategoryId int ,LocaleId INT )

 CREATE INDEX idx_#TBL_PublishCatalogIdPimProductId on #TBL_PublishCatalogId(PimProductId)

  CREATE INDEX idx_#TBL_PublishCatalogIdPimPublishCatalogId on #TBL_PublishCatalogId(PublishCatalogId)

  If (@PimCategoryHierarchyId <> 0 AND @PimCatalogId <> 0 )
  BEGIN
			 INSERT INTO #TBL_PublishCatalogId(PublishCatalogId ,PublishProductId ,PimProductId  , VersionId ,PublishCategoryId ,LocaleId)  
			 SELECT distinct ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,MAX(ZPCP.PublishCataloglogId ) VersionId ,ZPC.PublishCategoryId,ZPCP.LocaleId
				 FROM ZnodePublishProduct ZPP INNER JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
				 INNER JOIN ZnodePublishCategoryProduct ZPPP ON ZPP.PublishProductId  = ZPPP.PublishProductId  
				 AND ZPCP.PublishCatalogId = ZPPP.PublishCatalogId
				 INNER JOIN ZnodePublishCategory ZPC ON ZPC.PublishCatalogId = ZPPP.PublishCatalogId AND ZPPP.PublishCategoryId = ZPC.PublishCategoryId 
				 WHERE ZPP.PublishCatalogId = @PublishCatalogId  and ZPCP.PublishStateId =  @PublishStateId
				 AND 
				 ZPC.PimCategoryId in (Select CategoryId from #TBL_CategoryCategoryHierarchyIds )
				 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId ,ZPC.PublishCategoryId,ZPCP.LocaleId	

			INSERT INTO #TBL_PublishCatalogId(PublishCatalogId ,PublishProductId ,PimProductId  , VersionId ,PublishCategoryId ,LocaleId)
			SELECT DISTINCT ZPP.PublishCatalogId,ZPP.PublishProductId,PimProductId,MAX(ZPCP.PublishCatalogLogId) VersionId,NULL, ZPCP.LocaleId
				 FROM ZnodePublishProduct ZPP 
				 INNER JOIN ZnodePublishCatalogLog ZPCP ON 
				 (ZPCP.PublishCatalogId = ZPP.PublishCatalogId) 
				 WHERE				 (EXISTS (SELECT TOP 1 1 FROM @pimProductId SP WHERE SP.Id = ZPP.PimProductId ))
				 AND (ZPP.PublishCatalogId = @publishCatalogId )
				 AND NOT Exists (Select TOP 1 1 from #TBL_PublishCatalogId TPL where TPL.PublishProductId = ZPP.PublishProductId)
				 AND ZPCP.PublishStateId =  @PublishStateId
			GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId , ZPCP.LocaleId



  END
  ELSE 
  BEGIN
			INSERT INTO #TBL_PublishCatalogId(PublishCatalogId ,PublishProductId,PimProductId ,VersionId,LocaleId  ) 
			 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,  
											MAX(PublishCatalogLogId) ,ZPCP.LocaleId
				 FROM ZnodePublishProduct ZPP 
				 INNER JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
				 WHERE (EXISTS (SELECT TOP 1 1 FROM @PimProductId SP 
				 WHERE SP.Id = ZPP.PimProductId  AND  (@PublishCatalogId IS NULL OR @PublishCatalogId = 0 ))
				 OR  (ZPP.PublishCatalogId = @PublishCatalogId ))
				 --AND  ZPCP.PublishStateId =  @PublishStateId
				 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId ,ZPCP.LocaleId
  END
           
		     DECLARE   @TBL_ZnodeTempPublish TABLE (PimProductId INT , AttributeCode VARCHAR(300) ,AttributeValue NVARCHAR(max) ) 			
			 DECLARE @TBL_AttributeVAlueLocale TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT,LocaleId INT 
			 )

	create table #ZnodePrice (RetailPrice numeric(28,13),SalesPrice numeric(28,13),CurrencyCode varchar(100), CultureCode varchar(100), CurrencySuffix varchar(100), PublishProductId int)
	
	create table #ProductSKU (SEOUrl nvarchar(max), SEODescription  nvarchar(max),SEOKeywords  nvarchar(max),SEOTitle  nvarchar(max), PublishProductId int)

	create table #ProductImages (PublishProductId int, ImageSmallPath  varchar(max))

	declare @DefaultPortal int, @IsAllowIndexing int
	select @DefaultPortal = PortalId, @IsAllowIndexing = 1 from ZnodePimCatalog ZPC Inner Join ZnodePublishCatalog ZPC1 ON ZPC.PimCatalogId = ZPC1.PimCatalogId where ZPC1.PublishCatalogId =  @PublishCatalogId and isnull(ZPC.IsAllowIndexing,0) = 1 

	--select * from ZnodePimCatalog ZPC Inner Join ZnodePublishCatalog ZPC1 ON ZPC.PimCatalogId = ZPC1.PimCatalogId where ZPC1.PublishCatalogId =  @PublishCatalogId and isnull(ZPC.IsAllowIndexing,0) = 1
	
	if (@IsAllowIndexing=1)
	begin 
		insert into #ZnodePrice
		SELECT RetailPrice,SalesPrice,ZC.CurrencyCode,ZCC.CultureCode ,ZCC.Symbol CurrencySuffix,TYU.PublishProductId
		FROM ZnodePrice ZP 
		INNER JOIN ZnodePriceList ZPL ON (ZPL.PriceListId = ZP.PriceListId)
		INNER JOIN ZnodeCurrency ZC oN (ZC.CurrencyId = ZPL.CurrencyId )
		INNER JOIN ZnodeCulture ZCC ON (ZCC.CultureId = ZPL.CultureId)
		INNER JOIN ZnodePublishProductDetail TY ON (TY.SKU = ZP.SKU ) 
		INNER JOIN ZnodePublishProduct TYU ON (TYU.PublishProductId = TY.PublishProductId) 
		WHERE ZP.PriceListId = @PriceListId 
		AND TY.LocaleId = @DefaultLocaleId
		AND TYU.PublishCatalogId = @PublishCatalogId
		AND EXISTS (SELECT TOP 1 1 FROM ZnodePriceListPortal ZPLP 
		INNER JOIN ZnodePimCatalog ZPC on ZPC.PortalId=ZPLP.PortalId WHERE ZPLP.PriceListId=ZP.PriceListId )
	
		insert INTO #ProductImages
		SELECT  TYU.PublishProductId , @DomainUrl +'Catalog/'  + CAST(@PortalId AS VARCHAr(100)) + '/'+ CAST(@MaxSmallWidth AS VARCHAR(100)) + '/' + RT.MediaPath AS ImageSmallPath   
		FROM ZnodePimAttributeValue ZPAV 
		INNER JOIN ZnodePublishProduct TYU ON (TYU.PimProductId  = ZPAV.PimProductId)
		INNER JOIN ZnodePimProductAttributeMedia  RT ON ( RT.PimAttributeValueId = ZPAV.PimAttributeValueId )
		WHERE  TYU.PublishCatalogId = @PublishCatalogId
		AND RT.LocaleId = @DefaultLocaleId
		AND ZPAV.PimAttributeId = (SELECT TOp 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'ProductImage')
	
		insert INTO #ProductSKU 
		SELECT ZCSD.SEOUrl , ZCDL.SEODescription,ZCDL.SEOKeywords ,ZCDL.SEOTitle, TYU.PublishProductId
		FROM ZnodeCMSSEODetail ZCSD 
		INNER JOIN ZnodeCMSSEODetailLocale ZCDL ON (ZCDL.CMSSEODetailId = ZCSD.CMSSEODetailId)
		INNER JOIN ZnodePublishProductDetail TY ON (TY.SKU = ZCSD.SEOCode AND ZCDL.LocaleId = TY.LocaleId) 
		INNER JOIN ZnodePublishProduct TYU ON (TYU.PublishProductId = TY.PublishProductId)
		WHERE CMSSEOTypeId = (SELECT TOP 1 CMSSEOTypeId FROM ZnodeCMSSEOType WHERE Name = 'Product') 
		AND ZCDL.LocaleId = @DefaultLocaleId
		AND TYU.PublishCatalogId = @PublishCatalogId
		AND ZCSD.PublishStateId = @PublishStateId
		AND ZCSD.PortalId = @DefaultPortal

	end
		
		
WHILE @Counter <= @maxCountId
BEGIN
 
 SET @LocaleId = (SELECT TOP 1 LocaleId FROM @TBL_LocaleId MT 
  WHERE  RowId = @Counter)
 
  INSERT INTO #PimProductAttributeXML 
  SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeXML
  WHERE LocaleId = @LocaleId
  
  IF( @LocaleId <> @DefaultLocaleId )
  BEGIN
	INSERT INTO #PimProductAttributeXML 
	SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
	FROM ZnodePimAttributeXML ZPAX
	WHERE ZPAX.LocaleId = @DefaultLocaleId  
	AND NOT EXISTS (SELECT TOP 1 1 FROM #PimProductAttributeXML ZPAXI WHERE ZPAXI.PimAttributeId = ZPAX.PimAttributeId )
  END

  INSERT INTO #PimDefaultValueLocale
  SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultXML
  WHERE localeId = @LocaleId

  IF( @LocaleId <> @DefaultLocaleId )
  BEGIN
	INSERT INTO #PimDefaultValueLocale 
	SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
	FROM ZnodePimAttributeDefaultXML ZX
	WHERE localeId = @DefaultLocaleId
	AND NOT EXISTS (SELECT TOP 1 1 FROM #PimDefaultValueLocale TRTR WHERE TRTR.PimAttributeDefaultValueId = ZX.PimAttributeDefaultValueId)
  END
  	 
  CREATE TABLE #TBL_CustomeFiled  (PimCustomeFieldXMLId INT ,CustomCode VARCHAR(300),PimProductId INT ,LocaleId INT )

  INSERT INTO #TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,RTR.PimProductId ,RTR.LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML RTR 
  INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = RTR.PimProductId AND RTR.LocaleID = ZPP.LocaleId)
  WHERE RTR.LocaleId = @LocaleId
 
 
  INSERT INTO #TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,ITR.PimProductId ,ITR.LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML ITR
  INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ITR.PimProductId AND ITR.LocaleID = ZPP.LocaleId)
  WHERE ITR.LocaleId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM #TBL_CustomeFiled TBL  WHERE ITR.CustomCode = TBL.CustomCode AND ITR.PimProductId = TBL.PimProductId)
       
       
	 SELECT VIR.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId,VIR.LocaleId , VIR.AttributeValue, VIR.AttributeCode ,ROW_NUMBER() Over(Partition By VIR.PimProductId,PimAttributeId ORDER BY VIR.PimProductId,PimAttributeId  ) RowId
	 INTO #TBL_AttributeVAlue
	 FROM View_LoadManageProductInternal VIR
	 WHERE ( LocaleId = @DefaultLocaleId OR LocaleId = @LocaleId )
	 AND EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
	  UNION ALL 
	 SELECT VIR.PimProductId,VIR.PimAttributeId,ZPDE.PimProductAttributeMediaId,ZPDE.LocaleId ,ZPDE.MediaPath AS AttributeValue, d.AttributeCode ,ROW_NUMBER() Over(Partition By VIR.PimProductId,VIR.PimAttributeId ORDER BY VIR.PimProductId,VIR.PimAttributeId  ) RowId
	 FROM ZnodePimAttributeValue  VIR
	 INNER JOIN ZnodePimProductAttributeMedia ZPDE ON (ZPDE.PimAttributeValueId = VIR.PimAttributeValueId )
	 INNER JOIN ZnodePimAttribute d ON ( d.PimAttributeId=VIR.PimAttributeId )
	 WHERE ( ZPDE.LocaleId = @DefaultLocaleId OR ZPDE.LocaleId = @LocaleId )
	 AND EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
	  Union All
	 SELECT VIR.PimProductId,VIR.PimAttributeId,ZPDVL.PimAttributeDefaultValueLocaleId,ZPDVL.LocaleId ,ZPDVL.AttributeDefaultValue AS AttributeValue, d.AttributeCode ,ROW_NUMBER() Over(Partition By VIR.PimProductId,VIR.PimAttributeId ORDER BY VIR.PimProductId,VIR.PimAttributeId  ) RowId
	 FROM ZnodePimAttributeValue  VIR
	 INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1  )
	 INNER JOIN ZnodePimAttributeDefaultValue ZPADV ON ZPADV.PimAttributeId = D.PimAttributeId
	 INNER JOIN ZnodePimAttributeDefaultValueLocale ZPDVL   on (ZPADV.PimAttributeDefaultValueId = ZPDVL.PimAttributeDefaultValueId)
	 --INNER JOIN ZnodePimProductAttributeDefaultValue ZPDVP ON (ZPDVP.PimAttributeValueId = VIR.PimAttributeValueId AND ZPADV.PimAttributeDefaultValueId = ZPDVP.PimAttributeDefaultValueId )
	 WHERE ( ZPDVL.LocaleId = @DefaultLocaleId OR ZPDVL.LocaleId = @LocaleId )
	 AND EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
	 Union All 
	SELECT VIR.PimProductId,VIR.PimAttributeId,'','','',D.AttributeCode,ROW_NUMBER() Over(Partition By VIR.PimProductId,VIR.PimAttributeId ORDER BY VIR.PimProductId,VIR.PimAttributeId  ) RowId
	FROM ZnodePimAttributeValue  VIR
	INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1 )
	WHERE  EXISTS(SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )

	 
	 UPDATE #TBL_AttributeVAlue SET rowid = (SELECT MAX(rowid) FROM #TBL_AttributeVAlue b WHERE a.PimProductId=b.PimProductId AND a.PimAttributeId = b.PimAttributeId )
	 FROM #TBL_AttributeVAlue a
	
  --SET @versionId = (SELECT TOP 1 VersionId FROM #TBL_PublishCatalogId) 
  

 IF OBJECT_ID('tempdb..#Cte_GetData') IS NOT NULL
 BEGIN 
 DROP TABLE #Cte_GetData
 END 

 CREATE TABLE #Cte_GetData (PimProductId INT,AttributeCode VARCHAR(600),AttributeValue NVARCHAR(max),VersionId INT)

 CREATE INDEX idx_#Cte_GetDataPimProductId ON #Cte_GetData(PimProductId)


INSERT INTO #Cte_GetData(PimProductId ,AttributeCode,AttributeValue,VersionId)
SELECT  a.PimProductId,a.AttributeCode , '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(a.AttributeValue,'')+'</AttributeValues> </AttributeEntity>  </Attributes>'  AttributeValue,VersionId
FROM #TBL_AttributeVAlue a 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = a.PimAttributeId )
INNER JOIN #PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId)
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = a.PimProductId)
WHERE a.LocaleId  = CASE WHEN a.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END
AND NOT EXISTS (SELECT TOP 1 1 FROM Fn_GetProductMediaAttributeId() TY WHERE TY.PimAttributeId = c.PimAttributeId)
 


INSERT INTO #Cte_GetData(PimProductId ,AttributeCode,AttributeValue,VersionId)
SELECT THB.PimProductId,THB.CustomCode,'<Attributes><AttributeEntity>'+CustomeFiledXML+'</AttributeEntity></Attributes>' ,VersionId
FROM ZnodePimCustomeFieldXML THB 
INNER JOIN #TBL_CustomeFiled TRTE ON (TRTE.PimCustomeFieldXMLId = THB.PimCustomeFieldXMLId)
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = THB.PimProductId)
UNION ALL 
SELECT ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues></AttributeValues>'+'<SelectValues>'+
			   STUFF((
                    SELECT '  '+ DefaultValueXML  FROM ZnodePimAttributeDefaultXML AA 
				 INNER JOIN #PimDefaultValueLocale GH ON (GH.PimAttributeDefaultXMLId = AA.PimAttributeDefaultXMLId)
				 INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId )
				 WHERE (ZPADV.PimAttributeValueId = ZPAV.PimAttributeValueId)
    FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</SelectValues> </AttributeEntity></Attributes>' AttributeValue ,VersionId
FROM ZnodePimAttributeValue ZPAV  
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
AND EXISTS (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)

---for PLP

INSERT INTO #Cte_GetData(PimProductId ,AttributeCode,AttributeValue,VersionId)
SELECT DISTINCT  UOP.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues></AttributeValues>'+'<SelectValues>'+
			   STUFF((
                    SELECT DISTINCT '  '+REPLACE(DefaultValueXML,'</SelectValuesEntity>','<VariantDisplayOrder>'+CAST(ISNULL(ZPA.DisplayOrder,0) AS VARCHAR(200))+'</VariantDisplayOrder>
					<VariantSKU>'+ISNULL(ZPAVL_SKU.AttributeValue,'')+'</VariantSKU>
					<VariantImagePath>'+ISNULL((SELECT ''+ZM.Path FOR XML Path ('')),'')+'</VariantImagePath></SelectValuesEntity>')   
				 FROM ZnodePimAttributeDefaultXML AA 
				 INNER JOIN #PimDefaultValueLocale GH ON (GH.PimAttributeDefaultXMLId = AA.PimAttributeDefaultXMLId)
				 INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId )
				 INNER JOIN ZnodePimAttributeValue ZPAV1 ON (ZPAV1.PimAttributeValueId= ZPADV.PimAttributeValueId )
				 -- check/join for active variants 
				 INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId =ZPAV1.PimProductId)
				 INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON (ZPAV.PimAttributevalueid = ZPAVL.PimAttributeValueId AND ZPAVL.AttributeValue = 'True')
				 INNER JOIN ZnodePimProductTypeAssociation YUP ON (YUP.PimProductId = ZPAV1.PimProductId)
				 -- SKU
				 INNER JOIN ZnodePimAttributeValue ZPAV_SKU ON(YUP.PimProductId = ZPAV_SKU.PimProductId)
				 INNER JOIN ZnodePimAttributeValueLocale ZPAVL_SKU ON (ZPAVL_SKU.PimAttributeValueId = ZPAV_SKU.PimAttributeValueId)
				 LEFT  JOIN ZnodePimAttributeValue ZPAV12 ON (ZPAV12.PimProductId= YUP.PimProductId  AND ZPAV12.PimAttributeId = @PimMediaAttributeId ) 
				 LEFT JOIN ZnodePimProductAttributeMedia ZPAVM ON (ZPAVM.PimAttributeValueId= ZPAV12.PimAttributeValueId ) 
				 LEFT JOIN ZnodeMedia ZM ON (ZM.MediaId = ZPAVM.MediaId)
				 LEFT JOIN ZnodePimAttribute ZPA ON (ZPA.PimattributeId = ZPAV1.PimAttributeId)
				 WHERE (YUP.PimParentProductId  = UOP.PimProductId AND ZPAV1.pimAttributeId = UOP.PimAttributeId )
				 -- Active Variants
				 AND ZPAV.PimAttributeId = (SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'IsActive')
				 -- VariantSKU
				 AND ZPAV_SKU.PimAttributeId = (SELECT PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'SKU')
FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</SelectValues> </AttributeEntity></Attributes>' AttributeValue ,VersionId
FROM ZnodePimConfigureProductAttribute UOP 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = UOP.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = UOP.PimProductId)
WHERE  EXISTS (SELECT * FROM #PimProductAttributeXML b WHERE b.PimAttributeXMLId = c.PimAttributeXMLId)


INSERT INTO #Cte_GetData(PimProductId ,AttributeCode,AttributeValue,VersionId)
SELECT DISTINCT  ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+SUBSTRING((SELECT DISTINCT  ',' +ZPPG.MediaPath FROM ZnodePimProductAttributeMedia ZPPG
     INNER JOIN #TBL_AttributeVAlue FTRE ON (FTRE.PimProductId = ZPAV.PimProductId AND FTRE.PimAttributeId = ZPAV.PimAttributeId  AND FTRE.LocaleId  = CASE WHEN FTRE.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )
	 WHERE ZPPG.PimProductAttributeMediaId = FTRE.ZnodePimAttributeValueLocaleId
	 FOR XML PATH ('')
 ),2,4000)+'</AttributeValues></AttributeEntity></Attributes>' AttributeValue ,VersionId	 
FROM ZnodePimAttributeValue ZPAV 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeMedia ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
AND EXISTS (SELECT * FROM #PimProductAttributeXML b WHERE b.PimAttributeXMLId = c.PimAttributeXMLId)

insert into #Cte_GetData(PimProductId ,AttributeCode,AttributeValue,VersionId)
SELECT ZPLP.PimParentProductId ,c.AttributeCode, '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(SUBSTRING((SELECT DISTINCT ','+CAST(PublishProductId AS VARCHAR(50)) 
							 FROM #TBL_PublishCatalogId ZPPI 
							 INNER JOIN ZnodePimLinkProductDetail ZPLPI ON (ZPLPI.PimProductId = ZPPI.PimProductId)
							 WHERE ZPLPI.PimParentProductId = ZPLP.PimParentProductId
							 AND ZPLPI.PimAttributeId   = ZPLP.PimAttributeId
							 FOR XML PATH ('') ),2,4000),'')+'</AttributeValues></AttributeEntity></Attributes>'   AttributeValue ,ZPP.VersionId
							
FROM ZnodePimLinkProductDetail ZPLP  
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPLP.PimParentProductId)
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPLP.PimAttributeId )
WHERE EXISTS (SELECT * FROM #PimProductAttributeXML b WHERE b.PimAttributeXMLId = c.PimAttributeXMLId)
GROUP BY ZPLP.PimParentProductId , ZPP.PublishProductId  ,ZPLP.PimAttributeId,c.AttributeCode,c.AttributeXML,ZPP.PublishCatalogId,ZPP.VersionId



SELECT a.PimProductId ,CAST((SELECT ''+dbo.FN_trim(b.AttributeValue) FOR XML PATH(''))  AS NVARCHAR(max)) AttributeValue , b.LocaleId  ,a.PimAttributeId,c.AttributeCode ,b.ZnodePimAttributeValueLocaleId
INTO #View_LoadManageProductInternal
FROM ZnodePimAttributeValue a 
INNER JOIN  ZnodePimAttributeValueLocale b ON ( b.PimAttributeValueId = a.PimAttributeValueId )
INNER JOIN ZnodePimAttribute c ON ( c.PimAttributeId=a.PimAttributeId )
WHERE c.AttributeCode = 'SKU'

INSERT INTO #Cte_GetData(PimProductId ,AttributeCode,AttributeValue,VersionId)
SELECT ZPAV.PimProductId,'DefaultSkuForConfigurable' ,'<Attributes><AttributeEntity>'+REPLACE(REPLACE (c.AttributeXML,'ProductType','DefaultSkuForConfigurable'),'Product Type','Default Sku For Configurable')+'<AttributeValues>'+
 (SELECT TOP 1 AttributeValue FROM #View_LoadManageProductInternal ad 
 INNER JOIN ZnodePimProductTypeAssociation yt ON (yt.PimProductId = ad.PimProductId)
 WHERE Ad.AttributeCode = 'SKU'
 AND yt.PimParentProductId = ZPAV.PimProductId
 ORDER BY yt.DisplayOrder , yt.PimProductTypeAssociationId ASC)
+'</AttributeValues></AttributeEntity></Attributes>' AttributeValue ,ZPP.VersionId
FROM ZnodePimAttributeValue ZPAV  
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL 
INNER JOIN ZnodePimAttributeDefaultValue dr ON (dr.PimAttributeDefaultValueId = ZPADVL.PimAttributeDefaultValueId)
 WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId
 AND dr.AttributeDefaultValueCode= 'ConfigurableProduct' 
)
AND EXISTS (SELECT * FROM #PimProductAttributeXML b WHERE b.PimAttributeXMLId = c.PimAttributeXMLId)
AND c.AttributeCode = 'ProductType' 


---------brand details 
CREATE TABLE #Cte_BrandData (PimProductId INT,BrandXML NVARCHAR(max))

INSERT INTO #Cte_BrandData ( PimProductId, BrandXML )
SELECT  DISTINCT ZBP.PimProductId,'<Brands><BrandEntity><BrandId>'+CAST(ZBD.BrandId AS VARCHAR(50))+'</BrandId><BrandCode>'+ZBD.BrandCode+'</BrandCode><BrandName>'+ZBDL.BrandName+'</BrandName></BrandEntity></Brands>' as BrandXML					   		   
FROM [ZnodeBrandDetails] AS ZBD
INNER JOIN ZnodeBrandDetaillocale ZBDL ON ZBD.BrandId = ZBDL.BrandId
INNER JOIN [ZnodeBrandProduct] AS ZBP ON ZBD.BrandId = ZBP.BrandId

--  --CREATE INDEX IND_Znode

  DELETE tu FROM ZnodePublishedXml tu  WHERE 
  EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId TY WHERE TY.VersionId = tu.PublishCatalogLogId AND Tu.PublishedId = ty.PublishProductId  )
  AND IsProductXML = 1   AND LocaleId = @LocaleId 

  
--  --ALTER INDEX ALL ON ZnodePublishedXml  REBUILD WITH (FILLFACTOR = 80 ) 
  If (@PimCategoryHierarchyId <> 0 AND @PimCatalogId <> 0 )
  BEGIN
		
		--Collect index of other categorys
		IF OBJECT_ID('tempdb..#Index') IS NOT NULL
		BEGIN 
			DROP TABLE #Index
		END 
		CREATE TABLE #Index (RowIndex int ,PublishCategoryId int , PublishProductId  int )		
		INSERT INTO  #Index ( RowIndex ,PublishCategoryId , PublishProductId )
		SELECT CAST(ROW_NUMBER()Over(Partition BY ZPC.PublishProductId 
		Order BY ISNULL(ZPC.PublishCategoryId,'0') desc )   AS VARCHAR(100)),
		ZPC.PublishCategoryId , ZPC.PublishProductId
		FROM ZnodePublishCategoryProduct ZPC where ZPC.PublishCatalogId = @PublishCatalogId
		declare @i  int = 1 
	

		--Publish parent products with index number 
			INSERT INTO ZnodePublishedXml (PublishCatalogLogId,PublishedId,PublishedXML,IsProductXML,LocaleId
			,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PublishCategoryId)
			SELECT zpp.VersionId,zpp.PublishProductId,'<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'+CAST(ISNULL(ZPCP.PublishCategoryId,'')  AS VARCHAR(50))+'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKU>'+'<SKULower>'+CAST(ISNULL((SELECT ''+LOWER(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
			+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +'</IsParentProducts><CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000)) +'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
			+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
			FROM ZnodeProfileCatalog ZPFC 
			INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
			WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+
			'</TempProfileIds>
			<ProductIndex>'+ CAST(ISNULL(ZPCP.ProductIndex,1) AS VARCHAR(200))+
			'</ProductIndex>' +
			 
			Case When @IsAllowIndexing = 1 then 			
			+'<RetailPrice>'+ISNULL(CAST(RetailPrice  AS VARCHAr(500)),'')+'</RetailPrice>'
			+'<SalesPrice>'+ISNULL(CAST(SalesPrice AS VARCHAr(500)), '') +'</SalesPrice>'
			+'<CurrencyCode>'+ISNULL(CurrencyCode,'') +'</CurrencyCode>'
			+'<CultureCode>'+ISNULL(CultureCode,'') +'</CultureCode>'
			+'<CurrencySuffix>'+ISNULL(CurrencySuffix,'') +'</CurrencySuffix>'
			+'<SeoUrl>'+ISNULL(SEOUrl,'') +'</SeoUrl>'
			+'<SeoDescription>'+ISNULL(SEODescription,'') +'</SeoDescription>'
			+'<SeoKeywords>'+ISNULL(SEOKeywords,'') +'</SeoKeywords>'
			+'<SeoTitle>'+ISNULL(SEOTitle,'') +'</SeoTitle>'
			+'<ImageSmallPath>'+ISNULL(ImageSmallPath,'') +'</ImageSmallPath>'
			else '' End

			+'<IndexId>'
			+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId><IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
			'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
			ISNULL(STUFF(( SELECT '  '+ BrandXML  FROM #Cte_BrandData BD WHERE BD.PimProductId = ZPP.PimProductId   
			FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, ''),'')+
			STUFF(( SELECT '  '+ AttributeValue  FROM #Cte_GetData TY WHERE TY.PimProductId = ZPP.PimProductId AND TY.VersionId = ZPP.VersionId   
			FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>' xmlvalue,1,@LocaleId,@UserId , @GetDate , @UserId,@GetDate
			,ZPCP.PublishCategoryId
			FROM  #TBL_PublishCatalogId zpp
			INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
			INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
			LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
			LEFT JOIN ZnodePublishCategory ZPC ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId 
			AND ZPP.PublishCategoryId = ZPC.PublishCategoryId 
			)
			LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId AND  ZPCCF.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId
			)
			LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ISNULL(ZPCP.PublishCategoryId,0) AND ZPCD.LocaleId = @LocaleId )
			LEFT JOIN #ZnodePrice TBZP ON (TBZP.PublishProductId = ZPP.PublishProductId)
			LEFT JOIN #ProductSKU TBPS ON (TBPS.PublishProductId = ZPP.PublishProductId)
			LEFT JOIN #ProductImages TBPI ON (TBPI.PublishProductId = ZPP.PublishProductId)
			WHERE ZPPDFG.LocaleId = @LocaleId AND ZPP.LocaleId = @LocaleId AND  ZPC.PimCategoryId in (Select CategoryId from #TBL_CategoryCategoryHierarchyIds ) 
			and zpp.PublishCategoryId IS NOT NULL

		
	
	 --Publish only associate product 
	 INSERT INTO ZnodePublishedXml (PublishCatalogLogId,PublishedId,PublishedXML,IsProductXML,LocaleId
		,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PublishCategoryId)
		SELECT zpp.VersionId,zpp.PublishProductId,'<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'+CAST(ISNULL(ZPCP.PublishCategoryId,'')  AS VARCHAR(50))+'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKU>'+'<SKULower>'+CAST(ISNULL((SELECT ''+LOWER(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
		+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +'</IsParentProducts><CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000)) +'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
		+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
						FROM ZnodeProfileCatalog ZPFC 
						INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
						WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+
						'</TempProfileIds>
						 <ProductIndex>'+ CAST(ISNULL(ZPCP.ProductIndex,1) AS VARCHAr(200))+
						'</ProductIndex>'+
		
		Case When @IsAllowIndexing = 1 then 
		+'<RetailPrice>'+ISNULL(CAST(RetailPrice  AS VARCHAr(500)),'')+'</RetailPrice>'
		+'<SalesPrice>'+ISNULL(CAST(SalesPrice AS VARCHAr(500)), '') +'</SalesPrice>'
		+'<CurrencyCode>'+ISNULL(CurrencyCode,'') +'</CurrencyCode>'
		+'<CultureCode>'+ISNULL(CultureCode,'') +'</CultureCode>'
		+'<CurrencySuffix>'+ISNULL(CurrencySuffix,'') +'</CurrencySuffix>'
		+'<SeoUrl>'+ISNULL(SEOUrl,'') +'</SeoUrl>'
		+'<SeoDescription>'+ISNULL(SEODescription,'') +'</SeoDescription>'
		+'<SeoKeywords>'+ISNULL(SEOKeywords,'') +'</SeoKeywords>'
		+'<SeoTitle>'+ISNULL(SEOTitle,'') +'</SeoTitle>'
		+'<ImageSmallPath>'+ISNULL(ImageSmallPath,'') +'</ImageSmallPath>'
		else '' End

		+'<IndexId>'
		+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId><IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
		'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
		STUFF(( SELECT '  '+ AttributeValue  FROM #Cte_GetData TY WHERE TY.PimProductId = ZPP.PimProductId   AND TY.VersionId= ZPP.VersionId
		FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>' xmlvalue,1,@LocaleId,@UserId , @GetDate , @UserId,@GetDate
		,ZPCP.PublishCategoryId
		FROM  #TBL_PublishCatalogId zpp
		INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
		INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
		LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT JOIN ZnodePublishCategory ZPC ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId 
		AND ZPP.PublishCategoryId = ZPC.PublishCategoryId )
		AND ZPC.PimCategoryId in (Select CategoryId from #TBL_CategoryCategoryHierarchyIds )
		LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId AND  ZPCCF.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId
		AND ZPCCF.PimCategoryId in (Select CategoryId from #TBL_CategoryCategoryHierarchyIds ))
		LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ISNULL(ZPCP.PublishCategoryId,0) AND ZPCD.LocaleId = @LocaleId )
		LEFT JOIN #ZnodePrice TBZP ON (TBZP.PublishProductId = ZPP.PublishProductId)
		LEFT JOIN #ProductSKU TBPS ON (TBPS.PublishProductId = ZPP.PublishProductId)
		LEFT JOIN #ProductImages TBPI ON (TBPI.PublishProductId = ZPP.PublishProductId)

		WHERE ZPPDFG.LocaleId = @LocaleId AND ZPP.LocaleId = @LocaleId AND zpp.PublishCategoryId IS NULL
		
  END
  ELSE
  BEGIN

      INSERT INTO ZnodePublishedXml (PublishCatalogLogId
		,PublishedId
		,PublishedXML
		,IsProductXML
		,LocaleId
		,CreatedBy
		,CreatedDate
		,ModifiedBy
		,ModifiedDate
		,PublishCategoryId)
		SELECT zpp.VersionId,zpp.PublishProductId, '<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'+CAST(ISNULL(ZPCP.PublishCategoryId,'')  AS VARCHAR(50))+'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKU>'+'<SKULower>'+CAST(ISNULL((SELECT ''+LOWER(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
		+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +'</IsParentProducts><CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000)) +'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
		
		+Case When @IsAllowIndexing = 1 then 	
		+'<RetailPrice>'+ISNULL(CAST(RetailPrice  AS VARCHAr(500)),'')+'</RetailPrice>'
		+'<SalesPrice>'+ISNULL(CAST(SalesPrice AS VARCHAr(500)), '') +'</SalesPrice>'
		+'<CurrencyCode>'+ISNULL(CurrencyCode,'') +'</CurrencyCode>'
		+'<CultureCode>'+ISNULL(CultureCode,'') +'</CultureCode>'
		+'<CurrencySuffix>'+ISNULL(CurrencySuffix,'') +'</CurrencySuffix>'
		+'<SeoUrl>'+ISNULL(SEOUrl,'') +'</SeoUrl>'
		+'<SeoDescription>'+ISNULL((SELECT ''+SEODescription FOR XML PATH('') ),'') +'</SeoDescription>'
		+'<SeoKeywords>'+ISNULL((SELECT ''+SEOKeywords FOR XML PATH('')),'') +'</SeoKeywords>'
		+'<SeoTitle>'+ISNULL((SELECT ''+SEOTitle FOR XML PATH('')),'') +'</SeoTitle>'
		+'<ImageSmallPath>'+ISNULL(ImageSmallPath,'') +'</ImageSmallPath>'
		else '' End

		+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
						FROM ZnodeProfileCatalog ZPFC 
						INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
						WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+'</TempProfileIds><ProductIndex>'+CAST(ROW_NUMBER()Over(Partition BY zpp.PublishProductId Order BY ISNULL(ZPC.PublishCategoryId,'0') ) AS VARCHAr(100))+'</ProductIndex><IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
		'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
		STUFF(( SELECT '  '+ AttributeValue  FROM #Cte_GetData TY WHERE TY.PimProductId = ZPP.PimProductId   AND TY.VersionId = ZPP.VersionId
		FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>'  xmlvalue,1,@LocaleId,@UserId , @GetDate , @UserId,@GetDate
		,ZPCP.PublishCategoryId
		
		FROM  #TBL_PublishCatalogId zpp
		INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
		INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
		LEFT JOIN #ZnodePrice TBZP ON (TBZP.PublishProductId = ZPP.PublishProductId)
		LEFT JOIN #ProductSKU TBPS ON (TBPS.PublishProductId = ZPP.PublishProductId)
		LEFT JOIN #ProductImages TBPI ON (TBPI.PublishProductId = ZPP.PublishProductId)
		LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT JOIN ZnodePublishCategory ZPC ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId )
		LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId AND  ZPCCF.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId)
		LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ISNULL(ZPCP.PublishCategoryId,0) AND ZPCD.LocaleId = @LocaleId )
		WHERE ZPPDFG.LocaleId = @LocaleId AND ZPP.LocaleId = @LocaleId
		ORDER BY zpp.PublishProductId ASC 

      
END 
 

DELETE FROM #TBL_CustomeFiled
DELETE FROM #PimDefaultValueLocale
 IF OBJECT_ID('tempdb..#PimProductAttributeXML') is not null
 BEGIN 
 DELETE FROM #PimProductAttributeXML
 END
 IF OBJECT_ID('tempdb..#Cte_GetData') is not null
 BEGIN 
 DROP TABLE #Cte_GetData
 END
   IF OBJECT_ID('tempdb..#Cte_BrandData') is not null
 BEGIN 
 DROP TABLE #Cte_BrandData
 END
  IF OBJECT_ID('tempdb..#TBL_AttributeVAlue') is not null
 BEGIN 
 DROP TABLE #TBL_AttributeVAlue
 END
 IF OBJECT_ID('tempdb..#View_LoadManageProductInternal') is not null
 BEGIN 
 DROP TABLE #View_LoadManageProductInternal
 END
 IF OBJECT_ID('tempdb..#TBL_CustomeFiled') is not null
 BEGIN 
 DROP TABLE #TBL_CustomeFiled
 END
SET @Counter = @counter + 1 
END 
END TRY 
BEGIN CATCH 

 SELECT ERROR_MESSAGE()
 UPDATE ZnodePublishCatalogLog 
	    SET IsCatalogPublished = 0 
		,IsCategoryPublished = 0,IsProductPublished= 0  
		WHERE EXISTS (SELECT TOP 1 1 from #TBL_PublishCatalogId TR WHERE TR.VersionId = ZnodePublishCatalogLog.PublishCatalogLogId)
END CATCH 
END

GO

if exists(select * from sys.procedures where name = 'Znode_GetPublishSingleProduct')
	drop proc Znode_GetPublishSingleProduct
go
CREATE PROCEDURE [dbo].[Znode_GetPublishSingleProduct]
(
@PublishCatalogId INT = 0 
,@VersionId       VARCHAR(50) = 0 
,@PimProductId    TransferId Readonly 
,@UserId		  INT = 0 
,@TokenId nvarchar(max)= ''	
,@LocaleIds TransferId READONLY
,@PublishStateId INT = 0  
)
AS


--Declare @PimProductId TransferId 
--insert into @PimProductId  select 128 
-- EXEC [Znode_GetPublishSingleProduct]  @PublishCatalogId = 0 ,@VersionId= 0 ,@PimProductId =@PimProductId, @UserId=2 

BEGIN 
 
 SET NOCOUNT ON 

EXEC Znode_InsertUpdatePimAttributeXML 1 
EXEC Znode_InsertUpdateCustomeFieldXML 1
EXEC Znode_InsertUpdateAttributeDefaultValue 1 

 IF OBJECT_ID('tempdb..#Cte_BrandData') is not null
 BEGIN 
	DROP TABLE #Cte_BrandData
 END 

--DECLARE @PimProductAttributeXML TABLE(PimAttributeXMLId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )
CREATE TABLE #PimProductAttributeXML (PimAttributeXMLId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )
DECLARE @PimDefaultValueLocale  TABLE (PimAttributeDefaultXMLId INT  PRIMARY KEY ,PimAttributeDefaultValueId INT ,LocaleId INT ) 
DECLARE @ProductNamePimAttributeId INT = dbo.Fn_GetProductNameAttributeId(),@DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId(),@LocaleId INT = 0 
		,@SkuPimAttributeId  INT =  dbo.Fn_GetProductSKUAttributeId() , @IsActivePimAttributeId INT =  dbo.Fn_GetProductIsActiveAttributeId()
DECLARE @GetDate DATETIME =dbo.Fn_GetDate()
DECLARE @TBL_LocaleId  TABLE (RowId INT IDENTITY(1,1) PRIMARY KEY  , LocaleId INT )

DECLARE @DomainUrl varchar(max) = (select TOp 1 URL FROM ZnodeMediaConfiguration WHERE IsActive =1)
 
 
			INSERT INTO @TBL_LocaleId (LocaleId)
			SELECT  LocaleId
			FROM ZnodeLocale MT
			WHERE IsActive = 1
			AND (EXISTS (SELECT TOP 1 1  FROM @LocaleIds RT WHERE RT.Id = MT.LocaleId )
			OR NOT EXISTS (SELECT TOP 1 1 FROM @LocaleIds )) 


DECLARE @Counter INT =1 ,@maxCountId INT = (SELECT max(RowId) FROM @TBL_LocaleId ) 

 CREATE TABLE #TBL_PublishCatalogId (PublishCatalogId INT,PublishProductId INT,PimProductId  INT   , VersionId INT ,LocaleId INT, PriceListId INT , PortalId INT ,MaxSmallWidth NVARCHAr(max)  )
CREATE INDEX idx_#TBL_PublishCatalogIdPimProductId on #TBL_PublishCatalogId(PimProductId)
CREATE INDEX idx_#TBL_PublishCatalogIdPimPublishCatalogId on #TBL_PublishCatalogId(PublishCatalogId)
			
			INSERT INTO #TBL_PublishCatalogId 
			 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId, MAX(PublishCatalogLogId) ,LocaleId ,
			 (SELECT TOP 1 PriceListId FROM ZnodePriceListPortal NT WHERE TY.PortalId =  NT.PortalId
			 ORDER BY NT.Precedence ASC ) , TY.PortalId
							, (SELECT TOP 1  MAX(MaxSmallWidth) FROM ZnodePortalDisplaySetting TYR WHERE TYR.PortalId = TY.PortalId)
			 FROM ZnodePublishProduct ZPP 
			 INNER JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
			 LEFT JOIN ZnodePortalCatalog TY ON (TY.PublishCatalogId = ZPP.PublishCatalogId)
			 WHERE (EXISTS (SELECT TOP 1 1 FROM @PimProductId SP WHERE SP.Id = ZPP.PimProductId  AND  (@PublishCatalogId IS NULL OR @PublishCatalogId = 0 ))
			 OR  (ZPP.PublishCatalogId = @PublishCatalogId ))
			 AND IsCatalogPublished =1
			 AND ZPCP.PublishStateId = @PublishStateId 
			 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,LocaleId, TY.PortalId


		
             DECLARE   @TBL_ZnodeTempPublish TABLE (PimProductId INT , AttributeCode VARCHAR(300) ,AttributeValue NVARCHAR(max) ) 			
			 DECLARE @TBL_AttributeVAlueLocale TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT,LocaleId INT ,AttributeValue Nvarchar(1000) )

			 INSERT INTO @TBL_AttributeVAlueLocale (PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId ,LocaleId ,AttributeValue )
			 SELECT VIR.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId,VIR.LocaleId, ''
			 FROM View_LoadManageProductInternal VIR
			 INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = VIR.PimProductId)
			 UNION ALL 
			 SELECT VIR.PimProductId,PimAttributeId,PimProductAttributeMediaId,ZPDE.LocaleId , ''
			 FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimProductAttributeMedia ZPDE ON (ZPDE.PimAttributeValueId = VIR.PimAttributeValueId )
			 WHERE EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
			 Union All 
			 SELECT VIR.PimProductId,VIR.PimAttributeId,ZPDVL.PimAttributeDefaultValueLocaleId,ZPDVL.LocaleId ,ZPDVL.AttributeDefaultValue
			   FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1 )
			 INNER JOIN ZnodePimAttributeDefaultValue ZPADV ON ZPADV.PimAttributeId = D.PimAttributeId
			 INNER JOIN ZnodePimAttributeDefaultValueLocale ZPDVL   on (ZPADV.PimAttributeDefaultValueId = ZPDVL.PimAttributeDefaultValueId)
			 --INNER JOIN ZnodePimProductAttributeDefaultValue ZPDVP ON (ZPDVP.PimAttributeValueId = VIR.PimAttributeValueId AND ZPADV.PimAttributeDefaultValueId = ZPDVP.PimAttributeDefaultValueId )
			 WHERE ( ZPDVL.LocaleId = @DefaultLocaleId OR ZPDVL.LocaleId = @LocaleId )
			 AND EXISTS(SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
			 Union All 
			 SELECT VIR.PimProductId,VIR.PimAttributeId,'','' ,''
			 FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1 )
			 WHERE  EXISTS(SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )

			-- create table #ZnodePrice (RetailPrice numeric(28,13),SalesPrice numeric(28,13),CurrencyCode varchar(100), CultureCode varchar(100), CurrencySuffix varchar(100), PublishProductId int, IsAllowIndexing int)
	
			--create table #ProductSKU (SEOUrl nvarchar(max), SEODescription  nvarchar(max),SEOKeywords  nvarchar(max),SEOTitle  nvarchar(max), PublishProductId int , IsAllowIndexing int)

			--create table #ProductImages (PublishProductId int, ImageSmallPath  varchar(max), IsAllowIndexing int)

			--declare @DefaultPortal int, @IsAllowIndexing int
			--select @DefaultPortal = PortalId, @IsAllowIndexing = 1 from ZnodePimCatalog ZPC Inner Join ZnodePublishCatalog ZPC1 ON ZPC.PimCatalogId = ZPC1.PimCatalogId where ZPC1.PublishCatalogId =  @PublishCatalogId and isnull(ZPC.IsAllowIndexing,0) = 1 
			----DECLARE @MaxSmallWidth INT  = (SELECT TOP 1  MAX(MaxSmallWidth) FROM ZnodePortalDisplaySetting WHERE PortalId = @DefaultPortal)

			--if (@IsAllowIndexing=1)
			--begin
				--insert INTO #ZnodePrice
				SELECT RetailPrice,SalesPrice,ZC.CurrencyCode,ZCC.CultureCode ,ZCC.Symbol CurrencySuffix,TYU.PublishProductId ,isnull(ZPC1.IsAllowIndexing,0) as IsAllowIndexing
				into #ZnodePrice
				FROM ZnodePrice ZP 
				INNER JOIN ZnodePriceList ZPL ON (ZPL.PriceListId = ZP.PriceListId)
				INNER JOIN ZnodeCurrency ZC oN (ZC.CurrencyId = ZPL.CurrencyId )
				INNER JOIN ZnodeCulture ZCC ON (ZCC.CultureId = ZPL.CultureId)
				INNER JOIN ZnodePublishProductDetail TY ON (TY.SKU = ZP.SKU ) 
				INNER JOIN ZnodePublishProduct TYU ON (TYU.PublishProductId = TY.PublishProductId)
				INNER JOIN ZnodePublishCatalog ZPC ON (TYU.PublishCatalogId = ZPC.PublishCatalogId)
				INNER JOIN ZnodePimCatalog ZPC1 ON (ZPC.PimCatalogId = ZPC1.PimCatalogId)
				WHERE EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId TYUR WHERE TYUR.PriceListId = ZPL.PriceListId AND TYUR.PublishCatalogId = TYU.PublishCatalogId
				AND TYU.PublishProductId = TYUR.PublishProductId)
				AND TY.LocaleId = dbo.Fn_GetDefaultLocaleId()
				AND EXISTS (SELECT TOP 1 1 FROM ZnodePriceListPortal ZPLP 
				INNER JOIN ZnodePimCatalog ZPC on ZPC.PortalId=ZPLP.PortalId WHERE ZPLP.PriceListId=ZP.PriceListId )
				
				--insert INTO #ProductSKU
				SELECT ZCSD.SEOUrl , ZCDL.SEODescription,ZCDL.SEOKeywords ,ZCDL.SEOTitle, TYU.PublishProductId ,isnull(ZPC1.IsAllowIndexing,0) as IsAllowIndexing
				INTO #ProductSKU
				FROM ZnodeCMSSEODetail ZCSD 
				INNER JOIN ZnodeCMSSEODetailLocale ZCDL ON (ZCDL.CMSSEODetailId = ZCSD.CMSSEODetailId)
				INNER JOIN ZnodePublishProductDetail TY ON (TY.SKU = ZCSD.SEOCode AND ZCDL.LocaleId = TY.LocaleId) 
				INNER JOIN ZnodePublishProduct TYU ON (TYU.PublishProductId = TY.PublishProductId)
				INNER JOIN ZnodePublishCatalog ZPC ON (TYU.PublishCatalogId = ZPC.PublishCatalogId)
				INNER JOIN ZnodePimCatalog ZPC1 ON (ZPC.PimCatalogId = ZPC1.PimCatalogId)
				WHERE CMSSEOTypeId = (SELECT TOP 1 CMSSEOTypeId FROM ZnodeCMSSEOType WHERE Name = 'Product') 
				AND EXISTS (SELECT TOP 1 1  FROM #TBL_PublishCatalogId TYUR WHERE  TYUR.PublishCatalogId = TYU.PublishCatalogId
				AND TYU.PublishProductId = TYUR.PublishProductId)
				AND ZCDL.LocaleId = dbo.Fn_GetDefaultLocaleId()
				and ZCSD.PortalId = isnull(ZPC1.PortalId,0)

				--insert INTO #ProductImages
				--SELECT  TYU.PublishProductId , @DomainUrl +'Catalog/'  + CAST(@DefaultPortal AS VARCHAr(100)) + '/'+ CAST(Isnull(@MaxSmallWidth,'') AS VARCHAR(100)) + '/' + Isnull(RT.MediaPath,'') AS ImageSmallPath    
				--FROM ZnodePimAttributeValue ZPAV 
				--INNER JOIN ZnodePublishProduct TYU ON (TYU.PimProductId  = ZPAV.PimProductId)
				--INNER JOIN ZnodePimProductAttributeMedia  RT ON ( RT.PimAttributeValueId = ZPAV.PimAttributeValueId )
				--WHERE  RT.LocaleId = dbo.Fn_GetDefaultLocaleId()
				--AND ZPAV.PimAttributeId = (SELECT TOp 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'ProductImage')
				
				--insert INTO #ProductImages
				SELECT  TUI.PublishCatalogId, TYU.PublishProductId , @DomainUrl +'Catalog/'  + CAST(Max(TUI.PortalId) AS VARCHAr(100)) + '/'+ CAST(Isnull(Max(TUI.MaxSmallWidth),'') AS VARCHAR(100)) + '/' + Isnull(RT.MediaPath,'') AS ImageSmallPath    
				,isnull(ZPC1.IsAllowIndexing,0) as IsAllowIndexing
				INTO #ProductImages
				FROM ZnodePimAttributeValue ZPAV 
				INNER JOIN ZnodePublishProduct TYU ON (TYU.PimProductId  = ZPAV.PimProductId)
				INNER JOIN ZnodePimProductAttributeMedia  RT ON ( RT.PimAttributeValueId = ZPAV.PimAttributeValueId )
				--AND 
				--EXISTS (SELECT TOP 1 1  FROM #TBL_PublishCatalogId TUI WHERE  TUI.PublishProductId = TYU.PublishProductId AND TUI.PublishCatalogId = TYU.PublishCatalogId)
				INNER JOIN #TBL_PublishCatalogId TUI ON (TUI.PublishProductId = TYU.PublishProductId AND TUI.PublishCatalogId = TYU.PublishCatalogId
						AND  TUI.LocaleId = dbo.Fn_GetDefaultLocaleId() )
				INNER JOIN ZnodePublishCatalog ZPC ON (TYU.PublishCatalogId = ZPC.PublishCatalogId)
				INNER JOIN ZnodePimCatalog ZPC1 ON (ZPC.PimCatalogId = ZPC1.PimCatalogId)
				WHERE  RT.LocaleId = dbo.Fn_GetDefaultLocaleId()
				AND ZPAV.PimAttributeId = (SELECT TOp 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'ProductImage')
				group by TUI.PublishCatalogId, TYU.PublishProductId ,isnull(RT.MediaPath,''),isnull(ZPC1.IsAllowIndexing,0) 
		  -- end
		    
WHILE @Counter <= @maxCountId
BEGIN
 SET @LocaleId = (SELECT TOP 1 LocaleId FROM @TBL_LocaleId WHERE RowId = @Counter)
 
  INSERT INTO #PimProductAttributeXML 
  SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeXML
  WHERE LocaleId = @LocaleId

  INSERT INTO #PimProductAttributeXML 
  SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeXML ZPAX
  WHERE ZPAX.LocaleId = @DefaultLocaleId  
  AND NOT EXISTS (SELECT TOP 1 1 FROM #PimProductAttributeXML ZPAXI WHERE ZPAXI.PimAttributeId = ZPAX.PimAttributeId )

  INSERT INTO @PimDefaultValueLocale
  SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultXML
  WHERE localeId = @LocaleId

  INSERT INTO @PimDefaultValueLocale 
   SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultXML ZX
  WHERE localeId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM @PimDefaultValueLocale TRTR WHERE TRTR.PimAttributeDefaultValueId = ZX.PimAttributeDefaultValueId)
  
 
  --DECLARE @TBL_AttributeVAlue TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT  )
  --DECLARE @TBL_CustomeFiled TABLE (PimCustomeFieldXMLId INT ,CustomCode VARCHAR(300),PimProductId INT ,LocaleId INT )
  CREATE TABLE #TBL_CustomeFiled  (PimCustomeFieldXMLId INT ,CustomCode VARCHAR(300),PimProductId INT ,LocaleId INT )
  CREATE TABLE #TBL_AttributeVAlue (PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT  )



  INSERT INTO #TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,RTR.PimProductId ,RTR.LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML RTR 
  INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = RTR.PimProductId)
  WHERE RTR.LocaleId = @LocaleId
 

  INSERT INTO #TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,ITR.PimProductId ,ITR.LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML ITR
  INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ITR.PimProductId)
  WHERE ITR.LocaleId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM #TBL_CustomeFiled TBL  WHERE ITR.CustomCode = TBL.CustomCode AND ITR.PimProductId = TBL.PimProductId)
  

    INSERT INTO #TBL_AttributeVAlue (PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId )
    SELECT PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId
	FROM @TBL_AttributeVAlueLocale
    WHERE LocaleId = @LocaleId

    
	INSERT INTO #TBL_AttributeVAlue(PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId )
	SELECT VI.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId
	FROM @TBL_AttributeVAlueLocale VI 
    WHERE VI.LocaleId = @DefaultLocaleId 
	AND NOT EXISTS (SELECT TOP 1 1 FROM #TBL_AttributeVAlue  CTE WHERE CTE.PimProductId = VI.PimProductId AND CTE.PimAttributeId = VI.PimAttributeId )
 
INSERT INTO @TBL_ZnodeTempPublish  
SELECT  a.PimProductId,a.AttributeCode , '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(a.AttributeValue,'')+'</AttributeValues> </AttributeEntity>  </Attributes>'  AttributeValue
FROM View_LoadManageProductInternal a 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = a.PimAttributeId )
INNER JOIN #PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
INNER JOIN #TBL_AttributeVAlue CTE ON (Cte.PimAttributeId = a.PimAttributeId AND Cte.ZnodePimAttributeValueLocaleId = a.ZnodePimAttributeValueLocaleId)
UNION ALL 
SELECT  a.PimProductId,c.AttributeCode , '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+TAVL.AttributeValue+'</AttributeValues> </AttributeEntity>  </Attributes>'  AttributeValue
FROM ZnodePimAttributeValue  a 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = a.PimAttributeId )
INNER JOIN #PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
INNER JOIN ZnodePImAttribute ZPA  ON (ZPA.PimAttributeId = a.PimAttributeId)
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = a.PimProductId)
Inner JOIN @TBL_AttributeVAlueLocale TAVL ON  (c.PimAttributeId = TAVL.PimAttributeId  and ZPP.PimProductId = TAVL.PimProductId )
WHERE ZPA.IsPersonalizable = 1 
AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodePimAttributeValueLocale q WHERE q.PimAttributeValueId = a.PimAttributeValueId) 



UNION ALL 
SELECT THB.PimProductId,THB.CustomCode,'<Attributes><AttributeEntity>'+CustomeFiledXML +'</AttributeEntity></Attributes>' 
FROM ZnodePimCustomeFieldXML THB 
INNER JOIN #TBL_CustomeFiled TRTE ON (TRTE.PimCustomeFieldXMLId = THB.PimCustomeFieldXMLId)
UNION ALL 
SELECT ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues></AttributeValues>'+'<SelectValues>'+
			   STUFF((
                    SELECT '  '+ DefaultValueXML  FROM ZnodePimAttributeDefaultXML AA 
				 INNER JOIN @PimDefaultValueLocale GH ON (GH.PimAttributeDefaultXMLId = AA.PimAttributeDefaultXMLId)
				 INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId )
				 WHERE (ZPADV.PimAttributeValueId = ZPAV.PimAttributeValueId)
    FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</SelectValues> </AttributeEntity></Attributes>' AttributeValue
 
FROM ZnodePimAttributeValue ZPAV  With (NoLock)
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
UNION ALL 
SELECT DISTINCT  ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+SUBSTRING((SELECT DISTINCT ',' +MediaPath 
	FROM ZnodePimProductAttributeMedia ZPPG
	INNER JOIN  #TBL_AttributeVAlue TBLV ON (TBLV.PimProductId=  ZPAV.PimProductId AND TBLV.PimAttributeId = ZPAV.PimAttributeId )
    WHERE ZPPG.PimProductAttributeMediaId = TBLV.ZnodePimAttributeValueLocaleId
	FOR XML PATH ('')
 ),2,4000)+'</AttributeValues></AttributeEntity></Attributes>' AttributeValue
 	 
FROM ZnodePimAttributeValue ZPAV 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeMedia ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
UNION ALL 
SELECT ZPLP.PimParentProductId ,c.AttributeCode, '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(SUBSTRING((SELECT ','+CAST(PublishProductId AS VARCHAR(50)) 
							 FROM ZnodePublishProduct ZPPI 
							 INNER JOIN ZnodePimLinkProductDetail ZPLPI ON (ZPLPI.PimProductId = ZPPI.PimProductId)
							 WHERE ZPLPI.PimParentProductId = ZPLP.PimParentProductId
							 AND ZPLPI.PimAttributeId   = ZPLP.PimAttributeId
							 AND ZPPI.PublishCatalogId = ZPP.PublishCatalogId
							 FOR XML PATH ('') ),2,4000),'')+'</AttributeValues></AttributeEntity></Attributes>'   AttributeValue 
							
FROM ZnodePimLinkProductDetail ZPLP 
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPLP.PimParentProductId)
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPLP.PimAttributeId )
INNER JOIN #PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
GROUP BY ZPLP.PimParentProductId , ZPP.PublishProductId  ,ZPLP.PimAttributeId,c.AttributeCode,c.AttributeXML,ZPP.PublishCatalogId

UNION ALL 
SELECT ZPAV.PimProductId,'DefaultSkuForConfigurable' ,'<Attributes><AttributeEntity>'+REPLACE(REPLACE (c.AttributeXML,'ProductType','DefaultSkuForConfigurable'),'Product Type','Default Sku For Configurable')+'<AttributeValues>'+
 (SELECT TOP 1 AttributeValue FROM View_LoadManageProductInternal ad 
 INNER JOIN ZnodePimProductTypeAssociation yt ON (yt.PimProductId = ad.PimProductId)
 WHERE Ad.AttributeCode = 'SKU'
 AND yt.PimParentProductId = ZPAV.PimProductId
ORDER BY yt.DisplayOrder , yt.PimProductTypeAssociationId ASC)
+'</AttributeValues></AttributeEntity></Attributes>' AttributeValue 
FROM ZnodePimAttributeValue ZPAV  
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL 
INNER JOIN ZnodePimAttributeDefaultValue dr ON (dr.PimAttributeDefaultValueId = ZPADVL.PimAttributeDefaultValueId)
 WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId
 AND dr.AttributeDefaultValueCode= 'ConfigurableProduct' 
)
AND EXISTS (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)
AND c.AttributeCode = 'ProductType' 

---------brand details 
CREATE TABLE #Cte_BrandData (PimProductId int,BrandXML nvarchar(max))

INSERT INTO #Cte_BrandData ( PimProductId, BrandXML )
SELECT  DISTINCT ZBP.PimProductId,'<Brands><BrandEntity><BrandId>'+CAST(ZBD.BrandId AS VARCHAR(50))+'</BrandId><BrandCode>'+ZBD.BrandCode+'</BrandCode><BrandName>'+ZBDL.BrandName+'</BrandName></BrandEntity></Brands>' as BrandXML					   		   
FROM [ZnodeBrandDetails] AS ZBD
INNER JOIN ZnodeBrandDetaillocale ZBDL ON ZBD.BrandId = ZBDL.BrandId
INNER JOIN [ZnodeBrandProduct] AS ZBP ON ZBD.BrandId = ZBP.BrandId

 DELETE FROM ZnodePublishedXML WHERE  IsProductXML = 1  AND LocaleId = @localeId 
								AND  EXISTS ( SELECT TOP 1 1 FROM  #TBL_PublishCatalogId  TBL WHERE TBL.VersionId  = ZnodePublishedXML.PublishCatalogLogId AND TBL.PublishProductId = ZnodePublishedXML.PublishedId)


;WITH CTE AS
(
SELECT ROW_NUMBER() OVER (PARTITION BY PimProductId	,AttributeCode
ORDER BY PimProductId	,AttributeCode) AS RN
FROM @TBL_ZnodeTempPublish
)

DELETE FROM CTE WHERE RN<>1

  --select *  delete  from ZnodePublishedXML
 MERGE INTO ZnodePublishedXML TARGET 
 USING (
 SELECT distinct zpp.PublishProductId,zpp.VersionId ,
'<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+
CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'
+CAST(ISNULL(ZPC.PublishCategoryId,'')  AS VARCHAR(50))+
'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+
'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+
'</SKU><SKULower>'+CAST(ISNULL((SELECT ''+Lower(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ 
'</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +
'</IsParentProducts>'+
Case When TBPS.IsAllowIndexing = 1 then
+'<RetailPrice>'+ISNULL(CAST(RetailPrice  AS VARCHAr(500)),'')+'</RetailPrice>'
+'<SalesPrice>'+ISNULL(CAST(SalesPrice AS VARCHAr(500)), '') +'</SalesPrice>'
+'<CurrencyCode>'+ISNULL(CurrencyCode,'') +'</CurrencyCode>'
+'<CultureCode>'+ISNULL(CultureCode,'') +'</CultureCode>'
+'<CurrencySuffix>'+ISNULL(CurrencySuffix,'') +'</CurrencySuffix>'
+'<SeoUrl>'+ISNULL(SEOUrl,'') +'</SeoUrl>'
+'<SeoDescription>'+ISNULL(SEODescription,'') +'</SeoDescription>'
+'<SeoKeywords>'+ISNULL(SEOKeywords,'') +'</SeoKeywords>'
+'<SeoTitle>'+ISNULL(SEOTitle,'') +'</SeoTitle>'
+'<ImageSmallPath>'+ISNULL(ImageSmallPath,'') +'</ImageSmallPath>'
else '' end
+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
FROM ZnodeProfileCatalog ZPFC 
INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+'</TempProfileIds><ProductIndex>'+CAST(ISNULL(ZPCP.ProductIndex,1)  AS VARCHAr(100))+'</ProductIndex><IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
+'<CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000))+
'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+
'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
+'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
ISNULL(STUFF(( SELECT '  '+ BrandXML  FROM #Cte_BrandData BD WHERE BD.PimProductId = ZPP.PimProductId   
				FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, ''),'')+
STUFF(( SELECT '  '+ AttributeValue  FROM @TBL_ZnodeTempPublish TY WHERE TY.PimProductId = ZPP.PimProductId   
	FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>' xmlvalue
	FROM  #TBL_PublishCatalogId zpp
	INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
	INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)

	LEFT JOIN #ZnodePrice TBZP ON (TBZP.PublishProductId = ZPP.PublishProductId)
	LEFT JOIN #ProductSKU TBPS ON (TBPS.PublishProductId = ZPP.PublishProductId)
	LEFT JOIN #ProductImages TBPI ON (TBPI.PublishProductId = ZPP.PublishProductId  )
	LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
	LEFT JOIN ZnodePublishCategory ZPC ON (ZPC.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId)
	LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId AND  ZPCCF.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId)
	LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ZPCP.PublishCategoryId AND ZPCD.LocaleId = @LocaleId )
	WHERE ZPPDFG.LocaleId = @LocaleId
	AND zpp.LocaleId = @LocaleId
	) SOURCE 
	ON (
     TARGET.PublishCatalogLogId = SOURCE.versionId 
	 AND TARGET.PublishedId = SOURCE.PublishProductId
	 AND TARGET.IsProductXML = 1 
	 AND TARGET.LocaleId = @localeId 
)
WHEN MATCHED THEN 
UPDATE 
SET  PublishedXML = xmlvalue
   , ModifiedBy = @userId 
   ,ModifiedDate = @GetDate
   ,ImportedGuId = @TokenId 
WHEN NOT MATCHED THEN 
INSERT (PublishCatalogLogId
,PublishedId
,PublishedXML
,IsProductXML
,LocaleId
,CreatedBy
,CreatedDate
,ModifiedBy
,ModifiedDate,ImportedGuId)

VALUES (SOURCE.versionid , Source.publishProductid,Source.xmlvalue,1,@localeid,@userId,@getDate,@userId,@getDate,@TokenId);

--select * from ZnodePublishCatalogLog where PublishCatalogLogId in (1702,1701)
DELETE FROM @TBL_ZnodeTempPublish
IF OBJECT_ID('tempdb..#PimProductAttributeXML') is not null
 BEGIN 
	DELETE FROM #PimProductAttributeXML
 END
 IF OBJECT_ID('tempdb..#TBL_CustomeFiled') is not null
 BEGIN 
 DROP TABLE #TBL_CustomeFiled
 END
 IF OBJECT_ID('tempdb..#TBL_AttributeVAlue') is not null
 BEGIN 
 DROP TABLE #TBL_AttributeVAlue
 END
 
DELETE FROM @PimDefaultValueLocale


 IF OBJECT_ID('tempdb..#Cte_BrandData') is not null
 BEGIN 
  DROP TABLE #Cte_BrandData
 END 

SET @Counter = @counter + 1 
END

END

GO

-- after 9.3 beta release


--IF NOT EXISTS (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeCMSSEODetailLocale' AND COLUMN_NAME = 'CanonicalURL'AND COLUMN_NAME = 'RobotTag')
--BEGIN
--ALTER TABLE [dbo].[ZnodeCMSSEODetailLocale] ADD [CanonicalURL] VARCHAR (200) NULL,[RobotTag] VARCHAR (50)  NULL;
--END
GO
IF NOT EXISTS (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeCMSSEODetailLocale' AND COLUMN_NAME = 'CanonicalURL')
BEGIN
ALTER TABLE [dbo].[ZnodeCMSSEODetailLocale] ADD [CanonicalURL] VARCHAR (200) NULL
END
go
IF NOT EXISTS (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeCMSSEODetailLocale' AND  COLUMN_NAME = 'RobotTag')
BEGIN
ALTER TABLE [dbo].[ZnodeCMSSEODetailLocale] ADD [RobotTag] VARCHAR (50)  NULL;
END
GO 
 
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetSEODefaultSetting')
BEGIN 
DROP PROCEDURE Znode_GetSEODefaultSetting
END
GO
	 Create PROCEDURE [dbo].[Znode_GetSEODefaultSetting]
( 
	@PortalId INT = 0,
	@SEOType Varchar(200) = '',
	@Id INT = 0
)
as 
Begin
	SET NOCOUNT ON;
	DECLARE @Title VARCHAR(MAX), @Description VARCHAR(MAX),@Keyword VARCHAR(MAX)
	DECLARE @SQL VARCHAR(MAX)
	 
	IF @SEOType = 'Product'
	BEGIN
			SELECT @Title = case when ProductTitle = '<NAME>' then 'ProductName' when ProductTitle = '<Product_Num>' then 'cast(PimProductId as varchar(10))'  when ProductTitle = '<SKU>' then 'SKU' end,
				   @Description = case when ProductDescription = '<NAME>' then 'ProductName' when ProductDescription = '<Product_Num>' then 'cast(PimProductId as varchar(10))' when ProductDescription = '<SKU>' then 'SKU' end,
				   @Keyword = case when ProductKeyword = '<NAME>' then 'ProductName' when ProductKeyword = '<Product_Num>' then 'cast(PimProductId as varchar(10))' when ProductKeyword = '<SKU>' then 'SKU' end
			FROM ZnodeCMSPortalSEOSetting WHERE PortalId = @PortalId

			SELECT PimProductId, max(LongDescription) as LongDescription, max(SKU) as SKU, max(ShortDescription) as ShortDescription, max(ProductName) as ProductName,max(Brand) as Brand
			into #ProductDetail
			FROM  
			(
				select PimProductId,	AttributeValue,	AttributeCode
				from View_LoadManageProductInternal 
				where PimProductId = @Id and AttributeCode in ('LongDescription', 'SKU', 'ShortDescription','ProductName','ProductCode')
				union all
				select a.PimProductId, d.AttributeDefaultValueCode as AttributeValue , 'Brand' as AttributeCode
				from ZnodePimAttributeValue a
				inner join ZnodePimProductAttributeDefaultValue b on a.PimAttributeValueId = b.PimAttributeValueId
				inner join ZnodePimAttributeDefaultValue d on b.PimAttributeDefaultValueId = d.PimAttributeDefaultValueId
				inner join ZnodePimAttribute c on a.PimAttributeId = c.PimAttributeId
				where c.AttributeCode = 'Brand' and a.PimProductId = @Id
			) AS SourceTable  
			PIVOT  
			(  
			max(AttributeValue)  
			FOR AttributeCode IN (LongDescription, SKU, ShortDescription, ProductName,Brand)  
			) AS PivotTable
			group by PimProductId 

			if (@Title <> '' or @Description <> '' or @Keyword <> '')
			begin
				SET @SQL = '
				select '+CASE WHEN isnull(@Title,'') = '' THEN '''''' ELSE @Title END  +' as SEOTitle,'+ 
						 CASE WHEN isnull(@Description,'') = '' THEN '''''' ELSE @Description END+ ' as SEODescription,'+ 
						 CASE WHEN isnull(@Keyword,'') = '' THEN '''''' ELSE @Keyword END+' as SEOKeywords   
				from #ProductDetail'
				print @SQL
				exec (@SQL)
			end

		end
		IF @SEOType = 'Category'
		BEGIN
			
			SELECT @Title = case when CategoryTitle = '<NAME>' then 'CategoryName' when CategoryTitle = '<Product_Num>' then 'cast(PimCategoryId as varchar(10))' when CategoryTitle = '<SKU>' then 'CategoryCode' end,
				   @Description = case when CategoryDescription = '<NAME>' then 'CategoryName' when CategoryDescription = '<Product_Num>' then 'cast(PimCategoryId as varchar(10))' when CategoryDescription = '<SKU>' then 'CategoryCode' end,
				   @Keyword = case when CategoryKeyword = '<NAME>' then 'CategoryName' when CategoryKeyword = '<Product_Num>' then 'cast(PimCategoryId as varchar(10))' when CategoryKeyword = '<SKU>' then 'CategoryCode' end
		    FROM ZnodeCMSPortalSEOSetting WHERE PortalId = @PortalId

			SELECT ZPCAV.PimCategoryId, ZPCAVL.CategoryValue as CategoryCode,  ZPCAVL1.CategoryValue as CategoryName
			INTO #CategoryDetail
			FROM ZnodePimCategoryAttributeValue ZPCAV
			INNER JOIN ZnodePimCategoryAttributeValueLocale ZPCAVL ON ZPCAV.PimCategoryAttributeValueId = ZPCAVL.PimCategoryAttributeValueId
			INNER JOIN ZnodePimAttribute ZPA ON ZPCAV.PimAttributeId = ZPA.PimAttributeId
			INNER JOIN ZnodePimCategoryAttributeValue ZPCAV1 ON ZPCAV.PimCategoryId = ZPCAV1.PimCategoryId
			INNER JOIN ZnodePimCategoryAttributeValueLocale ZPCAVL1 ON ZPCAV1.PimCategoryAttributeValueId = ZPCAVL1.PimCategoryAttributeValueId
			INNER JOIN ZnodePimAttribute ZPA1 ON ZPCAV1.PimAttributeId = ZPA1.PimAttributeId
			WHERE ZPA.AttributeCode = 'CategoryCode' AND ZPA1.AttributeCode = 'CategoryName'
			and ZPCAV.PimCategoryId = @Id

			if (@Title <> '' or @Description <> '' or @Keyword <> '')
			begin
				SET @SQL = '
				select '+CASE WHEN isnull(@Title,'') = '' THEN '''''' ELSE @Title END  +' as SEOTitle,'+ 
						 CASE WHEN isnull(@Description,'') = '' THEN '''''' ELSE @Description END+ ' as SEODescription,'+ 
						 CASE WHEN isnull(@Keyword,'') = '' THEN '''''' ELSE @Keyword END+' as SEOKeywords   
				from #CategoryDetail'
				
				exec (@SQL)
			end

		end

		IF @SEOType = 'Content_Page'
		BEGIN
			
			SELECT @Title = case when ContentTitle = '<Name>' then 'PageName' when ContentTitle = '<Product_Num>' then 'cast(CMSContentPagesId as varchar(10))' when ContentTitle = '<SKU>' then 'PageName' end,
					@Description = case when ContentDescription = '<Name>' then 'PageName' when ContentDescription = '<Product_Num>' then 'cast(CMSContentPagesId as varchar(10))' when ContentDescription = '<SKU>' then 'PageName' end,
					@Keyword = case when ContentKeyword = '<Name>' then 'PageName' when ContentKeyword = '<Product_Num>' then 'cast(CMSContentPagesId as varchar(10))' when ContentKeyword = '<SKU>' then 'PageName' end
			FROM ZnodeCMSPortalSEOSetting WHERE PortalId = @PortalId

			SELECT CMSContentPagesId, PageName into #ContentPageDetail from ZnodeCMSContentPages where CMSContentPagesId = @Id

			if (@Title <> '' or @Description <> '' or @Keyword <> '')
			begin

				SET @SQL = '
				select '+CASE WHEN isnull(@Title,'') = '' THEN '''''' ELSE @Title END  +' as SEOTitle,'+ 
						 CASE WHEN isnull(@Description,'') = '' THEN '''''' ELSE @Description END+ ' as SEODescription,'+ 
						 CASE WHEN isnull(@Keyword,'') = '' THEN '''''' ELSE @Keyword END+' as SEOKeywords   
				from #ContentPageDetail'

				exec (@SQL)
			end


		end

	

end
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_CopyPortalMessageAndContentPages')
BEGIN 
DROP PROCEDURE Znode_CopyPortalMessageAndContentPages
END
GO
  
CREATE PROCEDURE [dbo].[Znode_CopyPortalMessageAndContentPages]
(	@CopyPortalId    INT,
    @PortalId        INT,
    @UserId          INT,
    @Status          INT = 1 OUT)
AS 
    
	/*
     Summary :- This procedure is used to copy existing portal messages and content pages to the another portal 
     Fn_GetDefaultValue use to find the defualt value of locale 
     copy only default locale data and active records 
     Affected tables "ZnodeCMSContentPages" copy the record of one portal to another portal 
     "ZnodeCMSContentPagesLocale" copy the record of one portal to another portal 
     "ZnodeCMSPortalMessage" copy the record of one portal to another portal 
     Unit Testing
	 begin tran
     EXEC Znode_CopyPortalMessageAndContentPages @CopyPortalId = 1 ,@PortalId = 1 ,@UserId = 2 ,@Status =0 
     rollback tran  
   */
    
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @TBL_ContentPageDetail TABLE
             (
			    CMSContentPagesId    INT,
                OldCMSContentPagesId INT,
				PageName NVARCHAR(200)
                
             );
             DECLARE @TBL_CMSSEODetailId TABLE
             (
			    CMSSEODetailId    INT,
                OldCMSSEODetailId INT 
                 
             );
			 -- copy the  messages for portal

             INSERT INTO ZnodeCMSPortalMessage (PortalId, CMSMessageKeyId,CMSMessageId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             SELECT DISTINCT @PortalId,ZCPM.CMSMessageKeyId,ZCPM.CMSMessageId,@UserId,@GetDate,@UserId,@GetDate
             FROM ZnodeCMSPortalMessage AS ZCPM
             INNER JOIN ZnodeCMSMessage AS ZCM ON(ZCM.CMSMessageId = ZCPM.CMSMessageId)
             WHERE ZCPM.PortalId = @CopyPortalId;  
            
			 INSERT INTO ZnodeCMSPortalMessageKeyTag (PortalId,CMSMessageKeyId,TagXML,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             SELECT @PortalId,CMSMessageKeyId,TagXML,@UserId,@GetDate,@UserId,@GetDate
             FROM ZnodeCMSPortalMessageKeyTag ZCPMT
             WHERE PortalId = @CopyPortalId;
			 -- this cte use to collect the required data to merge with ZnodeCMSContentPages 
             WITH Cte_CMSContentPages
             AS 
             (SELECT DISTINCT ZCCP.CMSContentPagesId,@PortalId AS PortalId,CMSTemplateId,PageName,ActivationDate,ExpirationDate,IsActive,@UserId AS CreatedBy,@GetDate AS CreatedDate,@UserId AS ModifiedBy,@GetDate AS ModifiedDate 
	         FROM ZnodeCMSContentPages AS ZCCP
             WHERE IsActive = 1 AND PortalId = @CopyPortalId)
			 -- merge use for catching the output 
             MERGE INTO ZnodeCMSContentPages TARGET
             USING Cte_CMSContentPages SOURCE 
             ON 1 = 0
                      WHEN NOT MATCHED
                      THEN INSERT(PortalId,CMSTemplateId,PageName,ActivationDate,ExpirationDate,IsActive,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
					  VALUES (SOURCE.PortalId,SOURCE.CMSTemplateId,SOURCE.PageName,SOURCE.ActivationDate,SOURCE.ExpirationDate,SOURCE.IsActive,SOURCE.CreatedBy,SOURCE.CreatedDate,SOURCE.ModifiedBy,SOURCE.ModifiedDate)
                      OUTPUT Inserted.CMSContentPagesId,
                      SOURCE.CMSContentPagesId,Inserted.PageName 
                      INTO @TBL_ContentPageDetail;

             -- here collect the inserted data for further use 

             INSERT INTO ZnodeCMSContentPageGroupMapping (CMSContentPageGroupId,CMSContentPagesId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             SELECT CMSContentPageGroupId,TBCPD.CMSContentPagesId,@UserId,@GetDate,@userId,@GetDate
			 FROM ZnodeCMSContentPageGroupMapping ZCCPGM
             INNER JOIN @TBL_ContentPageDetail TBCPD ON(TBCPD.OldCMSContentPagesId = ZCCPGM.CMSContentPagesId);

             INSERT INTO ZnodeCMSContentPagesLocale(CMSContentPagesId,LocaleId,PageTitle,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             SELECT TBCPD.CMSContentPagesId,LocaleId,PageTitle,@UserId,@GetDate,@userId,@GetDate -- insert default locale records 
             FROM ZnodeCMSContentPagesLocale AS ZCCPL
             INNER JOIN @TBL_ContentPageDetail AS TBCPD ON(TBCPD.OldCMSContentPagesId = ZCCPL.CMSContentPagesId);

             INSERT INTO ZnodeCMSContentPagesProfile (ProfileId,CMSContentPagesId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             SELECT ProfileId,TBCPD.CMSContentPagesId,@UserId,@GetDate,@userId,@GetDate
             FROM ZnodeCMSContentPagesProfile ZCPP
             INNER JOIN @TBL_ContentPageDetail TBCPD ON(TBCPD.OldCMSContentPagesId = ZCPP.CMSContentPagesId)
             WHERE EXISTS  ( SELECT TOP 1 1 FROM ZnodePortalProfile ZPP WHERE ZPP.PortalId = @CopyPortalId AND isnull(ZPP.ProfileId,0) = isnull(ZCPP.ProfileId,0) )
             -- this cte use to collect the required data to merge with ZnodeCMSContentPages 
			 ;WITH Cte_CMSSEODetails
             AS  
             (
			 SELECT ZCSD.CMSSEODetailId,ZCSD.CMSSEOTypeId,TBCPD.CMSContentPagesId,IsRedirect,MetaInformation,@PortalId PortalId,SEOUrl,@UserId CREATEDBy,@GetDate CREATEDDATE,@userId MODIFIEDBY,@GetDate MODIFIEDDATE
			 ,ZCSD.IsPublish,ZCSD.SEOCode
             FROM ZnodeCMSSEODetail ZCSD
             INNER JOIN @TBL_ContentPageDetail TBCPD ON(TBCPD.PageName = ZCSD.SEOCode)
             INNER JOIN ZnodeCMSSEOType ZCST ON(ZCST.CMSSEOTypeId = ZCSD.CMSSEOTypeId AND ZCST.Name = 'Content Page')
			 WHERE ZCSD.PortalId = @CopyPortalId)
			 -- merge use for catching the output
             MERGE INTO ZnodeCMSSEODetail TARGET
             USING Cte_CMSSEODetails SOURCE 
             ON 1 = 0
             WHEN NOT MATCHED
             THEN INSERT(CMSSEOTypeId,SEOId,IsRedirect,MetaInformation,PortalId,SEOUrl,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,IsPublish,SEOCode)
			 VALUES (SOURCE.CMSSEOTypeId,NULL,SOURCE.IsRedirect,SOURCE.MetaInformation,SOURCE.PortalId,SOURCE.SEOUrl,SOURCE.CreatedBy,SOURCE.CreatedDate,SOURCE.ModifiedBy,SOURCE.ModifiedDate,SOURCE.IsPublish,SOURCE.SEOCode)
             OUTPUT Inserted.CMSSEODetailId,
             SOURCE.CMSSEODetailId 
             INTO @TBL_CMSSEODetailId;

             INSERT INTO ZnodeCMSSEODetailLocale (CMSSEODetailId,LocaleId,SEOTitle,SEODescription,SEOKeywords,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate, CanonicalURL, RobotTag)
             SELECT TBCPD.CMSSEODetailId,ZCSDl.LocaleId,ZCSDl.SEOTitle,ZCSDl.SEODescription,ZCSDl.SEOKeywords,@UserId as CreatedBy,@GetDate as CreatedDate,@userId as ModifiedBy,@GetDate as ModifiedDate, ZCSDl.CanonicalURL, ZCSDl.RobotTag
             FROM ZnodeCMSSEODetailLocale ZCSDl
             INNER JOIN @TBL_CMSSEODetailId TBCPD ON(TBCPD.OldCMSSEODetailId = ZCSDl.CMSSEODetailId);
                          
			 INSERT INTO ZnodePortalCountry (PortalId,CountryCode,IsDefault,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate) 
			 SELECT @PortalId,CountryCode,IsDefault,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
			 FROM ZnodePortalCountry ZPC
			 WHERE PortalId = @CopyPortalId
			 AND IsDefault = 1 
			 AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodePortalCountry ZPPP WHERE ZPPP.PortalId = @PortalId AND ZPPP.CountryCode = CountryCode );

			 EXEC Znode_CopyPortalEmailTemplate @PortalId,@CopyPortalId,@userId
			 SET @Status = 1;
			 SELECT @CopyPortalId AS ID,CAST(1 AS BIT) AS [Status];
         END TRY
         BEGIN CATCH
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= ' EXEC Znode_CopyPortalMessageAndContentPages @CopyPortalId = '+CAST(@CopyPortalId AS VARCHAR(100))+' ,@PortalId='+CAST(@PortalId AS VARCHAR(100))+' ,@UserId= '+CAST(@UserId AS VARCHAR(100))+',@Status='+CAST(@Status AS VARCHAR(50));
             SELECT @PortalId AS ID,
                    CAST(0 AS BIT) AS [Status];
             SET @Status = 0;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_CopyPortalMessageAndContentPages',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO


	 
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetSeoDetailsForPublish')
BEGIN 
DROP PROCEDURE Znode_GetSeoDetailsForPublish
END
GO
  
CREATE  PROCEDURE [dbo].[Znode_GetSeoDetailsForPublish]
(   
	@PortalId INT=0,
	@IsBrand  Bit = 0  ,
	@SeoCode    NVARCHAR(4000) = '',
	@SeoType  NVARCHAR(200) = '',
	@LocaleId int = 0 
)
AS 
   /*
     Summary:- This Procedure is used to get the Seo Detials on the bassis of Portal 
     Unit Testing 
	 Znode_GetSeoDetailsForPublish @PortalId=0, @IsBrand=0, @SeoId = '14',@SeoType = 'Product'
	 EXEC [_Znode_GetSeoDetailsForPublish]  @PortalId=19, @IsBrand=1, @SeoCode = '' ,@SeoType = 'BlogNews,Content Page',@LocaleId=1
   */
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             DECLARE @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId();

		IF OBJECT_ID('tempdb..#CMSTempDetails') IS NOT NULL
		DROP TABLE #CMSTempDetails

		CREATE TABLE #CMSTempDetails(
			[PortalId] [int] NULL,
			[CMSSEODetailId] [int] NOT NULL,
			[SEOTitle] [nvarchar](max) NULL,
			[SEOKeywords] [nvarchar](max) NULL,
			[SEOUrl] [nvarchar](max) NULL,
			[ModifiedDate] [datetime] NOT NULL,
			[SEODescription] [nvarchar](max) NULL,
			[MetaInformation] [nvarchar](max) NULL,
			[IsRedirect] [bit] NULL,
			[CMSSEODetailLocaleId] [int] NOT NULL,
			[LocaleId] [int] NULL,
			[CMSSEOTypeId] [int] NOT NULL,
			[SEOTypeName] [nvarchar](100) NULL,
			[PublishStatus] [varchar](50) NULL,
			[SEOCode] [nvarchar](2000) NULL,
			[CanonicalURL]  [VARCHAR] (200) NULL,
			[RobotTag] [VARCHAR] (50)  NULL
		)



				INSERT INTO #CMSTempDetails
				SELECT ZCSD.PortalId, ZCSD.CMSSEODetailId, ZCSDL.SEOTitle, ZCSDL.SEOKeywords, lower(ZCSD.SEOUrl) as SEOUrl,ZCSD.ModifiedDate,ZCSDL.SEODescription, ZCSD.MetaInformation,ZCSD.IsRedirect,
					   ZCSDL.CMSSEODetailLocaleId, ZCSDL.LocaleId, ZCSD.CMSSEOTypeId, ZCST.Name AS SEOTypeName, TYU.DisplayName   AS PublishStatus,ZCSD.SEOCode,ZCSDL.CanonicalURL, ZCSDL.RobotTag 
				FROM ZnodeCMSSEODetail AS ZCSD
				LEFT JOIN ZnodePublishState  TYU ON (TYU.PublishStateId = ZCSD.PublishStateId) 
				INNER JOIN ZnodeCMSSEOType AS ZCST ON ( ZCST.CMSSEOTypeId = ZCSD.CMSSEOTypeId )                                                 
				INNER JOIN ZnodeCMSSEODetailLocale AS ZCSDL ON ( ZCSDL.CMSSEODetailId = ZCSD.CMSSEODetailId )
				WHERE (ZCSD.PortalId= @PortalId OR @PortalId = 0 ) AND ZCST.Name <> 'Brand'
				AND EXISTS (SELECT TOP 1 1 FROM dbo.Split(@SeoCode,',') SP WHERE SP.Item = ZCSD.SEOCode  OR @SeoCode = '')
				AND EXISTS (SELECT TOP 1 1 FROM dbo.Split(@SeoType,',') SP WHERE SP.Item = ZCST.Name  OR @SeoType = '')
				AND ZCSDL.LocaleId IN (@LocaleId,dbo.Fn_GetDefaultLocaleId())
				UNION ALL
				SELECT ZCSD.PortalId, ZCSD.CMSSEODetailId, ZCSDL.SEOTitle, ZCSDL.SEOKeywords, lower(ZCSD.SEOUrl) as SEOUrl,ZCSD.ModifiedDate,ZCSDL.SEODescription, ZCSD.MetaInformation,ZCSD.IsRedirect,
					   ZCSDL.CMSSEODetailLocaleId, ZCSDL.LocaleId, ZCSD.CMSSEOTypeId, ZCST.Name AS SEOTypeName, TYU.DisplayName AS PublishStatus,ZCSD.SEOCode , ZCSDL.CanonicalURL, ZCSDL.RobotTag
				FROM ZnodeCMSSEODetail AS ZCSD 
				LEFT JOIN ZnodePublishState  TYU ON (TYU.PublishStateId = ZCSD.PublishStateId)
				INNER JOIN ZnodeCMSSEOType AS ZCST ON ( ZCST.CMSSEOTypeId = ZCSD.CMSSEOTypeId )                                                  
				INNER JOIN ZnodeCMSSEODetailLocale AS ZCSDL ON ( ZCSDL.CMSSEODetailId = ZCSD.CMSSEODetailId )
				WHERE @IsBrand = 1 AND ZCST.Name = 'Brand'  
				AND EXISTS (SELECT TOP 1 1 FROM dbo.Split(@SeoCode,',') SP WHERE SP.Item = ZCSD.SEOCode  OR @SeoCode = '' )
				AND EXISTS (SELECT TOP 1 1 FROM dbo.Split(@SeoType,',') SP WHERE SP.Item = ZCST.Name  OR @SeoType = '')
				AND ZCSDL.LocaleId IN (@LocaleId,dbo.Fn_GetDefaultLocaleId())
				

						
			SELECT PortalId, CMSSEODetailId, SEOTitle, SEOKeywords, SEOUrl, SEODescription, MetaInformation, IsRedirect, CMSSEODetailLocaleId, LocaleId, CMSSEOTypeId, SEOTypeName, PublishStatus,SEOCode, CanonicalURL, RobotTag    
			FROM #CMSTempDetails
			where LocaleId = @LocaleId  
			UNION ALL
			SELECT PortalId, CMSSEODetailId, SEOTitle, SEOKeywords, SEOUrl, SEODescription, MetaInformation, IsRedirect, CMSSEODetailLocaleId, @LocaleId LocaleId, CMSSEOTypeId, SEOTypeName, PublishStatus,SEOCode  , CanonicalURL, RobotTag  
			FROM #CMSTempDetails CSD
			WHERE 
			NOT EXISTS( SELECT TOP 1 1 FROM #CMSTempDetails CSD1 
						WHERE CSD.CMSSEOTypeId = CSD1.CMSSEOTypeId AND CSD.SEOCode = CSD1.SEOCode AND  CSD1.LocaleId = @LocaleId)
			AND LocaleId = dbo.Fn_GetDefaultLocaleId()

			
         END TRY
         BEGIN CATCH
             DECLARE @Status BIT ;
		    SET @Status = 0;
		    DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetSeoDetailsForPublish @PortalId = '+CAST(@PortalId AS VARCHAR(10))+',@IsBrand ='+CAST(@IsBrand AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
            SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
            EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetSeoDetailsForPublish',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
	 Go

	 
IF EXISTS (SELECT TOP 1 1 FROM SYS.views WHERE name = 'View_GetContentPageDetails')
BEGIN 
DROP VIEW View_GetContentPageDetails
END
GO
  
CREATE  VIEW [dbo].[View_GetContentPageDetails]
AS
     SELECT ZCCP.CMSContentPagesId,
            PageName,
            PageTitle,
            ActivationDate,
            ExpirationDate,
            SEODescription,
            SEOKeywords,
            SEOTitle,
            SEOUrl,
            IsActive,
			IsRedirect,
            StoreName,
            CMSTemplateId,
            MetaInformation,
            ZCCP.PortalId,
            ZCCPGM.CMSContentPageGroupId,
            ZCCPL.LocaleId,
			ZCSEDL.CanonicalURL,
			ZCSEDL.RobotTag
     FROM ZnodeCMSContentPages ZCCP
          LEFT JOIN ZnodeCMSContentPagesLocale ZCCPL ON(ZCCPL.CMSContentPagesId = ZCCP.CMSContentPagesId)
          LEFT JOIN ZnodeCMSContentPageGroupMapping ZCCPGM ON(ZCCPGM.CMSContentPagesId = ZCCp.CMSContentPagesId)
          LEFT JOIN ZnodeCMSContentPageGroup ZCCPG ON(ZCCPG.CMSContentPageGroupId = ZCCPGM.CMSContentPageGroupId)
          LEFT JOIN ZnodeCMSContentPageGroupLocale ZCCPGL ON(ZCCPGL.CMSContentPageGroupId = ZCCPG.CMSContentPageGroupId
                                                             AND ZCCPGL.LocaleId = ZCCPL.LocaleId)
          LEFT JOIN ZnodeCMSSeoDetail ZCSED ON(ZCSED.SEOCode = ZCCp.PageName
                                               AND EXISTS
                                              (
                                                  SELECT TOP 1 1
                                                  FROM ZnodeCMSSEOType ZCST
                                                  WHERE ZCST.CMSSEOTypeId = ZCSED.CMSSEOTypeId
                                                        AND ZCST.Name = 'Content Page'
                                              ))
          LEFT JOIN ZnodeCMSSEODetailLocale ZCSEDL ON(ZCSEDL.CMSSEODetailId = ZCSED.CMSSEODetailId
                                                      AND ZCSEDL.LocaleId = ZCCPL.LocaleId)
          LEFT JOIN ZnodePortal ZP ON(ZP.PortalId = ZCCP.POrtalId);
GO 
IF EXISTS (SELECT TOP 1 1 FROM SYS.PROCEDURES WHERE name = 'Znode_ImportSEODetails')
BEGIN 
DROP PROCEDURE Znode_ImportSEODetails
END
GO
  
CREATE  PROCEDURE [dbo].[Znode_ImportSEODetails](  
   @TableName nvarchar(100), 
   @Status bit OUT, @UserId int, 
   @ImportProcessLogId int, 
   @NewGUId nvarchar(200), 
   @LocaleId int= 1,
   @PortalId int ,
   @CsvColumnString nvarchar(max))  
AS  
 --------------------------------------------------------------------------------------  
 -- Summary :  Import SEO Details  
   
 -- Unit Testing :   
 --------------------------------------------------------------------------------------  
  
BEGIN  
 BEGIN TRAN A;  
 BEGIN TRY  
   
  DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max);  
  DECLARE @GetDate datetime= dbo.Fn_GetDate();  
    
    
  DECLARE @CMSSEOTypeProduct INT ,@CMSSEOTypeCategory INT  
  
  SELECT @CMSSEOTypeProduct = CMSSEOTypeId FROM ZnodeCMSSEOType WHERE Name = 'Product'  
  SELECT @CMSSEOTypeCategory = CMSSEOTypeId FROM ZnodeCMSSEOType WHERE Name = 'Category'  
  
  
  -- Three type of import required three table varible for product , category and brand  
  DECLARE @InsertSEODetails TABLE  
  (   
   RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, ImportType varchar(20), Code nvarchar(300),   
   IsRedirect bit ,MetaInformation nvarchar(max),PortalId int ,SEOUrl nvarchar(max),IsActive varchar(10),  
   SEOTitle nvarchar(max),SEODescription nvarchar(max),SEOKeywords nvarchar(max),   
   RedirectFrom nvarchar(max),RedirectTo nvarchar(max), EnableRedirection bit, CanonicalURL VARCHAR(200),   
   RobotTag VARCHAR(50), GUID nvarchar(400)  
   --Index Ind_ImportType (ImportType),Index Ind_Code (Code)  
  );  
  
  DECLARE @InsertSEODetailsOFProducts TABLE  
  (   
   RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, ImportType varchar(20), Code nvarchar(300),   
   IsRedirect bit ,MetaInformation nvarchar(max),PortalId int ,SEOUrl nvarchar(max),IsActive varchar(10),  
   SEOTitle nvarchar(max),SEODescription nvarchar(max),SEOKeywords nvarchar(max),  
   RedirectFrom nvarchar(max),RedirectTo nvarchar(max), EnableRedirection bit, CanonicalURL VARCHAR(200),  
   RobotTag VARCHAR(50),GUID nvarchar(400)  
   --Index Ind_ImportType (ImportType),Index Ind_Code (Code)  
  );  
  
  DECLARE @InsertSEODetailsOFCategory TABLE  
  (   
   RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, ImportType varchar(20), Code nvarchar(300),   
   IsRedirect bit ,MetaInformation nvarchar(max),PortalId int ,SEOUrl nvarchar(max),IsActive varchar(10),  
   SEOTitle nvarchar(max),SEODescription nvarchar(max),SEOKeywords nvarchar(max),  
   RedirectFrom nvarchar(max),RedirectTo nvarchar(max), EnableRedirection bit, CanonicalURL VARCHAR(200), 
   RobotTag VARCHAR(50),GUID nvarchar(400)  
   --Index Ind_ImportType (ImportType),Index Ind_Code (Code)  
  );  
  
  DECLARE @InsertSEODetailsOFBrand TABLE  
  (   
   RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, ImportType varchar(20), Code nvarchar(300),   
   IsRedirect bit ,MetaInformation nvarchar(max),PortalId int ,SEOUrl nvarchar(max),IsActive varchar(10),  
   SEOTitle nvarchar(max),SEODescription nvarchar(max),SEOKeywords nvarchar(max),   
   RedirectFrom nvarchar(max),RedirectTo nvarchar(max), EnableRedirection bit, CanonicalURL VARCHAR(200),  
   RobotTag VARCHAR(50),GUID nvarchar(400)  
   --Index Ind_ImportType (ImportType),Index Ind_Code (Code)  
  );  
  
    
  DECLARE @InsertedZnodeCMSSEODetail TABLE  
  (   
   CMSSEODetailId int , SEOCode Varchar(4000), CMSSEOTypeId int  
  );  
    
  --SET @SSQL = 'Select RowNumber,ImportType,Code,IsRedirect,MetaInformation,SEOUrl,IsActive,SEOTitle,SEODescription,SEOKeywords,GUID  FROM '+@TableName;  
  SET @SSQL = 'Select RowNumber,'+@CsvColumnString+',GUID  FROM '+@TableName;  
  
  INSERT INTO @InsertSEODetails(RowNumber,ImportType,Code,IsRedirect,MetaInformation,SEOUrl,IsActive,SEOTitle,SEODescription,SEOKeywords,RedirectFrom,RedirectTo,EnableRedirection,CanonicalURL,RobotTag,GUID )  
  EXEC sys.sp_sqlexec @SSQL;  
  
  INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
      SELECT '30', 'SEOUrl', SEOUrl, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
      FROM @InsertSEODetails AS ii   
      where ii.SEOURL in (Select ISD.SEOURL from @InsertSEODetails ISD Group by ISD.SEOUrl having count(*) > 1 ) 
	    
  
  INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
      SELECT '10', 'SEOUrl', SEOUrl, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
      FROM @InsertSEODetails AS ii   
      where EXISTS (Select TOP 1 1 from ZnodeCMSSEODetail ZCSD WHERE ZCSD.SEOUrl = ii.SEOUrl AND ZCSD.PortalId = @PortalId
	  AND ZCSD.SEOCode <> ii.Code  AND EXISTS  
     (SELECT TOP 1 1 FROM ZnodeCMSSEODetailLocale dl WHERE dl.CMSSEODetailId = ZCSD.CMSSEODetailId AND dl.LocaleId = @LocaleId  
           AND dl.SEODescription = ii.SEODescription AND dl.SEOTitle = ii.SEOTitle AND dl.SEOKeywords = ii.SEOKeywords))   
  
  INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
      SELECT '53', 'RedirectFrom', RedirectFrom, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
      FROM @InsertSEODetails AS ii   
      where ii.RedirectFrom in (Select ISD.RedirectFrom from @InsertSEODetails ISD Group by ISD.RedirectFrom having count(*) > 1 )   
  AND (ii.RedirectFrom <> '' )

  INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
      SELECT '35', 'RedirectFrom\RedirectTo', RedirectFrom + '  ' + RedirectTo  , @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
      FROM @InsertSEODetails AS ii   
      where ii.RedirectFrom = ii.RedirectTo  
	  AND (ii.RedirectFrom <> '' AND ii.RedirectTo <> '' )
  
  INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
      SELECT '35', 'SEOUrl', SEOUrl, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId  
      FROM @InsertSEODetails AS ii  
      WHERE ltrim(rtrim(isnull(ii.SEOUrl,''))) like '% %' -----space not allowed  
  
  INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
      SELECT '19', 'ImportType', ImportType, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
      FROM @InsertSEODetails AS ii  
      WHERE ii.ImportType NOT in   
      (  
       Select NAME from ZnodeCMSSEOType where NAME NOT IN ('Content Page','BlogNews','Brand')  
      );  

  INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
      SELECT '35', 'IsActive', IsActive, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
      FROM @InsertSEODetails AS ii  
      WHERE ii.IsActive not in ('True','1','Yes','FALSE','0','No')
  
  INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
      SELECT '30', 'CanonicalURL', CanonicalURL, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
      FROM @InsertSEODetails AS ii   
      where ii.CanonicalURL in (Select ISD.CanonicalURL from @InsertSEODetails ISD Group by ISD.CanonicalURL having count(*) > 1 )

  INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
      SELECT '10', 'CanonicalURL', CanonicalURL, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
      FROM @InsertSEODetails AS ii   
      where EXISTS (Select TOP 1 1 from ZnodeCMSSEODetail ZCSD WHERE ZCSD.PortalId = @PortalId
	  AND ZCSD.SEOCode <> ii.Code  AND EXISTS  
     (SELECT TOP 1 1 FROM ZnodeCMSSEODetailLocale dl WHERE dl.CMSSEODetailId = ZCSD.CMSSEODetailId AND dl.LocaleId = @LocaleId  
           AND dl.CanonicalURL = ii.CanonicalURL AND dl.SEODescription = ii.SEODescription AND dl.SEOTitle = ii.SEOTitle AND dl.SEOKeywords = ii.SEOKeywords)) 

  INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
      SELECT '35', 'CanonicalURL', CanonicalURL, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId  
      FROM @InsertSEODetails AS ii  
      WHERE ltrim(rtrim(isnull(ii.CanonicalURL,''))) like '% %'

  UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ SEOCode - ' + ISNULL(Code,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN @InsertSEODetails IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL


  
  DELETE FROM @InsertSEODetails  
  WHERE RowNumber IN  
  (  
   SELECT DISTINCT   
       RowNumber  
   FROM ZnodeImportLog  
   WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null   
   --AND GUID = @NewGUID  
  );  
    
   
  
-------------------------------------------------------------------------------------------------------------------------------  
  
  INSERT INTO @InsertSEODetailsOFProducts(  RowNumber , ImportType , Code ,   
   IsRedirect ,MetaInformation ,SEOUrl ,IsActive ,  
   SEOTitle ,SEODescription ,SEOKeywords, RedirectFrom, RedirectTo,EnableRedirection, CanonicalURL, RobotTag, GUID )  
   SELECT RowNumber , ImportType , Code , IsRedirect ,MetaInformation ,SEOUrl , 
      CASE WHEN IsActive in ('True','1','Yes') 
	       Then 1 
           ELSE 0
      END as IsActive, SEOTitle ,SEODescription ,SEOKeywords, RedirectFrom, RedirectTo,EnableRedirection, CanonicalURL, RobotTag, GUID  
   FROM @InsertSEODetails WHERE ImportType = 'Product'  
  
  
  INSERT INTO @InsertSEODetailsOFCategory( RowNumber , ImportType , Code ,   
   IsRedirect ,MetaInformation,SEOUrl ,IsActive ,  
   SEOTitle ,SEODescription ,SEOKeywords, RedirectFrom, RedirectTo,EnableRedirection, CanonicalURL, RobotTag , GUID )  
   SELECT RowNumber , ImportType , Code , IsRedirect ,MetaInformation ,SEOUrl , 
	   CASE WHEN IsActive in ('True','1','Yes') 
			Then 1 
			ELSE 0
	   END as IsActive, SEOTitle ,SEODescription ,SEOKeywords, RedirectFrom, RedirectTo,EnableRedirection, CanonicalURL, RobotTag, GUID  
   FROM @InsertSEODetails WHERE ImportType = 'Category'  
  
  INSERT INTO @InsertSEODetailsOFBrand( RowNumber , ImportType , Code ,   
   IsRedirect ,MetaInformation ,SEOUrl ,IsActive ,  
   SEOTitle ,SEODescription ,SEOKeywords, RedirectFrom, RedirectTo,EnableRedirection, CanonicalURL, RobotTag , GUID )  
   SELECT RowNumber , ImportType , Code , IsRedirect ,MetaInformation ,SEOUrl ,
		CASE WHEN IsActive in ('True','1','Yes') 
			Then 1 
			ELSE 0
	    END as IsActive, SEOTitle ,SEODescription ,SEOKeywords, RedirectFrom, RedirectTo,EnableRedirection, CanonicalURL, RobotTag, GUID  
   FROM @InsertSEODetails WHERE ImportType = 'Brand'  
  
  
     -- start Functional Validation   
  --1. Product  
  --2. Category  
  --3. Content Page  
  --4. Brand  
  -----------------------------------------------  
  
    
  INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
      SELECT '19', 'SKU', CODE, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
      FROM @InsertSEODetailsOFProducts AS ii  
      WHERE ii.CODE NOT in   
      (  
     SELECT ZPAVL.AttributeValue  
     FROM ZnodePimAttributeValue ZPAV   
     inner join ZnodePimAttributeValueLocale ZPAVL ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId  
     inner join ZnodePimAttribute ZPA on ZPAV.PimAttributeId = ZPA.PimAttributeId  
     Where ZPA.AttributeCode = 'SKU' AND ZPAVL.AttributeValue IS NOT NULL   
      )  AND ImportType = 'Product';  
  
  
    
  INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
      SELECT '19', 'Category', CODE, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
      FROM @InsertSEODetailsOFCategory AS ii  
      WHERE ii.CODE NOT in   
      (  
     SELECT ZPCAVL.CategoryValue  
     FROM ZnodePimCategoryAttributeValue ZPCAV   
     INNER JOIN ZnodePimCategoryAttributeValueLocale ZPCAVL on ZPCAV.PimCategoryAttributeValueId = ZPCAVL.PimCategoryAttributeValueId  
     INNER JOIN ZnodePimAttribute ZPA on ZPCAV.PimAttributeId = ZPA.PimAttributeId  
     Where ZPA.AttributeCode = 'CategoryCode' AND ZPCAVL.CategoryValue IS NOT NULL  
      )  AND ImportType = 'Category';  
  
  INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
      SELECT '19', 'Brand', CODE, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
      FROM @InsertSEODetailsOFBrand AS ii  
      WHERE ii.CODE NOT in   
      (  
       Select BrandCode from ZnodeBrandDetails WHERE BrandCode IS NOT NULL  
      )  AND ImportType = 'Brand';  
    
    -- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM @InsertSEODetails
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount , 
		TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
		WHERE ImportProcessLogId = @ImportProcessLogId;
	

  --Note : Content page import is not required   
    
  -- End Function Validation    
  -----------------------------------------------  
  --- Delete Invalid Data after functional validatin    
  
  DELETE FROM @InsertSEODetailsOFProducts  
  WHERE RowNumber IN  
  (  
   SELECT DISTINCT   
       RowNumber  
   FROM ZnodeImportLog  
   WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null   
   --AND GUID = @NewGUID  
  );  
  
  DELETE FROM @InsertSEODetailsOFCategory  
  WHERE RowNumber IN  
  (  
   SELECT DISTINCT   
       RowNumber  
   FROM ZnodeImportLog  
   WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null   
   --AND GUID = @NewGUID  
  );  
  
  DELETE FROM @InsertSEODetailsOFBrand  
  WHERE RowNumber IN  
  (  
   SELECT DISTINCT   
       RowNumber  
   FROM ZnodeImportLog  
   WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null   
   --AND GUID = @NewGUID  
  );  
  
   
  -- Insert Product Data   
  If Exists (Select top 1 1 from @InsertSEODetailsOFProducts)  
  Begin  
   Update ZCSD SET ZCSD.IsRedirect = ISD.IsRedirect ,  
         ZCSD.MetaInformation =  ISD.MetaInformation,  
         ZCSD.SEOUrl=  ISD.SEOUrl,  
         ZCSD.IsPublish = 0  
   FROM   
   @InsertSEODetailsOFProducts ISD    
   INNER JOIN ZnodeCMSSEODetail ZCSD ON  ZCSD.CMSSEOTypeId = @CMSSEOTypeProduct AND ZCSD.SEOCode = ISD.Code  
   INNER JOIN ZnodeCMSSEODetailLocale ZCSDL ON ZCSD.CMSSEODetailId = ZCSDL.CMSSEODetailId  
   where  ZCSD.PortalId  =@PortalId  AND ZCSDL.LocaleId = @LocaleId;  
     
   Update ZCSDL SET ZCSDL.SEOTitle = ISD.SEOTitle  
       ,ZCSDL.SEODescription = ISD.SEODescription  
       ,ZCSDL.SEOKeywords= ISD.SEOKeywords
	   ,ZCSDL.CanonicalURL = ISD.CanonicalURL
	   ,ZCSDL.RobotTag = ISD.RobotTag  
    FROM   
   @InsertSEODetailsOFProducts ISD    
   INNER JOIN ZnodeCMSSEODetail ZCSD ON  ZCSD.CMSSEOTypeId = @CMSSEOTypeProduct AND ZCSD.SEOCode = ISD.Code  
   INNER JOIN ZnodeCMSSEODetailLocale ZCSDL ON ZCSD.CMSSEODetailId = ZCSDL.CMSSEODetailId  
   where  ZCSD.PortalId = @PortalId AND ZCSDL.LocaleId = @LocaleId;   
  
     
   insert into ZnodeCMSSEODetailLocale (CMSSEODetailId,LocaleId,SEOTitle,SEODescription,SEOKeywords,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,CanonicalURL,RobotTag)  
   SELECT distinct CSD.CMSSEODetailId,@LocaleId,ISD.SEOTitle,ISD.SEODescription,ISD.SEOKeywords,@USerId, @GetDate,@USerId, @GetDate, CanonicalURL,RobotTag  
   FROM ZnodeCMSSEODetail CSD  
   INNER JOIN @InsertSEODetailsOFProducts ISD ON CSD.SEOCode = ISD.Code AND CSD.CMSSEOTypeId = @CMSSEOTypeProduct AND CSD.SEOUrl = ISD.SEOUrl  
   WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSSEODetailLocale CSDL WHERE CSDL.LocaleId = @LocaleId AND CSD.CMSSEODetailId = CSDL.CMSSEODetailId )  
   AND CSD.portalId = @PortalId  
  
     
   Delete from @InsertedZnodeCMSSEODetail  
  
   IF NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSSEODetail SD INNER JOIN @InsertSEODetailsOFProducts DP ON SD.SEOCode = DP.Code AND SD.PortalId =  @PortalId  
                        AND  SD.CMSSEOTypeId = @CMSSEOTypeProduct)  
   BEGIN  
   INSERT INTO ZnodeCMSSEODetail(CMSSEOTypeId,SEOCode,IsRedirect,MetaInformation,PortalId,SEOUrl,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)    
   OUTPUT Inserted.CMSSEODetailId,Inserted.SEOCode,Inserted.CMSSEOTypeId INTO @InsertedZnodeCMSSEODetail    
   Select Distinct @CMSSEOTypeProduct,ISD.Code , ISD.IsRedirect,ISD.MetaInformation,@PortalId,ISD.SEOUrl,@USerId, @GetDate,@USerId, @GetDate from   
   @InsertSEODetailsOFProducts ISD    
   where NOT EXISTS (Select TOP 1 1 from ZnodeCMSSEODetail ZCSD where ZCSD.CMSSEOTypeId = @CMSSEOTypeProduct AND ZCSD.SEOCode = ISD.Code and  ZCSD.PortalId =@PortalId   );  
    
   insert into ZnodeCMSSEODetailLocale(CMSSEODetailId,LocaleId,SEOTitle,SEODescription,SEOKeywords,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,CanonicalURL,RobotTag)  
   Select Distinct IZCSD.CMSSEODetailId,@LocaleId,ISD.SEOTitle,ISD.SEODescription,ISD.SEOKeywords,@USerId, @GetDate,@USerId, @GetDate,CanonicalURL,RobotTag   
   from @InsertedZnodeCMSSEODetail IZCSD   
   INNER JOIN @InsertSEODetailsOFProducts ISD ON IZCSD.SEOCode = ISD.Code   
  
   END  
     
  
   -----RedirectUrlInsert  
  -- INSERT INTO ZnodeCMSUrlRedirect ( RedirectFrom,RedirectTo,IsActive,PortalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)  
  -- select RedirectFrom,RedirectTo,EnableRedirection,@PortalId as PortalId ,@USerId as CreatedBy,@GetDate as CreatedDate,@USerId as ModifiedBy,@GetDate as ModifiedDate  
  -- from @InsertSEODetailsOFProducts  
  -- where IsRedirect = 1  
  --END  
  
  
     INSERT INTO ZnodeCMSUrlRedirect ( RedirectFrom,RedirectTo,IsActive,PortalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)  
   select RedirectFrom,RedirectTo,EnableRedirection 
 ,@PortalId as PortalId ,@USerId as CreatedBy,@GetDate as CreatedDate,@USerId as ModifiedBy,@GetDate as ModifiedDate  
   from @InsertSEODetailsOFProducts  SDP
   where IsRedirect = 1  
   AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSUrlRedirect ZCR 
								  WHERE ZCR.RedirectFrom = SDP.RedirectFrom AND ZCR.RedirectTo = SDP.RedirectTo)
   AND (SDP.RedirectFrom <> '' AND SDP.RedirectTo <> '' )
  END  
  
  -- Insert Category Data   
  If Exists (Select top 1 1 from @InsertSEODetailsOFCategory)  
  Begin  
  
   Update ZCSD SET ZCSD.IsRedirect = ISD.IsRedirect ,  
         ZCSD.MetaInformation =  ISD.MetaInformation,  
         ZCSD.SEOUrl=  ISD.SEOUrl,  
         ZCSD.IsPublish = 0  
   FROM   
   @InsertSEODetailsOFCategory ISD    
   INNER JOIN ZnodeCMSSEODetail ZCSD ON  ZCSD.CMSSEOTypeId = @CMSSEOTypeCategory AND ZCSD.SEOCode = ISD.Code  
   INNER JOIN ZnodeCMSSEODetailLocale ZCSDL ON ZCSD.CMSSEODetailId = ZCSDL.CMSSEODetailId  
   where  ZCSD.PortalId  =@PortalId  AND ZCSDL.LocaleId = @LocaleId;  
     
     
   Update ZCSDL SET ZCSDL.SEOTitle = ISD.SEOTitle  
       ,ZCSDL.SEODescription = ISD.SEODescription  
       ,ZCSDL.SEOKeywords= ISD.SEOKeywords 
	   ,CanonicalURL = ISD.CanonicalURL
	   ,RobotTag = ISD.RobotTag
    FROM   
   @InsertSEODetailsOFCategory ISD    
   INNER JOIN ZnodeCMSSEODetail ZCSD ON  ZCSD.CMSSEOTypeId = @CMSSEOTypeCategory AND ZCSD.SEOCode = ISD.Code  
   INNER JOIN ZnodeCMSSEODetailLocale ZCSDL ON ZCSD.CMSSEODetailId = ZCSDL.CMSSEODetailId  
   where  ZCSD.PortalId  =@PortalId AND ZCSDL.LocaleId = @LocaleId;   
  
   insert into ZnodeCMSSEODetailLocale (CMSSEODetailId,LocaleId,SEOTitle,SEODescription,SEOKeywords,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,CanonicalURL,RobotTag)  
   SELECT distinct CSD.CMSSEODetailId,@LocaleId,ISD.SEOTitle,ISD.SEODescription,ISD.SEOKeywords,@USerId, @GetDate,@USerId, @GetDate,CanonicalURL,RobotTag  
   FROM ZnodeCMSSEODetail CSD  
   INNER JOIN @InsertSEODetailsOFProducts ISD ON CSD.SEOCode = ISD.Code AND CSD.CMSSEOTypeId = @CMSSEOTypeCategory AND CSD.SEOUrl = ISD.SEOUrl  
   WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSSEODetailLocale CSDL WHERE CSDL.LocaleId = @LocaleId AND CSD.CMSSEODetailId = CSDL.CMSSEODetailId )  
   AND CSD.portalId = @PortalId  
  
  
   Delete from @InsertedZnodeCMSSEODetail  
  
   IF NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSSEODetail SD INNER JOIN @InsertSEODetailsOFProducts DP ON SD.SEOCode = DP.Code AND SD.PortalId =  @PortalId  
                        AND  SD.CMSSEOTypeId = @CMSSEOTypeCategory)  
   BEGIN  
   INSERT INTO ZnodeCMSSEODetail(CMSSEOTypeId,SEOCode,IsRedirect,MetaInformation,PortalId,SEOUrl,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)    
   OUTPUT Inserted.CMSSEODetailId,Inserted.SEOCode,Inserted.CMSSEOTypeId INTO @InsertedZnodeCMSSEODetail    
   Select Distinct @CMSSEOTypeCategory,ISD.Code , ISD.IsRedirect,ISD.MetaInformation,@PortalId,ISD.SEOUrl,@USerId, @GetDate,@USerId, @GetDate   
   from @InsertSEODetailsOFCategory ISD    
   where NOT EXISTS (Select TOP 1 1 from ZnodeCMSSEODetail ZCSD where ZCSD.CMSSEOTypeId = @CMSSEOTypeCategory AND ZCSD.SEOCode  = ISD.Code AND ZCSD.PortalId = @PortalId );  
  
   insert into ZnodeCMSSEODetailLocale(CMSSEODetailId,LocaleId,SEOTitle,SEODescription,SEOKeywords,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,CanonicalURL,RobotTag)  
   Select Distinct IZCSD.CMSSEODetailId,@LocaleId,ISD.SEOTitle,ISD.SEODescription,ISD.SEOKeywords,@USerId, @GetDate,@USerId, @GetDate,CanonicalURL,RobotTag   
   from @InsertedZnodeCMSSEODetail IZCSD   
   INNER JOIN @InsertSEODetailsOFCategory ISD ON IZCSD.SEOCode = ISD.Code   
   WHERE IZCSD.CMSSEOTypeId =@CMSSEOTypeCategory    
   END  
  
   -----RedirectUrlInsert  
   INSERT INTO ZnodeCMSUrlRedirect ( RedirectFrom,RedirectTo,IsActive,PortalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)  
   SELECT RedirectFrom,RedirectTo,
   EnableRedirection,@PortalId as PortalId ,2 as CreatedBy,@GetDate as CreatedDate,2 as ModifiedBy,@GetDate as ModifiedDate  
   FROM @InsertSEODetailsOFProducts SDP  
   WHERE IsRedirect = 1 
   --AND (SDP.RedirectFrom <> '' AND SDP.RedirectTo <> '' ) 
   AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSUrlRedirect ZCR 
								  WHERE ZCR.RedirectFrom = SDP.RedirectFrom AND ZCR.RedirectTo = SDP.RedirectTo)
   AND (SDP.RedirectFrom <> '' AND SDP.RedirectTo <> '' )
   --AND ((SDP.RedirectFrom <> '' OR SDP.RedirectFrom IS NOT NULL )
   --OR ( SDP.RedirectTo <> '' OR SDP.RedirectTo IS NOT NULL ))
  END  
             
  --select 'End'  
  --      SET @Status = 1;  
  UPDATE ZnodeImportProcessLog  
    SET Status = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = @GetDate  
  WHERE ImportProcessLogId = @ImportProcessLogId;  
  
  COMMIT TRAN A;  
 END TRY  
 BEGIN CATCH  
  
  UPDATE ZnodeImportProcessLog  
    SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate  
  WHERE ImportProcessLogId = @ImportProcessLogId;  
  
  SET @Status = 0;  
  SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();  
  ROLLBACK TRAN A;  
 END CATCH;  
END;
GO 


IF EXISTS (SELECT TOP 1 1 FROM SYS.PROCEDURES WHERE name = 'Znode_SaveSeoDetails')
BEGIN 
DROP PROCEDURE Znode_SaveSeoDetails
END
GO
  
CREATE PROCEDURE [dbo].[Znode_SaveSeoDetails]
(
	@CMSSEODetailId INT = 0,
	@CMSSEOTypeId INT = 0,
	@IsAllStore BIT = 0,
	@LocaleId INT = 0,
	@PimProductId INT = 0,
	@PortalId INT = 0,
	@SEODescription NVARCHAR(max) = null,
	@SEOId INT = 0,
	@SEOKeywords NVARCHAR(MAX) = NULL,
	@SEOTitle NVARCHAR(MAX) = NULL,
	@SEOUrl NVARCHAR(MAX)= NULL,
	@IsRedirect BIT = NULL,
	@IsPublish BIT = NULL,
	@CreatedBy NVARCHAR(200)=null,
	@ModifiedBy NVARCHAR(200) = null,
	@CanonicalURL VARCHAR(200) = null,
	@RobotTag VARCHAR(50) = null
)
AS 
BEGIN
IF(@IsAllStore = 'false')
BEGIN
IF NOT EXISTS(SELECT 1 FROM ZnodeCMSSEODetail WHERE CMSSEODetailId =@CMSSEODetailId)
BEGIN
	INSERT INTO ZnodeCMSSEODetail(
									CMSSEOTypeId,
									SEOId,
									IsRedirect,
									PortalId,
									SEOUrl,
									CreatedBy,
									CreatedDate,
									IsPublish
								)
					VALUES
								(
									@CMSSEOTypeId,
									@SEOId,
									@IsRedirect,
									@PortalId,
									@SEOUrl,
									@CreatedBy,
									GETDATE(),
									@IsPublish
								)
							SET @CMSSEODetailId	=(SELECT SCOPE_IDENTITY())
END
ELSE
BEGIN
			UPDATE ZnodeCMSSEODetail SET
									CMSSEOTypeId=@CMSSEOTypeId,
									SEOId=@SEOId,
									IsRedirect=@IsRedirect,
									PortalId=@PortalId,
									SEOUrl=@SEOUrl,
									ModifiedBy=@ModifiedBy,
									ModifiedDate=GETDATE(),
									IsPublish= @IsPublish
				WHERE CMSSEODetailId= @CMSSEODetailId
									
END
IF NOT EXISTS(SELECT 1 FROM ZnodeCMSSEODetailLocale WHERE CMSSEODetailId =@CMSSEODetailId AND LocaleId =@LocaleId)
BEGIN
	INSERT INTO [dbo].[ZnodeCMSSEODetailLocale]
           ([CMSSEODetailId]
           ,[LocaleId]
           ,[SEOTitle]
           ,[SEODescription]
           ,[SEOKeywords]
           ,[CreatedBy]
           ,[CreatedDate]
		   ,CanonicalURL
		   ,RobotTag)
     VALUES
           (
			@CMSSEODetailId
           ,@LocaleId
           ,@SEOTitle
           ,@SEODescription
           ,@SEOKeywords
           ,@CreatedBy
           ,GETDATE()
		   ,@CanonicalURL
		   ,@RobotTag)
END
ELSE
begin
	UPDATE [dbo].[ZnodeCMSSEODetailLocale]
   SET [CMSSEODetailId] = @CMSSEODetailId
      ,[LocaleId] = @LocaleId
      ,[SEOTitle] = @SEOTitle
      ,[SEODescription] = @SEODescription
      ,[SEOKeywords] = @SEOKeywords
      ,[ModifiedBy] = @ModifiedBy
      ,[ModifiedDate] = GETDATE()
	  ,CanonicalURL = @CanonicalURL
	  ,RobotTag = @RobotTag
 WHERE CMSSEODetailId =@CMSSEODetailId AND LocaleId=@LocaleId
END
END
ELSE
BEGIN
DECLARE @PortalIds table
(
    RowId				INT IDENTITY(1,1), 
    PortalId			INT
)

INSERT INTO @PortalIds (PortalId) SELECT PortalId FROM ZnodePortal
--*/

DECLARE @maxRowPortalId INT= (SELECT MAX(RowId) FROM @PortalIds)
DECLARE @RowPortalId int = 1

WHILE @RowPortalId <= @maxRowPortalId
BEGIN

    SET @PortalId = (SELECT PortalId FROM @PortalIds WHERE RowId = @RowPortalId)

	DECLARE @CMSSEODetailIds table
	(
		RowId				INT IDENTITY(1,1), 
		CMSSEODetailId			INT
	)
	INSERT INTO @CMSSEODetailIds (CMSSEODetailId) SELECT CMSSEODetailId FROM ZnodeCMSSEODetail where PortalId=@PortalId and SEOId =@SEOId
	DECLARE @maxRowSEODetailId INT= (SELECT MAX(RowId) FROM @CMSSEODetailIds)
	DECLARE @RowSEODetailId int = 1
	WHILE @RowSEODetailId <= @maxRowSEODetailId
	BEGIN
		SET @CMSSEODetailId  =(SELECT CMSSEODetailId FROM @CMSSEODetailIds WHERE RowId = @RowSEODetailId)
		IF NOT EXISTS(SELECT 1 FROM ZnodeCMSSEODetail WHERE CMSSEODetailId =@CMSSEODetailId)
BEGIN
	INSERT INTO ZnodeCMSSEODetail(
									CMSSEOTypeId,
									SEOId,
									IsRedirect,
									PortalId,
									SEOUrl,
									CreatedBy,
									CreatedDate,
									IsPublish
								)
					VALUES
								(
									@CMSSEOTypeId,
									@SEOId,
									@IsRedirect,
									@PortalId,
									@SEOUrl,
									@CreatedBy,
									GETDATE(),
									@IsPublish
								)
							SET @CMSSEODetailId	=(SELECT SCOPE_IDENTITY())
END
ELSE
BEGIN
			UPDATE ZnodeCMSSEODetail SET
									CMSSEOTypeId=@CMSSEOTypeId,
									SEOId=@SEOId,
									IsRedirect=@IsRedirect,
									PortalId=@PortalId,
									SEOUrl=@SEOUrl,
									ModifiedBy=@ModifiedBy,
									ModifiedDate=GETDATE(),
									IsPublish= @IsPublish
				WHERE CMSSEODetailId= @CMSSEODetailId
									
END
		IF NOT EXISTS(SELECT 1 FROM ZnodeCMSSEODetailLocale WHERE CMSSEODetailId =@CMSSEODetailId AND LocaleId =@LocaleId)
BEGIN
	INSERT INTO [dbo].[ZnodeCMSSEODetailLocale]
           ([CMSSEODetailId]
           ,[LocaleId]
           ,[SEOTitle]
           ,[SEODescription]
           ,[SEOKeywords]
           ,[CreatedBy]
           ,[CreatedDate]
		   ,CanonicalURL
		   ,RobotTag)
     VALUES
           (
			@CMSSEODetailId
           ,@LocaleId
           ,@SEOTitle
           ,@SEODescription
           ,@SEOKeywords
           ,@CreatedBy
           ,GETDATE()
		   ,@CanonicalURL
		   ,@RobotTag)
END
ELSE
begin
	UPDATE [dbo].[ZnodeCMSSEODetailLocale]
   SET [CMSSEODetailId] = @CMSSEODetailId
      ,[LocaleId] = @LocaleId
      ,[SEOTitle] = @SEOTitle
      ,[SEODescription] = @SEODescription
      ,[SEOKeywords] = @SEOKeywords
      ,[ModifiedBy] = @ModifiedBy
      ,[ModifiedDate] = GETDATE()
	  ,CanonicalURL = @CanonicalURL
	  ,RobotTag= @RobotTag
 WHERE CMSSEODetailId =@CMSSEODetailId AND LocaleId=@LocaleId
END
		SET @RowSEODetailId =@RowSEODetailId +1
	END

    SELECT @RowPortalId = @RowPortalId + 1
End
END
END
GO


  ---EXEC Znode_GetCatalogCategorySEODetail @WhereClause = '', @PortalId = 1, @RowsCount = 0
  IF EXISTS (SELECT TOP 1 1 FROM SYS.PROCEDURES WHERE name = 'Znode_GetCatalogCategorySEODetail')
BEGIN 
DROP PROCEDURE Znode_GetCatalogCategorySEODetail
END
GO
  
CREATE  PROCEDURE [dbo].[Znode_GetCatalogCategorySEODetail]
  (
	  @WhereClause      VARCHAR(MAX),
	  @Rows             INT           = 100,
	  @PageNo           INT           = 1,
	  @Order_BY         VARCHAR(1000) = '',
	  @RowsCount        INT OUT,
	  @LocaleId         INT           = 1,
	  @PortalId         INT
)
AS
BEGIN
	SET NOCOUNT ON;

	Declare @PimCatalogId INT, @SQL VARCHAR(MAX), @DefaultLocaleId VARCHAR(20)= dbo.Fn_GetDefaultLocaleId()

	SELECT @PimCatalogId = PimCatalogId 
	FROM ZnodePortalCatalog ZPC
	INNER JOIN ZnodePublishCatalog PC ON ZPC.PublishCatalogId = pc.PublishCatalogId WHERE PortalId = @PortalId


	IF OBJECT_ID('TEMPDB..#CategoryDetail') IS NOT NULL
		DROP TABLE #CategoryDetail

	IF OBJECT_ID('TEMPDB..##TempCategoryDetail') IS NOT NULL
		DROP TABLE ##TempCategoryDetail

		IF OBJECT_ID('TEMPDB..#znodeCatalogCategory') IS NOT NULL
		DROP TABLE #znodeCatalogCategory

	SELECT PimCategoryId, CategoryName, CategoryCode, LocaleId
	INTO #CategoryDetail
	FROM
	(
		SELECT ZPCAV.PimCategoryId,ZPA.AttributeCode,ZPCAVL.CategoryValue, ZPCAVL.LocaleId 
		FROM ZnodePimCategoryAttributeValue ZPCAV
		INNER JOIN ZnodePimCategoryAttributeValueLocale ZPCAVL on ZPCAV.PimCategoryAttributeValueId = ZPCAVL.PimCategoryAttributeValueId
		INNER JOIN ZnodePimAttribute ZPA on ZPCAV.PimAttributeId = ZPA.PimAttributeId
		where ZPA.AttributeCode in ( 'CategoryName', 'CategoryCode')
	)TB PIVOT(MAX(CategoryValue) FOR AttributeCode in ( CategoryName, CategoryCode))AS PVT
	
	

	SET @SQL = '

	select distinct PimCatalogId,PimCategoryId into #znodeCatalogCategory
	FROm ZnodePimCatalogCategory

	;With CTE_CategoryDetail AS
	(
		SELECT DISTINCT PC.PimCatalogId, PC.CatalogName, CD.PimCategoryId, CD.CategoryCode, CD.CategoryName , ISNULL(CSD.SEOCode,CD.CategoryCode) as SEOCode , CSD.SEOUrl, CSDL.SEOTitle, CSDL.SEODescription, CSDL.SEOKeywords,
		case when  ZPPO.DisplayName IS NULL THEN '''' ELSE ZPPO.DisplayName END IsPublish , ActivationDate , ExpirationDate, 
		CH.IsActive, CD.LocaleId, CSDL.CanonicalURL, CSDL.RobotTag
		FROM #CategoryDetail CD
		INNER JOIN ZnodePimCategory ZPC ON (ZPC.PimCategoryId = CD.PimCategoryId)
		INNER JOIN  #znodeCatalogCategory PCC on CD.PimCategoryId = PCC.PimCategoryId
		INNER JOIN ZnodePimCatalog PC on PCC.PimCatalogId = PC.PimCatalogId
		LEFT JOIN ZnodePimCategoryHierarchy CH ON (CH.PimCategoryId = CD.PimCategoryId)
		LEFT JOIN ZnodeCMSSEOType CST ON CST.Name = ''Category''
		LEFT JOIN ZnodeCMSSEODetail CSD on CD.CategoryCode = CSD.SEOCode and CSD.CMSSEOTypeId = CST.CMSSEOTypeId AND CSD.PortalId = '+CAST(@PortalId AS VARCHAR(10))+'
		LEFT JOIN ZnodeCMSSEODetailLocale CSDL ON  CSD.CMSSEODetailId = CSDL.CMSSEODetailId AND CSDL.LocaleId =  '+CAST(@LocaleId AS VARCHAR(10))+'
		LEFT JOIN ZnodePublishState ZPPO ON (ZPPO.PublishStateId = CSD.PublishStateId)
		WHERE PCC.PimCatalogId = '+CAST(@PimCatalogId AS VARCHAR(10))+' AND CD.LocaleId IN ('+CAST(@LocaleId AS VARCHAR(50))+', '+CAST(@DefaultLocaleId AS VARCHAR(50))+') 
	)
	,CTE_CategoryDetail_Locale as
	(
		SELECT PimCatalogId, CatalogName, PimCategoryId, CategoryCode,CategoryName, SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords,IsPublish,ActivationDate,ExpirationDate,IsActive, LocaleId, CanonicalURL, RobotTag
		FROM CTE_CategoryDetail CD
		WHERE CD.LocaleId ='+CAST(@LocaleId AS VARCHAR(50))+'
	)
	,CTE_CategoryDetail_BothLocale as
	(
		SELECT PimCatalogId, CatalogName, PimCategoryId, CategoryCode,CategoryName, SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords,IsPublish,ActivationDate,ExpirationDate,IsActive, CanonicalURL, RobotTag
		FROM CTE_CategoryDetail_Locale
		Union All
		SELECT PimCatalogId, CatalogName, PimCategoryId, CategoryCode,CategoryName, SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords,IsPublish,ActivationDate,ExpirationDate,IsActive, CanonicalURL, RobotTag
		FROM CTE_CategoryDetail CDS
		WHERE LocaleId ='+CAST(@DefaultLocaleId AS VARCHAR(50))+' AND
			NOT EXISTS( SELECT TOP 1 1 FROM CTE_CategoryDetail_Locale CSD1
						WHERE CDS.PimCategoryId = CSD1.PimCategoryId AND CDS.CatalogName = CSD1.CatalogName )
	)
	,CTE_CategoryDetail_WhereClause AS
	(
		SELECT PimCatalogId, CatalogName, PimCategoryId, CategoryCode,CategoryName, SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords,IsPublish,ActivationDate,ExpirationDate,IsActive, CanonicalURL, RobotTag, '+[dbo].[Fn_GetPagingRowId](@Order_BY, 'PimCategoryId')+',Count(*)Over() CountId
		FROM CTE_CategoryDetail_BothLocale CD
		WHERE 1 = 1 '+CASE WHEN @WhereClause = '' THEN '' ELSE ' AND '+@WhereClause END +'
	)
	SELECT PimCatalogId, CatalogName, PimCategoryId, CategoryCode,CategoryName, SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords,IsPublish,ActivationDate,ExpirationDate,IsActive, CanonicalURL, RobotTag, CountId
	INTO ##TempCategoryDetail
	FROM CTE_CategoryDetail_WhereClause
	'+[dbo].[Fn_GetPaginationWhereClause](@PageNo, @Rows);
	print @SQL
	EXEC (@SQL)

	SET @RowsCount = ISNULL((SELECT TOP 1 CountId FROM ##TempCategoryDetail ),0)

	SELECT  PimCategoryId, CategoryName, SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords,IsPublish, ActivationDate,ExpirationDate,IsActive, CanonicalURL, RobotTag 
	FROM ##TempCategoryDetail

	IF OBJECT_ID('TEMPDB..#CategoryDetail') IS NOT NULL
		DROP TABLE #CategoryDetail

	IF OBJECT_ID('TEMPDB..##TempCategoryDetail') IS NOT NULL
		DROP TABLE ##TempCategoryDetail

	IF OBJECT_ID('TEMPDB..#znodeCatalogCategory') IS NOT NULL
	DROP TABLE #znodeCatalogCategory

END
GO


IF EXISTS (SELECT TOP 1 1 FROM SYS.PROCEDURES WHERE name = 'Znode_GetCatalogProductSEODetail')
BEGIN 
DROP PROCEDURE Znode_GetCatalogProductSEODetail
END
GO
  
CREATE  PROCEDURE [dbo].[Znode_GetCatalogProductSEODetail]
( 
  @WhereClause      NVARCHAR(MAX),
  @Rows             INT           = 100,
  @PageNo           INT           = 1,
  @Order_BY         VARCHAR(1000) = '',
  @RowsCount        INT OUT,
  @LocaleId         INT           = 1,
  @PortalId			INT
 
  )
AS
   
/*
	   Summary:  Get product List  Catalog / category / respective product list   		   
	   Unit Testing   
	   begin tran
	   declare @p7 int = 0  
	   EXEC Znode_GetCatalogProductSEODetail @WhereClause=N'',@Rows=100,@PageNo=1,@Order_By=N'',
	   @RowsCount=@p7 output,@PortalId= 1 ,@LocaleId=1 
	   rollback tran
	  
	     declare @p7 int = 0  
	   EXEC Znode_GetCatalogProductSEODetail @WhereClause=N'',@Rows=10,@PageNo=1,@Order_By=N'',
	   @RowsCount=@p7 output,@PortalId= 5 ,@LocaleId=1 


    */

     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY
             DECLARE  @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId();
             DECLARE @SQL NVARCHAR(MAX), 
					 @PimProductId TransferId,
					 @PimAttributeId VARCHAR(MAX)
					
             DECLARE @TransferPimProductId TransferId 
		
	
			IF OBJECT_ID('TEMPDB..#ProductDetail') IS NOT NULL
			DROP TABLE #ProductDetail

			IF OBJECT_ID('TEMPDB..##TempProductDetail') IS NOT NULL
			DROP TABLE ##TempProductDetail

			IF OBJECT_ID('TEMPDB..#znodeCatalogProduct') IS NOT NULL
			DROP TABLE #znodeCatalogProduct

			IF OBJECT_ID('TEMPDB..#ProductAttributeDetailS') IS NOT NULL
			DROP TABLE #ProductAttributeDetailS

			IF OBJECT_ID('TEMPDB..#ProductDetail') IS NOT NULL
			DROP TABLE #ProductDetail

			IF OBJECT_ID('TEMPDB..#TBL_MediaValue') IS NOT NULL
			DROP TABLE #TBL_MediaValue

			
			
			Declare @PimCatalogId INT

			SELECT @PimCatalogId = PimCatalogId 
			FROM ZnodePortalCatalog ZPC
			INNER JOIN ZnodePublishCatalog PC ON ZPC.PublishCatalogId = pc.PublishCatalogId WHERE PortalId = @PortalId
				
    --            SELECT  PimProductid,SKU,ProductName,ProductImage,IsActive,LocaleId --,PublishState
				--INTO #ProductDetail
				-- FROM 
				-- (
				-- SELECT c.pimproductId,PA.attributecode,e.AttributeValue,e.LocaleId--, ZPS.DisplayName  PublishState
				-- FROM
				-- znodePimProduct c 
				-- inner join ZnodePimAttributeValue d on (c.PimProductid = d.PimProductid)
				-- inner join ZnodePimAttributeValueLocale e on (d.PimAttributeValueId = e.PimAttributeValueId)
				-- inner join ZnodePimAttribute PA ON (PA.PimAttributeId = d.PimAttributeId)
				-- --INNER JOIN ZnodePublishState ZPS ON (ZPS.PublishStateId = c.PublishStateId)
				-- where  PA.Attributecode IN ('SKU','ProductName','ProductImage','IsActive')
				---- AND e.localeid = @LocaleId
				-- ) piv PIVOT(MAX(AttributeValue) FOR AttributeCode in ( SKU,ProductName,ProductImage,IsActive))AS PVT
				-----------------------------------========
				SELECT c.pimproductId,PA.attributecode,e.AttributeValue,e.LocaleId--, ZPS.DisplayName  PublishState
				 INTO #ProductAttributeDetailS
				 FROM
				 znodePimProduct c 
				 inner join ZnodePimAttributeValue d on (c.PimProductid = d.PimProductid)
				 inner join ZnodePimAttributeValueLocale e on (d.PimAttributeValueId = e.PimAttributeValueId)
				 inner join ZnodePimAttribute PA ON (PA.PimAttributeId = d.PimAttributeId)
				 --INNER JOIN ZnodePublishState ZPS ON (ZPS.PublishStateId = c.PublishStateId)
				 where  PA.Attributecode IN ('SKU','ProductName','ProductImage','IsActive')


				 CREATE TABLE #ProductDetail( PimProductid INT,SKU VARCHAR(1000),ProductName VARCHAR(1000),ProductImage VARCHAR(1000),IsActive VARCHAR(1000),LocaleId  INT)

				 INSERT INTO #ProductDetail(pimproductId, LocaleId)
				  select distinct PimProductId,LocaleId from #ProductAttributeDetailS

				 update b set b.SKU = a.AttributeValue
				 FROM #ProductAttributeDetailS A
				 INNER JOIN #ProductDetail B ON A.PimProductid = B.PimProductid
				 WHERE A.attributecode = 'SKU'

				 update b set b.ProductName = a.AttributeValue
				 FROM #ProductAttributeDetailS A
				 INNER JOIN #ProductDetail B ON A.PimProductid = B.PimProductid
				 WHERE A.attributecode = 'ProductName'
				 				 
				 update b set b.ProductImage = a.AttributeValue
				 FROM #ProductAttributeDetailS A
				 INNER JOIN #ProductDetail B ON A.PimProductid = B.PimProductid
				 WHERE A.attributecode = 'ProductImage'
				 
				 update b set b.IsActive = a.AttributeValue
				 FROM #ProductAttributeDetailS A
				 INNER JOIN #ProductDetail B ON A.PimProductid = B.PimProductid
				 WHERE A.attributecode = 'IsActive'
			     -----------------------------------========
				 
				 --select * into abbcc from #ProductDetail

				 --select * from #ProductAttributeDetailS
		SET @SQL = 
		'		
		select distinct PimCatalogId,PimProductId into #znodeCatalogProduct
	FROm ZnodePimCatalogCategory
		--DECLARE @TBL_MediaValue TABLE (PimAttributeValueId INT,PimProductId INT,MediaPath INT,PimAttributeId INt,LocaleId INT )
		create  TABLE #TBL_MediaValue(PimAttributeValueId INT,PimProductId INT,MediaPath INT,PimAttributeId INt,LocaleId INT )
		INSERT INTO #TBL_MediaValue
		SELECT ZPAV.PimAttributeValueId	,ZPAV.PimProductId	,ZPPAM.MediaId MediaPath,ZPAV.PimAttributeId , 	ZPPAM.LocaleId
					FROM ZnodePimAttributeValue ZPAV
					INNER JOIN ZnodePimProductAttributeMedia ZPPAM ON ( ZPPAM.PimAttributeValueId = ZPAV.PimAttributeValueId)
					INNER JOIN #ProductDetail PD ON (PD.PimProductId = ZPAV.PimProductId)
					LEFT JOIN ZnodeMedia ZM ON (Zm.Path = ZPPAM.MediaPath) 
					WHERE  ZPAV.PimAttributeId = (select PimAttributeId from ZnodePimAttribute pa where attributecode = ''ProductImage'') 
		;WITH Cte_ProductMedia
               AS (SELECT PD.PimProductId  , 
			   URL+ZMSM.ThumbnailFolderName+''/''+ zm.PATH  AS ProductImagePath 
			   FROM ZnodeMedia AS ZM
               INNER JOIN ZnodeMediaConfiguration ZMC  ON (ZM.MediaConfigurationId = ZMC.MediaConfigurationId)
			   INNER JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMC.MediaServerMasterId)
			   INNER JOIN #TBL_MediaValue PD ON (PD.MediaPath = ZM.MediaId)--CAST(ZM.MediaId AS VARCHAR(50)))
			   --INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = PD.PimATtributeId ) 
			   )
		, CTE_ProductDetail AS
		(
		SELECT DISTINCT  CD.pimproductId, SKU,ProductName,
		case WHEN  CD.IsActive = ''true'' THEN 1 ELSE 0 END IsActive, ISNULL(CSD.SEOCode,SKU) as SEOCode, CSD.SEOUrl, CSDL.SEOTitle, CSDL.SEODescription, CSDL.SEOKeywords,
		case when  ZPS.DisplayName IS NULL THEN '''' ELSE ZPS.DisplayName END IsPublish  , CPM.ProductImagePath, PC.CatalogName, CD.LocaleId, CSDL.CanonicalURL , CSDL.RobotTag
		FROM #ProductDetail CD
		INNER JOIN #znodeCatalogProduct PCC on CD.PimProductId = PCC.PimProductId
		INNER JOIN ZnodePimCatalog PC on PCC.PimCatalogId = PC.PimCatalogId
		LEFT JOIN ZnodeCMSSEOType CST ON CST.Name = ''Product''
		LEFT JOIN ZnodeCMSSEODetail CSD on LTRIM(RTRIM(CD.SKU)) = LTRIM(RTRIM(CSD.SEOCode)) and CSD.CMSSEOTypeId = CST.CMSSEOTypeId AND CSD.PortalId = '+CAST(@PortalId AS VARCHAR(10))+'
		LEFT JOIN ZnodeCMSSEODetailLocale CSDL ON  CSD.CMSSEODetailId = CSDL.CMSSEODetailId AND CSDL.LocaleId =  '+CAST(@LocaleId AS VARCHAR(10))+'
		LEFT JOIN ZnodePublishState ZPS ON (ZPS.PublishStateId = CSD.PublishStateId)
		LEFT JOIN Cte_ProductMedia CPM ON (CPM.PimProductId = CD.PimProductId)
		WHERE PCC.PimCatalogId = '+CAST(@PimCatalogId AS VARCHAR(10))+' AND CD.LocaleId IN ('+CAST(@LocaleId AS VARCHAR(50))+', '+CAST(@DefaultLocaleId AS VARCHAR(50))+')
	)
	, CTE_ProductLocale AS
	(
	SELECT pimproductId, SKU,ProductName,IsActive , SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords, IsPublish,ProductImagePath,CatalogName, LocaleId, CanonicalURL, RobotTag
	FROM CTE_ProductDetail CPD
	WHERE CPD.LocaleId ='+CAST(@LocaleId AS VARCHAR(50))+'	
	)
	, CTE_ProductBothLocale AS
	(
	SELECT pimproductId, SKU,ProductName,IsActive , SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords, IsPublish,ProductImagePath,CatalogName, CanonicalURL, RobotTag
	FROM CTE_ProductLocale PL
	UNION ALL 
	SELECT pimproductId, SKU,ProductName,IsActive , SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords, IsPublish,ProductImagePath,CatalogName, CanonicalURL, RobotTag
	FROM CTE_ProductDetail PD 
	WHERE LocaleId ='+CAST(@DefaultLocaleId AS VARCHAR(50))+' AND
	NOT EXISTS (select TOP 1 1 from CTE_ProductLocale PCL WHERE PCL.pimproductId = PD.pimproductId AND PCL.CatalogName = PD.CatalogName )
	)
	,CTE_ProductDetail_WhereClause AS
	(
		SELECT  pimproductId, SKU,ProductName,
		cast(IsActive as bit) IsActive , SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords, IsPublish,ProductImagePath,CatalogName, CanonicalURL, RobotTag,'+[dbo].[Fn_GetPagingRowId](@Order_BY, 'PimProductId')+',Count(*)Over() CountId
		FROM CTE_ProductBothLocale CD
		WHERE 1 = 1  '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'
	)
	SELECT  pimproductId, SKU,ProductName,IsActive, SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords,IsPublish,ProductImagePath,CatalogName, CanonicalURL, RobotTag, CountId
	INTO ##TempProductDetail
	FROM CTE_ProductDetail_WhereClause
	'+[dbo].[Fn_GetPaginationWhereClause](@PageNo, @Rows);
	--select @SQL for xml path,type
	EXEC (@SQL)

	SET @RowsCount = ISNULL((SELECT TOP 1 CountId FROM ##TempProductDetail ),0)

	SELECT  pimproductId,LTRIM(RTRIM(SKU)) AS SKU,ProductName,IsActive,LTRIM(RTRIM(SEOCode)) AS SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords,IsPublish,ProductImagePath, CanonicalURL, RobotTag
	FROM ##TempProductDetail
	--GROUP by pimproductId, SKU,ProductName,IsActive, SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords,IsPublish,ProductImagePath 
			

			IF OBJECT_ID('TEMPDB..#ProductDetail') IS NOT NULL
			DROP TABLE #ProductDetail

			IF OBJECT_ID('TEMPDB..##TempProductDetail') IS NOT NULL
			DROP TABLE ##TempProductDetail

			
			IF OBJECT_ID('TEMPDB..#znodeCatalogProduct') IS NOT NULL
		    DROP TABLE #znodeCatalogProduct

			IF OBJECT_ID('TEMPDB..#TBL_MediaValue') IS NOT NULL
		    DROP TABLE #TBL_MediaValue

         END TRY
         BEGIN CATCH
		    SELECT ERROR_message()
             DECLARE @Status BIT ;
		     SET @Status = 0;
		 --    DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			-- @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetCatalogCategoryProducts @WhereClause = '''+ISNULL(CAST(@WhereClause AS VARCHAR(MAX)),'''''')+''',@Rows='+ISNULL(CAST(@Rows AS
			--VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')+',
			--@LocaleId = '+ISNULL(CAST(@LocaleId AS VARCHAR(50)),'''')+',@PimCategoryId='+ISNULL(CAST(@PimCategoryId AS VARCHAR(50)),'''')+',@PimCatalogId='+ISNULL(CAST(@PimCatalogId AS VARCHAR(50)),'''')+',@IsAssociated='+ISNULL(CAST(@IsAssociated AS VARCHAR(50)),'''')+',
			--@ProfileCatalogId='+ISNULL(CAST(@ProfileCatalogId AS VARCHAR(50)),'''')+',@AttributeCode='''+ISNULL(CAST(@AttributeCode AS VARCHAR(50)),'''''')+''',@PimCategoryHierarchyId='+ISNULL(CAST(@PimCategoryHierarchyId AS VARCHAR(10)),'''');
              			 
   --          SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
   --          EXEC Znode_InsertProcedureErrorLog
			--	@ProcedureName = 'Znode_GetCatalogCategoryProducts',
			--	@ErrorInProcedure = 'Znode_GetCatalogCategoryProducts',
			--	@ErrorMessage = @ErrorMessage,
			--	@ErrorLine = @ErrorLine,
			--	@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO 


IF EXISTS (SELECT TOP 1 1 FROM SYS.PROCEDURES WHERE name = 'Znode_InsertProcedureErrorLog')
BEGIN 
DROP PROCEDURE Znode_InsertProcedureErrorLog
END
GO
  
CREATE  PROCEDURE [dbo].[Znode_InsertProcedureErrorLog]
( @ProcedureName    VARCHAR(1000),
  @ErrorInProcedure VARCHAR(1000),
  @ErrorMessage     NVARCHAR(MAX),
  @ErrorLine        VARCHAR(100),
  @ErrorCall        NVARCHAR(MAX))
AS 
   
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @ClientIPMachine NVARCHAR(100)= CONVERT(NVARCHAR(100), CONNECTIONPROPERTY('client_net_address'));

			 IF EXISTS (SELECT TOP 1 1 FROM ZnodeGlobalSetting ZGS WHERE FeatureName = 'IsDataBaseLoggingEnabled' AND FeatureValues = 'TRUE')
			 BEGIN
             INSERT INTO ZnodeProceduresErrorLog (ProcedureName,ErrorInProcedure,ErrorMessage,ErrorLine,ErrorCall,CreatedBy,CreatedDate)
                    SELECT @ProcedureName,@ErrorInProcedure,@ErrorMessage,@ErrorLine,@ErrorCall,@ClientIPMachine,@GetDate;
			 END
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE(),ERROR_PROCEDURE();
                    
         END CATCH;
     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.PROCEDURES WHERE name = 'Znode_GetProductDataForWebStore')
BEGIN 
DROP PROCEDURE Znode_GetProductDataForWebStore
END
GO
  
CREATE  PROCEDURE [dbo].[Znode_GetProductDataForWebStore]  
(   @SKU              VARCHAR(MAX) = '' ,  
    @PublishCatalogId int = 0 ,  
    @PublishProductId VARCHAR(MAX),  
    @PortalId         INT,  
    @LocaleId         INT)  
AS   
  /*    
    Summary: WebStore: SP for getting products data   
       Get average rating of products   
       Get Price / Inventory / SEO details .  
    Unit Testing  
 begin tran     
    EXEC [Znode_GetProductDataForWebStore] 'SKBCA1112,SKWI122,SKFVR123,FVZK0237,SKPMAR123,SKLS232',0,'96,92,98,103,94,97',@PortalId=2 ,@LocaleId=1  
    EXEC [Znode_GetProductDataForWebStore] 'SKPMAR123',3,'',@PortalId=1 ,@LocaleId=0  
 rollback tran  
   */  
     BEGIN  
         BEGIN TRAN A;  
         BEGIN TRY  
             SET NOCOUNT ON;  
  
             DECLARE @Tlb_SKU TABLE  
             (SKU        VARCHAR(100),  
              SequenceNo INT IDENTITY  
             );  
	If @SKU <> ''  
		INSERT INTO @Tlb_SKU(SKU) SELECT Item FROM Dbo.split(@SKU, ',');  
	Else if @PublishCatalogId > 0   
		INSERT INTO @Tlb_SKU(SKU)   
		select Distinct ZPPD.SKU  from ZnodePublishCategoryProduct ZPCP INNER JOIN ZnodePublishProductDetail ZPPD ON ZPCP.PublishProductId = ZPPD.PublishProductId   
		where  ZPCP.PublishCatalogId = @PublishCatalogId  
  
             DECLARE @Tlb_PublishProduct TABLE  
             (PublishProductId INT,  
              SequenceNo       INT IDENTITY  
             );  
  
    If @PublishProductId <> ''  
		 INSERT INTO @Tlb_PublishProduct(PublishProductId)  
				 SELECT Item FROM Dbo.split(@PublishProductId, ',');   
    Else if @PublishCatalogId > 0   
		INSERT INTO @Tlb_PublishProduct(PublishProductId)  
		select Distinct ZPCP.PublishProductId  from ZnodePublishCategoryProduct ZPCP where  ZPCP.PublishCatalogId = @PublishCatalogId  
    Else if @PublishCatalogId = 0 AND  @PublishProductId = ''   AND    @SKU <> ''
		INSERT INTO @Tlb_PublishProduct(PublishProductId)  
		SELECT Distinct ZPCP.PublishProductId  from ZnodePublishProductDetail ZPCP INNER JOIN @Tlb_SKU TSK ON ZPCP.SKU = TSK.SKU
		  
             --DECLARE @Tlb_ProductData TABLE  
             --(PublishProductId INT,  
             -- SKU              NVARCHAR(100),  
             -- SEOTitle         NVARCHAR(200),  
             -- SEODescription   NVARCHAR(MAX),  
             -- SEOKeywords      NVARCHAR(MAX),  
             -- SEOUrl           NVARCHAR(MAX),  
             -- Rating           Numeric(28,6),  
             -- TotalReviews     INT  
             --);  
  
    CREATE TABLE #Tlb_ProductData   
             (PublishProductId INT,  
              SKU              NVARCHAR(100),  
              SEOTitle         NVARCHAR(200),  
              SEODescription   NVARCHAR(MAX),  
              SEOKeywords      NVARCHAR(MAX),  
              SEOUrl           NVARCHAR(MAX),  
              Rating           Numeric(28,6),  
              TotalReviews     INT,
			  IsPublish        bit,
			  CanonicalURL VARCHAR(200),   
			  RobotTag VARCHAR(50)  
             );  
  
             INSERT INTO #Tlb_ProductData (PublishProductId,SKU)  
             SELECT PP.PublishProductId,SK.SKU FROM @Tlb_PublishProduct AS PP INNER JOIN @Tlb_SKU AS SK ON PP.SequenceNo = SK.SequenceNo;  
  
             DECLARE @Tlb_CustomerAverageRatings TABLE  
             (PublishProductId INT,  
              Rating           NUMERIC(28,6),  
              TotalReviews     INT  
             );   
             -- Calculate Average rating   
             INSERT INTO @Tlb_CustomerAverageRatings(PublishProductId,Rating,TotalReviews)  
             SELECT CCR.PublishProductId,SUM(CAST(CCR.Rating AS NUMERIC(28,6)) )/ COUNT(CCR.PublishProductId),COUNT(CCR.PublishProductId)   
    FROM ZnodeCMSCustomerReview AS CCR  
             INNER JOIN #Tlb_ProductData AS PD ON CCR.PublishProductId = PD.PublishProductId AND CCR.Status = 'A'   
    AND  (CCR.PortalId  = @PortalId OR @PortalId = 0 )  
    GROUP BY CCR.PublishProductId    ;  
  
             UPDATE PD SET PD.Rating = CAR.Rating,PD.TotalReviews = CAR.TotalReviews   
    FROM @Tlb_CustomerAverageRatings CAR  
             INNER JOIN #Tlb_ProductData PD ON CAR.PublishProductId = PD.PublishProductId;  
  
    UPDATE PD SET PD.SEOTitle = ZCSDL.SEOTitle,PD.SEODescription = ZCSDL.SEODescription,PD.SEOKeywords = ZCSDL.SEOKeywords,PD.SEOUrl = ZCSO.SEOUrl, PD.IsPublish = ZCSO.IsPublish,
	              PD.CanonicalURL = ZCSDL.CanonicalURL, PD.RobotTag = ZCSDL.RobotTag
    FROM #Tlb_ProductData PD  
             INNER JOIN ZnodeCMSSEODetail ZCSO ON PD.SKU = ZCSO.SEOCode  
             LEFT JOIN ZnodeCMSSEODetailLocale ZCSDL ON(ZCSDL.CMSSEODetailId = ZCSO.CMSSEODetailId AND ZCSDL.LocaleId = @LocaleId)  
             INNER JOIN ZnodeCMSSEOType ZCOT ON ZCOT.CMSSEOTypeId = ZCSO.CMSSEOTypeId AND ZCOT.Name = 'Product'  
    WHERE ZCSO.PortalId = @PortalId  
  
    UPDATE PD SET PD.SEOTitle = ZCPS.ProductTitle,PD.SEODescription = ZCPS.ProductDescription,PD.SEOKeywords = ZCPS.ProductKeyword 
	FROM #Tlb_ProductData PD  
    INNER JOIN ZnodeCMSPortalSEOSetting ZCPS ON ZCPS.PortalId = @PortalId 
	WHERE PD.SEOTitle IS NULL AND PD.SEODescription IS NULL AND PD.SEOKeywords IS NULL AND PD.SEOUrl IS NULL  
     --AND ZCSO.PortalId = @PortalId  

    SELECT ZPCP.PublishCatalogId , PD.PublishProductId,PD.SKU,PD.SEOTitle,PD.SEODescription,PD.SEOKeywords,PD.SEOUrl,PD.Rating,PD.TotalReviews, 
		   CASE WHEN ISNULL(PD.IsPublish,0) = 0  THEN 'Draft' ELSE 'Published' END PublishStatus, PD.CanonicalURL, PD.RobotTag    
    FROM #Tlb_ProductData PD LEFT Outer join ZnodePublishCategoryProduct ZPCP  ON PD.PublishProductId = ZPCP.PublishProductId ;
	               
    COMMIT TRAN A;  
     
         END TRY  
         BEGIN CATCH  
              DECLARE @Status BIT ;  
       SET @Status = 0;  
       DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetProductDataForWebStore @SKU = '+@SKU+',@PublishProductId='+@PublishProductId+',@PortalId='+CAST(@PortalId AS VARCHAR(50))+',@LocaleId='+CAST(@LocaleId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));  
                    
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                      
      
             EXEC Znode_InsertProcedureErrorLog  
    @ProcedureName = 'Znode_GetProductDataForWebStore',  
    @ErrorInProcedure = @Error_procedure,  
    @ErrorMessage = @ErrorMessage,  
    @ErrorLine = @ErrorLine,  
    @ErrorCall = @ErrorCall;  
         END CATCH;  
     END;
GO 
IF EXISTS (SELECT TOP 1 1 FROM SYS.PROCEDURES WHERE name = 'Znode_GetProductFeedList')
BEGIN 
DROP PROCEDURE Znode_GetProductFeedList
END
GO
  
CREATE PROCEDURE [dbo].[Znode_GetProductFeedList]  
(   @PortalId   VARCHAR(2000) = NULL,  
    @SKU     SelectColumnList READONLY,  
    @LocaleId   INT,  
    @FeedType   NVARCHAR(MAX) = NULL)  
AS  
/*  
Summary: This Procedure is used to get effective keyword feeding of Product list  
 SELECT * FROM ZnodePublishProductDetail  
 SELECT * FROM ZnodePublishProduct WHERE PublishCatalogId = 3  
 SELECT * FROM ZnodePortalCatalog   
 Unit Testing:  
 EXEC Znode_GetProductFeedList @PortalId='0',@ProductIds = '116,117,118'  
 ,@LocaleId=1,@FeedType='Bing'   
  
*/  
     BEGIN  
  BEGIN TRY  
         SET NOCOUNT ON;        
           
   IF OBJECT_ID('tempdb..#TBL_DomainName') is not null
			drop table #TBL_DomainName

		IF OBJECT_ID('tempdb..#TBL_SEODetails') is not null
			drop table #TBL_SEODetails

		IF OBJECT_ID('tempdb..#TBL_CompleteDetailes') is not null
			drop table #TBL_CompleteDetailes

		IF OBJECT_ID('tempdb..#TBL_CompleteDetailes') is not null
			drop table #TBL_CompleteDetailes

		IF OBJECT_ID('tempdb..#TBL_PortalIds') is not null
			drop table #TBL_PortalIds

		 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
         CREATE TABLE #TBL_DomainName 
         (PortalId   INT,
          DomainName NVARCHAR(300),
          RowId      INT
         );  	
         
         CREATE TABLE #TBL_SEODetails   
         (loc                   NVARCHAR(MAX),  
          lastmod               DATETIME,  
          [g:condition]         VARCHAR(100),  
          [description]         NVARCHAR(MAX),  
          [g:id]                INT,  
          link                  VARCHAR(100),  
          [g:identifier_exists] VARCHAR(200),  
          DomainName            NVARCHAR(300),  
          PortalId              INT , 
          SEOCode             NVARCHAR(4000), 
		  CanonicalURL        VARCHAR(200), 
		  RobotTag            VARCHAR(50)
         );  
         CREATE TABLE #TBL_CompleteDetailes   
         (loc                   NVARCHAR(MAX),  
          lastmod               DATETIME,  
          [g:condition]         VARCHAR(100),  
          [description]         NVARCHAR(MAX),  
          [g:id]                INT,  
          link                  VARCHAR(100),  
          [g:identifier_exists] VARCHAR(200),  
          DomainName            NVARCHAR(300),  
          PortalId              INT,  
          [g:availability]      NVARCHAR(1000),  
          SKU                   NVARCHAR(MAX),  
		  SEOCode               NVARCHAR(4000),
		  CanonicalURL        VARCHAR(200), 
		  RobotTag            VARCHAR(50) 
         );  
         DECLARE @DefaultLocaleId INT=dbo.Fn_GetDefaultLocaleId()  ;
         CREATE TABLE #TBL_PortalIds (PortalId INT);  
   
         INSERT INTO #TBL_PortalIds  
         SELECT Zp.PortalId   
   FROM Znodeportal AS ZP   
   INNER JOIN ZnodePortalCatalog AS ZPC ON(ZPC.PortalId = Zp.PortalId)  
         INNER JOIN ZnodePublishCatalog AS ZPPC ON(ZPPC.PublishCatalogId = ZPC.PublishCatalogId)   
   INNER JOIN ZNodePublishProduct AS ZPP ON(ZPP.PublishCatalogId = ZPPC.PublishCatalogId)  
   INNER JOIN ZnodePublishProductDetail AS PPD ON (PPD.PublishProductId = ZPP.PublishProductId)  
         WHERE EXISTS(SELECT TOP 1 1 FROM @SKU AS Sp WHERE (sp.StringColumn  = PPD.SKU)  OR StringColumn = '0')  
   AND EXISTS(SELECT TOP 1 1 FROM DBO.Split(@PortalId, ',') AS Sp  
      WHERE(CAST(sp.Item AS INT)) = Zp.PortalId  OR @PortalId = '0')  
   AND EXISTS (SELECT TOP 1 1 FROM ZnodeDomain ZD WHERE ZP.PortalId = ZD.PortalId  
   AND IsActive = 1 AND ApplicationType = 'Webstore')  
   GROUP BY Zp.PortalId;   
  
         INSERT INTO #TBL_DomainName   
   SELECT  PortalId,DomainName,ROW_NUMBER() OVER(PARTITION BY PortalId ORDER BY DomainName)   
   FROM ZnodeDomain AS ZD   
         WHERE EXISTS(SELECT TOP 1 1 FROM #TBL_PortalIds AS TBP WHERE TBP.PortalId = ZD.PortalId)  
   AND IsActive = 1 AND ApplicationType = 'Webstore'  
    
  
  
         ;WITH Cte_SeoDetailsWithLocale  
         AS (  
   SELECT DISTINCT ZCSD.CMSSEODetailId,ZCSD.SEOURL AS loc,ZCSD.ModifiedDate AS lastmod,'new' AS [g:condition],ZCSDL.SEODescription AS [description],ZPCC.PublishProductId AS [g:id],  
             '' AS link,'false' AS [g:identifier_exists],TBDN.DomainName,ZPC.PortalId,ISNULL(ZCSDL.LocaleId, @DefaultLocaleId) AS LocaleId , ZCSD.SEOCode , ZCSDL.CanonicalURL, ZCSDL.RobotTag 
    FROM ZNodePublishProduct AS ZPCC   
    INNER JOIN ZnodePortalCatalog AS ZPC ON(ZPC.PublishCatalogId = ZPCC.PublishCatalogId)  
    LEFT JOIN ZnodePublishProductDetail AS PPD ON (PPD.PublishProductId = ZPCC.PublishProductId)  
             -- INNER JOIN @TBL_PortalIds TBLP ON (TBLP.PortalId = ZPC.PortalId)  
    LEFT JOIN ZnodeCMSSEODetail AS ZCSD ON(PPD.SKU = ZCSD.SEOCode and ZCSD.PortalId = ZPC.PortalId)  
             LEFT JOIN ZnodeCMSSEOType AS ZCST ON(ZCST.CMSSEOTypeId = ZCSD.CMSSEOTypeId AND ZCST.Name = 'Product')  
             LEFT JOIN ZnodeCMSSEODetailLocale AS ZCSDL ON(ZCSDL.CMSSEODetailId = ZCSD.CMSSEODetailId AND ZCSDL.LocaleId IN(@LocaleId, @DefaultLocaleId))  
             LEFT JOIN #TBL_DomainName AS TBDN ON(TBDN.RowId = 1 AND TBDN.PortalId = zpc.PortalId )   
    WHERE EXISTS(SELECT TOP 1 1 FROM @SKU AS Sp  
      WHERE (sp.StringColumn  = PPD.SKU) OR StringColumn = '0')  
   AND EXISTS(SELECT TOP 1 1 FROM #TBL_PortalIds AS TBP WHERE TBP.PortalId = ZPC.PortalId )  
    )  
  
         ,Cte_SeoDetailsWithFirstLocale  
         AS (  
    SELECT CMSSEODetailId,loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,PortalId,LocaleId,SEOCode, CanonicalURL, RobotTag  
             FROM Cte_SeoDetailsWithLocale   
    WHERE LocaleId = @LocaleId  
    )           
  ,Cte_SeoDetailsWithDefaultLocale  
         AS (  
    SELECT CMSSEODetailId,loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,PortalId,LocaleId,SEOCode , CanonicalURL, RobotTag 
             FROM Cte_SeoDetailsWithFirstLocale  
             UNION ALL  
             SELECT CMSSEODetailId,loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,PortalId,LocaleId,SEOCode, CanonicalURL, RobotTag  
             FROM Cte_SeoDetailsWithLocale AS CTSDWL  
             WHERE LocaleId = @DefaultLocaleId   
    AND NOT EXISTS(SELECT TOP 1 1 FROM Cte_SeoDetailsWithFirstLocale AS CTSDWDL WHERE CTSDWDL.CMSSEODetailId = CTSDWL.CMSSEODetailId))  
                
   INSERT INTO #TBL_SEODetails  
         SELECT DISTINCT loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,PortalId ,SEOCode, CanonicalURL, RobotTag  
   FROM Cte_SeoDetailsWithDefaultLocale;  
  
    
  
         INSERT INTO #TBL_CompleteDetailes  
         SELECT TBSD.loc,TBSD.lastmod,TBSD.[g:condition],TBSD.[description],TBSD.[g:id],TBSD.link,TBSD.[g:identifier_exists],TBSD.DomainName,TBSD.PortalId,  
         CASE WHEN SUM(ZI.Quantity) > 0 THEN 'In Stock' ELSE CASE WHEN @FeedType = 'Google' THEN 'Out Of Stock' ELSE 'Not In Stock' END  
         END AS [g:availability],ZPPD.SKU ,TBSD.SEOCode, TBSD.CanonicalURL, TBSD.RobotTag  
   FROM ZnodePublishProduct AS ZPP   
   LEFT JOIN #TBL_SEODetails AS TBSD ON(ZPP.PublishProductId = TBSD.[g:id] )  
         LEFT JOIN ZnodePublishProductDetail AS ZPPD ON(ZPPD.PublishProductId = ZPP.PublishProductId AND ZPPD.LocaleId = @LocaleId )  
         LEFT JOIN ZnodePortalWarehouse AS ZPW ON(ZPW.PortalId = TBSD.PortalId)  
         LEFT JOIN ZnodePortalAlternateWarehouse AS ZAPW ON(ZAPW.PortalWarehouseId = ZPW.PortalWarehouseId)  
         LEFT JOIN ZnodeInventory AS ZI ON(ZI.SKU = ZPPD.SKU AND (ZI.WarehouseId = ZPW.WarehouseId OR ZI.WarehouseId = ZAPW.WarehouseId))  
         WHERE EXISTS(SELECT TOP 1 1 FROM @SKU AS Sp WHERE (sp.StringColumn  = ZPPD.SKU) OR StringColumn = '0')  
   AND EXISTS(SELECT TOP 1 1 FROM #TBL_PortalIds AS TBP WHERE TBP.PortalId = TBSD.PortalId )  
         GROUP BY loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,TBSD.PortalId,ZPPD.SKU,ZPPD.LocaleId, TBSD.SEOCode;    
           
		    DECLARE @MediaConfiguration NVARCHAR(2000)=((SELECT TOP 1 ISNULL(CASE WHEN CDNURL = '' THEN NULL ELSE CDNURL END,URL) FROM ZnodeMediaConfiguration WHERE IsActive = 1));    
  
         ;WITH Cte_PortalList  
         AS (  
       SELECT zp.PortalId,dbo.Fn_GetDefaultPriceRoundOff(ZPS.RetailPrice)RetailPrice,Zps.SKU,TBCD.SEOCode,ROW_NUMBER() OVER(PARTITION BY Zps.SKU,zp.PortalId ORDER BY ZPS.RetailPrice) AS RowId  
             FROM ZnodePriceList AS ZPL   
    LEFT JOIN ZnodePriceListPortal AS ZPLP ON ZPL.PriceListId = ZPLP.PriceListId  
             LEFT JOIN dbo.ZnodeCulture AS zc ON ZPL.CultureId = zc.CultureId
    LEFT JOIN dbo.ZnodePortal AS zp ON ZPLP.PortalId = zp.PortalId  
             LEFT JOIN ZnodePrice AS Zps ON(Zps.PriceListId = ZPL.PriceListId)   
    LEFT JOIN #TBL_CompleteDetailes AS TBCD ON(TBCD.PortalId = Zp.PortalId AND TBCD.SKU = Zps.Sku)   
    WHERE CAST(@GetDate AS DATE) BETWEEN ZPL.ActivationDate AND ZPL.ExpirationDate   
    AND EXISTS( SELECT TOP 1 1 FROM #TBL_PortalIds AS TBP WHERE TBP.PortalId = ZPLP.PortalId)   
    GROUP BY zp.PortalId,ZPS.RetailPrice,Zps.SKU ,TBCD.SEOCode  
    )  
  
   SELECT loc,lastmod,[g:condition],[description],[g:id],link,[g:availability],[g:identifier_exists],DomainName,TBCD.PortalId  
		 ,CTPL.RetailPrice AS [g:price],@MediaConfiguration AS MediaConfiguration, TBCD.SEOCode, TBCD.CanonicalURL, TBCD.RobotTag 
   FROM #TBL_CompleteDetailes AS TBCD   
   LEFT JOIN Cte_PortalList AS CTPL ON(CTPL.PortalId = TBCD.PortalId AND CTPL.SKU = TBCD.SKU AND CTPL.RowID = 1)  
   WHERE  EXISTS(SELECT TOP 1 1 FROM #TBL_PortalIds AS TBP WHERE TBP.PortalId = TBCD.PortalId )  
  

    IF OBJECT_ID('tempdb..#TBL_DomainName') is not null
			drop table #TBL_DomainName

		IF OBJECT_ID('tempdb..#TBL_SEODetails') is not null
			drop table #TBL_SEODetails

		IF OBJECT_ID('tempdb..#TBL_CompleteDetailes') is not null
			drop table #TBL_CompleteDetailes

		IF OBJECT_ID('tempdb..#TBL_CompleteDetailes') is not null
			drop table #TBL_CompleteDetailes

		IF OBJECT_ID('tempdb..#TBL_PortalIds') is not null
			drop table #TBL_PortalIds

 END TRY  
 BEGIN CATCH  
  DECLARE @Status BIT ;  
  SET @Status = 0;  
  DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetProductFeedList @PortalId = '+@PortalId+',@LocaleId='+CAST(@LocaleId AS VARCHAR(50))+',@FeedType='+CAST(@FeedType AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));  
                    
        SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                      
      
        EXEC Znode_InsertProcedureErrorLog  
   @ProcedureName = 'Znode_GetProductFeedList',  
   @ErrorInProcedure = @Error_procedure,  
   @ErrorMessage = @ErrorMessage,  
   @ErrorLine = @ErrorLine,  
   @ErrorCall = @ErrorCall;  
 END CATCH  
   
  END;
GO 
IF EXISTS (SELECT TOP 1 1 FROM SYS.PROCEDURES WHERE name = 'Znode_InsertUpdateContentPage')
BEGIN 
DROP PROCEDURE Znode_InsertUpdateContentPage
END
GO
  
CREATE PROCEDURE [dbo].[Znode_InsertUpdateContentPage]
(   @ContentPageXML XML,
    @Status         BIT OUT,
    @UserId         INT)
AS 
   /* 
    Summary : To Insert content page details with their referance table 
    If CMSContentPagesId =0 then insert else update 
    Unit Testing 
    <ContentPageModel>
      <CMSContentPagesId>0</CMSContentPagesId>
      <PortalId>2</PortalId>
      <CMSContentPageGroupId>2</CMSContentPageGroupId>
      <ProfileIds>5,4,1</ProfileIds>
      <CMSTemplateId>1</CMSTemplateId>
      <LocaleId>1</LocaleId>
      <CMSContentPagesLocaleId>0</CMSContentPagesLocaleId>
      <PageTitle>dsfdsfsd</PageTitle>
      <PageName>fsdfsdfd</PageName>
      <SEOTitle>fdsfds</SEOTitle>
      <SEODescription>fdsfdsf</SEODescription>
      <SEOKeywords>fdsfsd</SEOKeywords>
      <SEOUrl>dsfdsf</SEOUrl>
      <MetaInformation>dsfsdfsd</MetaInformation>
      <IsRedirect>false</IsRedirect>
      <IsConfigurable>false</IsConfigurable>
      <ActivationDate>2016-08-04</ActivationDate>
      <ExpirationDate>2016-08-12</ExpirationDate>
    </ContentPageModel>
  
	*/
     BEGIN
         BEGIN TRAN A;
         BEGIN TRY
             DECLARE @Profiledata TABLE(ProfileId INT);
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate(),@PublishStateId INT = dbo.Fn_GetPublishStateIdForDraftState() ;
             DECLARE @DefaultlocaleId INT= dbo.Fn_GetDefaultLocaleId();
             DECLARE @NewCMSContentPagesId INT;
             DECLARE @CmsSeoDetailId INT;
             DECLARE @InsertContentPage TABLE
             (CMSContentPagesId       INT,
              PortalId                INT,
              CMSContentPageGroupId   INT,
              ProfileIds              VARCHAR(MAX),
              CMSTemplateId           INT,
              LocaleId                INT,
              CMSContentPagesLocaleId INT,
              PageTitle               NVARCHAR(200),
              PageName                NVARCHAR(200),
              SEOTitle                NVARCHAR(MAX),
              SEODescription          NVARCHAR(MAX),
              SEOKeywords             NVARCHAR(MAX),
              SEOUrl                  NVARCHAR(MAX),
              MetaInformation         NVARCHAR(MAX),
              IsRedirect              BIT,
              IsActive                BIT,
              ActivationDate          Datetime NULL ,
              ExpirationDate          Datetime NULL,
			  IsPublished			  BIT,
			  CanonicalURL            VARCHAR(200),
			  RobotTag                VARCHAR(50)
             );
             INSERT INTO @InsertContentPage(CMSContentPagesId, PortalId, CMSContentPageGroupId, ProfileIds, CMSTemplateId ,LocaleId ,CMSContentPagesLocaleId ,PageTitle ,PageName ,SEOTitle ,
											SEODescription ,SEOKeywords ,SEOUrl ,MetaInformation ,IsRedirect ,IsActive ,ActivationDate ,ExpirationDate ,IsPublished ,CanonicalURL ,RobotTag)
                    SELECT Tbl.Col.value('CMSContentPagesId[1]', 'INT'),
                           Tbl.Col.value('PortalId[1]', ' INT '),
                           Tbl.Col.value('CMSContentPageGroupId[1]', 'INT'),
                           Tbl.Col.value('ProfileIds[1]', 'VARCHAR(max)'),
                           Tbl.Col.value('CMSTemplateId[1]', 'INT'),
                           Tbl.Col.value('LocaleId[1]', 'INT'),
                           Tbl.Col.value('CMSContentPagesLocaleId[1]', 'INT '),
                           Tbl.Col.value('PageTitle[1]', 'NVARCHAR(200)'),
                           Tbl.Col.value('PageName[1]', 'NVARCHAR(300)'),
                           Tbl.Col.value('SEOTitle[1]', 'NVARCHAR(max)'),
                           Tbl.Col.value('SEODescription[1]', 'NVARCHAR(MAX)'),
                           Tbl.Col.value('SEOKeywords[1]', 'NVARCHAR(MAX)'),
                           Tbl.Col.value('SEOUrl[1]', 'VARCHAR(300)'),
                           Tbl.Col.value('MetaInformation[1]', 'NVARCHAR(MAX)'),
                           Tbl.Col.value('IsRedirect[1]', 'BIT'),
                           Tbl.Col.value('IsActive[1]', 'BIT'),
					  nullif(Tbl.Col.value('ActivationDate[1]', 'Datetime'), '1900-01-01 00:00:00.000'),
					  nullif(Tbl.Col.value('ExpirationDate[1]', 'Datetime'), '1900-01-01 00:00:00.000'),
					       Tbl.Col.value('IsPublished[1]', 'BIT'),
						   Tbl.Col.value('CanonicalURL[1]', 'VARCHAR(200)'),
						   Tbl.Col.value('RobotTag[1]', 'VARCHAR(50)')
                    FROM @ContentPageXML.nodes('/ContentPageModel') AS Tbl(Col);
             SET @NewCMSContentPagesId = 0;
             UPDATE @InsertContentPage
               SET
                   ActivationDate = NULL
             WHERE ISNULL(RTRIM(LTRIM(ActivationDate)), '') = '';
             UPDATE @InsertContentPage
               SET
                   ExpirationDate = NULL
             WHERE ISNULL(LTRIM(RTRIM(ExpirationDate)), '') = '';


             IF EXISTS
             (
                 SELECT TOP 1 1
                 FROM @InsertContentPage
                 WHERE CMSContentPagesId = 0
             )
                 BEGIN
				 
                     INSERT INTO ZnodeCMSContentPages
                     (PortalId,
                      CMSTemplateId,
                      PageName,
                      ActivationDate,
                      ExpirationDate,
                      IsActive,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate,PublishStateId 
                     )
                            SELECT PortalId,
                                   CMSTemplateId,
                                   PageName,
                                   ActivationDate,
                                   ExpirationDate,
                                   IsActive,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate,@PublishStateId
                            FROM @InsertContentPage;
                     SET @NewCMSContentPagesId = @@Identity;
                     INSERT INTO ZnodeCMSContentPagesLocale
                     (CMSContentPagesId,
                      LocaleId,
                      PageTitle,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate
                     )
                            SELECT @NewCMSContentPagesId,
                                   LocaleId,
                                   PageTitle,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate
                            FROM @InsertContentPage;


				IF EXISTS (SELECT TOP 1 1 FROM @InsertContentPage WHERE --(SEOTitle IS NOT NULL OR SEOTitle <> '') AND 
				(SEOUrl IS NOT NULL OR SEOUrl <> '' ) )
					BEGIN 
					
                     INSERT INTO ZNODECMSSEODETAIL
                     (CMSSEOTYPEID,
                      SEOID,
                      ISREDIRECT,
                      MetaInformation,
                      PortalId,
                      SEOUrl,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate,
					  IsPublish,
					  SEOCode,PublishStateId
                     )
                            SELECT b.CMSSEOTypeId,
                                   NULL,
                                   IsRedirect,
                                   MetaInformation,
                                   PortalId,
                                   SEOUrl,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate,
								   a.IsPublished,
								   PageName, 
								   @PublishStateId
								   --CASE WHEN SEOUrl = '' OR SEOurl IS NULL THEN '' ELSE @PublishStateId END PublishStateId
                            FROM @InsertContentPage AS a
                                 INNER JOIN ZnodeCMSSEOType AS b ON(name = 'Content Page');
                     SET @CmsSeoDetailId = SCOPE_IDENTITY();
                     INSERT INTO ZnodeCMSSEODetailLocale
                     (CMSSEODetailId,
                      LocaleId,
                      SEOTitle,
                      SEODescription,
                      SEOKeywords,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate,
					  CanonicalURL,
					  RobotTag
                     )
                            SELECT @CmsSeoDetailId,
                                   @DefaultlocaleId,
                                   SEOTitle,
                                   SEODescription,
                                   SEOKeywords,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate,
								   CanonicalURL,
								   RobotTag
                            FROM @InsertContentPage AS a
                                 INNER JOIN ZnodeCMSSEOType AS b ON(name = 'Content Page')
					END
					
                     INSERT INTO @Profiledata
                            SELECT item
                            FROM dbo.Split
                            (
                            (
                                SELECT TOP 1 ProfileIds
                                FROM @InsertContentPage
                            ), ','
                            );
                     INSERT INTO ZnodeCMSContentPagesProfile
                     (CMSContentPagesId,
                      ProfileId,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate
                     )
                            SELECT @NewCMSContentPagesId,
                                   s.ProfileId,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate
                            FROM @InsertContentPage AS a
                                 CROSS APPLY @Profiledata AS s;
								 
                     INSERT INTO ZnodeCMSContentPageGroupMapping
                     (CMSContentPageGroupId,
                      CMSContentPagesId,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate
                     )
                            SELECT CMSContentPageGroupId,
                                   @NewCMSContentPagesId,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate
                            FROM @InsertContentPage AS a;

                     SELECT ZCP.CMSContentPagesId,
                            ZCP.PortalId,
                            ZCP.CMSTemplateId,
                            ZCCPL.PageTitle,
                            ZCP.PageName,
                            ZCP.ActivationDate,
                            ZCP.ExpirationDate,
                            ZSDl.SEOTitle,
                            ZSDl.SEODescription,
                            ZSDl.SEOKeywords,
                            ZSD.SEOUrl,
                            ZSD.IsRedirect,
                            ZSD.MetaInformation,
                            ICP.ProfileIds,
							ZSDL.CanonicalURL, 
							ZSDL.RobotTag
                     FROM ZnodeCMSContentPages AS ZCP
                          LEFT JOIN ZnodeCMSSEODetail AS ZSD ON ZCP.PageName = ISNULL(ZSD.SEOCode,'')
                          LEFT JOIN ZnodeCMSSEODetailLocale AS ZSDl ON(ZSDL.CMSSEODetailId = ZSD.CMSSEODetailId
                                                                        AND ZSDl.LocaleId = @DefaultlocaleId)
                          LEFT JOIN ZnodeCMSSEOType AS ZCST ON ZCST.CMSSEOTypeId = ZSD.CMSSEOTypeId
                                                                AND ZCST.name = 'Content Page'
                          INNER JOIN @InsertContentPage AS ICP ON ZCP.PageName = ICP.PageName
                          INNER JOIN ZnodeCMSContentPagesLocale AS ZCCPL ON ZCCPL.CMSContentPagesId = ZCP.CMSContentPagesId
                                                                            AND ZCCPL.LocaleId = @DefaultlocaleId
                     WHERE ZCP.CMSContentPagesId = @NewCMSContentPagesId;
			

                 END;
             ELSE
                 BEGIN
                     UPDATE ZCCP
                       SET
                           ZCCP.PortalId = ICP.PortalId,
                           ZCCP.CMSTemplateId = ICP.CMSTemplateId,
                           ZCCP.PageName = ICP.PageName,
                           ZCCP.ActivationDate = ICP.ActivationDate,
                           ZCCP.ExpirationDate = ICP.ExpirationDate,
                           ZCCP.IsActive = ICP.IsActive,
                           ZCCP.ModifiedBy = @UserId,
                           ZCCP.ModifiedDate = @GetDate,
						   ZCCP.PublishStateId = @PublishStateId
                     FROM ZnodeCMSContentPages ZCCP
                          INNER JOIN @InsertContentPage ICP ON ZCCP.CMSContentPagesId = ICP.CMSContentPagesId;
                     
					 UPDATE ZCCPL
                     SET ZCCPL.PageTitle = ICP.PageTitle
                     FROM ZnodeCMSContentPagesLocale ZCCPL
                     INNER JOIN @InsertContentPage ICP ON ZCCPL.CMSContentPagesId = ICP.CMSContentPagesId
                                                               AND ZCCPL.LocaleId = ICP.LocaleId;
                     INSERT INTO ZnodeCMSContentPagesLocale
                     (CMSContentPagesId,
                      LocaleId,
                      PageTitle,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate
                     )
                            SELECT CMSContentPagesId,
                                   LocaleId,
                                   PageTitle,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate
                            FROM @InsertContentPage TBICP
                            WHERE NOT EXISTS
                            (
                                SELECT TOP 1 1
                                FROM ZnodeCMSContentPagesLocale ZCCPL
                                WHERE ZCCPL.CMSContentPagesId = TBICP.CMSContentPagesId
                                      AND ZCCPL.LocaleId = TBICP.LocaleId
                            );


                     UPDATE ZCSD
                       SET
                           ZCSD.IsRedirect = ICP.IsRedirect,
                           ZCSD.MetaInformation = ICP.MetaInformation,
                           ZCSD.SEOUrl = ICP.SEOUrl,
                           ZCSD.ModifiedBy = @UserId,
                           ZCSD.ModifiedDate = @GetDate,
						   ZCSD.IsPublish = ICP.IsPublished ,--case when ICP.SEOUrl IS NULL OR ICP.SEOUrl = ''  then 0 else 1 end,
						   ZCSD.SEOCode=ICP.PageName,
						   ZCSD.PublishStateId = @PublishStateId 
                     FROM ZnodeCMSSEODetail ZCSD
                          INNER JOIN ZnodeCMSContentPages ZCCP ON ISNULL(ZCSD.SEOCode,'') = ZCCP.PageName
                          INNER JOIN ZnodeCMSSEOType ZCST ON ZCSD.CMSSEOTypeId = ZCST.CMSSEOTypeId
                                                             AND ZCST.Name = 'Content Page'
                          INNER JOIN @InsertContentPage ICP ON ZCCP.CMSContentPagesId = ICP.CMSContentPagesId;

						     

                   
				     UPDATE ZCSDL
                       SET
                           ZCSDl.SEOTitle = ICP.SEOTitle,
                           ZCSDl.SEODescription = ICP.SEODescription,
                           ZCSDl.SEOKeywords = ICP.SEOKeywords,
                           ZCSDl.ModifiedBy = @UserId,
                           ZCSDl.ModifiedDate = @GetDate,
						   ZCSDl.CanonicalURL = ICP.CanonicalURL,
						   ZCSDl.RobotTag = ICP.RobotTag
                     FROM ZnodeCMSSEODetailLocale ZCSDL
                          INNER JOIN ZnodeCMSSEODetail ZCSD ON(ZCSD.CMSSEODetailId = ZCSDL.CMSSEODetailId)
                          INNER JOIN ZnodeCMSContentPages ZCCP ON ISNULL(ZCSD.SEOCode,'') = ZCCP.PageName
                          INNER JOIN ZnodeCMSSEOType ZCST ON ZCSD.CMSSEOTypeId = ZCST.CMSSEOTypeId
                                                             AND ZCST.Name = 'Content Page'
                          INNER JOIN @InsertContentPage ICP ON ZCCP.CMSContentPagesId = ICP.CMSContentPagesId
                                                               AND ZCSDL.LocaleId = ICP.LocaleId
                                                               AND ZCSDL.LocaleId = ICP.LocaleId;

					IF EXISTS (SELECT TOP 1 1 FROM @InsertContentPage WHERE --(SEOTitle IS NOT NULL OR SEOTitle <> '') AND 
					(SEOUrl IS NOT NULL OR SEOUrl <> '' ) )
					BEGIN 

                      INSERT INTO ZnodeCMSSEODetail (CMSSEOTypeId,SEOId,IsRedirect,MetaInformation,PortalId,SEOUrl,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,IsPublish,SEOCode,PublishStateId)					   
					   SELECT  CMSSEOTypeId,NULL,IsRedirect,MetaInformation   ,PortalId ,SEOUrl ,@UserId, @GetDate, @UserId, @GetDate,
					   IsPublished, 
					   PageName ,  
					   @PublishStateId 
             			FROM  @InsertContentPage  TBL
						LEFT JOIN ZnodeCMSSEOType ZCST   ON (ZCST.Name = 'Content Page')
						 WHERE NOT EXISTS
                            (
                                SELECT TOP 1 1
                                FROM ZnodeCMSSEODetail ZCSODL
                                WHERE ZCSODL.SEOCode = TBL.PageName
                                     
                            );
					    
					 INSERT INTO ZnodeCMSSEODetailLocale
                     (CMSSEODetailId,
                      LocaleId,
                      SEOTitle,
                      SEODescription,
                      SEOKeywords,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate,
					  CanonicalURL,
					  RobotTag
                     )
                            SELECT ZCSD.CMSSEODetailId,
                                   ICP.LocaleId,
                                   ICP.SEOTitle,
                                   ICP.SEODescription,
                                   ICP.SEOKeywords,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate,
								   ICP.CanonicalURL,
								   ICP.RobotTag
                            FROM ZnodeCMSSEODetail ZCSD
                                 INNER JOIN ZnodeCMSContentPages ZCCP ON ISNULL(ZCSD.SEOCode,'') = ZCCP.PageName
                                 INNER JOIN ZnodeCMSSEOType ZCST ON ZCSD.CMSSEOTypeId = ZCST.CMSSEOTypeId
                                                                    AND ZCST.Name = 'Content Page'
                                 INNER JOIN @InsertContentPage ICP ON ZCCP.CMSContentPagesId = ICP.CMSContentPagesId
                            WHERE NOT EXISTS
                            (
                                SELECT TOP 1 1
                                FROM ZnodeCMSSEODetailLocale ZCSODL
                                WHERE ZCSODL.CMSSEODetailId = ZCSD.CMSSEODetailId
                                      AND ZCSODL.LocaleId = ICP.LocaleId
                            )
						END

                     INSERT INTO @Profiledata
                            SELECT item
                            FROM dbo.Split
                            (
                            (
                                SELECT TOP 1 ProfileIds
                                FROM @InsertContentPage
                            ), ','
                            );
                     DELETE FROM ZnodeCMSContentPagesProfile
                     WHERE CMSContentPagesId IN
                     (
                         SELECT CMSContentPagesId
                         FROM @InsertContentPage
                     );
                     INSERT INTO ZnodeCMSContentPagesProfile
                     (CMSContentPagesId,
                      ProfileId,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate
                     )
                            SELECT q.CMSContentPagesId,
                                   s.ProfileId,
                                @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate
                            FROM @InsertContentPage AS a
                                 LEFT JOIN ZnodeCMSContentPages AS q ON(a.CMSContentPagesId = q.CMSContentPagesId)
                                 CROSS APPLY @Profiledata AS s;
                    
					 DELETE FROM ZnodeCMSContentPageGroupMapping
                     WHERE CMSContentPagesId IN
                     (
                         SELECT CMSContentPagesId
                         FROM @InsertContentPage    
                     );
                     
					 
					  
				     INSERT INTO ZnodeCMSContentPageGroupMapping
                     (CMSContentPageGroupId,
                      CMSContentPagesId,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate
                     )
                            SELECT CMSContentPageGroupId,
                                   b.CMSContentPagesId,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate
                            FROM @InsertContentPage AS a
                                 INNER JOIN ZnodeCMSContentPages AS b ON(a.CMSContentPagesId = b.CMSContentPagesId AND a.pageName = b.PageName)
						    WHERE  NOT EXISTS
                            (
                                SELECT TOP 1 1
                                FROM ZnodeCMSContentPageGroupMapping ZCCPL
                                WHERE ZCCPL.CMSContentPagesId = b.CMSContentPagesId
                                      AND ZCCPL.CMSContentPageGroupId = a.CMSContentPageGroupId
                            );
						  	
                     SELECT ZCP.CMSContentPagesId,
                            ZCP.PortalId,
                            ZCP.CMSTemplateId,
                            ZCPL.PageTitle,
                            ZCP.PageName,
                            ZCP.ActivationDate,
                            ZCP.ExpirationDate,
                            ZSDl.SEOTitle,
                            ZSDl.SEODescription,
                            ZSDl.SEOKeywords,
                            ZSD.SEOUrl,
                            ZSD.IsRedirect,
                            ZSD.MetaInformation,
                            ICP.ProfileIds,
							ZSDL.CanonicalURL,
							ZSDL.RobotTag
                     FROM ZnodeCMSContentPages AS ZCP
                          LEFT JOIN ZnodeCMSSEODetail AS ZSD ON ZCP.PageName = ISNULL(ZSD.SEOCode,'')
                          LEFT JOIN ZnodeCMSSEODetailLocale AS ZSDL ON(ZSD.CMSSEODetailId = ZSDL.CMSSEODetailId
                                                                        AND ZSDL.LocaleId = @DefaultlocaleId)
                          LEFT JOIN ZnodeCMSSEOType AS ZCST ON ZCST.CMSSEOTypeId = ZSD.CMSSEOTypeId
                                                                AND ZCST.name = 'Content Page'
                          INNER JOIN @InsertContentPage AS ICP ON ZCP.CMSContentPagesId = ICP.CMSContentPagesId
                          INNER JOIN ZnodeCMSContentPagesLocale AS ZCPL ON ZCP.CMSContentPagesId = ZCPL.CMSContentPagesId;
                 END;
             SET @Status = 1;
             COMMIT TRAN A;
         END TRY
         BEGIN CATCH
		  SELECT ERROR_MESSAGE() 
             
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_InsertUpdateContentPage @ContentPageXML = '+CAST(@ContentPageXML AS VARCHAR(max))+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		     ROLLBACK TRAN A;
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_InsertUpdateContentPage',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.PROCEDURES WHERE name = 'Znode_GetCategoryFeedList')
BEGIN 
DROP PROCEDURE Znode_GetCategoryFeedList
END
GO
  
CREATE PROCEDURE [dbo].[Znode_GetCategoryFeedList]
( @PortalId         NVARCHAR(MAX) = NULL,
  @LocaleId         INT,
  --will be used for CategoryId
  @CommaSeparatedId NVARCHAR(MAX) = NULL 
)
AS
/*
 Summary:This procedure is used to get effective keyword feeding of category list
 Unit Testing:
 EXEC Znode_GetCategoryFeedList 1 

*/

	BEGIN
	SET NOCOUNT ON;
	BEGIN TRY
		DECLARE @DefaultLocaleId INT= dbo.Fn_GetDefaultValue('Locale');

		DECLARE @TBL_DomainName TABLE
		(PortalId   INT,
		DomainName NVARCHAR(300),
		RowId      INT
		);

		DECLARE @TBL_PortalIds TABLE(PortalId INT);
		DECLARE @TBL_SEODetails TABLE
		(loc                   NVARCHAR(MAX),
		lastmod               DATETIME,
		[g:condition]         VARCHAR(100),
		[description]         NVARCHAR(MAX),
		[g:id]                INT,
		link                  VARCHAR(100),
		[g:identifier_exists] VARCHAR(200),
		DomainName            NVARCHAR(300),
		PortalId              INT,
		SEOCode               NVARCHAR(4000),
		CanonicalURL        VARCHAR(200), 
		RobotTag            VARCHAR(50)
		);

		INSERT INTO @TBL_PortalIds(PortalId)
		SELECT Zp.PortalId
		FROM Znodeportal AS ZP
		INNER JOIN ZnodePortalCatalog AS ZPC ON(ZPC.PortalId = Zp.PortalId)
		INNER JOIN ZnodePublishCatalog AS ZPPC ON(ZPPC.PublishCatalogId = ZPC.PublishCatalogId)
		INNER JOIN ZnodePublishCategory AS ZPP ON(ZPP.PublishCatalogId = ZPPC.PublishCatalogId)
		WHERE EXISTS
			(
			SELECT TOP 1 1
			FROM DBO.Split(@PortalID, ',') AS Sp
			WHERE(CAST(sp.Item AS INT) = ZP.PortalId
			OR @PortalID = '0' )
			)
		GROUP BY Zp.PortalId;
	
		INSERT INTO @TBL_DomainName(PortalId,DomainName,RowId)
		SELECT ZD.PortalId,ZD.DomainName,    
		ROW_NUMBER() OVER(Partition BY ZD.DomainName,ZD.PortalId ORDER BY ZD.DomainName,ZD.PortalId) RowId                               
		FROM ZnodeDomain ZD
		WHERE EXISTS
			(
			SELECT TOP 1 1
			FROM @TBL_PortalIds TBP
			WHERE TBP.PortalId = ZD.PortalId
			)
		AND ApplicationType = 'Webstore'
		AND IsActive =1 ;

		
		;WITH Cte_SeoDetailsWithLocale
		AS (
			SELECT DISTINCT ZCSD.CMSSEODetailId,ZCSD.SEOURL AS loc,ZCSD.ModifiedDate AS lastmod,'new' AS [g:condition],
			ZCSDL.SEODescription AS [description],ZPCC.PublishCategoryId AS [g:id],'' AS link,'false' AS [g:identifier_exists],TBDN.DomainName,ZPC.PortalId,ISNULL(ZCSDL.LocaleId, @DefaultLocaleId) AS LocaleId ,ZCSD.SEOCode, ZCSDL.CanonicalURL, ZCSDL.RobotTag
			FROM ZnodePublishCategory AS ZPCC 
			LEFT JOIN ZnodePublishCatalog AS ZPPC ON(ZPPC.PublishCatalogId = ZPCC.PublishCatalogId)
			LEFT JOIN ZnodePortalCatalog AS ZPC ON(ZPC.PublishCatalogId = ZPPC.PublishCatalogId)
			LEFT JOIN ZnodePublishcategorydetail PCD ON (PCD.PublishCategoryId = ZPCC.PublishCategoryId)
			LEFT JOIN @TBL_DomainName AS TBDN ON(TBDN.RowId = 1 AND TBDN.PortalId = ZPC.PortalId)
			LEFT JOIN ZnodeCMSSEODetail AS ZCSD ON(PCD.CategoryCode = ZCSD.SEOCode AND ZPC.PortalId = ZCSD.PortalId
			AND EXISTS (SELECT TOP 1 1 FROM ZnodeCMSSEOType AS ZCST
			WHERE ZCST.CMSSEOTypeId = ZCSD.CMSSEOTypeId  AND ZCST.Name = 'Category')) 
			LEFT  JOIN ZnodeCMSSEODetailLocale AS ZCSDL ON(ZCSDL.CMSSEODetailId = ZCSD.CMSSEODetailId
			AND ZCSDL.LocaleId IN(@LocaleId, @DefaultLocaleId))
			WHERE EXISTS
					(
					SELECT TOP 1 1
					FROM @TBL_PortalIds TBP
					WHERE ZPC.PortalId = TBP.PortalId
					)
			AND EXISTS (SELECT TOP 1 1 FROM  dbo.split(@CommaSeparatedId,',' ) SP WHERE SP.Item = PCD.CategoryCode)
		),

		Cte_SeoDetailsWithFirstLocale
		AS (SELECT CMSSEODetailId,loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName
		,PortalId,LocaleId,SEOCode, CanonicalURL, RobotTag
		FROM Cte_SeoDetailsWithLocale
		WHERE LocaleId = @LocaleId),

		Cte_SeoDetailsWithDefaultLocale
		AS (SELECT CMSSEODetailId,loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName
		,PortalId,LocaleId,SEOCode, CanonicalURL, RobotTag
		FROM Cte_SeoDetailsWithFirstLocale
		UNION ALL
		SELECT CMSSEODetailId,loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName
		,PortalId,LocaleId,SEOCode, CanonicalURL, RobotTag
		FROM Cte_SeoDetailsWithLocale AS CTSDWL
		WHERE LocaleId = @DefaultLocaleId
		AND NOT EXISTS
		(
		SELECT TOP 1 1
		FROM Cte_SeoDetailsWithFirstLocale AS CTSDWDL
		WHERE CTSDWDL.CMSSEODetailId = CTSDWL.CMSSEODetailId
		))

		INSERT INTO @TBL_SEODetails (loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName
		,PortalId,SEOCode, CanonicalURL, RobotTag)
		SELECT loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,PortalId,SEOCode, CanonicalURL, RobotTag
		FROM Cte_SeoDetailsWithDefaultLocale;
		

		SELECT DISTINCT loc,lastmod,DomainName,MAX([g:id]) AS id,PortalId,b.PublishCategoryName AS Name,SEOCode, CanonicalURL, RobotTag
		FROM @TBL_SEODetails a
		INNER JOIN ZnodePublishCategoryDetail b ON(b.PublishCategoryId = a.[g:id] AND b.LOcaleId = @LocaleId)
		WHERE DomainName IS NOT NULL
		GROUP BY loc,lastmod,DomainName,PortalId,b.PublishCategoryName,SEOCode, CanonicalURL, RobotTag
		
		END TRY
		BEGIN CATCH
		DECLARE @Status BIT ;
		SET @Status = 0;
		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetCategoryFeedList @PortalId = '+@PortalId+',@LocaleId='+CAST(@LocaleId AS VARCHAR(10))+',@CommaSeparatedId='+@CommaSeparatedId+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
		SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		   
		EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_GetCategoryFeedList',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
		END CATCH;
     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.PROCEDURES WHERE name = 'Znode_GetSeoDetails')
BEGIN 
DROP PROCEDURE Znode_GetSeoDetails
END
GO
  
CREATE PROCEDURE [dbo].[Znode_GetSeoDetails]
(   @SeoCode    NVARCHAR(4000) = '',
	@SeoType  NVARCHAR(200),
	@LocaleId INT,
	@PortalId INT=0)
AS 
   /*
     Summary:- This Procedure is used to get the Seo Detials on the bassis of seo type  
     Unit Testing 
     EXEC Znode_GetSeoDetails 1,'Category'
	 Znode_GetSeoDetails  @SeoType='Category',@LocaleId=1,@PortalId=1
   */
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             DECLARE @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId();
             DECLARE @TBL_SeoId TABLE(SeoCode NVARCHAR(4000));

             INSERT INTO @TBL_SeoId(SeoCode)
			 SELECT item FROM dbo.Split(@SeoCode, ',') SP;

            ; WITH Cte_SeoDetailsIds
              AS (SELECT ZCSD.CMSSEODetailId, SEOTitle,SEOKeywords,SEOURL,ZCSD.ModifiedDate,ZCSDL.SEODescription,MetaInformation,IsRedirect,
              CMSSEODetailLocaleId,LocaleId, ZCSD.IsPublish,ZCSD.SEOCode, ZCSDL.CanonicalURL, ZCSDL.RobotTag 
			  FROM ZnodeCMSSEODetail AS ZCSD 
              INNER JOIN ZnodeCMSSEOType AS ZCST ON(ZCST.CMSSEOTypeId = ZCSD.CMSSEOTypeId  AND ZCST.Name = @SeoType)                                                   
              INNER JOIN ZnodeCMSSEODetailLocale AS ZCSDL ON(ZCSDL.CMSSEODetailId = ZCSD.CMSSEODetailId)
              WHERE LocaleId IN(@LocaleId, @DefaultLocaleId) AND  (ZCSD.PortalId= @PortalId OR @PortalId = 0 )
              AND( EXISTS (SELECT TOP 1 1 FROM @TBL_SeoId TBSD WHERE TBSD.SeoCode = ZCSD.SeoCode) OR @SeoCode = '' )  )

            ,Cte_SeoDetailsFirstLocale
             AS (SELECT CMSSEODetailId,SEOTitle,SEOKeywords,SEOURL,ModifiedDate,SEODescription,MetaInformation,IsRedirect,CMSSEODetailLocaleId
             ,IsPublish,SEOCode, CanonicalURL, RobotTag 
			 FROM Cte_SeoDetailsIds WHERE LocaleId = @LocaleId)

            ,Cte_SeoDetailDefaultLocale
				AS (
				SELECT CMSSEODetailId,SEOTitle,SEOKeywords,SEOURL,ModifiedDate,SEODescription,MetaInformation,IsRedirect,CMSSEODetailLocaleId
				,IsPublish,SEOCode,CanonicalURL, RobotTag  FROM Cte_SeoDetailsFirstLocale
				UNION ALL
				SELECT CMSSEODetailId,SEOTitle,SEOKeywords,SEOURL,ModifiedDate,SEODescription,MetaInformation,IsRedirect,CMSSEODetailLocaleId
				,IsPublish,SEOCode,CanonicalURL, RobotTag  FROM Cte_SeoDetailsIds CTSD
				WHERE LocaleId = @DefaultLocaleId
				AND NOT EXISTS (SELECT TOP 1 1 FROM Cte_SeoDetailsFirstLocale CTSDL WHERE CTSDL.CMSSEODetailId = CTSD.CMSSEODetailId))

        SELECT CMSSEODetailId,SEOTitle,SEOKeywords,SEOURL,ModifiedDate,SEODescription,MetaInformation,IsRedirect,CMSSEODetailLocaleId
        ,Case When Isnull(IsPublish ,0 ) = 0 then 'Draft' ELSE 'Published' END   PublishStatus,SEOCode,CanonicalURL, RobotTag 
		 FROM Cte_SeoDetailDefaultLocale;
         END TRY
         BEGIN CATCH
             DECLARE @Status BIT ;
		    SET @Status = 0;
		    DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetSeoDetails @SeoCode = '+@SeoCode+',@SeoType='+@SeoType+',@LocaleId='+CAST(@LocaleId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
            SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
            EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetSeoDetails',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.PROCEDURES WHERE name = 'Znode_GetCMSContentPageList')
BEGIN 
DROP PROCEDURE Znode_GetCMSContentPageList
END
GO
  
CREATE PROCEDURE [dbo].[Znode_GetCMSContentPageList]
(@WhereClause NVARCHAR(3000),
 @Rows        INT            = 100,
 @PageNo      INT            = 1,
 @Order_BY    VARCHAR(1000)  = 'PageName',
 @RowsCount   INT OUT,
 @LocaleId    INT            = 1)
 
AS

/*
 Summary :
 This procedure use to find the list of Content pages associated to the portal 
 SELECT * FROM Information_schema.Columns WHERE COLUMN_NAME = 'profileid'
 EXEC Znode_GetCMSContentPageList 'ccp.portalid = 4 and profileid = 1 and (CMSContentPagesId = 11 or CMSContentPagesId = 12 or CMSContentPagesId = 13)' ,@RowsCount = 0 

*/
     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY
             DECLARE @SQL NVARCHAR(MAX);
             SET @WhereClause = REPLACE(@WhereClause, 'CMSContentPagesId', 'ccp.CMSContentPagesId');
			 SET @SQL = '
					DECLARE @ConatenPage TABLE (CMSContentPagesId  INT ,PortalId INT , CMSTemplateId INT ,IsActive BIT ,PageName Nvarchar(200),SEOTitle NVARCHAR(200),SEODescription NVARCHAR(max) 
											,SEOKeywords NVARCHAR(max),SEOUrl NVARCHAR(max),ContentPageHtml NVARCHAR(max),PageTemplateName NVARCHAR(200), PageTemplateFileName NVARCHAR(4000),ActivationDate DATETIME , DeactivationDate DATETIME  ,LocaleId INT, CanonicalURL VARCHAR(200), RobotTag VARCHAR(50)  )
					INSERT INTO @ConatenPage
					SELECT  ccp.CMSContentPagesId ,ccp.PortalId, ccp.CMSTemplateId,IsActive,PageName ,ZCSDL.SEOTitle,ZCSDL.SEODescription ,ZCSDL.SEOKeywords,csd.SEOUrl,ccpl.text ContentPageHtml,ct.Name PageTemplateName, ct.FileName PageTemplateFileName,ccp.ActivationDate, ccp.ExpirationDate DeactivationDate  ,ccpl.LocaleId,
					        ZCSDL.CanonicalURL, ZCSDL.RobotTag
					FROM ZnodeCMSContentPages ccp  
					INNER  JOIN ZnodeCMSContentPagesProfile cpp ON (cpp.CMSContentPagesId = ccp.CMSContentPagesId)
					INNER JOIN ZnodeCMSTextWidgetConfiguration ccpl ON (ccpl.CMSMappingId = ccp.CMSContentPagesId AND TypeOFMapping = ''ContentPageMapping'')
					INNER JOIN ZnodeCMSTemplate ct ON (ct.CMSTemplateId = ccp.CMSTemplateId)
					LEFT JOIN ZnodeCMSSEODetail csd ON (EXISTS (SELECT TOP 1 1 FROM ZnodeCMSSEOType ww WHERE ww.Name = ''Content Page'' AND ccp.PageName = csd.SEOCode  )  )
					LEFT JOIN ZnodeCMSSEODetailLocale ZCSDL ON (ZCSDL.CMSSEODetailId = csd.CMSSEODetailId AND ZCSDL.LocaleId = '+CAST(@LocaleId AS VARCHAR(100))+') 
					WHERE 1=1 '+CASE
									WHEN @WhereClause = ''
									THEN ''
									ELSE ' AND '+@WhereClause
								END+' ORDER BY '+CASE
													 WHEN @Order_BY = ''
													 THEN ' 1 '
													 ELSE ' '+@Order_BY
												 END+' SELECT @Count = COUNT (1) FROM @ConatenPage   SELECT * FROM @ConatenPage '; 

								 EXEC SP_executesql
									  @SQL,
									  N'@Count INT OUT ',
									  @Count = @RowsCount OUT;
         END TRY
         BEGIN CATCH
             DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetCMSContentPageList @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@LocaleId = '+CAST(@LocaleId AS VARCHAR(50))+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetCMSContentPageList',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END
GO 
IF EXISTS (SELECT TOP 1 1 FROM SYS.PROCEDURES WHERE name = 'Znode_GetCMSContentPagesFolderDetails')
BEGIN 
DROP PROCEDURE Znode_GetCMSContentPagesFolderDetails
END
GO
  
CREATE   PROCEDURE [dbo].[Znode_GetCMSContentPagesFolderDetails]
( @WhereClause NVARCHAR(max),
  @Rows        INT           = 100,
  @PageNo      INT           = 1,
  @Order_BY    VARCHAR(100)  = NULL,
  @RowsCount   INT OUT,
  @LocaleId    INT           = 1)
AS  
   /* 
    Summary: To get content page folder details 
             Provide output for paging with dynamic where cluase                  
    		 User view : View_CMSContentPagesFolderDetails
    Unit Testing  
    Exec Znode_GetCMSContentPagesFolderDetails '',@RowsCount = 0
    
	*/
     BEGIN
        BEGIN TRY
          SET NOCOUNT ON;

		     DECLARE @SQL NVARCHAR(MAX);
			 DECLARE @SQLWhereClause nvarchar(max)

			 
             DECLARE @DefaultLocaleId VARCHAR(100)= dbo.Fn_GetDefaultLocaleId();
             DECLARE @TBL_ContenetPageLocale TABLE(CMSContentPagesId INT,PortalId INT,CMSTemplateId INT,PageTitle NVARCHAR(200),PageName NVARCHAR(200),ActivationDate DATETIME, ExpirationDate DATETIME,IsActive BIT
				    ,CreatedBy INT,CreatedDate DATETIME,ModifiedBy INT,ModifiedDate DATETIME,PortalName  NVARCHAR(max) ,CMSContentPageGroupId INT 
				    , PageTemplateName NVARCHAR(200),SEOUrl NVARCHAR(max),MetaInformation NVARCHAR(max),SEODescription NVARCHAR(max),SEOTitle NVARCHAR(max),SEOKeywords NVARCHAR(max),CMSContentPageGroupName NVARCHAR(200),RowId INT ,CountNo INT,PublishStatus nvarchar(300)  ,SEOPublishStatus  nvarchar(300), SEOCode NVARCHAR(4000),CanonicalURL VARCHAR(200), RobotTag VARCHAR(50) )
			--SET @SQLWhereClause  = [dbo].[Fn_GetFilterWhereClause](@WhereClause) 
					SET @SQL = '  
						;With CMSContentPages AS (		
						SELECT DISTINCT ZCCP.CMSContentPagesId,ZCCP.PortalId,ZCCP.CMSTemplateId,ZCCPL.PageTitle,ZCCP.PageName,ZCCP.ActivationDate, ZCCP.ExpirationDate,ZCCP.IsActive
						,ZCCP.CreatedBy,ZCCP.CreatedDate,ZCCP.ModifiedBy,ZCCP.ModifiedDate,e.StoreName PortalName   ,ISNULL(ZCCPG.CMSContentPageGroupId,0) CMSContentPageGroupId
						,zct.Name PageTemplateName ,zcsd.SEOUrl,zcsd.MetaInformation,ZCCPGL.Name CMSContentPageGroupName,ZCCPL.LocaleId,ZCSDL.SEODescription,ZCSDL.SEOTitle,ZCSDL.SEOKeywords	,ZCSDL.LocaleId LocaleSeo,ZCCPGL.LocaleId LocaeIdRTR ,tyu.DisplayName  IsPublished
						,zcsd.PublishStateId IsSEOPublished, ISNULL(ZCSD.SEOCode,ZCCP.PageName) as SEOCode, ZCSDL.CanonicalURL, ZCSDL.RobotTag 
					    FROM ZnodeCMSContentPages ZCCP 
						LEFT JOIN  ZnodePublishState tyu ON (tyu.PublishStateId = ZCCP.PublishStateId )
						LEFt Outer JOIN [ZnodeCMSContentPageGroupMapping] ZCCPGM ON (ZCCPGM.CMSContentPagesId = ZCCP.CMSContentPagesId) 
					    LEFt Outer JOIN [ZnodeCMSContentPageGroup] ZCCPG ON (ZCCPG.CMSContentPageGroupId = ZCCPGM.CMSContentPageGroupId)
						LEFt Outer JOIN [ZnodeCMSContentPagesLocale] ZCCPL ON (ZCCP.CMSContentPagesId = ZCCPL.CMSContentPagesId  )
						LEFt Outer JOIN [ZnodeCMSContentPageGroupLocale] ZCCPGL ON (ZCCPGL.CMSContentPageGroupId = ZCCPG.CMSContentPageGroupId AND ZCCPGL.LocaleId = ZCCPL.LocaleId  )					
						LEFT JOIN ZnodeCMSTemplate zct ON (zct.CMSTemplateId = ZCCP.CMSTemplateId )
						LEFT JOIN ZnodeCMSSEODetail zcsd ON (zcsd.SEOCode = ZCCP.PageName AND ZCSD.Portalid = ZCCP.portalId AND zcsd.PortalId IS NOT NULL  AND 
					    EXISTS (SELECT TOP 1 1 FROM ZnodeCMSSEOType zcst WHERE zcst.CMSSEOTypeId = zcsd.CMSSEOTypeId AND zcst.Name = ''Content Page'' ))
					    LEFT JOIN ZnodeCMSSEODetailLocale ZCSDL ON ZCSDL.CMSSEODetailId = zcsd.CMSSEODetailId    AND zcsdl.LocaleId =  '+CAST(@LocaleId AS VARCHAR(10))+'
						LEFT JOIN  ZnodePublishState tyus ON (tyus.PublishStateId = zcsd.PublishStateId )
						LEFt Outer JOIN ZnodePortal e on ZCCP.PortalId = e.PortalId 
					    WHERE  ZCCPL.LocaleId IN ('+CAST(@LocaleId AS VARCHAR(50))+' , '+CAST(@DefaultLocaleId AS VARCHAR(50))+') 
						--AND ZCSDL.LocaleId IN ('+CAST(@LocaleId AS VARCHAR(50))+' , '+CAST(@DefaultLocaleId AS VARCHAR(50))+') 
						--AND ZCCPGL.LocaleId IN ('+CAST(@LocaleId AS VARCHAR(50))+' , '+CAST(@DefaultLocaleId AS VARCHAR(50))+') 
					--	AND zcsd.PortalId IS NOT NULL
						 ) 
						, Cte_ContaintPageDetails AS (
						SELECT CMSContentPagesId,PortalId,CMSTemplateId,PageTitle,PageName,ActivationDate, ExpirationDate,IsActive,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PortalName,CMSContentPageGroupId 
									, PageTemplateName ,SEOUrl,CMSContentPageGroupName,SEODescription,SEOTitle,SEOKeywords,MetaInformation,IsPublished, IsSEOPublished,SEOCode,CanonicalURL, RobotTag 
						 FROM CMSContentPages WHERE LocaleId = '+CAST(@LocaleId AS VARCHAR(50))+'
      --                  AND LocaleSeo = '+CAST(@LocaleId AS VARCHAR(50))+'
						--AND LocaeIdRTR   = '+CAST(@LocaleId AS VARCHAR(50))+'
						)
						, Cte_ContentPage  AS (     	 
						SELECT CMSContentPagesId,PortalId,CMSTemplateId,PageTitle,PageName,ActivationDate, ExpirationDate,IsActive,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PortalName,CMSContentPageGroupId 
						, PageTemplateName ,SEOUrl,CMSContentPageGroupName,SEOKeywords,SEOTitle,SEODescription,MetaInformation,IsPublished,IsSEOPublished,SEOCode,CanonicalURL, RobotTag 	
						FROM Cte_ContaintPageDetails 
						UNION ALL 
						SELECT CMSContentPagesId,PortalId,CMSTemplateId,PageTitle,PageName,ActivationDate, ExpirationDate,IsActive
						,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PortalName ,CMSContentPageGroupId , PageTemplateName ,SEOUrl,CMSContentPageGroupName,SEOKeywords,SEOTitle,SEODescription,MetaInformation,IsPublished,IsSEOPublished,SEOCode,CanonicalURL, RobotTag 
					    FROM CMSContentPages CCP WHERE LocaleId = '+CAST(@DefaultLocaleId AS VARCHAR(50))+'
					    AND NOT EXISTS (SELECT TOP 1 1 FROM Cte_ContaintPageDetails CTCPD WHERE CTCPD.CMSContentPagesId  = CCP.CMSContentPagesId AND  CTCPD.Portalid = CCp.PortalId) -- AND  LocaleSeo = '+CAST(@DefaultLocaleId AS VARCHAR(50))+'
					   -- AND LocaeIdRTR   = '+CAST(@DefaultLocaleId AS VARCHAR(50))+'
						)				

					    ,Cte_ContenetPageFilter AS (
					    SELECT CMSContentPagesId,PortalId,CMSTemplateId,PageTitle,PageName,ActivationDate, ExpirationDate,a.IsActive,SEOKeywords,SEOTitle,SEODescription,MetaInformation,a.CreatedBy,a.CreatedDate,a.ModifiedBy,a.ModifiedDate,PortalName   ,CMSContentPageGroupId 
						, PageTemplateName ,SEOUrl,CMSContentPageGroupName, a.IsPublished PublishStatus, 
						CASE WHEN n.DispLayName IS NULL THEN '''' ELSE n.DispLayName END  SEOPublishStatus  , SEOCode,DisplayName,CanonicalURL, RobotTag 
						
						 FROM Cte_ContentPage a 
						 LEFT JOIN ZnodePublishState n ON (n.PublishStateId = a.IsSEOPublished ) ) '
   
						set @SQLWhereClause = @SQL + '
						
						,Cte_ContentFinal AS
						(
						SELECT CMSContentPagesId,PortalId,CMSTemplateId,
						PageTitle,PageName,ActivationDate, ExpirationDate,IsActive,SEOKeywords,SEOTitle,
						SEODescription,MetaInformation,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,
						PortalName,CMSContentPageGroupId, PageTemplateName ,
						SEOUrl,CMSContentPageGroupName,PublishStatus,SEOPublishStatus,'+[dbo].[Fn_GetPagingRowId](@Order_BY,'CMSContentPagesId')+',Count(*)Over() CountNo,SEOCode,CanonicalURL, RobotTag 
						FROM Cte_ContenetPageFilter WHERE  1=1 '+[dbo].[Fn_GetFilterWhereClause](@WhereClause)+' )

						
					    SELECT CMSContentPagesId,PortalId,CMSTemplateId,PageTitle,PageName,ActivationDate, ExpirationDate,IsActive,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PortalName   ,CMSContentPageGroupId 
						, PageTemplateName ,SEOUrl,CMSContentPageGroupName,RowId,CountNo,SEOKeywords,SEOTitle,SEODescription,MetaInformation,    PublishStatus,SEOPublishStatus, SEOCode,CanonicalURL, RobotTag 
					    FROM Cte_ContentFinal  '+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)
						
						--select ''+@SQLWhereClause  FOR XML PATH ('')
						print @SQLWhereClause


					    INSERT INTO @TBL_ContenetPageLocale (CMSContentPagesId,PortalId,CMSTemplateId,PageTitle,PageName,ActivationDate, ExpirationDate,IsActive
									,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PortalName,CMSContentPageGroupId 
									, PageTemplateName ,SEOUrl,CMSContentPageGroupName,RowId,CountNo,SEOKeywords,SEOTitle,SEODescription,
									MetaInformation,PublishStatus,SEOPublishStatus,SEOCode,CanonicalURL, RobotTag )
           				
					    EXEC (@SQLWhereClause)      
						                                                     
					    SET @RowsCount = ISNULL((SELECT TOP 1 CountNo FROM @TBL_ContenetPageLocale) ,0)   
						     
					    SELECT CMSContentPagesId,PortalId,CMSTemplateId,PageTitle,PageName,ActivationDate,ExpirationDate,IsActive
							   ,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PortalName,CMSContentPageGroupId 
							   ,PageTemplateName ,SEOUrl,CMSContentPageGroupName,SEOKeywords,SEOTitle,SEODescription,MetaInformation,
							   PublishStatus,SEOPublishStatus,SEOCode,CanonicalURL, RobotTag 
						FROM @TBL_ContenetPageLocale

           
    END TRY
	
    BEGIN CATCH
        DECLARE @Status BIT ;
		     SET @Status = 0;
			 select ERROR_MESSAGE()
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetCMSContentPagesFolderDetails @WhereClause = '''+ISNULL(@WhereClause,'''''')+''',@Rows='+ISNULL(CAST(@Rows AS
			VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')+',@LocaleId = '+ISNULL(CAST(@LocaleId AS VARCHAR(50)),'''');


              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		 
        EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetCMSContentPagesFolderDetails',
				@ErrorInProcedure = 'Znode_GetCMSContentPagesFolderDetails',
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
    END CATCH;
END;
GO 
IF EXISTS (SELECT TOP 1 1 FROM SYS.PROCEDURES WHERE name = 'Znode_GetImportTemplateLogs')
BEGIN 
DROP PROCEDURE Znode_GetImportTemplateLogs
END
GO
  
CREATE  PROCEDURE [dbo].[Znode_GetImportTemplateLogs]
( @WhereClause NVARCHAR(max),
  @Rows        INT           = 100,
  @PageNo      INT           = 1,
  @Order_BY    VARCHAR(1000)  = '',
  @RowsCount   INT OUT)
AS
    /*
	
    Summary : Get Import Template Log details and errorlog associated to it
     Unit Testing 
	 begin tran
    DECLARE @RowsCount INT;
    EXEC Znode_GetImportTemplateLogs @WhereClause = '',@Rows = 1000,@PageNo = 1,@Order_BY = NULL,@RowsCount = @RowsCount OUT;
	rollback tran
   
    */
	 BEGIN
        BEGIN TRY
          SET NOCOUNT ON;
		     DECLARE @SQL NVARCHAR(MAX);
             DECLARE @TBL_ErrorLog TABLE(ImportHeadId INT, ImportName NVARCHAR(100),TemplateName VARCHAR(300) ,[Status] VARCHAR(50) ,ProcessStartedDate DATETIME ,ProcessCompletedDate DATETIME
										,ImportTemplateId INT,ImportProcessLogId INT ,RowId INT,CountNo  INT)

             SET @SQL = ' 
					   ;With Cte_ErrorLog AS (
						select zih.ImportHeadId, zih.NAME ImportName, zit.TemplateName TemplateName ,zipl.Status ,
						zipl.ProcessStartedDate,
						zipl.ProcessCompletedDate,zipl.ImportTemplateId ,zipl.ImportProcessLogId,zipl.Createdby
						from ZnodeImportHead zih inner join  ZnodeImportTemplate zit ON zih.ImportHeadId = zit.ImportHeadId  
						Inner join ZnodeImportProcessLog zipl on zit.ImportTemplateId = zipl.ImportTemplateId
						) 
						,Cte_ErrorlogFilter AS
						(

					   SELECT ImportHeadId,ImportName,TemplateName,Status,ProcessStartedDate,ProcessCompletedDate,ImportTemplateId
								,ImportProcessLogId,'+dbo.Fn_GetPagingRowId(@Order_BY,'ImportProcessLogId DESC')+', Count(*)Over() CountNo
					   FROM Cte_ErrorLog
					   WHERE 1 = 1 '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'
						) 
					   SELECT ImportHeadId, ImportName,TemplateName ,Status,ProcessStartedDate,ProcessCompletedDate,ImportTemplateId ,ImportProcessLogId,RowId,CountNo 
					   FROM Cte_ErrorlogFilter 
					   '+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)
	       
			 INSERT INTO @TBL_ErrorLog (ImportHeadId, ImportName,TemplateName ,[Status],ProcessStartedDate,ProcessCompletedDate,ImportTemplateId ,ImportProcessLogId,RowId,CountNo )
			 EXEC(@SQl)												
             SET @RowsCount = ISNULL((SELECT TOP 1 CountNo FROM @TBL_ErrorLog ), 0);

			 SELECT ImportHeadId, ImportName,TemplateName ,Status,ProcessStartedDate,ProcessCompletedDate,ImportTemplateId ,ImportProcessLogId
			 FROM @TBL_ErrorLog
           
         END TRY
         BEGIN CATCH
              DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetImportTemplateLogs @WhereClause = '''+ISNULL(@WhereClause,'''''')+''',@Rows='+ISNULL(CAST(@Rows AS
			VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetImportTemplateLogs',
				@ErrorInProcedure = 'Znode_GetImportTemplateLogs',
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;                   
         END CATCH;
     END;
GO 

IF EXISTS (SELECT TOP 1 1 FROM SYS.PROCEDURES WHERE name = 'Znode_GetInventoryBySkus')
BEGIN 
DROP PROCEDURE Znode_GetInventoryBySkus
END
GO
  
CREATE  PROCEDURE [dbo].[Znode_GetInventoryBySkus]
( @SKUs     NVARCHAR(MAX),
  @PortalId VARCHAR(2000))
AS 
  /* 
    Summary: This procedure is used to get inventory details of sku portal wise    		   
    Unit Testing   
     EXEC Znode_GetInventoryBySkus @SKUs='ap1234,LI001',@PortalId=1
 
   */ 
	 BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
           
			 Create table #TBL_SKUs (SKU NVARCHAR(MAX));
             Create table #TBL_PortalIds (PortalId INT);
			 

             INSERT INTO #TBL_SKUs 
                    SELECT item
                    FROM dbo.split(@SKUs, ',');

             INSERT INTO #TBL_PortalIds
                    SELECT item
                    FROM dbo.split(@PortalId, ',');

           
			 CREATE TABLE #TLB_SKUSumInventory 
             (SKU          VARCHAR(600),
              Quantity     NUMERIC(28, 6),
              ReOrderLevel NUMERIC(28, 6),
              PortalId     INT
             );
			 
			 CREATE TABLE #TBL_AllwareHouseToportal 
             (WarehouseId       INT,
              PortalId          INT,
              PortalWarehouseId INT
             );

             INSERT INTO #TBL_AllwareHouseToportal
                    SELECT zpw.WarehouseId,zp.PortalId,zpw.PortalWarehouseId
                    FROM [dbo].ZnodePortal AS zp
                         INNER JOIN [ZnodePortalWarehouse] AS zpw ON(zpw.PortalId = zp.PortalId)
                    WHERE EXISTS
                    (
                        SELECT TOP 1 1
                        FROM #TBL_PortalIds AS tp
                        WHERE tp.PortalId = zp.PortalId
                    );
             INSERT INTO #TBL_AllwareHouseToportal
                    SELECT zpaw.WarehouseId,a.PortalId,zpaw.PortalWarehouseId
                    FROM [dbo].[ZnodePortalAlternateWarehouse] AS zpaw
                         INNER JOIN #TBL_AllwareHouseToportal AS a ON(zpaw.PortalWarehouseId = a.PortalWarehouseId);

					
					
             SELECT TY.SKU,SUM(ISNULL(zi.Quantity, 0)) AS Quantity,SUM(ISNULL(Zi.ReOrderLevel, 0)) AS ReOrderLevel,zpw.PortalId
             FROM #TBL_AllwareHouseToportal AS zpw
			 CROSS APPLY #TBL_SKUs  TY 
             LEFT JOIN [dbo].[ZnodeInventory] AS ZI ON (  ISNULL(Zi.WarehouseId,-1) = CASE WHEN ISNULL(Zi.WarehouseId,-1) = -1 THEN -1 ELSE  zpw.WarehouseId END  AND   ZI.SKU=TY.SKU)--(SELECT ''+ZI.SKU FOR XML PATH ('')) = TY.SKU )
             GROUP BY TY.SKU, zpw.PortalId;
                     
         END TRY
         BEGIN CATCH
            DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetInventoryBySkus @SKUs = '+@SKUs+',@PortalId='+@PortalId+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		    
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetInventoryBySkus',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO 

IF EXISTS (SELECT TOP 1 1 FROM SYS.PROCEDURES WHERE name = 'Znode_GetProductInfoForWebStore')
BEGIN 
DROP PROCEDURE Znode_GetProductInfoForWebStore
END
GO
  
CREATE   PROCEDURE [dbo].[Znode_GetProductInfoForWebStore]
(   
	@PortalId         INT,
    @LocaleId         INT,
	@UserId			  INT = 2,
	@ProductDetailsFromWebStore   DBO.ProductDetailsFromWebStore READONLY,
	@currentUtcDate    VARCHAR(200) = '')
AS 
     BEGIN
         BEGIN TRAN A;
         BEGIN TRY
             SET NOCOUNT ON;
			 
			 DECLARE @Tlb_SKU TABLE (SKU VARCHAR(100))
			 DECLARE @PublishProductIds  NVARCHAR(max) ,@SKU NVARCHAR(max) 
				
			 DECLARE @TBL_PricebyCatalogforAssociateProduct TABLE (PimProductId int ,AssociatedProductId int,ParentSKU NVARCHAR(300),
				ChildSKU NVARCHAR(300),RetailPrice  numeric(28,6),AssociatedProductDisplayOrder int ,
				TypeOfProduct nvarchar(100),SalesPrice  numeric(28,6))
		     DECLARE @tbl_PricingSkuOfAssociatedProduct TABLE (sku nvarchar(200),RetailPrice numeric(28,6),SalesPrice numeric(28,6),TierPrice numeric(28,6),
				TierQuantity numeric(28,6),CurrencyCode varchar(200),CurrencySuffix varchar(2000), ExternalId NVARCHAR(2000))				
		

			--Create TABLE #Tlb_PromotionProductData 
   --          (
			--	  PromotionId      INT,
			--	  PromotionType	   INT, 
			--	  ExpirationDate   Datetime, 
			--	  ActivationDate   Datetime,
			--	  PublishProductId INT,
			--	  PromotionMessage Nvarchar(max)  
   --          );
			 Create TABLE #Tbl_PriceListWisePrice 
             (
				  SKU            VARCHAR(300),
				  RetailPrice    NUMERIC(28, 6),
				  SalesPrice     NUMERIC(28, 6),
				  TierPrice      NUMERIC(28, 6),
				  TierQuantity   NUMERIC(28, 6),
				  CurrencyCode   Varchar(100),
				  CurrencySuffix Varchar(1000),
				  CultureCode      VARCHAr(1000),
				  ExternalId NVARCHAR(2000),
				  Custom1        NVARCHAR(MAX),
				  Custom2        NVARCHAR(MAX),
				  Custom3        NVARCHAR(MAX)
             );

			 CREATE TABLE #Tlb_ProductData 
             (
				  PublishProductId INT,
				  SKU              NVARCHAR(100),
				  SEOTitle         NVARCHAR(200),
				  SEODescription   NVARCHAR(MAX),
				  SEOKeywords      NVARCHAR(MAX),
				  SEOUrl           NVARCHAR(MAX),
				  Rating           Numeric(28,6),
				  TotalReviews     INT,
				  RetailPrice      NUMERIC(28, 6),
				  SalesPrice       NUMERIC(28, 6),
				  TierPrice        NUMERIC(28, 6),
				  TierQuantity     NUMERIC(28, 6),
				  CurrencyCode     Varchar(100),
				  CurrencySuffix   Varchar(1000),
				
				  ExternalId       NVARCHAR(2000),
				  Quantity    NUMERIC(28, 6),
				  ReOrderLevel     NUMERIC(28, 6),
				  Custom1        NVARCHAR(MAX),
				  Custom2        NVARCHAR(MAX),
				  Custom3        NVARCHAR(MAX),
				  CanonicalURL VARCHAR(200),   
				  RobotTag VARCHAR(50)
			   );


			 Create TABLE #Tbl_Inventory
             (
				  SKU            VARCHAR(300),
				  Quantity    NUMERIC(28, 6),
				  ReOrderLevel     NUMERIC(28, 6),
				  PortalId      int
				
             );
            INSERT INTO #Tlb_ProductData (PublishProductId,SKU)
            SELECT id,SKU FROM @ProductDetailsFromWebStore
			  		
			SELECT @SKU = Substring((SELECT ',' + SKU FROM @ProductDetailsFromWebStore FOR XML PAth('')),2,4000) 

			SELECT @PublishProductIds = Substring((SELECT ',' + CONVERT(NVARCHAR(100),id ) FROM @ProductDetailsFromWebStore FOR XML PAth('')),2,4000) 
			
			--INSERT INTO  #Tlb_PromotionProductData(PromotionId,PromotionType, ExpirationDate,  ActivationDate, PublishProductId,PromotionMessage)
			--Exec [Znode_GetPromotionByPublishProductId] @PublishProductIds = @PublishProductIds ,@UserId  = @UserId	,@PortalId  = @PortalId  
			 
			INSERT INTO #Tbl_PriceListWisePrice( SKU, RetailPrice,SalesPrice,TierPrice,TierQuantity,CurrencyCode,CurrencySuffix,CultureCode,ExternalId,Custom1,Custom2,Custom3)
			EXEC Znode_GetPublishProductPricingBySku @SKU = @SKU ,@PortalId = @PortalId ,@currentUtcDate = @currentUtcDate,@UserId = @UserId 
			

			
			insert into #Tbl_Inventory (SKU,	Quantity,	ReOrderLevel,	PortalId)
			EXEC Znode_GetInventoryBySkus @SKUs=@SKU,@PortalId=@PortalId

			--Price logic for Associate products
			----INSERT INTO @TBL_PricebyCatalogforAssociateProduct(AssociatedProductId,ChildSKU,ParentSKU,PimProductId,RetailPrice,SalesPrice,TypeOfProduct)
			----SELECT cl.Item, NULL , PR.SKU, PR.ID, null, null , PR.[ProductType]  FROM @ProductDetailsFromWebStore PR
			----Cross Apply dbo.split (AssociateProducts, ',') CL 

			----UPDATE PDI SET PDI.ChildSKU = ZPPD.SKU 
			----from @TBL_PricebyCatalogforAssociateProduct PDI inner join
			----ZnodePublishProductDetail ZPPD On PDI.AssociatedProductId = ZPPD.PublishProductId
			
			----SELECT @SKU = Substring((SELECT ',' + Convert(nvarchar(100),AssociatedProductId) 
			----FROM @TBL_PricebyCatalogforAssociateProduct where AssociatedProductId is not null FOR XML PAth('')),2,4000) 

			----INSERT INTO @tbl_PricingSkuOfAssociatedProduct (SKU,RetailPrice ,SalesPrice,TierPrice,TierQuantity,CurrencyCode,CurrencySuffix, ExternalId)	
			----EXEC Znode_GetPublishProductPricingBySku  @Sku ,@portalID  ,@currentUtcDate,@UserId 

			----update PLC SET PLC.RetailPrice = PLCA.RetailPrice ,
			----PLC.SalesPrice = PLCA.SalesPrice 
			----from @TBL_PricebyCatalogforAssociateProduct PLC inner join @tbl_PricingSkuOfAssociatedProduct
			----PLCA on PLC.ChildSKU = PLCA.sku
			
			----Update PBC SET PBC.RetailPrice = 
			----	(Select TOP 1 Isnull(RetailPrice ,SalesPrice) from @TBL_PricebyCatalogforAssociateProduct PCBA  where PCBA.ParentSKU =PBC.SKU
			----		and PCBA.ParentSKU is not null and PCBA.ChildSKU is not null
			----	Order by AssociatedProductDisplayOrder)
			----	from #Tbl_PriceListWisePrice  PBC  where 
			----	Exists (Select TOP 1 1  from @TBL_PricebyCatalogforAssociateProduct PCBA
			----	where PCBA.ParentSKU =PBC.SKU and PCBA.TypeOfProduct = 'ConfigurableProduct')
			----	and PBC.RetailPrice IS null 

			Update PD SET 
			 PD.SKU             = PLWP.SKU            
			,PD.RetailPrice     = PLWP.RetailPrice     
			,PD.SalesPrice      = PLWP.SalesPrice      
			,PD.TierPrice       = PLWP.TierPrice       
			,PD.TierQuantity    = PLWP.TierQuantity    
			,PD.CurrencyCode    = PLWP.CurrencyCode    
			,PD.CurrencySuffix  = PLWP.CurrencySuffix  
			,PD.ExternalId 	    = PLWP.ExternalId
			,PD.Custom1			= PLWP.Custom1
			,PD.Custom2			= PLWP.Custom2
			,PD.Custom3			= PLWP.Custom3
			FROM #Tlb_ProductData PD Inner join #Tbl_PriceListWisePrice PLWP on 
			PD.SKU = PLWP.SKU

			Update PD SET 
			 PD.Quantity = TLI.Quantity,
			 PD.ReOrderLevel= TLI.ReOrderLevel
			 FROM #Tlb_ProductData PD Inner join #Tbl_Inventory TLI on 
			PD.SKU = TLI.SKU

			 

			----Update PD SET 
			----	  PD.PromotionId      =PLWP.PromotionId,
			----	  PD.PromotionType	  =PLWP.PromotionType, 
			----	  PD.ExpirationDate   =PLWP.ExpirationDate, 
			----	  PD.ActivationDate   =PLWP.ActivationDate,
			----	  PD.PublishProductId =PLWP.PublishProductId,
			----	  PD.PromotionMessage  =PLWP.PromotionMessage   
			----from #Tlb_ProductData PD Inner join #Tlb_PromotionProductData PLWP on 
			----PD.PublishProductId = PLWP.PublishProductId


			 DECLARE @Tlb_CustomerAverageRatings TABLE
             (PublishProductId INT,
              Rating           NUMERIC(28,6),
              TotalReviews     INT
             ); 
             -- Calculate Average rating 
             INSERT INTO @Tlb_CustomerAverageRatings(PublishProductId,Rating,TotalReviews)
             SELECT CCR.PublishProductId,SUM(CAST(CCR.Rating AS NUMERIC(28,6)) )/ COUNT(CCR.PublishProductId),COUNT(CCR.PublishProductId) 
			 FROM ZnodeCMSCustomerReview AS CCR
             INNER JOIN #Tlb_ProductData AS PD ON CCR.PublishProductId = PD.PublishProductId AND CCR.Status = 'A' 
			 AND  (CCR.PortalId  = @PortalId OR @PortalId = 0 )
			 GROUP BY CCR.PublishProductId    ;

             UPDATE PD SET PD.Rating = CAR.Rating,PD.TotalReviews = CAR.TotalReviews 
			 FROM @Tlb_CustomerAverageRatings CAR
             INNER JOIN #Tlb_ProductData PD ON CAR.PublishProductId = PD.PublishProductId;

             UPDATE PD SET PD.SEOTitle = ZCSDL.SEOTitle,PD.SEODescription = ZCSDL.SEODescription,PD.SEOKeywords = ZCSDL.SEOKeywords,PD.SEOUrl = ZCSO.SEOUrl,
			               PD.CanonicalURL = ZCSDL.CanonicalURL, PD.RobotTag = ZCSDL.RobotTag
			 FROM #Tlb_ProductData PD
             INNER JOIN ZnodeCMSSEODetail ZCSO ON PD.SKU = ZCSO.SEOCode
             LEFT JOIN ZnodeCMSSEODetailLocale ZCSDL ON(ZCSDL.CMSSEODetailId = ZCSO.CMSSEODetailId AND ZCSDL.LocaleId = @LocaleId)
             INNER JOIN ZnodeCMSSEOType ZCOT ON ZCOT.CMSSEOTypeId = ZCSO.CMSSEOTypeId AND ZCOT.Name = 'Product'
			 WHERE ZCSO.PortalId = @PortalId
             
			 --UPDATE PD SET PD.SEOTitle = ZCSDL.SEOTitle,PD.SEODescription = ZCSDL.SEODescription,PD.SEOKeywords = ZCSDL.SEOKeywords,PD.SEOUrl = ZCSO.SEOUrl 
			 --FROM #Tlb_ProductData PD
    --         INNER JOIN ZnodeCMSSEODetail ZCSO ON PD.SKU = ZCSO.SEOCode
    --         LEFT JOIN ZnodeCMSSEODetailLocale ZCSDL ON(ZCSDL.CMSSEODetailId = ZCSO.CMSSEODetailId AND ZCSDL.LocaleId = @LocaleId)
    --         INNER JOIN ZnodeCMSSEOType ZCOT ON ZCOT.CMSSEOTypeId = ZCSO.CMSSEOTypeId AND ZCOT.Name = 'Product'
			 --WHERE ZCSO.PortalId = @PortalId

             UPDATE PD SET PD.SEOTitle = ZCPS.ProductTitle,PD.SEODescription = ZCPS.ProductDescription,PD.SEOKeywords = ZCPS.ProductKeyword FROM #Tlb_ProductData PD
             INNER JOIN ZnodeCMSPortalSEOSetting ZCPS ON ZCPS.PortalId = @PortalId WHERE PD.SEOTitle IS NULL AND PD.SEODescription IS NULL AND PD.SEOKeywords IS NULL AND PD.SEOUrl IS NULL
			  --AND ZCSO.PortalId = @PortalId

			 
			  ;With Cte_Catalogdaata AS 
			 (
			   SELECT  a.PublishCatalogId ,Max(PublishCatalogLogId) PublishCatalogLogId
			   FROM ZnodePortalCatalog a 
			   INNER JOIN ZnodePublishCatalogLog b ON (b.PublishCatalogId = a.PublishCatalogId )
			   WHERE a.PortalId = @PortalId
			   GROUP BY a.PublishCatalogId 
	 
			 )
			 SELECT Row_Number()Over( PARTITION BY  BTY.SKU ORDER BY p.value('(./AttributeValues)[1]', 'VARCHAR(200)')) RowId ,
					BTY.SKU ParentSKU, BTY1.SKU , UI.Quantity, UI.ReOrderLevel ,UI.WarehouseId
			 INTO #TempPublishData
			 FROM ZnodePublishedXml ZPXML 
			 INNER JOIN ZnodePublishProduct CTR ON ( CTR.PublishProductId = ZPXML.PublishedId)
			 INNER JOIN ZnodePublishProductDetail BTY ON (BTY.PublishProductId = CTR.PublishProductId)
			 CROSS APPLY ZPXML.PublishedXML.nodes('/ProductEntity/Attributes/AttributeEntity') t(p)	 
			 INNER JOIN ZnodePublishProductDetail BTY1 ON (BTY1.SKU = p.value('(./AttributeValues)[1]', 'varchar(200)'))
			 LEFT JOIN ZnodeInventory UI ON (UI.SKU = BTY1.SKU)
			 WHERE  IsProductXML = 1
			 AND EXISTS (SELECT TOP 1 1 FROM Cte_Catalogdaata TY WHERE TY.PublishCatalogId = CTR.PublishCatalogId AND TY.PublishCatalogLogId =ZPXML.PublishCatalogLogId)
			 AND EXISTS (SELECT TOP 1 1 FROM #Tlb_ProductData TU WHERE TU.SKU = BTY.SKU)
			 AND BTY.LocaleId = Dbo.Fn_GetDefaultLocaleId()
			 AND BTY1.LocaleId = Dbo.Fn_GetDefaultLocaleId()
			 AND p.value('(./AttributeCode)[1]', 'VARCHAR(200)') = 'DefaultSkuForConfigurable'

			 DELETE FROM #TempPublishData WHERE RowId <> 1

			 SELECT A.PublishProductId,a.SKU,a.SEOTitle,a.SEODescription,a.SEOKeywords,a.SEOUrl,a.Rating,a.TotalReviews ,  
					a.RetailPrice,a.SalesPrice,a.TierPrice, a.TierQuantity,a.CurrencyCode,a.CurrencySuffix,a.ExternalId, 
					CASE WHEN TYI.ParentSKU IS NULL AND ZPCPA.PimProductId IS NULL THEN  b.Quantity ELSE ISNULL(TYI.Quantity,0) END as Quantity , 
			 CASE WHEN TYI.ParentSKU IS NULL THEN  b.ReOrderLevel ELSE TYI.ReOrderLevel END ReOrderLevel, a.CanonicalURL, a.RobotTag  
			 FROM #Tlb_ProductData a
			 LEFT JOIN #TempPublishData TYI ON (TYI.ParentSKU = a.SKU AND  TYI.WarehouseId  IN (SELECT  WarehouseId FROM ZnodePortalWarehouse WHERE PortalId = @PortalId))
			 LEFT JOIN ZnodeInventory b ON (b.SKU  = a.SKU  AND  b.WarehouseId  IN (SELECT  WarehouseId FROM ZnodePortalWarehouse WHERE PortalId = @PortalId)) 
			 LEFT JOIN ZnodePublishProduct ZPP on a.PublishProductId = ZPP.PublishProductId 
			 LEFT join ZnodePimConfigureProductAttribute ZPCPA on ZPP.PimProductId = ZPCPA.PimProductId;

			  -- SELECT PublishProductId,SKU,SEOTitle,SEODescription,SEOKeywords,SEOUrl,Rating,TotalReviews ,
			  --RetailPrice,SalesPrice,TierPrice, TierQuantity,CurrencyCode,CurrencySuffix,ExternalId,
			  -- Quantity  ,ReOrderLevel FROM #Tlb_ProductData;    
			 -------added for wcn specific change end             
			 			
			 --Select PDFW.ID PublishProductId ,PDFW.SKU,PromotionId,PromotionType,ExpirationDate,ActivationDate,PromotionMessage from #Tlb_PromotionProductData PPD Inner join 
			 --@ProductDetailsFromWebStore PDFW ON PPD.PublishProductId = PDFW.ID

			 --SELECT SKU,RetailPrice,SalesPrice,TierPrice,TierQuantity,CurrencyCode,CurrencySuffix,ExternalId from #Tbl_PriceListWisePrice  


			 COMMIT TRAN A;
			
         END TRY
         BEGIN CATCH
		
              DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), 
			 @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(),
			  @ErrorLine VARCHAR(100)= ERROR_LINE(),
			   @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetProductInfoForWebStore @PortalId='+CAST(@PortalId AS VARCHAR(50))+',@LocaleId='+CAST(@LocaleId AS VARCHAR(50));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetProductInfoForWebStore',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END; 
GO


   

IF EXISTS (SELECT TOP 1 1 FROM SYS.PROCEDURES WHERE name = 'Znode_GetBlogFeedList')
BEGIN 
DROP PROCEDURE Znode_GetBlogFeedList
END
GO
  
CREATE    PROCEDURE [dbo].[Znode_GetBlogFeedList]
( 
	@PortalId NVARCHAR(MAX) = NULL,
	@LocaleId INT
)
AS
/*
	Summary : This procedure is used to get effective keyword feeding of content list
	Unit Testing:
	EXEC [Znode_GetBlogFeedList] 2,1
	R
*/
     BEGIN
         SET NOCOUNT ON;
		 BEGIN TRY
         DECLARE @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId();
         DECLARE @TBL_DomainName TABLE
         (PortalId   INT,
          DomainName NVARCHAR(300),
          RowId      INT
         );

         DECLARE @TBL_PortalIds TABLE(ProtalId INT);
         DECLARE @TBL_SEODetails TABLE
         (loc                   NVARCHAR(MAX),
          lastmod               DATETIME,
          [g:condition]         VARCHAR(100),
          [description]         NVARCHAR(MAX),
          [g:id]                INT,
          link                  VARCHAR(100),
          [g:identifier_exists] VARCHAR(200),
          DomainName            NVARCHAR(300),
          PortalId              INT,
		  SEOCode               NVARCHAR(4000),
		  CanonicalURL          NVARCHAR(200),
		  RobotTag              NVARCHAR(50)
         );

         INSERT INTO @TBL_PortalIds
                SELECT Zp.PortalId
                FROM Znodeportal AS ZP
                INNER JOIN ZnodeBlogNews AS ZBN ON(ZBN.PortalId = Zp.PortalId)
                WHERE EXISTS
                (
                    SELECT TOP 1 1
                    FROM DBO.Split(@PortalID, ',') AS Sp
                    WHERE(CAST(sp.Item AS INT) = ZP.PortalId
                          OR @PortalID = '0' )
                )
                GROUP BY Zp.PortalId;

         INSERT INTO @TBL_DomainName
                SELECT ZD.PortalId,ZD.DomainName,                     
                       ROW_NUMBER() OVER(PArtition BY ZD.PortalId ORDER BY ZD.DomainName desc) RowId
                FROM ZnodeDomain ZD
                WHERE EXISTS
                (
                    SELECT TOP 1 1
                    FROM @TBL_PortalIds TBP
                    WHERE TBP.ProtalId = ZD.PortalId
                )
			AND IsActive =1 
			AND applicationType = 'Webstore'
			AND ZD.DomainName in ('www.windycitynovelties.com','www.nightflyer.com') ;

		 ---------- CMS Content Page Details
         ;WITH Cte_SeoDetailsWithLocale AS 
		 (
				SELECT DISTINCT ZCSD.CMSSEODetailId,ZCSD.SEOURL AS loc,ZCSD.ModifiedDate AS lastmod,'new' AS [g:condition],ZCSDL.SEODescription AS [description],ZBN.BlogNewsId AS [g:id],'' AS link,'false' AS [g:identifier_exists],TBDN.DomainName,ZBN.PortalId,ISNULL(ZCSDL.LocaleId, @DefaultLocaleId) AS LocaleId, ZCSD.SEOCode
				,ZCSDL.CanonicalURL, ZCSDL.RobotTag
                FROM ZnodeBlogNews AS ZBN 
                LEFT JOIN ZnodeCMSSEODetail AS ZCSD ON(cast(ZBN.BlogNewsId as varchar(100)) = ZCSD.SEOCode AND EXISTS ( SELECT TOP 1 1 FROM ZnodeCMSSEOType AS ZCST WHERE ZCST.CMSSEOTypeId = ZCSD.CMSSEOTypeId
                                                AND ZCST.Name = 'BlogNews'))
                LEFT JOIN ZnodeCMSSEODetailLocale AS ZCSDL ON(ZCSDL.CMSSEODetailId = ZCSD.CMSSEODetailId
                                                        AND LocaleId IN(@LocaleId, @DefaultLocaleId))
                LEFT JOIN @TBL_DomainName AS TBDN ON(TBDN.RowId = 1 AND TBDN.PortalId = ZBN.PortalId )
                WHERE EXISTS
                (
                    SELECT TOP 1 1
                    FROM @TBL_PortalIds TBP
                    WHERE ZBN.PortalId = TBP.ProtalId
                )
				AND ZBN.IsBlogNewsActive =1 
			),
			Cte_SeoDetailsWithFirstLocale AS 
			(
				SELECT * FROM Cte_SeoDetailsWithLocale WHERE LocaleId = @LocaleId
			),
			Cte_SeoDetailsWithDefaultLocale AS 
			(
				  SELECT * FROM Cte_SeoDetailsWithFirstLocale
				  UNION ALL
				  SELECT * FROM Cte_SeoDetailsWithLocale AS CTSDWL
				  WHERE LocaleId = @DefaultLocaleId
				  AND NOT EXISTS
				  (
					  SELECT TOP 1 1
					  FROM Cte_SeoDetailsWithFirstLocale AS CTSDWDL
					  WHERE CTSDWDL.CMSSEODetailId = CTSDWL.CMSSEODetailId
				  )
			)
			INSERT INTO @TBL_SEODetails
            SELECT loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,PortalId, SEOCode,CanonicalURL,RobotTag
            FROM Cte_SeoDetailsWithDefaultLocale

         ;WITH Cte_BlogNews AS 
		 (
			SELECT ZBN.BlogNewsId,ZBNL.BlogNewsTitle,ZBNL.LocaleId,ZBNL.BlogNewsTitle Name
            FROM ZnodeBlogNews ZBN
            INNER JOIN ZnodeBlogNewsLocale ZBNL ON(ZBN.BlogNewsId = ZBNL.BlogNewsId)
            WHERE EXISTS
            (
                SELECT TOP 1 1
                FROM @TBL_SEODetails TBSD
                WHERE TBSD.[g:id] = ZBN.BlogNewsId
            )
            AND LocaleID IN(@LocaleId, @DefaultLocaleId)
		),
		Cte_BlogNewsFirstLocale AS 
		(
			SELECT *
            FROM Cte_BlogNews CTCP
            WHERE LocaleId = @LocaleId
		),
		Cte_BlogNewsSecondLocale AS 
		(
              SELECT *
              FROM Cte_BlogNewsFirstLocale CTPFL
              UNION ALL
              SELECT *
              FROM Cte_BlogNews CTCP
              WHERE LocaleId = @LocaleId
                    AND NOT EXISTS
              (
                  SELECT TOP 1 1
                  FROM Cte_BlogNewsFirstLocale CTCPFL
                  WHERE CTCPFL.BlogNewsId = CTCP.BlogNewsId
              )
		)
        SELECT loc,lastmod,DomainName,'' AS [image], Name,[g:id] BlogNewsId,PortalId,SEOCode, CanonicalURL, RobotTag
        FROM @TBL_SEODetails TBSD
        LEFT JOIN Cte_BlogNewsSecondLocale CTCPSL ON(TBSD.[g:id] = CTCPSL.BlogNewsId);

		END TRY
		BEGIN CATCH
		  DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetBlogFeedList @PortalId = '+@PortalId+',@LocaleId='+CAST(@LocaleId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetBlogFeedList',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
		END CATCH

     END;
GO 
IF EXISTS (SELECT TOP 1 1 FROM SYS.PROCEDURES WHERE name = 'Znode_GetContentFeedList')
BEGIN 
DROP PROCEDURE Znode_GetContentFeedList
END
GO
  
CREATE PROCEDURE [dbo].[Znode_GetContentFeedList]
( @PortalId NVARCHAR(MAX) = NULL,
  @LocaleId INT)
AS
/*
	Summary : This procedure is used to get effective keyword feeding of content list
	Unit Testing:
	EXEC Znode_GetContentFeedList 4,1
	
*/
     BEGIN
         SET NOCOUNT ON;
		 BEGIN TRY
         DECLARE @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId();
         DECLARE @TBL_DomainName TABLE
         (PortalId   INT,
          DomainName NVARCHAR(300),
          RowId      INT
         );

         DECLARE @TBL_PortalIds TABLE(PortalId INT);
         DECLARE @TBL_SEODetails TABLE
         (loc                   NVARCHAR(MAX),
          lastmod               DATETIME,
          [g:condition]         VARCHAR(100),
          [description]         NVARCHAR(MAX),
          [g:id]                INT,
          link                  VARCHAR(100),
          [g:identifier_exists] VARCHAR(200),
          DomainName            NVARCHAR(300),
          PortalId              INT,
		  SEOCode               NVARCHAR(4000),
		  CanonicalURL          NVARCHAR(200),
		  RobotTag              NVARCHAR(50)
         );

		 if object_id('tempdb..#CMSSEOData') is not null
			drop table #CMSSEOData

		 CREATE TABLE #CMSSEOData 
		 (loc varchar(max),lastmod DateTime,DomainName varchar(200),[image] varchar(1000),Name varchar(500), CMSContentPagesId Int,PortalId Int, SEOCode NVARCHAR(4000)
		 , CanonicalURL NVARCHAR(200), RobotTag NVARCHAR(50))

         INSERT INTO @TBL_PortalIds
                SELECT Zp.PortalId
                FROM Znodeportal AS ZP
                INNER JOIN ZnodeCMSContentPages AS ZPC ON(ZPC.PortalId = Zp.PortalId)
                WHERE EXISTS
                (
                    SELECT TOP 1 1
                    FROM DBO.Split(@PortalID, ',') AS Sp
                    WHERE(CAST(sp.Item AS INT) = ZP.PortalId
                          OR @PortalID = '0' )
                )
                GROUP BY Zp.PortalId;

				--select * from @TBL_PortalIds

         INSERT INTO @TBL_DomainName
                SELECT ZD.PortalId,ZD.DomainName,                     
                       ROW_NUMBER() OVER(PArtition BY ZD.DomainName,
                                                  ZD.PortalId ORDER BY ZD.DomainName,
                                                  ZD.PortalId) RowId
                FROM ZnodeDomain ZD
                WHERE EXISTS
                (
                    SELECT TOP 1 1
                    FROM @TBL_PortalIds TBP
                    WHERE TBP.PortalId = ZD.PortalId
                )
			AND IsActive =1 
			AND applicationType = 'Webstore'
			AND ZD.IsDefault = 1
			--AND ZD.DomainName in ('www.windycitynovelties.com','www.nightflyer.com')
				

         ;WITH Cte_SeoDetailsWithLocale
              AS (SELECT DISTINCT ZCSD.CMSSEODetailId,  ZCSD.SEOURL AS loc,ZCSD.ModifiedDate AS lastmod,'new' AS [g:condition],ZCSDL.SEODescription AS [description],ZPCC.CMSContentPagesId AS [g:id],'' AS link,'false' AS [g:identifier_exists],TBDN.DomainName,ZPCC.PortalId,ISNULL(ZCSDL.LocaleId, @DefaultLocaleId) AS LocaleId,ZCSD.SEOCode
			      , ZCSDL.CanonicalURL, ZCSDL.RobotTag
                 FROM ZnodeCMSContentPages AS ZPCC 
                 LEFT JOIN ZnodeCMSSEODetail AS ZCSD ON(ZPCC.PageName = ZCSD.SEOCode AND EXISTS ( SELECT TOP 1 1 FROM ZnodeCMSSEOType AS ZCST WHERE ZCST.CMSSEOTypeId = ZCSD.CMSSEOTypeId
                                                   AND ZCST.Name = 'Content Page') AND ZCSD.PortalId = ZPCC.PortalId )
                 LEFT JOIN ZnodeCMSSEODetailLocale AS ZCSDL ON(ZCSDL.CMSSEODetailId = ZCSD.CMSSEODetailId
                                                            AND LocaleId IN(@LocaleId, @DefaultLocaleId))
                 LEFT JOIN @TBL_DomainName AS TBDN ON(TBDN.RowId = 1 AND TBDN.PortalId = ZPCC.PortalId )
                  WHERE EXISTS
                  (
                      SELECT TOP 1 1
                      FROM @TBL_PortalIds TBP
                      WHERE ZPCC.PortalId = TBP.PortalId
                  )
				  AND EXISTS (SELECT TOP 1 1 FROM   @TBL_PortalIds TBPL
                      WHERE ZCSD.PortalId = TBPL.PortalId  
					  )
				  )
				   
				  --select  * from Cte_SeoDetailsWithLocale

             ,Cte_SeoDetailsWithFirstLocale
              AS (SELECT *
                  FROM Cte_SeoDetailsWithLocale
                  WHERE LocaleId = @LocaleId),

              Cte_SeoDetailsWithDefaultLocale
              AS (
              SELECT *
              FROM Cte_SeoDetailsWithFirstLocale
              UNION ALL
              SELECT *
              FROM Cte_SeoDetailsWithLocale AS CTSDWL
              WHERE LocaleId = @DefaultLocaleId
                    AND NOT EXISTS
              (
                  SELECT TOP 1 1
                  FROM Cte_SeoDetailsWithFirstLocale AS CTSDWDL
                  WHERE CTSDWDL.CMSSEODetailId = CTSDWL.CMSSEODetailId
              ))

              INSERT INTO @TBL_SEODetails
                     SELECT loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,PortalId,SEOCode,CanonicalURL,RobotTag
                     FROM Cte_SeoDetailsWithDefaultLocale;

         WITH Cte_ContentPages
              AS (SELECT ZCCP.CMSContentPagesId,ZCCPl.PageTitle,ZCCPL.LocaleId,ZCCP.PageName
                  FROM ZnodeCMSContentPages ZCCP
                  INNER JOIN ZnodeCMSContentPagesLocale ZCCPL ON(ZCCPL.CMSContentPagesId = ZCCP.CMSContentPagesId)
                  WHERE EXISTS
                  (
                      SELECT TOP 1 1
                      FROM @TBL_SEODetails TBSD
                      WHERE TBSD.[g:id] = ZCCP.CMSContentPagesId
                  )
                        AND LocaleID IN(@LocaleId, @DefaultLocaleId)),

              Cte_ContentPageFirstLocale
              AS (SELECT *
                  FROM Cte_ContentPages CTCP
                  WHERE LocaleId = @LocaleId),

              Cte_ContentPageSecondLocale
              AS (
              SELECT *
              FROM Cte_ContentPageFirstLocale CTPFL
              UNION ALL
              SELECT *
              FROM Cte_ContentPages CTCP
              WHERE LocaleId = @LocaleId
                    AND NOT EXISTS
              (
                  SELECT TOP 1 1
                  FROM Cte_ContentPageFirstLocale CTCPFL
                  WHERE CTCPFL.CMSContentPagesId = CTCP.CMSContentPagesId
              ))
			  INSERT INTO #CMSSEOData(loc,lastmod,DomainName,[image], Name, CMSContentPagesId,PortalId,SEOCode,CanonicalURL,RobotTag)
              SELECT loc,lastmod,DomainName,'' AS [image],PageName Name,[g:id] CMSContentPagesId,PortalId,SEOCode,CanonicalURL,RobotTag
              FROM @TBL_SEODetails TBSD
              LEFT JOIN Cte_ContentPageSecondLocale CTCPSL ON(TBSD.[g:id] = CTCPSL.CMSContentPagesId);

			  ---- CMS SEO Blog News Details
			  INSERT INTO #CMSSEOData(loc,lastmod,DomainName,[image], Name, CMSContentPagesId,PortalId,SEOCode,CanonicalURL,RobotTag)
			  EXEC [Znode_GetBlogFeedList] @PortalId, @LocaleId

			  SELECT loc, REPLACE(CONVERT(VARCHAR(30),lastmod,102),'.','-') AS lastmod,DomainName,[image], Name, CMSContentPagesId,PortalId,CanonicalURL,RobotTag FROM #CMSSEOData

		END TRY
		BEGIN CATCH
		  DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetContentFeedList @PortalId = '+@PortalId+',@LocaleId='+CAST(@LocaleId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetContentFeedList',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
		END CATCH

     END;
GO 

IF EXISTS (SELECT TOP 1 1 FROM SYS.PROCEDURES WHERE name = 'Znode_GetBrandDetailsLocale')
BEGIN 
DROP PROCEDURE Znode_GetBrandDetailsLocale
END
GO
  
CREATE PROCEDURE [dbo].[Znode_GetBrandDetailsLocale]  
( @WhereClause  NVARCHAR(MAX),  
  @Rows    INT           = 10,  
  @PageNo   INT           = 1,  
  @Order_BY   VARCHAR(1000) = '',  
  @RowsCount  INT           = 0 OUT,  
  @LocaleId   INT           = 1,    
  @IsAssociated  BIT           = 0,  
  @PromotionId      INT     = 0   
)  
AS  
  /*  
     Summary :- This Procedure is used to get brand localies   
     Unit Testing   
  begin tran  
     EXEC Znode_GetBrandDetailsLocale ''isactive = 'true''',@RowsCount= 1,@LocaleId = 1   
  rollback tran    
 */  
  BEGIN  
         BEGIN TRY  
             SET NOCOUNT ON;  
             DECLARE @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId();  
             DECLARE @SeoId VARCHAR(MAX)= '', @SQL NVARCHAR(MAX) , @SeoCode NVARCHAR(MAX) ;
             DECLARE @TBL_BrandDetails TABLE  
             (Description         NVARCHAR(MAX),  
              BrandId             INT,  
              BrandCode           VARCHAR(600),  
              DisplayOrder        INT,  
              IsActive            BIT,  
              WebsiteLink         NVARCHAR(1000),  
              BrandDetailLocaleId INT,  
              SEOFriendlyPageName NVARCHAR(600),  
              MediaPath           NVARCHAR(MAX),  
              MediaId             INT,  
			  ImageName           VARCHAR(300),
			  BrandName VARCHAR(100),	
              Custom1 NVARCHAR(MAX),	
              Custom2 NVARCHAR(MAX),
			  Custom3 NVARCHAR(MAX),
			  Custom4 NVARCHAR(MAX),
			  Custom5 NVARCHAR(MAX)  
             );  
  
    DECLARE @AttributeId INT= [dbo].[Fn_GetProductBrandAttributeId]();  
             DECLARE @TBL_AttributeDefault TABLE  
             (PimAttributeId            INT,  
              AttributeDefaultValueCode VARCHAR(600),  
              IsEditable                BIT,  
              AttributeDefaultValue     NVARCHAR(MAX)  
			 ,DisplayOrder INT   
             );  
             DECLARE @TBL_SeoDetails TABLE  
             (CMSSEODetailId       INT,  
              SEOTitle             NVARCHAR(MAX),  
              SEOKeywords          NVARCHAR(MAX),  
              SEOURL               NVARCHAR(MAX),  
              ModifiedDate         DATETIME,  
              SEODescription       NVARCHAR(MAX),  
              MetaInformation      NVARCHAR(MAX),  
              IsRedirect           BIT,  
              CMSSEODetailLocaleId INT,  
              --SEOId                INT ,
			  PublishStatus        NVARCHAR(20),
			  SEOCode				NVARCHAR(4000),
			  CanonicalURL  VARCHAR(200),
			  RobotTag      VARCHAR(50)
			   
             );  
             DECLARE @TBL_BrandDetail TABLE  
             (Description          NVARCHAR(MAX),  
              BrandId              INT,  
              BrandCode            VARCHAR(600),  
              DisplayOrder         INT,  
              IsActive             BIT,  
              WebsiteLink          NVARCHAR(1000),  
              BrandDetailLocaleId  INT,  
              MediaPath            NVARCHAR(MAX),  
              MediaId              INT,  
			  ImageName      VARCHAr(300) ,  
              CMSSEODetailId       INT,  
              SEOTitle             NVARCHAR(MAX),  
              SEOKeywords          NVARCHAR(MAX),  
              SEOURL               NVARCHAR(MAX),  
              ModifiedDate         DATETIME,  
              SEODescription       NVARCHAR(MAX),  
              MetaInformation      NVARCHAR(MAX),  
              IsRedirect           BIT,  
              CMSSEODetailLocaleId INT,  
              --SEOId                INT,  
              BrandName            NVARCHAR(MAX),  
              RowId                INT,  
              CountId              INT ,
			  SEOCode              NVARCHAR(4000), 
			  Custom1              NVARCHAR(MAX),
			  Custom2              NVARCHAR(MAX),
			  Custom3              NVARCHAR(MAX),
			  Custom4              NVARCHAR(MAX),
			  Custom5              NVARCHAR(MAX)
             );  
             IF @PromotionId > 0  
    BEGIN   
      
     SET @SeoId = ISNULL(SUBSTRING((SELECT ','+CAST(BrandId AS VARCHAR(50))  
     FROM ZnodePromotionBrand   
     WHERE PromotionId= @PromotionId  FOR XML PATH ('') ),2,4000),'0')  
  
     SET @WhereClause = CASE WHEN @IsAssociated = 1 THEN ' BrandId IN (' ELSE ' BrandId NOT IN (' END  +@SeoId+') AND '+CASE WHEN @WhereClause = '' THEN '1=1' ELSE @WhereClause END   
     SET @SeoId = ''  
    END    
      
   --  INSERT INTO @TBL_AttributeDefault  
   --EXEC Znode_GetAttributeDefaultValueLocale @AttributeId,@LocaleId;  
      
  
   --  IF @PromotionId = 0  
   -- BEGIN   
      
     
   --           SET @WhereClause = ' '+@WhereClause+CASE  
   --                                           WHEN @IsAssociated = 1  
   --                                                  THEN CASE  
   --                                                           WHEN @WhereClause = ''  
   --                                                           THEN ' '  
   --                                                           ELSE ' AND '  
   --                                                       END+' EXISTS ( SELECT TOP 1 1 FROM ZnodeBrandDetails BD INNER JOIN ZnodeBrandDetailLocale BDL ON (BD.BrandId = BDL.BrandId)   
                    
   --                                        WHERE ( BD.BrandCode = TMADV.BrandCode))'  
   --                                                  ELSE CASE  
   --                                                           WHEN @WhereClause = ''  
   --                                                           THEN ' 1 = 1  '  
   --                                                           ELSE ''  
   --                                                       END  
   --                                               END;  
   --END    
  
    
             ;WITH Cte_GetBrandBothLocale AS 
			 (
				SELECT ZBDL.Description,ZBD.BrandId,LocaleId,ZBD.BrandCode,ZBD.DisplayOrder,ZBD.IsActive,ZBD.WebsiteLink,ZBDl.BrandDetailLocaleId,  
				 SEOFriendlyPageName,[dbo].[Fn_GetMediaThumbnailMediaPath](Zm.path) MediaPath,ZBD.MediaId,Zm.path ImageName, ZBDL.BrandName, ZBD.Custom1, ZBD.Custom2, ZBD.Custom3, ZBD.Custom4, ZBD.Custom5 
				FROM ZnodeBrandDetails ZBD  
				LEFT JOIN ZnodeBrandDetailLocale ZBDL ON(ZBD.BrandId = ZBDL.BrandId)  
				LEFT JOIN ZnodeMedia ZM ON(ZM.MediaId = ZBD.MediaId)  
				WHERE LocaleId IN(@LocaleId, @DefaultLocaleId)  
              
             ),  
             Cte_BrandFirstLocale AS 
			(
				SELECT Description,BrandId,LocaleId,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,SEOFriendlyPageName,MediaPath,MediaId,ImageName , BrandName, Custom1, Custom2, Custom3, Custom4, Custom5  
                FROM Cte_GetBrandBothLocale CTGBBL  
                WHERE LocaleId = @LocaleId
			),  
            Cte_BrandDefaultLocale AS 
			(
				SELECT Description,BrandId,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,SEOFriendlyPageName,MediaPath,MediaId,ImageName, BrandName, Custom1, Custom2, Custom3, Custom4, Custom5  
                FROM Cte_BrandFirstLocale  
                UNION ALL  
                SELECT Description,BrandId,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,SEOFriendlyPageName,MediaPath,MediaId,ImageName , BrandName, Custom1, Custom2, Custom3, Custom4, Custom5 
				FROM Cte_GetBrandBothLocale CTBBL  
				WHERE LocaleId = @DefaultLocaleId  
				AND NOT EXISTS  
            (  
                SELECT TOP 1 1  
                FROM Cte_BrandFirstLocale CTBFL  
                WHERE CTBBL.BrandId = CTBFL.BrandId  
            ))  
  
            INSERT INTO @TBL_BrandDetails (Description,BrandId,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,MediaPath,MediaId,ImageName, BrandName, Custom1, Custom2, Custom3, Custom4, Custom5)  
            SELECT Description,BrandId,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,MediaPath,MediaId,ImageName , BrandName, Custom1, Custom2, Custom3, Custom4, Custom5 
            FROM Cte_BrandDefaultLocale CTEBD;  
            
			-----Update BrandName from attributedefault value
			;WITH Cte_GetBrandNameLocale AS 
			 (
				select d.brandcode, a.AttributeDefaultValueCode, b.AttributeDefaultValue, b.LocaleId 
				from ZnodePimAttributeDefaultValue a
				inner join ZnodePimAttributeDefaultValueLocale b on a.PimAttributeDefaultValueId = b.PimAttributeDefaultValueId 
				inner join ZnodePimAttribute c on a.PimAttributeId = c.PimAttributeId
				inner join @TBL_BrandDetails d on a.AttributeDefaultValueCode = d.brandcode
				where c.attributecode = 'brand' and b.LocaleId IN(@LocaleId, @DefaultLocaleId)
              
             )
			 ,Cte_BrandNameFirstLocale AS 
			(
				SELECT brandcode, AttributeDefaultValueCode, AttributeDefaultValue, LocaleId  
                FROM Cte_GetBrandNameLocale CTGBBL  
                WHERE LocaleId = @LocaleId
			)
			,Cte_BrandDefaultLocale AS 
			(
				SELECT brandcode, AttributeDefaultValueCode, AttributeDefaultValue, LocaleId  
                FROM Cte_BrandNameFirstLocale  
                UNION ALL  
                SELECT brandcode, AttributeDefaultValueCode, AttributeDefaultValue, LocaleId  
				FROM Cte_GetBrandNameLocale CTBBL  
				WHERE LocaleId = @DefaultLocaleId  
				AND NOT EXISTS  
				(  
					SELECT TOP 1 1  
					FROM Cte_BrandNameFirstLocale CTBFL  
					WHERE CTBBL.brandcode = CTBFL.brandcode  
				)
			)  
			update b1 set b1.brandname = a1.AttributeDefaultValue
			from Cte_BrandDefaultLocale a1
			inner join @TBL_BrandDetails b1 on a1.brandcode = b1.brandcode
			     
      SET @SeoCode = SUBSTRING(  
                                   (  
                                       SELECT ','+CAST(BrandCode AS VARCHAR(600))  
     FROM @TBL_BrandDetails  
                                       FOR XML PATH('')  
                                   ), 2, 4000);  


                  INSERT INTO @TBL_SeoDetails (CMSSEODetailId,SEOTitle,SEOKeywords,SEOURL,ModifiedDate,SEODescription,MetaInformation,IsRedirect,CMSSEODetailLocaleId,PublishStatus,SEOCode
				  ,CanonicalURL,RobotTag)  
                  EXEC Znode_GetSeoDetails 
                  @SeoCode,  
                  'Brand',  
                  @LocaleId;  
                  
      SELECT TBBD.*,TBSD.*--,TBAD.AttributeDefaultValue BrandName,TBAD.AttributeDefaultValueCode  
      INTO #TM_BrandLocale  
      FROM @TBL_BrandDetails TBBD  
                  LEFT JOIN @TBL_SeoDetails TBSD ON(TBSD.SEOCode = TBBD.BrandCode)  
                  --INNER JOIN @TBL_AttributeDefault TBAD ON(TBAD.AttributeDefaultValueCode = TBBD.BrandCode);  
  

 

             SET @SQL = '   
             ;With Cte_BrandDetails AS   
    (  
     SELECT * ,'+[dbo].[Fn_GetPagingRowId](@Order_BY, 'BrandId DESC')+',Count(*)Over() CountId  
     FROM #TM_BrandLocale TMADV  
     WHERE 1=1  
     '+[dbo].[Fn_GetFilterWhereClause](@WhereClause)+'  
  
       )  
    SELECT Description  , BrandId , BrandCode , DisplayOrder  ,IsActive  ,WebsiteLink ,BrandDetailLocaleId   
         , MediaPath ,MediaId,ImageName ,CMSSEODetailId ,SEOTitle ,SEOKeywords , SEOURL   
         , ModifiedDate  ,  SEODescription   ,MetaInformation   ,IsRedirect ,CMSSEODetailLocaleId  
         ,BrandName ,RowId  ,CountId ,SEOCode,  Custom1, Custom2, Custom3, Custom4, Custom5   
    FROM Cte_BrandDetails  
    '+[dbo].[Fn_GetOrderByClause](@Order_BY, 'BrandId DESC')+' ';  
  
  print @SQL
             INSERT INTO @TBL_BrandDetail  
             (  
    Description,BrandId,BrandCode,DisplayOrder,IsActive,WebsiteLink,  
    BrandDetailLocaleId,MediaPath,MediaId,ImageName,CMSSEODetailId,SEOTitle,  
    SEOKeywords,SEOURL,ModifiedDate,SEODescription,MetaInformation,IsRedirect,  
    CMSSEODetailLocaleId,BrandName,RowId,CountId ,SEOCode , Custom1, Custom2, Custom3, Custom4, Custom5   
    )  
             EXEC (@SQL);  
             SET @RowsCount = ISNULL(  
                                    (  
                                        SELECT TOP 1 CountId  
                                        FROM @TBL_BrandDetail  
                                    ), 0);  
             SELECT BrandId,Description,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,MediaPath,MediaId,ImageName,CMSSEODetailId,SEOTitle,SEOKeywords,SEOURL SEOFriendlyPageName,SEODescription,MetaInformation,IsRedirect,CMSSEODetailLocaleId,BrandName,@PromotionId PromotionId   
             ,SEOCode,Custom1, Custom2, Custom3, Custom4, Custom5
			 FROM @TBL_BrandDetail;  
         END TRY  
         BEGIN CATCH  
            DECLARE @Status BIT ;  
       SET @Status = 0;  
       DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),   
    @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetBrandDetailsLocale @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@LocaleId = '+CAST(@LocaleId AS VARCHAR(50))
	+',@IsAssociated='+CAST(@IsAssociated AS VARCHAR(50))+',@PromotionId='+CAST(@PromotionId AS VARCHAR(50))+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));  
                    
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                      
      
             EXEC Znode_InsertProcedureErrorLog  
    @ProcedureName = 'Znode_GetBrandDetailsLocale',  
    @ErrorInProcedure = @Error_procedure,  
    @ErrorMessage = @ErrorMessage,  
    @ErrorLine = @ErrorLine,  
    @ErrorCall = @ErrorCall;  
         END CATCH;  
     END;
GO 


 -----------Data Changes---------------
INSERT INTO ZnodeImportTemplate(
ImportHeadId,TemplateName,TemplateVersion,PimAttributeFamilyId,IsActive,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select (select top 1 ImportHeadId from ZnodeImportHead where Name = 'SEODetails')ImportHeadId,
'SEODetailsTemplate' TemplateName,NULL TemplateVersion,NULL PimAttributeFamilyId,1 IsActive,2 CreatedBy,getdate() CreatedDate,2 ModifiedBy,getdate()  ModifiedDate
where not exists (SELECT top 1 1 from ZnodeImportTemplate where TemplateName='SEODetailsTemplate')

 ---------ZnodeImportTemplateMapping
insert into ZnodeImportTemplateMapping(ImportTemplateId,	SourceColumnName,	TargetColumnName,	DisplayOrder,	IsActive,	IsAllowNull,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate)
select ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'SEODetails') and TemplateName = 'SEODetailsTemplate' ),
       'CanonicalURL','CanonicalURL', 0,0,0,2,getdate(),2,GETDATE()
where not exists (select * from ZnodeImportTemplateMapping where ImportTemplateId = ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'SEODetails') and TemplateName = 'SEODetailsTemplate' )
and SourceColumnName = 'CanonicalURL')
and exists(select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'SEODetails') and TemplateName = 'SEODetailsTemplate' )

insert into ZnodeImportTemplateMapping(ImportTemplateId,	SourceColumnName,	TargetColumnName,	DisplayOrder,	IsActive,	IsAllowNull,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate)
select ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'SEODetails') and TemplateName = 'SEODetailsTemplate' ),
       'RobotTag','RobotTag', 0,0,0,2,getdate(),2,GETDATE()
where not exists (select * from ZnodeImportTemplateMapping where ImportTemplateId = ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'SEODetails') and TemplateName = 'SEODetailsTemplate' )
and SourceColumnName = 'RobotTag')
and exists(select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'SEODetails') and TemplateName = 'SEODetailsTemplate' )

---------ZnodeImportAttributeValidation
INSERT INTO ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
SELECT 'Text', 'CanonicalURL', (select top 1 ImportHeadId from ZnodeImportHead where Name = 'SEODetails'),0,'Text','RegularExpression',NULL,'','',NULL,2,GETDATE(),2,GETDATE(),13
WHERE NOT EXISTS(SELECT * FROM ZnodeImportAttributeValidation WHERE AttributeCode = 'CanonicalURL' AND ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'SEODetails'))

INSERT INTO ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
SELECT 'Text', 'RobotTag', (select top 1 ImportHeadId from ZnodeImportHead where Name = 'SEODetails'),0,'Text','RegularExpression',NULL,'','',NULL,2,GETDATE(),2,GETDATE(),14
WHERE NOT EXISTS(SELECT * FROM ZnodeImportAttributeValidation WHERE AttributeCode = 'RobotTag' AND ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'SEODetails'))
go 

UPDATE ZnodeReportDetails
SET IsActive = 1
WHERE ReportCode = 'Coupons'
go 
INSERT INTO ZnodeReportSetting (ReportCode,SettingXML,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,DisplayMode,StyleSheetId
,DefaultLayoutXML)
SELECT 'Coupons','<?xml version="1.0" encoding="utf-16"?> <columns>  <column>   <id>1</id>   <name>StoresName</name>   <headertext>Store Name</headertext>   <width>0</width>   <datatype>string</datatype>   <columntype>string</columntype>   <isvisible>y</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <value>StoreWithCurrency</value>   <parametertype>text</parametertype>  </column>  <column>   <id>2</id>   <name>BeginDate</name>   <headertext>Begin Date and Time</headertext>   <width>0</width>   <datatype>datetime</datatype>   <columntype>datetime</columntype>   <isvisible>y</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <value></value>   <parametertype>text</parametertype>  </column>  <column>   <id>3</id>   <name>EndDate</name>   <headertext>End Date and Time</headertext>   <width>0</width>   <datatype>datetime</datatype>   <columntype>datetime</columntype>   <isvisible>y</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <value></value>   <parametertype>text</parametertype>  </column>  <column>   <id>4</id>   <name>DiscountTypes</name>   <headertext>Promotion Type</headertext>   <width>0</width>   <datatype>string</datatype>   <columntype>string</columntype>   <isvisible>y</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <value></value>   <parametertype>text</parametertype>  </column>  <column>   <id>5</id>   <name>VisibleColumns</name>   <headertext>Visible Columns</headertext>   <width>0</width>   <datatype>string</datatype>   <columntype>string</columntype>   <isvisible>y</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <value></value>   <parametertype>text</parametertype>  </column>  <column>   <id>6</id>   <name>StoreName</name>   <headertext>Store Name</headertext>   <width>0</width>   <datatype>string</datatype>   <columntype>string</columntype>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>y</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <value></value>   <parametertype>text</parametertype>  </column>  <column>   <id>7</id>   <name>PromotionCode</name>   <headertext>Promotion Code</headertext>   <width>0</width>   <datatype>string</datatype>   <columntype>string</columntype>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>y</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <value></value>   <parametertype>text</parametertype>  </column>  <column>   <id>8</id>   <name>PromotionName</name>   <headertext>Promotion Name</headertext>   <width>0</width>   <datatype>string</datatype>   <columntype>string</columntype>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>y</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <value></value>   <parametertype>text</parametertype>  </column>  <column>   <id>9</id>   <name>CouponCode</name>   <headertext>Coupon Code</headertext>   <width>0</width>   <datatype>string</datatype>   <columntype>string</columntype>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>y</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <value></value>   <parametertype>text</parametertype>  </column>  <column>   <id>10</id>   <name>Description</name>   <headertext>Description</headertext>   <width>0</width>   <datatype>string</datatype>   <columntype>string</columntype>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>y</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <value></value>   <parametertype>text</parametertype>  </column>  <column>   <id>11</id>   <name>DiscountType</name>   <headertext>Promotion Type</headertext>   <width>0</width>   <datatype>string</datatype>   <columntype>string</columntype>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>y</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <value></value>   <parametertype>text</parametertype>  </column>  <column>   <id>12</id>   <name>NumberofUses</name>   <headertext>Number of Uses</headertext>   <width>0</width>   <datatype>string</datatype>   <columntype>string</columntype>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>y</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <value></value>   <parametertype>text</parametertype>  </column>  <column>   <id>13</id>   <name>SalesTotal</name>   <headertext>Sales Total</headertext>   <width>0</width>   <datatype>string</datatype>   <columntype>string</columntype>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>y</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <value></value>   <parametertype>text</parametertype>  </column>  <column>   <id>14</id>   <name>DiscountTotal</name>   <headertext>Discount Total</headertext>   <width>0</width>   <datatype>string</datatype>   <columntype>string</columntype>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>y</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <value></value>   <parametertype>text</parametertype>  </column>  <column>   <id>15</id>   <name>ActivationDate</name>   <headertext>Activation Date</headertext>   <width>0</width>   <datatype>string</datatype>   <columntype>string</columntype>   <isvisible>y</isvisible>   <mustshow>n</mustshow>   <musthide>y</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <value></value>   <parametertype>text</parametertype>  </column>  <column>   <id>16</id>   <name>ExpirationDate</name>   <headertext>Expiration Date</headertext>   <width>0</width>   <datatype>string</datatype>   <columntype>string</columntype>   <isvisible>y</isvisible>   <mustshow>n</mustshow>   <musthide>y</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <value></value>   <parametertype>text</parametertype>  </column> </columns>',
2,GETDATE(),2,GETDATE(),1,1,'<?xml version="1.0" encoding="utf-8"?> <XtraReportsLayoutSerializer SerializerVersion="17.2.7.0" Ref="1" ControlType="Coupons, Znode.Libraries.DevExpress.Report, Version=9.2.0.0, Culture=neutral, PublicKeyToken=null" Landscape="true" Margins="23, 26, 29, 48" PaperKind="Custom" PageWidth="1500" PageHeight="827" Version="17.2" RequestParameters="false" DataSource="#Ref-0">  <Parameters>   <Item1 Ref="4" Description="Store Name" LookUpSettings="#Ref-2" MultiValue="true" ValueInfo="Fine Foods ($)|Wine &amp; Cheese ($)|Nut Wholesaler ($)|ModernB2C ($)" Name="StoresName" />   <Item2 Ref="6" Description="Begin Date and Time" ValueInfo="2019-05-01" Name="BeginDate" Type="#Ref-5" />   <Item3 Ref="7" Description="End Date and Time" ValueInfo="2019-05-31" Name="EndDate" Type="#Ref-5" />   <Item4 Ref="9" Description="Promotion Type" LookUpSettings="#Ref-8" MultiValue="true" ValueInfo="PROMOCODE|COUPONCODE|GIFTCARD|CSRDISCOUNT" Name="DiscountTypes" />   <Item5 Ref="11" Description="Visible Columns" LookUpSettings="#Ref-10" MultiValue="true" ValueInfo="Store Name|Promotion Code|Promotion Name|Discount Amount|Coupon Code|Description|Discount Type|Number of Uses|Sales Total|Discount Total" Name="VisibleColumns" />  </Parameters>  <Bands>   <Item1 Ref="12" ControlType="DetailBand" Name="Detail" HeightF="25" TextAlignment="TopLeft" Padding="0,0,0,0,100">    <Controls>     <Item1 Ref="13" ControlType="XRTable" Name="xrTable2" SizeF="1448,25" LocationFloat="0, 0" EvenStyleName="EvenStyle" OddStyleName="OddStyle">      <Rows>       <Item1 Ref="14" ControlType="XRTableRow" Name="xrTableRow2" Weight="11.5">        <Cells>         <Item1 Ref="15" ControlType="XRTableCell" Name="xrTableCell11" Weight="0.087225574891687" CanShrink="true" Text="xrTableCell11" StyleName="TableRow" Padding="2,2,0,0,100">          <ExpressionBindings>           <Item1 Ref="16" Expression="[StoreName]" PropertyName="Text" EventName="BeforePrint" />          </ExpressionBindings>         </Item1>         <Item2 Ref="17" ControlType="XRTableCell" Name="xrTableCell12" Weight="0.099584736603197582" CanShrink="true" Text="xrTableCell12" StyleName="TableRow" Padding="2,2,0,0,100">          <ExpressionBindings>           <Item1 Ref="18" Expression="[PromotionCode]" PropertyName="Text" EventName="BeforePrint" />          </ExpressionBindings>         </Item2>         <Item3 Ref="19" ControlType="XRTableCell" Name="xrTableCell13" Weight="0.12038402333645173" CanShrink="true" Text="xrTableCell13" StyleName="TableRow" Padding="2,2,0,0,100">          <ExpressionBindings>           <Item1 Ref="20" Expression="[PromotionName]" PropertyName="Text" EventName="BeforePrint" />          </ExpressionBindings>         </Item3>         <Item4 Ref="21" ControlType="XRTableCell" Name="xrTableCell14" Weight="0.10609463613636729" CanShrink="true" Text="xrTableCell14" TextAlignment="MiddleRight" StyleName="TableRow" Padding="2,2,0,0,100">          <ExpressionBindings>           <Item1 Ref="22" Expression="[CouponCode]" PropertyName="Text" EventName="BeforePrint" />          </ExpressionBindings>         </Item4>         <Item5 Ref="23" ControlType="XRTableCell" Name="xrTableCell15" Weight="0.10219200302911535" CanShrink="true" Text="xrTableCell15" TextAlignment="MiddleRight" StyleName="TableRow" Padding="2,2,0,0,100">          <ExpressionBindings>           <Item1 Ref="24" Expression="[Description]" PropertyName="Text" EventName="BeforePrint" />          </ExpressionBindings>         </Item5>         <Item6 Ref="25" ControlType="XRTableCell" Name="xrTableCell16" Weight="0.098161163398291132" CanShrink="true" Text="xrTableCell16" TextAlignment="MiddleRight" StyleName="TableRow" Padding="2,2,0,0,100">          <ExpressionBindings>           <Item1 Ref="26" Expression="[DiscountType]" PropertyName="Text" EventName="BeforePrint" />          </ExpressionBindings>         </Item6>         <Item7 Ref="27" ControlType="XRTableCell" Name="xrTableCell17" Weight="0.098999123513073967" CanShrink="true" Text="xrTableCell17" StyleName="TableRow" Padding="2,2,0,0,100">          <ExpressionBindings>           <Item1 Ref="28" Expression="[NumberOfUses]" PropertyName="Text" EventName="BeforePrint" />          </ExpressionBindings>         </Item7>         <Item8 Ref="29" ControlType="XRTableCell" Name="xrTableCell18" Weight="0.091107926766324066" CanShrink="true" TextFormatString="{0:$0.00}" Text="xrTableCell18" StyleName="TableRow" Padding="2,2,0,0,100">          <ExpressionBindings>           <Item1 Ref="30" Expression="[SalesTotal]" PropertyName="Text" EventName="BeforePrint" />          </ExpressionBindings>         </Item8>         <Item9 Ref="31" ControlType="XRTableCell" Name="xrTableCell19" Weight="0.069639159643755374" CanShrink="true" TextFormatString="{0:$0.00}" Text="xrTableCell19" StyleName="TableRow" Padding="2,2,0,0,100">          <ExpressionBindings>           <Item1 Ref="32" Expression="[DiscountTotal]" PropertyName="Text" EventName="BeforePrint" />          </ExpressionBindings>         </Item9>         <Item10 Ref="33" ControlType="XRTableCell" Name="xrTableCell29" Weight="0.073236017883681268" Text="xrTableCell29" StyleName="TableRow" Padding="1,1,1,1,100">          <ExpressionBindings>           <Item1 Ref="34" Expression="[ActivationDate]" PropertyName="Text" EventName="BeforePrint" />          </ExpressionBindings>         </Item10>         <Item11 Ref="35" ControlType="XRTableCell" Name="xrTableCell32" Weight="0.053375401853382264" Text="xrTableCell32" StyleName="TableRow" Padding="1,1,1,1,100">          <ExpressionBindings>           <Item1 Ref="36" Expression="[ExpirationDate]" PropertyName="Text" EventName="BeforePrint" />          </ExpressionBindings>         </Item11>        </Cells>       </Item1>      </Rows>     </Item1>    </Controls>   </Item1>   <Item2 Ref="37" ControlType="TopMarginBand" Name="TopMargin" HeightF="29" TextAlignment="TopLeft" Padding="0,0,0,0,100" />   <Item3 Ref="38" ControlType="BottomMarginBand" Name="BottomMargin" HeightF="48" TextAlignment="TopLeft" Padding="0,0,0,0,100">    <Controls>     <Item1 Ref="39" ControlType="XRPageInfo" Name="xrPageInfo1" PageInfo="DateTime" SizeF="598.4426,23" LocationFloat="0, 25" StyleName="ReportFooterDateTime" Padding="2,2,0,0,100" />     <Item2 Ref="40" ControlType="XRPageInfo" Name="xrPageInfo2" TextFormatString="Page {0} of {1}" TextAlignment="TopRight" SizeF="849.5575,23" LocationFloat="598.4426, 25" StyleName="ReportFooterPaging" Padding="2,2,0,0,100" />    </Controls>   </Item3>   <Item4 Ref="41" ControlType="ReportHeaderBand" Name="reportHeaderBand1" HeightF="96.45832">    <SubBands>     <Item1 Ref="42" ControlType="SubBand" Name="SubBand1" Expanded="false" HeightF="266.6667" Visible="false">      <Controls>       <Item1 Ref="43" ControlType="XRChart" Name="xrChart1" BackColor="White" SizeF="1448,266.6667" LocationFloat="7.947286E-06, 0" BorderColor="Black" Borders="None">        <Chart Ref="44" AutoLayout="true" BackColor="White" PaletteName="Blue Warm">         <DataContainer Ref="45">          <SeriesSerializable>           <Item1 Ref="46" Name="Series 1" ArgumentDataMember="XAxis" ValueDataMembersSerializable="YAxis">            <Label Ref="47" Position="Top" TypeNameSerializable="SideBySideBarSeriesLabel" />           </Item1>          </SeriesSerializable>          <SeriesTemplate Ref="48">           <View Ref="49" TypeNameSerializable="PieSeriesView" />          </SeriesTemplate>         </DataContainer>         <Legend Ref="50" Visibility="False" Name="Default Legend" />         <OptionsPrint Ref="51" ImageFormat="Metafile" />         <Diagram Ref="52" TypeNameSerializable="XYDiagram">          <AxisX Ref="53" VisibleInPanesSerializable="-1" />          <AxisY Ref="54" VisibleInPanesSerializable="-1" />          <DefaultPane Ref="55" EnableAxisXScrolling="False" EnableAxisYScrolling="False" EnableAxisXZooming="False" EnableAxisYZooming="False">           <StackedBarTotalLabel Ref="56">            <ConnectorLineStyle Ref="57" />           </StackedBarTotalLabel>          </DefaultPane>         </Diagram>        </Chart>       </Item1>      </Controls>     </Item1>    </SubBands>    <Controls>     <Item1 Ref="58" ControlType="XRTable" Name="xrTable4" SizeF="444.8176,29.99998" LocationFloat="7.947286E-06, 66.45832" StyleName="ReportHeaderTable1">      <Rows>       <Item1 Ref="59" ControlType="XRTableRow" Name="xrTableRow5" Weight="0.8">        <Cells>         <Item1 Ref="60" ControlType="XRTableCell" Name="xrTableCell53" Weight="1" Text="Order Date is Between:" StyleName="ReportHeaderTable1" Font="Verdana, 6.75pt" Padding="2,2,0,0,100" />        </Cells>       </Item1>       <Item2 Ref="61" ControlType="XRTableRow" Name="xrTableRow4" Weight="0.79999999999999993">        <Cells>         <Item1 Ref="62" ControlType="XRTableCell" Name="xrTableCell52" Weight="1" Text="5/1/2019 12:00:00 AM - 5/31/2019 12:00:00 AM" StyleName="ReportHeaderTableRow" Font="Verdana, 6.75pt" Padding="2,2,0,0,100" />        </Cells>       </Item2>      </Rows>     </Item1>     <Item2 Ref="63" ControlType="XRTable" Name="xrTable5" SizeF="819.8492,30" LocationFloat="444.8174, 66.45832" StyleName="ReportHeaderTable1">      <Rows>       <Item1 Ref="64" ControlType="XRTableRow" Name="xrTableRow6" Weight="0.8">        <Cells>         <Item1 Ref="65" ControlType="XRTableCell" Name="xrTableCell54" Weight="1" Text="Store Name Equals:" StyleName="ReportHeaderTable1" Font="Verdana, 6.75pt" Padding="2,2,0,0,100" />        </Cells>       </Item1>       <Item2 Ref="66" ControlType="XRTableRow" Name="xrTableRow7" Weight="0.79999999999999993">        <Cells>         <Item1 Ref="67" ControlType="XRTableCell" Name="xrTableCell55" Weight="1" Text="Fine Foods ($), Wine &amp; Cheese ($), Nut Wholesaler ($), ModernB2C ($)" StyleName="ReportHeaderTableRow" Padding="2,2,0,0,100" />        </Cells>       </Item2>      </Rows>     </Item2>     <Item3 Ref="68" ControlType="XRLabel" Name="xrLabel3" Text="Coupons Usage" TextAlignment="MiddleLeft" SizeF="270.5014,29.24998" LocationFloat="0, 10.00001" StyleName="ReportHeaderText" Padding="10,2,2,2,100">      <StylePriority Ref="69" UsePadding="false" UseTextAlignment="false" />     </Item3>     <Item4 Ref="70" ControlType="XRLabel" Name="xrLabel1" SizeF="1448,50" LocationFloat="0, 0" StyleName="ReportTitle" Padding="2,2,0,0,100" />    </Controls>   </Item4>   <Item5 Ref="71" ControlType="GroupHeaderBand" Name="groupHeaderBand1" GroupUnion="WithFirstDetail" RepeatEveryPage="true" HeightF="48">    <Controls>     <Item1 Ref="72" ControlType="XRPanel" Name="xrPanel1" SizeF="1448,48" LocationFloat="0, 0">      <Controls>       <Item1 Ref="73" ControlType="XRTable" Name="xrTable1" SizeF="1448,28" LocationFloat="0, 20.00001">        <Rows>         <Item1 Ref="74" ControlType="XRTableRow" Name="xrTableRow1" Weight="1">          <Cells>           <Item1 Ref="75" ControlType="XRTableCell" Name="xrTableCell1" Weight="0.087225573966397546" Text="Store Name" StyleName="TableHeader" Padding="2,2,0,0,100" />           <Item2 Ref="76" ControlType="XRTableCell" Name="xrTableCell2" Weight="0.099584735635692229" Text="Promotion Code" StyleName="TableHeader" Padding="2,2,0,0,100" />           <Item3 Ref="77" ControlType="XRTableCell" Name="xrTableCell3" Weight="0.12038406413330563" Text="Promotion Name" StyleName="TableHeader" Padding="2,2,0,0,100" />           <Item4 Ref="78" ControlType="XRTableCell" Name="xrTableCell4" Weight="0.10609467705986989" Text="Coupon Code" TextAlignment="MiddleRight" StyleName="TableHeader" Padding="2,2,0,0,100" />           <Item5 Ref="79" ControlType="XRTableCell" Name="xrTableCell5" Weight="0.10219192668798874" Text="Description" TextAlignment="MiddleRight" StyleName="TableHeader" Padding="2,2,0,0,100" />           <Item6 Ref="80" ControlType="XRTableCell" Name="xrTableCell6" Weight="0.098161158913146" Text="Promotion Type" TextAlignment="MiddleRight" StyleName="TableHeader" Padding="2,2,0,0,100" />           <Item7 Ref="81" ControlType="XRTableCell" Name="xrTableCell7" Weight="0.09899912234152361" Text="Number of Uses" StyleName="TableHeader" Padding="2,2,0,0,100" />           <Item8 Ref="82" ControlType="XRTableCell" Name="xrTableCell8" Weight="0.0911079367206298" Text="Sales Total" StyleName="TableHeader" Padding="2,2,0,0,100" />           <Item9 Ref="83" ControlType="XRTableCell" Name="xrTableCell9" Weight="0.06963915907134903" Text="Discount Total" StyleName="TableHeader" Padding="2,2,0,0,100" />           <Item10 Ref="84" ControlType="XRTableCell" Name="xrTableCell28" Weight="0.0732360067585698" Text="Activation Date" StyleName="TableHeader" Padding="2,2,0,0,100">            <StylePriority Ref="85" UsePadding="false" />           </Item10>           <Item11 Ref="86" ControlType="XRTableCell" Name="xrTableCell31" Weight="0.053375391021130036" Text="Expiration Date" StyleName="TableHeader" Padding="2,2,0,0,100">            <StylePriority Ref="87" UsePadding="false" />           </Item11>          </Cells>         </Item1>        </Rows>       </Item1>      </Controls>     </Item1>    </Controls>   </Item5>   <Item6 Ref="88" ControlType="GroupFooterBand" Name="GroupFooter1" HeightF="29.16667">    <Controls>     <Item1 Ref="89" ControlType="XRTable" Name="xrTable3" SizeF="1448,28" LocationFloat="0, 0">      <Rows>       <Item1 Ref="90" ControlType="XRTableRow" Name="xrTableRow3" Weight="1">        <Cells>         <Item1 Ref="91" ControlType="XRTableCell" Name="xrTableCell10" Weight="0.087225573966397546" Text="Total" StyleName="TableHeader" Padding="2,2,0,0,100" />         <Item2 Ref="92" ControlType="XRTableCell" Name="xrTableCell20" Weight="0.099584735635692229" StyleName="TableHeader" Padding="2,2,0,0,100" />         <Item3 Ref="93" ControlType="XRTableCell" Name="xrTableCell21" Weight="0.12038397983062388" StyleName="TableHeader" Padding="2,2,0,0,100" />         <Item4 Ref="94" ControlType="XRTableCell" Name="xrTableCell22" Weight="0.10609467705986989" TextAlignment="MiddleRight" StyleName="TableHeader" Padding="2,2,0,0,100" />         <Item5 Ref="95" ControlType="XRTableCell" Name="xrTableCell23" Weight="0.10219201099067049" TextAlignment="MiddleRight" StyleName="TableHeader" Padding="2,2,0,0,100" />         <Item6 Ref="96" ControlType="XRTableCell" Name="xrTableCell24" Weight="0.098161158913146" TextAlignment="MiddleRight" StyleName="TableHeader" Padding="2,2,0,0,100" />         <Item7 Ref="97" ControlType="XRTableCell" Name="xrTableCell25" Weight="0.09899912234152361" StyleName="TableHeader" Padding="2,2,0,0,100">          <ExpressionBindings>           <Item1 Ref="98" Expression="Sum([NumberOfUses])" PropertyName="Text" EventName="BeforePrint" />          </ExpressionBindings>         </Item7>         <Item8 Ref="99" ControlType="XRTableCell" Name="xrTableCell26" Weight="0.091107936720629792" TextFormatString="{0:$0.00}" StyleName="TableHeader" Padding="2,2,0,0,100">          <ExpressionBindings>           <Item1 Ref="100" Expression="Sum([SalesTotal])" PropertyName="Text" EventName="BeforePrint" />          </ExpressionBindings>         </Item8>         <Item9 Ref="101" ControlType="XRTableCell" Name="xrTableCell27" Weight="0.069639159071349155" TextFormatString="{0:$0.00}" StyleName="TableHeader" Padding="2,2,0,0,100">          <ExpressionBindings>           <Item1 Ref="102" Expression="Sum([DiscountTotal])" PropertyName="Text" EventName="BeforePrint" />          </ExpressionBindings>         </Item9>         <Item10 Ref="103" ControlType="XRTableCell" Name="xrTableCell30" Weight="0.073235838153206154" StyleName="TableHeader" Padding="2,2,0,0,100">          <StylePriority Ref="104" UsePadding="false" />         </Item10>         <Item11 Ref="105" ControlType="XRTableCell" Name="xrTableCell33" Weight="0.053375559626490932" StyleName="TableHeader" Padding="2,2,0,0,100">          <StylePriority Ref="106" UsePadding="false" />         </Item11>        </Cells>       </Item1>      </Rows>     </Item1>    </Controls>   </Item6>  </Bands>  <ExportOptions Ref="107">   <Xls Ref="108" ShowGridLines="true" />   <Xlsx Ref="109" ShowGridLines="true" />   <Csv Ref="110" Separator=";" TextExportMode="Value" />  </ExportOptions>  <StyleSheet>   <Item1 Ref="111" Name="TableHeader" BorderStyle="Inset" Padding="5,5,5,5,100" Font="Verdana, 6.75pt, style=Bold, charSet=0" ForeColor="255,35,27,42" BackColor="LightGray" BorderColor="White" Sides="Top, Bottom" StringFormat="Near;Center;0;None;Character;Default" TextAlignment="MiddleLeft" BorderWidthSerializable="1" />   <Item2 Ref="112" Name="TableRow" BorderStyle="Inset" Padding="4,4,4,4,100" Font="Verdana, 6.75pt, charSet=0" ForeColor="255,84,86,89" StringFormat="Near;Near;0;None;Character;Default" TextAlignment="TopLeft" />   <Item3 Ref="113" Name="EvenStyle" BorderStyle="Inset" Padding="4,4,4,4,100" Font="Verdana, 6.75pt, charSet=0" BackColor="White" BorderColor="LightGray" Sides="Bottom" StringFormat="Near;Near;0;None;Character;Default" BorderWidthSerializable="1" />   <Item4 Ref="114" Name="OddStyle" BorderStyle="Inset" Padding="4,4,4,4,100" Font="Verdana, 6.75pt, charSet=0" BackColor="White" BorderColor="LightGray" Sides="Bottom" StringFormat="Near;Near;0;None;Character;Default" BorderWidthSerializable="1" />   <Item5 Ref="115" Name="ReportTitle" BorderStyle="Inset" Font="Verdana, 12pt, style=Bold, charSet=0" ForeColor="White" BackColor="255,60,65,69" BorderColor="255,83,178,77" Sides="Top" StringFormat="Near;Near;0;None;Character;Default" BorderWidthSerializable="4" />   <Item6 Ref="116" Name="ReportFooterPaging" BorderStyle="Inset" Padding="4,4,4,4,100" Font="Verdana, 6.75pt, charSet=0" ForeColor="255,84,86,89" BackColor="White" StringFormat="Near;Near;0;None;Character;Default" />   <Item7 Ref="117" Name="ReportFooterDateTime" BorderStyle="Inset" Padding="4,4,4,4,100" Font="Verdana, 6.75pt, charSet=0" ForeColor="255,84,86,89" BackColor="White" StringFormat="Near;Near;0;None;Character;Default" />   <Item8 Ref="118" Name="ReportNameText" BorderStyle="Inset" Font="Candara, 15.75pt, style=Bold, charSet=0" ForeColor="White" BackColor="255,64,64,64" StringFormat="Far;Center;0;None;Character;Default" TextAlignment="MiddleRight" />   <Item9 Ref="119" Name="ReportHeaderTitleText" BorderStyle="Inset" Padding="2,2,2,2,100" Font="Segoe UI, 9.75pt, style=Bold, Italic, charSet=0" StringFormat="Near;Near;0;None;Character;Default" />   <Item10 Ref="120" Name="ReportHeaderText" BorderStyle="Inset" Padding="2,2,2,2,100" Font="Segoe UI, 12pt, style=Bold, Italic, charSet=0" ForeColor="White" StringFormat="Far;Center;0;None;Character;Default" TextAlignment="MiddleRight" />   <Item11 Ref="121" Name="ReportHeaderTable1" BorderStyle="Inset" Padding="4,4,4,4,100" BorderColor="255,71,180,86" Sides="Left" StringFormat="Near;Near;0;None;Character;Default" BorderWidthSerializable="4" />   <Item12 Ref="122" Name="ReportHeaderTableRow" BorderStyle="Inset" Padding="4,1,1,1,100" Font="Verdana, 6.75pt" BorderColor="255,71,180,86" Sides="Left" StringFormat="Near;Near;0;None;Character;Default" BorderWidthSerializable="4" />   <Item13 Ref="123" Name="RightAlignCell" BorderStyle="Inset" Padding="1,4,1,1,100" ForeColor="255,84,86,89" StringFormat="Far;Center;0;None;Character;Default" TextAlignment="MiddleRight" />   <Item14 Ref="124" Name="TableHeaderRightAlignCell" BorderStyle="Inset" Padding="5,5,5,5,100" Font="Verdana, 6.75pt, style=Bold, charSet=0" ForeColor="255,35,27,42" BackColor="LightGray" BorderColor="White" Sides="Top, Bottom" StringFormat="Far;Center;0;None;Character;Default" TextAlignment="MiddleRight" BorderWidthSerializable="1" />  </StyleSheet>  <ComponentStorage>   <Item1 Ref="125" ObjectType="DevExpress.DataAccess.ObjectBinding.ObjectDataSource,DevExpress.DataAccess.v17.2" Name="objectDataSource1" Base64="PE9iamVjdERhdGFTb3VyY2U+PE5hbWU+b2JqZWN0RGF0YVNvdXJjZTE8L05hbWU+PERhdGFTb3VyY2UgVHlwZT0iWm5vZGUuTGlicmFyaWVzLkRldkV4cHJlc3MuUmVwb3J0LkNvdXBvbk1vZGVsLCBabm9kZS5MaWJyYXJpZXMuRGV2RXhwcmVzcy5SZXBvcnQsIFZlcnNpb249OS4yLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1udWxsIiAvPjwvT2JqZWN0RGF0YVNvdXJjZT4=" />  </ComponentStorage>  <ObjectStorage>   <Item1 Ref="2" ObjectType="DevExpress.XtraReports.Parameters.DynamicListLookUpSettings, DevExpress.Printing.v17.2.Core" DataSource="#Ref-126" ValueMember="DisplayMember" DisplayMember="DisplayMember" />   <Item2 ObjectType="DevExpress.XtraReports.Serialization.ObjectStorageInfo, DevExpress.XtraReports.v17.2" Ref="5" Content="System.DateTime" Type="System.Type" />   <Item3 Ref="8" ObjectType="DevExpress.XtraReports.Parameters.DynamicListLookUpSettings, DevExpress.Printing.v17.2.Core" DataSource="#Ref-127" ValueMember="Value" DisplayMember="Value" />   <Item4 Ref="10" ObjectType="DevExpress.XtraReports.Parameters.DynamicListLookUpSettings, DevExpress.Printing.v17.2.Core" DataSource="#Ref-128" ValueMember="Value" DisplayMember="Value" />   <Item5 ObjectType="DevExpress.XtraReports.Serialization.ObjectStorageInfo, DevExpress.XtraReports.v17.2" Ref="0" Content="~Xtra#NULL" Type="System.Collections.Generic.List`1[[Znode.Engine.Api.Models.ReportCouponModel, Znode.Engine.Api.Models, Version=9.2.0.0, Culture=neutral, PublicKeyToken=null]]" />   <Item6 ObjectType="DevExpress.XtraReports.Serialization.ObjectStorageInfo, DevExpress.XtraReports.v17.2" Ref="126" Content="~Xtra#NULL" Type="System.Collections.Generic.List`1[[Znode.Engine.Api.Models.DevExpressReportParameterModel, Znode.Engine.Api.Models, Version=9.2.0.0, Culture=neutral, PublicKeyToken=null]]" />   <Item7 ObjectType="DevExpress.XtraReports.Serialization.ObjectStorageInfo, DevExpress.XtraReports.v17.2" Ref="127" Content="~Xtra#NULL" Type="System.Collections.Generic.List`1[[Znode.Engine.Api.Models.DevExpressReportParameterModel, Znode.Engine.Api.Models, Version=9.2.0.0, Culture=neutral, PublicKeyToken=null]]" />   <Item8 ObjectType="DevExpress.XtraReports.Serialization.ObjectStorageInfo, DevExpress.XtraReports.v17.2" Ref="128" Content="~Xtra#NULL" Type="System.Collections.Generic.List`1[[Znode.Engine.Api.Models.DevExpressReportParameterModel, Znode.Engine.Api.Models, Version=9.2.0.0, Culture=neutral, PublicKeyToken=null]]" />  </ObjectStorage> </XtraReportsLayoutSerializer>'
WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeReportSetting WHERE ReportCode = 'Coupons')
go 

IF EXISTS (SELECT TOP 1 1 FROM SYS.PROCEDURES WHERE name = 'ZnodeDevExpressReport_GetCouponFiltered')
BEGIN 
DROP PROCEDURE ZnodeDevExpressReport_GetCouponFiltered
END
GO
  
CREATE PROCEDURE [dbo].[ZnodeDevExpressReport_GetCouponFiltered]  
(   
 @BeginDate  DATE        ,  
 @EndDate  DATE         ,  
 @StoreName  VARCHAR(MAX)  = '',  
 @DiscountType   NVARCHAR(MAX) 
)  
AS   
/*  
     Summary:- this procedure is used to get coupon filtered ( include promotion details )  
      
     EXEC ZnodeDevExpressReport_GetCouponFiltered_bak @PromotionCode = 'sale10' ,@DiscountType = 'pro', @BeginDate = '2019-05-07 10:46:57.190', @EndDate = '2019-05-07 10:53:17.617'  
  
   EXEC ZnodeDevExpressReport_GetCouponFiltered  @BeginDate = '2019-05-08 11:56:45.570', @EndDate = '2019-05-15 12:49:34.120'  , @DiscountType ='PROMOCODE|COUPONCODE'
*/  
     BEGIN  
  BEGIN TRY  
         SET NOCOUNT ON;   
  
  
      DECLARE @RoundOffValue INT= dbo.Fn_GetDefaultValue('PriceRoundOff');  
  
   DECLARE @TBL_PortalId TABLE (PortalId INT );  
   INSERT INTO @TBL_PortalId  
   SELECT PortalId   
   FROM ZnodePortal ZP   
   INNER JOIN dbo.split(@StoreName,'|') SP ON (SP.Item = ZP.StoreName)  
  
  
   DECLARE @ZnodeOmsOrderDiscount TABLE( OmsOrderDetailsId  INT,OmsOrderLineItemId INT,OmsDiscountTypeId  INT,DiscountCode VARCHAR(50),DiscountAmount NUMERIC(28, 6),  
   Description NVARCHAR(MAX),CreatedBy INT,CreatedDate DATETIME,ModifiedBy INT,ModifiedDate DATETIME,PortalId INT,Total NUMERIC(28, 6), Symbol NVARCHAR(100), OmsOrderDate Datetime,
   OmsOrderDiscountId INT);  
  

   INSERT INTO @ZnodeOmsOrderDiscount  
   (OmsOrderDetailsId,OmsDiscountTypeId,DiscountCode,DiscountAmount,Description,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PortalId,Total,Symbol, OmsOrderDate,OmsOrderDiscountId)  
   SELECT Distinct ISNULL(zood.OmsOrderDetailsId, zooli.OmsOrderDetailsId) OmsOrderDetailsId,zood.OmsDiscountTypeId,zood.DiscountCode,zood.DiscountAmount,zood.Description,  
   zood.CreatedBy,zood.CreatedDate, zood.ModifiedBy,zood.ModifiedDate,zoods.PortalId, zoods.Total, ISNULL(ZC.Symbol,dbo.Fn_GetDefaultCurrencySymbol()) Symbol,zoods.OrderDate
   ,zood.OmsOrderDiscountId  
   FROM ZnodeOmsOrderDiscount AS zood  
   INNER JOIN ZnodeOmsDiscountType ODT ON (ODT.OmsDiscountTypeId = zood.OmsDiscountTypeId)  
   LEFT  JOIN ZnodeOmsOrderLineItems AS zooli ON zood.OmsOrderLineItemId = zooli.OmsOrderLineItemsId  
   LEFT  JOIN ZnodeOmsOrderDetails AS zoods ON ISNULL(zood.OmsOrderDetailsId, zooli.OmsOrderDetailsId) = zoods.OmsOrderDetailsId  
   INNER JOIN ZnodeOmsOrderState ZOOS ON (ZOODS.OmsOrderStateId = ZOOS.OmsOrderStateId)   
   LEFT JOIN ZnodeCulture ZC ON (ZC.CultureCode = ZOODS.CurrencyCode)  
   WHERE (EXISTS (SELECT TOP 1 1 FROM @TBL_PortalId rt WHERE rt.PortalId = zoods.PortalId)  
   OR NOT EXISTS (SELECT TOP 1 1 FROM @TBL_PortalId ))  
   AND ZOODS.IsActive = 1  
   AND ZOOS.OrderStateName NOT IN ('CANCELLED','RETURNED','REJECTED','FAILED')   
   AND ODT.Name NOT IN ('PARTIALREFUND','GIFTCARD')
        
     
	 
   ;WITH CTE_GetCouponFiltered AS
   (    
   SELECT zood.DiscountCode CouponCode,zdt.[Name] AS DiscountType,zp.[StoreName] AS StoreName,COUNT(zood.OmsOrderDiscountId) AS TotalCount,  
  [dbo].[Fn_GetDefaultPriceRoundOff](zood.Total) AS Total 
   ,[dbo].[Fn_GetDefaultPriceRoundOff](SUM(zood.DiscountAmount)) AS DiscountAmount,  
   ISNULL(zpr.[description], znpc.[description]) AS Description,  
   ISNULL(zpr.StartDate, znpc.StartDate) AS BeginDate,ISNULL(zpr.EndDate, znpc.EndDate) AS EndDate,Symbol, zpr.PromoCode AS PromotionCode , zpr.Name AS PromotionName  
   ,OmsOrderDetailsId
   FROM @ZnodeOmsOrderDiscount AS zood   
   INNER JOIN ZnodePortal AS zp ON zood.PortalId = zp.PortalId  
   LEFT JOIN ZNodePromotion AS zpr ON zood.DiscountCode = zpr.PromoCode  
   LEFT JOIN ZnodePromotionCoupon AS zprc ON zood.DiscountCode = zprc.Code  
   LEFT JOIN ZNodePromotion AS znpc ON zprc.PromotionId = znpc.PromotionId  
   LEFT JOIN ZnodeOmsDiscountType AS zdt ON zood.OmsDiscountTypeId = zdt.OmsDiscountTypeId  
    WHERE CAST(ZOOD.OmsOrderDate AS DATETIME) BETWEEN @BeginDate AND @EndDate       
    AND zdt.[Name] IN (select Item from dbo.split(@DiscountType,'|'))    
    GROUP BY zp.StoreName,zood.DiscountCode
	,ISNULL(zpr.[description], znpc.[description]),ISNULL(zpr.StartDate, znpc.StartDate),ISNULL(zpr.EndDate, znpc.EndDate),  
    zdt.Name,zood.PortalId,Symbol,zpr.PromoCode,zpr.Name, zood.OmsOrderDetailsId,zood.Total
	)  
    
   

   SELECT CASE WHEN DiscountType='promocode' THEN '' ELSE CouponCode END CouponCode, 
   DiscountType,StoreName,SUM(TotalCount) AS NumberOfUses
   ,SUM(convert(numeric(28,6),Total)) SalesTotal
   ,SUM(convert(numeric(28,6),DiscountAmount)) DiscountTotal,
   Description,BeginDate AS ActivationDate,EndDate AS ExpirationDate,
   CASE WHEN DiscountType='couponcode' THEN '' ELSE ISNULL(PromotionCode,CouponCode) END 
   PromotionCode,
   CASE WHEN DiscountType='couponcode' THEN '' ELSE PromotionName END 
   PromotionName 
   FROM CTE_GetCouponFiltered 
   GROUP BY CASE WHEN DiscountType='promocode' THEN '' ELSE CouponCode END ,DiscountType,StoreName,Description,BeginDate,EndDate,CASE WHEN DiscountType='couponcode' THEN '' ELSE ISNULL(PromotionCode,CouponCode) END 
   ,PromotionName

   
       
  END TRY  
  BEGIN CATCH  
  DECLARE @Status BIT ;  
       SET @Status = 0;  
       DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),  
    @ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeReport_GetCouponFiltered @BeginDate='+CAST(@BeginDate AS VARCHAR(200))+',@EndDate='+CAST(@EndDate AS VARCHAR(200))+',@Status='+CAST(@Status AS VARCHAR(10));  
                    
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                      
      
             EXEC Znode_InsertProcedureErrorLog  
    @ProcedureName = 'ZnodeReport_GetCouponFiltered',  
    @ErrorInProcedure = @Error_procedure,  
    @ErrorMessage = @ErrorMessage,  
    @ErrorLine = @ErrorLine,  
    @ErrorCall = @ErrorCall;  
  END CATCH  
     END;  
  
go 

IF NOT EXISTS (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeRobotsTxt' AND COLUMN_NAME = 'DefaultRobotTag')
BEGIN
ALTER TABLE  ZnodeRobotsTxt ADD DefaultRobotTag VARCHAR (50) NULL 
END
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.PROCEDURES WHERE name = 'Znode_GetProductFeedList')
BEGIN 
DROP PROCEDURE Znode_GetProductFeedList
END
GO
CREATE PROCEDURE [dbo].[Znode_GetProductFeedList]  
(   @PortalId   VARCHAR(2000) = NULL,  
    @SKU     SelectColumnList READONLY,  
    @LocaleId   INT,  
    @FeedType   NVARCHAR(MAX) = NULL)  
AS  
/*  
Summary: This Procedure is used to get effective keyword feeding of Product list  
 SELECT * FROM ZnodePublishProductDetail  
 SELECT * FROM ZnodePublishProduct WHERE PublishCatalogId = 3  
 SELECT * FROM ZnodePortalCatalog   
 Unit Testing:  
 EXEC Znode_GetProductFeedList @PortalId='0',@ProductIds = '116,117,118'  
 ,@LocaleId=1,@FeedType='Bing'   
  
*/  
     BEGIN  
  BEGIN TRY  
         SET NOCOUNT ON;        
           
   IF OBJECT_ID('tempdb..#TBL_DomainName') is not null
			drop table #TBL_DomainName

		IF OBJECT_ID('tempdb..#TBL_SEODetails') is not null
			drop table #TBL_SEODetails

		IF OBJECT_ID('tempdb..#TBL_CompleteDetailes') is not null
			drop table #TBL_CompleteDetailes

		IF OBJECT_ID('tempdb..#TBL_CompleteDetailes') is not null
			drop table #TBL_CompleteDetailes

		IF OBJECT_ID('tempdb..#TBL_PortalIds') is not null
			drop table #TBL_PortalIds

		 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
         CREATE TABLE #TBL_DomainName 
         (PortalId   INT,
          DomainName NVARCHAR(300),
          RowId      INT
         );  	
         
         CREATE TABLE #TBL_SEODetails   
         (loc                   NVARCHAR(MAX),  
          lastmod               DATETIME,  
          [g:condition]         VARCHAR(100),  
          [description]         NVARCHAR(MAX),  
          [g:id]                INT,  
          link                  VARCHAR(100),  
          [g:identifier_exists] VARCHAR(200),  
          DomainName            NVARCHAR(300),  
          PortalId              INT , 
          SEOCode             NVARCHAR(4000), 
		  CanonicalURL        VARCHAR(200), 
		  RobotTag            VARCHAR(50)
         );  
         CREATE TABLE #TBL_CompleteDetailes   
         (loc                   NVARCHAR(MAX),  
          lastmod               DATETIME,  
          [g:condition]         VARCHAR(100),  
          [description]         NVARCHAR(MAX),  
          [g:id]                INT,  
          link                  VARCHAR(100),  
          [g:identifier_exists] VARCHAR(200),  
          DomainName            NVARCHAR(300),  
          PortalId              INT,  
          [g:availability]      NVARCHAR(1000),  
          SKU                   NVARCHAR(MAX),  
		  SEOCode               NVARCHAR(4000),
		  CanonicalURL        VARCHAR(200), 
		  RobotTag            VARCHAR(50) 
         );  
         DECLARE @DefaultLocaleId INT=dbo.Fn_GetDefaultLocaleId()  ;
         CREATE TABLE #TBL_PortalIds (PortalId INT);  
   
         INSERT INTO #TBL_PortalIds  
         SELECT Zp.PortalId   
   FROM Znodeportal AS ZP   
   INNER JOIN ZnodePortalCatalog AS ZPC ON(ZPC.PortalId = Zp.PortalId)  
         INNER JOIN ZnodePublishCatalog AS ZPPC ON(ZPPC.PublishCatalogId = ZPC.PublishCatalogId)   
   INNER JOIN ZNodePublishProduct AS ZPP ON(ZPP.PublishCatalogId = ZPPC.PublishCatalogId)  
   INNER JOIN ZnodePublishProductDetail AS PPD ON (PPD.PublishProductId = ZPP.PublishProductId)  
         WHERE EXISTS(SELECT TOP 1 1 FROM @SKU AS Sp WHERE (sp.StringColumn  = PPD.SKU)  OR StringColumn = '0')  
   AND EXISTS(SELECT TOP 1 1 FROM DBO.Split(@PortalId, ',') AS Sp  
      WHERE(CAST(sp.Item AS INT)) = Zp.PortalId  OR @PortalId = '0')  
   AND EXISTS (SELECT TOP 1 1 FROM ZnodeDomain ZD WHERE ZP.PortalId = ZD.PortalId  
   AND IsActive = 1 AND ApplicationType = 'Webstore')  
   GROUP BY Zp.PortalId;   
  
         INSERT INTO #TBL_DomainName   
   SELECT  PortalId,DomainName,ROW_NUMBER() OVER(PARTITION BY PortalId ORDER BY DomainName)   
   FROM ZnodeDomain AS ZD   
         WHERE EXISTS(SELECT TOP 1 1 FROM #TBL_PortalIds AS TBP WHERE TBP.PortalId = ZD.PortalId)  
   AND IsActive = 1 AND ApplicationType = 'Webstore'  
    
  
  
         ;WITH Cte_SeoDetailsWithLocale  
         AS (  
   SELECT DISTINCT ZCSD.CMSSEODetailId,ZCSD.SEOURL AS loc,ZCSD.ModifiedDate AS lastmod,'new' AS [g:condition],ZCSDL.SEODescription AS [description],ZPCC.PublishProductId AS [g:id],  
             '' AS link,'false' AS [g:identifier_exists],TBDN.DomainName,ZPC.PortalId,ISNULL(ZCSDL.LocaleId, @DefaultLocaleId) AS LocaleId , ZCSD.SEOCode , ZCSDL.CanonicalURL, ZCSDL.RobotTag 
    FROM ZNodePublishProduct AS ZPCC   
    INNER JOIN ZnodePortalCatalog AS ZPC ON(ZPC.PublishCatalogId = ZPCC.PublishCatalogId)  
    LEFT JOIN ZnodePublishProductDetail AS PPD ON (PPD.PublishProductId = ZPCC.PublishProductId)  
             -- INNER JOIN @TBL_PortalIds TBLP ON (TBLP.PortalId = ZPC.PortalId)  
    LEFT JOIN ZnodeCMSSEODetail AS ZCSD ON(PPD.SKU = ZCSD.SEOCode and ZCSD.PortalId = ZPC.PortalId)  
             LEFT JOIN ZnodeCMSSEOType AS ZCST ON(ZCST.CMSSEOTypeId = ZCSD.CMSSEOTypeId AND ZCST.Name = 'Product')  
             LEFT JOIN ZnodeCMSSEODetailLocale AS ZCSDL ON(ZCSDL.CMSSEODetailId = ZCSD.CMSSEODetailId AND ZCSDL.LocaleId IN(@LocaleId, @DefaultLocaleId))  
             LEFT JOIN #TBL_DomainName AS TBDN ON(TBDN.RowId = 1 AND TBDN.PortalId = zpc.PortalId )   
    WHERE EXISTS(SELECT TOP 1 1 FROM @SKU AS Sp  
      WHERE (sp.StringColumn  = PPD.SKU) OR StringColumn = '0')  
   AND EXISTS(SELECT TOP 1 1 FROM #TBL_PortalIds AS TBP WHERE TBP.PortalId = ZPC.PortalId )  
    )  
  
         ,Cte_SeoDetailsWithFirstLocale  
         AS (  
    SELECT CMSSEODetailId,loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,PortalId,LocaleId,SEOCode, CanonicalURL, RobotTag  
             FROM Cte_SeoDetailsWithLocale   
    WHERE LocaleId = @LocaleId  
    )           
  ,Cte_SeoDetailsWithDefaultLocale  
         AS (  
    SELECT CMSSEODetailId,loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,PortalId,LocaleId,SEOCode , CanonicalURL, RobotTag 
             FROM Cte_SeoDetailsWithFirstLocale  
             UNION ALL  
             SELECT CMSSEODetailId,loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,PortalId,LocaleId,SEOCode, CanonicalURL, RobotTag  
             FROM Cte_SeoDetailsWithLocale AS CTSDWL  
             WHERE LocaleId = @DefaultLocaleId   
    AND NOT EXISTS(SELECT TOP 1 1 FROM Cte_SeoDetailsWithFirstLocale AS CTSDWDL WHERE CTSDWDL.CMSSEODetailId = CTSDWL.CMSSEODetailId))  
                
   INSERT INTO #TBL_SEODetails  
         SELECT DISTINCT loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,PortalId ,SEOCode, CanonicalURL, RobotTag  
   FROM Cte_SeoDetailsWithDefaultLocale;  
  
    
  
         INSERT INTO #TBL_CompleteDetailes  
         SELECT TBSD.loc,TBSD.lastmod,TBSD.[g:condition],TBSD.[description],TBSD.[g:id],TBSD.link,TBSD.[g:identifier_exists],TBSD.DomainName,TBSD.PortalId,  
         CASE WHEN SUM(ZI.Quantity) > 0 THEN 'In Stock' ELSE CASE WHEN @FeedType = 'Google' THEN 'Out Of Stock' ELSE 'Not In Stock' END  
         END AS [g:availability],ZPPD.SKU ,TBSD.SEOCode, TBSD.CanonicalURL, TBSD.RobotTag  
   FROM ZnodePublishProduct AS ZPP   
   LEFT JOIN #TBL_SEODetails AS TBSD ON(ZPP.PublishProductId = TBSD.[g:id] )  
         LEFT JOIN ZnodePublishProductDetail AS ZPPD ON(ZPPD.PublishProductId = ZPP.PublishProductId AND ZPPD.LocaleId = @LocaleId )  
         LEFT JOIN ZnodePortalWarehouse AS ZPW ON(ZPW.PortalId = TBSD.PortalId)  
         LEFT JOIN ZnodePortalAlternateWarehouse AS ZAPW ON(ZAPW.PortalWarehouseId = ZPW.PortalWarehouseId)  
         LEFT JOIN ZnodeInventory AS ZI ON(ZI.SKU = ZPPD.SKU AND (ZI.WarehouseId = ZPW.WarehouseId OR ZI.WarehouseId = ZAPW.WarehouseId))  
         WHERE EXISTS(SELECT TOP 1 1 FROM @SKU AS Sp WHERE (sp.StringColumn  = ZPPD.SKU) OR StringColumn = '0')  
   AND EXISTS(SELECT TOP 1 1 FROM #TBL_PortalIds AS TBP WHERE TBP.PortalId = TBSD.PortalId )  
         GROUP BY loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,TBSD.PortalId,ZPPD.SKU,ZPPD.LocaleId, TBSD.SEOCode, TBSD.CanonicalURL, TBSD.RobotTag  ;    
           
		    DECLARE @MediaConfiguration NVARCHAR(2000)=((SELECT TOP 1 ISNULL(CASE WHEN CDNURL = '' THEN NULL ELSE CDNURL END,URL) FROM ZnodeMediaConfiguration WHERE IsActive = 1));    
  
         ;WITH Cte_PortalList  
         AS (  
       SELECT zp.PortalId,dbo.Fn_GetDefaultPriceRoundOff(ZPS.RetailPrice)RetailPrice,Zps.SKU,TBCD.SEOCode,ROW_NUMBER() OVER(PARTITION BY Zps.SKU,zp.PortalId ORDER BY ZPS.RetailPrice) AS RowId  
             FROM ZnodePriceList AS ZPL   
    LEFT JOIN ZnodePriceListPortal AS ZPLP ON ZPL.PriceListId = ZPLP.PriceListId  
             LEFT JOIN dbo.ZnodeCulture AS zc ON ZPL.CultureId = zc.CultureId
    LEFT JOIN dbo.ZnodePortal AS zp ON ZPLP.PortalId = zp.PortalId  
             LEFT JOIN ZnodePrice AS Zps ON(Zps.PriceListId = ZPL.PriceListId)   
    LEFT JOIN #TBL_CompleteDetailes AS TBCD ON(TBCD.PortalId = Zp.PortalId AND TBCD.SKU = Zps.Sku)   
    WHERE CAST(@GetDate AS DATE) BETWEEN ZPL.ActivationDate AND ZPL.ExpirationDate   
    AND EXISTS( SELECT TOP 1 1 FROM #TBL_PortalIds AS TBP WHERE TBP.PortalId = ZPLP.PortalId)   
    GROUP BY zp.PortalId,ZPS.RetailPrice,Zps.SKU ,TBCD.SEOCode  
    )  
  
   SELECT loc,lastmod,[g:condition],[description],[g:id],link,[g:availability],[g:identifier_exists],DomainName,TBCD.PortalId  
		 ,CTPL.RetailPrice AS [g:price],@MediaConfiguration AS MediaConfiguration, TBCD.SEOCode, TBCD.CanonicalURL, TBCD.RobotTag 
   FROM #TBL_CompleteDetailes AS TBCD   
   LEFT JOIN Cte_PortalList AS CTPL ON(CTPL.PortalId = TBCD.PortalId AND CTPL.SKU = TBCD.SKU AND CTPL.RowID = 1)  
   WHERE  EXISTS(SELECT TOP 1 1 FROM #TBL_PortalIds AS TBP WHERE TBP.PortalId = TBCD.PortalId )  
  

    IF OBJECT_ID('tempdb..#TBL_DomainName') is not null
			drop table #TBL_DomainName

		IF OBJECT_ID('tempdb..#TBL_SEODetails') is not null
			drop table #TBL_SEODetails

		IF OBJECT_ID('tempdb..#TBL_CompleteDetailes') is not null
			drop table #TBL_CompleteDetailes

		IF OBJECT_ID('tempdb..#TBL_CompleteDetailes') is not null
			drop table #TBL_CompleteDetailes

		IF OBJECT_ID('tempdb..#TBL_PortalIds') is not null
			drop table #TBL_PortalIds

 END TRY  
 BEGIN CATCH  
  DECLARE @Status BIT ;  
  SET @Status = 0;  
  DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetProductFeedList @PortalId = '+@PortalId+',@LocaleId='+CAST(@LocaleId AS VARCHAR(50))+',@FeedType='+CAST(@FeedType AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));  
                    
        SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                      
      
        EXEC Znode_InsertProcedureErrorLog  
   @ProcedureName = 'Znode_GetProductFeedList',  
   @ErrorInProcedure = @Error_procedure,  
   @ErrorMessage = @ErrorMessage,  
   @ErrorLine = @ErrorLine,  
   @ErrorCall = @ErrorCall;  
 END CATCH  
   
  END;
GO


Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Content','GetDefaultCMSSEODetails',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Content' and ActionName = 'GetDefaultCMSSEODetails')


insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy ,CreatedDate,	ModifiedBy, ModifiedDate )
select 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'CMS' AND ControllerName = 'Content'),
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Content' and ActionName= 'GetDefaultCMSSEODetails')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'CMS' AND ControllerName = 'Content') and ActionId = 
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Content' and ActionName= 'GetDefaultCMSSEODetails'))

GO

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Store','GetRobotsTxt',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Store' and ActionName = 'GetRobotsTxt')


insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy ,CreatedDate,	ModifiedBy, ModifiedDate )
select 
 (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store')	
    ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetRobotsTxt') ,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
     (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store') and ActionId = 
     (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetRobotsTxt'))


insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy ,CreatedDate,	ModifiedBy, ModifiedDate )
select 
 (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store'),
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'GetRobotsTxt')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store') and ActionId = 
(select TOP 1 ActionId from ZnodeActions  where ControllerName = 'Store' and ActionName= 'GetRobotsTxt'))

GO


Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'SEO','GetDefaultSEODetails',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'SEO' and ActionName = 'GetDefaultSEODetails')


insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy ,CreatedDate,	ModifiedBy, ModifiedDate )
select 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products'),
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'GetDefaultSEODetails')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products') and ActionId = 
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'GetDefaultSEODetails'))
 GO 

 IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishProductbulk')
BEGIN 
DROP PROCEDURE Znode_GetPublishProductbulk
END
GO
CREATE PROCEDURE [dbo].[Znode_GetPublishProductbulk]
(
@PublishCatalogId INT = 0 
,@VersionId       VARCHAR(50) = 0 
,@PimProductId    TransferId Readonly
,@UserId		  INT = 0 
,@PimCategoryHierarchyId  INT = 0 
,@PimCatalogId INT = 0 
,@LocaleIds TransferId READONLY
,@PublishStateId INT = 0 
)
With RECOMPILE
AS
-- 
/*
DECLARE @rrte transferId 
INSERT INTO @rrte
SELECT 1 

EXEC Znode_GetPublishProductbulk @PublishCatalogId=3,@UserId= 2 ,@localeIDs = @rrte,@PublishStateId = 3 

*/
BEGIN 
  BEGIN TRY 
 SET NOCOUNT ON 

EXEC Znode_InsertUpdatePimAttributeXML 1 
EXEC Znode_InsertUpdateCustomeFieldXML 1
EXEC Znode_InsertUpdateAttributeDefaultValue 1 

DECLARE @PortalId INT = (SELECT TOP 1 POrtalId FROM ZnodePortalCatalog WHERE PublishCatalogId = @PublishCatalogId)
DECLARE @PriceListId INT = (SELECT TOP 1 PriceListId FROM ZnodePriceListPortal WHERE PortalId = @PortalId
ORDER BY Precedence ASC )
DECLARE @DomainUrl varchar(max) = (select TOp 1 URL FROM ZnodeMediaConfiguration WHERE IsActive =1)
DECLARE @MaxSmallWidth INT  = (SELECT TOP 1  MAX(MaxSmallWidth) FROM ZnodePortalDisplaySetting WHERE PortalId = @PortalId)


   IF OBJECT_ID('tempdb..#PimProductAttributeXML') is not null
   BEGIN 
	 DROP TABLE #PimProductAttributeXML
   END
   IF OBJECT_ID('tempdb..#PimDefaultValueLocale') is not null
   BEGIN 
    DROP TABLE #PimDefaultValueLocale
   END
   IF OBJECT_ID('tempdb..#TBL_CategoryCategoryHierarchyIds') is not null
   BEGIN 
    DROP TABLE #TBL_CategoryCategoryHierarchyIds
   END

   DECLARE @PimMediaAttributeId INT = dbo.Fn_GetProductImageAttributeId()
   
   CREATE TABLE #PimProductAttributeXML (PimAttributeXMLId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )
  	
   CREATE TABLE #TBL_CategoryCategoryHierarchyIds  (CategoryId int , ParentCategoryId int ) 
	
   If (@PimCategoryHierarchyId <> 0 AND @PimCatalogId <> 0 )
		INSERT INTO #TBL_CategoryCategoryHierarchyIds(CategoryId , ParentCategoryId )
			Select Distinct PimCategoryId , Null FROM (
				SELECT PimCategoryId,ParentPimCategoryId from DBO.[Fn_GetRecurciveCategoryIds](@PimCategoryHierarchyId,@PimCatalogId)
				Union 
				Select PimCategoryId , null  from ZnodePimCategoryHierarchy where PimCategoryHierarchyId = @PimCategoryHierarchyId 
				Union 
				Select PimCategoryId , null  from [Fn_GetRecurciveCategoryIds_new] (@PimCategoryHierarchyId,@PimCatalogId) ) Category  


   CREATE TABLE #PimDefaultValueLocale  (PimAttributeDefaultXMLId INT  PRIMARY KEY ,PimAttributeDefaultValueId INT ,LocaleId INT ) 
   DECLARE @ProductNamePimAttributeId INT = dbo.Fn_GetProductNameAttributeId(),@DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId(),@LocaleId INT = 0 
		,@SkuPimAttributeId  INT =  dbo.Fn_GetProductSKUAttributeId() , @IsActivePimAttributeId INT =  dbo.Fn_GetProductIsActiveAttributeId()
   DECLARE @GetDate DATETIME =dbo.Fn_GetDate()
   DECLARE @TBL_LocaleId  TABLE (RowId INT IDENTITY(1,1) PRIMARY KEY  , LocaleId INT )
			
			INSERT INTO @TBL_LocaleId (LocaleId)
			SELECT  LocaleId
			FROM ZnodeLocale MT 
			WHERE IsActive = 1
			AND (EXISTS (SELECT TOP 1 1  FROM @LocaleIds RT WHERE RT.Id = MT.LocaleId )
			OR NOT EXISTS (SELECT TOP 1 1 FROM @LocaleIds )) 

  DECLARE @Counter INT =1 ,@maxCountId INT = (SELECT max(RowId) FROM @TBL_LocaleId ) 
 

 CREATE TABLE #TBL_PublishCatalogId (PublishCatalogId INT,PublishProductId INT,PimProductId  INT   , VersionId INT, PublishCategoryId int ,LocaleId INT )

 CREATE INDEX idx_#TBL_PublishCatalogIdPimProductId on #TBL_PublishCatalogId(PimProductId)

  CREATE INDEX idx_#TBL_PublishCatalogIdPimPublishCatalogId on #TBL_PublishCatalogId(PublishCatalogId)

  If (@PimCategoryHierarchyId <> 0 AND @PimCatalogId <> 0 )
  BEGIN
			 INSERT INTO #TBL_PublishCatalogId(PublishCatalogId ,PublishProductId ,PimProductId  , VersionId ,PublishCategoryId ,LocaleId)  
			 SELECT distinct ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,MAX(ZPCP.PublishCataloglogId ) VersionId ,ZPC.PublishCategoryId,ZPCP.LocaleId
				 FROM ZnodePublishProduct ZPP INNER JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
				 INNER JOIN ZnodePublishCategoryProduct ZPPP ON ZPP.PublishProductId  = ZPPP.PublishProductId  
				 AND ZPCP.PublishCatalogId = ZPPP.PublishCatalogId
				 INNER JOIN ZnodePublishCategory ZPC ON ZPC.PublishCatalogId = ZPPP.PublishCatalogId AND ZPPP.PublishCategoryId = ZPC.PublishCategoryId 
				 WHERE ZPP.PublishCatalogId = @PublishCatalogId  and ZPCP.PublishStateId =  @PublishStateId
				 AND 
				 ZPC.PimCategoryId in (Select CategoryId from #TBL_CategoryCategoryHierarchyIds )
				 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId ,ZPC.PublishCategoryId,ZPCP.LocaleId	

			INSERT INTO #TBL_PublishCatalogId(PublishCatalogId ,PublishProductId ,PimProductId  , VersionId ,PublishCategoryId ,LocaleId)
			SELECT DISTINCT ZPP.PublishCatalogId,ZPP.PublishProductId,PimProductId,MAX(ZPCP.PublishCatalogLogId) VersionId,NULL, ZPCP.LocaleId
				 FROM ZnodePublishProduct ZPP 
				 INNER JOIN ZnodePublishCatalogLog ZPCP ON 
				 (ZPCP.PublishCatalogId = ZPP.PublishCatalogId) 
				 WHERE				 (EXISTS (SELECT TOP 1 1 FROM @pimProductId SP WHERE SP.Id = ZPP.PimProductId ))
				 AND (ZPP.PublishCatalogId = @publishCatalogId )
				 AND NOT Exists (Select TOP 1 1 from #TBL_PublishCatalogId TPL where TPL.PublishProductId = ZPP.PublishProductId)
				 AND ZPCP.PublishStateId =  @PublishStateId
			GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId , ZPCP.LocaleId



  END
  ELSE 
  BEGIN
			INSERT INTO #TBL_PublishCatalogId(PublishCatalogId ,PublishProductId,PimProductId ,VersionId,LocaleId  ) 
			 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,  
											MAX(PublishCatalogLogId) ,ZPCP.LocaleId
				 FROM ZnodePublishProduct ZPP 
				 INNER JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
				 WHERE (EXISTS (SELECT TOP 1 1 FROM @PimProductId SP 
				 WHERE SP.Id = ZPP.PimProductId  AND  (@PublishCatalogId IS NULL OR @PublishCatalogId = 0 ))
				 OR  (ZPP.PublishCatalogId = @PublishCatalogId ))
				 --AND  ZPCP.PublishStateId =  @PublishStateId
				 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId ,ZPCP.LocaleId
  END
           
		     DECLARE   @TBL_ZnodeTempPublish TABLE (PimProductId INT , AttributeCode VARCHAR(300) ,AttributeValue NVARCHAR(max) ) 			
			 DECLARE @TBL_AttributeVAlueLocale TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT,LocaleId INT 
			 )

	create table #ZnodePrice (RetailPrice numeric(28,13),SalesPrice numeric(28,13),CurrencyCode varchar(100), CultureCode varchar(100), CurrencySuffix varchar(100), PublishProductId int)
	
	create table #ProductSKU (SEOUrl nvarchar(max), SEODescription  nvarchar(max),SEOKeywords  nvarchar(max),SEOTitle  nvarchar(max), PublishProductId int)

	create table #ProductImages (PublishProductId int, ImageSmallPath  varchar(max))

	declare @DefaultPortal int, @IsAllowIndexing int
	select @DefaultPortal = PortalId, @IsAllowIndexing = 1 from ZnodePimCatalog ZPC Inner Join ZnodePublishCatalog ZPC1 ON ZPC.PimCatalogId = ZPC1.PimCatalogId where ZPC1.PublishCatalogId =  @PublishCatalogId and isnull(ZPC.IsAllowIndexing,0) = 1 

	--select * from ZnodePimCatalog ZPC Inner Join ZnodePublishCatalog ZPC1 ON ZPC.PimCatalogId = ZPC1.PimCatalogId where ZPC1.PublishCatalogId =  @PublishCatalogId and isnull(ZPC.IsAllowIndexing,0) = 1
	
	if (@IsAllowIndexing=1)
	begin 
		insert into #ZnodePrice
		SELECT RetailPrice,SalesPrice,ZC.CurrencyCode,ZCC.CultureCode ,ZCC.Symbol CurrencySuffix,TYU.PublishProductId
		FROM ZnodePrice ZP 
		INNER JOIN ZnodePriceList ZPL ON (ZPL.PriceListId = ZP.PriceListId)
		INNER JOIN ZnodeCurrency ZC oN (ZC.CurrencyId = ZPL.CurrencyId )
		INNER JOIN ZnodeCulture ZCC ON (ZCC.CultureId = ZPL.CultureId)
		INNER JOIN ZnodePublishProductDetail TY ON (TY.SKU = ZP.SKU ) 
		INNER JOIN ZnodePublishProduct TYU ON (TYU.PublishProductId = TY.PublishProductId) 
		WHERE ZP.PriceListId = @PriceListId 
		AND TY.LocaleId = @DefaultLocaleId
		AND TYU.PublishCatalogId = @PublishCatalogId
		AND EXISTS (SELECT TOP 1 1 FROM ZnodePriceListPortal ZPLP 
		INNER JOIN ZnodePimCatalog ZPC on ZPC.PortalId=ZPLP.PortalId WHERE ZPLP.PriceListId=ZP.PriceListId )
	
		insert INTO #ProductImages
		SELECT  TYU.PublishProductId , @DomainUrl +'Catalog/'  + CAST(@PortalId AS VARCHAr(100)) + '/'+ CAST(@MaxSmallWidth AS VARCHAR(100)) + '/' + RT.MediaPath AS ImageSmallPath   
		FROM ZnodePimAttributeValue ZPAV 
		INNER JOIN ZnodePublishProduct TYU ON (TYU.PimProductId  = ZPAV.PimProductId)
		INNER JOIN ZnodePimProductAttributeMedia  RT ON ( RT.PimAttributeValueId = ZPAV.PimAttributeValueId )
		WHERE  TYU.PublishCatalogId = @PublishCatalogId
		AND RT.LocaleId = @DefaultLocaleId
		AND ZPAV.PimAttributeId = (SELECT TOp 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'ProductImage')
	
		insert INTO #ProductSKU 
		SELECT ZCSD.SEOUrl , ZCDL.SEODescription,ZCDL.SEOKeywords ,ZCDL.SEOTitle, TYU.PublishProductId
		FROM ZnodeCMSSEODetail ZCSD 
		INNER JOIN ZnodeCMSSEODetailLocale ZCDL ON (ZCDL.CMSSEODetailId = ZCSD.CMSSEODetailId)
		INNER JOIN ZnodePublishProductDetail TY ON (TY.SKU = ZCSD.SEOCode AND ZCDL.LocaleId = TY.LocaleId) 
		INNER JOIN ZnodePublishProduct TYU ON (TYU.PublishProductId = TY.PublishProductId)
		WHERE CMSSEOTypeId = (SELECT TOP 1 CMSSEOTypeId FROM ZnodeCMSSEOType WHERE Name = 'Product') 
		AND ZCDL.LocaleId = @DefaultLocaleId
		AND TYU.PublishCatalogId = @PublishCatalogId
		AND ZCSD.PublishStateId = @PublishStateId
		AND ZCSD.PortalId = @DefaultPortal

	end
		
		
WHILE @Counter <= @maxCountId
BEGIN
 
 SET @LocaleId = (SELECT TOP 1 LocaleId FROM @TBL_LocaleId MT 
  WHERE  RowId = @Counter)
 
  INSERT INTO #PimProductAttributeXML 
  SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeXML
  WHERE LocaleId = @LocaleId
  
  IF( @LocaleId <> @DefaultLocaleId )
  BEGIN
	INSERT INTO #PimProductAttributeXML 
	SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
	FROM ZnodePimAttributeXML ZPAX
	WHERE ZPAX.LocaleId = @DefaultLocaleId  
	AND NOT EXISTS (SELECT TOP 1 1 FROM #PimProductAttributeXML ZPAXI WHERE ZPAXI.PimAttributeId = ZPAX.PimAttributeId )
  END

  INSERT INTO #PimDefaultValueLocale
  SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultXML
  WHERE localeId = @LocaleId

  IF( @LocaleId <> @DefaultLocaleId )
  BEGIN
	INSERT INTO #PimDefaultValueLocale 
	SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
	FROM ZnodePimAttributeDefaultXML ZX
	WHERE localeId = @DefaultLocaleId
	AND NOT EXISTS (SELECT TOP 1 1 FROM #PimDefaultValueLocale TRTR WHERE TRTR.PimAttributeDefaultValueId = ZX.PimAttributeDefaultValueId)
  END
  	 
  CREATE TABLE #TBL_CustomeFiled  (PimCustomeFieldXMLId INT ,CustomCode VARCHAR(300),PimProductId INT ,LocaleId INT )

  INSERT INTO #TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,RTR.PimProductId ,RTR.LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML RTR 
  INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = RTR.PimProductId AND RTR.LocaleID = ZPP.LocaleId)
  WHERE RTR.LocaleId = @LocaleId
 
 
  INSERT INTO #TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,ITR.PimProductId ,ITR.LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML ITR
  INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ITR.PimProductId AND ITR.LocaleID = ZPP.LocaleId)
  WHERE ITR.LocaleId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM #TBL_CustomeFiled TBL  WHERE ITR.CustomCode = TBL.CustomCode AND ITR.PimProductId = TBL.PimProductId)
       
       
	 SELECT VIR.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId,VIR.LocaleId , VIR.AttributeValue, VIR.AttributeCode ,ROW_NUMBER() Over(Partition By VIR.PimProductId,PimAttributeId ORDER BY VIR.PimProductId,PimAttributeId  ) RowId
	 INTO #TBL_AttributeVAlue
	 FROM View_LoadManageProductInternal VIR
	 WHERE ( LocaleId = @DefaultLocaleId OR LocaleId = @LocaleId )
	 AND EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
	  UNION ALL 
	 SELECT VIR.PimProductId,VIR.PimAttributeId,ZPDE.PimProductAttributeMediaId,ZPDE.LocaleId ,ZPDE.MediaPath AS AttributeValue, d.AttributeCode ,ROW_NUMBER() Over(Partition By VIR.PimProductId,VIR.PimAttributeId ORDER BY VIR.PimProductId,VIR.PimAttributeId  ) RowId
	 FROM ZnodePimAttributeValue  VIR
	 INNER JOIN ZnodePimProductAttributeMedia ZPDE ON (ZPDE.PimAttributeValueId = VIR.PimAttributeValueId )
	 INNER JOIN ZnodePimAttribute d ON ( d.PimAttributeId=VIR.PimAttributeId )
	 WHERE ( ZPDE.LocaleId = @DefaultLocaleId OR ZPDE.LocaleId = @LocaleId )
	 AND EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
	  Union All
	 SELECT VIR.PimProductId,VIR.PimAttributeId,ZPDVL.PimAttributeDefaultValueLocaleId,ZPDVL.LocaleId ,ZPDVL.AttributeDefaultValue AS AttributeValue, d.AttributeCode ,ROW_NUMBER() Over(Partition By VIR.PimProductId,VIR.PimAttributeId ORDER BY VIR.PimProductId,VIR.PimAttributeId  ) RowId
	 FROM ZnodePimAttributeValue  VIR
	 INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1  )
	 INNER JOIN ZnodePimAttributeDefaultValue ZPADV ON ZPADV.PimAttributeId = D.PimAttributeId
	 INNER JOIN ZnodePimAttributeDefaultValueLocale ZPDVL   on (ZPADV.PimAttributeDefaultValueId = ZPDVL.PimAttributeDefaultValueId)
	 --INNER JOIN ZnodePimProductAttributeDefaultValue ZPDVP ON (ZPDVP.PimAttributeValueId = VIR.PimAttributeValueId AND ZPADV.PimAttributeDefaultValueId = ZPDVP.PimAttributeDefaultValueId )
	 WHERE ( ZPDVL.LocaleId = @DefaultLocaleId OR ZPDVL.LocaleId = @LocaleId )
	 AND EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
	 Union All 
	SELECT VIR.PimProductId,VIR.PimAttributeId,'','','',D.AttributeCode,ROW_NUMBER() Over(Partition By VIR.PimProductId,VIR.PimAttributeId ORDER BY VIR.PimProductId,VIR.PimAttributeId  ) RowId
	FROM ZnodePimAttributeValue  VIR
	INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1 )
	WHERE  EXISTS(SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )

	 
	 UPDATE #TBL_AttributeVAlue SET rowid = (SELECT MAX(rowid) FROM #TBL_AttributeVAlue b WHERE a.PimProductId=b.PimProductId AND a.PimAttributeId = b.PimAttributeId )
	 FROM #TBL_AttributeVAlue a
	
  --SET @versionId = (SELECT TOP 1 VersionId FROM #TBL_PublishCatalogId) 
  

 IF OBJECT_ID('tempdb..#Cte_GetData') IS NOT NULL
 BEGIN 
 DROP TABLE #Cte_GetData
 END 

 CREATE TABLE #Cte_GetData (PimProductId INT,AttributeCode VARCHAR(600),AttributeValue NVARCHAR(max),VersionId INT)

 CREATE INDEX idx_#Cte_GetDataPimProductId ON #Cte_GetData(PimProductId)


INSERT INTO #Cte_GetData(PimProductId ,AttributeCode,AttributeValue,VersionId)
SELECT  a.PimProductId,a.AttributeCode , '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(a.AttributeValue,'')+'</AttributeValues> </AttributeEntity>  </Attributes>'  AttributeValue,VersionId
FROM #TBL_AttributeVAlue a 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = a.PimAttributeId )
INNER JOIN #PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId)
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = a.PimProductId)
WHERE a.LocaleId  = CASE WHEN a.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END
AND NOT EXISTS (SELECT TOP 1 1 FROM Fn_GetProductMediaAttributeId() TY WHERE TY.PimAttributeId = c.PimAttributeId)
 


INSERT INTO #Cte_GetData(PimProductId ,AttributeCode,AttributeValue,VersionId)
SELECT THB.PimProductId,THB.CustomCode,'<Attributes><AttributeEntity>'+CustomeFiledXML+'</AttributeEntity></Attributes>' ,VersionId
FROM ZnodePimCustomeFieldXML THB 
INNER JOIN #TBL_CustomeFiled TRTE ON (TRTE.PimCustomeFieldXMLId = THB.PimCustomeFieldXMLId)
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = THB.PimProductId)
UNION ALL 
SELECT ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues></AttributeValues>'+'<SelectValues>'+
			   STUFF((
                    SELECT '  '+ DefaultValueXML  FROM ZnodePimAttributeDefaultXML AA 
				 INNER JOIN #PimDefaultValueLocale GH ON (GH.PimAttributeDefaultXMLId = AA.PimAttributeDefaultXMLId)
				 INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId )
				 WHERE (ZPADV.PimAttributeValueId = ZPAV.PimAttributeValueId)
    FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</SelectValues> </AttributeEntity></Attributes>' AttributeValue ,VersionId
FROM ZnodePimAttributeValue ZPAV  
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
AND EXISTS (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)

---for PLP

INSERT INTO #Cte_GetData(PimProductId ,AttributeCode,AttributeValue,VersionId)
SELECT DISTINCT  UOP.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues></AttributeValues>'+'<SelectValues>'+
			   STUFF((
                    SELECT DISTINCT '  '+REPLACE(DefaultValueXML,'</SelectValuesEntity>','<VariantDisplayOrder>'+CAST(ISNULL(ZPA.DisplayOrder,0) AS VARCHAR(200))+'</VariantDisplayOrder>
					<VariantSKU>'+ISNULL(ZPAVL_SKU.AttributeValue,'')+'</VariantSKU>
					<VariantImagePath>'+ISNULL((SELECT ''+ZM.Path FOR XML Path ('')),'')+'</VariantImagePath></SelectValuesEntity>')   
				 FROM ZnodePimAttributeDefaultXML AA 
				 INNER JOIN #PimDefaultValueLocale GH ON (GH.PimAttributeDefaultXMLId = AA.PimAttributeDefaultXMLId)
				 INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId )
				 INNER JOIN ZnodePimAttributeValue ZPAV1 ON (ZPAV1.PimAttributeValueId= ZPADV.PimAttributeValueId )
				 -- check/join for active variants 
				 INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId =ZPAV1.PimProductId)
				 INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON (ZPAV.PimAttributevalueid = ZPAVL.PimAttributeValueId AND ZPAVL.AttributeValue = 'True')
				 INNER JOIN ZnodePimProductTypeAssociation YUP ON (YUP.PimProductId = ZPAV1.PimProductId)
				 -- SKU
				 INNER JOIN ZnodePimAttributeValue ZPAV_SKU ON(YUP.PimProductId = ZPAV_SKU.PimProductId)
				 INNER JOIN ZnodePimAttributeValueLocale ZPAVL_SKU ON (ZPAVL_SKU.PimAttributeValueId = ZPAV_SKU.PimAttributeValueId)
				 LEFT  JOIN ZnodePimAttributeValue ZPAV12 ON (ZPAV12.PimProductId= YUP.PimProductId  AND ZPAV12.PimAttributeId = @PimMediaAttributeId ) 
				 LEFT JOIN ZnodePimProductAttributeMedia ZPAVM ON (ZPAVM.PimAttributeValueId= ZPAV12.PimAttributeValueId ) 
				 LEFT JOIN ZnodeMedia ZM ON (ZM.MediaId = ZPAVM.MediaId)
				 LEFT JOIN ZnodePimAttribute ZPA ON (ZPA.PimattributeId = ZPAV1.PimAttributeId)
				 WHERE (YUP.PimParentProductId  = UOP.PimProductId AND ZPAV1.pimAttributeId = UOP.PimAttributeId )
				 -- Active Variants
				 AND ZPAV.PimAttributeId = (SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'IsActive')
				 -- VariantSKU
				 AND ZPAV_SKU.PimAttributeId = (SELECT PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'SKU')
FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</SelectValues> </AttributeEntity></Attributes>' AttributeValue ,VersionId
FROM ZnodePimConfigureProductAttribute UOP 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = UOP.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = UOP.PimProductId)
WHERE  EXISTS (SELECT * FROM #PimProductAttributeXML b WHERE b.PimAttributeXMLId = c.PimAttributeXMLId)


INSERT INTO #Cte_GetData(PimProductId ,AttributeCode,AttributeValue,VersionId)
SELECT DISTINCT  ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+SUBSTRING((SELECT DISTINCT  ',' +ZPPG.MediaPath FROM ZnodePimProductAttributeMedia ZPPG
     INNER JOIN #TBL_AttributeVAlue FTRE ON (FTRE.PimProductId = ZPAV.PimProductId AND FTRE.PimAttributeId = ZPAV.PimAttributeId  AND FTRE.LocaleId  = CASE WHEN FTRE.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )
	 WHERE ZPPG.PimProductAttributeMediaId = FTRE.ZnodePimAttributeValueLocaleId
	 FOR XML PATH ('')
 ),2,4000)+'</AttributeValues></AttributeEntity></Attributes>' AttributeValue ,VersionId	 
FROM ZnodePimAttributeValue ZPAV 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeMedia ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
AND EXISTS (SELECT * FROM #PimProductAttributeXML b WHERE b.PimAttributeXMLId = c.PimAttributeXMLId)

insert into #Cte_GetData(PimProductId ,AttributeCode,AttributeValue,VersionId)
SELECT ZPLP.PimParentProductId ,c.AttributeCode, '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(SUBSTRING((SELECT DISTINCT ','+CAST(PublishProductId AS VARCHAR(50)) 
							 FROM #TBL_PublishCatalogId ZPPI 
							 INNER JOIN ZnodePimLinkProductDetail ZPLPI ON (ZPLPI.PimProductId = ZPPI.PimProductId)
							 WHERE ZPLPI.PimParentProductId = ZPLP.PimParentProductId
							 AND ZPLPI.PimAttributeId   = ZPLP.PimAttributeId
							 FOR XML PATH ('') ),2,4000),'')+'</AttributeValues></AttributeEntity></Attributes>'   AttributeValue ,ZPP.VersionId
							
FROM ZnodePimLinkProductDetail ZPLP  
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPLP.PimParentProductId)
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPLP.PimAttributeId )
WHERE EXISTS (SELECT * FROM #PimProductAttributeXML b WHERE b.PimAttributeXMLId = c.PimAttributeXMLId)
GROUP BY ZPLP.PimParentProductId , ZPP.PublishProductId  ,ZPLP.PimAttributeId,c.AttributeCode,c.AttributeXML,ZPP.PublishCatalogId,ZPP.VersionId



SELECT a.PimProductId ,CAST((SELECT ''+dbo.FN_trim(b.AttributeValue) FOR XML PATH(''))  AS NVARCHAR(max)) AttributeValue , b.LocaleId  ,a.PimAttributeId,c.AttributeCode ,b.ZnodePimAttributeValueLocaleId
INTO #View_LoadManageProductInternal
FROM ZnodePimAttributeValue a 
INNER JOIN  ZnodePimAttributeValueLocale b ON ( b.PimAttributeValueId = a.PimAttributeValueId )
INNER JOIN ZnodePimAttribute c ON ( c.PimAttributeId=a.PimAttributeId )
WHERE c.AttributeCode = 'SKU'

INSERT INTO #Cte_GetData(PimProductId ,AttributeCode,AttributeValue,VersionId)
SELECT ZPAV.PimProductId,'DefaultSkuForConfigurable' ,'<Attributes><AttributeEntity>'+REPLACE(REPLACE (c.AttributeXML,'ProductType','DefaultSkuForConfigurable'),'Product Type','Default Sku For Configurable')+'<AttributeValues>'+
 (SELECT TOP 1 AttributeValue FROM #View_LoadManageProductInternal ad 
 INNER JOIN ZnodePimProductTypeAssociation yt ON (yt.PimProductId = ad.PimProductId)
 WHERE Ad.AttributeCode = 'SKU'
 AND yt.PimParentProductId = ZPAV.PimProductId
 ORDER BY yt.DisplayOrder , yt.PimProductTypeAssociationId ASC)
+'</AttributeValues></AttributeEntity></Attributes>' AttributeValue ,ZPP.VersionId
FROM ZnodePimAttributeValue ZPAV  
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL 
INNER JOIN ZnodePimAttributeDefaultValue dr ON (dr.PimAttributeDefaultValueId = ZPADVL.PimAttributeDefaultValueId)
 WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId
 AND dr.AttributeDefaultValueCode= 'ConfigurableProduct' 
)
AND EXISTS (SELECT * FROM #PimProductAttributeXML b WHERE b.PimAttributeXMLId = c.PimAttributeXMLId)
AND c.AttributeCode = 'ProductType' 


---------brand details 
CREATE TABLE #Cte_BrandData (PimProductId INT,BrandXML NVARCHAR(max))

INSERT INTO #Cte_BrandData ( PimProductId, BrandXML )
SELECT  DISTINCT ZBP.PimProductId,'<Brands><BrandEntity><BrandId>'+CAST(ZBD.BrandId AS VARCHAR(50))+'</BrandId><BrandCode>'+ZBD.BrandCode+'</BrandCode><BrandName>'+ZBDL.BrandName+'</BrandName></BrandEntity></Brands>' as BrandXML					   		   
FROM [ZnodeBrandDetails] AS ZBD
INNER JOIN ZnodeBrandDetaillocale ZBDL ON ZBD.BrandId = ZBDL.BrandId
INNER JOIN [ZnodeBrandProduct] AS ZBP ON ZBD.BrandId = ZBP.BrandId

--  --CREATE INDEX IND_Znode

  DELETE tu FROM ZnodePublishedXml tu  WHERE 
  EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId TY WHERE TY.VersionId = tu.PublishCatalogLogId AND Tu.PublishedId = ty.PublishProductId  )
  AND IsProductXML = 1   AND LocaleId = @LocaleId 

  
--  --ALTER INDEX ALL ON ZnodePublishedXml  REBUILD WITH (FILLFACTOR = 80 ) 
  If (@PimCategoryHierarchyId <> 0 AND @PimCatalogId <> 0 )
  BEGIN
		
		--Collect index of other categorys
		IF OBJECT_ID('tempdb..#Index') IS NOT NULL
		BEGIN 
			DROP TABLE #Index
		END 
		CREATE TABLE #Index (RowIndex int ,PublishCategoryId int , PublishProductId  int )		
		INSERT INTO  #Index ( RowIndex ,PublishCategoryId , PublishProductId )
		SELECT CAST(ROW_NUMBER()Over(Partition BY ZPC.PublishProductId 
		Order BY ISNULL(ZPC.PublishCategoryId,'0') desc )   AS VARCHAR(100)),
		ZPC.PublishCategoryId , ZPC.PublishProductId
		FROM ZnodePublishCategoryProduct ZPC where ZPC.PublishCatalogId = @PublishCatalogId
	
	

		--Publish parent products with index number 
			INSERT INTO ZnodePublishedXml (PublishCatalogLogId,PublishedId,PublishedXML,IsProductXML,LocaleId
			,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PublishCategoryId)
			SELECT zpp.VersionId,zpp.PublishProductId,'<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'+CAST(ISNULL(ZPCP.PublishCategoryId,'')  AS VARCHAR(50))+'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKU>'+'<SKULower>'+CAST(ISNULL((SELECT ''+LOWER(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
			+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +'</IsParentProducts><CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000)) +'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
			+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
			FROM ZnodeProfileCatalog ZPFC 
			INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
			WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+
			'</TempProfileIds>
			<ProductIndex>'+ CAST(ISNULL(ZPCP.ProductIndex,1) AS VARCHAR(200))+
			'</ProductIndex>' +
			 
			Case When @IsAllowIndexing = 1 then 			
			+'<RetailPrice>'+ISNULL(CAST(RetailPrice  AS VARCHAr(500)),'')+'</RetailPrice>'
			+'<SalesPrice>'+ISNULL(CAST(SalesPrice AS VARCHAr(500)), '') +'</SalesPrice>'
			+'<CurrencyCode>'+ISNULL(CurrencyCode,'') +'</CurrencyCode>'
			+'<CultureCode>'+ISNULL(CultureCode,'') +'</CultureCode>'
			+'<CurrencySuffix>'+ISNULL(CurrencySuffix,'') +'</CurrencySuffix>'
			+'<SeoUrl>'+ISNULL(SEOUrl,'') +'</SeoUrl>'
			+'<SeoDescription>'+ISNULL(SEODescription,'') +'</SeoDescription>'
			+'<SeoKeywords>'+ISNULL(SEOKeywords,'') +'</SeoKeywords>'
			+'<SeoTitle>'+ISNULL(SEOTitle,'') +'</SeoTitle>'
			+'<ImageSmallPath>'+ISNULL(ImageSmallPath,'') +'</ImageSmallPath>'
			else '' End

			+'<IndexId>'
			+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId><IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
			'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
			ISNULL(STUFF(( SELECT '  '+ BrandXML  FROM #Cte_BrandData BD WHERE BD.PimProductId = ZPP.PimProductId   
			FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, ''),'')+
			STUFF(( SELECT '  '+ AttributeValue  FROM #Cte_GetData TY WHERE TY.PimProductId = ZPP.PimProductId AND TY.VersionId = ZPP.VersionId   
			FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>' xmlvalue,1,@LocaleId,@UserId , @GetDate , @UserId,@GetDate
			,ZPCP.PublishCategoryId
			FROM  #TBL_PublishCatalogId zpp
			INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
			INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
			LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
			LEFT JOIN ZnodePublishCategory ZPC ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId 
			AND ZPP.PublishCategoryId = ZPC.PublishCategoryId 
			)
			LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId AND  ZPCCF.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId
			)
			LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ISNULL(ZPCP.PublishCategoryId,0) AND ZPCD.LocaleId = @LocaleId )
			LEFT JOIN #ZnodePrice TBZP ON (TBZP.PublishProductId = ZPP.PublishProductId)
			LEFT JOIN #ProductSKU TBPS ON (TBPS.PublishProductId = ZPP.PublishProductId)
			LEFT JOIN #ProductImages TBPI ON (TBPI.PublishProductId = ZPP.PublishProductId)
			WHERE ZPPDFG.LocaleId = @LocaleId AND ZPP.LocaleId = @LocaleId AND  ZPC.PimCategoryId in (Select CategoryId from #TBL_CategoryCategoryHierarchyIds ) 
			and zpp.PublishCategoryId IS NOT NULL

		
	
	 --Publish only associate product 
	 INSERT INTO ZnodePublishedXml (PublishCatalogLogId,PublishedId,PublishedXML,IsProductXML,LocaleId
		,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PublishCategoryId)
		SELECT zpp.VersionId,zpp.PublishProductId,'<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'+CAST(ISNULL(ZPCP.PublishCategoryId,'')  AS VARCHAR(50))+'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKU>'+'<SKULower>'+CAST(ISNULL((SELECT ''+LOWER(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
		+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +'</IsParentProducts><CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000)) +'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
		+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
						FROM ZnodeProfileCatalog ZPFC 
						INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
						WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+
						'</TempProfileIds>
						 <ProductIndex>'+ CAST(ISNULL(ZPCP.ProductIndex,1) AS VARCHAr(200))+
						'</ProductIndex>'+
		
		Case When @IsAllowIndexing = 1 then 
		+'<RetailPrice>'+ISNULL(CAST(RetailPrice  AS VARCHAr(500)),'')+'</RetailPrice>'
		+'<SalesPrice>'+ISNULL(CAST(SalesPrice AS VARCHAr(500)), '') +'</SalesPrice>'
		+'<CurrencyCode>'+ISNULL(CurrencyCode,'') +'</CurrencyCode>'
		+'<CultureCode>'+ISNULL(CultureCode,'') +'</CultureCode>'
		+'<CurrencySuffix>'+ISNULL(CurrencySuffix,'') +'</CurrencySuffix>'
		+'<SeoUrl>'+ISNULL(SEOUrl,'') +'</SeoUrl>'
		+'<SeoDescription>'+ISNULL(SEODescription,'') +'</SeoDescription>'
		+'<SeoKeywords>'+ISNULL(SEOKeywords,'') +'</SeoKeywords>'
		+'<SeoTitle>'+ISNULL(SEOTitle,'') +'</SeoTitle>'
		+'<ImageSmallPath>'+ISNULL(ImageSmallPath,'') +'</ImageSmallPath>'
		else '' End

		+'<IndexId>'
		+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId><IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
		'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
		STUFF(( SELECT '  '+ AttributeValue  FROM #Cte_GetData TY WHERE TY.PimProductId = ZPP.PimProductId   AND TY.VersionId= ZPP.VersionId
		FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>' xmlvalue,1,@LocaleId,@UserId , @GetDate , @UserId,@GetDate
		,ZPCP.PublishCategoryId
		FROM  #TBL_PublishCatalogId zpp
		INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
		INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
		LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT JOIN ZnodePublishCategory ZPC ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId 
		AND ZPP.PublishCategoryId = ZPC.PublishCategoryId )
		AND ZPC.PimCategoryId in (Select CategoryId from #TBL_CategoryCategoryHierarchyIds )
		LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId AND  ZPCCF.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId
		AND ZPCCF.PimCategoryId in (Select CategoryId from #TBL_CategoryCategoryHierarchyIds ))
		LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ISNULL(ZPCP.PublishCategoryId,0) AND ZPCD.LocaleId = @LocaleId )
		LEFT JOIN #ZnodePrice TBZP ON (TBZP.PublishProductId = ZPP.PublishProductId)
		LEFT JOIN #ProductSKU TBPS ON (TBPS.PublishProductId = ZPP.PublishProductId)
		LEFT JOIN #ProductImages TBPI ON (TBPI.PublishProductId = ZPP.PublishProductId)

		WHERE ZPPDFG.LocaleId = @LocaleId AND ZPP.LocaleId = @LocaleId AND zpp.PublishCategoryId IS NULL
		
  END
  ELSE
  BEGIN

      INSERT INTO ZnodePublishedXml (PublishCatalogLogId
		,PublishedId
		,PublishedXML
		,IsProductXML
		,LocaleId
		,CreatedBy
		,CreatedDate
		,ModifiedBy
		,ModifiedDate
		,PublishCategoryId)
		SELECT zpp.VersionId,zpp.PublishProductId, '<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'+CAST(ISNULL(ZPCP.PublishCategoryId,'')  AS VARCHAR(50))+'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKU>'+'<SKULower>'+CAST(ISNULL((SELECT ''+LOWER(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
		+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +'</IsParentProducts><CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000)) +'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
		
		+Case When @IsAllowIndexing = 1 then 	
		+'<RetailPrice>'+ISNULL(CAST(RetailPrice  AS VARCHAr(500)),'')+'</RetailPrice>'
		+'<SalesPrice>'+ISNULL(CAST(SalesPrice AS VARCHAr(500)), '') +'</SalesPrice>'
		+'<CurrencyCode>'+ISNULL(CurrencyCode,'') +'</CurrencyCode>'
		+'<CultureCode>'+ISNULL(CultureCode,'') +'</CultureCode>'
		+'<CurrencySuffix>'+ISNULL(CurrencySuffix,'') +'</CurrencySuffix>'
		+'<SeoUrl>'+ISNULL(SEOUrl,'') +'</SeoUrl>'
		+'<SeoDescription>'+ISNULL((SELECT ''+SEODescription FOR XML PATH('') ),'') +'</SeoDescription>'
		+'<SeoKeywords>'+ISNULL((SELECT ''+SEOKeywords FOR XML PATH('')),'') +'</SeoKeywords>'
		+'<SeoTitle>'+ISNULL((SELECT ''+SEOTitle FOR XML PATH('')),'') +'</SeoTitle>'
		+'<ImageSmallPath>'+ISNULL(ImageSmallPath,'') +'</ImageSmallPath>'
		else '' End

		+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
						FROM ZnodeProfileCatalog ZPFC 
						INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
						WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+'</TempProfileIds><ProductIndex>'+CAST(ROW_NUMBER()Over(Partition BY zpp.PublishProductId Order BY ISNULL(ZPC.PublishCategoryId,'0') ) AS VARCHAr(100))+'</ProductIndex><IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
		'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
		STUFF(( SELECT '  '+ AttributeValue  FROM #Cte_GetData TY WHERE TY.PimProductId = ZPP.PimProductId   AND TY.VersionId = ZPP.VersionId
		FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>'  xmlvalue,1,@LocaleId,@UserId , @GetDate , @UserId,@GetDate
		,ZPCP.PublishCategoryId
		
		FROM  #TBL_PublishCatalogId zpp
		INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
		INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
		LEFT JOIN #ZnodePrice TBZP ON (TBZP.PublishProductId = ZPP.PublishProductId)
		LEFT JOIN #ProductSKU TBPS ON (TBPS.PublishProductId = ZPP.PublishProductId)
		LEFT JOIN #ProductImages TBPI ON (TBPI.PublishProductId = ZPP.PublishProductId)
		LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT JOIN ZnodePublishCategory ZPC ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId )
		LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId AND  ZPCCF.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId)
		LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ISNULL(ZPCP.PublishCategoryId,0) AND ZPCD.LocaleId = @LocaleId )
		WHERE ZPPDFG.LocaleId = @LocaleId AND ZPP.LocaleId = @LocaleId
		ORDER BY zpp.PublishProductId ASC 

      
END 
 

DELETE FROM #TBL_CustomeFiled
DELETE FROM #PimDefaultValueLocale
 IF OBJECT_ID('tempdb..#PimProductAttributeXML') is not null
 BEGIN 
 DELETE FROM #PimProductAttributeXML
 END
 IF OBJECT_ID('tempdb..#Cte_GetData') is not null
 BEGIN 
 DROP TABLE #Cte_GetData
 END
   IF OBJECT_ID('tempdb..#Cte_BrandData') is not null
 BEGIN 
 DROP TABLE #Cte_BrandData
 END
  IF OBJECT_ID('tempdb..#TBL_AttributeVAlue') is not null
 BEGIN 
 DROP TABLE #TBL_AttributeVAlue
 END
 IF OBJECT_ID('tempdb..#View_LoadManageProductInternal') is not null
 BEGIN 
 DROP TABLE #View_LoadManageProductInternal
 END
 IF OBJECT_ID('tempdb..#TBL_CustomeFiled') is not null
 BEGIN 
 DROP TABLE #TBL_CustomeFiled
 END
SET @Counter = @counter + 1 
END 
END TRY 
BEGIN CATCH 

 SELECT ERROR_MESSAGE()
 UPDATE ZnodePublishCatalogLog 
	    SET IsCatalogPublished = 0 
		,IsCategoryPublished = 0,IsProductPublished= 0  
		WHERE EXISTS (SELECT TOP 1 1 from #TBL_PublishCatalogId TR WHERE TR.VersionId = ZnodePublishCatalogLog.PublishCatalogLogId)
END CATCH 
END

GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishProducts')
BEGIN 
DROP PROCEDURE Znode_GetPublishProducts
END
GO
CREATE PROCEDURE [dbo].[Znode_GetPublishProducts](
	    @PublishCatalogId int= NULL
	  , @PublishCategoryId varchar(2000)= NULL
	  , @UserId int
	  , @NotReturnXML int= NULL
	  , @PimProductId TransferId Readonly
	  , @VersionId int= 0
	  , @IsDebug bit= 0
	  , @TokenId nvarchar(max)= ''
	  , @LocaleId TransferId READONLY 
	  , @PublishStateId INT = 0 
	  )
AS
    
/*
    Summary :	Publish Product on the basis of publish catalog
				Retrive all Product details with attributes and insert into following tables 
				1.	ZnodePublishedXml
				2.	ZnodePublishCategoryProduct
				3.	ZnodePublishProduct
				4.	ZnodePublishProductDetail

                Product details include all the type of products link, grouped, configure and bundel products (include addon) their associated products 
				collect their attributes and values into tables variables to process for publish.  
                
				Finally genrate XML for products with their attributes and inserted into ZnodePublishedXml Znode Admin process xml from sql server to mongodb
				one by one.

    Unit Testing
    
    SELECT * FROM ZnodePimCustomField WHERE CustomCode = 'Test'
    SELECT * FROM ZnodePimCatalogCategory WHERE pimCatalogId = 3 AND PimProductId = 181
    SELECT * FROM ZnodePimCustomFieldLocale WHERE PimCustomFieldId = 1
    SELECT * FROM ZnodePublishProduct WHERE PublishProductid = 213 = 30
    select * from znodepublishcatalog
    SELECT * FROM view_loadmanageProduct WHERE Attributecode = 'ProductNAme' AND AttributeValue LIKE '%Apple%'
    SELECT * FROM ZnodePimCategoryProduct WHERE  PimProductId = 181
    SELECT * FROM ZnodePimCatalogcategory WHERE pimcatalogId = 3 \
	DECLARE @ttr TransferId 
	INSERT INTO @ttr  
	SELECT 25719 
    EXEC Znode_GetPublishProducts  @PublishCatalogId = 3 ,@UserId= 2 ,@NotReturnXML= NULL,@PimProductId = @ttr,@IsDebug= 1 
    EXEC Znode_GetPublishProducts  @PublishCatalogId = null,@UserId= 2 ,@NotReturnXML= NULL,@IsDebug= 1  ,@PimProductId = 103
    EXEC Znode_GetPublishProducts  @PublishCatalogId =1,@UserId= 2 ,@RequiredXML= 1	
    SELECT * FROM 	ZnodePimCatalogCategory  WHERE pimcatalogId = 3  
    SELECT * FROM [dbo].[ZnodePimCategoryHierarchy]  WHERE pimcatalogId = 3 
 */
  
BEGIN
	
	BEGIN TRY
		SET NOCOUNT ON;
			 DECLARE @IsCatalogPublishInProcess BIT = 0
	         DECLARE @TBL_PublishIds TABLE (PublishProductId INT , PimProductId INT , PublishCatalogId INT)
			 DECLARE @PublishStateidForPriview INT = [dbo].[Fn_GetPublishStateIdForPreview]()
			 DECLARE @DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId()
			 
			 --User cananot modify / update UDT, Need to declare additinal table variable for editing in other store procedure.
			 DECLARE @PimProductId_Editable TransferId
			 
			 ------To update SKU on basis of PublishProductId
			 UPDATE ZCCR set ZCCR.SKU = ZPPD.SKU
			 FROM ZnodePublishProductDetail ZPPD
			 INNER JOIN ZnodeCMSCustomerReview ZCCR on ZPPD.PublishProductId = ZCCR.PublishProductId
			 INNER JOIN ZnodePublishProduct ZPP on ZPPD.PublishProductId = ZPP.PublishProductId
			 where ZCCR.SKU is null and ZPP.PublishCatalogId = @PublishCatalogId

			 IF EXISTS (SELECT TOP 1 1  FROM ZnodePublishCatalogLog a 
			   INNER JOIN ZnodePimCatalogCategory b ON (b.PimCatalogId =a.PimCatalogId )
			   WHERE EXISTS ( SELECT TOP 1 1 FROM @PimProductId SP WHERE  b.PimProductId = SP.Id )
			   AND a.IsCatalogPublished IS NULL 
			   ) 
			   BEGIN 
				 SET   @IsCatalogPublishInProcess =1 
			   END 
			     
	         IF (( @PublishCatalogId IS NULL  OR @PublishCatalogId = 0 ) AND @IsCatalogPublishInProcess = 0 )
			 BEGIN 
			   -- Process call single product publish
			   INSERT INTO @TBL_PublishIds 
			   EXEC [dbo].[Znode_InsertPublishProductIds] @PublishCatalogId,@userid,@PimProductId
			
			   INSERT INTO @PimProductId_Editable
			   SELECT distinct PimProductId FROM @TBL_PublishIds
			   -- initiate single product publish 
			   EXEC Znode_GetPublishSingleProduct @PublishCatalogId,@VersionId,@PimProductId_Editable,@UserId,@TokenId , @LocaleId,@PublishStateId
			  -- SELECT 	@PimProductId	
			 END 
			 ELSE IF  @IsCatalogPublishInProcess = 0 
			 BEGIN 
				-- Process call catalog publish (include category, products with multiple types)
			     EXEC [dbo].[Znode_InsertPublishProductIds] @PublishCatalogId,@userid,@PimProductId
				 EXEC Znode_GetPublishProductbulk @PublishCatalogId=@PublishCatalogId,@VersionId=@VersionId,@PimProductId=@PimProductId,@userid=@userid,@LocaleIds= @LocaleId,@PublishStateId = @PublishStateId
				 UPDATE ZnodePimProduct SET IsProductPublish = 1,PublishStateId =  @PublishStateId 
				 WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePublishProduct ZPP WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId AND ZPP.PublishCatalogId = @PublishCatalogId)
			 END 
			
			 DECLARE @TBL_PublishCatalogId TABLE(PublishCatalogId INT,PublishProductId INT,PimProductId  INT , VersionId INT,LocaleId INT  );

			 INSERT INTO @TBL_PublishCatalogId 
			 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,MAX(PublishCatalogLogId) VersionId, ZPCP.LocaleId  
			 FROM ZnodePublishProduct ZPP 
			 LEFT JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
			 WHERE (EXISTS (SELECT TOP 1 1 FROM @TBL_PublishIds SP WHERE SP.PimProductId = ZPP.PimProductId  ))
			 and exists (select top 1 1 from @LocaleId yu where yu.Id = zpcp.LocaleId)
			 AND IsCatalogPublished = 1 
			 AND PublishStateId = @PublishStateId
			 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId , LocaleId 

			
			-- SELECT * FROM @TBL_PublishCatalogId

			IF EXISTS (SELECT TOP 1 1 FROM @PimProductId WHERE ID IS NOT NULL AND ID <> '')

			--IF @PimProductId IS NOT NULL AND @PimProductId <> ''
			BEGIN
				SELECT PublishedXML ProductXml
				FROM ZnodePublishedXml ZPX
				WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId TBLP WHERE TBLP.VersionId = ZPX.PublishCatalogLogId AND TBLP.PublishProductId = ZPX.PublishedId  )
				AND IsProductXML = 1
				AND @IsCatalogPublishInProcess = 0
				;

						
				SELECT PublishProductId  ,PublishCatalogId ,VersionId,LocaleId 
				FROM @TBL_PublishCatalogId
				WHERE @IsCatalogPublishInProcess = 0
				GROUP BY PublishProductId  ,PublishCatalogId ,VersionId,LocaleId;

				IF 	 @IsCatalogPublishInProcess = 1 
				BEGIN 
				SELECT 1 Id , 'Single product publish request cannot be processed as catalog or category publish is in progress. Please try after publish is complete.' MessageDetails,  CAST(0 AS BIT ) Status
				END 
				ELSE 
				BEGIN 
				SELECT 1 Id , ' Publish Successfull' MessageDetails, CAST(1 AS BIT ) Status
				END
				
		
				-- dataset for SEO implementation
				SELECT  SKU 
				FROM ZnodePublishProductDetail PPD 
				INNER JOIN @TBL_PublishCatalogId TPC ON (TPC.PublishProductId = PPD.PublishProductId )
				WHERE EXISTS (SELECT TOP 1 1 FROM @PimProductId tb WHERE tb.ID = TPC.PimProductId)
				AND PPD.localeid = @DefaultLocaleId
				GROUP BY SKU;
				 

			END
			
			
			 SELECT max(PublishCatalogLogId) PublishCatalogLogId,a.LocaleId,PublishCatalogId 
			INTO #Cte_PublishCatalog
			 FROM ZnodePublishCatalogLog  a
			 WHERE a.PublishCatalogId = @PublishCatalogId
			 GROUP BY LocaleId,PublishCatalogId			
			

			--UPDATE ZnodePublishCatalogLog 
			--SET IsProductPublished = 1,
			--    PublishProductId = (SELECT COUNT( DISTINCT  PublishProductId) FROM ZnodePublishCategoryProduct SP  WHERE Sp.PublishCatalogId = ZnodePublishCatalogLog.PublishCatalogId --AND ZnodePublishCatalogLog.IsCatalogPublished = 1
			--						AND ( SP.PublishCategoryId in (SELECT Item FROM dbo.split(ZnodePublishCatalogLog.PublishCategoryId,',') SP ))  )
		 --   WHERE PublishCatalogLogId = @VersionId AND  @VersionId <> 0


			UPDATE ZnodePublishCatalogLog 
			SET IsProductPublished = 1 
			,PublishProductId = (SELECT  COUNT(DISTINCT PublishProductId) FROM ZnodePublishCategoryProduct ZPP WHERE ZPP.PublishCatalogId = ZnodePublishCatalogLog.PublishCatalogId AND ZPP.PublishCategoryId IS NOT NULL) 
			WHERE EXISTS (SELECT TOP 1 1 FROM #Cte_PublishCatalog  TY  WHERE  TY.PublishCatalogLogId =ZnodePublishCatalogLog.PublishCatalogLogId )  


			DECLARE @PimAttributeIsPublish VARCHAR(50) =  [dbo].[Fn_GetAttributeIsPublish]() 

			-----Update PublishProductId on basis of SKU
			update ZCCR set ZCCR.PublishProductId = ZPPD.PublishProductId
			from ZnodePublishProductDetail ZPPD
			inner join ZnodeCMSCustomerReview ZCCR on ZPPD.SKU = ZCCR.SKU
			INNER JOIN ZnodePublishProduct ZPP on ZPPD.PublishProductId = ZPP.PublishProductId
			where ZPP.PublishCatalogId = @PublishCatalogId

			--UPDATE ZnodePimProduct 
			--SET IsProductPublish = 1 
			--WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId ZPP WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId)

			--SELECT * fROM @TBL_PublishCatalogId

			UPDATE ZnodePimProduct 
			SET PublishStateId =  @PublishStateId
			WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId ZPP WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId)

			--END 
	END TRY
	BEGIN CATCH
		SELECT ERROR_MESSAGE(), ERROR_PROCEDURE();
	
		DECLARE @Status bit;
		SET @Status = 0;
		DECLARE @Error_procedure varchar(1000)= ERROR_PROCEDURE(), @ErrorMessage nvarchar(max)= ERROR_MESSAGE(), @ErrorLine varchar(100)= ERROR_LINE(), @ErrorCall nvarchar(max)= 'EXEC Znode_GetPublishProducts @PublishCatalogId = '+CAST(@PublishCatalogId AS varchar(max))+',@PublishCategoryId='+@PublishCategoryId+',@UserId='+CAST(@UserId AS Varchar(50))+',@NotReturnXML='+CAST(@NotReturnXML AS Varchar(50))+',@UserId = '+CAST(@UserId AS Varchar(50))+',

		@VersionId='+CAST(@VersionId AS Varchar(50))+',@TokenId='+CAST(@TokenId AS varchar(max))+',@Status='+CAST(@Status AS varchar(10));
		SELECT 0 AS ID, CAST(0 AS bit) AS Status;
		
		
		UPDATE ZnodePublishCatalogLog 
	    SET IsCatalogPublished = 0 
		,IsCategoryPublished = 0,IsProductPublished= 0  
		WHERE EXISTS (SELECT TOP 1 1 from #Cte_PublishCatalog TR WHERE TR.PublishCatalogLogId = ZnodePublishCatalogLog.PublishCatalogLogId) 
		EXEC Znode_InsertProcedureErrorLog @ProcedureName = 'Znode_GetPublishProducts', @ErrorInProcedure = @Error_procedure, @ErrorMessage = @ErrorMessage, @ErrorLine = @ErrorLine, @ErrorCall = @ErrorCall;
	END CATCH;
END;
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishSingleProduct')
BEGIN 
DROP PROCEDURE Znode_GetPublishSingleProduct
END
GO
CREATE PROCEDURE [dbo].[Znode_GetPublishSingleProduct]
(
@PublishCatalogId INT = 0 
,@VersionId       VARCHAR(50) = 0 
,@PimProductId    TransferId Readonly 
,@UserId		  INT = 0 
,@TokenId nvarchar(max)= ''	
,@LocaleIds TransferId READONLY
,@PublishStateId INT = 0  
)
AS


--Declare @PimProductId TransferId 
--insert into @PimProductId  select 128 
-- EXEC [Znode_GetPublishSingleProduct]  @PublishCatalogId = 0 ,@VersionId= 0 ,@PimProductId =@PimProductId, @UserId=2 

BEGIN 
 
 SET NOCOUNT ON 

EXEC Znode_InsertUpdatePimAttributeXML 1 
EXEC Znode_InsertUpdateCustomeFieldXML 1
EXEC Znode_InsertUpdateAttributeDefaultValue 1 

 IF OBJECT_ID('tempdb..#Cte_BrandData') is not null
 BEGIN 
	DROP TABLE #Cte_BrandData
 END 

--DECLARE @PimProductAttributeXML TABLE(PimAttributeXMLId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )
CREATE TABLE #PimProductAttributeXML (PimAttributeXMLId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )
DECLARE @PimDefaultValueLocale  TABLE (PimAttributeDefaultXMLId INT  PRIMARY KEY ,PimAttributeDefaultValueId INT ,LocaleId INT ) 
DECLARE @ProductNamePimAttributeId INT = dbo.Fn_GetProductNameAttributeId(),@DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId(),@LocaleId INT = 0 
		,@SkuPimAttributeId  INT =  dbo.Fn_GetProductSKUAttributeId() , @IsActivePimAttributeId INT =  dbo.Fn_GetProductIsActiveAttributeId()
DECLARE @GetDate DATETIME =dbo.Fn_GetDate()
DECLARE @TBL_LocaleId  TABLE (RowId INT IDENTITY(1,1) PRIMARY KEY  , LocaleId INT )

DECLARE @DomainUrl varchar(max) = (select TOp 1 URL FROM ZnodeMediaConfiguration WHERE IsActive =1)
 
 
			INSERT INTO @TBL_LocaleId (LocaleId)
			SELECT  LocaleId
			FROM ZnodeLocale MT
			WHERE IsActive = 1
			AND (EXISTS (SELECT TOP 1 1  FROM @LocaleIds RT WHERE RT.Id = MT.LocaleId )
			OR NOT EXISTS (SELECT TOP 1 1 FROM @LocaleIds )) 


DECLARE @Counter INT =1 ,@maxCountId INT = (SELECT max(RowId) FROM @TBL_LocaleId ) 

 CREATE TABLE #TBL_PublishCatalogId (PublishCatalogId INT,PublishProductId INT,PimProductId  INT   , VersionId INT ,LocaleId INT, PriceListId INT , PortalId INT ,MaxSmallWidth NVARCHAr(max)  )
CREATE INDEX idx_#TBL_PublishCatalogIdPimProductId on #TBL_PublishCatalogId(PimProductId)
CREATE INDEX idx_#TBL_PublishCatalogIdPimPublishCatalogId on #TBL_PublishCatalogId(PublishCatalogId)
			
			INSERT INTO #TBL_PublishCatalogId 
			 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId, MAX(PublishCatalogLogId) ,LocaleId ,
			 (SELECT TOP 1 PriceListId FROM ZnodePriceListPortal NT WHERE TY.PortalId =  NT.PortalId
			 ORDER BY NT.Precedence ASC ) , TY.PortalId
							, (SELECT TOP 1  MAX(MaxSmallWidth) FROM ZnodePortalDisplaySetting TYR WHERE TYR.PortalId = TY.PortalId)
			 FROM ZnodePublishProduct ZPP 
			 INNER JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
			 LEFT JOIN ZnodePortalCatalog TY ON (TY.PublishCatalogId = ZPP.PublishCatalogId)
			 WHERE (EXISTS (SELECT TOP 1 1 FROM @PimProductId SP WHERE SP.Id = ZPP.PimProductId  AND  (@PublishCatalogId IS NULL OR @PublishCatalogId = 0 ))
			 OR  (ZPP.PublishCatalogId = @PublishCatalogId ))
			 AND IsCatalogPublished =1
			 AND ZPCP.PublishStateId = @PublishStateId 
			 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,LocaleId, TY.PortalId


		
             DECLARE   @TBL_ZnodeTempPublish TABLE (PimProductId INT , AttributeCode VARCHAR(300) ,AttributeValue NVARCHAR(max) ) 			
			 DECLARE @TBL_AttributeVAlueLocale TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT,LocaleId INT ,AttributeValue Nvarchar(1000) )

			 INSERT INTO @TBL_AttributeVAlueLocale (PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId ,LocaleId ,AttributeValue )
			 SELECT VIR.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId,VIR.LocaleId, ''
			 FROM View_LoadManageProductInternal VIR
			 INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = VIR.PimProductId)
			 UNION ALL 
			 SELECT VIR.PimProductId,PimAttributeId,PimProductAttributeMediaId,ZPDE.LocaleId , ''
			 FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimProductAttributeMedia ZPDE ON (ZPDE.PimAttributeValueId = VIR.PimAttributeValueId )
			 WHERE EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
			 Union All 
			 SELECT VIR.PimProductId,VIR.PimAttributeId,ZPDVL.PimAttributeDefaultValueLocaleId,ZPDVL.LocaleId ,ZPDVL.AttributeDefaultValue
			   FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1 )
			 INNER JOIN ZnodePimAttributeDefaultValue ZPADV ON ZPADV.PimAttributeId = D.PimAttributeId
			 INNER JOIN ZnodePimAttributeDefaultValueLocale ZPDVL   on (ZPADV.PimAttributeDefaultValueId = ZPDVL.PimAttributeDefaultValueId)
			 --INNER JOIN ZnodePimProductAttributeDefaultValue ZPDVP ON (ZPDVP.PimAttributeValueId = VIR.PimAttributeValueId AND ZPADV.PimAttributeDefaultValueId = ZPDVP.PimAttributeDefaultValueId )
			 WHERE ( ZPDVL.LocaleId = @DefaultLocaleId OR ZPDVL.LocaleId = @LocaleId )
			 AND EXISTS(SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
			 Union All 
			 SELECT VIR.PimProductId,VIR.PimAttributeId,'','' ,''
			 FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1 )
			 WHERE  EXISTS(SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )

		
				--insert INTO #ZnodePrice
				SELECT RetailPrice,SalesPrice,ZC.CurrencyCode,ZCC.CultureCode ,ZCC.Symbol CurrencySuffix,TYU.PublishProductId ,isnull(ZPC1.IsAllowIndexing,0) as IsAllowIndexing
				into #ZnodePrice
				FROM ZnodePrice ZP 
				INNER JOIN ZnodePriceList ZPL ON (ZPL.PriceListId = ZP.PriceListId)
				INNER JOIN ZnodeCurrency ZC oN (ZC.CurrencyId = ZPL.CurrencyId )
				INNER JOIN ZnodeCulture ZCC ON (ZCC.CultureId = ZPL.CultureId)
				INNER JOIN ZnodePublishProductDetail TY ON (TY.SKU = ZP.SKU ) 
				INNER JOIN ZnodePublishProduct TYU ON (TYU.PublishProductId = TY.PublishProductId)
				INNER JOIN ZnodePublishCatalog ZPC ON (TYU.PublishCatalogId = ZPC.PublishCatalogId)
				INNER JOIN ZnodePimCatalog ZPC1 ON (ZPC.PimCatalogId = ZPC1.PimCatalogId)
				WHERE EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId TYUR WHERE TYUR.PriceListId = ZPL.PriceListId AND TYUR.PublishCatalogId = TYU.PublishCatalogId
				AND TYU.PublishProductId = TYUR.PublishProductId)
				AND TY.LocaleId = dbo.Fn_GetDefaultLocaleId()
				AND EXISTS (SELECT TOP 1 1 FROM ZnodePriceListPortal ZPLP 
				INNER JOIN ZnodePimCatalog ZPC on ZPC.PortalId=ZPLP.PortalId WHERE ZPLP.PriceListId=ZP.PriceListId )
				
				--insert INTO #ProductSKU
				SELECT ZCSD.SEOUrl , ZCDL.SEODescription,ZCDL.SEOKeywords ,ZCDL.SEOTitle, TYU.PublishProductId ,isnull(ZPC1.IsAllowIndexing,0) as IsAllowIndexing
				INTO #ProductSKU
				FROM ZnodeCMSSEODetail ZCSD 
				INNER JOIN ZnodeCMSSEODetailLocale ZCDL ON (ZCDL.CMSSEODetailId = ZCSD.CMSSEODetailId)
				INNER JOIN ZnodePublishProductDetail TY ON (TY.SKU = ZCSD.SEOCode AND ZCDL.LocaleId = TY.LocaleId) 
				INNER JOIN ZnodePublishProduct TYU ON (TYU.PublishProductId = TY.PublishProductId)
				INNER JOIN ZnodePublishCatalog ZPC ON (TYU.PublishCatalogId = ZPC.PublishCatalogId)
				INNER JOIN ZnodePimCatalog ZPC1 ON (ZPC.PimCatalogId = ZPC1.PimCatalogId)
				WHERE CMSSEOTypeId = (SELECT TOP 1 CMSSEOTypeId FROM ZnodeCMSSEOType WHERE Name = 'Product') 
				AND EXISTS (SELECT TOP 1 1  FROM #TBL_PublishCatalogId TYUR WHERE  TYUR.PublishCatalogId = TYU.PublishCatalogId
				AND TYU.PublishProductId = TYUR.PublishProductId)
				AND ZCDL.LocaleId = dbo.Fn_GetDefaultLocaleId()
				and ZCSD.PortalId = isnull(ZPC1.PortalId,0)

				--insert INTO #ProductImages
				SELECT  TUI.PublishCatalogId, TYU.PublishProductId , @DomainUrl +'Catalog/'  + CAST(Max(TUI.PortalId) AS VARCHAr(100)) + '/'+ CAST(Isnull(Max(TUI.MaxSmallWidth),'') AS VARCHAR(100)) + '/' + Isnull(RT.MediaPath,'') AS ImageSmallPath    
				,isnull(ZPC1.IsAllowIndexing,0) as IsAllowIndexing
				INTO #ProductImages
				FROM ZnodePimAttributeValue ZPAV 
				INNER JOIN ZnodePublishProduct TYU ON (TYU.PimProductId  = ZPAV.PimProductId)
				INNER JOIN ZnodePimProductAttributeMedia  RT ON ( RT.PimAttributeValueId = ZPAV.PimAttributeValueId )
				--AND 
				--EXISTS (SELECT TOP 1 1  FROM #TBL_PublishCatalogId TUI WHERE  TUI.PublishProductId = TYU.PublishProductId AND TUI.PublishCatalogId = TYU.PublishCatalogId)
				INNER JOIN #TBL_PublishCatalogId TUI ON (TUI.PublishProductId = TYU.PublishProductId AND TUI.PublishCatalogId = TYU.PublishCatalogId
						AND  TUI.LocaleId = dbo.Fn_GetDefaultLocaleId() )
				INNER JOIN ZnodePublishCatalog ZPC ON (TYU.PublishCatalogId = ZPC.PublishCatalogId)
				INNER JOIN ZnodePimCatalog ZPC1 ON (ZPC.PimCatalogId = ZPC1.PimCatalogId)
				WHERE  RT.LocaleId = dbo.Fn_GetDefaultLocaleId()
				AND ZPAV.PimAttributeId = (SELECT TOp 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'ProductImage')
				group by TUI.PublishCatalogId, TYU.PublishProductId ,isnull(RT.MediaPath,''),isnull(ZPC1.IsAllowIndexing,0) 
		  -- end
		    
WHILE @Counter <= @maxCountId
BEGIN
 SET @LocaleId = (SELECT TOP 1 LocaleId FROM @TBL_LocaleId WHERE RowId = @Counter)
 
  INSERT INTO #PimProductAttributeXML 
  SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeXML
  WHERE LocaleId = @LocaleId

  INSERT INTO #PimProductAttributeXML 
  SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeXML ZPAX
  WHERE ZPAX.LocaleId = @DefaultLocaleId  
  AND NOT EXISTS (SELECT TOP 1 1 FROM #PimProductAttributeXML ZPAXI WHERE ZPAXI.PimAttributeId = ZPAX.PimAttributeId )

  INSERT INTO @PimDefaultValueLocale
  SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultXML
  WHERE localeId = @LocaleId

  INSERT INTO @PimDefaultValueLocale 
   SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultXML ZX
  WHERE localeId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM @PimDefaultValueLocale TRTR WHERE TRTR.PimAttributeDefaultValueId = ZX.PimAttributeDefaultValueId)
  
 
  --DECLARE @TBL_AttributeVAlue TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT  )
  --DECLARE @TBL_CustomeFiled TABLE (PimCustomeFieldXMLId INT ,CustomCode VARCHAR(300),PimProductId INT ,LocaleId INT )
  CREATE TABLE #TBL_CustomeFiled  (PimCustomeFieldXMLId INT ,CustomCode VARCHAR(300),PimProductId INT ,LocaleId INT )
  CREATE TABLE #TBL_AttributeVAlue (PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT  )



  INSERT INTO #TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,RTR.PimProductId ,RTR.LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML RTR 
  INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = RTR.PimProductId)
  WHERE RTR.LocaleId = @LocaleId
 

  INSERT INTO #TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,ITR.PimProductId ,ITR.LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML ITR
  INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ITR.PimProductId)
  WHERE ITR.LocaleId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM #TBL_CustomeFiled TBL  WHERE ITR.CustomCode = TBL.CustomCode AND ITR.PimProductId = TBL.PimProductId)
  

    INSERT INTO #TBL_AttributeVAlue (PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId )
    SELECT PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId
	FROM @TBL_AttributeVAlueLocale
    WHERE LocaleId = @LocaleId

    
	INSERT INTO #TBL_AttributeVAlue(PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId )
	SELECT VI.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId
	FROM @TBL_AttributeVAlueLocale VI 
    WHERE VI.LocaleId = @DefaultLocaleId 
	AND NOT EXISTS (SELECT TOP 1 1 FROM #TBL_AttributeVAlue  CTE WHERE CTE.PimProductId = VI.PimProductId AND CTE.PimAttributeId = VI.PimAttributeId )
 
INSERT INTO @TBL_ZnodeTempPublish  
SELECT  a.PimProductId,a.AttributeCode , '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(a.AttributeValue,'')+'</AttributeValues> </AttributeEntity>  </Attributes>'  AttributeValue
FROM View_LoadManageProductInternal a 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = a.PimAttributeId )
INNER JOIN #PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
INNER JOIN #TBL_AttributeVAlue CTE ON (Cte.PimAttributeId = a.PimAttributeId AND Cte.ZnodePimAttributeValueLocaleId = a.ZnodePimAttributeValueLocaleId)
UNION ALL 
SELECT  a.PimProductId,c.AttributeCode , '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+TAVL.AttributeValue+'</AttributeValues> </AttributeEntity>  </Attributes>'  AttributeValue
FROM ZnodePimAttributeValue  a 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = a.PimAttributeId )
INNER JOIN #PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
INNER JOIN ZnodePImAttribute ZPA  ON (ZPA.PimAttributeId = a.PimAttributeId)
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = a.PimProductId)
Inner JOIN @TBL_AttributeVAlueLocale TAVL ON  (c.PimAttributeId = TAVL.PimAttributeId  and ZPP.PimProductId = TAVL.PimProductId )
WHERE ZPA.IsPersonalizable = 1 
AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodePimAttributeValueLocale q WHERE q.PimAttributeValueId = a.PimAttributeValueId) 



UNION ALL 
SELECT THB.PimProductId,THB.CustomCode,'<Attributes><AttributeEntity>'+CustomeFiledXML +'</AttributeEntity></Attributes>' 
FROM ZnodePimCustomeFieldXML THB 
INNER JOIN #TBL_CustomeFiled TRTE ON (TRTE.PimCustomeFieldXMLId = THB.PimCustomeFieldXMLId)
UNION ALL 
SELECT ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues></AttributeValues>'+'<SelectValues>'+
			   STUFF((
                    SELECT '  '+ DefaultValueXML  FROM ZnodePimAttributeDefaultXML AA 
				 INNER JOIN @PimDefaultValueLocale GH ON (GH.PimAttributeDefaultXMLId = AA.PimAttributeDefaultXMLId)
				 INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId )
				 WHERE (ZPADV.PimAttributeValueId = ZPAV.PimAttributeValueId)
    FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</SelectValues> </AttributeEntity></Attributes>' AttributeValue
 
FROM ZnodePimAttributeValue ZPAV  With (NoLock)
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
UNION ALL 
SELECT DISTINCT  ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+SUBSTRING((SELECT DISTINCT ',' +MediaPath 
	FROM ZnodePimProductAttributeMedia ZPPG
	INNER JOIN  #TBL_AttributeVAlue TBLV ON (TBLV.PimProductId=  ZPAV.PimProductId AND TBLV.PimAttributeId = ZPAV.PimAttributeId )
    WHERE ZPPG.PimProductAttributeMediaId = TBLV.ZnodePimAttributeValueLocaleId
	FOR XML PATH ('')
 ),2,4000)+'</AttributeValues></AttributeEntity></Attributes>' AttributeValue
 	 
FROM ZnodePimAttributeValue ZPAV 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeMedia ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
UNION ALL 
SELECT ZPLP.PimParentProductId ,c.AttributeCode, '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(SUBSTRING((SELECT ','+CAST(PublishProductId AS VARCHAR(50)) 
							 FROM ZnodePublishProduct ZPPI 
							 INNER JOIN ZnodePimLinkProductDetail ZPLPI ON (ZPLPI.PimProductId = ZPPI.PimProductId)
							 WHERE ZPLPI.PimParentProductId = ZPLP.PimParentProductId
							 AND ZPLPI.PimAttributeId   = ZPLP.PimAttributeId
							 AND ZPPI.PublishCatalogId = ZPP.PublishCatalogId
							 FOR XML PATH ('') ),2,4000),'')+'</AttributeValues></AttributeEntity></Attributes>'   AttributeValue 
							
FROM ZnodePimLinkProductDetail ZPLP 
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPLP.PimParentProductId)
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPLP.PimAttributeId )
INNER JOIN #PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
GROUP BY ZPLP.PimParentProductId , ZPP.PublishProductId  ,ZPLP.PimAttributeId,c.AttributeCode,c.AttributeXML,ZPP.PublishCatalogId

UNION ALL 
SELECT ZPAV.PimProductId,'DefaultSkuForConfigurable' ,'<Attributes><AttributeEntity>'+REPLACE(REPLACE (c.AttributeXML,'ProductType','DefaultSkuForConfigurable'),'Product Type','Default Sku For Configurable')+'<AttributeValues>'+
 (SELECT TOP 1 AttributeValue FROM View_LoadManageProductInternal ad 
 INNER JOIN ZnodePimProductTypeAssociation yt ON (yt.PimProductId = ad.PimProductId)
 WHERE Ad.AttributeCode = 'SKU'
 AND yt.PimParentProductId = ZPAV.PimProductId
ORDER BY yt.DisplayOrder , yt.PimProductTypeAssociationId ASC)
+'</AttributeValues></AttributeEntity></Attributes>' AttributeValue 
FROM ZnodePimAttributeValue ZPAV  
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL 
INNER JOIN ZnodePimAttributeDefaultValue dr ON (dr.PimAttributeDefaultValueId = ZPADVL.PimAttributeDefaultValueId)
 WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId
 AND dr.AttributeDefaultValueCode= 'ConfigurableProduct' 
)
AND EXISTS (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)
AND c.AttributeCode = 'ProductType' 

---------brand details 
CREATE TABLE #Cte_BrandData (PimProductId int,BrandXML nvarchar(max))

INSERT INTO #Cte_BrandData ( PimProductId, BrandXML )
SELECT  DISTINCT ZBP.PimProductId,'<Brands><BrandEntity><BrandId>'+CAST(ZBD.BrandId AS VARCHAR(50))+'</BrandId><BrandCode>'+ZBD.BrandCode+'</BrandCode><BrandName>'+ZBDL.BrandName+'</BrandName></BrandEntity></Brands>' as BrandXML					   		   
FROM [ZnodeBrandDetails] AS ZBD
INNER JOIN ZnodeBrandDetaillocale ZBDL ON ZBD.BrandId = ZBDL.BrandId
INNER JOIN [ZnodeBrandProduct] AS ZBP ON ZBD.BrandId = ZBP.BrandId

 DELETE FROM ZnodePublishedXML WHERE  IsProductXML = 1  AND LocaleId = @localeId 
								AND  EXISTS ( SELECT TOP 1 1 FROM  #TBL_PublishCatalogId  TBL WHERE TBL.VersionId  = ZnodePublishedXML.PublishCatalogLogId AND TBL.PublishProductId = ZnodePublishedXML.PublishedId)


;WITH CTE AS
(
SELECT ROW_NUMBER() OVER (PARTITION BY PimProductId	,AttributeCode
ORDER BY PimProductId	,AttributeCode) AS RN
FROM @TBL_ZnodeTempPublish
)

DELETE FROM CTE WHERE RN<>1

  --select *  delete  from ZnodePublishedXML
 MERGE INTO ZnodePublishedXML TARGET 
 USING (
 SELECT distinct zpp.PublishProductId,zpp.VersionId ,
'<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+
CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'
+CAST(ISNULL(ZPC.PublishCategoryId,'')  AS VARCHAR(50))+
'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+
'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+
'</SKU><SKULower>'+CAST(ISNULL((SELECT ''+Lower(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ 
'</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +
'</IsParentProducts>'+
Case When TBPS.IsAllowIndexing = 1 then
+'<RetailPrice>'+ISNULL(CAST(RetailPrice  AS VARCHAr(500)),'')+'</RetailPrice>'
+'<SalesPrice>'+ISNULL(CAST(SalesPrice AS VARCHAr(500)), '') +'</SalesPrice>'
+'<CurrencyCode>'+ISNULL(CurrencyCode,'') +'</CurrencyCode>'
+'<CultureCode>'+ISNULL(CultureCode,'') +'</CultureCode>'
+'<CurrencySuffix>'+ISNULL(CurrencySuffix,'') +'</CurrencySuffix>'
+'<SeoUrl>'+ISNULL(SEOUrl,'') +'</SeoUrl>'
+'<SeoDescription>'+ISNULL(SEODescription,'') +'</SeoDescription>'
+'<SeoKeywords>'+ISNULL(SEOKeywords,'') +'</SeoKeywords>'
+'<SeoTitle>'+ISNULL(SEOTitle,'') +'</SeoTitle>'
+'<ImageSmallPath>'+ISNULL(ImageSmallPath,'') +'</ImageSmallPath>'
else '' end
+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
FROM ZnodeProfileCatalog ZPFC 
INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+'</TempProfileIds><ProductIndex>'+CAST(ISNULL(ZPCP.ProductIndex,1)  AS VARCHAr(100))+'</ProductIndex><IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
+'<CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000))+
'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+
'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
+'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
ISNULL(STUFF(( SELECT '  '+ BrandXML  FROM #Cte_BrandData BD WHERE BD.PimProductId = ZPP.PimProductId   
				FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, ''),'')+
STUFF(( SELECT '  '+ AttributeValue  FROM @TBL_ZnodeTempPublish TY WHERE TY.PimProductId = ZPP.PimProductId   
	FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>' xmlvalue
	FROM  #TBL_PublishCatalogId zpp
	INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
	INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)

	LEFT JOIN #ZnodePrice TBZP ON (TBZP.PublishProductId = ZPP.PublishProductId)
	LEFT JOIN #ProductSKU TBPS ON (TBPS.PublishProductId = ZPP.PublishProductId)
	LEFT JOIN #ProductImages TBPI ON (TBPI.PublishProductId = ZPP.PublishProductId  )
	LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
	LEFT JOIN ZnodePublishCategory ZPC ON (ZPC.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId)
	LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId AND  ZPCCF.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId)
	LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ZPCP.PublishCategoryId AND ZPCD.LocaleId = @LocaleId )
	WHERE ZPPDFG.LocaleId = @LocaleId
	AND zpp.LocaleId = @LocaleId
	) SOURCE 
	ON (
     TARGET.PublishCatalogLogId = SOURCE.versionId 
	 AND TARGET.PublishedId = SOURCE.PublishProductId
	 AND TARGET.IsProductXML = 1 
	 AND TARGET.LocaleId = @localeId 
)
WHEN MATCHED THEN 
UPDATE 
SET  PublishedXML = xmlvalue
   , ModifiedBy = @userId 
   ,ModifiedDate = @GetDate
   ,ImportedGuId = @TokenId 
WHEN NOT MATCHED THEN 
INSERT (PublishCatalogLogId
,PublishedId
,PublishedXML
,IsProductXML
,LocaleId
,CreatedBy
,CreatedDate
,ModifiedBy
,ModifiedDate,ImportedGuId)

VALUES (SOURCE.versionid , Source.publishProductid,Source.xmlvalue,1,@localeid,@userId,@getDate,@userId,@getDate,@TokenId);

--select * from ZnodePublishCatalogLog where PublishCatalogLogId in (1702,1701)
DELETE FROM @TBL_ZnodeTempPublish
IF OBJECT_ID('tempdb..#PimProductAttributeXML') is not null
 BEGIN 
	DELETE FROM #PimProductAttributeXML
 END
 IF OBJECT_ID('tempdb..#TBL_CustomeFiled') is not null
 BEGIN 
 DROP TABLE #TBL_CustomeFiled
 END
 IF OBJECT_ID('tempdb..#TBL_AttributeVAlue') is not null
 BEGIN 
 DROP TABLE #TBL_AttributeVAlue
 END
 
DELETE FROM @PimDefaultValueLocale


 IF OBJECT_ID('tempdb..#Cte_BrandData') is not null
 BEGIN 
  DROP TABLE #Cte_BrandData
 END 

SET @Counter = @counter + 1 
END

END
GO
UPDATE ZnodeApplicationSetting 
SET Setting='<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>ShippingId</name>      <headertext>Checkbox</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>ShippingTypeName</name>      <headertext>Shipping Type</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>ShippingCode</name>      <headertext>Shipping Code</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>/Shippings/Edit</islinkactionurl>      <islinkparamfield>shippingId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>ShippingName</name>      <headertext>Shipping Name</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>y</isallowlink>      <islinkactionurl>/Shippings/Edit</islinkactionurl>      <islinkparamfield>shippingId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>Description</name>      <headertext>Display Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>DestinationCountryCode</name>      <headertext>Country Code</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>HandlingCharge</name>      <headertext>Handling Charge</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>8</id>      <name>DisplayOrder</name>      <headertext>Display Order</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>9</id>      <name>IsActive</name>      <headertext>Enable</headertext>      <width>40</width>      <datatype>Boolean</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>10</id>      <name>ZipCode</name>      <headertext>Zip Code</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>11</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>Edit|Delete</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>shippingId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Edit|Delete</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/Shippings/Edit|/Shippings/Delete</manageactionurl>      <manageparamfield>shippingId|shippingId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>grid-action</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>'
WHERE ItemName ='ZnodeShipping'
GO

UPDATE ZnodeApplicationSetting 
SET Setting='<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>VersionId</name>      <headertext>Checkbox</headertext>      <width>0</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>SourcePublishState</name>      <headertext>Publish State</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>LocaleDisplayValue</name>      <headertext>Locale</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>LogCreatedDate</name>      <headertext>Created On</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>PreviousVersionId</name>      <headertext>Previous Version</headertext>      <width>0</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>Delete</format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>VersionId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Delete</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/PublishHistory/DeletePublishHistory</manageactionurl>      <manageparamfield>VersionId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>'
WHERE ItemName ='ZnodePublishHistory'
GO

UPDATE ZnodeApplicationSetting 
SET Setting='<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>PublishProductId</name>      <headertext>Checkbox</headertext>      <width>20</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>PublishProductId</name>      <headertext>Publish Product ID</headertext>      <width>20</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>Name</name>      <headertext>Product Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>SKU</name>      <headertext>SKU</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>CatalogName</name>      <headertext>Catalog Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>Delete</format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Delete</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/Promotion/UnAssociateProducts</manageactionurl>      <manageparamfield>PublishProductId,PromotionId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>'
WHERE ItemName ='AssociatedProductsList'
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishSingleCategory')
BEGIN 
DROP PROCEDURE Znode_GetPublishSingleCategory
END
GO

CREATE PROCEDURE [dbo].[Znode_GetPublishSingleCategory]
(   @PimCategoryId    INT, 
    @UserId           INT,
    @Status           int = 0 OUT,
	@IsDebug          BIT = 0
	,@LocaleIds		  TransferId READONLY,
	@PimCatalogId     INT = 0 )
AS 
/*
       Summary:Publish category with their respective products and details 
	            The result is fetched in xml form   
       Unit Testing   
	            During Catalog Publish Publish status should be updated 
				   
       Begin transaction 
       SELECT * FROM ZnodePIMAttribute 
	   SELECT * FROM ZnodePublishCatalog 
	   SELECT * FROM ZnodePublishCategory WHERE publishCAtegoryID = 167 

       EXEC [Znode_GetPublishSingleCategory @PublishCatalogId = 5,@VersionId = 0 ,@UserId =2 ,@IsDebug = 1 
       Rollback Transaction 
	*/
     BEGIN
         BEGIN TRAN GetPublishCategory;
         BEGIN TRY
             SET NOCOUNT ON;
			 DECLARE @PublishCatalogLogId int , @PublishCataLogId int , @VersionId  int --,@PimCatalogId int 
			 
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @LocaleId INT= 0, @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId(), @Counter INT= 1, @MaxId INT= 0, @CategoryIdCount INT;
             DECLARE @IsActive BIT= [dbo].[Fn_GetIsActiveTrue]();
             DECLARE @AttributeIds VARCHAR(MAX)= '', @PimCategoryIds VARCHAR(MAX)= '', @DeletedPublishCategoryIds VARCHAR(MAX)= '', @DeletedPublishProductIds VARCHAR(MAX);
			 
			 DECLARE @TBL_PublishCatalogId TABLE(PublishCatalogId INT,PimCatalogId  INT , VersionId INT )

			 INSERT INTO @TBL_PublishCatalogId  (PublishCatalogId,PimCatalogId,VersionId ) 
			 SELECT ZPCL.PublishCatalogId, ZPCL.PimCatalogId,ZPCL.PublishCatalogLogId
			 FROM ZnodePimCategoryHierarchy ZPCH 
			 INNER JOIN ZnodePublishCatalogLog  ZPCL  ON ZPCH.PimCatalogId = ZPCL.PimCatalogId and ZPCH.PimCategoryId = @PimCategoryId 
			 where  PublishCatalogLogId in (Select MAX (PublishCatalogLogId) from ZnodePublishCatalogLog ZPCL where 
			 ZPCH.PimCatalogId = ZPCL.PimCatalogId)
			 AND ZPCL.PimCatalogId = CASE WHEN @PimCatalogId <> 0 THEN @PimCatalogId ELSE ZPCL.PimCatalogId END

			 IF NOT EXISTS (Select TOP 1 1 from @TBL_PublishCatalogId) OR NOT EXISTS (select TOP 1 1  from ZnodePimCatalogCategory where PimCategoryId = @PimCategoryId  )
			 Begin
				SET @Status = 1  -- Category not associated or catalog not publish
				ROLLBACK TRAN GetPublishCategory;
				Return 0 ;
			 END 

             DECLARE @TBL_AttributeIds TABLE
             (PimAttributeId       INT,
              ParentPimAttributeId INT,
              AttributeTypeId      INT,
              AttributeCode        VARCHAR(600),
              IsRequired           BIT,
              IsLocalizable        BIT,
              IsFilterable         BIT,
              IsSystemDefined      BIT,
              IsConfigurable       BIT,
              IsPersonalizable     BIT,
              DisplayOrder         INT,
              HelpDescription      VARCHAR(MAX),
              IsCategory           BIT,
              IsHidden             BIT,
              CreatedDate          DATETIME,
              ModifiedDate         DATETIME,
              AttributeName        NVARCHAR(MAX),
              AttributeTypeName    VARCHAR(300)
             );
             DECLARE @TBL_AttributeDefault TABLE
             (
				  PimAttributeId            INT,
				  AttributeDefaultValueCode VARCHAR(100),
				  IsEditable                BIT,
				  AttributeDefaultValue     NVARCHAR(MAX),
				  DisplayOrder   INT
             );
             DECLARE @TBL_AttributeValue TABLE
             (
				  PimCategoryAttributeValueId INT,
				  PimCategoryId               INT,
				  CategoryValue               NVARCHAR(MAX),
				  AttributeCode               VARCHAR(300),
				  PimAttributeId              INT
             );
             DECLARE @TBL_LocaleIds TABLE
             (
				  RowId     INT IDENTITY(1, 1),
				  LocaleId  INT,
				  IsDefault BIT
             );
             DECLARE @TBL_PimCategoryIds TABLE
             (
				  PimCategoryId       INT,
				  PimParentCategoryId INT,
				  DisplayOrder        INT,
				  ActivationDate      DATETIME,
				  ExpirationDate      DATETIME,
				  CategoryName        NVARCHAR(MAX),
				  ProfileId           VARCHAR(MAX),
				  IsActive            BIT,
				  PimCategoryHierarchyId INT,
				  ParentPimCategoryHierarchyId INT,
				  PublishCatalogId INT,
				  PimCatalogId  INT,
				  VersionId INT  ,
				  CategoryCode  NVARCHAR(MAX)          
			 );
             DECLARE @TBL_PublishPimCategoryIds TABLE
             (PublishCategoryId       INT,
              PimCategoryId           INT,
              PublishProductId        varchar(max),
              PublishParentCategoryId INT ,
			  PimCategoryHierarchyId INT ,
			  parentPimCategoryHierarchyId INT,
			  RowIndex INT
             );
             DECLARE @TBL_DeletedPublishCategoryIds TABLE
             (PublishCategoryId INT,
              PublishProductId  INT
             );
             DECLARE @TBL_CategoryXml TABLE
             (PublishCategoryId INT,
              CategoryXml       XML,
              LocaleId          INT
			 
             );
             INSERT INTO @TBL_LocaleIds
             (LocaleId,
              IsDefault
             )
			  -- here collect all locale ids
            SELECT LocaleId,IsDefault FROM ZnodeLocale MT WHERE IsActive = @IsActive
			AND (EXISTS (SELECT TOP 1 1  FROM @LocaleIds RT WHERE RT.Id = MT.LocaleId )
			OR NOT EXISTS (SELECT TOP 1 1 FROM @LocaleIds )) ;

             INSERT INTO @TBL_PimCategoryIds(PimCategoryId,PimParentCategoryId,DisplayOrder,ActivationDate,ExpirationDate,IsActive,PimCategoryHierarchyId,ParentPimCategoryHierarchyId,
			 PublishCatalogId,PimCatalogId,VersionId)
			 --select @PimCategoryId, NULL , NULL , NULL , NULL ,NULL , NULL ,NULL 
			 SELECT DISTINCT ZPCH.PimCategoryId,ZPCH2.PimCategoryId  PimParentCategoryId,ZPCH.DisplayOrder,ZPCH.ActivationDate,ZPCH.ExpirationDate,ZPCH.IsActive ,ZPCH.PimCategoryHierarchyId,ZPCH.ParentPimCategoryHierarchyId,
			 PublishCatalogId,PCI.PimCatalogId,VersionId
			 FROM ZnodePimCategoryHierarchy AS ZPCH 
			 LEFT JOIN ZnodePimCategoryHierarchy AS ZPCH2 ON (ZPCH2.PimCategoryHierarchyId = ZPCH. ParentPimCategoryHierarchyId ) 
			 Inner join @TBL_PublishCatalogId PCI on ZPCH.PimCatalogId = PCI.PimCatalogId 
			 WHERE ZPCH.PimCategoryId = @PimCategoryId ; 

			 MERGE INTO ZnodePublishCategory TARGET USING 
			 ( Select PC.PimCategoryId,
					  PC.PimCategoryHierarchyId,
					  PC.PimParentCategoryId,
					  PC.ParentPimCategoryHierarchyId,
					  PC.PublishCatalogId
					  FROM @TBL_PimCategoryIds PC ) 
			 SOURCE ON
			 (
				 TARGET.PimCategoryId = SOURCE.PimCategoryId 
				 AND TARGET.PublishCatalogId = SOURCE.PublishCatalogId 
				 AND TARGET.PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId
			 )
			 WHEN MATCHED THEN UPDATE SET TARGET.PimParentCategoryId = SOURCE.PimParentCategoryId,TARGET.CreatedBy = @UserId,TARGET.CreatedDate = @GetDate,
				TARGET.ModifiedBy = @UserId,TARGET.ModifiedDate = @GetDate,
			 PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId,ParentPimCategoryHierarchyId=SOURCE.ParentPimCategoryHierarchyId
             
			 WHEN NOT MATCHED THEN 
			 INSERT(PimCategoryId,PublishCatalogId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
			 ,PimCategoryHierarchyId,ParentPimCategoryHierarchyId) 
			 VALUES(SOURCE.PimCategoryId,SOURCE.PublishCatalogId,@UserId,@GetDate,@UserId,@GetDate,SOURCE.PimCategoryHierarchyId
			 ,SOURCE.ParentPimCategoryHierarchyId)

				OUTPUT INSERTED.PublishCategoryId,INSERTED.PimCategoryId,INSERTED.PimCategoryHierarchyId,
			 INSERTED.parentPimCategoryHierarchyId 
			 INTO @TBL_PublishPimCategoryIds(PublishCategoryId,PimCategoryId,PimCategoryHierarchyId,parentPimCategoryHierarchyId);
			     	    
			 -- here update the publish parent category id
            UPDATE ZPC SET [PimParentCategoryId] =TBPC.[PimCategoryId] 
			FROM ZnodePublishCategory ZPC
            INNER JOIN ZnodePublishCategory TBPC ON(ZPC.parentPimCategoryHierarchyId = TBPC.PimCategoryHierarchyId  ) 
			WHERE ZPC.PublishCatalogId = TBPC.PublishCatalogId 
			AND TBPC.PublishCatalogId  in (Select PublishCatalogId from @TBL_PublishCatalogId)
			AND ZPC.ParentPimCategoryHierarchyId IS NOT NULL AND 
			ZPC.PimCategoryId = @PimCategoryId  ;

			UPDATE a
			SET  a.PublishParentCategoryId = b.PublishCategoryId
			FROM ZnodePublishCategory a 
			INNER JOIN ZnodePublishCategory b   ON (a.parentpimCategoryHierarchyId = b.pimCategoryHierarchyId)
			WHERE a.parentpimCategoryHierarchyId IS NOT NULL 
			AND a.PublishCatalogId = b.PublishCatalogId AND b.PublishCatalogId in (Select PublishCatalogId from @TBL_PublishCatalogId)
			AND a.PimCategoryId = @PimCategoryId 
			 --UPDATE ZPC SET [PimParentCategoryId] = TBPC.[PimCategoryId] 
			 --FROM ZnodePublishCategory ZPC
			 --INNER JOIN ZnodePublishCategory TBPC ON(ZPC.parentPimCategoryHierarchyId = TBPC.PimCategoryHierarchyId  ) 
			 --WHERE ZPC.PublishCatalogId =@PublishCatalogId
			 --AND ZPC.ParentPimCategoryHierarchyId IS NOT NULL ;

			 -- product are published here 
            --  EXEC Znode_GetPublishProducts @PublishCatalogId,0,@UserId,1,0,0;
			
		     SET @MaxId =(SELECT MAX(RowId)FROM @TBL_LocaleIds);
			 DECLARE @TransferID TRANSFERID 
			 INSERT INTO @TransferID 
			 SELECT DISTINCT  PimCategoryId	 FROM @TBL_PublishPimCategoryIds 

             SET @PimCategoryIds = SUBSTRING((SELECT ','+CAST(PimCategoryId AS VARCHAR(50)) FROM @TBL_PublishPimCategoryIds FOR XML PATH('')), 2, 4000);
			 
             WHILE @Counter <= @MaxId -- Loop on Locale id 
                 BEGIN
                     SET @LocaleId =(SELECT LocaleId FROM @TBL_LocaleIds WHERE RowId = @Counter);
                   
				     SET @AttributeIds = SUBSTRING((SELECT ','+CAST(ZPCAV.PimAttributeId AS VARCHAR(50)) FROM ZnodePimCategoryAttributeValue ZPCAV 
										 WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimCategoryIds TBPC WHERE TBPC.PimCategoryId = ZPCAV.PimCategoryId) GROUP BY ZPCAV.PimAttributeId FOR XML PATH('')), 2, 4000);
                
				     SET @CategoryIdCount =(SELECT COUNT(1) FROM @TBL_PimCategoryIds);

                     INSERT INTO @TBL_AttributeIds (PimAttributeId,ParentPimAttributeId,AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable,IsSystemDefined,
					 IsConfigurable,IsPersonalizable,DisplayOrder,HelpDescription,IsCategory,IsHidden,CreatedDate,ModifiedDate,AttributeName,AttributeTypeName)
                     EXEC [Znode_GetPimAttributesDetails] @AttributeIds,@LocaleId;

                     INSERT INTO @TBL_AttributeDefault (PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder)
                     EXEC [dbo].[Znode_GetAttributeDefaultValueLocale] @AttributeIds,@LocaleId;

                     INSERT INTO @TBL_AttributeValue (PimCategoryAttributeValueId,PimCategoryId,CategoryValue,AttributeCode,PimAttributeId)
                     EXEC [dbo].[Znode_GetCategoryAttributeValueId] @TransferID,@AttributeIds,@LocaleId;

					-- SELECT * FROM @TBL_AttributeValue WHERE PimCategoryId = 281

					--select * from @TBL_AttributeValue



                     ;WITH Cte_UpdateDefaultAttributeValue
                     AS (
					  SELECT TBAV.PimCategoryId,TBAV.PimAttributeId,SUBSTRING((SELECT ','+AttributeDefaultValue FROM @TBL_AttributeDefault TBD WHERE TBAV.PimAttributeId = TBD.PimAttributeId
						AND EXISTS(SELECT TOP 1 1 FROM Split(TBAV.CategoryValue, ',') SP WHERE SP.Item = TBD.AttributeDefaultValueCode)FOR XML PATH('')), 2, 4000) DefaultCategoryAttributeValue
						FROM @TBL_AttributeValue TBAV WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_AttributeDefault TBAD WHERE TBAD.PimAttributeId = TBAV.PimAttributeId))
					 
					 -- update the default value with locale 
                     UPDATE TBAV SET CategoryValue = CTUDFAV.DefaultCategoryAttributeValue FROM @TBL_AttributeValue TBAV 
					 INNER JOIN Cte_UpdateDefaultAttributeValue CTUDFAV ON(CTUDFAV.PimCategoryId = TBAV.PimCategoryId AND CTUDFAV.PimAttributeId = TBAV.PimAttributeId)
					 WHERE CategoryValue IS NULL ;
					 
					 -- here is update the media path  
                     WITH Cte_productMedia
                     AS (SELECT TBA.PimCategoryId,TBA.PimAttributeId,[dbo].[FN_GetThumbnailMediaPathPublish](SUBSTRING((SELECT ','+zm.PATH FROM ZnodeMedia ZM WHERE EXISTS
					    (SELECT TOP 1 1 FROM dbo.split(TBA.CategoryValue, ',') SP WHERE SP.Item = CAST(Zm.MediaId AS VARCHAR(50)))FOR XML PATH('')), 2, 4000)) CategoryValue
						FROM @TBL_AttributeValue TBA WHERE EXISTS(SELECT TOP 1 1 FROM [dbo].[Fn_GetProductMediaAttributeId]() FNMA WHERE FNMA.PImAttributeId = TBA.PimATtributeId))
                         
					 UPDATE TBAV SET CategoryValue = CTCM.CategoryValue 
					 FROM @TBL_AttributeValue TBAV 
					 INNER JOIN Cte_productMedia CTCM ON(CTCM.PimCategoryId = TBAV.PimCategoryId
					 AND CTCM.PimAttributeId = TBAV.PimAttributeId);

                     WITH Cte_PublishProductIds
					 AS (SELECT TBPC.PublishcategoryId,SUBSTRING((SELECT ','+CAST(PublishProductId AS VARCHAR(50))
					  FROM ZnodePublishCategoryProduct ZPCP 
					  WHERE ZPCP.PublishCategoryId = TBPC.publishCategoryId
					  AND ZPCP.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId
                      AND ZPCP.PublishCatalogId in (Select PublishCatalogId from @TBL_PublishCatalogId)
					   FOR XML PATH('')), 2, 8000) PublishProductId ,PimCategoryHierarchyId
					  FROM @TBL_PublishPimCategoryIds TBPC)
                          
					 UPDATE TBPPC SET PublishProductId = CTPP.PublishProductId FROM @TBL_PublishPimCategoryIds TBPPC INNER JOIN Cte_PublishProductIds CTPP ON(TBPPC.PublishCategoryId = CTPP.PublishCategoryId 
					 AND TBPPC.PimCategoryHierarchyId = CTPP.PimCategoryHierarchyId);

                     WITH Cte_CategoryProfile
                     AS (SELECT PimCategoryId,ZPCC.PimCategoryHierarchyId,SUBSTRING(( SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
					 FROM ZnodeProfileCatalog ZPC 
					 INNER JOIN ZnodeProfileCategoryHierarchy ZPRCC ON(ZPRCC.PimCategoryHierarchyId = ZPCC.PimCategoryHierarchyId
                        AND ZPRCC.ProfileCatalogId = ZPC.ProfileCatalogId) 
						WHERE ZPC.PimCatalogId = ZPCC.PimCatalogId FOR XML PATH('')), 2, 4000) ProfileIds
                      
					   FROM ZnodePimCategoryHierarchy ZPCC 
					   WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimCategoryIds TBPC 
					   WHERE TBPC.PimCategoryId = ZPCC.PimCategoryId AND ZPCC.PimCatalogId in (Select PimCatalogId from @TBL_PublishCatalogId)
					   AND ZPCC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId))
                          
				     UPDATE TBPC SET TBPC.ProfileId = CTCP.ProfileIds FROM @TBL_PimCategoryIds TBPC 
					 LEFT JOIN Cte_CategoryProfile CTCP ON(CTCP.PimCategoryId = TBPC.PimCategoryId AND CTCP.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId );
                     
					 UPDATE TBPC SET TBPC.CategoryName = TBAV.CategoryValue FROM @TBL_PimCategoryIds TBPC INNER JOIN @TBL_AttributeValue TBAV ON(TBAV.PimCategoryId = TBPC.PimCategoryId
                     AND EXISTS(SELECT TOP 1 1 FROM [dbo].[Fn_GetCategoryNameAttribute]() FNGCNA WHERE FNGCNA.PimAttributeId = TBAV.PimAttributeId))


					 UPDATE TBPC SET TBPC.CategoryCode = TBAV.CategoryValue FROM @TBL_PimCategoryIds TBPC INNER JOIN @TBL_AttributeValue TBAV ON(TBAV.PimCategoryId = TBPC.PimCategoryId
					 AND EXISTS(SELECT TOP 1 1 FROM dbo.Fn_GetCategoryCodeAttribute() FNGCNA WHERE FNGCNA.PimAttributeId = TBAV.PimAttributeId)
					 )
					 
					 --select * from @TBL_PimCategoryIds

					 --select * from @TBL_AttributeValue
					-- SELECT * FROM @TBL_AttributeValue WHERE pimCategoryId = 369


					 -- here update the publish category details 
                     ;WITH Cte_UpdateCategoryDetails
                     AS (
					 SELECT TBC.PimCategoryId,PublishCategoryId,CategoryName, TBPPC.PimCategoryHierarchyId,CategoryCode
					 FROM @TBL_PimCategoryIds TBC
                     INNER JOIN @TBL_PublishPimCategoryIds TBPPC ON(TBC.PimCategoryId = TBPPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPPC.PimCategoryHierarchyId)
					 )						
                     MERGE INTO ZnodePublishCategoryDetail TARGET USING Cte_UpdateCategoryDetails SOURCE ON(TARGET.PublishCategoryId = SOURCE.PublishCategoryId
					 AND TARGET.LocaleId = @LocaleId)
                     WHEN MATCHED THEN UPDATE SET PublishCategoryId = SOURCE.PublishcategoryId,PublishCategoryName = SOURCE.CategoryName,LocaleId = @LocaleId,ModifiedBy = @userId,ModifiedDate = @GetDate,CategoryCode= SOURCE.CategoryCode
                     WHEN NOT MATCHED THEN INSERT(PublishCategoryId,PublishCategoryName,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,CategoryCode) VALUES
                     (SOURCE.PublishCategoryId,SOURCE.CategoryName,@LocaleId,@userId,@GetDate,@userId,@GetDate,CategoryCode);


					DECLARE @UpdateCategoryLog  TABLE (PublishCatalogLogId INT , LocaleId INT ,PublishCatalogId INT  )
					INSERT INTO @UpdateCategoryLog
					SELECT MAX(PublishCatalogLogId) PublishCatalogLogId , LocaleId , PublishCatalogId 
					FROM ZnodePublishCatalogLog a 
					WHERE a.PublishCatalogId =@PublishCatalogId
					AND  a.LocaleId = @LocaleId 
					GROUP BY 	LocaleId,PublishCatalogId  

					-----------------------------------------------------------------
					IF OBJECT_ID('tempdb..#Index') is not null
					BEGIN 
						DROP TABLE #Index
					END 
					CREATE TABLE #Index (RowIndex int ,PimCategoryId int , PimCategoryHierarchyId  int,ParentPimCategoryHierarchyId int )		
					insert into  #Index ( RowIndex ,PimCategoryId , PimCategoryHierarchyId,ParentPimCategoryHierarchyId)
					SELECT CAST(Row_number() OVER (Partition By TBL.PimCategoryId Order by ISNULL(TBL.PimCategoryId,0) desc) AS VARCHAR(100))
					,ZPC.PimCategoryId, ZPC.PimCategoryHierarchyId, ZPC.ParentPimCategoryHierarchyId
					FROM @TBL_PublishPimCategoryIds TBL
					INNER JOIN ZnodePublishCategory ZPC ON (TBL.PimCategoryId = ZPC.PimCategoryId AND TBL.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId)
					WHERE ZPC.PublishCatalogId = @PublishCatalogId

					UPDATE TBP SET  TBP.[RowIndex]=  IDX.RowIndex 
					FROM @TBL_PublishPimCategoryIds TBP INNER JOIN #Index IDX ON (IDX.PimCategoryId = TBP.PimCategoryId AND IDX.PimCategoryHierarchyId = TBP.PimCategoryHierarchyId)  

					------------------------------------------------------------------

                     ;WITH Cte_CategoryXML
                     AS (SELECT PublishcategoryId,PimCategoryId,(SELECT TY.PublishCatalogLogId,TBPC.PublishCategoryId ZnodeCategoryId,TBC.PublishCatalogId ZnodeCatalogId
																		,THR.PublishParentCategoryId TempZnodeParentCategoryIds,ZPC.CatalogName ,
																		 ISNULL(DisplayOrder, '0') DisplayOrder,@LocaleId LocaleId,ActivationDate 
																		 ,ExpirationDate,TBC.IsActive,ISNULL(CategoryName, '') Name,ProfileId TempProfileIds,ISNULL(PublishProductId, '') TempProductIds,ISNULL(CategoryCode,'') as CategoryCode
																		 ,ISNULL(TBPC.RowIndex,1) CategoryIndex
                        FROM @TBL_PublishPimCategoryIds TBPC 
						INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId in  (Select PublishCatalogId from @TBL_PublishCatalogId))
						INNER JOIN ZnodePublishCAtegory THR ON (THR.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId AND THR.PimCategoryId = TBPC.PimCategoryId AND THR.PublishCatalogId in  (Select PublishCatalogId from @TBL_PublishCatalogId) )
						LEFT JOIN @UpdateCategoryLog TY ON ( TY.PublishCatalogId IN (Select PublishCatalogId from @TBL_PublishCatalogId) AND TY.localeId = @LocaleId  )
						INNER JOIN @TBL_PimCategoryIds TBC ON(TBC.PimCategoryId = TBPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId) WHERE TBPC.PublishCategoryId = TBPCO.PublishCategoryId 
						FOR XML PATH('')) CategoryXml 
						FROM @TBL_PublishPimCategoryIds TBPCO),


                     Cte_CategoryAttributeXml
                     AS (SELECT CTCX.PublishCategoryId,'<CategoryEntity>'+ISNULL(CategoryXml, '')+
					  ISNULL((SELECT(SELECT TBA.AttributeCode,TBA.AttributeName,ISNULL(IsUseInSearch, 0) IsUseInSearch,
                        ISNULL(IsHtmlTags, 0) IsHtmlTags,ISNULL(IsComparable, 0) IsComparable,TBAV.CategoryValue AttributeValues,TBA.AttributeTypeName FROM @TBL_AttributeValue TBAV
                        INNER JOIN @TBL_AttributeIds TBA ON(TBAV.PimAttributeId = TBA.PimAttributeId) LEFT JOIN ZnodePimFrontendProperties ZPFP ON(ZPFP.PimAttributeId = TBA.PimAttributeId)
                        WHERE CTCX.PimCategoryId = TBAV.PimCategoryId AND TBAO.PimAttributeId = TBA.PimAttributeId FOR XML PATH('AttributeEntity'), TYPE) FROM @TBL_AttributeIds TBAO
                        FOR XML PATH('Attributes')), '')+'</CategoryEntity>' CategoryXMl FROM Cte_CategoryXML CTCX)

						
                     INSERT INTO @TBL_CategoryXml(PublishCategoryId,CategoryXml,LocaleId)
                     SELECT PublishCategoryId,CategoryXml,@LocaleId LocaleId FROM Cte_CategoryAttributeXml;

                  
				     DELETE FROM @TBL_AttributeIds;
                     DELETE FROM @TBL_AttributeDefault;
                     DELETE FROM @TBL_AttributeValue;
                     SET @Counter = @Counter + 1;
                 END;
	
			Select PublishCategoryId ,VersionId	, PimCatalogId	, LocaleId,PublishCatalogId
			into #OutPublish from @TBL_PublishCatalogId CLI CROSS JOIN @TBL_CategoryXml  
			--group by PimCatalogId,VersionId,PublishCategoryId

			Alter TABLE #OutPublish ADD Id int Identity 
			SET @MaxId =(SELECT COUNT(*) FROM #OutPublish);
			 --SET @PimCategoryIds = SUBSTRING((SELECT ','+CAST(PimCategoryId AS VARCHAR(50)) FROM @TBL_PublishPimCategoryIds FOR XML PATH('')), 2, 4000);
			Declare @ExistingPublishCategoryId  nvarchar(max), @PublishCategoryId  int 
			SET @Counter =1 
            WHILE @Counter <= @MaxId -- Loop on Locale id 
            BEGIN
				SELECT @VersionId = VersionId  ,
				@PublishCategoryId = PublishCategoryId 
				from #OutPublish where ID = @Counter

				SELECT @ExistingPublishCategoryId  = PublishCategoryId FROM ZnodePublishCatalogLog ZPCL 
				where ZPCL.PublishCatalogLogId = @VersionId  and IsCategoryPublished =1 
	
				IF NOT EXISTS (SELECT TOP 1 1 FROM Split(@ExistingPublishCategoryId  , ',') SP WHERE SP.Item = Convert(nvarchar(50),  @PublishCategoryId) )
				BEGIN
				--	SET @ExistingPublishCategoryId  = @ExistingPublishCategoryId + ',' +  Convert(nvarchar(100),@PublishCategoryId )
					UPDATE ZnodePublishCatalogLog SET PublishCategoryId = (SELECT COUNT(DISTINCT PublishCategoryId ) FROM ZnodePublishCategoryProduct RG WHERE RG.PublishCatalogId IN (SELECT DISTINCT PublishCatalogId FROM @TBL_PublishCatalogId) AND RG.PublishCatalogId = ZnodePublishCatalogLog.PublishCatalogId ) ,
					ModifiedDate = @GetDate
					 WHERE EXISTS (SELECT TOP 1 1  FROM #OutPublish TR WHERE TR.versionId = ZnodePublishCatalogLog.PublishCatalogLogId )  ;
				END
				-- DELETE FROM ZnodePublishedXml where  IsCategoryXML =1  and  PublishCataloglogId = @VersionId  and  PublishedId = @PublishCategoryId 
				SET @Counter  = @Counter  + 1  
			END
           	Select distinct 
			SUBSTRING(( SELECT Distinct ',' + CAST(PublishCategoryId AS VARCHAR(50)) FROM #OutPublish CLO
			FOR XML PATH('')), 2, 4000) PublishCategoryId,
			SUBSTRING(( SELECT Distinct ',' + CAST(VersionId	 AS VARCHAR(50)) FROM #OutPublish CLO
			FOR XML PATH('')), 2, 4000) VersionId,	
			SUBSTRING(( SELECT Distinct ',' + CAST(PublishCatalogId	 AS VARCHAR(50)) FROM #OutPublish CLO
			FOR XML PATH('')), 2, 4000) PimCatalogId,
			SUBSTRING(( SELECT Distinct ',' + CAST(LocaleId AS VARCHAR(50)) FROM #OutPublish CLO
			FOR XML PATH('')), 2, 4000) LocaleId
			from #OutPublish
			--group by PimCatalogId,VersionId,PublishCategoryId

			--Select PublishCategoryId ,VersionId	, PimCatalogId, LocaleId  from #OutPublish 

			Select CategoryXml from @TBL_CategoryXml 

			SELECT CategoryCode FROM @TBL_PimCategoryIds
			GROUP BY CategoryCode

			UPDATE ZnodePimCategory	SET IsCategoryPublish = 1 WHERE PimCategoryId = @PimCategoryId 

			Commit TRAN GetPublishCategory;
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE();
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPublishCategory @PublishCatalogId = '+CAST(@PublishCatalogId AS VARCHAR(50))+',@UserId ='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(50));
             SET @Status = 0 -- Publish Falies 
             ROLLBACK TRAN GetPublishCategory;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_GetPublishCategory',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;

	 GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishCategoryProducts')
BEGIN 
DROP PROCEDURE Znode_GetPublishCategoryProducts
END
GO


CREATE PROCEDURE [dbo].[Znode_GetPublishCategoryProducts]
( @pimCatalogId int = 0,@pimCategoryHierarchyId int = 0,@userId int,@versionId int= 0,@status int = 0 OUT,@isDebug bit = 0 ,@LocaleId TransferId READONLY , @PublishStateId INT = 0,   @ProductPublishStateId INT=NULL)  AS  /*
    Summary :	Publish Product on the basis of publish catalog and category
				Calling sp [Znode_InsertPublishProductIds] to retrive category and their child category with associated products 
				 
				1.	ZnodePublishedXml
				2.	ZnodePublishCategoryProduct
				3.	ZnodePublishProduct
				4.	ZnodePublishProductDetail

                Product details include all the type of products link, grouped, configure and bundel products (include addon) their associated products 
				collect their attributes and values into tables variables to process for publish.  
                
				Finally genrate XML for products with their attributes and inserted into ZnodePublishedXml Znode Admin process xml from sql server to mongodb
				one by one.
	
	Unit Testing
    ------------------------------------------------------------------------------------------------
	Declare @Status int 
	DECLARE @r transferid 
	INSERT INTO @r
	VALUES (1)
	,(24)
	EXEC [Znode_GetPublishCategoryProducts]  @PimCatalogId = 9
	, @PimCategoryHierarchyId = 48 
	, @UserId = 2 
	, @VersionId = 0
	, @IsDebug = 1
	, @Status  = @Status  out
	,@localeId = @r
	,@PublishStateId = 4
	Select @Status  

 */
	BEGIN   
		BEGIN TRY
			SET NOCOUNT ON;
			 DECLARE @IsCatalogPublishInProcess INT  = 0
			DECLARE @tBL_PublishIds table (PublishProductId int,PimProductId int,PublishCatalogId int)
			DECLARE @publishCatalogId int= isnull((SELECT TOP 1 PublishCatalogId FROM ZnodePublishCatalog ZPC WHERE ZPC.PimCatalogId = @pimCatalogId),0),@publishCataloglogId int= 0;
			DECLARE @tBL_CategoryCategoryHierarchyIds table (CategoryId int,ParentCategoryId int ,PimCategoryHierarchyId INT ,ParentPimCategoryHierarchyId INT  )
			DECLARE @pimProductId TransferId
			DECLARE @insertPublishProductIds table (PublishProductId int,PimProductId int,PublishCatalogId int )
			--DECLARE @TBL_CategoryXml TABLE ( CategoryXml XML);
				SELECT @versionId = max(PublishCataloglogId)
			FROM ZnodePublishCatalogLog 
			WHERE PublishCatalogId =@publishCatalogId

				 --IF EXISTS (SELECT TOP 1 1  FROM ZnodePublishCatalogLog a 
			  -- INNER JOIN ZnodePimCatalogCategory b ON (b.PimCatalogId =a.PimCatalogId )
			  -- WHERE b.PimCategoryHierarchyId = @PimCategoryHierarchyId
			  -- AND a.IsCatalogPublished IS NULL 
			  -- AND a.IsCategoryPublished IS NULL
			  -- ) 
			  -- BEGIN 
				 --SET   @IsCatalogPublishInProcess =1 
			  -- END 


			INSERT INTO @tBL_CategoryCategoryHierarchyIds(CategoryId,ParentCategoryId,PimCategoryHierarchyId,ParentPimCategoryHierarchyId ) 
			SELECT DISTINCT PimCategoryId, Null,PimCategoryHierarchyId,NULL  FROM ( SELECT PimCategoryId,ParentPimCategoryId,PimCategoryHierarchyId,ParentPimCategoryHierarchyId
			FROM DBO.[Fn_GetRecurciveCategoryIds_PimCategoryHierarchy](@pimCategoryHierarchyId,@pimCatalogId) 
			UNION SELECT PimCategoryId, Null,PimCategoryHierarchyId,NULL FROM ZnodePimCategoryHierarchy WHERE PimCategoryHierarchyId = @pimCategoryHierarchyId 
			UNION SELECT PimCategoryId, Null,PimCategoryHierarchyId,NULL  FROM dbo.[Fn_GetRecurciveCategoryIds_PimCategoryHierarchyIdnew] (@pimCategoryHierarchyId,@pimCatalogId) ) Category

			

			
			IF NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimCatalogCategory ty 
			WHERE EXISTS (SELECT TOP 1 1 FROM ( SELECT PimCategoryId,PimCategoryHierarchyId,ParentPimCategoryHierarchyId 
			FROM dbo.[Fn_GetRecurciveCategoryIds_ForChild](@pimCategoryHierarchyId,@pimCatalogId) UNION ALL SELECT NULL ,@pimCategoryHierarchyId,NULL  ) TN WHERE TN.PimCategoryHierarchyId = TY.PimCategoryHierarchyId  ) AND ty.PimProductId IS NOT NULL )
			BEGIN 
			  SET @IsCatalogPublishInProcess = 2 

			END 

			IF (isnull(@publishCatalogId,0) = 0 ) 
				BEGIN 
					SET @status = 1
					-- Catalog Not Published 
					RETURN 0;
				END
			
			IF @IsCatalogPublishInProcess =  0 
			BEGIN 
			

			-- Any other catalog was in process dont intitiate category publish	
			--If Exists ( SELECT TOP 1 1 FROM ZnodePublishcatalogLog  WHERE  IsCatalogPublished  IS NULL AND IsCategoryPublished IS NULL )
			--Begin
			--		SET @status = 2
			--		RETURN 0;
			--End

			
				EXEC [Znode_GetPublishCategoryGroup] @publishCatalogId = @PublishCatalogId,@VersionId = 0,@userId =2,@isDebug = 1,@PimCategoryHierarchyId = @PimCategoryHierarchyId,@localeId =@localeID,@PublishStateId=@PublishStateId
			
			BEGIN 
				INSERT INTO @insertPublishProductIds EXEC [Dbo].[Znode_InsertPublishProductIds] @publishCatalogId = @publishCatalogId,@userid = @userid,@pimProductId = @pimProductId,@pimCategoryHierarchyId = @pimCategoryHierarchyId
				INSERT INTO @pimProductId SELECT PimProductId FROM @insertPublishProductIds

				EXEC [Dbo].[Znode_GetPublishProductbulk] @publishCatalogId = @publishCatalogId,@versionId = @versionId,@pimProductId = @pimProductId,@userid = @userid,@pimCategoryHierarchyId = @pimCategoryHierarchyId,@pimCatalogId = @pimCatalogId,@localeIds = @localeId ,@publishstateId =@publishStateId 
				
				--UPDATE ZnodePimProduct 		SET IsProductPublish = 1 ,PublishStateId = @PublishStateId		
				--WHERE EXISTS (SELECT TOP 1 1 
				--	FROM ZnodePublishProduct ZPP
				--	WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId 
				--		AND ZPP.PublishCatalogId = @publishCatalogId
				--	)

					

			END
			DECLARE @tBL_PublishCatalogId table(PublishCatalogId int,PublishProductId int,PublishCategoryId int,PimProductId int,VersionId int,LocaleId INT  );
			
			INSERT INTO @tBL_PublishCatalogId (PublishCatalogId,PublishProductId,PublishCategoryId,PimProductId,VersionId ,Localeid)  
			SELECT DISTINCT ZPC.PublishCatalogId,ZPX.PublishProductId,ZPX.PublishCategoryId,ZPP.PimProductId,Max(TH.PublishCatalogLogId),TH.Localeid 
			FROM ZnodePublishCategory ZPC 
			INNER JOIN ZnodePublishCatalogLog TH ON (TH.PublishCatalogId = ZPC.PublishCatalogId)
			INNER JOIN @tBL_CategoryCategoryHierarchyIds CTC ON (ZPC.PimCategoryHierarchyId = CTC .PimCategoryHierarchyId )
			INNER JOIN ZnodePublishCategoryProduct ZPX  ON ZPC.PublishCategoryId = ZPX.PublishCategoryId AND ZPX.PublishCatalogId = ZPC.PublishCatalogId 
			INNER JOIN ZnodePublishProduct ZPP ON ZPP.PublishCatalogId = ZPC.PublishCatalogId AND ZPX.PublishProductId = ZPP.PublishProductId 
			WHERE ZPC.PublishCatalogId = @PublishCatalogId 
			AND  TH.PublishStateId = @PublishStateId
			AND EXISTS (SELECT TOP 1 1 FROM @LocaleId WHERE id = TH.LocaleId)
			GROUP BY ZPC.PublishCatalogId,ZPX.PublishProductId ,ZPX.PublishCategoryId,ZPP.PimProductId,TH.Localeid 
		
			INSERT INTO @tBL_PublishCatalogId (PublishCatalogId,PublishProductId,PublishCategoryId,PimProductId,VersionId,Localeid ) 
			SELECT IPP.PublishCatalogId,IPP.PublishProductId,0,IPP.PimProductId,max(PublishCatalogLogId) VersionId ,h.Localeid
			FROM @insertPublishProductIds IPP 
			LEFT JOIN ZnodePublishCatalogLog h ON (h.PublishCatalogId = IPP.PublishCatalogId )
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM @tBL_PublishCatalogId PCI WHERE IPP.PublishProductId = PCI.PublishProductId)
			AND EXISTS (SELECT TOP 1 1 FROM @LocaleId WHERE id = h.LocaleId)
			AND h.PublishStateId = @PublishStateId
			GROUP BY IPP.PublishCatalogId,IPP.PublishProductId,IPP.PimProductId,Localeid
			
			UPDATE ZnodePublishCatalogLog 
			SET IsProductPublished = 1,PublishProductId = (SELECT count(PublishProductId) FROM ZnodePublishProduct ZPP WHERE ZPP.PublishCatalogId = ZnodePublishCatalogLog.PublishCatalogId ) 
			,ModifiedBy=@userId, ModifiedDate=GETDATE()
			WHERE PublishCatalogLogId IN (SELECT VersionId FROM @tBL_PublishCatalogId)

			UPDATE ZnodePimProduct 
			SET IsProductPublish = 1 ,PublishStateId = ISNULL(@ProductPublishStateId,@PublishStateId),
			ModifiedBy=@userId, ModifiedDate=GETDATE()	
			WHERE EXISTS (SELECT TOP 1 1 
				FROM @tBL_PublishCatalogId ZPP
				WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId
				)
		
				SELECT PublishCatalogId
					,PublishProductId
					,PublishCategoryId
					,VersionId,LocaleId
			FROM @tBL_PublishCatalogId
			END 
			 IF @IsCatalogPublishInProcess = 1 
				BEGIN 
				SELECT 1 Id , 'Single category publish request cannot be processed as catalog or category publish is in progress. Please try after publish is complete.' MessageDetails,  CAST(0 AS BIT ) Status
				END 
				ELSE
				 IF @IsCatalogPublishInProcess = 2 
				BEGIN
				
				SELECT 1 Id , 'Please associate products to the category or to at least one child category to publish the category.' MessageDetails,  CAST(0 AS BIT ) Status
				END 
				ELSE 
				BEGIN 
				SELECT 1 Id , ' Publish Successfull' MessageDetails, CAST(1 AS BIT ) Status
				END 
		END TRY
		BEGIN CATCH
			SELECT error_message()
				,error_procedure();
			UPDATE ZnodePublishCatalogLog 
			SET IsCatalogPublished = 0 
			WHERE PublishCatalogLogId = @versionId
			SET @status = 0;
			DECLARE @error_procedure varchar(1000)= error_procedure(),@errorMessage nvarchar(max)= error_message(),@errorLine varchar(100)= error_line(),@errorCall nvarchar(max)= 'EXEC Znode_GetPublishProducts @PimCatalogId = '+cast(@pimCatalogId AS varchar(max))+',@@PimCategoryHierarchyId='+@pimCategoryHierarchyId+',@UserId='+cast(@userId AS varchar(50))+',@UserId = '+cast(@userId AS varchar(50))+',@VersionId='+cast(@versionId AS varchar(50))+',@Status='+cast(@status AS varchar(10));
			SELECT 0 AS ID
				,cast(0 AS bit) AS Status;
			--ROLLBACK TRAN GetPublishProducts;
			EXEC Znode_InsertProcedureErrorLog @procedureName = 'Znode_GetPublishCategoryProducts',@errorInProcedure = @error_procedure,@errorMessage = @errorMessage,@errorLine = @errorLine,@errorCall = @errorCall;
		END CATCH;
		END;

		GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetProductFeedList')
BEGIN 
DROP PROCEDURE Znode_GetProductFeedList
END
GO

CREATE PROCEDURE [dbo].[Znode_GetProductFeedList]  
(   @PortalId   VARCHAR(2000) = NULL,  
    @SKU      SelectColumnList READONLY,  
    @LocaleId   INT,  
    @FeedType   NVARCHAR(MAX) = NULL)  
AS  
/*  
Summary: This Procedure is used to get effective keyword feeding of Product list  
 SELECT * FROM ZnodePublishProductDetail  
 SELECT * FROM ZnodePublishProduct WHERE PublishCatalogId = 3  
 SELECT * FROM ZnodePortalCatalog   
 Unit Testing:  
 EXEC Znode_GetProductFeedList @PortalId='0',@ProductIds = '116,117,118'  
 ,@LocaleId=1,@FeedType='Bing'   
  
*/  
     BEGIN  
  BEGIN TRY  
         SET NOCOUNT ON;        
           
   IF OBJECT_ID('tempdb..#TBL_DomainName') is not null
			drop table #TBL_DomainName

		IF OBJECT_ID('tempdb..#TBL_SEODetails') is not null
			drop table #TBL_SEODetails

		IF OBJECT_ID('tempdb..#TBL_CompleteDetailes') is not null
			drop table #TBL_CompleteDetailes

		IF OBJECT_ID('tempdb..#TBL_CompleteDetailes') is not null
			drop table #TBL_CompleteDetailes

		IF OBJECT_ID('tempdb..#TBL_PortalIds') is not null
			drop table #TBL_PortalIds

		 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
         CREATE TABLE #TBL_DomainName 
         (PortalId   INT,
          DomainName NVARCHAR(300),
          RowId      INT
         );  	
         
         CREATE TABLE #TBL_SEODetails   
         (loc                   NVARCHAR(MAX),  
          lastmod               DATETIME,  
          [g:condition]         VARCHAR(100),  
          [description]         NVARCHAR(MAX),  
          [g:id]                INT,  
          link                  VARCHAR(100),  
          [g:identifier_exists] VARCHAR(200),  
          DomainName            NVARCHAR(300),  
          PortalId              INT , 
          SEOCode             NVARCHAR(4000), 
		  CanonicalURL        VARCHAR(200), 
		  RobotTag            VARCHAR(50)
         );  
         CREATE TABLE #TBL_CompleteDetailes   
         (loc                   NVARCHAR(MAX),  
          lastmod               DATETIME,  
          [g:condition]         VARCHAR(100),  
          [description]         NVARCHAR(MAX),  
          [g:id]                INT,  
          link                  VARCHAR(100),  
          [g:identifier_exists] VARCHAR(200),  
          DomainName            NVARCHAR(300),  
          PortalId              INT,  
          [g:availability]      NVARCHAR(1000),  
          SKU                   NVARCHAR(MAX),  
		  SEOCode               NVARCHAR(4000),
		  CanonicalURL        VARCHAR(200), 
		  RobotTag            VARCHAR(50) 
         );  
         DECLARE @DefaultLocaleId INT=dbo.Fn_GetDefaultLocaleId()  ;
         CREATE TABLE #TBL_PortalIds (PortalId INT);  
			
		select * into #SKU from @SKU
		create index IDX_#SKU on #SKU(StringColumn)

         INSERT INTO #TBL_PortalIds  
         SELECT Zp.PortalId   
   FROM Znodeportal AS ZP   
   INNER JOIN ZnodePortalCatalog AS ZPC ON(ZPC.PortalId = Zp.PortalId)  
         INNER JOIN ZnodePublishCatalog AS ZPPC ON(ZPPC.PublishCatalogId = ZPC.PublishCatalogId)   
   INNER JOIN ZNodePublishProduct AS ZPP ON(ZPP.PublishCatalogId = ZPPC.PublishCatalogId)  
   INNER JOIN ZnodePublishProductDetail AS PPD ON (PPD.PublishProductId = ZPP.PublishProductId)  
         WHERE EXISTS(SELECT TOP 1 1 FROM #SKU AS Sp WHERE (sp.StringColumn  = PPD.SKU)  OR StringColumn = '0')  
   AND EXISTS(SELECT TOP 1 1 FROM DBO.Split(@PortalId, ',') AS Sp  
      WHERE(CAST(sp.Item AS INT)) = Zp.PortalId  OR @PortalId = '0')  
   AND EXISTS (SELECT TOP 1 1 FROM ZnodeDomain ZD WHERE ZP.PortalId = ZD.PortalId  
   AND IsActive = 1 AND ApplicationType = 'Webstore')  
   GROUP BY Zp.PortalId;   
  
         INSERT INTO #TBL_DomainName   
   SELECT  PortalId,DomainName,ROW_NUMBER() OVER(PARTITION BY PortalId ORDER BY DomainName)   
   FROM ZnodeDomain AS ZD   
         WHERE EXISTS(SELECT TOP 1 1 FROM #TBL_PortalIds AS TBP WHERE TBP.PortalId = ZD.PortalId)  
   AND IsActive = 1 AND ApplicationType = 'Webstore'  
    
          
   SELECT DISTINCT ZCSD.CMSSEODetailId,ZCSD.SEOURL AS loc,ZCSD.ModifiedDate AS lastmod,'new' AS [g:condition],ZCSDL.SEODescription AS [description],ZPCC.PublishProductId AS [g:id],  
             '' AS link,'false' AS [g:identifier_exists],TBDN.DomainName,ZPC.PortalId,ISNULL(ZCSDL.LocaleId, @DefaultLocaleId) AS LocaleId , ZCSD.SEOCode , ZCSDL.CanonicalURL, ZCSDL.RobotTag 
    INTO #Cte_SeoDetailsWithLocale
	FROM ZNodePublishProduct AS ZPCC   
    INNER JOIN ZnodePortalCatalog AS ZPC ON(ZPC.PublishCatalogId = ZPCC.PublishCatalogId)  
    LEFT JOIN ZnodePublishProductDetail AS PPD ON (PPD.PublishProductId = ZPCC.PublishProductId)  
             -- INNER JOIN @TBL_PortalIds TBLP ON (TBLP.PortalId = ZPC.PortalId)  
    LEFT JOIN ZnodeCMSSEODetail AS ZCSD ON(PPD.SKU = ZCSD.SEOCode and ZCSD.PortalId = ZPC.PortalId)  
             LEFT JOIN ZnodeCMSSEOType AS ZCST ON(ZCST.CMSSEOTypeId = ZCSD.CMSSEOTypeId AND ZCST.Name = 'Product')  
             LEFT JOIN ZnodeCMSSEODetailLocale AS ZCSDL ON(ZCSDL.CMSSEODetailId = ZCSD.CMSSEODetailId AND ZCSDL.LocaleId IN(@LocaleId, @DefaultLocaleId))  
             LEFT JOIN #TBL_DomainName AS TBDN ON(TBDN.RowId = 1 AND TBDN.PortalId = zpc.PortalId )   
    WHERE EXISTS(SELECT TOP 1 1 FROM #SKU AS Sp  
      WHERE (sp.StringColumn  = PPD.SKU) OR StringColumn = '0')  
   AND EXISTS(SELECT TOP 1 1 FROM #TBL_PortalIds AS TBP WHERE TBP.PortalId = ZPC.PortalId )  
    
 
	SELECT CMSSEODetailId,loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,PortalId,LocaleId,SEOCode, CanonicalURL, RobotTag  
	into #Cte_SeoDetailsWithFirstLocale
	FROM #Cte_SeoDetailsWithLocale   
	WHERE LocaleId = @LocaleId  
    
    SELECT CMSSEODetailId,loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,PortalId,LocaleId,SEOCode , CanonicalURL, RobotTag 
             INTO #Cte_SeoDetailsWithDefaultLocale
			 FROM #Cte_SeoDetailsWithFirstLocale  
             UNION ALL  
             SELECT CMSSEODetailId,loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,PortalId,LocaleId,SEOCode, CanonicalURL, RobotTag  
             FROM #Cte_SeoDetailsWithLocale AS CTSDWL  
             WHERE LocaleId = @DefaultLocaleId   
    AND NOT EXISTS(SELECT TOP 1 1 FROM #Cte_SeoDetailsWithFirstLocale AS CTSDWDL WHERE CTSDWDL.CMSSEODetailId = CTSDWL.CMSSEODetailId)  
                
   INSERT INTO #TBL_SEODetails  
         SELECT DISTINCT loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,PortalId ,SEOCode, CanonicalURL, RobotTag  
   FROM #Cte_SeoDetailsWithDefaultLocale;  
  
    
  
         INSERT INTO #TBL_CompleteDetailes  
         SELECT TBSD.loc,TBSD.lastmod,TBSD.[g:condition],TBSD.[description],TBSD.[g:id],TBSD.link,TBSD.[g:identifier_exists],TBSD.DomainName,TBSD.PortalId,  
         CASE WHEN SUM(ZI.Quantity) > 0 THEN 'In Stock' ELSE CASE WHEN @FeedType = 'Google' THEN 'Out Of Stock' ELSE 'Not In Stock' END  
         END AS [g:availability],ZPPD.SKU ,TBSD.SEOCode, TBSD.CanonicalURL, TBSD.RobotTag  
   FROM ZnodePublishProduct AS ZPP   
   LEFT JOIN #TBL_SEODetails AS TBSD ON(ZPP.PublishProductId = TBSD.[g:id] )  
         LEFT JOIN ZnodePublishProductDetail AS ZPPD ON(ZPPD.PublishProductId = ZPP.PublishProductId AND ZPPD.LocaleId = @LocaleId )  
         LEFT JOIN ZnodePortalWarehouse AS ZPW ON(ZPW.PortalId = TBSD.PortalId)  
         LEFT JOIN ZnodePortalAlternateWarehouse AS ZAPW ON(ZAPW.PortalWarehouseId = ZPW.PortalWarehouseId)  
         LEFT JOIN ZnodeInventory AS ZI ON(ZI.SKU = ZPPD.SKU AND (ZI.WarehouseId = ZPW.WarehouseId OR ZI.WarehouseId = ZAPW.WarehouseId))  
         WHERE EXISTS(SELECT TOP 1 1 FROM #SKU AS Sp WHERE (sp.StringColumn  = ZPPD.SKU) OR StringColumn = '0')  
   AND EXISTS(SELECT TOP 1 1 FROM #TBL_PortalIds AS TBP WHERE TBP.PortalId = TBSD.PortalId )  
         GROUP BY loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,TBSD.PortalId,ZPPD.SKU,ZPPD.LocaleId, TBSD.SEOCode;    
           
		    DECLARE @MediaConfiguration NVARCHAR(2000)=((SELECT TOP 1 ISNULL(CASE WHEN CDNURL = '' THEN NULL ELSE CDNURL END,URL) FROM ZnodeMediaConfiguration WHERE IsActive = 1));    
  
         SELECT zp.PortalId,dbo.Fn_GetDefaultPriceRoundOff(ZPS.RetailPrice)RetailPrice,Zps.SKU,TBCD.SEOCode,ROW_NUMBER() OVER(PARTITION BY Zps.SKU,zp.PortalId ORDER BY ZPS.RetailPrice) AS RowId  
         into #Cte_PortalList
		     FROM ZnodePriceList AS ZPL   
    LEFT JOIN ZnodePriceListPortal AS ZPLP ON ZPL.PriceListId = ZPLP.PriceListId  
             LEFT JOIN dbo.ZnodeCulture AS zc ON ZPL.CultureId = zc.CultureId
    LEFT JOIN dbo.ZnodePortal AS zp ON ZPLP.PortalId = zp.PortalId  
             LEFT JOIN ZnodePrice AS Zps ON(Zps.PriceListId = ZPL.PriceListId)   
    LEFT JOIN #TBL_CompleteDetailes AS TBCD ON(TBCD.PortalId = Zp.PortalId AND TBCD.SKU = Zps.Sku)   
    WHERE CAST(@GetDate AS DATE) BETWEEN ZPL.ActivationDate AND ZPL.ExpirationDate   
    AND EXISTS( SELECT TOP 1 1 FROM #TBL_PortalIds AS TBP WHERE TBP.PortalId = ZPLP.PortalId)   
    GROUP BY zp.PortalId,ZPS.RetailPrice,Zps.SKU ,TBCD.SEOCode  
     
   SELECT loc,lastmod,[g:condition],[description],[g:id],link,[g:availability],[g:identifier_exists],DomainName,TBCD.PortalId  
		 ,CTPL.RetailPrice AS [g:price],@MediaConfiguration AS MediaConfiguration, TBCD.SEOCode, TBCD.CanonicalURL, TBCD.RobotTag 
   FROM #TBL_CompleteDetailes AS TBCD   
   LEFT JOIN Cte_PortalList AS CTPL ON(CTPL.PortalId = TBCD.PortalId AND CTPL.SKU = TBCD.SKU AND CTPL.RowID = 1)  
   WHERE  EXISTS(SELECT TOP 1 1 FROM #TBL_PortalIds AS TBP WHERE TBP.PortalId = TBCD.PortalId )  
  

    IF OBJECT_ID('tempdb..#TBL_DomainName') is not null
			drop table #TBL_DomainName

		IF OBJECT_ID('tempdb..#TBL_SEODetails') is not null
			drop table #TBL_SEODetails

		IF OBJECT_ID('tempdb..#TBL_CompleteDetailes') is not null
			drop table #TBL_CompleteDetailes

		IF OBJECT_ID('tempdb..#TBL_CompleteDetailes') is not null
			drop table #TBL_CompleteDetailes

		IF OBJECT_ID('tempdb..#TBL_PortalIds') is not null
			drop table #TBL_PortalIds

 END TRY  
 BEGIN CATCH  
  DECLARE @Status BIT ;  
  SET @Status = 0;  
  DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetProductFeedList @PortalId = '+@PortalId+',@LocaleId='+CAST(@LocaleId AS VARCHAR(50))+',@FeedType='+CAST(@FeedType AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));  
                    
        SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                      
      
        EXEC Znode_InsertProcedureErrorLog  
   @ProcedureName = 'Znode_GetProductFeedList',  
   @ErrorInProcedure = @Error_procedure,  
   @ErrorMessage = @ErrorMessage,  
   @ErrorLine = @ErrorLine,  
   @ErrorCall = @ErrorCall;  
 END CATCH  
   
  END;
  GO
  IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPriceFromAssociateProducts')
BEGIN 
DROP PROCEDURE Znode_GetPriceFromAssociateProducts
END
GO
CREATE  PROCEDURE [dbo].[Znode_GetPriceFromAssociateProducts]
(   
	@PortalId         INT,
    @SKU			  NVARCHAR(300),
	@PimProductId	  INT,
	@UserId			  INT = 2,
	@ProductType	  VARCHAR(200),
	@LocaleId		  INT )
AS 
  /*  
    Summary: WebStore: Calculate price from associate product and assign to parent products
	EXEC [Znode_GetPriceFromAssociateProducts]
	@PortalId         = 1 ,
	@SKU	= 'gr990',
	@PimProductId	=  97 ,
	@UserId	= 2,
	@ProductType	= 'Configurable Product',
	@LocaleId	= 1 

 */
     BEGIN
         BEGIN TRAN A;
         BEGIN TRY
             SET NOCOUNT ON;

			 DECLARE @TBL_ListOfAssociateProducts TABLE (PimProductId int ,AssociatedProductId int,ParentSKU NVARCHAR(300),
				ChildSKU NVARCHAR(300),RetailPrice  numeric(28,6),AssociatedProductDisplayOrder int ,
				TypeOfProduct nvarchar(100),SalesPrice  numeric(28,6))
		     DECLARE @tbl_PricingListOfAssociatedProduct TABLE (sku nvarchar(200),RetailPrice numeric(28,6),SalesPrice numeric(28,6),TierPrice numeric(28,6),
				TierQuantity numeric(28,6),CurrencyCode varchar(200),CurrencySuffix varchar(2000), CultureCode varchar(100), ExternalId NVARCHAR(2000),Custom1 NVARCHAR(MAX),Custom2 NVARCHAR(MAX), Custom3 NVARCHAR(MAX))				

			DECLARE @PimAttributeId INT,@currentUtcDate   VARCHAR(200) = ''
			SET @currentUtcDate   = GETDATE ()
			SET @PimAttributeId =   DBO.Fn_GetProductSKUAttributeId()
						    Declare @ChildProductIds TABLE (Id int, AssociatedProductDisplayOrder int )
			INSERT INTO @ChildProductIds (ID,AssociatedProductDisplayOrder) 
			SELECT ZPPT.PimProductId , ZPPT.DisplayOrder  from ZnodePimProductTypeAssociation ZPPT 
			WHERE ZPPT.PimParentProductId= @PimProductId
			

			--Price logic for Associate products
			INSERT INTO @TBL_ListOfAssociateProducts
			(AssociatedProductId,ChildSKU,ParentSKU,PimProductId,RetailPrice,SalesPrice,TypeOfProduct,AssociatedProductDisplayOrder)
			SELECT ZPAV.PimProductId,ZPAVL.AttributeValue,@SKU ,@PimProductId,NULL , NULL,@PimProductId,
			CPI.AssociatedProductDisplayOrder 
			FROM ZnodePimAttributeValue ZPAV INNER JOIN ZnodePimAttributeValueLocale ZPAVL 
			ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId
			Inner join @ChildProductIds  CPI ON CPI.ID = ZPAV.PimProductId  
			where ZPAV.PimAttributeId  = @PimAttributeId 

			


			SELECT @SKU = Substring((SELECT ',' + Convert(nvarchar(100),ChildSKU) 
			FROM @TBL_ListOfAssociateProducts where AssociatedProductId is not null FOR XML PAth('')),2,4000) 

			

			INSERT INTO @tbl_PricingListOfAssociatedProduct (SKU,RetailPrice ,SalesPrice,TierPrice,TierQuantity,CurrencyCode,CurrencySuffix, CultureCode, ExternalId,Custom1,Custom2,Custom3)	
			EXEC Znode_GetPublishProductPricingBySku  @Sku ,@portalID  ,@currentUtcDate,@UserId 


			update PLC SET PLC.RetailPrice = PLCA.RetailPrice ,
			PLC.SalesPrice = PLCA.SalesPrice 
			from @TBL_ListOfAssociateProducts PLC inner join @tbl_PricingListOfAssociatedProduct
			PLCA on PLC.ChildSKU = PLCA.sku
			
			--If @ProductType = 'Configurable Product'
			--	select Min(RetailPrice)  RetailPrice  , Min(SalesPrice) SalesPrice  from @TBL_ListOfAssociateProducts
			--ELSE If @ProductType = 'grouped product'
			--	select TOP 1 RetailPrice , SalesPrice from @TBL_ListOfAssociateProducts
			--	Order by AssociatedProductDisplayOrder
			If @ProductType in ('Configurable Product','grouped product')
				select Min(RetailPrice)  RetailPrice  , Min(SalesPrice) SalesPrice  from @TBL_ListOfAssociateProducts			
				
			 COMMIT TRAN A;
			
         END TRY
         BEGIN CATCH
              DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), 
			 @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(),
			  @ErrorLine VARCHAR(100)= ERROR_LINE(),
			   @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetProductDataForWebStore_ver1 @PortalId='+CAST(@PortalId AS VARCHAR(50))+',@LocaleId='+CAST(@LocaleId AS VARCHAR(50));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetProductDataForWebStore_ver1',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
	 GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetSkuPricebyCatalog_Stock')
BEGIN 
DROP PROCEDURE Znode_GetSkuPricebyCatalog_Stock
END
GO
CREATE PROCEDURE [dbo].[Znode_GetSkuPricebyCatalog_Stock]
(   @WhereClause		NVARCHAR(max),
    @Rows				INT            = 100,
    @PageNo				INT            = 1,
    @Order_BY			VARCHAR(1000)  = '',
    @RowsCount			INT  out,
	@LocaleId			INT			   = 0,
	@Sku                VARCHAR(MAX),
	@PortalId		    INT = 0,
	@currentUtcDate     VARCHAR(200) = '',
	@PublishProductId   TransferId READONLY,
	@IsInStock			varchar(5) 
		)		
AS 
/*
    Summary: This procedure is used to find the PriceList by catalog 
	Unit Testing: 
	
    @IsInStock --- for 1 - In stock data , for 0 - out off stock data , for -1 - all data

	 EXEC Znode_GetSkuPricebyCatalog @WhereClause='' ,@Order_BY='RetailPrice',@RowsCount= 0,@Sku = 'str324,pe3251,pe0978,kw001,lm001,li001,sf001,og002', @LocaleId = 1,@PortalId=1,@currentUtcDate='2017'
*/

     BEGIN
         BEGIN TRY
		 
             SET NOCOUNT ON;
             DECLARE @SQL NVARCHAR(MAX);
			 DECLARE @TBL_PricebyCatalog TABLE (SKU NVARCHAR(4000),RetailPrice numeric(28,6),RowId INT,CountNo INT,callforpricing int)
			 DECLARE @DefaultLocaleId INT = dbo.FN_GetDefaultLocaleId()

			DECLARE  @tbl_PricingSku TABLE (sku nvarchar(200),RetailPrice numeric(28,6),SalesPrice numeric(28,6),TierPrice numeric(28,6),
						TierQuantity numeric(28,6),CurrencyCode varchar(200),CurrencySuffix varchar(2000), CultureCode varchar(100), ExternalId NVARCHAR(2000), Custom1 NVARCHAR(MAX),
			  Custom2 NVARCHAR(MAX), Custom3 NVARCHAR(MAX))				
			
						INSERT INTO @tbl_PricingSku (sku,RetailPrice ,SalesPrice,TierPrice,TierQuantity,CurrencyCode,CurrencySuffix, CultureCode, ExternalId ,Custom1,Custom2,Custom3 )	
						EXEC Znode_GetPublishProductPricingBySku  @Sku ,@portaliD  ,@currentUtcDate,2,@PublishProductId
		
					  SELECT DISTINCT sku,RetailPrice
					  INTO #tbl_PricingSku
					  FROM   @tbl_PricingSku 
					  UNION  ALL 
					  SELECT item sku,NULL RetailPrice
					  FROM dbo.split(@Sku,',') SP 
					  WHERE NOT EXISTS (SELECT TOP 1 1  FROM @tbl_PricingSku TBSP WHERE TBSP.sku = Sp.Item) 
					  AND @Sku <> ''
					  UNION ALL 
					  SELECT SKU , NULL RetailPrice
					  FROM ZnodePublishProductDetail  a 
					  INNER JOIN @PublishProductId b ON (b.Id = a.PublishProductId) 
					  WHERE LocaleId = @DefaultLocaleId
					  AND NOT EXISTS (SELECT TOP 1 1  FROM @tbl_PricingSku TBSP WHERE TBSP.sku = a.SKU) 
					  AND @Sku = ''


					

	 SET @SQL = 
			       '
			DECLARE @tbl_ProductIDSKU Table(productid int,sku nvarchar(200))
					Insert into @tbl_ProductIDSKU (productid,sku)
					Select vw.PimProductId,vw.AttributeValue from View_PimProductAttributeValue vw where vw.AttributeCode = ''SKU'' and vw.AttributeValue in (select sku from #tbl_PricingSku);
					
			DECLARE @tbl_ProductIdCallForPricing Table(productid int,callforpricing nvarchar(200))
					Insert into @tbl_ProductIdCallForPricing (productid,callforpricing)
					select DISTINCT vw.PimProductId,vw.AttributeValue from View_PimProductAttributeValue vw where vw.AttributeCode = ''CallForPricing'' and vw.PimProductId in (Select PimProductid from View_PimProductAttributeValue where AttributeCode = ''SKU'' and AttributeValue in (select sku from #tbl_PricingSku))

            DECLARE @tbl_SKUCallForPricing Table(sku nvarchar(200),callforpricing int)
					Insert into @tbl_SKUCallForPricing (sku,callforpricing)
					select _ps.sku,Case when _pcp.callforpricing = ''true'' then 1 else 0 end callforpricing from @tbl_ProductIdCallForPricing _pcp join @tbl_ProductIDSKU _ps on _pcp.productid=_ps.productid where _ps.sku in (select sku from #tbl_PricingSku)

				
				   ;WITH CTE_GetFilteredList AS
					(
						SELECT DISTINCT A.sku,A.RetailPrice,B.callforpricing as CallForPricing, '+dbo.Fn_GetPagingRowId(@Order_BY,'A.SKU DESC ')+',Count(*)Over() CountNo
						FROM #tbl_PricingSku A 
						LEFT join @tbl_SKUCallForPricing B on A.sku = b.sku 
						WHERE 1=1
						'+dbo.Fn_GetFilterWhereClause(@WhereClause)+'			
					)
				
	
					SELECT SKU,RetailPrice,CallForPricing,RowId,CountNo
					FROM CTE_GetFilteredList
				   '+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)+
					CASE WHEN @Order_BY = '' THEN '' ELSE ' ORDER BY '+ @Order_BY END

            PRINT @SQL
			INSERT INTO @TBL_PricebyCatalog(SKU,RetailPrice,CallForPricing,RowId,CountNo)
			EXEC sys.sp_sqlexec @SQL

			DECLARE @TBL_PricebyCatalogFinalResult TABLE ( SKU NVARCHAR(4000), RetailPrice numeric(28,6), Callforpricing int, RowId INT,CountNo INT )

			IF ( @IsInStock = '-1' )  
			BEGIN
				INSERT INTO @TBL_PricebyCatalogFinalResult ( SKU,RetailPrice,CallForPricing, RowId ,CountNo )
				SELECT SKU,RetailPrice,CallForPricing, RowId ,CountNo
				FROM @TBL_PricebyCatalog
			END
			ELSE IF ( @IsInStock = '1' )
			BEGIN	
				  INSERT INTO @TBL_PricebyCatalogFinalResult ( SKU,RetailPrice,CallForPricing, RowId ,CountNo )			
				  SELECT distinct TPC.SKU, TPC.RetailPrice, TPC.CallForPricing, TPC.RowId ,TPC.CountNo
				  FROM [dbo].[ZnodePimProductAttributeDefaultValue] oosdv
				  INNER JOIN ZnodePimAttributeValue oos ON oosdv.PimAttributeValueId = oos.PimAttributeValueId
				  INNER JOIN ZnodePimAttributeDefaultValue oosv ON oosdv.PimAttributeDefaultValueId = oosv.PimAttributeDefaultValueId
				  INNER JOIN ZnodePimAttributeValue sku ON oos.PimProductId = sku.PimProductId
				  INNER JOIN ZnodePimAttributeValueLocale skul ON sku.PimAttributeValueId = skul.PimAttributeValueId
				  INNER JOIN @TBL_PricebyCatalog TPC ON SKUL.AttributeValue = TPC.SKU
				  INNER JOIN ZnodePimAttribute Attr ON oos.PimAttributeId = Attr.PimAttributeId
				  WHERE Attr.AttributeCode = 'OutOfStockOptions' 
				  AND  EXISTS ( SELECT * FROM [dbo].[ZnodeInventory] I WHERE I.SKU = TPC.SKU AND 1 = (case when oosv.AttributeDefaultValueCode = 'DisablePurchasing' and I.Quantity < 1 then 0 else 1 end) )
			END
			ELSE IF ( @IsInStock = '0' )
			BEGIN
			      INSERT INTO @TBL_PricebyCatalogFinalResult ( SKU,RetailPrice,CallForPricing, RowId, CountNo )
				  SELECT distinct TPC.SKU, TPC.RetailPrice, TPC.CallForPricing, TPC.RowId ,TPC.CountNo
				  FROM [dbo].[ZnodePimProductAttributeDefaultValue] oosdv
				  INNER JOIN ZnodePimAttributeValue oos ON oosdv.PimAttributeValueId = oos.PimAttributeValueId
				  INNER JOIN ZnodePimAttributeDefaultValue oosv ON oosdv.PimAttributeDefaultValueId = oosv.PimAttributeDefaultValueId
				  INNER JOIN ZnodePimAttributeValue sku ON oos.PimProductId = sku.PimProductId
				  INNER JOIN ZnodePimAttributeValueLocale skul ON sku.PimAttributeValueId = skul.PimAttributeValueId
				  INNER JOIN @TBL_PricebyCatalog TPC ON SKUL.AttributeValue = TPC.SKU
				  INNER JOIN ZnodePimAttribute Attr ON oos.PimAttributeId = Attr.PimAttributeId
				  WHERE Attr.AttributeCode = 'OutOfStockOptions' 
				  AND  EXISTS ( SELECT TOP 1 1  FROM [dbo].[ZnodeInventory] I WHERE I.SKU = TPC.SKU  AND  oosv.AttributeDefaultValueCode = 'DisablePurchasing' GROUP BY I.SKU HAVING SUM(I.Quantity ) < 1  )
			END

			SET @RowsCount =ISNULL((SELECT TOP 1 CountNo FROM @TBL_PricebyCatalogFinalResult ),0)

			SELECT SKU,RetailPrice,CallForPricing FROM @TBL_PricebyCatalogFinalResult

		END TRY
		BEGIN CATCH
		DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetSkuPricebyCatalog @WhereClause = '
			 +CAST(@WhereClause AS VARCHAR(MAX))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))
			 +',@Order_BY='+@Order_BY+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@LocaleId='+CAST(@LocaleId AS VARCHAR(20))
			 +',@PortalId= '+cast(@PortalId as varchar(200))+',@currentUtcDate= '
			 +@currentUtcDate+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status,ERROR_MESSAGE();                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetSkuPricebyCatalog',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;

		END CATCH

	END
	GO
UPDATE ZnodeApplicationSetting 
SET Setting='<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>SearchSynonymsId</name>      <headertext>Checkbox</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>SearchSynonymsId</name>      <headertext>ID</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>/SearchConfiguration/EditSearchSynonyms</islinkactionurl>      <islinkparamfield>searchSynonymsId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>OriginalTerm</name>      <headertext>Original Term</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>ReplacedBy</name>      <headertext>Replaced By</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>IsBidirectional</name>      <headertext>Is Bidirectional</headertext>      <width>60</width>      <datatype>Boolean</datatype>      <columntype>Boolean</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>Edit|Delete</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Edit|Delete</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/SearchConfiguration/EditSearchSynonyms|/SearchConfiguration/DeleteSearchSynonyms</manageactionurl>      <manageparamfield>searchSynonymsId|searchSynonymsId,PublishCatalogId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>'
WHERE ItemName ='ZnodeSearchSynonymsList'
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_UpdateInventory')
BEGIN 
DROP PROCEDURE Znode_UpdateInventory
END
GO


CREATE PROCEDURE [dbo].[Znode_UpdateInventory]
(
	@SkuXml xml,
	@PortalId int, 
	@UserId int, 
	@Status bit OUT, 
	@IsDebug bit= 0)
AS 
	/*
	Summary: (13671)   Inventory will be updated on the basis of "InventoryTracking" (Attribute Code) value in locale table 
				    If value id "DisablePurchasing" then subtracts currently selected quantity only when it will greater than zero.
				    If "AllowBackordering" then inventory will become negative
				    If "DontTrackInventory" then don't update inventory.
				    inventory will be get deducted from associated warehouse where quantity is available as per warehouse precedence. 
				    Validate total quantity 
	Input Parameters:
	SKU(Comma separated multiple), PortalId
	Unit Testing   
		Declare @Status bit 
		Exec Znode_UpdateInventory  @SkuXml = '<ArrayOfOrderWarehouseLineItemsModel>
		<OrderWarehouseLineItemsModel>
		<OrderLineItemId>418</OrderLineItemId>
		<SKU>ap1534</SKU>
		<InventoryTracking>DisablePurchasing</InventoryTracking>
		<Quantity>1.000000</Quantity>
		</OrderWarehouseLineItemsModel>
		<OrderWarehouseLineItemsModel>
		<OrderLineItemId>419</OrderLineItemId>
		<SKU>al8907</SKU>
		<InventoryTracking>DisablePurchasing</InventoryTracking>
		<Quantity>1.000000</Quantity>
		</OrderWarehouseLineItemsModel>
		</ArrayOfOrderWarehouseLineItemsModel>',@PortalId = 1,@UserId = 2,@Status = @Status

	*/
BEGIN
	BEGIN TRAN UpdateInventory;
	BEGIN TRY
		SET NOCOUNT ON;
		DECLARE @RoundOffValue INT= dbo.Fn_GetDefaultValue('InventoryRoundOff');
		DECLARE @TBL_XmlReturnToTable TABLE
		( 
			OrderLineItemId int, SKU nvarchar(max), InventoryTracking nvarchar(1000), Quantity numeric(28, 6),
			AllowBackOrder VARCHAR(100), SequenceNo int IDENTITY
		);
		DECLARE @TBL_ErrorInventoryTracking TABLE
		( 
			SKU nvarchar(max), Quantity numeric(28, 6), InventoryTracking nvarchar(2000), AllowBackOrder varchar(100)
		);
		INSERT INTO @TBL_XmlReturnToTable( OrderLineItemId, SKU, InventoryTracking, Quantity,AllowBackOrder )
			   SELECT Tbl.Col.value( 'OrderLineItemId[1]', 'INT' ) AS OrderLineItemId, Tbl.Col.value( 'SKU[1]', 'NVARCHAR(2000)' ) AS SKU, Tbl.Col.value( 'InventoryTracking[1]', 'NVARCHAR(2000)' ) AS InventoryTracking, Tbl.Col.value( 'Quantity[1]', 'Numeric(28,6)' ) AS Quantity
			   , Tbl.Col.value( 'AllowBackOrder[1]', 'VARCHAR(100)' ) AS AllowBackOrder
			   FROM @SkuXml.nodes( '//ArrayOfOrderWarehouseLineItemsModel/OrderWarehouseLineItemsModel' ) AS Tbl(Col)
			   WHERE Tbl.Col.value( 'InventoryTracking[1]', 'NVARCHAR(2000)' ) <> 'DontTrackInventory' 
			   AND Tbl.Col.value( 'Quantity[1]', 'Numeric(28,6)' ) > 0
			   ;
		DECLARE @Cur_WarehouseId int, @Cur_PortalId int, @Cur_PortalWarehouseId int, @Cur_WarehouseSequence int, @Cur_SKU varchar(200), @Cur_Quantity numeric(28, 6), @Cur_ReOrderLevel numeric(28, 6), @Cur_InventoryId int;
             
		
	
		DECLARE @RecurringQuantity numeric(28, 6), @BalanceQuantity numeric(28, 6)
		SET @Status = 0; 
      		

		DECLARE @TBL_CalculateQuntity TABLE
		( 
			WarehouseId int, SKU varchar(200), MainQuantity numeric(28, 6), InventoryId int, OrderQuantity numeric(28, 6), UpdatedQuantity numeric(28, 6), WarehouseSequenceId int, InventoryTracking nvarchar(2000)
			, AllowBackOrder varchar(100)
		);
		
		DECLARE @TBL_AllwareHouseToportal TABLE
		( 
			WarehouseId int, PortalId int, PortalWarehouseId int, WarehouseSequenceFirst int, WarehouseSequence int, SKU varchar(200), Quantity numeric(28, 6), ReOrderLevel numeric(28, 6), InventoryId int
		);
		
	
		INSERT INTO @TBL_AllwareHouseToportal( WarehouseId, PortalId, PortalWarehouseId, SKU, Quantity, ReOrderLevel, InventoryId, WarehouseSequence, WarehouseSequenceFirst )
			SELECT ZPW.WarehouseId, ZPW.PortalId, zpw.PortalWarehouseId, zi.SKU, zi.Quantity, zi.ReOrderLevel, zi.InventoryId, DENSE_RANK() OVER(ORDER BY ZPW.WarehouseId), 1
			FROM dbo.ZnodeInventory AS zi
			LEFT JOIN [ZnodePortalWarehouse] AS ZPW ON ZPW.WarehouseId = ZI.WareHouseId AND  ZPW.PortalId = @PortalId
			WHERE EXISTS ( SELECT TOP 1 1  FROM @TBL_XmlReturnToTable AS TBXRT WHERE RTRIM(LTRIM(TBXRT.SKU)) = RTRIM(LTRIM(zi.SKU))) 
			AND ZPW.WarehouseId IS NOT NULL
			ORDER BY ZPW.Precedence DESC
			
		

INSERT INTO @TBL_AllwareHouseToportal( WarehouseId, PortalId, PortalWarehouseId, SKU, Quantity, ReOrderLevel, InventoryId, WarehouseSequence, WarehouseSequenceFirst )
SELECT zpaw.WarehouseId, @PortalId, zpaw.PortalWarehouseId, zi.SKU, zi.Quantity, zi.ReOrderLevel, zi.InventoryId, DENSE_RANK() OVER (ORDER BY zpaw.WarehouseId),
CASE WHEN EXISTS ( SELECT TOP 1 1 FROM @TBL_AllwareHouseToportal WE WHERE WE.SKU = ZI.SKU  ) THEN 2 ELSE 1 END
FROM dbo.ZnodeInventory AS zi 
INNER JOIN [dbo].[ZnodePortalAlternateWarehouse] AS zpaw ON zpaw.WarehouseId = ZI.WareHouseId
WHERE EXISTS ( SELECT TOP 1 1 FROM [ZnodePortalWarehouse] AS a WHERE zpaw.PortalWarehouseId = a.PortalWarehouseId AND  a.PortalId = @PortalId) AND 
EXISTS ( SELECT TOP 1 1 FROM @TBL_XmlReturnToTable AS TBXRT WHERE RTRIM(LTRIM(TBXRT.SKU)) = RTRIM(LTRIM(zi.SKU))) ORDER BY ZPAW.Precedence DESC;
   
		--INSERT INTO @TBL_AllwareHouseToportal( WarehouseId, PortalId, PortalWarehouseId, SKU, Quantity, ReOrderLevel, InventoryId, WarehouseSequence, WarehouseSequenceFirst )
		--	SELECT ZPW.WarehouseId, ZPW.PortalId, zpw.PortalWarehouseId, zi.SKU, zi.Quantity, zi.ReOrderLevel, zi.InventoryId, DENSE_RANK() OVER(ORDER BY ZPW.WarehouseId), 1
		--	FROM dbo.ZnodeInventory AS zi
		--	LEFT JOIN [ZnodePortalWarehouse] AS ZPW ON ZPW.WarehouseId = ZI.WareHouseId AND  ZPW.PortalId = @PortalId
		--	WHERE EXISTS ( SELECT TOP 1 1  FROM @TBL_XmlReturnToTable AS TBXRT WHERE RTRIM(LTRIM(TBXRT.SKU)) = RTRIM(LTRIM(zi.SKU))) ORDER BY ZPW.Precedence DESC;

		
		--Total Avaialble qunatity in all warehouse 
		IF EXISTS ( SELECT TOP 1 1 FROM @TBL_XmlReturnToTable WHERE InventoryTracking = 'DisablePurchasing')
		BEGIN

			INSERT INTO @TBL_ErrorInventoryTracking 
			SELECT TBAHL.SKU, SUM(TBAHL.Quantity), InventoryTracking,TBXML.AllowBackOrder 
			FROM @TBL_XmlReturnToTable AS TBXML
			LEFT JOIN @TBL_AllwareHouseToportal AS TBAHL ON(TBAHL.SKU = TBXML.SKU) 
			INNER JOIN ZnodeOmsOrderLineItems b on (TBXML.orderlineitemid = b.OmsOrderLineItemsId)
			WHERE InventoryTracking = 'DisablePurchasing'
			AND b.OrderLineItemRelationshipTypeId IS NOT NULL
			GROUP BY TBXML.AllowBackOrder ,TBAHL.SKU, InventoryTracking HAVING SUM(TBAHL.Quantity) < 1 ORDER BY TBAHL.SKU;
			IF EXISTS ( SELECT TOP 1 1 FROM @TBL_ErrorInventoryTracking )
			BEGIN
				SET @Status = 0;
				RAISERROR(15600, -1, -1, 'DisablePurchasing');
			END;
		END;

		

			INSERT INTO @TBL_CalculateQuntity
			   SELECT WarehouseId, TBXML.SKU, TBAHL.Quantity, TBAHL.InventoryId, TBXML.Quantity, NULL AS UpdatedQuantity, DENSE_RANK() 
			   OVER(ORDER BY WarehouseSequenceFirst,WarehouseSequence), InventoryTracking, TBXML.AllowBackOrder
			   FROM @TBL_XmlReturnToTable AS TBXML	
			   INNER  JOIN @TBL_AllwareHouseToportal AS TBAHL ON(TBAHL.SKU = TBXML.SKU)
			   ORDER BY  WarehouseSequenceFirst,WarehouseSequence;

		
		
		UPDATE @TBL_CalculateQuntity 
		SET UpdatedQuantity = MainQuantity - OrderQuantity  
		WHERE WarehouseSequenceId = 1;
		 		
		DECLARE @CountToRepeate int= ( SELECT count( distinct WarehouseId) FROM @TBL_CalculateQuntity),@Initializationofloop int= 2;
       
		WHILE @Initializationofloop <= @CountToRepeate 
				AND EXISTS (SELECT TOP 1 1 FROM @TBL_CalculateQuntity AS a 
					WHERE UpdatedQuantity < 0  )
		BEGIN
		 
			UPDATE a  
			SET a.UpdatedQuantity = a.MainQuantity + b.UpdatedQuantity 
			FROM @TBL_CalculateQuntity a 
			INNER JOIN @TBL_CalculateQuntity b ON (a.Sku = b.Sku AND b.WarehouseSequenceId = (@Initializationofloop - 1)) 
			WHERE a.WarehouseSequenceId = @Initializationofloop 
			AND b.UpdatedQuantity < 0
			AND b.UpdatedQuantity IS NOT NULL 
			--AND a.WarehouseSequenceId = @Initializationofloop - 1

			UPDATE @TBL_CalculateQuntity 
			SET UpdatedQuantity  = 0 
			WHERE WarehouseSequenceId = @Initializationofloop -1 
			--AND  InventoryTracking <> 'AllowBackordering'
			AND UpdatedQuantity < 0
			AND UpdatedQuantity IS NOT NULL 
			--AND WarehouseSequenceId = @Initializationofloop - 1


			SET @Initializationofloop = @Initializationofloop + 1;
		END; 
		
		
		   IF EXISTS (SELECT TOP 1 1 FROM @TBL_CalculateQuntity WHERE ISNULL(UpdatedQuantity,0) < 0 AND @CountToRepeate >1)
		   BEGIN 
		    UPDATE a  
			SET a.UpdatedQuantity = b.UpdatedQuantity 
			FROM @TBL_CalculateQuntity a 
			INNER JOIN @TBL_CalculateQuntity b ON (a.Sku = b.Sku AND b.WarehouseSequenceId = @Initializationofloop -1 ) 
			WHERE a.WarehouseSequenceId = 1 
			AND ISNULL(b.UpdatedQuantity,0) < 0

			UPDATE @TBL_CalculateQuntity 
			SET UpdatedQuantity  = 0 
			WHERE WarehouseSequenceId = @Initializationofloop -1 
			--AND  InventoryTracking <> 'AllowBackordering'
		    AND ISNULL(UpdatedQuantity,0) < 0
		   END 
			
			
		--If "AllowBackordering" then inventory will go to be negative conside only single warehouse
		IF EXISTS(SELECT TOP 1 1 FROM @TBL_XmlReturnToTable WHERE InventoryTracking = 'AllowBackordering')
		BEGIN
			UPDATE ZI SET Quantity = Isnull(TBCQ.UpdatedQuantity,0) 
			FROM dbo.ZnodeInventory ZI 
			INNER JOIN @TBL_CalculateQuntity TBCQ ON(Zi.InventoryId = TBCQ.InventoryId)
			WHERE InventoryTracking = 'AllowBackordering' AND  UpdatedQuantity IS NOT NULL  ;
			SET @Status = 1;
		END;
		
					-- If @InventoryTracking is "DisablePurchasing" then subtracts currently selected quantity only when it will greater than zero.
				IF EXISTS ( SELECT TOP 1 1 FROM @TBL_XmlReturnToTable WHERE InventoryTracking = 'DisablePurchasing')
				BEGIN
					SET @BalanceQuantity = 1;
					UPDATE ZI 
					SET Quantity = CASE WHEN TBCQ.UpdatedQuantity < 0 THEN 0 ELSE TBCQ.UpdatedQuantity END 
					FROM dbo.ZnodeInventory ZI 
					INNER JOIN  @TBL_CalculateQuntity TBCQ ON(Zi.InventoryId = TBCQ.InventoryId) WHERE InventoryTracking = 'DisablePurchasing'
					AND TBCQ.UpdatedQuantity IS NOT NULL 
					;
				END;
		
	
		--	SELECT * FROM @TBL_CalculateQuntity
		--SELECT OrderLineItemId, WarehouseId, @UserId, dbo.Fn_GetDate(), @UserId, dbo.Fn_GetDate() 
		--FROM @TBL_CalculateQuntity AS TBCQ 
		--INNER JOIN @TBL_XmlReturnToTable AS TBXR
		--	   ON(TBXR.SKU = TBCQ.SKU) WHERE UpdatedQuantity IS NOT NULL;
		
		INSERT INTO ZnodeOmsOrderWarehouse( OmsOrderLineItemsId, WarehouseId,Quantity, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
		SELECT OrderLineItemId, WarehouseId,CASE WHEN UpdatedQuantity = 0 THEN MainQuantity ELSE MainQuantity - UpdatedQuantity END , @UserId, dbo.Fn_GetDate(), @UserId, dbo.Fn_GetDate() 
		FROM @TBL_CalculateQuntity AS TBCQ 
		INNER JOIN @TBL_XmlReturnToTable AS TBXR
			   ON(TBXR.SKU = TBCQ.SKU) WHERE UpdatedQuantity IS NOT NULL;

	
	  
		SELECT DISTINCT SKU,
		 [dbo].[Fn_GetDefaultPriceRoundOffReturnNumeric](UpdatedQuantity) AS Quantity,
		  InventoryTracking,CAST(AllowBackOrder AS BIT) AllowBackOrder
		FROM @TBL_CalculateQuntity
		WHERE UpdatedQuantity IS NOT NULL;
		 

		--SELECT SKU,  Quantity, InventoryTracking 
		--FROM @TBL_ErrorInventoryTracking

		SET @Status = 1;
		COMMIT TRAN UpdateInventory;
	END TRY
	BEGIN CATCH
	
		SET @Status = 0;
		SELECT SKU, Quantity, InventoryTracking,AllowBackOrder
		FROM @TBL_ErrorInventoryTracking;
		
		ROLLBACK TRAN UpdateInventory;
	END CATCH;
END;

GO


IF NOT EXISTS (SELECT * FROM sys.tables where name = 'ZnodeImpersonificationLog')
BEGIN
CREATE TABLE [dbo].[ZnodeImpersonificationLog](
	[ImpersonificationLogId] [int] IDENTITY(1,1) NOT NULL,
	[PortalId] [int] NOT NULL,
	[CSRId] [INT] NULL,
	[WebstoreuserId] [int]  NULL,
	[ActivityType] VARCHAR(100) NULL,
	[ActivityId] INT NULL,
	OperationType VARCHAR(20) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[ModifiedBy] [int] NOT NULL,
	[ModifiedDate] [datetime] NOT NULL,
 CONSTRAINT [PK_ZnodeImpersonificationLog] PRIMARY KEY CLUSTERED 
([ImpersonificationLogId] ASC),
 CONSTRAINT [FK_ZnodeImpersonificationLog_ZnodePortal] FOREIGN KEY ([PortalId]) REFERENCES [dbo].[ZnodePortal] ([PortalId])
 
 )
 END
GO

insert into ZnodeImportHead(Name,IsUsedInImport,IsUsedInDynamicReport,IsActive,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,IsCsvUploader)
select 'AttributeDefaultValue', 1, 0, 1, 2, getdate(),2,GETDATE(),null
where not exists( select * from ZnodeImportHead where Name = 'AttributeDefaultValue')

GO
insert into ZnodeImportTemplate(ImportHeadId,TemplateName,TemplateVersion,PimAttributeFamilyId,IsActive,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue'), 'AttributeDefaultValueTemplate',null,null,1,2,getdate(),2,GETDATE()
where not exists( select * from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue') and TemplateName = 'AttributeDefaultValueTemplate' )
and exists( select * from ZnodeImportHead where Name = 'AttributeDefaultValue')
GO
insert into ZnodeImportTemplateMapping(ImportTemplateId,	SourceColumnName,	TargetColumnName,	DisplayOrder,	IsActive,	IsAllowNull,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate)
select ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue') and TemplateName = 'AttributeDefaultValueTemplate' ),
       'AttributeCode','AttributeCode', 1,1,1,2,getdate(),2,GETDATE()
where not exists (select * from ZnodeImportTemplateMapping where ImportTemplateId = ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue') and TemplateName = 'AttributeDefaultValueTemplate' )
and SourceColumnName = 'AttributeCode')
and exists(select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue') and TemplateName = 'AttributeDefaultValueTemplate' )
GO
insert into ZnodeImportTemplateMapping(ImportTemplateId,	SourceColumnName,	TargetColumnName,	DisplayOrder,	IsActive,	IsAllowNull,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate)
select ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue') and TemplateName = 'AttributeDefaultValueTemplate' ),
       'AttributeDefaultValueCode','AttributeDefaultValueCode', 1,1,1,2,getdate(),2,GETDATE()
where not exists (select * from ZnodeImportTemplateMapping where ImportTemplateId = ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue') and TemplateName = 'AttributeDefaultValueTemplate' )
and SourceColumnName = 'AttributeDefaultValueCode')
and exists(select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue') and TemplateName = 'AttributeDefaultValueTemplate' )

GO
insert into ZnodeImportTemplateMapping(ImportTemplateId,	SourceColumnName,	TargetColumnName,	DisplayOrder,	IsActive,	IsAllowNull,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate)
select ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue') and TemplateName = 'AttributeDefaultValueTemplate' ),
       'AttributeDefaultValue','AttributeDefaultValue', 1,1,1,2,getdate(),2,GETDATE()
where not exists (select * from ZnodeImportTemplateMapping where ImportTemplateId = ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue') and TemplateName = 'AttributeDefaultValueTemplate' )
and SourceColumnName = 'AttributeDefaultValue')
and exists(select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue') and TemplateName = 'AttributeDefaultValueTemplate' )

GO
insert into ZnodeImportTemplateMapping(ImportTemplateId,	SourceColumnName,	TargetColumnName,	DisplayOrder,	IsActive,	IsAllowNull,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate)
select ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue') and TemplateName = 'AttributeDefaultValueTemplate' ),
       'IsEditable','IsEditable', 1,1,1,2,getdate(),2,GETDATE()
where not exists (select * from ZnodeImportTemplateMapping where ImportTemplateId = ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue') and TemplateName = 'AttributeDefaultValueTemplate' )
and SourceColumnName = 'IsEditable')
and exists(select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue') and TemplateName = 'AttributeDefaultValueTemplate' )

GO
insert into ZnodeImportTemplateMapping(ImportTemplateId,	SourceColumnName,	TargetColumnName,	DisplayOrder,	IsActive,	IsAllowNull,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate)
select ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue') and TemplateName = 'AttributeDefaultValueTemplate' ),
       'DisplayOrder','DisplayOrder', 1,1,1,2,getdate(),2,GETDATE()
where not exists (select * from ZnodeImportTemplateMapping where ImportTemplateId = ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue') and TemplateName = 'AttributeDefaultValueTemplate' )
and SourceColumnName = 'DisplayOrder')
and exists(select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue') and TemplateName = 'AttributeDefaultValueTemplate' )

GO
insert into ZnodeImportTemplateMapping(ImportTemplateId,	SourceColumnName,	TargetColumnName,	DisplayOrder,	IsActive,	IsAllowNull,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate)
select ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue') and TemplateName = 'AttributeDefaultValueTemplate' ),
       'IsDefault','IsDefault', 1,1,1,2,getdate(),2,GETDATE()
where not exists (select * from ZnodeImportTemplateMapping where ImportTemplateId = ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue') and TemplateName = 'AttributeDefaultValueTemplate' )
and SourceColumnName = 'IsDefault')
and exists(select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue') and TemplateName = 'AttributeDefaultValueTemplate' )

GO
insert into ZnodeImportTemplateMapping(ImportTemplateId,	SourceColumnName,	TargetColumnName,	DisplayOrder,	IsActive,	IsAllowNull,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate)
select ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue') and TemplateName = 'AttributeDefaultValueTemplate' ),
       'SwatchText','SwatchText', 1,1,1,2,getdate(),2,GETDATE()
where not exists (select * from ZnodeImportTemplateMapping where ImportTemplateId = ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue') and TemplateName = 'AttributeDefaultValueTemplate' )
and SourceColumnName = 'SwatchText')
and exists(select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue') and TemplateName = 'AttributeDefaultValueTemplate' )

GO
insert into ZnodeImportTemplateMapping(ImportTemplateId,	SourceColumnName,	TargetColumnName,	DisplayOrder,	IsActive,	IsAllowNull,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate)
select ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue') and TemplateName = 'AttributeDefaultValueTemplate' ),
       'SwatchImage','SwatchImage', 1,1,1,2,getdate(),2,GETDATE()
where not exists (select * from ZnodeImportTemplateMapping where ImportTemplateId = ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue') and TemplateName = 'AttributeDefaultValueTemplate' )
and SourceColumnName = 'SwatchImage')
and exists(select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue') and TemplateName = 'AttributeDefaultValueTemplate' )

GO
insert into ZnodeImportTemplateMapping(ImportTemplateId,	SourceColumnName,	TargetColumnName,	DisplayOrder,	IsActive,	IsAllowNull,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate)
select ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue') and TemplateName = 'AttributeDefaultValueTemplate' ),
       'SwatchImagePath','SwatchImagePath', 1,1,1,2,getdate(),2,GETDATE()
where not exists (select * from ZnodeImportTemplateMapping where ImportTemplateId = ( select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue') and TemplateName = 'AttributeDefaultValueTemplate' )
and SourceColumnName = 'SwatchImagePath')
and exists(select Top 1 ImportTemplateId from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue') and TemplateName = 'AttributeDefaultValueTemplate' )

GO
INSERT INTO ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
SELECT 'Text', 'AttributeCode', (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue'),1,'Text','RegularExpression',NULL,'','',NULL,2,GETDATE(),2,GETDATE(),1
WHERE NOT EXISTS(SELECT * FROM ZnodeImportAttributeValidation WHERE AttributeCode = 'AttributeCode' AND ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue'))

GO
INSERT INTO ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
SELECT 'Text', 'AttributeDefaultValueCode', (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue'),1,'Text','RegularExpression',NULL,'','',NULL,2,GETDATE(),2,GETDATE(),2
WHERE NOT EXISTS(SELECT * FROM ZnodeImportAttributeValidation WHERE AttributeCode = 'AttributeDefaultValueCode' AND ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue'))
GO
INSERT INTO ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
SELECT 'Text', 'AttributeDefaultValue', (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue'),1,'Text','RegularExpression',NULL,'','',NULL,2,GETDATE(),2,GETDATE(),3
WHERE NOT EXISTS(SELECT * FROM ZnodeImportAttributeValidation WHERE AttributeCode = 'AttributeDefaultValue' AND ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue'))
GO
INSERT INTO ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
SELECT 'Text', 'IsEditable', (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue'),0,'Text','RegularExpression',NULL,'','',NULL,2,GETDATE(),2,GETDATE(),4
WHERE NOT EXISTS(SELECT * FROM ZnodeImportAttributeValidation WHERE AttributeCode = 'IsEditable' AND ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue'))
GO
INSERT INTO ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
SELECT 'Number', 'DisplayOrder', (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue'),0,'Yes/No','AllowNegative',NULL,'false','',NULL,2,GETDATE(),2,GETDATE(),5
WHERE NOT EXISTS(SELECT * FROM ZnodeImportAttributeValidation WHERE AttributeCode = 'DisplayOrder' AND ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue') and 
  ValidationName = 'AllowNegative' )
  GO
INSERT INTO ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
SELECT 'Number', 'DisplayOrder', (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue'),0,'Yes/No','AllowDecimals',NULL,'false','',NULL,2,GETDATE(),2,GETDATE(),5
WHERE NOT EXISTS(SELECT * FROM ZnodeImportAttributeValidation WHERE AttributeCode = 'DisplayOrder' AND ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue') and 
  ValidationName = 'AllowDecimals' )
  GO
INSERT INTO ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
SELECT 'Number', 'DisplayOrder', (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue'),0,'Yes/No','MinNumber',NULL,'1','',NULL,2,GETDATE(),2,GETDATE(),5
WHERE NOT EXISTS(SELECT * FROM ZnodeImportAttributeValidation WHERE AttributeCode = 'DisplayOrder' AND ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue') and 
  ValidationName = 'MinNumber' )
  GO  
INSERT INTO ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
SELECT 'Number', 'DisplayOrder', (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue'),0,'Yes/No','MaxNumber',NULL,'999999','',NULL,2,GETDATE(),2,GETDATE(),5
WHERE NOT EXISTS(SELECT * FROM ZnodeImportAttributeValidation WHERE AttributeCode = 'DisplayOrder' AND ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue') and 
  ValidationName = 'MaxNumber' )
  
  GO
INSERT INTO ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
SELECT 'Text', 'IsDefault', (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue'),0,'Text','RegularExpression',NULL,'','',NULL,2,GETDATE(),2,GETDATE(),6
WHERE NOT EXISTS(SELECT * FROM ZnodeImportAttributeValidation WHERE AttributeCode = 'IsDefault' AND ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue'))

GO
INSERT INTO ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
SELECT 'Text', 'SwatchText', (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue'),0,'Text','RegularExpression',NULL,'','',NULL,2,GETDATE(),2,GETDATE(),7
WHERE NOT EXISTS(SELECT * FROM ZnodeImportAttributeValidation WHERE AttributeCode = 'SwatchText' AND ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue'))

GO
INSERT INTO ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
SELECT 'Text', 'SwatchImage', (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue'),0,'Text','RegularExpression',NULL,'','',NULL,2,GETDATE(),2,GETDATE(),8
WHERE NOT EXISTS(SELECT * FROM ZnodeImportAttributeValidation WHERE AttributeCode = 'SwatchImage' AND ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue'))
 GO 
INSERT INTO ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
SELECT 'Text', 'SwatchImagePath', (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue'),0,'Text','RegularExpression',NULL,'','',NULL,2,GETDATE(),2,GETDATE(),9
WHERE NOT EXISTS(SELECT * FROM ZnodeImportAttributeValidation WHERE AttributeCode = 'SwatchImagePath' AND ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'AttributeDefaultValue'))

GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportAddonAssociation')
BEGIN 
DROP PROCEDURE Znode_ImportAddonAssociation
END
GO

CREATE PROCEDURE [dbo].[Znode_ImportAddonAssociation](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @PimCatalogId int= 0)
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import Attribute Code Name and their default input validation rule other 
	--			  flag will be inserted as default we need to modify front end
	
	-- Unit Testing: 

	--------------------------------------------------------------------------------------
BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @SSQL nvarchar(max);
		DECLARE @GetDate datetime= dbo.Fn_GetDate(), @LocaleId int  ;
		SELECT @LocaleId = DBO.Fn_GetDefaultLocaleId();

		IF OBJECT_ID('TEMPDB..#InsertProductAddonAssociation') IS NOT NULL
			DROP TABLE #InsertProductAddonAssociation

		IF OBJECT_ID('TEMPDB..#SKU') IS NOT NULL
			DROP TABLE #SKU

		IF OBJECT_ID('TEMPDB..#InsertZnodePimAddOnProduct') IS NOT NULL
			DROP TABLE #InsertZnodePimAddOnProduct

		CREATE TABLE #InsertZnodePimAddOnProduct ( PimAddOnProductId int,PimAddonGroupId int,PimProductId int)

		CREATE TABLE #InsertProductAddonAssociation
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, SKU varchar(300),AddonGroupName varchar(300),AddOnSKU varchar(300),DisplayOrder int, IsDefault varchar(10), GUID nvarchar(400)
		
		);

		CREATE TABLE #SKU 
		( 
			SKU nvarchar(300), PimProductId int
		);

		----Get All SKU Data From DB
		INSERT INTO #SKU (SKU, PimProductId)
		SELECT ZPAVL.AttributeValue, ZPAV.PimProductId
		FROM ZnodePimAttributeValue AS ZPAV
		INNER JOIN ZnodePimAttributeValueLocale AS ZPAVL ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId
		INNER JOIN ZnodePimAttribute ZPA ON ZPAV.PimAttributeId = ZPA.PimAttributeId
		WHERE ZPA.AttributeCode = 'SKU';

		SET @SSQL = 'Select RowNumber,SKU,AddonGroupName,AddOnSKU,DisplayOrder,IsDefault,GUID FROM '+@TableName;
		INSERT INTO #InsertProductAddonAssociation( RowNumber,SKU,AddonGroupName,AddOnSKU,DisplayOrder,IsDefault,GUID )
		EXEC sys.sp_sqlexec @SSQL;

		SELECT SKU,AddonGroupName,AddOnSKU 
		INTO #DuplicateProductAddonAssociation 
		FROM #InsertProductAddonAssociation 
		Group BY SKU,AddonGroupName,AddOnSKU  having count(*) > 1

		----Checking AddonGroupName present in DB
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '19', 'AddonGroupName', AddonGroupName, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		FROM #InsertProductAddonAssociation AS ii
		WHERE NOT EXISTS ( SELECT * FROM ZnodePimAddonGroupLocale i where i.AddonGroupName = ii.AddonGroupName );

		----Checking SKU present in DB
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '19', 'SKU', SKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		FROM #InsertProductAddonAssociation AS ii
		WHERE NOT EXISTS( SELECT * FROM #SKU SKU WHERE ii.SKU = SKU.SKU)

		----Checking AddOnSKU present in DB
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '19', 'AddOnSKU', AddOnSKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		FROM #InsertProductAddonAssociation AS ii
		WHERE NOT EXISTS( SELECT * FROM #SKU SKU WHERE ii.AddOnSKU = SKU.SKU)
		
		----Duplicate Record (SKU \ AddOnSKU \ AddonGroupName)
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '53', 'SKU \ AddOnSKU \ AddonGroupName ', SKU+' \ '+AddOnSKU+' \ '+AddonGroupName, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		FROM #InsertProductAddonAssociation AS ii
		WHERE EXISTS ( select * FROM #DuplicateProductAddonAssociation i WHERE i.SKU = ii.SKU and i.AddOnSKU = ii.AddOnSKU and i.AddonGroupName = ii.AddonGroupName );

		----Checking is default value data validation
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
		SELECT '35', 'IsDefault', IsDefault, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
		FROM #InsertProductAddonAssociation AS ii  
		WHERE ISNULL(ii.IsDefault,0) not in ('True','1','Yes','FALSE','0','No','')
		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			SELECT '17', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			FROM #InsertProductAddonAssociation AS ii
			WHERE (ii.DisplayOrder <> '' OR ii.DisplayOrder IS NOT NULL ) AND  ii.DisplayOrder = 0

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			SELECT '64', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			FROM #InsertProductAddonAssociation AS ii
			WHERE (ii.DisplayOrder <> '' OR ii.DisplayOrder IS NOT NULL )AND  ii.DisplayOrder > 999

		UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ SKU - ' + isnull(SKU,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN #InsertProductAddonAssociation IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL

		-- Delete Invalid Data after functional validatin  
		DELETE FROM #InsertProductAddonAssociation
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
		);
		
		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM #InsertProductAddonAssociation
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount
		,	TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))  
		WHERE ImportProcessLogId = @ImportProcessLogId;


		UPDATE PAPD
		SET PAPD.ModifiedBy =@UserId  ,PAPD.ModifiedDate = GETDATE(),
		PAPD.IsDefault = case when IPAA.IsDefault in ('True','1','Yes') then 1 else 0 end,
		PAPD.DisplayOrder = CASE WHEN IPAA.DisplayOrder IS NOT NULL THEN IPAA.DisplayOrder ELSE PAPD.DisplayOrder END
		FROM #InsertProductAddonAssociation IPAA
		INNER JOIN #SKU SKU ON SKU.SKU = IPAA.SKU
		INNER JOIN #SKU SKU1 ON SKU1.SKU = IPAA.AddOnSKU
		INNER JOIN ZnodePimAddonGroupLocale ZPAGL on ZPAGL.AddonGroupName = IPAA.AddonGroupName
		INNER JOIN ZnodePimAddOnProduct PAP ON (PAP.PimProductId = SKU.PimProductId AND PAP.PimAddonGroupId = ZPAGL.PimAddonGroupId)
		INNER JOIN ZnodePimAddOnProductDetail PAPD ON (PAPD.PimAddOnProductId =PAP.PimAddOnProductId AND SKU1.PimProductId = PAPD.PimChildProductId )

		-----Inserting records in ZnodePimAddOnProduct
		INSERT INTO ZnodePimAddOnProduct(PimAddonGroupId,PimProductId,DisplayOrder,RequiredType,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		OUTPUT inserted.PimAddOnProductId, inserted.PimAddonGroupId,inserted.PimProductId into #InsertZnodePimAddOnProduct (PimAddOnProductId,PimAddonGroupId,PimProductId)
		SELECT DISTINCT ZPAGL.PimAddonGroupId,SKU.PimProductId, 999 as DisplayOrder,
		'Required' RequiredType,@UserId as CreatedBy,@GetDate,@UserId as ModifiedBy,@GetDate
		FROM #InsertProductAddonAssociation IPAA
		INNER JOIN #SKU SKU ON SKU.SKU = IPAA.SKU
		INNER JOIN ZnodePimAddonGroupLocale ZPAGL on ZPAGL.AddonGroupName = IPAA.AddonGroupName
		WHERE NOT EXISTS(SELECT * FROM ZnodePimAddOnProduct ZPAP where ZPAP.PimAddonGroupId = ZPAGL.PimAddonGroupId and ZPAP.PimProductId = SKU.PimProductId )

		-----Inserting records in ZnodePimAddOnProductDetail
		INSERT INTO ZnodePimAddOnProductDetail(PimAddOnProductId,PimChildProductId,IsDefault,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT DISTINCT ZPAP.PimAddOnProductId, SKU.PimProductId as PimChildProductId, CASE WHEN isnull(IPAA.IsDefault,0) IN ('True','1','Yes') THEN 1 ELSE 0 END, ISNULL(IPAA.DisplayOrder,999),@UserId ,@GetDate,@UserId,@GetDate 
		FROM #InsertProductAddonAssociation IPAA
		INNER JOIN #SKU SKU1 ON SKU1.SKU = IPAA.SKU
		INNER JOIN #SKU SKU ON SKU.SKU = IPAA.AddOnSKU
		INNER JOIN ZnodePimAddonGroupLocale ZPAGL on IPAA.AddonGroupName = ZPAGL.AddonGroupName
		INNER JOIN ZnodePimAddOnProduct ZPAP on SKU1.PimProductId = ZPAP.PimProductId and ZPAP.PimAddonGroupId = ZPAGL.PimAddonGroupId
		WHERE NOT EXISTS(SELECT * FROM ZnodePimAddOnProductDetail ZPAPD WHERE ZPAPD.PimAddOnProductId = ZPAP.PimAddOnProductId and ZPAPD.PimChildProductId = SKU.PimProductId )

		UPDATE ZnodeImportProcessLog
		SET STATUS = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = GETDATE()
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;

	END TRY
	BEGIN CATCH

		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = GETDATE()
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN A;
	END CATCH;
END;
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportAttributeDefaultValue')
BEGIN 
DROP PROCEDURE Znode_ImportAttributeDefaultValue
END
GO

CREATE PROCEDURE [dbo].[Znode_ImportAttributeDefaultValue](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200))
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import Attribute Code Name and their default input validation rule other 
	--			  flag will be inserted as default we need to modify front end
	
	-- Unit Testing: 

	--------------------------------------------------------------------------------------
BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max);
		DECLARE @GetDate datetime= dbo.Fn_GetDate(), @LocaleId int  ;
		SELECT @LocaleId = DBO.Fn_GetDefaultLocaleId();
		-- Retrive RoundOff Value from global setting 
		DECLARE @InsertPimAtrribute TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY,
			-- RowNumber int, AttributeName varchar(300), AttributeCode varchar(300), AttributeType varchar(300), DisplayOrder int, GUID nvarchar(400)
			RowNumber int, AttributeCode varchar(300),AttributeDefaultValueCode varchar(300),AttributeDefaultValue varchar(1000),IsEditable varchar(10),DisplayOrder int, IsDefault varchar(10), SwatchText varchar(1000),SwatchImage varchar(500), SwatchImagePath varchar(500), GUID nvarchar(400)
		
		);
		DECLARE @InsertedPimAttributeIds TABLE (PimAttributeId int ,PimAttributeDefaultValueId int,AttributeDefaultValueCode nvarchar(300))
		
		SET @SSQL = 'Select RowNumber,AttributeCode,AttributeDefaultValueCode,AttributeDefaultValue,IsEditable,DisplayOrder,IsDefault,SwatchText,SwatchImage, SwatchImagePath ,GUID FROM '+@TableName;
		INSERT INTO @InsertPimAtrribute( RowNumber,AttributeCode,AttributeDefaultValueCode,AttributeDefaultValue,IsEditable,DisplayOrder,IsDefault,SwatchText,SwatchImage, SwatchImagePath ,GUID)
		EXEC sys.sp_sqlexec @SSQL;

		--@MessageDisplay will use to display validate message for input inventory value  
		DECLARE @AttributeCode TABLE
		( 
		   AttributeCode nvarchar(300)
		);
		INSERT INTO @AttributeCode
			   SELECT AttributeCode
			   FROM ZnodePimAttribute 

		-- Start Functional Validation 
		-----------------------------------------------
		--INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		--	   SELECT '10', 'AttributeCode', AttributeCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		--	   FROM @InsertPimAtrribute AS ii
		--	   WHERE ii.AttributeCode in 
		--	   (
		--		   SELECT AttributeCode FROM @AttributeCode  where AttributeCode is not null 
		--	   );
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '9', 'AttributeCode', AttributeCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ii.AttributeCode not in 
			   (
				   SELECT AttributeCode FROM @AttributeCode
			   );
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '53', 'AttributeDefaultValueCode', AttributeDefaultValueCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ii.AttributeDefaultValueCode in 
			   (
				   select AttributeDefaultValueCode FROM @InsertPimAtrribute  Group BY AttributeCode, AttributeDefaultValueCode  having count(*) > 1 
			   );

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '50', 'AttributeDefaultValueCode', AttributeDefaultValueCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ltrim(rtrim(isnull(ii.AttributeDefaultValueCode,''))) like '%[^0-9A-Za-z]%'

		--INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		--	   SELECT '50', 'AttributeDefaultValueCode', AttributeDefaultValueCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		--	   FROM @InsertPimAtrribute AS ii
		--	   WHERE Isnumeric(ltrim(rtrim(isnull(ii.AttributeDefaultValueCode,'')))) =1

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '35', 'AttributeDefaultValueCode', AttributeDefaultValueCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ltrim(rtrim(isnull(ii.AttributeDefaultValueCode,''))) like '% %' -----space not allowed

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '35', 'IsEditable', IsEditable, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM @InsertPimAtrribute AS ii  
			WHERE ii.IsEditable not in ('True','1','Yes','FALSE','0','No','')

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '35', 'IsDefault', IsDefault, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM @InsertPimAtrribute AS ii  
			WHERE ii.IsDefault not in ('True','1','Yes','FALSE','0','No','')

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			SELECT '17', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			FROM @InsertPimAtrribute AS ii
			WHERE (ii.DisplayOrder <> '' OR ii.DisplayOrder IS NOT NULL ) AND  ii.DisplayOrder = 0

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			SELECT '64', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			FROM @InsertPimAtrribute AS ii
			WHERE (ii.DisplayOrder <> '' OR ii.DisplayOrder IS NOT NULL )AND  ii.DisplayOrder > 999

		UPDATE ZIL
			SET ZIL.ColumnName =   ZIL.ColumnName + ' [ AttributeDefaultValueCode - ' + ISNULL(AttributeDefaultValueCode,'') + ' ] '
			FROM ZnodeImportLog ZIL 
			INNER JOIN @InsertPimAtrribute IPA ON (ZIL.RowNumber = IPA.RowNumber)
			WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL


		-- End Function Validation 	
		-----------------------------------------------
		-- Delete Invalid Data after functional validatin  
		DELETE FROM @InsertPimAtrribute
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
		);
		
		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM @InsertPimAtrribute
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount
		,	TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End

		DECLARE @MediaId INT
		SET @MediaId = (SELECT TOP 1 MediaId from @InsertPimAtrribute IPA INNER JOIN ZnodeMedia ZM ON IPA.SwatchImage = ZM.FileName and IPA.SwatchImagePath = ZM.Path)

		if (isnull(@MediaId,0)=0)
			SET @MediaId = (SELECT max(MediaId) from @InsertPimAtrribute IPA INNER JOIN ZnodeMedia ZM ON IPA.SwatchImage = ZM.FileName)

        update ZPADV set ZPADV.IsEditable = case when IPA.IsEditable in ('True','1','Yes') then 1 else 0 end,ZPADV.DisplayOrder = Case when Isnull(IPA.DisplayOrder,0) <> 0 then  IPA.DisplayOrder else ZPADV.DisplayOrder end ,
		                 ZPADV.IsDefault = case when IPA.IsDefault in ('True','1','Yes') then 1 else 0 end ,ZPADV.SwatchText = IPA.SwatchText ,
		                 ZPADV.MediaId = case when isnull(@MediaId,0)= 0 then ZPADV.MediaId else @MediaId end, ZPADV.ModifiedBy = @UserId, ZPADV.ModifiedDate = @GetDate 
		from @InsertPimAtrribute IPA 
		INNER JOIN ZnodePimAttribute ZPA ON IPA.AttributeCode = ZPA.AttributeCode 
		inner join ZnodePimAttributeDefaultValue ZPADV on ZPA.PimAttributeId = ZPADV.PimAttributeId and IPA.AttributeDefaultValueCode = ZPADV.AttributeDefaultValueCode

		update ZPADVL set ZPADVL.AttributeDefaultValue = IPA.AttributeDefaultValue, ZPADVL.ModifiedBy = @UserId, ZPADVL.ModifiedDate = @GetDate 
		from @InsertPimAtrribute IPA 
		INNER JOIN ZnodePimAttribute ZPA ON IPA.AttributeCode = ZPA.AttributeCode 
		inner join ZnodePimAttributeDefaultValue ZPADV on ZPA.PimAttributeId = ZPADV.PimAttributeId and IPA.AttributeDefaultValueCode = ZPADV.AttributeDefaultValueCode
		inner join ZnodePimAttributeDefaultValueLocale ZPADVL ON ( ZPADVL.PimAttributeDefaultValueId = ZPADV.PimAttributeDefaultValueId)

		--- Insert data into base table ZnodePimatrribute with their validation 

		INSERT INTO ZnodePimAttributeDefaultValue (PimAttributeId,AttributeDefaultValueCode,IsEditable,DisplayOrder,IsDefault,SwatchText,MediaId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)		
		OUTPUT Inserted.PimAttributeId,Inserted.PimAttributeDefaultValueId,Inserted.AttributeDefaultValueCode INTO @InsertedPimAttributeIds  		
		SELECT ZPA.PimAttributeId,IPA.AttributeDefaultValueCode, case when IPA.IsEditable in ('True','1','Yes') then 1 else 0 end , Case when Isnull(IPA.DisplayOrder,0) = 0 then  999 else IPA.DisplayOrder end  , 
		       case when IPA.IsDefault in ('True','1','Yes') then 1 else 0 end , IPA.SwatchText, @MediaId,@UserId , @GetDate ,@UserId , @GetDate 
		from @InsertPimAtrribute IPA 
		INNER JOIN ZnodePimAttribute ZPA ON IPA.AttributeCode = ZPA.AttributeCode  
		where not exists(select * from ZnodePimAttributeDefaultValue ZPADV where ZPA.PimAttributeId = ZPADV.PimAttributeId and IPA.AttributeDefaultValueCode = ZPADV.AttributeDefaultValueCode)
		
		INSERT INTO ZnodePimAttributeDefaultValueLocale(LocaleId,PimAttributeDefaultValueId,AttributeDefaultValue,Description,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		Select @LocaleId ,IPAS.PimAttributeDefaultValueId, IPA.AttributeDefaultValue, '', @UserId , @GetDate ,@UserId , @GetDate   
		FROM @InsertedPimAttributeIds IPAS 
		INNER JOIN ZnodePimAttribute ZPA ON IPAS.PimAttributeId = ZPA.PimAttributeId  
		INNER JOIN @InsertPimAtrribute IPA ON ZPA.AttributeCode= IPA.AttributeCode and IPAS.AttributeDefaultValueCode = IPA.AttributeDefaultValueCode


		UPDATE ZnodeImportProcessLog
		  SET STATUS = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;
		COMMIT TRAN A;
	END TRY
	BEGIN CATCH

		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN A;
	END CATCH;
END;

GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportValidatePimProductData')
BEGIN 
DROP PROCEDURE Znode_ImportValidatePimProductData
END
GO


CREATE PROCEDURE [dbo].[Znode_ImportValidatePimProductData]
(   @ImportHeadName     VARCHAR(200),
    @TableName          VARCHAR(200),
    @NewGUID            NVARCHAR(200),
    @TemplateId         INT,
    @UserId             INT,
    @LocaleId           INT           = 1,
    @IsCategory         INT           = 0,
    @DefaultFamilyId    INT           = 0,
    @ImportProcessLogId INT,
    @PriceListId        INT,
	@CountryCode VARCHAR(100) = '',
	@PimCatalogId         INT    = 0 ,
	@PortalId int = 0,
	@IsAccountAddress bit = 0 )
AS
     SET NOCOUNT ON;

/*
    Summary :   Import PimProduct / Price / Inventory / Category / Category Associated Data 
    Process :   Admin site will upload excel / csv file in database and create global temporary table
				Procedure Znode_ImportValidatePimProductData will validate data with attribute validation rule
				If datatype validation issue found in input daata will logged into table "ZnodeImportLog"
				If Data is correct and record count in table ZnodeImportLog will be 0 then process for import data into Base tables
				To import data call procedure "Znode_ImportPimProductData"
    		  
				SourceColumnName: CSV file column headers
				TargetColumnName: Attributecode from ZnodePimAttribute Table (Consider those Attributecodes configured with default family only)
*/

     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             --BEGIN TRAN TRN_ImportValidProductData;
             DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
             DECLARE @SQLQuery NVARCHAR(MAX), @AttributeTypeName NVARCHAR(100), @AttributeCode NVARCHAR(300), @AttributeId INT, @IsRequired BIT, @SourceColumnName NVARCHAR(600), @ControlName VARCHAR(300), @ValidationName VARCHAR(100), @SubValidationName VARCHAR(300), @ValidationValue VARCHAR(300), @RegExp VARCHAR(300), @CreateDateString NVARCHAR(300), @DefaultLocaleId INT, @ImportHeadId INT, @CheckedSourceColumn NVARCHAR(600)= '', @Status BIT= 0,
			    @CsvColumnString nvarchar(max),
				@FailedRecordCount BIGINT,
				@SuccessRecordCount BIGINT

             DECLARE @FamilyAttributeDetail TABLE
             (PimAttributeId       INT,
              AttributeTypeName    VARCHAR(300),
              AttributeCode        VARCHAR(300),
              SourceColumnName     NVARCHAR(600),
              IsRequired           BIT,
              PimAttributeFamilyId INT
             );
             DECLARE @AttributeDetail TABLE
             (PimAttributeId    INT,
              AttributeTypeName VARCHAR(300),
              AttributeCode     VARCHAR(300),
              SourceColumnName  NVARCHAR(600),
              IsRequired        BIT,
              ControlName       VARCHAR(300),
              ValidationName    VARCHAR(100),
              SubValidationName VARCHAR(300),
              ValidationValue   VARCHAR(300),
              RegExp            VARCHAR(300)
             );

			 --IF ('tempdb..#DefaultAttributeCode') IS NOT NULL
				--drop table #DefaultAttributeCode

			CREATE TABLE #DefaultAttributeCode
			(AttributeTypeName          VARCHAR(300),
			PimAttributeDefaultValueId INT,
			PimAttributeId             INT,
			AttributeDefaultValueCode  VARCHAR(100)
			);

			--SET @SQLQuery = 'Select * into _tempSeo FROM  '+@TableName
   --          EXEC sys.sp_sqlexec  @SQLQuery;


			IF( @ImportHeadName = 'B2BCustomer' )
			BEGIN
				EXEC ZnodeB2BCustomerMapping @ImportHeadName = @ImportHeadName, @TableName = @TableName
			END
		
             DECLARE @GlobalTempTableColumns TABLE(ColumnName NVARCHAR);
             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM INFORMATION_SCHEMA.TABLES
                 WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#InvalidDefaultData'
             )
                 CREATE TABLE #InvalidDefaultData
                 (RowNumber  INT,
                  Value      NVARCHAR(MAX),
                  ColumnName NVARCHAR(600)
                 );
             ELSE
             DROP TABLE #InvalidDefaultData;
             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM INFORMATION_SCHEMA.TABLES
                 WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#GlobalTempTableColumns'
             )
                 BEGIN

                     SET @SQLQuery = 'SELECT Column_Name, '''+@ImportHeadName+''' AS ImportHeadName  from tempdb.INFORMATION_SCHEMA.COLUMNS	where table_name = object_name(object_id('''+@TableName+'''),
					(select database_id from sys.databases where name = ''tempdb''))';
                     CREATE TABLE #GlobalTempTableColumns
                     (ColumnName   NVARCHAR(MAX),
                      TypeOfImport NVARCHAR(100)
                     );
                     INSERT INTO #GlobalTempTableColumns
                     (ColumnName,
                      TypeOfImport
                     )
                     EXEC sys.sp_sqlexec
                          @SQLQuery;
                 END;
		  -- If Exists ( Select  count(1)  from #GlobalTempTableColumns GROUP BY ColumnName  Having count(1) > 1 )
		  -- Begin
			 --   INSERT INTO ZnodeImportLog(ErrorDescription,ColumnName,Data,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
    --               Select  46,ColumnName,'',@newGUID,@UserId,@GetDate,@UserId,@GetDate, @ImportProcessLogId  from #GlobalTempTableColumns GROUP BY ColumnName  Having count(1) > 1 
				
				----'Multiple occurance of column are not allow for'
		  -- END

             IF EXISTS
             (
                 SELECT TOP 1 1
                 FROM #GlobalTempTableColumns
                 WHERE ColumnName IN('PimCategoryId', 'PimProductId', 'RowNumber')
             )
                 BEGIN
                     INSERT INTO ZnodeImportLog
                     (ErrorDescription,
                      ColumnName,
                      Data,
                      GUID,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate,
                      ImportProcessLogId
                     )
                     VALUES
                     (43,
                      '',
                      '',
                      @newGUID,
                      @UserId,
                      @GetDate,
                      @UserId,
                      @GetDate,
                      @ImportProcessLogId
                     );
                 END;
             SET @DefaultLocaleId = dbo.Fn_GetDefaultLocaleId();
             --Remove old error log 
             --DELETE FROM ZnodeImportLog WHERE ImportProcessLogId in (select ImportProcessLogId  FROM ZnodeImportProcessLog  WHERE ImportTemplateId  = @TemplateId )
             --GUID = @NewGUID;
             --Delete FROM ZnodeImportProcessLog  WHERE ImportTemplateId  = @TemplateId 
		
             IF NOT EXISTS
             (
                 SELECT TOP 1 1  FROM ZnodeImportLog
                 WHERE Guid = @NewGUID
                       AND ErrorDescription IN(43, 42)
                 AND ImportProcessLogId = @ImportProcessLogId
             )
                 BEGIN
                     IF @ImportHeadName = 'Product'
                      BEGIN
						  IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
							  SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimProductId int null ';
						  ELSE 
							 SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimProductId int null Primary KEY CLUSTERED(RowNumber)';
						 
						  EXEC sys.sp_sqlexec @SQLQuery;
			         END;
                     ELSE
                     IF @ImportHeadName = 'Category'
                         BEGIN
							  IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimCategoryId int null ';
							  ElSE
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimCategoryId int null Primary KEY CLUSTERED(RowNumber) ';
						  
							  EXEC sys.sp_sqlexec @SQLQuery;
                         END;
                     ELSE
                         BEGIN
							IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1) ';
							Else 
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1) Primary KEY CLUSTERED(RowNumber)';
							
							EXEC sys.sp_sqlexec @SQLQuery;
                         END;;
                 END;
				
             --Generate new process for current import 
             --INSERT INTO ZnodeImportProcessLog(ImportTemplateId,Status,ProcessStartedDate,ProcessCompletedDate,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             --SELECT @TemplateId,dbo.Fn_GetImportStatus(0),@GetDate,NULL,@UserId,@GetDate,@UserId,@GetDate;
             --SET @ImportProcessLogId = @@IDENTITY;

             SET @CreateDateString = CONVERT(VARCHAR(100), @UserId)+','''+CONVERT(VARCHAR(100), @GetDate)+''','+CONVERT(VARCHAR(100), @UserId)+','''+CONVERT(VARCHAR(100), @GetDate)+''', '+CONVERT(VARCHAR(100), @ImportProcessLogId);

             SELECT TOP 1 @ImportHeadId = ImportHeadId FROM ZnodeImportTemplate WHERE ImportTemplateId = @TemplateId;
             IF @DefaultFamilyId = 0
                AND @ImportHeadName IN('Product', 'Category')
                 BEGIN 
                     --Get all default attribute values in attribute 
                     INSERT INTO @FamilyAttributeDetail
                     (PimAttributeId,
                      AttributeTypeName,
                      AttributeCode,
                      SourceColumnName,
                      IsRequired,
                      PimAttributeFamilyId
                     )
                     --Call Process to insert data of defeult family with source column name and target column name 
                     EXEC Znode_ImportGetTemplateDetails
                          @TemplateId = @TemplateId,
                          @IsValidationRules = 0,
                          @IsIncludeRespectiveFamily = 1,
                          @IsCategory = @IsCategory,
                          @DefaultFamilyId = @DefaultFamilyId;

					---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
					Delete FAD from @FamilyAttributeDetail FAD
					where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
					and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					               inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
                 END;
             ELSE
             IF @ImportHeadName IN('Product', 'Category')
                 BEGIN
                     --Get all default attribute values in attribute 
                     INSERT INTO @FamilyAttributeDetail
                     (PimAttributeId,
                      AttributeTypeName,
                      AttributeCode,
                      SourceColumnName,
                      IsRequired,
                      PimAttributeFamilyId
                     )
                     --Call Process to insert data of defeult family with source column name and target column name 
                     EXEC Znode_ImportGetTemplateDetails
                          @TemplateId = @TemplateId,
                          @IsValidationRules = 0,
                          @IsIncludeRespectiveFamily = 1,
                          @IsCategory = @IsCategory,
                          @DefaultFamilyId = @DefaultFamilyId;

					---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
					Delete FAD from @FamilyAttributeDetail FAD
					where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
					and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					               inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
                 END;      
             -- Check attributes are manditory and not provided with source table
		   	 
			if @TABLENAME	like '%tempdb..%'
				SET @SQLQuery = 'SELECT 42 AS ErrorDescription , SourceColumnName , '''' , '''+@NewGUID+''','+@CreateDateString+' from ZnodeImportTemplateMapping where ImportTemplateId = '+CONVERT(VARCHAR(100), @TemplateId)+' and ltrim(rtrim(SourceColumnName)) <> '''' AND ltrim(rtrim(SourceColumnName)) not in ( select isnull(Name ,'''') from tempdb.sys.columns where object_id = object_id('''+@TABLENAME+'''));';
			else 
				SET @SQLQuery = 'SELECT 42 AS ErrorDescription , SourceColumnName , '''' , '''+@NewGUID+''','+@CreateDateString+' from ZnodeImportTemplateMapping where ImportTemplateId = '+CONVERT(VARCHAR(100), @TemplateId)+' and ltrim(rtrim(SourceColumnName)) <> '''' AND ltrim(rtrim(SourceColumnName)) not in ( select isnull(Name ,'''') from sys.columns where object_id = object_id('''+@TABLENAME+'''));';
		 
			Declare @Tbl_CsvDynamicColulmns TABLE (ColumnName nvarchar(300), SequenceNumber int, DataType nvarchar(50),IsRequired bit )

			INSERT INTO @Tbl_CsvDynamicColulmns(ColumnName , SequenceNumber , DataType ,IsRequired)
			SELECT DISTINCT ZITM.SourceColumnName ,ZIAV.SequenceNumber, ZIAV.AttributeTypeName, ZIAV.IsRequired
			FROM ZnodeImportAttributeValidation ZIAV LEFT OUTER JOIN 
			ZnodeImportTemplate  ZIT ON ZIT.ImportHeadId =  ZIAV.ImportHeadId AND ZIT.ImportTemplateId  = @TemplateId
			LEFT OUTER JOIN ZnodeImportTemplateMapping  ZITM ON ZITM.ImportTemplateId = ZIT.ImportTemplateId  
			and ZIAV.AttributeCode = ZITM.TargetColumnName
			AND ZITM.ImportTemplateId  = @TemplateId
			WHERE ZIAV.ImportHeadId = @ImportHeadId --ORDER BY ZIAV.SequenceNumber


		    SELECT @CsvColumnString = SUBSTRING ((Select ',' +  ISNULL(ColumnName ,'NULL') from @Tbl_CsvDynamicColulmns ORDER BY SequenceNumber FOR XML PATH ('')),2,4000) 


     		INSERT INTO ZnodeImportLog(ErrorDescription, ColumnName, Data, GUID,CreatedBy, CreatedDate,  ModifiedBy,ModifiedDate,ImportProcessLogId
             )
             EXEC sys.sp_sqlexec  @SQLQuery;
             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM ZnodeImportLog
                 WHERE Guid = @NewGUID
                       AND ErrorDescription IN(43, 42)
                 AND ImportProcessLogId = @ImportProcessLogId
             )
                 BEGIN
                     --Get all default attribute values in attribute 
                     IF @ImportHeadName IN('Product', 'Category')
                         BEGIN
                             -- Check attributes are manditory and not provided with source table
                             INSERT INTO ZnodeImportLog
                             (ErrorDescription,
                              ColumnName,
                              Data,
                              GUID,
                              CreatedBy,
                              CreatedDate,
                              ModifiedBy,
                              ModifiedDate,
                              ImportProcessLogId
                             )
                                    SELECT '14' AS ErrorDescription,
                                           AttributeCode,
                                           '',
                                           @NewGUID,
                                           @UserId,
                                           @GetDate,
                                           @UserId,
                                           @GetDate,
                                           @ImportProcessLogId
                                    FROM @FamilyAttributeDetail
                                    WHERE ISNULL(SourceColumnName, '') = ''
                                          AND IsRequired = 1;  

                             -- Read all attribute details with their datatype
                             INSERT INTO @AttributeDetail
                             (PimAttributeId,
                              AttributeTypeName,
                              AttributeCode,
                              SourceColumnName,
                              IsRequired,
                              ControlName,
                              ValidationName,
                              SubValidationName,
                              ValidationValue,
                              RegExp
                             )
                             EXEC Znode_ImportGetTemplateDetails
                                  @TemplateId=@TemplateId,
								  @DefaultFamilyId=@DefaultFamilyId;

							---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
							Delete FAD from @AttributeDetail FAD
							where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
							and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
										   inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode) 

                             DELETE FROM @AttributeDetail
                             WHERE AttributeTypeName = 'Image'
                                   AND ValidationName <> 'IsAllowMultiUpload';
                             --IF NOT EXISTS
                             --(
                             --    SELECT TOP 1 1
                             --    FROM INFORMATION_SCHEMA.TABLES
                             --    WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#DefaultAttributeCode'
                             --)
                             --    BEGIN
                             --        CREATE TABLE #DefaultAttributeCode
                             --        (AttributeTypeName          VARCHAR(300),
                             --         PimAttributeDefaultValueId INT,
                             --         PimAttributeId             INT,
                             --         AttributeDefaultValueCode  VARCHAR(100)
                             --        );
                                     INSERT INTO #DefaultAttributeCode
                                     (AttributeTypeName,
                                      PimAttributeDefaultValueId,
                                      PimAttributeId,
                                      AttributeDefaultValueCode
                                     )
                                     --Call Process to insert default data value 
                                     EXEC Znode_ImportGetPimAttributeDefaultValue;

                                     DELETE FROM #DefaultAttributeCode
                                     WHERE AttributeTypeName = 'Yes/No';
                             --    END;
                             --ELSE
                             --    BEGIN
                             --        DROP TABLE #DefaultAttributeCode;
                             --    END;
                         END;
                     ELSE
                         BEGIN
					
					
                             --Read all attribute details with their datatype
                             INSERT INTO @AttributeDetail
                             (AttributeTypeName,
                              AttributeCode,
                              SourceColumnName,
                              IsRequired,
                              ControlName,
                              ValidationName,
                              SubValidationName,
                              ValidationValue,
                              RegExp
                             )
                             EXEC [Znode_ImportGetOtherTemplateDetails]
                                  @TemplateId = @TemplateId,
                                  @ImportHeadId = @ImportHeadId;

							IF @ImportHeadName IN('B2BCustomer')
							BEGIN

								INSERT INTO @AttributeDetail
								 (PimAttributeId,
								 AttributeTypeName,
								  AttributeCode,
								  SourceColumnName,
								  IsRequired,
								  ControlName,
								  ValidationName,
								  SubValidationName,
								  ValidationValue,
								  RegExp
								 )
								 EXEC [Znode_ImportGetGlobalTemplateDetails]
									  @TemplateId = @TemplateId,
									  @ImportHeadId = @ImportHeadId;

								
								INSERT INTO #DefaultAttributeCode
								(AttributeTypeName,
								PimAttributeDefaultValueId,
								PimAttributeId,
								AttributeDefaultValueCode
								)
								--Call Process to insert default data value 
								EXEC Znode_ImportGetGlobalAttributeDefaultValue;

								DELETE FROM #DefaultAttributeCode
								WHERE AttributeTypeName = 'Yes/No';

							END
						
                             --Check attributes are not mapped with any family of Pim Product
                             INSERT INTO ZnodeImportLog
                             (ErrorDescription,
                              ColumnName,
                              Data,
                              GUID,
                              CreatedBy,
                              CreatedDate,
                              ModifiedBy,
                              ModifiedDate,
                              ImportProcessLogId
                             )
                                    SELECT DISTINCT
                                           '14' AS ErrorDescription,
                                           AttributeCode,
                                           '',
                                           @NewGUID,
                                           @UserId,
                                           @GetDate,
                                           @UserId,
                                           @GetDate,
                                           @ImportProcessLogId
                                    FROM @AttributeDetail
                                    WHERE ISNULL(SourceColumnName, '') = ''   AND IsRequired = 1;  ;

                         END;
						
                     --	Check attributes are not mapped with (Default / Other) family of Pim Product
                     --	INSERT INTO ZnodeImportLog ( ErrorDescription , ColumnName , Data , GUID , CreatedBy , CreatedDate , ModifiedBy , ModifiedDate , ImportProcessLogId)
                     --	SELECT '1' AS ErrorDescription , SourceColumnName , '' , @NewGUID , @UserId , @GetDate , @UserId , @GetDate , @ImportProcessLogId
                     --	FROM @AttributeDetail WHERE PimAttributeId NOT IN ( SELECT zpfgm.PimAttributeId FROM dbo.ZnodePimFamilyGroupMapper AS zpfgm);
                     --	Verify data in global temporary table (column wise)
					
                     DECLARE Cr_Attribute CURSOR LOCAL FAST_FORWARD
                     FOR SELECT PimAttributeId,
                                AttributeTypeName,
                                AttributeCode,
                                IsRequired,
                                SourceColumnName,
                                ControlName,
                                ValidationName,
                                SubValidationName,
                                ValidationValue,
                                RegExp
                         FROM @AttributeDetail
                         WHERE ISNULL(SourceColumnName, '') <> '';
                     OPEN Cr_Attribute;
                     FETCH NEXT FROM Cr_Attribute INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @ControlName, @ValidationName, @SubValidationName, @ValidationValue, @RegExp;
                     WHILE @@FETCH_STATUS = 0
                         BEGIN
				             IF @AttributeTypeName = 'Number'
                                 BEGIN
							      EXEC Znode_ImportValidateNumber
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @ImportHeadId = @ImportHeadId,
                                          @ImportProcessLogId = @ImportProcessLogId;
                                 END;
							 -- Check invalid date
							
                             IF @AttributeTypeName = 'Date'
                                 BEGIN
                                     EXEC Znode_ImportValidateDate
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @ImportHeadId = @ImportHeadId,
                                          @ImportProcessLogId = @ImportProcessLogId;
                                 END;
							 -- Check Manditory Data
		 					 IF @IsRequired = 1 AND @CheckedSourceColumn <> @SourceColumnName
								BEGIN
									SET @CheckedSourceColumn = @SourceColumnName;
									EXEC Znode_ImportValidateManditoryData
									@TableName = @TableName,
									@SourceColumnName = @SourceColumnName,
									@CreateDateString = @CreateDateString,
									@ValidationName = @ValidationName,
									@ControlName = @ControlName,
									@ValidationValue = @ValidationValue,
									@NewGUID = @NewGUID,
									@ImportHeadId = @ImportHeadId;
								END;
							 --END 
							
                             IF @AttributeTypeName = 'Text'
                                 BEGIN
								 
						              EXEC Znode_ImportValidateManditoryText
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @LocaleId = @LocaleId,
                                          @DefaultLocaleId = @DefaultLocaleId,
                                          @AttributeId = @AttributeId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @ImportHeadId = @ImportHeadId;
                                 END;
                             IF @AttributeTypeName = 'Image'
                                 BEGIN
                                     EXEC Znode_ImportValidateImageData
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @LocaleId = @LocaleId,
                                          @DefaultLocaleId = @DefaultLocaleId,
                                          @AttributeId = @AttributeId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @ImportHeadId = @ImportHeadId;
                                 END;

					

                             --Check Default data value is valid 
                             IF @ImportHeadName IN('Product', 'Category','B2BCustomer')
                                 BEGIN
                                     IF @AttributeId IN
                                     (
                                         SELECT PimAttributeId
                                         FROM #DefaultAttributeCode
                                     )
                                         BEGIN
							
                                            IF  @AttributeTypeName = 'Multi Select'
											 BEGIN
										 		 ---Verify Image file is exists in media table or not 
												 SET @SQLQuery = ' INSERT INTO #InvalidDefaultData (RowNumber, Value, ColumnName) 
												 SELECT ROWNUMBER , (Select TOP 1 Item from dbo.split(' + @SourceColumnName + ','','')  SP WHERE NOT EXISTS 
												 (Select ToP 1 1 FROM #DefaultAttributeCode DAC WHERE 
												  DAC.AttributeTypeName <> ''Yes/No'' AND DAC.AttributeDefaultValueCode IS NOT NULL AND DAC.PimAttributeId = 
												 ' + CONVERT(VARCHAR(100), @AttributeId) + ' AND ltrim(rtrim(SP.Item) ) = DAC.AttributeDefaultValueCode
												 )), ''' + @SourceColumnName + ''' as [ColumnName]  FROM ' + @TableName
												 + ' Where ISnull(' + @SourceColumnName +  ','''') <> '''''
												EXEC sys.sp_sqlexec @SQLQuery;
											  END
											  ELSE IF @AttributeTypeName = 'Simple Select'
											  BEGIN
						
												---Verify Image file is exists in media table or not 
												 SET @SQLQuery = ' INSERT INTO #InvalidDefaultData (RowNumber, Value, ColumnName) 
												 SELECT ROWNUMBER , ' + @SourceColumnName + ' , ''' + @SourceColumnName + ''' as [ColumnName]  FROM ' + @TableName
												 + ' SP Where ISnull(' + @SourceColumnName +  ','''') <> '''' AND 
												  NOT EXISTS 
												 (Select TOP 1 1 FROM #DefaultAttributeCode DAC WHERE 
												  DAC.AttributeTypeName <> ''Yes/No'' AND DAC.AttributeDefaultValueCode IS NOT NULL AND DAC.PimAttributeId = 
												 ' + CONVERT(VARCHAR(100), @AttributeId) + ' AND ltrim(rtrim(SP.' + @SourceColumnName + ') ) = DAC.AttributeDefaultValueCode ) '
							
												EXEC sys.sp_sqlexec @SQLQuery;
											  END   
												-- Check Invalid Image 
												 SET @SQLQuery = 'SELECT ''9 '' ErrorDescription,'''+@SourceColumnName+''' as [ColumnName], 
												 Value AS  AttributeValue,RowNumber ,'''+@NewGUID+''',  '+@CreateDateString+' FROM #InvalidDefaultData Where Value IS NOT NULL'
												 INSERT INTO ZnodeImportLog (ErrorDescription, ColumnName, Data, RowNumber, GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
												 EXEC sys.sp_sqlexec @SQLQuery;
												 Delete from #InvalidDefaultData

       
                                         END;
                                 END;
							
                             FETCH NEXT FROM Cr_Attribute INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @ControlName, @ValidationName, @SubValidationName, @ValidationValue, @RegExp;
                         END;
                     CLOSE Cr_Attribute;
                     DEALLOCATE Cr_Attribute;
                     --SELECT top 1 1 FROM @FamilyAttributeDetail where  iSNULL(SourceColumnName,'') = ''  and IsRequired = 1
                 END;
             
			 
			  
------------------------------------------------------------------------------------------
		 Declare @SQLQueryNew NVARCHAR(4000)
		 Declare @SourceColumnNameProduct nvarchar(4000) 
         IF @ImportHeadName IN('Product','Pricing','ProductAssociation','Inventory')
		 BEGIN
		  	 
		 SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'SKU'
		 AND ImportTemplateId = @TemplateId


			SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  SKU - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;			
		END
		ELSE IF @ImportHeadName IN('ProductAttribute')
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'AttributeCode'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  Attribute - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'ZipCode'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'ZIP'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  ZIPCode - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'Category'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'CategoryCode'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  CategoryCode - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'CategoryAssociation'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'CategoryName'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  CategoryName - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;

		END
		ELSE IF @ImportHeadName IN ('Customer','CustomerAddress')
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'UserName'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  UserName - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'SEODetails'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'Code'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  Code - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'Highlight'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'HighlightCode'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  HighlightCode - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'AddonAssociation'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'SKU'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  SKU - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'AttributeDefaultValue'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'AttributeDefaultValueCode'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  AttributeDefaultValueCode - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
	-------------------------------------------------------------------------------------------------------------
	
	--DECLARE @SQLLOG NVARCHAR(MAX)

	--SET @SQLLOG = '

	--SELECT TBL.*,ZM.MessageName AS ErrorDescription INTO  tempdb..[##ImportProcessLog_'+@NewGUID+ ']
	--FROM '+@TableName+' TBL
	--INNER JOIN ZnodeImportLog ZILL ON (TBL.Rownumber = ZILL.Rownumber)
	--INNER JOIN Znodemessage ZM ON (ZM.MessageCode = ZILL.ErrorDescription)
	--WHERE ImportProcessLogId =  '+CONVERT(VARCHAR(100), @ImportProcessLogId)+'
	--AND ZILL.Rownumber IS NOT NULL	
	--'	
	-- PRINT @SQLLOG
	-- EXEC sys.sp_sqlexec  @SQLLOG;

	 --SET @SQLLOG = ''

	 --SET @SQLLOG = 'SELECT * FROM [TempDB..##ImportProcessLog_'+@NewGUID+ ']'
	 --EXEC sys.sp_sqlexec  @SQLLOG;


	--------------------------------------------------------------------------------------------------------------------
			 
  		SET @SQLQuery = 'Delete FROM  '+@TableName+' Where Rownumber IN (Select Rownumber FROM ZnodeImportLog  WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND Rownumber IS NOT NULL)';
        EXEC sys.sp_sqlexec  @SQLQuery;
			 			
	  
             IF @ImportHeadName IN('Product', 'Category')
                 BEGIN
                     IF NOT EXISTS
                     (
                         SELECT TOP 1 1
                         FROM @FamilyAttributeDetail
                         WHERE ISNULL(SourceColumnName, '') = ''
                               AND IsRequired = 1
                     ) AND NOT EXISTS
					 (
						 SELECT TOP 1 1
						 FROM ZnodeImportLog
						 WHERE Guid = @NewGUID
							   AND ErrorDescription IN(43, 42)
						 AND ImportProcessLogId = @ImportProcessLogId
					 )
                         BEGIN
                             IF @IsCategory = 0
                                 BEGIN
							
                                     EXEC Znode_ImportPimProductData
                                          @TableName = @TableName,
                                          @NewGUID = @NewGUID,
                                          @TemplateId = @TemplateId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @UserId = @UserId,
                                          @LocaleId = @LocaleId,
                                          @DefaultFamilyId = @DefaultFamilyId;

                                 END;
                             ELSE
                                 BEGIN
                                     EXEC Znode_ImportPimCategoryData
                                          @TableName = @TableName,
                                          @NewGUID = @NewGUID,
                                          @TemplateId = @TemplateId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @UserId = @UserId,
                                          @LocaleId = @LocaleId,
                                          @DefaultFamilyId = @DefaultFamilyId;
                                 END;
                         END
						 ELSE
							BEGIN
								-- Update Record count in log 
								
							
								--SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
								--EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount out
								--UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
								--WHERE ImportProcessLogId = @ImportProcessLogId;

								SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
								SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
								EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount out
								UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
								WHERE ImportProcessLogId = @ImportProcessLogId;
							END

                 END;
				IF NOT EXISTS
					 (
						 SELECT TOP 1 1
						 FROM ZnodeImportLog
						 WHERE Guid = @NewGUID
							   AND ErrorDescription IN(43, 42)
						 AND ImportProcessLogId = @ImportProcessLogId
					 )
             BEGIN
                 IF @ImportHeadName = 'Pricing'
                     BEGIN
                         EXEC [Znode_ImportPriceList]
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID,
                              @PriceListId = @PriceListId;
                     END;

                 IF @ImportHeadName = 'Inventory'
                     BEGIN
				
                         EXEC Znode_ImportInventory_Ver1
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID;
                     END;
                 IF @ImportHeadName = 'ZipCode'
                     BEGIN
						 EXEC Znode_ImportZipCode
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID,
							  @CountryCode = @CountryCode;
                     END;
					 IF @ImportHeadName = 'CategoryAssociation'
                     BEGIN
						 EXEC Znode_ImportCatalogCategory
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID,
							  @PimCatalogId = @PimCatalogId;
                     END;
					 IF @ImportHeadName = 'ProductAssociation'
                     BEGIN
						 EXEC Znode_ImportAssociateProducts
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID
                     END;
			
					 IF @ImportHeadName = 'SEODetails' AND @PortalId > 0 
                     BEGIN
						 EXEC Znode_ImportSEODetails
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
							  @LocaleId = @LocaleId,
							  @PortalId =@PortalId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID,
							  @CsvColumnString = @CsvColumnString 

				
                     END;
				
					 IF @ImportHeadName = 'ProductAttribute' 
                     BEGIN
						 EXEC Znode_ImportAttributes
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
							  @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID
				
                     END;

					 IF @ImportHeadName = 'Customer' AND @PortalId > 0 
                     BEGIN
					
					
						 EXEC Znode_ImportCustomer
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = @PortalId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString
				
                     END;
					 
					 IF @ImportHeadName = 'UserApprovers' AND @PortalId > 0 
                     BEGIN
						 EXEC Znode_ImportUserApproval
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = @PortalId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString
				
                     END;

					 IF @ImportHeadName = 'B2BCustomer' AND @PortalId > 0 
                     BEGIN

							 EXEC Znode_ImportB2BCustomer
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = @PortalId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString
				
                     END;

					 IF @ImportHeadName = 'CustomerAddress' --AND @PortalId > 0 
                     BEGIN
						 EXEC Znode_ImportCustomerAddress
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = 1, -- not implemented from forntend 
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString,
							  @IsAccountAddress = @IsAccountAddress
				
                     END;
					 IF @ImportHeadName = 'ShippingAddress' --AND @PortalId > 0 
                     BEGIN
						 EXEC Znode_ImportCustomerAddress
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = 1, -- not implemented from forntend 
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString,
							  @IsAccountAddress = @IsAccountAddress
				
                     END;
					 IF @ImportHeadName = 'StoreLocator' --AND @PortalId > 0 
                     BEGIN
					 	 EXEC Znode_ImportStoreLocatorAddress
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString
                     END;

					IF @ImportHeadName = 'Highlight'
					BEGIN
					EXEC Znode_ImportHighlight 
					@TableName = @TableName, 
					@Status = @Status, 
					@UserId = @UserId, 
					@ImportProcessLogId = @ImportProcessLogId, 
					@NewGUID = @NewGUID 
					END;

					IF @ImportHeadName = 'AddonAssociation'
					BEGIN
					EXEC Znode_ImportAddonAssociation 
					@TableName = @TableName, 
					@Status = @Status, 
					@UserId = @UserId, 
					@ImportProcessLogId = @ImportProcessLogId, 
					@NewGUID = @NewGUID,
					@PimCatalogId = @PimCatalogId
					END;

					IF @ImportHeadName = 'AttributeDefaultValue'
					BEGIN
					EXEC Znode_ImportAttributeDefaultValue 
					@TableName = @TableName, 
					@Status = @Status, 
					@UserId = @UserId, 
					@ImportProcessLogId = @ImportProcessLogId, 
					@NewGUID = @NewGUID
					
					END;
				 
             END
			 ELSE 
				 BEGIN
					-- Update Record count in log 	
					SET @SQLQuery = ' Select @FailedRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
					EXEC	sp_executesql @SQLQuery , N'@FailedRecordCount BIGINT out' , @FailedRecordCount =@FailedRecordCount out
					--SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS  NULL AND  ImportProcessLogId = @ImportProcessLogId;
					SELECT @SuccessRecordCount = 0
									
					UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
					WHERE ImportProcessLogId = @ImportProcessLogId;
					--SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
					--SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
					--EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount out
					--UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount , TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
					--WHERE ImportProcessLogId = @ImportProcessLogId;
				 END

             EXEC Znode_ImportReadErrorLog
                  @ImportProcessLogId = @ImportProcessLogId,
                  @NewGUID = @NewGUID;
             DROP TABLE #GlobalTempTableColumns;

             -- Finally call product insert process if error not found in error log table 
             IF EXISTS
             (
                 SELECT TOP 1 1
                 FROM ZnodeImportLog
                 WHERE ImportProcessLogId = @ImportProcessLogId
                       AND Guid = @NewGUID
             )
                 BEGIN
                     --Update process with completed status for current import 
                     UPDATE ZnodeImportProcessLog
                       SET
                           Status = dbo.Fn_GetImportStatus(3),
                           ProcessCompletedDate = GETDATE()
                       WHERE ImportProcessLogId = @ImportProcessLogId;
                 END;
				 SET @SQLQuery = 'Drop Table ' + @TableName
                 EXEC sys.sp_sqlexec @SQLQuery;
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE(),
                    ERROR_LINE(),
                    ERROR_PROCEDURE();
             EXEC Znode_ImportReadErrorLog
                  @ImportProcessLogId = @ImportProcessLogId,
                  @NewGUID = @NewGUID; 
             --Update process with failed status for current import 
             UPDATE ZnodeImportProcessLog
               SET
                   Status = dbo.Fn_GetImportStatus(3),
                   ProcessCompletedDate = GETDATE()
             WHERE ImportProcessLogId = @ImportProcessLogId;
			 				 SET @SQLQuery = 'Drop Table ' + @TableName
                 EXEC sys.sp_sqlexec @SQLQuery;
             --ROLLBACK TRAN TRN_ImportValidProductData;
         END CATCH;
     END;
	 GO

update ZnodeMenu 
set MenuName='Guest Users'
WHERE MenuName='Guest User'

GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_MergeOmsSavedCartLineItems')
BEGIN 
DROP PROCEDURE Znode_MergeOmsSavedCartLineItems
END
GO


CREATE PROCEDURE [dbo].[Znode_MergeOmsSavedCartLineItems] 
(
 @OmsSavedCartId INT  
,@OldOmsSavedCartId INT 
,@UserId  INT 
,@Status  BIT = 0  OUT
)
AS 
BEGIN 
 BEGIN TRY 
 SET NOCOUNT ON 

     DECLARE @AddOnOrderLineItemRelationshipTypeId INT = (SELECT TOP 1 OrderLineItemRelationshipTypeId 
															FROM ZnodeOmsOrderLineItemRelationshipType
															WHERE Name = 'Addons')
	 DECLARE @TBL_OmsSavedCartOld TABLE(SKU NVARCHAR(2000), OmsSavedCartLineItemId INT ,ParentSKU NVARCHAR(2000) , ParentOmsSavedCartLineItemId INT ,AddOnSKU NVARCHAR(2000), OmsSavedCartLineItemIdAddOn NVARCHAR(2000) ,PersonalizeCode NVARCHAR(1200), PersonalizeValue  NVARCHAr(max)  )

	 DECLARE @TBL_OmsSavedCartNew TABLE(SKU NVARCHAR(2000), OmsSavedCartLineItemId INT ,ParentSKU NVARCHAR(2000) , ParentOmsSavedCartLineItemId INT ,AddOnSKU NVARCHAR(2000), OmsSavedCartLineItemIdAddOn NVARCHAR(2000) ,PersonalizeCode NVARCHAR(1200), PersonalizeValue  NVARCHAr(max)  )

	 
	 SELECT * 
	 INTO #ZnodeOmsSavedCartLineItemOld
	 FROM ZnodeOmsSavedCartLineItem a 
	 WHERE OmsSavedCartId = @OldOmsSavedCartId 


	 SELECT * 
	 INTO #ZnodeOmsPersonalizeCartItemOld
	 FROM ZnodeOmsPersonalizeCartItem a 
	 WHERE EXISTS (SELECT TOP 1 1 FROM #ZnodeOmsSavedCartLineItemOld t WHERE t.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId)

	  SELECT * 
	 INTO #ZnodeOmsSavedCartLineItemNew
	 FROM ZnodeOmsSavedCartLineItem a 
	 WHERE OmsSavedCartId = @OmsSavedCartId 


	 SELECT * 
	 INTO #ZnodeOmsPersonalizeCartItemNew
	 FROM ZnodeOmsPersonalizeCartItem a 
	 WHERE EXISTS (SELECT TOP 1 1 FROM #ZnodeOmsSavedCartLineItemNew t WHERE t.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId)

	 

	 INSERT INTO @TBL_OmsSavedCartOld (SKU,OmsSavedCartLineItemId,ParentSKU,ParentOmsSavedCartLineItemId)
	    SELECT SKU , OmsSavedCartLineItemId,(SELECT TOP 1 SKU FROM #ZnodeOmsSavedCartLineItemOld TBL_B WHERE TBL_B.OmsSavedCartLineItemId = ISNULL(TBL_A.ParentOmsSavedCartLineItemId,0)  ) ParentSKU
					, ParentOmsSavedCartLineItemId
		FROM #ZnodeOmsSavedCartLineItemOld TBL_A
		WHERE OrderLineItemRelationshipTypeId IS NOT NULL AND OrderLineItemRelationshipTypeId <> @AddOnOrderLineItemRelationshipTypeId
	 
	

	 ;With Cte_UpdateOld AS 
	 (
		SELECT ParentOmsSavedCartLineItemId , SUBSTRING((SELECT ','+SKU FROM #ZnodeOmsSavedCartLineItemOld t WHERE t.ParentOmsSavedCartLineItemId = a.ParentOmsSavedCartLineItemId FOR XML PATH('') ),2,4000)  SKU
		     , SUBSTRING((SELECT ','+CAST(OmsSavedCartLineItemId AS NVARCHAR(max)) FROM #ZnodeOmsSavedCartLineItemOld t WHERE t.ParentOmsSavedCartLineItemId = a.ParentOmsSavedCartLineItemId FOR XML PATH('') ),2,4000)  OmsSavedCartLineItemId
		FROM #ZnodeOmsSavedCartLineItemOld a 
		WHERE a.OrderLineItemRelationshipTypeId = @AddOnOrderLineItemRelationshipTypeId
	 )
	 
	 UPDATE TBL_O
	 SET TBL_O.AddOnSKU =  TBL_ON.SKU
		,TBL_O.OmsSavedCartLineItemIdAddOn =  TBL_ON.OmsSavedCartLineItemId
	 FROM @TBL_OmsSavedCartOld TBL_O 
	 INNER JOIN Cte_UpdateOld TBL_ON ON (TBL_ON.ParentOmsSavedCartLineItemId  = TBL_O.OmsSavedCartLineItemId )
	   
     UPDATE TBL_O
	 SET TBL_O.PersonalizeCode = TBL_ON.PersonalizeCode
		,TBL_O.PersonalizeValue =  TBL_ON.PersonalizeValue
	 FROM @TBL_OmsSavedCartOld TBL_O 
	 INNER JOIN #ZnodeOmsPersonalizeCartItemOld TBL_ON ON (TBL_ON.OmsSavedCartLineItemId  = TBL_O.OmsSavedCartLineItemId )

	  INSERT INTO @TBL_OmsSavedCartNew (SKU,OmsSavedCartLineItemId,ParentSKU,ParentOmsSavedCartLineItemId)
	    SELECT SKU , OmsSavedCartLineItemId,(SELECT TOP 1 SKU FROM #ZnodeOmsSavedCartLineItemNew TBL_B WHERE TBL_B.OmsSavedCartLineItemId = ISNULL( TBL_A.ParentOmsSavedCartLineItemId,0)   ) ParentSKU
					, ParentOmsSavedCartLineItemId
		FROM #ZnodeOmsSavedCartLineItemNew TBL_A
		WHERE OrderLineItemRelationshipTypeId IS NOT NULL AND OrderLineItemRelationshipTypeId <> @AddOnOrderLineItemRelationshipTypeId
	 
	 ;With Cte_UpdateNew AS 
	 (
		SELECT ParentOmsSavedCartLineItemId , SUBSTRING((SELECT ','+SKU FROM #ZnodeOmsSavedCartLineItemNew t WHERE t.ParentOmsSavedCartLineItemId = a.ParentOmsSavedCartLineItemId FOR XML PATH('') ),2,4000)  SKU
		     , SUBSTRING((SELECT ','+CAST(OmsSavedCartLineItemId AS NVARCHAR(max)) FROM #ZnodeOmsSavedCartLineItemNew t WHERE t.ParentOmsSavedCartLineItemId = a.ParentOmsSavedCartLineItemId FOR XML PATH('') ),2,4000)  OmsSavedCartLineItemId
		FROM #ZnodeOmsSavedCartLineItemNew a 
		WHERE a.OrderLineItemRelationshipTypeId = @AddOnOrderLineItemRelationshipTypeId
	 )
	 
	 UPDATE TBL_O
	 SET TBL_O.AddOnSKU =  TBL_ON.SKU
		,TBL_O.OmsSavedCartLineItemIdAddOn =  TBL_ON.OmsSavedCartLineItemId
	 FROM @TBL_OmsSavedCartNew TBL_O 
	 INNER JOIN Cte_UpdateNew TBL_ON ON (TBL_ON.ParentOmsSavedCartLineItemId  = TBL_O.OmsSavedCartLineItemId )
	   

	    
    
	 UPDATE TBL_O
	 SET TBL_O.PersonalizeCode = TBL_ON.PersonalizeCode
		,TBL_O.PersonalizeValue =  TBL_ON.PersonalizeValue
	 FROM @TBL_OmsSavedCartNew TBL_O 
	 INNER JOIN #ZnodeOmsPersonalizeCartItemNew TBL_ON ON (TBL_ON.OmsSavedCartLineItemId  = TBL_O.OmsSavedCartLineItemId )



	 UPDATE a 
	 SET  a.Quantity =  d.Quantity 
	 FROM ZnodeOmsSavedCartLineItem a 
	 INNER JOIN @TBL_OmsSavedCartNew b ON (b.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId)
	 INNER JOIN @TBL_OmsSavedCartOld c ON (c.SKU = b.SKU AND c.ParentSKU = b.ParentSKU AND ISNULL(c.AddOnSKU,'-1') = ISNULL(b.AddOnSKU,'-1') AND ISNULL(c.PersonalizeCode,'-1') = ISNULL(b.PersonalizeCode,'-1') AND ISNULL(c.PersonalizeValue,'-1') = ISNULL(b.PersonalizeValue,'-1')) 
	 INNER JOIN #ZnodeOmsSavedCartLineItemOld d ON (d.OmsSavedCartLineItemId = c.OmsSavedCartLineItemId)
	 
	 UPDATE  a
	 SET a.OmsSavedCartId = @OmsSavedCartId
	 FROM ZnodeOmsSavedCartLineItem a 
	 WHERE NOT EXISTS (SELECT TOP 1 1 FROM @TBL_OmsSavedCartOld b 
	 INNER JOIN @TBL_OmsSavedCartNew c ON (c.SKU = b.SKU AND c.ParentSKU = b.ParentSKU AND ISNULL(c.AddOnSKU,'-1') = ISNULL(b.AddOnSKU,'-1') AND ISNULL(c.PersonalizeCode,'-1') = ISNULL(b.PersonalizeCode,'-1') AND ISNULL(c.PersonalizeValue,'-1') = ISNULL(b.PersonalizeValue,'-1'))
	 WHERE b.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId )
	 AND NOT EXISTS (SELECT TOP 1 1 FROM @TBL_OmsSavedCartOld b 
	 INNER JOIN @TBL_OmsSavedCartNew c ON (c.SKU = b.SKU AND c.ParentSKU = b.ParentSKU AND ISNULL(c.AddOnSKU,'-1') = ISNULL(b.AddOnSKU,'-1') AND ISNULL(c.PersonalizeCode,'-1') = ISNULL(b.PersonalizeCode,'-1') AND ISNULL(c.PersonalizeValue,'-1') = ISNULL(b.PersonalizeValue,'-1'))
	 WHERE b.ParentOmsSavedCartLineItemId = a.OmsSavedCartLineItemId )
	 AND OmsSavedCartId = @OldOmsSavedCartId 


	 DELETE FROM ZnodeOmsSavedCartLineItem WHERE OmsSavedCartId = @OldOmsSavedCartId 

	 ;with CTE_UpdateOrder 
	 AS 
	 (
	   SELECT Sequence,  ROW_NUMBER()Over(order BY OmsSavedCartLineItemId ASC) RowId
	   FROM ZnodeOmsSavedCartLineItem
	   WHERE  OmsSavedCartId = @OmsSavedCartId
	 
	 ) 
	 UPDATE CTE_UpdateOrder 
	 SET Sequence =RowId
	 

	 UPDATE ZnodeOmsSavedCart
	 SET ModifiedDate = GETDATE()
	 WHERE OmsSavedCartId = @OmsSavedCartId


	 SET @Status = 1 

 END TRY 
 BEGIN CATCH 
  SELECT ERROR_MESSAGE()
   SET @Status = 0
 END CATCH 
END

GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishProductbulk')
BEGIN 
DROP PROCEDURE Znode_GetPublishProductbulk
END
GO

CREATE PROCEDURE [dbo].[Znode_GetPublishProductbulk]
(
@PublishCatalogId INT = 0 
,@VersionId       VARCHAR(50) = 0 
,@PimProductId    TransferId Readonly
,@UserId		  INT = 0 
,@PimCategoryHierarchyId  INT = 0 
,@PimCatalogId INT = 0 
,@LocaleIds TransferId READONLY
,@PublishStateId INT = 0 
)
With RECOMPILE
AS
-- 
/*
DECLARE @rrte transferId 
INSERT INTO @rrte
SELECT 1 

EXEC Znode_GetPublishProductbulk @PublishCatalogId=3,@UserId= 2 ,@localeIDs = @rrte,@PublishStateId = 3 

*/
BEGIN 
  BEGIN TRY 
 SET NOCOUNT ON 

EXEC Znode_InsertUpdatePimAttributeXML 1 
EXEC Znode_InsertUpdateCustomeFieldXML 1
EXEC Znode_InsertUpdateAttributeDefaultValue 1 

create table #ZnodePrice (RetailPrice numeric(28,13),SalesPrice numeric(28,13),CurrencyCode varchar(100), CultureCode varchar(100), CurrencySuffix varchar(100), PublishProductId int)
	
	create table #ProductSKU (SEOUrl nvarchar(max), SEODescription  nvarchar(max),SEOKeywords  nvarchar(max),SEOTitle  nvarchar(max), PublishProductId int)

	create table #ProductImages (PublishProductId int, ImageSmallPath  varchar(max))

	declare @DefaultPortal int, @IsAllowIndexing int
	select @DefaultPortal = PortalId, @IsAllowIndexing = 1 from ZnodePimCatalog ZPC Inner Join ZnodePublishCatalog ZPC1 ON ZPC.PimCatalogId = ZPC1.PimCatalogId where ZPC1.PublishCatalogId =  @PublishCatalogId and isnull(ZPC.IsAllowIndexing,0) = 1 


--DECLARE @PortalId INT = (SELECT TOP 1 POrtalId FROM ZnodePortalCatalog WHERE PublishCatalogId = @PublishCatalogId)
DECLARE @PriceListId INT = (SELECT TOP 1 PriceListId FROM ZnodePriceListPortal WHERE PortalId = @DefaultPortal
ORDER BY Precedence ASC )
DECLARE @DomainUrl varchar(max) = (select TOp 1 URL FROM ZnodeMediaConfiguration WHERE IsActive =1)
DECLARE @MaxSmallWidth INT  = (SELECT TOP 1  MAX(MaxSmallWidth) FROM ZnodePortalDisplaySetting WHERE PortalId = @DefaultPortal)


   IF OBJECT_ID('tempdb..#PimProductAttributeXML') is not null
   BEGIN 
	 DROP TABLE #PimProductAttributeXML
   END
   IF OBJECT_ID('tempdb..#PimDefaultValueLocale') is not null
   BEGIN 
    DROP TABLE #PimDefaultValueLocale
   END
   IF OBJECT_ID('tempdb..#TBL_CategoryCategoryHierarchyIds') is not null
   BEGIN 
    DROP TABLE #TBL_CategoryCategoryHierarchyIds
   END

   DECLARE @PimMediaAttributeId INT = dbo.Fn_GetProductImageAttributeId()
   
   CREATE TABLE #PimProductAttributeXML (PimAttributeXMLId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )
  	
   CREATE TABLE #TBL_CategoryCategoryHierarchyIds  (CategoryId int , ParentCategoryId int ) 
	
   If (@PimCategoryHierarchyId <> 0 AND @PimCatalogId <> 0 )
		INSERT INTO #TBL_CategoryCategoryHierarchyIds(CategoryId , ParentCategoryId )
			Select Distinct PimCategoryId , Null FROM (
				SELECT PimCategoryId,ParentPimCategoryId from DBO.[Fn_GetRecurciveCategoryIds](@PimCategoryHierarchyId,@PimCatalogId)
				Union 
				Select PimCategoryId , null  from ZnodePimCategoryHierarchy where PimCategoryHierarchyId = @PimCategoryHierarchyId 
				Union 
				Select PimCategoryId , null  from [Fn_GetRecurciveCategoryIds_new] (@PimCategoryHierarchyId,@PimCatalogId) ) Category  


   CREATE TABLE #PimDefaultValueLocale  (PimAttributeDefaultXMLId INT  PRIMARY KEY ,PimAttributeDefaultValueId INT ,LocaleId INT ) 
   DECLARE @ProductNamePimAttributeId INT = dbo.Fn_GetProductNameAttributeId(),@DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId(),@LocaleId INT = 0 
		,@SkuPimAttributeId  INT =  dbo.Fn_GetProductSKUAttributeId() , @IsActivePimAttributeId INT =  dbo.Fn_GetProductIsActiveAttributeId()
   DECLARE @GetDate DATETIME =dbo.Fn_GetDate()
   DECLARE @TBL_LocaleId  TABLE (RowId INT IDENTITY(1,1) PRIMARY KEY  , LocaleId INT )
			
			INSERT INTO @TBL_LocaleId (LocaleId)
			SELECT  LocaleId
			FROM ZnodeLocale MT 
			WHERE IsActive = 1
			AND (EXISTS (SELECT TOP 1 1  FROM @LocaleIds RT WHERE RT.Id = MT.LocaleId )
			OR NOT EXISTS (SELECT TOP 1 1 FROM @LocaleIds )) 

  DECLARE @Counter INT =1 ,@maxCountId INT = (SELECT max(RowId) FROM @TBL_LocaleId ) 
 

 CREATE TABLE #TBL_PublishCatalogId (PublishCatalogId INT,PublishProductId INT,PimProductId  INT   , VersionId INT, PublishCategoryId int ,LocaleId INT )

 CREATE INDEX idx_#TBL_PublishCatalogIdPimProductId on #TBL_PublishCatalogId(PimProductId)

  CREATE INDEX idx_#TBL_PublishCatalogIdPimPublishCatalogId on #TBL_PublishCatalogId(PublishCatalogId)

  If (@PimCategoryHierarchyId <> 0 AND @PimCatalogId <> 0 )
  BEGIN
			 INSERT INTO #TBL_PublishCatalogId(PublishCatalogId ,PublishProductId ,PimProductId  , VersionId ,PublishCategoryId ,LocaleId)  
			 SELECT distinct ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,MAX(ZPCP.PublishCataloglogId ) VersionId ,ZPC.PublishCategoryId,ZPCP.LocaleId
				 FROM ZnodePublishProduct ZPP INNER JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
				 INNER JOIN ZnodePublishCategoryProduct ZPPP ON ZPP.PublishProductId  = ZPPP.PublishProductId  
				 AND ZPCP.PublishCatalogId = ZPPP.PublishCatalogId
				 INNER JOIN ZnodePublishCategory ZPC ON ZPC.PublishCatalogId = ZPPP.PublishCatalogId AND ZPPP.PublishCategoryId = ZPC.PublishCategoryId 
				 WHERE ZPP.PublishCatalogId = @PublishCatalogId  and ZPCP.PublishStateId =  @PublishStateId
				 AND 
				 ZPC.PimCategoryId in (Select CategoryId from #TBL_CategoryCategoryHierarchyIds )
				 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId ,ZPC.PublishCategoryId,ZPCP.LocaleId	

			INSERT INTO #TBL_PublishCatalogId(PublishCatalogId ,PublishProductId ,PimProductId  , VersionId ,PublishCategoryId ,LocaleId)
			SELECT DISTINCT ZPP.PublishCatalogId,ZPP.PublishProductId,PimProductId,MAX(ZPCP.PublishCatalogLogId) VersionId,NULL, ZPCP.LocaleId
				 FROM ZnodePublishProduct ZPP 
				 INNER JOIN ZnodePublishCatalogLog ZPCP ON 
				 (ZPCP.PublishCatalogId = ZPP.PublishCatalogId) 
				 WHERE				 (EXISTS (SELECT TOP 1 1 FROM @pimProductId SP WHERE SP.Id = ZPP.PimProductId ))
				 AND (ZPP.PublishCatalogId = @publishCatalogId )
				 AND NOT Exists (Select TOP 1 1 from #TBL_PublishCatalogId TPL where TPL.PublishProductId = ZPP.PublishProductId)
				 AND ZPCP.PublishStateId =  @PublishStateId
			GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId , ZPCP.LocaleId



  END
  ELSE 
  BEGIN
			INSERT INTO #TBL_PublishCatalogId(PublishCatalogId ,PublishProductId,PimProductId ,VersionId,LocaleId  ) 
			 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,  
											MAX(PublishCatalogLogId) ,ZPCP.LocaleId
				 FROM ZnodePublishProduct ZPP 
				 INNER JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
				 WHERE (EXISTS (SELECT TOP 1 1 FROM @PimProductId SP 
				 WHERE SP.Id = ZPP.PimProductId  AND  (@PublishCatalogId IS NULL OR @PublishCatalogId = 0 ))
				 OR  (ZPP.PublishCatalogId = @PublishCatalogId ))
				 --AND  ZPCP.PublishStateId =  @PublishStateId
				 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId ,ZPCP.LocaleId
  END
           
		     DECLARE   @TBL_ZnodeTempPublish TABLE (PimProductId INT , AttributeCode VARCHAR(300) ,AttributeValue NVARCHAR(max) ) 			
			 DECLARE @TBL_AttributeVAlueLocale TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT,LocaleId INT 
			 )

	
	
	if (@IsAllowIndexing=1)
	begin 
		insert into #ZnodePrice
		SELECT RetailPrice,SalesPrice,ZC.CurrencyCode,ZCC.CultureCode ,ZCC.Symbol CurrencySuffix,TYU.PublishProductId
		FROM ZnodePrice ZP 
		INNER JOIN ZnodePriceList ZPL ON (ZPL.PriceListId = ZP.PriceListId)
		INNER JOIN ZnodeCurrency ZC oN (ZC.CurrencyId = ZPL.CurrencyId )
		INNER JOIN ZnodeCulture ZCC ON (ZCC.CultureId = ZPL.CultureId)
		INNER JOIN ZnodePublishProductDetail TY ON (TY.SKU = ZP.SKU ) 
		INNER JOIN ZnodePublishProduct TYU ON (TYU.PublishProductId = TY.PublishProductId) 
		WHERE ZP.PriceListId = @PriceListId 
		AND TY.LocaleId = @DefaultLocaleId
		AND TYU.PublishCatalogId = @PublishCatalogId
		AND EXISTS (SELECT TOP 1 1 FROM ZnodePriceListPortal ZPLP 
		INNER JOIN ZnodePimCatalog ZPC on ZPC.PortalId=ZPLP.PortalId WHERE ZPLP.PriceListId=ZP.PriceListId )
	
		insert INTO #ProductImages
		SELECT  TYU.PublishProductId , @DomainUrl +'Catalog/'  + CAST(@DefaultPortal AS VARCHAr(100)) + '/'+ CAST(@MaxSmallWidth AS VARCHAR(100)) + '/' + RT.MediaPath AS ImageSmallPath   
		FROM ZnodePimAttributeValue ZPAV 
		INNER JOIN ZnodePublishProduct TYU ON (TYU.PimProductId  = ZPAV.PimProductId)
		INNER JOIN ZnodePimProductAttributeMedia  RT ON ( RT.PimAttributeValueId = ZPAV.PimAttributeValueId )
		WHERE  TYU.PublishCatalogId = @PublishCatalogId
		AND RT.LocaleId = @DefaultLocaleId
		AND ZPAV.PimAttributeId = (SELECT TOp 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'ProductImage')
	
		insert INTO #ProductSKU 
		SELECT ZCSD.SEOUrl , ZCDL.SEODescription,ZCDL.SEOKeywords ,ZCDL.SEOTitle, TYU.PublishProductId
		FROM ZnodeCMSSEODetail ZCSD 
		INNER JOIN ZnodeCMSSEODetailLocale ZCDL ON (ZCDL.CMSSEODetailId = ZCSD.CMSSEODetailId)
		INNER JOIN ZnodePublishProductDetail TY ON (TY.SKU = ZCSD.SEOCode AND ZCDL.LocaleId = TY.LocaleId) 
		INNER JOIN ZnodePublishProduct TYU ON (TYU.PublishProductId = TY.PublishProductId)
		WHERE CMSSEOTypeId = (SELECT TOP 1 CMSSEOTypeId FROM ZnodeCMSSEOType WHERE Name = 'Product') 
		AND ZCDL.LocaleId = @DefaultLocaleId
		AND TYU.PublishCatalogId = @PublishCatalogId
		AND ZCSD.PublishStateId = @PublishStateId
		AND ZCSD.PortalId = @DefaultPortal

	end
		
		
WHILE @Counter <= @maxCountId
BEGIN
 
 SET @LocaleId = (SELECT TOP 1 LocaleId FROM @TBL_LocaleId MT 
  WHERE  RowId = @Counter)
 
  INSERT INTO #PimProductAttributeXML 
  SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeXML
  WHERE LocaleId = @LocaleId
  
  IF( @LocaleId <> @DefaultLocaleId )
  BEGIN
	INSERT INTO #PimProductAttributeXML 
	SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
	FROM ZnodePimAttributeXML ZPAX
	WHERE ZPAX.LocaleId = @DefaultLocaleId  
	AND NOT EXISTS (SELECT TOP 1 1 FROM #PimProductAttributeXML ZPAXI WHERE ZPAXI.PimAttributeId = ZPAX.PimAttributeId )
  END

  INSERT INTO #PimDefaultValueLocale
  SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultXML
  WHERE localeId = @LocaleId

  IF( @LocaleId <> @DefaultLocaleId )
  BEGIN
	INSERT INTO #PimDefaultValueLocale 
	SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
	FROM ZnodePimAttributeDefaultXML ZX
	WHERE localeId = @DefaultLocaleId
	AND NOT EXISTS (SELECT TOP 1 1 FROM #PimDefaultValueLocale TRTR WHERE TRTR.PimAttributeDefaultValueId = ZX.PimAttributeDefaultValueId)
  END
  	 
  CREATE TABLE #TBL_CustomeFiled  (PimCustomeFieldXMLId INT ,CustomCode VARCHAR(300),PimProductId INT ,LocaleId INT )

  INSERT INTO #TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,RTR.PimProductId ,RTR.LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML RTR 
  INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = RTR.PimProductId AND RTR.LocaleID = ZPP.LocaleId)
  WHERE RTR.LocaleId = @LocaleId
 
 
  INSERT INTO #TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,ITR.PimProductId ,ITR.LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML ITR
  INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ITR.PimProductId AND ITR.LocaleID = ZPP.LocaleId)
  WHERE ITR.LocaleId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM #TBL_CustomeFiled TBL  WHERE ITR.CustomCode = TBL.CustomCode AND ITR.PimProductId = TBL.PimProductId)
       
       
	 SELECT VIR.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId,VIR.LocaleId , VIR.AttributeValue, VIR.AttributeCode ,ROW_NUMBER() Over(Partition By VIR.PimProductId,PimAttributeId ORDER BY VIR.PimProductId,PimAttributeId  ) RowId
	 INTO #TBL_AttributeVAlue
	 FROM View_LoadManageProductInternal VIR
	 WHERE ( LocaleId = @DefaultLocaleId OR LocaleId = @LocaleId )
	 AND EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
	  UNION ALL 
	 SELECT VIR.PimProductId,VIR.PimAttributeId,ZPDE.PimProductAttributeMediaId,ZPDE.LocaleId ,ZPDE.MediaPath AS AttributeValue, d.AttributeCode ,ROW_NUMBER() Over(Partition By VIR.PimProductId,VIR.PimAttributeId ORDER BY VIR.PimProductId,VIR.PimAttributeId  ) RowId
	 FROM ZnodePimAttributeValue  VIR
	 INNER JOIN ZnodePimProductAttributeMedia ZPDE ON (ZPDE.PimAttributeValueId = VIR.PimAttributeValueId )
	 INNER JOIN ZnodePimAttribute d ON ( d.PimAttributeId=VIR.PimAttributeId )
	 WHERE ( ZPDE.LocaleId = @DefaultLocaleId OR ZPDE.LocaleId = @LocaleId )
	 AND EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
	  Union All
	 SELECT VIR.PimProductId,VIR.PimAttributeId,ZPDVL.PimAttributeDefaultValueLocaleId,ZPDVL.LocaleId ,ZPDVL.AttributeDefaultValue AS AttributeValue, d.AttributeCode ,ROW_NUMBER() Over(Partition By VIR.PimProductId,VIR.PimAttributeId ORDER BY VIR.PimProductId,VIR.PimAttributeId  ) RowId
	 FROM ZnodePimAttributeValue  VIR
	 INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1  )
	 INNER JOIN ZnodePimAttributeDefaultValue ZPADV ON ZPADV.PimAttributeId = D.PimAttributeId
	 INNER JOIN ZnodePimAttributeDefaultValueLocale ZPDVL   on (ZPADV.PimAttributeDefaultValueId = ZPDVL.PimAttributeDefaultValueId)
	 --INNER JOIN ZnodePimProductAttributeDefaultValue ZPDVP ON (ZPDVP.PimAttributeValueId = VIR.PimAttributeValueId AND ZPADV.PimAttributeDefaultValueId = ZPDVP.PimAttributeDefaultValueId )
	 WHERE ( ZPDVL.LocaleId = @DefaultLocaleId OR ZPDVL.LocaleId = @LocaleId )
	 AND EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
	 Union All 
	SELECT VIR.PimProductId,VIR.PimAttributeId,'','','',D.AttributeCode,ROW_NUMBER() Over(Partition By VIR.PimProductId,VIR.PimAttributeId ORDER BY VIR.PimProductId,VIR.PimAttributeId  ) RowId
	FROM ZnodePimAttributeValue  VIR
	INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1 )
	WHERE  EXISTS(SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )

	 
	 UPDATE #TBL_AttributeVAlue SET rowid = (SELECT MAX(rowid) FROM #TBL_AttributeVAlue b WHERE a.PimProductId=b.PimProductId AND a.PimAttributeId = b.PimAttributeId )
	 FROM #TBL_AttributeVAlue a
	
  --SET @versionId = (SELECT TOP 1 VersionId FROM #TBL_PublishCatalogId) 
  

 IF OBJECT_ID('tempdb..#Cte_GetData') IS NOT NULL
 BEGIN 
 DROP TABLE #Cte_GetData
 END 

 CREATE TABLE #Cte_GetData (PimProductId INT,AttributeCode VARCHAR(600),AttributeValue NVARCHAR(max),VersionId INT)

 CREATE INDEX idx_#Cte_GetDataPimProductId ON #Cte_GetData(PimProductId)


INSERT INTO #Cte_GetData(PimProductId ,AttributeCode,AttributeValue,VersionId)
SELECT  a.PimProductId,a.AttributeCode , '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(a.AttributeValue,'')+'</AttributeValues> </AttributeEntity>  </Attributes>'  AttributeValue,VersionId
FROM #TBL_AttributeVAlue a 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = a.PimAttributeId )
INNER JOIN #PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId)
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = a.PimProductId)
WHERE a.LocaleId  = CASE WHEN a.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END
AND NOT EXISTS (SELECT TOP 1 1 FROM Fn_GetProductMediaAttributeId() TY WHERE TY.PimAttributeId = c.PimAttributeId)
 


INSERT INTO #Cte_GetData(PimProductId ,AttributeCode,AttributeValue,VersionId)
SELECT THB.PimProductId,THB.CustomCode,'<Attributes><AttributeEntity>'+CustomeFiledXML+'</AttributeEntity></Attributes>' ,VersionId
FROM ZnodePimCustomeFieldXML THB 
INNER JOIN #TBL_CustomeFiled TRTE ON (TRTE.PimCustomeFieldXMLId = THB.PimCustomeFieldXMLId)
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = THB.PimProductId)
UNION ALL 
SELECT ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues></AttributeValues>'+'<SelectValues>'+
			   STUFF((
                    SELECT '  '+ DefaultValueXML  FROM ZnodePimAttributeDefaultXML AA 
				 INNER JOIN #PimDefaultValueLocale GH ON (GH.PimAttributeDefaultXMLId = AA.PimAttributeDefaultXMLId)
				 INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId )
				 WHERE (ZPADV.PimAttributeValueId = ZPAV.PimAttributeValueId)
    FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</SelectValues> </AttributeEntity></Attributes>' AttributeValue ,VersionId
FROM ZnodePimAttributeValue ZPAV  
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
AND EXISTS (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)

---for PLP

INSERT INTO #Cte_GetData(PimProductId ,AttributeCode,AttributeValue,VersionId)
SELECT DISTINCT  UOP.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues></AttributeValues>'+'<SelectValues>'+
			   STUFF((
                    SELECT DISTINCT '  '+REPLACE(DefaultValueXML,'</SelectValuesEntity>','<VariantDisplayOrder>'+CAST(ISNULL(ZPA.DisplayOrder,0) AS VARCHAR(200))+'</VariantDisplayOrder>
					<VariantSKU>'+ISNULL(ZPAVL_SKU.AttributeValue,'')+'</VariantSKU>
					<VariantImagePath>'+ISNULL((SELECT ''+ZM.Path FOR XML Path ('')),'')+'</VariantImagePath></SelectValuesEntity>')   
				 FROM ZnodePimAttributeDefaultXML AA 
				 INNER JOIN #PimDefaultValueLocale GH ON (GH.PimAttributeDefaultXMLId = AA.PimAttributeDefaultXMLId)
				 INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId )
				 INNER JOIN ZnodePimAttributeValue ZPAV1 ON (ZPAV1.PimAttributeValueId= ZPADV.PimAttributeValueId )
				 -- check/join for active variants 
				 INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId =ZPAV1.PimProductId)
				 INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON (ZPAV.PimAttributevalueid = ZPAVL.PimAttributeValueId AND ZPAVL.AttributeValue = 'True')
				 INNER JOIN ZnodePimProductTypeAssociation YUP ON (YUP.PimProductId = ZPAV1.PimProductId)
				 -- SKU
				 INNER JOIN ZnodePimAttributeValue ZPAV_SKU ON(YUP.PimProductId = ZPAV_SKU.PimProductId)
				 INNER JOIN ZnodePimAttributeValueLocale ZPAVL_SKU ON (ZPAVL_SKU.PimAttributeValueId = ZPAV_SKU.PimAttributeValueId)
				 LEFT  JOIN ZnodePimAttributeValue ZPAV12 ON (ZPAV12.PimProductId= YUP.PimProductId  AND ZPAV12.PimAttributeId = @PimMediaAttributeId ) 
				 LEFT JOIN ZnodePimProductAttributeMedia ZPAVM ON (ZPAVM.PimAttributeValueId= ZPAV12.PimAttributeValueId ) 
				 LEFT JOIN ZnodeMedia ZM ON (ZM.MediaId = ZPAVM.MediaId)
				 LEFT JOIN ZnodePimAttribute ZPA ON (ZPA.PimattributeId = ZPAV1.PimAttributeId)
				 WHERE (YUP.PimParentProductId  = UOP.PimProductId AND ZPAV1.pimAttributeId = UOP.PimAttributeId )
				 -- Active Variants
				 AND ZPAV.PimAttributeId = (SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'IsActive')
				 -- VariantSKU
				 AND ZPAV_SKU.PimAttributeId = (SELECT PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'SKU')
FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</SelectValues> </AttributeEntity></Attributes>' AttributeValue ,VersionId
FROM ZnodePimConfigureProductAttribute UOP 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = UOP.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = UOP.PimProductId)
WHERE  EXISTS (SELECT * FROM #PimProductAttributeXML b WHERE b.PimAttributeXMLId = c.PimAttributeXMLId)


INSERT INTO #Cte_GetData(PimProductId ,AttributeCode,AttributeValue,VersionId)
SELECT DISTINCT  ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+SUBSTRING((SELECT DISTINCT  ',' +ZPPG.MediaPath FROM ZnodePimProductAttributeMedia ZPPG
     INNER JOIN #TBL_AttributeVAlue FTRE ON (FTRE.PimProductId = ZPAV.PimProductId AND FTRE.PimAttributeId = ZPAV.PimAttributeId  AND FTRE.LocaleId  = CASE WHEN FTRE.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )
	 WHERE ZPPG.PimProductAttributeMediaId = FTRE.ZnodePimAttributeValueLocaleId
	 FOR XML PATH ('')
 ),2,4000)+'</AttributeValues></AttributeEntity></Attributes>' AttributeValue ,VersionId	 
FROM ZnodePimAttributeValue ZPAV 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeMedia ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
AND EXISTS (SELECT * FROM #PimProductAttributeXML b WHERE b.PimAttributeXMLId = c.PimAttributeXMLId)

insert into #Cte_GetData(PimProductId ,AttributeCode,AttributeValue,VersionId)
SELECT ZPLP.PimParentProductId ,c.AttributeCode, '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(SUBSTRING((SELECT DISTINCT ','+CAST(PublishProductId AS VARCHAR(50)) 
							 FROM #TBL_PublishCatalogId ZPPI 
							 INNER JOIN ZnodePimLinkProductDetail ZPLPI ON (ZPLPI.PimProductId = ZPPI.PimProductId)
							 WHERE ZPLPI.PimParentProductId = ZPLP.PimParentProductId
							 AND ZPLPI.PimAttributeId   = ZPLP.PimAttributeId
							 FOR XML PATH ('') ),2,4000),'')+'</AttributeValues></AttributeEntity></Attributes>'   AttributeValue ,ZPP.VersionId
							
FROM ZnodePimLinkProductDetail ZPLP  
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPLP.PimParentProductId)
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPLP.PimAttributeId )
WHERE EXISTS (SELECT * FROM #PimProductAttributeXML b WHERE b.PimAttributeXMLId = c.PimAttributeXMLId)
GROUP BY ZPLP.PimParentProductId , ZPP.PublishProductId  ,ZPLP.PimAttributeId,c.AttributeCode,c.AttributeXML,ZPP.PublishCatalogId,ZPP.VersionId



SELECT a.PimProductId ,CAST((SELECT ''+dbo.FN_trim(b.AttributeValue) FOR XML PATH(''))  AS NVARCHAR(max)) AttributeValue , b.LocaleId  ,a.PimAttributeId,c.AttributeCode ,b.ZnodePimAttributeValueLocaleId
INTO #View_LoadManageProductInternal
FROM ZnodePimAttributeValue a 
INNER JOIN  ZnodePimAttributeValueLocale b ON ( b.PimAttributeValueId = a.PimAttributeValueId )
INNER JOIN ZnodePimAttribute c ON ( c.PimAttributeId=a.PimAttributeId )
WHERE c.AttributeCode = 'SKU'

INSERT INTO #Cte_GetData(PimProductId ,AttributeCode,AttributeValue,VersionId)
SELECT ZPAV.PimProductId,'DefaultSkuForConfigurable' ,'<Attributes><AttributeEntity>'+REPLACE(REPLACE (c.AttributeXML,'ProductType','DefaultSkuForConfigurable'),'Product Type','Default Sku For Configurable')+'<AttributeValues>'+
 (SELECT TOP 1 AttributeValue FROM #View_LoadManageProductInternal ad 
 INNER JOIN ZnodePimProductTypeAssociation yt ON (yt.PimProductId = ad.PimProductId)
 WHERE Ad.AttributeCode = 'SKU'
 AND yt.PimParentProductId = ZPAV.PimProductId
 ORDER BY yt.DisplayOrder , yt.PimProductTypeAssociationId ASC)
+'</AttributeValues></AttributeEntity></Attributes>' AttributeValue ,ZPP.VersionId
FROM ZnodePimAttributeValue ZPAV  
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL 
INNER JOIN ZnodePimAttributeDefaultValue dr ON (dr.PimAttributeDefaultValueId = ZPADVL.PimAttributeDefaultValueId)
 WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId
 AND dr.AttributeDefaultValueCode= 'ConfigurableProduct' 
)
AND EXISTS (SELECT * FROM #PimProductAttributeXML b WHERE b.PimAttributeXMLId = c.PimAttributeXMLId)
AND c.AttributeCode = 'ProductType' 


---------brand details 
CREATE TABLE #Cte_BrandData (PimProductId INT,BrandXML NVARCHAR(max))

INSERT INTO #Cte_BrandData ( PimProductId, BrandXML )
SELECT  DISTINCT ZBP.PimProductId,'<Brands><BrandEntity><BrandId>'+CAST(ZBD.BrandId AS VARCHAR(50))+'</BrandId><BrandCode>'+ZBD.BrandCode+'</BrandCode><BrandName>'+ZBDL.BrandName+'</BrandName></BrandEntity></Brands>' as BrandXML					   		   
FROM [ZnodeBrandDetails] AS ZBD
INNER JOIN ZnodeBrandDetaillocale ZBDL ON ZBD.BrandId = ZBDL.BrandId
INNER JOIN [ZnodeBrandProduct] AS ZBP ON ZBD.BrandId = ZBP.BrandId

--  --CREATE INDEX IND_Znode

  DELETE tu FROM ZnodePublishedXml tu  WHERE 
  EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId TY WHERE TY.VersionId = tu.PublishCatalogLogId AND Tu.PublishedId = ty.PublishProductId  )
  AND IsProductXML = 1   AND LocaleId = @LocaleId 

  
--  --ALTER INDEX ALL ON ZnodePublishedXml  REBUILD WITH (FILLFACTOR = 80 ) 
  If (@PimCategoryHierarchyId <> 0 AND @PimCatalogId <> 0 )
  BEGIN
		
		--Collect index of other categorys
		IF OBJECT_ID('tempdb..#Index') IS NOT NULL
		BEGIN 
			DROP TABLE #Index
		END 
		CREATE TABLE #Index (RowIndex int ,PublishCategoryId int , PublishProductId  int )		
		INSERT INTO  #Index ( RowIndex ,PublishCategoryId , PublishProductId )
		SELECT CAST(ROW_NUMBER()Over(Partition BY ZPC.PublishProductId 
		Order BY ISNULL(ZPC.PublishCategoryId,'0') desc )   AS VARCHAR(100)),
		ZPC.PublishCategoryId , ZPC.PublishProductId
		FROM ZnodePublishCategoryProduct ZPC where ZPC.PublishCatalogId = @PublishCatalogId
	
	

		--Publish parent products with index number 
			INSERT INTO ZnodePublishedXml (PublishCatalogLogId,PublishedId,PublishedXML,IsProductXML,LocaleId
			,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PublishCategoryId)
			SELECT zpp.VersionId,zpp.PublishProductId,'<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'+CAST(ISNULL(ZPCP.PublishCategoryId,'')  AS VARCHAR(50))+'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKU>'+'<SKULower>'+CAST(ISNULL((SELECT ''+LOWER(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
			+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +'</IsParentProducts><CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000)) +'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
			+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
			FROM ZnodeProfileCatalog ZPFC 
			INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
			WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+
			'</TempProfileIds>
			<ProductIndex>'+ CAST(ISNULL(ZPCP.ProductIndex,1) AS VARCHAR(200))+
			'</ProductIndex>' +
			 
			Case When @IsAllowIndexing = 1 then 			
			+'<RetailPrice>'+ISNULL(CAST(RetailPrice  AS VARCHAr(500)),'')+'</RetailPrice>'
			+'<SalesPrice>'+ISNULL(CAST(SalesPrice AS VARCHAr(500)), '') +'</SalesPrice>'
			+'<CurrencyCode>'+ISNULL(CurrencyCode,'') +'</CurrencyCode>'
			+'<CultureCode>'+ISNULL(CultureCode,'') +'</CultureCode>'
			+'<CurrencySuffix>'+ISNULL(CurrencySuffix,'') +'</CurrencySuffix>'
			+'<SeoUrl>'+ISNULL(SEOUrl,'') +'</SeoUrl>'
			+'<SeoDescription>'+ISNULL(SEODescription,'') +'</SeoDescription>'
			+'<SeoKeywords>'+ISNULL(SEOKeywords,'') +'</SeoKeywords>'
			+'<SeoTitle>'+ISNULL(SEOTitle,'') +'</SeoTitle>'
			+'<ImageSmallPath>'+ISNULL(ImageSmallPath,'') +'</ImageSmallPath>'
			else '' End

			+'<IndexId>'
			+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId><IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
			'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
			ISNULL(STUFF(( SELECT '  '+ BrandXML  FROM #Cte_BrandData BD WHERE BD.PimProductId = ZPP.PimProductId   
			FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, ''),'')+
			STUFF(( SELECT '  '+ AttributeValue  FROM #Cte_GetData TY WHERE TY.PimProductId = ZPP.PimProductId AND TY.VersionId = ZPP.VersionId   
			FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>' xmlvalue,1,@LocaleId,@UserId , @GetDate , @UserId,@GetDate
			,ZPCP.PublishCategoryId
			FROM  #TBL_PublishCatalogId zpp
			INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
			INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
			LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
			LEFT JOIN ZnodePublishCategory ZPC ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId 
			AND ZPP.PublishCategoryId = ZPC.PublishCategoryId 
			)
			LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId AND  ZPCCF.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId
			)
			LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ISNULL(ZPCP.PublishCategoryId,0) AND ZPCD.LocaleId = @LocaleId )
			LEFT JOIN #ZnodePrice TBZP ON (TBZP.PublishProductId = ZPP.PublishProductId)
			LEFT JOIN #ProductSKU TBPS ON (TBPS.PublishProductId = ZPP.PublishProductId)
			LEFT JOIN #ProductImages TBPI ON (TBPI.PublishProductId = ZPP.PublishProductId)
			WHERE ZPPDFG.LocaleId = @LocaleId AND ZPP.LocaleId = @LocaleId AND  ZPC.PimCategoryId in (Select CategoryId from #TBL_CategoryCategoryHierarchyIds ) 
			and zpp.PublishCategoryId IS NOT NULL

		
	
	 --Publish only associate product 
	 INSERT INTO ZnodePublishedXml (PublishCatalogLogId,PublishedId,PublishedXML,IsProductXML,LocaleId
		,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PublishCategoryId)
		SELECT zpp.VersionId,zpp.PublishProductId,'<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'+CAST(ISNULL(ZPCP.PublishCategoryId,'')  AS VARCHAR(50))+'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKU>'+'<SKULower>'+CAST(ISNULL((SELECT ''+LOWER(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
		+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +'</IsParentProducts><CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000)) +'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
		+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
						FROM ZnodeProfileCatalog ZPFC 
						INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
						WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+
						'</TempProfileIds>
						 <ProductIndex>'+ CAST(ISNULL(ZPCP.ProductIndex,1) AS VARCHAr(200))+
						'</ProductIndex>'+
		
		Case When @IsAllowIndexing = 1 then 
		+'<RetailPrice>'+ISNULL(CAST(RetailPrice  AS VARCHAr(500)),'')+'</RetailPrice>'
		+'<SalesPrice>'+ISNULL(CAST(SalesPrice AS VARCHAr(500)), '') +'</SalesPrice>'
		+'<CurrencyCode>'+ISNULL(CurrencyCode,'') +'</CurrencyCode>'
		+'<CultureCode>'+ISNULL(CultureCode,'') +'</CultureCode>'
		+'<CurrencySuffix>'+ISNULL(CurrencySuffix,'') +'</CurrencySuffix>'
		+'<SeoUrl>'+ISNULL(SEOUrl,'') +'</SeoUrl>'
		+'<SeoDescription>'+ISNULL(SEODescription,'') +'</SeoDescription>'
		+'<SeoKeywords>'+ISNULL(SEOKeywords,'') +'</SeoKeywords>'
		+'<SeoTitle>'+ISNULL(SEOTitle,'') +'</SeoTitle>'
		+'<ImageSmallPath>'+ISNULL(ImageSmallPath,'') +'</ImageSmallPath>'
		else '' End

		+'<IndexId>'
		+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId><IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
		'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
		STUFF(( SELECT '  '+ AttributeValue  FROM #Cte_GetData TY WHERE TY.PimProductId = ZPP.PimProductId   AND TY.VersionId= ZPP.VersionId
		FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>' xmlvalue,1,@LocaleId,@UserId , @GetDate , @UserId,@GetDate
		,ZPCP.PublishCategoryId
		FROM  #TBL_PublishCatalogId zpp
		INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
		INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
		LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT JOIN ZnodePublishCategory ZPC ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId 
		AND ZPP.PublishCategoryId = ZPC.PublishCategoryId )
		AND ZPC.PimCategoryId in (Select CategoryId from #TBL_CategoryCategoryHierarchyIds )
		LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId AND  ZPCCF.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId
		AND ZPCCF.PimCategoryId in (Select CategoryId from #TBL_CategoryCategoryHierarchyIds ))
		LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ISNULL(ZPCP.PublishCategoryId,0) AND ZPCD.LocaleId = @LocaleId )
		LEFT JOIN #ZnodePrice TBZP ON (TBZP.PublishProductId = ZPP.PublishProductId)
		LEFT JOIN #ProductSKU TBPS ON (TBPS.PublishProductId = ZPP.PublishProductId)
		LEFT JOIN #ProductImages TBPI ON (TBPI.PublishProductId = ZPP.PublishProductId)

		WHERE ZPPDFG.LocaleId = @LocaleId AND ZPP.LocaleId = @LocaleId AND zpp.PublishCategoryId IS NULL
		
  END
  ELSE
  BEGIN

      INSERT INTO ZnodePublishedXml (PublishCatalogLogId
		,PublishedId
		,PublishedXML
		,IsProductXML
		,LocaleId
		,CreatedBy
		,CreatedDate
		,ModifiedBy
		,ModifiedDate
		,PublishCategoryId)
		SELECT zpp.VersionId,zpp.PublishProductId, '<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'+CAST(ISNULL(ZPCP.PublishCategoryId,'')  AS VARCHAR(50))+'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKU>'+'<SKULower>'+CAST(ISNULL((SELECT ''+LOWER(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
		+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +'</IsParentProducts><CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000)) +'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
		
		+Case When @IsAllowIndexing = 1 then 	
		+'<RetailPrice>'+ISNULL(CAST(RetailPrice  AS VARCHAr(500)),'')+'</RetailPrice>'
		+'<SalesPrice>'+ISNULL(CAST(SalesPrice AS VARCHAr(500)), '') +'</SalesPrice>'
		+'<CurrencyCode>'+ISNULL(CurrencyCode,'') +'</CurrencyCode>'
		+'<CultureCode>'+ISNULL(CultureCode,'') +'</CultureCode>'
		+'<CurrencySuffix>'+ISNULL(CurrencySuffix,'') +'</CurrencySuffix>'
		+'<SeoUrl>'+ISNULL(SEOUrl,'') +'</SeoUrl>'
		+'<SeoDescription>'+ISNULL((SELECT ''+SEODescription FOR XML PATH('') ),'') +'</SeoDescription>'
		+'<SeoKeywords>'+ISNULL((SELECT ''+SEOKeywords FOR XML PATH('')),'') +'</SeoKeywords>'
		+'<SeoTitle>'+ISNULL((SELECT ''+SEOTitle FOR XML PATH('')),'') +'</SeoTitle>'
		+'<ImageSmallPath>'+ISNULL(ImageSmallPath,'') +'</ImageSmallPath>'
		else '' End

		+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
						FROM ZnodeProfileCatalog ZPFC 
						INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
						WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+'</TempProfileIds><ProductIndex>'+CAST(ROW_NUMBER()Over(Partition BY zpp.PublishProductId Order BY ISNULL(ZPC.PublishCategoryId,'0') ) AS VARCHAr(100))+'</ProductIndex><IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
		'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
		STUFF(( SELECT '  '+ AttributeValue  FROM #Cte_GetData TY WHERE TY.PimProductId = ZPP.PimProductId   AND TY.VersionId = ZPP.VersionId
		FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>'  xmlvalue,1,@LocaleId,@UserId , @GetDate , @UserId,@GetDate
		,ZPCP.PublishCategoryId
		
		FROM  #TBL_PublishCatalogId zpp
		INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
		INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
		LEFT JOIN #ZnodePrice TBZP ON (TBZP.PublishProductId = ZPP.PublishProductId)
		LEFT JOIN #ProductSKU TBPS ON (TBPS.PublishProductId = ZPP.PublishProductId)
		LEFT JOIN #ProductImages TBPI ON (TBPI.PublishProductId = ZPP.PublishProductId)
		LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT JOIN ZnodePublishCategory ZPC ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId )
		LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId AND  ZPCCF.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId)
		LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ISNULL(ZPCP.PublishCategoryId,0) AND ZPCD.LocaleId = @LocaleId )
		WHERE ZPPDFG.LocaleId = @LocaleId AND ZPP.LocaleId = @LocaleId
		ORDER BY zpp.PublishProductId ASC 

      
END 
 

DELETE FROM #TBL_CustomeFiled
DELETE FROM #PimDefaultValueLocale
 IF OBJECT_ID('tempdb..#PimProductAttributeXML') is not null
 BEGIN 
 DELETE FROM #PimProductAttributeXML
 END
 IF OBJECT_ID('tempdb..#Cte_GetData') is not null
 BEGIN 
 DROP TABLE #Cte_GetData
 END
   IF OBJECT_ID('tempdb..#Cte_BrandData') is not null
 BEGIN 
 DROP TABLE #Cte_BrandData
 END
  IF OBJECT_ID('tempdb..#TBL_AttributeVAlue') is not null
 BEGIN 
 DROP TABLE #TBL_AttributeVAlue
 END
 IF OBJECT_ID('tempdb..#View_LoadManageProductInternal') is not null
 BEGIN 
 DROP TABLE #View_LoadManageProductInternal
 END
 IF OBJECT_ID('tempdb..#TBL_CustomeFiled') is not null
 BEGIN 
 DROP TABLE #TBL_CustomeFiled
 END
SET @Counter = @counter + 1 
END 
END TRY 
BEGIN CATCH 

 SELECT ERROR_MESSAGE()
 UPDATE ZnodePublishCatalogLog 
	    SET IsCatalogPublished = 0 
		,IsCategoryPublished = 0,IsProductPublished= 0  
		WHERE EXISTS (SELECT TOP 1 1 from #TBL_PublishCatalogId TR WHERE TR.VersionId = ZnodePublishCatalogLog.PublishCatalogLogId)
END CATCH 
END

GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishSingleProduct')
BEGIN 
DROP PROCEDURE Znode_GetPublishSingleProduct
END
GO

CREATE PROCEDURE [dbo].[Znode_GetPublishSingleProduct]
(
@PublishCatalogId INT = 0 
,@VersionId       VARCHAR(50) = 0 
,@PimProductId    TransferId Readonly 
,@UserId		  INT = 0 
,@TokenId nvarchar(max)= ''	
,@LocaleIds TransferId READONLY
,@PublishStateId INT = 0  
)
AS


--Declare @PimProductId TransferId 
--insert into @PimProductId  select 128 
-- EXEC [Znode_GetPublishSingleProduct]  @PublishCatalogId = 0 ,@VersionId= 0 ,@PimProductId =@PimProductId, @UserId=2 

BEGIN 
 
 SET NOCOUNT ON 

EXEC Znode_InsertUpdatePimAttributeXML 1 
EXEC Znode_InsertUpdateCustomeFieldXML 1
EXEC Znode_InsertUpdateAttributeDefaultValue 1 

 IF OBJECT_ID('tempdb..#Cte_BrandData') is not null
 BEGIN 
	DROP TABLE #Cte_BrandData
 END 

--DECLARE @PimProductAttributeXML TABLE(PimAttributeXMLId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )
CREATE TABLE #PimProductAttributeXML (PimAttributeXMLId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )
DECLARE @PimDefaultValueLocale  TABLE (PimAttributeDefaultXMLId INT  PRIMARY KEY ,PimAttributeDefaultValueId INT ,LocaleId INT ) 
DECLARE @ProductNamePimAttributeId INT = dbo.Fn_GetProductNameAttributeId(),@DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId(),@LocaleId INT = 0 
		,@SkuPimAttributeId  INT =  dbo.Fn_GetProductSKUAttributeId() , @IsActivePimAttributeId INT =  dbo.Fn_GetProductIsActiveAttributeId()
DECLARE @GetDate DATETIME =dbo.Fn_GetDate()
DECLARE @TBL_LocaleId  TABLE (RowId INT IDENTITY(1,1) PRIMARY KEY  , LocaleId INT )

DECLARE @DomainUrl varchar(max) = (select TOp 1 URL FROM ZnodeMediaConfiguration WHERE IsActive =1)
 
 
			INSERT INTO @TBL_LocaleId (LocaleId)
			SELECT  LocaleId
			FROM ZnodeLocale MT
			WHERE IsActive = 1
			AND (EXISTS (SELECT TOP 1 1  FROM @LocaleIds RT WHERE RT.Id = MT.LocaleId )
			OR NOT EXISTS (SELECT TOP 1 1 FROM @LocaleIds )) 


DECLARE @Counter INT =1 ,@maxCountId INT = (SELECT max(RowId) FROM @TBL_LocaleId ) 

 CREATE TABLE #TBL_PublishCatalogId (PublishCatalogId INT,PublishProductId INT,PimProductId  INT   , VersionId INT ,LocaleId INT, PriceListId INT , PortalId INT ,MaxSmallWidth NVARCHAr(max)  )
CREATE INDEX idx_#TBL_PublishCatalogIdPimProductId on #TBL_PublishCatalogId(PimProductId)
CREATE INDEX idx_#TBL_PublishCatalogIdPimPublishCatalogId on #TBL_PublishCatalogId(PublishCatalogId)
			
			INSERT INTO #TBL_PublishCatalogId 
			 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId, MAX(PublishCatalogLogId) ,LocaleId ,
			 (SELECT TOP 1 PriceListId FROM ZnodePriceListPortal NT 
			 INNER JOIN ZnodePimCatalog ZPC on ZPC.PortalId=NT.PortalId  
			 ORDER BY NT.Precedence ASC ) ,TY.PortalId
							, (SELECT TOP 1  MAX(MaxSmallWidth) FROM ZnodePortalDisplaySetting TYR WHERE TYR.PortalId = TY.PortalId)
			 FROM ZnodePublishProduct ZPP 
			 INNER JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
			 LEFT JOIN ZnodePortalCatalog TY ON (TY.PublishCatalogId = ZPP.PublishCatalogId)
			 WHERE (EXISTS (SELECT TOP 1 1 FROM @PimProductId SP WHERE SP.Id = ZPP.PimProductId  AND  (@PublishCatalogId IS NULL OR @PublishCatalogId = 0 ))
			 OR  (ZPP.PublishCatalogId = @PublishCatalogId ))
			 AND IsCatalogPublished =1
			 AND ZPCP.PublishStateId = @PublishStateId 
			 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,LocaleId,TY.PortalId


		
             DECLARE   @TBL_ZnodeTempPublish TABLE (PimProductId INT , AttributeCode VARCHAR(300) ,AttributeValue NVARCHAR(max) ) 			
			 DECLARE @TBL_AttributeVAlueLocale TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT,LocaleId INT ,AttributeValue Nvarchar(1000) )

			 INSERT INTO @TBL_AttributeVAlueLocale (PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId ,LocaleId ,AttributeValue )
			 SELECT VIR.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId,VIR.LocaleId, ''
			 FROM View_LoadManageProductInternal VIR
			 INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = VIR.PimProductId)
			 UNION ALL 
			 SELECT VIR.PimProductId,PimAttributeId,PimProductAttributeMediaId,ZPDE.LocaleId , ''
			 FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimProductAttributeMedia ZPDE ON (ZPDE.PimAttributeValueId = VIR.PimAttributeValueId )
			 WHERE EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
			 Union All 
			 SELECT VIR.PimProductId,VIR.PimAttributeId,ZPDVL.PimAttributeDefaultValueLocaleId,ZPDVL.LocaleId ,ZPDVL.AttributeDefaultValue
			   FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1 )
			 INNER JOIN ZnodePimAttributeDefaultValue ZPADV ON ZPADV.PimAttributeId = D.PimAttributeId
			 INNER JOIN ZnodePimAttributeDefaultValueLocale ZPDVL   on (ZPADV.PimAttributeDefaultValueId = ZPDVL.PimAttributeDefaultValueId)
			 --INNER JOIN ZnodePimProductAttributeDefaultValue ZPDVP ON (ZPDVP.PimAttributeValueId = VIR.PimAttributeValueId AND ZPADV.PimAttributeDefaultValueId = ZPDVP.PimAttributeDefaultValueId )
			 WHERE ( ZPDVL.LocaleId = @DefaultLocaleId OR ZPDVL.LocaleId = @LocaleId )
			 AND EXISTS(SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
			 Union All 
			 SELECT VIR.PimProductId,VIR.PimAttributeId,'','' ,''
			 FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1 )
			 WHERE  EXISTS(SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )

		
				--insert INTO #ZnodePrice
				SELECT RetailPrice,SalesPrice,ZC.CurrencyCode,ZCC.CultureCode ,ZCC.Symbol CurrencySuffix,TYU.PublishProductId ,isnull(ZPC1.IsAllowIndexing,0) as IsAllowIndexing
				into #ZnodePrice
				FROM ZnodePrice ZP 
				INNER JOIN ZnodePriceList ZPL ON (ZPL.PriceListId = ZP.PriceListId)
				INNER JOIN ZnodeCurrency ZC oN (ZC.CurrencyId = ZPL.CurrencyId )
				INNER JOIN ZnodeCulture ZCC ON (ZCC.CultureId = ZPL.CultureId)
				INNER JOIN ZnodePublishProductDetail TY ON (TY.SKU = ZP.SKU ) 
				INNER JOIN ZnodePublishProduct TYU ON (TYU.PublishProductId = TY.PublishProductId)
				INNER JOIN ZnodePublishCatalog ZPC ON (TYU.PublishCatalogId = ZPC.PublishCatalogId)
				INNER JOIN ZnodePimCatalog ZPC1 ON (ZPC.PimCatalogId = ZPC1.PimCatalogId)
				WHERE EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId TYUR WHERE TYUR.PriceListId = ZPL.PriceListId AND TYUR.PublishCatalogId = TYU.PublishCatalogId
				AND TYU.PublishProductId = TYUR.PublishProductId)
				AND TY.LocaleId = dbo.Fn_GetDefaultLocaleId()
				AND EXISTS (SELECT TOP 1 1 FROM ZnodePriceListPortal ZPLP 
				INNER JOIN ZnodePimCatalog ZPC on ZPC.PortalId=ZPLP.PortalId WHERE ZPLP.PriceListId=ZP.PriceListId )
				
				--insert INTO #ProductSKU
				SELECT ZCSD.SEOUrl , ZCDL.SEODescription,ZCDL.SEOKeywords ,ZCDL.SEOTitle, TYU.PublishProductId ,isnull(ZPC1.IsAllowIndexing,0) as IsAllowIndexing
				INTO #ProductSKU
				FROM ZnodeCMSSEODetail ZCSD 
				INNER JOIN ZnodeCMSSEODetailLocale ZCDL ON (ZCDL.CMSSEODetailId = ZCSD.CMSSEODetailId)
				INNER JOIN ZnodePublishProductDetail TY ON (TY.SKU = ZCSD.SEOCode AND ZCDL.LocaleId = TY.LocaleId) 
				INNER JOIN ZnodePublishProduct TYU ON (TYU.PublishProductId = TY.PublishProductId)
				INNER JOIN ZnodePublishCatalog ZPC ON (TYU.PublishCatalogId = ZPC.PublishCatalogId)
				INNER JOIN ZnodePimCatalog ZPC1 ON (ZPC.PimCatalogId = ZPC1.PimCatalogId)
				WHERE CMSSEOTypeId = (SELECT TOP 1 CMSSEOTypeId FROM ZnodeCMSSEOType WHERE Name = 'Product') 
				AND EXISTS (SELECT TOP 1 1  FROM #TBL_PublishCatalogId TYUR WHERE  TYUR.PublishCatalogId = TYU.PublishCatalogId
				AND TYU.PublishProductId = TYUR.PublishProductId)
				AND ZCDL.LocaleId = dbo.Fn_GetDefaultLocaleId()
				and ZCSD.PortalId = isnull(ZPC1.PortalId,0)

				--insert INTO #ProductImages
				SELECT  TUI.PublishCatalogId, TYU.PublishProductId , @DomainUrl +'Catalog/'  + CAST(Max(ZPC1.PortalId) AS VARCHAr(100)) + '/'+ CAST(Isnull(Max(TUI.MaxSmallWidth),'') AS VARCHAR(100)) + '/' + Isnull(RT.MediaPath,'') AS ImageSmallPath    
				,isnull(ZPC1.IsAllowIndexing,0) as IsAllowIndexing
				INTO #ProductImages
				FROM ZnodePimAttributeValue ZPAV 
				INNER JOIN ZnodePublishProduct TYU ON (TYU.PimProductId  = ZPAV.PimProductId)
				INNER JOIN ZnodePimProductAttributeMedia  RT ON ( RT.PimAttributeValueId = ZPAV.PimAttributeValueId )
				--AND 
				--EXISTS (SELECT TOP 1 1  FROM #TBL_PublishCatalogId TUI WHERE  TUI.PublishProductId = TYU.PublishProductId AND TUI.PublishCatalogId = TYU.PublishCatalogId)
				INNER JOIN #TBL_PublishCatalogId TUI ON (TUI.PublishProductId = TYU.PublishProductId AND TUI.PublishCatalogId = TYU.PublishCatalogId
						AND  TUI.LocaleId = dbo.Fn_GetDefaultLocaleId() )
				INNER JOIN ZnodePublishCatalog ZPC ON (TYU.PublishCatalogId = ZPC.PublishCatalogId)
				INNER JOIN ZnodePimCatalog ZPC1 ON (ZPC.PimCatalogId = ZPC1.PimCatalogId)
				WHERE  RT.LocaleId = dbo.Fn_GetDefaultLocaleId()
				AND ZPAV.PimAttributeId = (SELECT TOp 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'ProductImage')
				group by TUI.PublishCatalogId, TYU.PublishProductId ,isnull(RT.MediaPath,''),isnull(ZPC1.IsAllowIndexing,0) 
		  -- end
		    
WHILE @Counter <= @maxCountId
BEGIN
 SET @LocaleId = (SELECT TOP 1 LocaleId FROM @TBL_LocaleId WHERE RowId = @Counter)
 
  INSERT INTO #PimProductAttributeXML 
  SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeXML
  WHERE LocaleId = @LocaleId

  INSERT INTO #PimProductAttributeXML 
  SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeXML ZPAX
  WHERE ZPAX.LocaleId = @DefaultLocaleId  
  AND NOT EXISTS (SELECT TOP 1 1 FROM #PimProductAttributeXML ZPAXI WHERE ZPAXI.PimAttributeId = ZPAX.PimAttributeId )

  INSERT INTO @PimDefaultValueLocale
  SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultXML
  WHERE localeId = @LocaleId

  INSERT INTO @PimDefaultValueLocale 
   SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultXML ZX
  WHERE localeId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM @PimDefaultValueLocale TRTR WHERE TRTR.PimAttributeDefaultValueId = ZX.PimAttributeDefaultValueId)
  
 
  --DECLARE @TBL_AttributeVAlue TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT  )
  --DECLARE @TBL_CustomeFiled TABLE (PimCustomeFieldXMLId INT ,CustomCode VARCHAR(300),PimProductId INT ,LocaleId INT )
  CREATE TABLE #TBL_CustomeFiled  (PimCustomeFieldXMLId INT ,CustomCode VARCHAR(300),PimProductId INT ,LocaleId INT )
  CREATE TABLE #TBL_AttributeVAlue (PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT  )



  INSERT INTO #TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,RTR.PimProductId ,RTR.LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML RTR 
  INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = RTR.PimProductId)
  WHERE RTR.LocaleId = @LocaleId
 

  INSERT INTO #TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,ITR.PimProductId ,ITR.LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML ITR
  INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ITR.PimProductId)
  WHERE ITR.LocaleId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM #TBL_CustomeFiled TBL  WHERE ITR.CustomCode = TBL.CustomCode AND ITR.PimProductId = TBL.PimProductId)
  

    INSERT INTO #TBL_AttributeVAlue (PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId )
    SELECT PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId
	FROM @TBL_AttributeVAlueLocale
    WHERE LocaleId = @LocaleId

    
	INSERT INTO #TBL_AttributeVAlue(PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId )
	SELECT VI.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId
	FROM @TBL_AttributeVAlueLocale VI 
    WHERE VI.LocaleId = @DefaultLocaleId 
	AND NOT EXISTS (SELECT TOP 1 1 FROM #TBL_AttributeVAlue  CTE WHERE CTE.PimProductId = VI.PimProductId AND CTE.PimAttributeId = VI.PimAttributeId )
 
INSERT INTO @TBL_ZnodeTempPublish  
SELECT  a.PimProductId,a.AttributeCode , '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(a.AttributeValue,'')+'</AttributeValues> </AttributeEntity>  </Attributes>'  AttributeValue
FROM View_LoadManageProductInternal a 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = a.PimAttributeId )
INNER JOIN #PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
INNER JOIN #TBL_AttributeVAlue CTE ON (Cte.PimAttributeId = a.PimAttributeId AND Cte.ZnodePimAttributeValueLocaleId = a.ZnodePimAttributeValueLocaleId)
UNION ALL 
SELECT  a.PimProductId,c.AttributeCode , '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+TAVL.AttributeValue+'</AttributeValues> </AttributeEntity>  </Attributes>'  AttributeValue
FROM ZnodePimAttributeValue  a 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = a.PimAttributeId )
INNER JOIN #PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
INNER JOIN ZnodePImAttribute ZPA  ON (ZPA.PimAttributeId = a.PimAttributeId)
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = a.PimProductId)
Inner JOIN @TBL_AttributeVAlueLocale TAVL ON  (c.PimAttributeId = TAVL.PimAttributeId  and ZPP.PimProductId = TAVL.PimProductId )
WHERE ZPA.IsPersonalizable = 1 
AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodePimAttributeValueLocale q WHERE q.PimAttributeValueId = a.PimAttributeValueId) 



UNION ALL 
SELECT THB.PimProductId,THB.CustomCode,'<Attributes><AttributeEntity>'+CustomeFiledXML +'</AttributeEntity></Attributes>' 
FROM ZnodePimCustomeFieldXML THB 
INNER JOIN #TBL_CustomeFiled TRTE ON (TRTE.PimCustomeFieldXMLId = THB.PimCustomeFieldXMLId)
UNION ALL 
SELECT ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues></AttributeValues>'+'<SelectValues>'+
			   STUFF((
                    SELECT '  '+ DefaultValueXML  FROM ZnodePimAttributeDefaultXML AA 
				 INNER JOIN @PimDefaultValueLocale GH ON (GH.PimAttributeDefaultXMLId = AA.PimAttributeDefaultXMLId)
				 INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId )
				 WHERE (ZPADV.PimAttributeValueId = ZPAV.PimAttributeValueId)
    FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</SelectValues> </AttributeEntity></Attributes>' AttributeValue
 
FROM ZnodePimAttributeValue ZPAV  With (NoLock)
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
UNION ALL 
SELECT DISTINCT  ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+SUBSTRING((SELECT DISTINCT ',' +MediaPath 
	FROM ZnodePimProductAttributeMedia ZPPG
	INNER JOIN  #TBL_AttributeVAlue TBLV ON (TBLV.PimProductId=  ZPAV.PimProductId AND TBLV.PimAttributeId = ZPAV.PimAttributeId )
    WHERE ZPPG.PimProductAttributeMediaId = TBLV.ZnodePimAttributeValueLocaleId
	FOR XML PATH ('')
 ),2,4000)+'</AttributeValues></AttributeEntity></Attributes>' AttributeValue
 	 
FROM ZnodePimAttributeValue ZPAV 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeMedia ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
UNION ALL 
SELECT ZPLP.PimParentProductId ,c.AttributeCode, '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(SUBSTRING((SELECT ','+CAST(PublishProductId AS VARCHAR(50)) 
							 FROM ZnodePublishProduct ZPPI 
							 INNER JOIN ZnodePimLinkProductDetail ZPLPI ON (ZPLPI.PimProductId = ZPPI.PimProductId)
							 WHERE ZPLPI.PimParentProductId = ZPLP.PimParentProductId
							 AND ZPLPI.PimAttributeId   = ZPLP.PimAttributeId
							 AND ZPPI.PublishCatalogId = ZPP.PublishCatalogId
							 FOR XML PATH ('') ),2,4000),'')+'</AttributeValues></AttributeEntity></Attributes>'   AttributeValue 
							
FROM ZnodePimLinkProductDetail ZPLP 
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPLP.PimParentProductId)
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPLP.PimAttributeId )
INNER JOIN #PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
GROUP BY ZPLP.PimParentProductId , ZPP.PublishProductId  ,ZPLP.PimAttributeId,c.AttributeCode,c.AttributeXML,ZPP.PublishCatalogId

UNION ALL 
SELECT ZPAV.PimProductId,'DefaultSkuForConfigurable' ,'<Attributes><AttributeEntity>'+REPLACE(REPLACE (c.AttributeXML,'ProductType','DefaultSkuForConfigurable'),'Product Type','Default Sku For Configurable')+'<AttributeValues>'+
 (SELECT TOP 1 AttributeValue FROM View_LoadManageProductInternal ad 
 INNER JOIN ZnodePimProductTypeAssociation yt ON (yt.PimProductId = ad.PimProductId)
 WHERE Ad.AttributeCode = 'SKU'
 AND yt.PimParentProductId = ZPAV.PimProductId
ORDER BY yt.DisplayOrder , yt.PimProductTypeAssociationId ASC)
+'</AttributeValues></AttributeEntity></Attributes>' AttributeValue 
FROM ZnodePimAttributeValue ZPAV  
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL 
INNER JOIN ZnodePimAttributeDefaultValue dr ON (dr.PimAttributeDefaultValueId = ZPADVL.PimAttributeDefaultValueId)
 WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId
 AND dr.AttributeDefaultValueCode= 'ConfigurableProduct' 
)
AND EXISTS (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)
AND c.AttributeCode = 'ProductType' 

---------brand details 
CREATE TABLE #Cte_BrandData (PimProductId int,BrandXML nvarchar(max))

INSERT INTO #Cte_BrandData ( PimProductId, BrandXML )
SELECT  DISTINCT ZBP.PimProductId,'<Brands><BrandEntity><BrandId>'+CAST(ZBD.BrandId AS VARCHAR(50))+'</BrandId><BrandCode>'+ZBD.BrandCode+'</BrandCode><BrandName>'+ZBDL.BrandName+'</BrandName></BrandEntity></Brands>' as BrandXML					   		   
FROM [ZnodeBrandDetails] AS ZBD
INNER JOIN ZnodeBrandDetaillocale ZBDL ON ZBD.BrandId = ZBDL.BrandId
INNER JOIN [ZnodeBrandProduct] AS ZBP ON ZBD.BrandId = ZBP.BrandId

 DELETE FROM ZnodePublishedXML WHERE  IsProductXML = 1  AND LocaleId = @localeId 
								AND  EXISTS ( SELECT TOP 1 1 FROM  #TBL_PublishCatalogId  TBL WHERE TBL.VersionId  = ZnodePublishedXML.PublishCatalogLogId AND TBL.PublishProductId = ZnodePublishedXML.PublishedId)


;WITH CTE AS
(
SELECT ROW_NUMBER() OVER (PARTITION BY PimProductId	,AttributeCode
ORDER BY PimProductId	,AttributeCode) AS RN
FROM @TBL_ZnodeTempPublish
)

DELETE FROM CTE WHERE RN<>1

  --select *  delete  from ZnodePublishedXML
 MERGE INTO ZnodePublishedXML TARGET 
 USING (
 SELECT distinct zpp.PublishProductId,zpp.VersionId ,
'<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+
CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'
+CAST(ISNULL(ZPC.PublishCategoryId,'')  AS VARCHAR(50))+
'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+
'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+
'</SKU><SKULower>'+CAST(ISNULL((SELECT ''+Lower(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ 
'</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +
'</IsParentProducts>'+
Case When TBPS.IsAllowIndexing = 1 then
+'<RetailPrice>'+ISNULL(CAST(RetailPrice  AS VARCHAr(500)),'')+'</RetailPrice>'
+'<SalesPrice>'+ISNULL(CAST(SalesPrice AS VARCHAr(500)), '') +'</SalesPrice>'
+'<CurrencyCode>'+ISNULL(CurrencyCode,'') +'</CurrencyCode>'
+'<CultureCode>'+ISNULL(CultureCode,'') +'</CultureCode>'
+'<CurrencySuffix>'+ISNULL(CurrencySuffix,'') +'</CurrencySuffix>'
+'<SeoUrl>'+ISNULL(SEOUrl,'') +'</SeoUrl>'
+'<SeoDescription>'+ISNULL(SEODescription,'') +'</SeoDescription>'
+'<SeoKeywords>'+ISNULL(SEOKeywords,'') +'</SeoKeywords>'
+'<SeoTitle>'+ISNULL(SEOTitle,'') +'</SeoTitle>'
+'<ImageSmallPath>'+ISNULL(ImageSmallPath,'') +'</ImageSmallPath>'
else '' end
+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
FROM ZnodeProfileCatalog ZPFC 
INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+'</TempProfileIds><ProductIndex>'+CAST(ISNULL(ZPCP.ProductIndex,1)  AS VARCHAr(100))+'</ProductIndex><IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
+'<CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000))+
'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+
'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
+'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
ISNULL(STUFF(( SELECT '  '+ BrandXML  FROM #Cte_BrandData BD WHERE BD.PimProductId = ZPP.PimProductId   
				FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, ''),'')+
STUFF(( SELECT '  '+ AttributeValue  FROM @TBL_ZnodeTempPublish TY WHERE TY.PimProductId = ZPP.PimProductId   
	FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>' xmlvalue
	FROM  #TBL_PublishCatalogId zpp
	INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
	INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)

	LEFT JOIN #ZnodePrice TBZP ON (TBZP.PublishProductId = ZPP.PublishProductId)
	LEFT JOIN #ProductSKU TBPS ON (TBPS.PublishProductId = ZPP.PublishProductId)
	LEFT JOIN #ProductImages TBPI ON (TBPI.PublishProductId = ZPP.PublishProductId  )
	LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
	LEFT JOIN ZnodePublishCategory ZPC ON (ZPC.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId)
	LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId AND  ZPCCF.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId)
	LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ZPCP.PublishCategoryId AND ZPCD.LocaleId = @LocaleId )
	WHERE ZPPDFG.LocaleId = @LocaleId
	AND zpp.LocaleId = @LocaleId
	) SOURCE 
	ON (
     TARGET.PublishCatalogLogId = SOURCE.versionId 
	 AND TARGET.PublishedId = SOURCE.PublishProductId
	 AND TARGET.IsProductXML = 1 
	 AND TARGET.LocaleId = @localeId 
)
WHEN MATCHED THEN 
UPDATE 
SET  PublishedXML = xmlvalue
   , ModifiedBy = @userId 
   ,ModifiedDate = @GetDate
   ,ImportedGuId = @TokenId 
WHEN NOT MATCHED THEN 
INSERT (PublishCatalogLogId
,PublishedId
,PublishedXML
,IsProductXML
,LocaleId
,CreatedBy
,CreatedDate
,ModifiedBy
,ModifiedDate,ImportedGuId)

VALUES (SOURCE.versionid , Source.publishProductid,Source.xmlvalue,1,@localeid,@userId,@getDate,@userId,@getDate,@TokenId);

--select * from ZnodePublishCatalogLog where PublishCatalogLogId in (1702,1701)
DELETE FROM @TBL_ZnodeTempPublish
IF OBJECT_ID('tempdb..#PimProductAttributeXML') is not null
 BEGIN 
	DELETE FROM #PimProductAttributeXML
 END
 IF OBJECT_ID('tempdb..#TBL_CustomeFiled') is not null
 BEGIN 
 DROP TABLE #TBL_CustomeFiled
 END
 IF OBJECT_ID('tempdb..#TBL_AttributeVAlue') is not null
 BEGIN 
 DROP TABLE #TBL_AttributeVAlue
 END
 
DELETE FROM @PimDefaultValueLocale


 IF OBJECT_ID('tempdb..#Cte_BrandData') is not null
 BEGIN 
  DROP TABLE #Cte_BrandData
 END 

SET @Counter = @counter + 1 
END

END

GO
Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Products','UpdateAddonDisplayOrder',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Products' and ActionName = 'UpdateAddonDisplayOrder')


insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy ,CreatedDate,	ModifiedBy, ModifiedDate )
select 
 (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products')	
    ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'UpdateAddonDisplayOrder') ,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
     (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products') and ActionId = 
     (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'UpdateAddonDisplayOrder'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy ,CreatedDate,	ModifiedBy, ModifiedDate )
select 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products'),
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'UpdateAddonDisplayOrder')	
,2,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products') and ActionId = 
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'UpdateAddonDisplayOrder'))

GO
Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 'PIM' ,'Catalog','EditCatalog',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Catalog' and ActionName = 'EditCatalog')


insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy ,CreatedDate,	ModifiedBy, ModifiedDate )
select 
 (select TOP 1 MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products')	
    ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Catalog' and ActionName= 'EditCatalog') ,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
     (select TOP 1 MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products') and ActionId = 
     (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Catalog' and ActionName= 'EditCatalog'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy ,CreatedDate,	ModifiedBy, ModifiedDate )
select 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products'),
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Catalog' and ActionName= 'EditCatalog')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products') and ActionId = 
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Catalog' and ActionName= 'EditCatalog'))

GO
Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 'PIM' ,'Catalog','GetSuggestions',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Catalog' and ActionName = 'GetSuggestions' AND AreaName ='PIM')


insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy ,CreatedDate,	ModifiedBy, ModifiedDate )
select 
 (select TOP 1 MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products')	
    ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Catalog' and ActionName= 'GetSuggestions' AND AreaName ='PIM') ,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
     (select TOP 1 MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products') and ActionId = 
     (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Catalog' and ActionName= 'GetSuggestions' AND AreaName ='PIM'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy ,CreatedDate,	ModifiedBy, ModifiedDate )
select 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products'),
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Catalog' and ActionName= 'GetSuggestions' AND AreaName ='PIM')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products') and ActionId = 
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Catalog' and ActionName= 'GetSuggestions' AND AreaName ='PIM'))

GO

INSERT INTO znodeglobalsetting (FeatureName,FeatureValues,FeatureSubValues,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT 'ClearLoadBalancerAPICacheIPs','False',NULL,2, GETDATE(),2 , GETDATE()
WHERE NOT EXISTS (SELECT TOP 1 1 FROM znodeglobalsetting WHERE FeatureName = 'ClearLoadBalancerAPICacheIPs')
GO

INSERT INTO znodeglobalsetting (FeatureName,FeatureValues,FeatureSubValues,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT 'ClearLoadBalancerWebStoreCacheIPs','False',NULL,2, GETDATE(),2 , GETDATE()
WHERE NOT EXISTS (SELECT TOP 1 1 FROM znodeglobalsetting WHERE FeatureName = 'ClearLoadBalancerWebStoreCacheIPs')
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetImportTemplateLogs')
BEGIN 
	DROP PROCEDURE Znode_GetImportTemplateLogs
END
GO
CREATE PROCEDURE [dbo].[Znode_GetImportTemplateLogs]
( @WhereClause NVARCHAR(max),
  @Rows        INT           = 100,
  @PageNo      INT           = 1,
  @Order_BY    VARCHAR(1000)  = '',
  @RowsCount   INT OUT)
AS
    /*
	
    Summary : Get Import Template Log details and errorlog associated to it
     Unit Testing 
	 begin tran
    DECLARE @RowsCount INT;
    EXEC Znode_GetImportTemplateLogs @WhereClause = '',@Rows = 1000,@PageNo = 1,@Order_BY = NULL,@RowsCount = @RowsCount OUT;
	rollback tran
   
    */
	 BEGIN
        BEGIN TRY
		SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
          SET NOCOUNT ON;
		     DECLARE @SQL NVARCHAR(MAX);
             DECLARE @TBL_ErrorLog TABLE(ImportHeadId INT, ImportName NVARCHAR(100),TemplateName VARCHAR(300) ,[Status] VARCHAR(50) ,ProcessStartedDate DATETIME ,ProcessCompletedDate DATETIME
										,ImportTemplateId INT,ImportProcessLogId INT ,RowId INT,CountNo  INT)

             SET @SQL = ' 
					   ;With Cte_ErrorLog AS (
						select zih.ImportHeadId, zih.NAME ImportName, zit.TemplateName TemplateName ,zipl.Status ,
						zipl.ProcessStartedDate,
						zipl.ProcessCompletedDate,zipl.ImportTemplateId ,zipl.ImportProcessLogId,zipl.Createdby
						from ZnodeImportHead zih inner join  ZnodeImportTemplate zit ON zih.ImportHeadId = zit.ImportHeadId  
						Inner join ZnodeImportProcessLog zipl on zit.ImportTemplateId = zipl.ImportTemplateId
						) 
						,Cte_ErrorlogFilter AS
						(

					   SELECT ImportHeadId,ImportName,TemplateName,Status,ProcessStartedDate,ProcessCompletedDate,ImportTemplateId
								,ImportProcessLogId,'+dbo.Fn_GetPagingRowId(@Order_BY,'ImportProcessLogId DESC')+', Count(*)Over() CountNo
					   FROM Cte_ErrorLog
					   WHERE 1 = 1 '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'
						) 
					   SELECT ImportHeadId, ImportName,TemplateName ,Status,ProcessStartedDate,ProcessCompletedDate,ImportTemplateId ,ImportProcessLogId,RowId,CountNo 
					   FROM Cte_ErrorlogFilter 
					   '+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)
	       
			 INSERT INTO @TBL_ErrorLog (ImportHeadId, ImportName,TemplateName ,[Status],ProcessStartedDate,ProcessCompletedDate,ImportTemplateId ,ImportProcessLogId,RowId,CountNo )
			 EXEC(@SQl)												
             SET @RowsCount = ISNULL((SELECT TOP 1 CountNo FROM @TBL_ErrorLog ), 0);

			 SELECT ImportHeadId, ImportName,TemplateName ,Status,ProcessStartedDate,ProcessCompletedDate,ImportTemplateId ,ImportProcessLogId
			 FROM @TBL_ErrorLog
           
         END TRY
         BEGIN CATCH
              DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetImportTemplateLogs @WhereClause = '''+ISNULL(@WhereClause,'''''')+''',@Rows='+ISNULL(CAST(@Rows AS
			VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetImportTemplateLogs',
				@ErrorInProcedure = 'Znode_GetImportTemplateLogs',
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;                   
         END CATCH;
     END;
GO

insert into ZnodeApplicationSetting (GroupName,ItemName,Setting,ViewOptions,FrontPageName,FrontObjectName,IsCompressed,OrderByFields,ItemNameWithoutCurrency,CreatedByName,ModifiedByName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 
'Table',	'ZnodeImersonationActivityLog',	'<?xml version="1.0" encoding="UTF-8"?>  <columns>     <column>        <id>1</id>        <name>ImpersonationLogId</name>        <headertext>Log Id</headertext>        <width>40</width>        <datatype>String</datatype>        <columntype>Int32</columntype>        <allowsorting>false</allowsorting>        <allowpaging>true</allowpaging>        <format />        <isvisible>n</isvisible>        <mustshow>n</mustshow>        <musthide>n</musthide>        <maxlength>0</maxlength>        <isallowsearch>n</isallowsearch>        <isconditional>n</isconditional>        <isallowlink>n</isallowlink>        <islinkactionurl />        <islinkparamfield />        <ischeckbox>y</ischeckbox>        <checkboxparamfield />        <iscontrol>n</iscontrol>        <controltype />        <controlparamfield />        <displaytext />        <editactionurl />        <editparamfield />        <deleteactionurl />        <deleteparamfield />        <viewactionurl />        <viewparamfield />        <imageactionurl />        <imageparamfield />        <manageactionurl />        <manageparamfield />        <copyactionurl />        <copyparamfield />        <xaxis>n</xaxis>        <yaxis>n</yaxis>        <isadvancesearch>y</isadvancesearch>        <Class />        <SearchControlType>--Select--</SearchControlType>        <SearchControlParameters />        <DbParamField />        <useMode>DataBase</useMode>        <IsGraph>n</IsGraph>        <allowdetailview>n</allowdetailview>     </column>     <column>        <id>2</id>        <name>StoreName</name>        <headertext>Store Name</headertext>        <width>80</width>        <datatype>String</datatype>        <columntype>String</columntype>        <allowsorting>true</allowsorting>        <allowpaging>true</allowpaging>        <format />        <isvisible>y</isvisible>        <mustshow>y</mustshow>        <musthide>n</musthide>        <maxlength>0</maxlength>        <isallowsearch>y</isallowsearch>        <isconditional>n</isconditional>        <isallowlink>n</isallowlink>        <islinkactionurl />        <islinkparamfield />        <ischeckbox>n</ischeckbox>        <checkboxparamfield />        <iscontrol>n</iscontrol>        <controltype />        <controlparamfield />        <displaytext />        <editactionurl />        <editparamfield />        <deleteactionurl />        <deleteparamfield />        <viewactionurl />        <viewparamfield />        <imageactionurl />        <imageparamfield />        <manageactionurl />        <manageparamfield />        <copyactionurl />        <copyparamfield />        <xaxis>n</xaxis>        <yaxis>n</yaxis>        <isadvancesearch>y</isadvancesearch>        <Class />        <SearchControlType>--Select--</SearchControlType>        <SearchControlParameters />        <DbParamField />        <useMode>DataBase</useMode>        <IsGraph>n</IsGraph>        <allowdetailview>n</allowdetailview>     </column>     <column>        <id>3</id>        <name>CSRName</name>        <headertext>Admin Full Name</headertext>        <width>80</width>        <datatype>String</datatype>        <columntype>String</columntype>        <allowsorting>true</allowsorting>        <allowpaging>true</allowpaging>        <format />        <isvisible>y</isvisible>        <mustshow>y</mustshow>        <musthide>n</musthide>        <maxlength>0</maxlength>        <isallowsearch>y</isallowsearch>        <isconditional>n</isconditional>        <isallowlink>n</isallowlink>        <islinkactionurl />        <islinkparamfield />        <ischeckbox>n</ischeckbox>        <checkboxparamfield />        <iscontrol>n</iscontrol>        <controltype />        <controlparamfield />        <displaytext />        <editactionurl />        <editparamfield />        <deleteactionurl />        <deleteparamfield />        <viewactionurl />        <viewparamfield />        <imageactionurl />        <imageparamfield />        <manageactionurl />        <manageparamfield />        <copyactionurl />        <copyparamfield />        <xaxis>n</xaxis>        <yaxis>n</yaxis>        <isadvancesearch>y</isadvancesearch>        <Class />        <SearchControlType>--Select--</SearchControlType>        <SearchControlParameters />        <DbParamField />        <useMode>DataBase</useMode>        <IsGraph>n</IsGraph>        <allowdetailview>n</allowdetailview>     </column>     <column>        <id>4</id>        <name>WebstoreUserName</name>        <headertext>Customer Full Name</headertext>        <width>40</width>        <datatype>String</datatype>        <columntype>String</columntype>        <allowsorting>true</allowsorting>        <allowpaging>true</allowpaging>        <format />        <isvisible>y</isvisible>        <mustshow>y</mustshow>        <musthide>n</musthide>        <maxlength>100</maxlength>        <isallowsearch>y</isallowsearch>        <isconditional>n</isconditional>        <isallowlink>n</isallowlink>        <islinkactionurl />        <islinkparamfield />        <ischeckbox>n</ischeckbox>        <checkboxparamfield />        <iscontrol>y</iscontrol>        <controltype>Text</controltype>        <controlparamfield />        <displaytext />        <editactionurl />        <editparamfield />        <deleteactionurl />        <deleteparamfield />        <viewactionurl />        <viewparamfield />        <imageactionurl />        <imageparamfield />        <manageactionurl />        <manageparamfield />        <copyactionurl />        <copyparamfield />        <xaxis>n</xaxis>        <yaxis>n</yaxis>        <isadvancesearch>y</isadvancesearch>        <Class />        <SearchControlType>--Select--</SearchControlType>        <SearchControlParameters />        <DbParamField />        <useMode>DataBase</useMode>        <IsGraph>n</IsGraph>        <allowdetailview>n</allowdetailview>     </column>     <column>        <id>5</id>        <name>ActivityType</name>        <headertext>Activity Name</headertext>        <width>40</width>        <datatype>String</datatype>        <columntype>String</columntype>        <allowsorting>true</allowsorting>        <allowpaging>true</allowpaging>        <format />        <isvisible>y</isvisible>        <mustshow>y</mustshow>        <musthide>n</musthide>        <maxlength>100</maxlength>        <isallowsearch>y</isallowsearch>        <isconditional>n</isconditional>        <isallowlink>n</isallowlink>        <islinkactionurl />        <islinkparamfield />        <ischeckbox>n</ischeckbox>        <checkboxparamfield />        <iscontrol>y</iscontrol>        <controltype>Text</controltype>        <controlparamfield />        <displaytext />        <editactionurl />        <editparamfield />        <deleteactionurl />        <deleteparamfield />        <viewactionurl />        <viewparamfield />        <imageactionurl />        <imageparamfield />        <manageactionurl />        <manageparamfield />        <copyactionurl />        <copyparamfield />        <xaxis>n</xaxis>        <yaxis>n</yaxis>        <isadvancesearch>y</isadvancesearch>        <Class />        <SearchControlType>--Select--</SearchControlType>        <SearchControlParameters />        <DbParamField />        <useMode>DataBase</useMode>        <IsGraph>n</IsGraph>        <allowdetailview>n</allowdetailview>     </column>     <column>        <id>6</id>        <name>ActivityId</name>        <headertext>Activity Id</headertext>        <width>40</width>        <datatype>String</datatype>        <columntype>String</columntype>        <allowsorting>true</allowsorting>        <allowpaging>true</allowpaging>        <format />        <isvisible>y</isvisible>        <mustshow>y</mustshow>        <musthide>n</musthide>        <maxlength>100</maxlength>        <isallowsearch>y</isallowsearch>        <isconditional>n</isconditional>        <isallowlink>n</isallowlink>        <islinkactionurl />        <islinkparamfield />        <ischeckbox>n</ischeckbox>        <checkboxparamfield />        <iscontrol>y</iscontrol>        <controltype>Text</controltype>        <controlparamfield />        <displaytext />        <editactionurl />        <editparamfield />        <deleteactionurl />        <deleteparamfield />        <viewactionurl />        <viewparamfield />        <imageactionurl />        <imageparamfield />        <manageactionurl />        <manageparamfield />        <copyactionurl />        <copyparamfield />        <xaxis>n</xaxis>        <yaxis>n</yaxis>        <isadvancesearch>y</isadvancesearch>        <Class />        <SearchControlType>--Select--</SearchControlType>        <SearchControlParameters />        <DbParamField />        <useMode>DataBase</useMode>        <IsGraph>n</IsGraph>        <allowdetailview>n</allowdetailview>     </column>     <column>        <id>7</id>        <name>OperationType</name>        <headertext>Operation Type</headertext>        <width>80</width>        <datatype>String</datatype>        <columntype>String</columntype>        <allowsorting>true</allowsorting>        <allowpaging>true</allowpaging>        <format />        <isvisible>y</isvisible>        <mustshow>y</mustshow>        <musthide>n</musthide>        <maxlength>0</maxlength>        <isallowsearch>y</isallowsearch>        <isconditional>n</isconditional>        <isallowlink>n</isallowlink>        <islinkactionurl />        <islinkparamfield />        <ischeckbox>n</ischeckbox>        <checkboxparamfield />        <iscontrol>n</iscontrol>        <controltype />        <controlparamfield />        <displaytext />        <editactionurl />        <editparamfield />        <deleteactionurl />        <deleteparamfield />        <viewactionurl />        <viewparamfield />        <imageactionurl />        <imageparamfield />        <manageactionurl />        <manageparamfield />        <copyactionurl />        <copyparamfield />        <xaxis>n</xaxis>        <yaxis>n</yaxis>        <isadvancesearch>y</isadvancesearch>        <Class />        <SearchControlType>--Select--</SearchControlType>        <SearchControlParameters />        <DbParamField />        <useMode>DataBase</useMode>        <IsGraph>n</IsGraph>        <allowdetailview>n</allowdetailview>     </column>     <column>        <id>8</id>        <name>CreatedDate</name>        <headertext>Created Date</headertext>        <width>40</width>        <datatype>DateTime</datatype>        <columntype>DateTime</columntype>        <allowsorting>true</allowsorting>        <allowpaging>true</allowpaging>        <format />        <isvisible>y</isvisible>        <mustshow>y</mustshow>        <musthide>n</musthide>        <maxlength>0</maxlength>        <isallowsearch>y</isallowsearch>        <isconditional>n</isconditional>        <isallowlink>n</isallowlink>        <islinkactionurl />        <islinkparamfield />        <ischeckbox>n</ischeckbox>        <checkboxparamfield />        <iscontrol>n</iscontrol>        <controltype />        <controlparamfield />        <displaytext />        <editactionurl />        <editparamfield />        <deleteactionurl />        <deleteparamfield />        <viewactionurl />        <viewparamfield />        <imageactionurl />        <imageparamfield />        <manageactionurl />        <manageparamfield />        <copyactionurl />        <copyparamfield />        <xaxis>n</xaxis>        <yaxis>n</yaxis>        <isadvancesearch>y</isadvancesearch>        <Class />        <SearchControlType>--Select--</SearchControlType>        <SearchControlParameters />        <DbParamField />        <useMode>DataBase</useMode>        <IsGraph>n</IsGraph>        <allowdetailview>n</allowdetailview>     </column>  </columns>',	
'ZnodeImersonationActivityLog',	'ZnodeImersonationActivityLog',	'ZnodeImersonationActivityLog',	0,'CreatedDate|DESC',	NULL,	NULL,	NULL,	2,	getdate(),	2	, getdate()
where not exists (select TOP 1 1 from ZnodeApplicationSetting where ItemName = 'ZnodeImersonationActivityLog')

GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetImpersonificationLog')
BEGIN 
	DROP PROCEDURE Znode_GetImpersonificationLog
END
GO
CREATE PROCEDURE [dbo].[Znode_GetImpersonificationLog]  
(   @WhereClause NVARCHAR(max),  
    @Rows        INT            = 100,  
    @PageNo      INT            = 1,  
    @Order_BY    VARCHAR(1000)  = '',  
    @RowsCount   INT  OUT  
   
  )    
AS   
/*  
 EXEC Znode_GetImpersonificationLog '',50,1,'',0
*/

 BEGIN  
    BEGIN TRY  
        SET NOCOUNT ON;  
        DECLARE @SQL NVARCHAR(MAX);
		 DECLARE @TBL_ImpersonificationLogList TABLE
		 (ImpersonificationLogId INT,PortalId INT
		 ,StoreName NVARCHAR(200),CSRId INT,CSRName NVARCHAR(200),WebstoreuserId INT,
		 WebstoreUserName NVARCHAR(200),ActivityType VARCHAR(100),ActivityId INT,OperationType VARCHAR(20),
		 CreatedDate DATETIME,RowId INT, CountNo INT)

		  SET @SQL ='

		  ;WITH CTE_GetImpersonificationLog AS  
      (  
	  SELECT IL.ImpersonificationLogId ,IL.PortalId, ZP.StoreName  , IL.CSRId,
	  ZU.FirstName + '' '' + ZU.LastName  AS CSRName,
	  IL.WebstoreuserId,ZUU.FirstName + '' '' + ZUU.LastName AS WebstoreUserName, IL.ActivityType,
	  IL.ActivityId ,IL.OperationType,IL.CreatedDate
	  FROM ZnodeImpersonificationLog IL
	  INNER JOIN ZnodePortal ZP ON (ZP.PortalId = IL.PortalId)
	  INNER JOIN ZnodeUser ZU ON (ZU.UserId = IL.CSRID)
	  INNER JOIN ZnodeUser ZUU ON (ZUU.UserId = IL.WebstoreuserId)

	  )
	  ,CTE_GetImpersonificationLogList AS  
      (  
	  SELECT ImpersonificationLogId ,PortalId, StoreName, CSRId,CSRName,WebstoreuserId,WebstoreUserName, ActivityType,
	  ActivityId ,OperationType,CreatedDate ,
      '+dbo.Fn_GetPagingRowId(@Order_BY,'ImpersonificationLogId DESC')+',Count(*)Over() CountNo   
      FROM CTE_GetImpersonificationLog  
      WHERE 1=1 '+dbo.Fn_GetFilterWhereClause(@WhereClause)+' 
	  )
		 SELECT ImpersonificationLogId ,PortalId, StoreName, CSRId,CSRName,WebstoreuserId,WebstoreUserName,
		  ActivityType,  ActivityId ,OperationType,CreatedDate,RowId,CountNo  
      FROM CTE_GetImpersonificationLogList  
      '+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows) 
		 
		
		INSERT INTO @TBL_ImpersonificationLogList (ImpersonificationLogId ,PortalId,StoreName, 
		CSRId,CSRName,WebstoreuserId,WebstoreUserName, ActivityType,
		ActivityId ,OperationType,CreatedDate,RowId,CountNo)

		EXEC(@SQL)  
  
		SET @RowsCount =ISNULL((SELECT TOP 1 CountNo FROM @TBL_ImpersonificationLogList ),0)

		SELECT ImpersonificationLogId ,PortalId, StoreName, CSRId,CSRName,WebstoreuserId,WebstoreUserName,
		  ActivityType,  ActivityId ,OperationType,CreatedDate
		  FROM @TBL_ImpersonificationLogList

	END TRY  
    BEGIN CATCH  
		DECLARE @Status BIT ;  
		SET @Status = 0;  
		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),  
		@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetImpersonificationLog @WhereClause = '+CAST(@WhereClause AS VARCHAR(MAX))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+'@Status='+CAST(@Status AS VARCHAR(10));  
                    
		SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                      
      
		EXEC Znode_InsertProcedureErrorLog  
		@ProcedureName = 'Znode_GetImpersonificationLog',  
		@ErrorInProcedure = @Error_procedure,  
		@ErrorMessage = @ErrorMessage,  
		@ErrorLine = @ErrorLine,  
		@ErrorCall = @ErrorCall;  
	END CATCH  
 END
 GO

 Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'User','EnableDisableSingleAccount',1,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'User' and ActionName = 'EnableDisableSingleAccount')


insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy ,CreatedDate,	ModifiedBy, ModifiedDate )
select 
 (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Admin Users' AND ControllerName = 'User')	
    ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'User' and ActionName= 'EnableDisableSingleAccount') ,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
     (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Admin Users' AND ControllerName = 'User') and ActionId = 
     (select TOP 1 ActionId from ZnodeActions where ControllerName = 'User' and ActionName= 'EnableDisableSingleAccount'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy ,CreatedDate,	ModifiedBy, ModifiedDate )
select 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Admin Users' AND ControllerName = 'User'),
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'User' and ActionName= 'EnableDisableSingleAccount')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Admin Users' AND ControllerName = 'User') and ActionId = 
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'User' and ActionName= 'EnableDisableSingleAccount'))

GO
Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Customer','GetImpersonationByUserId',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Customer' and ActionName = 'GetImpersonationByUserId')


insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy ,CreatedDate,	ModifiedBy, ModifiedDate )
select 
 (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Users' AND ControllerName = 'Customer')	
    ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Customer' and ActionName= 'GetImpersonationByUserId') ,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
     (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Users' AND ControllerName = 'Customer') and ActionId = 
     (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Customer' and ActionName= 'GetImpersonationByUserId'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy ,CreatedDate,	ModifiedBy, ModifiedDate )
select 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Users' AND ControllerName = 'Customer'),
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Customer' and ActionName= 'GetImpersonationByUserId')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Users' AND ControllerName = 'Customer') and ActionId = 
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Customer' and ActionName= 'GetImpersonationByUserId'))

GO

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Customer','GetImpersonationUrl',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Customer' and ActionName = 'GetImpersonationUrl')


insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy ,CreatedDate,	ModifiedBy, ModifiedDate )
select 
 (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Users' AND ControllerName = 'Customer')	
    ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Customer' and ActionName= 'GetImpersonationUrl') ,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
     (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Users' AND ControllerName = 'Customer') and ActionId = 
     (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Customer' and ActionName= 'GetImpersonationUrl'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy ,CreatedDate,	ModifiedBy, ModifiedDate )
select 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Users' AND ControllerName = 'Customer'),
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Customer' and ActionName= 'GetImpersonationUrl')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Users' AND ControllerName = 'Customer') and ActionId = 
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Customer' and ActionName= 'GetImpersonationUrl'))

GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetProductFeedList')
BEGIN 
	DROP PROCEDURE Znode_GetProductFeedList
END
GO

create PROCEDURE [dbo].[Znode_GetProductFeedList]  
(   @PortalId   VARCHAR(2000) = NULL,  
    @SKU      SelectColumnList READONLY,  
    @LocaleId   INT,  
    @FeedType   NVARCHAR(MAX) = NULL)  
AS  
/*  
Summary: This Procedure is used to get effective keyword feeding of Product list  
 SELECT * FROM ZnodePublishProductDetail  
 SELECT * FROM ZnodePublishProduct WHERE PublishCatalogId = 3  
 SELECT * FROM ZnodePortalCatalog   
 Unit Testing:  
 EXEC [Znode_GetProductFeedList] @PortalId='0',@ProductIds = '116,117,118'  
 ,@LocaleId=1,@FeedType='Bing'   
  
*/  
     BEGIN  
  BEGIN TRY  
         SET NOCOUNT ON;        
           
   IF OBJECT_ID('tempdb..#TBL_DomainName') is not null
			drop table #TBL_DomainName

		IF OBJECT_ID('tempdb..#TBL_SEODetails') is not null
			drop table #TBL_SEODetails

		IF OBJECT_ID('tempdb..#TBL_CompleteDetailes') is not null
			drop table #TBL_CompleteDetailes

		IF OBJECT_ID('tempdb..#TBL_CompleteDetailes') is not null
			drop table #TBL_CompleteDetailes

		IF OBJECT_ID('tempdb..#TBL_PortalIds') is not null
			drop table #TBL_PortalIds

		 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
         CREATE TABLE #TBL_DomainName 
         (PortalId   INT,
          DomainName NVARCHAR(300),
          RowId      INT
         );  	
         
         CREATE TABLE #TBL_SEODetails   
         (loc                   NVARCHAR(MAX),  
          lastmod               DATETIME,  
          [g:condition]         VARCHAR(100),  
          [description]         NVARCHAR(MAX),  
          [g:id]                INT,  
          link                  VARCHAR(100),  
          [g:identifier_exists] VARCHAR(200),  
          DomainName            NVARCHAR(300),  
          PortalId              INT , 
          SEOCode             NVARCHAR(4000), 
		  CanonicalURL        VARCHAR(200), 
		  RobotTag            VARCHAR(50)
         );  
         CREATE TABLE #TBL_CompleteDetailes   
         (loc                   NVARCHAR(MAX),  
          lastmod               DATETIME,  
          [g:condition]         VARCHAR(100),  
          [description]         NVARCHAR(MAX),  
          [g:id]                INT,  
          link                  VARCHAR(100),  
          [g:identifier_exists] VARCHAR(200),  
          DomainName            NVARCHAR(300),  
          PortalId              INT,  
          [g:availability]      NVARCHAR(1000),  
          SKU                   NVARCHAR(MAX),  
		  SEOCode               NVARCHAR(4000),
		  CanonicalURL        VARCHAR(200), 
		  RobotTag            VARCHAR(50) 
         );  
         DECLARE @DefaultLocaleId INT=dbo.Fn_GetDefaultLocaleId()  ;
         CREATE TABLE #TBL_PortalIds (PortalId INT);  
			
		select * into #SKU from @SKU
		create index IDX_#SKU on #SKU(StringColumn)

         INSERT INTO #TBL_PortalIds  
         SELECT Zp.PortalId   
   FROM Znodeportal AS ZP   
   INNER JOIN ZnodePortalCatalog AS ZPC ON(ZPC.PortalId = Zp.PortalId)  
         INNER JOIN ZnodePublishCatalog AS ZPPC ON(ZPPC.PublishCatalogId = ZPC.PublishCatalogId)   
   INNER JOIN ZNodePublishProduct AS ZPP ON(ZPP.PublishCatalogId = ZPPC.PublishCatalogId)  
   INNER JOIN ZnodePublishProductDetail AS PPD ON (PPD.PublishProductId = ZPP.PublishProductId)  
         WHERE EXISTS(SELECT TOP 1 1 FROM #SKU AS Sp WHERE (sp.StringColumn  = PPD.SKU)  OR StringColumn = '0')  
   AND EXISTS(SELECT TOP 1 1 FROM DBO.Split(@PortalId, ',') AS Sp  
      WHERE(CAST(sp.Item AS INT)) = Zp.PortalId  OR @PortalId = '0')  
   AND EXISTS (SELECT TOP 1 1 FROM ZnodeDomain ZD WHERE ZP.PortalId = ZD.PortalId  
   AND IsActive = 1 AND ApplicationType = 'Webstore')  
   GROUP BY Zp.PortalId;   
  
         INSERT INTO #TBL_DomainName   
   SELECT  PortalId,DomainName,ROW_NUMBER() OVER(PARTITION BY PortalId ORDER BY DomainName)   
   FROM ZnodeDomain AS ZD   
         WHERE EXISTS(SELECT TOP 1 1 FROM #TBL_PortalIds AS TBP WHERE TBP.PortalId = ZD.PortalId)  
   AND IsActive = 1 AND ApplicationType = 'Webstore'  
    
          
   SELECT DISTINCT ZCSD.CMSSEODetailId,ZCSD.SEOURL AS loc,ZCSD.ModifiedDate AS lastmod,'new' AS [g:condition],ZCSDL.SEODescription AS [description],ZPCC.PublishProductId AS [g:id],  
             '' AS link,'false' AS [g:identifier_exists],TBDN.DomainName,ZPC.PortalId,ISNULL(ZCSDL.LocaleId, @DefaultLocaleId) AS LocaleId , ZCSD.SEOCode , ZCSDL.CanonicalURL, ZCSDL.RobotTag 
    INTO #Cte_SeoDetailsWithLocale
	FROM ZNodePublishProduct AS ZPCC   
    INNER JOIN ZnodePortalCatalog AS ZPC ON(ZPC.PublishCatalogId = ZPCC.PublishCatalogId)  
    LEFT JOIN ZnodePublishProductDetail AS PPD ON (PPD.PublishProductId = ZPCC.PublishProductId)  
             -- INNER JOIN @TBL_PortalIds TBLP ON (TBLP.PortalId = ZPC.PortalId)  
    LEFT JOIN ZnodeCMSSEODetail AS ZCSD ON(PPD.SKU = ZCSD.SEOCode and ZCSD.PortalId = ZPC.PortalId)  
             LEFT JOIN ZnodeCMSSEOType AS ZCST ON(ZCST.CMSSEOTypeId = ZCSD.CMSSEOTypeId AND ZCST.Name = 'Product')  
             LEFT JOIN ZnodeCMSSEODetailLocale AS ZCSDL ON(ZCSDL.CMSSEODetailId = ZCSD.CMSSEODetailId AND ZCSDL.LocaleId IN(@LocaleId, @DefaultLocaleId))  
             LEFT JOIN #TBL_DomainName AS TBDN ON(TBDN.RowId = 1 AND TBDN.PortalId = zpc.PortalId )   
    WHERE EXISTS(SELECT TOP 1 1 FROM #SKU AS Sp  
      WHERE (sp.StringColumn  = PPD.SKU) OR StringColumn = '0')  
   AND EXISTS(SELECT TOP 1 1 FROM #TBL_PortalIds AS TBP WHERE TBP.PortalId = ZPC.PortalId )  
    
 
	SELECT CMSSEODetailId,loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,PortalId,LocaleId,SEOCode, CanonicalURL, RobotTag  
	into #Cte_SeoDetailsWithFirstLocale
	FROM #Cte_SeoDetailsWithLocale   
	WHERE LocaleId = @LocaleId  
    
    SELECT CMSSEODetailId,loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,PortalId,LocaleId,SEOCode , CanonicalURL, RobotTag 
             INTO #Cte_SeoDetailsWithDefaultLocale
			 FROM #Cte_SeoDetailsWithFirstLocale  
             UNION ALL  
             SELECT CMSSEODetailId,loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,PortalId,LocaleId,SEOCode, CanonicalURL, RobotTag  
             FROM #Cte_SeoDetailsWithLocale AS CTSDWL  
             WHERE LocaleId = @DefaultLocaleId   
    AND NOT EXISTS(SELECT TOP 1 1 FROM #Cte_SeoDetailsWithFirstLocale AS CTSDWDL WHERE CTSDWDL.CMSSEODetailId = CTSDWL.CMSSEODetailId)  
                
   INSERT INTO #TBL_SEODetails  
         SELECT DISTINCT loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,PortalId ,SEOCode, CanonicalURL, RobotTag  
   FROM #Cte_SeoDetailsWithDefaultLocale;  
  
    
  
         INSERT INTO #TBL_CompleteDetailes  
         SELECT TBSD.loc,TBSD.lastmod,TBSD.[g:condition],TBSD.[description],TBSD.[g:id],TBSD.link,TBSD.[g:identifier_exists],TBSD.DomainName,TBSD.PortalId,  
         CASE WHEN SUM(ZI.Quantity) > 0 THEN 'In Stock' ELSE CASE WHEN @FeedType = 'Google' THEN 'Out Of Stock' ELSE 'Not In Stock' END  
         END AS [g:availability],ZPPD.SKU ,TBSD.SEOCode, TBSD.CanonicalURL, TBSD.RobotTag  
   FROM ZnodePublishProduct AS ZPP   
   LEFT JOIN #TBL_SEODetails AS TBSD ON(ZPP.PublishProductId = TBSD.[g:id] )  
         LEFT JOIN ZnodePublishProductDetail AS ZPPD ON(ZPPD.PublishProductId = ZPP.PublishProductId AND ZPPD.LocaleId = @LocaleId )  
         LEFT JOIN ZnodePortalWarehouse AS ZPW ON(ZPW.PortalId = TBSD.PortalId)  
         LEFT JOIN ZnodePortalAlternateWarehouse AS ZAPW ON(ZAPW.PortalWarehouseId = ZPW.PortalWarehouseId)  
         LEFT JOIN ZnodeInventory AS ZI ON(ZI.SKU = ZPPD.SKU AND (ZI.WarehouseId = ZPW.WarehouseId OR ZI.WarehouseId = ZAPW.WarehouseId))  
         WHERE EXISTS(SELECT TOP 1 1 FROM #SKU AS Sp WHERE (sp.StringColumn  = ZPPD.SKU) OR StringColumn = '0')  
   AND EXISTS(SELECT TOP 1 1 FROM #TBL_PortalIds AS TBP WHERE TBP.PortalId = TBSD.PortalId )  
         GROUP BY loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,TBSD.PortalId,ZPPD.SKU,ZPPD.LocaleId, TBSD.SEOCode, TBSD.CanonicalURL, TBSD.RobotTag;    
           
		    DECLARE @MediaConfiguration NVARCHAR(2000)=((SELECT TOP 1 ISNULL(CASE WHEN CDNURL = '' THEN NULL ELSE CDNURL END,URL) FROM ZnodeMediaConfiguration WHERE IsActive = 1));    
  
         SELECT zp.PortalId,dbo.Fn_GetDefaultPriceRoundOff(ZPS.RetailPrice)RetailPrice,Zps.SKU,TBCD.SEOCode,ROW_NUMBER() OVER(PARTITION BY Zps.SKU,zp.PortalId ORDER BY ZPS.RetailPrice) AS RowId  
         into #Cte_PortalList
		     FROM ZnodePriceList AS ZPL   
    LEFT JOIN ZnodePriceListPortal AS ZPLP ON ZPL.PriceListId = ZPLP.PriceListId  
             LEFT JOIN dbo.ZnodeCulture AS zc ON ZPL.CultureId = zc.CultureId
    LEFT JOIN dbo.ZnodePortal AS zp ON ZPLP.PortalId = zp.PortalId  
             LEFT JOIN ZnodePrice AS Zps ON(Zps.PriceListId = ZPL.PriceListId)   
    LEFT JOIN #TBL_CompleteDetailes AS TBCD ON(TBCD.PortalId = Zp.PortalId AND TBCD.SKU = Zps.Sku)   
    WHERE CAST(@GetDate AS DATE) BETWEEN ZPL.ActivationDate AND ZPL.ExpirationDate   
    AND EXISTS( SELECT TOP 1 1 FROM #TBL_PortalIds AS TBP WHERE TBP.PortalId = ZPLP.PortalId)   
    GROUP BY zp.PortalId,ZPS.RetailPrice,Zps.SKU ,TBCD.SEOCode  
     
   SELECT loc,lastmod,[g:condition],[description],[g:id],link,[g:availability],[g:identifier_exists],DomainName,TBCD.PortalId  
		 ,CTPL.RetailPrice AS [g:price],@MediaConfiguration AS MediaConfiguration, TBCD.SEOCode, TBCD.CanonicalURL, TBCD.RobotTag 
   FROM #TBL_CompleteDetailes AS TBCD   
   LEFT JOIN #Cte_PortalList AS CTPL ON(CTPL.PortalId = TBCD.PortalId AND CTPL.SKU = TBCD.SKU AND CTPL.RowID = 1)  
   WHERE  EXISTS(SELECT TOP 1 1 FROM #TBL_PortalIds AS TBP WHERE TBP.PortalId = TBCD.PortalId )  
  

    IF OBJECT_ID('tempdb..#TBL_DomainName') is not null
			drop table #TBL_DomainName

		IF OBJECT_ID('tempdb..#TBL_SEODetails') is not null
			drop table #TBL_SEODetails

		IF OBJECT_ID('tempdb..#TBL_CompleteDetailes') is not null
			drop table #TBL_CompleteDetailes

		IF OBJECT_ID('tempdb..#TBL_CompleteDetailes') is not null
			drop table #TBL_CompleteDetailes

		IF OBJECT_ID('tempdb..#TBL_PortalIds') is not null
			drop table #TBL_PortalIds

 END TRY  
 BEGIN CATCH  
  DECLARE @Status BIT ;  
  SET @Status = 0;  
  DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetProductFeedList @PortalId = '+@PortalId+',@LocaleId='+CAST(@LocaleId AS VARCHAR(50))+',@FeedType='+CAST(@FeedType AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));  
                    
        SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                      
      
        EXEC Znode_InsertProcedureErrorLog  
   @ProcedureName = 'Znode_GetProductFeedList',  
   @ErrorInProcedure = @Error_procedure,  
   @ErrorMessage = @ErrorMessage,  
   @ErrorLine = @ErrorLine,  
   @ErrorCall = @ErrorCall;  
 END CATCH  
   
  END;
  GO

  IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ManageCategoryList_XML')
BEGIN 
	DROP PROCEDURE Znode_ManageCategoryList_XML
END
GO
CREATE PROCEDURE [dbo].[Znode_ManageCategoryList_XML](
      @WhereClause      XML ,
      @Rows             INT            = 100 ,
      @PageNo           INT            = 1 ,
      @Order_BY         NVARCHAR(1000) = '' ,
      @LocaleId         INT            = 1 ,
      @ProfileCatalogId INT            = 0,
	  @PimCatalogId     INT            = 0,
	  @IsCatalogFilter   BIT            = 0)
AS
    /*
	   Summary: This Procedure is used to get all category list 
				The Result displays CategortName with PimCategoryId where CategoryName and CategoryImage are pivoted values
	   Unit Testing 	  
	   EXEC Znode_ManageCategoryList_XML '' ,@LocaleId= 1
	
    */
     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY
		 SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 
             DECLARE @TBL_PimcategoryDetails TABLE (PimCategoryId INT,CountId INT,RowId INT);
             DECLARE @TBL_CategoryIds TABLE (PimCategoryId INT ,ParentPimcategoryId INT);
             DECLARE @TBL_AttributeValue TABLE (PimCategoryAttributeValueId INT,PimCategoryId INT,CategoryValue NVARCHAR(MAX), AttributeCode VARCHAR(300), PimAttributeId  INT);
             DECLARE @TBL_FamilyDetails TABLE (PimCategoryId INT , PimAttributeFamilyId INT , AttributeFamilyName  NVARCHAR(MAX));
             DECLARE @TBL_DefaultAttributeValue TABLE (PimAttributeId INT ,AttributeDefaultValueCode VARCHAR(600) , IsEditable BIT ,AttributeDefaultValue NVARCHAR(MAX),DisplayOrder int);
			 DECLARE @TBL_MediaAttribute TABLE (Id INT ,PimAttributeId INT ,AttributeCode VARCHAR(600) )
             DECLARE @TBL_ProfileCatalogCategory TABLE (ProfileCatalogId INT ,PimCategoryId INT);
             DECLARE @PimCategoryIds VARCHAR(MAX)= '' , @PimAttributeIds VARCHAR(MAX),@CategoryXML NVARCHAr(max);
			 DECLARE @RowsCount INT 

		 IF @ProfileCatalogId > 0
			 BEGIN
			 INSERT INTO @TBL_ProfileCatalogCategory (ProfileCatalogId , PimCategoryId)
			 SELECT ZPC.ProfileCatalogId , PimCategoryId
			 FROM ZnodePimCatalogCategory AS ZCC 
			 INNER JOIN ZnodeProfileCatalog AS ZPC ON ( ZPC.PimCatalogId = ZCC.PimCatalogId )
			 WHERE ZPC.ProfileCatalogId = @ProfileCatalogId 
			 AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodeProfileCatalogCategory AS ZPCC WHERE ZPCC.PimCatalogCategoryId = ZCC.PimCatalogCategoryId);
                     
			 SET @PimCategoryIds = SUBSTRING( ( SELECT DISTINCT ','+CAST(PimCategoryId AS VARCHAR(20)) FROM @TBL_ProfileCatalogCategory FOR XML PATH('') ) , 2 , 4000);
			 END;

			IF @PimCatalogId = -1
			BEGIN
			SET @PimCategoryIds = SUBSTRING( ( SELECT DISTINCT ','+CAST(PimCategoryId AS VARCHAR(2000))
			FROM ZnodePimCategory ZPC 
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimCatalogCategory ZPCC 
			WHERE ZPC.PimCategoryId = ZPCC.PimCategoryId)
			AND ZPC.PimCategoryId IS NOT NULL
			FOR XML PATH('') ) , 2 , 4000);

			END
			ELSE IF @PimCatalogId <> 0 AND @PimCatalogId <> -1
			BEGIN
			SET @PimCategoryIds = SUBSTRING( ( SELECT DISTINCT ','+CAST(PimCategoryId AS VARCHAR(2000)) 
			FROM ZnodePimCategory ZPC 
			WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimCatalogCategory ZPCC WHERE ZPC.PimCategoryId = ZPCC.PimCategoryId
			AND ZPCC.PimCatalogId = @PimCatalogId)
			AND ZPC.PimCategoryId IS NOT NULL
			FOR XML PATH('') ) , 2 , 4000);
			END
			ELSE IF @PimCatalogId = 0 AND @IsCatalogFilter = 1 -- filter for all catalog category except category which are not associated with any catalog
			BEGIN
			SET @PimCategoryIds = SUBSTRING( ( SELECT DISTINCT ','+CAST(PimCategoryId AS VARCHAR(2000)) 
			FROM ZnodePimCategory ZPC 
			WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimCatalogCategory ZPCC WHERE ZPC.PimCategoryId = ZPCC.PimCategoryId)
			AND ZPC.PimCategoryId IS NOT NULL
			FOR XML PATH('') ) , 2 , 4000);
			END

			

              INSERT INTO @TBL_PimcategoryDetails ( PimCategoryId , CountId , RowId)
             EXEC Znode_GetCategoryIdForPaging @WhereClause , @Rows , @PageNo , @Order_BY , @RowsCount  , @LocaleId , '' , @PimCategoryIds , 1; 


             SET @PimCategoryIds =  SUBSTRING( ( SELECT ','+ CAST(PimCategoryId AS VARCHAR(100)) FROM @TBL_PimcategoryDetails FOR XML PATH('')) , 2 , 4000);
             SET @PimAttributeIds = SUBSTRING( ( SELECT ','+ CAST(PimAttributeId AS VARCHAR(100)) FROM [dbo].[Fn_GetCategoryGridAttributeDetails]() FOR XML PATH('')) , 2 , 4000);

			 INSERT INTO @TBL_AttributeValue ( PimCategoryAttributeValueId , PimCategoryId , CategoryValue , AttributeCode , PimAttributeId)
             EXEC [dbo].[Znode_GetCategoryAttributeValue] @PimCategoryIds , @PimAttributeIds , @LocaleId;

             INSERT INTO @TBL_FamilyDetails ( PimAttributeFamilyId , AttributeFamilyName , PimCategoryId)
             EXEC Znode_GetCategoryFamilyDetails @PimCategoryIds , @LocaleId;
             
		     INSERT INTO @TBL_DefaultAttributeValue ( PimAttributeId , AttributeDefaultValueCode , IsEditable , AttributeDefaultValue,DisplayOrder)
             EXEC [dbo].[Znode_GetAttributeDefaultValueLocale] @PimAttributeIds , @LocaleId;
             
			 SET @RowsCount = ISNULL((SELECT TOP 1 CountId FROM @TBL_PimcategoryDetails ),0)
			 
			 INSERT INTO @TBL_MediaAttribute (Id,PimAttributeId,AttributeCode )
			 SELECT Id,PimAttributeId,AttributeCode 
			 FROM [dbo].[Fn_GetProductMediaAttributeId]()
			 		
		     ;WITH Cte_DefaultCategoryValue
              AS (SELECT PimCategoryId , PimAttributeId ,SUBSTRING( ( SELECT ','+AttributeDefaultValue FROM @TBL_DefaultAttributeValue AS TBDAV WHERE TBDAV.PimAttributeId = TBAV.PimAttributeId 
			     AND EXISTS ( SELECT TOP 1 1 FROM dbo.Split ( TBAV.CategoryValue , ',') AS SP WHERE sp.Item = TBDAV.AttributeDefaultValueCode)
                 FOR XML PATH('')) , 2 , 4000) AS AttributeValue FROM @TBL_AttributeValue AS TBAV							 
				 WHERE EXISTS ( SELECT TOP 1 1 FROM [dbo].[Fn_GetCategoryDefaultValueAttribute]() AS SP WHERE SP.PimAttributeId = TBAV.PimAttributeId))

             UPDATE TBAV SET TBAV.CategoryValue = CTDCV.AttributeValue
             FROM @TBL_AttributeValue TBAV 
			 INNER JOIN Cte_DefaultCategoryValue CTDCV ON ( CTDCV.PimCategoryId = TBAV.PimCategoryId AND CTDCV.PimAttributeId = TBAV.PimAttributeId );
                   
		    UPDATE  TBAV
			SET CategoryValue  = SUBSTRING ((SELECT ','+[dbo].FN_GetMediaThumbnailMediaPath(zm.Path) FROM ZnodeMedia ZM  WHERE EXISTS (SELECT TOP 1 1 FROM dbo.split(TBAV.CategoryValue ,',') SP  WHERE SP.Item = CAST(ZM.MediaId AS VARCHAR(50)) ) FOR XML PATH('')),2,4000)
			FROM @TBL_AttributeValue TBAV 
			INNER JOIN @TBL_MediaAttribute TBMA ON (TBMA.PimAttributeId = TBAV.PimAttributeId)	   
			
			INSERT INTO @TBL_AttributeValue ( PimCategoryId , CategoryValue , AttributeCode )

            SELECT PimCategoryId,AttributeFamilyName , 'AttributeFamily'
			FROM @TBL_FamilyDetails 				                           
		    

			INSERT INTO @TBL_AttributeValue             ( PimCategoryId , CategoryValue , AttributeCode     )
			--SELECT a.PimCategoryId  ,
			--CASE WHEN IsCategoryPublish = 1 THEN   'Published' WHEN IsCategoryPublish = 0 
			--THEN 'Draft'  ELSE 'Not Published' END, 'PublishStatus'
			--FROM @TBL_PimcategoryDetails a 
			--INNER JOIN ZnodePimCategory b ON (b.PimCategoryId = a.PimCategoryId)

			SELECT a.PimCategoryId PimCategoryId 
			,th.DisplayName, 'PublishStatus'
			FROM @TBL_PimcategoryDetails a 
			INNER JOIN ZnodePimCategory b ON (b.PimCategoryId = a.PimCategoryId)
			LEFT JOIN ZnodePublishState th ON (th.PublishStateId = b.PublishStateId)

			SET @CategoryXML =  '<MainCategory>'+ STUFF( (  SELECT '<Category>'+'<PimCategoryId>'+CAST(TBAD.PimCategoryId AS VARCHAR(50))+'</PimCategoryId>'+ STUFF(    (  SELECT '<'+TBADI.AttributeCode+'>'+CAST((SELECT ''+TBADI.CategoryValue FOR XML PATH('')) AS NVARCHAR(max))+'</'+TBADI.AttributeCode+'>'   
															FROM @TBL_AttributeValue TBADI      
															 WHERE TBADI.PimCategoryId = TBAD.PimCategoryId 
															 ORDER BY TBADI.PimCategoryId DESC
															 FOR XML PATH (''), TYPE
																).value('.', ' Nvarchar(max)'), 1, 0, '')+'</Category>'	   

			FROM @TBL_AttributeValue TBAD
			INNER JOIN @TBL_PimcategoryDetails TBPI ON (TBAD.PimCategoryId = TBPI.PimCategoryId )
			GROUP BY TBAD.PimCategoryId,TBPI.RowId 
			ORDER BY TBPI.RowId 
			FOR XML PATH (''),TYPE).value('.', ' Nvarchar(max)'), 1, 0, '')+'</MainCategory>'


			SELECT  @CategoryXML  CategoryXMl
		   
		     SELECT AttributeCode ,  ZPAL.AttributeName
			 FROM ZnodePimAttribute ZPA 
			 LEFT JOIN ZnodePiMAttributeLOcale ZPAL ON (ZPAL.PimAttributeId = ZPA.PimAttributeId )
             WHERE LocaleId = 1 
			 AND IsCategory = 1  
			 AND ZPA.IsShowOnGrid = 1  
			 UNION ALL 
			 SELECT 'PublishStatus','Publish Status'
		    SELECT ISNULL(@RowsCount,0) AS RowsCount;



			
			 --SELECT  PIV.PimCategoryId , PIV.CategoryName , ZPC.IsActive AS [Status] , dbo.FN_GetMediaThumbnailMediaPath ( Zm.Path ) AS CategoryImage , @LocaleId AS LocaleId , ISNULL(TBFD.AttributeFamilyName , '') AS AttributeFamilyName
             
			 --FROM @TBL_PimcategoryDetails AS TBCD 
			 --INNER JOIN ( SELECT PimCategoryId , CategoryValue , AttributeCode  FROM @TBL_AttributeValue) AS TBAV PIVOT(MAX(CategoryValue)                                                             
			 --FOR AttributeCode IN([CategoryName] , [CategoryImage])) PIV ON ( PIV.PimCategoryId = TBCD.PimCategoryId )
			 --LEFT JOIN @TBL_FamilyDetails AS TBFD ON ( TBFD.PimCategoryId = PIV.PimCategoryId )
			 --LEFT JOIN ZnodeMedia AS ZM ON ( CAST(ZM.MediaId AS VARCHAR(50)) = PIV.[CategoryImage] )
			 --LEFT JOIN ZnodePimCategory AS ZPC ON ( ZPC.PimCategoryId = PIV.PimCategoryId ) 
			 --ORDER BY RowId;
             
             --SET @RowsCount = ISNULL( ( SELECT TOP 1 CountId FROM @TBL_PimcategoryDetails) , 0);
         END TRY
         BEGIN CATCH
                DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ManageCategoryList_XML @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@LocaleId = '+CAST(@LocaleId AS VARCHAR(50))+',@ProfileCatalogId='+CAST(@ProfileCatalogId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_ManageCategoryList_XML',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;

	 GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetProductList')
BEGIN 
	DROP PROCEDURE Znode_GetProductList
END
GO


CREATE  PROCEDURE [dbo].[Znode_GetProductList]
(
 @IsAssociated BIT = 0
 ,@PimProductId Transferid Readonly ,
 @PimCatalogId INT = 0,
 @IsCatalogFilter   BIT            = 0
)
AS 
BEGIN 

 IF @IsAssociated = 0  --AND NOT EXISTS (SELECT Max(id) FROM @PimProductId WHERE id = 0)
 BEGIN 
  IF @PimCatalogId = 0 AND @IsCatalogFilter =1 -- filter for all catalog product except product which are not associated with any catalog
		 BEGIN
		 SELECT PimProductId 
		 FROM ZnodePimProduct ZPP 
		 WHERE NOT EXISTS (SELECT TOP 1  1 FROM @PimProductId WHERE id = ZPP.PimProductId )
		 AND EXISTS (SELECT TOP 1 1 FROM ZnodePimCatalogCategory ZPCC 
		 WHERE ZPP.PimProductId = ZPCC.PimProductId	)
		 AND PimProductId IS NOT NULL 
		 END
  ELSE IF @PimCatalogId = 0
         BEGIN
		 SELECT PimProductId 
		 FROM ZnodePimProduct ZPP 
		 WHERE NOT EXISTS (SELECT TOP 1  1 FROM @PimProductId WHERE id = ZPP.PimProductId )
		 AND PimProductId IS NOT NULL 
		 END
   ELSE IF @PimCatalogId = -1
		BEGIN
		SELECT PimProductId 
		FROM ZnodePimProduct ZPP 
		WHERE NOT EXISTS (SELECT TOP 1  1 FROM @PimProductId WHERE id = ZPP.PimProductId )
		AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimCatalogCategory ZPCC 
										   WHERE ZPP.PimProductId = ZPCC.PimProductId)
		AND PimProductId IS NOT NULL
		END
   ELSE
		BEGIN
		SELECT PimProductId 
		FROM ZnodePimProduct ZPP 
		WHERE NOT EXISTS (SELECT TOP 1  1 FROM @PimProductId WHERE id = ZPP.PimProductId )
		AND EXISTS (SELECT TOP 1 1 FROM ZnodePimCatalogCategory ZPCC WHERE ZPP.PimProductId = ZPCC.PimProductId
										AND ZPCC.PimCatalogId = @PimCatalogId)
		AND PimProductId IS NOT NULL
		END
 END 
 ELSE IF NOT EXISTS (SELECT TOP 1 1  FROM @PimProductId HAVING max(id) = 0)
 BEGIN

 SELECT PimProductId 
 FROM ZnodePimProduct ZPP 
 WHERE  EXISTS (SELECT TOP 1  1 FROM @PimProductId WHERE id = ZPP.PimProductId )
  AND PimProductId IS NOT NULL 
 END 
 ELSE 
 BEGIN 
  SELECT 0 PimProductId
END 
END

GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ManageProductList_XML')
BEGIN 
	DROP PROCEDURE Znode_ManageProductList_XML
END
GO
CREATE  PROCEDURE [dbo].[Znode_ManageProductList_XML]
(   @WhereClause						 XML,
    @Rows								 INT           = 100,
    @PageNo								 INT           = 1,
    @Order_BY			 VARCHAR(1000) = '',
    @LocaleId			 INT           = 1,
    @PimProductId		 VARCHAR(2000) = 0,
    @IsProductNotIn	 BIT           = 0,
	@IsCallForAttribute BIT		   = 0,
	@AttributeCode      VARCHAR(max ) = '' ,
	@PimCatalogId   INT = 0,
	@IsCatalogFilter   BIT            = 0,
	@IsDebug            Bit		   = 0 )
AS
    
/*
		  Summary:-   This Procedure is used for get product List  
				    Procedure will pivot verticle table(ZnodePimattributeValues) into horizontal table with columns 
				    ProductId,ProductName,ProductType,AttributeFamily,SKU,Price,Quantity,IsActive,ImagePath,Assortment,LocaleId,DisplayOrder
        
		  Unit Testing
		  
exec Znode_ManageProductList_XML @WhereClause=N'',@Rows=50,@PageNo=1,@Order_By=N'',@LocaleId=1,@PimProductId=N'',@IsProductNotIn=1,@IsCallForAttribute=0,@AttributeCode=''
          select * from ZnodeAttributeType  WHERE AttributeValue LIKE '%&%'
		  UPDATE VieW_lOADMANAGEpRODUCT SET  AttributeValue = 'A & B'  WHERE AttributeValue LIKE '% and %' AND PimProductId = 158
    */

     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY
		 SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 
             DECLARE @PimProductIds TransferId, --VARCHAR(MAX), 
					 @FirstWhereClause NVARCHAR(MAX)= '', 
					 @SQL NVARCHAR(MAX)= '' ,
					 @OutPimProductIds VARCHAR(max),
					 @ProductXML NVARCHAR(max) ;

             DECLARE @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId()
					 ,@RowsCount INT =0 ;
             DECLARE @TransferPimProductId TransferId 
			 DECLARE @TBL_AttributeDefaultValue TABLE
             (PimAttributeId            INT,
              AttributeDefaultValueCode VARCHAR(100),
              IsEditable                BIT,
              AttributeDefaultValue     NVARCHAR(MAX)
			  ,DisplayOrder INT 
			  ,PimAttributedefaultValueId INT 
             );
             DECLARE @TBL_AttributeDetails AS TABLE
             (PimProductId   INT,
              AttributeValue NVARCHAR(MAX),
              AttributeCode  VARCHAR(600),
              PimAttributeId INT,
			  AttributeDefaultValue NVARCHAR(MAX)
             );
			   DECLARE @TBL_AttributeDetailsLocale AS TABLE
             (PimProductId   INT,
              AttributeValue NVARCHAR(MAX),
              AttributeCode  VARCHAR(600),
              PimAttributeId INT
             );
			 DECLARE @TBL_MultiSelectAttribute TABLE (PimAttributeId INT , AttributeCode VARCHAR(600))
			
			 DECLARE @TBL_MediaAttribute TABLE (Id INT ,PimAttributeId INT ,AttributeCode VARCHAR(600) )
			 
			 DECLARE @TBL_ProductIds TABLE 
			 (
			  PimProductId INT,
			  ModifiedDate DATETIME  
			 )

			 DECLARE @FamilyDetails TABLE
             (
			  PimProductId         INT,
              PimAttributeFamilyId INT,
              FamilyName           NVARCHAR(Max)
             );
             DECLARE @DefaultAttributeFamily INT= dbo.Fn_GetDefaultPimProductFamilyId();
             DECLARE @ProductIdTable TABLE
             (PimProductId INT,
              CountId      INT,
              RowId        INT IDENTITY(1,1)
             );
          		
             IF EXISTS ( SELECT TOP 1 1 FROM @WhereClause.nodes ( '//ArrayOfWhereClauseModel/WhereClauseModel'  ) AS Tbl(Col)
			 WHERE dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  =  'Brand'
                OR dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  = 'Vendor'
                OR dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  =  'ShippingCostRules'
                OR dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  =  'Highlights') and @IsCallForAttribute=1
                 BEGIN
                DECLARE @AttributeCodeValue TABLE (AttributeValue NVARCHAr(max),AttributeCode NVARCHAR(max))

				INSERT INTO @AttributeCodeValue(AttributeValue,AttributeCode)
				SELECT  Tbl.Col.value ( 'attributevalue[1]' , 'NVARCHAR(max)') AS AttributeValue
						 ,Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)') AS AttributeCode
				FROM @WhereClause.nodes ( '//ArrayOfWhereClauseModel/WhereClauseModel'  ) AS Tbl(Col)
				WHERE dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  =  'Brand'
                OR dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  = 'Vendor'
                OR dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  =  'ShippingCostRules'
                OR dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  =  'Highlights'
							

				SET @SQL =   
				           ';WIth Cte_DefaultValue AS (
										  SELECT AttributeDefaultValueCode , ZPDF.PimAttributeId ,FNPA.AttributeCode
										  FROM ZnodePImAttributeDefaultValue ZPDF
										  INNER JOIN [dbo].[Fn_GetProductDefaultFilterAttributes] () FNPA ON ( FNPA.PimAttributeId = ZPDF.PimAttributeId) 
										)
										, Cte_productIds AS 
										(
										  SELECT a.PimProductId, c.AttributeCode , CTDV.AttributeDefaultValueCode AttributeValue,b.ModifiedDate 
										  FROM  ZnodePimAttributeValue a
										  LEFT JOIN ZnodePimAttribute c ON(c.PimAttributeId = a.PimAttributeId)
										  LEFT JOIN ZnodePimAttributeValueLocale b ON(b.PimAttributeValueId = a.PimAttributeValueId)  
										  INNER JOIN Cte_DefaultValue CTDV ON (CTDV.AttributeCode = c.AttributeCode 
										  AND EXISTS (SELECT TOP 1 1 FROM dbo.split(b.AttributeValue,'','') SP WHERE SP.Item = CTDV.AttributeDefaultValueCode) )
										  Union all 
										  
											SELECT a.PimProductId,c.AttributeCode,ZPADV.AttributeDefaultValueCode AttributeValue ,a.ModifiedDate 
											FROM ZnodePimProductAttributeDefaultValue ZPPADV
											INNER JOIN ZnodePimAttributeDefaultValue ZPADV ON (ZPPADV.PimAttributeDefaultValueId = ZPADV.PimAttributeDefaultValueId)
											LEFT JOIN ZnodePimAttributeValue a ON (a.PimAttributeValueId = ZPPADV.PimAttributeValueId )
											LEFT JOIN ZnodePimAttribute c ON ( c.PimAttributeId=a.PimAttributeId )
											INNER JOIN Cte_DefaultValue CTDV ON (CTDV.AttributeCode = c.AttributeCode )
										)										
										SELECT PimProductId ,ModifiedDate
										FROM Cte_productIds WHERE  AttributeCode '+(SELECT TOP 1 AttributeCode  FROM @AttributeCodeValue )+' AND 
										AttributeValue '+(SELECT TOP 1 AttributeValue  FROM @AttributeCodeValue )+' 
										GROUP BY PimProductId,ModifiedDate Order By ModifiedDate DESC ';


					 SET @Order_BY = CASE WHEN @Order_BY = '' THEN 'ModifiedDate DESC' ELSE @Order_BY END 
					 	
					 SET @WhereClause = CAST(REPLACE(CAST(@WhereClause AS NVARCHAR(max)),'<WhereClauseModel><attributecode>'+(SELECT TOP 1 AttributeCode  FROM @AttributeCodeValue )+'</attributecode><attributevalue>'+(SELECT TOP 1 AttributeValue   FROM @AttributeCodeValue )+'</attributevalue></WhereClauseModel>','') AS XML )
					
				     INSERT INTO @TBL_ProductIds ( PimProductId, ModifiedDate )
					 EXEC (@SQL);
			  					 
					
						 INSERT INTO @ProductIdTable( PimProductId )
						 SELECT PimProductId 
						 FROM @TBL_ProductIds
					

                     INSERT INTO @TransferPimProductId
					 SELECT PimProductId
                     FROM @ProductIdTable
                   
				   			  
     DELETE FROM @ProductIdTable;
   --  SET @WhereClause = CAST(REPLACE(CAST(@WhereClause AS NVARCHAR(MAX)), @FirstWhereClause, ' 1 = 1') AS XML);
                 END
	            ELSE IF @PimProductId <> ''
			    BEGIN 
		
				 INSERT INTO @TransferPimProductId(id)
				 SELECT Item 
				 FROM dbo.split(@PimProductId,',')
			    END 
		
			
	 DECLARE  @ProductListIdRTR TransferId
	 DECLARE @TAb Transferid 
	 DECLARE @tBL_mainList TABLE (Id INT,RowId INT)
	 	IF @PimProductId <> ''  OR   @IsCallForAttribute=1 --OR (CAST(@WhereClause AS NVARCHAR(max))= N'' AND @Order_by <> N'' AND @AttributeCode = N'')
		BEGIN 
	 SET @IsProductNotIn = CASE WHEN @IsProductNotIn = 0 THEN 1  
					 WHEN @IsProductNotIn = 1 THEN 0 END 
		END 
	
	 INSERT INTO @ProductListIdRTR
	 EXEC Znode_GetProductList  @IsProductNotIn,@TransferPimProductId , @PimCatalogId,@IsCatalogFilter

	 IF CAST(@WhereClause AS NVARCHAR(max))<> N''
	 BEGIN 
	 
	  SET @SQL = 'SELECT Distinct PimProductId FROM ##Temp_PimProductId'+CAST(@@SPID AS VARCHAR(500))

	  EXEC Znode_GetFilterPimProductId @WhereClause,@ProductListIdRTR,@localeId
	  
      INSERT INTO @TAB 
	  EXEC (@SQL)
	 
	 END 
	 
	

	 IF EXISTS (SELECT Top 1 1 FROM @TAb ) OR CAST(@WhereClause AS NVARCHAR(max)) <> N''
	 BEGIN 
	 
	 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
	 SET @order_by = REPLACE(@order_by,'DisplayOrder','ProductName')
	 INSERT INTO @TBL_MainList(id,RowId)
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @TAb ,@AttributeCode,@localeId
	 
	 END 
	 ELSE 
	 BEGIN
	      
	 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
	 SET @order_by = REPLACE(@order_by,'DisplayOrder','ProductName')
	 INSERT INTO @TBL_MainList(id,RowId)
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @ProductListIdRTR ,@AttributeCode,@localeId 
	 END 
          

  			 INSERT INTO @PimProductIds ( Id  )
			 SELECT id FROM @TBL_MainList

			 DECLARE @TBL_PimProductIds transferId 
			 INSERT INTO @TBL_PimProductIds
			 SELECT id 
             FROM @PimProductIds
			 			 	
			 DECLARE @PimAttributeIds TransferId  
			 INSERT INTO @PimAttributeIds
			 SELECT PimAttributeId  
			 FROM [dbo].[Fn_GetProductGridAttributes]()
			 
			

			 INSERT INTO @TBL_AttributeDetails
             (PimProductId,
              AttributeValue,
              AttributeCode,
              PimAttributeId,
			  AttributeDefaultValue
             )
             EXEC Znode_GetProductsAttributeValue_newTesting
                  @TBL_PimProductIds,
                  @PimAttributeIds,
                  @localeId;
			
			UPDATE @TBL_AttributeDetails
			SET AttributeValue = ISNULL(AttributeValue,'')
			WHERE AttributeValue IS NULL 

----------------------------------------------------------------------------------------------------

			

		    declare @SKU SelectColumnList
			declare @TBL_Inventorydetails table (Quantity NVARCHAR(MAx),PimProductId INT)

			INSERT INTO @SKU
			SELECT AttributeValue 
			FROM @TBL_AttributeDetails
			WHERE AttributeCode = 'SKU'

			
			INSERT INTO @TBL_InventoryDetails(Quantity,PimProductId)
			EXEC Znode_GetPimProductAttributeInventory @SKU


			 INSERT INTO @FamilyDetails
             (PimAttributeFamilyId,
              PimProductId
             )
             EXEC [dbo].[Znode_GetPimProductAttributeFamilyId]
                  @PimProductIds,
                  1;
             
		 UPDATE a
               SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
                  INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                       AND LocaleId = @LocaleId);
             UPDATE a
               SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
                  INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                       AND LocaleId = @DefaultLocaleId)
             WHERE a.FamilyName IS NULL
                   OR a.FamilyName = '';
           	
			INSERT INTO @TBL_AttributeDetails             (PimProductId,              AttributeValue,              AttributeCode,              PimAttributeId             )
			SELECT PimProductId ,FamilyName, 'AttributeFamily',NULL
			FROM @FamilyDetails 
			
			INSERT INTO @TBL_AttributeDetails             (PimProductId,              AttributeValue,              AttributeCode,              PimAttributeId             )
			SELECT a.ID PimProductId ,th.DisplayName, 'PublishStatus',NULL
			FROM @PimProductIds a 
			INNER JOIN ZnodePimProduct b ON (b.PimProductId = a.ID)
			LEFT JOIN ZnodePublishState th ON (th.PublishStateId = b.PublishStateId)

	  INSERT INTO @TBL_AttributeDetailsLocale (PimProductId ,PimAttributeId,AttributeCode )
			SELECT  TBLAD.PimProductId ,TBLAD.PimAttributeId,TBLAD.AttributeCode 
			FROM @TBL_AttributeDetails TBLAD 
			GROUP BY  TBLAD.PimProductId ,TBLAD.PimAttributeId,TBLAD.AttributeCode 
       					

	    UPDATE TBLPP 
		SET AttributeValue = CTDD.AttributeValue 
		FROM  @TBL_AttributeDetails CTDD 
		INNER JOIN @TBL_AttributeDetailsLocale TBLPP ON (TBLPP.PimProductId = CTDD.PimProductId AND TBLPP.AttributeCode  = CTDD.AttributeCode)
		WHERE TBLPP.AttributeValue IS NULL 

    	SET @ProductXML =  '<MainProduct>'+ STUFF( (  SELECT '<Product>'+'<PimProductId>'+CAST(TBAD.PimProductId AS VARCHAR(50))+'</PimProductId>'
																		+'<AvailableInventory>'+CAST(ISNULL(IDD.[Quantity],'') AS VARCHAR(50))+'</AvailableInventory>'
		+ STUFF(    (  SELECT '<'+TBADI.AttributeCode+'>'+CAST( (SELECT  ''+TBADI.AttributeValue FOR XML PATH('')) AS NVARCHAR(max))+'</'+TBADI.AttributeCode+'>'   
															FROM @TBL_AttributeDetailsLocale TBADI      
															 WHERE TBADI.PimProductId = TBAD.PimProductId 
															 ORDER BY TBADI.PimProductId DESC
															 FOR XML PATH (''), TYPE
																).value('.', ' Nvarchar(max)'), 1, 0, '')+'</Product>'	   

		FROM @TBL_AttributeDetailsLocale TBAD
		INNER JOIN @TBL_MainList TBPI ON (TBAD.PimProductid = TBPI.id )
		LEFT JOIN @TBL_ProductIds TPT ON TBAD.PimProductId = TPT.PimProductId
		LEFT JOIN @TBL_InventoryDetails IDD ON (TBPI.id = IDD.PimProductId)
		GROUP BY TBAD.pimProductid, TPT.ModifiedDate,TBPI.RowId,IDD.Quantity
		ORDER BY TBPI.RowId 
		FOR XML PATH (''),TYPE).value('.', ' Nvarchar(max)'), 1, 0, '')+'</MainProduct>'
			--FOR XML PATH ('MainProduct'))


			SELECT  CAST(@ProductXML AS XML ) ProductXMl
		   
		     SELECT AttributeCode ,  ZPAL.AttributeName
			 FROM ZnodePimAttribute ZPA 
			 LEFT JOIN ZnodePiMAttributeLOcale ZPAL ON (ZPAL.PimAttributeId = ZPA.PimAttributeId )
             WHERE LocaleId = 1  
			 AND  IsCategory = 0 
			 AND ZPA.IsShowOnGrid = 1  
			 UNION ALL 
			 SELECT 'PublishStatus','Publish Status'

     IF EXISTS (SELECT Top 1 1 FROM @TAb )
	 BEGIN 

		  SELECT (SELECT COUNT(1) FROM @TAb) AS RowsCount   
	 END 
	 ELSE 
	 BEGIN
	 		  SELECT (SELECT COUNT(1) FROM @ProductListIdRTR) AS RowsCount   
	 END 
		;

             -- find the all locale values 
         END TRY
         BEGIN CATCH
		    SELECT ERROR_MESSAGE()
                DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ManageProductList_XML @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@LocaleId = '+CAST(@LocaleId AS VARCHAR(50))+',@PimProductId='+@PimProductId+',@IsProductNotIn='+CAST(@IsProductNotIn AS VARCHAR(50))+',@IsCallForAttribute='+CAST(@IsCallForAttribute AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_ManageProductList_XML',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;

         END CATCH;

     END;
	 GO

	 IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetCatalogCategoryProducts')
BEGIN 
	DROP PROCEDURE Znode_GetCatalogCategoryProducts
END
GO
CREATE PROCEDURE [dbo].[Znode_GetCatalogCategoryProducts]
( 
  @WhereClause      XML,
  @Rows             INT           = 100,
  @PageNo           INT           = 1,
  @Order_BY         VARCHAR(1000) = 'DisplayOrder asc',
  @RowsCount        INT OUT,
  @LocaleId         INT           = 1,
  @PimCategoryId    INT           = 0,
  @PimCatalogId     INT           = 0,
  @IsAssociated     BIT           = 0,
  @ProfileCatalogId INT           = 0,
  @AttributeCode   VARCHAR(max) = '',
  @PimCategoryHierarchyId INT =0,
  @PortalId INT=0
  )
AS
   
/*
	   Summary:  Get product List  Catalog / category / respective product list   		   
	   Unit Testing   
	   begin tran
	   declare @p7 int = 0  
	   EXEC Znode_GetCatalogCategoryProducts @WhereClause=N'',@Rows=10,@PageNo=1,@Order_By=N'',
	   @RowsCount=@p7 output,@PimCategoryId=11,@PimCatalogId = 1 ,@LocaleId=1 ,@ProfileCatalogId = 1 
	   rollback tran
	  
    */

     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY

			  SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

             DECLARE @DefaultAttributeFamily INT= dbo.Fn_GetDefaultPimProductFamilyId(), @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId(), @OrderId INT= 0;
             DECLARE @SQL VARCHAR(MAX), 
					 @PimProductId TransferId,--VARCHAR(MAX)= '', 
					 @PimAttributeId VARCHAR(MAX),
					 @OutPimProductIds VARCHAR(max);
             DECLARE @TransferPimProductId TransferId 

			 DECLARE @tbl_ProductPricingSku TABLE (sku nvarchar(200),RetailPrice numeric(28,6),SalesPrice numeric(28,6),TierPrice numeric(28,6),
			 TierQuantity numeric(28,6),CurrencyCode varchar(200),CurrencySuffix varchar(2000),CultureCode varchar(2000), ExternalId NVARCHAR(2000)
			 ,Custom1 NVARCHAR(MAX), Custom2 NVARCHAR(MAX), Custom3 NVARCHAR(MAX))				

			 CREATE TABLE #TBL_PimMediaAttributeId  (PimAttributeId INT ,AttributeCode VARCHAR(600))
			 INSERT INTO #TBL_PimMediaAttributeId (PimAttributeId,AttributeCode)
			 SELECT PimAttributeId,AttributeCode FROM Dbo.Fn_GetProductMediaAttributeId ()

			 --DECLARE @TBL_ProfileCatalogCategory TABLE
    --         (
				--  ProfileCatalogId     INT,
				--  PimProductId         INT,
				--  PimCategoryId        INT,
				--  PimCatalogCategoryId INT,
				--  PimCategoryHierarchyId INT
    --         );
             DECLARE @TBL_AttributeDefaultValue TABLE
             (
				  PimAttributeId            INT,
				  AttributeDefaultValueCode VARCHAR(100),
				  IsEditable                BIT,
				  AttributeDefaultValue     NVARCHAR(MAX),
				  DisplayOrder INT 
             );
             create TABLE #TBL_AttributeDetails 
             (
				  PimProductId   INT,
				  AttributeValue NVARCHAR(MAX),
				  AttributeCode  VARCHAR(600),
				  PimAttributeId INT
				  
             );
             DECLARE @FamilyDetails TABLE
             (
				  PimProductId         INT,
				  PimAttributeFamilyId INT,
				  FamilyName           NVARCHAR(3000)
             );
             DECLARE @TBL_AttributeValue TABLE
             (
				  PimCategoryAttributeValueId INT,
				  PimCategoryId               INT,
				  CategoryValue               NVARCHAR(MAX),
				  AttributeCode               VARCHAR(300),
				  PimAttributeId              INT
             );
             IF @Order_By = ''
                 BEGIN
                     SET @Order_By = 'DisplayOrder asc'
                 END;
             --IF @ProfileCatalogId > 0
             --    BEGIN
             --        INSERT INTO @TBL_ProfileCatalogCategory (ProfileCatalogId,PimProductId,PimCategoryId,PimCatalogCategoryId,PimCategoryHierarchyId)
             --        SELECT ZPC.ProfileCatalogId,PimProductId,PimCategoryId,ZCC.PimCatalogCategoryId,PimCategoryHierarchyId
             --        FROM ZnodePimCatalogCategory AS ZCC
             --        INNER JOIN ZnodeProfileCatalog AS ZPC ON(ZPC.PimCatalogId = ZCC.PimCatalogId)
             --        WHERE ZPC.ProfileCatalogId = @ProfileCatalogId

             --        AND NOT EXISTS
             --            (
             --               SELECT TOP 1 1
             --               FROM ZnodeProfileCatalogCategory AS ZPCC
             --               WHERE ZPCC.PimCatalogCategoryId = ZCC.PimCatalogCategoryId
             --            );
             --    END;
			 
             IF @PimCatalogId = 0
                 BEGIN
					INSERT INTO @TransferPimProductId 
                    SELECT PimProductId 
                    FROM ZnodePimCategoryProduct AS ZCP
                    WHERE ZCP.PimCategoryId = @PimCategoryId
					AND PimProductId IS NOT NULL 
                                                   
                 END;
             ELSE
                 BEGIN
				 
                     IF @IsAssociated = 0
                        AND @ProfileCatalogId > 0
                         BEGIN
				INSERT INTO @TransferPimProductId 
                SELECT DISTINCT PimProductId 
                FROM ZnodePimCatalogCategory AS ZCP
                WHERE ZCP.PimCatalogId = @PimCatalogId
              --  AND ZCP.PimCategoryId = @PimCategoryId
				AND ZCP.PimCategoryHierarchyId = @PimCategoryHierarchyId 
                AND NOT EXISTS
                (
                    SELECT TOP 1 1
                    FROM ZnodeProfileCatalogCategory AS TBPCC
                    WHERE TBPCC.PimCatalogCategoryId = ZCP.PimCatalogCategoryId
                        AND TBPCC.ProfileCatalogId = @ProfileCatalogId
                )
               	AND PimProductId IS NOT NULL                                         
                        END;
                     ELSE
                         BEGIN
                             IF @IsAssociated = 1
                                AND @ProfileCatalogId > 0
                                 BEGIN
						INSERT INTO @TransferPimProductId 
                        SELECT PimProductId
                        FROM ZnodePimCatalogCategory AS ZCP
                        WHERE ZCP.PimCatalogId = @PimCatalogId
                            AND ZCP.PimCategoryHierarchyId = @PimCategoryHierarchyId
                            AND EXISTS
                        (
                            SELECT TOP 1 1
                            FROM ZnodeProfileCatalogCategory AS TBPCC
                            WHERE TBPCC.PimCatalogCategoryId = ZCP.PimCatalogCategoryId
                                AND TBPCC.ProfileCatalogId = @ProfileCatalogId
                        )
                       AND PimProductId IS NOT NULL                                             
                                     SET @IsAssociated = 0;
                                 END;
                             ELSE
                                 BEGIN
					INSERT INTO @TransferPimProductId 
                    SELECT DISTINCT PimProductId 
                    FROM ZnodePimCatalogCategory AS ZCP
                    WHERE ZCP.PimCatalogId = @PimCatalogId
                 --   AND ZCP.PimCategoryId = @PimCategoryId
					AND ZCP.PimCategoryHierarchyId = @PimCategoryHierarchyId 
				    AND PimProductId IS NOT NULL  
			
         --           ORDER BY CASE WHEN @OrderId = 0
         --                       THEN 1
         --                       ELSE ZCP.PimCatalogCategoryId
								 --END 
								 --DESC
                                   
                                 END;
                         END;
                 END;
				
				 IF NOT EXISTS (SELECT TOP 1 1 FROM @TransferPimProductId)
				 BEGIN 
                  INSERT INTO @TransferPimProductId
				  SELECT '0'

				 END 

				 
             DECLARE @ProductIdTable TABLE
             ([PimProductId] INT,
              [CountId]      INT,
              PimCategoryId  INT,
              RowId          INT IDENTITY(1,1)
             );
            DECLARE  @ProductListIdRTR TransferId
	 DECLARE @TAb Transferid 
	 DECLARE @tBL_mainList TABLE (Id INT,RowId INT)
	 --	IF @PimProductId <> ''  OR   @IsCallForAttribute=1
		--BEGIN 
	 SET @IsAssociated = CASE WHEN @IsAssociated = 0 THEN 1  
					 WHEN @IsAssociated = 1 THEN 0 END 
		--END 

		

	 INSERT INTO @ProductListIdRTR
	 EXEC Znode_GetProductList  @IsAssociated,@TransferPimProductId
	 


	 IF CAST(@WhereClause AS NVARCHAR(max))<> N''
	 BEGIN 
	 
	  SET @SQL = 'SELECT PimProductId FROM ##Temp_PimProductId'+CAST(@@SPID AS VARCHAR(500))

	  EXEC Znode_GetFilterPimProductId @WhereClause,@ProductListIdRTR,@localeId
	  
      INSERT INTO @TAB 
	  EXEC (@SQL)
	-- SELECT * FROM @TAB
	 END 
	 
	 
	 IF EXISTS (SELECT Top 1 1 FROM @TAb ) OR CAST(@WhereClause AS NVARCHAR(max)) <> N''
	 BEGIN 
	 
		 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
		 --SET @order_by = REPLACE(@order_by,'DisplayOrder','ProductName')
		 INSERT INTO @TBL_MainList(id,RowId)
		 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @TAb ,@AttributeCode,@localeId,
		 @PimCategoryHierarchyId=@PimCategoryHierarchyId ,@PortalId=@PortalId
	 
		 END 
	 ELSE 
	 BEGIN
	      
	 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
	 --SET @order_by = REPLACE(@order_by,'DisplayOrder','ProductName')
	 INSERT INTO @TBL_MainList(id,RowId)
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @ProductListIdRTR ,@AttributeCode,@localeId,
	 @PimCategoryHierarchyId=@PimCategoryHierarchyId ,@PortalId=@PortalId 
	 
	 END 

	
	
			 INSERT INTO @ProductIdTable
             (PimProductId) 
			 SELECT id 
			 FROM @TBL_MainList 
            
			 UPDATE @ProductIdTable
               SET
                   PimCategoryId = @PimCategoryId;
             --SET @PimProductId = SUBSTRING(
             --                             (
             --                                 SELECT ','+CAST(PimProductId AS VARCHAR(100))
             --                                 FROM @ProductIdTable
             --                                 FOR XML PATH('')
             --                             ), 2, 4000);

			 INSERT INTO @PimProductId  ( Id )
			 SELECT PimProductId FROM @ProductIdTable

             SET @PimAttributeId = SUBSTRING((SELECT ','+CAST(PimAttributeId AS VARCHAR(50)) FROM [dbo].[Fn_GetGridPimAttributes]() FOR XML PATH('')), 2, 4000);
             
			 DECLARE @PimAttributeIds TransferId  
			 INSERT INTO @PimAttributeIds
			 SELECT PimAttributeId  
			 FROM [dbo].[Fn_GetProductGridAttributes]()
		
			 
			
			 INSERT INTO @TBL_AttributeDefaultValue (PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder)   
			 EXEC Znode_GetAttributeDefaultValueLocale @PimAttributeId,@LocaleId;
     
			 INSERT INTO #TBL_AttributeDetails (PimProductId,AttributeValue,AttributeCode,PimAttributeId)
             EXEC Znode_GetProductsAttributeValue @PimProductId,@PimAttributeId,@localeId;
			  
             SET @PimAttributeId = [dbo].[Fn_GetCategoryNameAttributeId]();
			 
             INSERT INTO @TBL_AttributeValue (PimCategoryAttributeValueId,PimCategoryId,CategoryValue,AttributeCode,PimAttributeId)
             EXEC [dbo].[Znode_GetCategoryAttributeValue] @PimCategoryId,@PimAttributeId,@LocaleId;
         
				SELECT TBAI.PimProductId , FNMA.PimAttributeId ,ISNULL(CASE WHEN ZMC.CDNURL = '' THEN NULL ELSE ZMC.CDNURL END,ZMC.URL)+ZMSM.ThumbnailFolderName+'/'+ zm.PATH as AttributeValue
				INTO #ProductMedia
				FROM ZnodeMedia AS ZM
				INNER JOIN ZnodeMediaConfiguration ZMC  ON (ZM.MediaConfigurationId = ZMC.MediaConfigurationId)
				INNER JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMC.MediaServerMasterId)
				INNER JOIN #TBL_AttributeDetails AS TBAI ON (TBAI.AttributeValue  = CAST(ZM.MediaId AS VARCHAR(50)) )
				INNER JOIN  #TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBAI.PimATtributeId)
				
				SELECT PimProductId, PimAttributeId,
					STUFF((SELECT ','+AttributeValue FROM #ProductMedia PM1 
					WHERE PM1.PimProductId = PM.PimProductId AND PM.PimAttributeId = PM1.PimAttributeId FOR XML PATH('')),1,1,'') AS AttributeValue 
				into #Cte_ProductMedia
				FROM #ProductMedia PM
			  
		      UPDATE TBAV SET AttributeValue = CTPM.AttributeVALue
			  FROM #TBL_AttributeDetails TBAV 
			  INNER JOIN #Cte_ProductMedia CTPM ON CTPM.PimProductId = TBAV.PimProductId  AND CTPM.PimAttributeId = TBAV.PimAttributeId 
			  AND CTPM.PimAttributeId = TBAV.PimAttributeId;
			    
             INSERT INTO @FamilyDetails (PimAttributeFamilyId,PimProductId)
             EXEC [dbo].[Znode_GetPimProductAttributeFamilyId] @PimProductId,1;

             UPDATE a
             SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
             INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                  AND LocaleId = @LocaleId);
             UPDATE a
             SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
             INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                  AND LocaleId = @DefaultLocaleId)
             WHERE a.FamilyName IS NULL
                   OR a.FamilyName = '';

				

             SELECT zpp.PimProductid AS ProductId,zpp.PimProductId,@PimCatalogId AS PimCatalogId,zpp.PimCategoryId,[ProductName],
			 ProductType,ISNULL(zf.FamilyName, '') AS AttributeFamily,[SKU],[Price],[Quantity],
                    CASE
                        WHEN Piv.[IsActive] IS NULL
                        THEN CAST(0 AS BIT)
                        ELSE CAST(Piv.[IsActive] AS BIT)
                    END AS [IsActive],
                    piv.[ProductImage] ImagePath,
                    [Assortment],
                    TBAV.CategoryValue AS [CategoryName],
                    @LocaleId AS LocaleId,
                    ZCC.[DisplayOrder],
                    ZPCC.ProfileCatalogCategoryId,
                    zpp.RowId,
					ZCC.PimCategoryHierarchyId
			 INTO #temp_ProductDetails 
             FROM @ProductIdTable AS zpp
			 INNER JOIN @TBL_MainList TMM ON (TMM.Id = zpp.PimProductId)
                  LEFT JOIN @FamilyDetails AS zf ON(zf.PimProductId = zpp.PimProductId)
                  INNER JOIN
             (
                 SELECT PimProductId,
                        AttributeValue,
                        AttributeCode
                 FROM #TBL_AttributeDetails
             ) TB PIVOT(MAX(AttributeValue) FOR AttributeCode IN([ProductName],
                                                                 [SKU],
                                                                 [Price],
                                                                 [Quantity],
                                                                 [IsActive],
                                                                 [ProductType],
                                                                 [ProductImage],
                                                                 [Assortment],
                                                                 [DisplayOrder])) AS Piv ON(Piv.PimProductId = zpp.PimProductid)
                  LEFT JOIN @TBL_AttributeValue AS TBAV ON(TBAV.PimCategoryId = ZPP.PimCategoryId)
                  LEFT JOIN ZnodePimCategoryProduct AS ZPCP ON(ZPCP.PimProductId = Zpp.PimProductId
                                                               AND ZPCP.PimCategoryId = Zpp.PimCategoryId)
                  LEFT JOIN ZnodePimCatalogCategory AS ZCC ON(ZCC.PimProductId = Zpp.PimProductId
                                                             AND ZCC.PimCategoryHierarchyId = @PimCategoryHierarchyId
                                                              AND ZCC.PimCatalogId = @PimCatalogId)
                  LEFT JOIN ZnodeProfileCatalogCategory AS ZPCC ON(ZPCC.PimCatalogCategoryId = ZCC.PimCatalogCategoryId
                                                                   AND ZPCC.ProfileCatalogId = @ProfileCatalogId)
                  
            ORDER BY zpp.RowId

			DECLARE @SKUS VARCHAR(max) 
			,@userId INT = 0,@Date DATETIME  = dbo.FN_getDate() 

			SELECT @SKUS = COALESCE(@SKUS+',' ,'') + SKU
			FROM #temp_ProductDetails
			 				
			INSERT INTO @tbl_ProductPricingSku		
			EXEC Znode_GetPublishProductPricingBySku 	@SKU=@SKUS, @PortalId= @PortalId,@Userid= @userid ,@currentUtcDate=	@Date
			
			SELECT DISTINCT ProductId, PimProductId	,PimCatalogId,	PimCategoryId,	ProductName	,ProductType,	
			AttributeFamily,	a.SKU	,dbo.Fn_GetPortalCurrencySymbol(@portalId)+CAST(Dbo.Fn_GetDefaultPriceRoundOff(RetailPrice) AS NVARCHAR(max)) Price,	Quantity,	
			IsActive,	ImagePath,	Assortment,	CategoryName,	LocaleId,	DisplayOrder	,ProfileCatalogCategoryId,	RowId,	PimCategoryHierarchyId	
			FROM #temp_ProductDetails a 
			LEFT JOIN @tbl_ProductPricingSku b ON (dbo.FN_TRIM(b.SKU) = a.SKU )
			ORDER BY RowId
					  
     IF EXISTS (SELECT Top 1 1 FROM @TAb )
	 BEGIN 

		  SELECT @RowsCount = (SELECT COUNT(1) FROM @TAb) 
	 END 
	 ELSE 
	 BEGIN
	 		  SELECT @RowsCount =(SELECT COUNT(1) FROM @ProductListIdRTR)   
	 END 
	

         END TRY
         BEGIN CATCH
		    SELECT ERROR_message()
             DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetCatalogCategoryProducts @WhereClause = '''+ISNULL(CAST(@WhereClause AS VARCHAR(MAX)),'''''')+''',@Rows='+ISNULL(CAST(@Rows AS
			VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')+',
			@LocaleId = '+ISNULL(CAST(@LocaleId AS VARCHAR(50)),'''')+',@PimCategoryId='+ISNULL(CAST(@PimCategoryId AS VARCHAR(50)),'''')+',@PimCatalogId='+ISNULL(CAST(@PimCatalogId AS VARCHAR(50)),'''')+',@IsAssociated='+ISNULL(CAST(@IsAssociated AS VARCHAR(50)),'''')+',
			@ProfileCatalogId='+ISNULL(CAST(@ProfileCatalogId AS VARCHAR(50)),'''')+',@AttributeCode='''+ISNULL(CAST(@AttributeCode AS VARCHAR(50)),'''''')+''',@PimCategoryHierarchyId='+ISNULL(CAST(@PimCategoryHierarchyId AS VARCHAR(10)),'''');
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetCatalogCategoryProducts',
				@ErrorInProcedure = 'Znode_GetCatalogCategoryProducts',
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetImportTemplateLogs')
BEGIN 
	DROP PROCEDURE Znode_GetImportTemplateLogs
END
GO
CREATE  PROCEDURE [dbo].[Znode_GetImportTemplateLogs]
( @WhereClause NVARCHAR(max),
  @Rows        INT           = 100,
  @PageNo      INT           = 1,
  @Order_BY    VARCHAR(1000)  = '',
  @RowsCount   INT OUT)
AS
    /*
	
    Summary : Get Import Template Log details and errorlog associated to it
     Unit Testing 
	 begin tran
    DECLARE @RowsCount INT;
    EXEC Znode_GetImportTemplateLogs @WhereClause = '',@Rows = 1000,@PageNo = 1,@Order_BY = NULL,@RowsCount = @RowsCount OUT;
	rollback tran
   
    */
	 BEGIN
        BEGIN TRY
          SET NOCOUNT ON;

			 SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

		     DECLARE @SQL NVARCHAR(MAX);
             DECLARE @TBL_ErrorLog TABLE(ImportHeadId INT, ImportName NVARCHAR(100),TemplateName VARCHAR(300) ,[Status] VARCHAR(50) ,ProcessStartedDate DATETIME ,ProcessCompletedDate DATETIME
										,ImportTemplateId INT,ImportProcessLogId INT ,RowId INT,CountNo  INT)


			IF Object_id('Tempdb..[#ErrorLog]') IS NOT NULL
			DROP TABLE Tempdb..[#ErrorLog]

			CREATE TABLE #ErrorLog(ImportHeadId INT, ImportName NVARCHAR(100), TemplateName NVARCHAR(600),Status NVARCHAR(100),
			ProcessStartedDate DATETIME,ProcessCompletedDate DATETIME,ImportTemplateId INT,ImportProcessLogId INT,Createdby INT)

					   INSERT INTO #ErrorLog(ImportHeadId,ImportName,TemplateName,Status,ProcessStartedDate,ProcessCompletedDate,ImportTemplateId,ImportProcessLogId,Createdby)
						select zih.ImportHeadId, zih.NAME ImportName, zit.TemplateName,zipl.Status ,
						zipl.ProcessStartedDate,
						zipl.ProcessCompletedDate,zipl.ImportTemplateId ,zipl.ImportProcessLogId,zipl.Createdby
						from ZnodeImportHead zih inner join  ZnodeImportTemplate zit ON zih.ImportHeadId = zit.ImportHeadId  
						Inner join ZnodeImportProcessLog zipl on zit.ImportTemplateId = zipl.ImportTemplateId
						
			            SET @SQL = ';With Cte_ErrorlogFilter AS
						(

					   SELECT ImportHeadId,ImportName,TemplateName,Status,ProcessStartedDate,ProcessCompletedDate,ImportTemplateId
								,ImportProcessLogId,'+dbo.Fn_GetPagingRowId(@Order_BY,'ImportProcessLogId DESC')+', Count(*)Over() CountNo
					   FROM #ErrorLog
					   WHERE 1 = 1 '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'
						) 
					   SELECT ImportHeadId, ImportName,TemplateName ,Status,ProcessStartedDate,ProcessCompletedDate,ImportTemplateId ,ImportProcessLogId,RowId,CountNo 
					   FROM Cte_ErrorlogFilter 
					   '+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)
	       
			 INSERT INTO @TBL_ErrorLog (ImportHeadId, ImportName,TemplateName ,[Status],ProcessStartedDate,ProcessCompletedDate,ImportTemplateId ,ImportProcessLogId,RowId,CountNo )
			 EXEC(@SQl)												
             SET @RowsCount = ISNULL((SELECT TOP 1 CountNo FROM @TBL_ErrorLog ), 0);

			 SELECT ImportHeadId, ImportName,TemplateName ,Status,ProcessStartedDate,ProcessCompletedDate,ImportTemplateId ,ImportProcessLogId
			 FROM @TBL_ErrorLog

			 IF Object_id('Tempdb..[#ErrorLog]') IS NOT NULL DROP TABLE Tempdb..[#ErrorLog]
           
         END TRY
         BEGIN CATCH
              DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetImportTemplateLogs @WhereClause = '''+ISNULL(@WhereClause,'''''')+''',@Rows='+ISNULL(CAST(@Rows AS
			VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetImportTemplateLogs',
				@ErrorInProcedure = 'Znode_GetImportTemplateLogs',
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;                   
         END CATCH;
     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPimCategoryProductList')
BEGIN 
	DROP PROCEDURE Znode_GetPimCategoryProductList
END
GO
CREATE PROCEDURE [dbo].[Znode_GetPimCategoryProductList]
(   @WhereClause   XML,
    @Rows          INT           = 100,
    @PageNo        INT           = 1,
    @Order_BY      VARCHAR(1000) = '',
    @RowsCount     INT OUT,
    @LocaleId      INT           = 1,
    @PimCategoryId INT,
    @IsAssociated  BIT           = 0
	,@AttributeCode VARCHAR(max) = ''
	)
AS
/*
     Summary :- This Procedure is used to get the product list for category products
				The result is fetched order by DisplayOrder or status as per requirement in both asc and desc

     Unit Testing
	 begin tran
     EXEC Znode_GetPimCategoryProductList '',@RowsCount = 0, @PimCategoryId = 22,@Order_BY ='DisplayOrder asc'
	 rollback tran
	*/
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;

			  SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

             DECLARE @TBL_AttributeDefaultValue TABLE
             (PimAttributeId            INT,
              AttributeDefaultValueCode VARCHAR(100),
              IsEditable                BIT,
              AttributeDefaultValue     NVARCHAR(MAX),
			  DisplayOrder INT
             );
			 DECLARE @TransferPimProductId TransferId
             DECLARE @TBL_AttributeDetails AS TABLE
             (PimProductId   INT,
              AttributeValue NVARCHAR(MAX),
              AttributeCode  VARCHAR(600),
              PimAttributeId INT
             );
             DECLARE @TBL_FamilyDetails TABLE
             (PimProductId         INT,
              PimAttributeFamilyId INT,
              FamilyName           NVARCHAR(3000)
             );
             DECLARE @OrderByDisplay INT= 0;
             DECLARE @DefaultAttributeFamilyId INT= dbo.Fn_GetDefaultPimProductFamilyId(), @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId();

			 DECLARE @TBL_ProductIdTable TABLE
             ([PimProductId] INT,
              [CountId]      INT,
              PimCategoryId  INT,
              RowId          INT
             );

             DECLARE @PimProductId TransferId ,--VARCHAR(MAX)= '',
					 @PimAttributeId VARCHAR(MAX),
					 @OutPimProductIds VARCHAR(MAX);

			 DECLARE @PimProductIds TransferId

             IF @Order_BY LIKE '%DisplayOrder%'
                 BEGIN
                     SET @OrderByDisplay = 1;
                 END;
             ELSE
             IF @Order_BY LIKE '%Status%'
                 BEGIN
                     SET @OrderByDisplay = 2;
                 END;
			 DECLARE @TBL_PimMediaAttributeId TABLE (PimAttributeId INT ,AttributeCode VARCHAR(600))
			 INSERT INTO @TBL_PimMediaAttributeId (PimAttributeId,AttributeCode)
			 SELECT PimAttributeId,AttributeCode FROM Dbo.Fn_GetProductMediaAttributeId ()

            INSERT INTO @TransferPimProductId
			SELECT PimProductId
			FROM ZnodePimCategoryProduct ZCP
            WHERE ZCP.PimCategoryId = @PimCategoryId
			ORDER BY CASE WHEN @Order_By LIKE '% DESC%'
            THEN
			CASE WHEN @OrderByDisplay = 1
					THEN ZCP.DisplayOrder
				WHEN @OrderByDisplay = 2
					THEN ZCP.Status
				 ELSE 1 END
				 ELSE 1 END DESC,
            CASE WHEN @Order_By LIKE '% ASC%'
				THEN
					CASE WHEN @OrderByDisplay = 1
					THEN ZCP.DisplayOrder
						WHEN @OrderByDisplay = 2
							THEN ZCP.Status
							 ELSE 1 END
							  ELSE 1 END
	         IF NOT EXISTS (SELECT TOP 1 1 FROM @TransferPimProductId  )
			 BEGIN
			   INSERT INTO @TransferPimProductId
			   SELECT '0'
			   SET @IsAssociated = 0
             END


   DECLARE @SQL NVARcHAR(max)= ''
		 DECLARE  @ProductListIdRTR TransferId
	 DECLARE @TAb Transferid
	 DECLARE @tBL_mainList TABLE (Id INT,RowId INT)
	 --	IF   @IsCallForAttribute=1
		--BEGIN
	 SET @IsAssociated = CASE WHEN @IsAssociated = 0 THEN 1
					 WHEN @IsAssociated = 1 THEN 0 END
		--END
	 INSERT INTO @ProductListIdRTR
	 EXEC Znode_GetProductList  @IsAssociated,@TransferPimProductId

	 IF CAST(@WhereClause AS NVARCHAR(max))<> N''
	 BEGIN

	  SET @SQL = 'SELECT PimProductId FROM ##Temp_PimProductId'+CAST(@@SPID AS VARCHAR(500))

	  EXEC Znode_GetFilterPimProductId @WhereClause,@ProductListIdRTR,@localeId

      INSERT INTO @TAB
	  EXEC (@SQL)

	 END

	 IF EXISTS (SELECT Top 1 1 FROM @TAb ) OR CAST(@WhereClause AS NVARCHAR(max)) <> N''
	 BEGIN

	 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
	 SET @order_by = REPLACE(@order_by,'DisplayOrder','ProductName')
	 INSERT INTO @TBL_MainList(id,RowId)
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @TAb ,@AttributeCode,@localeId

	 END
	 ELSE
	 BEGIN

	 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
	 SET @order_by = REPLACE(@order_by,'DisplayOrder','ProductName')
	 INSERT INTO @TBL_MainList(id,RowId)
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @ProductListIdRTR ,@AttributeCode,@localeId
	 END
			 INSERT INTO @TBL_ProductIdTable(PimProductId,RowId)
			 SELECT ID ,RowId FROM @TBL_MainList SP

			 INSERT INTO @PimProductIds ( Id )
			 SELECT Id FROM @TBL_MainList SP

             UPDATE @TBL_ProductIdTable SET PimCategoryId = @PimCategoryId;
             SET @PimAttributeId = SUBSTRING((SELECT ','+CAST(PimAttributeId AS VARCHAR(50)) FROM [dbo].[Fn_GetGridPimAttributes]() FOR XML PATH('')), 2, 4000);

			 --INSERT INTO @TBL_AttributeDefaultValue(PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder)
    --         EXEC Znode_GetAttributeDefaultValueLocale @PimAttributeId,@LocaleId;

             INSERT INTO @TBL_AttributeDetails(PimProductId, AttributeValue,AttributeCode,PimAttributeId)
			 EXEC Znode_GetProductsAttributeValue @PimProductIds,@PimAttributeId,@LocaleId;
             --EXEC Znode_GetProductsAttributeValue @OutPimProductIds,@PimAttributeId,@LocaleId;

             --- find the specific attributes and values ----
    --         WITH Cte_UpdateDefaultAttributeValue
			 --AS (SELECT PimProductId,AttributeCode,AttributeValue,SUBSTRING((SELECT ','+TBADV.AttributeDefaultValue
			 --FROM @TBL_AttributeDefaultValue AS TBADV
    --         INNER JOIN ZnodePimAttribute AS TBAC ON(TBADV.PimAttributeId = TBAC.PimAttributeId)
			 --WHERE TBAC.AttributeCode = TBAD.AttributeCode
    --         AND EXISTS(SELECT TOP 1 1 FROM dbo.split(TBAD.AttributeValue, ',') AS SP WHERE Sp.item = TBADV.AttributeDefaultValueCode)
    --         FOR XML PATH('')), 2, 4000) AS AttributeDefaultValue

			 --FROM @TBL_AttributeDetails AS TBAD)

    --         UPDATE TBAD SET AttributeValue = CTUDAV.AttributeDefaultValue
			 --FROM @TBL_AttributeDetails TBAD
			 --INNER JOIN Cte_UpdateDefaultAttributeValue CTUDAV
			 --ON(CTUDAV.PimProductId = TBAD.PimProductId AND CTUDAV.AttributeCode = TBAD.AttributeCode) WHERE AttributeDefaultValue IS NOT NULL;

			   ;WITH Cte_ProductMedia
               AS (SELECT TBA.PimProductId , TBA.PimAttributeId
			   , SUBSTRING( ( SELECT ','+ISNULL(CASE WHEN ZMC.CDNURL = '' THEN NULL ELSE ZMC.CDNURL END,ZMC.URL)+ZMSM.ThumbnailFolderName+'/'+ zm.PATH  
			   FROM ZnodeMedia AS ZM
               INNER JOIN ZnodeMediaConfiguration ZMC  ON (ZM.MediaConfigurationId = ZMC.MediaConfigurationId)
			   INNER JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMC.MediaServerMasterId)
			   INNER JOIN @TBL_AttributeDetails AS TBAI ON (TBAI.AttributeValue  = CAST(ZM.MediaId AS VARCHAR(50)) )
			   INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBAI.PimATtributeId)
			   WHERE TBAI.PimProductId = TBA.PimProductId AND TBAI.PimAttributeId = TBA.PimAttributeId
			   FOR XML PATH('') ), 2 , 4000) AS AttributeValue , SUBSTRING( ( SELECT ','+AttributeValue
			   FROM  @TBL_AttributeDetails AS TBAI
			   WHERE TBAI.PimProductId = TBA.PimProductId AND TBAI.PimAttributeId = TBA.PimAttributeId
			   FOR XML PATH('') ), 2 , 4000) MediaIds
			   FROM @TBL_AttributeDetails AS TBA
			   INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBA.PimATtributeId ))

		      UPDATE TBAV SET AttributeValue = CTPM.AttributeVALue
			  FROM @TBL_AttributeDetails TBAV
			  INNER JOIN Cte_ProductMedia CTPM ON CTPM.PimProductId = TBAV.PimProductId  AND CTPM.PimAttributeId = TBAV.PimAttributeId
			  AND CTPM.PimAttributeId = TBAV.PimAttributeId;



			 INSERT INTO @TBL_FamilyDetails(PimAttributeFamilyId,PimProductId)
             EXEC [dbo].[Znode_GetPimProductAttributeFamilyId] @PimProductId,1;

             UPDATE TFD SET FamilyName = ZPFL.AttributeFamilyName FROM @TBL_FamilyDetails TFD INNER JOIN ZnodePimFamilyLocale ZPFL
			 ON(TFD.PimAttributeFamilyId = ZPFL.PimAttributeFamilyId AND LocaleId = @LocaleId);

             UPDATE TFD SET FamilyName = ZPFL.AttributeFamilyName FROM @TBL_FamilyDetails TFD INNER JOIN ZnodePimFamilyLocale ZPFL
			 ON(TFD.PimAttributeFamilyId = ZPFL.PimAttributeFamilyId AND LocaleId = @DefaultLocaleId) WHERE TFD.FamilyName IS NULL OR TFD.FamilyName = '';




             SELECT zpp.[PimProductId] AS [Productid],zpp.[PimProductId],ZPCP.[PimCategoryId],TBFD.FamilyName,[ProductName],[SKU],[ProductType],[Assortment],
             CASE WHEN ZPCP.Status IS NULL THEN CAST(0 AS BIT) ELSE CAST(ZPCP.Status AS BIT) END AS [Status],
			 piv.[ProductImage] [ImagePath],ZPCP.DisplayOrder

			 FROM @TBL_ProductIdTable AS zpp
			 LEFT JOIN ZnodePimCategoryProduct ZPCP ON(ZPCP.PimProductId = Zpp.PimProductId AND ZPCP.PimCategoryId = Zpp.PimCategoryId)
             INNER JOIN (SELECT PimProductId,AttributeValue,AttributeCode FROM @TBL_AttributeDetails) TB
			  PIVOT(MAX([AttributeValue])
			 FOR [AttributeCode] IN([ProductName],[IsActive],[ProductImage],[SKU],[ProductType],[Assortment])) AS Piv ON(Piv.[PimProductId] = zpp.[PimProductId])
             LEFT JOIN @TBL_FamilyDetails TBFD ON(TBFD.PimProductId = zpp.[PimProductId])
             ORDER BY CASE WHEN @Order_By LIKE '% DESC%' THEN CASE WHEN @OrderByDisplay = 1 THEN ZPCP.DisplayOrder
			 WHEN @OrderByDisplay = 2 THEN ZPCP.Status ELSE 1 END ELSE 1 END DESC,
             CASE WHEN @Order_By LIKE '% ASC%' THEN CASE WHEN @OrderByDisplay = 1 THEN ZPCP.DisplayOrder
             WHEN @OrderByDisplay = 2 THEN ZPCP.Status ELSE 1 END ELSE 1 END,zpp.RowId;
			   IF EXISTS (SELECT Top 1 1 FROM @TAb )
	 BEGIN

		  SELECT @RowsCount = (SELECT COUNT(1) FROM @TAb)
	 END
	 ELSE
	 BEGIN
	 		  SELECT @RowsCount=(SELECT COUNT(1) FROM @ProductListIdRTR)
	 END


         END TRY
         BEGIN CATCH
		  SELECT ERROR_MESSAGE()
            DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPimCategoryProductList @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@LocaleId = '+CAST(@LocaleId AS VARCHAR(50))+',@PimCategoryId='+CAST(@PimCategoryId AS VARCHAR(50))+',@IsAssociated='+CAST(@IsAssociated AS VARCHAR(50))+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));

             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;

             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetPimCategoryProductList',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportValidatePimProductData')
BEGIN 
	DROP PROCEDURE Znode_ImportValidatePimProductData
END
GO
CREATE PROCEDURE [dbo].[Znode_ImportValidatePimProductData]
(   @ImportHeadName     VARCHAR(200),
    @TableName          VARCHAR(200),
    @NewGUID            NVARCHAR(200),
    @TemplateId         INT,
    @UserId             INT,
    @LocaleId           INT           = 1,
    @IsCategory         INT           = 0,
    @DefaultFamilyId    INT           = 0,
    @ImportProcessLogId INT,
    @PriceListId        INT,
	@CountryCode VARCHAR(100) = '',
	@PimCatalogId         INT    = 0 ,
	@PortalId int = 0,
	@IsAccountAddress bit = 0 )
AS
     SET NOCOUNT ON;

/*
    Summary :   Import PimProduct / Price / Inventory / Category / Category Associated Data 
    Process :   Admin site will upload excel / csv file in database and create global temporary table
				Procedure Znode_ImportValidatePimProductData will validate data with attribute validation rule
				If datatype validation issue found in input daata will logged into table "ZnodeImportLog"
				If Data is correct and record count in table ZnodeImportLog will be 0 then process for import data into Base tables
				To import data call procedure "Znode_ImportPimProductData"
    		  
				SourceColumnName: CSV file column headers
				TargetColumnName: Attributecode from ZnodePimAttribute Table (Consider those Attributecodes configured with default family only)
*/

     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             --BEGIN TRAN TRN_ImportValidProductData;
             DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
             DECLARE @SQLQuery NVARCHAR(MAX), @AttributeTypeName NVARCHAR(100), @AttributeCode NVARCHAR(300), @AttributeId INT, @IsRequired BIT, @SourceColumnName NVARCHAR(600), @ControlName VARCHAR(300), @ValidationName VARCHAR(100), @SubValidationName VARCHAR(300), @ValidationValue VARCHAR(300), @RegExp VARCHAR(300), @CreateDateString NVARCHAR(300), @DefaultLocaleId INT, @ImportHeadId INT, @CheckedSourceColumn NVARCHAR(600)= '', @Status BIT= 0,
			    @CsvColumnString nvarchar(max),
				@FailedRecordCount BIGINT,
				@SuccessRecordCount BIGINT

             DECLARE @FamilyAttributeDetail TABLE
             (PimAttributeId       INT,
              AttributeTypeName    VARCHAR(300),
              AttributeCode        VARCHAR(300),
              SourceColumnName     NVARCHAR(600),
              IsRequired           BIT,
              PimAttributeFamilyId INT
             );
             DECLARE @AttributeDetail TABLE
             (PimAttributeId    INT,
              AttributeTypeName VARCHAR(300),
              AttributeCode     VARCHAR(300),
              SourceColumnName  NVARCHAR(600),
              IsRequired        BIT,
              ControlName       VARCHAR(300),
              ValidationName    VARCHAR(100),
              SubValidationName VARCHAR(300),
              ValidationValue   VARCHAR(300),
              RegExp            VARCHAR(300)
             );

			 --IF ('tempdb..#DefaultAttributeCode') IS NOT NULL
				--drop table #DefaultAttributeCode

			CREATE TABLE #DefaultAttributeCode
			(AttributeTypeName          VARCHAR(300),
			PimAttributeDefaultValueId INT,
			PimAttributeId             INT,
			AttributeDefaultValueCode  VARCHAR(100)
			);

			--SET @SQLQuery = 'Select * into _tempSeo FROM  '+@TableName
   --          EXEC sys.sp_sqlexec  @SQLQuery;


			IF( @ImportHeadName = 'B2BCustomer' )
			BEGIN
				EXEC ZnodeB2BCustomerMapping @ImportHeadName = @ImportHeadName, @TableName = @TableName
			END
		
             DECLARE @GlobalTempTableColumns TABLE(ColumnName NVARCHAR);
             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM INFORMATION_SCHEMA.TABLES
                 WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#InvalidDefaultData'
             )
                 CREATE TABLE #InvalidDefaultData
                 (RowNumber  INT,
                  Value      NVARCHAR(MAX),
                  ColumnName NVARCHAR(600)
                 );
             ELSE
             DROP TABLE #InvalidDefaultData;
             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM INFORMATION_SCHEMA.TABLES
                 WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#GlobalTempTableColumns'
             )
                 BEGIN

                     SET @SQLQuery = 'SELECT Column_Name, '''+@ImportHeadName+''' AS ImportHeadName  from tempdb.INFORMATION_SCHEMA.COLUMNS	where table_name = object_name(object_id('''+@TableName+'''),
					(select database_id from sys.databases where name = ''tempdb''))';
                     CREATE TABLE #GlobalTempTableColumns
                     (ColumnName   NVARCHAR(MAX),
                      TypeOfImport NVARCHAR(100)
                     );
                     INSERT INTO #GlobalTempTableColumns
                     (ColumnName,
                      TypeOfImport
                     )
                     EXEC sys.sp_sqlexec
                          @SQLQuery;
                 END;
		  -- If Exists ( Select  count(1)  from #GlobalTempTableColumns GROUP BY ColumnName  Having count(1) > 1 )
		  -- Begin
			 --   INSERT INTO ZnodeImportLog(ErrorDescription,ColumnName,Data,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
    --               Select  46,ColumnName,'',@newGUID,@UserId,@GetDate,@UserId,@GetDate, @ImportProcessLogId  from #GlobalTempTableColumns GROUP BY ColumnName  Having count(1) > 1 
				
				----'Multiple occurance of column are not allow for'
		  -- END

             IF EXISTS
             (
                 SELECT TOP 1 1
                 FROM #GlobalTempTableColumns
                 WHERE ColumnName IN('PimCategoryId', 'PimProductId', 'RowNumber')
             )
                 BEGIN
                     INSERT INTO ZnodeImportLog
                     (ErrorDescription,
                      ColumnName,
                      Data,
                      GUID,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate,
                      ImportProcessLogId
                     )
                     VALUES
                     (43,
                      '',
                      '',
                      @newGUID,
                      @UserId,
                      @GetDate,
                      @UserId,
                      @GetDate,
                      @ImportProcessLogId
                     );
                 END;
             SET @DefaultLocaleId = dbo.Fn_GetDefaultLocaleId();
             --Remove old error log 
             --DELETE FROM ZnodeImportLog WHERE ImportProcessLogId in (select ImportProcessLogId  FROM ZnodeImportProcessLog  WHERE ImportTemplateId  = @TemplateId )
             --GUID = @NewGUID;
             --Delete FROM ZnodeImportProcessLog  WHERE ImportTemplateId  = @TemplateId 
		
             IF NOT EXISTS
             (
                 SELECT TOP 1 1  FROM ZnodeImportLog
                 WHERE Guid = @NewGUID
                       AND ErrorDescription IN(43, 42)
                 AND ImportProcessLogId = @ImportProcessLogId
             )
                 BEGIN
                     IF @ImportHeadName = 'Product'
                      BEGIN
						  IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
							  SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimProductId int null ';
						  ELSE 
							 SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimProductId int null Primary KEY CLUSTERED(RowNumber)';
						 
						  EXEC sys.sp_sqlexec @SQLQuery;
			         END;
                     ELSE
                     IF @ImportHeadName = 'Category'
                         BEGIN
							  IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimCategoryId int null ';
							  ElSE
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimCategoryId int null Primary KEY CLUSTERED(RowNumber) ';
						  
							  EXEC sys.sp_sqlexec @SQLQuery;
                         END;
                     ELSE
                         BEGIN
							IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1) ';
							Else 
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1) Primary KEY CLUSTERED(RowNumber)';
							
							EXEC sys.sp_sqlexec @SQLQuery;
                         END;;
                 END;
				
             --Generate new process for current import 
             --INSERT INTO ZnodeImportProcessLog(ImportTemplateId,Status,ProcessStartedDate,ProcessCompletedDate,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             --SELECT @TemplateId,dbo.Fn_GetImportStatus(0),@GetDate,NULL,@UserId,@GetDate,@UserId,@GetDate;
             --SET @ImportProcessLogId = @@IDENTITY;

             SET @CreateDateString = CONVERT(VARCHAR(100), @UserId)+','''+CONVERT(VARCHAR(100), @GetDate)+''','+CONVERT(VARCHAR(100), @UserId)+','''+CONVERT(VARCHAR(100), @GetDate)+''', '+CONVERT(VARCHAR(100), @ImportProcessLogId);

             SELECT TOP 1 @ImportHeadId = ImportHeadId FROM ZnodeImportTemplate WHERE ImportTemplateId = @TemplateId;
             IF @DefaultFamilyId = 0
                AND @ImportHeadName IN('Product', 'Category')
                 BEGIN 
                     --Get all default attribute values in attribute 
                     INSERT INTO @FamilyAttributeDetail
                     (PimAttributeId,
                      AttributeTypeName,
                      AttributeCode,
                      SourceColumnName,
                      IsRequired,
                      PimAttributeFamilyId
                     )
                     --Call Process to insert data of defeult family with source column name and target column name 
                     EXEC Znode_ImportGetTemplateDetails
                          @TemplateId = @TemplateId,
                          @IsValidationRules = 0,
                          @IsIncludeRespectiveFamily = 1,
                          @IsCategory = @IsCategory,
                          @DefaultFamilyId = @DefaultFamilyId;

					---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
					Delete FAD from @FamilyAttributeDetail FAD
					where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
					and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					               inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
                 END;
             ELSE
             IF @ImportHeadName IN('Product', 'Category')
                 BEGIN
                     --Get all default attribute values in attribute 
                     INSERT INTO @FamilyAttributeDetail
                     (PimAttributeId,
                      AttributeTypeName,
                      AttributeCode,
                      SourceColumnName,
                      IsRequired,
                      PimAttributeFamilyId
                     )
                     --Call Process to insert data of defeult family with source column name and target column name 
                     EXEC Znode_ImportGetTemplateDetails
                          @TemplateId = @TemplateId,
                          @IsValidationRules = 0,
                          @IsIncludeRespectiveFamily = 1,
                          @IsCategory = @IsCategory,
                          @DefaultFamilyId = @DefaultFamilyId;

					---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
					Delete FAD from @FamilyAttributeDetail FAD
					where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
					and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					               inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
                 END;      
             -- Check attributes are manditory and not provided with source table
		   	 
			if @TABLENAME	like '%tempdb..%'
				SET @SQLQuery = 'SELECT 42 AS ErrorDescription , SourceColumnName , '''' , '''+@NewGUID+''','+@CreateDateString+' from ZnodeImportTemplateMapping where ImportTemplateId = '+CONVERT(VARCHAR(100), @TemplateId)+' and ltrim(rtrim(SourceColumnName)) <> '''' AND ltrim(rtrim(SourceColumnName)) not in ( select isnull(Name ,'''') from tempdb.sys.columns where object_id = object_id('''+@TABLENAME+'''));';
			else 
				SET @SQLQuery = 'SELECT 42 AS ErrorDescription , SourceColumnName , '''' , '''+@NewGUID+''','+@CreateDateString+' from ZnodeImportTemplateMapping where ImportTemplateId = '+CONVERT(VARCHAR(100), @TemplateId)+' and ltrim(rtrim(SourceColumnName)) <> '''' AND ltrim(rtrim(SourceColumnName)) not in ( select isnull(Name ,'''') from sys.columns where object_id = object_id('''+@TABLENAME+'''));';
		 
			Declare @Tbl_CsvDynamicColulmns TABLE (ColumnName nvarchar(300), SequenceNumber int, DataType nvarchar(50),IsRequired bit )

			INSERT INTO @Tbl_CsvDynamicColulmns(ColumnName , SequenceNumber , DataType ,IsRequired)
			SELECT DISTINCT ZITM.SourceColumnName ,ZIAV.SequenceNumber, ZIAV.AttributeTypeName, ZIAV.IsRequired
			FROM ZnodeImportAttributeValidation ZIAV LEFT OUTER JOIN 
			ZnodeImportTemplate  ZIT ON ZIT.ImportHeadId =  ZIAV.ImportHeadId AND ZIT.ImportTemplateId  = @TemplateId
			LEFT OUTER JOIN ZnodeImportTemplateMapping  ZITM ON ZITM.ImportTemplateId = ZIT.ImportTemplateId  
			and ZIAV.AttributeCode = ZITM.TargetColumnName
			AND ZITM.ImportTemplateId  = @TemplateId
			WHERE ZIAV.ImportHeadId = @ImportHeadId --ORDER BY ZIAV.SequenceNumber


		    SELECT @CsvColumnString = SUBSTRING ((Select ',' +  ISNULL(ColumnName ,'NULL') from @Tbl_CsvDynamicColulmns ORDER BY SequenceNumber FOR XML PATH ('')),2,4000) 


     		INSERT INTO ZnodeImportLog(ErrorDescription, ColumnName, Data, GUID,CreatedBy, CreatedDate,  ModifiedBy,ModifiedDate,ImportProcessLogId
             )
             EXEC sys.sp_sqlexec  @SQLQuery;
             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM ZnodeImportLog
                 WHERE Guid = @NewGUID
                       AND ErrorDescription IN(43, 42)
                 AND ImportProcessLogId = @ImportProcessLogId
             )
                 BEGIN
                     --Get all default attribute values in attribute 
                     IF @ImportHeadName IN('Product', 'Category')
                         BEGIN
                             -- Check attributes are manditory and not provided with source table
                             INSERT INTO ZnodeImportLog
                             (ErrorDescription,
                              ColumnName,
                              Data,
                              GUID,
                              CreatedBy,
                              CreatedDate,
                              ModifiedBy,
                              ModifiedDate,
                              ImportProcessLogId
                             )
                                    SELECT '14' AS ErrorDescription,
                                           AttributeCode,
                                           '',
                                           @NewGUID,
                                           @UserId,
                                           @GetDate,
                                           @UserId,
                                           @GetDate,
                                           @ImportProcessLogId
                                    FROM @FamilyAttributeDetail
                                    WHERE ISNULL(SourceColumnName, '') = ''
                                          AND IsRequired = 1;  

                             -- Read all attribute details with their datatype
                             INSERT INTO @AttributeDetail
                             (PimAttributeId,
                              AttributeTypeName,
                              AttributeCode,
                              SourceColumnName,
                              IsRequired,
                              ControlName,
                              ValidationName,
                              SubValidationName,
                              ValidationValue,
                              RegExp
                             )
                             EXEC Znode_ImportGetTemplateDetails
                                  @TemplateId=@TemplateId,
								  @DefaultFamilyId=@DefaultFamilyId;

							---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
							Delete FAD from @AttributeDetail FAD
							where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
							and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
										   inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode) 

                             DELETE FROM @AttributeDetail
                             WHERE AttributeTypeName = 'Image'
                                   AND ValidationName <> 'IsAllowMultiUpload';
                             --IF NOT EXISTS
                             --(
                             --    SELECT TOP 1 1
                             --    FROM INFORMATION_SCHEMA.TABLES
                             --    WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#DefaultAttributeCode'
                             --)
                             --    BEGIN
                             --        CREATE TABLE #DefaultAttributeCode
                             --        (AttributeTypeName          VARCHAR(300),
                             --         PimAttributeDefaultValueId INT,
                             --         PimAttributeId             INT,
                             --         AttributeDefaultValueCode  VARCHAR(100)
                             --        );
                                     INSERT INTO #DefaultAttributeCode
                                     (AttributeTypeName,
                                      PimAttributeDefaultValueId,
                                      PimAttributeId,
                                      AttributeDefaultValueCode
                                     )
                                     --Call Process to insert default data value 
                                     EXEC Znode_ImportGetPimAttributeDefaultValue;

                                     DELETE FROM #DefaultAttributeCode
                                     WHERE AttributeTypeName = 'Yes/No';
                             --    END;
                             --ELSE
                             --    BEGIN
                             --        DROP TABLE #DefaultAttributeCode;
                             --    END;
                         END;
                     ELSE
                         BEGIN
					
					
                             --Read all attribute details with their datatype
                             INSERT INTO @AttributeDetail
                             (AttributeTypeName,
                              AttributeCode,
                              SourceColumnName,
                              IsRequired,
                              ControlName,
                              ValidationName,
                              SubValidationName,
                              ValidationValue,
                              RegExp
                             )
                             EXEC [Znode_ImportGetOtherTemplateDetails]
                                  @TemplateId = @TemplateId,
                                  @ImportHeadId = @ImportHeadId;

							IF @ImportHeadName IN('B2BCustomer')
							BEGIN

								INSERT INTO @AttributeDetail
								 (PimAttributeId,
								 AttributeTypeName,
								  AttributeCode,
								  SourceColumnName,
								  IsRequired,
								  ControlName,
								  ValidationName,
								  SubValidationName,
								  ValidationValue,
								  RegExp
								 )
								 EXEC [Znode_ImportGetGlobalTemplateDetails]
									  @TemplateId = @TemplateId,
									  @ImportHeadId = @ImportHeadId;

								
								INSERT INTO #DefaultAttributeCode
								(AttributeTypeName,
								PimAttributeDefaultValueId,
								PimAttributeId,
								AttributeDefaultValueCode
								)
								--Call Process to insert default data value 
								EXEC Znode_ImportGetGlobalAttributeDefaultValue;

								DELETE FROM #DefaultAttributeCode
								WHERE AttributeTypeName = 'Yes/No';

							END
						
                             --Check attributes are not mapped with any family of Pim Product
                             INSERT INTO ZnodeImportLog
                             (ErrorDescription,
                              ColumnName,
                              Data,
                              GUID,
                              CreatedBy,
                              CreatedDate,
                              ModifiedBy,
                              ModifiedDate,
                              ImportProcessLogId
                             )
                                    SELECT DISTINCT
                                           '14' AS ErrorDescription,
                                           AttributeCode,
                                           '',
                                           @NewGUID,
                                           @UserId,
                                           @GetDate,
                                           @UserId,
                                           @GetDate,
                                           @ImportProcessLogId
                                    FROM @AttributeDetail
                                    WHERE ISNULL(SourceColumnName, '') = ''   AND IsRequired = 1;  ;

                         END;
						
                     --	Check attributes are not mapped with (Default / Other) family of Pim Product
                     --	INSERT INTO ZnodeImportLog ( ErrorDescription , ColumnName , Data , GUID , CreatedBy , CreatedDate , ModifiedBy , ModifiedDate , ImportProcessLogId)
                     --	SELECT '1' AS ErrorDescription , SourceColumnName , '' , @NewGUID , @UserId , @GetDate , @UserId , @GetDate , @ImportProcessLogId
                     --	FROM @AttributeDetail WHERE PimAttributeId NOT IN ( SELECT zpfgm.PimAttributeId FROM dbo.ZnodePimFamilyGroupMapper AS zpfgm);
                     --	Verify data in global temporary table (column wise)
					
                     DECLARE Cr_Attribute CURSOR LOCAL FAST_FORWARD
                     FOR SELECT PimAttributeId,
                                AttributeTypeName,
                                AttributeCode,
                                IsRequired,
                                SourceColumnName,
                                ControlName,
                                ValidationName,
                                SubValidationName,
                                ValidationValue,
                                RegExp
                         FROM @AttributeDetail
                         WHERE ISNULL(SourceColumnName, '') <> '';
                     OPEN Cr_Attribute;
                     FETCH NEXT FROM Cr_Attribute INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @ControlName, @ValidationName, @SubValidationName, @ValidationValue, @RegExp;
                     WHILE @@FETCH_STATUS = 0
                         BEGIN
				             IF @AttributeTypeName = 'Number'
                                 BEGIN
							      EXEC Znode_ImportValidateNumber
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @ImportHeadId = @ImportHeadId,
                                          @ImportProcessLogId = @ImportProcessLogId;
                                 END;
							 -- Check invalid date
							
                             IF @AttributeTypeName = 'Date'
                                 BEGIN
                                     EXEC Znode_ImportValidateDate
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @ImportHeadId = @ImportHeadId,
                                          @ImportProcessLogId = @ImportProcessLogId;
                                 END;
							 -- Check Manditory Data
		 					 IF @IsRequired = 1 AND @CheckedSourceColumn <> @SourceColumnName
								BEGIN
									SET @CheckedSourceColumn = @SourceColumnName;
									EXEC Znode_ImportValidateManditoryData
									@TableName = @TableName,
									@SourceColumnName = @SourceColumnName,
									@CreateDateString = @CreateDateString,
									@ValidationName = @ValidationName,
									@ControlName = @ControlName,
									@ValidationValue = @ValidationValue,
									@NewGUID = @NewGUID,
									@ImportHeadId = @ImportHeadId;
								END;
							 --END 
							
                             IF @AttributeTypeName = 'Text'
                                 BEGIN
								 
						              EXEC Znode_ImportValidateManditoryText
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @LocaleId = @LocaleId,
                                          @DefaultLocaleId = @DefaultLocaleId,
                                          @AttributeId = @AttributeId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @ImportHeadId = @ImportHeadId;
                                 END;
                             IF @AttributeTypeName = 'Image'
                                 BEGIN
                                     EXEC Znode_ImportValidateImageData
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @LocaleId = @LocaleId,
                                          @DefaultLocaleId = @DefaultLocaleId,
                                          @AttributeId = @AttributeId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @ImportHeadId = @ImportHeadId;
                                 END;

					

                             --Check Default data value is valid 
                             IF @ImportHeadName IN('Product', 'Category','B2BCustomer')
                                 BEGIN
                                     IF @AttributeId IN
                                     (
                                         SELECT PimAttributeId
                                         FROM #DefaultAttributeCode
                                     )
                                         BEGIN
							
                                            IF  @AttributeTypeName = 'Multi Select'
											 BEGIN
										 		 ---Verify Image file is exists in media table or not 
												 SET @SQLQuery = ' INSERT INTO #InvalidDefaultData (RowNumber, Value, ColumnName) 
												 SELECT ROWNUMBER , (Select TOP 1 Item from dbo.split(' + @SourceColumnName + ','','')  SP WHERE NOT EXISTS 
												 (Select ToP 1 1 FROM #DefaultAttributeCode DAC WHERE 
												  DAC.AttributeTypeName <> ''Yes/No'' AND DAC.AttributeDefaultValueCode IS NOT NULL AND DAC.PimAttributeId = 
												 ' + CONVERT(VARCHAR(100), @AttributeId) + ' AND ltrim(rtrim(SP.Item) ) = DAC.AttributeDefaultValueCode
												 )), ''' + @SourceColumnName + ''' as [ColumnName]  FROM ' + @TableName
												 + ' Where ISnull(' + @SourceColumnName +  ','''') <> '''''
												EXEC sys.sp_sqlexec @SQLQuery;
											  END
											  ELSE IF @AttributeTypeName = 'Simple Select'
											  BEGIN
						
												---Verify Image file is exists in media table or not 
												 SET @SQLQuery = ' INSERT INTO #InvalidDefaultData (RowNumber, Value, ColumnName) 
												 SELECT ROWNUMBER , ' + @SourceColumnName + ' , ''' + @SourceColumnName + ''' as [ColumnName]  FROM ' + @TableName
												 + ' SP Where ISnull(' + @SourceColumnName +  ','''') <> '''' AND 
												  NOT EXISTS 
												 (Select TOP 1 1 FROM #DefaultAttributeCode DAC WHERE 
												  DAC.AttributeTypeName <> ''Yes/No'' AND DAC.AttributeDefaultValueCode IS NOT NULL AND DAC.PimAttributeId = 
												 ' + CONVERT(VARCHAR(100), @AttributeId) + ' AND ltrim(rtrim(SP.' + @SourceColumnName + ') ) = DAC.AttributeDefaultValueCode ) '
							
												EXEC sys.sp_sqlexec @SQLQuery;
											  END   
												-- Check Invalid Image 
												 SET @SQLQuery = 'SELECT ''9 '' ErrorDescription,'''+@SourceColumnName+''' as [ColumnName], 
												 Value AS  AttributeValue,RowNumber ,'''+@NewGUID+''',  '+@CreateDateString+' FROM #InvalidDefaultData Where Value IS NOT NULL'
												 INSERT INTO ZnodeImportLog (ErrorDescription, ColumnName, Data, RowNumber, GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
												 EXEC sys.sp_sqlexec @SQLQuery;
												 Delete from #InvalidDefaultData

       
                                         END;
                                 END;
							
                             FETCH NEXT FROM Cr_Attribute INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @ControlName, @ValidationName, @SubValidationName, @ValidationValue, @RegExp;
                         END;
                     CLOSE Cr_Attribute;
                     DEALLOCATE Cr_Attribute;
                     --SELECT top 1 1 FROM @FamilyAttributeDetail where  iSNULL(SourceColumnName,'') = ''  and IsRequired = 1
                 END;
             
			 
			  
------------------------------------------------------------------------------------------
		 Declare @SQLQueryNew NVARCHAR(4000)
		 Declare @SourceColumnNameProduct nvarchar(4000) 
         IF @ImportHeadName IN('Product','Pricing','ProductAssociation','Inventory')
		 BEGIN
		  	 
		 SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'SKU'
		 AND ImportTemplateId = @TemplateId


			SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  SKU - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;			
		END
		ELSE IF @ImportHeadName IN('ProductAttribute')
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'AttributeCode'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  Attribute - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'ZipCode'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'ZIP'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  ZIPCode - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'Category'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'CategoryCode'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  CategoryCode - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'CategoryAssociation'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'CategoryName'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  CategoryName - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;

		END
		ELSE IF @ImportHeadName IN ('Customer','CustomerAddress')
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'UserName'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  UserName - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'SEODetails'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'Code'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  Code - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'Highlight'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'HighlightCode'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  HighlightCode - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'AddonAssociation'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'SKU'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  SKU - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'AttributeDefaultValue'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'AttributeDefaultValueCode'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  AttributeDefaultValueCode - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
	-------------------------------------------------------------------------------------------------------------
	
	--DECLARE @SQLLOG NVARCHAR(MAX)

	--SET @SQLLOG = '

	--SELECT TBL.*,ZM.MessageName AS ErrorDescription INTO  tempdb..[##ImportProcessLog_'+@NewGUID+ ']
	--FROM '+@TableName+' TBL
	--INNER JOIN ZnodeImportLog ZILL ON (TBL.Rownumber = ZILL.Rownumber)
	--INNER JOIN Znodemessage ZM ON (ZM.MessageCode = ZILL.ErrorDescription)
	--WHERE ImportProcessLogId =  '+CONVERT(VARCHAR(100), @ImportProcessLogId)+'
	--AND ZILL.Rownumber IS NOT NULL	
	--'	
	-- PRINT @SQLLOG
	-- EXEC sys.sp_sqlexec  @SQLLOG;

	 --SET @SQLLOG = ''

	 --SET @SQLLOG = 'SELECT * FROM [TempDB..##ImportProcessLog_'+@NewGUID+ ']'
	 --EXEC sys.sp_sqlexec  @SQLLOG;


	--------------------------------------------------------------------------------------------------------------------
			 
  		SET @SQLQuery = 'Delete FROM  '+@TableName+' Where Rownumber IN (Select Rownumber FROM ZnodeImportLog  WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND Rownumber IS NOT NULL)';
        EXEC sys.sp_sqlexec  @SQLQuery;
			 			
	  
             IF @ImportHeadName IN('Product', 'Category')
                 BEGIN
                     IF NOT EXISTS
                     (
                         SELECT TOP 1 1
                         FROM @FamilyAttributeDetail
                         WHERE ISNULL(SourceColumnName, '') = ''
                               AND IsRequired = 1
                     ) AND NOT EXISTS
					 (
						 SELECT TOP 1 1
						 FROM ZnodeImportLog
						 WHERE Guid = @NewGUID
							   AND ErrorDescription IN(43, 42)
						 AND ImportProcessLogId = @ImportProcessLogId
					 )
                         BEGIN
                             IF @IsCategory = 0
                                 BEGIN
							
                                     EXEC Znode_ImportPimProductData
                                          @TableName = @TableName,
                                          @NewGUID = @NewGUID,
                                          @TemplateId = @TemplateId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @UserId = @UserId,
                                          @LocaleId = @LocaleId,
                                          @DefaultFamilyId = @DefaultFamilyId;

                                 END;
                             ELSE
                                 BEGIN
                                     EXEC Znode_ImportPimCategoryData
                                          @TableName = @TableName,
                                          @NewGUID = @NewGUID,
                                          @TemplateId = @TemplateId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @UserId = @UserId,
                                          @LocaleId = @LocaleId,
                                          @DefaultFamilyId = @DefaultFamilyId;
                                 END;
                         END
						 ELSE
							BEGIN
								-- Update Record count in log 
								
							
								--SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
								--EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount out
								--UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
								--WHERE ImportProcessLogId = @ImportProcessLogId;

								SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
								SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
								EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount out
								UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
								WHERE ImportProcessLogId = @ImportProcessLogId;
							END

                 END;
				IF NOT EXISTS
					 (
						 SELECT TOP 1 1
						 FROM ZnodeImportLog
						 WHERE Guid = @NewGUID
							   AND ErrorDescription IN(43, 42)
						 AND ImportProcessLogId = @ImportProcessLogId
					 )
             BEGIN
                 IF @ImportHeadName = 'Pricing'
                     BEGIN
                         EXEC [Znode_ImportPriceList]
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID,
                              @PriceListId = @PriceListId;
                     END;

                 IF @ImportHeadName = 'Inventory'
                     BEGIN
				
                         EXEC Znode_ImportInventory_Ver1
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID;
                     END;
                 IF @ImportHeadName = 'ZipCode'
                     BEGIN
						 EXEC Znode_ImportZipCode
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID,
							  @CountryCode = @CountryCode;
                     END;
					 IF @ImportHeadName = 'CategoryAssociation'
                     BEGIN
						 EXEC Znode_ImportCatalogCategory
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID,
							  @PimCatalogId = @PimCatalogId;
                     END;
					 IF @ImportHeadName = 'ProductAssociation'
                     BEGIN
						 EXEC Znode_ImportAssociateProducts
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID
                     END;
			
					 IF @ImportHeadName = 'SEODetails' AND @PortalId > 0 
                     BEGIN
						 EXEC Znode_ImportSEODetails
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
							  @LocaleId = @LocaleId,
							  @PortalId =@PortalId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID,
							  @CsvColumnString = @CsvColumnString 

				
                     END;
				
					 IF @ImportHeadName = 'ProductAttribute' 
                     BEGIN
						 EXEC Znode_ImportAttributes
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
							  @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID
				
                     END;

					 IF @ImportHeadName = 'Customer' AND @PortalId > 0 
                     BEGIN
					
					
						 EXEC Znode_ImportCustomer
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = @PortalId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString
				
                     END;
					 
					 IF @ImportHeadName = 'UserApprovers' AND @PortalId > 0 
                     BEGIN
						 EXEC Znode_ImportUserApproval
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = @PortalId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString
				
                     END;

					 IF @ImportHeadName = 'B2BCustomer' AND @PortalId > 0 
                     BEGIN

							 EXEC Znode_ImportB2BCustomer
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = @PortalId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString
				
                     END;

					 IF @ImportHeadName = 'CustomerAddress' --AND @PortalId > 0 
                     BEGIN
						 EXEC Znode_ImportCustomerAddress
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = 1, -- not implemented from forntend 
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString,
							  @IsAccountAddress = @IsAccountAddress
				
                     END;
					 IF @ImportHeadName = 'ShippingAddress' --AND @PortalId > 0 
                     BEGIN
						 EXEC Znode_ImportCustomerAddress
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = 1, -- not implemented from forntend 
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString,
							  @IsAccountAddress = @IsAccountAddress
				
                     END;
					 IF @ImportHeadName = 'StoreLocator' --AND @PortalId > 0 
                     BEGIN
					 	 EXEC Znode_ImportStoreLocatorAddress
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString
                     END;

					IF @ImportHeadName = 'Highlight'
					BEGIN
					EXEC Znode_ImportHighlight 
					@TableName = @TableName, 
					@Status = @Status, 
					@UserId = @UserId, 
					@ImportProcessLogId = @ImportProcessLogId, 
					@NewGUID = @NewGUID 
					END;

					IF @ImportHeadName = 'AddonAssociation'
					BEGIN
					EXEC Znode_ImportAddonAssociation 
					@TableName = @TableName, 
					@Status = @Status, 
					@UserId = @UserId, 
					@ImportProcessLogId = @ImportProcessLogId, 
					@NewGUID = @NewGUID,
					@PimCatalogId = @PimCatalogId
					END;

					IF @ImportHeadName = 'AttributeDefaultValue'
					BEGIN
					EXEC Znode_ImportAttributeDefaultValue 
					@TableName = @TableName, 
					@Status = @Status, 
					@UserId = @UserId, 
					@ImportProcessLogId = @ImportProcessLogId, 
					@NewGUID = @NewGUID
					
					END;
				 
             END
			 ELSE 
				 BEGIN
					-- Update Record count in log 	
					SET @SQLQuery = ' Select @FailedRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
					EXEC	sp_executesql @SQLQuery , N'@FailedRecordCount BIGINT out' , @FailedRecordCount =@FailedRecordCount out
					--SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS  NULL AND  ImportProcessLogId = @ImportProcessLogId;
					SELECT @SuccessRecordCount = 0
									
					UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
					WHERE ImportProcessLogId = @ImportProcessLogId;
					--SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
					--SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
					--EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount out
					--UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount , TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
					--WHERE ImportProcessLogId = @ImportProcessLogId;
				 END

             EXEC Znode_ImportReadErrorLog
                  @ImportProcessLogId = @ImportProcessLogId,
                  @NewGUID = @NewGUID;
             DROP TABLE #GlobalTempTableColumns;

             -- Finally call product insert process if error not found in error log table 
             IF EXISTS
             (
                 SELECT TOP 1 1
                 FROM ZnodeImportLog
                 WHERE ImportProcessLogId = @ImportProcessLogId
                       AND Guid = @NewGUID
             )
                 BEGIN
                     --Update process with completed status for current import 
                     UPDATE ZnodeImportProcessLog
                       SET
                           Status = dbo.Fn_GetImportStatus(3),
                           ProcessCompletedDate = GETDATE()
                       WHERE ImportProcessLogId = @ImportProcessLogId;
                 END;
				 --SET @SQLQuery = 'Drop Table ' + @TableName
				 SET @SQLQuery = 'IF Object_id(''+@TableName+'') IS NOT NULL  DROP TABLE ' + @TableName
                 EXEC sys.sp_sqlexec @SQLQuery;
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE(),
                    ERROR_LINE(),
                    ERROR_PROCEDURE();
             EXEC Znode_ImportReadErrorLog
                  @ImportProcessLogId = @ImportProcessLogId,
                  @NewGUID = @NewGUID; 
             --Update process with failed status for current import 
             UPDATE ZnodeImportProcessLog
               SET
                   Status = dbo.Fn_GetImportStatus(3),
                   ProcessCompletedDate = GETDATE()
             WHERE ImportProcessLogId = @ImportProcessLogId;
			 				 SET @SQLQuery = 'Drop Table ' + @TableName
                 EXEC sys.sp_sqlexec @SQLQuery;
             --ROLLBACK TRAN TRN_ImportValidProductData;
         END CATCH;
     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ManageBrandProductList_XML')
BEGIN 
	DROP PROCEDURE Znode_ManageBrandProductList_XML
END
GO

CREATE PROCEDURE [dbo].[Znode_ManageBrandProductList_XML]
(   @WhereClause						 XML='',
	@BrandCode			VARCHAR(600),
	@IsAssociated		Bit,		
    @Rows								 INT           = 100,
    @PageNo								 INT           = 1,
    @Order_BY			 VARCHAR(1000) = '',
    @LocaleId			 INT           = 1,
    @PimProductId		 VARCHAR(2000) = 0,
    @IsProductNotIn	 BIT           = 0,
	@IsCallForAttribute BIT		   = 0,
	@AttributeCode      VARCHAR(max ) = '' ,
	@IsDebug            Bit		   = 0 
)
AS
    
/*
		  Summary:-   This Procedure is used for get product List  
				    Procedure will pivot verticle table(ZnodePimattributeValues) into horizontal table with columns 
				    ProductId,ProductName,ProductType,AttributeFamily,SKU,Price,Quantity,IsActive,ImagePath,Assortment,LocaleId,DisplayOrder
        
		  Unit Testing
		  
exec Znode_ManageProductList_XML @WhereClause=N'',@Rows=50,@PageNo=1,@Order_By=N'',@LocaleId=1,@PimProductId=N'',@IsProductNotIn=1,@IsCallForAttribute=0,@AttributeCode=''
          select * from ZnodeAttributeType  WHERE AttributeValue LIKE '%&%'
		  UPDATE VieW_lOADMANAGEpRODUCT SET  AttributeValue = 'A & B'  WHERE AttributeValue LIKE '% and %' AND PimProductId = 158
    */

     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY

		 SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

             DECLARE @PimProductIds TransferId, --VARCHAR(MAX), 
					 @FirstWhereClause NVARCHAR(MAX)= '', 
					 @SQL NVARCHAR(MAX)= '' ,
					 @OutPimProductIds VARCHAR(max),
					 @ProductXML NVARCHAR(max) ,
					 @BrandId Int;

             DECLARE @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId()
					 ,@RowsCount INT =0 ;
             DECLARE @TransferPimProductId TransferId 
			 DECLARE @TBL_AttributeDefaultValue TABLE
             (PimAttributeId            INT,
              AttributeDefaultValueCode VARCHAR(100),
              IsEditable                BIT,
              AttributeDefaultValue     NVARCHAR(MAX)
			  ,DisplayOrder INT 
			  ,PimAttributedefaultValueId INT 
             );
             DECLARE @TBL_AttributeDetails AS TABLE
             (PimProductId   INT,
              AttributeValue NVARCHAR(MAX),
              AttributeCode  VARCHAR(600),
              PimAttributeId INT
             );
			   --DECLARE @TBL_AttributeDetailsLocale AS TABLE
      --       (PimProductId   INT,
      --        AttributeValue NVARCHAR(MAX),
      --        AttributeCode  VARCHAR(600),
      --        PimAttributeId INT
      --       );

			 create TABLE #TBL_AttributeDetailsLocale
             (PimProductId   INT,
              AttributeValue NVARCHAR(MAX),
              AttributeCode  VARCHAR(600),
              PimAttributeId INT
             );

			 DECLARE @TBL_MultiSelectAttribute TABLE (PimAttributeId INT , AttributeCode VARCHAR(600))
			
			 DECLARE @TBL_MediaAttribute TABLE (Id INT ,PimAttributeId INT ,AttributeCode VARCHAR(600) )

			 DECLARE @TBL_ProductIds TABLE 
			 (
			  PimProductId INT,
			  ModifiedDate DATETIME  
			 )

			 DECLARE @FamilyDetails TABLE
             (
			  PimProductId         INT,
              PimAttributeFamilyId INT,
              FamilyName           NVARCHAR(Max)
             );
             DECLARE @DefaultAttributeFamily INT= dbo.Fn_GetDefaultPimProductFamilyId();
             DECLARE @ProductIdTable TABLE
             (PimProductId INT,
              CountId      INT,
              RowId        INT IDENTITY(1,1)
             );
          		
    --         IF EXISTS ( SELECT TOP 1 1 FROM @WhereClause.nodes ( '//ArrayOfWhereClauseModel/WhereClauseModel'  ) AS Tbl(Col)
			 --WHERE dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  =  'Brand'
    --            OR dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  = 'Vendor'
    --            OR dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  =  'ShippingCostRules'
    --            OR dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  =  'Highlights') and @IsCallForAttribute=1
    --             BEGIN
    --            DECLARE @AttributeCodeValue TABLE (AttributeValue NVARCHAr(max),AttributeCode NVARCHAR(max))

				--INSERT INTO @AttributeCodeValue(AttributeValue,AttributeCode)
				--SELECT  Tbl.Col.value ( 'attributevalue[1]' , 'NVARCHAR(max)') AS AttributeValue
				--		 ,Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)') AS AttributeCode
				--FROM @WhereClause.nodes ( '//ArrayOfWhereClauseModel/WhereClauseModel'  ) AS Tbl(Col)
				--WHERE dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  =  'Brand'
    --            OR dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  = 'Vendor'
    --            OR dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  =  'ShippingCostRules'
    --            OR dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  =  'Highlights'
				
				--SET @SQL =   
				--           ';WIth Cte_DefaultValue AS (
				--						  SELECT AttributeDefaultValueCode , ZPDF.PimAttributeId ,FNPA.AttributeCode
				--						  FROM ZnodePImAttributeDefaultValue ZPDF
				--						  INNER JOIN [dbo].[Fn_GetProductDefaultFilterAttributes] () FNPA ON ( FNPA.PimAttributeId = ZPDF.PimAttributeId) 
				--						)
				--						, Cte_productIds AS 
				--						(
				--						  SELECT a.PimProductId, c.AttributeCode , CTDV.AttributeDefaultValueCode AttributeValue,b.ModifiedDate 
				--						  FROM  ZnodePimAttributeValue a
				--						  LEFT JOIN ZnodePimAttribute c ON(c.PimAttributeId = a.PimAttributeId)
				--						  LEFT JOIN ZnodePimAttributeValueLocale b ON(b.PimAttributeValueId = a.PimAttributeValueId)  
				--						  INNER JOIN Cte_DefaultValue CTDV ON (CTDV.AttributeCode = c.AttributeCode 
				--						  AND EXISTS (SELECT TOP 1 1 FROM dbo.split(b.AttributeValue,'','') SP WHERE SP.Item = CTDV.AttributeDefaultValueCode) )
				--						  Union all 
										  
				--							SELECT a.PimProductId,c.AttributeCode,ZPADV.AttributeDefaultValueCode AttributeValue ,a.ModifiedDate 
				--							FROM ZnodePimProductAttributeDefaultValue ZPPADV
				--							INNER JOIN ZnodePimAttributeDefaultValue ZPADV ON (ZPPADV.PimAttributeDefaultValueId = ZPADV.PimAttributeDefaultValueId)
				--							LEFT JOIN ZnodePimAttributeValue a ON (a.PimAttributeValueId = ZPPADV.PimAttributeValueId )
				--							LEFT JOIN ZnodePimAttribute c ON ( c.PimAttributeId=a.PimAttributeId )
				--							INNER JOIN Cte_DefaultValue CTDV ON (CTDV.AttributeCode = c.AttributeCode )
				--						)										
				--						SELECT PimProductId ,ModifiedDate
				--						FROM Cte_productIds WHERE  AttributeCode '+(SELECT TOP 1 AttributeCode  FROM @AttributeCodeValue )+' AND 
				--						AttributeValue '+(SELECT TOP 1 AttributeValue  FROM @AttributeCodeValue )+' GROUP BY PimProductId,ModifiedDate Order By ModifiedDate DESC ';

					 --SET @Order_BY = CASE WHEN @Order_BY = '' THEN 'ModifiedDate DESC' ELSE @Order_BY END 
					 	
					 --SET @WhereClause = CAST(REPLACE(CAST(@WhereClause AS NVARCHAR(max)),'<WhereClauseModel><attributecode>'+(SELECT TOP 1 AttributeCode  FROM @AttributeCodeValue )+'</attributecode><attributevalue>'+(SELECT TOP 1 AttributeValue   FROM @AttributeCodeValue )+'</attributevalue></WhereClauseModel>','') AS XML )

				SELECT @BrandId = BrandId FROM ZnodeBrandDetails Where BrandCode = @BrandCode
				 INSERT INTO @TBL_ProductIds ( PimProductId, ModifiedDate )
					 EXEC (@SQL);

				IF ( @IsAssociated = 1 )
				BEGIN
					INSERT INTO @TBL_ProductIds ( PimProductId, ModifiedDate )
					SELECT PimProductId, ModifiedDate from ZnodePimProduct ZP
					WHERE Exists (  SELECT * FROM ZnodeBrandProduct BP 
									INNER JOIN ZnodeBrandDetails BD ON BP.BrandId = BD.BrandId WHERE BD.BrandCode = @BrandCode AND ZP.PimProductId = BP.PimProductId )    
			    END
				ELSE IF ( @IsAssociated = 0 )
				BEGIN
					INSERT INTO @TBL_ProductIds ( PimProductId, ModifiedDate )
					SELECT PimProductId, ModifiedDate from ZnodePimProduct ZP
					WHERE NOT Exists (  SELECT * FROM ZnodeBrandProduct BP 
									INNER JOIN ZnodeBrandDetails BD ON BP.BrandId = BD.BrandId WHERE BD.BrandCode = @BrandCode AND ZP.PimProductId = BP.PimProductId )    
			    END

                     INSERT INTO @ProductIdTable( PimProductId )
                     SELECT PimProductId 
					 FROM @TBL_ProductIds

                     INSERT INTO @TransferPimProductId
					 SELECT PimProductId
                     FROM @ProductIdTable
                     
	   
				   			  -- SELECT * FROM @TransferPimProductId
     DELETE FROM @ProductIdTable;
   --  SET @WhereClause = CAST(REPLACE(CAST(@WhereClause AS NVARCHAR(MAX)), @FirstWhereClause, ' 1 = 1') AS XML);
                IF @PimProductId <> ''
			    BEGIN 
		
				 INSERT INTO @TransferPimProductId(id)
				 SELECT Item 
				 FROM dbo.split(@PimProductId,',')
			    END 


	 DECLARE  @ProductListIdRTR TransferId
	 DECLARE @TAb Transferid 
	 DECLARE @tBL_mainList TABLE (Id INT,RowId INT)
	 	IF @PimProductId <> ''  OR   @IsCallForAttribute=1 --OR (CAST(@WhereClause AS NVARCHAR(max))= N'' AND @Order_by <> N'' AND @AttributeCode = N'')
		BEGIN 
	 SET @IsProductNotIn = CASE WHEN @IsProductNotIn = 0 THEN 1  
					 WHEN @IsProductNotIn = 1 THEN 0 END 
		END 
	 INSERT INTO @ProductListIdRTR
	 EXEC Znode_GetProductList  @IsProductNotIn,@TransferPimProductId
	 

	 IF CAST(@WhereClause AS NVARCHAR(max))<> N''
	 BEGIN 
	 
	  SET @SQL = 'SELECT PimProductId FROM ##Temp_PimProductId'+CAST(@@SPID AS VARCHAR(500))
	  EXEC Znode_GetFilterPimProductId @WhereClause,@ProductListIdRTR,@localeId
	  
      INSERT INTO @TAB 
	  EXEC (@SQL)
	 
	 END 
	 
	 IF EXISTS (SELECT Top 1 1 FROM @TAb ) OR CAST(@WhereClause AS NVARCHAR(max)) <> N''
	 BEGIN 
	 
	 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
	 SET @order_by = REPLACE(@order_by,'DisplayOrder','ProductName')
	 INSERT INTO @TBL_MainList(id,RowId)
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @TAb ,@AttributeCode,@localeId
	 
	 END 
	 ELSE 
	 BEGIN
	      
	 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
	 SET @order_by = REPLACE(@order_by,'DisplayOrder','ProductName')
	 INSERT INTO @TBL_MainList(id,RowId)
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @ProductListIdRTR ,@AttributeCode,@localeId 

	 
	 END 
             


  			 INSERT INTO @PimProductIds ( Id  )
			 SELECT id FROM @TBL_MainList

			 DECLARE @TBL_PimProductIds transferId 
			 INSERT INTO @TBL_PimProductIds
			 SELECT id 
             FROM @PimProductIds
			 			 	
			 DECLARE @PimAttributeIds TransferId  
			 INSERT INTO @PimAttributeIds
			 SELECT PimAttributeId  
			 FROM [dbo].[Fn_GetProductGridAttributes]()
			
			 INSERT INTO @TBL_AttributeDetails
             (PimProductId,
              AttributeValue,
              AttributeCode,
              PimAttributeId
             )
             EXEC Znode_GetProductsAttributeValue_newTesting
                  @TBL_PimProductIds,
                  @PimAttributeIds,
                  @localeId;
			
			UPDATE @TBL_AttributeDetails
			SET AttributeValue = ISNULL(AttributeValue,'')
			WHERE AttributeValue IS NULL 

			 INSERT INTO @FamilyDetails
             (PimAttributeFamilyId,
              PimProductId
             )
             EXEC [dbo].[Znode_GetPimProductAttributeFamilyId]
                  @PimProductIds,
                  1;
            
		 UPDATE a
               SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
                  INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                       AND LocaleId = @LocaleId);
             UPDATE a
               SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
                  INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                       AND LocaleId = @DefaultLocaleId)
             WHERE a.FamilyName IS NULL
                   OR a.FamilyName = '';
           	
			INSERT INTO @TBL_AttributeDetails             (PimProductId,              AttributeValue,              AttributeCode,              PimAttributeId             )
			SELECT PimProductId ,FamilyName, 'AttributeFamily',NULL
			FROM @FamilyDetails 
			
			INSERT INTO @TBL_AttributeDetails             (PimProductId,              AttributeValue,              AttributeCode,              PimAttributeId             )
			SELECT a.ID PimProductId ,CASE WHEN IsProductPublish = 1 THEN   'Published' WHEN IsProductPublish = 0 THEN 'Draft'  ELSE 'Not Published' END, 'PublishStatus',NULL
			FROM @PimProductIds a 
			INNER JOIN ZnodePimProduct b ON (b.PimProductId = a.ID)

	  INSERT INTO #TBL_AttributeDetailsLocale (PimProductId ,PimAttributeId,AttributeCode )
			SELECT  TBLAD.PimProductId ,TBLAD.PimAttributeId,TBLAD.AttributeCode 
			FROM @TBL_AttributeDetails TBLAD 
			GROUP BY  TBLAD.PimProductId ,TBLAD.PimAttributeId,TBLAD.AttributeCode 
			
			--select * into #TBL_AttributeDetailsLocale from @TBL_AttributeDetailsLocale
					
	    UPDATE TBLPP 
		SET AttributeValue = CTDD.AttributeValue 
		FROM  @TBL_AttributeDetails CTDD 
		INNER JOIN #TBL_AttributeDetailsLocale TBLPP ON (TBLPP.PimProductId = CTDD.PimProductId AND TBLPP.AttributeCode  = CTDD.AttributeCode)
		WHERE TBLPP.AttributeValue IS NULL 

    	SET @ProductXML =  '<MainProduct>'+ STUFF( (  SELECT '<Product>'+'<PimProductId>'+CAST(TBAD.PimProductId AS VARCHAR(50))+'</PimProductId>'+'<BrandId>'+CAST(@BrandId AS VARCHAR(50))+'</BrandId>'+STUFF(    (  SELECT '<'+TBADI.AttributeCode+'>'+CAST( (SELECT ''+TBADI.AttributeValue FOR XML PATH('')) AS NVARCHAR(max))+'</'+TBADI.AttributeCode+'>'   
															FROM #TBL_AttributeDetailsLocale TBADI      
															 WHERE TBADI.PimProductId = TBAD.PimProductId 
															 ORDER BY TBADI.PimProductId DESC
															 FOR XML PATH (''), TYPE
																).value('.', ' Nvarchar(max)'), 1, 0, '')+'</Product>'	   

		FROM #TBL_AttributeDetailsLocale TBAD
		INNER JOIN @TBL_MainList TBPI ON (TBAD.PimProductid = TBPI.id )
		LEFT JOIN @TBL_ProductIds TPT ON TBAD.PimProductId = TPT.PimProductId
		GROUP BY TBAD.pimProductid, TPT.ModifiedDate,TBPI.RowId
		ORDER BY TBPI.RowId 
		FOR XML PATH (''),TYPE).value('.', ' Nvarchar(max)'), 1, 0, '')+'</MainProduct>'
			--FOR XML PATH ('MainProduct'))

			
			SELECT  @ProductXML  ProductXMl
		   
		     SELECT AttributeCode ,  ZPAL.AttributeName
			 FROM ZnodePimAttribute ZPA 
			 LEFT JOIN ZnodePiMAttributeLOcale ZPAL ON (ZPAL.PimAttributeId = ZPA.PimAttributeId )
             WHERE LocaleId = 1  
			 AND  IsCategory = 0 
			 AND ZPA.IsShowOnGrid = 1  
			 UNION ALL 
			 SELECT 'PublishStatus','Publish Status'

     IF EXISTS (SELECT Top 1 1 FROM @TAb )
	 BEGIN 

		  SELECT (SELECT COUNT(1) FROM @TAb) AS RowsCount   
	 END 
	 ELSE 
	 BEGIN
	 		  SELECT (SELECT COUNT(1) FROM @ProductListIdRTR) AS RowsCount   
	 END 
		;

             -- find the all locale values 
         END TRY
         BEGIN CATCH
		    SELECT ERROR_MESSAGE()
                DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ManageProductList_XML @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@BrandCode = '+CAST(@WhereClause AS VARCHAR(max))+',@IsAssociated = '+CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@LocaleId = '+CAST(@LocaleId AS VARCHAR(50))+',@PimProductId='+@PimProductId+',@IsProductNotIn='+CAST(@IsProductNotIn AS VARCHAR(50))+',@IsCallForAttribute='+CAST(@IsCallForAttribute AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_ManageBrandProductList_XML',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;

         END CATCH;

     END;
GO


Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'LogMessage','ImpersonationLogList',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'LogMessage' and ActionName = 'ImpersonationLogList')


insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy ,CreatedDate,	ModifiedBy, ModifiedDate )
select 
 (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Users' AND ControllerName = 'Customer')	
    ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'ImpersonationLogList') ,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
     (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Users' AND ControllerName = 'Customer') and ActionId = 
     (select TOP 1 ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'ImpersonationLogList'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy ,CreatedDate,	ModifiedBy, ModifiedDate )
select 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Users' AND ControllerName = 'Customer'),
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'ImpersonationLogList')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Users' AND ControllerName = 'Customer') and ActionId = 
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'ImpersonationLogList'))

GO

IF  EXISTS (SELECT * FROM sys.triggers where name = 'Trg_ZNodeCurrency_GlobalSetting')

DISABLE TRIGGER [Trg_ZNodeCurrency_GlobalSetting] ON ZnodeCurrency 

GO
IF EXISTS (
SELECT * FROM ZnodeCurrency WHERE IsDefault = 1  AND  CurrencyId NOT IN (
SELECT CurrencyId FROM znodeculture WHERE IsDefault =1 ) )

Update  a
set a.IsDefault = 0
FROM ZnodeCurrency a
WHERE NOT EXISTS (select TOP 1 1 from ZnodeCulture b where a.CurrencyId= b.CurrencyId
and b.IsDefault = 1  )

GO
IF  EXISTS (SELECT * FROM sys.triggers where name = 'Trg_ZNodeCurrency_GlobalSetting')
ENABLE TRIGGER [Trg_ZNodeCurrency_GlobalSetting] ON ZnodeCurrency 

GO
