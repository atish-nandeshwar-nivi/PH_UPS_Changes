IF EXISTS (SELECT TOP 1 1 FROM Sys.Tables WHERE Name = 'ZnodeMultifront')
BEGIN 
IF EXISTS (SELECT TOP 1 1 FROM ZnodeMultifront where BuildVersion =   961  )
BEGIN 
PRINT 'Script is already executed....'
 SET NOEXEC ON 
END 
END
ELSE 
BEGIN 
  SET NOEXEC ON
END 
INSERT INTO [dbo].[ZnodeMultifront] ( [VersionName], [Descriptions], [MajorVersion], [MinorVersion], [LowerVersion], [BuildVersion], [PatchIndex], [CreatedBy], 
[CreatedDate], [ModifiedBy], [ModifiedDate]) 
VALUES ( N'Znode_Multifront_9_6_1', N'Upgrade GA Release by 961',9,6,1,961,0,2, GETDATE(),2, GETDATE())
GO 
SET ANSI_NULLS ON
GO
IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_SetPublishMessageEntity')
	DROP PROC Znode_SetPublishMessageEntity
GO
CREATE PROCEDURE [dbo].[Znode_SetPublishMessageEntity]
(
   @PortalId  INT = 0 
  ,@LocaleId  INT = 0 
  ,@PreviewVersionId INT = 0 
  ,@IsPreviewEnable int = 0 
  ,@ProductionVersionId INT = 0 
  ,@RevisionState varchar(50) = ''
  ,@CMSMessageKeyId INT = 0 
  ,@UserId int = 0 
  ,@Status int = 0 Output 
)
AS
/*
    This Procedure is used to publish the content block 
	1. For ZnodePublishGlobalMessageEntity pass parameter Value for @CMSMessageKeyId and @PortalId should be 0 
	declare @Status int 
	Exec [dbo].[ZnodeSetPublishMessageEntity]
	   @PortalId  = 0 
	  ,@LocaleId  = 0 
	  ,@PreviewVersionId = 0 
	  ,@IsPreviewEnable = 0 
	  ,@ProductionVersionId = 0 
	  ,@RevisionState = 'PRODUCTION'
	  ,@CMSMessageKeyId = 25 
	  ,@UserId = 2 
	  ,@Status = @Status  Output 

	 2. For ZnodePublishMessageEntity  pass parameter Value for @CMSMessageKeyId should be 0 
	 declare @Status int 
	Exec [dbo].[ZnodeSetPublishMessageEntity]
	   @PortalId  = 1 
	  ,@LocaleId  = 0 
	  ,@PreviewVersionId = 0 
	  ,@IsPreviewEnable = 0 
	  ,@ProductionVersionId = 0 
	  ,@RevisionState = 'PRODUCTION'
	  ,@CMSMessageKeyId = 0 
	  ,@UserId = 2 
	  ,@Status = @Status  Output 

  
	EXEC ZnodeSetPublishMessageEntity 1 2,3
	A. 
		1. Preview - Preview
		2. None    - Production   --- 
		3. Production - Preview/Production
	B.
		select * from ZnodePublishStateApplicationTypeMapping
		select * from ZnodePublishState where PublishStateId in (3,4) 
		select * from ZnodePublishPortalLog 
	C.
		Select * from ZnodePublishState where IsDefaultContentState = 1  and IsContentState = 1  --Production 
    
	Unit testing 
	
	 Exec [ZnodeSetPublishMessageEntity]
   @PortalId  = 1 
  ,@LocaleId  = 0 
  ,@PreviewVersionId = 0 
  ,@ProductionVersionId = 0 
  ,@RevisionState = 'Preview&Production' 
  ,@CMSMappingId  =88 
  ,@UserId = 0 




	
	*/
BEGIN 
BEGIN TRY 
SET NOCOUNT ON
   Begin 
		SET @Status =1 
		DECLARE @Tbl_PreviewVersionId    TABLE    (PreviewVersionId int , PortalId int , LocaleId int)
		DECLARE @Tbl_ProductionVersionId TABLE    (ProductionVersionId int  , PortalId int , LocaleId int)
		DECLARE @SetLocaleId INT , @DefaultLocaleId INT = dbo.Fn_GetDefaultLocaleId(), @MaxCount INT =0 , @IncrementalId INT = 1  
		DECLARE @TBL_Locale TABLE (LocaleId INT , RowId INT IDENTITY(1,1))
		INSERT INTO @TBL_Locale (LocaleId) SELECT LocaleId FROM ZnodeLocale WHERE IsActive =1 AND (LocaleId  = @LocaleId OR @LocaleId = 0 )

		
		---Following code is manditory because this sp get call from multiple places
		If Exists (SELECT  * from ZnodePublishStateApplicationTypeMapping PSA where PSA.IsEnabled =1 and  
		Exists (select TOP 1 1  from ZnodePublishState PS where PS.PublishStateId = PSA.PublishStateId ) and ApplicationType =  'WebstorePreview')
			SET @IsPreviewEnable = 1 
		else 
			SET @IsPreviewEnable = 0 

		If @PortalId > 0 
		Begin
		If @PreviewVersionId = 0 
			Begin
   				Insert into @Tbl_PreviewVersionId 
				SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and  (LocaleId = 	@LocaleId OR @LocaleId = 0  ) and PublishState ='PREVIEW'
			end
		Else 
				Insert into @Tbl_PreviewVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
				where VersionId = @PreviewVersionId
		If @ProductionVersionId = 0 
   			Begin
				Insert into @Tbl_ProductionVersionId 
				SELECT distinct VersionId , PortalId , LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and  (LocaleId = 	@LocaleId OR @LocaleId = 0  ) and PublishState ='PRODUCTION'
			End 
		Else 
			Insert into @Tbl_ProductionVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
			where VersionId = @ProductionVersionId
		End 
		Else 
		Begin
			Declare @GlobalVersion Table ( VersionId int Identity(1,1), LocaleId int , Publishstate varchar(300))
			if @IsPreviewEnable = 1
			Begin
				Insert into @GlobalVersion  
				Select LocaleId , 'PREVIEW' from @TBL_Locale 
			End
			Insert into @GlobalVersion  
				Select LocaleId , 'PRODUCTION' from @TBL_Locale 
		end
		
		If @IsPreviewEnable = 1 AND (@RevisionState like '%Preview%'  OR @RevisionState like '%Production%'  ) 
		Begin
			If not exists (Select TOP 1 1 from @Tbl_PreviewVersionId) AND @PortalId > 0 
				SET @Status =0 ;
			If @CMSMessageKeyId > 0 AND @Status =0     -- Content block
				SELECT 1 AS ID,cast(@Status as BIT) AS Status;  
			if @Status  = 0 
				Return 0 
		End
		
		If  (@RevisionState like '%Production%' OR @RevisionState = 'None')
		Begin
			If not exists (Select TOP 1 1 from @Tbl_ProductionVersionId) AND @PortalId > 0
				SET @Status =0 ;
			If @CMSMessageKeyId > 0 AND @Status =0  -- Content block
				SELECT 1 AS ID,cast(@Status as BIT) AS Status;  
			if @Status  = 0 
				Return 0 
		End
		
		 DECLARE @TBL_CMSMessageDataFinal TABLE
                     (CMSMessageId INT,
                      LocaleId     INT,
                      Message      NVARCHAR(MAX),
                      MessageKey   NVARCHAR(100),
                      AreaName     VARCHAR(100)
                     );
		
		SET @MaxCount = ISNULL((SELECT MAx(RowId) FROM @TBL_Locale),0)
		WHILE @IncrementalId <= @MaxCount
		BEGIN
			    SET @SetLocaleId = (SELECT Top 1 LocaleId FROM @TBL_locale WHERE RowId = @IncrementalId)
				Begin  
					;With Cte_GetCMSSEODetails AS 
					(
						
						    SELECT DISTINCT ZCM.CMSMessageId,ZCM.LocaleId,ZCM.Message,ZCMK.MessageKey,'' AreaName
                            FROM ZnodeCMSmessage AS ZCM
                            INNER JOIN ZnodeCMSPortalMessage AS ZCPM ON ZCM.CMSMessageId = ZCPM.CMSMessageId
                            INNER JOIN znodecmsmessagekey AS ZCMK ON ZCPM.CMSMessageKeyId = ZCMK.CMSMessageKeyId
                            WHERE (ZCPM.PortalId = @PortalId OR  @PortalId = 0 )  
							AND (ZCM.LocaleId = @SetLocaleId OR ZCM.LocaleId = @DefaultLocaleId) 
							AND (ZCMK.CMSMessageKeyId = @CMSMessageKeyId OR @CMSMessageKeyId  = 0 ) 
					)
					, Cte_GetFirstCMSSEODetails  AS
					(
						SELECT 
							 CMSMessageId,LocaleId,Message,MessageKey,AreaName
							 FROM Cte_GetCMSSEODetails 
						WHERE LocaleId = @SetLocaleId
					)
					, Cte_GetDefaultFilterData AS
					(
						SELECT 
							CMSMessageId,LocaleId,Message,MessageKey,AreaName
						FROM  Cte_GetFirstCMSSEODetails 
						UNION ALL 
						SELECT 
							 CMSMessageId,LocaleId,Message,MessageKey,AreaName
						FROM Cte_GetCMSSEODetails p
						WHERE LocaleId = @DefaultLocaleId 
						AND NOT EXISTS ( SELECT TOP 1 1 FROM Cte_GetFirstCMSSEODetails AS q WHERE q.MessageKey = p.MessageKey)
					)
					
					insert into @TBL_CMSMessageDataFinal(CMSMessageId,LocaleId,Message,MessageKey,AreaName)
					SELECT CMSMessageId,@SetLocaleId ,Message,MessageKey,AreaName FROM Cte_GetDefaultFilterData  A 
				End 
				
				SET @IncrementalId = @IncrementalId + 1;
				--DELETE FROM @CMSWidgetData;
				--DELETE FROM @CMSWidgetDataFinal;
        END;
	
	End

	If @IsPreviewEnable = 1 AND (@RevisionState like '%Preview%'  OR @RevisionState like '%Production%' ) 
	Begin

		If @PortalId  >0 
		Begin
	
			--Data inserted into flat table ZnodePublishMessageEntity (Replica of MongoDB Collection )  
			Delete from ZnodePublishMessageEntity where PortalId = @PortalId  
			and MessageKey in (select MessageKey from @TBL_CMSMessageDataFinal) 
			and VersionId in (Select PreviewVersionId from  @TBL_PreviewVersionId) 
		
			Insert Into ZnodePublishMessageEntity 
			(VersionId,PublishStartTime,LocaleId,PortalId,MessageKey,Message,Area)
			SELECT B.PreviewVersionId , Getdate(), A.LocaleId,@PortalId,MessageKey,Message,AreaName
			FROM @TBL_CMSMessageDataFinal A inner join @Tbl_PreviewVersionId B on 
			@PortalId = B.PortalId and  A.LocaleId = B.LocaleId

			Update B Set B.IsPublished  =1 , PublishStateId = DBO.Fn_GetPublishStateIdForPreview()  
			from ZnodeCmsPortalMessage A 
			Inner join ZnodeCmsMessage B ON A.CMSMessageId = B.CMSMessageId 
			inner join ZnodeCmsMessagekey C   On A.CMSMessageKeyId = C.CMSMessageKeyId 
			where (C.CMSMessageKeyId = @CMSMessageKeyId OR @CMSMessageKeyId  = 0 ) 
			AND (A.PortalId = @PortalId OR @PortalId= 0 )
		End
		If @PortalId  = 0 
		Begin
		
			--ZnodePublishGlobalVersionEntity
			Insert into  ZnodePublishGlobalVersionEntity (VersionId,PublishStartTime,PublishState,LocaleId)
			select A.VersionId, GETDATE(),A.Publishstate, A.LocaleId from @GlobalVersion A  where  A.PublishState = 'PREVIEW'
			and Not exists (Select TOP 1 1 from ZnodePublishGlobalVersionEntity B where B.LocaleId = A.LocaleId
			and B.PublishState = 'PREVIEW') 


			--Data inserted into flat table ZnodePublishMessageEntity (Replica of MongoDB Collection )  
			Delete from ZnodePublishGlobalMessageEntity where VersionId in (Select VersionId from  ZnodePublishGlobalVersionEntity
			where PublishState = 'PREVIEW' ) 
			AND (
			(Exists (Select TOP 1 1 from @TBL_CMSMessageDataFinal CMD where CMD.MessageKey = ZnodePublishGlobalMessageEntity.MessageKey))
			OR @CMSMessageKeyId = 0	)

			Insert Into ZnodePublishGlobalMessageEntity 
			(VersionId,PublishStartTime,LocaleId,MessageKey,Message,Area)
			SELECT B.VersionId , Getdate(), A.LocaleId,MessageKey,Message,AreaName
			FROM @TBL_CMSMessageDataFinal A inner join ZnodePublishGlobalVersionEntity B on 
			A.LocaleId = B.LocaleId AND B.PublishState = 'PREVIEW'

			Update B Set B.IsPublished  =1 , PublishStateId = DBO.Fn_GetPublishStateIdForPreview()  
			from ZnodeCmsPortalMessage A 
			Inner join ZnodeCmsMessage B ON A.CMSMessageId = B.CMSMessageId 
			inner join ZnodeCmsMessagekey C   On A.CMSMessageKeyId = C.CMSMessageKeyId 
			where (C.CMSMessageKeyId = @CMSMessageKeyId OR @CMSMessageKeyId  = 0 ) 
			AND (A.PortalId = @PortalId OR @PortalId= 0 )

		End
		
	End
	-------------------------- End Preview 
	If (@RevisionState like '%Production%' OR @RevisionState = 'None')
	Begin
		
		if (@PortalId > 0 ) 
		Begin
			-- Only production version id will process 
			Delete from ZnodePublishMessageEntity where PortalId = @PortalId  
			and MessageKey in (select MessageKey from @TBL_CMSMessageDataFinal) 
			and VersionId in (Select ProductionVersionId from @TBL_ProductionVersionId ) 
		
			Insert Into ZnodePublishMessageEntity 
				(VersionId,PublishStartTime,LocaleId,PortalId,MessageKey,Message,Area)
				SELECT B.ProductionVersionId , Getdate(), A.LocaleId,@PortalId,MessageKey,Message,AreaName
				FROM @TBL_CMSMessageDataFinal A inner join @Tbl_ProductionVersionId B on 
				@PortalId = B.PortalId and  A.LocaleId = B.LocaleId		

			Update B Set B.IsPublished  =1 , PublishStateId = DBO.Fn_GetPublishStateIdForPublish()  
			from ZnodeCmsPortalMessage A 
			Inner join ZnodeCmsMessage B ON A.CMSMessageId = B.CMSMessageId 
			inner join ZnodeCmsMessagekey C   On A.CMSMessageKeyId = C.CMSMessageKeyId 
			where (C.CMSMessageKeyId = @CMSMessageKeyId OR @CMSMessageKeyId  = 0 ) 
			AND (A.PortalId = @PortalId OR @PortalId= 0 )
		End 
		else 
		If @PortalId  = 0 
		Begin
				--ZnodePublishGlobalVersionEntity
			Insert into  ZnodePublishGlobalVersionEntity (VersionId,PublishStartTime,PublishState,LocaleId)
			select A.VersionId, GETDATE(),A.Publishstate, A.LocaleId from @GlobalVersion A  where  A.PublishState = 'PRODUCTION'
			and Not exists (Select TOP 1 1 from ZnodePublishGlobalVersionEntity B where B.LocaleId = A.LocaleId
			and B.PublishState = 'PRODUCTION') 

			--Data inserted into flat table ZnodePublishMessageEntity (Replica of MongoDB Collection )  
			Delete from ZnodePublishGlobalMessageEntity where VersionId in (Select VersionId from  ZnodePublishGlobalVersionEntity
			where PublishState = 'PRODUCTION' )  
			AND (
			(Exists (Select TOP 1 1 from @TBL_CMSMessageDataFinal CMD where CMD.MessageKey = ZnodePublishGlobalMessageEntity.MessageKey))
			OR @CMSMessageKeyId = 0	)

			Insert Into ZnodePublishGlobalMessageEntity 
			(VersionId,PublishStartTime,LocaleId,MessageKey,Message,Area)
			SELECT B.VersionId , Getdate(), A.LocaleId,MessageKey,Message,AreaName
			FROM @TBL_CMSMessageDataFinal A inner join ZnodePublishGlobalVersionEntity B on 
			A.LocaleId = B.LocaleId AND B.PublishState = 'PRODUCTION'

			Update B Set B.IsPublished  =1 , PublishStateId = DBO.Fn_GetPublishStateIdForPublish()  
			from ZnodeCmsPortalMessage A 
			Inner join ZnodeCmsMessage B ON A.CMSMessageId = B.CMSMessageId 
			inner join ZnodeCmsMessagekey C   On A.CMSMessageKeyId = C.CMSMessageKeyId 
			where (C.CMSMessageKeyId = @CMSMessageKeyId OR @CMSMessageKeyId  = 0 ) 
			AND (A.PortalId = @PortalId OR @PortalId= 0 )


		End
		
	End
		
	SET @Status = 1 
	If @CMSMessageKeyId > 0 
	SELECT 0 AS ID,CAST(1 AS BIT) AS Status;   
END TRY 
BEGIN CATCH 
	SET @Status = 0  
 
	 DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
	 @ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeSetPublishMessageEntity 
			@PortalId = '+CAST(@PortalId AS VARCHAR	(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10))
			+',@PreviewVersionId = ' + CAST(@PreviewVersionId  AS varchar(20))
			+',@ProductionVersionId = ' + CAST(@ProductionVersionId  AS varchar(20))
			+',@RevisionState = ''' + CAST(@RevisionState  AS varchar(50))
		    +',@UserId = ' + CAST(@UserId AS varchar(20));	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
	
	If @CMSMessageKeyId > 0 
		SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
	
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'ZnodeSetPublishMessageEntity',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;

END CATCH
END
go
if exists(select * from sys.objects where type = 'FN' and name = 'Fn_RandomString')
	drop function [dbo].[Fn_RandomString]
go
create function [dbo].[Fn_RandomString]
(
    @pStringLength int = 10 --set desired string length

) returns varchar(max)

/* Requires View create view dbo.View_NewID as select newid() as NewIDValue;

select [dbo].[Fn_RandomString] (10)
 */

as begin
 declare  @RandomString varchar(max);

    with
    a1 as (select 1 as N 
		   union all
           select 1 
		   union all
           select 1 
		   union all
           select 1 
		   union all
           select 1 
		   union all
           select 1 
		   union all
		   select 1 
		   union all
		   select 1 
		   union all
           select 1 
		   union all
           select 1),
    a2 as (select 1 as N
           from a1 as a
		   cross join a1 as b),
    a3 as (select 1 as N
           from a2 as a cross join a2 as b),
    a4 as (select 1 as N
           from a3 as a
		   cross join a2 as b),
    Tally as (select row_number() over (order by N) as N
				from a4)
    , cteRandomString (RandomString
    ) as ( select top (@pStringLength)
        substring(x,(abs(checksum((select NewIDValue from View_NewID)))%36)+1,1)

    from Tally cross join (select x='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') a

    )
     select @RandomString =replace((select '','' + RandomString
     from cteRandomString
     for xml path ('')),'','');

	 
    return (@RandomString);



end
go
if exists(select * from sys.views where name = 'View_NewID')
	drop view View_NewID
go
create view [dbo].[View_NewID] as
select newid() as NewIDValue
go

delete from ZnodeImportAttributeValidation
where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Voucher')
and AttributeCode = 'CardNumber'

delete from ZnodeImportTemplateMapping 
where ImportTemplateId = (select top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'VoucherTemplate')
and SourceColumnName  = 'CardNumber'

INSERT ZnodeImportTemplateMapping(ImportTemplateId,SourceColumnName,TargetColumnName,DisplayOrder,IsActive,IsAllowNull,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT (select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'VoucherTemplate'),
'VoucherNumber' SourceColumnName,'VoucherNumber' TargetColumnName,0 DisplayOrder,0 IsActive, 0 IsAllowNull,2 CreatedBy,GETDATE() CreatedDate,2 ModifiedBy,GETDATE() ModifiedDate
WHERE NOT EXISTS(SELECT * FROM ZnodeImportTemplateMapping WHERE ImportTemplateId=(select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'VoucherTemplate') 
	AND SourceColumnName ='VoucherNumber')

insert into ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName
,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
select 'Text','VoucherNumber',(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Voucher'),1,'Text','RegularExpression',
null,'','',null,2,getdate(),2,getdate(),3
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName ='Text' and AttributeCode = 'VoucherNumber' 
      and ControlName = 'Text' and ImportHeadId=(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Voucher')
	  and ValidationName = 'RegularExpression')

update  ZnodeImportAttributeValidation set IsRequired = 0
where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Voucher')
and AttributeCode = 'VoucherNumber' and AttributeTypeName = 'Text'


update ZnodeImportAttributeValidation set AttributeCode = 'VoucherAmount'
where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Voucher')
and AttributeCode = 'Amount' 

update ZnodeImportAttributeValidation set AttributeCode = 'RestrictVoucherToCustomer'
where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Voucher')
and AttributeCode = 'RestrictToCustomerAccount' 

update ZnodeImportTemplateMapping set SourceColumnName = 'VoucherAmount', TargetColumnName = 'VoucherAmount'
where SourceColumnName = 'Amount' AND ImportTemplateId = (select top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'VoucherTemplate')

update ZnodeImportTemplateMapping set SourceColumnName = 'RestrictVoucherToCustomer', TargetColumnName = 'RestrictVoucherToCustomer'
where SourceColumnName = 'RestrictToCustomerAccount' AND ImportTemplateId = (select top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'VoucherTemplate')

--------

delete from ZnodeImportAttributeValidation
where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Voucher')
and AttributeCode = 'IsActive' and AttributeTypeName = 'Number'

insert into ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName
,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
select 'Text','IsActive',(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Voucher'),1,'Text','RegularExpression',
null,'','',null,2,getdate(),2,getdate(),3
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName ='Text' and AttributeCode = 'IsActive' 
      and ControlName = 'Text' and ImportHeadId=(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Voucher')
	  and ValidationName = 'RegularExpression')

delete from ZnodeImportAttributeValidation
where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Voucher')
and AttributeCode = 'RestrictToCustomerAccount' and AttributeTypeName = 'Number'

insert into ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName
,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
select 'Text','RestrictToCustomerAccount',(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Voucher'),1,'Text','RegularExpression',
null,'','',null,2,getdate(),2,getdate(),3
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName ='Text' and AttributeCode = 'RestrictToCustomerAccount' 
      and ControlName = 'Text' and ImportHeadId=(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Voucher')
	  and ValidationName = 'RegularExpression')
--------
delete from ZnodeImportAttributeValidation
where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Voucher')
and AttributeCode = 'RestrictVoucherToCustomer' and AttributeTypeName = 'Number'


delete from ZnodeImportAttributeValidation
where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Voucher')
and AttributeCode = 'RestrictToCustomerAccount' and AttributeTypeName = 'Text'

insert into ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName
,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
select 'Text','RestrictVoucherToCustomer',(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Voucher'),1,'Text','RegularExpression',
null,'','',null,2,getdate(),2,getdate(),3
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName ='Text' and AttributeCode = 'RestrictVoucherToCustomer' 
      and ControlName = 'Text' and ImportHeadId=(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Voucher')
	  and ValidationName = 'RegularExpression')

delete from ZnodeImportAttributeValidation
where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Voucher')
and AttributeCode = 'IsReferralCommission'

delete from ZnodeImportTemplateMapping 
where ImportTemplateId = (select top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'VoucherTemplate')
and SourceColumnName  = 'IsReferralCommission'
go
IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportVoucher')
	DROP PROC Znode_ImportVoucher
GO
CREATE PROCEDURE [dbo].[Znode_ImportVoucher](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @PimCatalogId int= 0)
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import Attribute Code Name and their default input validation rule other 
	--			  flag will be inserted as default we need to modify front end
	
	-- Unit Testing: 

	--------------------------------------------------------------------------------------
BEGIN
	BEGIN TRAN Voucher;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max);
		DECLARE @GetDate datetime= dbo.Fn_GetDate(), @LocaleId int  ;
		SELECT @LocaleId = DBO.Fn_GetDefaultLocaleId();
		-- Retrive RoundOff Value from global setting 

		DECLARE @InsertVoucherData TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY,RowNumber int, StoreCode varchar(400),VoucherName varchar(600), VoucherNumber varchar(600),
			VoucherAmount numeric(28,6),UserName varchar(600), ExpirationDate Datetime,IsActive varchar(100),RemainingAmount numeric(28,6),
			RestrictVoucherToCustomer varchar(100), StartDate datetime, GUID nvarchar(400)
		);
		
		SET @SSQL = 'Select RowNumber,StoreCode, VoucherName,VoucherNumber,VoucherAmount,UserName,ExpirationDate,
						IsActive,RemainingAmount,RestrictVoucherToCustomer,StartDate,GUID FROM '+@TableName;
		INSERT INTO @InsertVoucherData( RowNumber,StoreCode, VoucherName,VoucherNumber,VoucherAmount,UserName,ExpirationDate,
										IsActive,RemainingAmount,RestrictVoucherToCustomer,StartDate,GUID)
		EXEC sys.sp_sqlexec @SSQL;

		select ANZU.UserName, ANU.Id, ZU.UserId
		into #TempUserData
		from AspNetZnodeUser ANZU 
		inner join AspNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName
		inner join ZnodeUser ZU ON ANU.Id = ZU.AspNetUserId

		update @InsertVoucherData set VoucherNumber = [dbo].[Fn_RandomString](10)
		where isnull(ltrim(rtrim(VoucherNumber)),'') = ''

		-- Start Functional Validation 
		-----------------------------------------------
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '70', 'StoreCode', StoreCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertVoucherData AS ii
			   WHERE ii.StoreCode not in 
			   (
				   SELECT StoreCode FROM ZnodePortal 
			   );

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '37', 'ExpirationDate', ExpirationDate, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertVoucherData AS ii
			   WHERE ii.ExpirationDate < ii.StartDate

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '65', 'ExpirationDate', ExpirationDate, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertVoucherData AS ii
			   WHERE ii.ExpirationDate < @GetDate

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '37', 'StartDate', StartDate, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertVoucherData AS ii
			   WHERE (ii.StartDate > ii.ExpirationDate )


		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '8', 'StartDate', StartDate, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertVoucherData AS ii
			   WHERE isnull(ii.StartDate,'') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '8', 'ExpirationDate', StartDate, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertVoucherData AS ii
			   WHERE isnull(ii.ExpirationDate,'') = ''
		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '67', 'UserName', UserName, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertVoucherData AS ii
			   WHERE isnull(ii.UserName,'') <> '' and not exists ( SELECT VoucherNumber FROM #TempUserData U where ii.UserName = U.UserName);

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '71', 'VoucherNumber', VoucherNumber, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertVoucherData AS ii
			   WHERE len(ltrim(rtrim(ii.VoucherNumber))) <> 10 
	
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '68', 'IsActive', IsActive, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM @InsertVoucherData AS ii  
			WHERE ii.IsActive not in ('True','1','Yes','FALSE','0','No','')
		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '5', 'ExpirationDate', ExpirationDate, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM @InsertVoucherData AS ii  
			WHERE isdate(ii.ExpirationDate) = 0

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '5', 'StartDate', StartDate, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM @InsertVoucherData AS ii  
			WHERE isdate(ii.StartDate) = 0

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '69', 'RemainingAmount', RemainingAmount, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM @InsertVoucherData AS ii  
			WHERE ii.VoucherAmount <> ii.RemainingAmount

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '68', 'RestrictVoucherToCustomer', RestrictVoucherToCustomer, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM @InsertVoucherData AS ii  
			WHERE ii.RestrictVoucherToCustomer not in ('True','1','Yes','FALSE','0','No','')

		UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ VoucherName - ' + ISNULL(VoucherName,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN @InsertVoucherData IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL

		-- End Function Validation 	
		-----------------------------------------------
		-- Delete Invalid Data after functional validatin  
		DELETE FROM @InsertVoucherData
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
		);
		
		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM @InsertVoucherData
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount ,
		TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
		WHERE ImportProcessLogId = @ImportProcessLogId;
	
		UPDATE ZGC set ExpirationDate = ICD.ExpirationDate, UserId = @UserId, ModifiedBy = @UserId, ModifiedDate = @GetDate, IsActive = ICD.IsActive,
				RemainingAmount = ICD.RemainingAmount, RestrictToCustomerAccount = ICD.RestrictVoucherToCustomer, Name = ICD.VoucherName 
		from ZnodeGiftCard ZGC
		inner join @InsertVoucherData ICD ON ICD.VoucherNumber = ZGC.CardNumber
		inner join ZnodePortal ZP ON ICD.StoreCode = ZP.StoreCode and ZGC.PortalId = ZP.PortalId
		left join #TempUserData ZU ON ICD.UserName = ZU.UserName

		insert into ZnodeGiftCard(PortalId,Name,CardNumber,Amount,UserId,ExpirationDate,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,IsActive,RemainingAmount,RestrictToCustomerAccount,StartDate)
		select ZP.PortalId, ICD.VoucherName, ICD.VoucherNumber, ICD.VoucherAmount, ZU.UserId, ICD.ExpirationDate, @UserId, @Getdate, @UserId, @Getdate, ICD.IsActive, ICD.RemainingAmount, ICD.RestrictVoucherToCustomer, ICD.StartDate
		From @InsertVoucherData ICD 
		inner join ZnodePortal ZP ON ICD.StoreCode = ZP.StoreCode 
		left join #TempUserData ZU ON ICD.UserName = ZU.UserName
		where not exists(select * from ZnodeGiftCard ZGC where ICD.VoucherNumber = ZGC.CardNumber )


		UPDATE ZnodeImportProcessLog
		  SET STATUS = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = Getdate()
		WHERE ImportProcessLogId = @ImportProcessLogId;
		COMMIT TRAN Voucher;
	END TRY
	BEGIN CATCH

		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = Getdate()
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN Voucher;
	END CATCH;
END;
go
delete from ZnodeImportAttributeValidation
where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Voucher')
and AttributeCode = 'RestrictVoucherToCustomer' 

delete from ZnodeImportTemplateMapping
where SourceColumnName = 'RestrictVoucherToCustomer' and ImportTemplateId = (select top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'VoucherTemplate')

INSERT ZnodeImportTemplateMapping(ImportTemplateId,SourceColumnName,TargetColumnName,DisplayOrder,IsActive,IsAllowNull,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT (select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'VoucherTemplate'),
'RestrictVoucherToACustomer' SourceColumnName,'RestrictVoucherToACustomer' TargetColumnName,0 DisplayOrder,0 IsActive, 0 IsAllowNull,2 CreatedBy,GETDATE() CreatedDate,2 ModifiedBy,GETDATE() ModifiedDate
WHERE NOT EXISTS(SELECT * FROM ZnodeImportTemplateMapping WHERE ImportTemplateId=(select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'VoucherTemplate') 
	AND SourceColumnName ='RestrictVoucherToACustomer')

insert into ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName
,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
select 'Text','RestrictVoucherToACustomer',(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Voucher'),1,'Text','RegularExpression',
null,'','',null,2,getdate(),2,getdate(),3
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName ='Text' and AttributeCode = 'RestrictVoucherToACustomer' 
      and ControlName = 'Text' and ImportHeadId=(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Voucher')
	  and ValidationName = 'RegularExpression')
go
IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportVoucher')
	DROP PROC Znode_ImportVoucher
GO
CREATE PROCEDURE [dbo].[Znode_ImportVoucher](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @PimCatalogId int= 0)
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import Attribute Code Name and their default input validation rule other 
	--			  flag will be inserted as default we need to modify front end
	
	-- Unit Testing: 

	--------------------------------------------------------------------------------------
BEGIN
	BEGIN TRAN Voucher;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max);
		DECLARE @GetDate datetime= dbo.Fn_GetDate(), @LocaleId int  ;
		SELECT @LocaleId = DBO.Fn_GetDefaultLocaleId();
		-- Retrive RoundOff Value from global setting 

		DECLARE @InsertVoucherData TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY,RowNumber int, StoreCode varchar(400),VoucherName varchar(600), VoucherNumber varchar(600),
			VoucherAmount numeric(28,6),UserName varchar(600), ExpirationDate Datetime,IsActive varchar(100),RemainingAmount numeric(28,6),
			RestrictVoucherToACustomer varchar(100), StartDate datetime, GUID nvarchar(400)
		);
		
		SET @SSQL = 'Select RowNumber,StoreCode, VoucherName,VoucherNumber,VoucherAmount,UserName,ExpirationDate,
						IsActive,RemainingAmount,RestrictVoucherToACustomer,StartDate,GUID FROM '+@TableName;
		INSERT INTO @InsertVoucherData( RowNumber,StoreCode, VoucherName,VoucherNumber,VoucherAmount,UserName,ExpirationDate,
										IsActive,RemainingAmount,RestrictVoucherToACustomer,StartDate,GUID)
		EXEC sys.sp_sqlexec @SSQL;

		select ANZU.UserName, ANU.Id, ZU.UserId
		into #TempUserData
		from AspNetZnodeUser ANZU 
		inner join AspNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName
		inner join ZnodeUser ZU ON ANU.Id = ZU.AspNetUserId

		update @InsertVoucherData set VoucherNumber = [dbo].[Fn_RandomString](10)
		where isnull(ltrim(rtrim(VoucherNumber)),'') = ''

		-- Start Functional Validation 
		-----------------------------------------------
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '70', 'StoreCode', StoreCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertVoucherData AS ii
			   WHERE ii.StoreCode not in 
			   (
				   SELECT StoreCode FROM ZnodePortal 
			   );

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '37', 'ExpirationDate', ExpirationDate, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertVoucherData AS ii
			   WHERE ii.ExpirationDate < ii.StartDate

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '65', 'ExpirationDate', ExpirationDate, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertVoucherData AS ii
			   WHERE ii.ExpirationDate < @GetDate

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '37', 'StartDate', StartDate, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertVoucherData AS ii
			   WHERE (ii.StartDate > ii.ExpirationDate )


		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '8', 'StartDate', StartDate, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertVoucherData AS ii
			   WHERE isnull(ii.StartDate,'') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '8', 'ExpirationDate', StartDate, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertVoucherData AS ii
			   WHERE isnull(ii.ExpirationDate,'') = ''
		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '67', 'UserName', UserName, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertVoucherData AS ii
			   WHERE isnull(ii.UserName,'') <> '' and not exists ( SELECT VoucherNumber FROM #TempUserData U where ii.UserName = U.UserName);

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '71', 'VoucherNumber', VoucherNumber, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertVoucherData AS ii
			   WHERE len(ltrim(rtrim(ii.VoucherNumber))) <> 10 
	
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '68', 'IsActive', IsActive, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM @InsertVoucherData AS ii  
			WHERE ii.IsActive not in ('True','1','Yes','FALSE','0','No','')
		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '5', 'ExpirationDate', ExpirationDate, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM @InsertVoucherData AS ii  
			WHERE isdate(ii.ExpirationDate) = 0

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '5', 'StartDate', StartDate, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM @InsertVoucherData AS ii  
			WHERE isdate(ii.StartDate) = 0

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '69', 'RemainingAmount', RemainingAmount, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM @InsertVoucherData AS ii  
			WHERE ii.VoucherAmount <> ii.RemainingAmount

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '68', 'RestrictVoucherToACustomer', RestrictVoucherToACustomer, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM @InsertVoucherData AS ii  
			WHERE ii.RestrictVoucherToACustomer not in ('True','1','Yes','FALSE','0','No','')

		UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ VoucherName - ' + ISNULL(VoucherName,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN @InsertVoucherData IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL

		-- End Function Validation 	
		-----------------------------------------------
		-- Delete Invalid Data after functional validatin  
		DELETE FROM @InsertVoucherData
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
		);
		
		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM @InsertVoucherData
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount ,
		TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
		WHERE ImportProcessLogId = @ImportProcessLogId;
	
		UPDATE ZGC set ExpirationDate = ICD.ExpirationDate, UserId = @UserId, ModifiedBy = @UserId, ModifiedDate = @GetDate, IsActive = ICD.IsActive,
				RemainingAmount = ICD.RemainingAmount, RestrictToCustomerAccount = ICD.RestrictVoucherToACustomer, Name = ICD.VoucherName, StartDate = ICD.StartDate
		from ZnodeGiftCard ZGC
		inner join @InsertVoucherData ICD ON ICD.VoucherNumber = ZGC.CardNumber
		inner join ZnodePortal ZP ON ICD.StoreCode = ZP.StoreCode and ZGC.PortalId = ZP.PortalId
		left join #TempUserData ZU ON ICD.UserName = ZU.UserName

		insert into ZnodeGiftCard(PortalId,Name,CardNumber,Amount,UserId,ExpirationDate,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,IsActive,RemainingAmount,RestrictToCustomerAccount,StartDate)
		select ZP.PortalId, ICD.VoucherName, ICD.VoucherNumber, ICD.VoucherAmount, ZU.UserId, ICD.ExpirationDate, @UserId, @Getdate, @UserId, @Getdate, ICD.IsActive, ICD.RemainingAmount, ICD.RestrictVoucherToACustomer, ICD.StartDate
		From @InsertVoucherData ICD 
		inner join ZnodePortal ZP ON ICD.StoreCode = ZP.StoreCode 
		left join #TempUserData ZU ON ICD.UserName = ZU.UserName
		where not exists(select * from ZnodeGiftCard ZGC where ICD.VoucherNumber = ZGC.CardNumber )


		UPDATE ZnodeImportProcessLog
		  SET STATUS = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = Getdate()
		WHERE ImportProcessLogId = @ImportProcessLogId;
		COMMIT TRAN Voucher;
	END TRY
	BEGIN CATCH

		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = Getdate()
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN Voucher;
	END CATCH;
END;
go
IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportAttributeDefaultValue')
	DROP PROC Znode_ImportAttributeDefaultValue
GO

CREATE PROCEDURE [dbo].[Znode_ImportAttributeDefaultValue](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200))
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import Attribute Code Name and their default input validation rule other 
	--			  flag will be inserted as default we need to modify front end
	
	-- Unit Testing: 

	--------------------------------------------------------------------------------------
BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max);
		DECLARE @GetDate datetime= dbo.Fn_GetDate(), @LocaleId int  ;
		SELECT @LocaleId = DBO.Fn_GetDefaultLocaleId();
		-- Retrive RoundOff Value from global setting 
		DECLARE @InsertPimAtrribute TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY,
			-- RowNumber int, AttributeName varchar(300), AttributeCode varchar(300), AttributeType varchar(300), DisplayOrder int, GUID nvarchar(400)
			RowNumber int, AttributeCode varchar(300),AttributeDefaultValueCode varchar(300),AttributeDefaultValue varchar(1000),IsEditable varchar(10),DisplayOrder int, IsDefault varchar(10), SwatchText varchar(1000),SwatchImage varchar(500), SwatchImagePath varchar(500), GUID nvarchar(400)
		
		);
		DECLARE @InsertedPimAttributeIds TABLE (PimAttributeId int ,PimAttributeDefaultValueId int,AttributeDefaultValueCode nvarchar(300))
		
		SET @SSQL = 'Select RowNumber,AttributeCode,AttributeDefaultValueCode,AttributeDefaultValue,IsEditable,DisplayOrder,IsDefault,SwatchText,SwatchImage, SwatchImagePath ,GUID FROM '+@TableName;
		INSERT INTO @InsertPimAtrribute( RowNumber,AttributeCode,AttributeDefaultValueCode,AttributeDefaultValue,IsEditable,DisplayOrder,IsDefault,SwatchText,SwatchImage, SwatchImagePath ,GUID)
		EXEC sys.sp_sqlexec @SSQL;

		--@MessageDisplay will use to display validate message for input inventory value  
		DECLARE @AttributeCode TABLE
		( 
		   AttributeCode nvarchar(300)
		);
		INSERT INTO @AttributeCode
			   SELECT AttributeCode
			   FROM ZnodePimAttribute 

		-- Start Functional Validation 
		-----------------------------------------------
		--INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		--	   SELECT '10', 'AttributeCode', AttributeCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		--	   FROM @InsertPimAtrribute AS ii
		--	   WHERE ii.AttributeCode in 
		--	   (
		--		   SELECT AttributeCode FROM @AttributeCode  where AttributeCode is not null 
		--	   );
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '9', 'AttributeCode', AttributeCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ii.AttributeCode not in 
			   (
				   SELECT AttributeCode FROM @AttributeCode
			   );
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '53', 'AttributeDefaultValueCode', AttributeDefaultValueCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ii.AttributeDefaultValueCode in 
			   (
				   select AttributeDefaultValueCode FROM @InsertPimAtrribute  Group BY AttributeCode, AttributeDefaultValueCode  having count(*) > 1 
			   );

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '50', 'AttributeDefaultValueCode', AttributeDefaultValueCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ltrim(rtrim(isnull(ii.AttributeDefaultValueCode,''))) like '%[^0-9A-Za-z]%'

		--INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		--	   SELECT '50', 'AttributeDefaultValueCode', AttributeDefaultValueCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		--	   FROM @InsertPimAtrribute AS ii
		--	   WHERE Isnumeric(ltrim(rtrim(isnull(ii.AttributeDefaultValueCode,'')))) =1

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '35', 'AttributeDefaultValueCode', AttributeDefaultValueCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ltrim(rtrim(isnull(ii.AttributeDefaultValueCode,''))) like '% %' -----space not allowed

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '35', 'IsEditable', IsEditable, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM @InsertPimAtrribute AS ii  
			WHERE ii.IsEditable not in ('True','1','Yes','FALSE','0','No','')

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '35', 'IsDefault', IsDefault, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM @InsertPimAtrribute AS ii  
			WHERE ii.IsDefault not in ('True','1','Yes','FALSE','0','No','')

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			SELECT '17', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			FROM @InsertPimAtrribute AS ii
			WHERE (ii.DisplayOrder <> '' OR ii.DisplayOrder IS NOT NULL ) AND  ii.DisplayOrder = 0

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			SELECT '64', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			FROM @InsertPimAtrribute AS ii
			WHERE (ii.DisplayOrder <> '' OR ii.DisplayOrder IS NOT NULL )AND  ii.DisplayOrder > 9999

		UPDATE ZIL
			SET ZIL.ColumnName =   ZIL.ColumnName + ' [ AttributeDefaultValueCode - ' + ISNULL(AttributeDefaultValueCode,'') + ' ] '
			FROM ZnodeImportLog ZIL 
			INNER JOIN @InsertPimAtrribute IPA ON (ZIL.RowNumber = IPA.RowNumber)
			WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL


		-- End Function Validation 	
		-----------------------------------------------
		-- Delete Invalid Data after functional validatin  
		DELETE FROM @InsertPimAtrribute
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
		);
		
		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM @InsertPimAtrribute
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount
		,	TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End

		DECLARE @MediaId INT
		SET @MediaId = (SELECT TOP 1 MediaId from @InsertPimAtrribute IPA INNER JOIN ZnodeMedia ZM ON IPA.SwatchImage = ZM.FileName and IPA.SwatchImagePath = ZM.Path)

		if (isnull(@MediaId,0)=0)
			SET @MediaId = (SELECT max(MediaId) from @InsertPimAtrribute IPA INNER JOIN ZnodeMedia ZM ON IPA.SwatchImage = ZM.FileName)

        update ZPADV set ZPADV.IsEditable = case when IPA.IsEditable in ('True','1','Yes') then 1 else 0 end,ZPADV.DisplayOrder = Case when Isnull(IPA.DisplayOrder,0) <> 0 then  IPA.DisplayOrder else ZPADV.DisplayOrder end ,
		                 ZPADV.IsDefault = case when IPA.IsDefault in ('True','1','Yes') then 1 else 0 end ,ZPADV.SwatchText = IPA.SwatchText ,
		                 ZPADV.MediaId = case when isnull(@MediaId,0)= 0 then ZPADV.MediaId else @MediaId end, ZPADV.ModifiedBy = @UserId, ZPADV.ModifiedDate = @GetDate 
		from @InsertPimAtrribute IPA 
		INNER JOIN ZnodePimAttribute ZPA ON IPA.AttributeCode = ZPA.AttributeCode 
		inner join ZnodePimAttributeDefaultValue ZPADV on ZPA.PimAttributeId = ZPADV.PimAttributeId and IPA.AttributeDefaultValueCode = ZPADV.AttributeDefaultValueCode

		update ZPADVL set ZPADVL.AttributeDefaultValue = IPA.AttributeDefaultValue, ZPADVL.ModifiedBy = @UserId, ZPADVL.ModifiedDate = @GetDate 
		from @InsertPimAtrribute IPA 
		INNER JOIN ZnodePimAttribute ZPA ON IPA.AttributeCode = ZPA.AttributeCode 
		inner join ZnodePimAttributeDefaultValue ZPADV on ZPA.PimAttributeId = ZPADV.PimAttributeId and IPA.AttributeDefaultValueCode = ZPADV.AttributeDefaultValueCode
		inner join ZnodePimAttributeDefaultValueLocale ZPADVL ON ( ZPADVL.PimAttributeDefaultValueId = ZPADV.PimAttributeDefaultValueId)

		--- Insert data into base table ZnodePimatrribute with their validation 

		INSERT INTO ZnodePimAttributeDefaultValue (PimAttributeId,AttributeDefaultValueCode,IsEditable,DisplayOrder,IsDefault,SwatchText,MediaId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)		
		OUTPUT Inserted.PimAttributeId,Inserted.PimAttributeDefaultValueId,Inserted.AttributeDefaultValueCode INTO @InsertedPimAttributeIds  		
		SELECT ZPA.PimAttributeId,IPA.AttributeDefaultValueCode, case when IPA.IsEditable in ('True','1','Yes') then 1 else 0 end , Case when Isnull(IPA.DisplayOrder,0) = 0 then  9999 else IPA.DisplayOrder end  , 
		       case when IPA.IsDefault in ('True','1','Yes') then 1 else 0 end , IPA.SwatchText, @MediaId,@UserId , @GetDate ,@UserId , @GetDate 
		from @InsertPimAtrribute IPA 
		INNER JOIN ZnodePimAttribute ZPA ON IPA.AttributeCode = ZPA.AttributeCode  
		where not exists(select * from ZnodePimAttributeDefaultValue ZPADV where ZPA.PimAttributeId = ZPADV.PimAttributeId and IPA.AttributeDefaultValueCode = ZPADV.AttributeDefaultValueCode)
		
		INSERT INTO ZnodePimAttributeDefaultValueLocale(LocaleId,PimAttributeDefaultValueId,AttributeDefaultValue,Description,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		Select @LocaleId ,IPAS.PimAttributeDefaultValueId, IPA.AttributeDefaultValue, '', @UserId , @GetDate ,@UserId , @GetDate   
		FROM @InsertedPimAttributeIds IPAS 
		INNER JOIN ZnodePimAttribute ZPA ON IPAS.PimAttributeId = ZPA.PimAttributeId  
		INNER JOIN @InsertPimAtrribute IPA ON ZPA.AttributeCode= IPA.AttributeCode and IPAS.AttributeDefaultValueCode = IPA.AttributeDefaultValueCode


		UPDATE ZnodeImportProcessLog
		  SET STATUS = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;
		COMMIT TRAN A;
	END TRY
	BEGIN CATCH

		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN A;
	END CATCH;
END;
go
if not exists(select * from information_schema.columns where table_name = 'ZnodeAddress' and column_name = 'Custom1')
begin
	alter table ZnodeAddress add Custom1 NVARCHAR (MAX)  NULL
end
go
if not exists(select * from information_schema.columns where table_name = 'ZnodeAddress' and column_name = 'Custom2')
begin
	alter table ZnodeAddress add Custom2 NVARCHAR (MAX)  NULL
end
go
if not exists(select * from information_schema.columns where table_name = 'ZnodeAddress' and column_name = 'Custom3')
begin
	alter table ZnodeAddress add Custom3 NVARCHAR (MAX)  NULL
end
go
if not exists(select * from information_schema.columns where table_name = 'ZnodeAddress' and column_name = 'Custom4')
begin
	alter table ZnodeAddress add Custom4 NVARCHAR (MAX)  NULL
end
go
if not exists(select * from information_schema.columns where table_name = 'ZnodeAddress' and column_name = 'Custom5')
begin
	alter table ZnodeAddress add Custom5 NVARCHAR (MAX)  NULL
end
go
if not exists(select * from information_schema.columns where table_name = 'ZnodePimCatalog' and column_name = 'CatalogCode')
begin
	alter table ZnodePimCatalog add [CatalogCode] nvarchar(100)      NULL
end
go
update ZnodeApplicationSetting set Setting = '<?xml version="1.0" encoding="utf-16"?><columns><column><id>1</id><name>PimCatalogId</name><headertext>Checkbox</headertext><width>40</width><datatype>String</datatype><columntype>Int32</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>y</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>2</id><name>CatalogCode</name><headertext>Catalog Code</headertext><width>60</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>500</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>y</iscontrol><controltype>Text</controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>3</id><name>CatalogName</name><headertext>Catalog Name</headertext><width>60</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>500</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>y</iscontrol><controltype>Text</controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>4</id><name>PublishStatus</name><headertext>Publish Status</headertext><width>60</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>500</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype>Text</controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>5</id><name>PublishProductCount</name><headertext>No. of Products Published</headertext><width>40</width><datatype>String</datatype><columntype>Int32</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>6</id><name>PublishCategoryCount</name><headertext>No. of Categories Published</headertext><width>40</width><datatype>String</datatype><columntype>Int32</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>7</id><name>PublishCreatedDate</name><headertext>Published Date</headertext><width>30</width><datatype>Date</datatype><columntype>DateTime</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>8</id><name>Manage</name><headertext>Action</headertext><width>30</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format>Manage|Edit|Copy|Publish|View|Trigger|Delete</format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Manage|Edit|Copy|Publish|Publish History|Create Scheduler|Delete</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl>/PIM/Catalog/Manage|/PIM/Catalog/EditCatalogName|/PIM/Catalog/Copy|/PIM/Catalog/Publish|/PIM/Catalog/GetCatalogPublishStatus|/PIM/Catalog/CreateScheduler|/PIM/Catalog/Delete</manageactionurl><manageparamfield>pimCatalogId|pimCatalogId|pimCatalogId|pimCatalogId|pimCatalogId,UrlEncodedCatalogName|ConnectorTouchPoints,SchedulerCallFor|pimCatalogId</manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>9</id><name>IsActive</name><headertext></headertext><width>0</width><datatype>String</datatype><columntype>Boolean</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>y</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>y</iscontrol><controltype>HiddenField</controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column></columns>'
where itemname = 'ZnodePimCatalog'
go
IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_CopyPimCatalog')
	DROP PROC Znode_CopyPimCatalog
GO

CREATE PROCEDURE [dbo].[Znode_CopyPimCatalog]
( 
	@CatalogId int,
	@UserId int,
	@CatalogCode varchar(100),
	@CatalogName varchar(500),
	@CopyAllData bit= 0,
	@Status bit OUT
)
AS
/*
	 Summary: Create copy of existing catalog
	 Here copy all data of catalog on the basis of @CopyAllData bit parameter 
	 if true then copy all data other wise not copy all data 	   
	 Three tables are manipulated ZnodePimCatalog create new catalog, 
	 ZnodePimCategoryHierarchy copy the category and ZnodePimCatalogCategory Copy the products 	   
	 
	 Unit Testing   
	 begin tran
	 EXEC Znode_CopyPimCatalog @CatalogId=1,@UserId=2,@CatalogName='test',@CopyAllData=1,@Status=1
	 rollback tran
*/
BEGIN
	BEGIN TRAN CopyPimCatalog;
	BEGIN TRY
		SET NOCOUNT ON;
		DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
		DECLARE @PimCatalogId int; -- hold the newly created pim catalog id 
		DECLARE @ZnodePimCategoryHierarchyTable AS TABLE (PimCategoryHierarchyId INT,PimCatalogId INT ,PimCategoryId INT)
		DECLARE @ParentPimCategoryHierarchyId INT;
		BEGIN
			INSERT INTO ZnodePimCatalog( CatalogName, IsActive, ExternalId, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, CatalogCode )
			SELECT @CatalogName, 1, NULL, @UserId, @GetDate, @UserId, @GetDate, @CatalogCode;
		END;
		SET @PimCatalogId = SCOPE_IDENTITY();
		IF @CopyAllData = 1 -- copy all data 

		BEGIN
		    -- here copy the category Hierarchy
			INSERT INTO ZnodePimCategoryHierarchy( PimCatalogId, ParentPimCategoryHierarchyId, PimCategoryId, DisplayOrder, IsActive, ActivationDate, ExpirationDate, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
			OUTPUT INSERTED.PimCategoryHierarchyId, INSERTED.PimCatalogId,INSERTED.PimCategoryId
			INTO @ZnodePimCategoryHierarchyTable
			SELECT @PimCatalogId, ParentPimCategoryHierarchyId, PimCategoryId, DisplayOrder, IsActive, ActivationDate, ExpirationDate, @UserId, @GetDate, @UserId, @GetDate
			FROM ZnodePimCategoryHierarchy
			WHERE PimCatalogId = @CatalogId; 
			
			SELECT @ParentPimCategoryHierarchyId=PimCategoryHierarchyId FROM ZnodePimCategoryHierarchy
			WHERE PimCatalogId=@PimCatalogId and ParentPimCategoryHierarchyId IS NULL

			UPDATE pch
			SET pch.ParentPimCategoryHierarchyId=llpch.PimCategoryHierarchyId
			from ZnodePimCategoryHierarchy pch
			LEFT JOIN ZnodePimCategoryHierarchy lpch on lpch.PimCategoryHierarchyId=pch.ParentPimCategoryHierarchyId and lpch.PimCatalogId=@CatalogId
			LEFT JOIN ZnodePimCategoryHierarchy llpch on llpch.PimCategoryId=lpch.PimCategoryId AND ISNULL(llpch.ParentPimCategoryHierarchyId,0) =  ISNULL(lpch.ParentPimCategoryHierarchyId,0) and llpch.PimCatalogId=pch.PimCatalogId
			where pch.PimCatalogId=@PimCatalogId
			AND pch.ParentPimCategoryHierarchyId IS NOT NULL
 
		END;
		SELECT @PimCatalogId AS ID, CAST(CASE
										 WHEN @PimCatalogId IS NULL THEN 0
										 ELSE 1
										 END AS bit) AS [Status]; 
		SET @Status = 1;
	COMMIT TRAN CopyPimCatalog;
	END TRY
	BEGIN CATCH
		DECLARE @Error_procedure varchar(1000)= ERROR_PROCEDURE(), @ErrorMessage nvarchar(max)= ERROR_MESSAGE(), @ErrorLine varchar(100)= ERROR_LINE(), @ErrorCall nvarchar(max)= 'EXEC Znode_CopyPimCatalog @CatalogId = '+CAST(@CatalogId AS varchar(100))+' ,@UserId='+CAST(@UserId AS varchar(100))+' ,@CatalogName= '+@CatalogName+',@CopyAllData='+CAST(@CopyAllData AS varchar(50))+',@Status='+CAST(@Status AS varchar(50));
		SELECT @CatalogId AS ID, CAST(0 AS bit) AS [Status];
		SET @Status = 0;
		ROLLBACK TRAN CopyPimCatalog;
		EXEC Znode_InsertProcedureErrorLog
			 @ProcedureName = 'Znode_CopyPimCatalog', 
			 @ErrorInProcedure = @Error_procedure,
			 @ErrorMessage = @ErrorMessage,
			 @ErrorLine = @ErrorLine, 
			 @ErrorCall = @ErrorCall;
	END CATCH;
END;
GO
IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_GetCatalogList')
	DROP PROC Znode_GetCatalogList
GO

CREATE PROCEDURE [dbo].[Znode_GetCatalogList]
(
	@WhereClause NVARCHAR(MAX),
    @Rows        INT           = 100,
    @PageNo      INT           = 1,
    @Order_BY    VARCHAR(100)  = '',
    @RowsCount   INT OUT
)
AS 
/*
	 Summary :- This Procedure is used to get the publish status of the catalog 
	 Unit Testig 
	 EXEC  Znode_GetCatalogList '',100,1,'',0
	  EXEC  Znode_GetCatalogList null,100,1,'',0
*/
   BEGIN 
		BEGIN TRY 
		SET NOCOUNT ON 

		 DECLARE @SQL  NVARCHAR(max) 
		 DECLARE @TBL_CatalogId TABLE (PimCatalogId int, PublishCatalogLogId int,CatalogName VARCHAR(max),PublishStatus VARCHAR(300),RowId INT ,CountId INT,PublishCreatedDate DATETIME ,PublishModifiedDate DATETIME,PublishCategoryCount INT ,PublishProductCount INT, IsActive BIT, CatalogCode  nvarchar(100))
	 
		 SET @SQL = '


		DECLARE @TBL_PublishProductId TABLE (PublishProductId int,PublishCatalogId int )
		INSERT INTO @TBL_PublishProductId
		SELECT COUNT( DISTINCT PublishProductId ),PublishCatalogId
		FROM ZnodePublishCategoryProduct a
		WHERE PublishCatalogId IN  (select PublishCatalogId from ZnodePublishCatalog b where a.PublishCatalogId = b.PublishCatalogId)
		AND a.PublishCategoryId  <> 0 and a.PublishCategoryId is not null
		GROUP BY PublishCatalogId 

		DECLARE @TBL_PublishCategoryId TABLE (PublishCategoryId int,PublishCatalogId int )
		INSERT INTO @TBL_PublishCategoryId
		SELECT COUNT(DISTINCT PimCategoryId ),PublishCatalogId
		FROM ZnodePublishCategory ZPC
		WHERE PublishCatalogId IN  (select PublishCatalogId from ZnodePublishCatalog b where ZPC.PublishCatalogId = b.PublishCatalogId)
		GROUP BY PublishCatalogId


		--SELECT COUNT(DISTINCT PublishCategoryId ),PublishCatalogId
		--FROM ZnodePublishCategoryProduct ZPC
		--WHERE PublishCatalogId IN  (select PublishCatalogId from ZnodePublishCatalog b where ZPC.PublishCatalogId = b.PublishCatalogId)
		--AND ZPC.PublishCategoryId  <> 0 and ZPC.PublishCategoryId is not null
		--GROUP BY PublishCatalogId

		;With Cte_MaxPublish AS 
		(
			 SELECT max(PublishCatalogLogId) PublishCatalogLogId,PimCatalogId
			 FROM ZnodePublishCatalogLog ZPCL   
			 GROUP BY PimCatalogId
		)
		,Cte_CatalogLog AS (
		SELECT ZPC.CatalogName CatalogName, PublishCatalogLogId PublishCatalogLogId,  TYU.DisplayName   PublishStatus ,ZPC.PimCatalogId,ZPCL.CreatedDate AS PublishCreatedDate,ZPCL.ModifiedDate AS PublishModifiedDate,
		
		ISNULL(ZPCL.PublishCategoryId,0) 
	 
		PublishCategoryCount,ISNULL(a.PublishProductId,0) 
		PublishProductCount,ZPC.IsActive, ZPC.CatalogCode
		FROM ZnodePimCatalog ZPC 
		LEFT JOIN ZnodePublishCatalogLog ZPCL  ON ( EXISTS (SELECT TOP 1 1 FROM Cte_MaxPublish CTE 											
		WHERE CTE.PimCatalogId = ZPC.PimCatalogId AND CTE.PublishCatalogLogId =  ZPCL.PublishCatalogLogId) )	
		LEFT JOIN ZnodePublishState TYU ON (TYU.PublishStateId = ZPCL.PublishStateId )
		LEFT JOIN  @TBL_PublishProductId a on (zpcl.PublishCatalogId = a.PublishCatalogId)
		LEFT JOIN  @TBL_PublishCategoryId PC ON (PC.PublishCatalogId = zpcl.PublishCatalogId))

	     ,Cte_PublishStatus 
		 AS (
		 SELECT PimCatalogId, PublishCatalogLogId, CatalogName, PublishStatus,PublishCreatedDate,PublishModifiedDate,PublishCategoryCount,PublishProductCount,IsActive,CatalogCode,
		 '+[dbo].[Fn_GetPagingRowId](@Order_BY,'PublishCatalogLogId DESC')+' , Count(*)Over() CountId FROM Cte_CatalogLog
         WHERE 1=1 '+[dbo].[Fn_GetFilterWhereClause](@WhereClause)+' )
	 
		 SELECT PimCatalogId, PublishCatalogLogId,CatalogName,PublishStatus,RowId,CountId,PublishCreatedDate,PublishModifiedDate,PublishCategoryCount,PublishProductCount,IsActive,CatalogCode
		 FROM Cte_PublishStatus 
		 '+[dbo].[Fn_GetPaginationWhereClause](@PageNo,@Rows)+' '
	

	     PRINT @sql 
		 INSERT INTO @TBL_CatalogId 
		 EXEC (@SQL)

		 SELECT  PimCatalogId,PublishCatalogLogId,CatalogName,PublishStatus,PublishCreatedDate,PublishModifiedDate,PublishCategoryCount,PublishProductCount,IsActive, CatalogCode
		 FROM @TBL_CatalogId

		 SET @RowsCount = ISNULL((SELECT TOP 1 COUNTID FROM @TBL_CatalogId),0)
	 

	 
		 END TRY 
		 BEGIN CATCH 
			DECLARE @Status BIT ;
			SET @Status = 0;
			DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetCatalogList @WhereClause = '''+ISNULL(@WhereClause,'''''')+''',@Rows='+ISNULL(CAST(@Rows AS
			VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')
              			 
			SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
			EXEC Znode_InsertProcedureErrorLog
					@ProcedureName = 'Znode_GetCatalogList',
					@ErrorInProcedure = 'Znode_GetCatalogList',
					@ErrorMessage = @ErrorMessage,
					@ErrorLine = @ErrorLine,
					@ErrorCall = @ErrorCall;
		 END CATCH 
   END
GO

if exists(select * from sys.indexes where name = 'IX_ZnodePimAttributeDefaultJson_PimAttributeDefaultValueId_5A075')
	drop index IX_ZnodePimAttributeDefaultJson_PimAttributeDefaultValueId_5A075 ON [dbo].[ZnodePimAttributeDefaultJson]
go
if exists(select * from information_schema.columns where table_name = 'ZnodePimAttributeDefaultJson' and column_name = 'DefaultValueJson')
begin
	alter table ZnodePimAttributeDefaultJson alter column [DefaultValueJson]           VARCHAR (max) NULL
end
go
CREATE NONCLUSTERED INDEX [IX_ZnodePimAttributeDefaultJson_PimAttributeDefaultValueId_5A075]
    ON [dbo].[ZnodePimAttributeDefaultJson]([PimAttributeDefaultValueId] ASC)
    INCLUDE([DefaultValueJson]) WITH (FILLFACTOR = 90);
go
Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Catalog','IsCatalogCodeExists',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Catalog' and ActionName = 'IsCatalogCodeExists')

insert into ZnodeActionMenu ( MenuId, ActionId, CreatedBy ,CreatedDate, ModifiedBy, ModifiedDate )
select
(select top 1 MenuId from ZnodeMenu where MenuName = 'Catalogs')
,(select top 1 ActionId from ZnodeActions where ControllerName = 'Catalog' and ActionName = 'IsCatalogCodeExists') ,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId =
(select top 1 MenuId from ZnodeMenu where MenuName = 'Catalogs') and ActionId =
(select top 1 ActionId from ZnodeActions where ControllerName = 'Catalog' and ActionName = 'IsCatalogCodeExists'))

insert into ZnodeMenuActionsPermission ( MenuId, ActionId, AccessPermissionId, CreatedBy ,CreatedDate, ModifiedBy, ModifiedDate )
select
(select top 1 MenuId from ZnodeMenu where MenuName = 'Catalogs') ,
(select top 1 ActionId from ZnodeActions where ControllerName = 'Catalog' and ActionName = 'IsCatalogCodeExists')
,1,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeMenuActionsPermission where MenuId =
(select top 1 MenuId from ZnodeMenu where MenuName = 'Catalogs') and ActionId =
(select top 1 ActionId from ZnodeActions where ControllerName = 'Catalog' and ActionName = 'IsCatalogCodeExists'))
--------------------------------

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Account','IsAccountCodeExists',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Account' and ActionName = 'IsAccountCodeExists')

insert into ZnodeActionMenu ( MenuId, ActionId, CreatedBy ,CreatedDate, ModifiedBy, ModifiedDate )
select
(select top 1 MenuId from ZnodeMenu where MenuName = 'Accounts')
,(select top 1 ActionId from ZnodeActions where ControllerName = 'Account' and ActionName = 'IsAccountCodeExists') ,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId =
(select top 1 MenuId from ZnodeMenu where MenuName = 'Accounts') and ActionId =
(select top 1 ActionId from ZnodeActions where ControllerName = 'Account' and ActionName = 'IsAccountCodeExists'))

insert into ZnodeMenuActionsPermission ( MenuId, ActionId, AccessPermissionId, CreatedBy ,CreatedDate, ModifiedBy, ModifiedDate )
select
(select top 1 MenuId from ZnodeMenu where MenuName = 'Accounts') ,
(select top 1 ActionId from ZnodeActions where ControllerName = 'Account' and ActionName = 'IsAccountCodeExists')
,1,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeMenuActionsPermission where MenuId =
(select top 1 MenuId from ZnodeMenu where MenuName = 'Accounts') and ActionId =
(select top 1 ActionId from ZnodeActions where ControllerName = 'Account' and ActionName = 'IsAccountCodeExists'))
go
update znodeapplicationSetting set setting ='<?xml version="1.0" encoding="utf-16"?><columns><column><id>1</id><name>InventoryId</name><headertext>Checkbox</headertext><width>50</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>y</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>2</id><name>SKU</name><headertext>SKU</headertext><width>50</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>3</id><name>ProductName</name><headertext>Product Name</headertext><width>50</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>4</id><name>WarehouseCode</name><headertext>Warehouse</headertext><width>50</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>y</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>5</id><name>WarehouseName</name><headertext>Warehouse Name</headertext><width>50</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>y</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>6</id><name>Quantity</name><headertext>Quantity On Hand</headertext><width>50</width><datatype>String</datatype><columntype>Decimal</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>15</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>y</iscontrol><controltype>Text</controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>7</id><name>ReOrderLevel</name><headertext>Re-Order Level</headertext><width>50</width><datatype>String</datatype><columntype>Decimal</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>7</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>y</iscontrol><controltype>Text</controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>8</id><name>CreatedDate</name><headertext>Created Date</headertext><width>30</width><datatype>Date</datatype><columntype>DateTime</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>y</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>9</id><name>ModifiedDate</name><headertext>Modified Date</headertext><width>30</width><datatype>Date</datatype><columntype>DateTime</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>y</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>10</id><name>Manage</name><headertext>Action</headertext><width>30</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format>Edit|Delete</format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Edit|Delete</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl>/Warehouse/EditSKUInventory|/Warehouse/DeleteSKUInventory</manageactionurl><manageparamfield>inventoryId,warehouseId,SKU,WarehouseName|inventoryId</manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column></columns>'
where ItemName = 'ZnodeWarehouseInventory'
go
IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportAttributeDefaultValue')
	DROP PROC Znode_ImportAttributeDefaultValue
GO

CREATE PROCEDURE [dbo].[Znode_ImportAttributeDefaultValue](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200))
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import Attribute Code Name and their default input validation rule other 
	--			  flag will be inserted as default we need to modify front end
	
	-- Unit Testing: 

	--------------------------------------------------------------------------------------
BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max);
		DECLARE @GetDate datetime= dbo.Fn_GetDate(), @LocaleId int  ;
		SELECT @LocaleId = DBO.Fn_GetDefaultLocaleId();
		-- Retrive RoundOff Value from global setting 
		DECLARE @InsertPimAtrribute TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY,
			-- RowNumber int, AttributeName varchar(300), AttributeCode varchar(300), AttributeType varchar(300), DisplayOrder int, GUID nvarchar(400)
			RowNumber int, AttributeCode varchar(300),AttributeDefaultValueCode varchar(300),AttributeDefaultValue varchar(1000),IsEditable varchar(10),DisplayOrder int, IsDefault varchar(10), SwatchText varchar(1000),SwatchImage varchar(500), SwatchImagePath varchar(500), GUID nvarchar(400)
		
		);
		DECLARE @InsertedPimAttributeIds TABLE (PimAttributeId int ,PimAttributeDefaultValueId int,AttributeDefaultValueCode nvarchar(300))
		
		SET @SSQL = 'Select RowNumber,AttributeCode,AttributeDefaultValueCode,AttributeDefaultValue,IsEditable,DisplayOrder,IsDefault,SwatchText,SwatchImage, SwatchImagePath ,GUID FROM '+@TableName;
		INSERT INTO @InsertPimAtrribute( RowNumber,AttributeCode,AttributeDefaultValueCode,AttributeDefaultValue,IsEditable,DisplayOrder,IsDefault,SwatchText,SwatchImage, SwatchImagePath ,GUID)
		EXEC sys.sp_sqlexec @SSQL;

		--@MessageDisplay will use to display validate message for input inventory value  
		DECLARE @AttributeCode TABLE
		( 
		   AttributeCode nvarchar(300)
		);
		INSERT INTO @AttributeCode
			   SELECT AttributeCode
			   FROM ZnodePimAttribute 

		-- Start Functional Validation 
		-----------------------------------------------
		--INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		--	   SELECT '10', 'AttributeCode', AttributeCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		--	   FROM @InsertPimAtrribute AS ii
		--	   WHERE ii.AttributeCode in 
		--	   (
		--		   SELECT AttributeCode FROM @AttributeCode  where AttributeCode is not null 
		--	   );
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '9', 'AttributeCode', AttributeCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ii.AttributeCode not in 
			   (
				   SELECT AttributeCode FROM @AttributeCode
			   );
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '53', 'AttributeDefaultValueCode', AttributeDefaultValueCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ii.AttributeDefaultValueCode in 
			   (
				   select AttributeDefaultValueCode FROM @InsertPimAtrribute  Group BY AttributeCode, AttributeDefaultValueCode  having count(*) > 1 
			   );

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '50', 'AttributeDefaultValueCode', AttributeDefaultValueCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ltrim(rtrim(isnull(ii.AttributeDefaultValueCode,''))) like '%[^0-9A-Za-z]%'

		--INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		--	   SELECT '50', 'AttributeDefaultValueCode', AttributeDefaultValueCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		--	   FROM @InsertPimAtrribute AS ii
		--	   WHERE Isnumeric(ltrim(rtrim(isnull(ii.AttributeDefaultValueCode,'')))) =1

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '35', 'AttributeDefaultValueCode', AttributeDefaultValueCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ltrim(rtrim(isnull(ii.AttributeDefaultValueCode,''))) like '% %' -----space not allowed

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '35', 'IsEditable', IsEditable, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM @InsertPimAtrribute AS ii  
			WHERE ii.IsEditable not in ('True','1','Yes','FALSE','0','No','')

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '35', 'IsDefault', IsDefault, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM @InsertPimAtrribute AS ii  
			WHERE ii.IsDefault not in ('True','1','Yes','FALSE','0','No','')

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			SELECT '17', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			FROM @InsertPimAtrribute AS ii
			WHERE (ii.DisplayOrder <> '' OR ii.DisplayOrder IS NOT NULL ) AND  ii.DisplayOrder = 0

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			SELECT '64', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			FROM @InsertPimAtrribute AS ii
			WHERE (ii.DisplayOrder <> '' OR ii.DisplayOrder IS NOT NULL )AND  ii.DisplayOrder > 99999

		UPDATE ZIL
			SET ZIL.ColumnName =   ZIL.ColumnName + ' [ AttributeDefaultValueCode - ' + ISNULL(AttributeDefaultValueCode,'') + ' ] '
			FROM ZnodeImportLog ZIL 
			INNER JOIN @InsertPimAtrribute IPA ON (ZIL.RowNumber = IPA.RowNumber)
			WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL


		-- End Function Validation 	
		-----------------------------------------------
		-- Delete Invalid Data after functional validatin  
		DELETE FROM @InsertPimAtrribute
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
		);
		
		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM @InsertPimAtrribute
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount
		,	TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End

		DECLARE @MediaId INT
		SET @MediaId = (SELECT TOP 1 MediaId from @InsertPimAtrribute IPA INNER JOIN ZnodeMedia ZM ON IPA.SwatchImage = ZM.FileName and IPA.SwatchImagePath = ZM.Path)

		if (isnull(@MediaId,0)=0)
			SET @MediaId = (SELECT max(MediaId) from @InsertPimAtrribute IPA INNER JOIN ZnodeMedia ZM ON IPA.SwatchImage = ZM.FileName)

        update ZPADV set ZPADV.IsEditable = case when IPA.IsEditable in ('True','1','Yes') then 1 else 0 end,ZPADV.DisplayOrder = Case when Isnull(IPA.DisplayOrder,0) <> 0 then  IPA.DisplayOrder else ZPADV.DisplayOrder end ,
		                 ZPADV.IsDefault = case when IPA.IsDefault in ('True','1','Yes') then 1 else 0 end ,ZPADV.SwatchText = IPA.SwatchText ,
		                 ZPADV.MediaId = case when isnull(@MediaId,0)= 0 then ZPADV.MediaId else @MediaId end, ZPADV.ModifiedBy = @UserId, ZPADV.ModifiedDate = @GetDate 
		from @InsertPimAtrribute IPA 
		INNER JOIN ZnodePimAttribute ZPA ON IPA.AttributeCode = ZPA.AttributeCode 
		inner join ZnodePimAttributeDefaultValue ZPADV on ZPA.PimAttributeId = ZPADV.PimAttributeId and IPA.AttributeDefaultValueCode = ZPADV.AttributeDefaultValueCode

		update ZPADVL set ZPADVL.AttributeDefaultValue = IPA.AttributeDefaultValue, ZPADVL.ModifiedBy = @UserId, ZPADVL.ModifiedDate = @GetDate 
		from @InsertPimAtrribute IPA 
		INNER JOIN ZnodePimAttribute ZPA ON IPA.AttributeCode = ZPA.AttributeCode 
		inner join ZnodePimAttributeDefaultValue ZPADV on ZPA.PimAttributeId = ZPADV.PimAttributeId and IPA.AttributeDefaultValueCode = ZPADV.AttributeDefaultValueCode
		inner join ZnodePimAttributeDefaultValueLocale ZPADVL ON ( ZPADVL.PimAttributeDefaultValueId = ZPADV.PimAttributeDefaultValueId)

		--- Insert data into base table ZnodePimatrribute with their validation 

		INSERT INTO ZnodePimAttributeDefaultValue (PimAttributeId,AttributeDefaultValueCode,IsEditable,DisplayOrder,IsDefault,SwatchText,MediaId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)		
		OUTPUT Inserted.PimAttributeId,Inserted.PimAttributeDefaultValueId,Inserted.AttributeDefaultValueCode INTO @InsertedPimAttributeIds  		
		SELECT ZPA.PimAttributeId,IPA.AttributeDefaultValueCode, case when IPA.IsEditable in ('True','1','Yes') then 1 else 0 end , Case when Isnull(IPA.DisplayOrder,0) = 0 then  99999 else IPA.DisplayOrder end  , 
		       case when IPA.IsDefault in ('True','1','Yes') then 1 else 0 end , IPA.SwatchText, @MediaId,@UserId , @GetDate ,@UserId , @GetDate 
		from @InsertPimAtrribute IPA 
		INNER JOIN ZnodePimAttribute ZPA ON IPA.AttributeCode = ZPA.AttributeCode  
		where not exists(select * from ZnodePimAttributeDefaultValue ZPADV where ZPA.PimAttributeId = ZPADV.PimAttributeId and IPA.AttributeDefaultValueCode = ZPADV.AttributeDefaultValueCode)
		
		INSERT INTO ZnodePimAttributeDefaultValueLocale(LocaleId,PimAttributeDefaultValueId,AttributeDefaultValue,Description,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		Select @LocaleId ,IPAS.PimAttributeDefaultValueId, IPA.AttributeDefaultValue, '', @UserId , @GetDate ,@UserId , @GetDate   
		FROM @InsertedPimAttributeIds IPAS 
		INNER JOIN ZnodePimAttribute ZPA ON IPAS.PimAttributeId = ZPA.PimAttributeId  
		INNER JOIN @InsertPimAtrribute IPA ON ZPA.AttributeCode= IPA.AttributeCode and IPAS.AttributeDefaultValueCode = IPA.AttributeDefaultValueCode


		UPDATE ZnodeImportProcessLog
		  SET STATUS = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;
		COMMIT TRAN A;
	END TRY
	BEGIN CATCH

		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN A;
	END CATCH;
END;
GO
IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportVoucher')
	DROP PROC Znode_ImportVoucher
GO
CREATE PROCEDURE [dbo].[Znode_ImportVoucher](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @PimCatalogId int= 0)
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import Attribute Code Name and their default input validation rule other 
	--			  flag will be inserted as default we need to modify front end
	
	-- Unit Testing: 

	--------------------------------------------------------------------------------------
BEGIN
	BEGIN TRAN Voucher;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max);
		DECLARE @GetDate datetime= dbo.Fn_GetDate(), @LocaleId int  ;
		SELECT @LocaleId = DBO.Fn_GetDefaultLocaleId();
		-- Retrive RoundOff Value from global setting 

		DECLARE @InsertVoucherData TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY,RowNumber int, StoreCode varchar(400),VoucherName varchar(600), VoucherNumber varchar(600),
			VoucherAmount numeric(28,6),UserName varchar(600), ExpirationDate Datetime,IsActive varchar(100),RemainingAmount numeric(28,6),
			RestrictVoucherToACustomer varchar(100), StartDate datetime, GUID nvarchar(400)
		);
		
		SET @SSQL = 'Select RowNumber,StoreCode, VoucherName,VoucherNumber,VoucherAmount,UserName,ExpirationDate,
						IsActive,RemainingAmount,RestrictVoucherToACustomer,StartDate,GUID FROM '+@TableName;
		INSERT INTO @InsertVoucherData( RowNumber,StoreCode, VoucherName,VoucherNumber,VoucherAmount,UserName,ExpirationDate,
										IsActive,RemainingAmount,RestrictVoucherToACustomer,StartDate,GUID)
		EXEC sys.sp_sqlexec @SSQL;

		select ANZU.UserName, ANU.Id, ZU.UserId
		into #TempUserData
		from AspNetZnodeUser ANZU 
		inner join AspNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName
		inner join ZnodeUser ZU ON ANU.Id = ZU.AspNetUserId

		update @InsertVoucherData set VoucherNumber = [dbo].[Fn_RandomString](10)
		where isnull(ltrim(rtrim(VoucherNumber)),'') = ''

		-- Start Functional Validation 
		-----------------------------------------------
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '70', 'StoreCode', StoreCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertVoucherData AS ii
			   WHERE ii.StoreCode not in 
			   (
				   SELECT StoreCode FROM ZnodePortal 
			   );

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '65', 'ExpirationDate', ExpirationDate, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertVoucherData AS ii
			   WHERE ii.ExpirationDate < ii.StartDate

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '65', 'ExpirationDate', ExpirationDate, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertVoucherData AS ii
			   WHERE ii.ExpirationDate < @GetDate

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '8', 'StartDate', StartDate, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertVoucherData AS ii
			   WHERE isnull(ii.StartDate,'') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '8', 'ExpirationDate', StartDate, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertVoucherData AS ii
			   WHERE isnull(ii.ExpirationDate,'') = ''
		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '67', 'UserName', UserName, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertVoucherData AS ii
			   WHERE isnull(ii.UserName,'') <> '' and not exists ( SELECT VoucherNumber FROM #TempUserData U where ii.UserName = U.UserName);

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '71', 'VoucherNumber', VoucherNumber, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertVoucherData AS ii
			   WHERE len(ltrim(rtrim(ii.VoucherNumber))) <> 10 
	
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '68', 'IsActive', IsActive, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM @InsertVoucherData AS ii  
			WHERE ii.IsActive not in ('True','1','Yes','FALSE','0','No','')
		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '5', 'ExpirationDate', ExpirationDate, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM @InsertVoucherData AS ii  
			WHERE isdate(ii.ExpirationDate) = 0

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '5', 'StartDate', StartDate, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM @InsertVoucherData AS ii  
			WHERE isdate(ii.StartDate) = 0

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '69', 'RemainingAmount', RemainingAmount, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM @InsertVoucherData AS ii  
			WHERE ii.VoucherAmount <> ii.RemainingAmount

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '68', 'RestrictVoucherToACustomer', RestrictVoucherToACustomer, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM @InsertVoucherData AS ii  
			WHERE ii.RestrictVoucherToACustomer not in ('True','1','Yes','FALSE','0','No','')

		UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ VoucherName - ' + ISNULL(VoucherName,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN @InsertVoucherData IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL

		-- End Function Validation 	
		-----------------------------------------------
		-- Delete Invalid Data after functional validatin  
		DELETE FROM @InsertVoucherData
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
		);
		
		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM @InsertVoucherData
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount ,
		TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
		WHERE ImportProcessLogId = @ImportProcessLogId;
	
		UPDATE ZGC set ExpirationDate = ICD.ExpirationDate, UserId = @UserId, ModifiedBy = @UserId, ModifiedDate = @GetDate, IsActive = ICD.IsActive,
				RemainingAmount = ICD.RemainingAmount, RestrictToCustomerAccount = ICD.RestrictVoucherToACustomer, Name = ICD.VoucherName, StartDate = ICD.StartDate
		from ZnodeGiftCard ZGC
		inner join @InsertVoucherData ICD ON ICD.VoucherNumber = ZGC.CardNumber
		inner join ZnodePortal ZP ON ICD.StoreCode = ZP.StoreCode and ZGC.PortalId = ZP.PortalId
		left join #TempUserData ZU ON ICD.UserName = ZU.UserName

		insert into ZnodeGiftCard(PortalId,Name,CardNumber,Amount,UserId,ExpirationDate,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,IsActive,RemainingAmount,RestrictToCustomerAccount,StartDate)
		select ZP.PortalId, ICD.VoucherName, ICD.VoucherNumber, ICD.VoucherAmount, ZU.UserId, ICD.ExpirationDate, @UserId, @Getdate, @UserId, @Getdate, ICD.IsActive, ICD.RemainingAmount, ICD.RestrictVoucherToACustomer, ICD.StartDate
		From @InsertVoucherData ICD 
		inner join ZnodePortal ZP ON ICD.StoreCode = ZP.StoreCode 
		left join #TempUserData ZU ON ICD.UserName = ZU.UserName
		where not exists(select * from ZnodeGiftCard ZGC where ICD.VoucherNumber = ZGC.CardNumber )


		UPDATE ZnodeImportProcessLog
		  SET STATUS = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = Getdate()
		WHERE ImportProcessLogId = @ImportProcessLogId;
		COMMIT TRAN Voucher;
	END TRY
	BEGIN CATCH

		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = Getdate()
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN Voucher;
	END CATCH;
END;
GO
IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_InsertUpdatePimCatalogProductDetailJson')
	DROP PROC Znode_InsertUpdatePimCatalogProductDetailJson
GO

CREATE PROCEDURE [dbo].[Znode_InsertUpdatePimCatalogProductDetailJson] 
(
  @PublishCatalogId INT = 0 
  ,@LocaleId TransferId READONLY 
  ,@UserId INT = 0   
)
AS 

--declare @LocaleId TransferId
--insert into @LocaleId
--select 1
--exec [Znode_InsertUpdatePimCatalogProductDetailJson] @PublishCatalogId=3,@LocaleId=@LocaleId,@UserId=2

--declare @LocaleId TransferId
--insert into @LocaleId
--select 1
--union 
--select 4
--union 
--select 2
--exec [Znode_POC_InsertUpdatePimCatalogProductDetail] @PublishCatalogId=3,@LocaleId=@LocaleId,@UserId=2
BEGIN 
 BEGIN TRY 

  SET NOCOUNT ON 
       DECLARE @LocaleId_In INT = 0 , @DefaultLocaleId INT = dbo.FN_GETDefaultLocaleId()
			   ,@Date DATETIME = dbo.fn_GetDate()
	   DECLARE @PimMediaAttributeId INT = dbo.Fn_GetProductImageAttributeId()		   

	   CREATE TABLE #PimDefaultValueLocale  (PimAttributeDefaultJsonId INT  PRIMARY KEY ,PimAttributeDefaultValueId INT ,LocaleId INT, DefaultValueJson	nvarchar(max) )

	   CREATE TABLE #AttributeValueLocale  (Id int Identity,  PimProductId int, AttributeCode Varchar(300), AttributeValue varchar(max), AttributeEntity varchar(max), LocaleId int )

	    SELECT ZPAV.PimProductId, ZPP.PublishProductId, ZPAVL.LocaleId
		into #ProductLocaleWise
		FROM ZnodePimAttributeValue ZPAV 
		INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId
		inner join ZnodePublishProduct ZPP on ZPAV.PimProductId = ZPP.PimProductId
		WHERE ZPAV.PimAttributeId = (select PimAttributeId from ZnodePimAttribute where AttributeCode = 'SKU')

		SELECT BTM.PimProductId , ZPCPD.PublishProductId, ZPCPD.PublishCatalogId,BTM.ModifiedDate
		into #ProductAttributeXML
		FROM ZnodePublishProductAttributeJson BTM 
		inner join ZnodePublishProduct ZPP1 ON BTM.PimProductId = ZPP1.PimProductId
		inner join ZnodePublishCatalogProductDetail ZPCPD ON ZPP1.PublishProductId = ZPCPD.PublishProductId AND ZPCPD.PublishCatalogId = ZPP1.PublishCatalogId 
		WHERE ZPCPD.PublishCatalogId =  @PublishCatalogId 

	    -------- Products Attribute modified 
		SELECT DISTINCT ZPP.PublishProductId,  ZPCC.PimCategoryHierarchyId 
		Into #ModifiedProducts
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId = ZPP.PimProductId )
		INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ZPAV.PimAttributeId)
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (isnull(ZPPC.PimCategoryHierarchyId,0) = isnull(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId AND ZPFGM.PimAttributeId = ZPAV.PimAttributeId))
		AND EXISTS (SELECT TOP 1 1 FROM #ProductAttributeXML BTM WHERE BTM.PimProductId = ZPP.PimProductId AND BTM.PublishCatalogId = ZPP.PublishCatalogId
						AND (BTM.ModifiedDate < ZPAV.ModifiedDate OR BTM.ModifiedDate < ZPA.ModifiedDate)   ) 
		
		-------- Products not published  
		Insert Into #ModifiedProducts
		SELECT ZPP.PublishProductId,  ZPCC.PimCategoryHierarchyId 
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (isnull(ZPPC.PimCategoryHierarchyId,0) = isnull(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId ))--AND ZPFGM.PimAttributeId = ZPAV.PimAttributeId))
		AND exists(select * from ZnodePimProduct ZPP1 INNER JOIN ZnodePublishState ZPS ON ZPP1.PublishStateId = ZPS.PublishStateId
					where StateName <> 'Publish' and ZPP.PimProductId = ZPP1.PimProductId )	
			
		-------- Products associated to catalog or category or modified catalog category products
		Insert Into #ModifiedProducts		
		SELECT ZPP.PublishProductId,  ZPCC.PimCategoryHierarchyId 
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		INNER JOIN ZnodePimCategoryProduct ZPCC1 ON  ZPP.PimProductId = ZPCC1.PimProductId 
		INNER JOIN ZnodePimCategoryHierarchy ZPCH ON ZPCC1.PimCategoryId = ZPCH.PimCategoryId and ZPC.PimCatalogId = ZPCH.PimCatalogId 
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (isnull(ZPPC.PimCategoryHierarchyId,0) = isnull(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId ))--AND ZPFGM.PimAttributeId = ZPAV.PimAttributeId))
		AND EXISTS (SELECT TOP 1 1 FROM #ProductAttributeXML BTM WHERE BTM.PimProductId = ZPCC1.PimProductId AND BTM.PublishCatalogId = ZPP.PublishCatalogId
						AND (BTM.ModifiedDate < ZPCC1.ModifiedDate )   ) 

		-------- Link Product modified 
		Insert Into #ModifiedProducts	
		SELECT ZPP.PublishProductId,  ZPCC.PimCategoryHierarchyId 
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePimLinkProductDetail ZPAV ON (ZPAV.PimParentProductId = ZPP.PimProductId )
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (isnull(ZPPC.PimCategoryHierarchyId,0) = isnull(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		--AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId AND ZPFGM.PimAttributeId = ZPAV.PimAttributeId))
		AND EXISTS (SELECT TOP 1 1 FROM #ProductAttributeXML BTM WHERE BTM.PimProductId = ZPP.PimProductId AND BTM.PublishCatalogId = ZPP.PublishCatalogId
						AND (BTM.ModifiedDate < ZPAV.ModifiedDate)   ) 

		--------Associated child Products (varients, Group) not published	
		Insert Into #ModifiedProducts	
		SELECT ZPP.PublishProductId,  ZPCC.PimCategoryHierarchyId 
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePimProductTypeAssociation ZPAV ON (ZPAV.PimProductId = ZPP.PimProductId )
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (isnull(ZPPC.PimCategoryHierarchyId,0) = isnull(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		AND exists(select * from ZnodePimProduct ZPP1 INNER JOIN ZnodePublishState ZPS ON ZPP1.PublishStateId = ZPS.PublishStateId
					where StateName <> 'Publish' and ZPAV.PimProductId = ZPP1.PimProductId )


		--------Link child Products (Bundle) not published 	
		Insert Into #ModifiedProducts
		SELECT ZPP.PublishProductId,  ZPCC.PimCategoryHierarchyId 
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePimLinkProductDetail ZPAV ON (ZPAV.PimProductId = ZPP.PimProductId )
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (isnull(ZPPC.PimCategoryHierarchyId,0) = isnull(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		AND exists(select * from ZnodePimProduct ZPP1 INNER JOIN ZnodePublishState ZPS ON ZPP1.PublishStateId = ZPS.PublishStateId
					where StateName <> 'Publish' and ZPAV.PimProductId = ZPP1.PimProductId )

		----Getting products of newly added category hierarchy 
		Insert Into #ModifiedProducts		
		SELECT ZPP.PublishProductId,  ZPCC.PimCategoryHierarchyId
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		INNER JOIN ZnodePimCategoryProduct ZPCC1 ON  ZPP.PimProductId = ZPCC1.PimProductId 
		INNER JOIN ZnodePimCategoryHierarchy ZPCH ON ZPCC1.PimCategoryId = ZPCH.PimCategoryId and ZPC.PimCatalogId = ZPCH.PimCatalogId 
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (isnull(ZPPC.PimCategoryHierarchyId,0) = isnull(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId ))--AND ZPFGM.PimAttributeId = ZPAV.PimAttributeId))
		AND not exists(select * from ZnodePublishCatalogProductDetail ZPCPPD where ZPCPPD.PimCategoryHierarchyId =  ZPCH.PimCategoryHierarchyId and ZPCPPD.PublishCatalogId = ZPP.PublishCatalogId ) 

		---------------------Category associated to catalog or category or modified catalog
		SELECT ZPCH.PimCategoryId, ZPC1.PublishCategoryId, ZPCH.PimCategoryHierarchyId
		into #ModifiedCategory
		FROM ZnodePimCategoryHierarchy ZPCH 
		INNER JOIN ZnodePublishCategory ZPC1 ON ZPCH.PimCategoryId = ZPC1.PimCategoryId 
        WHERE ZPC1.PublishCatalogId =  @PublishCatalogId 
		AND EXISTS (SELECT TOP 1 1 FROM ZnodePublishCatalogProductDetail BTM  
		WHERE BTM.PublishCatalogId = ZPC1.PublishCatalogId AND (BTM.ModifiedDate < ZPCH.ModifiedDate )   )
		and not exists(select * from #ModifiedProducts MP where  isnull(ZPCH.PimCategoryHierarchyId,0) = isnull(MP.PimCategoryHierarchyId,0))

		-------- Category associated to catalog or category or modified catalog
		Insert Into #ModifiedProducts		
		SELECT ZPP.PublishProductId,  ZPCC.PimCategoryHierarchyId 
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		INNER JOIN ZnodePimCategoryProduct ZPCC1 ON  ZPP.PimProductId = ZPCC1.PimProductId 
		INNER JOIN ZnodePimCategoryHierarchy ZPCH ON ZPCC1.PimCategoryId = ZPCH.PimCategoryId and ZPC.PimCatalogId = ZPCH.PimCatalogId 
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (isnull(ZPPC.PimCategoryHierarchyId,0) = isnull(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId ))
		AND EXISTS (SELECT TOP 1 1 FROM #ModifiedCategory BTM where BTM.PimCategoryHierarchyId = ZPCH.PimCategoryHierarchyId  ) 
		------------------

		--Getting all products of catalog for publish first time 
		SELECT ZPP.PublishProductId,  ZPAV.PimAttributeId, ZPP.PublishCatalogId , ZPCC.PimCategoryHierarchyId , ZPCC.PublishCategoryId,
		       ZPAV.PimAttributeValueId, ZPC.CatalogName ,ZPP.PimProductId ,ZPA.AttributeCode				
		INTO #ZnodePublishCategoryProduct
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId = ZPP.PimProductId )
		INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ZPAV.PimAttributeId)
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (isnull(ZPPC.PimCategoryHierarchyId,0) = isnull(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId AND ZPFGM.PimAttributeId = ZPAV.PimAttributeId))
		AND NOT EXISTS (SELECT TOP 1 1 FROM #ProductAttributeXML BTM WHERE BTM.PimProductId = ZPP.PimProductId AND BTM.PublishCatalogId = ZPP.PublishCatalogId)
		
		--Getting all products of catalog for publish which are modified after last publish
		INSERT INTO #ZnodePublishCategoryProduct 
		SELECT ZPP.PublishProductId,  ZPAV.PimAttributeId, ZPP.PublishCatalogId , ZPCC.PimCategoryHierarchyId , ZPCC.PublishCategoryId
			   ,ZPAV.PimAttributeValueId, ZPC.CatalogName--,CASE WHEN ZPCC.PublishProductId IS NULL THEN 1 ELSE  dense_rank()Over(ORDER BY ZPCC.PimCategoryHierarchyId,ZPCC.PublishProductId) END  ProductIndex 	
			   ,ZPP.PimProductId ,ZPA.AttributeCode				
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId = ZPP.PimProductId )
		INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ZPAV.PimAttributeId)
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (ZPPC.PimCategoryHierarchyId = ZPCC.PimCategoryHierarchyId AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId AND ZPFGM.PimAttributeId = ZPAV.PimAttributeId))
		AND EXISTS (SELECT * from #ModifiedProducts MP where ZPP.PublishProductId = MP.PublishProductId 
		AND isnull(ZPCC.PimCategoryHierarchyId,0) = isnull(MP.PimCategoryHierarchyId,0)
		) 
	
		CREATE INDEX IDX_#ZnodePublishCategoryProduct_PimProductId ON #ZnodePublishCategoryProduct(PimProductId)
		CREATE INDEX IDX_#ZnodePublishCategoryProduct_PublishCategoryId ON #ZnodePublishCategoryProduct(PublishCategoryId)

		CREATE INDEX IDX_#ZnodePublishCategoryProduct_PimAttributeValueId ON #ZnodePublishCategoryProduct(PimAttributeValueId)
		CREATE INDEX IDX_#ZnodePublishCategoryProduct_PimAttributeId ON #ZnodePublishCategoryProduct(PimAttributeId)
		 
		------Getting All Link Product Details
		Select ZPLPD.PimParentProductId, ZPLPD.PimProductId, ZPLPD.PimAttributeId, ZPAVL.AttributeValue as SKU
		into #LinkProduct
		FROM ZnodePimLinkProductDetail ZPLPD 
		INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId = ZPLPD.PimProductId)
		INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId
		WHERE exists(select * from ZnodePimAttribute ZPA where ZPA.PimAttributeId = ZPAV.PimAttributeId and ZPA.AttributeCode = 'SKU')
		
		 ----Getting products link product value entity
	     INSERT INTO #AttributeValueLocale ( PimProductId, AttributeCode, AttributeValue, AttributeEntity, LocaleId )
	     SELECT ZPLP.PimParentProductId ,ZPAX.AttributeCode, '' AttributeValue , 
		 JSON_MODIFY( JSON_Modify(ZPAX.AttributeJson , '$.AttributeValues' , 
		 ISNULL(SUBSTRING ( (SELECT ','+cast( LP.SKU as varchar(600))
							FROM #LinkProduct LP
							WHERE LP.PimParentProductId = ZPLP.PimParentProductId 
							AND LP.PimAttributeId = ZPLP.PimAttributeId FOR XML PATH('')),2,8000),'') ),'$.SelectValues',Json_Query('[]'))   

							, ZPAX.LocaleId
		 FROM ZnodePimLinkProductDetail ZPLP
		 INNER JOIN ZnodePimAttributeJSON ZPAX ON (ZPAX.PimAttributeId = ZPLP.PimAttributeId )
		 WHERE EXISTS(SELECT * FROM #ZnodePublishCategoryProduct PPCP  WHERE (ZPLP.PimParentProductId = PPCP.PimProductId ))
		 GROUP BY ZPLP.PimParentProductId ,ZPAX.AttributeCode , ZPAX.AttributeJSON,ZPAX.LocaleId,ZPAX.AttributeCode,ZPLP.PimAttributeId

	
	   --DECLARE  CR_Locale_id CURSOR FOR 
	   --SELECT Id 
	   --FROM @LocaleId
	   --ORDER BY Id ASC

	   --OPEN CR_Locale_id  
	   --FETCH NEXT FROM CR_Locale_id INTO @LocaleId_In

	   --WHILE @@FETCH_STATUS = 0  
	   --BEGIN 


		  ----Getting product attribute value entity
	      INSERT INTO #AttributeValueLocale ( PimProductId, AttributeCode, AttributeValue, AttributeEntity, LocaleId )
		  SELECT PPCP.PimProductId , ZPA.AttributeCode,ZPAVL.AttributeValue ,
					--JSON_MODIFY(ZPAX.AttributeXML,'append $',+ISNULL(ZPAVL.AttributeValue,'') ) AttributeEntity,
					JSON_MODIFY(
					JSON_MODIFY (Json_Query( ZPAX.AttributeJSON  ) , '$.AttributeValues' ,  ISNULL(ZPAVL.AttributeValue,'') )    
					,'$.SelectValues',Json_Query('[]'))   
					AS 'AttributeEntity', 
				 ZPAVL.LocaleId
		  FROM ZnodePimAttributeValue PPCP
		  INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = PPCP.PimAttributeId)
		  INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON (PPCP.PimAttributeValueId =ZPAVL.PimAttributeValueId)
		  INNER JOIN ZnodePimAttributeJSON ZPAX ON (ZPAX.PimAttributeId = ZPA.PimAttributeId and ZPAX.LocaleId = ZPAVL.LocaleId)
		  WHERE --ZPAVL.LocaleId = @LocaleId_In AND
		  EXISTS(SELECT * FROM #ZnodePublishCategoryProduct PPCP1  WHERE PPCP1.PimProductId = PPCP.PimProductId)--(PPCP1.PimAttributeValueId =PPCP.PimAttributeValueId) AND (ZPA.PimAttributeId = PPCP1.PimAttributeId))
		  AND not exists(select * from #AttributeValueLocale AVL where PPCP.PimProductId = AVL.PimProductId and ZPA.AttributeCode = AVL.AttributeCode and ZPAVL.LocaleId = AVL.LocaleId )
		  and not exists(select * from ZnodePimConfigureProductAttribute UOP where ZPAX.PimAttributeId = UOP.PimAttributeId and PPCP.PimProductId = UOP.PimProductId )
		  --group by PPCP.PimProductId , ZPA.AttributeCode,ZPAVL.AttributeValue , ZPAX.AttributeJson

		  IF OBJECT_ID('TEMPDB..#ZnodePublishCatalogProductDetail') IS NOT NULL
			DROP TABLE #ZnodePublishCatalogProductDetail

		  IF OBJECT_ID('TEMPDB..#ZnodePublishCatalogProductDetail1') IS NOT NULL
			DROP TABLE #ZnodePublishCatalogProductDetail1

		  IF OBJECT_ID('TEMPDB..#TBL_ProductRequiredAttribute') IS NOT NULL
			DROP TABLE #TBL_ProductRequiredAttribute
		  			
		  --SELECT PIV.PimProductId,max(PIV.SKU) as SKU, max(PIV.ProductName) as ProductName,max(PIV.IsActive ) as IsActive
		  --INTO #TBL_ProductRequiredAttribute
		  --FROM #AttributeValueLocale 
		  --PIVOT 
		  --(
		  -- Max(AttributeValue) FOR AttributeCode IN (SKU, ProductName,IsActive)
		  --) PIV 
		  --group by PIV.PimProductId 

		  
		create table #TBL_ProductRequiredAttribute (PimProductId int,SKU varchar(600),ProductName varchar(600), IsActive varchar(10), LocaleId INT)

		insert into #TBL_ProductRequiredAttribute(PimProductId, LocaleId)
		select distinct PimProductId, LocaleId from #AttributeValueLocale

		update #TBL_ProductRequiredAttribute 
		set SKU = b.AttributeValue
		from #TBL_ProductRequiredAttribute a
		inner join #AttributeValueLocale b on a.PimproductId = b.PimProductId AND a.LocaleId = b.LocaleId
		where b.AttributeCode = 'SKU'

		update #TBL_ProductRequiredAttribute 
		set ProductName = b.AttributeValue
		from #TBL_ProductRequiredAttribute a
		inner join #AttributeValueLocale b on a.PimproductId = b.PimProductId AND a.LocaleId = b.LocaleId
		where b.AttributeCode = 'ProductName'

		update #TBL_ProductRequiredAttribute 
		set IsActive = b.AttributeValue
		from #TBL_ProductRequiredAttribute a
		inner join #AttributeValueLocale b on a.PimproductId = b.PimProductId AND a.LocaleId = b.LocaleId
		where b.AttributeCode = 'IsActive'

		  CREATE INDEX IDX_#TBL_ProductRequiredAttribute_PimProductId ON #TBL_ProductRequiredAttribute(PimProductId)

		  SELECT ZPI.PublishProductId, ZPI.PublishCatalogId ,TYU.PublishCategoryId,ZPI.CatalogName,ISNULL(ZPI.PimCategoryHierarchyId,0) PimCategoryHierarchyId
					,TPAR.SKU,TPAR.ProductName,TPAR.IsActive,TYU.PublishCategoryName CategoryName,TPAR.LocaleId
		   into #ZnodePublishCatalogProductDetail
		   FROM #ZnodePublishCategoryProduct ZPI
		   INNER JOIN #TBL_ProductRequiredAttribute TPAR ON (TPAR.PimProductId = ZPI.PimProductId )
		   LEFT JOIN ZnodePublishCategoryDetail TYU ON (TYU.PublishCategoryId = ZPI.PublishCategoryId)
		   --where TPAR.LocaleId = @LocaleId_In
		   GROUP BY PublishProductId, PublishCatalogId ,TYU.PublishCategoryId,CatalogName,PimCategoryHierarchyId
					,SKU,ProductName,TPAR.IsActive,PublishCategoryName, TPAR.LocaleId  

	
						
			CREATE INDEX IDX_#ZnodePublishCatalogProductDetail ON #ZnodePublishCatalogProductDetail(PublishProductId,PublishCatalogId,PimCategoryHierarchyId,LocaleId)

			SELECT PublishProductId,PublishCatalogId,PimCategoryHierarchyId,SKU,ProductName,CategoryName, CatalogName, LocaleId ,IsActive
			      ,CASE WHEN PublishProductId IS NULL THEN 1 ELSE Row_Number()Over(Partition by PublishProductId ORDER BY PublishProductId,PimCategoryHierarchyId) END  ProductIndex
			INTO #ZnodePublishCatalogProductDetail1
			from #ZnodePublishCatalogProductDetail


			insert into #ZnodePublishCatalogProductDetail1 (PublishProductId,PublishCatalogId,PimCategoryHierarchyId,SKU,ProductName,CategoryName, CatalogName, LocaleId ,IsActive,ProductIndex)
			select PublishProductId,PublishCatalogId,PimCategoryHierarchyId,SKU,ProductName,CategoryName, CatalogName, b.Id ,IsActive,ProductIndex
			from #ZnodePublishCatalogProductDetail1 a
			cross apply @LocaleId b 
			where not exists(select * from #ZnodePublishCatalogProductDetail1 c where a.PublishProductId = c.PublishProductId and b.Id = c.LocaleId  )
			and a.LocaleId = @DefaultLocaleId 

			DELETE ZPCPD 
			from ZnodePublishCatalogProductDetail ZPCPD
			WHERE not exists(select * from #ProductLocaleWise ZPCPD1 where ZPCPD.PublishProductId = ZPCPD1.PublishProductId 
			                 and ZPCPD.LocaleId = ZPCPD1.LocaleId )  

							 ----Update data ZnodePublishCatalogProductDetail 
			UPDATE TARGET
			SET  TARGET.ProductIndex	=SOURCE.ProductIndex
				,TARGET.ModifiedBy		= @UserId	
				,TARGET.ModifiedDate	= @Date
			from ZnodePublishCatalogProductDetail TARGET
			INNER JOIN #ZnodePublishCatalogProductDetail1 SOURCE
			ON (
		        SOURCE.PublishProductId = TARGET.PublishProductId
				AND SOURCE.PublishCatalogId = TARGET.PublishCatalogId 
				AND isnull(SOURCE.PimCategoryHierarchyId,0) = isnull(TARGET.PimCategoryHierarchyId,0)
				AND SOURCE.LocaleId = TARGET.LocaleId --@LocaleId_In
				)

			----Update data ZnodePublishCatalogProductDetail 
			UPDATE TARGET
			SET  
				TARGET.ProductName		=SOURCE.ProductName
				,TARGET.CategoryName	=SOURCE.CategoryName
				,TARGET.CatalogName		=SOURCE.CatalogName
				,TARGET.IsActive		=case when SOURCE.IsActive in ('0','false') then 0 else 1 end 
				,TARGET.ModifiedBy		= @UserId	
				,TARGET.ModifiedDate	= @Date
			from ZnodePublishCatalogProductDetail TARGET
			INNER JOIN #ZnodePublishCatalogProductDetail1 SOURCE
			ON (
		        TARGET.SKU = SOURCE.SKU
				AND SOURCE.LocaleId = TARGET.LocaleId --@LocaleId_In
				)


			----Insert data ZnodePublishCatalogProductDetail 
			INSERT INTO ZnodePublishCatalogProductDetail
				( PublishProductId,PublishCatalogId,PimCategoryHierarchyId,SKU,ProductName,CategoryName, CatalogName,
				  LocaleId ,IsActive,ProductIndex,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate )
			SELECT SOURCE.PublishProductId ,SOURCE.PublishCatalogId ,SOURCE.PimCategoryHierarchyId ,SOURCE.SKU ,SOURCE.ProductName
			,SOURCE.CategoryName ,SOURCE.CatalogName ,SOURCE.LocaleId ,SOURCE.IsActive ,SOURCE.ProductIndex ,@UserId ,@Date ,@UserId ,@Date
			FROM #ZnodePublishCatalogProductDetail1 SOURCE
			WHERE NOT EXISTS(SELECT * FROM ZnodePublishCatalogProductDetail TARGET WHERE SOURCE.PublishProductId = TARGET.PublishProductId
							AND SOURCE.PublishCatalogId = TARGET.PublishCatalogId 
							AND SOURCE.PimCategoryHierarchyId = TARGET.PimCategoryHierarchyId 
							AND TARGET.LocaleId = SOURCE.LocaleId )
					
			----		  
		    insert into ZnodePublishCatalogProductDetail (PublishProductId,PublishCatalogId,PimCategoryHierarchyId,SKU,ProductName,CategoryName, CatalogName,
				  LocaleId ,IsActive,ProductIndex,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			select PublishProductId,PublishCatalogId,PimCategoryHierarchyId,SKU,ProductName,CategoryName, CatalogName,
				  b.Id ,IsActive,ProductIndex,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
			from ZnodePublishCatalogProductDetail a
			cross apply @LocaleId b 
			where not exists(select * from ZnodePublishCatalogProductDetail c where a.PublishProductId = c.PublishProductId and b.Id = c.LocaleId  )
			and a.LocaleId = @DefaultLocaleId

			DELETE ZPCPD from ZnodePublishCatalogProductDetail ZPCPD
			inner join ZnodePublishProduct ZPD on ZPCPD.PublishProductId = ZPD.PublishProductId and ZPCPD.PublishCatalogId = ZPD.PublishCatalogId
			inner join ZnodePublishCatalog ZPC on ZPCPD.PublishCatalogId = ZPC.PublishCatalogId
			where not exists(select * from ZnodePimCategoryProduct ZPCC 
			      inner join ZnodePimCategoryHierarchy ZPCH ON ZPCC.PimCategoryId = ZPCH.PimCategoryId where ZPD.PimProductId = ZPCC.PimProductId and ZPC.PimCatalogId = ZPCH.PimCatalogId and ZPCPD.PimCategoryHierarchyId = ZPCH.PimCategoryHierarchyId)
			and ZPCPD.PimCategoryHierarchyId <> 0

			update ZnodePublishCatalogProductDetail 
			set SKU = b.AttributeValue
			from ZnodePublishCatalogProductDetail a
			inner join ZnodePublishProduct ZPP on a.PublishProductId = ZPP.PublishProductId
			inner join #AttributeValueLocale b on ZPP.PimproductId = b.PimProductId AND a.LocaleId = b.LocaleId
			where b.AttributeCode = 'SKU'

		update ZnodePublishCatalogProductDetail 
		set ProductName = b.AttributeValue
		from ZnodePublishCatalogProductDetail a
		inner join ZnodePublishProduct ZPP on a.PublishProductId = ZPP.PublishProductId
		inner join #AttributeValueLocale b on ZPP.PimproductId = b.PimProductId AND a.LocaleId = b.LocaleId
		where b.AttributeCode = 'ProductName'

		update ZnodePublishCatalogProductDetail 
		set IsActive = b.AttributeValue
		from ZnodePublishCatalogProductDetail a
		inner join ZnodePublishProduct ZPP on a.PublishProductId = ZPP.PublishProductId
		inner join #AttributeValueLocale b on ZPP.PimproductId = b.PimProductId AND a.LocaleId = b.LocaleId
		where b.AttributeCode = 'IsActive'

	   -- FETCH NEXT FROM CR_Locale_id INTO @LocaleId_In
	   --END    
	   
	   --CLOSE CR_Locale_id  
	   --DEALLOCATE CR_Locale_id 

		  select a.PimProductId,  a.PimAttributeId
		  into #PimProductAttributeDefaultValue
		  from ZnodePimAttributeValue a 
		  Inner join ZnodePimProductAttributeDefaultValue b on a.PimAttributeValueId = b.PimAttributeValueId 

		  create index Idx_#PimProductAttributeDefaultValue on #PimProductAttributeDefaultValue (PimProductId,PimAttributeId)

		  INSERT INTO #PimDefaultValueLocale
		  SELECT PimAttributeDefaultJsonId,PimAttributeDefaultValueId,LocaleId ,DefaultValueJson
		  FROM ZnodePimAttributeDefaultJSON

		  SELECT  AA.DefaultValueJson , ZPADV.PimAttributeValueId, AA.LocaleId 
		  into #PimAttributeDefaultXML
		  FROM ZnodePimAttributeDefaultJSON AA 
		  INNER JOIN #PimDefaultValueLocale GH ON (GH.PimAttributeDefaultJsonId = AA.PimAttributeDefaultJsonId AND AA.LocaleId = GH.LocaleId)
		  INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId AND AA.LocaleId = ZPADV.LocaleId)

		  ----Getting child facets for merging		  
		  Select distinct ZPPADV.PimAttributeDefaultValueId, ZPAV_Parent.PimAttributeValueId, ZPPADV.LocaleId
		  Into #PimChildProductFacets
		  from ZnodePimAttributeValue ZPAV_Parent
		  inner join ZnodePimProductTypeAssociation ZPPTA ON ZPAV_Parent.PimProductId = ZPPTA.PimParentProductId
		  inner join ZnodePimAttributeValue ZPAV_Child ON ZPPTA.PimProductId = ZPAV_Child.PimProductId AND ZPAV_Parent.PimAttributeId = ZPAV_Child.PimAttributeId
		  inner join ZnodePimProductAttributeDefaultValue ZPPADV ON ZPAV_Child.PimAttributeValueId = ZPPADV.PimAttributeValueId 
		  where exists(select * from ZnodePimFrontendProperties ZPFP where ZPAV_Parent.PimAttributeId = ZPFP.PimAttributeId and ZPFP.IsFacets = 1)
		  and exists(select * from #ZnodePublishCategoryProduct ZPPC where ZPAV_Parent.PimProductId = ZPPC.PimProductId )
		  and not exists(select * from ZnodePimProductAttributeDefaultValue ZPPADV1 where ZPAV_Parent.PimAttributeValueId = ZPPADV1.PimAttributeValueId 
		                 and ZPPADV1.PimAttributeDefaultValueId = ZPPADV.PimAttributeDefaultValueId )

		  ----Merging childs facet attribute Default value XML for parent
		  insert into #PimAttributeDefaultXML (DefaultValueJson, PimAttributeValueId, LocaleId)
		  select ZPADX.DefaultValueJson, ZPPADV.PimAttributeValueId, ZPPADV.LocaleId
		  from #PimChildProductFacets ZPPADV		  
		  inner join ZnodePimAttributeDefaultJSON ZPADX ON ( ZPPADV.PimAttributeDefaultValueId = ZPADX.PimAttributeDefaultValueId AND ZPPADV.LocaleId = ZPADX.LocaleId)

		  CREATE INDEX Idx_#PimDefaultValueLocale ON #PimDefaultValueLocale(PimAttributeDefaultJsonId,LocaleId)

		  CREATE INDEX Idx_#PimAttributeDefaultXML ON #PimAttributeDefaultXML(PimAttributeValueId,LocaleId)
		  INCLUDE (DefaultValueJson)

		----Getting default attribute value entity
		INSERT INTO #AttributeValueLocale
		
		  SELECT PPCP.PimProductId, PPCP.AttributeCode,'' AttributeValue,
		JSON_MODIFY (JSON_MODIFY (ZPAX.AttributeJson,'$.AttributeValues',''), '$.SelectValues',
			
				Isnull((SELECT 
							Isnull(JSON_VALUE(DefaultValueJson, '$.Code'),'') Code 
							,Isnull(JSON_VALUE(DefaultValueJson, '$.LocaleId'),0) LocaleId
							,IsNull(JSON_VALUE(DefaultValueJson, '$.Value'),'') Value
							,IsNull(JSON_VALUE(DefaultValueJson, '$.AttributeDefaultValue'),'') AttributeDefaultValue
							,Isnull(JSON_VALUE(DefaultValueJson, '$.DisplayOrder'),0) DisplayOrder
							,Isnull(JSON_VALUE(DefaultValueJson, '$.IsEditable'),'false') IsEditable
							,Isnull(JSON_VALUE(DefaultValueJson, '$.SwatchText'),'') SwatchText
							,Isnull(JSON_VALUE(DefaultValueJson, '$.Path'),'') Path
					FROM #PimAttributeDefaultXML aa
					WHERE (aa.PimAttributeValueId = PPCP.PimAttributeValueId and AA.LocaleId = ZPAX.LocaleId ) For JSON Auto 
				),'[]') 
				) 
			 AttributeEntity 
		 , ZPAX.LocaleId
		 FROM #ZnodePublishCategoryProduct PPCP 
		 INNER JOIN ZnodePimAttributeJSON ZPAX ON (ZPAX.PimAttributeId = PPCP.PimAttributeId)
		 where 
		 not exists(select * from #AttributeValueLocale AVL where PPCP.PimProductId = AVL.PimProductId and PPCP.AttributeCode = AVL.AttributeCode and ZPAX.LocaleId = AVL.LocaleId )
		 and exists(select * from #PimProductAttributeDefaultValue a  where PPCP.PimProductId = a.PimProductId and ZPAX.PimAttributeId = a.PimAttributeId )
		 and exists(select * from ZnodePimAttributeValue a Inner join ZnodePimProductAttributeDefaultValue b on a.PimAttributeValueId = b.PimAttributeValueId 
		            and PPCP.PimProductId = a.PimProductId and ZPAX.PimAttributeId = a.PimAttributeId )
		 and not exists(select * from ZnodePimConfigureProductAttribute UOP where ZPAX.PimAttributeId = UOP.PimAttributeId and PPCP.PimProductId = UOP.PimProductId )

		 
		 ----Getting text attribute value entity
		 INSERT INTO #AttributeValueLocale ( PimProductId, AttributeCode, AttributeValue, AttributeEntity, LocaleId )
		 SELECT PPCP.PimProductId , ZPA.AttributeCode,'' AttributeValue ,
		 JSON_MODIFY (JSON_MODIFY (Json_Query( ZPAX.AttributeJSON  ) , '$.AttributeValues' ,  ISNULL(ZPAVL.AttributeValue,'') ) ,'$.SelectValues',Json_Query('[]'))
		    AS 'AttributeEntity', 
		 ZPAVL.LocaleId
		 FROM ZnodePimAttributeValue PPCP
		 INNER JOIN ZnodePimProductAttributeTextAreaValue ZPAVL ON (PPCP.PimAttributeValueId =ZPAVL.PimAttributeValueId)
		 INNER JOIN ZnodePimAttributeJSON ZPAX ON (ZPAX.PimAttributeId = PPCP.PimAttributeId AND ZPAX.LocaleId = ZPAVL.LocaleId)
		 INNER JOIN ZnodePimAttribute ZPA on PPCP.PimAttributeId = ZPA.PimAttributeId
	     where exists(select * from #ZnodePublishCategoryProduct PPCP1 WHERE PPCP1.PimProductId = PPCP.PimProductId) --(PPCP1.PimAttributeValueId =ZPAVL.PimAttributeValueId) and (ZPAX.PimAttributeId = PPCP1.PimAttributeId))
		 and not exists(select * from #AttributeValueLocale AVL where PPCP.PimProductId = AVL.PimProductId and ZPA.AttributeCode = AVL.AttributeCode and ZPAVL.LocaleId = AVL.LocaleId )
		group by PPCP.PimProductId , ZPA.AttributeCode,ZPAX.AttributeJson,ZPAVL.LocaleId,ZPAVL.AttributeValue

		 ----Getting custome field value entity
		 INSERT INTO #AttributeValueLocale ( PimProductId, AttributeCode, AttributeValue, AttributeEntity, LocaleId )
 		 SELECT ZPCFX.PimProductId , ZPCFX.CustomCode, '' AttributeValue ,
		 JSON_MODIFY (Json_Query( ZPCFX.CustomeFiledJson) ,'$.SelectValues',Json_Query('[]')) 
		 AttributeEntity, 
		 ZPCFX.LocaleId
		 FROM ZnodePimCustomeFieldJSON ZPCFX 
		 where exists(select * from #ZnodePublishCategoryProduct PPCP where (PPCP.PimProductId = ZPCFX.PimProductId ))
		 and not exists(select * from #AttributeValueLocale AVL where ZPCFX.PimProductId = AVL.PimProductId and ZPCFX.CustomCode = AVL.AttributeCode and ZPCFX.LocaleId = AVL.LocaleId )
		 group by ZPCFX.PimProductId , ZPCFX.CustomCode, ZPCFX.CustomeFiledJson , ZPCFX.LocaleId

		  ----Getting image attribute value entity
		 INSERT INTO #AttributeValueLocale ( PimProductId, AttributeCode, AttributeValue, AttributeEntity, LocaleId )
		 SELECT PPCP.PimProductId, ZPA.AttributeCode,'' AttributeValue,
		 JSON_MODIFY (JSON_MODIFY (Json_Query( ZPAX.AttributeJSON  ) , '$.AttributeValues',  
		 ISNULL((Select stuff( (SELECT ','+ZPPAM.MediaPath FROM ZnodePimProductAttributeMedia ZPPAM WHERE (ZPPAM.PimAttributeValueId = PPCP.PimAttributeValueId)
				 FOR XML PATH('')), 1, 1, '')),'') ) ,'$.SelectValues',Json_Query('[]'))   
				 AS 'AttributeEntity', 
				 ZPAX.LocaleId
		 FROM ZnodePimAttributeValue PPCP 
		 INNER JOIN ZnodePimAttributeJSON ZPAX ON (ZPAX.PimAttributeId = PPCP.PimAttributeId)
		 INNER JOIN ZnodePimAttribute ZPA ON ZPA.PimAttributeId = PPCP.PimAttributeId
		 where not exists(select * from #AttributeValueLocale AVL where PPCP.PimProductId = AVL.PimProductId and ZPA.AttributeCode = AVL.AttributeCode and ZPAX.LocaleId = AVL.LocaleId )
		 and exists(select * from ZnodePimProductAttributeMedia b where PPCP.PimAttributeValueId = b.PimAttributeValueId )
		 and exists(select * from #ZnodePublishCategoryProduct PPCP1 where PPCP.PimProductId = PPCP1.PimProductId )
		 and not exists(select * from ZnodePimConfigureProductAttribute UOP where ZPAX.PimAttributeId = UOP.PimAttributeId and PPCP.PimProductId = UOP.PimProductId )

		 -------------configurable attribute 		 
		
		INSERT INTO #AttributeValueLocale ( PimProductId, AttributeCode, AttributeValue, AttributeEntity, LocaleId )
		SELECT DISTINCT UOP.PimProductId,c.AttributeCode,'' AttributeValue ,--'<Attributes><AttributeEntity>'+
		JSON_MODIFY (Isnull(JSON_MODIFY (c.AttributeJson,'$.AttributeValues',''),'')  ,'$.SelectValues',
			Isnull((SELECT DISTINCT 
							Isnull(JSON_VALUE(AA.DefaultValueJson, '$.Code'),'') Code 
							,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.LocaleId'),0) LocaleId
							,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.Value'),'') Value
							,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.AttributeDefaultValue'),'') AttributeDefaultValue
							,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.DisplayOrder'),0) DisplayOrder
							,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.IsEditable'),'false') IsEditable
							,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.SwatchText'),'') SwatchText
							,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.Path'),'') Path 
							,ISNULL(ZPA.DisplayOrder,0)  AS VariantDisplayOrder 
							,ISNULL(ZPAVL_SKU.AttributeValue,'')   AS VariantSKU 
							,Isnull(ZM.Path,'') AS VariantImagePath 
						 FROM ZnodePimAttributeDefaultJSON AA 
						 INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId )
						 INNER JOIN ZnodePimAttributeValue ZPAV1 ON (ZPAV1.PimAttributeValueId= ZPADV.PimAttributeValueId )
						 -- check/join for active variants 
						 INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId =ZPAV1.PimProductId)
						 INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON (ZPAV.PimAttributevalueid = ZPAVL.PimAttributeValueId AND ZPAVL.AttributeValue = 'True')
						 INNER JOIN ZnodePimProductTypeAssociation YUP ON (YUP.PimProductId = ZPAV1.PimProductId)
						 -- SKU
						 INNER JOIN ZnodePimAttributeValue ZPAV_SKU ON(YUP.PimProductId = ZPAV_SKU.PimProductId)
						 INNER JOIN ZnodePimAttributeValueLocale ZPAVL_SKU ON (ZPAVL_SKU.PimAttributeValueId = ZPAV_SKU.PimAttributeValueId)
						 LEFT  JOIN ZnodePimAttributeValue ZPAV12 ON (ZPAV12.PimProductId= YUP.PimProductId  AND ZPAV12.PimAttributeId = @PimMediaAttributeId ) 
						 LEFT JOIN ZnodePimProductAttributeMedia ZPAVM ON (ZPAVM.PimAttributeValueId= ZPAV12.PimAttributeValueId ) 
						 LEFT JOIN ZnodeMedia ZM ON (ZM.MediaId = ZPAVM.MediaId)
						 LEFT JOIN ZnodePimAttribute ZPA ON (ZPA.PimattributeId = ZPAV1.PimAttributeId)
						 WHERE (YUP.PimParentProductId  = UOP.PimProductId AND ZPAV1.pimAttributeId = UOP.PimAttributeId )
						 -- Active Variants
						 AND ZPAV.PimAttributeId = (SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'IsActive')
						 -- VariantSKU
						 AND ZPAV_SKU.PimAttributeId = (SELECT PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'SKU')
		FOR JSON auto),'[]')) SelectValuesEntity ,
		c.LocaleId
		--into #TempFinalJson
		FROM ZnodePimConfigureProductAttribute UOP 
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = UOP.PimAttributeId )
		WHERE  exists(select * from #ZnodePublishCategoryProduct PPCP1 where UOP.PimProductId = PPCP1.PimProductId )

		

		--INSERT INTO #AttributeValueLocale ( PimProductId, AttributeCode, AttributeValue, AttributeEntity, LocaleId )
		--Select PimProductId,AttributeCode,AttributeValue ,
		--Stuff (Replace(JSON_MODIFY(JSON_QUERY(Attribute ),'$.SelectValues', Isnull(JSON_QUERY(SelectValuesEntity),'') ) , '"SelectValues":{',''),
		--Len(Replace(JSON_MODIFY(JSON_QUERY(Attribute ),'$.SelectValues', Isnull(JSON_QUERY(SelectValuesEntity),'') ) , '"SelectValues":{','')), 1,'')
		--,LocaleID from #TempFinalJson 
		-------------configurable attribute 

		CREATE INDEX IDX_#AttributeValueLocale ON #AttributeValueLocale(PimProductId,AttributeCode,LocaleId)
		CREATE INDEX IDX_#AttributeValueLocale_Id ON #AttributeValueLocale(ID)
		 	
		delete ZPPAX from ZnodePublishProductAttributeJson ZPPAX
		where exists (select * from #AttributeValueLocale AVL where ZPPAX.PimProductId = AVL.PimProductId and AVL.LocaleId = ZPPAX.LocaleId )
		and not exists(select * from #AttributeValueLocale AVL where ZPPAX.PimProductId = AVL.PimProductId and AVL.LocaleId = ZPPAX.LocaleId AND ZPPAX.AttributeCode = AVL.AttributeCode )

		DECLARE @MaxCount INT, @MinRow INT, @MaxRow INT, @Rows numeric(10,2);
		SELECT @MaxCount = COUNT(*) FROM #AttributeValueLocale;

		SELECT @Rows = 200000
        
		SELECT @MaxCount = CEILING(@MaxCount / @Rows);

		IF OBJECT_ID('tempdb..#Temp_ImportLoop') IS NOT NULL
            DROP TABLE #Temp_ImportLoop;
        
		---- To get the min and max rows for import in loop
		;WITH cte AS 
		(
			SELECT RowId = 1, 
				   MinRow = 1, 
                   MaxRow = cast(@Rows as int)
            UNION ALL
            SELECT RowId + 1, 
                   MinRow + cast(@Rows as int), 
                   MaxRow + cast(@Rows as int)
            FROM cte
            WHERE RowId + 1 <= @MaxCount
		)
        SELECT RowId, MinRow, MaxRow
        INTO #Temp_ImportLoop
        FROM cte
		option (maxrecursion 0);


 
	
		DECLARE cur_BulkData CURSOR LOCAL FAST_FORWARD
        FOR SELECT MinRow, MaxRow FROM #Temp_ImportLoop
		WHERE EXISTS(SELECT * FROM #AttributeValueLocale);

        OPEN cur_BulkData;
        FETCH NEXT FROM cur_BulkData INTO  @MinRow, @MaxRow;

        WHILE @@FETCH_STATUS = 0
        BEGIN
	         UPDATE ZnodePublishProductAttributeJson set IsUpdateLocaleWise = 0 where isnull(IsUpdateLocaleWise,0) = 1
			  ----Update Product Attribute XML
			 UPDATE ZPPAX SET ZPPAX.Attributes = AVL.AttributeEntity, ZPPAX.ModifiedBy = @UserId, ZPPAX.ModifiedDate = GETDATE() 
			        , ZPPAX.IsUpdateLocaleWise = 0
			 FROM ZnodePublishProductAttributeJson ZPPAX 
			 INNER JOIN #AttributeValueLocale AVL ON ZPPAX.PimProductId = AVL.PimProductId and AVL.LocaleId = ZPPAX.LocaleId AND ZPPAX.AttributeCode = AVL.AttributeCode 
			 where  AVL.Id BETWEEN @MinRow AND @MaxRow and AVL.AttributeEntity is not null
		 
			 ----Insert Product Attribute XML
			 INSERT INTO ZnodePublishProductAttributeJson(PimProductId,LocaleId,AttributeCode,Attributes,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			 SELECT AVL.PimProductId, AVL.LocaleId, AVL.AttributeCode, cast(AVL.AttributeEntity as varchar(max)), @UserId CreatedBy, GETDATE() CreatedDate, @UserId ModifiedBy, GETDATE() ModifiedDate
			 FROM #AttributeValueLocale AVL
			 WHERE NOT EXISTS(SELECT * FROM ZnodePublishProductAttributeJson ZPPAX WHERE AVL.PimProductId = ZPPAX.PimProductId AND  AVL.LocaleId = ZPPAX.LocaleId AND AVL.AttributeCode = ZPPAX.AttributeCode )
			 and  AVL.Id BETWEEN @MinRow AND @MaxRow and AVL.AttributeEntity is not null
			 GROUP BY AVL.PimProductId, AVL.AttributeEntity, AVL.LocaleId, AVL.AttributeCode

			 FETCH NEXT FROM cur_BulkData INTO  @MinRow, @MaxRow;
        END;
		CLOSE cur_BulkData;
		DEALLOCATE cur_BulkData;

		delete ZPPAX
		from ZnodePublishProductAttributeJson ZPPAX
		where LocaleId <> @DefaultLocaleId
		and exists( select * from ZnodePublishProductAttributeJson ZPPAX1 where ZPPAX.AttributeCode = ZPPAX1.AttributeCode and ZPPAX.PimProductId = ZPPAX1.PimProductId )
		and not exists(select * from #ProductLocaleWise AVL where AVL.PimProductId = ZPPAX.PimProductId AND  AVL.LocaleId = ZPPAX.LocaleId )
		
		
		delete  ZPPAX
		from ZnodePublishProductAttributeJson ZPPAX
		WHERE not exists(select * from #ProductLocaleWise ZLW where ZPPAX.PimProductId = ZLW.PimProductId 
			                and ZPPAX.LocaleId = ZLW.LocaleId )

		select PimProductId,Attributes Attributes,AttributeCode
		into #ZnodePublishProductAttributeJson
		from ZnodePublishProductAttributeJson 
		where LocaleId = @DefaultLocaleId

		insert into ZnodePublishProductAttributeJson (PimProductId,Attributes,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,AttributeCode)
		select PimProductId,Attributes,b.id,@UserId,GETDATE(),@UserId,GETDATE(),AttributeCode
		from #ZnodePublishProductAttributeJson a
		cross apply @LocaleId b 
		where not exists(select * from ZnodePublishProductAttributeJson c where a.PimProductId = c.PimProductId and b.Id = c.LocaleId AND a.AttributeCode = c.AttributeCode )
		and b.Id <> @DefaultLocaleId
					  
		END TRY
         BEGIN CATCH
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_InsertUpdatePimCatalogProductDetailJson @PublishCatalogId = '+CAST(@PublishCatalogId AS VARCHAR(200))+',@UserId='+CAST(@UserId AS VARCHAR(200));


             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_InsertUpdatePimCatalogProductDetailJson',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
            
            
         END CATCH;
END
GO
if not exists(select * from information_schema.columns where table_name = 'ZnodeAccount' and column_name = 'AccountCode')
begin
	alter table ZnodeAccount add [AccountCode]      NVARCHAR(100) NULL
end
go
IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_AdminUsers')
	DROP PROC Znode_AdminUsers
GO
CREATE PROCEDURE [dbo].[Znode_AdminUsers]
(	@RoleName		VARCHAR(200),
    @UserName		VARCHAR(200),
    @WhereClause	XML,
    @Rows			INT           = 100,
    @PageNo			INT           = 1,
    @Order_By		VARCHAR(1000) = '',
    @RowCount		INT        = 0 OUT,
	@IsCallOnSite   BIT = 0 ,
	@PortalId		VARCHAR(1000) = 0,
	@IsGuestUser    BIT = 0,
	@ColumnName     dbo.SelectColumnList ReadOnly
)
AS
   /* 
      Summary: List of users with detsils and shows link with ASPNet tables 
      This procedure is used for finding both users and admin users 
      here use three view "View_RoleUsers" for check  @UserName is present or not 
      "View_AdminUserDetail"  this view use for admin users 
      "View_CustomerUserDetail" Use for customer users 
      Unit Testing   
	  SELECT * FROM ZnodeUser 
      DECLARE @EDE INT=0  EXEC Znode_AdminUsers '','admin@znode.com',@WhereClause='',@Order_By='',@PageNo= 1 ,@Rows= 214,@IsCallOnSite='false',@PortalId=0,@RowCount=@EDE OUT  SELECT @EDE
   */
     BEGIN
         BEGIN TRY
            SET NOCOUNT ON;
			
            DECLARE @SQL NVARCHAR(MAX)= '', @PaginationWhereClause VARCHAR(300)= dbo.Fn_GetRowsForPagination(@PageNo, @Rows, ' WHERE RowId');
             
			-----Split where clause XMl 
			CREATE TABLE #WhereColumnList(RowId Int identity, filterName varchar(max), WhereCondition varchar(max))

			insert into #WhereColumnList(filterName,WhereCondition)
			SELECT 
					Tbl.Col.value('key[1]', 'varchar(max)') as filterName,
					Tbl.Col.value('condition[1]', 'varchar(max)') WhereCondition
			FROM   @WhereClause.nodes('//filter') Tbl(Col) 

			----Address column in global search
			declare @AddressGlobalSearch varchar(1000)
			declare @GlobalSearch varchar(100)
			select @GlobalSearch = substring(WhereCondition,charindex(' like ',WhereCondition), charindex(' OR ',WhereCondition)-charindex(' like ',WhereCondition)) 
			from #WhereColumnList
			where filtername like '%|%'
			and filtername <> ''
			and filterName in ('CityName','CountryName','PostalCode','StateName','CompanyName') 

			if isnull(@GlobalSearch,'') <> ''
			begin
				select @AddressGlobalSearch = '('+'CityName '+ @GlobalSearch+' OR '+'CountryName '+ @GlobalSearch+' OR '+'PostalCode '+ @GlobalSearch+' OR '+'StateName '+ @GlobalSearch+' OR '+'CompanyName '+ @GlobalSearch+')'
			end
			else
			begin
				SET @AddressGlobalSearch = ''
			end
			----Global search where clause
			declare @WhereClauseGlobal varchar(1000)=''
			select @WhereClauseGlobal = ISNULL(WhereCondition,'')
			from #WhereColumnList
			where filtername like '%|%'
			and filtername <> ''
			
			----Where clause columns except Address columns
			declare @WhereClause1 varchar(max) 
			select @WhereClause1 = COALESCE(@WhereClause1 + '', '') + WhereCondition+' And '
			--case when @WhereClause1 <> ''  then ' And ' else '' end
			from #WhereColumnList a
			where filterName not like '%|%' and
			filterName not in ('CountryName','CityName','StateName','PostalCode','CompanyName')
			and filtername <> ''

			if @WhereClause1 <> ''
			begin
				set @WhereClause1=isnull(substring(@WhereClause1,1,len(@WhereClause1)-3),'')
			end
			else
			begin
				set @WhereClause1 = ''
			end

			----Where clause columns
			declare @AddressColumnWhereClause varchar(max) 
			select @AddressColumnWhereClause = COALESCE(@AddressColumnWhereClause + '', '') + WhereCondition+' And '
			from #WhereColumnList a
			where filterName not like '%|%' and
			filterName in ('CountryName','CityName','StateName','PostalCode','CompanyName')
			and filtername <> ''
			
			if isnull(@AddressColumnWhereClause,'') <> ''
			begin
				set @AddressColumnWhereClause=isnull(substring(@AddressColumnWhereClause,1,len(@AddressColumnWhereClause)-3),'')
            end
			else
			begin
				set @AddressColumnWhereClause = ''
			end

			declare @WhereClauseAll varchar(max)
			select @WhereClauseAll = COALESCE(@WhereClauseAll + '', '') + WhereCondition+' And '
			from #WhereColumnList a

			set @WhereClauseAll=isnull(substring(@WhereClauseAll,1,len(@WhereClauseAll)-3),'')
			-------------- 

			IF @PortalId  <> '0' 
			BEGIN 
			    SET @WhereClauseAll = CASE WHEN  @WhereClauseAll = '' THEN ' (PortalId IN ('+@PortalId+') OR PortalId IS NULL) ' ELSE @WhereClauseAll+' AND (PortalId IN ('+@PortalId+') OR PortalId IS NULL) ' END 

				SET @WhereClause1 = CASE WHEN  @WhereClause1 = '' THEN ' (isnull(PortalId,0) IN ('+@PortalId+') OR PortalId IS NULL) ' ELSE @WhereClause1+' AND (isnull(PortalId,0) IN ('+@PortalId+') OR PortalId IS NULL) ' END 
			
			END 
			IF EXISTS
            (
            SELECT TOP 1 1
            FROM View_RoleUsers
            WHERE Username = @UserName
            )

			-- this check for admin user
            AND @RoleName <> ''  

			BEGIN
				SET @SQL = ' 
				--;with Cte_AdminUserDetail AS 
				--(
					 
				SELECT  A.UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,A.CreatedBy,A.CreatedDate,A.ModifiedBy,A.ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId ,CustomerPaymentGUID
				INTO #Cte_AdminUserDetail
				FROM View_AdminUserDetail A
				'+CASE WHEN @PortalId  <> '0' THEN ' INNER JOIN ZnodeUserPortal ZUP ON (ZUP.UserId = A.UserId) 'ELSE '' END  +'	 
				'+dbo.Fn_GetWhereClause(@WhereClauseAll, ' WHERE ')+'
				--),
				;with Cte_AdminUserDetailRowId AS 
				(
				SELECT UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId,CustomerPaymentGUID ,RANK()Over('+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC')+',UserId DESC) RowId
				FROM  #Cte_AdminUserDetail
				)
					 
				SELECT UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId,CustomerPaymentGUID ,RowId 
				INTO #AccountDetails
				FROM Cte_AdminUserDetailRowId 
					 
				SET @Count= ISNULL((SELECT  Count(1) FROM #AccountDetails ),0)
					 
				SELECT DISTINCT UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId ,CustomerPaymentGUID
				FROM #AccountDetails '+@PaginationWhereClause+' '+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC' );
			    PRINT @SQL
				EXEC SP_executesql
				@SQL,
				N'@Count INT OUT',
				@Count = @RowCount OUT;
			END;
			-- For Customer user
            ELSE   
      BEGIN
				IF @roleName = ''
				BEGIN
			
				if OBJECT_ID('tempdb..##CustomerUserAddDetail') is not null
					drop table ##CustomerUserAddDetail

				if OBJECT_ID('tempdb..##View_CustomerUserAddDetail') is not null
					drop table ##View_CustomerUserAddDetail
				
				if OBJECT_ID('tempdb..##UserList') is not null
					drop table ##UserList

				CREATE TABLE ##UserList(UserId int,AddressID int)

				declare @UserList varchar(1000)=''

				------To get the list of user having adress column in global search
				if (@AddressGlobalSearch <> '')
				begin
				
					set @UserList = 
					'select a.UserId, b.AddressID
					from ZnodeUserAddress a
					inner join ZnodeAddress b on a.AddressId = b.AddressId
					where '+@AddressGlobalSearch
					--print @UserList
					insert into ##UserList(UserId, b.AddressID)
					exec (@UserList)
			
				end
				----To get the list of user having adress column in where clause 
				if (@AddressColumnWhereClause <> '')
				begin
					
					set @UserList = 
					'select a.UserId, b.AddressID
					from ZnodeUserAddress a
					inner join ZnodeAddress b on a.AddressId = b.AddressId
					where '+@AddressColumnWhereClause
					--print @UserList
					insert into ##UserList(UserId,AddressID)
					exec (@UserList)
					
				end

				SELECT a.userId,a.AspNetuserId,azu.UserName,a.FirstName,a.MiddleName,a.LastName,a.PhoneNumber,
					a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
					CONVERT( DATE, a.ModifiedDate) ModifiedDate,ur.RoleId,r.Name RoleName,
					CASE
						WHEN B.LockoutEndDateUtc IS NULL
						THEN CAST(1 AS    BIT)
						ELSE CAST(0 AS BIT)
					END IsActive,
					CAST(CASE WHEN ISNULL(LockoutEndDateUtc, 0) = 0 THEN  0 ELSE  1 END  AS    BIT) AS IsLock,
					(ISNULL(RTRIM(LTRIM(a.FirstName)), '')+' '+ISNULL(RTRIM(LTRIM(a.MiddleName)), '')+CASE
																										  WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '') = ''
																										  THEN ''
																										  ELSE ' '
																									  END+ISNULL(RTRIM(LTRIM(a.LastName)), '')) FullName,
					e.Name AccountName,a.AccountId,a.ExternalId,
					CASE
						WHEN a.AccountId IS NULL
						THEN 0
						ELSE 1
					END IsAccountCustomer,
					a.BudgetAmount,r.TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser,a.CustomerPaymentGUID
		  ,CASE WHEN zp.StoreName IS NULL THEN 'ALL' ELSE zp.StoreName END StoreName,
		  CASE WHEN a.AccountId IS NULL THEN up.PortalId ELSE ZPA.PortalId END as PortalId, e.AccountCode
		  into ##View_CustomerUserAddDetail
		  FROM ZnodeUser a
          left JOIN ASPNetUsers B ON(a.AspNetuserId = b.Id)
          LEFT JOIN ZnodeAccount e ON(e.AccountId = a.AccountId)
          LEFT JOIN AspNetUserRoles ur ON(ur.UserId = a.AspNetUserId)
          LEFT JOIN AspNetRoles r ON(r.Id = ur.RoleId)                       
          LEFT JOIN AspNetZnodeUser azu ON(azu.AspNetZnodeUserId = b.UserName)
		  LEFT JOIN ZnodeUserPortal up ON(up.UserId = a.UserId)  
		  LEFT JOIN ZnodePortal zp ON (up.PortalId = zp.PortalId)
		  LEFT JOIN ZnodePortalAccount ZPA ON(ZPA.AccountId = a.AccountId) 
	  WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeUSer ZUQ WHERE ZUQ.UserId = a.UserId AND ZUQ.EmailOptIn = 1 AND ZUQ.AspNetUserId IS NULL )
	
	 alter table ##View_CustomerUserAddDetail 
	 add DepartmentId int, PermissionsName varchar(200), PermissionCode varchar(200), DepartmentName varchar(300), AccountPermissionAccessId int,
	 AccountUserOrderApprovalId int, ApprovalName varchar(1000) , ApprovalUserId int
	 --, PortalId int , StoreName varchar(1000)
	 ,CountryName varchar(1000),CityName varchar(1000),StateName varchar(1000),PostalCode varchar(1000), CompanyName varchar(1000),
	 SalesRepUserName varchar(600),SalesRepFullName varchar(1000)

	------To get data for StoreName
	--IF (EXISTS(SELECT * FROM @ColumnName where [StringColumn] = 'StoreName')
	--    OR @WhereClauseAll like '%StoreName%')
	--BEGIN
	--	select 1
	--	create index Ind_##View_CustomerUserAddDetail_UserId on ##View_CustomerUserAddDetail(UserId)
	--	 update  a set StoreName = CASE WHEN zp.StoreName IS NULL THEN 'ALL' ELSE zp.StoreName END 
	--	 from ##View_CustomerUserAddDetail a
	--	 LEFT JOIN ZnodeUserPortal up ON(up.UserId = a.UserId)  
	--	 LEFT JOIN ZnodePortal zp ON (up.PortalId = zp.PortalId)

	--END
	
	IF ((@AddressGlobalSearch like '%CountryName%' OR @AddressGlobalSearch like '%CityName%' OR @AddressGlobalSearch like '%StateName%' OR @AddressGlobalSearch like '%PostalCode%' OR @AddressGlobalSearch like '%CompanyName%')
	    and exists(select * from ##UserList))
		BEGIN
			 
			 update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
			               PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName
			 from ##View_CustomerUserAddDetail a
			 inner join ZnodeUserAddress ZUA on a.UserId = ZUA.UserId
			 inner  JOIN ZnodeAddress ZA on ZA.AddressId = zua.AddressId
			 where exists(select * from ##UserList UL where a.UserId = UL.UserId and UL.AddressId = ZA.AddressId )

			 update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
			               PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName
			 from ##View_CustomerUserAddDetail a
			 inner join ZnodeAccountAddress ZAA on a.AccountId = ZAA.AccountId
			 inner  JOIN ZnodeAddress ZA on ZA.AddressId = ZAA.AddressId
			 where isnull(a.AccountId,0)<> 0-- is not null
			 and exists(select * from ##UserList UL where a.UserId = UL.UserId and UL.AddressID = ZA.AddressId)
	  		 and (a.CountryName is null OR a.CityName is null OR a.StateName is null or a.PostalCode is null or a.CompanyName is null)
		
		END

	 SET @SQL = '			
				SELECT UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
				EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,IsActive,IsLock,FullName,
				AccountName,PermissionsName,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId , ExternalId,
				BudgetAmount,AccountUserOrderApprovalId,ApprovalName,ApprovalUserId,PermissionCode,CustomerPaymentGUID ,StoreName,PortalId,
				CountryName, CityName, StateName, PostalCode, CompanyName, AccountCode
				INTO #Cte_CustomerUserDetail
				FROM ##View_CustomerUserAddDetail a 				
				WHERE 
				(EXISTS   -- this will check for customer 
				(
				SELECT TOP 1 1
				FROM AspNetUserRoles AS b
				WHERE a.AspNetUserId = b.userid
				AND EXISTS
				(SELECT TOP 1 1	FROM AspNetRoles AS d	WHERE(d.TypeOfRole is NULL OR d.TypeOfRole = ''B2B'')	AND d.Id = b.RoleId	)   
				) OR AspNetuserId IS NULL OR '+CAST(CAST(@IsCallOnSite AS INT ) AS VARCHAR(50))+'= ''1'' )
				'+ case when @IsGuestUser = 1 THEN 'AND a.AspNetuserId IS NULL' ELSE 'AND a.AspNetuserId IS NOT NULL
				' END +dbo.Fn_GetWhereClause(@WhereClauseGlobal+case when @WhereClauseGlobal<>'' and @WhereClause1 <> '' then ' And '+@WhereClause1 else @WhereClause1 end, ' AND ')+' 
				
				create table #AccountDetail
				(
					UserId int,AspNetuserId nvarchar(500),UserName nvarchar(500),FirstName nvarchar(1000),MiddleName nvarchar(1000),LastName nvarchar(1000),
					PhoneNumber nvarchar(100),Email nvarchar(100),EmailOptIn bit,CreatedBy int,CreatedDate datetime,ModifiedBy int,ModifiedDate datetime,
					RoleId varchar(200),RoleName varchar(200),IsActive bit,IsLock bit,FullName  varchar(1000),AccountName  varchar(200),PermissionsName  varchar(200),
					DepartmentName  varchar(200),DepartmentId int,AccountId int,AccountPermissionAccessId int, ExternalId  varchar(200),BudgetAmount numeric(10,6),
					AccountUserOrderApprovalId int,ApprovalName varchar(1000),ApprovalUserId int,PermissionCode varchar(1000),CustomerPaymentGUID varchar(1000),
					StoreName varchar(600),PortalId int,CountryName varchar(600), CityName varchar(600), StateName varchar(600), PostalCode varchar(600), CompanyName varchar(600)
					,SalesRepUserName varchar(600),SalesRepFullName varchar(1000) ,RowId int identity, AccountCode nvarchar(max)
				) '+

				+' insert into #AccountDetail(UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
				EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,IsActive,IsLock,FullName,
				AccountName,PermissionsName,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId , ExternalId,
				BudgetAmount,AccountUserOrderApprovalId,ApprovalName,ApprovalUserId,PermissionCode,CustomerPaymentGUID
				,StoreName,PortalId, CountryName, CityName, StateName, PostalCode, CompanyName, AccountCode)
				SELECT UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
				EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,IsActive,IsLock,FullName,
				AccountName,PermissionsName,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId , ExternalId,
				BudgetAmount,AccountUserOrderApprovalId,ApprovalName,ApprovalUserId,PermissionCode,CustomerPaymentGUID 
				,StoreName,PortalId, CountryName, CityName, StateName, PostalCode, CompanyName, AccountCode
				FROM #Cte_CustomerUserDetail '+
				dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC')+
				
				+' if ('+cast(len(@AddressColumnWhereClause) as varchar(10))+' <> 0 ) '+
				+' begin
					SET @Count= ISNULL((SELECT  Count(Distinct a.UserId) FROM #AccountDetail a inner join ##UserList b on a.UserId = b.UserId ),0)
				end '+
				+' else '+
				+' begin
					SET @Count= ISNULL((SELECT  Count(*) FROM #AccountDetail),0)
				end '+

				+' SELECT DISTINCT UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
				EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,IsActive,IsLock,FullName,
				AccountName,PermissionsName,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId , ExternalId,
				BudgetAmount,AccountUserOrderApprovalId,ApprovalName,ApprovalUserId,PermissionCode ,CustomerPaymentGUID,StoreName,PortalId,
				CountryName, CityName, StateName, PostalCode, CompanyName, SalesRepUserName, SalesRepFullName, AccountCode
				,Row_Number()Over('+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC')+',UserId DESC) RowNumber
				into ##CustomerUserAddDetail
				FROM #AccountDetail '+@PaginationWhereClause+' '+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC');
                PRINT @SQL    					
				EXEC SP_executesql @SQL,
				N'@Count INT OUT',
				@Count = @RowCount OUT;

		ALTER TABLE ##CustomerUserAddDetail ADD AddressId Int

		--To get data for DepartmentId
		update CUD SET DepartmentId = i.DepartmentId
		from ##CustomerUserAddDetail cud
		INNER JOIN ZnodeDepartmentUser i ON(i.UserId = cud.UserId)

		--To get data for PermissionsName
		update CUD SET PermissionsName = h.PermissionsName, PermissionCode = h.PermissionCode
		from ##CustomerUserAddDetail cud
        INNER JOIN ZnodeAccountUserPermission f ON(f.UserId = cud.UserId)
        INNER JOIN ZnodeAccountPermissionAccess g ON(g.AccountPermissionAccessId = f.AccountPermissionAccessId)
        INNER JOIN ZnodeAccessPermission h ON(h.AccessPermissionId = g.AccessPermissionId)

		------To get data for DepartmentName
		update CUD SET DepartmentName = j.DepartmentName
		from ##CustomerUserAddDetail cud
        INNER JOIN ZnodeDepartmentUser i ON(i.UserId = cud.UserId)
        INNER JOIN ZnodeDepartment j ON(j.DepartmentId = i.DepartmentId)

		--To get data for AccountPermissionAccessId
		update CUD SET AccountPermissionAccessId = f.AccountPermissionAccessId
		from ##CustomerUserAddDetail cud
        INNER JOIN ZnodeAccountUserPermission f ON(f.UserId = cud.UserId)

		--To get data for AccountPermissionAccessId
		update CUD SET AccountPermissionAccessId = f.AccountPermissionAccessId
		from ##CustomerUserAddDetail cud
        INNER JOIN ZnodeAccountUserPermission f ON(f.UserId = cud.UserId)
	
		--To get data for AccountUserOrderApprovalId
		update CUD SET AccountUserOrderApprovalId = ZAUOA.AccountUserOrderApprovalId
		from ##CustomerUserAddDetail cud
	    INNER JOIN ZnodeAccountUserOrderApproval ZAUOA ON cud.UserId = ZAUOA.UserID
	
		--To get data for ApprovalName,ApprovalUserId
		update CUD SET ApprovalName = ISNULL(RTRIM(LTRIM(ZU.FirstName)), '')+' '+ISNULL(RTRIM(LTRIM(ZU.MiddleName)), '')
		                               +CASE
											WHEN ISNULL(RTRIM(LTRIM(ZU.MiddleName)), '') = ''
											THEN ''
											ELSE ' '
										END,
					   ApprovalUserId = ZAUOA.ApprovalUserId
		from ##CustomerUserAddDetail cud
	    INNER JOIN ZnodeAccountUserOrderApproval ZAUOA ON cud.UserId = ZAUOA.UserID
		INNER JOIN ZnodeUser ZU ON(ZU.UserId = ZAUOA.ApprovalUserId)
	
		----To get data for PortalId
		--update CUD SET PortalId = CASE
		--								WHEN cud.AccountId IS NULL
		--								THEN up.PortalId
		--								ELSE ZPA.PortalId
		--							END 
		--from ##CustomerUserAddDetail cud
	 --   LEFT JOIN ZnodeUserPortal up ON(up.UserId = cud.UserId) 
		--LEFT JOIN ZnodePortalAccount ZPA ON(ZPA.AccountId = cud.AccountId) 
	
		----To get data for CountryName, CityName, StateName, PostalCode, CompanyName
		IF (EXISTS(SELECT * FROM @ColumnName where ([StringColumn] LIKE '%CountryName%' OR [StringColumn] LIKE '%CityName%' OR [StringColumn] LIKE '%StateName%' OR [StringColumn] LIKE '%PostalCode%' OR [StringColumn] LIKE '%CompanyName%'))
			OR (@WhereClauseAll like '%CountryName%' OR @WhereClauseAll like '%CityName%' OR @WhereClauseAll like '%StateName%' OR @WhereClauseAll like '%PostalCode%' OR @WhereClauseAll like '%CompanyName%'))
		BEGIN
			 
			 update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
			               PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName, a.AddressId = ZA.AddressId
			 from ##CustomerUserAddDetail a
			 inner join ZnodeAccountAddress ZAA on a.AccountId = ZAA.AccountId
			 inner  JOIN ZnodeAddress ZA on ZA.AddressId = ZAA.AddressId
			 where isnull(a.AccountId,0)<> 0-- is not null
	 
			 update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
			               PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName, a.AddressId = ZA.AddressId
			 from ##CustomerUserAddDetail a
			 inner join ZnodeUserAddress ZUA on a.UserId = ZUA.UserId
			 inner  JOIN ZnodeAddress ZA on ZA.AddressId = zua.AddressId
		END

		----Updating SalesRep for user if any 
		update CUAD
		set CUAD.SalesRepUserName = azu.UserName, 
			CUAD.SalesRepFullName = (ISNULL(RTRIM(LTRIM(ZU.FirstName)), '')+' '+ISNULL(RTRIM(LTRIM(ZU.MiddleName)), '')
								+CASE
									WHEN ISNULL(RTRIM(LTRIM(ZU.MiddleName)), '') = ''
									THEN ''
									ELSE ' '
								END+ISNULL(RTRIM(LTRIM(ZU.LastName)), '')) 
		from ##CustomerUserAddDetail CUAD
		inner join ZnodeSalesRepCustomerUserPortal SRCUP ON CUAD.UserId = SRCUP.CustomerUserid 
		inner join ZnodeUser ZU ON SRCUP.SalesRepUserId = ZU.UserId
		inner join ASPNetUsers ANU ON(ZU.AspNetuserId = ANU.Id)
		inner join AspNetZnodeUser azu ON(azu.AspNetZnodeUserId = ANU.UserName)

		if ( exists(select * from ##UserList) OR @AddressColumnWhereClause <> '')
		begin
			SELECT UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
				  EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,IsActive,IsLock,FullName,
				  AccountName,PermissionsName,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId , ExternalId,
				  BudgetAmount,AccountUserOrderApprovalId,ApprovalName,ApprovalUserId,PermissionCode ,CustomerPaymentGUID,StoreName,PortalId,
				  CountryName, CityName, StateName, PostalCode, CompanyName, SalesRepUserName, SalesRepFullName, AccountCode
			from ##CustomerUserAddDetail CUAD
			where exists(select * from ##UserList UL where CUAD.UserId = UL.UserId and CUAD.AddressId = UL.AddressID )
			Order by RowNumber
		end
		else
		begin
			SELECT UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
				  EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,IsActive,IsLock,FullName,
				  AccountName,PermissionsName,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId , ExternalId,
				  BudgetAmount,AccountUserOrderApprovalId,ApprovalName,ApprovalUserId,PermissionCode ,CustomerPaymentGUID,StoreName,PortalId,
				  CountryName, CityName, StateName, PostalCode, CompanyName, SalesRepUserName, SalesRepFullName, AccountCode
			from ##CustomerUserAddDetail
			Order by RowNumber
		end
	
	if OBJECT_ID('tempdb..##CustomerUserAddDetail') is not null
		drop table ##CustomerUserAddDetail

	if OBJECT_ID('tempdb..##View_CustomerUserAddDetail') is not null
		drop table ##View_CustomerUserAddDetail

				END;
            ELSE
				BEGIN
					SELECT * FROM View_CustomerUserDetail AS VICUD WHERE 1 = 0;
					SET @RowCount = 0;
				END;
            END;			
         END TRY
         BEGIN CATCH
            DECLARE @ERROR_PROCEDURE VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_AdminUsers @RoleName = '+@RoleName+' ,@UserName='+@UserName+',@WhereClause='+cast(@WhereClause as varchar(max))+' ,@Rows= '+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_By='+@Order_By+',@RowCount='+CAST(@RowCount AS VARCHAR(50));
            EXEC Znode_InsertProcedureErrorLog
            @ProcedureName    = 'Znode_AdminUsers',
            @ErrorInProcedure = @ERROR_PROCEDURE,
            @ErrorMessage     = @ErrorMessage,
            @ErrorLine        = @ErrorLine,
            @ErrorCall        = @ErrorCall;
         END CATCH;


     END;
GO
IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_GetAccountListWithAddress')
	DROP PROC Znode_GetAccountListWithAddress
GO
CREATE PROCEDURE [dbo].[Znode_GetAccountListWithAddress]
(   @WhereClause VARCHAR(1000),
	@Rows        INT           = 100,
	@PageNo      INT           = 1,
	@Order_BY    VARCHAR(100)  = '',
	@RowsCount   INT OUT,
	@LocaleId    INT           = 0
)
AS
    
/*
     Summary : This procedure is used to find the Account and related address list 
			   1. ZNodePortalAddress          
			   2. ZnodeAddress	
    Unit Testing
	begin tran	 
    Declare @Status int 
    Exec [Znode_GetAccountListWithAddress] @WhereClause = ' name = ''suchita acc'' ' ,@Rows = 10 ,@PageNo = 1 , @Order_BY = ' AccountId DESC ',@RowsCount = 1   
    rollback tran
    Select @Status
    select * from ZNodePortalAddress where PortalAddressId = 8 
    select * from ZNodeAddress where AddressId in (select AddressId from ZNodePortalAddress where PortalAddressId = 8 )
    addressid : 57
*/
  


     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY

			------Commented query due to slowness
			--SELECT  a.AccountId, a.ExternalId, a.Name,a.ParentAccountId, b.Name AS ParentAccountName ,ZPA.PortalId,ZP.StoreName, PC.CatalogName,
			--(select top 1 PostalCode from ZnodeAddress where AddressId in  (select AddressId from ZnodeAccountAddress where AccountId = a.AccountId AND IsDefaultShipping = 1)) AS ShippingPostalCode,
			--(select top 1 PostalCode from ZnodeAddress where AddressId in  (select AddressId from ZnodeAccountAddress where AccountId = a.AccountId AND IsDefaultBilling = 1)) AS BillingPostalCode
			--into #AccountListAis
			--FROM dbo.ZnodeAccount AS a 
			--LEFT OUTER JOIN dbo.ZnodeAccount AS b ON a.ParentAccountId = b.AccountId
			--LEFT JOIN ZnodePortalAccount ZPA  ON (ZPA.AccountId = a.AccountId)
			--LEFT JOIN ZnodePortal ZP ON (ZP.PortalId = ZPA.PortalId)
			--LEFT JOIN ZnodePortalCatalog ZPC ON ( ZPA.PortalId = ZPC.PortalId )
			--LEFT JOIN ZnodePublishcatalog PC ON ( PC.PublishcatalogId = COALESCE(a.PublishCatalogId, ZPC.PublishcatalogId ) )

			----Re-write above query for optimization
			;with cte_Account as
			(
				SELECT  a.AccountId, a.ExternalId, a.Name,a.ParentAccountId, b.Name AS ParentAccountName ,ZPA.PortalId,ZP.StoreName, PC.CatalogName, a.AccountCode
				FROM dbo.ZnodeAccount AS a 
				LEFT JOIN dbo.ZnodeAccount AS b ON a.ParentAccountId = b.AccountId
				LEFT JOIN ZnodePortalAccount ZPA  ON (ZPA.AccountId = a.AccountId)
				LEFT JOIN ZnodePortal ZP ON (ZP.PortalId = ZPA.PortalId)
				LEFT JOIN ZnodePortalCatalog ZPC ON ( ZPA.PortalId = ZPC.PortalId )
				LEFT JOIN ZnodePublishcatalog PC ON ( PC.PublishcatalogId = COALESCE(a.PublishCatalogId, ZPC.PublishcatalogId ) )
			)
			,cte_ShippingPostalCode as
			(
				select zaa.AccountId, min(PostalCode) as ShippingPostalCode 
				from ZnodeAccountAddress zaa 
				inner join ZnodeAddress za on za.AddressId = zaa.AddressId AND IsDefaultShipping = 1	
				where exists(select * from cte_Account a where zaa.AccountId = a.AccountId )
				and isnull(PostalCode,'0') <> '0'
				group by zaa.AccountId 	
			)
			,cte_BillingPostalCode as
			(
				select zaa.AccountId, min(PostalCode) as BillingPostalCode 
				from ZnodeAccountAddress zaa 
				inner join ZnodeAddress za on za.AddressId = zaa.AddressId AND IsDefaultBilling = 1	
				where exists(select * from cte_Account a where zaa.AccountId = a.AccountId )	
				and isnull(PostalCode,'0') <> '0'
				group by zaa.AccountId
			)
			select a.*, b.ShippingPostalCode, b1.BillingPostalCode
			into #AccountListAis
			from cte_Account a
			left join cte_ShippingPostalCode b on a.AccountId = b.AccountId
			left join cte_BillingPostalCode b1 on a.AccountId = b1.AccountId

             DECLARE @SQL NVARCHAR(MAX), @Rows_start VARCHAR(1000), @Rows_end VARCHAR(1000);
             SET @Rows_start = CASE WHEN @Rows >= 1000000 THEN 0 ELSE(@Rows * (@PageNo - 1)) + 1 END;
             SET @Rows_end = CASE WHEN @Rows >= 1000000THEN @Rows ELSE @Rows * (@PageNo) END;
             SET @SQL = '
			 CREATE TABLE #TBL_AddressDetails (AccountId INT ,Address NVARCHAR(max),IsDefaultBilling BIT ,IsDefaultShipping BIT,RowId INT  )
			 CREATE TABLE #TBL_AddressDetailsFinal (AccountId INT ,Address NVARCHAR(max))
			 
			 SELECT *,RANK()OVER(ORDER BY '+CASE
                                                    WHEN @Order_BY = ''
                                                    THEN ' AccountId ,'
                                                    ELSE @Order_BY+' , '
                                                END+' AccountId ) RowId 
			 into #TBL_AccountsDetails
			 FROM #AccountListAis
			   '+CASE
                        WHEN @WhereClause IS NOT NULL
                             AND @WhereClause <> ''
                        THEN ' WHERE '+@WhereClause
                        ELSE ''
                    END+'
			   '+CASE
                        WHEN @Order_BY = ''
                        THEN ''
                        ELSE ' ORDER BY '+@Order_BY
                    END+'
			    
			 SELECT @COUNT= COUNT(1) FROM #TBL_AccountsDetails

			 INSERT INTO #TBL_AddressDetails (AccountId,Address,IsDefaultBilling,IsDefaultShipping,RowId)
			 SELECT c.AccountId , CASE WHEN D.FirstName IS NULL THEN '''' ELSE D.FirstName END + CASE WHEN D.LastName IS NULL  THEN '''' ELSE '' ''+D.LastName END  
			                    + CASE WHEN D.Address1 IS NULL  THEN  ''''  ELSE '', '' + D.Address1 END 	
								+ CASE WHEN D.Address2 IS NULL THEN ''''  ELSE '', '' + D.Address2 END 
								+ CASE WHEN D.Address3 IS NULL THEN '''' ELSE  '', '' + D.Address3 END 
								+ CASE WHEN D.CityName IS NULL THEN  ''''  ELSE  '', '' + D.CityName  END 
								+ CASE WHEN D.StateName IS NULL THEN ''''  ELSE  '', '' + D.StateName  END 
								+ CASE WHEN D.PostalCode IS NULL THEN  '''' ELSE '', '' + D.PostalCode  END 
								+ CASE WHEN D.CountryName IS NULL THEN '''' ELSE  '', '' + D.CountryName END  									
								+ CASE WHEN D.PhoneNumber IS NULL THEN ''''  ELSE '', PH NO. ''+  D.PhoneNumber END  AS AccountAddress ,ISNULL(d.IsDefaultBilling,0) IsDefaultBilling ,ISNULL(d.IsDefaultShipping,0)IsDefaultShipping
						,ROW_NUMBER()OVER(PARTITION BY c.AccountId ORDER BY  c.AddressId) RowId
			 FROM dbo.ZnodeAccountAddress AS c 
			 LEFT JOIN dbo.ZnodeAddress AS D ON D.AddressId = c.AddressId
			 WHERE EXISTS ( SELECT TOP 1 1 FROM  #TBL_AccountsDetails a  WHERE a.AccountId = c.AccountId AND a.RowId BETWEEN '+@Rows_start+' AND '+@Rows_end+')  
			    
			 ;With AccountAddressShipping AS 
			 (
			 SELECT * FROM #TBL_AddressDetails mn WHERE IsDefaultShipping = 1 
			 )
			 ,  AccountAddressBilling AS 
			 (
				 SELECT * 
				 FROM AccountAddressShipping 
				 UNION ALL 
				 SELECT * 
				 FROM #TBL_AddressDetails mn 
				 WHERE IsDefaultBilling = 1 
				 AND NOT EXISTS (SELECT TOP 1 1 FROM AccountAddressShipping sw WHERE sw.AccountId = mn.AccountId )
			 )


			 INSERT INTO #TBL_AddressDetailsFinal 

			 SELECT AccountId ,Address 
			 FROM AccountAddressBilling 

			    
			 INSERT INTO #TBL_AddressDetailsFinal 
			 SELECT AccountId , Address 
			 FROM #TBL_AddressDetails  q
			 WHERE NOT EXISTS (SELECT  TOP 1 1 FROM #TBL_AddressDetailsFinal  fg WHERE fg.AccountId = q.AccountId )
			 AND RowId = 1 



			 SELECT a.AccountId, a.ExternalId, a.Name,a.ParentAccountId, a.ParentAccountName ,b.[Address] AccountAddress,a.PortalId,a.StoreName, a.CatalogName,ShippingPostalCode,BillingPostalCode, a.AccountCode
			 FROM #TBL_AccountsDetails a 
			 INNER JOIN #TBL_AddressDetailsFinal  b ON (a.AccountId = b.AccountId )
			 WHERE a.RowId BETWEEN '+@Rows_start+' AND '+@Rows_end+'  
			   '+CASE
                        WHEN @Order_BY = ''
                        THEN ''
                        ELSE ' ORDER BY '+@Order_BY
                 END;
           
		   PRINT(@SQL);
             EXEC SP_executesql
                  @SQL,
                  N'@Count INT OUT',
                  @Count = @RowsCount OUT;
         END TRY
         BEGIN CATCH
              DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetAccountListWithAddress @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@LocaleId = '+CAST(@LocaleId AS VARCHAR(50))+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetAccountListWithAddress',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;

GO
IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_GetGiftCardList')
	DROP PROC Znode_GetGiftCardList
GO
CREATE PROCEDURE [dbo].[Znode_GetGiftCardList]  
(   @WhereClause NVARCHAR(max),  
    @Rows        INT            = 100,  
    @PageNo      INT            = 1,  
    @Order_BY    VARCHAR(1000)  = '',  
    @RowsCount   INT  out,  
 @PortalId varchar(100),  
 @ExpirationDate VARCHAR(100) = ''  
  )    
AS   
/*  
    Summary: This procedure is used to find the GiftCardList of user for portal   
 Unit Testing:   
 declare @aa int  
 EXEC Znode_GetGiftCardList @WhereClause='Userid = 5 ' ,@PortalId ='1,2,3,4,6,7,9,10,1010,1011,1012,1013,1014,1015,1016,1020,1021,1023,1024,1025,1028,1029,1030',  @RowsCount= 0,@ExpirationDate = '2017-04-06'  
  
     EXEC Znode_GetGiftCardList @WhereClause='' ,@PortalId ='1',  @RowsCount= 0,@ExpirationDate = ''  
*/  
  
     BEGIN  
         BEGIN TRY  
             SET NOCOUNT ON;  
             DECLARE @SQL NVARCHAR(MAX);  
    DECLARE @TBL_GiftCardList TABLE (StoreName NVARCHAR(MAX),Name NVARCHAR(600)  
            ,CardNumber NVARCHAR(600),CreatedDate DATETIME,StartDate DATETIME, ExpirationDate DATETIME  
            ,Amount NUMERIC(28,6),RemainingAmount NUMERIC(28,6),CustomerId INT,CustomerName NVARCHAR(512),AccountName NVARCHAR(512),IsActive BIT ,GiftCardId INT,UserId INT,CultureCode VARCHAR(100), RowId INT, CountNo INT, AccountCode nvarchar(100)  )  
  
    SET @SQL ='  
      DECLARE @TBL_PortalId TABLE (PortalId INT)  
                  INSERT INTO @TBL_PortalId    
      SELECT  ITEM  FROM dbo.split( '''+@PortalId+''','','') AS a;   
  
      ;WITH CTE_GetGiftCard AS  
      (  
      SELECT ZP.StoreName,ZGC.Name,CardNumber,ZGC.CreatedDate,StartDate, ExpirationDate,Amount,RemainingAmount,ZGC.UserId AS CustomerId,  
      CASE WHEN ZU.FirstName IS NULL THEN '''' ELSE ZU.FirstName END + CASE WHEN ZU.LastName IS NULL  THEN '''' ELSE '' ''+ZU.LastName END as CustomerName,ZA.Name As AccountName,ZGC.IsActive  
      ,GiftCardId, ZU.UserId,IsReferralCommission,zc.CultureCode AS CurrencyCode, ZA.AccountCode
      FROM ZnodeGiftCard ZGC   
      INNER JOIN ZnodePortal ZP ON (ZGC.PortalId = ZP.PortalId)  
      INNER JOIN ZnodePortalUnit zpu on (zp.PortalId = zpu.PortalId)  
      LEFT JOIN ZnodeCulture zc on (zc.CultureId = zpu.CultureId)  
      LEFT JOIN ZnodeUser ZU ON (ZU.UserId = ZGC.UserId)  
	  LEFT JOIN ZnodeAccount ZA ON (ZA.AccountId= ZU.AccountId)
      LEFT JOIN @TBL_PortalId TP ON (TP.PortalId = ZGC.PortalId)  
        
         WHERE ((CONVERT(date,''' +@ExpirationDate+''' ) <= CONVERT(DATE,ZGC.ExpirationDate) OR ZGC.ExpirationDate IS  NULL)  OR '''+@ExpirationDate+''' = '''') AND ZGC.PortalId in ('+@PortalId+') 
		
      )  
      , CTE_GetGiftCardList AS  
      (  
      SELECT StoreName,Name,CardNumber,CreatedDate,StartDate,ExpirationDate,Amount,RemainingAmount,CustomerId,CustomerName,AccountName,IsActive,GiftCardId,UserId,CurrencyCode, AccountCode, 
      '+dbo.Fn_GetPagingRowId(@Order_BY,'GiftCardId DESC')+',Count(*)Over() CountNo   
      FROM CTE_GetGiftCard  
      WHERE 1=1 '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'       
      )  
  
      SELECT StoreName,Name,CardNumber,CreatedDate,StartDate,ExpirationDate,Amount,RemainingAmount,CustomerId,CustomerName,AccountName,IsActive,GiftCardId,UserId,CurrencyCode,RowId,CountNo, AccountCode  
      FROM CTE_GetGiftCardList  
      '+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)  
       
     
   INSERT INTO @TBL_GiftCardList  
   EXEC(@SQL)  
  
   SET @RowsCount =ISNULL((SELECT TOP 1 CountNo FROM @TBL_GiftCardList ),0)  
     
   SELECT StoreName,Name,CardNumber,CreatedDate,StartDate,ExpirationDate,Amount,RemainingAmount,CustomerId,CustomerName,AccountName,IsActive,GiftCardId,UserId,CultureCode, AccountCode 
   FROM @TBL_GiftCardList  
  
      END TRY  
   BEGIN CATCH  
    DECLARE @Status BIT ;  
       SET @Status = 0;  
       DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),  
    @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetGiftCardList @WhereClause = '+CAST(@WhereClause AS VARCHAR(MAX))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@PortalId='+@PortalId+',@ExpirationDate='+CAST(@ExpirationDate AS VARCHAR(50))+'@Status='+CAST(@Status AS VARCHAR(10));  
                    
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                      
      
             EXEC Znode_InsertProcedureErrorLog  
    @ProcedureName = 'Znode_GetGiftCardList',  
    @ErrorInProcedure = @Error_procedure,  
    @ErrorMessage = @ErrorMessage,  
    @ErrorLine = @ErrorLine,  
    @ErrorCall = @ErrorCall;  
   END CATCH  
     END
GO
IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_GetOmsQuoteList')
	DROP PROC Znode_GetOmsQuoteList
GO

CREATE PROCEDURE [dbo].[Znode_GetOmsQuoteList]    
(     
  @WhereClause NVARCHAR(MAX),    
  @Rows        INT            = 100,    
  @PageNo      INT            = 1  ,    
  @Order_BY    VARCHAR(1000)  = '' ,    
  @RowsCount   INT OUT             ,    
  @AccountId   INT,    
  @UserId      INT            = 0,     
  @IsPendingPayment BIT = 0  ,     
  @IsParentPendingOrder  BIT = 1     
  )    
AS     
   /*    
  Summary :- This procedure is used to get the Quote list of account and Users    
    Fn_GetRecurciveAccounts is used to fetch AccountId and Its recursive ParentId      
    @InnerWhereClause contains AccountId fetched from the Function Fn_GetRecurciveAccounts     
    OrderDetails are fetched from the tables filtered by AccountId Present in @InnerWhereClause    
    OrderDetails are fetched in Descending order of OmsQuoteId    
     Unit Testing     
     
     EXEC Znode_GetOmsQuoteList '(PortalId in(''13'',''2'',''3'',''6'')) ' ,@RowsCount = 0 ,@AccountId = 0,@UserId = 0      
    
*/    
     BEGIN    
         BEGIN TRY    
			SET NOCOUNT ON;    
			DECLARE @SQL NVARCHAR(MAX)= '', @InnerWhereClause VARCHAR(MAX)= '', @ProcessType  varchar(50)='Quote',@QuoteFilter NVARCHAr(max)='';    
    
            DECLARE @TBL_QuoteDetails TABLE (OmsQuoteId INT,UserName NVARCHAR(300),AccountName NVARCHAR(400),QuoteOrderTotal NUMERIC(28, 6),[OrderStatus] VARCHAR(300),    
            CreatedDate DATETIME,StoreName NVARCHAR(Max),CurrencyCode VARCHAR(100),CultureCode VARCHAR(100),PublishState nvarchar(600),RowId INT,CountNo INT,CreatedByName NVARCHAr(max) ,ModifiedByName NVARCHAR(max),IsConvertedToOrder bit,OrderType varchar(50), UserId INT, AccountCode nvarchar(100));    
           
             IF @UserId <> 0  AND @IsParentPendingOrder   = 1           
                 BEGIN    
                     SET @InnerWhereClause = ' AND '''+CAST(@UserId AS VARCHAR(max))+''' = ZU.UserId ';    
                    -- SET @AccountId = (SELECT TOP 1 AccountID FROM ZnodeUser WHERE UserId = @UserId);    
                 END    
             ELSE IF @IsParentPendingOrder   = 0     
                BEGIN    
				SET @InnerWhereClause = ' AND  EXISTS (SELECT TOP 1 1 FROM [dbo].[Fn_GetRecurciveUserId] ('+CAST(@UserId AS VARCHAR(50))+','''+@ProcessType+''') SP WHERE (SP.UserId = ZU.UserId OR SP.UserId IS NULL)  )';   
   
				SET @QuoteFilter =' AND EXISTS (SELECT TOP 1 1 FROM ZnodeOMSQuoteApproval WR WHERE WR.OmsQuoteId = ZOQ.OmsQuoteId AND ( Wr.ApproverUserId ='+CAST(@UserId AS VARCHAR(50))+' OR Wr.UserId = '+CAST(@UserId AS VARCHAR(50))+'  ) ) ';        
				END    
    ELSE     
    BEGIN     
      SET @InnerWhereClause = ''    
    END       
          
    IF @IsPendingPayment =1     
    BEGIN     
       
     SET @InnerWhereClause = @InnerWhereClause+' AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodeUserGlobalAttributeValue a     
    INNER JOIN ZnodeUserGlobalAttributeValueLocale b  on (b.UserGlobalAttributeValueId = a.UserGlobalAttributeValueId)    
    INNER JOIN ZnodeGlobalAttribute c ON (c.GlobalAttributeid = a.GlobalAttributeId )    
    WHERE c.AttributeCOde = ''BillingAccountNumber'' AND a.UserId =  ZU.UserId AND b.AttributeValue = '''' ) AND ZOQ.IsPendingPayment =  1    '    
         
    END     
    ELSE     
    BEGIN    
       SET @InnerWhereClause = @InnerWhereClause+' AND ZOQ.IsPendingPayment = 0   '    
    END     
    
    SET @InnerWhereClause = @InnerWhereClause + CASE WHEN @AccountId > 0 THEN ' AND ZA.AccountId ='+CAST(@AccountId AS VARCHAR(200)) ELSE '' END     
    
    SET @SQL = '       
		;With Cte_GetQuoteDetail AS     
		(    
		SELECT Zu.UserId ,ZOQ.OmsQuoteId,ZU.FirstName + CASE WHEN ZU.LastName IS NULL THEN '''' ELSE '' ''+Zu.LastName END UserName , QuoteOrderTotal , ZOOS.Description [OrderStatus]    
		,ZOQ.CreatedDate,ZA.Name AccountName,ZP.PortalId,Zp.StoreName , ZCC.CurrencyCode AS CurrencyCode, ZC.CultureCode AS CultureCode ,ZVGD.UserName CreatedByName , ZVGDI.UserName ModifiedByName,    
		case When ZOQ.IsConvertedToOrder IS NULL THEN 0 ELSE ZOQ.IsConvertedToOrder END IsConvertedToOrder,ISNULL(DT.QuoteTypeCode,'''') QuoteTypeCode,ZODPS.DisplayName as PublishState,
		'+case when cast(@IsParentPendingOrder as varchar(10)) = 0  then +'Case  When TYUI.ApproverUserId ='+CAST(@UserId AS VARCHAR(50))  + ' then ''Approval Requested'' 
		else ''Pending For Approval'' END' else '''''' end +' OrderType, ZA.AccountCode    
		FROM ZnodeOmsQuote ZOQ    
		INNER JOIN ZnodeUser ZU ON (ZU.UserId = ZOQ.UserId)    
		LEFT JOIN ZnodePublishState ZODPS ON (ZODPS.PublishStateId = ZOQ.PublishStateId)  
		LEFT JOIN ZnodeUserPortal ZUP ON ZU.UserId = ZUP.UserId    
		inner JOIN ZnodePortal ZP ON ZP.PortalId = Zoq.PortalId    
		'+CASE WHEN @IsParentPendingOrder = 0  THEN ' LEFT JOIN ZnodeOMSQuoteApproval TYUI ON (TYUI.OmsQuoteId = ZOQ.OmsQuoteId AND TYUI.ApproverUserId ='+CAST(@UserId AS VARCHAR(50))+' ) ' ELSE '' END +'    
		LEFT JOIN ZnodePortalUnit ZPU ON (ZPU.PortalId = Zp.PortalId)    
		LEFT JOIN ZnodeCulture ZC ON (ZPU.CultureId = ZC.CultureId)    --- Changed join condition from CurrencyId to CultureId    
		LEFT JOIN ZnodeCurrency ZCC ON (ZC.CurrencyId = ZCC.CurrencyId)    --- Joined ZnodeCulture and ZnodeCurrency   
		LEFT JOIN ZnodeOmsOrderState ZOOS ON (ZOOS.OmsOrderStateId = '+CASE WHEN @IsParentPendingOrder = 0 AND EXISTS (SELECT TOP 1 1 FROM ZnodeOMSQuoteApproval OQ WHERE OQ.ApproverUserId = @UserId) THEN 'TYUI.OmsOrderStateId ' ELSE 'ZOQ.OmsOrderStateId' END  +' )     
		LEFT JOIN ZnodeAccount ZA ON (ZA.AccountId = ZU.AccountId )    
		LEFT JOIN [dbo].[View_GetUserDetails]  ZVGD ON (ZVGD.UserId = ZOQ.CreatedBy )    
		LEFT JOIN [dbo].[View_GetUserDetails]  ZVGDI ON (ZVGDI.UserId = ZOQ.ModifiedBy)    
		INNER JOIN ZnodeOmsQuoteType DT ON (DT.OmsQuoteTypeId = ZOQ.OmsQuoteTypeId)    
		WHERE DT.OmsQuoteTypeId <> (select top 1 OmsQuoteTypeId from ZnodeOmsQuoteType where QuoteTypeCode = ''QUOTE'')'+' '+@InnerWhereClause+@QuoteFilter+'    
    
		)    
		, Cte_GetQuote AS     
		(    
		SELECT OmsQuoteId,UserName ,AccountName , QuoteOrderTotal QuoteAmount, [OrderStatus]  ,CreatedDate ,StoreName,CurrencyCode, CultureCode,PublishState,CreatedByName , ModifiedByName ,IsConvertedToOrder,OrderType,'+dbo.Fn_GetPagingRowId(@Order_BY,'CreatedDate DESC
		,OmsQuoteId DESC')+',Count(*)Over() CountNo ,UserId, AccountCode      
		FROM Cte_GetQuoteDetail    
		WHERE 1=1     
		'+dbo.Fn_GetFilterWhereClause(@WhereClause)+'    
		)    
		SELECT OmsQuoteId,UserName ,AccountName ,  QuoteAmount, [OrderStatus]  ,CreatedDate ,StoreName,CurrencyCode, CultureCode,PublishState,RowId,CountNo,CreatedByName , ModifiedByName,IsConvertedToOrder,OrderType, UserId , AccountCode   
		FROM Cte_GetQuote     
		'+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)    
      print @SQL
        INSERT INTO @TBL_QuoteDetails (OmsQuoteId, UserName, AccountName, QuoteOrderTotal ,OrderStatus, CreatedDate, StoreName,CurrencyCode, CultureCode,PublishState, RowId ,CountNo,CreatedByName , ModifiedByName,IsConvertedToOrder,OrderType, UserId, AccountCode)          
        EXEC (@SQL);    
        SET @RowsCount = ISNULL((SELECT TOP 1 CountNo FROM @TBL_QuoteDetails), 0);    
    
        SELECT  OmsQuoteId,UserName,AccountName,QuoteOrderTotal,[OrderStatus],CreatedDate,StoreName,CurrencyCode, CultureCode,PublishState,CreatedByName , ModifiedByName,IsConvertedToOrder  ,OrderType , UserId, AccountCode 
        FROM @TBL_QuoteDetails;    
        
         END TRY    
         BEGIN CATCH    
		DECLARE @Status BIT ;    
		SET @Status = 0;    
		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetOmsQuoteList @WhereClause = '+CAST(@WhereClause AS VARCHAR(max)  
		)+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@AccountId='+CAST(@AccountId AS VARCHAR(50))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@PortalId='+''  
		+',@Status='+CAST(@Status AS VARCHAR(10));    
                      
		SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                        
        
		EXEC Znode_InsertProcedureErrorLog    
		@ProcedureName = 'Znode_GetOmsQuoteList',    
		@ErrorInProcedure = @Error_procedure,    
		@ErrorMessage = @ErrorMessage,    
		@ErrorLine = @ErrorLine,    
		@ErrorCall = @ErrorCall;    
         END CATCH;    
     END

GO
IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_GetPriceListAssociatedAccounts')
	DROP PROC Znode_GetPriceListAssociatedAccounts
GO
Create PROCEDURE [dbo].[Znode_GetPriceListAssociatedAccounts]
(   @WhereClause VARCHAR(1000),
    @Rows        INT           = 10,
    @PageNo      INT           = 1,
    @Order_BY    VARCHAR(100)  = '',
    @RowsCount   INT OUT)
AS 
  /* 
    Summary:  List of accounts associated and not associated to the price list     		   	             
    Unit Testing      			
     DECLARE @RER INT =2 
	 EXEC Znode_GetPriceListAssociatedAccounts @WhereClause = '',@RowsCount= @RER OUT 
 */
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
            
             DECLARE @SQL NVARCHAR(MAX);
			 DECLARE @TBL_AccountList TABLE (PortalId INT,StoreName Nvarchar(max),  AccountId INT ,AccountName NVARCHAR(1000),Precedence INT ,PriceListId int,PriceListAccountId INT,ExternalId NVARCHAR(200) ,ParentAccountName NVARCHAR(400),IsAssociated BIT ,RowId INT,CountNo INT, AccountCode nvarchar(100))
					
             SET @SQL = '
					 ;with Cte_Account AS 
					 (
						 SELECT ZP.PortalId, Zp.StoreName, ZA.AccountId, ZA.Name AccountName ,ZPLA.Precedence ,ZPL.PriceListId,PriceListAccountId,ZA.ExternalId,ZAP.Name ParentAccountName ,Case WHEN ZPLA.AccountId IS NULL THEN 0 ELSE 1 END IsAssociated, ZA.AccountCode
						 FROM ZnodeAccount  ZA 
						 CROSS APPLY ZnodePriceList ZPL  
						 LEFT JOIN ZnodeAccount ZAP ON (ZAP.Accountid = ZA.ParentAccountId )
						 INNER JOIN ZnodePortalAccount ZPA ON ZPA.AccountId = ZA.AccountId
						 INNER JOIN ZnodePortal ZP on ZPA.PortalId = ZP.PortalId 
						 LEFT JOIN ZnodePriceListAccount ZPLA ON (ZPLA.AccountId = ZA.AccountId AND ZPL.PriceListId = ZPLA.PriceListId ))

					 , Cte_AccountListRowId AS
						 (SELECT *, '+dbo.Fn_GetPagingRowId(@Order_BY,'AccountId DESC')+',Count(*)Over() CountNo
						 FROM Cte_Account WHERE 1=1
						'+dbo.Fn_GetFilterWhereClause(@WhereClause)+')

					 SELECT PortalId,StoreName,AccountId,AccountName,Precedence,PriceListId,PriceListAccountId,ExternalId,ParentAccountName,IsAssociated,RowId,CountNo , AccountCode
					 FROM Cte_AccountListRowId
					 '+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)
				
			 INSERT INTO @TBL_AccountList   
			 EXEC (@SQL)

             SET @RowsCount = ISNULL((SELECT TOP 1 CountNo FROM @TBL_AccountList),0)

			 SELECT PortalId,StoreName,AccountId,AccountName,Precedence,PriceListId,PriceListAccountId,ExternalId,ParentAccountName, AccountCode
			 FROM @TBL_AccountList
				 
         END TRY
         BEGIN CATCH
            DECLARE @Status BIT ;
		    SET @Status = 0;
		    DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPriceListAssociatedAccounts @WhereClause = '+cast (@WhereClause AS VARCHAR(50))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='
			+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
            SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
            EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetPriceListAssociatedAccounts',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO
IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_AdminUsers')
	DROP PROC Znode_AdminUsers
GO
CREATE PROCEDURE [dbo].[Znode_AdminUsers]
(	@RoleName		VARCHAR(200),
    @UserName		VARCHAR(200),
    @WhereClause	XML,
    @Rows			INT           = 100,
    @PageNo			INT           = 1,
    @Order_By		VARCHAR(1000) = '',
    @RowCount		INT        = 0 OUT,
	@IsCallOnSite   BIT = 0 ,
	@PortalId		VARCHAR(1000) = 0,
	@IsGuestUser    BIT = 0,
	@ColumnName     dbo.SelectColumnList ReadOnly
)
AS
   /* 
      Summary: List of users with detsils and shows link with ASPNet tables 
      This procedure is used for finding both users and admin users 
      here use three view "View_RoleUsers" for check  @UserName is present or not 
      "View_AdminUserDetail"  this view use for admin users 
      "View_CustomerUserDetail" Use for customer users 
      Unit Testing   
	  SELECT * FROM ZnodeUser 
      DECLARE @EDE INT=0  EXEC Znode_AdminUsers '','admin@znode.com',@WhereClause='',@Order_By='',@PageNo= 1 ,@Rows= 214,@IsCallOnSite='false',@PortalId=0,@RowCount=@EDE OUT  SELECT @EDE
   */
     BEGIN
         BEGIN TRY
            SET NOCOUNT ON;
			
            DECLARE @SQL NVARCHAR(MAX)= '', @PaginationWhereClause VARCHAR(300)= dbo.Fn_GetRowsForPagination(@PageNo, @Rows, ' WHERE RowId');
             
			IF OBJECT_ID('tempdb..#TBL_RowCount') is not null
				DROP TABLE #TBL_RowCount
			Create table #TBL_RowCount(RowsCount int )
			-----Split where clause XMl 
			CREATE TABLE #WhereColumnList(RowId Int identity, filterName varchar(max), WhereCondition varchar(max))
			insert into #WhereColumnList(filterName,WhereCondition)
			SELECT 
					Tbl.Col.value('key[1]', 'varchar(max)') as filterName,
					Tbl.Col.value('condition[1]', 'varchar(max)') WhereCondition
			FROM   @WhereClause.nodes('//filter') Tbl(Col) 
			----Address column in global search
			declare @AddressGlobalSearch varchar(1000)
			declare @GlobalSearch varchar(100)
			select @GlobalSearch = substring(WhereCondition,charindex(' like ',WhereCondition), charindex(' OR ',WhereCondition)-charindex(' like ',WhereCondition)) 
			from #WhereColumnList
			where filtername like '%|%'
			and filtername <> ''
			and filterName in ('CityName','CountryName','PostalCode','StateName','CompanyName') 

			if isnull(@GlobalSearch,'') <> ''
			begin
				select @AddressGlobalSearch = '('+'CityName '+ @GlobalSearch+' OR '+'CountryName '+ @GlobalSearch+' OR '+'PostalCode '+ @GlobalSearch+' OR '+'StateName '+ @GlobalSearch+' OR '+'CompanyName '+ @GlobalSearch+')'
			end
			else
			begin
				SET @AddressGlobalSearch = ''
			end
			----Global search where clause
			declare @WhereClauseGlobal varchar(1000)=''
			select @WhereClauseGlobal = ISNULL(WhereCondition,'')
			from #WhereColumnList
			where filtername like '%|%'
			and filtername <> ''
			
			----Where clause columns except Address columns
			declare @WhereClause1 varchar(max) 
			select @WhereClause1 = COALESCE(@WhereClause1 + '', '') + WhereCondition+' And '
			--case when @WhereClause1 <> ''  then ' And ' else '' end
			from #WhereColumnList a
			where filterName not like '%|%' and
			filterName not in ('CountryName','CityName','StateName','PostalCode','CompanyName')
			and filtername <> ''

			if @WhereClause1 <> ''
			begin
				set @WhereClause1=isnull(substring(@WhereClause1,1,len(@WhereClause1)-3),'')
			end
			else
			begin
				set @WhereClause1 = ''
			end

			----Where clause columns
			declare @AddressColumnWhereClause varchar(max) 
			select @AddressColumnWhereClause = COALESCE(@AddressColumnWhereClause + '', '') + WhereCondition+' And '
			from #WhereColumnList a
			where filterName not like '%|%' and
			filterName in ('CountryName','CityName','StateName','PostalCode','CompanyName')
			and filtername <> ''
			
			if isnull(@AddressColumnWhereClause,'') <> ''
			begin
				set @AddressColumnWhereClause=isnull(substring(@AddressColumnWhereClause,1,len(@AddressColumnWhereClause)-3),'')
            end
			else
			begin
				set @AddressColumnWhereClause = ''
			end

			declare @WhereClauseAll varchar(max)
			select @WhereClauseAll = COALESCE(@WhereClauseAll + '', '') + WhereCondition+' And '
			from #WhereColumnList a

			set @WhereClauseAll=isnull(substring(@WhereClauseAll,1,len(@WhereClauseAll)-3),'')
			-------------- 

			IF @PortalId  <> '0' 
			BEGIN 
			    SET @WhereClauseAll = CASE WHEN  @WhereClauseAll = '' THEN ' (PortalId IN ('+@PortalId+') OR PortalId IS NULL) ' ELSE @WhereClauseAll+' AND (PortalId IN ('+@PortalId+') OR PortalId IS NULL) ' END 

				SET @WhereClause1 = CASE WHEN  @WhereClause1 = '' THEN ' (isnull(PortalId,0) IN ('+@PortalId+') OR PortalId IS NULL) ' ELSE @WhereClause1+' AND (isnull(PortalId,0) IN ('+@PortalId+') OR PortalId IS NULL) ' END 
			
			END 
			IF EXISTS ( SELECT TOP 1 1 FROM View_RoleUsers  WHERE Username = @UserName   )  AND @RoleName <> ''  
			-- this check for admin user
       		BEGIN
				SET @SQL = ' SELECT  A.UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,A.CreatedBy,A.CreatedDate,A.ModifiedBy,A.ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId ,CustomerPaymentGUID
				INTO #Cte_AdminUserDetail
				FROM View_AdminUserDetail A
				'+CASE WHEN @PortalId  <> '0' THEN ' INNER JOIN ZnodeUserPortal ZUP ON (ZUP.UserId = A.UserId) 'ELSE '' END  +'	 
				'+dbo.Fn_GetWhereClause(@WhereClauseAll, ' WHERE ')+'
				
				;with Cte_AdminUserDetailRowId AS 
				(
				SELECT UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId,CustomerPaymentGUID ,RANK()Over('+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC')+',UserId DESC) RowId
				FROM  #Cte_AdminUserDetail
				)
					 
				SELECT UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId,CustomerPaymentGUID ,RowId 
				INTO #AccountDetails
				FROM Cte_AdminUserDetailRowId 
					 
				SET @Count= ISNULL((SELECT  Count(1) FROM #AccountDetails ),0)
					 
				SELECT DISTINCT UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId ,CustomerPaymentGUID
				FROM #AccountDetails '+@PaginationWhereClause+' '+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC' );
				EXEC SP_executesql
				@SQL,
				N'@Count INT OUT',
				@Count = @RowCount OUT;
			END;
			-- For Customer user
            ELSE   
			BEGIN
				IF @roleName = ''
				BEGIN
					if OBJECT_ID('tempdb..##CustomerUserAddDetail') is not null
					drop table ##CustomerUserAddDetail

					if OBJECT_ID('tempdb..##View_CustomerUserAddDetail') is not null
					drop table ##View_CustomerUserAddDetail
				
					if OBJECT_ID('tempdb..##UserList') is not null
					drop table ##UserList

					CREATE TABLE ##UserList(UserId int,AddressID int)

					declare @UserList varchar(1000)=''

					------To get the list of user having adress column in global search
					if (@AddressGlobalSearch <> '')
					begin
				
					set @UserList = 'select a.UserId, b.AddressID	from ZnodeUserAddress a	inner join ZnodeAddress b on a.AddressId = b.AddressId	where '+@AddressGlobalSearch
					--print @UserList
					insert into ##UserList(UserId, b.AddressID)
					exec (@UserList)
			
					end
					----To get the list of user having adress column in where clause 
					if (@AddressColumnWhereClause <> '')
					begin
					
					set @UserList = 'select a.UserId, b.AddressID	from ZnodeUserAddress a	inner join ZnodeAddress b on a.AddressId = b.AddressId	where '+@AddressColumnWhereClause
					--print @UserList
					insert into ##UserList(UserId,AddressID)
					exec (@UserList)
					
					end

					If @IsGuestUser= 0 
					AND
					NOT Exists (Select filterName from #WhereColumnList where filterName in ('accountid','isaccountcustomer','UserId') and filtername <> '')
					-- Customer List with GuestUsers
					Begin
						SET @SQL = 
							'SELECT a.userId,a.AspNetuserId,azu.UserName,a.FirstName,a.MiddleName,a.LastName,a.PhoneNumber,
							 a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
							 CONVERT( DATE, a.ModifiedDate) ModifiedDate, 0 RoleId,''''  RoleName,
							 CASE	WHEN B.LockoutEndDateUtc IS NULL
							 THEN CAST(1 AS    BIT)	ELSE CAST(0 AS BIT)
							 END IsActive,	CAST(CASE WHEN ISNULL(LockoutEndDateUtc, 0) = 0 THEN  0 ELSE  1 END  AS    BIT) AS IsLock,
				
							 (ISNULL(RTRIM(LTRIM(a.FirstName)), '''')+'' ''+ISNULL(RTRIM(LTRIM(a.MiddleName)), '''')+CASE
							 WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '''') = ''''	THEN ''''
							 ELSE '' ''	END+ISNULL(RTRIM(LTRIM(a.LastName)), '''')) 
				
							 FullName,
							 e.Name AccountName
							 ,a.AccountId,a.ExternalId,	CASE	WHEN a.AccountId IS NULL THEN 0	ELSE 1	END IsAccountCustomer,
							 a.BudgetAmount,
							 '''' TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser,a.CustomerPaymentGUID
							 --,CASE WHEN zp.StoreName IS NULL THEN ''ALL'' ELSE zp.StoreName END StoreName,
							 ,ISnull(zp.StoreName , ''ALL'')StoreName,
							 up.PortalId as PortalId, e.AccountCode
							 into ##View_CustomerUserAddDetail
							 FROM ZnodeUser a
							 INNER JOIN ASPNetUsers B ON(a.AspNetuserId = b.Id)
							 INNER JOIN AspNetZnodeUser azu ON(azu.AspNetZnodeUserId = b.UserName)
							 LEFT JOIN ZnodeUserPortal up ON(up.UserId = a.UserId)  
							 LEFT JOIN ZnodePortal zp ON (up.PortalId = zp.PortalId)
							 LEFT JOIN ZnodeAccount e ON(e.AccountId = a.AccountId)
							' 
						EXEC (@SQL)
					End	
					Else If @IsGuestUser= 1 
					Begin
							SET @SQL='SELECT a.userId,a.AspNetuserId,azu.UserName,a.FirstName,a.MiddleName,a.LastName,a.PhoneNumber,
							a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
							CONVERT( DATE, a.ModifiedDate) ModifiedDate,ur.RoleId,r.Name RoleName,
							CASE WHEN B.LockoutEndDateUtc IS NULL THEN CAST(1 AS    BIT) ELSE CAST(0 AS BIT) END IsActive,
							CAST(CASE WHEN ISNULL(LockoutEndDateUtc, 0) = 0 THEN  0 ELSE  1 END  AS    BIT) AS IsLock,
							(ISNULL(RTRIM(LTRIM(a.FirstName)), '''')+'' ''+ISNULL(RTRIM(LTRIM(a.MiddleName)), '''')+CASE
							WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '''') = '''' THEN '''' ELSE '' '' END+ISNULL(RTRIM(LTRIM(a.LastName)), '''')) FullName,
							e.Name AccountName,a.AccountId,a.ExternalId,
							CASE WHEN a.AccountId IS NULL THEN 0 ELSE 1	END IsAccountCustomer,
							a.BudgetAmount,r.TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser,a.CustomerPaymentGUID
							,CASE WHEN zp.StoreName IS NULL THEN ''ALL'' ELSE zp.StoreName END StoreName,
							CASE WHEN a.AccountId IS NULL THEN up.PortalId ELSE ZPA.PortalId END as PortalId,e.AccountCode
							into ##View_CustomerUserAddDetail
							FROM ZnodeUser a
							LEFT JOIN ASPNetUsers B ON(a.AspNetuserId = b.Id)
							LEFT JOIN ZnodeAccount e ON(e.AccountId = a.AccountId)
							LEFT JOIN AspNetUserRoles ur ON(ur.UserId = a.AspNetUserId)
							LEFT JOIN AspNetRoles r ON(r.Id = ur.RoleId)                       
							LEFT JOIN AspNetZnodeUser azu ON(azu.AspNetZnodeUserId = b.UserName)
							LEFT JOIN ZnodeUserPortal up ON(up.UserId = a.UserId)  
							LEFT JOIN ZnodePortal zp ON (up.PortalId = zp.PortalId)
							LEFT JOIN ZnodePortalAccount ZPA ON(ZPA.AccountId = a.AccountId) 
							WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeUSer ZUQ WHERE ZUQ.UserId = a.UserId AND ZUQ.EmailOptIn = 1 AND ZUQ.AspNetUserId IS NULL )
							AND a.AspNetuserId is null'
						EXEC (@SQL)
					End
					Else IF Exists (Select filterName from #WhereColumnList where filterName in ('UserId') and filtername <> '')
					and  @IsGuestUser= 0   
					-- Customer List for user edit single user 
					Begin
					SET @SQL='SELECT a.userId,a.AspNetuserId,azu.UserName,a.FirstName,a.MiddleName,a.LastName,a.PhoneNumber,
							a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
							CONVERT( DATE, a.ModifiedDate) ModifiedDate,ur.RoleId,r.Name RoleName,
							CASE WHEN B.LockoutEndDateUtc IS NULL THEN CAST(1 AS    BIT) ELSE CAST(0 AS BIT) END IsActive,
							CAST(CASE WHEN ISNULL(LockoutEndDateUtc, 0) = 0 THEN  0 ELSE  1 END  AS    BIT) AS IsLock,
							(ISNULL(RTRIM(LTRIM(a.FirstName)), '''')+'' ''+ISNULL(RTRIM(LTRIM(a.MiddleName)), '''')+CASE
							WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '''') = '''' THEN '''' ELSE '' '' END+ISNULL(RTRIM(LTRIM(a.LastName)), '''')) FullName,
							e.Name AccountName,a.AccountId,a.ExternalId,
							CASE WHEN a.AccountId IS NULL THEN 0 ELSE 1	END IsAccountCustomer,
							a.BudgetAmount,r.TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser,a.CustomerPaymentGUID
							,CASE WHEN zp.StoreName IS NULL THEN ''ALL'' ELSE zp.StoreName END StoreName,
							CASE WHEN a.AccountId IS NULL THEN up.PortalId ELSE ZPA.PortalId END as PortalId,e.AccountCode
							into ##View_CustomerUserAddDetail
							FROM ZnodeUser a
							LEFT JOIN ASPNetUsers B ON(a.AspNetuserId = b.Id)
							LEFT JOIN ZnodeAccount e ON(e.AccountId = a.AccountId)
							LEFT JOIN AspNetUserRoles ur ON(ur.UserId = a.AspNetUserId)
							LEFT JOIN AspNetRoles r ON(r.Id = ur.RoleId)                       
							LEFT JOIN AspNetZnodeUser azu ON(azu.AspNetZnodeUserId = b.UserName)
							LEFT JOIN ZnodeUserPortal up ON(up.UserId = a.UserId)  
							LEFT JOIN ZnodePortal zp ON (up.PortalId = zp.PortalId)
							LEFT JOIN ZnodePortalAccount ZPA ON(ZPA.AccountId = a.AccountId) 
							WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeUSer ZUQ WHERE ZUQ.UserId = a.UserId AND ZUQ.EmailOptIn = 1 AND ZUQ.AspNetUserId IS NULL )'
						EXEC (@SQL)
					End	
					Else -- Account user List 
					Begin
							SELECT a.userId,a.AspNetuserId,azu.UserName,a.FirstName,a.MiddleName,a.LastName,a.PhoneNumber,
							a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
							CONVERT( DATE, a.ModifiedDate) ModifiedDate,ur.RoleId,r.Name RoleName,
							CASE WHEN B.LockoutEndDateUtc IS NULL THEN CAST(1 AS    BIT) ELSE CAST(0 AS BIT) END IsActive,
							CAST(CASE WHEN ISNULL(LockoutEndDateUtc, 0) = 0 THEN  0 ELSE  1 END  AS    BIT) AS IsLock,
							(ISNULL(RTRIM(LTRIM(a.FirstName)), '')+' '+ISNULL(RTRIM(LTRIM(a.MiddleName)), '')+CASE
							WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '') = '' THEN '' ELSE ' ' END+ISNULL(RTRIM(LTRIM(a.LastName)), '')) FullName,
							e.Name AccountName,a.AccountId,a.ExternalId,
							CASE WHEN a.AccountId IS NULL THEN 0 ELSE 1	END IsAccountCustomer,
							a.BudgetAmount,r.TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser,a.CustomerPaymentGUID
							,CASE WHEN zp.StoreName IS NULL THEN 'ALL' ELSE zp.StoreName END StoreName,
							CASE WHEN a.AccountId IS NULL THEN up.PortalId ELSE ZPA.PortalId END as PortalId, e.AccountCode
							into ##View_CustomerUserAddDetail
							FROM ZnodeUser a
							LEFT JOIN ASPNetUsers B ON(a.AspNetuserId = b.Id)
							LEFT JOIN ZnodeAccount e ON(e.AccountId = a.AccountId)
							LEFT JOIN AspNetUserRoles ur ON(ur.UserId = a.AspNetUserId)
							LEFT JOIN AspNetRoles r ON(r.Id = ur.RoleId)                       
							LEFT JOIN AspNetZnodeUser azu ON(azu.AspNetZnodeUserId = b.UserName)
							LEFT JOIN ZnodeUserPortal up ON(up.UserId = a.UserId)  
							LEFT JOIN ZnodePortal zp ON (up.PortalId = zp.PortalId)
							LEFT JOIN ZnodePortalAccount ZPA ON(ZPA.AccountId = a.AccountId) 
							WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeUSer ZUQ WHERE ZUQ.UserId = a.UserId AND ZUQ.EmailOptIn = 1 AND ZUQ.AspNetUserId IS NULL )
					End


					alter table ##View_CustomerUserAddDetail 
					add DepartmentId int, PermissionsName varchar(200), PermissionCode varchar(200), DepartmentName varchar(300), AccountPermissionAccessId int,
					AccountUserOrderApprovalId int, ApprovalName varchar(1000) , ApprovalUserId int
					--, PortalId int , StoreName varchar(1000)
					,CountryName varchar(1000),CityName varchar(1000),StateName varchar(1000),PostalCode varchar(1000), CompanyName varchar(1000),
					SalesRepUserName varchar(600),SalesRepFullName varchar(1000)

	
					IF ((@AddressGlobalSearch like '%CountryName%' OR @AddressGlobalSearch like '%CityName%' OR @AddressGlobalSearch like '%StateName%' OR @AddressGlobalSearch like '%PostalCode%' OR @AddressGlobalSearch like '%CompanyName%')
					and exists(select * from ##UserList))
					BEGIN
						update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
						PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName
						from ##View_CustomerUserAddDetail a
						inner join ZnodeUserAddress ZUA on a.UserId = ZUA.UserId
						inner  JOIN ZnodeAddress ZA on ZA.AddressId = zua.AddressId
						where exists(select * from ##UserList UL where a.UserId = UL.UserId and UL.AddressId = ZA.AddressId )

						update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
						PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName
						from ##View_CustomerUserAddDetail a
						inner join ZnodeAccountAddress ZAA on a.AccountId = ZAA.AccountId
						inner  JOIN ZnodeAddress ZA on ZA.AddressId = ZAA.AddressId
						where isnull(a.AccountId,0)<> 0-- is not null
						and exists(select * from ##UserList UL where a.UserId = UL.UserId and UL.AddressID = ZA.AddressId)
						and (a.CountryName is null OR a.CityName is null OR a.StateName is null or a.PostalCode is null or a.CompanyName is null)
		
					END

					--CREATE NONCLUSTERED INDEX IND_101
					--ON [dbo].[##View_CustomerUserAddDetail] ([userId],[AspNetuserId])

					SET @SQL = '			
						
						create table #AccountDetail
						(
							UserId int,AspNetuserId nvarchar(200),UserName nvarchar(200),FirstName nvarchar(200),MiddleName nvarchar(200),LastName nvarchar(200),
							PhoneNumber nvarchar(100),Email nvarchar(100),EmailOptIn bit,CreatedBy int,CreatedDate datetime,ModifiedBy int,ModifiedDate datetime,
							RoleId varchar(200),RoleName varchar(200),IsActive bit,IsLock bit,FullName  varchar(1000),AccountName  varchar(200),PermissionsName  varchar(200),
							DepartmentName  varchar(200),DepartmentId int,AccountId int,AccountPermissionAccessId int, ExternalId  varchar(200),BudgetAmount numeric(10,6),
							AccountUserOrderApprovalId int,ApprovalName varchar(200),ApprovalUserId int,PermissionCode varchar(500),CustomerPaymentGUID varchar(500),
							StoreName varchar(200),PortalId int,CountryName varchar(200), CityName varchar(200), StateName varchar(200), PostalCode varchar(200), CompanyName varchar(200)
							,SalesRepUserName varchar(200),SalesRepFullName varchar(200) ,RowId int identity , AccountCode nvarchar(100)
						) 
						'+
						+' insert into #AccountDetail(UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,IsActive,IsLock,FullName,
						AccountName,PermissionsName,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId , ExternalId,
						BudgetAmount,AccountUserOrderApprovalId,ApprovalName,ApprovalUserId,PermissionCode,CustomerPaymentGUID
						,StoreName,PortalId, CountryName, CityName, StateName, PostalCode, CompanyName, AccountCode)
						SELECT UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,IsActive,IsLock,FullName,
						AccountName,PermissionsName,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId , ExternalId,
						BudgetAmount,AccountUserOrderApprovalId,ApprovalName,ApprovalUserId,PermissionCode,CustomerPaymentGUID 
						,StoreName,PortalId, CountryName, CityName, StateName, PostalCode, CompanyName, AccountCode
						FROM ##View_CustomerUserAddDetail where 1=1'+
						dbo.Fn_GetWhereClause(@WhereClauseGlobal+case when @WhereClauseGlobal<>'' and @WhereClause1 <> '' then ' And '+@WhereClause1 else @WhereClause1 end, ' AND ')+
						dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC') + '
			
						Insert Into #TBL_RowCount Values(@@RowCount)
							
						SELECT  UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,IsActive,IsLock,FullName,
						AccountName,PermissionsName,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId , ExternalId,
						BudgetAmount,AccountUserOrderApprovalId,ApprovalName,ApprovalUserId,PermissionCode ,CustomerPaymentGUID,StoreName,PortalId,
						CountryName, CityName, StateName, PostalCode, CompanyName, SalesRepUserName, SalesRepFullName, AccountCode
						,Row_Number()Over('+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC')+')  RowNumber
						into ##CustomerUserAddDetail
						FROM #AccountDetail '+@PaginationWhereClause  +' '+ dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC');

					EXEC (@SQL)
				
					Select @RowCount= isnull(RowsCount  ,0) from #TBL_RowCount

					ALTER TABLE ##CustomerUserAddDetail ADD AddressId Int
					--To get data for DepartmentId
					update CUD SET DepartmentId = i.DepartmentId
					from ##CustomerUserAddDetail cud
					INNER JOIN ZnodeDepartmentUser i ON(i.UserId = cud.UserId)

					--To get data for PermissionsName
					update CUD SET PermissionsName = h.PermissionsName, PermissionCode = h.PermissionCode
					from ##CustomerUserAddDetail cud
					INNER JOIN ZnodeAccountUserPermission f ON(f.UserId = cud.UserId)
					INNER JOIN ZnodeAccountPermissionAccess g ON(g.AccountPermissionAccessId = f.AccountPermissionAccessId)
					INNER JOIN ZnodeAccessPermission h ON(h.AccessPermissionId = g.AccessPermissionId)

					------To get data for DepartmentName
					update CUD SET DepartmentName = j.DepartmentName
					from ##CustomerUserAddDetail cud
					INNER JOIN ZnodeDepartmentUser i ON(i.UserId = cud.UserId)
					INNER JOIN ZnodeDepartment j ON(j.DepartmentId = i.DepartmentId)

					--To get data for AccountPermissionAccessId
					update CUD SET AccountPermissionAccessId = f.AccountPermissionAccessId
					from ##CustomerUserAddDetail cud
					INNER JOIN ZnodeAccountUserPermission f ON(f.UserId = cud.UserId)

					--To get data for AccountPermissionAccessId
					update CUD SET AccountPermissionAccessId = f.AccountPermissionAccessId
					from ##CustomerUserAddDetail cud
					INNER JOIN ZnodeAccountUserPermission f ON(f.UserId = cud.UserId)
	
					--To get data for AccountUserOrderApprovalId
					update CUD SET AccountUserOrderApprovalId = ZAUOA.AccountUserOrderApprovalId
					from ##CustomerUserAddDetail cud
					INNER JOIN ZnodeAccountUserOrderApproval ZAUOA ON cud.UserId = ZAUOA.UserID
	
					--To get data for ApprovalName,ApprovalUserId
					update CUD SET ApprovalName = ISNULL(RTRIM(LTRIM(ZU.FirstName)), '')+' '+ISNULL(RTRIM(LTRIM(ZU.MiddleName)), '')
					+CASE
					WHEN ISNULL(RTRIM(LTRIM(ZU.MiddleName)), '') = ''
					THEN ''
					ELSE ' '
					END,
					ApprovalUserId = ZAUOA.ApprovalUserId
					from ##CustomerUserAddDetail cud
					INNER JOIN ZnodeAccountUserOrderApproval ZAUOA ON cud.UserId = ZAUOA.UserID
					INNER JOIN ZnodeUser ZU ON(ZU.UserId = ZAUOA.ApprovalUserId)
	
					----To get data for PortalId
					--update CUD SET PortalId = CASE
					--								WHEN cud.AccountId IS NULL
					--								THEN up.PortalId
					--								ELSE ZPA.PortalId
					--							END 
					--from ##CustomerUserAddDetail cud
					--   LEFT JOIN ZnodeUserPortal up ON(up.UserId = cud.UserId) 
					--LEFT JOIN ZnodePortalAccount ZPA ON(ZPA.AccountId = cud.AccountId) 
	
					----To get data for CountryName, CityName, StateName, PostalCode, CompanyName
					IF (EXISTS(SELECT * FROM @ColumnName where ([StringColumn] LIKE '%CountryName%' OR [StringColumn] LIKE '%CityName%' OR [StringColumn] LIKE '%StateName%' OR [StringColumn] LIKE '%PostalCode%' OR [StringColumn] LIKE '%CompanyName%'))
					OR (@WhereClauseAll like '%CountryName%' OR @WhereClauseAll like '%CityName%' OR @WhereClauseAll like '%StateName%' OR @WhereClauseAll like '%PostalCode%' OR @WhereClauseAll like '%CompanyName%'))
					BEGIN
			 
						update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
						PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName, a.AddressId = ZA.AddressId
						from ##CustomerUserAddDetail a
						inner join ZnodeAccountAddress ZAA on a.AccountId = ZAA.AccountId
						inner  JOIN ZnodeAddress ZA on ZA.AddressId = ZAA.AddressId
						where isnull(a.AccountId,0)<> 0-- is not null
	 
						update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
						PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName, a.AddressId = ZA.AddressId
						from ##CustomerUserAddDetail a
						inner join ZnodeUserAddress ZUA on a.UserId = ZUA.UserId
						inner  JOIN ZnodeAddress ZA on ZA.AddressId = zua.AddressId
					END

					----Updating SalesRep for user if any 
					update CUAD
					set CUAD.SalesRepUserName = azu.UserName, 
					CUAD.SalesRepFullName = (ISNULL(RTRIM(LTRIM(ZU.FirstName)), '')+' '+ISNULL(RTRIM(LTRIM(ZU.MiddleName)), '')
					+CASE
					WHEN ISNULL(RTRIM(LTRIM(ZU.MiddleName)), '') = ''
					THEN ''
					ELSE ' '
					END+ISNULL(RTRIM(LTRIM(ZU.LastName)), '')) 
					from ##CustomerUserAddDetail CUAD
					inner join ZnodeSalesRepCustomerUserPortal SRCUP ON CUAD.UserId = SRCUP.CustomerUserid 
					inner join ZnodeUser ZU ON SRCUP.SalesRepUserId = ZU.UserId
					inner join ASPNetUsers ANU ON(ZU.AspNetuserId = ANU.Id)
					inner join AspNetZnodeUser azu ON(azu.AspNetZnodeUserId = ANU.UserName)

					if ( exists(select * from ##UserList) OR @AddressColumnWhereClause <> '')
					begin
						SELECT UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,IsActive,IsLock,
						Isnull(FirstName,'') +  ' ' + ISnull(LastName,'')  FullName,
						AccountName,PermissionsName,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId , ExternalId,
						BudgetAmount,AccountUserOrderApprovalId,ApprovalName,ApprovalUserId,PermissionCode ,CustomerPaymentGUID,StoreName,PortalId,
						CountryName, CityName, StateName, PostalCode, CompanyName, SalesRepUserName, SalesRepFullName, AccountCode
						from ##CustomerUserAddDetail CUAD
						where exists(select * from ##UserList UL where CUAD.UserId = UL.UserId and CUAD.AddressId = UL.AddressID )
						Order by RowNumber
					end
					else
					begin
						SELECT UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,IsActive,IsLock,
						Isnull(FirstName,'') +  ' ' + ISnull(LastName,'')  FullName,
						AccountName,PermissionsName,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId , ExternalId,
						BudgetAmount,AccountUserOrderApprovalId,ApprovalName,ApprovalUserId,PermissionCode ,CustomerPaymentGUID,StoreName,PortalId,
						CountryName, CityName, StateName, PostalCode, CompanyName, SalesRepUserName, SalesRepFullName, AccountCode
						from ##CustomerUserAddDetail
						Order by RowNumber
					end
	
					if OBJECT_ID('tempdb..##CustomerUserAddDetail') is not null
					drop table ##CustomerUserAddDetail

					if OBJECT_ID('tempdb..##View_CustomerUserAddDetail') is not null
					drop table ##View_CustomerUserAddDetail
				
				END;
            ELSE
				BEGIN
					SELECT * FROM View_CustomerUserDetail AS VICUD WHERE 1 = 0;
					SET @RowCount = 0;
				END;
            END;			
         END TRY
         BEGIN CATCH
            DECLARE @ERROR_PROCEDURE VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_AdminUsers @RoleName = '+@RoleName+' ,@UserName='+@UserName+',@WhereClause='+cast(@WhereClause as varchar(max))+' ,@Rows= '+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_By='+@Order_By+',@RowCount='+CAST(@RowCount AS VARCHAR(50));
            EXEC Znode_InsertProcedureErrorLog
            @ProcedureName    = 'Znode_AdminUsers',
            @ErrorInProcedure = @ERROR_PROCEDURE,
            @ErrorMessage     = @ErrorMessage,
            @ErrorLine        = @ErrorLine,
            @ErrorCall        = @ErrorCall;
         END CATCH;


     END;

GO
update ZnodeApplicationSetting set Setting = '<?xml version="1.0" encoding="utf-16"?><columns><column><id>1</id><name>UserId</name><headertext>Checkbox</headertext><width>40</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>y</ischeckbox><checkboxparamfield>UserId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>2</id><name>UserName</name><headertext>Username</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>y</isallowlink><islinkactionurl>/Customer/CustomerEdit</islinkactionurl><islinkparamfield>UserId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>AccountId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>3</id><name>FullName</name><headertext>Full Name</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>y</isallowlink><islinkactionurl>/Customer/CustomerEdit</islinkactionurl><islinkparamfield>UserId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>AccountId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>4</id><name>Email</name><headertext>Email ID</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield>AccountId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>AccountId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Email Id</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>5</id><name>PhoneNumber</name><headertext>Phone Number</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield>AccountId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>AccountId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Phone Number</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>6</id><name>AccountCode</name><headertext>Account Code</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Account Code</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>7</id><name>Accountname</name><headertext>Account Name</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield>AccountId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>AccountId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Account Name</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>8</id><name>RoleName</name><headertext>Role Name</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>AccountId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>9</id><name>StoreName</name><headertext>Store Name</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>AccountId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>10</id><name>DepartmentName</name><headertext>Department Name</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>AccountId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>11</id><name>LastName</name><headertext>Last Name</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>y</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>y</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield>AccountId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>AccountId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Last Name</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>12</id><name>IsLock</name><headertext>Is Lock</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>y</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>y</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield>AccountId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>AccountId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Is Disable</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>13</id><name>CreatedDate</name><headertext>Created Date </headertext><width>60</width><datatype>Date</datatype><columntype>DateTime</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>14</id><name>CompanyName</name><headertext>Company Name</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>AccountId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>15</id><name>CityName</name><headertext>City</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>AccountId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>16</id><name>StateName</name><headertext>State</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>AccountId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>17</id><name>PostalCode</name><headertext>Postal Code</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>AccountId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>18</id><name>CountryName</name><headertext>Country</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>AccountId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>19</id><name>Manage</name><headertext>Action</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format>Manage|Disable|Delete</format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>y</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>y</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield>AccountId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>AccountId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Manage|Disable|Delete</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl>/Customer/CustomerEdit|/User/CustomerEnableDisableAccount|/User/CustomerDelete</manageactionurl><manageparamfield>UserId|UserId,IsLock|UserId</manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class>grid-action</Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column></columns>'
where itemname = 'ZnodeCustomerAccount'

update ZnodeApplicationSetting set Setting = '<?xml version="1.0" encoding="utf-16"?><columns><column><id>1</id><name>AccountId</name><headertext>Checkbox</headertext><width>0</width><datatype>String</datatype><columntype>Int32</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>y</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>4</id><name>AccountCode</name><headertext>Account Code</headertext><width>0</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>2</id><name>AccountId</name><headertext>Account ID</headertext><width>0</width><datatype>String</datatype><columntype>Int32</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>3</id><name>ExternalId</name><headertext>External ID</headertext><width>0</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>5</id><name>Name</name><headertext>Account Name</headertext><width>0</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>y</isallowlink><islinkactionurl>/Account/EditAccount</islinkactionurl><islinkparamfield>accountId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>6</id><name>ParentAccountName</name><headertext>Parent Account Name</headertext><width>0</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>7</id><name>CatalogName</name><headertext>Catalog Name</headertext><width>0</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>8</id><name>StoreName</name><headertext>Store Name</headertext><width>0</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>9</id><name>Manage</name><headertext>Action</headertext><width>0</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format>Manage|Delete</format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Manage|Delete</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl>/Account/EditAccount|/Account/Delete</manageactionurl><manageparamfield>accountId|accountId</manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column></columns>'
where itemname = 'ZnodeAccount'

update ZnodeApplicationSetting set Setting = '<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>GiftCardId</name>      <headertext>Checkbox</headertext>      <width>0</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>StoreName</name>      <headertext>Store Name</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>CardNumber</name>      <headertext>Voucher Number</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>Name</name>      <headertext>Voucher Name</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>y</isallowlink>      <islinkactionurl>/GiftCard/Edit</islinkactionurl>      <islinkparamfield>giftCardId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>CreatedDate</name>      <headertext>Created Date</headertext>      <width>0</width>      <datatype>Date</datatype>      <columntype>DateTime</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>StartDate</name>      <headertext>Start Date</headertext>      <width>0</width>      <datatype>Date</datatype>      <columntype>DateTime</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>ExpirationDate</name>      <headertext>Expiration Date</headertext>      <width>0</width>      <datatype>Date</datatype>      <columntype>DateTime</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>8</id>      <name>Amount</name>      <headertext>Voucher Amount</headertext>      <width>0</width>      <datatype>Double</datatype>      <columntype>Double</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>9</id>      <name>RemainingAmount</name>      <headertext>Remaining Amount</headertext>      <width>0</width>      <datatype>Double</datatype>      <columntype>Double</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>10</id>      <name>CustomerName</name>      <headertext>Customer Name</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>11</id>      <name>AccountCode</name>      <headertext>Account Code</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>12</id>      <name>AccountName</name>      <headertext>Account Name</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>13</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>Edit|Disable|Delete</format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Edit|Activate|Delete</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/GiftCard/Edit|/GiftCard/ActiveDeactiveVouchers|/GiftCard/Delete</manageactionurl>      <manageparamfield>giftCardId|giftCardId,IsActive|giftCardId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>'
where itemname = 'ZnodeGiftCard'

update ZnodeApplicationSetting set Setting = '<?xml version="1.0" encoding="utf-16"?><columns><column><id>1</id><name>OmsQuoteId</name><headertext>Checkbox</headertext><width>0</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>y</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>2</id><name>OmsQuoteId</name><headertext>Pending Order ID</headertext><width>0</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>y</isallowlink><islinkactionurl>/Account/UpdateAccountQuote</islinkactionurl><islinkparamfield>omsQuoteId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>3</id><name>UserName</name><headertext>Customer Name</headertext><width>0</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>4</id><name>AccountCode</name><headertext>Account Code</headertext><width>0</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>5</id><name>AccountName</name><headertext>Account Name</headertext><width>0</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>6</id><name>StoreName</name><headertext>Store Name</headertext><width>0</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>7</id><name>OrderStatus</name><headertext>Pending Order Status</headertext><width>0</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>8</id><name>QuoteOrderTotal</name><headertext>Pending Order Amount</headertext><width>0</width><datatype>Decimal</datatype><columntype>Decimal</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>9</id><name>CreatedDate</name><headertext>Created Date</headertext><width>0</width><datatype>Date</datatype><columntype>DateTime</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>10</id><name>CreatedByName</name><headertext>Created By</headertext><width>0</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>11</id><name>ModifiedByName</name><headertext>Modified By</headertext><width>0</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>12</id><name>PublishState</name><headertext>Publish Status</headertext><width>30</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>13</id><name>Manage</name><headertext>Action</headertext><width>0</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format>View|orders</format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>View|Convert to Order</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl>/Account/UpdateAccountQuote|/Quote/ConvertToOrder</manageactionurl><manageparamfield>omsQuoteId,orderStatus|omsQuoteId</manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>14</id><name>AccountId</name><headertext>Account Id</headertext><width>0</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>y</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>15</id><name>IsConvertedToOrder</name><headertext></headertext><width>0</width><datatype>Boolean</datatype><columntype>Boolean</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>y</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Is Converted To Order</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class>IsConvertedToOrder</Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column></columns>'
where itemname = 'ZnodeOmsQuote'

update ZnodeApplicationSetting set Setting = '<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>PriceListAccountId</name>      <headertext>Checkbox</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>AccountName</name>      <headertext>Account Name</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>AccountCode</name>      <headertext>Account Code</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>ExternalId</name>      <headertext>External ID</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>ParentAccountName</name>      <headertext>Parent Account Name</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>Delete</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Delete</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/Price/DeleteAssociatedAccount</manageactionurl>      <manageparamfield>PriceListAccountId,priceListId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>'
where itemname = 'AccountPriceList'

update ZnodeApplicationSetting set Setting = '<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>AccountId</name>      <headertext>Checkbox</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>AccountId</name>      <headertext>Account ID</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>AccountCode</name>      <headertext>Account Code</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>accountcodecolumn</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>Name</name>      <headertext>Account Name</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>y</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>accountnamecolumn</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>ParentAccountName</name>      <headertext>Parent Account Name</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>PortalId</name>      <headertext>Portal ID</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>portalId</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>'
where itemname = 'ZnodeUserAccountList'
go
insert into ZnodeEmailTemplateAreas(Name,Code,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 'OrderPlacedNotification','OrderPlacedNotification',2,getdate(),2,getdate()
where not exists(select * from ZnodeEmailTemplateAreas where name = 'OrderPlacedNotification' )

insert into ZnodeEmailTemplate(TemplateName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 'OrderPlacedNotification',2,getdate(),2,getdate()
where not exists(select * from ZnodeEmailTemplate where TemplateName = 'OrderPlacedNotification' )

insert into ZnodeEmailTemplateLocale(EmailTemplateId,Subject,Descriptions,Content,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select (select top 1 EmailTemplateId from ZnodeEmailTemplate where TemplateName = 'OrderPlacedNotification' ),
'Order Placed Notification','Order Placed Notification','<!DOCTYPE html><html><body><div style="font-family: Arial, Helvetica; text-align: left; color: black; border: solid 1px black;">  <div style="background-color: #005286; font-size: 1.5em; font-weight: bold; padding-top: .5em; padding-bottom: .5em; padding-left: 1em; border-bottom: solid 1px #edffff; color: white;">#StoreLogo# New Contact Request</div>  <p style="padding: 0 1rem; margin: 10px 0px 0px; font-size: 14px; line-height: 1.714; letter-spacing: -0.005em; color: #172b4d; font-family: -apple-system, BlinkMacSystemFont, ''Segoe UI'', Roboto, Oxygen, Ubuntu, ''Fira Sans'', ''Droid Sans'', ''Helvetica Neue'', sans-serif; white-space: pre-wrap;">Team,</p>  <p style="padding: 0 1rem; margin: 10px 0px 0px; font-size: 14px; line-height: 1.714; letter-spacing: -0.005em; color: #172b4d; font-family: -apple-system, BlinkMacSystemFont, ''Segoe UI'', Roboto, Oxygen, Ubuntu, ''Fira Sans'', ''Droid Sans'', ''Helvetica Neue'', sans-serif; white-space: pre-wrap;">You have a new contact request. Please take a look at the submission received:-</p>  <p style="padding: 0 1rem; margin: 10px 0px 0px; font-size: 14px; line-height: 1.714; letter-spacing: -0.005em; color: #172b4d; font-family: -apple-system, BlinkMacSystemFont, ''Segoe UI'', Roboto, Oxygen, Ubuntu, ''Fira Sans'', ''Droid Sans'', ''Helvetica Neue'', sans-serif; white-space: pre-wrap;"><span style="color: #333333; font-family: ''Helvetica Neue'', Helvetica, Arial, sans-serif; letter-spacing: normal; white-space: normal;">DyanamicHtml</span></p>  <p style="padding: 0 1rem; margin: 10px 0px 0px; font-size: 14px; line-height: 1.714; letter-spacing: -0.005em; color: #172b4d; font-family: -apple-system, BlinkMacSystemFont, ''Segoe UI'', Roboto, Oxygen, Ubuntu, ''Fira Sans'', ''Droid Sans'', ''Helvetica Neue'', sans-serif; white-space: pre-wrap;">Thank you,<br />Admin</p>  </div></body></html>',
1,2,getdate(),2,getdate()
where not exists(select * from ZnodeEmailTemplateLocale where EmailTemplateId = (select top 1 EmailTemplateId from ZnodeEmailTemplate where TemplateName = 'OrderPlacedNotification' )
and LocaleId = 1 ) 

insert into ZnodeEmailTemplateMapper(EmailTemplateId,PortalId,EmailTemplateAreasId,IsActive,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,IsEnableBcc)
select (select top 1 EmailTemplateId from ZnodeEmailTemplate where TemplateName = 'OrderPlacedNotification' ), PortalId,
 (select top 1 EmailTemplateAreasId from ZnodeEmailTemplateAreas where Name = 'OrderPlacedNotification'),1,2,getdate(),2,getdate(),0
from ZnodePortal zp
where not exists(select * from ZnodeEmailTemplateMapper ZETM where ZETM.EmailTemplateId = (select top 1 EmailTemplateId from ZnodeEmailTemplate where TemplateName = 'OrderPlacedNotification' )
and ZETM.PortalId = zp.PortalId and EmailTemplateAreasId = (select top 1 EmailTemplateAreasId from ZnodeEmailTemplateAreas where Name = 'OrderPlacedNotification'))


--add ServiceRequestMessage
insert into ZnodeEmailTemplateAreas(Name,Code,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 'ServiceRequestMessage','ServiceRequestMessage',2,getdate(),2,getdate()
where not exists(select * from ZnodeEmailTemplateAreas where name = 'ServiceRequestMessage' )

insert into ZnodeEmailTemplate(TemplateName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 'ServiceRequestMessage',2,getdate(),2,getdate()
where not exists(select * from ZnodeEmailTemplate where TemplateName = 'ServiceRequestMessage' )

insert into ZnodeEmailTemplateLocale(EmailTemplateId,Subject,Descriptions,Content,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select (select top 1 EmailTemplateId from ZnodeEmailTemplate where TemplateName = 'ServiceRequestMessage' ),
'Service Request Message','Service Request Message','<!DOCTYPE html><html><body><div style="font-family: Arial, Helvetica; text-align: left; color: black; border: solid 1px black;">  <div style="background-color: #005286; font-size: 1.5em; font-weight: bold; padding-top: .5em; padding-bottom: .5em; padding-left: 1em; border-bottom: solid 1px #edffff; color: white;">#StoreLogo# New Contact Request</div>  <p style="padding: 0 1rem; margin: 10px 0px 0px; font-size: 14px; line-height: 1.714; letter-spacing: -0.005em; color: #172b4d; font-family: -apple-system, BlinkMacSystemFont, ''Segoe UI'', Roboto, Oxygen, Ubuntu, ''Fira Sans'', ''Droid Sans'', ''Helvetica Neue'', sans-serif; white-space: pre-wrap;">Team,</p>  <p style="padding: 0 1rem; margin: 10px 0px 0px; font-size: 14px; line-height: 1.714; letter-spacing: -0.005em; color: #172b4d; font-family: -apple-system, BlinkMacSystemFont, ''Segoe UI'', Roboto, Oxygen, Ubuntu, ''Fira Sans'', ''Droid Sans'', ''Helvetica Neue'', sans-serif; white-space: pre-wrap;">You have a new contact request. Please take a look at the submission received:-</p>  <p style="padding: 0 1rem; margin: 10px 0px 0px; font-size: 14px; line-height: 1.714; letter-spacing: -0.005em; color: #172b4d; font-family: -apple-system, BlinkMacSystemFont, ''Segoe UI'', Roboto, Oxygen, Ubuntu, ''Fira Sans'', ''Droid Sans'', ''Helvetica Neue'', sans-serif; white-space: pre-wrap;"><span style="color: #333333; font-family: ''Helvetica Neue'', Helvetica, Arial, sans-serif; letter-spacing: normal; white-space: normal;">DyanamicHtml</span></p>  <p style="padding: 0 1rem; margin: 10px 0px 0px; font-size: 14px; line-height: 1.714; letter-spacing: -0.005em; color: #172b4d; font-family: -apple-system, BlinkMacSystemFont, ''Segoe UI'', Roboto, Oxygen, Ubuntu, ''Fira Sans'', ''Droid Sans'', ''Helvetica Neue'', sans-serif; white-space: pre-wrap;">Thank you,<br />Admin</p>  </div></body></html>',
1,2,getdate(),2,getdate()
where not exists(select * from ZnodeEmailTemplateLocale where EmailTemplateId = (select top 1 EmailTemplateId from ZnodeEmailTemplate where TemplateName = 'ServiceRequestMessage' )
and LocaleId = 1 ) 

insert into ZnodeEmailTemplateMapper(EmailTemplateId,PortalId,EmailTemplateAreasId,IsActive,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,IsEnableBcc)
select (select top 1 EmailTemplateId from ZnodeEmailTemplate where TemplateName = 'ServiceRequestMessage' ), PortalId,
 (select top 1 EmailTemplateAreasId from ZnodeEmailTemplateAreas where Name = 'ServiceRequestMessage'),1,2,getdate(),2,getdate(),0
from ZnodePortal zp
where not exists(select * from ZnodeEmailTemplateMapper ZETM where ZETM.EmailTemplateId = (select top 1 EmailTemplateId from ZnodeEmailTemplate where TemplateName = 'ServiceRequestMessage' )
and ZETM.PortalId = zp.PortalId and EmailTemplateAreasId = (select top 1 EmailTemplateAreasId from ZnodeEmailTemplateAreas where Name = 'ServiceRequestMessage'))
go
update ZnodeApplicationSetting set Setting='<?xml version="1.0" encoding="utf-16"?><columns><column><id>1</id><name>AccountId</name><headertext>Checkbox</headertext><width>0</width><datatype>String</datatype><columntype>Int32</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>y</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>2</id><name>AccountId</name><headertext>Account ID</headertext><width>0</width><datatype>String</datatype><columntype>Int32</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format>Edit</format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl>/Account/EditSubAccount</islinkactionurl><islinkparamfield>accountId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class>edit-account</Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>3</id><name>ExternalId</name><headertext>External ID</headertext><width>0</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>4</id><name>AccountCode</name><headertext>Account Code</headertext><width>0</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>5</id><name>Name</name><headertext>Account Name</headertext><width>0</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>6</id><name>AccountAddress</name><headertext>Address</headertext><width>0</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>7</id><name>Manage</name><headertext>Action</headertext><width>0</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format>Edit|Delete</format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Edit|Delete</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl>/Account/EditSubAccount|/Account/Delete</manageactionurl><manageparamfield>accountId|accountId</manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column></columns>'
where itemname='View_GetAccountListWithAddress'

update ZnodeApplicationSetting set Setting='<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>UserId</name>      <headertext>Checkbox</headertext>      <width>40</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>UserId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>UserName</name>      <headertext>Username</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>y</isallowlink>      <islinkactionurl>/Customer/CustomerEdit</islinkactionurl>      <islinkparamfield>UserId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>FullName</name>      <headertext>Full Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>y</isallowlink>      <islinkactionurl>/Customer/CustomerEdit</islinkactionurl>      <islinkparamfield>UserId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>Email</name>      <headertext>Email ID</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>AccountId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Email Id</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>PhoneNumber</name>      <headertext>Phone Number</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>AccountId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Phone Number</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>AccountCode</name>      <headertext>Account Code</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Account Code</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>Accountname</name>      <headertext>Account Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>AccountId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Account Name</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>8</id>      <name>RoleName</name>      <headertext>Role Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>9</id>      <name>StoreName</name>      <headertext>Store Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>10</id>      <name>DepartmentName</name>      <headertext>Department Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>11</id>      <name>LastName</name>      <headertext>Last Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>y</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>AccountId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Last Name</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>12</id>      <name>IsLock</name>      <headertext>Is Lock</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>y</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>AccountId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Is Disable</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>13</id>      <name>CreatedDate</name>      <headertext>Created Date </headertext>      <width>60</width>      <datatype>Date</datatype>      <columntype>DateTime</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>14</id>      <name>CompanyName</name>      <headertext>Company Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>15</id>      <name>CityName</name>      <headertext>City</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>16</id>      <name>StateName</name>      <headertext>State</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>17</id>      <name>PostalCode</name>      <headertext>Postal Code</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>18</id>      <name>CountryName</name>      <headertext>Country</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>19</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>Manage|Disable|Delete</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>y</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>AccountId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Manage|Disable|Delete</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/Customer/CustomerEdit|/User/CustomerEnableDisableAccount|/User/CustomerDelete</manageactionurl>      <manageparamfield>UserId|UserId,IsLock|UserId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>grid-action</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>'
where itemname='ZnodeCustomerAccount'
go
IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_GetQuoteOrderTemplateDetail')
	DROP PROC Znode_GetQuoteOrderTemplateDetail
GO
CREATE PROCEDURE [dbo].[Znode_GetQuoteOrderTemplateDetail]
(   @WhereClause NVARCHAR(MAX),
	@Rows        INT           = 100,
	@PageNo      INT           = 1,
	@Order_BY    VARCHAR(100)  = '',
	@UserId		 INT,										 
	@RowsCount   INT OUT)
AS 
    /*
		 Summary :- this procedure is used to find QuoteOrderTemplate details 
	     SELECT * FROM ZnodeUser  WHERE AspNeTUSerId = 'ae464cfc-95d3-40de-bf71-47993fabb41f'
		 SELECT * FROM AspNetUserRoles WHERE RoleID = 'A529A670-F446-45EC-BBCB-C00D64D7C964' Userid = '50fe1032-e810-4606-b522-ebf1559e81cf'
		 SELECT * FROM AspNetRoles WHERE ID = '8622E90D-7652-41E7-8563-5DED4CC671DE'

		 Unit Testing 
		 EXEC Znode_GetQuoteOrderTemplateDetail '',@RowsCount = 0, @Order_BY = '', @UserId = 85
	*/
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
			 DECLARE @SQL NVARCHAR(MAX);
			 DECLARE @TBL_QuoteOrderTemplate TABLE (OmsTemplateId INT,PortalId INT,UserId INT,TemplateName NVARCHAR(1000),CreatedBy INT,CreatedDate DATETIME
			  ,ModifiedBy INT,ModifiedDate DATETIME,Items INT,RowId INT,CountNo INT )
			 DECLARE @AccountId VARCHAR(2000) ,@UsersId VARCHAR(2000), @ProcessType  varchar(50)='Template'
			 -- SELECT * FROM aspnetRoles
			
			--SET @UsersId = SUBSTRING (( SELECT ','+CAST(userId AS VARCHAr(50))  FROM Fn_GetRecurciveUserId(@UserId,@ProcessType) FOR XML PATH ('')),2,4000)
			
			SELECT distinct ZPAVL.AttributeValue as SKU, ZPADV.AttributeDefaultValueCode  
			INTO #SKU_ProductType
			FROM ZnodePimAttributeValue ZPAV
			Inner Join ZnodePimAttributeValueLocale ZPAVL ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId
			Inner Join ZnodePimAttribute ZPA ON ZPAV.PimAttributeId = ZPA.PimAttributeId
			Inner Join ZnodePimAttributeValue ZPAV1 ON ZPAV.PimProductId = ZPAV1.PimProductId
			Inner Join ZnodePimProductAttributeDefaultValue ZPPADV ON ZPAV1.PimAttributeValueId = ZPPADV.PimAttributeValueId
			Inner Join ZnodePimAttribute ZPA1 ON ZPAV1.PimAttributeId = ZPA1.PimAttributeId
			Inner Join ZnodePimAttributeDefaultValue ZPADV ON ZPPADV.PimAttributeDefaultValueId = ZPADV.PimAttributeDefaultValueId
			WHERE ZPA.AttributeCode = 'SKU' AND ZPA1.AttributeCode = 'ProductType'
			AND EXISTS (select * from ZnodeOmsTemplate ZOT
                         INNER JOIN ZnodeOmsTemplateLineItem ZOTL ON(ZOTL.OmsTemplateId = ZOT.OmsTemplateId)
						 where ZOT.userid = @UserId AND ZPAVL.AttributeValue = ZOTL.SKU )

			 SET @SQL = '
						; WITH CTE_GetOrderTemplate
						  AS (
						       SELECT ZOT.OmsTemplateId,ZOT.PortalId,ZOT.UserId,ZOT.TemplateName,ZOT.CreatedBy,ZOT.CreatedDate,ZOT.ModifiedBy,ZOT.ModifiedDate,
							          SUM(case when AttributeDefaultValueCode in ( ''GroupedProduct'') AND ParentOmsTemplateLineItemId IS nULL 
									           then 0
											   when ZOOLIRT.Name  = ''Group'' And AttributeDefaultValueCode in ( ''SimpleProduct'') 
											   then ZOTL.Quantity
											   when SP.AttributeDefaultValueCode in ( ''BundleProduct'',''ConfigurableProduct'',''SimpleProduct'') AND ParentOmsTemplateLineItemId IS nULL
											   then ZOTL.Quantity 
											   else 0
										end ) Items 
							   FROM ZnodeOmsTemplate ZOT
                               LEFT JOIN ZnodeOmsTemplateLineItem ZOTL ON(ZOTL.OmsTemplateId = ZOT.OmsTemplateId)
							   Left Join #SKU_ProductType SP ON  ZOTL.SKU = SP.SKU
							   left join ZnodeOmsOrderLineItemRelationshipType ZOOLIRT ON ZOTL.OrderLineItemRelationshipTypeId = ZOOLIRT.OrderLineItemRelationshipTypeId
							   WHERE ZOT.userid = '+cast(@UserId as varchar(10))+' 
							   --AND OrderLineItemRelationshipTypeId IS  NULL AND  ParentOmsTemplateLineItemId IS nULL
							   GROUP BY ZOT.OmsTemplateId,ZOT.PortalId,ZOT.UserId,ZOT.TemplateName,ZOT.CreatedBy,ZOT.CreatedDate,ZOT.ModifiedBy,ZOT.ModifiedDate						  
						  
						     )
						, CTE_GetQuoteOrderDetails AS
						(
						  SELECT DISTINCT  OmsTemplateId,PortalId,UserId,TemplateName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,Items
						  ,'+dbo.Fn_GetPagingRowId(@Order_BY,'OmsTemplateId DESC,UserId')+',Count(*)Over() CountNo
						  FROM CTE_GetOrderTemplate
						   WHERE 1=1 
				          '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'					  
						
						)

						SELECT OmsTemplateId,PortalId,UserId,TemplateName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,Items,RowId,CountNo
						FROM CTE_GetQuoteOrderDetails
						'+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)

						Print @sql
						INSERT INTO @TBL_QuoteOrderTemplate (OmsTemplateId,PortalId,UserId,TemplateName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,Items,RowId,CountNo)
						EXEC(@SQL)

						SET @RowsCount = ISNULL((SELECT TOP 1 CountNo FROM @TBL_QuoteOrderTemplate),0)
   
						SELECT OmsTemplateId,PortalId,UserId,TemplateName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,Items
						FROM @TBL_QuoteOrderTemplate 


	     END TRY
		 BEGIN CATCH
		 
		     DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetQuoteOrderTemplateDetail @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@UserId= '+CAST(@UserId AS VARCHAR(50))+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetQuoteOrderTemplateDetail',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
		 END CATCH

   END
GO
UPDATE ZnodeApplicationSetting SET Setting='<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>OmsTemplateId</name>      <headertext>Checkbox</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>TemplateName</name>      <headertext>Template Name</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>y</isallowlink>      <islinkactionurl>/User/EditTemplate</islinkactionurl>      <islinkparamfield>omsTemplateId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>Items</name>      <headertext>Items</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>CreatedDate</name>      <headertext>Created Date</headertext>      <width>30</width>      <datatype>Date</datatype>      <columntype>DateTime</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>ModifiedDate</name>      <headertext>Modified Date</headertext>      <width>30</width>      <datatype>Date</datatype>      <columntype>DateTime</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>Edit|Delete|Orders</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Edit|Delete|Orders</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/User/EditTemplate|/User/DeleteTemplate|/User/AddTemplateToCart</manageactionurl>      <manageparamfield>omsTemplateId|omsTemplateId|omsTemplateId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>' WHERE ItemName='ZnodeOmsTemplate'
go
IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'ZnodeReport_DashboardTopSearches')
	DROP PROC ZnodeReport_DashboardTopSearches
GO
CREATE PROCEDURE [dbo].[ZnodeReport_DashboardTopSearches]
(      
@PortalId       VARCHAR(MAX)  = '',
@BeginDate      DATE          = NULL,
@EndDate        DATE          = NULL
)
AS
/*
     Summary:- This procedure is used to get the order details
    Unit Testing:
     EXEC [ZnodeReport_DashboardTopSearches] @PortalId='1'
*/
     BEGIN
BEGIN TRY
       SET NOCOUNT ON;
 
  ----old query
--  SELECT TOP 5  Data1 Searches , Count(*) Times  FROM ZnodeActivityLog where ActivityLogTypeId = 9500
--AND ((EXISTS
--   (
--   SELECT TOP 1 1
--   FROM dbo.split(@PortalId, ',') SP
--   WHERE CAST(PortalId AS VARCHAR(100)) = SP.Item
-- OR @PortalId = ''
--   ))
--  )
--AND (CAST(ActivityCreateDate AS DATE) BETWEEN CASE
-- WHEN @BeginDate IS NULL
-- THEN CAST(ActivityCreateDate AS DATE)
-- ELSE @BeginDate
-- END AND CASE
-- WHEN @EndDate IS NULL
-- THEN CAST(ActivityCreateDate AS DATE)
-- ELSE @EndDate
-- END)
--Group by Data1 Order by Count(*)  desc


----new query without date filter
select TOP 5 ZSA.SearchKeyword Searches, COUNT(1) AS  Times
from ZnodeSearchActivity ZSA
WHERE ZSA.ResultCount > 0
AND  ((EXISTS
  (
  SELECT TOP 1 1
  FROM dbo.split(@PortalId, ',') SP
  WHERE CAST(ZSA.PortalId AS VARCHAR(100)) = SP.Item
OR @PortalId = ''
  ))
 )
--AND (CAST(ZSA.CreatedDate AS DATE) BETWEEN CASE
-- WHEN @BeginDate IS NULL
-- THEN CAST(ZSA.CreatedDate AS DATE)
-- ELSE @BeginDate
-- END AND CASE
-- WHEN ZSA.CreatedDate IS NULL
-- THEN CAST(ZSA.CreatedDate AS DATE)
-- ELSE @EndDate
-- END)
Group by ZSA.SearchKeyword Order by COUNT(1)  desc


END TRY

BEGIN CATCH
DECLARE @Status BIT ;
    SET @Status = 0;
    DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
@ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeReport_DashboardTopSearches @PortalId = '+@PortalId+',@BeginDate='+CAST(@BeginDate AS VARCHAR(200))+',@EndDate='+CAST(@EndDate AS VARCHAR(200))+',@Status='+CAST(@Status AS VARCHAR(10));
             
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    

             EXEC Znode_InsertProcedureErrorLog
@ProcedureName = 'ZnodeReport_DashboardTopSearches',
@ErrorInProcedure = @Error_procedure,
@ErrorMessage = @ErrorMessage,
@ErrorLine = @ErrorLine,
@ErrorCall = @ErrorCall;
END CATCH
     END;
GO
IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_GetPublishSingleProductJson')
	DROP PROC Znode_GetPublishSingleProductJson
GO
CREATE PROCEDURE [dbo].[Znode_GetPublishSingleProductJson]
(
	 @PublishCatalogId INT = 0 
	,@VersionId       VARCHAR(50) = 0 
	,@PimProductId    TransferId Readonly 
	,@UserId		  INT = 0 
	,@TokenId nvarchar(max)= ''	
	,@LocaleIds TransferId READONLY
	,@PublishStateId INT = 0  
	,@RevisionType varchar(50)
	,@Status bit = 0 OutPut
	
)
AS


--Declare @PimProductId TransferId 
--insert into @PimProductId  select 2
-- EXEC Znode_GetPublishSingleProductJson  @PublishCatalogId = 0 ,@VersionId= 0 ,@PimProductId =@PimProductId, @UserId=2 ,@RevisionType ='Production'


BEGIN 
BEGIN TRY 
 SET NOCOUNT ON 

EXEC Znode_InsertUpdatePimAttributeJson 1 
EXEC Znode_InsertUpdateCustomeFieldJson 1
EXEC Znode_InsertUpdateAttributeDefaultValueJson 1 

Select ZPLPD.PimParentProductId, ZPLPD.PimProductId, ZPLPD.PimAttributeId, ZPAVL.AttributeValue as SKU
into #LinkProduct
FROM ZnodePimLinkProductDetail ZPLPD 
INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId = ZPLPD.PimProductId)
INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId
WHERE exists(select * from ZnodePimAttribute ZPA where ZPA.PimAttributeId = ZPAV.PimAttributeId and ZPA.AttributeCode = 'SKU')
and exists(select * from @PimProductId pp where ZPLPD.PimParentProductId = pp.Id)

 IF OBJECT_ID('tempdb..#Cte_BrandData') is not null
 BEGIN 
	DROP TABLE #Cte_BrandData
 END 
 

 IF OBJECT_ID('tempdb..#ProductIds') is not null
 BEGIN 
	DROP TABLE #ProductIds
 END 

			Create Table #ProductIds (PimProductId int, PublishProductId  int )
			
			--DECLARE @PimProductAttributeJson TABLE(PimAttributeJsonId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )
			CREATE TABLE #PimProductAttributeJson (PimAttributeJsonId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )
			DECLARE @PimDefaultValueLocale  TABLE (PimAttributeDefaultJsonId INT  PRIMARY KEY ,PimAttributeDefaultValueId INT ,LocaleId INT ) 
			DECLARE @ProductNamePimAttributeId INT = dbo.Fn_GetProductNameAttributeId(),@DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId(),@LocaleId INT = 0 
			,@SkuPimAttributeId  INT =  dbo.Fn_GetProductSKUAttributeId() , @IsActivePimAttributeId INT =  dbo.Fn_GetProductIsActiveAttributeId()
			DECLARE @GetDate DATETIME =dbo.Fn_GetDate()
			DECLARE @TBL_LocaleId  TABLE (RowId INT IDENTITY(1,1) PRIMARY KEY  , LocaleId INT )

			DECLARE @DomainUrl varchar(max) = (select TOp 1 URL FROM ZnodeMediaConfiguration WHERE IsActive =1)
 
			INSERT INTO @TBL_LocaleId (LocaleId)
			SELECT  LocaleId
			FROM ZnodeLocale MT
			WHERE IsActive = 1
			AND (EXISTS (SELECT TOP 1 1  FROM @LocaleIds RT WHERE RT.Id = MT.LocaleId )
			OR NOT EXISTS (SELECT TOP 1 1 FROM @LocaleIds )) 

			-----to update link products newly addded and deleted from PIM
			delete ZPAP
			from ZnodePublishAssociatedProduct ZPAP
			where ZPAP.IsLink = 1
			AND not exists(select * from ZnodePimLinkProductDetail ZPPD where ZPAP.ParentPimProductId = ZPPD.PimParentProductId AND ZPAP.PimProductId = ZPPD.PimProductId)
			and exists(select * from @PimProductId PP where PP.Id = ZPAP.ParentPimProductId )

			insert into ZnodePublishAssociatedProduct(PimCatalogId,ParentPimProductId,PimProductId,PublishStateId,IsConfigurable,IsBundle,IsGroup,IsAddOn,IsLink,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			select distinct ZPCH.PimCatalogId, ZPLPD.PimParentProductId, ZPLPD.PimProductId, @PublishStateId, 0, 0, 0, 0, 1, ZPLPD.DisplayOrder, @UserId,@GetDate ,@UserId , @GetDate
			from ZnodePimLinkProductDetail ZPLPD
			INNER JOIN ZnodePimCategoryProduct ZPCP ON ZPLPD.PimParentProductId = ZPCP.PimProductId
			INNER JOIN ZnodePimCategoryHierarchy ZPCH ON ZPCP.PimCategoryId = ZPCH.PimCategoryId
			and exists(select * from @PimProductId PP where PP.Id = ZPLPD.PimParentProductId )
			and not exists(select * from ZnodePublishAssociatedProduct ZPACP where ZPCH.PimCatalogId = ZPACP.PimCatalogId and ZPLPD.PimParentProductId = ZPACP.ParentPimProductId AND ZPLPD.PimProductId = ZPACP.PimProductId  )
			-------

			DECLARE @Counter INT =1 ,@maxCountId INT = (SELECT max(RowId) FROM @TBL_LocaleId ) 

			CREATE TABLE #TBL_PublishCatalogId (PublishCatalogId INT,PublishProductId INT,PimProductId  INT   , VersionId INT ,LocaleId INT, PriceListId INT , PortalId INT ,MaxSmallWidth NVARCHAr(max)  )
			CREATE INDEX idx_#TBL_PublishCatalogIdPimProductId on #TBL_PublishCatalogId(PimProductId)
			CREATE INDEX idx_#TBL_PublishCatalogIdPimPublishCatalogId on #TBL_PublishCatalogId(PublishCatalogId)

			INSERT INTO #TBL_PublishCatalogId 
			SELECT Distinct ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId, 0,0 ,
			(SELECT TOP 1 PriceListId FROM ZnodePriceListPortal NT 
			INNER JOIN ZnodePimCatalog ZPC on ZPC.PortalId=NT.PortalId  
			ORDER BY NT.Precedence ASC ) ,TY.PortalId,
			(SELECT TOP 1  MAX(MaxSmallWidth) FROM ZnodePortalDisplaySetting TYR WHERE TYR.PortalId = TY.PortalId)
			FROM ZnodePublishProduct ZPP 
			--INNER JOIN ZnodePublishVersionEntity ZPCP ON (ZPCP.ZnodeCatalogId  = ZPP.PublishCatalogId)
			LEFT JOIN ZnodePortalCatalog TY ON (TY.PublishCatalogId = ZPP.PublishCatalogId)
			WHERE (EXISTS (SELECT TOP 1 1 FROM @PimProductId SP WHERE SP.Id = ZPP.PimProductId  
			AND  (@PublishCatalogId IS NULL OR @PublishCatalogId = 0 ))
			OR  (ZPP.PublishCatalogId = @PublishCatalogId ))
			And Exists 
			(Select TOP 1 1 from ZnodePublishVersionEntity ZPCP  where ZPCP.ZnodeCatalogId  = ZPP.PublishCatalogId AND ZPCP.IsPublishSuccess =1 )

			Insert into #ProductIds (PimProductId,PublishProductId) Select distinct PimProductId,PublishProductId from #TBL_PublishCatalogId  

             Create TABLE #TBL_ZnodeTempPublish (PimProductId INT , AttributeCode VARCHAR(300) ,AttributeValue NVARCHAR(max) ) 			
			 DECLARE @TBL_AttributeVAlueLocale TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT,LocaleId INT ,AttributeValue Nvarchar(1000) )


			 INSERT INTO @TBL_AttributeValueLocale (PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId ,LocaleId ,AttributeValue )
			 SELECT VIR.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId,VIR.LocaleId, ''
			 FROM View_LoadManageProductInternal VIR
			 INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = VIR.PimProductId)
			 UNION ALL 
			 SELECT VIR.PimProductId,PimAttributeId,PimProductAttributeMediaId,ZPDE.LocaleId , ''
			 FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimProductAttributeMedia ZPDE ON (ZPDE.PimAttributeValueId = VIR.PimAttributeValueId )
			 WHERE EXISTS (SELECT TOP 1 1 FROM #ProductIds ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
			 Union All 
			 SELECT VIR.PimProductId,VIR.PimAttributeId,ZPDVL.PimAttributeDefaultValueLocaleId,ZPDVL.LocaleId ,ZPDVL.AttributeDefaultValue
			   FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1 )
			 INNER JOIN ZnodePimAttributeDefaultValue ZPADV ON ZPADV.PimAttributeId = D.PimAttributeId
			 INNER JOIN ZnodePimAttributeDefaultValueLocale ZPDVL   on (ZPADV.PimAttributeDefaultValueId = ZPDVL.PimAttributeDefaultValueId)
			 --INNER JOIN ZnodePimProductAttributeDefaultValue ZPDVP ON (ZPDVP.PimAttributeValueId = VIR.PimAttributeValueId AND ZPADV.PimAttributeDefaultValueId = ZPDVP.PimAttributeDefaultValueId )
			 WHERE ( ZPDVL.LocaleId = @DefaultLocaleId OR ZPDVL.LocaleId = @LocaleId )
			 AND EXISTS(SELECT TOP 1 1 FROM #ProductIds ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
			 Union All 
			 SELECT VIR.PimProductId,VIR.PimAttributeId,'','' ,''
			 FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1 )
			 WHERE  EXISTS(SELECT TOP 1 1 FROM #ProductIds ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
			
				--insert INTO #ZnodePrice
				SELECT RetailPrice,SalesPrice,ZC.CurrencyCode,ZCC.CultureCode ,ZCC.Symbol CurrencySuffix,TYU.PublishProductId ,isnull(ZPC1.IsAllowIndexing,0) as IsAllowIndexing
				into #ZnodePrice
				FROM ZnodePrice ZP 
				INNER JOIN ZnodePriceList ZPL ON (ZPL.PriceListId = ZP.PriceListId)
				INNER JOIN ZnodeCurrency ZC oN (ZC.CurrencyId = ZPL.CurrencyId )
				INNER JOIN ZnodeCulture ZCC ON (ZCC.CultureId = ZPL.CultureId)
				INNER JOIN ZnodePublishProductDetail TY ON (TY.SKU = ZP.SKU ) 
				INNER JOIN ZnodePublishProduct TYU ON (TYU.PublishProductId = TY.PublishProductId)
				INNER JOIN ZnodePublishCatalog ZPC ON (TYU.PublishCatalogId = ZPC.PublishCatalogId)
				INNER JOIN ZnodePimCatalog ZPC1 ON (ZPC.PimCatalogId = ZPC1.PimCatalogId)
				WHERE EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId TYUR WHERE TYUR.PriceListId = ZPL.PriceListId AND TYUR.PublishCatalogId = TYU.PublishCatalogId
				AND TYU.PublishProductId = TYUR.PublishProductId)
				AND TY.LocaleId = dbo.Fn_GetDefaultLocaleId()
				AND EXISTS (SELECT TOP 1 1 FROM ZnodePriceListPortal ZPLP 
				INNER JOIN ZnodePimCatalog ZPC on ZPC.PortalId=ZPLP.PortalId WHERE ZPLP.PriceListId=ZP.PriceListId )
				
				--insert INTO #ProductSKU
				SELECT ZCSD.SEOUrl , ZCDL.SEODescription,ZCDL.SEOKeywords ,ZCDL.SEOTitle, TYU.PublishProductId ,isnull(ZPC1.IsAllowIndexing,0) as IsAllowIndexing
				INTO #ProductSKU
				FROM ZnodeCMSSEODetail ZCSD 
				INNER JOIN ZnodeCMSSEODetailLocale ZCDL ON (ZCDL.CMSSEODetailId = ZCSD.CMSSEODetailId)
				INNER JOIN ZnodePublishProductDetail TY ON (TY.SKU = ZCSD.SEOCode AND ZCDL.LocaleId = TY.LocaleId) 
				INNER JOIN ZnodePublishProduct TYU ON (TYU.PublishProductId = TY.PublishProductId)
				INNER JOIN ZnodePublishCatalog ZPC ON (TYU.PublishCatalogId = ZPC.PublishCatalogId)
				INNER JOIN ZnodePimCatalog ZPC1 ON (ZPC.PimCatalogId = ZPC1.PimCatalogId)
				WHERE CMSSEOTypeId = (SELECT TOP 1 CMSSEOTypeId FROM ZnodeCMSSEOType WHERE Name = 'Product') 
				AND EXISTS (SELECT TOP 1 1  FROM #TBL_PublishCatalogId TYUR WHERE  TYUR.PublishCatalogId = TYU.PublishCatalogId
				AND TYU.PublishProductId = TYUR.PublishProductId)
				AND ZCDL.LocaleId = dbo.Fn_GetDefaultLocaleId()
				and ZCSD.PortalId = isnull(ZPC1.PortalId,0)

				
				--insert INTO #ProductImages
				SELECT  TUI.PublishCatalogId, TYU.PublishProductId , @DomainUrl +'Catalog/'  + CAST(Max(ZPC1.PortalId) AS VARCHAr(100)) + '/'+ CAST(Isnull(Max(TUI.MaxSmallWidth),'') AS VARCHAR(100)) + '/' + Isnull(RT.MediaPath,'') AS ImageSmallPath    
				,isnull(ZPC1.IsAllowIndexing,0) as IsAllowIndexing
				INTO #ProductImages
				FROM ZnodePimAttributeValue ZPAV 
				INNER JOIN ZnodePublishProduct TYU ON (TYU.PimProductId  = ZPAV.PimProductId)
				INNER JOIN ZnodePimProductAttributeMedia  RT ON ( RT.PimAttributeValueId = ZPAV.PimAttributeValueId )
				--AND 
				--EXISTS (SELECT TOP 1 1  FROM #TBL_PublishCatalogId TUI WHERE  TUI.PublishProductId = TYU.PublishProductId AND TUI.PublishCatalogId = TYU.PublishCatalogId)
				INNER JOIN #TBL_PublishCatalogId TUI ON (TUI.PublishProductId = TYU.PublishProductId AND TUI.PublishCatalogId = TYU.PublishCatalogId
						 )--AND  TUI.LocaleId = dbo.Fn_GetDefaultLocaleId()
				INNER JOIN ZnodePublishCatalog ZPC ON (TYU.PublishCatalogId = ZPC.PublishCatalogId)
				INNER JOIN ZnodePimCatalog ZPC1 ON (ZPC.PimCatalogId = ZPC1.PimCatalogId)
				WHERE  RT.LocaleId = dbo.Fn_GetDefaultLocaleId()
				AND ZPAV.PimAttributeId = (SELECT TOp 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'ProductImage')
				group by TUI.PublishCatalogId, TYU.PublishProductId ,isnull(RT.MediaPath,''),isnull(ZPC1.IsAllowIndexing,0) 
		  -- end
		    
WHILE @Counter <= @maxCountId
BEGIN
 SET @LocaleId = (SELECT TOP 1 LocaleId FROM @TBL_LocaleId WHERE RowId = @Counter)
 

  INSERT INTO #PimProductAttributeJson 
  SELECT PimAttributeJsonId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeJSON
  WHERE LocaleId = @LocaleId

  INSERT INTO #PimProductAttributeJson 
  SELECT PimAttributeJsonId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeJSON ZPAX
  WHERE ZPAX.LocaleId = @DefaultLocaleId  
  AND NOT EXISTS (SELECT TOP 1 1 FROM #PimProductAttributeJson ZPAXI WHERE ZPAXI.PimAttributeId = ZPAX.PimAttributeId )

  INSERT INTO @PimDefaultValueLocale
  SELECT PimAttributeDefaultJsonId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultJson
  WHERE localeId = @LocaleId

  INSERT INTO @PimDefaultValueLocale 
   SELECT PimAttributeDefaultJsonId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultJson ZX
  WHERE localeId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM @PimDefaultValueLocale TRTR WHERE TRTR.PimAttributeDefaultValueId = ZX.PimAttributeDefaultValueId)
  
 
  --DECLARE @TBL_AttributeVAlue TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT  )
  --DECLARE @TBL_CustomeFiled TABLE (PimCustomeFieldJsonId INT ,CustomCode VARCHAR(300),PimProductId INT ,LocaleId INT )
  CREATE TABLE #TBL_CustomeFiled  (PimCustomeFieldJsonId INT ,CustomCode VARCHAR(300),PimProductId INT ,LocaleId INT )
  CREATE TABLE #TBL_AttributeVAlue (PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT  )



  INSERT INTO #TBL_CustomeFiled (PimCustomeFieldJsonId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldJsonId,RTR.PimProductId ,RTR.LocaleId,CustomCode
  FROM ZnodePimCustomeFieldJson RTR 
  INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = RTR.PimProductId)
  WHERE RTR.LocaleId = @LocaleId
 

  INSERT INTO #TBL_CustomeFiled (PimCustomeFieldJsonId,PimProductId ,LocaleId,CustomCode)
  SELECT  Distinct  PimCustomeFieldJsonId,ITR.PimProductId ,ITR.LocaleId,CustomCode
  FROM ZnodePimCustomeFieldJson ITR
  INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = ITR.PimProductId)
  WHERE ITR.LocaleId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM #TBL_CustomeFiled TBL  WHERE ITR.CustomCode = TBL.CustomCode AND ITR.PimProductId = TBL.PimProductId)
  

    INSERT INTO #TBL_AttributeVAlue (PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId )
    SELECT Distinct  PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId
	FROM @TBL_AttributeVAlueLocale
    WHERE LocaleId = @LocaleId

    
	INSERT INTO #TBL_AttributeVAlue(PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId )
	SELECT VI.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId
	FROM @TBL_AttributeVAlueLocale VI 
    WHERE VI.LocaleId = @DefaultLocaleId 
	AND NOT EXISTS (SELECT TOP 1 1 FROM #TBL_AttributeVAlue  CTE WHERE CTE.PimProductId = VI.PimProductId AND CTE.PimAttributeId = VI.PimAttributeId )
 
	------------Facet Merging Patch --------------
	IF OBJECT_ID('tempdb..#PimChildProductFacets') is not null
	BEGIN 
		DROP TABLE #PimChildProductFacets
	END 

	IF OBJECT_ID('tempdb..#PimAttributeDefaultXML') is not null
	BEGIN 
		DROP TABLE #PimAttributeDefaultXML
	END
	----Getting parent facets data
	Select  ZPPADV.PimAttributeDefaultValueId, ZPAV_Parent.PimAttributeValueId, ZPPADV.LocaleId
	Into #PimChildProductFacets
	from ZnodePimAttributeValue ZPAV_Parent
	inner join ZnodePimProductAttributeDefaultValue ZPPADV ON ZPAV_Parent.PimAttributeValueId = ZPPADV.PimAttributeValueId 
	where exists(select * from #ProductIds ZPPC where ZPAV_Parent.PimProductId = ZPPC.PimProductId )

	----Getting child facets for merging	
	insert into #PimChildProductFacets	  
	Select distinct ZPPADV.PimAttributeDefaultValueId, ZPAV_Parent.PimAttributeValueId, ZPPADV.LocaleId
	from ZnodePimAttributeValue ZPAV_Parent
	inner join ZnodePimProductTypeAssociation ZPPTA ON ZPAV_Parent.PimProductId = ZPPTA.PimParentProductId
	inner join ZnodePimAttributeValue ZPAV_Child ON ZPPTA.PimProductId = ZPAV_Child.PimProductId AND ZPAV_Parent.PimAttributeId = ZPAV_Child.PimAttributeId
	inner join ZnodePimProductAttributeDefaultValue ZPPADV ON ZPAV_Child.PimAttributeValueId = ZPPADV.PimAttributeValueId 
	where exists(select * from ZnodePimFrontendProperties ZPFP where ZPAV_Parent.PimAttributeId = ZPFP.PimAttributeId and ZPFP.IsFacets = 1)
	and exists(select * from #ProductIds ZPPC where ZPAV_Parent.PimProductId = ZPPC.PimProductId )
	and not exists(select * from ZnodePimProductAttributeDefaultValue ZPPADV1 where ZPAV_Parent.PimAttributeValueId = ZPPADV1.PimAttributeValueId 
		            and ZPPADV1.PimAttributeDefaultValueId = ZPPADV.PimAttributeDefaultValueId )

	----Merging childs facet attribute Default value XML for parent
	select  ZPADX.DefaultValueJson, ZPPADV.PimAttributeValueId, ZPPADV.LocaleId
	into #PimAttributeDefaultXML
	from #PimChildProductFacets ZPPADV		  
	inner join ZnodePimAttributeDefaultJson ZPADX ON ( ZPPADV.PimAttributeDefaultValueId = ZPADX.PimAttributeDefaultValueId )--AND ZPPADV.LocaleId = ZPADX.LocaleId)
	INNER JOIN @PimDefaultValueLocale GH ON (GH.PimAttributeDefaultJsonId = ZPADX.PimAttributeDefaultJsonId)
	------------Facet Merging Patch --------------   

	SELECT a.PimProductId ,b.AttributeValue as AttributeValue , b.LocaleId  ,a.PimAttributeId,c.AttributeCode ,b.ZnodePimAttributeValueLocaleId
	into #View_LoadManageProductInternal
	FROM ZnodePimAttributeValue a 
	INNER JOIN  ZnodePimAttributeValueLocale b ON ( b.PimAttributeValueId = a.PimAttributeValueId )
	INNER JOIN ZnodePimAttribute c ON ( c.PimAttributeId=a.PimAttributeId )
	UNION ALL
	SELECT a.PimProductId,ZPPATAV.AttributeValue AS AttributeValue  
	,ZPPATAV.LocaleId,a.PimAttributeId,c.AttributeCode  ,ZPPATAV.PimProductAttributeTextAreaValueId
	FROM ZnodePimAttributeValue a 
	INNER JOIN ZnodePimProductAttributeTextAreaValue ZPPATAV ON (ZPPATAV.PimAttributeValueId = a.PimAttributeValueId )
	INNER JOIN ZnodePimAttribute c ON ( c.PimAttributeId=a.PimAttributeId )

	INSERT INTO #TBL_ZnodeTempPublish  
		SELECT  a.PimProductId,a.AttributeCode , 
			JSON_MODIFY (JSON_MODIFY (Json_Query( c.AttributeJSON  ) , '$.AttributeValues' ,  
			ISNULL(a.AttributeValue,'') ) ,'$.SelectValues',Json_Query('[]'))
			AS 'AttributeValue'
		FROM #View_LoadManageProductInternal a 
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = a.PimAttributeId )
		INNER JOIN #PimProductAttributeJson b ON (b.PimAttributeJsonId = c.PimAttributeJsonId )
		INNER JOIN #TBL_AttributeVAlue CTE ON (Cte.PimAttributeId = a.PimAttributeId AND Cte.ZnodePimAttributeValueLocaleId = a.ZnodePimAttributeValueLocaleId)
	UNION ALL 
			SELECT  a.PimProductId,c.AttributeCode , 
			JSON_MODIFY (JSON_MODIFY (Json_Query( c.AttributeJSON  ) , '$.AttributeValues' ,  
			ISNULL(TAVL.AttributeValue,'') ) ,'$.SelectValues',Json_Query('[]'))
			AS 'AttributeValue'
		FROM ZnodePimAttributeValue  a 
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = a.PimAttributeId )
		INNER JOIN #PimProductAttributeJson b ON (b.PimAttributeJsonId = c.PimAttributeJsonId )
		INNER JOIN ZnodePImAttribute ZPA  ON (ZPA.PimAttributeId = a.PimAttributeId)
		INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = a.PimProductId)
		Inner JOIN @TBL_AttributeVAlueLocale TAVL ON  (c.PimAttributeId = TAVL.PimAttributeId  and ZPP.PimProductId = TAVL.PimProductId )
		WHERE ZPA.IsPersonalizable = 1 
		AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodePimAttributeValueLocale q WHERE q.PimAttributeValueId = a.PimAttributeValueId) 
	UNION ALL 
		SELECT THB.PimProductId,THB.CustomCode,
		--'<Attributes><AttributeEntity>'+CustomeFiledJson +'</AttributeEntity></Attributes>' 
		JSON_MODIFY (Json_Query( CustomeFiledJson ) ,'$.SelectValues',Json_Query('[]')) 
		FROM ZnodePimCustomeFieldJson THB 
		INNER JOIN #TBL_CustomeFiled TRTE ON (TRTE.PimCustomeFieldJsonId = THB.PimCustomeFieldJsonId)
		UNION ALL 
		SELECT ZPAV.PimProductId,c.AttributeCode,
			JSON_MODIFY (JSON_MODIFY (c.AttributeJson,'$.AttributeValues',''), '$.SelectValues',
			Isnull((SELECT 
			Isnull(JSON_VALUE(DefaultValueJson, '$.Code'),'') Code 
			,Isnull(JSON_VALUE(DefaultValueJson, '$.LocaleId'),0) LocaleId
			,IsNull(JSON_VALUE(DefaultValueJson, '$.Value'),'') Value
			,IsNull(JSON_VALUE(DefaultValueJson, '$.AttributeDefaultValue'),'') AttributeDefaultValue
			,Isnull(JSON_VALUE(DefaultValueJson, '$.DisplayOrder'),0) DisplayOrder
			,Isnull(JSON_VALUE(DefaultValueJson, '$.IsEditable'),'false') IsEditable
			,Isnull(JSON_VALUE(DefaultValueJson, '$.SwatchText'),'') SwatchText
			,Isnull(JSON_VALUE(DefaultValueJson, '$.Path'),'') Path
			FROM #PimAttributeDefaultXML ZPADV
			WHERE (ZPADV.PimAttributeValueId = ZPAV.PimAttributeValueId) For JSON Auto 
			),'[]') 
		)  AttributeValue
		FROM ZnodePimAttributeValue ZPAV  With (NoLock)
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
		INNER JOIN #PimProductAttributeJson b ON (b.PimAttributeJsonId = c.PimAttributeJsonId )
		INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
		WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL 
		WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
	UNION ALL 
		SELECT DISTINCT  ZPAV.PimProductId,c.AttributeCode,
			JSON_MODIFY (JSON_MODIFY (Json_Query( c.AttributeJson  ) , '$.AttributeValues',  
			ISNULL((Select stuff( 
			(SELECT ','+ZPPG.MediaPath 
			FROM ZnodePimProductAttributeMedia ZPPG INNER JOIN  #TBL_AttributeVAlue TBLV ON 
			(	TBLV.PimProductId=  ZPAV.PimProductId AND TBLV.PimAttributeId = ZPAV.PimAttributeId )
			WHERE ZPPG.PimProductAttributeMediaId = TBLV.ZnodePimAttributeValueLocaleId
			FOR XML PATH('')), 1, 1, '')),'') ) ,'$.SelectValues',Json_Query('[]'))   
			AS 'AttributeEntity'
		FROM ZnodePimAttributeValue ZPAV 
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
		INNER JOIN #PimProductAttributeJson b ON (b.PimAttributeJsonId = c.PimAttributeJsonId )
		INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
		WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeMedia ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
	UNION ALL 
		SELECT ZPLP.PimParentProductId ,c.AttributeCode, 
			JSON_MODIFY( JSON_Modify(c.AttributeJson , '$.AttributeValues' , 
			ISNULL(SUBSTRING((SELECT ','+cast( LP.SKU as varchar(600)) 
							 FROM #LinkProduct LP
							 WHERE LP.PimParentProductId = ZPLP.PimParentProductId 
							 AND LP.PimAttributeId = ZPLP.PimAttributeId
		FOR XML PATH ('') ),2,4000),'')),'$.SelectValues',Json_Query('[]'))   
	
		FROM ZnodePimLinkProductDetail ZPLP 
		INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPLP.PimParentProductId)
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = ZPLP.PimAttributeId )
		INNER JOIN #PimProductAttributeJson b ON (b.PimAttributeJsonId = c.PimAttributeJsonId )
		GROUP BY ZPLP.PimParentProductId , ZPP.PublishProductId  ,ZPLP.PimAttributeId,c.AttributeCode,c.AttributeJson,ZPP.PublishCatalogId
	UNION ALL 
		SELECT ZPAV.PimProductId,'DefaultSkuForConfigurable' ,
			JSON_MODIFY( JSON_Modify(
			REPLACE(REPLACE (c.AttributeJson,'ProductType','DefaultSkuForConfigurable'),'Product Type','Default Sku For Configurable'),
			'$.AttributeValues' , 
			ISNULL(SUBSTRING((SELECT ','+CAST(AttributeValue AS VARCHAR(50)) 
		FROM View_LoadManageProductInternal  ad 
		INNER JOIN ZnodePimProductTypeAssociation yt ON (yt.PimProductId = ad.PimProductId)
		WHERE Ad.AttributeCode = 'SKU'
		AND yt.PimParentProductId = ZPAV.PimProductId 
		ORDER BY yt.DisplayOrder , yt.PimProductTypeAssociationId ASC FOR XML PATH ('') ),2,4000),'')),'$.SelectValues',Json_Query('[]'))   
		FROM ZnodePimAttributeValue ZPAV  
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
		INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
		WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL 
		INNER JOIN ZnodePimAttributeDefaultValue dr ON (dr.PimAttributeDefaultValueId = ZPADVL.PimAttributeDefaultValueId)
		WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId
		AND dr.AttributeDefaultValueCode= 'ConfigurableProduct' 
		)
		AND EXISTS (select * from #PimProductAttributeJson b where b.PimAttributeJsonId = c.PimAttributeJsonId)
		AND c.AttributeCode = 'ProductType' 

	UNION ALL
		SELECT DISTINCT  UOP.PimProductId,c.AttributeCode,
			JSON_MODIFY (JSON_MODIFY (c.AttributeJson,'$.AttributeValues',''), '$.SelectValues',
			Isnull((SELECT  DISTINCT 
			Isnull(JSON_VALUE(AA.DefaultValueJson, '$.Code'),'') Code 
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.LocaleId'),0) LocaleId
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.Value'),'') Value
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.AttributeDefaultValue'),'') AttributeDefaultValue
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.DisplayOrder'),0) DisplayOrder
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.IsEditable'),'false') IsEditable
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.SwatchText'),'') SwatchText
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.Path'),'') Path 
			,ISNULL(ZPA.DisplayOrder,0)  AS VariantDisplayOrder 
			,ISNULL(ZPAVL_SKU.AttributeValue,'')   AS VariantSKU 
			--,Isnull(ZM.Path,'') 
		,'' AS VariantImagePath 
		FROM ZnodePimAttributeDefaultJson AA 
		INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId )
		INNER JOIN ZnodePimAttributeValue ZPAV1 ON (ZPAV1.PimAttributeValueId= ZPADV.PimAttributeValueId )
		-- check/join for active variants 
		INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId =ZPAV1.PimProductId)
		INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON (ZPAV.PimAttributevalueid = ZPAVL.PimAttributeValueId AND ZPAVL.AttributeValue = 'True')
		INNER JOIN ZnodePimProductTypeAssociation YUP ON (YUP.PimProductId = ZPAV1.PimProductId)
		-- SKU
		INNER JOIN ZnodePimAttributeValue ZPAV_SKU ON(YUP.PimProductId = ZPAV_SKU.PimProductId)
		INNER JOIN ZnodePimAttributeValueLocale ZPAVL_SKU ON (ZPAVL_SKU.PimAttributeValueId = ZPAV_SKU.PimAttributeValueId)
		LEFT JOIN ZnodePimAttribute ZPA ON (ZPA.PimattributeId = ZPAV1.PimAttributeId)
		WHERE (YUP.PimParentProductId  = UOP.PimProductId AND ZPAV1.pimAttributeId = UOP.PimAttributeId )
		-- Active Variants
		AND ZPAV.PimAttributeId = (SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'IsActive')
		-- VariantSKU
		AND ZPAV_SKU.PimAttributeId = (SELECT PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'SKU')
		For JSON Auto 
		),'[]')) 
				
		--</AttributeEntity></Attributes>' 
		FROM ZnodePimConfigureProductAttribute UOP 
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = UOP.PimAttributeId )
		WHERE  exists(select * from #TBL_PublishCatalogId PPCP1 where UOP.PimProductId = PPCP1.PimProductId )
		AND EXISTS (select * from #PimProductAttributeJson b where b.PimAttributeJsonId = c.PimAttributeJsonId)


			-------------configurable attribute 
			---------------------------------------------------------------------
			
			If (@RevisionType like '%Preview%'  OR @RevisionType like '%Production%'  ) 
				Delete from ZnodePublishProductEntity where SKU  in (select SKU from #TBL_PublishCatalogId
				A inner join ZnodePublishProductDetail B on A.PublishProductId   =B.PublishProductId   )
				AND LocaleId = @LocaleId
				AND VersionId in (SELECT VersionId FROM ZnodePublishVersionEntity where RevisionType = 'PREVIEW')
			If (@RevisionType like '%Production%' OR @RevisionType = 'None')
				Delete from ZnodePublishProductEntity where SKU  in (select SKU from #TBL_PublishCatalogId
				A inner join ZnodePublishProductDetail B on A.PublishProductId   =B.PublishProductId   )
				AND LocaleId = @LocaleId
				AND VersionId in (SELECT VersionId FROM ZnodePublishVersionEntity where RevisionType = 'PRODUCTION')

			Insert into ZnodePublishProductEntity (
					VersionId, --1
					IndexId, --2 
					ZnodeProductId,ZnodeCatalogId, --3
					SKU,LocaleId, --4 
					Name,ZnodeCategoryIds, --5
					IsActive, -- 6 
					Attributes, -- 7 
					Brands, -- 9
					CategoryName, --9
					CatalogName,DisplayOrder, --10 
					RevisionType,AssociatedProductDisplayOrder, --11
					ProductIndex,--12
					SalesPrice,RetailPrice,CultureCode,CurrencySuffix,CurrencyCode,SeoDescription,SeoKeywords,SeoTitle,SeoUrl,ImageSmallPath,SKULower --13 
					)
 			SELECT distinct ZPVE.VersionId, --1 
			CAST(ISNULL(ZPCP.ProductIndex,1) AS VARCHAr(100)) + CAST(ISNULL(ZPC.PublishCategoryId,'')  AS VARCHAR(50))  + 
			CAST(Isnull(ZPP.PublishCatalogId ,'')  AS VARCHAR(50)) + CAST( @LocaleId AS VARCHAR(50)) IndexId, --2 
			CAST(ZPP.PublishProductId AS VARCHAR(50)) PublishProductId,CAST(ZPP.PublishCatalogId  AS VARCHAR(50)) PublishCatalogId,  --3 
			CAST(ISNULL(ZPPDFG.SKU ,'') AS NVARCHAR(2000)) SKU,CAST( Isnull(@LocaleId ,'') AS VARCHAR(50)) LocaleId, -- 4 
			CAST(isnull(ZPPDFG.ProductName,'') AS NVARCHAR(2000) )  ProductName ,CAST(ISNULL(ZPCD.PublishCategoryId,'')  AS VARCHAR(50)) PublishCategoryId  -- 5 
			,CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50)) IsActive , --6 
			'[' +
				(Select STUFF((SELECT distinct ','+ AttributeValue from #TBL_ZnodeTempPublish TY WHERE TY.PimProductId = ZPP.PimProductId   
				FOR XML Path ('')) ,1,1,'')  ) 
			+ ']' xmlvalue,  -- 7 
			'[]' Brands  --8 
			,CAST(isnull(PublishCategoryName,'') AS NVARCHAR(2000)) CategoryName  --9
			,CAST(Isnull(CatalogName,'')  AS NVARCHAR(2000)) CatalogName,CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50)) DisplayOrder  -- 10  
			,ZPVE.RevisionType RevisionType , 0 AssociatedProductDisplayOrder,-- pending  -- 11 
			Isnull(ZPCP.ProductIndex,1),  -- 12 

			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(CAST(SalesPrice  AS varchar(500)),'') else '' end SalesPrice , 
			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(CAST(RetailPrice  AS varchar(500)),'') else '' end RetailPrice , 
			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(CultureCode ,'') else '' end CultureCode , 
			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(CurrencySuffix ,'') else '' end CurrencySuffix , 
			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(CurrencyCode ,'') else '' end CurrencyCode , 
			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(SEODescription,'') else '' end SEODescriptionForIndex,
			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(SEOKeywords,'') else '' end SEOKeywords,
			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(SEOTitle,'') else '' end SEOTitle,
			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(SEOUrl ,'') else '' end SEOUrl,
			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(ImageSmallPath,'') else '' end ImageSmallPath,
			CAST(ISNULL(LOWER(ZPPDFG.SKU) ,'') AS NVARCHAR(100)) Lower_SKU -- 13
	FROM  #TBL_PublishCatalogId zpp
	INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
	INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
	INNER JOIN ZnodePublishVersionEntity ZPVE ON (ZPVE.ZnodeCatalogId  = ZPP.PublishCatalogId AND ZPVE.IsPublishSuccess =1 AND ZPVE.LocaleId = @LocaleId )
	LEFT JOIN #ZnodePrice TBZP ON (TBZP.PublishProductId = ZPP.PublishProductId)
	LEFT JOIN #ProductSKU TBPS ON (TBPS.PublishProductId = ZPP.PublishProductId)
	LEFT JOIN #ProductImages TBPI ON (TBPI.PublishProductId = ZPP.PublishProductId  )
	LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
	LEFT JOIN ZnodePublishCategory ZPC ON (ZPC.PublishCatalogId = ZPCP.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId)
	LEFT JOIN ZnodePimCategoryProduct ZPCCF ON (ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId )
	LEFT JOIN ZnodePimCategoryHierarchy ZPCH ON (ZPCH.PimCatalogId = ZPCV.PimCatalogId AND  ZPCH.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId) 
	LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ZPCP.PublishCategoryId AND ZPCD.LocaleId = @LocaleId )
	WHERE ZPPDFG.LocaleId = @LocaleId
		--AND zpp.LocaleId = @LocaleId
	AND 
		(
			(ZPVE.RevisionType =  Case when  (@RevisionType like '%Preview%'  OR @RevisionType like '%Production%' ) then 'Preview' End ) 
			OR 
			(ZPVE.RevisionType =  Case when (@RevisionType like '%Production%' OR @RevisionType = 'None') then  'Production'  end )
		)

	DELETE FROM #TBL_ZnodeTempPublish
	IF OBJECT_ID('tempdb..#PimProductAttributeJson') is not null
	 BEGIN 
		DELETE FROM #PimProductAttributeJson
	 END
	 IF OBJECT_ID('tempdb..#TBL_CustomeFiled') is not null
	 BEGIN 
	 DROP TABLE #TBL_CustomeFiled
	 END
	 IF OBJECT_ID('tempdb..#TBL_AttributeVAlue') is not null
	 BEGIN 
	 DROP TABLE #TBL_AttributeVAlue
	 END
 
	DELETE FROM @PimDefaultValueLocale
SET @Counter = @counter + 1 
END

SET @Status =1 

END TRY 
BEGIN CATCH 
	SET @Status =0  
	 SELECT 1 AS ID,@Status AS Status;   
	 DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
		@ErrorLine VARCHAR(100)= ERROR_LINE(),
		@ErrorCall NVARCHAR(MAX)= 'EXEC [Znode_GetPublishSingleProductJson] 
		@PublishCatalogId = '+CAST(@PublishCatalogId  AS VARCHAR	(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10))
				
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_GetPublishSingleProductJson',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
END CATCH
END
GO
update ZnodeApplicationSetting set setting = '<?xml version="1.0" encoding="utf-16"?><columns><column><id>1</id><name>OmsTemplateId</name><headertext>Checkbox</headertext><width>30</width><datatype>String</datatype><columntype>Int32</columntype><allowsorting>true</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>y</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>2</id><name>TemplateName</name><headertext>Template Name</headertext><width>0</width><datatype>String</datatype><columntype>Int32</columntype><allowsorting>true</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>3</id><name>Items</name><headertext>Items</headertext><width>30</width><datatype>String</datatype><columntype>Int32</columntype><allowsorting>true</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>4</id><name>CreatedDate</name><headertext>Created Date</headertext><width>30</width><datatype>Date</datatype><columntype>DateTime</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>5</id><name>ModifiedDate</name><headertext>Modified Date</headertext><width>30</width><datatype>Date</datatype><columntype>DateTime</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>6</id><name>Manage</name><headertext>Action</headertext><width>0</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format>Edit|View|Orders</format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Edit|View|Orders</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl>/User/EditTemplate|/User/ViewTemplate|/User/AddTemplateToCart</manageactionurl><manageparamfield>omsTemplateId|omsTemplateId|omsTemplateId</manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column></columns>'
where ItemName = 'ZnodeOmsTemplate'
go
IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_InsertPublishProductIds')
	DROP PROC Znode_InsertPublishProductIds
GO
CREATE PROCEDURE [dbo].[Znode_InsertPublishProductIds]
(
	 @PublishCatalogId           INT            = NULL,
     @UserId                     INT				  ,
	 @PimProductId               TransferId Readonly,
	 @IsCallAssociated           BIT           = 0,
	 @PimCategoryHierarchyId	 INT		   = 0  ,
	 @IsDebug					 INT		   = 0     
	)
AS
    
/*
  Summary :	Publish Product on the basis of publish catalog
				Retrive all Product details with attributes and insert into following tables 
				1.	ZnodePublishedXml
				2.	ZnodePublishCategoryProduct
				3.	ZnodePublishProduct
				4.	ZnodePublishProductDetail

                Product details include all the type of products link, grouped, configure and bundel products (include addon) their associated products 
				collect their attributes and values into tables variables to process for publish.  
                
				Finally genrate XML for products with their attributes and inserted into ZnodePublishedXml Znode Admin process xml from sql server to mongodb
				one by one.

     Unit Testing
    
     SELECT * FROM ZnodePimCustomField WHERE CustomCode = 'Test'
     SELECT * FROM ZnodePimCatalogCategory WHERE pimCatalogId = 3 AND PimProductId = 181
     SELECT * FROM ZnodePimCustomFieldLocale WHERE PimCustomFieldId = 1
	 SELECT * FROM ZnodePublishProduct WHERE PublishProductid = 213 = 30
     select * from znodepublishcatalog
	 SELECT * FROM view_loadmanageProduct WHERE Attributecode = 'ProductNAme' AND AttributeValue LIKE '%Apple%'
     SELECT * FROM ZnodePimCategoryProduct WHERE  PimProductId = 181
	 SELECT * FROM ZnodePimCatalogcategory WHERE pimcatalogId = 3 
     EXEC Znode_GetPublishProducts  @PublishCatalogId = 5 ,@UserId= 2 ,@NotReturnXML= NULL,@PimProductId = 117,@IsDebug= 1 
	 	DECLARE @ttr TransferId 
	INSERT INTO @ttr  
	SELECT 25719 
     EXEC Znode_InsertPublishProductIds  @PublishCatalogId = 3,@UserId= 2  ,@PimProductId = @ttr  ,@IsDebug= 1 
     EXEC Znode_GetPublishProducts  @PublishCatalogId =1,@UserId= 2 ,@RequiredXML= 1	
	 SELECT * FROM 	ZnodePimCatalogCategory  WHERE pimcatalogId = 3  
	 SELECT * FROM [dbo].[ZnodePimCategoryHierarchy]  WHERE pimcatalogId = 3 
    */ 

     BEGIN
      --  BEGIN TRAN InsertPublishProductIds;
         BEGIN TRY
			SET NOCOUNT ON;
		
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate(); 
			 DECLARE @PimCatalogId int= ISNULL((SELECT PimCatalogId FROM ZnodePublishcatalog WHERE PublishCatalogId = @PublishCatalogId), 0);  --- this variable is used to carry y pim catalog id by using published catalog id
			 DECLARE 
			  @ProductNamePimAttributeId INT = dbo.Fn_GetProductNameAttributeId(),
			  @DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId(),
			  @LocaleId INT = 0,
			  @SkuPimAttributeId  INT =  dbo.Fn_GetProductSKUAttributeId(), 
			  @IsActivePimAttributeId INT =  dbo.Fn_GetProductIsActiveAttributeId(),
			  @ProductTypeAttributeId INT = dbo.Fn_GetProductTypeAttributeId()

			 DECLARE @TBL_LocaleId  TABLE (RowId INT IDENTITY(1,1) PRIMARY KEY  , LocaleId INT )
			 INSERT INTO @TBL_LocaleId (LocaleId) SELECT LocaleId FROM ZnodeLocale WHERE IsActive = 1
			 
			 -- This variable used to carry the locale in loop 
			 -- This variable is used to carry the default locale which is globaly set
             DECLARE @Counter INT =1 ,@maxCountId INT = (SELECT max(RowId) FROM @TBL_LocaleId ) 
			 DECLARE @DeletePublishProductId VARCHAR(MAX)= '', @PimProductIds VARCHAR(MAX)= '', @PimAttributeId VARCHAR(MAX)= '';
             DECLARE @TBL_CategoryHierarchyIds TABLE (CategoryId int,ParentCategoryId int ) 
			 DECLARE @TBL_PublishCategoryIds TABLE (PublishCategoryId  int ) 
		
			 -- This table will used to hold the all currently active locale ids  
			 
			IF Object_ID ('tempdb..#ActiveProduct') is not null
				drop table #ActiveProduct

			IF Object_ID ('tempdb..#TBL_PimProductIds') is not null
				drop table #TBL_PimProductIds

			 --this table holds all active product data
			-- CREATE TABLE #ActiveProduct ( PimProductId INT ) 
			 --
			 --INSERT INTO #ActiveProduct ( PimProductId )
				 --SELECT PAV.PimProductId FROM ZnodePimAttributeValue PAV
				 --INNER JOIN ZnodePimAttributeValueLocale PAVL ON PAV.PimAttributeValueId = PAVL.PimAttributeValueId
				 --INNER JOIN ZnodePimAttribute PA  ON PAV.PimAttributeId = PA.PimAttributeId
				 --WHERE PA.AttributeCode = 'IsActive' AND PAVL.AttributeValue = 'true'

		     -- This table hold the complete xml of product with other information like category and catalog
             CREATE TABLE #TBL_PimProductIds(PimProductId INT  ,PimCategoryId INT,PimCatalogId INT,PublishCatalogId INT,IsParentProducts BIT ,DisplayOrder INT,ProductName NVARCHAR(MAX),SKU  NVARCHAR(MAX),
											 IsActive NVARCHAR(MAX),PimAttributeFamilyId INT ,ProfileId   VARCHAR(MAX),CategoryDisplayOrder INT ,ProductIndex INT,PimCategoryHierarchyId INT ,PRIMARY KEY (PimCatalogId,PimCategoryId,PimCategoryHierarchyId,PimProductId)  )

			  -- This table is used to hold the product which publish in current process 
             Create TABLE #TBL_PublishProductIds (PublishProductId  INT  ,PimProductId INT,PublishCatalogId  INT
													,PublishCategoryId VARCHAR(MAX),CategoryProfileIds VARCHAR(max),VersionId INT , PRIMARY KEY (PimProductId,PublishProductId,PublishCatalogId)); 
	 
			--Retrive category data : parent / client
			
				
			---------------
			-- this check is used when this procedure is call by internal procedure to publish only product and no need to return publish xml;    
			--Collected list of products for  publish 
       
			If @PimCategoryHierarchyId = 0 
			Begin

				INSERT INTO #TBL_PimProductIds ( PimProductId, PimCategoryId, IsParentProducts, DisplayOrder, PimCatalogId,CategoryDisplayOrder,PublishCatalogId,PimCategoryHierarchyId )
				SELECT DISTINCT ZPCC.PimProductId, ZPCC.PimCategoryId, 1 AS IsParentProducts, NULL AS DisplayOrder, ZPCH.PimCatalogId,ZPCC.DisplayOrder ,ZPC.PublishCatalogId,ISNULL(ZPCH.PimCategoryHierarchyId,0)
				FROM ZnodePimCategoryProduct AS ZPCC
				INNER JOIN ZnodePimCategoryHierarchy ZPCH ON ZPCC.PimCategoryId = ZPCH.PimCategoryId
				INNER JOIN ZnodePublishCatalog ZPC ON ZPC.PimCatalogId = ZPCH.PimCatalogId
		    	WHERE  (ZPCH.PimCatalogId = @PimCatalogId OR EXISTS( SELECT TOP 1 1 FROM @PimProductId SP WHERE SP.Id = ZPCC.PimProductId) ) AND ZPCC.PimProductId IS NOT NULL
				--AND EXISTS ( SELECT * FROM #ActiveProduct PAV WHERE ZPCC.PimProductId = PAV.PimProductId )

			END
			ELSE
			BEGIN
				
				INSERT INTO @TBL_CategoryHierarchyIds(CategoryId , ParentCategoryId )
				Select Distinct PimCategoryId , Null FROM (
				SELECT PimCategoryId,ParentPimCategoryId from DBO.[Fn_GetRecurciveCategoryIds](@PimCategoryHierarchyId,@PimCatalogId)
				Union 
				Select PimCategoryId , null  from ZnodePimCategoryHierarchy where PimCategoryHierarchyId = @PimCategoryHierarchyId 
				Union 
				Select PimCategoryId , null  from [Fn_GetRecurciveCategoryIds_new] (@PimCategoryHierarchyId,@PimCatalogId) ) Category  


				INSERT INTO  @TBL_PublishCategoryIds 
				select ZPC.PublishCategoryId from ZnodePublishCategory ZPC 
				Inner join  @TBL_CategoryHierarchyIds CT1 On 
				ZPC.PimCategoryId = CT1.CategoryId 
			
			
				INSERT INTO #TBL_PimProductIds ( PimProductId, PimCategoryId, IsParentProducts, DisplayOrder, PimCatalogId,CategoryDisplayOrder,PublishCatalogId,PimCategoryHierarchyId )
				SELECT DISTINCT ZPCC.PimProductId, ZPCC.PimCategoryId, 1 AS IsParentProducts, NULL AS DisplayOrder, ZPCH.PimCatalogId,ZPCC.DisplayOrder ,ZPC.PublishCatalogId,ISNULL(ZPCH.PimCategoryHierarchyId,0)
				FROM ZnodePimCategoryProduct AS ZPCC
				INNER JOIN ZnodePimCategoryHierarchy ZPCH ON ZPCC.PimCategoryId = ZPCH.PimCategoryId
				INNER JOIN ZnodePublishCatalog ZPC ON ZPC.PimCatalogId = ZPCH.PimCatalogId
		    	WHERE  (ZPCH.PimCatalogId = @PimCatalogId OR EXISTS( SELECT TOP 1 1 FROM @PimProductId SP WHERE SP.Id = ZPCC.PimProductId) ) AND ZPCC.PimProductId IS NOT NULL
				--AND EXISTS ( SELECT * FROM #ActiveProduct PAV WHERE ZPCC.PimProductId = PAV.PimProductId )
				AND (
						ZPCC.PimCategoryId in 
							(
								Select CategoryId from @TBL_CategoryHierarchyIds
							) 
					) 



				SELECT ZPCP.PublishCatalogId,THO.PimProductId,PimCategoryHierarchyId,ProductIndex
				INTO #TBL_PublishCategoryProduct 
				FROM ZnodePublishCategoryProduct ZPCP 
				INNER JOIN ZnodePublishProduct THO ON (THO.PublishProductId = ZPCP.PublishProductId  AND ZPCP.PublishCatalogId = THO.PublishCatalogId)
				WHERE ZPCP.PublishCatalogId = @PublishCatalogId
				AND EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductIds TYU WHERE TYU.PimProductId  =  THO.PimProductId )


				

				UPDATE  #TBL_PimProductIds 
				SET ProductIndex = CASE WHEN EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCategoryProduct TH WHERE TH.PimProductId = #TBL_PimProductIds.PimProductId 
					AND #TBL_PimProductIds.PimCategoryHierarchyId = TH.PimCategoryHierarchyId  ) THEN (SELECT TOP  1 ProductIndex FROM #TBL_PublishCategoryProduct TM WHERE TM.PimProductId = #TBL_PimProductIds.PimProductId 
					AND #TBL_PimProductIds.PimCategoryHierarchyId = TM.PimCategoryHierarchyId  )

					WHEN EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCategoryProduct TH WHERE TH.PimProductId = #TBL_PimProductIds.PimProductId 
					AND #TBL_PimProductIds.PimCategoryHierarchyId <> TH.PimCategoryHierarchyId  )  
					THEN (SELECT TOP  1 MAX(isnull(ProductIndex,0))+1  FROM #TBL_PublishCategoryProduct TM1 WHERE TM1.PimProductId = #TBL_PimProductIds.PimProductId 
					)

				  ELSE  1 END 


					
			END
						
             --Collected list of link products for  publish
			 INSERT INTO #TBL_PimProductIds( PimProductId, PimCategoryId, IsParentProducts, DisplayOrder, PimCatalogId , PublishCatalogId,PimCategoryHierarchyId)
				 SELECT ZPLPD.PimProductId, Isnull(ZPCC.PimCategoryId,0), 0 AS IsParentProducts, NULL AS DisplayOrder, CTPP.PimCatalogId,CTPP.PublishCatalogId,isnull(ZPCH.PimCategoryHierarchyId,0)
				 FROM ZnodePimLinkProductDetail AS ZPLPD
				 INNER JOIN #TBL_PimProductIds AS CTPP ON ZPLPD.PimParentProductId = CTPP.PimProductId AND  IsParentProducts = 1 
				 LEFT JOIN ZnodePimCategoryProduct AS ZPCC ON ZPCC.PimProductId = ZPLPD.PimProductId 
				 LEFT JOIN ZnodePimCategoryHierarchy ZPCH ON ZPCH.PimCatalogId = CTPP.PimCatalogId and ZPCC.PimCategoryId = ZPCH.PimCategoryId
				 WHERE NOT EXISTS ( SELECT TOP 1 1 FROM #TBL_PimProductIds AS CTPPI WHERE CTPPI.PimProductId = ZPLPD.PimProductId) 
				 GROUP BY ZPLPD.PimProductId, ZPCC.PimCategoryId,CTPP.PimCatalogId,CTPP.PublishCatalogId ,ZPCH.PimCategoryHierarchyId

				
             --Collected list of Addon products for  publish
  
		     INSERT INTO #TBL_PimProductIds( PimProductId, PimCategoryId, IsParentProducts, DisplayOrder, PimCatalogId,PublishCatalogId,PimCategoryHierarchyId)
					 SELECT ZPAPD.PimChildProductId, ISNULL(ZPCC.PimCategoryId,0) AS PublishCategoryId, 0 AS IsParentProducts, null AS DisplayOrder,CTALP.PimCatalogId,CTALP.PublishCatalogId,ISNULL(ZPCH.PimCategoryHierarchyId,0)
					 FROM ZnodePimAddOnProductDetail AS ZPAPD 
					 INNER JOIN ZnodePimAddOnProduct AS ZPAP ON ZPAP.PimAddOnProductId = ZPAPD.PimAddOnProductId
					 INNER JOIN #TBL_PimProductIds AS CTALP ON CTALP.PimProductId = ZPAP.PimProductId AND  IsParentProducts = 1
					 LEFT JOIN ZnodePimCategoryProduct AS ZPCC ON ZPCC.PimProductId = ZPAPD.PimChildProductId 
					 LEFT JOIN ZnodePimCategoryHierarchy ZPCH ON ZPCH.PimCatalogId = CTALP.PimCatalogId and ZPCH.PimCategoryId = ZPCC.PimCategoryId
					 WHERE NOT EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductIds AS CTALPI WHERE CTALPI.PimProductId = ZPAPD.PimChildProductId) 
				---	 AND EXISTS(SELECT TOP 1 1FROM ZnodePimAttributeValue AS VILMP WHERE VILMP.PimProductId = ZPAPD.PimChildProductId) 
					-- AND EXISTS ( SELECT * FROM #ActiveProduct PAV WHERE ZPAPD.PimChildProductId = PAV.PimProductId ) 
					 GROUP BY ZPAPD.PimChildProductId, ZPCC.PimCategoryId , CTALP.PimCatalogId,CTALP.PublishCatalogId,ZPCH.PimCategoryHierarchyId

					 				 	

             --Collected list of Bundle / Group / Config products for  publish
             INSERT INTO #TBL_PimProductIds(PimProductId,PimCategoryId,IsParentProducts,DisplayOrder,PimCatalogId,PublishCatalogId,PimCategoryHierarchyId)
                    SELECT ZPTA.PimProductId,ISNULL(ZPCC.PimCategoryId,0),0 AS IsParentProducts,NULL DisplayOrder,CTAAP.PimCatalogId,CTAAP.PublishCatalogId,ISNULL(ZPCH.PimCategoryHierarchyId,0)
                    FROM ZnodePimProductTypeAssociation AS ZPTA INNER JOIN #TBL_PimProductIds AS CTAAP ON CTAAP.PimProductId = ZPTA.PimParentProductId AND IsParentProducts = 1
                    LEFT JOIN ZnodePimCategoryProduct AS ZPCC ON ZPCC.PimProductId = ZPTA.PimProductId 
					LEFT JOIN ZnodePimCategoryHierarchy ZPCH ON ZPCH.PimCatalogId = CTAAP.PimCatalogId AND ZPCC.PimCategoryId = ZPCH.PimCategoryId
                    WHERE NOT EXISTS( SELECT TOP 1 1 FROM #TBL_PimProductIds AS CTAAPI WHERE CTAAPI.PimProductId = ZPTA.PimProductId)
					GROUP BY ZPTA.PimProductId,ZPCC.PimCategoryId,CTAAP.PimCatalogId,CTAAP.PublishCatalogId,ZPCH.PimCategoryHierarchyId
        				

			   UPDATE TBPP
               SET PublishCatalogId = ZPC.PublishCatalogId 
			   FROM #TBL_PimProductIds TBPP 
			   INNER JOIN ZnodePublishCatalog ZPC ON ZpC.PimCatalogId = TBPP.PimCatalogId;
        
		DECLARE @PublishProductId TRANSFERId 

		
		
		IF @PublishCatalogId IS NOT NULL AND @PublishCatalogId <> 0 
			BEGIN
			If @PimCategoryHierarchyId = 0 
			BEGIN
			  -- SELECT * FROM @TBL_PimProductIds AS TBP
				INSERT INTO @PublishProductId
				SELECT DISTINCT ZPP.PublishProductId 
				FROM ZnodePublishProduct AS ZPP 
				Left JOIN ZnodePublishCategoryProduct ZPPC ON (ZPPC.PublishProductId = ZPP.PublishProductId AND ZPPC.PublishCatalogId = ZPP.PublishCatalogId)
				--INNER JOIN ZnodePublishCategory ZPC ON (ZPC.PublishCategoryId = ZPPC.PublishCategoryId)
				WHERE NOT EXISTS
				(SELECT TOP 1 1 FROM #TBL_PimProductIds AS TBP WHERE ZPP.PimProductId = TBP.PimProductId 
				AND TBP.PublishCatalogId = ZPP.PublishCatalogId 
				AND ISNULL(TBP.PimCategoryHierarchyId,0) = ISNULL(ZPPC.PimCategoryHierarchyId,0) )
				AND ZPP.PublishCatalogId = @PublishCatalogId
				--Remove extra products from catalog

				
			END
			ELSE 
			BEGIN
				INSERT INTO @PublishProductId
				SELECT DISTINCT ZPP.PublishProductId 
				FROM ZnodePublishProduct AS ZPP 
				INNER JOIN ZnodePublishCategoryProduct ZPPC ON (ZPPC.PublishProductId = ZPP.PublishProductId AND ZPPC.PublishCatalogId = ZPP.PublishCatalogId)
				INNER JOIN ZnodePublishCategory ZPC ON (ZPC.PublishCatalogId = ZPPC.PublishCatalogId  AND   ZPC.PublishCategoryId = ZPPC.PublishCategoryId)
				WHERE NOT EXISTS
				(SELECT TOP 1 1 FROM #TBL_PimProductIds AS TBP WHERE ZPP.PimProductId = TBP.PimProductId 
				AND TBP.PublishCatalogId = ZPP.PublishCatalogId 
				AND ISNULL(TBP.PimCategoryHierarchyId,0) = ISNULL(ZPPC.PimCategoryHierarchyId,0))
				AND ZPP.PublishCatalogId = @PublishCatalogId
				AND ZPC.PimCategoryId  in 
				(
					Select CategoryId from @TBL_CategoryHierarchyIds
				)
			
			   


			END
		END
		ELSE IF @IsCallAssociated = 0 
		BEGIN 
			DECLARE @TBL_ProductIdscollect TABLE(PublishProductId INT , PimproductId INT , PublishcatalogId  INT  , ProductType NVARCHAr(max))
			If @PimCategoryHierarchyId = 0 
			Begin
				INSERT INTO @TBL_ProductIdscollect (PublishProductId,PimproductId,PublishcatalogId,ProductType)
				SELECT PublishProductId,ZPAV.PimproductId,TBPOCI.PublishcatalogId,ZPATF.AttributeDefaultValueCode
				FROM ZnodePimAttributeValue ZPAV 
				INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON (ZPADV.PimAttributeValueId = ZPAV.PimAttributeValueId )
				INNER JOIN #TBL_PimProductIds TBLIDF ON (TBLIDF.PimProductId = ZPAV.PimProductId )
				INNER JOIN ZnodePublishProduct TBPOCI ON (TBPOCI.PimProductId = TBLIDF.PimProductId AND TBPOCI.PublishCatalogId = TBLIDF.PublishCatalogId 	)
				INNER JOIN ZnodePimAttributeDefaultValue ZPATF ON (ZPATF.PimAttributeId =  @ProductTypeAttributeId 
								AND ZPADV.PimAttributeDefaultValueId = ZPATF.PimAttributeDefaultValueId )
				 WHERE  IsParentProducts = 1	
				 AND LocaleId =@DefaultLocaleId
			END 
			Else 
			Begin
				INSERT INTO @TBL_ProductIdscollect (PublishProductId,PimproductId,PublishcatalogId,ProductType)
				SELECT TBPOCI.PublishProductId,ZPAV.PimproductId,TBPOCI.PublishcatalogId,ZPATF.AttributeDefaultValueCode
				FROM ZnodePimAttributeValue ZPAV 
				INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON (ZPADV.PimAttributeValueId = ZPAV.PimAttributeValueId )
				INNER JOIN #TBL_PimProductIds TBLIDF ON (TBLIDF.PimProductId = ZPAV.PimProductId )
				INNER JOIN ZnodePublishProduct TBPOCI ON (TBPOCI.PimProductId = TBLIDF.PimProductId AND TBPOCI.PublishCatalogId = TBLIDF.PublishCatalogId 	)
				INNER JOIN ZnodePimAttributeDefaultValue ZPATF ON (ZPATF.PimAttributeId =  @ProductTypeAttributeId 
								AND ZPADV.PimAttributeDefaultValueId = ZPATF.PimAttributeDefaultValueId )
				INNER JOIN ZnodePublishCategoryProduct  ZPCP ON ZPCP.PublishCatalogId = TBPOCI.PublishCatalogId AND 
				ZPCP.PublishProductId = TBPOCI.PublishProductId
				INNER JOIN ZnodePublishCategory ZPC ON  (ZPC.PublishCatalogId = ZPCP.PublishCatalogId  AND ZPC.PublishCategoryId = ZPCP.PublishCategoryId)
				 WHERE  IsParentProducts = 1	AND LocaleId =@DefaultLocaleId
				 AND ZPC.PimCategoryId  in 
				(
					Select CategoryId from @TBL_CategoryHierarchyIds
				
				) 
			END 

			IF EXISTS (SELECT TOP 1 1 FROM @TBL_ProductIdscollect WHERE ProductType IN ('GroupedProduct','BundleProduct','ConfigurableProduct','SimpleProduct') )
		 
			BEGIN 
	
			   DECLARE @TBL_DeleteTrackProduct TABLE (PublishProductId INT,AssociatedZnodeProductId INT  ,PublishCatalogId INT,PublishCatalogLogId INT ,IsDelete BIT , PublishCategoryId int  )

			   ;With Cte_PublishProduct AS
			   (
				 SELECT TBL.PublishProductId,PimproductId,TBL.PublishcatalogId,ProductType ,MAx(PublishCatalogLogId) PublishCatalogLogId
				 FROM  @TBL_ProductIdscollect TBL 
				 INNER JOIN ZnodePublishCatalogLog TBLG ON (TBLG.PublishCatalogId = TBL.PublishcatalogId)
				 WHERE IsCatalogPublished = 1 
				 GROUP BY TBL.PublishProductId,PimproductId,TBL.PublishcatalogId,ProductType

			   )
			   , Cte_ConfigData AS 
				 (
					SELECT ZPP2.PublishProductId  AssociatedZnodeProductId,ZPP.PublishProductId,ZPXML.PimproductId,ZPP.PublishcatalogId,ProductType,CTR.PublishCatalogLogId
					FROM ZnodePublishAssociatedProduct ZPXML 
					INNER JOIN ZnodePublishProduct ZPP ON (ZPP.PimProductId = ZPXML.ParentPimProductId)
					INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId  = ZPP.PublishCatalogId AND ZPC.PimCatalogID = ZPXML.PimCatalogId )
					INNER JOIN Cte_PublishProduct CTR ON ( CTR.PublishProductId = ZPP.PublishProductId)
					INNER JOIN ZnodePublishProduct ZPP2 ON (ZPP2.PimProductId  = ZPXML.PimProductId AND ZPP2.PublishCatalogId = ZPP.PublishCatalogId )
					LEFT JOIN ZnodePublishCategoryProduct ZPPC ON (ZPPC.PublishProductId = ZPP2.PublishProductId  AND ZPPC.PublishCatalogId = ZPP.PublishCatalogId )
					WHERE  (ZPPC.PublishCategoryId in (Select PublishCategoryId from @TBL_PublishCategoryIds) OR @PimCategoryHierarchyId = 0 ) 
			
				 )

			--	 SELECT * FROM ZnodePublishCatalogLog WHERE PublishCatalogId = 8 

			INSERT INTO @TBL_DeleteTrackProduct (PublishProductId,AssociatedZnodeProductId,PublishcatalogId,PublishCatalogLogId)
			SELECT ZPP.PublishProductId,AssociatedZnodeProductId,PublishcatalogId,PublishCatalogLogId 
			FROM Cte_ConfigData ZPP	
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM  #TBL_PublishProductIds TBLP WHERE TBLP.PublishProductId = ZPP.AssociatedZnodeProductId)
		
	

			;With Cte_updateStatus AS
			(
		 
				SELECT  PublishProductId,PublishcatalogId
				FROM @TBL_DeleteTrackProduct CTR 
				WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishAssociatedProduct ZPXML 
				INNER JOIN ZnodePublishProduct ZPP ON (ZPP.PimProductId = ZPXML.ParentPimProductId)
				INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId  = ZPP.PublishCatalogId AND ZPC.PimCatalogID = ZPXML.PimCatalogId )
				INNER JOIN ZnodePublishProduct ZPP2 ON (ZPP2.PimProductId  = ZPXML.PimProductId AND ZPP2.PublishCatalogId = ZPP.PublishCatalogId )
				WHERE  CTR.PublishProductId = ZPP2.PublishProductId 
				AND CTR.PublishCatalogId = ZPP.PublishCatalogId ) 
		
			)

			UPDATE a 
			SET IsDelete = CASE WHEN TYR.PublishProductId IS NULL THEN 1 ELSE 0 END 
			FROM @TBL_DeleteTrackProduct a 
			LEFT JOIN Cte_updateStatus TYR ON (TYR.PublishProductId = a.PublishProductId AND TYR.PublishCatalogId = a.PublishCatalogId)

		
			INSERT INTO @PublishProductId 
			SELECT DISTINCT AssociatedZnodeProductId 
			FROM @TBL_DeleteTrackProduct
			WHERE IsDelete =1  
		--	AND 1=0

		END 

	
		INSERT INTO @PublishProductId
		SELECT distinct PublishProductid
		FROM ZnodePublishProduct ZPP
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId =  ZPP.PublishCatalogId )
        WHERE Not EXISTS (SELECT TOP 1 1 FROM ZnodePimCategoryProduct ZPPP inner join ZnodePimCategoryHierarchy ZPCH ON ZPPP.PimCategoryId =ZPCH.PimCategoryId
		                  WHERE (ZPCH.PimCatalogid = ZPc.PimCatalogId AND ZPPP.PimProductId = ZPP.PimProductId))  
		AND EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductIds TYR WHERE TYR.PimProductId = ZPP.PimProductId )
		AND NOT EXISTS (SELECT TOP 1 1 FROM @PublishProductId YTR WHERE YTR.Id = ZPP.PublishProductId  )
		AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishCategoryProduct TY WHERE TY.PublishProductId = ZPP.PublishProductId AND TY.PublishCatalogId = ZPP.PublishcatalogId  )
		--AND  1=0	
		END  

		EXEC dbo.Znode_DeletePublishCatalogProduct  @PublishProductIds = @PublishProductId,@PublishCatalogId = @PublishCatalogId ,
		@PimCategoryHierarchyId  =@PimCategoryHierarchyId  ,
		@PimCatalogId  = @PimCatalogId 

			   IF  @IsDebug = 1 
			   BEGIN 
			SELECT * FROM #TBL_PimProductIds
			 END 
			 -- This merge statement is used for crude oprtaion with publisgh product table
			MERGE INTO ZnodePublishProduct TARGET USING  (
				SELECT PimProductId, PublishCatalogId
				FROM #TBL_PimProductIds AS TBP
				GROUP BY PimProductId, PublishCatalogId
			 )  SOURCE
				ON --check for if already exists then just update otherwise insert the product  
				TARGET.PimProductId = SOURCE.PimProductId AND  TARGET.PublishCatalogId = SOURCE.PublishCataLogId 
				WHEN MATCHED      THEN UPDATE SET TARGET.CreatedBy = @UserId, TARGET.CreatedDate = @GetDate, TARGET.ModifiedBy = @UserId, TARGET.ModifiedDate = @GetDate	
				WHEN NOT MATCHED  THEN INSERT(PimProductId, PublishCatalogId, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate) 
									   VALUES( SOURCE.PimProductId, SOURCE.PublishCatalogId, @UserId, @GetDate, @UserId, @GetDate )
				OUTPUT INSERTED.PublishProductId, INSERTED.PimProductId, INSERTED.PublishCatalogId
				INTO #TBL_PublishProductIds(PublishProductId, PimProductId, PublishCatalogId); 
			
			-- Here used the ouput clause to catch what data inserted or updated into variable table
			
				IF Object_ID ('tempdb..#TB_CategoryProduct') is not null
					drop table #TB_CategoryProduct
	    		Create TABLE #TB_CategoryProduct(PublishProductId int , PublishCategoryId int, PublishCatalogId int , PimCategoryHierarchyId int ,
				ProductIndex int  )
				IF Isnull(@PublishCatalogId,0)  = 0   
				insert into #TB_CategoryProduct 
				(PublishProductId, PublishCategoryId, PublishCatalogId, PimCategoryHierarchyId,	ProductIndex )
					  SELECT PublishProductId,
						 ISNULL(ZPC.PublishCategoryId,0)PublishCategoryId,
						 TBP.PublishCatalogId,ZPC.PimCategoryHierarchyId,
						 CASE WHEN ISNULL(@PimCategoryHierarchyId,0) <> 0  THEN TBP.ProductIndex 
						 ELSE ROW_NUMBER()Over(Partition BY TBPP.PublishProductId Order BY ISNULL(ZPC.PublishCategoryId,0)) END  ProductIndex
						 --INTO #TB_CategoryProduct 
						 FROM #TBL_PimProductIds AS TBP 
						 LEFT JOIN ZnodePublishCategory AS ZPC ON (ISNULL(TBP.PimCategoryId, 0) = ISNULL(ZPC.PimCategoryId, -1) AND ZPC.PublishCatalogId = TBP.PublishCatalogId 
						 AND ISNULL(ZPC.PimCategoryHierarchyId, 0) = ISNULL(TBP.PimCategoryHierarchyId, -1))
						 INNER JOIN #TBL_PublishProductIds AS TBPP ON TBP.PimProductId = TBPP.PimProductId
						 AND TBP.PublishCatalogId = TBPP.PublishCatalogId
						 Where (ZPC.PimCategoryHierarchyId <> 0 )
						 GROUP BY PublishProductId, ZPC.PublishCategoryId, TBP.PublishCatalogId,ZPC.PimCategoryHierarchyId,TBP.ProductIndex
				 ELSE 						
					insert into #TB_CategoryProduct 
					(PublishProductId, PublishCategoryId, PublishCatalogId, PimCategoryHierarchyId,	ProductIndex )
						SELECT PublishProductId,
						 ISNULL(ZPC.PublishCategoryId,0)PublishCategoryId,
						 TBP.PublishCatalogId,ZPC.PimCategoryHierarchyId,CASE WHEN ISNULL(@PimCategoryHierarchyId,0) <> 0  
						 THEN TBP.ProductIndex ELSE     ROW_NUMBER()Over(Partition BY TBPP.PublishProductId 
						 Order BY ISNULL(ZPC.PublishCategoryId,0)) END  ProductIndex
						 --INTO #TB_CategoryProduct 
						 FROM #TBL_PimProductIds AS TBP 
						 LEFT JOIN ZnodePublishCategory AS ZPC ON (ISNULL(TBP.PimCategoryId, 0) = ISNULL(ZPC.PimCategoryId, -1) AND ZPC.PublishCatalogId = TBP.PublishCatalogId 
						 AND ISNULL(ZPC.PimCategoryHierarchyId, 0) = ISNULL(TBP.PimCategoryHierarchyId, -1))
						 INNER JOIN #TBL_PublishProductIds AS TBPP ON TBP.PimProductId = TBPP.PimProductId
						 AND TBP.PublishCatalogId = TBPP.PublishCatalogId
						 GROUP BY PublishProductId, ZPC.PublishCategoryId, TBP.PublishCatalogId,ZPC.PimCategoryHierarchyId,TBP.ProductIndex
	

			-- This merge staetment is used for crude opration with  ZnodePublishCategoryProduct table
			 MERGE INTO ZnodePublishCategoryProduct TARGET 
			 USING  #TB_Categoryproduct SOURCE
					ON  TARGET.PublishCatalogId = SOURCE.PublishCatalogId AND ISNULL(TARGET.PublishCategoryId, 0) = ISNULL(SOURCE.PublishCategoryId, 0) AND TARGET.PublishProductId = SOURCE.PublishProductId 
					
					WHEN MATCHED THEN UPDATE SET TARGET.PublishCategoryId = CASE WHEN SOURCE.PublishCategoryId = 0 THEN NULL ELSE SOURCE.PublishCategoryId END 
												 ,TARGET.CreatedBy = @UserId, TARGET.CreatedDate = @GetDate, TARGET.ModifiedBy = @UserId, TARGET.ModifiedDate = @GetDate,TARGET.PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId				
												 ,ProductIndex = case when Source.ProductIndex is null then 1 else  Source.ProductIndex end
					WHEN NOT MATCHED THEN INSERT(PublishProductId,PublishCategoryId,PublishCatalogId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PimCategoryHierarchyId,ProductIndex) 
										  VALUES(SOURCE.PublishProductId,CASE WHEN SOURCE.PublishCategoryId =0 THEN NULL ELSE SOURCE.PublishCategoryId  END , SOURCE.PublishCatalogId,@UserId,@GetDate,@userId,@GetDate,SOURCE.PimCategoryHierarchyId,case when Source.ProductIndex is null then 1 else  Source.ProductIndex end);
   
    
   WHILE @Counter <= @maxCountId
   BEGIN 
    SET @LocaleId = (SELECT TOP 1 LocaleId FROM @TBL_LocaleId WHERE RowId = @Counter)
   
     
	 SELECT VIR.PimProductId,PimAttributeId,AttributeValue,ZnodePimAttributeValueLocaleId,VIR.LocaleId ,COUNT(*)Over(Partition By VIR.PimProductId,PimAttributeId ORDER BY VIR.PimProductId,PimAttributeId  ) RowId
	 INTO #TBL_AttributeVAlue
	 FROM View_LoadManageProductInternal VIR
	 WHERE (LocaleId = @DefaultLocaleId OR LocaleId = @LocaleId )
	 AND EXISTS (SELECT TOP 1 1 FROM #TBL_PublishProductIds ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
	 AND (PimAttributeId = @ProductNamePimAttributeId  OR PimAttributeId = @SKUPimAttributeId OR PimAttributeId = @IsActivePimAttributeId  )
  
   

		
	          MERGE INTO ZnodePublishProductDetail   TARGET
			  USING  (SELECT   ZPP.PublishProductId ,TBLA.AttributeValue PRoductName,TBLAI.AttributeValue SKU ,ISNULL(TBLAII.AttributeValue,'0') IsActive --,TBLAIII.AttributeValue ProductType
						FROM  #TBL_PublishProductIds zpp
						INNER JOIN #TBL_AttributeVAlue TBLA ON (TBLA.PimAttributeId = @ProductNamePimAttributeId AND TBLA.PimProductId = ZPP.PimProductId AND TBLA.LocaleId  = CASE WHEN TBLA.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )
					--	INNER JOIN @TBL_AttributeVAlue  TBLA ON (TBLA.PimProductId = ZPP.PimProductId AND TBLA.PimAttributeId = @ProductNamePimAttributeId)
					    INNER JOIN #TBL_AttributeVAlue TBLAI ON (TBLAI.PimAttributeId = @SKUPimAttributeId AND TBLAI.PimProductId = ZPP.PimProductId AND TBLAI.LocaleId  = CASE WHEN TBLAI.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )
					--	INNER JOIN @TBL_AttributeVAlue  TBLAI ON (TBLAI.PimProductId = ZPP.PimProductId AND TBLAI.PimAttributeId = @SKUPimAttributeId)
					    INNER JOIN #TBL_AttributeVAlue TBLAII ON (TBLAII.PimAttributeId = @IsActivePimAttributeId AND TBLAII.PimProductId = ZPP.PimProductId AND TBLAII.LocaleId  = CASE WHEN TBLAII.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )
						--INNER JOIN #TBL_AttributeVAlue TBLAIII ON (TBLAIII.PimAttributeId = @ProductTypePimAttributeId AND TBLAIII.PimProductId = ZPP.PimProductId AND TBLAIII.LocaleId  = CASE WHEN TBLAIII.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )
					--	INNER JOIN @TBL_AttributeVAlue  TBLAIII ON (TBLAII.PimProductId = ZPP.PimProductId AND TBLAII.PimAttributeId = @ProductTypeAttributeId)
						GROUP BY ZPP.PublishProductId,TBLA.AttributeValue,TBLAI.AttributeValue,TBLAII.AttributeValue --,TBLAIII.AttributeValue
						)   SOURCE
			ON (TARGET.PublishProductId = SOURCE.PublishProductId
				 AND TARGET.LocaleId = @LocaleId 
			) 
			WHEN MATCHED THEN 
			UPDATE 
			SET TARGET.ProductName   = SOURCE.ProductName
				,TARGET.SKU			 = SOURCE.SKU
				,TARGET.IsActive	= SOURCE.IsActive
				,TARGET.ModifiedBy	 = @userid
				,TARGET.ModifiedDate  = @GetDate
			WHEN NOT MATCHED THEN 
			INSERT (PublishProductId
					,ProductName
					,SKU
					,IsActive
					,LocaleId
					,CreatedBy
					,CreatedDate
					,ModifiedBy
					,ModifiedDate)
			VALUES ( SOURCE.PublishProductId
					,SOURCE.ProductName
					,SOURCE.SKU
					,SOURCE.IsActive
					,@LocaleId
					,@userId
					,@GetDate
					,@userId
					,@GetDate);

		 
         DROP TABLE #TBL_AttributeVAlue 
		
		 SET @Counter = @counter + 1 
			  END 

		IF @PublishCatalogId IS NULL OR @PublishCatalogId =0 
		BEGIN 
			SELECT PublishProductId, PimProductId, PublishCatalogId 
			FROM #TBL_PublishProductIds
		END 
		IF (ISnull(@PimCategoryHierarchyId ,0) <> 0 ) 
		Begin
			SELECT PublishProductId, PimProductId, PublishCatalogId 
			FROM #TBL_PublishProductIds
		End 

		--COMMIT TRAN InsertPublishProductIds;
		END TRY 
		BEGIN CATCH 
		 SELECT ERROR_MESSAGE()
            UPDATE ZnodePublishCatalogLog 
			SET IsCatalogPublished = 0 
			,IscategoryPublished = 0 
			,IsProductPublished = 0 
			,PublishStateId = 1 
		    WHERE PublishCatalogLogId IN (SELECT Max(PublishCatalogLogId) FROM ZnodePublishCatalogLog WHERE PublishCatalogId = @PublishCatalogId  GROUP BY PublishStateId , PublishCatalogId )
		END CATCH 
	END


GO
IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_DeletePublishCatalogProduct')
	DROP PROC Znode_DeletePublishCatalogProduct
GO
CREATE PROCEDURE [dbo].[Znode_DeletePublishCatalogProduct]
(   
   	@PublishProductIds	Transferid READONLY 
	,@PublishCatalogId   INT = 0 
	,@PimCategoryHierarchyId int = 0 
	,@PimCatalogId int = 0 
	
)
AS
   /*
    Summary:Delete the publish product from all related references 
    Unit Testing   
	begin tran
	SELECT * FROM ZnodePublishCatalog 
    EXEC Znode_DeletePublishCatalog @PublishCatalogIds =5 ,@IsDeleteCatalogId = 1 , @PublishCategoryIds = ''
	rollback tran
   */ 
     BEGIN
         BEGIN TRANSACTION A;
         BEGIN TRY
             SET NOCOUNT ON;
	
	         DECLARE @TBL_DeleteIds TABLE (PublishCatalogId INT ,PublishCategoryId INT ,PublishProductId INT )  
			 DECLARE @TBL_DeleteCategoryProduct TABLE (PublishCategoryProductId INT )			 
			 DECLARE @TBL_CategoryCategoryHierarchyIds TABLE (CategoryId int , ParentCategoryId int )
			 
		
			If @PimCategoryHierarchyId <> 0 AND @PimCatalogId <>  0 
			Begin
				INSERT INTO @TBL_CategoryCategoryHierarchyIds(CategoryId , ParentCategoryId )
				Select Distinct PimCategoryId , Null FROM (
				SELECT PimCategoryId,ParentPimCategoryId from DBO.[Fn_GetRecurciveCategoryIds](@PimCategoryHierarchyId,@PimCatalogId)
				Union 
				Select PimCategoryId , null  from ZnodePimCategoryHierarchy where PimCategoryHierarchyId = @PimCategoryHierarchyId 
				Union 
				Select PimCategoryId , null  from [Fn_GetRecurciveCategoryIds_new] (@PimCategoryHierarchyId,@PimCatalogId) ) Category  


				INSERT INTO @TBL_DeleteIds (PublishCatalogId,PublishProductId,PublishCategoryId  )
				 SELECT ZPP.PublishCatalogId,ZPP.PublishProductId ,ZPCP.PublishCategoryId
				 FROM ZnodePublishProduct  ZPP 
				 INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId) 
				 LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND ZPCP.PublishProductId = ZPP.PublishProductId )
				 LEFT JOIN ZnodePublishCategory  ZPPC ON (ZPPC.PublishCatalogId = ZPC.PublishCatalogId AND ZPPC.PublishCategoryId = ZPCP.PublishCategoryId)
				 AND ZPPC.PimCategoryId in 
							(
								Select CategoryId from @TBL_CategoryCategoryHierarchyIds
							) 
				 WHERE EXISTS (SELECT TOP 1 1 FROM @PublishProductIds ZPCC WHERE ZPCC.Id = ZPP.PublishProductId )
				
				 --AND NOT EXISTS ( SELECT * FROM ZnodePublishedXML PX where zpp.PublishProductId = PX.PublishedId )
			 
				 INSERT INTO @TBL_DeleteCategoryProduct 
				 SELECT PublishCategoryProductId 
				 FROM ZnodePublishCategoryProduct a 
				 INNER JOIN ZnodePublishProduct ZPP ON (ZPP.PublishProductId = a.PublishProductId AND ZPP.PublishCatalogId = a.PublishCatalogId)
				 INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = a.PublishCatalogId )
				 INNER JOIN ZnodePublishCategory ZPCC ON (ZPCC.PublishCategoryId = a.PublishCategoryId)
				 WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimCategoryProduct ZPDF 
				       INNER JOIN ZnodePimCategoryHierarchy ZPCH ON ZPDF.PimCategoryId = ZPCH.PimCategoryId
					   WHERE ZPCH.PimCatalogId = ZPC.PimCatalogId AND ZPDF.PimCategoryId = ZPCC.PimCategoryId AND ZPDF.PimProductId = ZPP.PimProductId  )
				 AND ZPCC.PimCategoryId in 
							(
								Select CategoryId from @TBL_CategoryCategoryHierarchyIds
							) 


				 AND a.PublishCatalogId = @PublishCatalogId
			END 
			Else 
			Begin
				 INSERT INTO @TBL_DeleteIds (PublishCatalogId,PublishProductId,PublishCategoryId  )
				 SELECT ZPP.PublishCatalogId,ZPP.PublishProductId ,ZPCP.PublishCategoryId
				 FROM ZnodePublishProduct  ZPP 
				 INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId) 
				 LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND ZPCP.PublishProductId = ZPP.PublishProductId )
				 LEFT JOIN ZnodePublishCategory  ZPPC ON (ZPPC.PublishCatalogId = ZPC.PublishCatalogId AND ZPPC.PublishCategoryId = ZPCP.PublishCategoryId)
				 WHERE EXISTS (SELECT TOP 1 1 FROM @PublishProductIds ZPCC WHERE ZPCC.Id = ZPP.PublishProductId )

				 --AND NOT EXISTS ( SELECT * FROM ZnodePublishedXML PX where zpp.PublishProductId = PX.PublishedId )
			
				 INSERT INTO @TBL_DeleteCategoryProduct 
				 SELECT PublishCategoryProductId 
				 FROM ZnodePublishCategoryProduct a 
				 INNER JOIN ZnodePublishProduct ZPP ON (ZPP.PublishProductId = a.PublishProductId AND ZPP.PublishCatalogId = a.PublishCatalogId)
				 INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = a.PublishCatalogId )
				 INNER JOIN ZnodePublishCategory ZPCC ON (ZPCC.PublishCategoryId = a.PublishCategoryId)
				 WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimCategoryProduct ZPDF 
				       INNER JOIN ZnodePimCategoryHierarchy ZPCH ON ZPDF.PimCategoryId = ZPCH.PimCategoryId
					   WHERE ZPCH.PimCatalogId = ZPC.PimCatalogId AND ZPDF.PimCategoryId = ZPCC.PimCategoryId AND ZPDF.PimProductId = ZPP.PimProductId  )
				 --AND NOT EXISTS ( SELECT * FROM ZnodePublishedXML PX where a.PublishProductId = PX.PublishedId )
				 AND a.PublishCatalogId = @PublishCatalogId
			 END 

			--delete del from @TBL_DeleteIds del
			--where exists(select * from ZnodePimCategoryProduct ZPCC 
			--	INNER JOIN ZnodePublishProduct ZPP on ZPCC.PimProductId = ZPP.PimproductId	
			--       and ZPP.PublishProductId = del.PublishProductId)		
				
		     UPDATE 	TBL 
			 SET PublishCategoryId = NULL 
			 FROM @TBL_DeleteIds TBL 
			 WHERE  EXISTS  (SELECT TOP 1 1 FROM ZnodePublishCategoryProduct ZPCC 
			 WHERE  TBL.PublishCatalogId = ZPCC.PublishCatalogId AND ZPCC.PublishCategoryId = TBL.PublishCategoryId   AND TBL.PublishProductId <> ZPCC.PublishProductId ) 			 

             DELETE FROM ZnodeUserWishList
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE EXISTS
                 (
                     SELECT TOP 1 1
                     FROM ZnodePublishProductDetail ZPPD
                     WHERE ZPPD.SKU = ZnodeUserWishList.SKU
                           AND qw.[PublishProductId] = ZPPD.[PublishProductId]
                 )
             );
            

             DELETE FROM [ZnodePromotionProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishProductId] = [ZnodePromotionProduct].[PublishProductId]
             );
             DELETE FROM [ZnodePromotionCategory]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS w
                 WHERE w.[PublishCategoryId] = [ZnodePromotionCategory].[PublishCategoryId]
             );
             DELETE FROM [ZnodePublishCategoryDetail]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS w
                 WHERE w.[PublishCategoryId] = [ZnodePublishCategoryDetail].[PublishCategoryId]
             );	
            
       
             DELETE FROM [ZnodePublishCategoryProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishProductId] = [ZnodePublishCategoryProduct].[PublishProductId]
             )
			 OR 
			 EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteCategoryProduct AS qw
                 WHERE qw.PublishCategoryProductId = [ZnodePublishCategoryProduct].PublishCategoryProductId
             )
			 ;
             DELETE FROM [ZnodePublishCategoryProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS w
                 WHERE w.[PublishCategoryId] = [ZnodePublishCategoryProduct].[PublishCategoryId]
             );
			  DELETE FROM dbo.ZnodeSearchGlobalProductBoost WHERE 
			 EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishProductId] = ZnodeSearchGlobalProductBoost.[PublishProductId]
              );
             DELETE FROM [ZnodePublishProductDetail]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishProductId] = [ZnodePublishProductDetail].[PublishProductId]
             );
             DELETE FROM [ZNodePublishProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishProductId] = [ZNodePublishProduct].[PublishProductId]
             
			 );
		
			 DELETE FROM ZnodePublishCategoryDetail 
			 WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishCategoryId] = ZnodePublishCategoryDetail.[PublishCategoryId]
              );
			
			DELETE FROM ZnodeSearchGlobalProductCategoryBoost 
			 WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishCategoryId] = ZnodeSearchGlobalProductCategoryBoost.[PublishCategoryId]
             
			 );
			 DELETE FROM ZnodePublishCategory
			 WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishCategoryId] = ZnodePublishCategory.[PublishCategoryId]
             
			 );

			 			 				
             COMMIT TRANSACTION A;
			 
         END TRY
         BEGIN CATCH
		      SELECT ERROR_MESSAGE() 
			 
         END CATCH;
     END;
GO
update ZnodeEmailTemplateLocale set Content = '<p>&nbsp;</p> <div> <div style="font-family: Arial, Helvetica; font-size: 10px; text-align: left; color: #292a2a; border: solid 1px #c3c3c3; margin-top: 10px;"> <div style="background-color: #eff3fb; color: #292a2a; font-size: 1.5em; font-weight: bold; padding: .5em; border-bottom: solid 1px #c3c3c3;">#StoreLogo# #SiteName#&nbsp;Customer Receipt</div> <div style="padding: 10px;"> <div style="font-family: Verdana; color: #333333; font-size: 11px;">#ReceiptText#</div> <table style="font-family: Verdana, Helvetica, sans-serif; color: #333333; font-size: 10px;" border="0" width="100%" cellspacing="3" cellpadding="0"> <tbody> <tr> <td colspan="5"><hr /></td> </tr> <tr> <td colspan="2" align="left" nowrap="nowrap" width="25%"> <div style="color: #292a2a; font-weight: bold; font-size: 11px; padding-bottom: 5px;">Order Information</div> </td> <td colspan="2" align="left" nowrap="nowrap"> <div style="color: #292a2a; font-weight: bold; font-size: 11px; padding-bottom: 5px;">Customer Service</div> </td> </tr> <tr> <td align="left" nowrap="nowrap" width="10%"><strong>Order Number:</strong></td> <td align="left" nowrap="nowrap" width="30%">#OrderId#</td> <td align="left" nowrap="nowrap" width="4%"><strong>E-Mail:</strong></td> <td align="left" nowrap="nowrap">#CustomerServiceEmail#</td> </tr> <tr> <td align="left" nowrap="nowrap"><strong>Order Date:</strong></td> <td align="left" nowrap="nowrap">#OrderDate#</td> <td align="left" nowrap="nowrap"><strong>Phone:</strong></td> <td align="left" nowrap="nowrap">#CustomerServicePhoneNumber#</td> </tr> <tr> <td style="vertical-align: top;" align="left" nowrap="nowrap"><strong>Promotion Code:</strong></td> <td align="left" nowrap="nowrap">#PromotionCode#</td> <td>&nbsp;</td> <td>&nbsp;</td> </tr> <tr> <td align="left" nowrap="nowrap"><strong>Payment Method:</strong></td> <td align="left" nowrap="nowrap">#PaymentName#</td> <td>&nbsp;</td> <td>&nbsp;</td> </tr> <tr> <td align="left" nowrap="nowrap"><strong>#CardTransactionLabel#</strong></td> <td align="left" nowrap="nowrap">#CardTransactionID#</td> <td>&nbsp;</td> <td>&nbsp;</td> </tr> <tr> <td align="left" nowrap="nowrap"><strong>#PurchaseNumberLabel#</strong></td> <td align="left" nowrap="nowrap">#PONumber#</td> <td>&nbsp;</td> <td>&nbsp;</td> </tr> <tr> <td colspan="4"><hr /></td> </tr> <tr> <td style="font-family: Verdana, Helvetica, sans-serif; color: #333333; font-size: 10px;" colspan="2" align="left" nowrap="nowrap" width="45%"> <div style="color: #292a2a; font-weight: bold; font-size: 11px; padding-bottom: 5px;">Billing Address</div> </td> <td colspan="2" align="left"> <div style="color: #292a2a; font-weight: bold; font-size: 11px; padding-bottom: 5px;">Shipping Address</div> </td> </tr> <tr> <td colspan="2" align="Left" nowrap="nowrap">#BillingAddress#</td> <td colspan="3" valign="top">#ShippingAddress#</td> </tr> <tr> <td colspan="7">&nbsp;</td> </tr> </tbody> </table> <div data-info="#AddressItems#"> <table width="100%" cellspacing="0" cellpadding="3"> <tbody> <tr style="height: 13px;"> <td style="color: #292a2a; font-weight: bold; font-size: 11px; padding-bottom: 5px; height: 13px; width: 105%;" colspan="6">#ShipmentNo#</td> </tr> <tr style="height: 12px;"> <td style="color: black; font-size: 10px; height: 12px; width: 105%;" colspan="6">#ShipTo#</td> </tr> <tr style="background-color: #eff3fb; height: 18px;"> <td style="border: 1px solid silver; font-family: Verdana, Helvetica, sans-serif; color: #333333; font-size: 10px; padding: 0px 5px; height: 18px; width: 10%;"><strong>SKU</strong></td> <td style="border: 1px solid silver; font-family: Verdana, Helvetica, sans-serif; color: #333333; font-size: 10px; padding: 0px 5px; height: 18px; width: 25%;"><strong>Item</strong></td> <td style="border: 1px solid silver; font-family: Verdana, Helvetica, sans-serif; color: #333333; font-size: 10px; padding: 0px 5px; height: 18px; width: 25%;"><strong>Description</strong></td> <td style="border: 1px solid silver; font-family: Verdana, Helvetica, sans-serif; color: #333333; font-size: 10px; height: 18px; width: 5%;" align="center"><strong>Qty</strong></td> <td style="border: 1px solid silver; font-family: Verdana, Helvetica, sans-serif; color: #333333; font-size: 10px; padding: 0px 5px; height: 18px; width: 20%;"><strong>Price</strong></td> <td style="border: 1px solid silver; font-family: Verdana, Helvetica, sans-serif; color: #333333; font-size: 10px; padding: 0px 5px; height: 18px; width: 20%;"><strong>Total</strong></td> </tr> <tr style="height: 80px;" data-info="#LineItems#OmsOrderShipmentID##"> <td style="border: 1px solid silver; font-family: Verdana, Helvetica, sans-serif; color: #333333; font-size: 10px; padding: 0px 5px; height: 80px; width: 10%;" align="left">#SKU#&nbsp;</td> <td style="border: 1px solid silver; font-family: Verdana, Helvetica, sans-serif; color: #333333; font-size: 10px; padding: 0px 5px; height: 80px; width: 25%;" align="left">#Name#</td> <td style="border: 1px solid silver; font-family: Verdana, Helvetica, sans-serif; color: #333333; font-size: 10px; padding: 0px 5px; height: 80px; width: 25%;" align="left">#Description#&nbsp; <p>#ShortDescription#</p> #UOMDescription#<br /><br />#Column1#</td> <td style="border: 1px solid silver; font-family: Verdana, Helvetica, sans-serif; color: #333333; font-size: 10px; padding: 0px 5px; height: 80px; width: 5%;" align="center">#Quantity#</td> <td style="border: 1px solid silver; font-family: Verdana, Helvetica, sans-serif; color: #333333; font-size: 10px; padding: 0px 5px; height: 80px; width: 20%;" align="left">#Price#</td> <td style="border: 1px solid silver; font-family: Verdana, Helvetica, sans-serif; color: #333333; font-size: 10px; min-width: 170px; padding: 0px 5px; height: 80px; width: 20%;" align="right">#ExtendedPrice#</td> </tr> <tr style="height: 12px;" data-info="#AmountLineItems#OmsOrderShipmentID##"> <td style="border: none; font-family: Verdana, Helvetica, sans-serif; color: #333333; font-size: 10px; padding: 0px 5px; height: 12px; width: 85%;" colspan="5" align="right"><strong>#Title#</strong></td> <td style="border: 1px solid silver; font-family: Verdana, Helvetica, sans-serif; color: #333333; font-size: 10px; min-width: 170px; padding: 0px 5px; height: 12px; width: 20%;" align="right">#Amount#</td> </tr> <tr style="height: 12px;" data-info="#GrandAmountLineItems#"> <td style="border: none; font-family: Verdana, Helvetica, sans-serif; color: #333333; font-size: 10px; padding: 0px 5px; height: 12px; width: 85%;" colspan="5" align="right"><strong>#Title#</strong></td> <td style="border: 1px solid silver; font-family: Verdana, Helvetica, sans-serif; color: #333333; font-size: 10px; min-width: 170px; padding: 0px 5px; height: 12px; width: 20%;" align="right">#Amount#</td> </tr> <tr style="height: 16px;"> <td style="border: none; font-family: Verdana, Helvetica, sans-serif; color: #292a2a; font-size: 11px; padding: 0px 5px 5px; height: 16px; width: 85%;" colspan="5" align="right"><strong>Total</strong></td> <td style="border: 1px solid silver; font-family: Verdana, Helvetica, sans-serif; color: #333333; font-size: 10px; min-width: 170px; padding: 0px 5px; height: 16px; width: 20%;" align="right"><strong>#TotalCost#</strong></td> </tr> </tbody> </table> </div> <table style="width: 100%; padding: 10px; display: inline-block;" cellspacing="0" cellpadding="3"> <tbody> <tr style="height: 18px;"> <td style="border: none; font-family: Verdana, Helvetica, sans-serif; color: #333333; font-size: 10px; height: 18px;" colspan="2" align="left" nowrap="nowrap"> <div style="color: #292a2a; font-weight: bold; font-size: 11px; padding-bottom: 5px;">#AdditionalInstructLabel#</div> </td> </tr> <tr style="height: 12px;"> <td style="border: none; font-family: Verdana, Helvetica, sans-serif; color: #333333; font-size: 10px; height: 12px;" colspan="2"> <div style="width: 675px;" align="justify">#AdditionalInstructions#</div> </td> </tr> <tr style="height: 17px;"> <td style="border: none; font-family: Verdana, Helvetica, sans-serif; color: #333333; font-size: 10px; height: 17px;" colspan="2"> <div style="margin-bottom: 5px;">&nbsp;</div> </td> </tr> <tr style="height: 12px;"> <td style="border: none; font-family: Verdana, Helvetica, sans-serif; color: #333333; font-size: 10px; height: 12px;" colspan="2" align="left" nowrap="nowrap">#FeedBack#</td> </tr> </tbody> </table> </div> </div> </div> ' where EmailTemplateId = (select top 1 EmailTemplateId from ZnodeEmailTemplate where  TemplateName = 'OrderPlacedNotification') and Subject='Order Placed Notification'
go
update ZnodeApplicationSetting set setting  = '<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>OmsTemplateId</name>      <headertext>Checkbox</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>TemplateName</name>      <headertext>Template Name</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>y</isallowlink>      <islinkactionurl>User/EditTemplate</islinkactionurl>      <islinkparamfield>omsTemplateId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>omsTemplateId</controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>Items</name>      <headertext>Items</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>CreatedDate</name>      <headertext>Created Date</headertext>      <width>30</width>      <datatype>Date</datatype>      <columntype>DateTime</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>ModifiedDate</name>      <headertext>Modified Date</headertext>      <width>30</width>      <datatype>Date</datatype>      <columntype>DateTime</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>Edit|Orders|Delete</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Edit|Orders|Delete</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>User/EditTemplate|/User/AddTemplateToCart|/User/DeleteTemplate</manageactionurl>      <manageparamfield>omsTemplateId|omsTemplateId|omsTemplateId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>'
where ItemName = 'ZnodeOmsTemplate'
go
IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_GetPublishSingleProductJson')
	DROP PROC Znode_GetPublishSingleProductJson
GO
CREATE PROCEDURE [dbo].[Znode_GetPublishSingleProductJson]
(
	 @PublishCatalogId INT = 0 
	,@VersionId       VARCHAR(50) = 0 
	,@PimProductId    TransferId Readonly 
	,@UserId		  INT = 0 
	,@TokenId nvarchar(max)= ''	
	,@LocaleIds TransferId READONLY
	,@PublishStateId INT = 0  
	,@RevisionType varchar(50)
	,@Status bit = 0 OutPut
	
)
AS


--Declare @PimProductId TransferId 
--insert into @PimProductId  select 471392
-- EXEC Znode_GetPublishSingleProductJson  @PublishCatalogId = 0 ,@VersionId= 0 ,@PimProductId =@PimProductId, @UserId=2 ,@RevisionType ='Production'


BEGIN 
BEGIN TRY 
 SET NOCOUNT ON 

EXEC Znode_InsertUpdatePimAttributeJson 1 
EXEC Znode_InsertUpdateCustomeFieldJson 1
EXEC Znode_InsertUpdateAttributeDefaultValueJson 1 

Select ZPLPD.PimParentProductId, ZPLPD.PimProductId, ZPLPD.PimAttributeId, ZPAVL.AttributeValue as SKU
into #LinkProduct
FROM ZnodePimLinkProductDetail ZPLPD 
INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId = ZPLPD.PimProductId)
INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId
WHERE exists(select * from ZnodePimAttribute ZPA where ZPA.PimAttributeId = ZPAV.PimAttributeId and ZPA.AttributeCode = 'SKU')
and exists(select * from @PimProductId pp where ZPLPD.PimParentProductId = pp.Id)

 IF OBJECT_ID('tempdb..#Cte_BrandData') is not null
 BEGIN 
	DROP TABLE #Cte_BrandData
 END 
 

 IF OBJECT_ID('tempdb..#ProductIds') is not null
 BEGIN 
	DROP TABLE #ProductIds
 END 

			Create Table #ProductIds (PimProductId int, PublishProductId  int )
			
			--DECLARE @PimProductAttributeJson TABLE(PimAttributeJsonId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )
			CREATE TABLE #PimProductAttributeJson (PimAttributeJsonId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )
			DECLARE @PimDefaultValueLocale  TABLE (PimAttributeDefaultJsonId INT  PRIMARY KEY ,PimAttributeDefaultValueId INT ,LocaleId INT ) 
			DECLARE @ProductNamePimAttributeId INT = dbo.Fn_GetProductNameAttributeId(),@DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId(),@LocaleId INT = 0 
			,@SkuPimAttributeId  INT =  dbo.Fn_GetProductSKUAttributeId() , @IsActivePimAttributeId INT =  dbo.Fn_GetProductIsActiveAttributeId()
			DECLARE @GetDate DATETIME =dbo.Fn_GetDate()
			DECLARE @TBL_LocaleId  TABLE (RowId INT IDENTITY(1,1) PRIMARY KEY  , LocaleId INT )

			DECLARE @DomainUrl varchar(max) = (select TOp 1 URL FROM ZnodeMediaConfiguration WHERE IsActive =1)
 
			INSERT INTO @TBL_LocaleId (LocaleId)
			SELECT  LocaleId
			FROM ZnodeLocale MT
			WHERE IsActive = 1
			AND (EXISTS (SELECT TOP 1 1  FROM @LocaleIds RT WHERE RT.Id = MT.LocaleId )
			OR NOT EXISTS (SELECT TOP 1 1 FROM @LocaleIds )) 

			-----to update link products newly addded and deleted from PIM
			delete ZPAP
			from ZnodePublishAssociatedProduct ZPAP
			where ZPAP.IsLink = 1
			AND not exists(select * from ZnodePimLinkProductDetail ZPPD where ZPAP.ParentPimProductId = ZPPD.PimParentProductId AND ZPAP.PimProductId = ZPPD.PimProductId)
			and exists(select * from @PimProductId PP where PP.Id = ZPAP.ParentPimProductId )

			insert into ZnodePublishAssociatedProduct(PimCatalogId,ParentPimProductId,PimProductId,PublishStateId,IsConfigurable,IsBundle,IsGroup,IsAddOn,IsLink,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			select distinct ZPCH.PimCatalogId, ZPLPD.PimParentProductId, ZPLPD.PimProductId, @PublishStateId, 0, 0, 0, 0, 1, ZPLPD.DisplayOrder, @UserId,@GetDate ,@UserId , @GetDate
			from ZnodePimLinkProductDetail ZPLPD
			INNER JOIN ZnodePimCategoryProduct ZPCP ON ZPLPD.PimParentProductId = ZPCP.PimProductId
			INNER JOIN ZnodePimCategoryHierarchy ZPCH ON ZPCP.PimCategoryId = ZPCH.PimCategoryId
			and exists(select * from @PimProductId PP where PP.Id = ZPLPD.PimParentProductId )
			and not exists(select * from ZnodePublishAssociatedProduct ZPACP where ZPCH.PimCatalogId = ZPACP.PimCatalogId and ZPLPD.PimParentProductId = ZPACP.ParentPimProductId AND ZPLPD.PimProductId = ZPACP.PimProductId  )
			-------

			DECLARE @Counter INT =1 ,@maxCountId INT = (SELECT max(RowId) FROM @TBL_LocaleId ) 

			CREATE TABLE #TBL_PublishCatalogId (PublishCatalogId INT,PublishProductId INT,PimProductId  INT   , VersionId INT ,LocaleId INT, PriceListId INT , PortalId INT ,MaxSmallWidth NVARCHAr(max)  )
			CREATE INDEX idx_#TBL_PublishCatalogIdPimProductId on #TBL_PublishCatalogId(PimProductId)
			CREATE INDEX idx_#TBL_PublishCatalogIdPimPublishCatalogId on #TBL_PublishCatalogId(PublishCatalogId)

			INSERT INTO #TBL_PublishCatalogId 
			SELECT Distinct ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId, 0,0 ,
			(SELECT TOP 1 PriceListId FROM ZnodePriceListPortal NT 
			INNER JOIN ZnodePimCatalog ZPC on ZPC.PortalId=NT.PortalId  
			ORDER BY NT.Precedence ASC ) ,TY.PortalId,
			(SELECT TOP 1  MAX(MaxSmallWidth) FROM ZnodePortalDisplaySetting TYR WHERE TYR.PortalId = TY.PortalId)
			FROM ZnodePublishProduct ZPP 
			--INNER JOIN ZnodePublishVersionEntity ZPCP ON (ZPCP.ZnodeCatalogId  = ZPP.PublishCatalogId)
			LEFT JOIN ZnodePortalCatalog TY ON (TY.PublishCatalogId = ZPP.PublishCatalogId)
			WHERE (EXISTS (SELECT TOP 1 1 FROM @PimProductId SP WHERE SP.Id = ZPP.PimProductId  
			AND  (@PublishCatalogId IS NULL OR @PublishCatalogId = 0 ))
			OR  (ZPP.PublishCatalogId = @PublishCatalogId ))
			And Exists 
			(Select TOP 1 1 from ZnodePublishVersionEntity ZPCP  where ZPCP.ZnodeCatalogId  = ZPP.PublishCatalogId AND ZPCP.IsPublishSuccess =1 )

			Insert into #ProductIds (PimProductId,PublishProductId) Select distinct PimProductId,PublishProductId from #TBL_PublishCatalogId  

             Create TABLE #TBL_ZnodeTempPublish (PimProductId INT , AttributeCode VARCHAR(300) ,AttributeValue NVARCHAR(max) ) 			
			 DECLARE @TBL_AttributeVAlueLocale TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT,LocaleId INT ,AttributeValue Nvarchar(1000) )


			 INSERT INTO @TBL_AttributeValueLocale (PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId ,LocaleId ,AttributeValue )
			 SELECT VIR.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId,VIR.LocaleId, ''
			 FROM View_LoadManageProductInternal VIR
			 INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = VIR.PimProductId)
			 UNION ALL 
			 SELECT VIR.PimProductId,PimAttributeId,PimProductAttributeMediaId,ZPDE.LocaleId , ''
			 FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimProductAttributeMedia ZPDE ON (ZPDE.PimAttributeValueId = VIR.PimAttributeValueId )
			 WHERE EXISTS (SELECT TOP 1 1 FROM #ProductIds ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
			 Union All 
			 SELECT VIR.PimProductId,VIR.PimAttributeId,ZPDVL.PimAttributeDefaultValueLocaleId,ZPDVL.LocaleId ,ZPDVL.AttributeDefaultValue
			   FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1 )
			 INNER JOIN ZnodePimAttributeDefaultValue ZPADV ON ZPADV.PimAttributeId = D.PimAttributeId
			 INNER JOIN ZnodePimAttributeDefaultValueLocale ZPDVL   on (ZPADV.PimAttributeDefaultValueId = ZPDVL.PimAttributeDefaultValueId)
			 --INNER JOIN ZnodePimProductAttributeDefaultValue ZPDVP ON (ZPDVP.PimAttributeValueId = VIR.PimAttributeValueId AND ZPADV.PimAttributeDefaultValueId = ZPDVP.PimAttributeDefaultValueId )
			 WHERE ( ZPDVL.LocaleId = @DefaultLocaleId OR ZPDVL.LocaleId = @LocaleId )
			 AND EXISTS(SELECT TOP 1 1 FROM #ProductIds ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
			 Union All 
			 SELECT VIR.PimProductId,VIR.PimAttributeId,'','' ,''
			 FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1 )
			 WHERE  EXISTS(SELECT TOP 1 1 FROM #ProductIds ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
			
				--insert INTO #ZnodePrice
				SELECT RetailPrice,SalesPrice,ZC.CurrencyCode,ZCC.CultureCode ,ZCC.Symbol CurrencySuffix,TYU.PublishProductId ,isnull(ZPC1.IsAllowIndexing,0) as IsAllowIndexing
				into #ZnodePrice
				FROM ZnodePrice ZP 
				INNER JOIN ZnodePriceList ZPL ON (ZPL.PriceListId = ZP.PriceListId)
				INNER JOIN ZnodeCurrency ZC oN (ZC.CurrencyId = ZPL.CurrencyId )
				INNER JOIN ZnodeCulture ZCC ON (ZCC.CultureId = ZPL.CultureId)
				INNER JOIN ZnodePublishProductDetail TY ON (TY.SKU = ZP.SKU ) 
				INNER JOIN ZnodePublishProduct TYU ON (TYU.PublishProductId = TY.PublishProductId)
				INNER JOIN ZnodePublishCatalog ZPC ON (TYU.PublishCatalogId = ZPC.PublishCatalogId)
				INNER JOIN ZnodePimCatalog ZPC1 ON (ZPC.PimCatalogId = ZPC1.PimCatalogId)
				WHERE EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId TYUR WHERE TYUR.PriceListId = ZPL.PriceListId AND TYUR.PublishCatalogId = TYU.PublishCatalogId
				AND TYU.PublishProductId = TYUR.PublishProductId)
				AND TY.LocaleId = dbo.Fn_GetDefaultLocaleId()
				AND EXISTS (SELECT TOP 1 1 FROM ZnodePriceListPortal ZPLP 
				INNER JOIN ZnodePimCatalog ZPC on ZPC.PortalId=ZPLP.PortalId WHERE ZPLP.PriceListId=ZP.PriceListId )
				
				--insert INTO #ProductSKU
				SELECT ZCSD.SEOUrl , ZCDL.SEODescription,ZCDL.SEOKeywords ,ZCDL.SEOTitle, TYU.PublishProductId ,isnull(ZPC1.IsAllowIndexing,0) as IsAllowIndexing
				INTO #ProductSKU
				FROM ZnodeCMSSEODetail ZCSD 
				INNER JOIN ZnodeCMSSEODetailLocale ZCDL ON (ZCDL.CMSSEODetailId = ZCSD.CMSSEODetailId)
				INNER JOIN ZnodePublishProductDetail TY ON (TY.SKU = ZCSD.SEOCode AND ZCDL.LocaleId = TY.LocaleId) 
				INNER JOIN ZnodePublishProduct TYU ON (TYU.PublishProductId = TY.PublishProductId)
				INNER JOIN ZnodePublishCatalog ZPC ON (TYU.PublishCatalogId = ZPC.PublishCatalogId)
				INNER JOIN ZnodePimCatalog ZPC1 ON (ZPC.PimCatalogId = ZPC1.PimCatalogId)
				WHERE CMSSEOTypeId = (SELECT TOP 1 CMSSEOTypeId FROM ZnodeCMSSEOType WHERE Name = 'Product') 
				AND EXISTS (SELECT TOP 1 1  FROM #TBL_PublishCatalogId TYUR WHERE  TYUR.PublishCatalogId = TYU.PublishCatalogId
				AND TYU.PublishProductId = TYUR.PublishProductId)
				AND ZCDL.LocaleId = dbo.Fn_GetDefaultLocaleId()
				and ZCSD.PortalId = isnull(ZPC1.PortalId,0)

				
				--insert INTO #ProductImages
				SELECT  TUI.PublishCatalogId, TYU.PublishProductId , @DomainUrl +'Catalog/'  + CAST(Max(ZPC1.PortalId) AS VARCHAr(100)) + '/'+ CAST(Isnull(Max(TUI.MaxSmallWidth),'') AS VARCHAR(100)) + '/' + Isnull(RT.MediaPath,'') AS ImageSmallPath    
				,isnull(ZPC1.IsAllowIndexing,0) as IsAllowIndexing
				INTO #ProductImages
				FROM ZnodePimAttributeValue ZPAV 
				INNER JOIN ZnodePublishProduct TYU ON (TYU.PimProductId  = ZPAV.PimProductId)
				INNER JOIN ZnodePimProductAttributeMedia  RT ON ( RT.PimAttributeValueId = ZPAV.PimAttributeValueId )
				--AND 
				--EXISTS (SELECT TOP 1 1  FROM #TBL_PublishCatalogId TUI WHERE  TUI.PublishProductId = TYU.PublishProductId AND TUI.PublishCatalogId = TYU.PublishCatalogId)
				INNER JOIN #TBL_PublishCatalogId TUI ON (TUI.PublishProductId = TYU.PublishProductId AND TUI.PublishCatalogId = TYU.PublishCatalogId
						 )--AND  TUI.LocaleId = dbo.Fn_GetDefaultLocaleId()
				INNER JOIN ZnodePublishCatalog ZPC ON (TYU.PublishCatalogId = ZPC.PublishCatalogId)
				INNER JOIN ZnodePimCatalog ZPC1 ON (ZPC.PimCatalogId = ZPC1.PimCatalogId)
				WHERE  RT.LocaleId = dbo.Fn_GetDefaultLocaleId()
				AND ZPAV.PimAttributeId = (SELECT TOp 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'ProductImage')
				group by TUI.PublishCatalogId, TYU.PublishProductId ,isnull(RT.MediaPath,''),isnull(ZPC1.IsAllowIndexing,0) 
		  -- end
		    
WHILE @Counter <= @maxCountId
BEGIN
 SET @LocaleId = (SELECT TOP 1 LocaleId FROM @TBL_LocaleId WHERE RowId = @Counter)
 

  INSERT INTO #PimProductAttributeJson 
  SELECT PimAttributeJsonId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeJSON
  WHERE LocaleId = @LocaleId

  INSERT INTO #PimProductAttributeJson 
  SELECT PimAttributeJsonId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeJSON ZPAX
  WHERE ZPAX.LocaleId = @DefaultLocaleId  
  AND NOT EXISTS (SELECT TOP 1 1 FROM #PimProductAttributeJson ZPAXI WHERE ZPAXI.PimAttributeId = ZPAX.PimAttributeId )

  INSERT INTO @PimDefaultValueLocale
  SELECT PimAttributeDefaultJsonId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultJson
  WHERE localeId = @LocaleId

  INSERT INTO @PimDefaultValueLocale 
   SELECT PimAttributeDefaultJsonId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultJson ZX
  WHERE localeId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM @PimDefaultValueLocale TRTR WHERE TRTR.PimAttributeDefaultValueId = ZX.PimAttributeDefaultValueId)
  
 
  --DECLARE @TBL_AttributeVAlue TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT  )
  --DECLARE @TBL_CustomeFiled TABLE (PimCustomeFieldJsonId INT ,CustomCode VARCHAR(300),PimProductId INT ,LocaleId INT )
  CREATE TABLE #TBL_CustomeFiled  (PimCustomeFieldJsonId INT ,CustomCode VARCHAR(300),PimProductId INT ,LocaleId INT )
  CREATE TABLE #TBL_AttributeVAlue (PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT  )



  INSERT INTO #TBL_CustomeFiled (PimCustomeFieldJsonId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldJsonId,RTR.PimProductId ,RTR.LocaleId,CustomCode
  FROM ZnodePimCustomeFieldJson RTR 
  INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = RTR.PimProductId)
  WHERE RTR.LocaleId = @LocaleId
 

  INSERT INTO #TBL_CustomeFiled (PimCustomeFieldJsonId,PimProductId ,LocaleId,CustomCode)
  SELECT  Distinct  PimCustomeFieldJsonId,ITR.PimProductId ,ITR.LocaleId,CustomCode
  FROM ZnodePimCustomeFieldJson ITR
  INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = ITR.PimProductId)
  WHERE ITR.LocaleId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM #TBL_CustomeFiled TBL  WHERE ITR.CustomCode = TBL.CustomCode AND ITR.PimProductId = TBL.PimProductId)
  

    INSERT INTO #TBL_AttributeVAlue (PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId )
    SELECT Distinct  PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId
	FROM @TBL_AttributeVAlueLocale
    WHERE LocaleId = @LocaleId

    
	INSERT INTO #TBL_AttributeVAlue(PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId )
	SELECT VI.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId
	FROM @TBL_AttributeVAlueLocale VI 
    WHERE VI.LocaleId = @DefaultLocaleId 
	AND NOT EXISTS (SELECT TOP 1 1 FROM #TBL_AttributeVAlue  CTE WHERE CTE.PimProductId = VI.PimProductId AND CTE.PimAttributeId = VI.PimAttributeId )
 
	------------Facet Merging Patch --------------
	IF OBJECT_ID('tempdb..#PimChildProductFacets') is not null
	BEGIN 
		DROP TABLE #PimChildProductFacets
	END 

	IF OBJECT_ID('tempdb..#PimAttributeDefaultXML') is not null
	BEGIN 
		DROP TABLE #PimAttributeDefaultXML
	END
	----Getting parent facets data
	Select  ZPPADV.PimAttributeDefaultValueId, ZPAV_Parent.PimAttributeValueId, ZPPADV.LocaleId
	Into #PimChildProductFacets
	from ZnodePimAttributeValue ZPAV_Parent
	inner join ZnodePimProductAttributeDefaultValue ZPPADV ON ZPAV_Parent.PimAttributeValueId = ZPPADV.PimAttributeValueId 
	where exists(select * from #ProductIds ZPPC where ZPAV_Parent.PimProductId = ZPPC.PimProductId )

	----Getting child facets for merging	
	insert into #PimChildProductFacets	  
	Select distinct ZPPADV.PimAttributeDefaultValueId, ZPAV_Parent.PimAttributeValueId, ZPPADV.LocaleId
	from ZnodePimAttributeValue ZPAV_Parent
	inner join ZnodePimProductTypeAssociation ZPPTA ON ZPAV_Parent.PimProductId = ZPPTA.PimParentProductId
	inner join ZnodePimAttributeValue ZPAV_Child ON ZPPTA.PimProductId = ZPAV_Child.PimProductId AND ZPAV_Parent.PimAttributeId = ZPAV_Child.PimAttributeId
	inner join ZnodePimProductAttributeDefaultValue ZPPADV ON ZPAV_Child.PimAttributeValueId = ZPPADV.PimAttributeValueId 
	where exists(select * from ZnodePimFrontendProperties ZPFP where ZPAV_Parent.PimAttributeId = ZPFP.PimAttributeId and ZPFP.IsFacets = 1)
	and exists(select * from #ProductIds ZPPC where ZPAV_Parent.PimProductId = ZPPC.PimProductId )
	and not exists(select * from ZnodePimProductAttributeDefaultValue ZPPADV1 where ZPAV_Parent.PimAttributeValueId = ZPPADV1.PimAttributeValueId 
		            and ZPPADV1.PimAttributeDefaultValueId = ZPPADV.PimAttributeDefaultValueId )

	----Merging childs facet attribute Default value XML for parent
	select  ZPADX.DefaultValueJson, ZPPADV.PimAttributeValueId, ZPPADV.LocaleId
	into #PimAttributeDefaultXML
	from #PimChildProductFacets ZPPADV		  
	inner join ZnodePimAttributeDefaultJson ZPADX ON ( ZPPADV.PimAttributeDefaultValueId = ZPADX.PimAttributeDefaultValueId )--AND ZPPADV.LocaleId = ZPADX.LocaleId)
	INNER JOIN @PimDefaultValueLocale GH ON (GH.PimAttributeDefaultJsonId = ZPADX.PimAttributeDefaultJsonId)
	------------Facet Merging Patch --------------   

	 IF OBJECT_ID('tempdb..#View_LoadManageProductInternal') is not null
	 BEGIN 
		DROP TABLE #View_LoadManageProductInternal
	 END 

	SELECT a.PimProductId ,b.AttributeValue as AttributeValue , b.LocaleId  ,a.PimAttributeId,c.AttributeCode ,b.ZnodePimAttributeValueLocaleId
	into #View_LoadManageProductInternal
	FROM ZnodePimAttributeValue a 
	INNER JOIN  ZnodePimAttributeValueLocale b ON ( b.PimAttributeValueId = a.PimAttributeValueId )
	INNER JOIN ZnodePimAttribute c ON ( c.PimAttributeId=a.PimAttributeId )
	INNER JOIN ZnodePimAttributeJSON c1   ON (c1.PimAttributeId = a.PimAttributeId )
	INNER JOIN #PimProductAttributeJson b1 ON (b1.PimAttributeJsonId = c1.PimAttributeJsonId )
	INNER JOIN #TBL_AttributeVAlue CTE ON (Cte.PimAttributeId = a.PimAttributeId AND Cte.ZnodePimAttributeValueLocaleId = b.ZnodePimAttributeValueLocaleId)
	UNION ALL
	SELECT a.PimProductId,ZPPATAV.AttributeValue AS AttributeValue  
	,ZPPATAV.LocaleId,a.PimAttributeId,c.AttributeCode  ,ZPPATAV.PimProductAttributeTextAreaValueId
	FROM ZnodePimAttributeValue a 
	INNER JOIN ZnodePimProductAttributeTextAreaValue ZPPATAV ON (ZPPATAV.PimAttributeValueId = a.PimAttributeValueId )
	INNER JOIN ZnodePimAttribute c ON ( c.PimAttributeId=a.PimAttributeId )
	INNER JOIN ZnodePimAttributeJSON c1   ON (c1.PimAttributeId = a.PimAttributeId )
	INNER JOIN #PimProductAttributeJson b1 ON (b1.PimAttributeJsonId = c1.PimAttributeJsonId )
	INNER JOIN #TBL_AttributeVAlue CTE ON (Cte.PimAttributeId = a.PimAttributeId AND Cte.ZnodePimAttributeValueLocaleId = ZPPATAV.PimProductAttributeTextAreaValueId)
	
	INSERT INTO #TBL_ZnodeTempPublish  
		SELECT  a.PimProductId,a.AttributeCode , 
			JSON_MODIFY (JSON_MODIFY (Json_Query( c.AttributeJSON  ) , '$.AttributeValues' ,  
			ISNULL(a.AttributeValue,'') ) ,'$.SelectValues',Json_Query('[]'))
			AS 'AttributeValue'
		FROM #View_LoadManageProductInternal a 
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = a.PimAttributeId )
		INNER JOIN #PimProductAttributeJson b ON (b.PimAttributeJsonId = c.PimAttributeJsonId )
		INNER JOIN #TBL_AttributeVAlue CTE ON (Cte.PimAttributeId = a.PimAttributeId AND Cte.ZnodePimAttributeValueLocaleId = a.ZnodePimAttributeValueLocaleId)
	UNION ALL 
			SELECT  a.PimProductId,c.AttributeCode , 
			JSON_MODIFY (JSON_MODIFY (Json_Query( c.AttributeJSON  ) , '$.AttributeValues' ,  
			ISNULL(TAVL.AttributeValue,'') ) ,'$.SelectValues',Json_Query('[]'))
			AS 'AttributeValue'
		FROM ZnodePimAttributeValue  a 
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = a.PimAttributeId )
		INNER JOIN #PimProductAttributeJson b ON (b.PimAttributeJsonId = c.PimAttributeJsonId )
		INNER JOIN ZnodePImAttribute ZPA  ON (ZPA.PimAttributeId = a.PimAttributeId)
		INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = a.PimProductId)
		Inner JOIN @TBL_AttributeVAlueLocale TAVL ON  (c.PimAttributeId = TAVL.PimAttributeId  and ZPP.PimProductId = TAVL.PimProductId )
		WHERE ZPA.IsPersonalizable = 1 
		AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodePimAttributeValueLocale q WHERE q.PimAttributeValueId = a.PimAttributeValueId) 
	UNION ALL 
		SELECT THB.PimProductId,THB.CustomCode,
		--'<Attributes><AttributeEntity>'+CustomeFiledJson +'</AttributeEntity></Attributes>' 
		JSON_MODIFY (Json_Query( CustomeFiledJson ) ,'$.SelectValues',Json_Query('[]')) 
		FROM ZnodePimCustomeFieldJson THB 
		INNER JOIN #TBL_CustomeFiled TRTE ON (TRTE.PimCustomeFieldJsonId = THB.PimCustomeFieldJsonId)
		UNION ALL 
		SELECT ZPAV.PimProductId,c.AttributeCode,
			JSON_MODIFY (JSON_MODIFY (c.AttributeJson,'$.AttributeValues',''), '$.SelectValues',
			Isnull((SELECT 
			Isnull(JSON_VALUE(DefaultValueJson, '$.Code'),'') Code 
			,Isnull(JSON_VALUE(DefaultValueJson, '$.LocaleId'),0) LocaleId
			,IsNull(JSON_VALUE(DefaultValueJson, '$.Value'),'') Value
			,IsNull(JSON_VALUE(DefaultValueJson, '$.AttributeDefaultValue'),'') AttributeDefaultValue
			,Isnull(JSON_VALUE(DefaultValueJson, '$.DisplayOrder'),0) DisplayOrder
			,Isnull(JSON_VALUE(DefaultValueJson, '$.IsEditable'),'false') IsEditable
			,Isnull(JSON_VALUE(DefaultValueJson, '$.SwatchText'),'') SwatchText
			,Isnull(JSON_VALUE(DefaultValueJson, '$.Path'),'') Path
			FROM #PimAttributeDefaultXML ZPADV
			WHERE (ZPADV.PimAttributeValueId = ZPAV.PimAttributeValueId) For JSON Auto 
			),'[]') 
		)  AttributeValue
		FROM ZnodePimAttributeValue ZPAV  With (NoLock)
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
		INNER JOIN #PimProductAttributeJson b ON (b.PimAttributeJsonId = c.PimAttributeJsonId )
		INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
		WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL 
		WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
	UNION ALL 
		SELECT DISTINCT  ZPAV.PimProductId,c.AttributeCode,
			JSON_MODIFY (JSON_MODIFY (Json_Query( c.AttributeJson  ) , '$.AttributeValues',  
			ISNULL((Select stuff( 
			(SELECT ','+ZPPG.MediaPath 
			FROM ZnodePimProductAttributeMedia ZPPG INNER JOIN  #TBL_AttributeVAlue TBLV ON 
			(	TBLV.PimProductId=  ZPAV.PimProductId AND TBLV.PimAttributeId = ZPAV.PimAttributeId )
			WHERE ZPPG.PimProductAttributeMediaId = TBLV.ZnodePimAttributeValueLocaleId
			FOR XML PATH('')), 1, 1, '')),'') ) ,'$.SelectValues',Json_Query('[]'))   
			AS 'AttributeEntity'
		FROM ZnodePimAttributeValue ZPAV 
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
		INNER JOIN #PimProductAttributeJson b ON (b.PimAttributeJsonId = c.PimAttributeJsonId )
		INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
		WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeMedia ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
	UNION ALL 
		SELECT ZPLP.PimParentProductId ,c.AttributeCode, 
			JSON_MODIFY( JSON_Modify(c.AttributeJson , '$.AttributeValues' , 
			ISNULL(SUBSTRING((SELECT ','+cast( LP.SKU as varchar(600)) 
							 FROM #LinkProduct LP
							 WHERE LP.PimParentProductId = ZPLP.PimParentProductId 
							 AND LP.PimAttributeId = ZPLP.PimAttributeId
		FOR XML PATH ('') ),2,4000),'')),'$.SelectValues',Json_Query('[]'))   
	
		FROM ZnodePimLinkProductDetail ZPLP 
		INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPLP.PimParentProductId)
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = ZPLP.PimAttributeId )
		INNER JOIN #PimProductAttributeJson b ON (b.PimAttributeJsonId = c.PimAttributeJsonId )
		GROUP BY ZPLP.PimParentProductId , ZPP.PublishProductId  ,ZPLP.PimAttributeId,c.AttributeCode,c.AttributeJson,ZPP.PublishCatalogId
	UNION ALL 
		SELECT ZPAV.PimProductId,'DefaultSkuForConfigurable' ,
			JSON_MODIFY( JSON_Modify(
			REPLACE(REPLACE (c.AttributeJson,'ProductType','DefaultSkuForConfigurable'),'Product Type','Default Sku For Configurable'),
			'$.AttributeValues' , 
			ISNULL(SUBSTRING((SELECT ','+CAST(AttributeValue AS VARCHAR(50)) 
		FROM View_LoadManageProductInternal  ad 
		INNER JOIN ZnodePimProductTypeAssociation yt ON (yt.PimProductId = ad.PimProductId)
		WHERE Ad.AttributeCode = 'SKU'
		AND yt.PimParentProductId = ZPAV.PimProductId 
		ORDER BY yt.DisplayOrder , yt.PimProductTypeAssociationId ASC FOR XML PATH ('') ),2,4000),'')),'$.SelectValues',Json_Query('[]'))   
		FROM ZnodePimAttributeValue ZPAV  
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
		INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
		WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL 
		INNER JOIN ZnodePimAttributeDefaultValue dr ON (dr.PimAttributeDefaultValueId = ZPADVL.PimAttributeDefaultValueId)
		WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId
		AND dr.AttributeDefaultValueCode= 'ConfigurableProduct' 
		)
		AND EXISTS (select * from #PimProductAttributeJson b where b.PimAttributeJsonId = c.PimAttributeJsonId)
		AND c.AttributeCode = 'ProductType' 

	UNION ALL
		SELECT DISTINCT  UOP.PimProductId,c.AttributeCode,
			JSON_MODIFY (JSON_MODIFY (c.AttributeJson,'$.AttributeValues',''), '$.SelectValues',
			Isnull((SELECT  DISTINCT 
			Isnull(JSON_VALUE(AA.DefaultValueJson, '$.Code'),'') Code 
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.LocaleId'),0) LocaleId
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.Value'),'') Value
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.AttributeDefaultValue'),'') AttributeDefaultValue
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.DisplayOrder'),0) DisplayOrder
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.IsEditable'),'false') IsEditable
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.SwatchText'),'') SwatchText
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.Path'),'') Path 
			,ISNULL(ZPA.DisplayOrder,0)  AS VariantDisplayOrder 
			,ISNULL(ZPAVL_SKU.AttributeValue,'')   AS VariantSKU 
			--,Isnull(ZM.Path,'') 
		,'' AS VariantImagePath 
		FROM ZnodePimAttributeDefaultJson AA 
		INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId )
		INNER JOIN ZnodePimAttributeValue ZPAV1 ON (ZPAV1.PimAttributeValueId= ZPADV.PimAttributeValueId )
		-- check/join for active variants 
		INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId =ZPAV1.PimProductId)
		INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON (ZPAV.PimAttributevalueid = ZPAVL.PimAttributeValueId AND ZPAVL.AttributeValue = 'True')
		INNER JOIN ZnodePimProductTypeAssociation YUP ON (YUP.PimProductId = ZPAV1.PimProductId)
		-- SKU
		INNER JOIN ZnodePimAttributeValue ZPAV_SKU ON(YUP.PimProductId = ZPAV_SKU.PimProductId)
		INNER JOIN ZnodePimAttributeValueLocale ZPAVL_SKU ON (ZPAVL_SKU.PimAttributeValueId = ZPAV_SKU.PimAttributeValueId)
		LEFT JOIN ZnodePimAttribute ZPA ON (ZPA.PimattributeId = ZPAV1.PimAttributeId)
		WHERE (YUP.PimParentProductId  = UOP.PimProductId AND ZPAV1.pimAttributeId = UOP.PimAttributeId )
		-- Active Variants
		AND ZPAV.PimAttributeId = (SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'IsActive')
		-- VariantSKU
		AND ZPAV_SKU.PimAttributeId = (SELECT PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'SKU')
		For JSON Auto 
		),'[]')) 
				
		--</AttributeEntity></Attributes>' 
		FROM ZnodePimConfigureProductAttribute UOP 
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = UOP.PimAttributeId )
		WHERE  exists(select * from #TBL_PublishCatalogId PPCP1 where UOP.PimProductId = PPCP1.PimProductId )
		AND EXISTS (select * from #PimProductAttributeJson b where b.PimAttributeJsonId = c.PimAttributeJsonId)


			-------------configurable attribute 
			---------------------------------------------------------------------
			
			If (@RevisionType like '%Preview%'  OR @RevisionType like '%Production%'  ) 
				Delete from ZnodePublishProductEntity where SKU  in (select SKU from #TBL_PublishCatalogId
				A inner join ZnodePublishProductDetail B on A.PublishProductId   =B.PublishProductId   )
				AND LocaleId = @LocaleId
				AND VersionId in (SELECT VersionId FROM ZnodePublishVersionEntity where RevisionType = 'PREVIEW')
			If (@RevisionType like '%Production%' OR @RevisionType = 'None')
				Delete from ZnodePublishProductEntity where SKU  in (select SKU from #TBL_PublishCatalogId
				A inner join ZnodePublishProductDetail B on A.PublishProductId   =B.PublishProductId   )
				AND LocaleId = @LocaleId
				AND VersionId in (SELECT VersionId FROM ZnodePublishVersionEntity where RevisionType = 'PRODUCTION')

			Insert into ZnodePublishProductEntity (
					VersionId, --1
					IndexId, --2 
					ZnodeProductId,ZnodeCatalogId, --3
					SKU,LocaleId, --4 
					Name,ZnodeCategoryIds, --5
					IsActive, -- 6 
					Attributes, -- 7 
					Brands, -- 9
					CategoryName, --9
					CatalogName,DisplayOrder, --10 
					RevisionType,AssociatedProductDisplayOrder, --11
					ProductIndex,--12
					SalesPrice,RetailPrice,CultureCode,CurrencySuffix,CurrencyCode,SeoDescription,SeoKeywords,SeoTitle,SeoUrl,ImageSmallPath,SKULower --13 
					)
 			SELECT distinct ZPVE.VersionId, --1 
			CAST(ISNULL(ZPCP.ProductIndex,1) AS VARCHAr(100)) + CAST(ISNULL(ZPC.PublishCategoryId,'')  AS VARCHAR(50))  + 
			CAST(Isnull(ZPP.PublishCatalogId ,'')  AS VARCHAR(50)) + CAST( @LocaleId AS VARCHAR(50)) IndexId, --2 
			CAST(ZPP.PublishProductId AS VARCHAR(50)) PublishProductId,CAST(ZPP.PublishCatalogId  AS VARCHAR(50)) PublishCatalogId,  --3 
			CAST(ISNULL(ZPPDFG.SKU ,'') AS NVARCHAR(2000)) SKU,CAST( Isnull(@LocaleId ,'') AS VARCHAR(50)) LocaleId, -- 4 
			CAST(isnull(ZPPDFG.ProductName,'') AS NVARCHAR(2000) )  ProductName ,CAST(ISNULL(ZPCD.PublishCategoryId,'')  AS VARCHAR(50)) PublishCategoryId  -- 5 
			,CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50)) IsActive , --6 
			'[' +
				(Select STUFF((SELECT distinct ','+ AttributeValue from #TBL_ZnodeTempPublish TY WHERE TY.PimProductId = ZPP.PimProductId   
				FOR XML Path ('')) ,1,1,'')  ) 
			+ ']' xmlvalue,  -- 7 
			'[]' Brands  --8 
			,CAST(isnull(PublishCategoryName,'') AS NVARCHAR(2000)) CategoryName  --9
			,CAST(Isnull(CatalogName,'')  AS NVARCHAR(2000)) CatalogName,CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50)) DisplayOrder  -- 10  
			,ZPVE.RevisionType RevisionType , 0 AssociatedProductDisplayOrder,-- pending  -- 11 
			Isnull(ZPCP.ProductIndex,1),  -- 12 

			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(CAST(SalesPrice  AS varchar(500)),'') else '' end SalesPrice , 
			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(CAST(RetailPrice  AS varchar(500)),'') else '' end RetailPrice , 
			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(CultureCode ,'') else '' end CultureCode , 
			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(CurrencySuffix ,'') else '' end CurrencySuffix , 
			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(CurrencyCode ,'') else '' end CurrencyCode , 
			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(SEODescription,'') else '' end SEODescriptionForIndex,
			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(SEOKeywords,'') else '' end SEOKeywords,
			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(SEOTitle,'') else '' end SEOTitle,
			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(SEOUrl ,'') else '' end SEOUrl,
			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(ImageSmallPath,'') else '' end ImageSmallPath,
			CAST(ISNULL(LOWER(ZPPDFG.SKU) ,'') AS NVARCHAR(100)) Lower_SKU -- 13
	FROM  #TBL_PublishCatalogId zpp
	INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
	INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
	INNER JOIN ZnodePublishVersionEntity ZPVE ON (ZPVE.ZnodeCatalogId  = ZPP.PublishCatalogId AND ZPVE.IsPublishSuccess =1 AND ZPVE.LocaleId = @LocaleId )
	LEFT JOIN #ZnodePrice TBZP ON (TBZP.PublishProductId = ZPP.PublishProductId)
	LEFT JOIN #ProductSKU TBPS ON (TBPS.PublishProductId = ZPP.PublishProductId)
	LEFT JOIN #ProductImages TBPI ON (TBPI.PublishProductId = ZPP.PublishProductId  )
	LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
	LEFT JOIN ZnodePublishCategory ZPC ON (ZPC.PublishCatalogId = ZPCP.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId)
	LEFT JOIN ZnodePimCategoryProduct ZPCCF ON (ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId )
	LEFT JOIN ZnodePimCategoryHierarchy ZPCH ON (ZPCH.PimCatalogId = ZPCV.PimCatalogId AND  ZPCH.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId) 
	LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ZPCP.PublishCategoryId AND ZPCD.LocaleId = @LocaleId )
	WHERE ZPPDFG.LocaleId = @LocaleId
		--AND zpp.LocaleId = @LocaleId
	AND 
		(
			(ZPVE.RevisionType =  Case when  (@RevisionType like '%Preview%'  OR @RevisionType like '%Production%' ) then 'Preview' End ) 
			OR 
			(ZPVE.RevisionType =  Case when (@RevisionType like '%Production%' OR @RevisionType = 'None') then  'Production'  end )
		)

	DELETE FROM #TBL_ZnodeTempPublish
	IF OBJECT_ID('tempdb..#PimProductAttributeJson') is not null
	 BEGIN 
		DELETE FROM #PimProductAttributeJson
	 END
	 IF OBJECT_ID('tempdb..#TBL_CustomeFiled') is not null
	 BEGIN 
	 DROP TABLE #TBL_CustomeFiled
	 END
	 IF OBJECT_ID('tempdb..#TBL_AttributeVAlue') is not null
	 BEGIN 
	 DROP TABLE #TBL_AttributeVAlue
	 END
 
	DELETE FROM @PimDefaultValueLocale
SET @Counter = @counter + 1 
END

SET @Status =1 

END TRY 
BEGIN CATCH 
	SET @Status =0  
	 SELECT 1 AS ID,@Status AS Status;   
	 DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
		@ErrorLine VARCHAR(100)= ERROR_LINE(),
		@ErrorCall NVARCHAR(MAX)= 'EXEC [Znode_GetPublishSingleProductJson] 
		@PublishCatalogId = '+CAST(@PublishCatalogId  AS VARCHAR	(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10))
				
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_GetPublishSingleProductJson',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
END CATCH
END
GO
if not exists(select * from information_schema.columns where table_name = 'ZnodeGlobalAttribute' and column_name = 'GlobalEntityId')
begin
	alter table ZnodeGlobalAttribute add [GlobalEntityId]	INT			   NULL
end
go
if not exists(select * from sys.tables where name = 'ZnodeGlobalAttributeFamily' )
begin
CREATE TABLE ZnodeGlobalAttributeFamily (
    GlobalAttributeFamilyId int NOT NULL  IDENTITY(1,1),
    FamilyCode varchar(200),
    CreatedBy int NOT NULL,
    CreatedDate datetime NOT NULL, 
    ModifiedBy int NOT NULL,
	ModifiedDate datetime  NOT NULL ,
	IsSystemDefined bit  NOT NULL,
	GlobalEntityId int NOT NULL,
	CONSTRAINT [PK_ZnodeGlobalAttributeFamily] PRIMARY KEY CLUSTERED ([GlobalAttributeFamilyId] ASC) WITH (FILLFACTOR = 90)
);
end
go
if not exists(select * from sys.tables where name = 'ZnodeGlobalAttributeFamilyLocale' )
begin
CREATE TABLE ZnodeGlobalAttributeFamilyLocale (
    GlobalAttributeFamilyLocaleId int NOT NULL  IDENTITY(1,1),
	LocaleId int ,
	GlobalAttributeFamilyId int not null,
    AttributeFamilyName nvarchar(300),
	Description nvarchar(300),
    CreatedBy int NOT NULL,
    CreatedDate datetime NOT NULL, 
    ModifiedBy int NOT NULL,
	ModifiedDate datetime  NOT NULL ,
	CONSTRAINT [PK_ZnodeGlobalAttributeFamilyLocale] PRIMARY KEY CLUSTERED ([GlobalAttributeFamilyLocaleId] ASC) WITH (FILLFACTOR = 90),
    CONSTRAINT [FK_ZnodeGlobalAttributeFamilyLocale_ZnodeGlobalAttributeFamily] FOREIGN KEY ([GlobalAttributeFamilyId]) REFERENCES [dbo].[ZnodeGlobalAttributeFamily] ([GlobalAttributeFamilyId])

);
end
go
if not exists(select * from information_schema.columns where table_name = 'ZnodeGlobalAttributeGroup' and column_name = 'GlobalEntityId')
begin
	alter table ZnodeGlobalAttributeGroup add [GlobalEntityId]	INT			   NULL
end
go
if not exists(select * from information_schema.columns where table_name = 'ZnodeGlobalEntity' and column_name = 'IsFamilyUnique')
begin
	alter table ZnodeGlobalEntity add [IsFamilyUnique] BIT		    NULL
end
go

if not exists(select * from sys.tables where name = 'ZnodeGlobalEntityFamilyMapper' )
begin
CREATE TABLE ZnodeGlobalEntityFamilyMapper (
GlobalEntityFamilyMapperId int NOT NULL  IDENTITY(1,1),
GlobalAttributeFamilyId int not null,
GlobalEntityId int not null,
GlobalEntityValueId int ,
CONSTRAINT [PK_ZnodeGlobalEntityFamilyMapper] PRIMARY KEY CLUSTERED ([GlobalEntityFamilyMapperId] ASC) WITH (FILLFACTOR = 90),
CONSTRAINT [FK_ZnodeGlobalEntityFamilyMapper_ZnodeGlobalAttributeFamily] FOREIGN KEY ([GlobalAttributeFamilyId]) REFERENCES [dbo].[ZnodeGlobalAttributeFamily] ([GlobalAttributeFamilyId]),
CONSTRAINT [FK_ZnodeGlobalEntityFamilyMapper_ZnodeGlobalEntity] FOREIGN KEY ([GlobalEntityId]) REFERENCES [dbo].[ZnodeGlobalEntity] ([GlobalEntityId])

);

end
go
if not exists(select * from sys.tables where name = 'ZnodeGlobalFamilyGroupMapper' )
begin
CREATE TABLE ZnodeGlobalFamilyGroupMapper (
    GlobalFamilyGroupMapperId int NOT NULL  IDENTITY(1,1),
	GlobalAttributeFamilyId int not null,
	GlobalAttributeGroupId int not null,
    AttributeGroupDisplayOrder int ,
    CreatedBy int NOT NULL,
    CreatedDate datetime NOT NULL, 
    ModifiedBy int NOT NULL,
	ModifiedDate datetime  NOT NULL ,
	CONSTRAINT [PK_ZnodeGlobalFamilyGroupMapper] PRIMARY KEY CLUSTERED ([GlobalFamilyGroupMapperId] ASC) WITH (FILLFACTOR = 90),
	CONSTRAINT [FK_ZnodeGlobalFamilyGroupMapper_ZnodeGlobalAttributeFamily] FOREIGN KEY ([GlobalAttributeFamilyId]) REFERENCES [dbo].[ZnodeGlobalAttributeFamily] ([GlobalAttributeFamilyId]),
	CONSTRAINT [FK_ZnodeGlobalFamilyGroupMapper_ZnodeGlobalAttributeGroup] FOREIGN KEY ([GlobalAttributeGroupId]) REFERENCES [dbo].[ZnodeGlobalAttributeGroup] ([GlobalAttributeGroupId])

);
end
go

update ZnodeApplicationSetting set Setting = 
'<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>GlobalAttributeId</name>      <headertext>Checkbox</headertext>      <width>20</width>      <datatype>String</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>AttributeCode</name>      <headertext>Attribute Code</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>/GlobalAttribute/Edit</islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>AttributeName</name>      <headertext>Attribute Label</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>y</isallowlink>      <islinkactionurl>/GlobalAttribute/Edit</islinkactionurl>      <islinkparamfield>GlobalAttributeId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>y</allowdetailview>    </column>    <column>      <id>4</id>      <name>AttributeTypeName</name>      <headertext>Attribute Type</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>/GlobalAttribute/Edit</islinkactionurl>      <islinkparamfield>GlobalAttributeId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>y</allowdetailview>    </column>    <column>      <id>5</id>      <name>EntityName</name>      <headertext>Entity Type</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>y</allowdetailview>    </column>    <column>      <id>6</id>      <name>IsRequired</name>      <headertext>Is Required</headertext>      <width>10</width>      <datatype>Boolean</datatype>      <columntype>Boolean</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>IsLocalizable</name>      <headertext>Is Localizable</headertext>      <width>10</width>      <datatype>Boolean</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>8</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>Edit|Delete</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Edit|Delete</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/GlobalAttribute/Edit|/GlobalAttribute/Delete</manageactionurl>      <manageparamfield>GlobalAttributeId|GlobalAttributeId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>'
where itemname = 'ZnodeGlobalAttribute'

update ZnodeApplicationSetting set Setting = 
'<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>GlobalAttributeGroupId</name>      <headertext>Checkbox</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>GroupCode</name>      <headertext>Group Code</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>/GlobalAttributeGroup/Edit</islinkactionurl>      <islinkparamfield>globalAttributeGroupId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>AttributeGroupName</name>      <headertext>Group Label</headertext>      <width>50</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>y</isconditional>      <isallowlink>y</isallowlink>      <islinkactionurl>/GlobalAttributeGroup/Edit</islinkactionurl>      <islinkparamfield>globalAttributeGroupId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>Id</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>y</allowdetailview>    </column>    <column>      <id>4</id>      <name>EntityName</name>      <headertext>Entity Type</headertext>      <width>50</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>y</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>Id</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>y</allowdetailview>    </column>    <column>      <id>5</id>      <name>CreatedDate</name>      <headertext>Created Date</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>DateTime</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>ModifiedDate</name>      <headertext>Modified Date</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>DateTime</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>Edit|Delete</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Edit|Delete</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/GlobalAttributeGroup/Edit|/GlobalAttributeGroup/Delete</manageactionurl>      <manageparamfield>globalAttributeGroupId|globalAttributeGroupId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>'
where itemname = 'ZnodeGlobalAttributeGroupList'


insert into ZnodeApplicationSetting (GroupName,	ItemName,	Setting,	ViewOptions,	FrontPageName,	FrontObjectName,	IsCompressed,	OrderByFields,	ItemNameWithoutCurrency,	CreatedByName,	ModifiedByName,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate)
select 'Table','ZnodeGlobalAttributeFamilyList',
'<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>GlobalAttributeFamilyId</name>      <headertext>Checkbox</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>FamilyCode</name>      <headertext>Family Code</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>/GlobalAttributeFamily/Edit</islinkactionurl>      <islinkparamfield>familyCode</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>AttributeFamilyName</name>      <headertext>Family Label</headertext>      <width>50</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>y</isconditional>      <isallowlink>y</isallowlink>      <islinkactionurl>/GlobalAttributeFamily/Edit</islinkactionurl>      <islinkparamfield>familyCode</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>Id</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>y</allowdetailview>    </column>    <column>      <id>4</id>      <name>EntityName</name>      <headertext>Entity Type</headertext>      <width>50</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>y</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>Id</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>y</allowdetailview>    </column>    <column>      <id>5</id>      <name>CreatedDate</name>      <headertext>Created Date</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>DateTime</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>ModifiedDate</name>      <headertext>Modified Date</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>DateTime</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>Edit|Delete</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Edit|Delete</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/GlobalAttributeFamily/Edit|/GlobalAttributeFamily/Delete</manageactionurl>      <manageparamfield>familyCode|globalAttributeFamilyId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>',
'ZnodeGlobalAttributeFamilyList','ZnodeGlobalAttributeFamilyList','ZnodeGlobalAttributeFamilyList',0,null,null,null,null,2,getdate(),2,getdate()
where not exists(select * from ZnodeApplicationSetting where GroupName = 'Table' and ItemName = 'ZnodeGlobalAttributeFamilyList')
go
insert into ZnodeMenu(ParentMenuId,MenuName,MenuSequence,AreaName,ControllerName,ActionName,CSSClassName,IsActive,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select (select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes'),'Attribute Families',3,null,'GlobalAttributeFamily','List','z-attribute-family',1,
2,getdate(),2,getdate()
where not exists(select * from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes'))

update ZnodeMenu set IsActive = 0 where MenuName = 'Entity Attributes'
go
Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'GlobalAttributeFamily','List',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'List')

insert into ZnodeActionMenu ( MenuId, ActionId, CreatedBy ,CreatedDate, ModifiedBy, ModifiedDate )
select
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes'))
,(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'List') ,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId =
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes')) and ActionId =
(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'List'))

insert into ZnodeMenuActionsPermission ( MenuId, ActionId, AccessPermissionId, CreatedBy ,CreatedDate, ModifiedBy, ModifiedDate )
select
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes')) ,
(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'List')
,1,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeMenuActionsPermission where MenuId =
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes')) and ActionId =
(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'List'))


--dt 25-08-2020
Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'GlobalAttributeFamily','Create',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'Create')

insert into ZnodeActionMenu ( MenuId, ActionId, CreatedBy ,CreatedDate, ModifiedBy, ModifiedDate )
select
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes'))
,(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'Create') ,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId =
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes')) and ActionId =
(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'Create'))

insert into ZnodeMenuActionsPermission ( MenuId, ActionId, AccessPermissionId, CreatedBy ,CreatedDate, ModifiedBy, ModifiedDate )
select
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes')) ,
(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'Create')
,1,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeMenuActionsPermission where MenuId =
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes')) and ActionId =
(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'Create'))


--dt 25-08-2020
Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'GlobalAttributeFamily','Edit',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'Edit')

insert into ZnodeActionMenu ( MenuId, ActionId, CreatedBy ,CreatedDate, ModifiedBy, ModifiedDate )
select
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes'))
,(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'Edit') ,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId =
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes')) and ActionId =
(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'Edit'))

insert into ZnodeMenuActionsPermission ( MenuId, ActionId, AccessPermissionId, CreatedBy ,CreatedDate, ModifiedBy, ModifiedDate )
select
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes')) ,
(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'Edit')
,1,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeMenuActionsPermission where MenuId =
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes')) and ActionId =
(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'Edit'))


--dt 25-08-2020
Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'GlobalAttributeFamily','Delete',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'Delete')

insert into ZnodeActionMenu ( MenuId, ActionId, CreatedBy ,CreatedDate, ModifiedBy, ModifiedDate )
select
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes'))
,(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'Delete') ,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId =
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes')) and ActionId =
(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'Delete'))

insert into ZnodeMenuActionsPermission ( MenuId, ActionId, AccessPermissionId, CreatedBy ,CreatedDate, ModifiedBy, ModifiedDate )
select
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes')) ,
(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'Delete')
,1,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeMenuActionsPermission where MenuId =
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes')) and ActionId =
(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'Delete'))


--dt 25-08-2020
Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'GlobalAttributeFamily','GetAssignedAttributeGroups',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'GetAssignedAttributeGroups')

insert into ZnodeActionMenu ( MenuId, ActionId, CreatedBy ,CreatedDate, ModifiedBy, ModifiedDate )
select
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes'))
,(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'GetAssignedAttributeGroups') ,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId =
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes')) and ActionId =
(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'GetAssignedAttributeGroups'))

insert into ZnodeMenuActionsPermission ( MenuId, ActionId, AccessPermissionId, CreatedBy ,CreatedDate, ModifiedBy, ModifiedDate )
select
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes')) ,
(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'GetAssignedAttributeGroups')
,1,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeMenuActionsPermission where MenuId =
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes')) and ActionId =
(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'GetAssignedAttributeGroups'))


--dt 25-08-2020
Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'GlobalAttributeFamily','GetUnassignedAttributeGroups',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'GetUnassignedAttributeGroups')

insert into ZnodeActionMenu ( MenuId, ActionId, CreatedBy ,CreatedDate, ModifiedBy, ModifiedDate )
select
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes'))
,(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'GetUnassignedAttributeGroups') ,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId =
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes')) and ActionId =
(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'GetUnassignedAttributeGroups'))

insert into ZnodeMenuActionsPermission ( MenuId, ActionId, AccessPermissionId, CreatedBy ,CreatedDate, ModifiedBy, ModifiedDate )
select
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes')) ,
(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'GetUnassignedAttributeGroups')
,1,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeMenuActionsPermission where MenuId =
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes')) and ActionId =
(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'GetUnassignedAttributeGroups'))


--dt 25-08-2020
Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'GlobalAttributeFamily','AssignAttributeGroups',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'AssignAttributeGroups')

insert into ZnodeActionMenu ( MenuId, ActionId, CreatedBy ,CreatedDate, ModifiedBy, ModifiedDate )
select
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes'))
,(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'AssignAttributeGroups') ,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId =
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes')) and ActionId =
(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'AssignAttributeGroups'))

insert into ZnodeMenuActionsPermission ( MenuId, ActionId, AccessPermissionId, CreatedBy ,CreatedDate, ModifiedBy, ModifiedDate )
select
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes')) ,
(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'AssignAttributeGroups')
,1,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeMenuActionsPermission where MenuId =
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes')) and ActionId =
(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'AssignAttributeGroups'))


--dt 25-08-2020
Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'GlobalAttributeFamily','UnassignAttributeGroups',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'UnassignAttributeGroups')

insert into ZnodeActionMenu ( MenuId, ActionId, CreatedBy ,CreatedDate, ModifiedBy, ModifiedDate )
select
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes'))
,(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'UnassignAttributeGroups') ,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId =
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes')) and ActionId =
(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'UnassignAttributeGroups'))

insert into ZnodeMenuActionsPermission ( MenuId, ActionId, AccessPermissionId, CreatedBy ,CreatedDate, ModifiedBy, ModifiedDate )
select
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes')) ,
(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'UnassignAttributeGroups')
,1,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeMenuActionsPermission where MenuId =
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes')) and ActionId =
(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'UnassignAttributeGroups'))


--dt 25-08-2020
Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'GlobalAttributeFamily','UpdateAttributeGroupDisplayOrder',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'UpdateAttributeGroupDisplayOrder')

insert into ZnodeActionMenu ( MenuId, ActionId, CreatedBy ,CreatedDate, ModifiedBy, ModifiedDate )
select
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes'))
,(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'UpdateAttributeGroupDisplayOrder') ,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId =
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes')) and ActionId =
(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'UpdateAttributeGroupDisplayOrder'))

insert into ZnodeMenuActionsPermission ( MenuId, ActionId, AccessPermissionId, CreatedBy ,CreatedDate, ModifiedBy, ModifiedDate )
select
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes')) ,
(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'UpdateAttributeGroupDisplayOrder')
,1,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeMenuActionsPermission where MenuId =
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes')) and ActionId =
(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'UpdateAttributeGroupDisplayOrder'))


--dt 25-08-2020
Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'GlobalAttributeFamily','GetTabStructure',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'GetTabStructure')

insert into ZnodeActionMenu ( MenuId, ActionId, CreatedBy ,CreatedDate, ModifiedBy, ModifiedDate )
select
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes'))
,(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'GetTabStructure') ,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId =
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes')) and ActionId =
(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'GetTabStructure'))

insert into ZnodeMenuActionsPermission ( MenuId, ActionId, AccessPermissionId, CreatedBy ,CreatedDate, ModifiedBy, ModifiedDate )
select
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes')) ,
(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'GetTabStructure')
,1,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeMenuActionsPermission where MenuId =
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes')) and ActionId =
(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'GetTabStructure'))



--dt 25-08-2020
Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'GlobalAttributeFamily','CreateAttributeFamilyLocale',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'CreateAttributeFamilyLocale')

insert into ZnodeActionMenu ( MenuId, ActionId, CreatedBy ,CreatedDate, ModifiedBy, ModifiedDate )
select
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes'))
,(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'CreateAttributeFamilyLocale') ,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId =
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes')) and ActionId =
(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'CreateAttributeFamilyLocale'))

insert into ZnodeMenuActionsPermission ( MenuId, ActionId, AccessPermissionId, CreatedBy ,CreatedDate, ModifiedBy, ModifiedDate )
select
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes')) ,
(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'CreateAttributeFamilyLocale')
,1,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeMenuActionsPermission where MenuId =
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes')) and ActionId =
(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'CreateAttributeFamilyLocale'))

go
--ZPD-1197
Declare @GlobalAttribute_EnableECertificate int,@GlobalAttribute_HideeProOrdersFromShopper int

select @GlobalAttribute_EnableECertificate = GlobalAttributeId from ZnodeGlobalAttribute where AttributeCode = 'EnableECertificate'

select @GlobalAttribute_HideeProOrdersFromShopper = GlobalAttributeId from ZnodeGlobalAttribute where AttributeCode = 'HideeProOrdersFromShopper'

delete from ZnodeGlobalAttributeGroupMapper
where GlobalAttributeId = @GlobalAttribute_EnableECertificate

delete from ZnodeGlobalAttributeGroupMapper
where GlobalAttributeId = @GlobalAttribute_HideeProOrdersFromShopper

execute [Znode_DeleteGlobalAttribute] @GlobalAttributeId = @GlobalAttribute_EnableECertificate,@Status = 0
execute [Znode_DeleteGlobalAttribute] @GlobalAttributeId = @GlobalAttribute_HideeProOrdersFromShopper, @Status = 0

INSERT INTO ZnodeGlobalAttributeFamily(FamilyCode, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, IsSystemDefined, GlobalEntityId)
SELECT 'Store', 2, getdate(), 2, getdate(), 1, 1
WHERE NOT EXISTS (SELECT * FROM ZnodeGlobalAttributeFamily WHERE FamilyCode = 'Store')

INSERT INTO ZnodeGlobalAttributeFamily(FamilyCode, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, IsSystemDefined, GlobalEntityId)
SELECT 'User', 2, getdate(), 2, getdate(), 1, 2
WHERE NOT EXISTS (SELECT * FROM ZnodeGlobalAttributeFamily WHERE FamilyCode = 'User')

INSERT INTO ZnodeGlobalAttributeFamily(FamilyCode, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, IsSystemDefined, GlobalEntityId)
SELECT 'Account', 2, getdate(), 2, getdate(), 1, 3
WHERE NOT EXISTS (SELECT * FROM ZnodeGlobalAttributeFamily WHERE FamilyCode = 'Account')

if exists(select * from INFORMATION_SCHEMA.columns where TABLE_NAME = 'ZnodeGlobalAttributeFamily' and COLUMN_NAME = 'GlobalEntityId')
and not exists(select*from sys.objects where name='FK_ZnodeGlobalAttributeFamily_ZnodeGlobalEntity')
BEGIN
ALTER TABLE ZnodeGlobalAttributeFamily ADD CONSTRAINT FK_ZnodeGlobalAttributeFamily_ZnodeGlobalEntity
FOREIGN KEY (GlobalEntityId) REFERENCES ZnodeGlobalEntity(GlobalEntityId);
END
go
INSERT INTO ZnodeGlobalAttributeFamilyLocale (LocaleId, GlobalAttributeFamilyId, AttributeFamilyName, Description, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate)
SELECT 1,
(select top 1 GlobalAttributeFamilyId from ZnodeGlobalAttributeFamily where FamilyCode = 'Store'),
'Default Store Family', NULL,  2, getdate(), 2, getdate()
WHERE NOT EXISTS (SELECT * FROM  ZnodeGlobalAttributeFamilyLocale WHERE 
GlobalAttributeFamilyId = (select top 1 GlobalAttributeFamilyId from ZnodeGlobalAttributeFamily where FamilyCode = 'Store') AND
LocaleId = 1)

INSERT INTO ZnodeGlobalAttributeFamilyLocale (LocaleId, GlobalAttributeFamilyId, AttributeFamilyName, Description, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate)
SELECT 1,
(select top 1 GlobalAttributeFamilyId from ZnodeGlobalAttributeFamily where FamilyCode = 'Account'),
'Default Account Family', NULL,  2, getdate(), 2, getdate()
WHERE NOT EXISTS (SELECT * FROM  ZnodeGlobalAttributeFamilyLocale WHERE 
GlobalAttributeFamilyId = (select top 1 GlobalAttributeFamilyId from ZnodeGlobalAttributeFamily where FamilyCode = 'Account') AND
LocaleId = 1)

INSERT INTO ZnodeGlobalAttributeFamilyLocale (LocaleId, GlobalAttributeFamilyId, AttributeFamilyName, Description, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate)
SELECT 1,
(select top 1 GlobalAttributeFamilyId from ZnodeGlobalAttributeFamily where FamilyCode = 'User'),
'Default User Family', NULL,  2, getdate(), 2, getdate()
WHERE NOT EXISTS (SELECT * FROM  ZnodeGlobalAttributeFamilyLocale WHERE 
GlobalAttributeFamilyId = (select top 1 GlobalAttributeFamilyId from ZnodeGlobalAttributeFamily where FamilyCode = 'User') AND
LocaleId = 1)
go
update ZnodeGlobalAttributeGroup set GlobalEntityId = s.GlobalEntityId from ZnodeGlobalGroupEntityMapper s
inner join ZnodeGlobalAttributeGroup t on s.GlobalAttributeGroupId = t.GlobalAttributeGroupId

update ZnodeGlobalAttribute set GlobalEntityId = s.GlobalEntityId from ZnodeGlobalAttributeGroup s inner join ZnodeGlobalAttributeGroupMapper t 
on s.GlobalAttributeGroupId = t.GlobalAttributeGroupId inner join ZnodeGlobalAttribute v on v.GlobalAttributeId = t.GlobalAttributeId


Declare @GlobalAttributeGroup_EnableECertificate int,@GlobalAttributeGroup_EProSettings int

select @GlobalAttributeGroup_EnableECertificate = GlobalAttributeGroupId from ZnodeGlobalAttributeGroup where GroupCode = 'ECertificateSettings'
select @GlobalAttributeGroup_EProSettings = GlobalAttributeGroupId from ZnodeGlobalAttributeGroup where GroupCode = 'EProSettings'

execute [Znode_DeleteGlobalAttributeGroup] @GlobalAttributeGroupId = @GlobalAttributeGroup_EnableECertificate,@Status = 0
execute [Znode_DeleteGlobalAttributeGroup] @GlobalAttributeGroupId = @GlobalAttributeGroup_EProSettings,@Status = 0

Update ZnodeGlobalAttribute Set GlobalEntityId = (select top 1 GlobalEntityId from ZnodeGlobalEntity where EntityName = 'Store')
where GlobalEntityId is null

Update ZnodeGlobalAttributeGroup Set GlobalEntityId = (select top 1 GlobalEntityId from ZnodeGlobalEntity where EntityName = 'Store')
where GlobalEntityId is null
go
if exists(select * from INFORMATION_SCHEMA.columns where TABLE_NAME = 'ZnodeGlobalAttribute' and COLUMN_NAME = 'GlobalEntityId')
begin
alter table ZnodeGlobalAttribute alter column GlobalEntityId INT NOT NULL
end
go
if exists(select * from INFORMATION_SCHEMA.columns where TABLE_NAME = 'ZnodeGlobalAttributeGroup' and COLUMN_NAME = 'GlobalEntityId')
begin
alter table ZnodeGlobalAttributeGroup alter column GlobalEntityId INT NOT NULL
end

if exists(select * from INFORMATION_SCHEMA.columns where TABLE_NAME = 'ZnodeGlobalAttributeGroup' and COLUMN_NAME = 'GlobalEntityId')
and not exists(select*from sys.objects where name='FK_ZnodeGlobalAttributeGroup_ZnodeGlobalEntity')
BEGIN
ALTER TABLE ZnodeGlobalAttributeGroup ADD CONSTRAINT FK_ZnodeGlobalAttributeGroup_ZnodeGlobalEntity
FOREIGN KEY (GlobalEntityId) REFERENCES ZnodeGlobalEntity(GlobalEntityId);
END
--ZPD-11917
if exists(select * from INFORMATION_SCHEMA.columns where TABLE_NAME = 'ZnodeGlobalAttribute' and COLUMN_NAME = 'GlobalEntityId')
begin
alter table ZnodeGlobalAttribute alter column GlobalEntityId INT NOT NULL
end

if exists(select * from INFORMATION_SCHEMA.columns where TABLE_NAME = 'ZnodeGlobalAttribute' and COLUMN_NAME = 'GlobalEntityId')
and not exists(select*from sys.objects where name='FK_ZnodeGlobalAttribute_ZnodeGlobalEntity')
BEGIN
ALTER TABLE ZnodeGlobalAttribute
ADD CONSTRAINT FK_ZnodeGlobalAttribute_ZnodeGlobalEntity FOREIGN KEY (GlobalEntityId) REFERENCES ZnodeGlobalEntity(GlobalEntityId);
END
go
INSERT INTO ZnodeGlobalAttributeGroup(GroupCode, DisplayOrder, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, IsSystemDefined, GlobalEntityId)
SELECT 'ContentSecurityPolicy', null, 2, getdate(), 2, getdate(), 0, (select top 1 GlobalEntityId from znodeglobalentity  where EntityName = 'store')
WHERE NOT EXISTS (SELECT * FROM ZnodeGlobalAttributeGroup WHERE GroupCode = 'ContentSecurityPolicy')

go
INSERT INTO ZnodeGlobalEntity(EntityName, IsActive, TableName, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, IsFamilyUnique)
SELECT 'Content Widgets', 1, 'ZnodeWidgetGlobalAttributeValue', 2, getdate(), 2, getdate(), 0
WHERE NOT EXISTS (SELECT * FROM ZnodeGlobalEntity WHERE EntityName = 'Content Widgets')

Update ZnodeGlobalEntity set IsFamilyUnique = 1 where EntityName = 'Store' or EntityName = 'Account' or EntityName = 'User'

Update ZnodeGlobalEntity set IsFamilyUnique = 0 where EntityName = 'Content Widgets' and IsFamilyUnique is null


if exists(select * from INFORMATION_SCHEMA.columns where TABLE_NAME = 'ZnodeGlobalEntity' and COLUMN_NAME = 'IsFamilyUnique')
begin
alter table ZnodeGlobalEntity alter column [IsFamilyUnique]  BIT NOT NULL 
end
go
INSERT INTO ZnodeGlobalEntityFamilyMapper (GlobalAttributeFamilyId, GlobalEntityId, GlobalEntityValueId)
SELECT 
(SELECT top 1 GlobalAttributeFamilyId FROM ZnodeGlobalAttributeFamily WHERE FamilyCode = 'Store'),
(SELECT top 1 GlobalEntityId FROM ZnodeGlobalEntity WHERE EntityName = 'Store'),NULL
WHERE NOT EXISTS (SELECT * FROM  ZnodeGlobalEntityFamilyMapper WHERE 
GlobalAttributeFamilyId = (SELECT top 1 GlobalAttributeFamilyId FROM ZnodeGlobalAttributeFamily WHERE FamilyCode = 'Store') AND
GlobalEntityId = (SELECT top 1 GlobalEntityId FROM ZnodeGlobalEntity WHERE EntityName = 'Store')
)


INSERT INTO ZnodeGlobalEntityFamilyMapper (GlobalAttributeFamilyId, GlobalEntityId, GlobalEntityValueId)
SELECT 
(SELECT top 1 GlobalAttributeFamilyId FROM ZnodeGlobalAttributeFamily WHERE FamilyCode = 'Account'),
(SELECT top 1 GlobalEntityId FROM ZnodeGlobalEntity WHERE EntityName = 'Account'),NULL
WHERE NOT EXISTS (SELECT * FROM  ZnodeGlobalEntityFamilyMapper WHERE 
GlobalAttributeFamilyId = (SELECT top 1 GlobalAttributeFamilyId FROM ZnodeGlobalAttributeFamily WHERE FamilyCode = 'Account') AND
GlobalEntityId = (SELECT top 1 GlobalEntityId FROM ZnodeGlobalEntity WHERE EntityName = 'Account')
)

INSERT INTO ZnodeGlobalEntityFamilyMapper (GlobalAttributeFamilyId, GlobalEntityId, GlobalEntityValueId)
SELECT 
(SELECT top 1 GlobalAttributeFamilyId FROM ZnodeGlobalAttributeFamily WHERE FamilyCode = 'User'),
(SELECT top 1 GlobalEntityId FROM ZnodeGlobalEntity WHERE EntityName = 'User'),NULL
WHERE NOT EXISTS (SELECT * FROM  ZnodeGlobalEntityFamilyMapper WHERE 
GlobalAttributeFamilyId = (SELECT top 1 GlobalAttributeFamilyId FROM ZnodeGlobalAttributeFamily WHERE FamilyCode = 'User') AND
GlobalEntityId = (SELECT top 1 GlobalEntityId FROM ZnodeGlobalEntity WHERE EntityName = 'User')
)
go

INSERT INTO ZnodeGlobalFamilyGroupMapper (GlobalAttributeFamilyId, GlobalAttributeGroupId, AttributeGroupDisplayOrder,CreatedBy, CreatedDate, ModifiedBy, ModifiedDate)
SELECT 
(SELECT top 1 GlobalAttributeFamilyId FROM ZnodeGlobalAttributeFamily WHERE FamilyCode = 'Store'),
(SELECT top 1 GlobalAttributeGroupId FROM ZnodeGlobalAttributeGroup WHERE GroupCode = 'WebstoreAuthentication'), 999,
 2, getdate(), 2, getdate()
WHERE NOT EXISTS(select * from ZnodeGlobalFamilyGroupMapper where
GlobalAttributeFamilyId = (SELECT top 1 GlobalAttributeFamilyId FROM ZnodeGlobalAttributeFamily WHERE FamilyCode = 'Store') and
GlobalAttributeGroupId = (SELECT top 1 GlobalAttributeGroupId FROM ZnodeGlobalAttributeGroup WHERE GroupCode = 'WebstoreAuthentication')
)

INSERT INTO ZnodeGlobalFamilyGroupMapper (GlobalAttributeFamilyId, GlobalAttributeGroupId, AttributeGroupDisplayOrder,CreatedBy, CreatedDate, ModifiedBy, ModifiedDate)
SELECT 
(SELECT top 1 GlobalAttributeFamilyId FROM ZnodeGlobalAttributeFamily WHERE FamilyCode = 'Store'),
(SELECT top 1 GlobalAttributeGroupId FROM ZnodeGlobalAttributeGroup WHERE GroupCode = 'Redirections'), 999,
 2, getdate(), 2, getdate()
WHERE NOT EXISTS(select * from ZnodeGlobalFamilyGroupMapper where
GlobalAttributeFamilyId = (SELECT top 1 GlobalAttributeFamilyId FROM ZnodeGlobalAttributeFamily WHERE FamilyCode = 'Store') and
GlobalAttributeGroupId = (SELECT top 1 GlobalAttributeGroupId FROM ZnodeGlobalAttributeGroup WHERE GroupCode = 'Redirections')
)

INSERT INTO ZnodeGlobalFamilyGroupMapper (GlobalAttributeFamilyId, GlobalAttributeGroupId, AttributeGroupDisplayOrder,CreatedBy, CreatedDate, ModifiedBy, ModifiedDate)
SELECT 
(SELECT top 1 GlobalAttributeFamilyId FROM ZnodeGlobalAttributeFamily WHERE FamilyCode = 'Store'),
(SELECT top 1 GlobalAttributeGroupId FROM ZnodeGlobalAttributeGroup WHERE GroupCode = 'EnableBudgetManagement'), 999,
 2, getdate(), 2, getdate()
WHERE NOT EXISTS(select * from ZnodeGlobalFamilyGroupMapper where
GlobalAttributeFamilyId = (SELECT top 1 GlobalAttributeFamilyId FROM ZnodeGlobalAttributeFamily WHERE FamilyCode = 'Store') and
GlobalAttributeGroupId = (SELECT top 1 GlobalAttributeGroupId FROM ZnodeGlobalAttributeGroup WHERE GroupCode = 'EnableBudgetManagement')
)

INSERT INTO ZnodeGlobalFamilyGroupMapper (GlobalAttributeFamilyId, GlobalAttributeGroupId, AttributeGroupDisplayOrder,CreatedBy, CreatedDate, ModifiedBy, ModifiedDate)
SELECT 
(SELECT top 1 GlobalAttributeFamilyId FROM ZnodeGlobalAttributeFamily WHERE FamilyCode = 'Store'),
(SELECT top 1 GlobalAttributeGroupId FROM ZnodeGlobalAttributeGroup WHERE GroupCode = 'StoreAddressSettings'), 999,
 2, getdate(), 2, getdate()
WHERE NOT EXISTS(select * from ZnodeGlobalFamilyGroupMapper where
GlobalAttributeFamilyId = (SELECT top 1 GlobalAttributeFamilyId FROM ZnodeGlobalAttributeFamily WHERE FamilyCode = 'Store') and
GlobalAttributeGroupId = (SELECT top 1 GlobalAttributeGroupId FROM ZnodeGlobalAttributeGroup WHERE GroupCode = 'StoreAddressSettings')
)

INSERT INTO ZnodeGlobalFamilyGroupMapper (GlobalAttributeFamilyId, GlobalAttributeGroupId, AttributeGroupDisplayOrder,CreatedBy, CreatedDate, ModifiedBy, ModifiedDate)
SELECT 
(SELECT top 1 GlobalAttributeFamilyId FROM ZnodeGlobalAttributeFamily WHERE FamilyCode = 'Store'),
(SELECT top 1 GlobalAttributeGroupId FROM ZnodeGlobalAttributeGroup WHERE GroupCode = 'Captcha'), 999,
 2, getdate(), 2, getdate()
WHERE NOT EXISTS(select * from ZnodeGlobalFamilyGroupMapper where
GlobalAttributeFamilyId = (SELECT top 1 GlobalAttributeFamilyId FROM ZnodeGlobalAttributeFamily WHERE FamilyCode = 'Store') and
GlobalAttributeGroupId = (SELECT top 1 GlobalAttributeGroupId FROM ZnodeGlobalAttributeGroup WHERE GroupCode = 'Captcha')
)

INSERT INTO ZnodeGlobalFamilyGroupMapper (GlobalAttributeFamilyId, GlobalAttributeGroupId, AttributeGroupDisplayOrder,CreatedBy, CreatedDate, ModifiedBy, ModifiedDate)
SELECT 
(SELECT top 1 GlobalAttributeFamilyId FROM ZnodeGlobalAttributeFamily WHERE FamilyCode = 'Store'),
(SELECT top 1 GlobalAttributeGroupId FROM ZnodeGlobalAttributeGroup WHERE GroupCode = 'WarehouseStockLevels'), 999,
 2, getdate(), 2, getdate()
WHERE NOT EXISTS(select * from ZnodeGlobalFamilyGroupMapper where
GlobalAttributeFamilyId = (SELECT top 1 GlobalAttributeFamilyId FROM ZnodeGlobalAttributeFamily WHERE FamilyCode = 'Store') and
GlobalAttributeGroupId = (SELECT top 1 GlobalAttributeGroupId FROM ZnodeGlobalAttributeGroup WHERE GroupCode = 'WarehouseStockLevels')
)

INSERT INTO ZnodeGlobalFamilyGroupMapper (GlobalAttributeFamilyId, GlobalAttributeGroupId, AttributeGroupDisplayOrder,CreatedBy, CreatedDate, ModifiedBy, ModifiedDate)
SELECT 
(SELECT top 1 GlobalAttributeFamilyId FROM ZnodeGlobalAttributeFamily WHERE FamilyCode = 'Store'),
(SELECT top 1 GlobalAttributeGroupId FROM ZnodeGlobalAttributeGroup WHERE GroupCode = 'Cloudflaresetting'), 999,
 2, getdate(), 2, getdate()
WHERE NOT EXISTS(select * from ZnodeGlobalFamilyGroupMapper where
GlobalAttributeFamilyId = (SELECT top 1 GlobalAttributeFamilyId FROM ZnodeGlobalAttributeFamily WHERE FamilyCode = 'Store') and
GlobalAttributeGroupId = (SELECT top 1 GlobalAttributeGroupId FROM ZnodeGlobalAttributeGroup WHERE GroupCode = 'Cloudflaresetting')
)

INSERT INTO ZnodeGlobalFamilyGroupMapper (GlobalAttributeFamilyId, GlobalAttributeGroupId, AttributeGroupDisplayOrder,CreatedBy, CreatedDate, ModifiedBy, ModifiedDate)
SELECT 
(SELECT top 1 GlobalAttributeFamilyId FROM ZnodeGlobalAttributeFamily WHERE FamilyCode = 'Store'),
(SELECT top 1 GlobalAttributeGroupId FROM ZnodeGlobalAttributeGroup WHERE GroupCode = 'QuotesSettings'), 999,
 2, getdate(), 2, getdate()
WHERE NOT EXISTS(select * from ZnodeGlobalFamilyGroupMapper where
GlobalAttributeFamilyId = (SELECT top 1 GlobalAttributeFamilyId FROM ZnodeGlobalAttributeFamily WHERE FamilyCode = 'Store') and
GlobalAttributeGroupId = (SELECT top 1 GlobalAttributeGroupId FROM ZnodeGlobalAttributeGroup WHERE GroupCode = 'QuotesSettings')
)

INSERT INTO ZnodeGlobalFamilyGroupMapper (GlobalAttributeFamilyId, GlobalAttributeGroupId, AttributeGroupDisplayOrder,CreatedBy, CreatedDate, ModifiedBy, ModifiedDate)
SELECT 
(SELECT top 1 GlobalAttributeFamilyId FROM ZnodeGlobalAttributeFamily WHERE FamilyCode = 'Store'),
(SELECT top 1 GlobalAttributeGroupId FROM ZnodeGlobalAttributeGroup WHERE GroupCode = 'VoucherSettings'), 999,
 2, getdate(), 2, getdate()
WHERE NOT EXISTS(select * from ZnodeGlobalFamilyGroupMapper where
GlobalAttributeFamilyId = (SELECT top 1 GlobalAttributeFamilyId FROM ZnodeGlobalAttributeFamily WHERE FamilyCode = 'Store') and
GlobalAttributeGroupId = (SELECT top 1 GlobalAttributeGroupId FROM ZnodeGlobalAttributeGroup WHERE GroupCode = 'VoucherSettings')
)

INSERT INTO ZnodeGlobalFamilyGroupMapper (GlobalAttributeFamilyId, GlobalAttributeGroupId, AttributeGroupDisplayOrder,CreatedBy, CreatedDate, ModifiedBy, ModifiedDate)
SELECT 
(SELECT top 1 GlobalAttributeFamilyId FROM ZnodeGlobalAttributeFamily WHERE FamilyCode = 'Store'),
(SELECT top 1 GlobalAttributeGroupId FROM ZnodeGlobalAttributeGroup WHERE GroupCode = 'ContentSecurityPolicy'), 999,
 2, getdate(), 2, getdate()
WHERE NOT EXISTS(select * from ZnodeGlobalFamilyGroupMapper where
GlobalAttributeFamilyId = (SELECT top 1 GlobalAttributeFamilyId FROM ZnodeGlobalAttributeFamily WHERE FamilyCode = 'Store') and
GlobalAttributeGroupId = (SELECT top 1 GlobalAttributeGroupId FROM ZnodeGlobalAttributeGroup WHERE GroupCode = 'ContentSecurityPolicy')
)

INSERT INTO ZnodeGlobalFamilyGroupMapper (GlobalAttributeFamilyId, GlobalAttributeGroupId, AttributeGroupDisplayOrder,CreatedBy, CreatedDate, ModifiedBy, ModifiedDate)
SELECT 
(SELECT top 1 GlobalAttributeFamilyId FROM ZnodeGlobalAttributeFamily WHERE FamilyCode = 'User'),
(SELECT top 1 GlobalAttributeGroupId FROM ZnodeGlobalAttributeGroup WHERE GroupCode = 'Budgets'), 999,
 2, getdate(), 2, getdate()
WHERE NOT EXISTS(select * from ZnodeGlobalFamilyGroupMapper where
GlobalAttributeFamilyId = (SELECT top 1 GlobalAttributeFamilyId FROM ZnodeGlobalAttributeFamily WHERE FamilyCode = 'User') and
GlobalAttributeGroupId = (SELECT top 1 GlobalAttributeGroupId FROM ZnodeGlobalAttributeGroup WHERE GroupCode = 'Budgets')
)

INSERT INTO ZnodeGlobalFamilyGroupMapper (GlobalAttributeFamilyId, GlobalAttributeGroupId, AttributeGroupDisplayOrder,CreatedBy, CreatedDate, ModifiedBy, ModifiedDate)
SELECT 
(SELECT top 1 GlobalAttributeFamilyId FROM ZnodeGlobalAttributeFamily WHERE FamilyCode = 'User'),
(SELECT top 1 GlobalAttributeGroupId FROM ZnodeGlobalAttributeGroup WHERE GroupCode = 'OpenAccountBillingDetails'), 999,
 2, getdate(), 2, getdate()
WHERE NOT EXISTS(select * from ZnodeGlobalFamilyGroupMapper where
GlobalAttributeFamilyId = (SELECT top 1 GlobalAttributeFamilyId FROM ZnodeGlobalAttributeFamily WHERE FamilyCode = 'User') and
GlobalAttributeGroupId = (SELECT top 1 GlobalAttributeGroupId FROM ZnodeGlobalAttributeGroup WHERE GroupCode = 'OpenAccountBillingDetails')
)

INSERT INTO ZnodeGlobalFamilyGroupMapper (GlobalAttributeFamilyId, GlobalAttributeGroupId, AttributeGroupDisplayOrder,CreatedBy, CreatedDate, ModifiedBy, ModifiedDate)
SELECT 
(SELECT top 1 GlobalAttributeFamilyId FROM ZnodeGlobalAttributeFamily WHERE FamilyCode = 'User'),
(SELECT top 1 GlobalAttributeGroupId FROM ZnodeGlobalAttributeGroup WHERE GroupCode = 'UserAddressSettings'), 999,
 2, getdate(), 2, getdate()
WHERE NOT EXISTS(select * from ZnodeGlobalFamilyGroupMapper where
GlobalAttributeFamilyId = (SELECT top 1 GlobalAttributeFamilyId FROM ZnodeGlobalAttributeFamily WHERE FamilyCode = 'User') and
GlobalAttributeGroupId = (SELECT top 1 GlobalAttributeGroupId FROM ZnodeGlobalAttributeGroup WHERE GroupCode = 'UserAddressSettings')
)

INSERT INTO ZnodeGlobalFamilyGroupMapper (GlobalAttributeFamilyId, GlobalAttributeGroupId, AttributeGroupDisplayOrder,CreatedBy, CreatedDate, ModifiedBy, ModifiedDate)
SELECT 
(SELECT top 1 GlobalAttributeFamilyId FROM ZnodeGlobalAttributeFamily WHERE FamilyCode = 'User'),
(SELECT top 1 GlobalAttributeGroupId FROM ZnodeGlobalAttributeGroup WHERE GroupCode = 'PowerBISettings'), 999,
 2, getdate(), 2, getdate()
WHERE NOT EXISTS(select * from ZnodeGlobalFamilyGroupMapper where
GlobalAttributeFamilyId = (SELECT top 1 GlobalAttributeFamilyId FROM ZnodeGlobalAttributeFamily WHERE FamilyCode = 'User') and
GlobalAttributeGroupId = (SELECT top 1 GlobalAttributeGroupId FROM ZnodeGlobalAttributeGroup WHERE GroupCode = 'PowerBISettings')
)
go
update ZnodeApplicationSetting set setting = '<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>Image</name>      <headertext>Product Image</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>ProductId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>ImagePath,ProductName</imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>imageicon</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>ProductName</name>      <headertext>Product Name</headertext>      <width>60</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>product-name</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>SKU</name>      <headertext>SKU</headertext>      <width>60</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>SKU</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>product-sku</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>DisplayOrder</name>      <headertext>Display Order</headertext>      <width>60</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>3</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>' 
where itemname = 'ZnodeGetCatalogAssociatedProduct'
go
IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ManageProductList_XML')
	DROP PROC Znode_ManageProductList_XML
GO
CREATE  PROCEDURE [dbo].[Znode_ManageProductList_XML]
(   @WhereClause						 XML,
    @Rows								 INT           = 100,
    @PageNo								 INT           = 1,
    @Order_BY			 VARCHAR(1000) = '',
    @LocaleId			 INT           = 1,
    @PimProductId		 VARCHAR(2000) = 0,
    @IsProductNotIn	 BIT           = 0,
	@IsCallForAttribute BIT		   = 0,
	@AttributeCode      VARCHAR(max ) = '' ,
	@PimCatalogId   INT = 0,
	@IsCatalogFilter   BIT            = 0,
	@IsDebug            Bit		   = 0 )
AS
    
/*
		  Summary:-   This Procedure is used for get product List  
				    Procedure will pivot verticle table(ZnodePimattributeValues) into horizontal table with columns 
				    ProductId,ProductName,ProductType,AttributeFamily,SKU,Price,Quantity,IsActive,ImagePath,Assortment,LocaleId,DisplayOrder
        
		  Unit Testing
		  
exec Znode_ManageProductList_XML @WhereClause=N'',@Rows=50,@PageNo=1,@Order_By=N'',@LocaleId=1,@PimProductId=N'',@IsProductNotIn=1,@IsCallForAttribute=0,@AttributeCode=''
          select * from ZnodeAttributeType  WHERE AttributeValue LIKE '%&%'
		  UPDATE VieW_lOADMANAGEpRODUCT SET  AttributeValue = 'A & B'  WHERE AttributeValue LIKE '% and %' AND PimProductId = 158
    */

     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY
		 SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 
             DECLARE @PimProductIds TransferId, --VARCHAR(MAX), 
					 @FirstWhereClause NVARCHAR(MAX)= '', 
					 @SQL NVARCHAR(MAX)= '' ,
					 @OutPimProductIds VARCHAR(max),
					 @ProductXML NVARCHAR(max) ;

             DECLARE @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId()
					 ,@RowsCount INT =0 ;
             DECLARE @TransferPimProductId TransferId 
			 DECLARE @TBL_AttributeDefaultValue TABLE
             (PimAttributeId            INT,
              AttributeDefaultValueCode VARCHAR(100),
              IsEditable                BIT,
              AttributeDefaultValue     NVARCHAR(MAX)
			  ,DisplayOrder INT 
			  ,PimAttributedefaultValueId INT 
             );
             DECLARE @TBL_AttributeDetails AS TABLE
             (PimProductId   INT,
              AttributeValue NVARCHAR(MAX),
              AttributeCode  VARCHAR(600),
              PimAttributeId INT,
			  AttributeDefaultValue NVARCHAR(MAX)
             );
			 Create table #TBL_AttributeDetailsLocale
             (PimProductId   INT,
              AttributeValue NVARCHAR(MAX),
              AttributeCode  VARCHAR(600),
              PimAttributeId INT
             );
			 DECLARE @TBL_MultiSelectAttribute TABLE (PimAttributeId INT , AttributeCode VARCHAR(600))
			
			 DECLARE @TBL_MediaAttribute TABLE (Id INT ,PimAttributeId INT ,AttributeCode VARCHAR(600) )
			 
			 DECLARE @TBL_ProductIds TABLE 
			 (
			  PimProductId INT,
			  ModifiedDate DATETIME  
			 )

			 DECLARE @FamilyDetails TABLE
             (
			  PimProductId         INT,
              PimAttributeFamilyId INT,
              FamilyName           NVARCHAR(Max)
             );
             DECLARE @DefaultAttributeFamily INT= dbo.Fn_GetDefaultPimProductFamilyId();
             DECLARE @ProductIdTable TABLE
             (PimProductId INT,
              CountId      INT,
              RowId        INT IDENTITY(1,1)
             );
          		
             IF EXISTS ( SELECT TOP 1 1 FROM @WhereClause.nodes ( '//ArrayOfWhereClauseModel/WhereClauseModel'  ) AS Tbl(Col)
			 WHERE LTRIM(RTRIM((REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))))  =  'Brand'
                OR LTRIM(RTRIM((REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''','')))) = 'Vendor'
                OR LTRIM(RTRIM((REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))))  =  'ShippingCostRules'
                OR LTRIM(RTRIM((REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''','')))) =  'Highlights') and @IsCallForAttribute=1
                 BEGIN
                DECLARE @AttributeCodeValue TABLE (AttributeValue NVARCHAr(max),AttributeCode NVARCHAR(max))

				INSERT INTO @AttributeCodeValue(AttributeValue,AttributeCode)
				SELECT  Tbl.Col.value ( 'attributevalue[1]' , 'NVARCHAR(max)') AS AttributeValue
						 ,Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)') AS AttributeCode
				FROM @WhereClause.nodes ( '//ArrayOfWhereClauseModel/WhereClauseModel'  ) AS Tbl(Col)
				WHERE LTRIM(RTRIM((REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))))  =  'Brand'
                OR LTRIM(RTRIM((REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))))  = 'Vendor'
                OR LTRIM(RTRIM((REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))))  =  'ShippingCostRules'
                OR LTRIM(RTRIM((REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))))  =  'Highlights'
		
				SET @SQL =   
				           ';WIth Cte_DefaultValue AS (
										  SELECT AttributeDefaultValueCode , ZPDF.PimAttributeId ,FNPA.AttributeCode
										  FROM ZnodePImAttributeDefaultValue ZPDF
										  INNER JOIN [dbo].[Fn_GetProductDefaultFilterAttributes] () FNPA ON ( FNPA.PimAttributeId = ZPDF.PimAttributeId) 
										)
										, Cte_productIds AS 
										(
										  SELECT a.PimProductId, c.AttributeCode , CTDV.AttributeDefaultValueCode AttributeValue,b.ModifiedDate 
										  FROM  ZnodePimAttributeValue a
										  LEFT JOIN ZnodePimAttribute c ON(c.PimAttributeId = a.PimAttributeId)
										  LEFT JOIN ZnodePimAttributeValueLocale b ON(b.PimAttributeValueId = a.PimAttributeValueId)  
										  INNER JOIN Cte_DefaultValue CTDV ON (CTDV.AttributeCode = c.AttributeCode 
										  AND EXISTS (SELECT TOP 1 1 FROM dbo.split(b.AttributeValue,'','') SP WHERE SP.Item = CTDV.AttributeDefaultValueCode) )
										  Union all 
										  
											SELECT a.PimProductId,c.AttributeCode,ZPADV.AttributeDefaultValueCode AttributeValue ,a.ModifiedDate 
											FROM ZnodePimProductAttributeDefaultValue ZPPADV
											INNER JOIN ZnodePimAttributeDefaultValue ZPADV ON (ZPPADV.PimAttributeDefaultValueId = ZPADV.PimAttributeDefaultValueId)
											LEFT JOIN ZnodePimAttributeValue a ON (a.PimAttributeValueId = ZPPADV.PimAttributeValueId )
											LEFT JOIN ZnodePimAttribute c ON ( c.PimAttributeId=a.PimAttributeId )
											INNER JOIN Cte_DefaultValue CTDV ON (CTDV.AttributeCode = c.AttributeCode )
										)										
										SELECT PimProductId ,ModifiedDate
										FROM Cte_productIds WHERE  AttributeCode '+(SELECT TOP 1 AttributeCode  FROM @AttributeCodeValue )+' AND 
										AttributeValue '+(SELECT TOP 1 AttributeValue  FROM @AttributeCodeValue )+' 
										GROUP BY PimProductId,ModifiedDate Order By ModifiedDate DESC ';


					 SET @Order_BY = CASE WHEN @Order_BY = '' THEN 'ModifiedDate DESC' ELSE @Order_BY END 
					 	
					 SET @WhereClause = CAST(REPLACE(CAST(@WhereClause AS NVARCHAR(max)),'<WhereClauseModel><attributecode>'+(SELECT TOP 1 AttributeCode  FROM @AttributeCodeValue )+'</attributecode><attributevalue>'+(SELECT TOP 1 AttributeValue   FROM @AttributeCodeValue )+'</attributevalue></WhereClauseModel>','') AS XML )
					
				     INSERT INTO @TBL_ProductIds ( PimProductId, ModifiedDate )
					 EXEC (@SQL);
			  					 
					
						 INSERT INTO @ProductIdTable( PimProductId )
						 SELECT PimProductId 
						 FROM @TBL_ProductIds
					

                     INSERT INTO @TransferPimProductId
					 SELECT PimProductId
                     FROM @ProductIdTable
                   
				   			  
     DELETE FROM @ProductIdTable;
   --  SET @WhereClause = CAST(REPLACE(CAST(@WhereClause AS NVARCHAR(MAX)), @FirstWhereClause, ' 1 = 1') AS XML);
                 END
	            ELSE IF @PimProductId <> ''
			    BEGIN 
		
				 INSERT INTO @TransferPimProductId(id)
				 SELECT Item 
				 FROM dbo.split(@PimProductId,',')
			    END 
		
			
	 DECLARE  @ProductListIdRTR TransferId
	 DECLARE @TAb Transferid 
	 --DECLARE @tBL_mainList TABLE (Id INT,RowId INT)
	 Create table #TBL_ProductMainList (Id INT,RowId INT)

	 	IF @PimProductId <> ''  OR   @IsCallForAttribute=1 --OR (CAST(@WhereClause AS NVARCHAR(max))= N'' AND @Order_by <> N'' AND @AttributeCode = N'')
		BEGIN 
	 SET @IsProductNotIn = CASE WHEN @IsProductNotIn = 0 THEN 1  
					 WHEN @IsProductNotIn = 1 THEN 0 END 
		END 
	
	 INSERT INTO @ProductListIdRTR
	 EXEC Znode_GetProductList  @IsProductNotIn,@TransferPimProductId, @PimCatalogId,@IsCatalogFilter
 
	 IF CAST(@WhereClause AS NVARCHAR(max))<> N''
	 BEGIN 
	 
	  SET @SQL = 'SELECT Distinct PimProductId FROM ##Temp_PimProductId'+CAST(@@SPID AS VARCHAR(500))

	  EXEC Znode_GetFilterPimProductId @WhereClause,@ProductListIdRTR,@localeId
	  
      INSERT INTO @TAB 
	  EXEC (@SQL)
	 
	 END 
	 
	

	 IF EXISTS (SELECT Top 1 1 FROM @TAb ) OR CAST(@WhereClause AS NVARCHAR(max)) <> N''
	 BEGIN 
	 
	 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
	 SET @order_by = REPLACE(@order_by,'DisplayOrder','ProductName')
	 INSERT INTO #TBL_ProductMainList(id,RowId)
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @TAb ,@AttributeCode,@localeId
	 
	 END 
	 ELSE 
	 BEGIN
	      
	 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
	 SET @order_by = REPLACE(@order_by,'DisplayOrder','ProductName')
	 INSERT INTO #TBL_ProductMainList(id,RowId)
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @ProductListIdRTR ,@AttributeCode,@localeId 
	 END 
          

  			 INSERT INTO @PimProductIds ( Id  )
			 SELECT DISTINCT id FROM #TBL_ProductMainList

			 DECLARE @TBL_PimProductIds transferId 
			 INSERT INTO @TBL_PimProductIds
			 SELECT id 
             FROM @PimProductIds
			 			 	
			 DECLARE @PimAttributeIds TransferId  
			 INSERT INTO @PimAttributeIds
			 SELECT PimAttributeId  
			 FROM [dbo].[Fn_GetProductGridAttributes]()
			 
			

			 INSERT INTO @TBL_AttributeDetails
             (PimProductId,
              AttributeValue,
              AttributeCode,
              PimAttributeId,
			  AttributeDefaultValue
             )
             EXEC Znode_GetProductsAttributeValue_newTesting
                  @TBL_PimProductIds,
                  @PimAttributeIds,
                  @localeId;
			
			
			UPDATE @TBL_AttributeDetails
			SET AttributeValue = ISNULL(AttributeValue,'')
			WHERE AttributeValue IS NULL 

----------------------------------------------------------------------------------------------------

			

		    declare @SKU SelectColumnList
			declare @TBL_Inventorydetails table (Quantity NVARCHAR(MAx),PimProductId INT)

			INSERT INTO @SKU
			SELECT AttributeValue 
			FROM @TBL_AttributeDetails
			WHERE AttributeCode = 'SKU'
 
 			INSERT INTO @TBL_Inventorydetails(Quantity,PimProductId)
			EXEC Znode_GetPimProductAttributeInventory @SKU--vishal

			 INSERT INTO @FamilyDetails
             (PimAttributeFamilyId,
              PimProductId
             )
             EXEC [dbo].[Znode_GetPimProductAttributeFamilyId]
                  @PimProductIds,
                  1;
             
		 UPDATE a
               SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
                  INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                       AND LocaleId = @LocaleId);
             UPDATE a
               SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
                  INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                       AND LocaleId = @DefaultLocaleId)
             WHERE a.FamilyName IS NULL
                   OR a.FamilyName = '';
           	
			INSERT INTO @TBL_AttributeDetails             (PimProductId,              AttributeValue,              AttributeCode,              PimAttributeId             )
			SELECT PimProductId ,FamilyName, 'AttributeFamily',NULL
			FROM @FamilyDetails 
			
			INSERT INTO @TBL_AttributeDetails             (PimProductId,              AttributeValue,              AttributeCode,              PimAttributeId             )
			SELECT a.ID PimProductId ,th.DisplayName, 'PublishStatus',NULL
			FROM @PimProductIds a 
			INNER JOIN ZnodePimProduct b ON (b.PimProductId = a.ID)
			LEFT JOIN ZnodePublishState th ON (th.PublishStateId = b.PublishStateId)

	  INSERT INTO #TBL_AttributeDetailsLocale (PimProductId ,PimAttributeId,AttributeCode )
			SELECT  TBLAD.PimProductId ,TBLAD.PimAttributeId,TBLAD.AttributeCode 
			FROM @TBL_AttributeDetails TBLAD 
			GROUP BY  TBLAD.PimProductId ,TBLAD.PimAttributeId,TBLAD.AttributeCode 
       					

	    UPDATE TBLPP 
		SET AttributeValue = CTDD.AttributeValue 
		FROM  @TBL_AttributeDetails CTDD 
		INNER JOIN #TBL_AttributeDetailsLocale TBLPP ON (TBLPP.PimProductId = CTDD.PimProductId AND TBLPP.AttributeCode  = CTDD.AttributeCode)
		WHERE TBLPP.AttributeValue IS NULL 

    	SET @ProductXML =  '<MainProduct>'+ STUFF( (  SELECT '<Product>'+'<PimProductId>'+CAST(TBAD.PimProductId AS VARCHAR(50))+'</PimProductId>'
																		+'<AvailableInventory>'+CAST(ISNULL(IDD.[Quantity],'') AS VARCHAR(50))+'</AvailableInventory>'
		+ STUFF(    (  SELECT '<'+TBADI.AttributeCode+'>'+CAST( (SELECT  ''+TBADI.AttributeValue FOR XML PATH('')) AS NVARCHAR(max))+'</'+TBADI.AttributeCode+'>'   
															FROM #TBL_AttributeDetailsLocale TBADI      
															 WHERE TBADI.PimProductId = TBAD.PimProductId 
															 ORDER BY TBADI.PimProductId DESC
															 FOR XML PATH (''), TYPE
																).value('.', ' Nvarchar(max)'), 1, 0, '')+'</Product>'	   

		FROM #TBL_AttributeDetailsLocale TBAD
		INNER JOIN #TBL_ProductMainList TBPI ON (TBAD.PimProductid = TBPI.id )
		LEFT JOIN @TBL_ProductIds TPT ON TBAD.PimProductId = TPT.PimProductId
		LEFT JOIN @TBL_InventoryDetails IDD ON (TBPI.id = IDD.PimProductId)
		GROUP BY TBAD.pimProductid, TPT.ModifiedDate,TBPI.RowId,IDD.Quantity
		ORDER BY TBPI.RowId 
		FOR XML PATH (''),TYPE).value('.', ' Nvarchar(max)'), 1, 0, '')+'</MainProduct>'
			--FOR XML PATH ('MainProduct'))
 

			SELECT  CAST(@ProductXML AS XML ) ProductXMl
		   
		     SELECT AttributeCode ,  ZPAL.AttributeName
			 FROM ZnodePimAttribute ZPA 
			 LEFT JOIN ZnodePiMAttributeLOcale ZPAL ON (ZPAL.PimAttributeId = ZPA.PimAttributeId )
             WHERE LocaleId = 1  
			 AND  IsCategory = 0 
			 AND ZPA.IsShowOnGrid = 1  
			 UNION ALL 
			 SELECT 'PublishStatus','Publish Status'

     IF EXISTS (SELECT Top 1 1 FROM @TAb )
	 BEGIN 

		  SELECT (SELECT COUNT(1) FROM @TAb) AS RowsCount   
	 END 
	 ELSE 
	 BEGIN
	 		  SELECT (SELECT COUNT(1) FROM @ProductListIdRTR) AS RowsCount   
	 END 
		;

             -- find the all locale values 
         END TRY
         BEGIN CATCH
		    SELECT ERROR_MESSAGE()
                DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ManageProductList_XML @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@LocaleId = '+CAST(@LocaleId AS VARCHAR(50))+',@PimProductId='+@PimProductId+',@IsProductNotIn='+CAST(@IsProductNotIn AS VARCHAR(50))+',@IsCallForAttribute='+CAST(@IsCallForAttribute AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_ManageProductList_XML',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;

         END CATCH;

     END;
GO
if exists(select * from ZnodePortal where StoreCode = 'MaxwellsHardware')
begin 
INSERT INTO ZnodeCMSMessage(LocaleId,Message,IsPublished,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PublishStateId)
SELECT 1,'<p>Recently Viewed Products</p>',NULL,2,GETDATE(),2,GETDATE(),3
WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSMessage WHERE Message='<p>Recently Viewed Products</p>')

insert into ZnodeCMSMessageKey(MessageKey,MessageTag,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 'RecentlyViewProduct',null,2,GETDATE(),2,GETDATE()
where not exists(select * from ZnodeCMSMessageKey where MessageKey = 'RecentlyViewProduct')

INSERT INTO ZnodeCMSPortalMessage(PortalId,CMSMessageKeyId,CMSMessageId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT NULL ,(SELECT TOP 1 CMSMessageKeyId FROM ZnodeCMSMessageKey WHERE MessageKey='RecentlyViewProduct'),
(SELECT TOP 1 CMSMessageId  FROM ZnodeCMSMessage WHERE Message='<p>Recently Viewed Products</p>'),2,GETDATE(),2,GETDATE()
WHERE NOT EXISTS (SELECT * FROM ZnodeCMSPortalMessage WHERE CMSMessageKeyId IN (SELECT CMSMessageKeyId FROM ZnodeCMSMessageKey WHERE MessageKey='RecentlyViewProduct'))
AND NOT EXISTS 
(SELECT * FROM ZnodeCMSPortalMessage WHERE CMSMessageId IN (SELECT CMSMessageId  FROM ZnodeCMSMessage WHERE Message='<p>Recently Viewed Products</p>') and PortalId is null)

insert into ZnodeCMSPortalMessageKeyTag(PortalId,CMSMessageKeyId,TagXML,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select null,(SELECT TOP 1 CMSMessageKeyId FROM ZnodeCMSMessageKey WHERE MessageKey='RecentlyViewProduct'),null,2,GETDATE(),2,GETDATE()
where not exists(select * from ZnodeCMSPortalMessageKeyTag where PortalId is null 
and CMSMessageKeyId = (SELECT TOP 1 CMSMessageKeyId FROM ZnodeCMSMessageKey WHERE MessageKey='RecentlyViewProduct'))
end
go
DELETE FROM ZnodeEmailTemplateMapper WHERE EmailTemplateId in (select EmailTemplateId from ZnodeEmailTemplate where TemplateName = 'IssueGiftCard');
DELETE FROM ZnodeEmailTemplateMapper WHERE EmailTemplateAreasId in (select EmailTemplateAreasId from ZnodeEmailTemplateAreas where Name = 'IssueGiftCard');
DELETE FROM ZnodeEmailTemplateLocale WHERE EmailTemplateId in (select EmailTemplateId from ZnodeEmailTemplate where TemplateName = 'IssueGiftCard');
DELETE FROM ZnodeEmailTemplate WHERE TemplateName = 'IssueGiftCard';
DELETE FROM ZnodeEmailTemplateAreas WHERE Name = 'IssueGiftCard';

DELETE FROM ZnodeEmailTemplateMapper WHERE EmailTemplateId in (select EmailTemplateId from ZnodeEmailTemplate where TemplateName = 'GiftCardCreated');
DELETE FROM ZnodeEmailTemplateMapper WHERE EmailTemplateAreasId in (select EmailTemplateAreasId from ZnodeEmailTemplateAreas where Name = 'GiftCardCreated');
DELETE FROM ZnodeEmailTemplateLocale WHERE EmailTemplateId in (select EmailTemplateId from ZnodeEmailTemplate where TemplateName = 'GiftCardCreated');
DELETE FROM ZnodeEmailTemplate WHERE TemplateName = 'GiftCardCreated';
DELETE FROM ZnodeEmailTemplateAreas WHERE Name = 'GiftCardCreated';
go

INSERT ZnodeImportTemplateMapping(ImportTemplateId,SourceColumnName,TargetColumnName,DisplayOrder,IsActive,IsAllowNull,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT (select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'CustomerTemplate'),
'AccountCode' SourceColumnName,'AccountCode' TargetColumnName,0 DisplayOrder,0 IsActive, 0 IsAllowNull,2 CreatedBy,GETDATE() CreatedDate,2 ModifiedBy,GETDATE() ModifiedDate
WHERE NOT EXISTS(SELECT * FROM ZnodeImportTemplateMapping WHERE ImportTemplateId=(select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'CustomerTemplate') 
	AND SourceColumnName ='AccountCode')

insert into ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName
,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
select 'Text','AccountCode',(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Customer'),0,'Text','RegularExpression',
null,'','',null,2,getdate(),2,getdate(),12
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName ='Text' and AttributeCode = 'AccountCode' 
      and ControlName = 'Text' and ImportHeadId=(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Customer')
	  and ValidationName = 'RegularExpression')

INSERT ZnodeImportTemplateMapping(ImportTemplateId,SourceColumnName,TargetColumnName,DisplayOrder,IsActive,IsAllowNull,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT (select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'CustomerTemplate'),
'DepartmentName' SourceColumnName,'DepartmentName' TargetColumnName,0 DisplayOrder,0 IsActive, 0 IsAllowNull,2 CreatedBy,GETDATE() CreatedDate,2 ModifiedBy,GETDATE() ModifiedDate
WHERE NOT EXISTS(SELECT * FROM ZnodeImportTemplateMapping WHERE ImportTemplateId=(select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'CustomerTemplate') 
	AND SourceColumnName ='DepartmentName')

insert into ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName
,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
select 'Text','DepartmentName',(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Customer'),0,'Text','RegularExpression',
null,'','',null,2,getdate(),2,getdate(),13
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName ='Text' and AttributeCode = 'DepartmentName' 
      and ControlName = 'Text' and ImportHeadId=(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Customer')
	  and ValidationName = 'RegularExpression')

INSERT ZnodeImportTemplateMapping(ImportTemplateId,SourceColumnName,TargetColumnName,DisplayOrder,IsActive,IsAllowNull,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT (select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'CustomerTemplate'),
'RoleName' SourceColumnName,'RoleName' TargetColumnName,0 DisplayOrder,0 IsActive, 0 IsAllowNull,2 CreatedBy,GETDATE() CreatedDate,2 ModifiedBy,GETDATE() ModifiedDate
WHERE NOT EXISTS(SELECT * FROM ZnodeImportTemplateMapping WHERE ImportTemplateId=(select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'CustomerTemplate') 
	AND SourceColumnName ='RoleName')

insert into ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName
,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
select 'Text','RoleName',(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Customer'),0,'Text','RegularExpression',
null,'','',null,2,getdate(),2,getdate(),14
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName ='Text' and AttributeCode = 'RoleName' 
      and ControlName = 'Text' and ImportHeadId=(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Customer')
	  and ValidationName = 'RegularExpression')

insert into ZnodeMessage(MessageCode,MessageType,MessageName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 73,'Text','The value is not associated with any existing Account.',2,getdate(),2,getdate()
where not exists(select * from ZnodeMessage where MessageCode = 73)

insert into ZnodeMessage(MessageCode,MessageType,MessageName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 74,'Text','The value should be either User or Administrator or Manager',2,getdate(),2,getdate()
where not exists(select * from ZnodeMessage where MessageCode = 74)

insert into ZnodeMessage(MessageCode,MessageType,MessageName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 75,'Text','Account Code is mandatory to add a Role Name.',2,getdate(),2,getdate()
where not exists(select * from ZnodeMessage where MessageCode = 75)

insert into ZnodeMessage(MessageCode,MessageType,MessageName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 76,'Text','The value is not associated with the Account.',2,getdate(),2,getdate()
where not exists(select * from ZnodeMessage where MessageCode = 76)

insert into ZnodeMessage(MessageCode,MessageType,MessageName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 77,'Text','Account and Customer should belong to the same Store.',2,getdate(),2,getdate()
where not exists(select * from ZnodeMessage where MessageCode = 77)
go
IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportCustomer')
	DROP PROC Znode_ImportCustomer
GO

CREATE  PROCEDURE [dbo].[Znode_ImportCustomer](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @LocaleId int= 0,@PortalId int ,@CsvColumnString nvarchar(max))
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import SEO Details
	
	-- Unit Testing : 
	--------------------------------------------------------------------------------------

BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max),@AspNetZnodeUserId nvarchar(256),@ASPNetUsersId nvarchar(256),
		@PasswordHash nvarchar(max),@SecurityStamp nvarchar(max),@RoleId nvarchar(256),@IsAllowGlobalLevelUserCreation nvarchar(10)
		Declare @ProfileId  int
		DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		 
		SET @SecurityStamp = '0wVYOZNK4g4kKz9wNs-UHw2'
		SET @PasswordHash = 'APy4Tm1KbRG6oy7h3r85UDh/lCW4JeOi2O2Mfsb3OjkpWTp1YfucMAvvcmUqNaSOlA==';
		SELECT  @RoleId  = Id from AspNetRoles where   NAME = 'Customer'  

		Select @IsAllowGlobalLevelUserCreation = FeatureValues from ZnodeGlobalsetting where FeatureName = 'AllowGlobalLevelUserCreation'

		DECLARE @GetDate datetime= dbo.Fn_GetDate();
		-- Retrive RoundOff Value from global setting 

		-- Three type of import required three table varible for product , category and brand
		DECLARE @InsertCustomer TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, UserName nvarchar(512) ,FirstName	nvarchar(200),
			LastName nvarchar(200), BudgetAmount	numeric,Email	nvarchar(100),PhoneNumber	nvarchar(100),
		    EmailOptIn	bit	,ReferralStatus	nvarchar(40),IsActive	bit	,ExternalId	nvarchar(max),CreatedDate Datetime,
			ProfileName varchar(200),AccountCode nvarchar(100),DepartmentName varchar(300),RoleName nvarchar(256), GUID NVARCHAR(400)
		);

			--SET @SSQL = 'SELECT RowNumber,UserName,FirstName,LastName,BudgetAmount,Email,PhoneNumber,EmailOptIn,IsActive,ExternalId,GUID FROM '+ @TableName;
		SET @SSQL = 'SELECT RowNumber,' + @CsvColumnString + ',GUID FROM '+ @TableName;
		INSERT INTO @InsertCustomer( RowNumber,UserName,FirstName,LastName,Email,PhoneNumber, EmailOptIn,IsActive,ExternalId,CreatedDate,ProfileName,AccountCode,DepartmentName,RoleName,GUID )
		EXEC sys.sp_sqlexec @SSQL;
		
		
		select TOP 1 @ProfileId   =  ProfileId from ZnodePortalprofile where Portalid = @Portalid and IsDefaultRegistedProfile=1
		If( Isnull(@ProfileId ,0) = 0 ) 
		Begin
		
		
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '62', 'Default Portal Profile', '', @NewGUId, 1 , @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
							
				UPDATE ZnodeImportProcessLog
				SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
				WHERE ImportProcessLogId = @ImportProcessLogId;
			

				SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog 
				WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
				Select @SuccessRecordCount = 0

				UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount , 
				TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
				WHERE ImportProcessLogId = @ImportProcessLogId;

				DELETE FROM @InsertCustomer 
				SET @Status = 0;

				COMMIT TRAN A;
				Return 0 
		End
	
	    -- start Functional Validation 

		-----------------------------------------------
		--If @IsAllowGlobalLevelUserCreation = 'false'
		--		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		--			   SELECT '10', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		--			   FROM @InsertCustomer AS ii
		--			    WHERE ltrim(rtrim(ii.UserName)) in 
		--			   (
		--				   SELECT UserName FROM AspNetZnodeUser   where PortalId = @PortalId
		--			   );
		--Else 
		--		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		--			   SELECT '10', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		--			   FROM @InsertCustomer AS ii
		--			   WHERE ltrim(rtrim(ii.UserName)) in 
		--			   (
		--				   SELECT UserName FROM AspNetZnodeUser   
		--			   );
		
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
					   SELECT '35', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
					   FROM @InsertCustomer AS ii
					   WHERE ii.UserName not like '%_@_%_.__%' 
				
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
					   SELECT '30', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
					   FROM @InsertCustomer AS ii
					   WHERE ltrim(rtrim(ii.UserName)) in 
					   (SELECT ltrim(rtrim(UserName))  FROM @InsertCustomer group by ltrim(rtrim(UserName))  having count(*) > 1 )

				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				select '77', 'AccountCode', ii.AccountCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				from @InsertCustomer ii 
				where isnull(ltrim(rtrim(ii.AccountCode)),'') <> ''
				and not exists(select * from ZnodeAccount za
				inner join ZnodePortalAccount zpa on za.AccountId = zpa.AccountId
				where ltrim(rtrim(ii.AccountCode)) = za.AccountCode and zpa.PortalId = @PortalId )

				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '73', 'AccountCode', AccountCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				FROM @InsertCustomer AS ii
				WHERE isnull(ltrim(rtrim(ii.AccountCode)),'') <> '' and ltrim(rtrim(ii.AccountCode)) not in 
				(
					SELECT isnull(AccountCode,'') FROM ZnodeAccount   
				);

				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '74', 'RoleName', RoleName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				FROM @InsertCustomer AS ii
				WHERE ltrim(rtrim(ii.RoleName)) not in ('User','Manager','Administrator') and isnull(ltrim(rtrim(RoleName)),'') <> ''

				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '75', 'RoleName', RoleName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				FROM @InsertCustomer AS ii
				WHERE isnull(ltrim(rtrim(AccountCode)),'') = '' and isnull(ltrim(rtrim(RoleName)),'') <> ''

				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '76', 'DepartmentName', DepartmentName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				FROM @InsertCustomer AS ii
				WHERE isnull(ltrim(rtrim(ii.DepartmentName)),'') <> ''
				and not exists(select * from  ZnodeAccount ZA inner join ZnodeDepartment ZD on ZA.AccountId = ZD.AccountId
					where isnull(ltrim(rtrim(ii.AccountCode)),'') = ltrim(rtrim(za.AccountCode))
					and isnull(ltrim(rtrim(ii.DepartmentName)),'') = ltrim(rtrim(ZD.DepartmentName)))
				

		 UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ UserName - ' + ISNULL(UserName,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN @InsertCustomer IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL

		--Note : Content page import is not required 
		
		-- End Function Validation 	
		-----------------------------------------------
		--- Delete Invalid Data after functional validatin  

		DELETE FROM @InsertCustomer
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
			--AND GUID = @NewGUID
		);


		-- Update Record count in log 
        
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM @InsertCustomer
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount , 
		TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End

		-- Insert Product Data 
				
				
				DECLARE @InsertedAspNetZnodeUser TABLE (AspNetZnodeUserId nvarchar(256) ,UserName nvarchar(512),PortalId int )
				DECLARE @InsertedASPNetUsers TABLE (Id nvarchar(256) ,UserName nvarchar(512))
				DECLARE @InsertZnodeUser TABLE (UserId int,AspNetUserId nvarchar(256),CreatedDate Datetime )

				UPDATE ANU SET 
				ANU.PhoneNumber	= IC.PhoneNumber
				from AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
				INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
				INNER JOIN @InsertCustomer IC ON ANZU.UserName = IC.UserName 
				where case when @IsAllowGlobalLevelUserCreation = 'true' then -1 else Isnull(ANZU.PortalId,0) end = case when @IsAllowGlobalLevelUserCreation = 'true' then -1 else Isnull(@PortalId ,0) end
				----Isnull(ANZU.PortalId,0) = Isnull(@PortalId ,0)

				UPDATE ZU SET 
				ZU.FirstName	= IC.FirstName,
				ZU.LastName		= IC.LastName,
				--ZU.MiddleName	= IC.MiddleName,
				ZU.BudgetAmount = IC.BudgetAmount,
				ZU.Email		= IC.Email,
				ZU.PhoneNumber	= IC.PhoneNumber,
				ZU.EmailOptIn	= Isnull(IC.EmailOptIn,0),
				ZU.IsActive		= IC.IsActive
				--ZU.ExternalId = ExternalId
				from AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
				INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
				INNER JOIN @InsertCustomer IC ON ANZU.UserName = IC.UserName 
				where case when @IsAllowGlobalLevelUserCreation = 'true' then -1 else Isnull(ANZU.PortalId,0) end = case when @IsAllowGlobalLevelUserCreation = 'true' then -1 else Isnull(@PortalId ,0) end
				--where Isnull(ANZU.PortalId,0) = Isnull(@PortalId ,0)

				Insert into AspNetZnodeUser (AspNetZnodeUserId, UserName, PortalId)		
				OUTPUT INSERTED.AspNetZnodeUserId, INSERTED.UserName, INSERTED.PortalId	INTO  @InsertedAspNetZnodeUser 			 
				Select NEWID(),IC.UserName, @PortalId FROM @InsertCustomer IC 
				where Not Exists (Select TOP 1 1  from AspNetZnodeUser ANZ 
				where Isnull(ANZ.PortalId,0) = Isnull(@PortalId,0) AND ANZ.UserName = IC.UserName)

				INSERT INTO ASPNetUsers (Id,Email,EmailConfirmed,PasswordHash,SecurityStamp,PhoneNumber,PhoneNumberConfirmed,TwoFactorEnabled,
				LockoutEndDateUtc,LockOutEnabled,AccessFailedCount,PasswordChangedDate,UserName)
				output inserted.Id, inserted.UserName into @InsertedASPNetUsers
				SELECT NewId(), Email,0 ,@PasswordHash,@SecurityStamp,PhoneNumber,0,0,NULL LockoutEndDateUtc,1 LockoutEnabled,
				0,@GetDate,AspNetZnodeUserId from @InsertCustomer A INNER JOIN @InsertedAspNetZnodeUser  B 
				ON A.UserName = B.UserName
				
				INSERT INTO  ZnodeUser(AspNetUserId,FirstName,LastName,CustomerPaymentGUID,Email,PhoneNumber,EmailOptIn,
				IsActive,ExternalId, CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				OUTPUT Inserted.UserId, Inserted.AspNetUserId,Inserted.CreatedDate into @InsertZnodeUser
				SELECT IANU.Id AspNetUserId ,IC.FirstName,IC.LastName,null CustomerPaymentGUID,IC.Email
				,IC.PhoneNumber,Isnull(IC.EmailOptIn,0),IC.IsActive,IC.ExternalId, @UserId,
				CASE WHEN IC.CreatedDate IS NULL OR IC.CreatedDate = '' THEN  @Getdate ELSE IC.CreatedDate END,@UserId,@Getdate
				from @InsertCustomer IC Inner join 
				@InsertedAspNetZnodeUser IANZU ON IC.UserName = IANZU.UserName  INNER JOIN 
				@InsertedASPNetUsers IANU ON IANZU.AspNetZnodeUserId = IANU.UserName 
				  	     
				INSERT INTO AspNetUserRoles (UserId,RoleId)  Select AspNetUserId, @RoleID from @InsertZnodeUser 
				INSERT INTO ZnodeUserPortal (UserId,PortalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate) 
				SELECT UserId, @PortalId , @UserId, IZU.CreatedDate,@UserId,@Getdate 
				from @InsertZnodeUser IZU
				--Declare @ProfileId  int 
				--select TOP 1 @ProfileId   =  ProfileId from ZnodePortalprofile where Portalid = @Portalid and IsDefaultRegistedProfile=1

				--insert into ZnodeUserProfile (ProfileId,UserId,IsDefault,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				--SELECT @ProfileId  , UserId, 1 , @UserId,CreatedDate,@UserId,@Getdate from @InsertZnodeUser
---------------------------------------------------------------------------------

				declare @Profile table (ProfileId int)

				INSERT INTO ZnodeProfile (ProfileName,ShowOnPartnerSignup,Weighting,TaxExempt,DefaultExternalAccountNo,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ParentProfileId)
				OUTPUT inserted.ProfileId INTO @Profile(ProfileId)
				SELECT Distinct ProfileName, 0, null,0, replace(ltrim(rtrim(ProfileName)),' ','') as DefaultExternalAccountNo, @UserId,@Getdate, @UserId,@Getdate, null as ParentProfileId				
				from @InsertCustomer IC
				where not exists(select * from ZnodeProfile ZP where IC.ProfileName = ZP.ProfileName )
				AND ISNULL(ic.ProfileName,'') <> ''

				INSERT INTO ZnodePortalProfile (PortalId,	ProfileId,	IsDefaultAnonymousProfile,	IsDefaultRegistedProfile,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate)
				SELECT @PortalId, ProfileId, 0 AS IsDefaultAnonymousProfile, 0 AS IsDefaultRegistedProfile, @UserId,@Getdate, @UserId,@Getdate
				from @Profile

				UPDATE ZnodeUserProfile 
				SET ProfileId = COALESCE(ZP.ProfileId,@ProfileId)
				FROM ZnodeUser a
				inner join ASPNetUsers b on (b.Id = a.AspNetUserId)
				inner join AspNetZnodeUser c on (c.AspNetZnodeUserId = b.UserName)
				inner join @InsertCustomer IC on (IC.UserName = c.UserName)
				inner join ZnodeUserProfile u ON u.UserId = a.UserId
				LEFT join ZnodeProfile ZP on IC.ProfileName = ZP.ProfileName
				--where IC.ProfileName <> ''
				
				INSERT INTO ZnodeUserProfile (ProfileId,UserId,IsDefault,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				SELECT COALESCE(ZP.ProfileId,@ProfileId)  , a.UserId, 1 , @UserId,a.CreatedDate,@UserId,@Getdate 
				from ZnodeUser a
				INNER JOIN ASPNetUsers b on (b.Id = a.AspNetUserId)
				inner join AspNetZnodeUser c on (c.AspNetZnodeUserId = b.UserName)
				inner join @InsertCustomer IC on (IC.UserName = c.UserName)
				LEFT join ZnodeProfile ZP on IC.ProfileName = ZP.ProfileName
				where NOT EXISTS (SELECT TOP  1 1 FROM ZnodeUserProfile u WHERE u.UserId = a.UserId )
				AND EXISTS(SELECT * FROM @InsertZnodeUser IZU WHERE A.UserId = IZU.UserId)

				---to update accountid agaist user
				UPDATE ZU SET ZU.AccountId = ZA.AccountId 
				from AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
				INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	 
				INNER JOIN @InsertCustomer IC ON ANZU.UserName = IC.UserName
				INNER JOIN ZnodeAccount ZA ON ZA.AccountCode = IC.AccountCode   
				where Isnull(ANZU.PortalId,0) = Isnull(@PortalId ,0) and isnull(IC.AccountCode,'') <> ''
				
				update ZDU set ZDU.DepartmentId = ZD.DepartmentId, ModifiedBy = @UserId, ModifiedDate = @Getdate
				from ZnodeUser a
				INNER JOIN ASPNetUsers b on (b.Id = a.AspNetUserId)
				inner join AspNetZnodeUser c on (c.AspNetZnodeUserId = b.UserName)
				inner join @InsertCustomer IC on (IC.UserName = c.UserName)
				inner join ZnodeDepartment ZD on IC.DepartmentName = ZD.DepartmentName
				inner join ZnodeDepartmentUser ZDU on ZDU.UserId = a.UserId
				where isnull(IC.DepartmentName,'') <> ''

				insert into ZnodeDepartmentUser(UserId,DepartmentId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				SELECT a.UserId, ZD.DepartmentId, @UserId,a.CreatedDate,@UserId,@Getdate 
				from ZnodeUser a
				INNER JOIN ASPNetUsers b on (b.Id = a.AspNetUserId)
				inner join AspNetZnodeUser c on (c.AspNetZnodeUserId = b.UserName)
				inner join @InsertCustomer IC on (IC.UserName = c.UserName)
				inner join ZnodeDepartment ZD on IC.DepartmentName = ZD.DepartmentName
				where NOT EXISTS (SELECT TOP  1 1 FROM ZnodeDepartmentUser u WHERE u.UserId = a.UserId)
				AND isnull(IC.DepartmentName,'') <> ''
		
				update u set u.RoleId = ZD.Id
				from ZnodeUser a
				INNER JOIN ASPNetUsers b on (b.Id = a.AspNetUserId)
				inner join AspNetZnodeUser c on (c.AspNetZnodeUserId = b.UserName)
				inner join @InsertCustomer IC on (IC.UserName = c.UserName)
				inner join AspNetRoles ZD on IC.RoleName = ZD.Name
				inner join AspNetUserRoles u on u.UserId = b.Id
				where isnull(IC.RoleName,'') <> ''

				insert into AspNetUserRoles(UserId,RoleId)
				SELECT b.Id as ASPNetUserId, ZD.Id as RoleId
				from ZnodeUser a
				INNER JOIN ASPNetUsers b on (b.Id = a.AspNetUserId)
				inner join AspNetZnodeUser c on (c.AspNetZnodeUserId = b.UserName)
				inner join @InsertCustomer IC on (IC.UserName = c.UserName)
				inner join AspNetRoles ZD on IC.RoleName = ZD.Name
				where NOT EXISTS (SELECT TOP  1 1 FROM AspNetUserRoles u WHERE u.UserId = b.Id)
				AND EXISTS(SELECT * FROM @InsertZnodeUser IZU WHERE A.UserId = IZU.UserId)
				AND isnull(IC.RoleName,'') <> ''


		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;
	END TRY
	BEGIN CATCH
	
		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN A;
	END CATCH;
END;  

GO
update ZnodeApplicationSetting set setting = '<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>OmsTemplateId</name>      <headertext>Checkbox</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>TemplateName</name>      <headertext>Template Name</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>y</isallowlink>      <islinkactionurl>/User/EditTemplate</islinkactionurl>      <islinkparamfield>omsTemplateId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>omsTemplateId</controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>Items</name>      <headertext>Items</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>CreatedDate</name>      <headertext>Created Date</headertext>      <width>30</width>      <datatype>Date</datatype>      <columntype>DateTime</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>ModifiedDate</name>      <headertext>Modified Date</headertext>      <width>30</width>      <datatype>Date</datatype>      <columntype>DateTime</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>Edit|Orders|Delete</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Edit|Orders|Delete</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/User/EditTemplate|/User/AddTemplateToCart|/User/DeleteTemplate</manageactionurl>      <manageparamfield>omsTemplateId|omsTemplateId|omsTemplateId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>'
where itemname = 'ZnodeOmsTemplate'
go
Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Order','ApplyVoucher',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Giftcard' and ActionName = 'ApplyVoucher')

insert into ZnodeActionMenu ( MenuId, ActionId, CreatedBy ,CreatedDate, ModifiedBy, ModifiedDate )
select
(select top 1 MenuId from ZnodeMenu where MenuName = 'Orders')
,(select top 1 ActionId from ZnodeActions where ControllerName = 'Order' and ActionName = 'ApplyVoucher') ,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId =
(select top 1 MenuId from ZnodeMenu where MenuName = 'Orders') and ActionId =
(select top 1 ActionId from ZnodeActions where ControllerName = 'Order' and ActionName = 'ApplyVoucher'))

insert into ZnodeActionMenu ( MenuId, ActionId, CreatedBy ,CreatedDate, ModifiedBy, ModifiedDate )
select
(select top 1 MenuId from ZnodeMenu where MenuName = 'OMS')
,(select top 1 ActionId from ZnodeActions where ControllerName = 'Order' and ActionName = 'ApplyVoucher') ,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId =
(select top 1 MenuId from ZnodeMenu where MenuName = 'OMS') and ActionId =
(select top 1 ActionId from ZnodeActions where ControllerName = 'Order' and ActionName = 'ApplyVoucher'))

insert into ZnodeMenuActionsPermission ( MenuId, ActionId, AccessPermissionId, CreatedBy ,CreatedDate, ModifiedBy, ModifiedDate )
select
(select top 1 MenuId from ZnodeMenu where MenuName = 'Orders') ,
(select top 1 ActionId from ZnodeActions where ControllerName = 'Order' and ActionName = 'ApplyVoucher')
,1,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeMenuActionsPermission where MenuId =
(select top 1 MenuId from ZnodeMenu where MenuName = 'Orders') and ActionId =
(select top 1 ActionId from ZnodeActions where ControllerName = 'Order' and ActionName = 'ApplyVoucher'))

insert into ZnodeMenuActionsPermission ( MenuId, ActionId, AccessPermissionId, CreatedBy ,CreatedDate, ModifiedBy, ModifiedDate )
select
(select top 1 MenuId from ZnodeMenu where MenuName = 'OMS') ,
(select top 1 ActionId from ZnodeActions where ControllerName = 'Order' and ActionName = 'ApplyVoucher')
,1,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeMenuActionsPermission where MenuId =
(select top 1 MenuId from ZnodeMenu where MenuName = 'OMS') and ActionId =
(select top 1 ActionId from ZnodeActions where ControllerName = 'Order' and ActionName = 'ApplyVoucher'))

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Order','RemoveVoucher',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Giftcard' and ActionName = 'RemoveVoucher')

insert into ZnodeActionMenu ( MenuId, ActionId, CreatedBy ,CreatedDate, ModifiedBy, ModifiedDate )
select
(select top 1 MenuId from ZnodeMenu where MenuName = 'Orders')
,(select top 1 ActionId from ZnodeActions where ControllerName = 'Order' and ActionName = 'RemoveVoucher') ,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId =
(select top 1 MenuId from ZnodeMenu where MenuName = 'Orders') and ActionId =
(select top 1 ActionId from ZnodeActions where ControllerName = 'Order' and ActionName = 'RemoveVoucher'))

insert into ZnodeActionMenu ( MenuId, ActionId, CreatedBy ,CreatedDate, ModifiedBy, ModifiedDate )
select
(select top 1 MenuId from ZnodeMenu where MenuName = 'OMS')
,(select top 1 ActionId from ZnodeActions where ControllerName = 'Order' and ActionName = 'RemoveVoucher') ,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId =
(select top 1 MenuId from ZnodeMenu where MenuName = 'OMS') and ActionId =
(select top 1 ActionId from ZnodeActions where ControllerName = 'Order' and ActionName = 'RemoveVoucher'))

insert into ZnodeMenuActionsPermission ( MenuId, ActionId, AccessPermissionId, CreatedBy ,CreatedDate, ModifiedBy, ModifiedDate )
select
(select top 1 MenuId from ZnodeMenu where MenuName = 'Orders') ,
(select top 1 ActionId from ZnodeActions where ControllerName = 'Order' and ActionName = 'RemoveVoucher')
,1,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeMenuActionsPermission where MenuId =
(select top 1 MenuId from ZnodeMenu where MenuName = 'Orders') and ActionId =
(select top 1 ActionId from ZnodeActions where ControllerName = 'Order' and ActionName = 'RemoveVoucher'))

insert into ZnodeMenuActionsPermission ( MenuId, ActionId, AccessPermissionId, CreatedBy ,CreatedDate, ModifiedBy, ModifiedDate )
select
(select top 1 MenuId from ZnodeMenu where MenuName = 'OMS') ,
(select top 1 ActionId from ZnodeActions where ControllerName = 'Order' and ActionName = 'RemoveVoucher')
,1,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeMenuActionsPermission where MenuId =
(select top 1 MenuId from ZnodeMenu where MenuName = 'OMS') and ActionId =
(select top 1 ActionId from ZnodeActions where ControllerName = 'Order' and ActionName = 'RemoveVoucher'))
go
IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_GetHighlightDetail')
	DROP PROC Znode_GetHighlightDetail
GO
CREATE PROCEDURE [dbo].[Znode_GetHighlightDetail]
	( @WhereClause nvarchar(max),
	  @Rows int= 10,
	  @PageNo int= 1,
	  @Order_BY varchar(1000)= '', 
	  @RowsCount int= 0 OUT,
	  @LocaleId int= 1,
      @IsAssociated bit= 0,
      @Isdebug bit= 0)
AS
/*
	 Summary :- This Procedure is used to get the highlights details 
	 Unit Testing 
	 begin tran
	 EXEC Znode_GetHighlightDetail '',10,1,'',0,1,0
	 rollback tran
	 
*/
BEGIN
	BEGIN TRY
		SET NOCOUNT ON;

		DECLARE @DefaultLocaleId int= dbo.Fn_GetDefaultLocaleId();
		DECLARE @SeoId varchar(max)= '', @SQL nvarchar(max);
		DECLARE @TBL_HighlightsDetails TABLE
		( 
			Description nvarchar(max), 
			HighlightId int,
			HighlightCode varchar(600),
			HighlightType NVARCHAR(400),
			DisplayOrder int,
			IsActive bit, 
			HighlightLocaleId int,
			MediaPath nvarchar(max), 
			MediaId int,
			Hyperlink nvarchar(max),
			ImageAltTag NVARCHAR(4000),DisplayPopup BIT
		);
		--Get default attributeid for ProductHighlights
		DECLARE @AttributeId int= [dbo].[Fn_GetProductHighlightsAttributeId]();
		DECLARE @TBL_AttributeDefault TABLE
		( 
			PimAttributeId int,
			AttributeDefaultValueCode varchar(600),
			IsEditable bit, 
			AttributeDefaultValue nvarchar(max),
			DisplayOrder INT
		);
	    DECLARE @TBL_HighlightsDetail TABLE
		( 
			 Description nvarchar(max),
			 HighlightId int, 
			 HighlightCode varchar(600),
			 HighlightType NVARCHAR(400),
			 DisplayOrder int,
			 IsActive bit,
			 HighlightLocaleId int, 
			 MediaPath nvarchar(max), 
			 MediaId int, 
			 Hyperlink nvarchar(max),
			 ImageAltTag NVARCHAR(4000),DisplayPopup BIT,
			 HighlightName nvarchar(max), 
			 RowId int, 
			 CountId int
		);

		
		INSERT INTO @TBL_AttributeDefault
		EXEC Znode_GetAttributeDefaultValueLocale @AttributeId, @LocaleId;

		SET @WhereClause = ' '+@WhereClause+CASE
											WHEN @IsAssociated = 1 THEN CASE
																		WHEN @WhereClause = '' THEN ' '
																		ELSE ' AND '
																		END+' EXISTS ( SELECT TOP 1 1 
																						FROM ZnodePimAttributeValue ZAV 
																						INNER JOIN ZnodePimAttribute ZA ON (ZA.PimAttributeId = ZAV.PimAttributeId AND ZA.AttributeCode = ''Highlights'') 
																				        INNER JOIN ZnodePimProductAttributeDefaultValue ZAVL ON (ZAV.PimAttributeValueId= ZAVL.PimAttributeValueId ) 
																		WHERE ( ZAVL.AttributeValue = TMADV.AttributeDefaultValueCode))'
											ELSE CASE
												 WHEN @WhereClause = '' THEN ' 1 = 1  '
												 ELSE ''
												 END
											END;


		WITH Cte_GetHighlightsBothLocale
			 AS (SELECT ZHL.Description, ZH.HighlightId, LocaleId, ZH.HighlightCode,ZPHT.Name HighlightType , ZADV.DisplayOrder, ZH.IsActive, ZHL.HighlightLocaleId, [dbo].[Fn_GetMediaThumbnailMediaPath]( Zm.path ) AS MediaPath
							, ZADV.MediaId, Hyperlink,ImageAltTag,DisplayPopup
				 FROM ZnodeHighlight AS ZH
					  Left Join ZnodePimAttributeDefaultValue ZADV on ZADV.AttributeDefaultValueCode =ZH.HighlightCode
					  LEFT JOIN  ZnodeHighlightLocale AS ZHL ON(ZHL.HighlightId = ZH.HighlightId)					 					  
					  LEFT JOIN ZnodeMedia AS ZM ON(ZM.MediaId = ZADV.MediaId)
					  LEFT JOIN ZnodeHighLightType ZPHT ON (ZPHT.HighlightTypeId = ZH.HighlightTypeId)					  
				 WHERE LocaleId IN( @LocaleId, @DefaultLocaleId )					 
			    ),

			 Cte_HighlightsFirstLocale
			 AS (SELECT Description, HighlightId, LocaleId, HighlightCode,HighlightType, DisplayOrder, IsActive, HighlightLocaleId, MediaPath
			           , MediaId, Hyperlink,ImageAltTag,DisplayPopup
				 FROM Cte_GetHighlightsBothLocale AS CTGBBL
				 WHERE LocaleId = @LocaleId),

			 Cte_HighlightsDefaultLocale
			 AS (
			 SELECT Description, HighlightId, HighlightCode,HighlightType, DisplayOrder, IsActive, HighlightLocaleId, MediaPath
			            , MediaId, Hyperlink,ImageAltTag,DisplayPopup
			 FROM Cte_HighlightsFirstLocale
			 UNION ALL
			 SELECT Description, HighlightId, HighlightCode,HighlightType, DisplayOrder, IsActive, HighlightLocaleId, MediaPath
			             , MediaId, Hyperlink,ImageAltTag,DisplayPopup
			 FROM Cte_GetHighlightsBothLocale AS CTBBL
			 WHERE LocaleId = @DefaultLocaleId AND 
				   NOT EXISTS
			 (
				 SELECT TOP 1 1
				 FROM Cte_HighlightsFirstLocale AS CTBFL
				 WHERE CTBBL.HighlightId = CTBFL.HighlightId
			 ))


			 INSERT INTO @TBL_HighlightsDetails( Description, HighlightId, HighlightCode,HighlightType, DisplayOrder, IsActive, HighlightLocaleId, MediaPath, MediaId, Hyperlink,ImageAltTag,DisplayPopup )
					SELECT Description, HighlightId, HighlightCode,HighlightType, DisplayOrder, IsActive, HighlightLocaleId, MediaPath, MediaId, Hyperlink,ImageAltTag,DisplayPopup
					FROM Cte_HighlightsDefaultLocale AS CTEBD; 

		
		SELECT TBBD.*, TBAD.AttributeDefaultValue AS HighlightName, TBAD.AttributeDefaultValueCode
		INTO #TM_HighlightsLocale
		FROM @TBL_HighlightsDetails AS TBBD 
			 INNER JOIN @TBL_AttributeDefault AS TBAD  ON(TBAD.AttributeDefaultValueCode = TBBD.HighlightCode);
			 		
		SET @SQL = ' 
	            ;With Cte_HighlightsDetails AS 
				(
					SELECT * ,'+[dbo].[Fn_GetPagingRowId]( @Order_BY, 'HighlightId DESC' )+',Count(*)Over() CountId
					FROM #TM_HighlightsLocale TMADV
					WHERE 1=1
					'+[dbo].[Fn_GetFilterWhereClause]( @WhereClause )+'

			    )
				SELECT Description ,HighlightId , HighlightCode,HighlightType , DisplayOrder  ,IsActive   ,HighlightLocaleId 
										,MediaPath ,MediaId ,Hyperlink,ImageAltTag,DisplayPopup
									    ,HighlightName ,RowId  ,CountId 
				FROM Cte_HighlightsDetails
				'+[dbo].[Fn_GetOrderByClause]( @Order_BY, 'HighlightId DESC' )+' ';

		INSERT INTO @TBL_HighlightsDetail( Description, HighlightId, HighlightCode,HighlightType, DisplayOrder, IsActive, HighlightLocaleId, MediaPath, MediaId, Hyperlink,ImageAltTag,DisplayPopup, HighlightName, RowId, CountId )
		EXEC (@SQL);

		SET @RowsCount = ISNULL(( SELECT TOP 1 CountId FROM @TBL_HighlightsDetail), 0);

		SELECT HighlightId, Description, HighlightCode,HighlightType, DisplayOrder, IsActive, HighlightLocaleId, MediaPath, MediaId, Hyperlink,ImageAltTag,DisplayPopup, HighlightName
		FROM @TBL_HighlightsDetail;
	END TRY
	BEGIN CATCH
		 DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetHighlightDetail @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@LocaleId = '+CAST(@LocaleId AS VARCHAR(50))+',@IsAssociated='+CAST(@IsAssociated AS VARCHAR(50))+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetHighlightDetail',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
	END CATCH;
END;

GO
Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'GlobalAttributeFamily','IsFamilyCodeExist',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'IsFamilyCodeExist')

insert into ZnodeActionMenu ( MenuId, ActionId, CreatedBy ,CreatedDate, ModifiedBy, ModifiedDate )
select
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes'))
,(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'IsFamilyCodeExist') ,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId =
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes')) and ActionId =
(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'IsFamilyCodeExist'))


insert into ZnodeMenuActionsPermission ( MenuId, ActionId, AccessPermissionId, CreatedBy ,CreatedDate, ModifiedBy, ModifiedDate )
select
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes')) ,
(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'IsFamilyCodeExist')
,1,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeMenuActionsPermission where MenuId =
(select top 1 MenuId from ZnodeMenu where MenuName = 'Attribute Families'
and ParentMenuId = ( select Top 1 MenuId from ZnodeMenu where MenuName = 'Global Attributes')) and ActionId =
(select top 1 ActionId from ZnodeActions where ControllerName = 'GlobalAttributeFamily' and ActionName = 'IsFamilyCodeExist'))

go
IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportCustomer')
	DROP PROC Znode_ImportCustomer
GO

CREATE  PROCEDURE [dbo].[Znode_ImportCustomer](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @LocaleId int= 0,@PortalId int ,@CsvColumnString nvarchar(max))
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import SEO Details
	
	-- Unit Testing : 
	--------------------------------------------------------------------------------------

BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max),@AspNetZnodeUserId nvarchar(256),@ASPNetUsersId nvarchar(256),
		@PasswordHash nvarchar(max),@SecurityStamp nvarchar(max),@RoleId nvarchar(256),@IsAllowGlobalLevelUserCreation nvarchar(10)
		Declare @ProfileId  int
		DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		 
		SET @SecurityStamp = '0wVYOZNK4g4kKz9wNs-UHw2'
		SET @PasswordHash = 'APy4Tm1KbRG6oy7h3r85UDh/lCW4JeOi2O2Mfsb3OjkpWTp1YfucMAvvcmUqNaSOlA==';
		SELECT  @RoleId  = Id from AspNetRoles where   NAME = 'Customer'  

		Select @IsAllowGlobalLevelUserCreation = FeatureValues from ZnodeGlobalsetting where FeatureName = 'AllowGlobalLevelUserCreation'

		DECLARE @GetDate datetime= dbo.Fn_GetDate();
		-- Retrive RoundOff Value from global setting 

		-- Three type of import required three table varible for product , category and brand
		DECLARE @InsertCustomer TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, UserName nvarchar(512) ,FirstName	nvarchar(200),
			LastName nvarchar(200), BudgetAmount	numeric,Email	nvarchar(100),PhoneNumber	nvarchar(100),
		    EmailOptIn	bit	,ReferralStatus	nvarchar(40),IsActive	bit	,ExternalId	nvarchar(max),CreatedDate Datetime,
			ProfileName varchar(200),AccountCode nvarchar(100),DepartmentName varchar(300),RoleName nvarchar(256), GUID NVARCHAR(400)
		);

			--SET @SSQL = 'SELECT RowNumber,UserName,FirstName,LastName,BudgetAmount,Email,PhoneNumber,EmailOptIn,IsActive,ExternalId,GUID FROM '+ @TableName;
		SET @SSQL = 'SELECT RowNumber,' + @CsvColumnString + ',GUID FROM '+ @TableName;
		INSERT INTO @InsertCustomer( RowNumber,UserName,FirstName,LastName,Email,PhoneNumber, EmailOptIn,IsActive,ExternalId,CreatedDate,ProfileName,AccountCode,DepartmentName,RoleName,GUID )
		EXEC sys.sp_sqlexec @SSQL;
		
		
		select TOP 1 @ProfileId   =  ProfileId from ZnodePortalprofile where Portalid = @Portalid and IsDefaultRegistedProfile=1
		If( Isnull(@ProfileId ,0) = 0 ) 
		Begin
		
		
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '62', 'Default Portal Profile', '', @NewGUId, 1 , @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
							
				UPDATE ZnodeImportProcessLog
				SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
				WHERE ImportProcessLogId = @ImportProcessLogId;
			

				SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog 
				WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
				Select @SuccessRecordCount = 0

				UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount , 
				TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
				WHERE ImportProcessLogId = @ImportProcessLogId;

				DELETE FROM @InsertCustomer 
				SET @Status = 0;

				COMMIT TRAN A;
				Return 0 
		End
	
	    -- start Functional Validation 

		-----------------------------------------------
		--If @IsAllowGlobalLevelUserCreation = 'false'
		--		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		--			   SELECT '10', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		--			   FROM @InsertCustomer AS ii
		--			    WHERE ltrim(rtrim(ii.UserName)) in 
		--			   (
		--				   SELECT UserName FROM AspNetZnodeUser   where PortalId = @PortalId
		--			   );
		--Else 
		--		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		--			   SELECT '10', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		--			   FROM @InsertCustomer AS ii
		--			   WHERE ltrim(rtrim(ii.UserName)) in 
		--			   (
		--				   SELECT UserName FROM AspNetZnodeUser   
		--			   );
		
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
					   SELECT '35', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
					   FROM @InsertCustomer AS ii
					   WHERE ii.UserName not like '%_@_%_.__%' 
				
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
					   SELECT '30', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
					   FROM @InsertCustomer AS ii
					   WHERE ltrim(rtrim(ii.UserName)) in 
					   (SELECT ltrim(rtrim(UserName))  FROM @InsertCustomer group by ltrim(rtrim(UserName))  having count(*) > 1 )

				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				select '77', 'AccountCode', ii.AccountCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				from @InsertCustomer ii 
				where isnull(ltrim(rtrim(ii.AccountCode)),'') <> ''
				and not exists(select * from ZnodeAccount za
				inner join ZnodePortalAccount zpa on za.AccountId = zpa.AccountId
				where ltrim(rtrim(ii.AccountCode)) = za.AccountCode and zpa.PortalId = @PortalId )

				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '73', 'AccountCode', AccountCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				FROM @InsertCustomer AS ii
				WHERE isnull(ltrim(rtrim(ii.AccountCode)),'') <> '' and ltrim(rtrim(ii.AccountCode)) not in 
				(
					SELECT isnull(AccountCode,'') FROM ZnodeAccount   
				);

				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '74', 'RoleName', RoleName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				FROM @InsertCustomer AS ii
				WHERE ltrim(rtrim(ii.RoleName)) not in ('User','Manager','Administrator') and isnull(ltrim(rtrim(RoleName)),'') <> ''

				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '75', 'RoleName', RoleName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				FROM @InsertCustomer AS ii
				WHERE isnull(ltrim(rtrim(AccountCode)),'') = '' and isnull(ltrim(rtrim(RoleName)),'') <> ''

				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '76', 'DepartmentName', DepartmentName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				FROM @InsertCustomer AS ii
				WHERE isnull(ltrim(rtrim(ii.DepartmentName)),'') <> ''
				and not exists(select * from  ZnodeAccount ZA inner join ZnodeDepartment ZD on ZA.AccountId = ZD.AccountId
					where isnull(ltrim(rtrim(ii.AccountCode)),'') = ltrim(rtrim(za.AccountCode))
					and isnull(ltrim(rtrim(ii.DepartmentName)),'') = ltrim(rtrim(ZD.DepartmentName)))
				

		 UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ UserName - ' + ISNULL(UserName,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN @InsertCustomer IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL

		--Note : Content page import is not required 
		
		-- End Function Validation 	
		-----------------------------------------------
		--- Delete Invalid Data after functional validatin  

		DELETE FROM @InsertCustomer
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
			--AND GUID = @NewGUID
		);


		-- Update Record count in log 
        
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM @InsertCustomer
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount , 
		TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End

		-- Insert Product Data 
				
				
				DECLARE @InsertedAspNetZnodeUser TABLE (AspNetZnodeUserId nvarchar(256) ,UserName nvarchar(512),PortalId int )
				DECLARE @InsertedASPNetUsers TABLE (Id nvarchar(256) ,UserName nvarchar(512))
				DECLARE @InsertZnodeUser TABLE (UserId int,AspNetUserId nvarchar(256),CreatedDate Datetime )

				UPDATE ANU SET 
				ANU.PhoneNumber	= IC.PhoneNumber, ANU.LockoutEndDateUtc = case when IC.IsActive = 0 then @GetDate when IC.IsActive = 1 then null else ANU.LockoutEndDateUtc end
				from AspNetZnodeUser ANZU 
				INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
				INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
				INNER JOIN @InsertCustomer IC ON ANZU.UserName = IC.UserName 
				where case when @IsAllowGlobalLevelUserCreation = 'true' then -1 else Isnull(ANZU.PortalId,0) end = case when @IsAllowGlobalLevelUserCreation = 'true' then -1 else Isnull(@PortalId ,0) end
				----Isnull(ANZU.PortalId,0) = Isnull(@PortalId ,0)

				UPDATE ZU SET 
				ZU.FirstName	= IC.FirstName,
				ZU.LastName		= IC.LastName,
				--ZU.MiddleName	= IC.MiddleName,
				ZU.BudgetAmount = IC.BudgetAmount,
				ZU.Email		= IC.Email,
				ZU.PhoneNumber	= IC.PhoneNumber,
				ZU.EmailOptIn	= Isnull(IC.EmailOptIn,0),
				ZU.IsActive		= IC.IsActive
				--ZU.ExternalId = ExternalId
				from AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
				INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
				INNER JOIN @InsertCustomer IC ON ANZU.UserName = IC.UserName 
				where case when @IsAllowGlobalLevelUserCreation = 'true' then -1 else Isnull(ANZU.PortalId,0) end = case when @IsAllowGlobalLevelUserCreation = 'true' then -1 else Isnull(@PortalId ,0) end
				--where Isnull(ANZU.PortalId,0) = Isnull(@PortalId ,0)

				Insert into AspNetZnodeUser (AspNetZnodeUserId, UserName, PortalId)		
				OUTPUT INSERTED.AspNetZnodeUserId, INSERTED.UserName, INSERTED.PortalId	INTO  @InsertedAspNetZnodeUser 			 
				Select NEWID(),IC.UserName, @PortalId FROM @InsertCustomer IC 
				where Not Exists (Select TOP 1 1  from AspNetZnodeUser ANZ 
				where Isnull(ANZ.PortalId,0) = Isnull(@PortalId,0) AND ANZ.UserName = IC.UserName)

				INSERT INTO ASPNetUsers (Id,Email,EmailConfirmed,PasswordHash,SecurityStamp,PhoneNumber,PhoneNumberConfirmed,TwoFactorEnabled,
				LockoutEndDateUtc,LockOutEnabled,AccessFailedCount,PasswordChangedDate,UserName)
				output inserted.Id, inserted.UserName into @InsertedASPNetUsers
				SELECT NewId(), Email,0 ,@PasswordHash,@SecurityStamp,PhoneNumber,0,0,case when A.IsActive = 0 then @GetDate else null end LockoutEndDateUtc,1 LockoutEnabled,
				0,@GetDate,AspNetZnodeUserId from @InsertCustomer A INNER JOIN @InsertedAspNetZnodeUser  B 
				ON A.UserName = B.UserName
				
				INSERT INTO  ZnodeUser(AspNetUserId,FirstName,LastName,CustomerPaymentGUID,Email,PhoneNumber,EmailOptIn,
				IsActive,ExternalId, CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				OUTPUT Inserted.UserId, Inserted.AspNetUserId,Inserted.CreatedDate into @InsertZnodeUser
				SELECT IANU.Id AspNetUserId ,IC.FirstName,IC.LastName,null CustomerPaymentGUID,IC.Email
				,IC.PhoneNumber,Isnull(IC.EmailOptIn,0),IC.IsActive,IC.ExternalId, @UserId,
				CASE WHEN IC.CreatedDate IS NULL OR IC.CreatedDate = '' THEN  @Getdate ELSE IC.CreatedDate END,@UserId,@Getdate
				from @InsertCustomer IC Inner join 
				@InsertedAspNetZnodeUser IANZU ON IC.UserName = IANZU.UserName  INNER JOIN 
				@InsertedASPNetUsers IANU ON IANZU.AspNetZnodeUserId = IANU.UserName 
				  	     
				INSERT INTO AspNetUserRoles (UserId,RoleId)  Select AspNetUserId, @RoleID from @InsertZnodeUser 
				INSERT INTO ZnodeUserPortal (UserId,PortalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate) 
				SELECT UserId, @PortalId , @UserId, IZU.CreatedDate,@UserId,@Getdate 
				from @InsertZnodeUser IZU
				--Declare @ProfileId  int 
				--select TOP 1 @ProfileId   =  ProfileId from ZnodePortalprofile where Portalid = @Portalid and IsDefaultRegistedProfile=1

				--insert into ZnodeUserProfile (ProfileId,UserId,IsDefault,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				--SELECT @ProfileId  , UserId, 1 , @UserId,CreatedDate,@UserId,@Getdate from @InsertZnodeUser
---------------------------------------------------------------------------------

				declare @Profile table (ProfileId int)

				INSERT INTO ZnodeProfile (ProfileName,ShowOnPartnerSignup,Weighting,TaxExempt,DefaultExternalAccountNo,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ParentProfileId)
				OUTPUT inserted.ProfileId INTO @Profile(ProfileId)
				SELECT Distinct ProfileName, 0, null,0, replace(ltrim(rtrim(ProfileName)),' ','') as DefaultExternalAccountNo, @UserId,@Getdate, @UserId,@Getdate, null as ParentProfileId				
				from @InsertCustomer IC
				where not exists(select * from ZnodeProfile ZP where IC.ProfileName = ZP.ProfileName )
				AND ISNULL(ic.ProfileName,'') <> ''

				INSERT INTO ZnodePortalProfile (PortalId,	ProfileId,	IsDefaultAnonymousProfile,	IsDefaultRegistedProfile,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate)
				SELECT @PortalId, ProfileId, 0 AS IsDefaultAnonymousProfile, 0 AS IsDefaultRegistedProfile, @UserId,@Getdate, @UserId,@Getdate
				from @Profile

				UPDATE ZnodeUserProfile 
				SET ProfileId = COALESCE(ZP.ProfileId,@ProfileId)
				FROM ZnodeUser a
				inner join ASPNetUsers b on (b.Id = a.AspNetUserId)
				inner join AspNetZnodeUser c on (c.AspNetZnodeUserId = b.UserName)
				inner join @InsertCustomer IC on (IC.UserName = c.UserName)
				inner join ZnodeUserProfile u ON u.UserId = a.UserId
				LEFT join ZnodeProfile ZP on IC.ProfileName = ZP.ProfileName
				--where IC.ProfileName <> ''
				
				INSERT INTO ZnodeUserProfile (ProfileId,UserId,IsDefault,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				SELECT COALESCE(ZP.ProfileId,@ProfileId)  , a.UserId, 1 , @UserId,a.CreatedDate,@UserId,@Getdate 
				from ZnodeUser a
				INNER JOIN ASPNetUsers b on (b.Id = a.AspNetUserId)
				inner join AspNetZnodeUser c on (c.AspNetZnodeUserId = b.UserName)
				inner join @InsertCustomer IC on (IC.UserName = c.UserName)
				LEFT join ZnodeProfile ZP on IC.ProfileName = ZP.ProfileName
				where NOT EXISTS (SELECT TOP  1 1 FROM ZnodeUserProfile u WHERE u.UserId = a.UserId )
				AND EXISTS(SELECT * FROM @InsertZnodeUser IZU WHERE A.UserId = IZU.UserId)

				---to update accountid agaist user
				UPDATE ZU SET ZU.AccountId = ZA.AccountId 
				from AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
				INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	 
				INNER JOIN @InsertCustomer IC ON ANZU.UserName = IC.UserName
				INNER JOIN ZnodeAccount ZA ON ZA.AccountCode = IC.AccountCode   
				where Isnull(ANZU.PortalId,0) = Isnull(@PortalId ,0) and isnull(IC.AccountCode,'') <> ''
				
				update ZDU set ZDU.DepartmentId = ZD.DepartmentId, ModifiedBy = @UserId, ModifiedDate = @Getdate
				from ZnodeUser a
				INNER JOIN ASPNetUsers b on (b.Id = a.AspNetUserId)
				inner join AspNetZnodeUser c on (c.AspNetZnodeUserId = b.UserName)
				inner join @InsertCustomer IC on (IC.UserName = c.UserName)
				inner join ZnodeDepartment ZD on IC.DepartmentName = ZD.DepartmentName
				inner join ZnodeDepartmentUser ZDU on ZDU.UserId = a.UserId
				where isnull(IC.DepartmentName,'') <> ''

				insert into ZnodeDepartmentUser(UserId,DepartmentId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				SELECT a.UserId, ZD.DepartmentId, @UserId,a.CreatedDate,@UserId,@Getdate 
				from ZnodeUser a
				INNER JOIN ASPNetUsers b on (b.Id = a.AspNetUserId)
				inner join AspNetZnodeUser c on (c.AspNetZnodeUserId = b.UserName)
				inner join @InsertCustomer IC on (IC.UserName = c.UserName)
				inner join ZnodeDepartment ZD on IC.DepartmentName = ZD.DepartmentName
				where NOT EXISTS (SELECT TOP  1 1 FROM ZnodeDepartmentUser u WHERE u.UserId = a.UserId)
				AND isnull(IC.DepartmentName,'') <> ''
		
				update u set u.RoleId = ZD.Id
				from ZnodeUser a
				INNER JOIN ASPNetUsers b on (b.Id = a.AspNetUserId)
				inner join AspNetZnodeUser c on (c.AspNetZnodeUserId = b.UserName)
				inner join @InsertCustomer IC on (IC.UserName = c.UserName)
				inner join AspNetRoles ZD on IC.RoleName = ZD.Name
				inner join AspNetUserRoles u on u.UserId = b.Id
				where isnull(IC.RoleName,'') <> ''

				insert into AspNetUserRoles(UserId,RoleId)
				SELECT b.Id as ASPNetUserId, ZD.Id as RoleId
				from ZnodeUser a
				INNER JOIN ASPNetUsers b on (b.Id = a.AspNetUserId)
				inner join AspNetZnodeUser c on (c.AspNetZnodeUserId = b.UserName)
				inner join @InsertCustomer IC on (IC.UserName = c.UserName)
				inner join AspNetRoles ZD on IC.RoleName = ZD.Name
				where NOT EXISTS (SELECT TOP  1 1 FROM AspNetUserRoles u WHERE u.UserId = b.Id)
				AND EXISTS(SELECT * FROM @InsertZnodeUser IZU WHERE A.UserId = IZU.UserId)
				AND isnull(IC.RoleName,'') <> ''


		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;
	END TRY
	BEGIN CATCH
	
		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN A;
	END CATCH;
END;

GO
insert into ZnodeGlobalAttribute(AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsActive,DisplayOrder, HelpDescription,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,IsSystemDefined,GlobalEntityId)
select (select top 1 AttributeTypeId from ZnodeAttributeType where AttributeTypeName = 'Number'),'AccountVoucherExpirationReminderEmailInDays',0,0,1,500,
'The value indicates that the set number of days prior to the expiration date a reminder email notification will be sent to the customers to use the voucher',2,getdate(),2,getdate(),0,(select top 1 GlobalEntityId from ZnodeGlobalEntity where EntityName = 'Account')
where not exists(select * from ZnodeGlobalAttribute where  AttributeCode = 'AccountVoucherExpirationReminderEmailInDays' AND GlobalEntityId = (select top 1 GlobalEntityId from ZnodeGlobalEntity where EntityName = 'Account'))

insert into ZnodeGlobalAttributeLocale(LocaleId,GlobalAttributeId,AttributeName,Description,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 1,GlobalAttributeId,'Voucher Expiration Reminder Email (In Days)',null,2,getdate(),2,getdate()
from ZnodeGlobalAttribute a
where AttributeCode = 'AccountVoucherExpirationReminderEmailInDays' AND GlobalEntityId = (select top 1 GlobalEntityId from ZnodeGlobalEntity where EntityName = 'Account') and
not exists(select * from ZnodeGlobalAttributeLocale b where a.GlobalAttributeId = b.GlobalAttributeId and b.LocaleId = 1)


insert into ZnodeGlobalAttributeGroup(GroupCode, DisplayOrder, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, IsSystemDefined, GlobalEntityId)
select 'AccountVoucherSettings', NULL, 2, getdate(), 2, getdate(), 0, (select top 1 GlobalEntityId from ZnodeGlobalEntity where EntityName = 'Account')
where not exists(select * from ZnodeGlobalAttributeGroup where GroupCode = 'AccountVoucherSettings' AND GlobalEntityId = (select top 1 GlobalEntityId from ZnodeGlobalEntity where EntityName = 'Account'))


insert into ZnodeGlobalAttributeGroupLocale(LocaleId,GlobalAttributeGroupId,AttributeGroupName,Description,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 1,GlobalAttributeGroupId,'Voucher Settings',null,2,getdate(),2,getdate()
from ZnodeGlobalAttributeGroup a
where a.GroupCode = 'AccountVoucherSettings' AND GlobalEntityId = (select top 1 GlobalEntityId from ZnodeGlobalEntity where EntityName = 'Account') and
not exists(select * from ZnodeGlobalAttributeGroupLocale b where a.GlobalAttributeGroupId = b.GlobalAttributeGroupId and b.LocaleId = 1)

insert into ZnodeGlobalAttributeGroupMapper(GlobalAttributeGroupId,GlobalAttributeId,AttributeDisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select (select top 1 GlobalAttributeGroupId from ZnodeGlobalAttributeGroup where GroupCode = 'AccountVoucherSettings'  AND GlobalEntityId = (select top 1 GlobalEntityId from ZnodeGlobalEntity where EntityName = 'Account')),
      (select top 1 GlobalAttributeId from ZnodeGlobalAttribute where  AttributeCode = 'AccountVoucherExpirationReminderEmailInDays' AND GlobalEntityId = (select top 1 GlobalEntityId from ZnodeGlobalEntity where EntityName = 'Account')),
	  NULL,	2,	getdate(),	2,	getdate()
where not exists(select * from  ZnodeGlobalAttributeGroupMapper where GlobalAttributeGroupId =  (select top 1 GlobalAttributeGroupId from ZnodeGlobalAttributeGroup where GroupCode = 'AccountVoucherSettings' AND GlobalEntityId = (select top 1 GlobalEntityId from ZnodeGlobalEntity where EntityName = 'Account'))
      and  GlobalAttributeId = (select top 1 GlobalAttributeId from ZnodeGlobalAttribute where  AttributeCode = 'AccountVoucherExpirationReminderEmailInDays' AND GlobalEntityId = (select top 1 GlobalEntityId from ZnodeGlobalEntity where EntityName = 'Account')))

INSERT INTO ZnodeGlobalFamilyGroupMapper (GlobalAttributeFamilyId, GlobalAttributeGroupId, AttributeGroupDisplayOrder,CreatedBy, CreatedDate, ModifiedBy, ModifiedDate)
SELECT
(SELECT top 1 GlobalAttributeFamilyId FROM ZnodeGlobalAttributeFamily WHERE FamilyCode = 'Account'),
(SELECT top 1 GlobalAttributeGroupId FROM ZnodeGlobalAttributeGroup WHERE GroupCode = 'AccountVoucherSettings' AND GlobalEntityId = (select top 1 GlobalEntityId from ZnodeGlobalEntity where EntityName = 'Account')), 999,
2, getdate(), 2, getdate()
WHERE NOT EXISTS(select * from ZnodeGlobalFamilyGroupMapper where
GlobalAttributeFamilyId = (SELECT top 1 GlobalAttributeFamilyId FROM ZnodeGlobalAttributeFamily WHERE FamilyCode = 'Account') and
GlobalAttributeGroupId = (SELECT top 1 GlobalAttributeGroupId FROM ZnodeGlobalAttributeGroup WHERE GroupCode = 'AccountVoucherSettings' AND GlobalEntityId = (select top 1 GlobalEntityId from ZnodeGlobalEntity where EntityName = 'Account'))
)


insert into ZnodeGlobalAttributeValidation (GlobalAttributeId,InputValidationId,InputValidationRuleId,Name,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select (select top 1 GlobalAttributeId from ZnodeGlobalAttribute where AttributeCode = 'AccountVoucherExpirationReminderEmailInDays' AND GlobalEntityId = (select top 1 GlobalEntityId from ZnodeGlobalEntity where EntityName = 'Account')),(select top 1 InputValidationId from znodeattributeinputvalidation  where Name = 'AllowDecimals')
,null,'false',2,getdate(),2,getdate()
where not exists(select * from ZnodeGlobalAttributeValidation where GlobalAttributeId = (select top 1 GlobalAttributeId from ZnodeGlobalAttribute where AttributeCode = 'AccountVoucherExpirationReminderEmailInDays' AND GlobalEntityId = (select top 1 GlobalEntityId from ZnodeGlobalEntity where EntityName = 'Account'))
and InputValidationId = (select top 1 InputValidationId from znodeattributeinputvalidation  where Name = 'AllowDecimals'))

insert into ZnodeGlobalAttributeValidation (GlobalAttributeId,InputValidationId,InputValidationRuleId,Name,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select (select top 1 GlobalAttributeId from ZnodeGlobalAttribute where AttributeCode = 'AccountVoucherExpirationReminderEmailInDays' AND GlobalEntityId = (select top 1 GlobalEntityId from ZnodeGlobalEntity where EntityName = 'Account')),(select top 1 InputValidationId from znodeattributeinputvalidation  where Name = 'AllowNegative')
,null,'false',2,getdate(),2,getdate()
where not exists(select * from ZnodeGlobalAttributeValidation where GlobalAttributeId = (select top 1 GlobalAttributeId from ZnodeGlobalAttribute where AttributeCode = 'AccountVoucherExpirationReminderEmailInDays' AND GlobalEntityId = (select top 1 GlobalEntityId from ZnodeGlobalEntity where EntityName = 'Account'))
and InputValidationId = (select top 1 InputValidationId from znodeattributeinputvalidation  where Name = 'AllowNegative'))


insert into ZnodeGlobalAttributeValidation (GlobalAttributeId,InputValidationId,InputValidationRuleId,Name,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select (select top 1 GlobalAttributeId from ZnodeGlobalAttribute where AttributeCode = 'VoucherExpirationReminderEmailInDays' AND GlobalEntityId = (select top 1 GlobalEntityId from ZnodeGlobalEntity where EntityName = 'Store')),(select top 1 InputValidationId from znodeattributeinputvalidation  where Name = 'AllowDecimals')
,null,'false',2,getdate(),2,getdate()
where not exists(select * from ZnodeGlobalAttributeValidation where GlobalAttributeId = (select top 1 GlobalAttributeId from ZnodeGlobalAttribute where AttributeCode = 'VoucherExpirationReminderEmailInDays' AND GlobalEntityId = (select top 1 GlobalEntityId from ZnodeGlobalEntity where EntityName = 'Store'))
and InputValidationId = (select top 1 InputValidationId from znodeattributeinputvalidation  where Name = 'AllowDecimals'))


insert into ZnodeGlobalAttributeValidation (GlobalAttributeId,InputValidationId,InputValidationRuleId,Name,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select (select top 1 GlobalAttributeId from ZnodeGlobalAttribute where AttributeCode = 'VoucherExpirationReminderEmailInDays' AND GlobalEntityId = (select top 1 GlobalEntityId from ZnodeGlobalEntity where EntityName = 'Store')),(select top 1 InputValidationId from znodeattributeinputvalidation  where Name = 'AllowNegative')
,null,'false',2,getdate(),2,getdate()
where not exists(select * from ZnodeGlobalAttributeValidation where GlobalAttributeId = (select top 1 GlobalAttributeId from ZnodeGlobalAttribute where AttributeCode = 'VoucherExpirationReminderEmailInDays' AND GlobalEntityId = (select top 1 GlobalEntityId from ZnodeGlobalEntity where EntityName = 'Store'))
and InputValidationId = (select top 1 InputValidationId from znodeattributeinputvalidation  where Name = 'AllowNegative'))

go
INSERT  INTO ZnodeApplicationSetting (GroupName, ItemName, Setting, ViewOptions, FrontPageName, FrontObjectName, IsCompressed, OrderByFields,
ItemNameWithoutCurrency, CreatedByName, ModifiedByName, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate)
SELECT 'Table', 'ZnodeParentAccountList','<?xml version="1.0" encoding="utf-16"?><columns><column><id>1</id><name>AccountId</name><headertext>Account ID</headertext><width>30</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class>accountidcolumn</Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>2</id><name>Name</name><headertext>Account Name</headertext><width>60</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>y</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class>accountnamecolumn</Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>3</id><name>AccountCode</name><headertext>Account Code</headertext><width>60</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class>accountcodecolumn</Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column></columns>',
'ZnodeParentAccountList', 'ZnodeParentAccountList', 'ZnodeParentAccountList', 0,null, null, null, null, 2, Getdate(), 2, Getdate()
WHERE NOT EXISTS (SELECT * FROM ZnodeApplicationSetting WHERE ItemName = 'ZnodeParentAccountList')
go
IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_GetParentAccountList')
	DROP PROC Znode_GetParentAccountList
GO
CREATE PROCEDURE [dbo].[Znode_GetParentAccountList]
(
    @WhereClause NVARCHAR(MAX),
    @Rows        INT           = 100,
    @PageNo      INT           = 1,
    @Order_BY    VARCHAR(100)  = '',
    @RowsCount   INT OUT
)
AS
--declare @p7 int
--set @p7=4
--exec sp_executesql N'Znode_GetParentAccountList @WhereClause,@Rows,@PageNo,@Order_By,@RowCount OUT',N'@WhereClause nvarchar(30),@Rows int,@PageNo int,@Order_By nvarchar(4000),@RowCount int output',@WhereClause=N'(PortalId in(''1'',''4'',''5'',''6''))',@Rows=50,@PageNo=1,@Order_By=N'',@RowCount=@p7 output
--select @p7
BEGIN
   BEGIN TRY
   SET NOCOUNT ON;

		DECLARE @SQL nvarchar(max)

		SET @SQL= '
		CREATE TABLE #TBL_ParentAccount (AccountId INT, Name NVARCHAR(max), ParentAccountId INT, AccountCode NVARCHAR(max), RowId INT)

		INSERT INTO #TBL_ParentAccount(AccountId, Name, ParentAccountId, AccountCode, RowId)
		SELECT  ZPA.AccountId, ZA.Name, ZA.ParentAccountId, ZA.AccountCode, '+dbo.Fn_GetPagingRowId(@Order_BY,'ZPA.AccountId ASC')+'
		FROM ZnodePortalAccount ZPA
		INNER JOIN ZnodeAccount ZA ON ZPA.AccountId = ZA.AccountId
		'+dbo.Fn_GetWhereClause(@WhereClause, ' WHERE ')+' '+'AND ParentAccountId IS null'+
		' '+' ORDER BY ZA.Name

		SET @Count = (SELECT COUNT(1) FROM #TBL_ParentAccount)

		SELECT TBLPA.AccountId, TBLPA.Name, TBLPA.ParentAccountId, TBLPA.AccountCode from #TBL_ParentAccount TBLPA
		'+ [dbo].[Fn_GetPaginationWhereClause](@PageNo,@Rows)+'
		'
		--print @SQL

		EXEC SP_executesql
		@SQL,N'@Count INT OUT',@Count = @RowsCount OUT;

    END TRY
    BEGIN CATCH

		 DECLARE @Status BIT ;
		 SET @Status = 0;
		 DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetParentAccountList @WhereClause = '''+ISNULL(@WhereClause,'''''')+''',@Rows='+ISNULL(CAST(@Rows AS
		 VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')
             
		 SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
   
		 EXEC Znode_InsertProcedureErrorLog
		 @ProcedureName = 'Znode_GetParentAccountList',
		 @ErrorInProcedure = @Error_procedure,
		 @ErrorMessage = @ErrorMessage,
		 @ErrorLine = @ErrorLine,
		 @ErrorCall = @ErrorCall;

	END CATCH;
END


GO
if not exists(select * from sys.indexes where name = 'Ind_ZnodeAddress_IsDefaultShipping_PostalCode')
begin
CREATE NONCLUSTERED INDEX Ind_ZnodeAddress_IsDefaultShipping_PostalCode
ON [dbo].[ZnodeAddress] ([IsDefaultShipping],[PostalCode])
end
go
if not exists(select * from sys.indexes where name = 'Ind_ZnodeAddress_IsDefaultBilling_PostalCode')
begin
CREATE NONCLUSTERED INDEX Ind_ZnodeAddress_IsDefaultBilling_PostalCode
ON [dbo].[ZnodeAddress] ([IsDefaultBilling],[PostalCode])
end
go
if not exists(select * from sys.indexes where name = 'Ind_ZnodeAddress_IsDefaultBilling_PostalCode')
begin
CREATE NONCLUSTERED INDEX Ind_ZnodeAccountAddress_AddressId
ON [dbo].[ZnodeAccountAddress] ([AddressId])
INCLUDE ([AccountId])
end
go
if not exists(select * from sys.indexes where name = 'Ind_ZnodeAccountAddress_AddressId')
begin
CREATE NONCLUSTERED INDEX Ind_ZnodeAccountAddress_AddressId
ON [dbo].[ZnodeAccountAddress] ([AddressId])
INCLUDE ([AccountId])
end
go
IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_GetPublishCategoryJson')
	DROP PROC Znode_GetPublishCategoryJson
GO

CREATE PROCEDURE [dbo].[Znode_GetPublishCategoryJson]
(   @PublishCatalogId INT,
    @UserId           INT,
    @Status           BIT = 0 OUT,
    @IsDebug          BIT = 0,
	@VersionIdString  VARCHAR(100)= '',
	@LocaleId         TransferID READONLY,
	@RevisionState    VARCHAR(50) = '')
AS 
/*
       Summary:Publish category with their respective products and details 
	            The result is fetched in xml form   
       Unit Testing   
       Begin transaction 
       SELECT * FROM ZnodePIMAttribute 
	   SELECT * FROM ZnodePublishCatalog 
	   SELECT * FROM ZnodePublishCategory WHERE publishCAtegoryID = 167 


       EXEC [Znode_GetPublishCategory] @PublishCatalogId = 3,@VersionId = 0 ,@UserId =2 ,@IsDebug = 1 
     


       Rollback Transaction 
	*/
     BEGIN
         BEGIN TRAN GetPublishCategory;
         BEGIN TRY
             SET NOCOUNT ON;
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @LocaleIdIn INT= 0, @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId(), @Counter INT= 1, @MaxId INT= 0, @CategoryIdCount INT;
             DECLARE @IsActive BIT= [dbo].[Fn_GetIsActiveTrue]();
             DECLARE @AttributeIds VARCHAR(MAX)= '', @PimCategoryIds VARCHAR(MAX)= '', @DeletedPublishCategoryIds VARCHAR(MAX)= '', @DeletedPublishProductIds VARCHAR(MAX);
             --get the pim catalog id 
			 DECLARE @PimCatalogId INT=(SELECT PimCatalogId FROM ZnodePublishcatalog WHERE PublishCatalogId = @PublishCatalogId); 

             DECLARE @TBL_AttributeIds TABLE
             (PimAttributeId       INT,
              ParentPimAttributeId INT,
              AttributeTypeId      INT,
              AttributeCode        VARCHAR(600),
              IsRequired           BIT,
              IsLocalizable        BIT,
              IsFilterable         BIT,
              IsSystemDefined      BIT,
              IsConfigurable       BIT,
              IsPersonalizable     BIT,
              DisplayOrder         INT,
              HelpDescription      VARCHAR(MAX),
              IsCategory           BIT,
              IsHidden             BIT,
              CreatedDate          DATETIME,
              ModifiedDate         DATETIME,
              AttributeName        NVARCHAR(MAX),
              AttributeTypeName    VARCHAR(300)
             );
             DECLARE @TBL_AttributeDefault TABLE
             (PimAttributeId            INT,
              AttributeDefaultValueCode VARCHAR(100),
              IsEditable                BIT,
              AttributeDefaultValue     NVARCHAR(MAX)
			  ,DisplayOrder   INT
             );
             DECLARE @TBL_AttributeValue TABLE
             (PimCategoryAttributeValueId INT,
              PimCategoryId               INT,
              CategoryValue               NVARCHAR(MAX),
              AttributeCode               VARCHAR(300),
              PimAttributeId              INT
             );
             DECLARE @TBL_LocaleIds TABLE
             (RowId     INT IDENTITY(1, 1),
              LocaleId  INT,
              IsDefault BIT
             );
             DECLARE @TBL_PimCategoryIds TABLE
             (PimCategoryId       INT,
              PimParentCategoryId INT,
              DisplayOrder        INT,
              ActivationDate      DATETIME,
              ExpirationDate      DATETIME,
              CategoryName        NVARCHAR(MAX),
              ProfileId           VARCHAR(MAX),
              IsActive            BIT,
			  PimCategoryHierarchyId INT,
			  ParentPimCategoryHierarchyId INT ,
			   CategoryCode  NVARCHAR(MAX)             );


             DECLARE @TBL_PublishPimCategoryIds TABLE
             (PublishCategoryId       INT,
              PimCategoryId           INT,
              PublishProductId        varchar(max),
              PublishParentCategoryId INT ,
			  PimCategoryHierarchyId INT ,parentPimCategoryHierarchyId INT,
			  RowIndex INT
             );
             DECLARE @TBL_DeletedPublishCategoryIds TABLE
             (PublishCategoryId INT,
              PublishProductId  INT
             );
             DECLARE @TBL_CategoryXml TABLE
             (PublishCategoryId INT,
              CategoryXml       XML,
              LocaleId          INT
             );
             INSERT INTO @TBL_LocaleIds
             (LocaleId,
              IsDefault
             )
			  -- here collect all locale ids
             SELECT LocaleId,IsDefault FROM ZnodeLocale MT WHERE IsActive = @IsActive
			  AND (EXISTS (SELECT TOP 1 1  FROM @LocaleId RT WHERE RT.Id = MT.LocaleId )
			 OR NOT EXISTS (SELECT TOP 1 1 FROM @LocaleId ));

			IF OBJECT_ID('tempdb..#VesionIds') is not null
			DROP TABLE #VesionIds
  				 
			 SELECT PV.* into #VesionIds FROM ZnodePublishVersionEntity PV Inner join Split(@VersionIdString,',') S ON PV.VersionId = S.Item
		

			 if object_id('tempdb..#CategoryData')is not null
				drop table #CategoryData

		    ------------for CategoryCode update
			SELECT ZPCAL.CategoryValue as CategoryCode,MAX(ZPC.PublishCategoryId) as PublishCategoryId ,ZPCA.PimCategoryId, ZPoC.PortalId
			INTO #CategoryData
			FROM ZnodePimCategoryAttributeValue ZPCA
			INNER JOIN ZnodePimCategoryAttributeValueLocale ZPCAL on ZPCA.PimCategoryAttributeValueId = ZPCAL.PimCategoryAttributeValueId
			INNER JOIN ZnodePimAttribute ZPA ON ZPCA.PimAttributeId = ZPA.PimAttributeId
			INNER JOIN ZnodePublishCategory ZPC on ZPCA.PimCategoryId = ZPC.PimCategoryId
			INNER JOIN ZnodePortalCatalog ZPoC on ZPC.PublishCatalogId = ZPoC.PublishCatalogId
			where ZPA.AttributeCode = 'CategoryCode' AND ZPC.PublishCatalogId = @PublishCatalogId
			AND EXISTS(SELECT * FROM ZnodeCMSWidgetCategory ZCWC WHERE ZPC.PublishCategoryId = ZCWC.PublishCategoryId )
			group by ZPCAL.CategoryValue, ZPCA.PimCategoryId, ZPoC.PortalId

			UPDATE ZCWC SET ZCWC.CategoryCode = CD.CategoryCode
			from ZnodeCMSWidgetCategory ZCWC
			INNER JOIN #CategoryData CD ON ZCWC.PublishCategoryId = CD.PublishCategoryId and ZCWC.CMSMappingId = CD.PortalId
			where ZCWC.TypeOFMapping = 'PortalMapping'
			----------

             INSERT INTO @TBL_PimCategoryIds(PimCategoryId,PimParentCategoryId,DisplayOrder,ActivationDate,ExpirationDate,IsActive,PimCategoryHierarchyId,ParentPimCategoryHierarchyId)
             SELECT DISTINCT ZPCH.PimCategoryId,ZPCH2.PimCategoryId  PimParentCategoryId,ZPCH.DisplayOrder,ZPCH.ActivationDate,ZPCH.ExpirationDate,ZPCH.IsActive ,ZPCH.PimCategoryHierarchyId,ZPCH.ParentPimCategoryHierarchyId
			 FROM ZnodePimCategoryHierarchy AS ZPCH 
			 LEFT JOIN ZnodePimCategoryHierarchy AS ZPCH2 ON (ZPCH2.PimCategoryHierarchyId = ZPCH. ParentPimCategoryHierarchyId ) 
			 WHERE ZPCH.PimCatalogId = @PimCatalogId; 
             -- AND IsActive = @IsActive ; -- As discussed with @anup active flag maintain on demo site 23/12/2016
			 --	SELECT * FROM @TBL_PimCategoryIds
			 -- here is find the deleted publish category id on basis of publish catalog
             INSERT INTO @TBL_DeletedPublishCategoryIds(PublishCategoryId,PublishProductId)
             SELECT ZPC.PublishCategoryId,ZPCP.PublishProductId 
			 FROM ZnodePublishCategoryProduct ZPCP
             INNER JOIN ZnodePublishCategory AS ZPC ON(ZPCP.PublishCategoryId = ZPC.PublishCategoryId AND ZPCP.PublishCatalogId = ZPC.PublishCatalogId)                                                  
             INNER JOIN ZnodePublishProduct ZPP ON(zpp.PublishProductId = zpcp.PublishProductId AND zpp.PublishCatalogId = zpcp.PublishCatalogId)
             INNER JOIN ZnodePublishCatalog ZPCC ON(ZPCC.PublishCatalogId = ZPCP.PublishCatalogId)
             WHERE ZPC.PublishCatalogId = @PublishCataLogId 
			 AND NOT EXISTS(SELECT TOP 1 1 FROM ZnodePimCategoryHierarchy AS TBPC WHERE TBPC.PimCategoryId = ZPC.PimCategoryId AND TBPC.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId
			 AND TBPC.PimCatalogId = ZPCC.PimCatalogId);

			 -- here is find the deleted publish category id on basis of publish catalog
             SET @DeletedPublishCategoryIds = ISNULL(SUBSTRING((SELECT ','+CAST(PublishCategoryId AS VARCHAR(50)) FROM @TBL_DeletedPublishCategoryIds AS ZPC
                                              GROUP BY ZPC.PublishCategoryId FOR XML PATH('') ), 2, 4000), '');
			 -- here is find the deleted publish category id on basis of publish catalog
             SET @DeletedPublishProductIds = '';
			 -- Delete the publish category id 
	
	        --   SELECT * FROM @TBL_DeletedPublishCategoryIds 
				

             EXEC Znode_DeletePublishCatalog @PublishCatalogIds = @PublishCatalogId,@PublishCategoryIds = @DeletedPublishCategoryIds,@PublishProductIds = @DeletedPublishProductIds; 

			
             MERGE INTO ZnodePublishCategory TARGET USING  @TBL_PimCategoryIds SOURCE ON
			 (
			 TARGET.PimCategoryId = SOURCE.PimCategoryId 
			 AND TARGET.PublishCatalogId = @PublishCataLogId 
			 AND TARGET.PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId
			 )
			 WHEN MATCHED THEN UPDATE SET TARGET.PimParentCategoryId = SOURCE.PimParentCategoryId,TARGET.CreatedBy = @UserId,TARGET.CreatedDate = @GetDate,
             TARGET.ModifiedBy = @UserId,TARGET.ModifiedDate = @GetDate,PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId,ParentPimCategoryHierarchyId=SOURCE.ParentPimCategoryHierarchyId
             WHEN NOT MATCHED THEN INSERT(PimCategoryId,PublishCatalogId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PimCategoryHierarchyId,ParentPimCategoryHierarchyId) 
			 VALUES(SOURCE.PimCategoryId,@PublishCatalogId,@UserId,@GetDate,@UserId,@GetDate,SOURCE.PimCategoryHierarchyId,SOURCE.ParentPimCategoryHierarchyId)
             OUTPUT INSERTED.PublishCategoryId,INSERTED.PimCategoryId,INSERTED.PimCategoryHierarchyId,INSERTED.parentPimCategoryHierarchyId INTO @TBL_PublishPimCategoryIds(PublishCategoryId,PimCategoryId,PimCategoryHierarchyId,parentPimCategoryHierarchyId);
			
    --         UPDATE TBPC SET PublishParentCategoryId = TBPCS.PublishCategoryId 
			 --FROM @TBL_PublishPimCategoryIds TBPC
    --         INNER JOIN @TBL_PimCategoryIds TBC ON(TBC.PimCategoryId = TBPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId)
    --         INNER JOIN @TBL_PublishPimCategoryIds TBPCS ON(TBC.PimCategoryHierarchyId = TBPCS.parentPimCategoryHierarchyId  ) 
			 --WHERE TBC.parentPimCategoryHierarchyId IS NOT NULL;
           
		     -- here update the publish parent category id
             UPDATE ZPC SET [PimParentCategoryId] =TBPC.[PimCategoryId] 
			 FROM ZnodePublishCategory ZPC
             INNER JOIN ZnodePublishCategory TBPC ON(ZPC.parentPimCategoryHierarchyId = TBPC.PimCategoryHierarchyId  ) 
			 WHERE ZPC.PublishCatalogId =@PublishCatalogId
			 AND ZPC.ParentPimCategoryHierarchyId IS NOT NULL
			 AND TBPC.PublishCatalogId =@PublishCatalogId
			 ;
			 UPDATE a
			 SET  a.PublishParentCategoryId = b.PublishCategoryId
			FROM ZnodePublishCategory a 
			INNER JOIN ZnodePublishCategory b   ON (a.parentpimCategoryHierarchyId = b.pimCategoryHierarchyId)
			WHERE a.parentpimCategoryHierarchyId IS NOT NULL 
			AND a.PublishCatalogId =@PublishCatalogId
			AND b.PublishCatalogId =@PublishCatalogId

			UPDATE a set a.PublishParentCategoryId = NULL
			FROM ZnodePublishCategory a 
			WHERE a.parentpimCategoryHierarchyId IS NULL AND PimParentCategoryId IS NULL
			AND a.PublishCatalogId = @PublishCatalogId AND a.PublishParentCategoryId IS NOT NULL


             SET @MaxId =(SELECT MAX(RowId)FROM @TBL_LocaleIds);
			 DECLARE @TransferID TRANSFERID 
			 INSERT INTO @TransferID 
			 SELECT DISTINCT  PimCategoryId
			 FROM @TBL_PublishPimCategoryIds 

             SET @PimCategoryIds = SUBSTRING((SELECT ','+CAST(PimCategoryId AS VARCHAR(50)) FROM @TBL_PublishPimCategoryIds FOR XML PATH('')), 2, 4000);
			 
            
			
			 WHILE @Counter <= @MaxId -- Loop on Locale id 
                 BEGIN
                     SET @LocaleIdIn =(SELECT LocaleId FROM @TBL_LocaleIds WHERE RowId = @Counter);
                   
				     SET @AttributeIds = SUBSTRING((SELECT ','+CAST(ZPCAV.PimAttributeId AS VARCHAR(50)) FROM ZnodePimCategoryAttributeValue ZPCAV 
										 WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimCategoryIds TBPC WHERE TBPC.PimCategoryId = ZPCAV.PimCategoryId) GROUP BY ZPCAV.PimAttributeId FOR XML PATH('')), 2, 4000);
                
				     SET @CategoryIdCount =(SELECT COUNT(1) FROM @TBL_PimCategoryIds);

                     INSERT INTO @TBL_AttributeIds (PimAttributeId,ParentPimAttributeId,AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable,IsSystemDefined,
					 IsConfigurable,IsPersonalizable,DisplayOrder,HelpDescription,IsCategory,IsHidden,CreatedDate,ModifiedDate,AttributeName,AttributeTypeName)
                     EXEC [Znode_GetPimAttributesDetails] @AttributeIds,@LocaleIdIn;

                     INSERT INTO @TBL_AttributeDefault (PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder)
                     EXEC [dbo].[Znode_GetAttributeDefaultValueLocale] @AttributeIds,@LocaleIdIn;

                     INSERT INTO @TBL_AttributeValue (PimCategoryAttributeValueId,PimCategoryId,CategoryValue,AttributeCode,PimAttributeId)
                     EXEC [dbo].[Znode_GetCategoryAttributeValueId] @TransferID,@AttributeIds,@LocaleIdIn;

					-- SELECT * FROM @TBL_AttributeValue WHERE PimCategoryId = 281

                     ;WITH Cte_UpdateDefaultAttributeValue
                     AS (
					  SELECT TBAV.PimCategoryId,TBAV.PimAttributeId,SUBSTRING((SELECT ','+AttributeDefaultValue FROM @TBL_AttributeDefault TBD WHERE TBAV.PimAttributeId = TBD.PimAttributeId
						AND EXISTS(SELECT TOP 1 1 FROM Split(TBAV.CategoryValue, ',') SP WHERE SP.Item = TBD.AttributeDefaultValueCode)FOR XML PATH('')), 2, 4000) DefaultCategoryAttributeValue
						FROM @TBL_AttributeValue TBAV WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_AttributeDefault TBAD WHERE TBAD.PimAttributeId = TBAV.PimAttributeId))
					 
					 -- update the default value with locale 
                     UPDATE TBAV SET CategoryValue = CTUDFAV.DefaultCategoryAttributeValue FROM @TBL_AttributeValue TBAV 
					 INNER JOIN Cte_UpdateDefaultAttributeValue CTUDFAV ON(CTUDFAV.PimCategoryId = TBAV.PimCategoryId AND CTUDFAV.PimAttributeId = TBAV.PimAttributeId)
					 WHERE CategoryValue IS NULL ;
					 
					 -- here is update the media path  
                     ;WITH Cte_productMedia
                     AS (
							SELECT TBA.PimCategoryId,TBA.PimAttributeId,
							Isnull(
							(STUFF((SELECT ','+zm.PATH FROM ZnodeMedia ZM WHERE EXISTS
							(SELECT TOP 1 1 FROM dbo.split(TBA.CategoryValue, ',') SP
							WHERE SP.Item = CAST(Zm.MediaId AS VARCHAR(50)))FOR XML PATH(''),Type).value('.', 'varchar(max)'), 1, 1,'')) ,'no-image.png')
							CategoryValue
							FROM @TBL_AttributeValue TBA WHERE EXISTS(SELECT TOP 1 1 FROM [dbo].[Fn_GetProductMediaAttributeId]() FNMA WHERE FNMA.PImAttributeId = TBA.PimATtributeId)
						)
					 UPDATE TBAV SET CategoryValue = CTCM.CategoryValue 
					 FROM @TBL_AttributeValue TBAV 
					 INNER JOIN Cte_productMedia CTCM ON(CTCM.PimCategoryId = TBAV.PimCategoryId
					 AND CTCM.PimAttributeId = TBAV.PimAttributeId);
					 					
					;WITH Cte_PublishProductIds
					 AS (SELECT TBPC.PublishcategoryId,SUBSTRING((SELECT ','+CAST(PublishProductId AS VARCHAR(50))
					  FROM ZnodePublishCategoryProduct ZPCP 
					  WHERE ZPCP.PublishCategoryId = TBPC.publishCategoryId
					  AND ZPCP.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId
                      AND ZPCP.PublishCatalogId = @PublishCatalogId FOR XML PATH('')), 2, 8000) PublishProductId ,PimCategoryHierarchyId
					  FROM @TBL_PublishPimCategoryIds TBPC)
					 UPDATE TBPPC SET PublishProductId = CTPP.PublishProductId FROM @TBL_PublishPimCategoryIds TBPPC INNER JOIN Cte_PublishProductIds CTPP ON(TBPPC.PublishCategoryId = CTPP.PublishCategoryId 
					 AND TBPPC.PimCategoryHierarchyId = CTPP.PimCategoryHierarchyId);

                     ;WITH Cte_CategoryProfile
                     AS (
							SELECT PimCategoryId,ZPCC.PimCategoryHierarchyId,
								SUBSTRING(( SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
								FROM ZnodeProfile ZPC 
								INNER JOIN ZnodePimCategoryHierarchy ZPRCC ON(ZPRCC.PimCategoryHierarchyId = ZPCC.PimCategoryHierarchyId
								AND ZPRCC.PimCatalogId = ZPC.PimCatalogId) 
								WHERE ZPC.PimCatalogId = ZPCC.PimCatalogId FOR XML PATH('')), 2, 4000) ProfileIds
						   FROM ZnodePimCategoryHierarchy ZPCC 
						   WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimCategoryIds TBPC 
						   WHERE TBPC.PimCategoryId = ZPCC.PimCategoryId AND ZPCC.PimCatalogId = @PimCatalogId 
						   AND ZPCC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId)
						 )                          
						UPDATE TBPC SET TBPC.ProfileId = CTCP.ProfileIds FROM @TBL_PimCategoryIds TBPC 
						LEFT JOIN Cte_CategoryProfile CTCP ON(CTCP.PimCategoryId = TBPC.PimCategoryId AND CTCP.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId );
                         
				     
					 UPDATE TBPC SET TBPC.CategoryName = TBAV.CategoryValue FROM @TBL_PimCategoryIds TBPC INNER JOIN @TBL_AttributeValue TBAV ON(TBAV.PimCategoryId = TBPC.PimCategoryId
                     AND EXISTS(SELECT TOP 1 1 FROM [dbo].[Fn_GetCategoryNameAttribute]() FNGCNA WHERE FNGCNA.PimAttributeId = TBAV.PimAttributeId));


					  UPDATE TBPC SET TBPC.CategoryCode = TBAV.CategoryValue FROM @TBL_PimCategoryIds TBPC INNER JOIN @TBL_AttributeValue TBAV ON(TBAV.PimCategoryId = TBPC.PimCategoryId
					 AND EXISTS(SELECT TOP 1 1 FROM dbo.Fn_GetCategoryCodeAttribute() FNGCNA WHERE FNGCNA.PimAttributeId = TBAV.PimAttributeId)
					 )

					 -- here update the publish category details 
                     ;WITH Cte_UpdateCategoryDetails
                     AS (
					 SELECT TBC.PimCategoryId,PublishCategoryId,CategoryName, TBPPC.PimCategoryHierarchyId,CategoryCode
					 FROM @TBL_PimCategoryIds TBC
                     INNER JOIN @TBL_PublishPimCategoryIds TBPPC ON(TBC.PimCategoryId = TBPPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPPC.PimCategoryHierarchyId)
					 )						
                     MERGE INTO ZnodePublishCategoryDetail TARGET USING Cte_UpdateCategoryDetails SOURCE ON(TARGET.PublishCategoryId = SOURCE.PublishCategoryId
					 AND TARGET.LocaleId = @LocaleIdIn)
                     WHEN MATCHED THEN UPDATE SET PublishCategoryId = SOURCE.PublishcategoryId,PublishCategoryName = SOURCE.CategoryName,LocaleId = @LocaleIdIn,ModifiedBy = @userId,ModifiedDate = @GetDate,CategoryCode=SOURCE.CategoryCode
                     WHEN NOT MATCHED THEN INSERT(PublishCategoryId,PublishCategoryName,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,CategoryCode) VALUES
                     (SOURCE.PublishCategoryId,SOURCE.CategoryName,@LocaleIdIn,@userId,@GetDate,@userId,@GetDate,SOURCE.CategoryCode);

					 IF OBJECT_ID('tempdb..#Index') is not null
					BEGIN 
						DROP TABLE #Index
					END 
					CREATE TABLE #Index (RowIndex int ,PimCategoryId int , PimCategoryHierarchyId  int,ParentPimCategoryHierarchyId int )		
					insert into  #Index ( RowIndex ,PimCategoryId , PimCategoryHierarchyId,ParentPimCategoryHierarchyId)
					SELECT CAST(Row_number() OVER (Partition By TBL.PimCategoryId Order by ISNULL(TBL.PimCategoryId,0) desc) AS VARCHAR(100))
					,ZPC.PimCategoryId, ZPC.PimCategoryHierarchyId, ZPC.ParentPimCategoryHierarchyId
					FROM @TBL_PublishPimCategoryIds TBL
					INNER JOIN ZnodePublishCategory ZPC ON (TBL.PimCategoryId = ZPC.PimCategoryId AND TBL.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId)
					WHERE ZPC.PublishCatalogId = @PublishCatalogId

					UPDATE TBP SET  TBP.[RowIndex]=  IDX.RowIndex 
					FROM @TBL_PublishPimCategoryIds TBP INNER JOIN #Index IDX ON (IDX.PimCategoryId = TBP.PimCategoryId AND IDX.PimCategoryHierarchyId = TBP.PimCategoryHierarchyId)  
					
					INSERT INTO ZnodePublishCategoryEntity
					(
						 VersionId,ZnodeCategoryId,
						 Name,CategoryCode,
						 ZnodeCatalogId,CatalogName,ZnodeParentCategoryIds,
						 ProductIds,LocaleId,IsActive,DisplayOrder,
						 Attributes,
						 ActivationDate,ExpirationDate,CategoryIndex
					)
					SELECT ISNULL(TYU.VersionId,'') VersionId,TBPC.PublishCategoryId ZnodeCategoryId,
						   ISNULL(CategoryName, '') Name,ISNULL(CategoryCode,'') CategoryCode,
						   ZPC.PublishCatalogId, ZPC.CatalogName ,
						   Isnull('[' + THR.PublishParentCategoryId + ']',NULL) TempZnodeParentCategoryIds,
						   ISNULL('[' + TBPC.PublishProductId + ']', NULL)  TempProductIds,
						   @LocaleIdIn LocaleId,TBC.IsActive,ISNULL(DisplayOrder, '0') DisplayOrder,
						      ISNULL(
									(
										SELECT TBA.AttributeCode,TBA.AttributeName,ISNULL(IsUseInSearch, 0) IsUseInSearch,
										ISNULL(IsHtmlTags, 0) IsHtmlTags,ISNULL(IsComparable, 0) IsComparable,
										TBAV.CategoryValue AttributeValues,TBA.AttributeTypeName 
										FROM @TBL_AttributeValue TBAV
										INNER JOIN @TBL_AttributeIds TBA ON(TBAV.PimAttributeId = TBA.PimAttributeId) 
										LEFT JOIN ZnodePimFrontendProperties ZPFP ON(ZPFP.PimAttributeId = TBA.PimAttributeId)
										WHERE TBC.PimCategoryId = TBAV.PimCategoryId  
										FOR JSON PATH) 
									, '[]')  ,
							ActivationDate,ExpirationDate,ISNULL(TBPC.RowIndex,1) CategoryIndex
						   --,ProfileId TempProfileIds
						FROM @TBL_PublishPimCategoryIds TBPC 
						INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId= @PublishCatalogId)
						LEFT JOIN #VesionIds TYU ON (TYU.ZnodeCatalogId = @PublishCatalogId AND TYU.LocaleId = @LocaleIdIn)
						INNER JOIN ZnodePublishCAtegory THR ON (THR.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId AND THR.PimCategoryId = TBPC.PimCategoryId AND THR.PublishCatalogId= @PublishCatalogId )
						INNER JOIN @TBL_PimCategoryIds TBC ON(TBC.PimCategoryId = TBPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId) 
						
					
				     DELETE FROM @TBL_AttributeIds;
                     DELETE FROM @TBL_AttributeDefault;
                     DELETE FROM @TBL_AttributeValue;
                     SET @Counter = @Counter + 1;
                 END;
	
			 UPDATE ZnodePublishCatalogLog 
			 SET PublishCategoryId = (SELECT COunt(DISTINCT PimCategoryId ) 
			 FROM @TBL_PublishPimCategoryIds WHERE PublishCatalogId =@PublishCatalogId), 
			 IsCategoryPublished = 1 
			 WHERE EXISTS (SELECT TOP 1 1 FROM #VesionIds TY 
			 WHERE TY.VersionId =  ZnodePublishCatalogLog.PublishCatalogLogId ) ;
			 ------------for CategoryPublishId update
			 SELECT ZPCAL.CategoryValue as CategoryCode,MAX(ZPC.PublishCategoryId) as PublishCategoryId ,ZPCA.PimCategoryId,ZPoC.PortalId
			 INTO #CategoryData1
			 FROM ZnodePimCategoryAttributeValue ZPCA
			 INNER JOIN ZnodePimCategoryAttributeValueLocale ZPCAL on ZPCA.PimCategoryAttributeValueId = ZPCAL.PimCategoryAttributeValueId
			 INNER JOIN ZnodePimAttribute ZPA ON ZPCA.PimAttributeId = ZPA.PimAttributeId
			 INNER JOIN ZnodePublishCategory ZPC on ZPCA.PimCategoryId = ZPC.PimCategoryId
			 INNER JOIN ZnodePortalCatalog ZPoC on ZPC.PublishCatalogId = ZPoC.PublishCatalogId
			 where ZPA.AttributeCode = 'CategoryCode' AND ZPC.PublishCatalogId = @PublishCatalogId
			 group by ZPCAL.CategoryValue, ZPCA.PimCategoryId, ZPoC.PortalId

			 UPDATE ZCWC SET ZCWC.PublishCategoryId = CD.PublishCategoryId
			 from ZnodeCMSWidgetCategory ZCWC
			 INNER JOIN #CategoryData1 CD ON ZCWC.CategoryCode = CD.CategoryCode and ZCWC.CMSMappingId = CD.PortalId
			 where ZCWC.TypeOFMapping = 'PortalMapping'
			 if (@RevisionState = 'PREVIEW')
				UPDATE ZnodePimCategory SET PublishStateId = Dbo.Fn_GetPublishStateIdForPreview() WHERE pimCategoryId IN (SELECT PimCategoryId FROM @TBL_PublishPimCategoryIds)
			 Else 
				UPDATE ZnodePimCategory SET PublishStateId = Dbo.Fn_GetPublishStateIdForPublish() WHERE pimCategoryId IN (SELECT PimCategoryId FROM @TBL_PublishPimCategoryIds)

			 COMMIT TRAN GetPublishCategory;
			 SET @Status =1 
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE();
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPublishCategory @PublishCatalogId = '+CAST(@PublishCatalogId AS VARCHAR(50))+',@UserId ='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(50));
             SET @Status = 0;
             ROLLBACK TRAN GetPublishCategory;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_GetPublishCategoryJson',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO
IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_GetPublishProductJson')
	DROP PROC Znode_GetPublishProductJson
GO
CREATE PROCEDURE [dbo].[Znode_GetPublishProductJson]
(
	 @PublishCatalogId INT = 0 
	,@PimProductId     TransferId Readonly
	,@UserId		   INT = 0	
	,@PimCatalogId     INT = 0 
	,@VersionIdString  VARCHAR(100)= ''
	,@Status		   Bit  OutPut
	,@RevisionState   Varchar(50) = ''
)
With RECOMPILE
AS
/*
DECLARE @rrte transferId 
INSERT INTO @rrte
select 1

EXEC [_POC_Znode_GetPublishProductbulk] @PublishCatalogId=9,@UserId= 2 ,@localeIDs = @rrte,@PublishStateId = 3 

*/
BEGIN
Begin Try 
	SET NOCOUNT ON;
	Set @Status = 0  
	Declare  @RevisionType VARCHAR(50) = '' 
	Declare @VersionId int = 0 
	DECLARE @PortalId INT = (SELECT TOP 1 POrtalId FROM ZnodePortalCatalog WHERE PublishCatalogId = @PublishCatalogId)
	DECLARE @PriceListId INT = (SELECT TOP 1 PriceListId FROM ZnodePriceListPortal WHERE PortalId = @PortalId )
	DECLARE @DomainUrl varchar(max) = (select TOp 1 URL FROM ZnodeMediaConfiguration WHERE IsActive =1)
	DECLARE @MaxSmallWidth INT  = (SELECT TOP 1  MAX(MaxSmallWidth) FROM ZnodePortalDisplaySetting WHERE PortalId = @PortalId)
	DECLARE @PimMediaAttributeId INT = dbo.Fn_GetProductImageAttributeId()

	DECLARE @TBL_LocaleId  TABLE (RowId INT IDENTITY(1,1) PRIMARY KEY  , LocaleId INT , VersionId int,RevisionType varchar(50)  )
	DECLARE @LocaleIds transferId 

    INSERT INTO @TBL_LocaleId (LocaleId,VersionId,RevisionType)
	SELECT PV.LocaleId , PV.VersionId , PV.RevisionType  FROM ZnodePublishVersionEntity PV Inner join Split(@VersionIdString,',') S ON PV.VersionId = S.Item
	
		


	Insert into @LocaleIds  
	SELECT  LocaleId
	FROM ZnodeLocale MT 
	WHERE IsActive = 1
	
	DECLARE --@ProductNamePimAttributeId INT = dbo.Fn_GetProductNameAttributeId(),
	@DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId(),@LocaleId INT = 0 
		--,@SkuPimAttributeId  INT =  dbo.Fn_GetProductSKUAttributeId() , @IsActivePimAttributeId INT =  dbo.Fn_GetProductIsActiveAttributeId()
    DECLARE @GetDate DATETIME =dbo.Fn_GetDate()

    DECLARE @DefaultPortal int, @IsAllowIndexing int
    select @DefaultPortal = ZPC.PortalId, @IsAllowIndexing = 1 from ZnodePimCatalog ZPC Inner Join ZnodePublishCatalog ZPC1 ON ZPC.PimCatalogId = ZPC1.PimCatalogId where ZPC1.PublishCatalogId =  @PublishCatalogId and isnull(ZPC.IsAllowIndexing,0) = 1 
   
   -----delete unwanted publish data
	delete ZPC from ZnodePublishCategoryProduct ZPC
	where not exists(select * from ZnodePublishCategory ZC where ZPC.PublishCategoryId = ZC.PublishCategoryId )

	delete ZPP from ZnodePublishCategoryProduct ZPP
	where not exists(select * from ZnodePublishProduct ZP where ZPP.PublishProductId = ZP.PublishProductId )

	delete ZPP from ZnodePublishCatalogProductDetail ZPP
	where not exists(select * from ZnodePublishProduct ZP where ZPP.PublishProductId = ZP.PublishProductId )

	delete ZPCP from ZnodePublishCatalogProductDetail ZPCP
	inner join ZnodePublishProduct b on ZPCP.PublishProductId = b.PublishProductId 
	where not exists(select * from ZnodePimCategoryProduct a
	inner join ZnodePimCategoryHierarchy ZPCH on ZPCH.PimCategoryID = a.PimCategoryId 
	where b.PimProductId = A.PimProductId and ZPCP.PimCategoryHierarchyId = ZPCH.PimCategoryHierarchyId)
	and isnull(ZPCP.PimCategoryHierarchyId,0) <> 0 and b.PublishCatalogId = @PublishCatalogId
	---------


   DECLARE @Counter INT =1 ,@maxCountId INT = (SELECT max(RowId) FROM @TBL_LocaleId ) 

   CREATE TABLE #ZnodePrice (RetailPrice numeric(28,13),SalesPrice numeric(28,13),CurrencyCode varchar(100), CultureCode varchar(100), CurrencySuffix varchar(100), PublishProductId int)
	
   CREATE TABLE #ProductSKU (SEOUrl nvarchar(max), SEODescription  nvarchar(max),SEOKeywords  nvarchar(max),SEOTitle  nvarchar(max), PublishProductId int)

	create table #ProductImages (PublishProductId int, ImageSmallPath  varchar(max))

	EXEC Znode_InsertUpdateAttributeDefaultValueJson 1 
	EXEC Znode_InsertUpdateCustomeFieldJson 1 
	EXEC Znode_InsertUpdatePimAttributeJson 1 

	EXEC [Znode_InsertUpdatePimCatalogProductDetailJson] @PublishCatalogId=@PublishCatalogId,@LocaleId=@LocaleIds ,@UserId=@UserId
	
	--truncate table ZnodePublishedXml
	
	if (@IsAllowIndexing=1)
	begin 
		insert into #ZnodePrice
		SELECT RetailPrice,SalesPrice,ZC.CurrencyCode,ZCC.CultureCode ,ZCC.Symbol CurrencySuffix,TYU.PublishProductId
		FROM ZnodePrice ZP 
		INNER JOIN ZnodePriceList ZPL ON (ZPL.PriceListId = ZP.PriceListId)
		INNER JOIN ZnodeCurrency ZC oN (ZC.CurrencyId = ZPL.CurrencyId )
		INNER JOIN ZnodeCulture ZCC ON (ZCC.CultureId = ZPL.CultureId)
		INNER JOIN ZnodePublishProductDetail TY ON (TY.SKU = ZP.SKU ) 
		INNER JOIN ZnodePublishProduct TYU ON (TYU.PublishProductId = TY.PublishProductId) 
		WHERE ZP.PriceListId = @PriceListId 
		AND TY.LocaleId = @DefaultLocaleId
		AND TYU.PublishCatalogId = @PublishCatalogId
		AND EXISTS (SELECT TOP 1 1 FROM ZnodePriceListPortal ZPLP 
		INNER JOIN ZnodePimCatalog ZPC on ZPC.PortalId=ZPLP.PortalId WHERE ZPLP.PriceListId=ZP.PriceListId )
		AND EXISTS(select * from ZnodePimProduct ZPP1 where TYU.PimProductId = ZPP1.PimProductId )
	
		insert INTO #ProductImages
		SELECT  TYU.PublishProductId , @DomainUrl +'Catalog/'  + CAST(@DefaultPortal AS VARCHAr(100)) + '/'+ CAST(@MaxSmallWidth AS VARCHAR(100)) + '/' + RT.MediaPath AS ImageSmallPath   
		FROM ZnodePimAttributeValue ZPAV 
		INNER JOIN ZnodePublishProduct TYU ON (TYU.PimProductId  = ZPAV.PimProductId)
		INNER JOIN ZnodePimProductAttributeMedia  RT ON ( RT.PimAttributeValueId = ZPAV.PimAttributeValueId )
		WHERE  TYU.PublishCatalogId = @PublishCatalogId
		AND RT.LocaleId = @DefaultLocaleId
		AND ZPAV.PimAttributeId = (SELECT TOp 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'ProductImage')
		AND EXISTS(select * from ZnodePimProduct ZPP1 where TYU.PimProductId = ZPP1.PimProductId )
	
		insert INTO #ProductSKU 
		SELECT ZCSD.SEOUrl , ZCDL.SEODescription,ZCDL.SEOKeywords ,ZCDL.SEOTitle, TYU.PublishProductId
		FROM ZnodeCMSSEODetail ZCSD 
		INNER JOIN ZnodeCMSSEODetailLocale ZCDL ON (ZCDL.CMSSEODetailId = ZCSD.CMSSEODetailId)
		INNER JOIN ZnodePublishProductDetail TY ON (TY.SKU = ZCSD.SEOCode AND ZCDL.LocaleId = TY.LocaleId) 
		INNER JOIN ZnodePublishProduct TYU ON (TYU.PublishProductId = TY.PublishProductId)
		WHERE CMSSEOTypeId = (SELECT TOP 1 CMSSEOTypeId FROM ZnodeCMSSEOType WHERE Name = 'Product') 
		AND ZCDL.LocaleId = @DefaultLocaleId
		AND TYU.PublishCatalogId = @PublishCatalogId
		--AND ZCSD.PublishStateId = @PublishStateId
		AND ZCSD.PortalId = @DefaultPortal
		AND EXISTS(select * from ZnodePimProduct ZPP1 where TYU.PimProductId = ZPP1.PimProductId )

	end
	
	CREATE NONCLUSTERED INDEX Idx_#ProductSKU_PublishProductId
	ON [dbo].[#ProductSKU] ([PublishProductId])
	CREATE NONCLUSTERED INDEX Idx_#ProductImages_PublishProductId
	ON [dbo].#ProductImages ([PublishProductId])
	CREATE NONCLUSTERED INDEX Idx_#ZnodePrice_PublishProductId
	ON [dbo].#ZnodePrice ([PublishProductId])

	SELECT ZPP.Pimproductid,ZPCPD.LocaleId,
	--'{"Attributes":[' +
	  '[' +
			(Select STUFF((SELECT ','+ Attributes from ZnodePublishProductAttributeJson a 
			where a.pimproductid = ZPP.pimproductid and a.LocaleId = ZPCPD.LocaleId 
			FOR XML Path (''),Type).value('.', 'varchar(max)') ,1,1,'')  ) 
	+ ']'
	--']}' 
	ProductXML
	into #ProductAttributeXML
	FROM [ZnodePublishCatalogProductDetail] ZPCPD 
	INNER JOIN ZnodePublishProduct ZPP ON ZPCPD.PublishProductId = ZPP.PublishProductId and ZPCPD.PublishCatalogId = ZPP.PublishCatalogId --where TY.PimProductId = ZPP.PimProductId  AND TY.LocaleId = ZPCPD.LocaleId 
	WHERE ZPCPD.PublishCatalogId = @PublishCatalogId
	group by pimproductid,ZPCPD.LocaleId


	CREATE NONCLUSTERED INDEX Idx_#ProductAttributeXML_PimProductId_LocaleId
	ON [dbo].#ProductAttributeXML (PimProductId,LocaleId)

	DECLARE @MaxCount INT, @MinRow INT, @MaxRow INT, @Rows numeric(10,2);
			SELECT @MaxCount = COUNT(*) FROM [ZnodePublishCatalogProductDetail] WHERE PublishCatalogId = @PublishCatalogId;

			SELECT @Rows = 5000
        
			SELECT @MaxCount = CEILING(@MaxCount / @Rows);

			select PimCatalogProductDetailId, PublishProductId,Row_Number() over(Order by PublishProductId) ID into #ZnodePublishCatalogProductDetail from [ZnodePublishCatalogProductDetail] WHERE PublishCatalogId = @PublishCatalogId


		--CREATE NONCLUSTERED INDEX #ZnodePublishCatalogProductDetail

		 IF OBJECT_ID('tempdb..#Temp_ImportLoop') IS NOT NULL
             DROP TABLE #Temp_ImportLoop;
        
		 ---- To get the min and max rows for import in loop
		 ;WITH cte AS 
		 (
			SELECT RowId = 1, 
				   MinRow = 1, 
                   MaxRow = cast(@Rows as int)
            UNION ALL
            SELECT RowId + 1, 
                   MinRow + cast(@Rows as int), 
                   MaxRow + cast(@Rows as int)
            FROM cte
            WHERE RowId + 1 <= @MaxCount
		)
        SELECT RowId, MinRow, MaxRow
        INTO #Temp_ImportLoop
        FROM cte
		option (maxrecursion 0);
		



		DECLARE cur_BulkData CURSOR LOCAL FAST_FORWARD
        FOR SELECT MinRow, MaxRow, B.LocaleId ,B.VersionId, B.RevisionType
		FROM #Temp_ImportLoop L
		CROSS APPLY @TBL_LocaleId B;

        OPEN cur_BulkData;
        FETCH NEXT FROM cur_BulkData INTO  @MinRow, @MaxRow,@LocaleId,@VersionId, @RevisionType
		WHILE @@FETCH_STATUS = 0
        BEGIN
				INSERT INTO ZnodePublishProductEntity (
					VersionId, --1
					IndexId, --2 
					ZnodeProductId,ZnodeCatalogId, --3
					SKU,LocaleId, --4 
					Name,ZnodeCategoryIds, --5
					IsActive,Attributes,Brands,CategoryName, --6 
					CatalogName,DisplayOrder, --7 
					RevisionType,AssociatedProductDisplayOrder, --8
					ProductIndex,--9
					SalesPrice,RetailPrice,CultureCode,CurrencySuffix,CurrencyCode,SeoDescription,SeoKeywords,SeoTitle,SeoUrl,ImageSmallPath,SKULower)
		
				Select 
					CAST(@VersionId AS VARCHAR(50)) VersionId --1 
					,CAST(ZPCPD.ProductIndex AS VARCHAr(100)) + CAST(ISNULL(ZPCP.PublishCategoryId,'')  AS VARCHAR(50))  + CAST(Isnull(ZPCPD.PublishCatalogId ,'')  AS VARCHAR(50)) + CAST( Isnull(ZPCPD.LocaleId,'') AS VARCHAR(50)) IndexId  --2
					,CAST(ZPCPD.PublishProductId AS VARCHAR(50)) PublishProductId,CAST(ZPCPD.PublishCatalogId  AS VARCHAR(50)) PublishCatalogId  --3 
					,CAST(ISNULL(ZPCPD.SKU ,'') AS NVARCHAR(2000)) SKU,CAST( Isnull(ZPCPD.LocaleId,'') AS VARCHAR(50)) LocaleId -- 4 
					,CAST(isnull(ZPCPD.ProductName,'') AS NVARCHAR(2000) )  ProductName ,CAST(ISNULL(ZPCP.PublishCategoryId,'')  AS VARCHAR(50)) PublishCategoryId  -- 5 
					--'{"Attributes":[' + PAX.ProductXML + ']'
					,CAST(ISNULL(ZPCPD.IsActive ,'0') AS VARCHAR(50)) IsActive ,PAX.ProductXML,'[]' Brands,CAST(isnull(ZPCPD.CategoryName,'') AS NVARCHAR(2000)) CategoryName  --6
					,CAST(Isnull(ZPCPD.CatalogName,'')  AS NVARCHAR(2000)) CatalogName,CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50)) DisplayOrder  -- 7 
					,@RevisionType , 0 AssociatedProductDisplayOrder,-- pending  -- 8 
					ZPCPD.ProductIndex,  -- 9
					Case When @IsAllowIndexing = 1 then  ISNULL(CAST(TBZP.SalesPrice  AS VARCHAr(500)),'') else '' end SalesPrice , 
					Case When @IsAllowIndexing = 1 then  ISNULL(CAST(TBZP.RetailPrice  AS VARCHAr(500)),'') else '' end RetailPrice , 
					Case When @IsAllowIndexing = 1 then  ISNULL(TBZP.CultureCode ,'') else '' end CultureCode , 
					Case When @IsAllowIndexing = 1 then  ISNULL(TBZP.CurrencySuffix ,'') else '' end CurrencySuffix , 
					Case When @IsAllowIndexing = 1 then  ISNULL(TBZP.CurrencyCode ,'') else '' end CurrencyCode , 
					Case When @IsAllowIndexing = 1 then  ISNULL(TBPS.SEODescription,'') else '' end SEODescriptionForIndex,
					Case When @IsAllowIndexing = 1 then  ISNULL(TBPS.SEOKeywords,'') else '' end SEOKeywords,
					Case When @IsAllowIndexing = 1 then  ISNULL(SEOTitle,'') else '' end SEOTitle,
					Case When @IsAllowIndexing = 1 then  ISNULL(TBPS.SEOUrl ,'') else '' end SEOUrl,
					Case When @IsAllowIndexing = 1 then  ISNULL(TBPI.ImageSmallPath,'') else '' end ImageSmallPath,
					CAST(ISNULL(LOWER(ZPCPD.SKU) ,'') AS NVARCHAR(2000)) Lower_SKU
			
					FROM [ZnodePublishCatalogProductDetail] ZPCPD
					INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPCPD.PublishCatalogId)
					INNER JOIN ZnodePublishProduct ZPP ON ZPCPD.PublishProductId = ZPP.PublishProductId and ZPCPD.PublishCatalogId = ZPP.PublishCatalogId
					INNER JOIN #ProductAttributeXML PAX ON PAX.PimProductId = ZPP.PimProductId  AND PAX.LocaleId = ZPCPD.LocaleId 
					INNER JOIN #ZnodePublishCatalogProductDetail z on ZPCPD.PimCatalogProductDetailId = z.PimCatalogProductDetailId
					LEFT JOIN  #ZnodePrice TBZP ON (TBZP.PublishProductId = ZPCPD.PublishProductId)
					LEFT JOIN  #ProductSKU TBPS ON (TBPS.PublishProductId = ZPCPD.PublishProductId)
					LEFT JOIN  #ProductImages TBPI ON (TBPI.PublishProductId = ZPCPD.PublishProductId)
					LEFT JOIN  ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPCPD.PublishProductId AND ZPCP.PublishCatalogId = ZPCPD.PublishCatalogId AND ZPCP.PimCategoryHierarchyId = ZPCPD.PimCategoryHierarchyId)
					LEFT JOIN  ZnodePublishCategory ZPC ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId AND ZPCP.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId)
					LEFT JOIN  ZnodePimCategoryProduct ZPCCF ON (ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId )
					LEFT JOIN  ZnodePimCategoryHierarchy ZPCH ON (ZPCH.PimCatalogId = ZPCV.PimCatalogId AND  ZPCH.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId)
					WHERE      ZPCPD.LocaleId = @LocaleId and z.Id BETWEEN @MinRow AND @MaxRow
					AND ZPCPD.PublishCatalogId = @PublishCatalogId
					SET @VersionId = 0
			FETCH NEXT FROM cur_BulkData INTO  @MinRow, @MaxRow,@LocaleId,@VersionId, @RevisionType
        END;
		CLOSE cur_BulkData;
		DEALLOCATE cur_BulkData;


		If @RevisionState = 'PREVIEW' 
			UPDATE ZnodePimProduct SET IsProductPublish = 1,PublishStateId =  DBO.Fn_GetPublishStateIdForPreview()  
			WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePublishProduct ZPP WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId 
			AND ZPP.PublishCatalogId = @PublishCatalogId)
		Else
			UPDATE ZnodePimProduct SET IsProductPublish = 1,PublishStateId =  DBO.Fn_GetPublishStateIdForPublish()  
			WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePublishProduct ZPP WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId 
			AND ZPP.PublishCatalogId = @PublishCatalogId)
		UPDATE ZnodePublishCatalogLog 
		SET IsProductPublished = 1 
		,PublishProductId = (SELECT  COUNT(DISTINCT PublishProductId) FROM ZnodePublishCategoryProduct ZPP 
		WHERE ZPP.PublishCatalogId = ZnodePublishCatalogLog.PublishCatalogId AND ZPP.PublishCategoryId IS NOT NULL) 
		WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_LocaleId TY  WHERE  TY.VersionId =ZnodePublishCatalogLog.PublishCatalogLogId )  


		SET @Status = 1 
END TRY 
BEGIN CATCH 
	SET @Status =0  
	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
		@ErrorLine VARCHAR(100)= ERROR_LINE(),
		@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPublishProductJson 
		   @PublishCatalogId = '+CAST(@PublishCatalogId AS VARCHAR	(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))
		+',@PimCatalogId = ' + CAST(@PimCatalogId AS varchar(20))
		+',@VersionIdString= ' + CAST(@VersionIdString AS varchar(20))
		  	
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_GetPublishProductJson',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
END CATCH

END
GO
IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_GetPublishSingleCategoryJson')
	DROP PROC Znode_GetPublishSingleCategoryJson
GO
CREATE PROCEDURE [dbo].[Znode_GetPublishSingleCategoryJson]
(   @PimCategoryId    INT, 
    @UserId           INT,
    @Status           int = 0 OUT,
	@IsDebug          BIT = 0,
	--@LocaleIds		  TransferId READONLY,
	@PimCatalogId     INT = 0, 
	@RevisionType varchar(50)= '',
	@IsAssociate      int = 0 Out 
)
AS 
/*
       Summary:Publish category with their respective products and details 
	            The result is fetched in xml form   
       Unit Testing   
	            During Catalog Publish Publish status should be updated 
				   
       Begin transaction 
       SELECT * FROM ZnodePIMAttribute 
	   SELECT * FROM ZnodePublishCatalog 
	   SELECT * FROM ZnodePublishCategory WHERE publishCAtegoryID = 167 

       EXEC [Znode_GetPublishSingleCategory] @PimCategoryId= 27 ,@UserId =2 ,@IsDebug = 1 
       Rollback Transaction 
	*/
     BEGIN
         
         BEGIN TRY
             SET NOCOUNT ON;
			 BEGIN TRAN GetPublishCategory
			 DECLARE @PublishCatalogLogId int , @PublishCataLogId int , @VersionId  int --,@PimCatalogId int 
			 
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @LocaleId INT= 0, @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId(), @Counter INT= 1, @MaxId INT= 0, @CategoryIdCount INT;
             DECLARE @IsActive BIT= [dbo].[Fn_GetIsActiveTrue]();
             DECLARE @AttributeIds VARCHAR(MAX)= '', @PimCategoryIds VARCHAR(MAX)= '', @DeletedPublishCategoryIds VARCHAR(MAX)= '', @DeletedPublishProductIds VARCHAR(MAX);
			 DECLARE @TBL_PublishCatalogId TABLE(PublishCatalogId INT,PimCatalogId  INT , VersionId INT )
			 
			 INSERT INTO @TBL_PublishCatalogId  (PublishCatalogId,PimCatalogId,VersionId ) 
			 SELECT ZPCL.PublishCatalogId, ZPCL.PimCatalogId,ZPCL.PublishCatalogLogId
			 FROM ZnodePimCategoryHierarchy ZPCH 
			 INNER JOIN ZnodePublishCatalogLog  ZPCL  ON ZPCH.PimCatalogId = ZPCL.PimCatalogId and ZPCH.PimCategoryId = @PimCategoryId 
			 where  PublishCatalogLogId in (Select MAX (PublishCatalogLogId) from ZnodePublishCatalogLog ZPCL where 
			 ZPCH.PimCatalogId = ZPCL.PimCatalogId)
			 AND ZPCL.PimCatalogId = CASE WHEN @PimCatalogId <> 0 THEN @PimCatalogId ELSE ZPCL.PimCatalogId END

			 IF NOT EXISTS (Select TOP 1 1 from @TBL_PublishCatalogId) 
			 OR NOT EXISTS (select TOP 1 1  from ZnodePimCategoryProduct ZPCP inner join ZnodePimCategoryHierarchy ZPCH ON ZPCP.PimCategoryId = ZPCH.PimCategoryId where ZPCP.PimCategoryId = @PimCategoryId  )
			 Begin
				Commit tran GetPublishCategory;
				SET @Status = 1  -- Category not associated or catalog not publish
				SET @IsAssociate   = 0 
				Return 0 ;
			 END 

             DECLARE @TBL_AttributeIds TABLE
             (PimAttributeId       INT,
              ParentPimAttributeId INT,
              AttributeTypeId      INT,
              AttributeCode        VARCHAR(600),
              IsRequired           BIT,
              IsLocalizable        BIT,
              IsFilterable         BIT,
              IsSystemDefined      BIT,
              IsConfigurable       BIT,
              IsPersonalizable     BIT,
              DisplayOrder         INT,
              HelpDescription      VARCHAR(MAX),
              IsCategory           BIT,
              IsHidden             BIT,
              CreatedDate          DATETIME,
              ModifiedDate         DATETIME,
              AttributeName        NVARCHAR(MAX),
              AttributeTypeName    VARCHAR(300)
             );
             DECLARE @TBL_AttributeDefault TABLE
             (
				  PimAttributeId            INT,
				  AttributeDefaultValueCode VARCHAR(100),
				  IsEditable                BIT,
				  AttributeDefaultValue     NVARCHAR(MAX),
				  DisplayOrder   INT
             );
             DECLARE @TBL_AttributeValue TABLE
             (
				  PimCategoryAttributeValueId INT,
				  PimCategoryId               INT,
				  CategoryValue               NVARCHAR(MAX),
				  AttributeCode               VARCHAR(300),
				  PimAttributeId              INT
             );
             DECLARE @TBL_LocaleIds TABLE
             (
				  RowId     INT IDENTITY(1, 1),
				  LocaleId  INT,
				  IsDefault BIT
             );
			 DECLARE @TBL_CategoryXml TABLE
             (PublishCategoryId INT,
			  PublishCatalogId  INT,
              CategoryXml       XML,
              LocaleId          INT,
			  VersionId		    INT
             );

             DECLARE @TBL_PimCategoryIds TABLE
             (
				  PimCategoryId       INT,
				  PimParentCategoryId INT,
				  DisplayOrder        INT,
				  ActivationDate      DATETIME,
				  ExpirationDate      DATETIME,
				  CategoryName        NVARCHAR(MAX),
				  ProfileId           VARCHAR(MAX),
				  IsActive            BIT,
				  PimCategoryHierarchyId INT,
				  ParentPimCategoryHierarchyId INT,
				  PublishCatalogId INT,
				  PimCatalogId  INT,
				  VersionId INT  ,
				  CategoryCode  NVARCHAR(MAX)          
			 );
             DECLARE @TBL_PublishPimCategoryIds TABLE
             (PublishCategoryId       INT,
              PimCategoryId           INT,
              PublishProductId        varchar(max),
              PublishParentCategoryId INT ,
			  PimCategoryHierarchyId INT ,
			  parentPimCategoryHierarchyId INT,
			  RowIndex INT
             );
             DECLARE @TBL_DeletedPublishCategoryIds TABLE
             (PublishCategoryId INT,
              PublishProductId  INT
             );
            
             INSERT INTO @TBL_LocaleIds
             (LocaleId,
              IsDefault
             )
			  -- here collect all locale ids
            SELECT LocaleId,IsDefault FROM ZnodeLocale MT WHERE IsActive = @IsActive
			--AND (EXISTS (SELECT TOP 1 1  FROM @LocaleIds RT WHERE RT.Id = MT.LocaleId )
			--OR NOT EXISTS (SELECT TOP 1 1 FROM @LocaleIds )) ;

             INSERT INTO @TBL_PimCategoryIds(PimCategoryId,PimParentCategoryId,DisplayOrder,ActivationDate,ExpirationDate,IsActive,PimCategoryHierarchyId,ParentPimCategoryHierarchyId,
			 PublishCatalogId,PimCatalogId,VersionId)
			 --select @PimCategoryId, NULL , NULL , NULL , NULL ,NULL , NULL ,NULL 
			 SELECT DISTINCT ZPCH.PimCategoryId,ZPCH2.PimCategoryId  PimParentCategoryId,ZPCH.DisplayOrder,ZPCH.ActivationDate,ZPCH.ExpirationDate,ZPCH.IsActive ,ZPCH.PimCategoryHierarchyId,ZPCH.ParentPimCategoryHierarchyId,
			 PublishCatalogId,PCI.PimCatalogId,VersionId
			 FROM ZnodePimCategoryHierarchy AS ZPCH 
			 LEFT JOIN ZnodePimCategoryHierarchy AS ZPCH2 ON (ZPCH2.PimCategoryHierarchyId = ZPCH. ParentPimCategoryHierarchyId ) 
			 Inner join @TBL_PublishCatalogId PCI on ZPCH.PimCatalogId = PCI.PimCatalogId 
			 WHERE ZPCH.PimCategoryId = @PimCategoryId ; 

			 MERGE INTO ZnodePublishCategory TARGET USING 
			 ( Select PC.PimCategoryId,
					  PC.PimCategoryHierarchyId,
					  PC.PimParentCategoryId,
					  PC.ParentPimCategoryHierarchyId,
					  PC.PublishCatalogId
					  FROM @TBL_PimCategoryIds PC ) 
			 SOURCE ON
			 (
				 TARGET.PimCategoryId = SOURCE.PimCategoryId 
				 AND TARGET.PublishCatalogId = SOURCE.PublishCatalogId 
				 AND TARGET.PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId
			 )
			 WHEN MATCHED THEN UPDATE SET TARGET.PimParentCategoryId = SOURCE.PimParentCategoryId,TARGET.CreatedBy = @UserId,TARGET.CreatedDate = @GetDate,
				TARGET.ModifiedBy = @UserId,TARGET.ModifiedDate = @GetDate,
			 PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId,ParentPimCategoryHierarchyId=SOURCE.ParentPimCategoryHierarchyId
             
			 WHEN NOT MATCHED THEN 
			 INSERT(PimCategoryId,PublishCatalogId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
			 ,PimCategoryHierarchyId,ParentPimCategoryHierarchyId) 
			 VALUES(SOURCE.PimCategoryId,SOURCE.PublishCatalogId,@UserId,@GetDate,@UserId,@GetDate,SOURCE.PimCategoryHierarchyId
			 ,SOURCE.ParentPimCategoryHierarchyId)

				OUTPUT INSERTED.PublishCategoryId,INSERTED.PimCategoryId,INSERTED.PimCategoryHierarchyId,
			 INSERTED.parentPimCategoryHierarchyId 
			 INTO @TBL_PublishPimCategoryIds(PublishCategoryId,PimCategoryId,PimCategoryHierarchyId,parentPimCategoryHierarchyId);
			     	    
			 -- here update the publish parent category id
            UPDATE ZPC SET [PimParentCategoryId] =TBPC.[PimCategoryId] 
			FROM ZnodePublishCategory ZPC
            INNER JOIN ZnodePublishCategory TBPC ON(ZPC.parentPimCategoryHierarchyId = TBPC.PimCategoryHierarchyId  ) 
			WHERE ZPC.PublishCatalogId = TBPC.PublishCatalogId 
			AND TBPC.PublishCatalogId  in (Select PublishCatalogId from @TBL_PublishCatalogId)
			AND ZPC.ParentPimCategoryHierarchyId IS NOT NULL AND 
			ZPC.PimCategoryId = @PimCategoryId  ;

			UPDATE a
			SET  a.PublishParentCategoryId = b.PublishCategoryId
			FROM ZnodePublishCategory a 
			INNER JOIN ZnodePublishCategory b   ON (a.parentpimCategoryHierarchyId = b.pimCategoryHierarchyId)
			WHERE a.parentpimCategoryHierarchyId IS NOT NULL 
			AND a.PublishCatalogId = b.PublishCatalogId AND b.PublishCatalogId in (Select PublishCatalogId from @TBL_PublishCatalogId)
			AND a.PimCategoryId = @PimCategoryId 
			 --UPDATE ZPC SET [PimParentCategoryId] = TBPC.[PimCategoryId] 
			 --FROM ZnodePublishCategory ZPC
			 --INNER JOIN ZnodePublishCategory TBPC ON(ZPC.parentPimCategoryHierarchyId = TBPC.PimCategoryHierarchyId  ) 
			 --WHERE ZPC.PublishCatalogId =@PublishCatalogId
			 --AND ZPC.ParentPimCategoryHierarchyId IS NOT NULL ;

			 -- product are published here 
            --  EXEC Znode_GetPublishProducts @PublishCatalogId,0,@UserId,1,0,0;
			
		     SET @MaxId =(SELECT MAX(RowId)FROM @TBL_LocaleIds);
			 DECLARE @TransferID TRANSFERID 
			 INSERT INTO @TransferID 
			 SELECT DISTINCT  PimCategoryId	 FROM @TBL_PublishPimCategoryIds 

             SET @PimCategoryIds = SUBSTRING((SELECT ','+CAST(PimCategoryId AS VARCHAR(50)) FROM @TBL_PublishPimCategoryIds FOR XML PATH('')), 2, 4000);
			 
             WHILE @Counter <= @MaxId -- Loop on Locale id 
                 BEGIN
                     SET @LocaleId =(SELECT LocaleId FROM @TBL_LocaleIds WHERE RowId = @Counter);
                   
				     SET @AttributeIds = SUBSTRING((SELECT ','+CAST(ZPCAV.PimAttributeId AS VARCHAR(50)) FROM ZnodePimCategoryAttributeValue ZPCAV 
										 WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimCategoryIds TBPC WHERE TBPC.PimCategoryId = ZPCAV.PimCategoryId) GROUP BY ZPCAV.PimAttributeId FOR XML PATH('')), 2, 4000);
                
				     SET @CategoryIdCount =(SELECT COUNT(1) FROM @TBL_PimCategoryIds);

                     INSERT INTO @TBL_AttributeIds (PimAttributeId,ParentPimAttributeId,AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable,IsSystemDefined,
					 IsConfigurable,IsPersonalizable,DisplayOrder,HelpDescription,IsCategory,IsHidden,CreatedDate,ModifiedDate,AttributeName,AttributeTypeName)
                     EXEC [Znode_GetPimAttributesDetails] @AttributeIds,@LocaleId;

                     INSERT INTO @TBL_AttributeDefault (PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder)
                     EXEC [dbo].[Znode_GetAttributeDefaultValueLocale] @AttributeIds,@LocaleId;

                     INSERT INTO @TBL_AttributeValue (PimCategoryAttributeValueId,PimCategoryId,CategoryValue,AttributeCode,PimAttributeId)
                     EXEC [dbo].[Znode_GetCategoryAttributeValueId] @TransferID,@AttributeIds,@LocaleId;

					 
			

                     ;WITH Cte_UpdateDefaultAttributeValue
                     AS (
					  SELECT TBAV.PimCategoryId,TBAV.PimAttributeId,SUBSTRING((SELECT ','+AttributeDefaultValue FROM @TBL_AttributeDefault TBD WHERE TBAV.PimAttributeId = TBD.PimAttributeId
						AND EXISTS(SELECT TOP 1 1 FROM Split(TBAV.CategoryValue, ',') SP WHERE SP.Item = TBD.AttributeDefaultValueCode)FOR XML PATH('')), 2, 4000) DefaultCategoryAttributeValue
						FROM @TBL_AttributeValue TBAV WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_AttributeDefault TBAD WHERE TBAD.PimAttributeId = TBAV.PimAttributeId))
					 
					 -- update the default value with locale 
                     UPDATE TBAV SET CategoryValue = CTUDFAV.DefaultCategoryAttributeValue FROM @TBL_AttributeValue TBAV 
					 INNER JOIN Cte_UpdateDefaultAttributeValue CTUDFAV ON(CTUDFAV.PimCategoryId = TBAV.PimCategoryId AND CTUDFAV.PimAttributeId = TBAV.PimAttributeId)
					 WHERE CategoryValue IS NULL ;
					 
					 -- here is update the media path  
						WITH Cte_productMedia
						AS (
							SELECT TBA.PimCategoryId,TBA.PimAttributeId,
							Isnull(
							(STUFF((SELECT ','+zm.PATH FROM ZnodeMedia ZM WHERE EXISTS
							(SELECT TOP 1 1 FROM dbo.split(TBA.CategoryValue, ',') SP
							WHERE SP.Item = CAST(Zm.MediaId AS VARCHAR(50)))FOR XML PATH(''),Type).value('.', 'varchar(max)'), 1, 1,'')) ,'no-image.png')
							CategoryValue
							FROM @TBL_AttributeValue TBA WHERE EXISTS(SELECT TOP 1 1 FROM [dbo].[Fn_GetProductMediaAttributeId]() FNMA WHERE FNMA.PImAttributeId = TBA.PimATtributeId)
						)


					 UPDATE TBAV SET CategoryValue = CTCM.CategoryValue 
					 FROM @TBL_AttributeValue TBAV 
					 INNER JOIN Cte_productMedia CTCM ON(CTCM.PimCategoryId = TBAV.PimCategoryId
					 AND CTCM.PimAttributeId = TBAV.PimAttributeId);

                     WITH Cte_PublishProductIds
					 AS (SELECT TBPC.PublishcategoryId,SUBSTRING((SELECT ','+CAST(PublishProductId AS VARCHAR(50))
					  FROM ZnodePublishCategoryProduct ZPCP 
					  WHERE ZPCP.PublishCategoryId = TBPC.publishCategoryId
					  AND ZPCP.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId
                      AND ZPCP.PublishCatalogId in (Select PublishCatalogId from @TBL_PublishCatalogId)
					   FOR XML PATH('')), 2, 8000) PublishProductId ,PimCategoryHierarchyId
					  FROM @TBL_PublishPimCategoryIds TBPC)
                          
					 UPDATE TBPPC SET PublishProductId = CTPP.PublishProductId FROM @TBL_PublishPimCategoryIds TBPPC INNER JOIN Cte_PublishProductIds CTPP ON(TBPPC.PublishCategoryId = CTPP.PublishCategoryId 
					 AND TBPPC.PimCategoryHierarchyId = CTPP.PimCategoryHierarchyId);

                     WITH Cte_CategoryProfile
                     AS (
							SELECT PimCategoryId,ZPCC.PimCategoryHierarchyId,
									SUBSTRING(( SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
									FROM ZnodeProfile ZPC 
									INNER JOIN ZnodePimCategoryHierarchy ZPRCC ON(ZPRCC.PimCategoryHierarchyId = ZPCC.PimCategoryHierarchyId
									AND ZPRCC.PimCatalogId = ZPC.PimCatalogId) 
									WHERE ZPC.PimCatalogId = ZPCC.PimCatalogId FOR XML PATH('')), 2, 4000) ProfileIds
						   FROM ZnodePimCategoryHierarchy ZPCC 
						   WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimCategoryIds TBPC 
						   WHERE TBPC.PimCategoryId = ZPCC.PimCategoryId AND ZPCC.PimCatalogId in (Select PimCatalogId from @TBL_PublishCatalogId)
						   AND ZPCC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId)
					   )                          
				      UPDATE TBPC SET TBPC.ProfileId = CTCP.ProfileIds 
					  FROM @TBL_PimCategoryIds TBPC 
					  LEFT JOIN Cte_CategoryProfile CTCP ON(CTCP.PimCategoryId = TBPC.PimCategoryId AND CTCP.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId );
               
					 UPDATE TBPC SET TBPC.CategoryName = TBAV.CategoryValue FROM @TBL_PimCategoryIds TBPC INNER JOIN @TBL_AttributeValue TBAV ON(TBAV.PimCategoryId = TBPC.PimCategoryId
                     AND EXISTS(SELECT TOP 1 1 FROM [dbo].[Fn_GetCategoryNameAttribute]() FNGCNA WHERE FNGCNA.PimAttributeId = TBAV.PimAttributeId))


					 UPDATE TBPC SET TBPC.CategoryCode = TBAV.CategoryValue FROM @TBL_PimCategoryIds TBPC INNER JOIN @TBL_AttributeValue TBAV ON(TBAV.PimCategoryId = TBPC.PimCategoryId
					 AND EXISTS(SELECT TOP 1 1 FROM dbo.Fn_GetCategoryCodeAttribute() FNGCNA WHERE FNGCNA.PimAttributeId = TBAV.PimAttributeId)
					 )
					 
					 --select * from @TBL_PimCategoryIds

					 --select * from @TBL_AttributeValue
					-- SELECT * FROM @TBL_AttributeValue WHERE pimCategoryId = 369


					 -- here update the publish category details 
                     ;WITH Cte_UpdateCategoryDetails
                     AS (
					 SELECT TBC.PimCategoryId,PublishCategoryId,CategoryName, TBPPC.PimCategoryHierarchyId,CategoryCode
					 FROM @TBL_PimCategoryIds TBC
                     INNER JOIN @TBL_PublishPimCategoryIds TBPPC ON(TBC.PimCategoryId = TBPPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPPC.PimCategoryHierarchyId)
					 )						
                     MERGE INTO ZnodePublishCategoryDetail TARGET USING Cte_UpdateCategoryDetails SOURCE ON(TARGET.PublishCategoryId = SOURCE.PublishCategoryId
					 AND TARGET.LocaleId = @LocaleId)
                     WHEN MATCHED THEN UPDATE SET PublishCategoryId = SOURCE.PublishcategoryId,PublishCategoryName = SOURCE.CategoryName,LocaleId = @LocaleId,ModifiedBy = @userId,ModifiedDate = @GetDate,CategoryCode= SOURCE.CategoryCode
                     WHEN NOT MATCHED THEN INSERT(PublishCategoryId,PublishCategoryName,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,CategoryCode) VALUES
                     (SOURCE.PublishCategoryId,SOURCE.CategoryName,@LocaleId,@userId,@GetDate,@userId,@GetDate,CategoryCode);


					DECLARE @UpdateCategoryLog  TABLE (PublishCatalogLogId INT , LocaleId INT ,PublishCatalogId INT  )
					INSERT INTO @UpdateCategoryLog
					SELECT MAX(PublishCatalogLogId) PublishCatalogLogId , LocaleId , PublishCatalogId 
					FROM ZnodePublishCatalogLog a 
					WHERE a.PublishCatalogId =@PublishCatalogId
					AND  a.LocaleId = @LocaleId 
					GROUP BY 	LocaleId,PublishCatalogId  

					-----------------------------------------------------------------
					IF OBJECT_ID('tempdb..#Index') is not null
					BEGIN 
						DROP TABLE #Index
					END 
					CREATE TABLE #Index (RowIndex int ,PimCategoryId int , PimCategoryHierarchyId  int,ParentPimCategoryHierarchyId int )		
					insert into  #Index ( RowIndex ,PimCategoryId , PimCategoryHierarchyId,ParentPimCategoryHierarchyId)
					SELECT CAST(Row_number() OVER (Partition By TBL.PimCategoryId Order by ISNULL(TBL.PimCategoryId,0) desc) AS VARCHAR(100))
					,ZPC.PimCategoryId, ZPC.PimCategoryHierarchyId, ZPC.ParentPimCategoryHierarchyId
					FROM @TBL_PublishPimCategoryIds TBL
					INNER JOIN ZnodePublishCategory ZPC ON (TBL.PimCategoryId = ZPC.PimCategoryId AND TBL.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId)
					WHERE ZPC.PublishCatalogId = @PublishCatalogId

					UPDATE TBP SET  TBP.[RowIndex]=  IDX.RowIndex 
					FROM @TBL_PublishPimCategoryIds TBP INNER JOIN #Index IDX ON (IDX.PimCategoryId = TBP.PimCategoryId AND IDX.PimCategoryHierarchyId = TBP.PimCategoryHierarchyId)  

					------------------------------------------------------------------
					If (@RevisionType like '%Preview%'  OR @RevisionType like '%Production%'  ) 
						Delete from ZnodePublishCategoryEntity Where ZnodeCategoryId in 
						(Select PublishCategoryId from @TBL_PublishPimCategoryIds) AND LocaleId = @LocaleId
						AND VersionId in (SELECT VersionId FROM ZnodePublishVersionEntity where RevisionType = 'PREVIEW')
					If (@RevisionType like '%Production%' OR @RevisionType = 'None')
						Delete from ZnodePublishCategoryEntity Where ZnodeCategoryId in 
						(Select PublishCategoryId from @TBL_PublishPimCategoryIds) AND LocaleId = @LocaleId
						AND VersionId in (SELECT VersionId FROM ZnodePublishVersionEntity where RevisionType = 'PRODUCTION')
				

					INSERT INTO ZnodePublishCategoryEntity
					(
						 VersionId,ZnodeCategoryId,
						 Name,CategoryCode,
						 ZnodeCatalogId,CatalogName,ZnodeParentCategoryIds,
						 ProductIds,LocaleId,IsActive,DisplayOrder,
						 Attributes,
						 ActivationDate,ExpirationDate,CategoryIndex
					)
					OUTPUT INSERTED.ZnodeCategoryId,INSERTED.ZnodeCatalogId, INSERTED.LocaleId  , Inserted.VersionId
					INTO  @TBL_CategoryXml (PublishCategoryId,PublishCatalogId,localeId,VersionId) 
					SELECT ISNULL(TYU.VersionId,'') VersionId,TBPC.PublishCategoryId ZnodeCategoryId,
						   ISNULL(CategoryName, '') Name,ISNULL(CategoryCode,'') CategoryCode,
						   ZPC.PublishCatalogId, ZPC.CatalogName ,
						   Isnull('[' + THR.PublishParentCategoryId + ']',NULL) TempZnodeParentCategoryIds,
						   ISNULL('[' + TBPC.PublishProductId + ']', NULL)  TempProductIds,
						   @LocaleId LocaleId,TBC.IsActive,ISNULL(DisplayOrder, '0') DisplayOrder,
						      ISNULL(
									(
										SELECT TBA.AttributeCode,TBA.AttributeName,ISNULL(IsUseInSearch, 0) IsUseInSearch,
										ISNULL(IsHtmlTags, 0) IsHtmlTags,ISNULL(IsComparable, 0) IsComparable,
										TBAV.CategoryValue AttributeValues,TBA.AttributeTypeName 
										FROM @TBL_AttributeValue TBAV
										INNER JOIN @TBL_AttributeIds TBA ON(TBAV.PimAttributeId = TBA.PimAttributeId) 
										LEFT JOIN ZnodePimFrontendProperties ZPFP ON(ZPFP.PimAttributeId = TBA.PimAttributeId)
										WHERE TBC.PimCategoryId = TBAV.PimCategoryId  
										FOR JSON PATH) 
									, '[]')  ,
							ActivationDate,ExpirationDate,ISNULL(TBPC.RowIndex,1) CategoryIndex
						   --,ProfileId TempProfileIds

						FROM @TBL_PublishPimCategoryIds TBPC 
						INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId in  (Select PublishCatalogId from @TBL_PublishCatalogId))
						INNER JOIN ZnodePublishCategory THR ON (THR.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId AND THR.PimCategoryId = TBPC.PimCategoryId AND THR.PublishCatalogId =ZPC.PublishCatalogId  )
						LEFT JOIN @UpdateCategoryLog TY ON ( TY.PublishCatalogId IN (Select PublishCatalogId from @TBL_PublishCatalogId) AND TY.localeId = @LocaleId  )
						INNER JOIN @TBL_PimCategoryIds TBC ON(TBC.PimCategoryId = TBPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId) 
						INNER JOIN ZnodePublishVersionEntity TYU ON (TYU.ZnodeCatalogId  = ZPC.PublishCatalogId AND TYU.IsPublishSuccess =1 AND TYU.LocaleId = @LocaleId )
						where 
						(	
							(TYU.RevisionType =  Case when  (@RevisionType like '%Preview%'  OR @RevisionType like '%Production%' ) then 'Preview' End ) 
							OR 
							(TYU.RevisionType =  Case when (@RevisionType like '%Production%' OR @RevisionType = 'None') then  'Production'  end )
						)


				     DELETE FROM @TBL_AttributeIds;
                     DELETE FROM @TBL_AttributeDefault;
                     DELETE FROM @TBL_AttributeValue;
                     SET @Counter = @Counter + 1;
                 END;
	

			Select PublishCategoryId ,VersionId	, 0 PimCatalogId, LocaleId,PublishCatalogId, '404test' SeoUrl
			into #OutPublish from @TBL_CategoryXml 

			--group by PimCatalogId,VersionId,PublishCategoryId

			Alter TABLE #OutPublish ADD Id int Identity 
			SET @MaxId =(SELECT COUNT(*) FROM #OutPublish);
			 --SET @PimCategoryIds = SUBSTRING((SELECT ','+CAST(PimCategoryId AS VARCHAR(50)) FROM @TBL_PublishPimCategoryIds FOR XML PATH('')), 2, 4000);
			Declare @ExistingPublishCategoryId  nvarchar(max), @PublishCategoryId  int 
			SET @Counter =1 
            WHILE @Counter <= @MaxId -- Loop on Locale id 
            BEGIN
				SELECT @VersionId = VersionId  ,
				@PublishCategoryId = PublishCategoryId 
				from #OutPublish where ID = @Counter

		----Single category publish. Category count update for verison for specific catalog
		if Exists (select count(1) from @TBL_PublishPimCategoryIds)
	    begin
			UPDATE ZnodePublishCatalogLog 
				SET PublishCategoryId = (select count(distinct a.PimCategoryId)
				from ZnodePublishCategory a 
				inner join ZnodePublishCatalog c on a.PublishCatalogId = c.PublishCatalogId
				inner join ZnodePimCategoryProduct b on  a.PimCategoryId = b.PimCategoryId 
				inner join ZnodePimCategoryHierarchy ZPCH ON b.PimCategoryId = ZPCH.PimCategoryId and c.PimCatalogId = ZPCH.PimCatalogId
				where a.PublishCatalogId = ZnodePublishCatalogLog.PublishCatalogId)
				,ModifiedDate = @GetDate
			FROM ZnodePublishCatalogLog
			WHERE ZnodePublishCatalogLog.PublishCatalogLogId = @VersionId 
			AND exists(select * from ZnodePublishCatalog ZPC where ZnodePublishCatalogLog.PublishCatalogId = ZPC.PublishCatalogId and ZPC.PimCatalogId = @PimCatalogId )
		end

		----Single category publish. Category count update in all associated catalog 
		if isnull(@PimCatalogId,0)=0 and isnull(@PimcategoryId,0)<>0
		begin
			if object_Id('tempdb..#temp_CatalogCategory') is not null
				drop table #temp_CatalogCategory

			select max(c.PublishCatalogLogId) PublishCatalogLogId, C.PublishCatalogId
			into #temp_CatalogCategory
			from ZnodePimCategoryProduct a
			inner join ZnodePimCategoryHierarchy ZPCH ON a.PimCategoryId = ZPCH.PimCategoryId
			inner join ZnodePublishCatalog b on ZPCH.PimCatalogId = b.PimCatalogId
			inner join ZnodePublishCatalogLog c on b.PublishCatalogId = c.PublishCatalogId
			where a.PimCategoryId = @PimcategoryId
			group by C.PublishCatalogId

		   UPDATE ZPCC 
				SET PublishCategoryId = (select count(distinct a.PimCategoryId)
				from ZnodePublishCategory a 
				inner join ZnodePublishCatalog c on a.PublishCatalogId = c.PublishCatalogId
				inner join ZnodePimCategoryProduct b on  a.PimCategoryId = b.PimCategoryId 
				inner join ZnodePimCategoryHierarchy ZPCH ON b.PimCategoryId = ZPCH.PimCategoryId and c.PimCatalogId = ZPCH.PimCatalogId
				where a.PublishCatalogId = ZPCC.PublishCatalogId)
				,ModifiedDate = @GetDate
			FROM ZnodePublishCatalogLog ZPCC
			WHERE exists(select * from #temp_CatalogCategory CC where ZPCC.PublishCatalogLogId = CC.PublishCatalogLogId )
		end

				SET @Counter  = @Counter  + 1  
			END

			SET @Status = 1 

			If  @RevisionType = 'PREVIEW'
				UPDATE ZnodePimCategory	SET IsCategoryPublish = 1,PublishStateId =  DBO.Fn_GetPublishStateIdForPreview()  WHERE PimCategoryId = @PimCategoryId 
			else 
				UPDATE ZnodePimCategory	SET IsCategoryPublish = 1,PublishStateId =  DBO.Fn_GetPublishStateIdForPublish()  WHERE PimCategoryId = @PimCategoryId 


			if object_Id('tempdb..##PublishCategoryDetails') is not null
				drop table ##PublishCategoryDetails
			Select PublishCategoryId,VersionId,LocaleId,PublishCatalogId INTO ##PublishCategoryDetails  from @TBL_CategoryXml 
			SET @IsAssociate     = 1  
			Commit TRAN GetPublishCategory;

         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE();
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPublishSingleCategoryJson @PimCategoryId= '+CAST(@PimCategoryId AS VARCHAR(50))+',@PublishCatalogId = '+CAST(@PublishCatalogId AS VARCHAR(50))+',@UserId ='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(50));
             SET @Status = 0 -- Publish Falies 

             ROLLBACK TRAN GetPublishCategory;
			 	SET @IsAssociate     =   0
				 SELECT ERROR_MESSAGE();
			 EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_GetPublishSingleCategoryJson',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO
IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_GetPublishSingleProductJson')
	DROP PROC Znode_GetPublishSingleProductJson
GO
CREATE PROCEDURE [dbo].[Znode_GetPublishSingleProductJson]
(
	 @PublishCatalogId INT = 0 
	,@VersionId       VARCHAR(50) = 0 
	,@PimProductId    TransferId Readonly 
	,@UserId		  INT = 0 
	,@TokenId nvarchar(max)= ''	
	,@LocaleIds TransferId READONLY
	,@PublishStateId INT = 0  
	,@RevisionType varchar(50)
	,@Status bit = 0 OutPut
	
)
AS


--Declare @PimProductId TransferId 
--insert into @PimProductId  select 471392
-- EXEC Znode_GetPublishSingleProductJson  @PublishCatalogId = 0 ,@VersionId= 0 ,@PimProductId =@PimProductId, @UserId=2 ,@RevisionType ='Production'


BEGIN 
BEGIN TRY 
 SET NOCOUNT ON 

EXEC Znode_InsertUpdatePimAttributeJson 1 
EXEC Znode_InsertUpdateCustomeFieldJson 1
EXEC Znode_InsertUpdateAttributeDefaultValueJson 1 

Select ZPLPD.PimParentProductId, ZPLPD.PimProductId, ZPLPD.PimAttributeId, ZPAVL.AttributeValue as SKU
into #LinkProduct
FROM ZnodePimLinkProductDetail ZPLPD 
INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId = ZPLPD.PimProductId)
INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId
WHERE exists(select * from ZnodePimAttribute ZPA where ZPA.PimAttributeId = ZPAV.PimAttributeId and ZPA.AttributeCode = 'SKU')
and exists(select * from @PimProductId pp where ZPLPD.PimParentProductId = pp.Id)

 IF OBJECT_ID('tempdb..#Cte_BrandData') is not null
 BEGIN 
	DROP TABLE #Cte_BrandData
 END 
 

 IF OBJECT_ID('tempdb..#ProductIds') is not null
 BEGIN 
	DROP TABLE #ProductIds
 END 

			Create Table #ProductIds (PimProductId int, PublishProductId  int )
			
			--DECLARE @PimProductAttributeJson TABLE(PimAttributeJsonId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )
			CREATE TABLE #PimProductAttributeJson (PimAttributeJsonId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )
			DECLARE @PimDefaultValueLocale  TABLE (PimAttributeDefaultJsonId INT  PRIMARY KEY ,PimAttributeDefaultValueId INT ,LocaleId INT ) 
			DECLARE @ProductNamePimAttributeId INT = dbo.Fn_GetProductNameAttributeId(),@DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId(),@LocaleId INT = 0 
			,@SkuPimAttributeId  INT =  dbo.Fn_GetProductSKUAttributeId() , @IsActivePimAttributeId INT =  dbo.Fn_GetProductIsActiveAttributeId()
			DECLARE @GetDate DATETIME =dbo.Fn_GetDate()
			DECLARE @TBL_LocaleId  TABLE (RowId INT IDENTITY(1,1) PRIMARY KEY  , LocaleId INT )

			DECLARE @DomainUrl varchar(max) = (select TOp 1 URL FROM ZnodeMediaConfiguration WHERE IsActive =1)
 
			INSERT INTO @TBL_LocaleId (LocaleId)
			SELECT  LocaleId
			FROM ZnodeLocale MT
			WHERE IsActive = 1
			AND (EXISTS (SELECT TOP 1 1  FROM @LocaleIds RT WHERE RT.Id = MT.LocaleId )
			OR NOT EXISTS (SELECT TOP 1 1 FROM @LocaleIds )) 

			-----to update link products newly addded and deleted from PIM
			delete ZPAP
			from ZnodePublishAssociatedProduct ZPAP
			where ZPAP.IsLink = 1
			AND not exists(select * from ZnodePimLinkProductDetail ZPPD where ZPAP.ParentPimProductId = ZPPD.PimParentProductId AND ZPAP.PimProductId = ZPPD.PimProductId)
			and exists(select * from @PimProductId PP where PP.Id = ZPAP.ParentPimProductId )

			insert into ZnodePublishAssociatedProduct(PimCatalogId,ParentPimProductId,PimProductId,PublishStateId,IsConfigurable,IsBundle,IsGroup,IsAddOn,IsLink,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			select distinct ZPCH.PimCatalogId, ZPLPD.PimParentProductId, ZPLPD.PimProductId, @PublishStateId, 0, 0, 0, 0, 1, ZPLPD.DisplayOrder, @UserId,@GetDate ,@UserId , @GetDate
			from ZnodePimLinkProductDetail ZPLPD
			INNER JOIN ZnodePimCategoryProduct ZPCP ON ZPLPD.PimParentProductId = ZPCP.PimProductId
			INNER JOIN ZnodePimCategoryHierarchy ZPCH ON ZPCP.PimCategoryId = ZPCH.PimCategoryId
			and exists(select * from @PimProductId PP where PP.Id = ZPLPD.PimParentProductId )
			and not exists(select * from ZnodePublishAssociatedProduct ZPACP where ZPCH.PimCatalogId = ZPACP.PimCatalogId and ZPLPD.PimParentProductId = ZPACP.ParentPimProductId AND ZPLPD.PimProductId = ZPACP.PimProductId  )
			-------

			DECLARE @Counter INT =1 ,@maxCountId INT = (SELECT max(RowId) FROM @TBL_LocaleId ) 

			CREATE TABLE #TBL_PublishCatalogId (PublishCatalogId INT,PublishProductId INT,PimProductId  INT   , VersionId INT ,LocaleId INT, PriceListId INT , PortalId INT ,MaxSmallWidth NVARCHAr(max)  )
			CREATE INDEX idx_#TBL_PublishCatalogIdPimProductId on #TBL_PublishCatalogId(PimProductId)
			CREATE INDEX idx_#TBL_PublishCatalogIdPimPublishCatalogId on #TBL_PublishCatalogId(PublishCatalogId)

			INSERT INTO #TBL_PublishCatalogId 
			SELECT Distinct ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId, 0,0 ,
			(SELECT TOP 1 PriceListId FROM ZnodePriceListPortal NT 
			INNER JOIN ZnodePimCatalog ZPC on ZPC.PortalId=NT.PortalId  
			ORDER BY NT.Precedence ASC ) ,TY.PortalId,
			(SELECT TOP 1  MAX(MaxSmallWidth) FROM ZnodePortalDisplaySetting TYR WHERE TYR.PortalId = TY.PortalId)
			FROM ZnodePublishProduct ZPP 
			--INNER JOIN ZnodePublishVersionEntity ZPCP ON (ZPCP.ZnodeCatalogId  = ZPP.PublishCatalogId)
			LEFT JOIN ZnodePortalCatalog TY ON (TY.PublishCatalogId = ZPP.PublishCatalogId)
			WHERE (EXISTS (SELECT TOP 1 1 FROM @PimProductId SP WHERE SP.Id = ZPP.PimProductId  
			AND  (@PublishCatalogId IS NULL OR @PublishCatalogId = 0 ))
			OR  (ZPP.PublishCatalogId = @PublishCatalogId ))
			And Exists 
			(Select TOP 1 1 from ZnodePublishVersionEntity ZPCP  where ZPCP.ZnodeCatalogId  = ZPP.PublishCatalogId AND ZPCP.IsPublishSuccess =1 )

			Insert into #ProductIds (PimProductId,PublishProductId) Select distinct PimProductId,PublishProductId from #TBL_PublishCatalogId  

             Create TABLE #TBL_ZnodeTempPublish (PimProductId INT , AttributeCode VARCHAR(300) ,AttributeValue NVARCHAR(max) ) 			
			 DECLARE @TBL_AttributeVAlueLocale TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT,LocaleId INT ,AttributeValue Nvarchar(1000) )


			 INSERT INTO @TBL_AttributeValueLocale (PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId ,LocaleId ,AttributeValue )
			 SELECT VIR.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId,VIR.LocaleId, ''
			 FROM View_LoadManageProductInternal VIR
			 INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = VIR.PimProductId)
			 UNION ALL 
			 SELECT VIR.PimProductId,PimAttributeId,PimProductAttributeMediaId,ZPDE.LocaleId , ''
			 FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimProductAttributeMedia ZPDE ON (ZPDE.PimAttributeValueId = VIR.PimAttributeValueId )
			 WHERE EXISTS (SELECT TOP 1 1 FROM #ProductIds ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
			 Union All 
			 SELECT VIR.PimProductId,VIR.PimAttributeId,ZPDVL.PimAttributeDefaultValueLocaleId,ZPDVL.LocaleId ,ZPDVL.AttributeDefaultValue
			   FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1 )
			 INNER JOIN ZnodePimAttributeDefaultValue ZPADV ON ZPADV.PimAttributeId = D.PimAttributeId
			 INNER JOIN ZnodePimAttributeDefaultValueLocale ZPDVL   on (ZPADV.PimAttributeDefaultValueId = ZPDVL.PimAttributeDefaultValueId)
			 --INNER JOIN ZnodePimProductAttributeDefaultValue ZPDVP ON (ZPDVP.PimAttributeValueId = VIR.PimAttributeValueId AND ZPADV.PimAttributeDefaultValueId = ZPDVP.PimAttributeDefaultValueId )
			 WHERE ( ZPDVL.LocaleId = @DefaultLocaleId OR ZPDVL.LocaleId = @LocaleId )
			 AND EXISTS(SELECT TOP 1 1 FROM #ProductIds ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
			 Union All 
			 SELECT VIR.PimProductId,VIR.PimAttributeId,'','' ,''
			 FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1 )
			 WHERE  EXISTS(SELECT TOP 1 1 FROM #ProductIds ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
			
				--insert INTO #ZnodePrice
				SELECT RetailPrice,SalesPrice,ZC.CurrencyCode,ZCC.CultureCode ,ZCC.Symbol CurrencySuffix,TYU.PublishProductId ,isnull(ZPC1.IsAllowIndexing,0) as IsAllowIndexing
				into #ZnodePrice
				FROM ZnodePrice ZP 
				INNER JOIN ZnodePriceList ZPL ON (ZPL.PriceListId = ZP.PriceListId)
				INNER JOIN ZnodeCurrency ZC oN (ZC.CurrencyId = ZPL.CurrencyId )
				INNER JOIN ZnodeCulture ZCC ON (ZCC.CultureId = ZPL.CultureId)
				INNER JOIN ZnodePublishProductDetail TY ON (TY.SKU = ZP.SKU ) 
				INNER JOIN ZnodePublishProduct TYU ON (TYU.PublishProductId = TY.PublishProductId)
				INNER JOIN ZnodePublishCatalog ZPC ON (TYU.PublishCatalogId = ZPC.PublishCatalogId)
				INNER JOIN ZnodePimCatalog ZPC1 ON (ZPC.PimCatalogId = ZPC1.PimCatalogId)
				WHERE EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId TYUR WHERE TYUR.PriceListId = ZPL.PriceListId AND TYUR.PublishCatalogId = TYU.PublishCatalogId
				AND TYU.PublishProductId = TYUR.PublishProductId)
				AND TY.LocaleId = dbo.Fn_GetDefaultLocaleId()
				AND EXISTS (SELECT TOP 1 1 FROM ZnodePriceListPortal ZPLP 
				INNER JOIN ZnodePimCatalog ZPC on ZPC.PortalId=ZPLP.PortalId WHERE ZPLP.PriceListId=ZP.PriceListId )
				
				--insert INTO #ProductSKU
				SELECT ZCSD.SEOUrl , ZCDL.SEODescription,ZCDL.SEOKeywords ,ZCDL.SEOTitle, TYU.PublishProductId ,isnull(ZPC1.IsAllowIndexing,0) as IsAllowIndexing
				INTO #ProductSKU
				FROM ZnodeCMSSEODetail ZCSD 
				INNER JOIN ZnodeCMSSEODetailLocale ZCDL ON (ZCDL.CMSSEODetailId = ZCSD.CMSSEODetailId)
				INNER JOIN ZnodePublishProductDetail TY ON (TY.SKU = ZCSD.SEOCode AND ZCDL.LocaleId = TY.LocaleId) 
				INNER JOIN ZnodePublishProduct TYU ON (TYU.PublishProductId = TY.PublishProductId)
				INNER JOIN ZnodePublishCatalog ZPC ON (TYU.PublishCatalogId = ZPC.PublishCatalogId)
				INNER JOIN ZnodePimCatalog ZPC1 ON (ZPC.PimCatalogId = ZPC1.PimCatalogId)
				WHERE CMSSEOTypeId = (SELECT TOP 1 CMSSEOTypeId FROM ZnodeCMSSEOType WHERE Name = 'Product') 
				AND EXISTS (SELECT TOP 1 1  FROM #TBL_PublishCatalogId TYUR WHERE  TYUR.PublishCatalogId = TYU.PublishCatalogId
				AND TYU.PublishProductId = TYUR.PublishProductId)
				AND ZCDL.LocaleId = dbo.Fn_GetDefaultLocaleId()
				and ZCSD.PortalId = isnull(ZPC1.PortalId,0)

				
				--insert INTO #ProductImages
				SELECT  TUI.PublishCatalogId, TYU.PublishProductId , @DomainUrl +'Catalog/'  + CAST(Max(ZPC1.PortalId) AS VARCHAr(100)) + '/'+ CAST(Isnull(Max(TUI.MaxSmallWidth),'') AS VARCHAR(100)) + '/' + Isnull(RT.MediaPath,'') AS ImageSmallPath    
				,isnull(ZPC1.IsAllowIndexing,0) as IsAllowIndexing
				INTO #ProductImages
				FROM ZnodePimAttributeValue ZPAV 
				INNER JOIN ZnodePublishProduct TYU ON (TYU.PimProductId  = ZPAV.PimProductId)
				INNER JOIN ZnodePimProductAttributeMedia  RT ON ( RT.PimAttributeValueId = ZPAV.PimAttributeValueId )
				--AND 
				--EXISTS (SELECT TOP 1 1  FROM #TBL_PublishCatalogId TUI WHERE  TUI.PublishProductId = TYU.PublishProductId AND TUI.PublishCatalogId = TYU.PublishCatalogId)
				INNER JOIN #TBL_PublishCatalogId TUI ON (TUI.PublishProductId = TYU.PublishProductId AND TUI.PublishCatalogId = TYU.PublishCatalogId
						 )--AND  TUI.LocaleId = dbo.Fn_GetDefaultLocaleId()
				INNER JOIN ZnodePublishCatalog ZPC ON (TYU.PublishCatalogId = ZPC.PublishCatalogId)
				INNER JOIN ZnodePimCatalog ZPC1 ON (ZPC.PimCatalogId = ZPC1.PimCatalogId)
				WHERE  RT.LocaleId = dbo.Fn_GetDefaultLocaleId()
				AND ZPAV.PimAttributeId = (SELECT TOp 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'ProductImage')
				group by TUI.PublishCatalogId, TYU.PublishProductId ,isnull(RT.MediaPath,''),isnull(ZPC1.IsAllowIndexing,0) 
		  -- end
		    
WHILE @Counter <= @maxCountId
BEGIN
 SET @LocaleId = (SELECT TOP 1 LocaleId FROM @TBL_LocaleId WHERE RowId = @Counter)
 

  INSERT INTO #PimProductAttributeJson 
  SELECT PimAttributeJsonId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeJSON
  WHERE LocaleId = @LocaleId

  INSERT INTO #PimProductAttributeJson 
  SELECT PimAttributeJsonId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeJSON ZPAX
  WHERE ZPAX.LocaleId = @DefaultLocaleId  
  AND NOT EXISTS (SELECT TOP 1 1 FROM #PimProductAttributeJson ZPAXI WHERE ZPAXI.PimAttributeId = ZPAX.PimAttributeId )

  INSERT INTO @PimDefaultValueLocale
  SELECT PimAttributeDefaultJsonId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultJson
  WHERE localeId = @LocaleId

  INSERT INTO @PimDefaultValueLocale 
   SELECT PimAttributeDefaultJsonId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultJson ZX
  WHERE localeId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM @PimDefaultValueLocale TRTR WHERE TRTR.PimAttributeDefaultValueId = ZX.PimAttributeDefaultValueId)
  
 
  --DECLARE @TBL_AttributeVAlue TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT  )
  --DECLARE @TBL_CustomeFiled TABLE (PimCustomeFieldJsonId INT ,CustomCode VARCHAR(300),PimProductId INT ,LocaleId INT )
  CREATE TABLE #TBL_CustomeFiled  (PimCustomeFieldJsonId INT ,CustomCode VARCHAR(300),PimProductId INT ,LocaleId INT )
  CREATE TABLE #TBL_AttributeVAlue (PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT  )



  INSERT INTO #TBL_CustomeFiled (PimCustomeFieldJsonId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldJsonId,RTR.PimProductId ,RTR.LocaleId,CustomCode
  FROM ZnodePimCustomeFieldJson RTR 
  INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = RTR.PimProductId)
  WHERE RTR.LocaleId = @LocaleId
 

  INSERT INTO #TBL_CustomeFiled (PimCustomeFieldJsonId,PimProductId ,LocaleId,CustomCode)
  SELECT  Distinct  PimCustomeFieldJsonId,ITR.PimProductId ,ITR.LocaleId,CustomCode
  FROM ZnodePimCustomeFieldJson ITR
  INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = ITR.PimProductId)
  WHERE ITR.LocaleId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM #TBL_CustomeFiled TBL  WHERE ITR.CustomCode = TBL.CustomCode AND ITR.PimProductId = TBL.PimProductId)
  

    INSERT INTO #TBL_AttributeVAlue (PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId )
    SELECT Distinct  PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId
	FROM @TBL_AttributeVAlueLocale
    WHERE LocaleId = @LocaleId

    
	INSERT INTO #TBL_AttributeVAlue(PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId )
	SELECT VI.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId
	FROM @TBL_AttributeVAlueLocale VI 
    WHERE VI.LocaleId = @DefaultLocaleId 
	AND NOT EXISTS (SELECT TOP 1 1 FROM #TBL_AttributeVAlue  CTE WHERE CTE.PimProductId = VI.PimProductId AND CTE.PimAttributeId = VI.PimAttributeId )
 
	------------Facet Merging Patch --------------
	IF OBJECT_ID('tempdb..#PimChildProductFacets') is not null
	BEGIN 
		DROP TABLE #PimChildProductFacets
	END 

	IF OBJECT_ID('tempdb..#PimAttributeDefaultXML') is not null
	BEGIN 
		DROP TABLE #PimAttributeDefaultXML
	END
	----Getting parent facets data
	Select  ZPPADV.PimAttributeDefaultValueId, ZPAV_Parent.PimAttributeValueId, ZPPADV.LocaleId
	Into #PimChildProductFacets
	from ZnodePimAttributeValue ZPAV_Parent
	inner join ZnodePimProductAttributeDefaultValue ZPPADV ON ZPAV_Parent.PimAttributeValueId = ZPPADV.PimAttributeValueId 
	where exists(select * from #ProductIds ZPPC where ZPAV_Parent.PimProductId = ZPPC.PimProductId )

	----Getting child facets for merging	
	insert into #PimChildProductFacets	  
	Select distinct ZPPADV.PimAttributeDefaultValueId, ZPAV_Parent.PimAttributeValueId, ZPPADV.LocaleId
	from ZnodePimAttributeValue ZPAV_Parent
	inner join ZnodePimProductTypeAssociation ZPPTA ON ZPAV_Parent.PimProductId = ZPPTA.PimParentProductId
	inner join ZnodePimAttributeValue ZPAV_Child ON ZPPTA.PimProductId = ZPAV_Child.PimProductId AND ZPAV_Parent.PimAttributeId = ZPAV_Child.PimAttributeId
	inner join ZnodePimProductAttributeDefaultValue ZPPADV ON ZPAV_Child.PimAttributeValueId = ZPPADV.PimAttributeValueId 
	where exists(select * from ZnodePimFrontendProperties ZPFP where ZPAV_Parent.PimAttributeId = ZPFP.PimAttributeId and ZPFP.IsFacets = 1)
	and exists(select * from #ProductIds ZPPC where ZPAV_Parent.PimProductId = ZPPC.PimProductId )
	and not exists(select * from ZnodePimProductAttributeDefaultValue ZPPADV1 where ZPAV_Parent.PimAttributeValueId = ZPPADV1.PimAttributeValueId 
		            and ZPPADV1.PimAttributeDefaultValueId = ZPPADV.PimAttributeDefaultValueId )

	----Merging childs facet attribute Default value XML for parent
	select  ZPADX.DefaultValueJson, ZPPADV.PimAttributeValueId, ZPPADV.LocaleId
	into #PimAttributeDefaultXML
	from #PimChildProductFacets ZPPADV		  
	inner join ZnodePimAttributeDefaultJson ZPADX ON ( ZPPADV.PimAttributeDefaultValueId = ZPADX.PimAttributeDefaultValueId )--AND ZPPADV.LocaleId = ZPADX.LocaleId)
	INNER JOIN @PimDefaultValueLocale GH ON (GH.PimAttributeDefaultJsonId = ZPADX.PimAttributeDefaultJsonId)
	------------Facet Merging Patch --------------   

	 IF OBJECT_ID('tempdb..#View_LoadManageProductInternal') is not null
	 BEGIN 
		DROP TABLE #View_LoadManageProductInternal
	 END 

	SELECT a.PimProductId ,b.AttributeValue as AttributeValue , b.LocaleId  ,a.PimAttributeId,c.AttributeCode ,b.ZnodePimAttributeValueLocaleId
	into #View_LoadManageProductInternal
	FROM ZnodePimAttributeValue a 
	INNER JOIN  ZnodePimAttributeValueLocale b ON ( b.PimAttributeValueId = a.PimAttributeValueId )
	INNER JOIN ZnodePimAttribute c ON ( c.PimAttributeId=a.PimAttributeId )
	INNER JOIN ZnodePimAttributeJSON c1   ON (c1.PimAttributeId = a.PimAttributeId )
	INNER JOIN #PimProductAttributeJson b1 ON (b1.PimAttributeJsonId = c1.PimAttributeJsonId )
	INNER JOIN #TBL_AttributeVAlue CTE ON (Cte.PimAttributeId = a.PimAttributeId AND Cte.ZnodePimAttributeValueLocaleId = b.ZnodePimAttributeValueLocaleId)
	UNION ALL
	SELECT a.PimProductId,ZPPATAV.AttributeValue AS AttributeValue  
	,ZPPATAV.LocaleId,a.PimAttributeId,c.AttributeCode  ,ZPPATAV.PimProductAttributeTextAreaValueId
	FROM ZnodePimAttributeValue a 
	INNER JOIN ZnodePimProductAttributeTextAreaValue ZPPATAV ON (ZPPATAV.PimAttributeValueId = a.PimAttributeValueId )
	INNER JOIN ZnodePimAttribute c ON ( c.PimAttributeId=a.PimAttributeId )
	INNER JOIN ZnodePimAttributeJSON c1   ON (c1.PimAttributeId = a.PimAttributeId )
	INNER JOIN #PimProductAttributeJson b1 ON (b1.PimAttributeJsonId = c1.PimAttributeJsonId )
	INNER JOIN #TBL_AttributeVAlue CTE ON (Cte.PimAttributeId = a.PimAttributeId AND Cte.ZnodePimAttributeValueLocaleId = ZPPATAV.PimProductAttributeTextAreaValueId)
	
	INSERT INTO #TBL_ZnodeTempPublish  
		SELECT  a.PimProductId,a.AttributeCode , 
			JSON_MODIFY (JSON_MODIFY (Json_Query( c.AttributeJSON  ) , '$.AttributeValues' ,  
			ISNULL(a.AttributeValue,'') ) ,'$.SelectValues',Json_Query('[]'))
			AS 'AttributeValue'
		FROM #View_LoadManageProductInternal a 
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = a.PimAttributeId )
		INNER JOIN #PimProductAttributeJson b ON (b.PimAttributeJsonId = c.PimAttributeJsonId )
		INNER JOIN #TBL_AttributeVAlue CTE ON (Cte.PimAttributeId = a.PimAttributeId AND Cte.ZnodePimAttributeValueLocaleId = a.ZnodePimAttributeValueLocaleId)
	UNION ALL 
			SELECT  a.PimProductId,c.AttributeCode , 
			JSON_MODIFY (JSON_MODIFY (Json_Query( c.AttributeJSON  ) , '$.AttributeValues' ,  
			ISNULL(TAVL.AttributeValue,'') ) ,'$.SelectValues',Json_Query('[]'))
			AS 'AttributeValue'
		FROM ZnodePimAttributeValue  a 
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = a.PimAttributeId )
		INNER JOIN #PimProductAttributeJson b ON (b.PimAttributeJsonId = c.PimAttributeJsonId )
		INNER JOIN ZnodePImAttribute ZPA  ON (ZPA.PimAttributeId = a.PimAttributeId)
		INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = a.PimProductId)
		Inner JOIN @TBL_AttributeVAlueLocale TAVL ON  (c.PimAttributeId = TAVL.PimAttributeId  and ZPP.PimProductId = TAVL.PimProductId )
		WHERE ZPA.IsPersonalizable = 1 
		AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodePimAttributeValueLocale q WHERE q.PimAttributeValueId = a.PimAttributeValueId) 
	UNION ALL 
		SELECT THB.PimProductId,THB.CustomCode,
		--'<Attributes><AttributeEntity>'+CustomeFiledJson +'</AttributeEntity></Attributes>' 
		JSON_MODIFY (Json_Query( CustomeFiledJson ) ,'$.SelectValues',Json_Query('[]')) 
		FROM ZnodePimCustomeFieldJson THB 
		INNER JOIN #TBL_CustomeFiled TRTE ON (TRTE.PimCustomeFieldJsonId = THB.PimCustomeFieldJsonId)
		UNION ALL 
		SELECT ZPAV.PimProductId,c.AttributeCode,
			JSON_MODIFY (JSON_MODIFY (c.AttributeJson,'$.AttributeValues',''), '$.SelectValues',
			Isnull((SELECT 
			Isnull(JSON_VALUE(DefaultValueJson, '$.Code'),'') Code 
			,Isnull(JSON_VALUE(DefaultValueJson, '$.LocaleId'),0) LocaleId
			,IsNull(JSON_VALUE(DefaultValueJson, '$.Value'),'') Value
			,IsNull(JSON_VALUE(DefaultValueJson, '$.AttributeDefaultValue'),'') AttributeDefaultValue
			,Isnull(JSON_VALUE(DefaultValueJson, '$.DisplayOrder'),0) DisplayOrder
			,Isnull(JSON_VALUE(DefaultValueJson, '$.IsEditable'),'false') IsEditable
			,Isnull(JSON_VALUE(DefaultValueJson, '$.SwatchText'),'') SwatchText
			,Isnull(JSON_VALUE(DefaultValueJson, '$.Path'),'') Path
			FROM #PimAttributeDefaultXML ZPADV
			WHERE (ZPADV.PimAttributeValueId = ZPAV.PimAttributeValueId) For JSON Auto 
			),'[]') 
		)  AttributeValue
		FROM ZnodePimAttributeValue ZPAV  With (NoLock)
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
		INNER JOIN #PimProductAttributeJson b ON (b.PimAttributeJsonId = c.PimAttributeJsonId )
		INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
		WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL 
		WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
	UNION ALL 
		SELECT DISTINCT  ZPAV.PimProductId,c.AttributeCode,
			JSON_MODIFY (JSON_MODIFY (Json_Query( c.AttributeJson  ) , '$.AttributeValues',  
			ISNULL((Select stuff( 
			(SELECT ','+ZPPG.MediaPath 
			FROM ZnodePimProductAttributeMedia ZPPG INNER JOIN  #TBL_AttributeVAlue TBLV ON 
			(	TBLV.PimProductId=  ZPAV.PimProductId AND TBLV.PimAttributeId = ZPAV.PimAttributeId )
			WHERE ZPPG.PimProductAttributeMediaId = TBLV.ZnodePimAttributeValueLocaleId
			FOR XML PATH(''),Type).value('.', 'varchar(max)'), 1, 1, '')
			),'') ) ,'$.SelectValues',Json_Query('[]'))   
			AS 'AttributeEntity'
		FROM ZnodePimAttributeValue ZPAV 
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
		INNER JOIN #PimProductAttributeJson b ON (b.PimAttributeJsonId = c.PimAttributeJsonId )
		INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
		WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeMedia ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
	UNION ALL 
		SELECT ZPLP.PimParentProductId ,c.AttributeCode, 
			JSON_MODIFY( JSON_Modify(c.AttributeJson , '$.AttributeValues' , 
			ISNULL(SUBSTRING((SELECT ','+cast( LP.SKU as varchar(600)) 
							 FROM #LinkProduct LP
							 WHERE LP.PimParentProductId = ZPLP.PimParentProductId 
							 AND LP.PimAttributeId = ZPLP.PimAttributeId
		FOR XML PATH ('') ),2,4000),'')),'$.SelectValues',Json_Query('[]'))   
	
		FROM ZnodePimLinkProductDetail ZPLP 
		INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPLP.PimParentProductId)
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = ZPLP.PimAttributeId )
		INNER JOIN #PimProductAttributeJson b ON (b.PimAttributeJsonId = c.PimAttributeJsonId )
		GROUP BY ZPLP.PimParentProductId , ZPP.PublishProductId  ,ZPLP.PimAttributeId,c.AttributeCode,c.AttributeJson,ZPP.PublishCatalogId
	UNION ALL 
		SELECT ZPAV.PimProductId,'DefaultSkuForConfigurable' ,
			JSON_MODIFY( JSON_Modify(
			REPLACE(REPLACE (c.AttributeJson,'ProductType','DefaultSkuForConfigurable'),'Product Type','Default Sku For Configurable'),
			'$.AttributeValues' , 
			ISNULL(SUBSTRING((SELECT ','+CAST(AttributeValue AS VARCHAR(50)) 
		FROM View_LoadManageProductInternal  ad 
		INNER JOIN ZnodePimProductTypeAssociation yt ON (yt.PimProductId = ad.PimProductId)
		WHERE Ad.AttributeCode = 'SKU'
		AND yt.PimParentProductId = ZPAV.PimProductId 
		ORDER BY yt.DisplayOrder , yt.PimProductTypeAssociationId ASC FOR XML PATH ('') ),2,4000),'')),'$.SelectValues',Json_Query('[]'))   
		FROM ZnodePimAttributeValue ZPAV  
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
		INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
		WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL 
		INNER JOIN ZnodePimAttributeDefaultValue dr ON (dr.PimAttributeDefaultValueId = ZPADVL.PimAttributeDefaultValueId)
		WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId
		AND dr.AttributeDefaultValueCode= 'ConfigurableProduct' 
		)
		AND EXISTS (select * from #PimProductAttributeJson b where b.PimAttributeJsonId = c.PimAttributeJsonId)
		AND c.AttributeCode = 'ProductType' 

	UNION ALL
		SELECT DISTINCT  UOP.PimProductId,c.AttributeCode,
			JSON_MODIFY (JSON_MODIFY (c.AttributeJson,'$.AttributeValues',''), '$.SelectValues',
			Isnull((SELECT  DISTINCT 
			Isnull(JSON_VALUE(AA.DefaultValueJson, '$.Code'),'') Code 
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.LocaleId'),0) LocaleId
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.Value'),'') Value
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.AttributeDefaultValue'),'') AttributeDefaultValue
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.DisplayOrder'),0) DisplayOrder
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.IsEditable'),'false') IsEditable
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.SwatchText'),'') SwatchText
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.Path'),'') Path 
			,ISNULL(ZPA.DisplayOrder,0)  AS VariantDisplayOrder 
			,ISNULL(ZPAVL_SKU.AttributeValue,'')   AS VariantSKU 
			--,Isnull(ZM.Path,'') 
		,'' AS VariantImagePath 
		FROM ZnodePimAttributeDefaultJson AA 
		INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId )
		INNER JOIN ZnodePimAttributeValue ZPAV1 ON (ZPAV1.PimAttributeValueId= ZPADV.PimAttributeValueId )
		-- check/join for active variants 
		INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId =ZPAV1.PimProductId)
		INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON (ZPAV.PimAttributevalueid = ZPAVL.PimAttributeValueId AND ZPAVL.AttributeValue = 'True')
		INNER JOIN ZnodePimProductTypeAssociation YUP ON (YUP.PimProductId = ZPAV1.PimProductId)
		-- SKU
		INNER JOIN ZnodePimAttributeValue ZPAV_SKU ON(YUP.PimProductId = ZPAV_SKU.PimProductId)
		INNER JOIN ZnodePimAttributeValueLocale ZPAVL_SKU ON (ZPAVL_SKU.PimAttributeValueId = ZPAV_SKU.PimAttributeValueId)
		LEFT JOIN ZnodePimAttribute ZPA ON (ZPA.PimattributeId = ZPAV1.PimAttributeId)
		WHERE (YUP.PimParentProductId  = UOP.PimProductId AND ZPAV1.pimAttributeId = UOP.PimAttributeId )
		-- Active Variants
		AND ZPAV.PimAttributeId = (SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'IsActive')
		-- VariantSKU
		AND ZPAV_SKU.PimAttributeId = (SELECT PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'SKU')
		For JSON Auto 
		),'[]')) 
				
		--</AttributeEntity></Attributes>' 
		FROM ZnodePimConfigureProductAttribute UOP 
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = UOP.PimAttributeId )
		WHERE  exists(select * from #TBL_PublishCatalogId PPCP1 where UOP.PimProductId = PPCP1.PimProductId )
		AND EXISTS (select * from #PimProductAttributeJson b where b.PimAttributeJsonId = c.PimAttributeJsonId)


			-------------configurable attribute 
			---------------------------------------------------------------------
			
			If (@RevisionType like '%Preview%'  OR @RevisionType like '%Production%'  ) 
				Delete from ZnodePublishProductEntity where SKU  in (select SKU from #TBL_PublishCatalogId
				A inner join ZnodePublishProductDetail B on A.PublishProductId   =B.PublishProductId   )
				AND LocaleId = @LocaleId
				AND VersionId in (SELECT VersionId FROM ZnodePublishVersionEntity where RevisionType = 'PREVIEW')
			If (@RevisionType like '%Production%' OR @RevisionType = 'None')
				Delete from ZnodePublishProductEntity where SKU  in (select SKU from #TBL_PublishCatalogId
				A inner join ZnodePublishProductDetail B on A.PublishProductId   =B.PublishProductId   )
				AND LocaleId = @LocaleId
				AND VersionId in (SELECT VersionId FROM ZnodePublishVersionEntity where RevisionType = 'PRODUCTION')

			Insert into ZnodePublishProductEntity (
					VersionId, --1
					IndexId, --2 
					ZnodeProductId,ZnodeCatalogId, --3
					SKU,LocaleId, --4 
					Name,ZnodeCategoryIds, --5
					IsActive, -- 6 
					Attributes, -- 7 
					Brands, -- 9
					CategoryName, --9
					CatalogName,DisplayOrder, --10 
					RevisionType,AssociatedProductDisplayOrder, --11
					ProductIndex,--12
					SalesPrice,RetailPrice,CultureCode,CurrencySuffix,CurrencyCode,SeoDescription,SeoKeywords,SeoTitle,SeoUrl,ImageSmallPath,SKULower --13 
					)
 			SELECT distinct ZPVE.VersionId, --1 
			CAST(ISNULL(ZPCP.ProductIndex,1) AS VARCHAr(100)) + CAST(ISNULL(ZPC.PublishCategoryId,'')  AS VARCHAR(50))  + 
			CAST(Isnull(ZPP.PublishCatalogId ,'')  AS VARCHAR(50)) + CAST( @LocaleId AS VARCHAR(50)) IndexId, --2 
			CAST(ZPP.PublishProductId AS VARCHAR(50)) PublishProductId,CAST(ZPP.PublishCatalogId  AS VARCHAR(50)) PublishCatalogId,  --3 
			CAST(ISNULL(ZPPDFG.SKU ,'') AS NVARCHAR(2000)) SKU,CAST( Isnull(@LocaleId ,'') AS VARCHAR(50)) LocaleId, -- 4 
			CAST(isnull(ZPPDFG.ProductName,'') AS NVARCHAR(2000) )  ProductName ,CAST(ISNULL(ZPCD.PublishCategoryId,'')  AS VARCHAR(50)) PublishCategoryId  -- 5 
			,CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50)) IsActive , --6 
			'[' +
				(Select STUFF((SELECT distinct ','+ AttributeValue from #TBL_ZnodeTempPublish TY WHERE TY.PimProductId = ZPP.PimProductId   
				FOR XML Path (''),Type).value('.', 'varchar(max)') ,1,1,'')  ) 
			+ ']' xmlvalue,  -- 7 
			'[]' Brands  --8 
			,CAST(isnull(PublishCategoryName,'') AS NVARCHAR(2000)) CategoryName  --9
			,CAST(Isnull(CatalogName,'')  AS NVARCHAR(2000)) CatalogName,CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50)) DisplayOrder  -- 10  
			,ZPVE.RevisionType RevisionType , 0 AssociatedProductDisplayOrder,-- pending  -- 11 
			Isnull(ZPCP.ProductIndex,1),  -- 12 

			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(CAST(SalesPrice  AS varchar(500)),'') else '' end SalesPrice , 
			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(CAST(RetailPrice  AS varchar(500)),'') else '' end RetailPrice , 
			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(CultureCode ,'') else '' end CultureCode , 
			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(CurrencySuffix ,'') else '' end CurrencySuffix , 
			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(CurrencyCode ,'') else '' end CurrencyCode , 
			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(SEODescription,'') else '' end SEODescriptionForIndex,
			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(SEOKeywords,'') else '' end SEOKeywords,
			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(SEOTitle,'') else '' end SEOTitle,
			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(SEOUrl ,'') else '' end SEOUrl,
			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(ImageSmallPath,'') else '' end ImageSmallPath,
			CAST(ISNULL(LOWER(ZPPDFG.SKU) ,'') AS NVARCHAR(100)) Lower_SKU -- 13
	FROM  #TBL_PublishCatalogId zpp
	INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
	INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
	INNER JOIN ZnodePublishVersionEntity ZPVE ON (ZPVE.ZnodeCatalogId  = ZPP.PublishCatalogId AND ZPVE.IsPublishSuccess =1 AND ZPVE.LocaleId = @LocaleId )
	LEFT JOIN #ZnodePrice TBZP ON (TBZP.PublishProductId = ZPP.PublishProductId)
	LEFT JOIN #ProductSKU TBPS ON (TBPS.PublishProductId = ZPP.PublishProductId)
	LEFT JOIN #ProductImages TBPI ON (TBPI.PublishProductId = ZPP.PublishProductId  )
	LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
	LEFT JOIN ZnodePublishCategory ZPC ON (ZPC.PublishCatalogId = ZPCP.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId)
	LEFT JOIN ZnodePimCategoryProduct ZPCCF ON (ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId )
	LEFT JOIN ZnodePimCategoryHierarchy ZPCH ON (ZPCH.PimCatalogId = ZPCV.PimCatalogId AND  ZPCH.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId) 
	LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ZPCP.PublishCategoryId AND ZPCD.LocaleId = @LocaleId )
	WHERE ZPPDFG.LocaleId = @LocaleId
		--AND zpp.LocaleId = @LocaleId
	AND 
		(
			(ZPVE.RevisionType =  Case when  (@RevisionType like '%Preview%'  OR @RevisionType like '%Production%' ) then 'Preview' End ) 
			OR 
			(ZPVE.RevisionType =  Case when (@RevisionType like '%Production%' OR @RevisionType = 'None') then  'Production'  end )
		)

	DELETE FROM #TBL_ZnodeTempPublish
	IF OBJECT_ID('tempdb..#PimProductAttributeJson') is not null
	 BEGIN 
		DELETE FROM #PimProductAttributeJson
	 END
	 IF OBJECT_ID('tempdb..#TBL_CustomeFiled') is not null
	 BEGIN 
	 DROP TABLE #TBL_CustomeFiled
	 END
	 IF OBJECT_ID('tempdb..#TBL_AttributeVAlue') is not null
	 BEGIN 
	 DROP TABLE #TBL_AttributeVAlue
	 END
 
	DELETE FROM @PimDefaultValueLocale
SET @Counter = @counter + 1 
END

SET @Status =1 

END TRY 
BEGIN CATCH 
	SET @Status =0  
	 SELECT 1 AS ID,@Status AS Status;   
	 DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
		@ErrorLine VARCHAR(100)= ERROR_LINE(),
		@ErrorCall NVARCHAR(MAX)= 'EXEC [Znode_GetPublishSingleProductJson] 
		@PublishCatalogId = '+CAST(@PublishCatalogId  AS VARCHAR	(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10))
				
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_GetPublishSingleProductJson',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
END CATCH
END
GO
IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_InsertUpdatePimCatalogProductDetailJson')
	DROP PROC Znode_InsertUpdatePimCatalogProductDetailJson
GO

CREATE PROCEDURE [dbo].[Znode_InsertUpdatePimCatalogProductDetailJson] 
(
  @PublishCatalogId INT = 0 
  ,@LocaleId TransferId READONLY 
  ,@UserId INT = 0   
)
AS 

--declare @LocaleId TransferId
--insert into @LocaleId
--select 1
--exec [Znode_InsertUpdatePimCatalogProductDetailJson] @PublishCatalogId=3,@LocaleId=@LocaleId,@UserId=2

--declare @LocaleId TransferId
--insert into @LocaleId
--select 1
--union 
--select 4
--union 
--select 2
--exec [Znode_POC_InsertUpdatePimCatalogProductDetail] @PublishCatalogId=3,@LocaleId=@LocaleId,@UserId=2
BEGIN 
 BEGIN TRY 

  SET NOCOUNT ON 
       DECLARE @LocaleId_In INT = 0 , @DefaultLocaleId INT = dbo.FN_GETDefaultLocaleId()
			   ,@Date DATETIME = dbo.fn_GetDate()
	   DECLARE @PimMediaAttributeId INT = dbo.Fn_GetProductImageAttributeId()		   

	   CREATE TABLE #PimDefaultValueLocale  (PimAttributeDefaultJsonId INT  PRIMARY KEY ,PimAttributeDefaultValueId INT ,LocaleId INT, DefaultValueJson	nvarchar(max) )

	   CREATE TABLE #AttributeValueLocale  (Id int Identity,  PimProductId int, AttributeCode Varchar(300), AttributeValue varchar(max), AttributeEntity varchar(max), LocaleId int )

	    SELECT ZPAV.PimProductId, ZPP.PublishProductId, ZPAVL.LocaleId
		into #ProductLocaleWise
		FROM ZnodePimAttributeValue ZPAV 
		INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId
		inner join ZnodePublishProduct ZPP on ZPAV.PimProductId = ZPP.PimProductId
		WHERE ZPAV.PimAttributeId = (select PimAttributeId from ZnodePimAttribute where AttributeCode = 'SKU')

		SELECT BTM.PimProductId , ZPCPD.PublishProductId, ZPCPD.PublishCatalogId,BTM.ModifiedDate
		into #ProductAttributeXML
		FROM ZnodePublishProductAttributeJson BTM 
		inner join ZnodePublishProduct ZPP1 ON BTM.PimProductId = ZPP1.PimProductId
		inner join ZnodePublishCatalogProductDetail ZPCPD ON ZPP1.PublishProductId = ZPCPD.PublishProductId AND ZPCPD.PublishCatalogId = ZPP1.PublishCatalogId 
		WHERE ZPCPD.PublishCatalogId =  @PublishCatalogId 

	    -------- Products Attribute modified 
		SELECT DISTINCT ZPP.PublishProductId,  ZPCC.PimCategoryHierarchyId 
		Into #ModifiedProducts
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId = ZPP.PimProductId )
		INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ZPAV.PimAttributeId)
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (isnull(ZPPC.PimCategoryHierarchyId,0) = isnull(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId AND ZPFGM.PimAttributeId = ZPAV.PimAttributeId))
		AND EXISTS (SELECT TOP 1 1 FROM #ProductAttributeXML BTM WHERE BTM.PimProductId = ZPP.PimProductId AND BTM.PublishCatalogId = ZPP.PublishCatalogId
						AND (BTM.ModifiedDate < ZPAV.ModifiedDate OR BTM.ModifiedDate < ZPA.ModifiedDate)   ) 
		
		-------- Products not published  
		Insert Into #ModifiedProducts
		SELECT ZPP.PublishProductId,  ZPCC.PimCategoryHierarchyId 
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (isnull(ZPPC.PimCategoryHierarchyId,0) = isnull(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId ))--AND ZPFGM.PimAttributeId = ZPAV.PimAttributeId))
		AND exists(select * from ZnodePimProduct ZPP1 INNER JOIN ZnodePublishState ZPS ON ZPP1.PublishStateId = ZPS.PublishStateId
					where StateName <> 'Publish' and ZPP.PimProductId = ZPP1.PimProductId )	
			
		-------- Products associated to catalog or category or modified catalog category products
		Insert Into #ModifiedProducts		
		SELECT ZPP.PublishProductId,  ZPCC.PimCategoryHierarchyId 
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		INNER JOIN ZnodePimCategoryProduct ZPCC1 ON  ZPP.PimProductId = ZPCC1.PimProductId 
		INNER JOIN ZnodePimCategoryHierarchy ZPCH ON ZPCC1.PimCategoryId = ZPCH.PimCategoryId and ZPC.PimCatalogId = ZPCH.PimCatalogId 
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (isnull(ZPPC.PimCategoryHierarchyId,0) = isnull(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId ))--AND ZPFGM.PimAttributeId = ZPAV.PimAttributeId))
		AND EXISTS (SELECT TOP 1 1 FROM #ProductAttributeXML BTM WHERE BTM.PimProductId = ZPCC1.PimProductId AND BTM.PublishCatalogId = ZPP.PublishCatalogId
						AND (BTM.ModifiedDate < ZPCC1.ModifiedDate )   ) 

		-------- Link Product modified 
		Insert Into #ModifiedProducts	
		SELECT ZPP.PublishProductId,  ZPCC.PimCategoryHierarchyId 
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePimLinkProductDetail ZPAV ON (ZPAV.PimParentProductId = ZPP.PimProductId )
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (isnull(ZPPC.PimCategoryHierarchyId,0) = isnull(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		--AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId AND ZPFGM.PimAttributeId = ZPAV.PimAttributeId))
		AND EXISTS (SELECT TOP 1 1 FROM #ProductAttributeXML BTM WHERE BTM.PimProductId = ZPP.PimProductId AND BTM.PublishCatalogId = ZPP.PublishCatalogId
						AND (BTM.ModifiedDate < ZPAV.ModifiedDate)   ) 

		--------Associated child Products (varients, Group) not published	
		Insert Into #ModifiedProducts	
		SELECT ZPP.PublishProductId,  ZPCC.PimCategoryHierarchyId 
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePimProductTypeAssociation ZPAV ON (ZPAV.PimProductId = ZPP.PimProductId )
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (isnull(ZPPC.PimCategoryHierarchyId,0) = isnull(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		AND exists(select * from ZnodePimProduct ZPP1 INNER JOIN ZnodePublishState ZPS ON ZPP1.PublishStateId = ZPS.PublishStateId
					where StateName <> 'Publish' and ZPAV.PimProductId = ZPP1.PimProductId )


		--------Link child Products (Bundle) not published 	
		Insert Into #ModifiedProducts
		SELECT ZPP.PublishProductId,  ZPCC.PimCategoryHierarchyId 
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePimLinkProductDetail ZPAV ON (ZPAV.PimProductId = ZPP.PimProductId )
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (isnull(ZPPC.PimCategoryHierarchyId,0) = isnull(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		AND exists(select * from ZnodePimProduct ZPP1 INNER JOIN ZnodePublishState ZPS ON ZPP1.PublishStateId = ZPS.PublishStateId
					where StateName <> 'Publish' and ZPAV.PimProductId = ZPP1.PimProductId )

		----Getting products of newly added category hierarchy 
		Insert Into #ModifiedProducts		
		SELECT ZPP.PublishProductId,  ZPCC.PimCategoryHierarchyId
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		INNER JOIN ZnodePimCategoryProduct ZPCC1 ON  ZPP.PimProductId = ZPCC1.PimProductId 
		INNER JOIN ZnodePimCategoryHierarchy ZPCH ON ZPCC1.PimCategoryId = ZPCH.PimCategoryId and ZPC.PimCatalogId = ZPCH.PimCatalogId 
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (isnull(ZPPC.PimCategoryHierarchyId,0) = isnull(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId ))--AND ZPFGM.PimAttributeId = ZPAV.PimAttributeId))
		AND not exists(select * from ZnodePublishCatalogProductDetail ZPCPPD where ZPCPPD.PimCategoryHierarchyId =  ZPCH.PimCategoryHierarchyId and ZPCPPD.PublishCatalogId = ZPP.PublishCatalogId ) 

		---------------------Category associated to catalog or category or modified catalog
		SELECT ZPCH.PimCategoryId, ZPC1.PublishCategoryId, ZPCH.PimCategoryHierarchyId
		into #ModifiedCategory
		FROM ZnodePimCategoryHierarchy ZPCH 
		INNER JOIN ZnodePublishCategory ZPC1 ON ZPCH.PimCategoryId = ZPC1.PimCategoryId 
        WHERE ZPC1.PublishCatalogId =  @PublishCatalogId 
		AND EXISTS (SELECT TOP 1 1 FROM ZnodePublishCatalogProductDetail BTM  
		WHERE BTM.PublishCatalogId = ZPC1.PublishCatalogId AND (BTM.ModifiedDate < ZPCH.ModifiedDate )   )
		and not exists(select * from #ModifiedProducts MP where  isnull(ZPCH.PimCategoryHierarchyId,0) = isnull(MP.PimCategoryHierarchyId,0))

		-------- Category associated to catalog or category or modified catalog
		Insert Into #ModifiedProducts		
		SELECT ZPP.PublishProductId,  ZPCC.PimCategoryHierarchyId 
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		INNER JOIN ZnodePimCategoryProduct ZPCC1 ON  ZPP.PimProductId = ZPCC1.PimProductId 
		INNER JOIN ZnodePimCategoryHierarchy ZPCH ON ZPCC1.PimCategoryId = ZPCH.PimCategoryId and ZPC.PimCatalogId = ZPCH.PimCatalogId 
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (isnull(ZPPC.PimCategoryHierarchyId,0) = isnull(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId ))
		AND EXISTS (SELECT TOP 1 1 FROM #ModifiedCategory BTM where BTM.PimCategoryHierarchyId = ZPCH.PimCategoryHierarchyId  ) 
		------------------

		--Getting all products of catalog for publish first time 
		SELECT ZPP.PublishProductId,  ZPAV.PimAttributeId, ZPP.PublishCatalogId , ZPCC.PimCategoryHierarchyId , ZPCC.PublishCategoryId,
		       ZPAV.PimAttributeValueId, ZPC.CatalogName ,ZPP.PimProductId ,ZPA.AttributeCode				
		INTO #ZnodePublishCategoryProduct
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId = ZPP.PimProductId )
		INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ZPAV.PimAttributeId)
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (isnull(ZPPC.PimCategoryHierarchyId,0) = isnull(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId AND ZPFGM.PimAttributeId = ZPAV.PimAttributeId))
		AND NOT EXISTS (SELECT TOP 1 1 FROM #ProductAttributeXML BTM WHERE BTM.PimProductId = ZPP.PimProductId AND BTM.PublishCatalogId = ZPP.PublishCatalogId)
		
		--Getting all products of catalog for publish which are modified after last publish
		INSERT INTO #ZnodePublishCategoryProduct 
		SELECT ZPP.PublishProductId,  ZPAV.PimAttributeId, ZPP.PublishCatalogId , ZPCC.PimCategoryHierarchyId , ZPCC.PublishCategoryId
			   ,ZPAV.PimAttributeValueId, ZPC.CatalogName--,CASE WHEN ZPCC.PublishProductId IS NULL THEN 1 ELSE  dense_rank()Over(ORDER BY ZPCC.PimCategoryHierarchyId,ZPCC.PublishProductId) END  ProductIndex 	
			   ,ZPP.PimProductId ,ZPA.AttributeCode				
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId = ZPP.PimProductId )
		INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ZPAV.PimAttributeId)
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (ZPPC.PimCategoryHierarchyId = ZPCC.PimCategoryHierarchyId AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId AND ZPFGM.PimAttributeId = ZPAV.PimAttributeId))
		AND EXISTS (SELECT * from #ModifiedProducts MP where ZPP.PublishProductId = MP.PublishProductId 
		AND isnull(ZPCC.PimCategoryHierarchyId,0) = isnull(MP.PimCategoryHierarchyId,0)
		) 
	
		CREATE INDEX IDX_#ZnodePublishCategoryProduct_PimProductId ON #ZnodePublishCategoryProduct(PimProductId)
		CREATE INDEX IDX_#ZnodePublishCategoryProduct_PublishCategoryId ON #ZnodePublishCategoryProduct(PublishCategoryId)

		CREATE INDEX IDX_#ZnodePublishCategoryProduct_PimAttributeValueId ON #ZnodePublishCategoryProduct(PimAttributeValueId)
		CREATE INDEX IDX_#ZnodePublishCategoryProduct_PimAttributeId ON #ZnodePublishCategoryProduct(PimAttributeId)
		 
		------Getting All Link Product Details
		Select ZPLPD.PimParentProductId, ZPLPD.PimProductId, ZPLPD.PimAttributeId, ZPAVL.AttributeValue as SKU
		into #LinkProduct
		FROM ZnodePimLinkProductDetail ZPLPD 
		INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId = ZPLPD.PimProductId)
		INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId
		WHERE exists(select * from ZnodePimAttribute ZPA where ZPA.PimAttributeId = ZPAV.PimAttributeId and ZPA.AttributeCode = 'SKU')
		
		 ----Getting products link product value entity
	     INSERT INTO #AttributeValueLocale ( PimProductId, AttributeCode, AttributeValue, AttributeEntity, LocaleId )
	     SELECT ZPLP.PimParentProductId ,ZPAX.AttributeCode, '' AttributeValue , 
		 JSON_MODIFY( JSON_Modify(ZPAX.AttributeJson , '$.AttributeValues' , 
		 ISNULL(SUBSTRING ( (SELECT ','+cast( LP.SKU as varchar(600))
							FROM #LinkProduct LP
							WHERE LP.PimParentProductId = ZPLP.PimParentProductId 
							AND LP.PimAttributeId = ZPLP.PimAttributeId FOR XML PATH('')),2,8000),'') ),'$.SelectValues',Json_Query('[]'))   

							, ZPAX.LocaleId
		 FROM ZnodePimLinkProductDetail ZPLP
		 INNER JOIN ZnodePimAttributeJSON ZPAX ON (ZPAX.PimAttributeId = ZPLP.PimAttributeId )
		 WHERE EXISTS(SELECT * FROM #ZnodePublishCategoryProduct PPCP  WHERE (ZPLP.PimParentProductId = PPCP.PimProductId ))
		 GROUP BY ZPLP.PimParentProductId ,ZPAX.AttributeCode , ZPAX.AttributeJSON,ZPAX.LocaleId,ZPAX.AttributeCode,ZPLP.PimAttributeId

	
	   --DECLARE  CR_Locale_id CURSOR FOR 
	   --SELECT Id 
	   --FROM @LocaleId
	   --ORDER BY Id ASC

	   --OPEN CR_Locale_id  
	   --FETCH NEXT FROM CR_Locale_id INTO @LocaleId_In

	   --WHILE @@FETCH_STATUS = 0  
	   --BEGIN 


		  ----Getting product attribute value entity
	      INSERT INTO #AttributeValueLocale ( PimProductId, AttributeCode, AttributeValue, AttributeEntity, LocaleId )
		  SELECT PPCP.PimProductId , ZPA.AttributeCode,ZPAVL.AttributeValue ,
					--JSON_MODIFY(ZPAX.AttributeXML,'append $',+ISNULL(ZPAVL.AttributeValue,'') ) AttributeEntity,
					JSON_MODIFY(
					JSON_MODIFY (Json_Query( ZPAX.AttributeJSON  ) , '$.AttributeValues' ,  ISNULL(ZPAVL.AttributeValue,'') )    
					,'$.SelectValues',Json_Query('[]'))   
					AS 'AttributeEntity', 
				 ZPAVL.LocaleId
		  FROM ZnodePimAttributeValue PPCP
		  INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = PPCP.PimAttributeId)
		  INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON (PPCP.PimAttributeValueId =ZPAVL.PimAttributeValueId)
		  INNER JOIN ZnodePimAttributeJSON ZPAX ON (ZPAX.PimAttributeId = ZPA.PimAttributeId and ZPAX.LocaleId = ZPAVL.LocaleId)
		  WHERE --ZPAVL.LocaleId = @LocaleId_In AND
		  EXISTS(SELECT * FROM #ZnodePublishCategoryProduct PPCP1  WHERE PPCP1.PimProductId = PPCP.PimProductId)--(PPCP1.PimAttributeValueId =PPCP.PimAttributeValueId) AND (ZPA.PimAttributeId = PPCP1.PimAttributeId))
		  AND not exists(select * from #AttributeValueLocale AVL where PPCP.PimProductId = AVL.PimProductId and ZPA.AttributeCode = AVL.AttributeCode and ZPAVL.LocaleId = AVL.LocaleId )
		  and not exists(select * from ZnodePimConfigureProductAttribute UOP where ZPAX.PimAttributeId = UOP.PimAttributeId and PPCP.PimProductId = UOP.PimProductId )
		  --group by PPCP.PimProductId , ZPA.AttributeCode,ZPAVL.AttributeValue , ZPAX.AttributeJson

		  IF OBJECT_ID('TEMPDB..#ZnodePublishCatalogProductDetail') IS NOT NULL
			DROP TABLE #ZnodePublishCatalogProductDetail

		  IF OBJECT_ID('TEMPDB..#ZnodePublishCatalogProductDetail1') IS NOT NULL
			DROP TABLE #ZnodePublishCatalogProductDetail1

		  IF OBJECT_ID('TEMPDB..#TBL_ProductRequiredAttribute') IS NOT NULL
			DROP TABLE #TBL_ProductRequiredAttribute
		  			
		  --SELECT PIV.PimProductId,max(PIV.SKU) as SKU, max(PIV.ProductName) as ProductName,max(PIV.IsActive ) as IsActive
		  --INTO #TBL_ProductRequiredAttribute
		  --FROM #AttributeValueLocale 
		  --PIVOT 
		  --(
		  -- Max(AttributeValue) FOR AttributeCode IN (SKU, ProductName,IsActive)
		  --) PIV 
		  --group by PIV.PimProductId 

		  
		create table #TBL_ProductRequiredAttribute (PimProductId int,SKU varchar(600),ProductName varchar(600), IsActive varchar(10), LocaleId INT)

		insert into #TBL_ProductRequiredAttribute(PimProductId, LocaleId)
		select distinct PimProductId, LocaleId from #AttributeValueLocale

		update #TBL_ProductRequiredAttribute 
		set SKU = b.AttributeValue
		from #TBL_ProductRequiredAttribute a
		inner join #AttributeValueLocale b on a.PimproductId = b.PimProductId AND a.LocaleId = b.LocaleId
		where b.AttributeCode = 'SKU'

		update #TBL_ProductRequiredAttribute 
		set ProductName = b.AttributeValue
		from #TBL_ProductRequiredAttribute a
		inner join #AttributeValueLocale b on a.PimproductId = b.PimProductId AND a.LocaleId = b.LocaleId
		where b.AttributeCode = 'ProductName'

		update #TBL_ProductRequiredAttribute 
		set IsActive = b.AttributeValue
		from #TBL_ProductRequiredAttribute a
		inner join #AttributeValueLocale b on a.PimproductId = b.PimProductId AND a.LocaleId = b.LocaleId
		where b.AttributeCode = 'IsActive'

		  CREATE INDEX IDX_#TBL_ProductRequiredAttribute_PimProductId ON #TBL_ProductRequiredAttribute(PimProductId)

		  SELECT ZPI.PublishProductId, ZPI.PublishCatalogId ,TYU.PublishCategoryId,ZPI.CatalogName,ISNULL(ZPI.PimCategoryHierarchyId,0) PimCategoryHierarchyId
					,TPAR.SKU,TPAR.ProductName,TPAR.IsActive,TYU.PublishCategoryName CategoryName,TPAR.LocaleId
		   into #ZnodePublishCatalogProductDetail
		   FROM #ZnodePublishCategoryProduct ZPI
		   INNER JOIN #TBL_ProductRequiredAttribute TPAR ON (TPAR.PimProductId = ZPI.PimProductId )
		   LEFT JOIN ZnodePublishCategoryDetail TYU ON (TYU.PublishCategoryId = ZPI.PublishCategoryId)
		   --where TPAR.LocaleId = @LocaleId_In
		   GROUP BY PublishProductId, PublishCatalogId ,TYU.PublishCategoryId,CatalogName,PimCategoryHierarchyId
					,SKU,ProductName,TPAR.IsActive,PublishCategoryName, TPAR.LocaleId  

	
						
			CREATE INDEX IDX_#ZnodePublishCatalogProductDetail ON #ZnodePublishCatalogProductDetail(PublishProductId,PublishCatalogId,PimCategoryHierarchyId,LocaleId)

			SELECT PublishProductId,PublishCatalogId,PimCategoryHierarchyId,SKU,ProductName,CategoryName, CatalogName, LocaleId ,IsActive
			      ,CASE WHEN PublishProductId IS NULL THEN 1 ELSE Row_Number()Over(Partition by PublishProductId ORDER BY PublishProductId,PimCategoryHierarchyId) END  ProductIndex
			INTO #ZnodePublishCatalogProductDetail1
			from #ZnodePublishCatalogProductDetail


			insert into #ZnodePublishCatalogProductDetail1 (PublishProductId,PublishCatalogId,PimCategoryHierarchyId,SKU,ProductName,CategoryName, CatalogName, LocaleId ,IsActive,ProductIndex)
			select PublishProductId,PublishCatalogId,PimCategoryHierarchyId,SKU,ProductName,CategoryName, CatalogName, b.Id ,IsActive,ProductIndex
			from #ZnodePublishCatalogProductDetail1 a
			cross apply @LocaleId b 
			where not exists(select * from #ZnodePublishCatalogProductDetail1 c where a.PublishProductId = c.PublishProductId and b.Id = c.LocaleId  )
			and a.LocaleId = @DefaultLocaleId 

			DELETE ZPCPD 
			from ZnodePublishCatalogProductDetail ZPCPD
			WHERE not exists(select * from #ProductLocaleWise ZPCPD1 where ZPCPD.PublishProductId = ZPCPD1.PublishProductId 
			                 and ZPCPD.LocaleId = ZPCPD1.LocaleId )  

							 ----Update data ZnodePublishCatalogProductDetail 
			UPDATE TARGET
			SET  TARGET.ProductIndex	=SOURCE.ProductIndex
				,TARGET.ModifiedBy		= @UserId	
				,TARGET.ModifiedDate	= @Date
			from ZnodePublishCatalogProductDetail TARGET
			INNER JOIN #ZnodePublishCatalogProductDetail1 SOURCE
			ON (
		        SOURCE.PublishProductId = TARGET.PublishProductId
				AND SOURCE.PublishCatalogId = TARGET.PublishCatalogId 
				AND isnull(SOURCE.PimCategoryHierarchyId,0) = isnull(TARGET.PimCategoryHierarchyId,0)
				AND SOURCE.LocaleId = TARGET.LocaleId --@LocaleId_In
				)

			----Update data ZnodePublishCatalogProductDetail 
			UPDATE TARGET
			SET  
				TARGET.ProductName		=SOURCE.ProductName
				,TARGET.CategoryName	=SOURCE.CategoryName
				,TARGET.CatalogName		=SOURCE.CatalogName
				,TARGET.IsActive		=case when SOURCE.IsActive in ('0','false') then 0 else 1 end 
				,TARGET.ModifiedBy		= @UserId	
				,TARGET.ModifiedDate	= @Date
			from ZnodePublishCatalogProductDetail TARGET
			INNER JOIN #ZnodePublishCatalogProductDetail1 SOURCE
			ON (
		        TARGET.SKU = SOURCE.SKU
				AND SOURCE.LocaleId = TARGET.LocaleId --@LocaleId_In
				)


			----Insert data ZnodePublishCatalogProductDetail 
			INSERT INTO ZnodePublishCatalogProductDetail
				( PublishProductId,PublishCatalogId,PimCategoryHierarchyId,SKU,ProductName,CategoryName, CatalogName,
				  LocaleId ,IsActive,ProductIndex,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate )
			SELECT SOURCE.PublishProductId ,SOURCE.PublishCatalogId ,SOURCE.PimCategoryHierarchyId ,SOURCE.SKU ,SOURCE.ProductName
			,SOURCE.CategoryName ,SOURCE.CatalogName ,SOURCE.LocaleId ,SOURCE.IsActive ,SOURCE.ProductIndex ,@UserId ,@Date ,@UserId ,@Date
			FROM #ZnodePublishCatalogProductDetail1 SOURCE
			WHERE NOT EXISTS(SELECT * FROM ZnodePublishCatalogProductDetail TARGET WHERE SOURCE.PublishProductId = TARGET.PublishProductId
							AND SOURCE.PublishCatalogId = TARGET.PublishCatalogId 
							AND SOURCE.PimCategoryHierarchyId = TARGET.PimCategoryHierarchyId 
							AND TARGET.LocaleId = SOURCE.LocaleId )
					
			----		  
		    insert into ZnodePublishCatalogProductDetail (PublishProductId,PublishCatalogId,PimCategoryHierarchyId,SKU,ProductName,CategoryName, CatalogName,
				  LocaleId ,IsActive,ProductIndex,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			select PublishProductId,PublishCatalogId,PimCategoryHierarchyId,SKU,ProductName,CategoryName, CatalogName,
				  b.Id ,IsActive,ProductIndex,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
			from ZnodePublishCatalogProductDetail a
			cross apply @LocaleId b 
			where not exists(select * from ZnodePublishCatalogProductDetail c where a.PublishProductId = c.PublishProductId and b.Id = c.LocaleId  )
			and a.LocaleId = @DefaultLocaleId

			DELETE ZPCPD from ZnodePublishCatalogProductDetail ZPCPD
			inner join ZnodePublishProduct ZPD on ZPCPD.PublishProductId = ZPD.PublishProductId and ZPCPD.PublishCatalogId = ZPD.PublishCatalogId
			inner join ZnodePublishCatalog ZPC on ZPCPD.PublishCatalogId = ZPC.PublishCatalogId
			where not exists(select * from ZnodePimCategoryProduct ZPCC 
			      inner join ZnodePimCategoryHierarchy ZPCH ON ZPCC.PimCategoryId = ZPCH.PimCategoryId where ZPD.PimProductId = ZPCC.PimProductId and ZPC.PimCatalogId = ZPCH.PimCatalogId and ZPCPD.PimCategoryHierarchyId = ZPCH.PimCategoryHierarchyId)
			and ZPCPD.PimCategoryHierarchyId <> 0

			update ZnodePublishCatalogProductDetail 
			set SKU = b.AttributeValue
			from ZnodePublishCatalogProductDetail a
			inner join ZnodePublishProduct ZPP on a.PublishProductId = ZPP.PublishProductId
			inner join #AttributeValueLocale b on ZPP.PimproductId = b.PimProductId AND a.LocaleId = b.LocaleId
			where b.AttributeCode = 'SKU'

		update ZnodePublishCatalogProductDetail 
		set ProductName = b.AttributeValue
		from ZnodePublishCatalogProductDetail a
		inner join ZnodePublishProduct ZPP on a.PublishProductId = ZPP.PublishProductId
		inner join #AttributeValueLocale b on ZPP.PimproductId = b.PimProductId AND a.LocaleId = b.LocaleId
		where b.AttributeCode = 'ProductName'

		update ZnodePublishCatalogProductDetail 
		set IsActive = b.AttributeValue
		from ZnodePublishCatalogProductDetail a
		inner join ZnodePublishProduct ZPP on a.PublishProductId = ZPP.PublishProductId
		inner join #AttributeValueLocale b on ZPP.PimproductId = b.PimProductId AND a.LocaleId = b.LocaleId
		where b.AttributeCode = 'IsActive'

	   -- FETCH NEXT FROM CR_Locale_id INTO @LocaleId_In
	   --END    
	   
	   --CLOSE CR_Locale_id  
	   --DEALLOCATE CR_Locale_id 

		  select a.PimProductId,  a.PimAttributeId
		  into #PimProductAttributeDefaultValue
		  from ZnodePimAttributeValue a 
		  Inner join ZnodePimProductAttributeDefaultValue b on a.PimAttributeValueId = b.PimAttributeValueId 

		  create index Idx_#PimProductAttributeDefaultValue on #PimProductAttributeDefaultValue (PimProductId,PimAttributeId)

		  INSERT INTO #PimDefaultValueLocale
		  SELECT PimAttributeDefaultJsonId,PimAttributeDefaultValueId,LocaleId ,DefaultValueJson
		  FROM ZnodePimAttributeDefaultJSON

		  SELECT  AA.DefaultValueJson , ZPADV.PimAttributeValueId, AA.LocaleId 
		  into #PimAttributeDefaultXML
		  FROM ZnodePimAttributeDefaultJSON AA 
		  INNER JOIN #PimDefaultValueLocale GH ON (GH.PimAttributeDefaultJsonId = AA.PimAttributeDefaultJsonId AND AA.LocaleId = GH.LocaleId)
		  INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId AND AA.LocaleId = ZPADV.LocaleId)

		  ----Getting child facets for merging		  
		  Select distinct ZPPADV.PimAttributeDefaultValueId, ZPAV_Parent.PimAttributeValueId, ZPPADV.LocaleId
		  Into #PimChildProductFacets
		  from ZnodePimAttributeValue ZPAV_Parent
		  inner join ZnodePimProductTypeAssociation ZPPTA ON ZPAV_Parent.PimProductId = ZPPTA.PimParentProductId
		  inner join ZnodePimAttributeValue ZPAV_Child ON ZPPTA.PimProductId = ZPAV_Child.PimProductId AND ZPAV_Parent.PimAttributeId = ZPAV_Child.PimAttributeId
		  inner join ZnodePimProductAttributeDefaultValue ZPPADV ON ZPAV_Child.PimAttributeValueId = ZPPADV.PimAttributeValueId 
		  where exists(select * from ZnodePimFrontendProperties ZPFP where ZPAV_Parent.PimAttributeId = ZPFP.PimAttributeId and ZPFP.IsFacets = 1)
		  and exists(select * from #ZnodePublishCategoryProduct ZPPC where ZPAV_Parent.PimProductId = ZPPC.PimProductId )
		  and not exists(select * from ZnodePimProductAttributeDefaultValue ZPPADV1 where ZPAV_Parent.PimAttributeValueId = ZPPADV1.PimAttributeValueId 
		                 and ZPPADV1.PimAttributeDefaultValueId = ZPPADV.PimAttributeDefaultValueId )

		  ----Merging childs facet attribute Default value XML for parent
		  insert into #PimAttributeDefaultXML (DefaultValueJson, PimAttributeValueId, LocaleId)
		  select ZPADX.DefaultValueJson, ZPPADV.PimAttributeValueId, ZPPADV.LocaleId
		  from #PimChildProductFacets ZPPADV		  
		  inner join ZnodePimAttributeDefaultJSON ZPADX ON ( ZPPADV.PimAttributeDefaultValueId = ZPADX.PimAttributeDefaultValueId AND ZPPADV.LocaleId = ZPADX.LocaleId)

		  CREATE INDEX Idx_#PimDefaultValueLocale ON #PimDefaultValueLocale(PimAttributeDefaultJsonId,LocaleId)

		  CREATE INDEX Idx_#PimAttributeDefaultXML ON #PimAttributeDefaultXML(PimAttributeValueId,LocaleId)
		  INCLUDE (DefaultValueJson)

		----Getting default attribute value entity
		INSERT INTO #AttributeValueLocale
		
		  SELECT PPCP.PimProductId, PPCP.AttributeCode,'' AttributeValue,
		JSON_MODIFY (JSON_MODIFY (ZPAX.AttributeJson,'$.AttributeValues',''), '$.SelectValues',
			
				Isnull((SELECT 
							Isnull(JSON_VALUE(DefaultValueJson, '$.Code'),'') Code 
							,Isnull(JSON_VALUE(DefaultValueJson, '$.LocaleId'),0) LocaleId
							,IsNull(JSON_VALUE(DefaultValueJson, '$.Value'),'') Value
							,IsNull(JSON_VALUE(DefaultValueJson, '$.AttributeDefaultValue'),'') AttributeDefaultValue
							,Isnull(JSON_VALUE(DefaultValueJson, '$.DisplayOrder'),0) DisplayOrder
							,Isnull(JSON_VALUE(DefaultValueJson, '$.IsEditable'),'false') IsEditable
							,Isnull(JSON_VALUE(DefaultValueJson, '$.SwatchText'),'') SwatchText
							,Isnull(JSON_VALUE(DefaultValueJson, '$.Path'),'') Path
					FROM #PimAttributeDefaultXML aa
					WHERE (aa.PimAttributeValueId = PPCP.PimAttributeValueId and AA.LocaleId = ZPAX.LocaleId ) For JSON Auto 
				),'[]') 
				) 
			 AttributeEntity 
		 , ZPAX.LocaleId
		 FROM #ZnodePublishCategoryProduct PPCP 
		 INNER JOIN ZnodePimAttributeJSON ZPAX ON (ZPAX.PimAttributeId = PPCP.PimAttributeId)
		 where 
		 not exists(select * from #AttributeValueLocale AVL where PPCP.PimProductId = AVL.PimProductId and PPCP.AttributeCode = AVL.AttributeCode and ZPAX.LocaleId = AVL.LocaleId )
		 and exists(select * from #PimProductAttributeDefaultValue a  where PPCP.PimProductId = a.PimProductId and ZPAX.PimAttributeId = a.PimAttributeId )
		 and exists(select * from ZnodePimAttributeValue a Inner join ZnodePimProductAttributeDefaultValue b on a.PimAttributeValueId = b.PimAttributeValueId 
		            and PPCP.PimProductId = a.PimProductId and ZPAX.PimAttributeId = a.PimAttributeId )
		 and not exists(select * from ZnodePimConfigureProductAttribute UOP where ZPAX.PimAttributeId = UOP.PimAttributeId and PPCP.PimProductId = UOP.PimProductId )

		 
		 ----Getting text attribute value entity
		 INSERT INTO #AttributeValueLocale ( PimProductId, AttributeCode, AttributeValue, AttributeEntity, LocaleId )
		 SELECT PPCP.PimProductId , ZPA.AttributeCode,'' AttributeValue ,
		 JSON_MODIFY (JSON_MODIFY (Json_Query( ZPAX.AttributeJSON  ) , '$.AttributeValues' ,  ISNULL(ZPAVL.AttributeValue,'') ) ,'$.SelectValues',Json_Query('[]'))
		    AS 'AttributeEntity', 
		 ZPAVL.LocaleId
		 FROM ZnodePimAttributeValue PPCP
		 INNER JOIN ZnodePimProductAttributeTextAreaValue ZPAVL ON (PPCP.PimAttributeValueId =ZPAVL.PimAttributeValueId)
		 INNER JOIN ZnodePimAttributeJSON ZPAX ON (ZPAX.PimAttributeId = PPCP.PimAttributeId AND ZPAX.LocaleId = ZPAVL.LocaleId)
		 INNER JOIN ZnodePimAttribute ZPA on PPCP.PimAttributeId = ZPA.PimAttributeId
	     where exists(select * from #ZnodePublishCategoryProduct PPCP1 WHERE PPCP1.PimProductId = PPCP.PimProductId) --(PPCP1.PimAttributeValueId =ZPAVL.PimAttributeValueId) and (ZPAX.PimAttributeId = PPCP1.PimAttributeId))
		 and not exists(select * from #AttributeValueLocale AVL where PPCP.PimProductId = AVL.PimProductId and ZPA.AttributeCode = AVL.AttributeCode and ZPAVL.LocaleId = AVL.LocaleId )
		group by PPCP.PimProductId , ZPA.AttributeCode,ZPAX.AttributeJson,ZPAVL.LocaleId,ZPAVL.AttributeValue

		 ----Getting custome field value entity
		 INSERT INTO #AttributeValueLocale ( PimProductId, AttributeCode, AttributeValue, AttributeEntity, LocaleId )
 		 SELECT ZPCFX.PimProductId , ZPCFX.CustomCode, '' AttributeValue ,
		 JSON_MODIFY (Json_Query( ZPCFX.CustomeFiledJson) ,'$.SelectValues',Json_Query('[]')) 
		 AttributeEntity, 
		 ZPCFX.LocaleId
		 FROM ZnodePimCustomeFieldJSON ZPCFX 
		 where exists(select * from #ZnodePublishCategoryProduct PPCP where (PPCP.PimProductId = ZPCFX.PimProductId ))
		 and not exists(select * from #AttributeValueLocale AVL where ZPCFX.PimProductId = AVL.PimProductId and ZPCFX.CustomCode = AVL.AttributeCode and ZPCFX.LocaleId = AVL.LocaleId )
		 group by ZPCFX.PimProductId , ZPCFX.CustomCode, ZPCFX.CustomeFiledJson , ZPCFX.LocaleId

		  ----Getting image attribute value entity
		 INSERT INTO #AttributeValueLocale ( PimProductId, AttributeCode, AttributeValue, AttributeEntity, LocaleId )
		 SELECT PPCP.PimProductId, ZPA.AttributeCode,'' AttributeValue,
		 JSON_MODIFY (JSON_MODIFY (Json_Query( ZPAX.AttributeJSON  ) , '$.AttributeValues',  
		 ISNULL((Select stuff( (SELECT ','+ZPPAM.MediaPath FROM ZnodePimProductAttributeMedia ZPPAM WHERE (ZPPAM.PimAttributeValueId = PPCP.PimAttributeValueId)
				 FOR XML PATH(''),Type).value('.', 'varchar(max)'), 1, 1, '')
				 
				 ),'') ) ,'$.SelectValues',Json_Query('[]'))   
				 AS 'AttributeEntity', 
				 ZPAX.LocaleId
		 FROM ZnodePimAttributeValue PPCP 
		 INNER JOIN ZnodePimAttributeJSON ZPAX ON (ZPAX.PimAttributeId = PPCP.PimAttributeId)
		 INNER JOIN ZnodePimAttribute ZPA ON ZPA.PimAttributeId = PPCP.PimAttributeId
		 where not exists(select * from #AttributeValueLocale AVL where PPCP.PimProductId = AVL.PimProductId and ZPA.AttributeCode = AVL.AttributeCode and ZPAX.LocaleId = AVL.LocaleId )
		 and exists(select * from ZnodePimProductAttributeMedia b where PPCP.PimAttributeValueId = b.PimAttributeValueId )
		 and exists(select * from #ZnodePublishCategoryProduct PPCP1 where PPCP.PimProductId = PPCP1.PimProductId )
		 and not exists(select * from ZnodePimConfigureProductAttribute UOP where ZPAX.PimAttributeId = UOP.PimAttributeId and PPCP.PimProductId = UOP.PimProductId )

		 -------------configurable attribute 		 
		
		INSERT INTO #AttributeValueLocale ( PimProductId, AttributeCode, AttributeValue, AttributeEntity, LocaleId )
		SELECT DISTINCT UOP.PimProductId,c.AttributeCode,'' AttributeValue ,--'<Attributes><AttributeEntity>'+
		JSON_MODIFY (Isnull(JSON_MODIFY (c.AttributeJson,'$.AttributeValues',''),'')  ,'$.SelectValues',
			Isnull((SELECT DISTINCT 
							Isnull(JSON_VALUE(AA.DefaultValueJson, '$.Code'),'') Code 
							,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.LocaleId'),0) LocaleId
							,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.Value'),'') Value
							,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.AttributeDefaultValue'),'') AttributeDefaultValue
							,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.DisplayOrder'),0) DisplayOrder
							,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.IsEditable'),'false') IsEditable
							,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.SwatchText'),'') SwatchText
							,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.Path'),'') Path 
							,ISNULL(ZPA.DisplayOrder,0)  AS VariantDisplayOrder 
							,ISNULL(ZPAVL_SKU.AttributeValue,'')   AS VariantSKU 
							,Isnull(ZM.Path,'') AS VariantImagePath 
						 FROM ZnodePimAttributeDefaultJSON AA 
						 INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId )
						 INNER JOIN ZnodePimAttributeValue ZPAV1 ON (ZPAV1.PimAttributeValueId= ZPADV.PimAttributeValueId )
						 -- check/join for active variants 
						 INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId =ZPAV1.PimProductId)
						 INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON (ZPAV.PimAttributevalueid = ZPAVL.PimAttributeValueId AND ZPAVL.AttributeValue = 'True')
						 INNER JOIN ZnodePimProductTypeAssociation YUP ON (YUP.PimProductId = ZPAV1.PimProductId)
						 -- SKU
						 INNER JOIN ZnodePimAttributeValue ZPAV_SKU ON(YUP.PimProductId = ZPAV_SKU.PimProductId)
						 INNER JOIN ZnodePimAttributeValueLocale ZPAVL_SKU ON (ZPAVL_SKU.PimAttributeValueId = ZPAV_SKU.PimAttributeValueId)
						 LEFT  JOIN ZnodePimAttributeValue ZPAV12 ON (ZPAV12.PimProductId= YUP.PimProductId  AND ZPAV12.PimAttributeId = @PimMediaAttributeId ) 
						 LEFT JOIN ZnodePimProductAttributeMedia ZPAVM ON (ZPAVM.PimAttributeValueId= ZPAV12.PimAttributeValueId ) 
						 LEFT JOIN ZnodeMedia ZM ON (ZM.MediaId = ZPAVM.MediaId)
						 LEFT JOIN ZnodePimAttribute ZPA ON (ZPA.PimattributeId = ZPAV1.PimAttributeId)
						 WHERE (YUP.PimParentProductId  = UOP.PimProductId AND ZPAV1.pimAttributeId = UOP.PimAttributeId )
						 -- Active Variants
						 AND ZPAV.PimAttributeId = (SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'IsActive')
						 -- VariantSKU
						 AND ZPAV_SKU.PimAttributeId = (SELECT PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'SKU')
		FOR JSON auto),'[]')) SelectValuesEntity ,
		c.LocaleId
		--into #TempFinalJson
		FROM ZnodePimConfigureProductAttribute UOP 
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = UOP.PimAttributeId )
		WHERE  exists(select * from #ZnodePublishCategoryProduct PPCP1 where UOP.PimProductId = PPCP1.PimProductId )

		

		--INSERT INTO #AttributeValueLocale ( PimProductId, AttributeCode, AttributeValue, AttributeEntity, LocaleId )
		--Select PimProductId,AttributeCode,AttributeValue ,
		--Stuff (Replace(JSON_MODIFY(JSON_QUERY(Attribute ),'$.SelectValues', Isnull(JSON_QUERY(SelectValuesEntity),'') ) , '"SelectValues":{',''),
		--Len(Replace(JSON_MODIFY(JSON_QUERY(Attribute ),'$.SelectValues', Isnull(JSON_QUERY(SelectValuesEntity),'') ) , '"SelectValues":{','')), 1,'')
		--,LocaleID from #TempFinalJson 
		-------------configurable attribute 

		CREATE INDEX IDX_#AttributeValueLocale ON #AttributeValueLocale(PimProductId,AttributeCode,LocaleId)
		CREATE INDEX IDX_#AttributeValueLocale_Id ON #AttributeValueLocale(ID)
		 	
		delete ZPPAX from ZnodePublishProductAttributeJson ZPPAX
		where exists (select * from #AttributeValueLocale AVL where ZPPAX.PimProductId = AVL.PimProductId and AVL.LocaleId = ZPPAX.LocaleId )
		and not exists(select * from #AttributeValueLocale AVL where ZPPAX.PimProductId = AVL.PimProductId and AVL.LocaleId = ZPPAX.LocaleId AND ZPPAX.AttributeCode = AVL.AttributeCode )

		DECLARE @MaxCount INT, @MinRow INT, @MaxRow INT, @Rows numeric(10,2);
		SELECT @MaxCount = COUNT(*) FROM #AttributeValueLocale;

		SELECT @Rows = 200000
        
		SELECT @MaxCount = CEILING(@MaxCount / @Rows);

		IF OBJECT_ID('tempdb..#Temp_ImportLoop') IS NOT NULL
            DROP TABLE #Temp_ImportLoop;
        
		---- To get the min and max rows for import in loop
		;WITH cte AS 
		(
			SELECT RowId = 1, 
				   MinRow = 1, 
                   MaxRow = cast(@Rows as int)
            UNION ALL
            SELECT RowId + 1, 
                   MinRow + cast(@Rows as int), 
                   MaxRow + cast(@Rows as int)
            FROM cte
            WHERE RowId + 1 <= @MaxCount
		)
        SELECT RowId, MinRow, MaxRow
        INTO #Temp_ImportLoop
        FROM cte
		option (maxrecursion 0);


 
	
		DECLARE cur_BulkData CURSOR LOCAL FAST_FORWARD
        FOR SELECT MinRow, MaxRow FROM #Temp_ImportLoop
		WHERE EXISTS(SELECT * FROM #AttributeValueLocale);

        OPEN cur_BulkData;
        FETCH NEXT FROM cur_BulkData INTO  @MinRow, @MaxRow;

        WHILE @@FETCH_STATUS = 0
        BEGIN
	         UPDATE ZnodePublishProductAttributeJson set IsUpdateLocaleWise = 0 where isnull(IsUpdateLocaleWise,0) = 1
			  ----Update Product Attribute XML
			 UPDATE ZPPAX SET ZPPAX.Attributes = AVL.AttributeEntity, ZPPAX.ModifiedBy = @UserId, ZPPAX.ModifiedDate = GETDATE() 
			        , ZPPAX.IsUpdateLocaleWise = 0
			 FROM ZnodePublishProductAttributeJson ZPPAX 
			 INNER JOIN #AttributeValueLocale AVL ON ZPPAX.PimProductId = AVL.PimProductId and AVL.LocaleId = ZPPAX.LocaleId AND ZPPAX.AttributeCode = AVL.AttributeCode 
			 where  AVL.Id BETWEEN @MinRow AND @MaxRow and AVL.AttributeEntity is not null
		 
			 ----Insert Product Attribute XML
			 INSERT INTO ZnodePublishProductAttributeJson(PimProductId,LocaleId,AttributeCode,Attributes,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			 SELECT AVL.PimProductId, AVL.LocaleId, AVL.AttributeCode, cast(AVL.AttributeEntity as varchar(max)), @UserId CreatedBy, GETDATE() CreatedDate, @UserId ModifiedBy, GETDATE() ModifiedDate
			 FROM #AttributeValueLocale AVL
			 WHERE NOT EXISTS(SELECT * FROM ZnodePublishProductAttributeJson ZPPAX WHERE AVL.PimProductId = ZPPAX.PimProductId AND  AVL.LocaleId = ZPPAX.LocaleId AND AVL.AttributeCode = ZPPAX.AttributeCode )
			 and  AVL.Id BETWEEN @MinRow AND @MaxRow and AVL.AttributeEntity is not null
			 GROUP BY AVL.PimProductId, AVL.AttributeEntity, AVL.LocaleId, AVL.AttributeCode

			 FETCH NEXT FROM cur_BulkData INTO  @MinRow, @MaxRow;
        END;
		CLOSE cur_BulkData;
		DEALLOCATE cur_BulkData;

		delete ZPPAX
		from ZnodePublishProductAttributeJson ZPPAX
		where LocaleId <> @DefaultLocaleId
		and exists( select * from ZnodePublishProductAttributeJson ZPPAX1 where ZPPAX.AttributeCode = ZPPAX1.AttributeCode and ZPPAX.PimProductId = ZPPAX1.PimProductId )
		and not exists(select * from #ProductLocaleWise AVL where AVL.PimProductId = ZPPAX.PimProductId AND  AVL.LocaleId = ZPPAX.LocaleId )
		
		
		delete  ZPPAX
		from ZnodePublishProductAttributeJson ZPPAX
		WHERE not exists(select * from #ProductLocaleWise ZLW where ZPPAX.PimProductId = ZLW.PimProductId 
			                and ZPPAX.LocaleId = ZLW.LocaleId )

		select PimProductId,Attributes Attributes,AttributeCode
		into #ZnodePublishProductAttributeJson
		from ZnodePublishProductAttributeJson 
		where LocaleId = @DefaultLocaleId

		insert into ZnodePublishProductAttributeJson (PimProductId,Attributes,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,AttributeCode)
		select PimProductId,Attributes,b.id,@UserId,GETDATE(),@UserId,GETDATE(),AttributeCode
		from #ZnodePublishProductAttributeJson a
		cross apply @LocaleId b 
		where not exists(select * from ZnodePublishProductAttributeJson c where a.PimProductId = c.PimProductId and b.Id = c.LocaleId AND a.AttributeCode = c.AttributeCode )
		and b.Id <> @DefaultLocaleId
					  
		END TRY
         BEGIN CATCH
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_InsertUpdatePimCatalogProductDetailJson @PublishCatalogId = '+CAST(@PublishCatalogId AS VARCHAR(200))+',@UserId='+CAST(@UserId AS VARCHAR(200));


             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_InsertUpdatePimCatalogProductDetailJson',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
            
            
         END CATCH;
END
GO
insert into ZnodeImportHead(Name,	IsUsedInImport,	IsUsedInDynamicReport,	IsActive,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate,	IsCsvUploader)
select 'Account',1,1,1,2,getdate(),2,getdate(),null
where not exists(select * from ZnodeImportHead where Name = 'Account')

insert into ZnodeImportTemplate(ImportHeadId,TemplateName,TemplateVersion,PimAttributeFamilyId,IsActive,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select (select top 1 ImportHeadId from ZnodeImportHead where name = 'Account'),'AccountTemplate',null,null,1,2,getdate(),2,getdate()
where not exists(select * from ZnodeImportTemplate where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where name = 'Account')
	and TemplateName = 'AccountTemplate' )


INSERT ZnodeImportTemplateMapping(ImportTemplateId,SourceColumnName,TargetColumnName,DisplayOrder,IsActive,IsAllowNull,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT (select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'AccountTemplate'),
'ParentAccountCode' SourceColumnName,'ParentAccountCode' TargetColumnName,0 DisplayOrder,1 IsActive, 0 IsAllowNull,2 CreatedBy,GETDATE() CreatedDate,2 ModifiedBy,GETDATE() ModifiedDate
WHERE NOT EXISTS(SELECT * FROM ZnodeImportTemplateMapping WHERE ImportTemplateId=(select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'AccountTemplate') 
	AND SourceColumnName ='ParentAccountCode')

INSERT ZnodeImportTemplateMapping(ImportTemplateId,SourceColumnName,TargetColumnName,DisplayOrder,IsActive,IsAllowNull,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT (select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'AccountTemplate'),
'AccountName' SourceColumnName,'AccountName' TargetColumnName,0 DisplayOrder,1 IsActive, 0 IsAllowNull,2 CreatedBy,GETDATE() CreatedDate,2 ModifiedBy,GETDATE() ModifiedDate
WHERE NOT EXISTS(SELECT * FROM ZnodeImportTemplateMapping WHERE ImportTemplateId=(select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'AccountTemplate') 
	AND SourceColumnName ='AccountName')

INSERT ZnodeImportTemplateMapping(ImportTemplateId,SourceColumnName,TargetColumnName,DisplayOrder,IsActive,IsAllowNull,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT (select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'AccountTemplate'),
'AccountCode' SourceColumnName,'AccountCode' TargetColumnName,0 DisplayOrder,1 IsActive, 0 IsAllowNull,2 CreatedBy,GETDATE() CreatedDate,2 ModifiedBy,GETDATE() ModifiedDate
WHERE NOT EXISTS(SELECT * FROM ZnodeImportTemplateMapping WHERE ImportTemplateId=(select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'AccountTemplate') 
	AND SourceColumnName ='AccountCode')

INSERT ZnodeImportTemplateMapping(ImportTemplateId,SourceColumnName,TargetColumnName,DisplayOrder,IsActive,IsAllowNull,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT (select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'AccountTemplate'),
'ExternalID' SourceColumnName,'ExternalID' TargetColumnName,0 DisplayOrder,1 IsActive, 0 IsAllowNull,2 CreatedBy,GETDATE() CreatedDate,2 ModifiedBy,GETDATE() ModifiedDate
WHERE NOT EXISTS(SELECT * FROM ZnodeImportTemplateMapping WHERE ImportTemplateId=(select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'AccountTemplate') 
	AND SourceColumnName ='ExternalID')

INSERT ZnodeImportTemplateMapping(ImportTemplateId,SourceColumnName,TargetColumnName,DisplayOrder,IsActive,IsAllowNull,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT (select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'AccountTemplate'),
'CatalogCode' SourceColumnName,'CatalogCode' TargetColumnName,0 DisplayOrder,1 IsActive, 0 IsAllowNull,2 CreatedBy,GETDATE() CreatedDate,2 ModifiedBy,GETDATE() ModifiedDate
WHERE NOT EXISTS(SELECT * FROM ZnodeImportTemplateMapping WHERE ImportTemplateId=(select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'AccountTemplate') 
	AND SourceColumnName ='CatalogCode')
	
INSERT ZnodeImportTemplateMapping(ImportTemplateId,SourceColumnName,TargetColumnName,DisplayOrder,IsActive,IsAllowNull,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT (select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'AccountTemplate'),
'AddressName' SourceColumnName,'AddressName' TargetColumnName,0 DisplayOrder,1 IsActive, 0 IsAllowNull,2 CreatedBy,GETDATE() CreatedDate,2 ModifiedBy,GETDATE() ModifiedDate
WHERE NOT EXISTS(SELECT * FROM ZnodeImportTemplateMapping WHERE ImportTemplateId=(select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'AccountTemplate') 
	AND SourceColumnName ='AddressName')
	
INSERT ZnodeImportTemplateMapping(ImportTemplateId,SourceColumnName,TargetColumnName,DisplayOrder,IsActive,IsAllowNull,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT (select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'AccountTemplate'),
'FirstName' SourceColumnName,'FirstName' TargetColumnName,0 DisplayOrder,1 IsActive, 0 IsAllowNull,2 CreatedBy,GETDATE() CreatedDate,2 ModifiedBy,GETDATE() ModifiedDate
WHERE NOT EXISTS(SELECT * FROM ZnodeImportTemplateMapping WHERE ImportTemplateId=(select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'AccountTemplate') 
	AND SourceColumnName ='FirstName')
	
INSERT ZnodeImportTemplateMapping(ImportTemplateId,SourceColumnName,TargetColumnName,DisplayOrder,IsActive,IsAllowNull,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT (select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'AccountTemplate'),
'LastName' SourceColumnName,'LastName' TargetColumnName,0 DisplayOrder,1 IsActive, 0 IsAllowNull,2 CreatedBy,GETDATE() CreatedDate,2 ModifiedBy,GETDATE() ModifiedDate
WHERE NOT EXISTS(SELECT * FROM ZnodeImportTemplateMapping WHERE ImportTemplateId=(select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'AccountTemplate') 
	AND SourceColumnName ='LastName')

	
INSERT ZnodeImportTemplateMapping(ImportTemplateId,SourceColumnName,TargetColumnName,DisplayOrder,IsActive,IsAllowNull,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT (select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'AccountTemplate'),
'CompanyName' SourceColumnName,'CompanyName' TargetColumnName,0 DisplayOrder,1 IsActive, 0 IsAllowNull,2 CreatedBy,GETDATE() CreatedDate,2 ModifiedBy,GETDATE() ModifiedDate
WHERE NOT EXISTS(SELECT * FROM ZnodeImportTemplateMapping WHERE ImportTemplateId=(select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'AccountTemplate') 
	AND SourceColumnName ='CompanyName')
	
INSERT ZnodeImportTemplateMapping(ImportTemplateId,SourceColumnName,TargetColumnName,DisplayOrder,IsActive,IsAllowNull,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT (select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'AccountTemplate'),
'Address1' SourceColumnName,'Address1' TargetColumnName,0 DisplayOrder,1 IsActive, 0 IsAllowNull,2 CreatedBy,GETDATE() CreatedDate,2 ModifiedBy,GETDATE() ModifiedDate
WHERE NOT EXISTS(SELECT * FROM ZnodeImportTemplateMapping WHERE ImportTemplateId=(select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'AccountTemplate') 
	AND SourceColumnName ='Address1')
	
INSERT ZnodeImportTemplateMapping(ImportTemplateId,SourceColumnName,TargetColumnName,DisplayOrder,IsActive,IsAllowNull,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT (select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'AccountTemplate'),
'Address2' SourceColumnName,'Address2' TargetColumnName,0 DisplayOrder,1 IsActive, 0 IsAllowNull,2 CreatedBy,GETDATE() CreatedDate,2 ModifiedBy,GETDATE() ModifiedDate
WHERE NOT EXISTS(SELECT * FROM ZnodeImportTemplateMapping WHERE ImportTemplateId=(select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'AccountTemplate') 
	AND SourceColumnName ='Address2')
	
INSERT ZnodeImportTemplateMapping(ImportTemplateId,SourceColumnName,TargetColumnName,DisplayOrder,IsActive,IsAllowNull,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT (select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'AccountTemplate'),
'CountryName' SourceColumnName,'CountryName' TargetColumnName,0 DisplayOrder,1 IsActive, 0 IsAllowNull,2 CreatedBy,GETDATE() CreatedDate,2 ModifiedBy,GETDATE() ModifiedDate
WHERE NOT EXISTS(SELECT * FROM ZnodeImportTemplateMapping WHERE ImportTemplateId=(select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'AccountTemplate') 
	AND SourceColumnName ='CountryName')
	
INSERT ZnodeImportTemplateMapping(ImportTemplateId,SourceColumnName,TargetColumnName,DisplayOrder,IsActive,IsAllowNull,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT (select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'AccountTemplate'),
'StateName' SourceColumnName,'StateName' TargetColumnName,0 DisplayOrder,1 IsActive, 0 IsAllowNull,2 CreatedBy,GETDATE() CreatedDate,2 ModifiedBy,GETDATE() ModifiedDate
WHERE NOT EXISTS(SELECT * FROM ZnodeImportTemplateMapping WHERE ImportTemplateId=(select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'AccountTemplate') 
	AND SourceColumnName ='StateName')
	
INSERT ZnodeImportTemplateMapping(ImportTemplateId,SourceColumnName,TargetColumnName,DisplayOrder,IsActive,IsAllowNull,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT (select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'AccountTemplate'),
'CityName' SourceColumnName,'CityName' TargetColumnName,0 DisplayOrder,1 IsActive, 0 IsAllowNull,2 CreatedBy,GETDATE() CreatedDate,2 ModifiedBy,GETDATE() ModifiedDate
WHERE NOT EXISTS(SELECT * FROM ZnodeImportTemplateMapping WHERE ImportTemplateId=(select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'AccountTemplate') 
	AND SourceColumnName ='CityName')
	
INSERT ZnodeImportTemplateMapping(ImportTemplateId,SourceColumnName,TargetColumnName,DisplayOrder,IsActive,IsAllowNull,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT (select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'AccountTemplate'),
'PostalCode' SourceColumnName,'PostalCode' TargetColumnName,0 DisplayOrder,1 IsActive, 0 IsAllowNull,2 CreatedBy,GETDATE() CreatedDate,2 ModifiedBy,GETDATE() ModifiedDate
WHERE NOT EXISTS(SELECT * FROM ZnodeImportTemplateMapping WHERE ImportTemplateId=(select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'AccountTemplate') 
	AND SourceColumnName ='PostalCode')
	
INSERT ZnodeImportTemplateMapping(ImportTemplateId,SourceColumnName,TargetColumnName,DisplayOrder,IsActive,IsAllowNull,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT (select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'AccountTemplate'),
'PhoneNumber' SourceColumnName,'PhoneNumber' TargetColumnName,0 DisplayOrder,1 IsActive, 0 IsAllowNull,2 CreatedBy,GETDATE() CreatedDate,2 ModifiedBy,GETDATE() ModifiedDate
WHERE NOT EXISTS(SELECT * FROM ZnodeImportTemplateMapping WHERE ImportTemplateId=(select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'AccountTemplate') 
	AND SourceColumnName ='PhoneNumber')
	
INSERT ZnodeImportTemplateMapping(ImportTemplateId,SourceColumnName,TargetColumnName,DisplayOrder,IsActive,IsAllowNull,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT (select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'AccountTemplate'),
'IsDefaultBilling' SourceColumnName,'IsDefaultBilling' TargetColumnName,0 DisplayOrder,1 IsActive, 0 IsAllowNull,2 CreatedBy,GETDATE() CreatedDate,2 ModifiedBy,GETDATE() ModifiedDate
WHERE NOT EXISTS(SELECT * FROM ZnodeImportTemplateMapping WHERE ImportTemplateId=(select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'AccountTemplate') 
	AND SourceColumnName ='IsDefaultBilling')
	
INSERT ZnodeImportTemplateMapping(ImportTemplateId,SourceColumnName,TargetColumnName,DisplayOrder,IsActive,IsAllowNull,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT (select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'AccountTemplate'),
'IsDefaultShipping' SourceColumnName,'IsDefaultShipping' TargetColumnName,0 DisplayOrder,1 IsActive, 0 IsAllowNull,2 CreatedBy,GETDATE() CreatedDate,2 ModifiedBy,GETDATE() ModifiedDate
WHERE NOT EXISTS(SELECT * FROM ZnodeImportTemplateMapping WHERE ImportTemplateId=(select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'AccountTemplate') 
	AND SourceColumnName ='IsDefaultShipping')

insert into ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName
,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
select 'Text','ParentAccountCode',(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Account'),0,'Text','RegularExpression',
null,'','',null,2,getdate(),2,getdate(),1
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName ='Text' and AttributeCode = 'ParentAccountCode' 
      and ControlName = 'Text' and ImportHeadId=(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Account')
	  and ValidationName = 'RegularExpression')

insert into ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName
,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
select 'Text','AccountName',(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Account'),0,'Text','RegularExpression',
null,'','',null,2,getdate(),2,getdate(),2
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName ='Text' and AttributeCode = 'AccountName' 
      and ControlName = 'Text' and ImportHeadId=(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Account')
	  and ValidationName = 'RegularExpression')

insert into ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName
,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
select 'Text','AccountCode',(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Account'),0,'Text','RegularExpression',
null,'','',null,2,getdate(),2,getdate(),3
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName ='Text' and AttributeCode = 'AccountCode' 
      and ControlName = 'Text' and ImportHeadId=(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Account')
	  and ValidationName = 'RegularExpression')

insert into ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName
,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
select 'Text','ExternalID',(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Account'),0,'Text','RegularExpression',
null,'','',null,2,getdate(),2,getdate(),4
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName ='Text' and AttributeCode = 'ExternalID' 
      and ControlName = 'Text' and ImportHeadId=(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Account')
	  and ValidationName = 'RegularExpression')	  

insert into ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName
,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
select 'Text','CatalogCode',(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Account'),0,'Text','RegularExpression',
null,'','',null,2,getdate(),2,getdate(),5
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName ='Text' and AttributeCode = 'CatalogCode' 
      and ControlName = 'Text' and ImportHeadId=(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Account')
	  and ValidationName = 'RegularExpression')	

insert into ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName
,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
select 'Text','AddressName',(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Account'),0,'Text','RegularExpression',
null,'','',null,2,getdate(),2,getdate(),6
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName ='Text' and AttributeCode = 'AddressName' 
      and ControlName = 'Text' and ImportHeadId=(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Account')
	  and ValidationName = 'RegularExpression')	

insert into ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName
,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
select 'Text','FirstName',(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Account'),0,'Text','RegularExpression',
null,'','',null,2,getdate(),2,getdate(),7
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName ='Text' and AttributeCode = 'FirstName' 
      and ControlName = 'Text' and ImportHeadId=(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Account')
	  and ValidationName = 'RegularExpression')

insert into ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName
,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
select 'Text','LastName',(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Account'),0,'Text','RegularExpression',
null,'','',null,2,getdate(),2,getdate(),8
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName ='Text' and AttributeCode = 'LastName' 
      and ControlName = 'Text' and ImportHeadId=(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Account')
	  and ValidationName = 'RegularExpression')

insert into ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName
,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
select 'Text','CompanyName',(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Account'),0,'Text','RegularExpression',
null,'','',null,2,getdate(),2,getdate(),9
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName ='Text' and AttributeCode = 'CompanyName' 
      and ControlName = 'Text' and ImportHeadId=(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Account')
	  and ValidationName = 'RegularExpression')

insert into ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName
,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
select 'Text','Address1',(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Account'),0,'Text','RegularExpression',
null,'','',null,2,getdate(),2,getdate(),10
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName ='Text' and AttributeCode = 'Address1' 
      and ControlName = 'Text' and ImportHeadId=(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Account')
	  and ValidationName = 'RegularExpression')

insert into ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName
,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
select 'Text','Address2',(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Account'),0,'Text','RegularExpression',
null,'','',null,2,getdate(),2,getdate(),11
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName ='Text' and AttributeCode = 'Address2' 
      and ControlName = 'Text' and ImportHeadId=(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Account')
	  and ValidationName = 'RegularExpression')

insert into ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName
,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
select 'Text','CountryName',(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Account'),0,'Text','RegularExpression',
null,'','',null,2,getdate(),2,getdate(),12
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName ='Text' and AttributeCode = 'CountryName' 
      and ControlName = 'Text' and ImportHeadId=(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Account')
	  and ValidationName = 'RegularExpression')

insert into ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName
,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
select 'Text','StateName',(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Account'),0,'Text','RegularExpression',
null,'','',null,2,getdate(),2,getdate(),13
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName ='Text' and AttributeCode = 'StateName' 
      and ControlName = 'Text' and ImportHeadId=(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Account')
	  and ValidationName = 'RegularExpression')

insert into ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName
,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
select 'Text','CityName',(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Account'),0,'Text','RegularExpression',
null,'','',null,2,getdate(),2,getdate(),14
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName ='Text' and AttributeCode = 'CityName' 
      and ControlName = 'Text' and ImportHeadId=(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Account')
	  and ValidationName = 'RegularExpression')

insert into ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName
,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
select 'Text','PostalCode',(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Account'),0,'Text','RegularExpression',
null,'','',null,2,getdate(),2,getdate(),15
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName ='Text' and AttributeCode = 'PostalCode' 
      and ControlName = 'Text' and ImportHeadId=(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Account')
	  and ValidationName = 'RegularExpression')

insert into ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName
,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
select 'Text','PhoneNumber',(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Account'),0,'Text','RegularExpression',
null,'','',null,2,getdate(),2,getdate(),16
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName ='Text' and AttributeCode = 'PhoneNumber' 
      and ControlName = 'Text' and ImportHeadId=(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Account')
	  and ValidationName = 'RegularExpression')

insert into ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName
,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
select 'Text','IsDefaultBilling',(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Account'),0,'Text','RegularExpression',
null,'','',null,2,getdate(),2,getdate(),17
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName ='Text' and AttributeCode = 'IsDefaultBilling' 
      and ControlName = 'Text' and ImportHeadId=(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Account')
	  and ValidationName = 'RegularExpression')

insert into ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName
,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
select 'Text','IsDefaultShipping',(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Account'),0,'Text','RegularExpression',
null,'','',null,2,getdate(),2,getdate(),18
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName ='Text' and AttributeCode = 'IsDefaultShipping' 
      and ControlName = 'Text' and ImportHeadId=(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Account')
	  and ValidationName = 'RegularExpression')

insert into ZnodeImportUpdatableColumns(ImportHeadId,ColumnName)
select (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Account'),'AddressName'
where not exists(select * from ZnodeImportUpdatableColumns where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Account')
and ColumnName = 'AddressName')
and exists(select top 1 ImportHeadId from ZnodeImportHead where Name = 'Account')

insert into ZnodeImportUpdatableColumns(ImportHeadId,ColumnName)
select (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Account'),'FirstName'
where not exists(select * from ZnodeImportUpdatableColumns where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Account')
and ColumnName = 'FirstName')
and exists(select top 1 ImportHeadId from ZnodeImportHead where Name = 'Account')

insert into ZnodeImportUpdatableColumns(ImportHeadId,ColumnName)
select (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Account'),'LastName'
where not exists(select * from ZnodeImportUpdatableColumns where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Account')
and ColumnName = 'LastName')
and exists(select top 1 ImportHeadId from ZnodeImportHead where Name = 'Account')

insert into ZnodeImportUpdatableColumns(ImportHeadId,ColumnName)
select (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Account'),'CompanyName'
where not exists(select * from ZnodeImportUpdatableColumns where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Account')
and ColumnName = 'CompanyName')
and exists(select top 1 ImportHeadId from ZnodeImportHead where Name = 'Account')

insert into ZnodeImportUpdatableColumns(ImportHeadId,ColumnName)
select (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Account'),'Address1'
where not exists(select * from ZnodeImportUpdatableColumns where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Account')
and ColumnName = 'Address1')
and exists(select top 1 ImportHeadId from ZnodeImportHead where Name = 'Account')

insert into ZnodeImportUpdatableColumns(ImportHeadId,ColumnName)
select (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Account'),'Address2'
where not exists(select * from ZnodeImportUpdatableColumns where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Account')
and ColumnName = 'Address2')
and exists(select top 1 ImportHeadId from ZnodeImportHead where Name = 'Account')

insert into ZnodeImportUpdatableColumns(ImportHeadId,ColumnName)
select (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Account'),'CountryName'
where not exists(select * from ZnodeImportUpdatableColumns where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Account')
and ColumnName = 'CountryName')
and exists(select top 1 ImportHeadId from ZnodeImportHead where Name = 'Account')

insert into ZnodeImportUpdatableColumns(ImportHeadId,ColumnName)
select (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Account'),'StateName'
where not exists(select * from ZnodeImportUpdatableColumns where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Account')
and ColumnName = 'StateName')
and exists(select top 1 ImportHeadId from ZnodeImportHead where Name = 'Account')

insert into ZnodeImportUpdatableColumns(ImportHeadId,ColumnName)
select (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Account'),'CityName'
where not exists(select * from ZnodeImportUpdatableColumns where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Account')
and ColumnName = 'CityName')
and exists(select top 1 ImportHeadId from ZnodeImportHead where Name = 'Account')

insert into ZnodeImportUpdatableColumns(ImportHeadId,ColumnName)
select (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Account'),'PostalCode'
where not exists(select * from ZnodeImportUpdatableColumns where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Account')
and ColumnName = 'PostalCode')
and exists(select top 1 ImportHeadId from ZnodeImportHead where Name = 'Account')

insert into ZnodeImportUpdatableColumns(ImportHeadId,ColumnName)
select (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Account'),'PhoneNumber'
where not exists(select * from ZnodeImportUpdatableColumns where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Account')
and ColumnName = 'PhoneNumber')
and exists(select top 1 ImportHeadId from ZnodeImportHead where Name = 'Account')

insert into ZnodeImportUpdatableColumns(ImportHeadId,ColumnName)
select (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Account'),'IsDefaultBilling'
where not exists(select * from ZnodeImportUpdatableColumns where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Account')
and ColumnName = 'IsDefaultBilling')
and exists(select top 1 ImportHeadId from ZnodeImportHead where Name = 'Account')

insert into ZnodeImportUpdatableColumns(ImportHeadId,ColumnName)
select (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Account'),'IsDefaultShipping'
where not exists(select * from ZnodeImportUpdatableColumns where ImportHeadId = (select top 1 ImportHeadId from ZnodeImportHead where Name = 'Account')
and ColumnName = 'IsDefaultShipping')
and exists(select top 1 ImportHeadId from ZnodeImportHead where Name = 'Account')


insert into ZnodeMessage(MessageCode,MessageType,MessageName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 78,'Text','Maximum 100 characters are allowed.',2,getdate(),2,getdate()
where not exists(select * from ZnodeMessage where MessageCode = 78)

insert into ZnodeMessage(MessageCode,MessageType,MessageName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 79,'Text','Only alphabets and numbers are allowed.',2,getdate(),2,getdate()
where not exists(select * from ZnodeMessage where MessageCode = 79)

insert into ZnodeMessage(MessageCode,MessageType,MessageName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 80,'Text','The value is not associated with any existing Catalog.',2,getdate(),2,getdate()
where not exists(select * from ZnodeMessage where MessageCode = 80)

insert into ZnodeMessage(MessageCode,MessageType,MessageName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 81,'Text','Maximum 200 characters are allowed.',2,getdate(),2,getdate()
where not exists(select * from ZnodeMessage where MessageCode = 81)

insert into ZnodeMessage(MessageCode,MessageType,MessageName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 82,'Text','Maximum 300 characters are allowed.',2,getdate(),2,getdate()
where not exists(select * from ZnodeMessage where MessageCode = 82)

insert into ZnodeMessage(MessageCode,MessageType,MessageName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 83,'Text','One of the predefined values is required.',2,getdate(),2,getdate()
where not exists(select * from ZnodeMessage where MessageCode = 83)

insert into ZnodeMessage(MessageCode,MessageType,MessageName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 84,'Text','Mandatory value is missing',2,getdate(),2,getdate()
where not exists(select * from ZnodeMessage where MessageCode = 84)

insert into ZnodeMessage(MessageCode,MessageType,MessageName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 85,'Text','The value should be 1 for new accounts.',2,getdate(),2,getdate()
where not exists(select * from ZnodeMessage where MessageCode = 85)

insert into ZnodeMessage(MessageCode,MessageType,MessageName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 86,'Text','Parent Account should belong to the selected Store.',2,getdate(),2,getdate()
where not exists(select * from ZnodeMessage where MessageCode = 86)

insert into ZnodeMessage(MessageCode,MessageType,MessageName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 87,'Text','The value is not associated with any existing Parent Account.',2,getdate(),2,getdate()
where not exists(select * from ZnodeMessage where MessageCode = 87)
go
IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportAccount')
	DROP PROC Znode_ImportAccount
GO
CREATE PROCEDURE [dbo].[Znode_ImportAccount](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200),@PortalId int 
	  ,@CsvColumnString nvarchar(max) )
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import SEO Details
	
	-- Unit Testing : 
	--------------------------------------------------------------------------------------

BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max),@IsAllowGlobalLevelUserCreation nvarchar(10)

		DECLARE @GetDate datetime= dbo.Fn_GetDate();
	
		-- Three type of import required three table varible for product , category and brand

		CREATE TABLE #InsertAccount 
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int,ParentAccountCode nvarchar(max),AccountName nvarchar(max), AccountCode nvarchar(max),ExternalID nvarchar(max),
			CatalogCode nvarchar(max),AddressName nvarchar(max),FirstName varchar(max),LastName varchar(max),CompanyName varchar(max),
			Address1 varchar(max),Address2 varchar(max),CountryName varchar(max),StateName varchar(max),CityName varchar(max),
			PostalCode varchar(max),PhoneNumber varchar(max),IsDefaultBilling varchar(10),IsDefaultShipping varchar(10),GUID VARCHAR(100)
		);
	
		SET @SSQL = ' INSERT INTO #InsertAccount ( RowNumber, ParentAccountCode,AccountName ,AccountCode,ExternalID,CatalogCode,AddressName,FirstName,LastName,CompanyName
						,Address1,Address2,CountryName,StateName,CityName,PostalCode,PhoneNumber,IsDefaultBilling,IsDefaultShipping,GUID )
		SELECT RowNumber, ParentAccountCode,AccountName ,AccountCode,ExternalID,CatalogCode,AddressName,FirstName,LastName,CompanyName
						,Address1,Address2,CountryName,StateName,CityName,PostalCode,PhoneNumber,IsDefaultBilling,IsDefaultShipping,GUID FROM '+ @TableName;

		EXEC sys.sp_sqlexec @SSQL;

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '78', 'ParentAccountCode', ParentAccountCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ii.AccountCode, '')) >100 and ISnull(ltrim(rtrim(ii.ParentAccountCode)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '86', 'ParentAccountCode', ParentAccountCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.ParentAccountCode)), '') <> ''
		and not exists(select * from znodePortalAccount ZPA inner join ZnodeAccount ZA ON ZPA.AccountId = ZA.AccountId where ii.ParentAccountCode = ZA.AccountCode and ZPA.PortalId = @PortalId)

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '87', 'ParentAccountCode', ParentAccountCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.ParentAccountCode)), '') <> ''
		and exists(select * from ZnodeAccount ZA where ii.ParentAccountCode = ZA.AccountCode and ZA.ParentAccountId is not null)

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'AccountCode', AccountCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.AccountCode)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '78', 'AccountCode', AccountCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ii.AccountCode, '')) >100 and ISnull(ltrim(rtrim(ii.AccountCode)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '79', 'AccountCode', AccountCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ii.AccountCode like '%[^a-zA-Z0-9]%' and ISnull(ltrim(rtrim(ii.AccountCode)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'AccountName', AccountName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.AccountName)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '78', 'AccountName', AccountName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ii.AccountName, '')) >100 and ISnull(ltrim(rtrim(ii.AccountName)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'StateName', StateName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.StateName)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '78', 'StateName', StateName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ltrim(rtrim(ii.StateName)), '')) >100 and ISnull(ltrim(rtrim(ii.StateName)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '83', 'StateName', StateName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE not exists(select * from ZnodeState ZS where ZS.StateName = ISnull(ltrim(rtrim(ii.StateName)), '') )

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '83', 'CountryName', CountryName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE not exists(select * from ZnodeCountry ZC where ZC.CountryName = ISnull(ltrim(rtrim(ii.CountryName)), '') )
		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'CountryName', CountryName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.CountryName)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'CityName', CityName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.CityName)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '78', 'CityName', CityName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ltrim(rtrim(ii.CityName)), '')) >100 and ISnull(ltrim(rtrim(ii.CityName)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'PostalCode', PostalCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.PostalCode)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '78', 'PostalCode', PostalCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ltrim(rtrim(ii.PostalCode)), '')) >100 and ISnull(ltrim(rtrim(ii.PostalCode)), '') <> ''
				
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'PhoneNumber', PhoneNumber, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.PhoneNumber)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '78', 'PhoneNumber', PhoneNumber, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ltrim(rtrim(ii.PhoneNumber)), '')) >100 and ISnull(ltrim(rtrim(ii.PhoneNumber)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'IsDefaultBilling', IsDefaultBilling, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.IsDefaultBilling)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
		SELECT '68', 'IsDefaultBilling', IsDefaultBilling, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
		FROM #InsertAccount AS ii  
		WHERE ii.IsDefaultBilling not in ('True','1','Yes','FALSE','0','No','') and ISnull(ltrim(rtrim(ii.IsDefaultBilling)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'IsDefaultShipping', IsDefaultShipping, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.IsDefaultShipping)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
		SELECT '68', 'IsDefaultShipping', IsDefaultShipping, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
		FROM #InsertAccount AS ii  
		WHERE ii.IsDefaultShipping not in ('True','1','Yes','FALSE','0','No','') and ISnull(ltrim(rtrim(ii.IsDefaultShipping)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'AddressName', AddressName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.AddressName)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '81', 'AddressName', AddressName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ii.AddressName, '')) >200 and ISnull(ltrim(rtrim(ii.AddressName)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'Address1', Address1, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ii.Address1, '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '81', 'Address1', Address1, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ltrim(rtrim(ii.Address1)), '')) >200 and ISnull(ltrim(rtrim(ii.Address1)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'Address2', Address2, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ii.Address2, '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '81', 'Address2', Address2, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ltrim(rtrim(ii.Address2)), '')) >200 and ISnull(ltrim(rtrim(ii.Address2)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '82', 'CompanyName', CompanyName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ii.CompanyName, '')) >300 and ISnull(ltrim(rtrim(ii.CompanyName)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'LastName', LastName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.LastName)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '82', 'LastName', LastName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ltrim(rtrim(ii.LastName)), '')) >300 and ISnull(ltrim(rtrim(ii.LastName)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'FirstName', FirstName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.FirstName)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '82', 'FirstName', FirstName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ii.FirstName, '')) >300 and ISnull(ltrim(rtrim(ii.FirstName)), '') <> ''
		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '80', 'CatalogCode', CatalogCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE not exists(select * from ZnodePimCatalog ZS where ZS.CatalogCode = ISnull(ltrim(rtrim(ii.CatalogCode)), '') )
		and ISnull(ltrim(rtrim(ii.CatalogCode)), '') <> ''
		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'CatalogCode', CatalogCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.CatalogCode)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '82', 'ExternalID', ExternalID, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ii.ExternalID, '')) >300 and ISnull(ltrim(rtrim(ii.ExternalID)), '') <> ''

		UPDATE ZA SET ZA.IsDefaultBilling = 0
		from ZnodeAccount ZAA
		INNER JOIN ZnodeAccountAddress ZUA ON ZAA.AccountId = ZUA.AccountId
		INNER JOIN ZnodeAddress ZA ON ZUA.AddressId = ZA.AddressId
		inner join #InsertAccount IC on ZAA.AccountCode = IC.AccountCode --and IC.IsDefaultBilling <> ZA.IsDefaultBilling 
		where IC.IsDefaultBilling = 1 

		UPDATE ZA SET ZA.IsDefaultShipping = 0
		from ZnodeAccount ZAA
		INNER JOIN ZnodeAccountAddress ZUA ON ZAA.AccountId = ZUA.AccountId
		INNER JOIN ZnodeAddress ZA ON ZUA.AddressId = ZA.AddressId
		inner join #InsertAccount IC on ZAA.AccountCode = IC.AccountCode
		where IC.IsDefaultShipping = 1 

		-- -- error log when atleast db have 
		--INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		--SELECT '63', 'IsDefaultBilling/IsDefaultShipping', IsDefaultBilling, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		--FROM #InsertAccount IC where  exists (
		--SELECT TOP 1 1  from ZnodeAccount ZAA
		--INNER JOIN ZnodeAccountAddress ZUA ON ZAA.AccountId= ZUA.AccountId
		--INNER JOIN ZnodeAddress ZA ON ZUA.AddressId = ZA.AddressId
		--where ZAA.AccountCode = IC.AccountCode AND ZA.IsDefaultBilling = IC.IsDefaultBilling 
		--AND ZA.IsDefaultShipping =IC.IsDefaultShipping )
		
		UPDATE ZIL
		SET ZIL.ColumnName =   ZIL.ColumnName + ' [ AccountCode - ' + ISNULL(AccountCode,'') + ' ] '
		FROM ZnodeImportLog ZIL 
		INNER JOIN #InsertAccount IPA ON (ZIL.RowNumber = IPA.RowNumber)
		WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL


		DELETE FROM #InsertAccount
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber IS NOT NULL 
			--AND GUID = @NewGUID
		);

		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM #InsertAccount
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount ,
		TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End
		CREATE TABLE #InsertedAccount (AccountId int, Accountcode nvarchar(100)) 
		INSERT INTO ZnodeAccount(AccountCode,ParentAccountId,Name,ExternalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		OUTPUT INSERTED.AccountId, INSERTED.Accountcode INTO  #InsertedAccount (AccountId, Accountcode) 
		select IC.AccountCode, za.AccountId as ParentAccountId, AccountName, IC.ExternalID, @UserId, @GetDate, @UserId, @GetDate
		from #InsertAccount IC
		left join ZnodeAccount za on IC.ParentAccountCode = za.AccountCode
		where not exists(select * from ZnodeAccount ZA1 where ZA1.AccountCode = IC.AccountCode)

		INSERT INTO ZnodePortalAccount(PortalId,AccountId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT @PortalId, IA.AccountId,  @UserId, @GetDate, @UserId, @GetDate
		FROM #InsertedAccount IA 
		WHERE not exists(select * from ZnodePortalAccount ZPA where IA.AccountId = ZPA.AccountId )
		

		----updating publishcatalogin to respective account
		update ZA set PublishCatalogId = ZPC1.PublishCatalogId, AccountCode = IC.AccountCode, Name = IC.AccountName
		OUTPUT INSERTED.AccountId, INSERTED.Accountcode INTO  #InsertedAccount (AccountId, Accountcode) 
		from ZnodeAccount ZA
		inner join #InsertAccount IC ON ZA.AccountCode = IC.AccountCode
		inner join ZnodePimCatalog ZPC ON IC.CatalogCode = ZPC.CatalogCode
		inner join ZnodePublishCatalog ZPC1 ON ZPC.PimCatalogId = ZPC1.PimCatalogId
		
		----------update ZnodeAddress
		DECLARE @AddressColumnString VARCHAR(1000), @WhereConditionString VARCHAR(1000), @UpdateColumnString VARCHAR(1000)

		SELECT @AddressColumnString = COALESCE(@AddressColumnString + ',', '')+a.ColumnName --COALESCE(@CsvColumnString + ' and ', '') +'ZA.'+ColumnName+' =  IC.'+ColumnName
		FROM ZnodeImportUpdatableColumns a
		INNER JOIN INFORMATION_SCHEMA.COLUMNS b on a.ColumnName = b.COLUMN_NAME  
		INNER JOIN dbo.Split(@CsvColumnString,',')C on b.COLUMN_NAME = c.Item
		WHERE b.TABLE_NAME = 'ZnodeAddress' 
		AND EXISTS(SELECT * FROM ZnodeImportHead IH where a.ImportHeadId = IH.ImportHeadId and IH.Name= 'Account')

		SELECT @UpdateColumnString = COALESCE(@UpdateColumnString + ' , ', '') +'ZA.'+a.COLUMN_NAME+' =  IC.'+a.COLUMN_NAME  
		FROM INFORMATION_SCHEMA.COLUMNS a
		INNER JOIN dbo.Split(@CsvColumnString,',')b on a.COLUMN_NAME = b.Item
		WHERE NOT EXISTS (SELECT * FROM dbo.Split(@AddressColumnString,',') c WHERE a.COLUMN_NAME = c.Item )
		AND a.TABLE_NAME = 'ZnodeAddress'

		SELECT @WhereConditionString = COALESCE(@WhereConditionString + ' AND ', '') +'ZA.'+item+' =  IC.'+item from dbo.split(@AddressColumnString,',')
	
				
		CREATE TABLE #InsertedAccountAddress (AddressId  int, AccountCode varchar(100)) 

		UPDATE ZnodeAddress SET IsDefaultBilling = 0,  IsDefaultShipping = 0
		from ZnodeAccount ZAA
		INNER JOIN ZnodeAccountAddress ZUA ON ZAA.AccountId = ZUA.AccountId
		INNER JOIN ZnodeAddress ZA ON ZUA.AddressId = ZA.AddressId
		INNER JOIN #InsertAccount IC ON ZAA.AccountCode = IC.AccountCode AND ZA.IsDefaultBilling =IC.IsDefaultBilling 
											AND ZA.IsDefaultShipping =IC.IsDefaultShipping

		SET @SSQL = '
			UPDATE ZA set ModifiedBy = '+CONVERT(VARCHAR(10), @UserId)+', ModifiedDate = getdate() '+CASE WHEN ISNULL(@UpdateColumnString,'') = '' THEN '' ELSE ','+@UpdateColumnString END+' 
			FROM ZnodeAddress ZA
			INNER JOIN #InsertAccount IC ON '+CASE WHEN ISNULL(@WhereConditionString,'') = '' THEN ' 1 = 0 ' ELSE @WhereConditionString END

		EXEC (@SSQL)

		SET @SSQL = '
		Insert into ZnodeAddress (FirstName,LastName,DisplayName,Address1,Address2,Address3,CountryName,
								StateName,CityName,PostalCode,PhoneNumber,
								IsDefaultBilling,IsDefaultShipping,IsActive,ExternalId,CompanyName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)		
		OUTPUT INSERTED.AddressId, INSERTED.Address3 INTO  #InsertedAccountAddress (AddressId, AccountCode) 			 
		SELECT IC.FirstName,IC.LastName,IC.AddressName,IC.Address1,IC.Address2,IC.AccountCode,ZC.CountryCode,
		ZS.StateCode,IC.CityName,IC.PostalCode,IC.PhoneNumber,
		isnull(IC.IsDefaultBilling,0),isnull(IC.IsDefaultShipping,0),1,IC.ExternalId,IC.CompanyName, '+CONVERT(VARCHAR(10), @UserId)+' , getdate() , '+CONVERT(VARCHAR(10), @UserId)+' ,getdate()
		FROM  #InsertAccount IC
		inner join ZnodeState ZS on IC.StateName = ZS.StateName
		inner join ZnodeCountry ZC ON IC.CountryName = ZC.CountryName
		WHERE NOT EXISTS(SELECT * FROM ZnodeAddress ZA WHERE '+CASE WHEN ISNULL(@WhereConditionString,'') = '' THEN ' 1 = 0 ' ELSE @WhereConditionString END +')'

		EXEC (@SSQL)

		update ZAA set AddressId = UA.AddressId
		FROM #InsertedAccountAddress UA
		INNER JOIN #InsertedAccount IA ON UA.AccountCode = IA.AccountCode
		inner join ZnodeAccount ZA ON IA.AccountCode = ZA.AccountCode
		inner join ZnodeAccountAddress ZAA ON ZA.AccountId = ZAA.AccountId
		--WHERE NOT EXISTS ( SELECT * FROM ZnodeAccountAddress AA WHERE AccountId = @AccountId and AA.Addressid = UA.Addressid )
		
		INSERT INTO ZnodeAccountAddress ( AccountId, AddressId, CreatedBy, CreatedDate,	ModifiedBy,	ModifiedDate )
		SELECT IA.AccountId, AddressId ,  @UserId , @GetDate, @UserId , @GetDate 
		FROM #InsertedAccountAddress UA
		INNER JOIN #InsertedAccount IA ON UA.AccountCode = IA.AccountCode
		WHERE NOT EXISTS ( SELECT * FROM ZnodeAccountAddress AA WHERE AA.AccountId = IA.AccountId and AA.Addressid = UA.Addressid )
		
		update ZnodeAddress set Address3 = null
		where exists(select * from #InsertedAccountAddress IAA where IAA.AddressId = ZnodeAddress.AddressId )
		and Address3 is null
		
		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;
	END TRY
	BEGIN CATCH

		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN A;
	END CATCH;
END;
GO
IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportValidatePimProductData')
	DROP PROC Znode_ImportValidatePimProductData
GO
CREATE PROCEDURE [dbo].[Znode_ImportValidatePimProductData]
(   @ImportHeadName     VARCHAR(200),
    @TableName          VARCHAR(200),
    @NewGUID            NVARCHAR(200),
    @TemplateId         INT,
    @UserId             INT,
    @LocaleId           INT           = 1,
    @IsCategory         INT           = 0,
    @DefaultFamilyId    INT           = 0,
    @ImportProcessLogId INT,
    @PriceListId        INT,
	@CountryCode VARCHAR(100) = '',
	@PimCatalogId         INT    = 0 ,
	@PortalId int = 0,
	@IsAccountAddress bit = 0 )
AS
     SET NOCOUNT ON;

/*
    Summary :   Import PimProduct / Price / Inventory / Category / Category Associated Data 
    Process :   Admin site will upload excel / csv file in database and create global temporary table
				Procedure Znode_ImportValidatePimProductData will validate data with attribute validation rule
				If datatype validation issue found in input daata will logged into table "ZnodeImportLog"
				If Data is correct and record count in table ZnodeImportLog will be 0 then process for import data into Base tables
				To import data call procedure "Znode_ImportPimProductData"
    		  
				SourceColumnName: CSV file column headers
				TargetColumnName: Attributecode from ZnodePimAttribute Table (Consider those Attributecodes configured with default family only)
*/

     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             --BEGIN TRAN TRN_ImportValidProductData;
             DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
             DECLARE @SQLQuery NVARCHAR(MAX), @AttributeTypeName NVARCHAR(100), @AttributeCode NVARCHAR(300), @AttributeId INT, @IsRequired BIT, @SourceColumnName NVARCHAR(600), @ControlName VARCHAR(300), @ValidationName VARCHAR(100), @SubValidationName VARCHAR(300), @ValidationValue VARCHAR(300), @RegExp VARCHAR(300), @CreateDateString NVARCHAR(300), @DefaultLocaleId INT, @ImportHeadId INT, @CheckedSourceColumn NVARCHAR(600)= '', @Status BIT= 0,
			    @CsvColumnString nvarchar(max),
				@FailedRecordCount BIGINT,
				@SuccessRecordCount BIGINT

             DECLARE @FamilyAttributeDetail TABLE
             (PimAttributeId       INT,
              AttributeTypeName    VARCHAR(300),
              AttributeCode        VARCHAR(300),
              SourceColumnName     NVARCHAR(600),
              IsRequired           BIT,
              PimAttributeFamilyId INT
             );
             DECLARE @AttributeDetail TABLE
             (PimAttributeId    INT,
              AttributeTypeName VARCHAR(300),
              AttributeCode     VARCHAR(300),
              SourceColumnName  NVARCHAR(600),
              IsRequired        BIT,
              ControlName       VARCHAR(300),
              ValidationName    VARCHAR(100),
              SubValidationName VARCHAR(300),
              ValidationValue   VARCHAR(300),
              RegExp            VARCHAR(300)
             );

			 --IF ('tempdb..#DefaultAttributeCode') IS NOT NULL
				--drop table #DefaultAttributeCode

			CREATE TABLE #DefaultAttributeCode
			(AttributeTypeName          VARCHAR(300),
			PimAttributeDefaultValueId INT,
			PimAttributeId             INT,
			AttributeDefaultValueCode  VARCHAR(100)
			);

			--SET @SQLQuery = 'Select * into _tempSeo FROM  '+@TableName
   --          EXEC sys.sp_sqlexec  @SQLQuery;


			IF( @ImportHeadName = 'B2BCustomer' )
			BEGIN
				EXEC ZnodeB2BCustomerMapping @ImportHeadName = @ImportHeadName, @TableName = @TableName
			END
		
             DECLARE @GlobalTempTableColumns TABLE(ColumnName NVARCHAR);
             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM INFORMATION_SCHEMA.TABLES
                 WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#InvalidDefaultData'
             )
                 CREATE TABLE #InvalidDefaultData
                 (RowNumber  INT,
                  Value      NVARCHAR(MAX),
                  ColumnName NVARCHAR(600)
                 );
             ELSE
             DROP TABLE #InvalidDefaultData;
             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM INFORMATION_SCHEMA.TABLES
                 WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#GlobalTempTableColumns'
             )
                 BEGIN

                     SET @SQLQuery = 'SELECT Column_Name, '''+@ImportHeadName+''' AS ImportHeadName  from tempdb.INFORMATION_SCHEMA.COLUMNS	where table_name = object_name(object_id('''+@TableName+'''),
					(select database_id from sys.databases where name = ''tempdb''))';
                     CREATE TABLE #GlobalTempTableColumns
                     (ColumnName   NVARCHAR(MAX),
                      TypeOfImport NVARCHAR(100)
                     );
                     INSERT INTO #GlobalTempTableColumns
                     (ColumnName,
                      TypeOfImport
                     )
                     EXEC sys.sp_sqlexec
                          @SQLQuery;
                 END;
		  -- If Exists ( Select  count(1)  from #GlobalTempTableColumns GROUP BY ColumnName  Having count(1) > 1 )
		  -- Begin
			 --   INSERT INTO ZnodeImportLog(ErrorDescription,ColumnName,Data,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
    --               Select  46,ColumnName,'',@newGUID,@UserId,@GetDate,@UserId,@GetDate, @ImportProcessLogId  from #GlobalTempTableColumns GROUP BY ColumnName  Having count(1) > 1 
				
				----'Multiple occurance of column are not allow for'
		  -- END

             IF EXISTS
             (
                 SELECT TOP 1 1
                 FROM #GlobalTempTableColumns
                 WHERE ColumnName IN('PimCategoryId', 'PimProductId', 'RowNumber')
             )
                 BEGIN
                     INSERT INTO ZnodeImportLog
                     (ErrorDescription,
                      ColumnName,
                      Data,
                      GUID,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate,
                      ImportProcessLogId
                     )
                     VALUES
                     (43,
                      '',
                      '',
                      @newGUID,
                      @UserId,
                      @GetDate,
                      @UserId,
                      @GetDate,
                      @ImportProcessLogId
                     );
                 END;
             SET @DefaultLocaleId = dbo.Fn_GetDefaultLocaleId();
             --Remove old error log 
             --DELETE FROM ZnodeImportLog WHERE ImportProcessLogId in (select ImportProcessLogId  FROM ZnodeImportProcessLog  WHERE ImportTemplateId  = @TemplateId )
             --GUID = @NewGUID;
             --Delete FROM ZnodeImportProcessLog  WHERE ImportTemplateId  = @TemplateId 
		
             IF NOT EXISTS
             (
                 SELECT TOP 1 1  FROM ZnodeImportLog
                 WHERE Guid = @NewGUID
                       AND ErrorDescription IN(43, 42)
                 AND ImportProcessLogId = @ImportProcessLogId
             )
                 BEGIN
                     IF @ImportHeadName = 'Product'
                      BEGIN
						  IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
							  SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimProductId int null ';
						  ELSE 
							 SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimProductId int null Primary KEY CLUSTERED(RowNumber)';
						 
						  EXEC sys.sp_sqlexec @SQLQuery;
			         END;
                     ELSE
                     IF @ImportHeadName = 'Category'
                         BEGIN
							  IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimCategoryId int null ';
							  ElSE
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimCategoryId int null Primary KEY CLUSTERED(RowNumber) ';
						  
							  EXEC sys.sp_sqlexec @SQLQuery;
                         END;
                     ELSE
                         BEGIN
							IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1) ';
							Else 
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1) Primary KEY CLUSTERED(RowNumber)';
							
							EXEC sys.sp_sqlexec @SQLQuery;
                         END;;
                 END;
				
             --Generate new process for current import 
             --INSERT INTO ZnodeImportProcessLog(ImportTemplateId,Status,ProcessStartedDate,ProcessCompletedDate,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             --SELECT @TemplateId,dbo.Fn_GetImportStatus(0),@GetDate,NULL,@UserId,@GetDate,@UserId,@GetDate;
             --SET @ImportProcessLogId = @@IDENTITY;

             SET @CreateDateString = CONVERT(VARCHAR(100), @UserId)+','''+CONVERT(VARCHAR(100), @GetDate)+''','+CONVERT(VARCHAR(100), @UserId)+','''+CONVERT(VARCHAR(100), @GetDate)+''', '+CONVERT(VARCHAR(100), @ImportProcessLogId);

             SELECT TOP 1 @ImportHeadId = ImportHeadId FROM ZnodeImportTemplate WHERE ImportTemplateId = @TemplateId;
             IF @DefaultFamilyId = 0
                AND @ImportHeadName IN('Product', 'Category')
                 BEGIN 
                     --Get all default attribute values in attribute 
                     INSERT INTO @FamilyAttributeDetail
                     (PimAttributeId,
                      AttributeTypeName,
                      AttributeCode,
                      SourceColumnName,
                      IsRequired,
                      PimAttributeFamilyId
                     )
                     --Call Process to insert data of defeult family with source column name and target column name 
                     EXEC Znode_ImportGetTemplateDetails
                          @TemplateId = @TemplateId,
                          @IsValidationRules = 0,
                          @IsIncludeRespectiveFamily = 1,
                          @IsCategory = @IsCategory,
                          @DefaultFamilyId = @DefaultFamilyId;

					---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
					Delete FAD from @FamilyAttributeDetail FAD
					where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
					and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					               inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
                 END;
             ELSE
             IF @ImportHeadName IN('Product', 'Category')
                 BEGIN
                     --Get all default attribute values in attribute 
                     INSERT INTO @FamilyAttributeDetail
                     (PimAttributeId,
                      AttributeTypeName,
                      AttributeCode,
                      SourceColumnName,
                      IsRequired,
                      PimAttributeFamilyId
                     )
                     --Call Process to insert data of defeult family with source column name and target column name 
                     EXEC Znode_ImportGetTemplateDetails
                          @TemplateId = @TemplateId,
                          @IsValidationRules = 0,
                          @IsIncludeRespectiveFamily = 1,
                          @IsCategory = @IsCategory,
                          @DefaultFamilyId = @DefaultFamilyId;

					---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
					Delete FAD from @FamilyAttributeDetail FAD
					where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
					and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					               inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
                 END;      
             -- Check attributes are manditory and not provided with source table
		   	 
			if @TABLENAME	like '%tempdb..%'
				SET @SQLQuery = 'SELECT 42 AS ErrorDescription , SourceColumnName , '''' , '''+@NewGUID+''','+@CreateDateString+' from ZnodeImportTemplateMapping where ImportTemplateId = '+CONVERT(VARCHAR(100), @TemplateId)+' and ltrim(rtrim(SourceColumnName)) <> '''' AND ltrim(rtrim(SourceColumnName)) not in ( select isnull(Name ,'''') from tempdb.sys.columns where object_id = object_id('''+@TABLENAME+'''));';
			else 
				SET @SQLQuery = 'SELECT 42 AS ErrorDescription , SourceColumnName , '''' , '''+@NewGUID+''','+@CreateDateString+' from ZnodeImportTemplateMapping where ImportTemplateId = '+CONVERT(VARCHAR(100), @TemplateId)+' and ltrim(rtrim(SourceColumnName)) <> '''' AND ltrim(rtrim(SourceColumnName)) not in ( select isnull(Name ,'''') from sys.columns where object_id = object_id('''+@TABLENAME+'''));';
		 
			Declare @Tbl_CsvDynamicColulmns TABLE (ColumnName nvarchar(300), SequenceNumber int, DataType nvarchar(50),IsRequired bit )

			INSERT INTO @Tbl_CsvDynamicColulmns(ColumnName , SequenceNumber , DataType ,IsRequired)
			SELECT DISTINCT ZITM.SourceColumnName ,ZIAV.SequenceNumber, ZIAV.AttributeTypeName, ZIAV.IsRequired
			FROM ZnodeImportAttributeValidation ZIAV LEFT OUTER JOIN 
			ZnodeImportTemplate  ZIT ON ZIT.ImportHeadId =  ZIAV.ImportHeadId AND ZIT.ImportTemplateId  = @TemplateId
			LEFT OUTER JOIN ZnodeImportTemplateMapping  ZITM ON ZITM.ImportTemplateId = ZIT.ImportTemplateId  
			and ZIAV.AttributeCode = ZITM.TargetColumnName
			AND ZITM.ImportTemplateId  = @TemplateId
			WHERE ZIAV.ImportHeadId = @ImportHeadId --ORDER BY ZIAV.SequenceNumber


		    SELECT @CsvColumnString = SUBSTRING ((Select ',' +  ISNULL(ColumnName ,'NULL') from @Tbl_CsvDynamicColulmns ORDER BY SequenceNumber FOR XML PATH ('')),2,4000) 


     		INSERT INTO ZnodeImportLog(ErrorDescription, ColumnName, Data, GUID,CreatedBy, CreatedDate,  ModifiedBy,ModifiedDate,ImportProcessLogId
             )
             EXEC sys.sp_sqlexec  @SQLQuery;
             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM ZnodeImportLog
                 WHERE Guid = @NewGUID
                       AND ErrorDescription IN(43, 42)
                 AND ImportProcessLogId = @ImportProcessLogId
             )
                 BEGIN
                     --Get all default attribute values in attribute 
                     IF @ImportHeadName IN('Product', 'Category')
                         BEGIN
                             -- Check attributes are manditory and not provided with source table
                             INSERT INTO ZnodeImportLog
                             (ErrorDescription,
                              ColumnName,
                              Data,
                              GUID,
                              CreatedBy,
                              CreatedDate,
                              ModifiedBy,
                              ModifiedDate,
                              ImportProcessLogId
                             )
                                    SELECT '14' AS ErrorDescription,
                                           AttributeCode,
                                           '',
                                           @NewGUID,
                                           @UserId,
                                           @GetDate,
                                           @UserId,
                                           @GetDate,
                                           @ImportProcessLogId
                                    FROM @FamilyAttributeDetail
                                    WHERE ISNULL(SourceColumnName, '') = ''
                                          AND IsRequired = 1;  

                             -- Read all attribute details with their datatype
                             INSERT INTO @AttributeDetail
                             (PimAttributeId,
                              AttributeTypeName,
                              AttributeCode,
                              SourceColumnName,
                              IsRequired,
                              ControlName,
                              ValidationName,
                              SubValidationName,
                              ValidationValue,
                              RegExp
                             )
                             EXEC Znode_ImportGetTemplateDetails
                                  @TemplateId=@TemplateId,
								  @DefaultFamilyId=@DefaultFamilyId;

							---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
							Delete FAD from @AttributeDetail FAD
							where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
							and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
										   inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode) 

                             DELETE FROM @AttributeDetail
                             WHERE AttributeTypeName = 'Image'
                                   AND ValidationName <> 'IsAllowMultiUpload';
                             --IF NOT EXISTS
                             --(
                             --    SELECT TOP 1 1
                             --    FROM INFORMATION_SCHEMA.TABLES
                             --    WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#DefaultAttributeCode'
                             --)
                             --    BEGIN
                             --        CREATE TABLE #DefaultAttributeCode
                             --        (AttributeTypeName          VARCHAR(300),
                             --         PimAttributeDefaultValueId INT,
                             --         PimAttributeId             INT,
                             --         AttributeDefaultValueCode  VARCHAR(100)
                             --        );
                                     INSERT INTO #DefaultAttributeCode
                                     (AttributeTypeName,
                                      PimAttributeDefaultValueId,
                                      PimAttributeId,
                                      AttributeDefaultValueCode
                                     )
                                     --Call Process to insert default data value 
                                     EXEC Znode_ImportGetPimAttributeDefaultValue;

                                     DELETE FROM #DefaultAttributeCode
                                     WHERE AttributeTypeName = 'Yes/No';
                             --    END;
                             --ELSE
                             --    BEGIN
                             --        DROP TABLE #DefaultAttributeCode;
                             --    END;
                         END;
                     ELSE
                         BEGIN
					
					
                             --Read all attribute details with their datatype
                             INSERT INTO @AttributeDetail
                             (AttributeTypeName,
                              AttributeCode,
                              SourceColumnName,
                              IsRequired,
                              ControlName,
                              ValidationName,
                              SubValidationName,
                              ValidationValue,
                              RegExp
                             )
                             EXEC [Znode_ImportGetOtherTemplateDetails]
                                  @TemplateId = @TemplateId,
                                  @ImportHeadId = @ImportHeadId;

							IF @ImportHeadName IN('B2BCustomer')
							BEGIN

								INSERT INTO @AttributeDetail
								 (PimAttributeId,
								 AttributeTypeName,
								  AttributeCode,
								  SourceColumnName,
								  IsRequired,
								  ControlName,
								  ValidationName,
								  SubValidationName,
								  ValidationValue,
								  RegExp
								 )
								 EXEC [Znode_ImportGetGlobalTemplateDetails]
									  @TemplateId = @TemplateId,
									  @ImportHeadId = @ImportHeadId;

								
								INSERT INTO #DefaultAttributeCode
								(AttributeTypeName,
								PimAttributeDefaultValueId,
								PimAttributeId,
								AttributeDefaultValueCode
								)
								--Call Process to insert default data value 
								EXEC Znode_ImportGetGlobalAttributeDefaultValue;

								DELETE FROM #DefaultAttributeCode
								WHERE AttributeTypeName = 'Yes/No';

							END
						
                             --Check attributes are not mapped with any family of Pim Product
                             INSERT INTO ZnodeImportLog
                             (ErrorDescription,
                              ColumnName,
                              Data,
                              GUID,
                              CreatedBy,
                              CreatedDate,
                              ModifiedBy,
                              ModifiedDate,
                              ImportProcessLogId
                             )
                                    SELECT DISTINCT
                                           '14' AS ErrorDescription,
                                           AttributeCode,
                                           '',
                                           @NewGUID,
                                           @UserId,
                                           @GetDate,
                                           @UserId,
                                           @GetDate,
                                           @ImportProcessLogId
                                    FROM @AttributeDetail
                                    WHERE ISNULL(SourceColumnName, '') = ''   AND IsRequired = 1;  ;

                         END;
						
                     --	Check attributes are not mapped with (Default / Other) family of Pim Product
                     --	INSERT INTO ZnodeImportLog ( ErrorDescription , ColumnName , Data , GUID , CreatedBy , CreatedDate , ModifiedBy , ModifiedDate , ImportProcessLogId)
                     --	SELECT '1' AS ErrorDescription , SourceColumnName , '' , @NewGUID , @UserId , @GetDate , @UserId , @GetDate , @ImportProcessLogId
                     --	FROM @AttributeDetail WHERE PimAttributeId NOT IN ( SELECT zpfgm.PimAttributeId FROM dbo.ZnodePimFamilyGroupMapper AS zpfgm);
                     --	Verify data in global temporary table (column wise)
					
                     DECLARE Cr_Attribute CURSOR LOCAL FAST_FORWARD
                     FOR SELECT PimAttributeId,
                                AttributeTypeName,
                                AttributeCode,
                                IsRequired,
                                SourceColumnName,
                                ControlName,
                                ValidationName,
                                SubValidationName,
                                ValidationValue,
                                RegExp
                         FROM @AttributeDetail
                         WHERE ISNULL(SourceColumnName, '') <> '';
                     OPEN Cr_Attribute;
                     FETCH NEXT FROM Cr_Attribute INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @ControlName, @ValidationName, @SubValidationName, @ValidationValue, @RegExp;
                     WHILE @@FETCH_STATUS = 0
                         BEGIN
				             IF @AttributeTypeName = 'Number'
                                 BEGIN
							      EXEC Znode_ImportValidateNumber
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @ImportHeadId = @ImportHeadId,
                                          @ImportProcessLogId = @ImportProcessLogId;
                                 END;
							 -- Check invalid date
							
                             IF @AttributeTypeName = 'Date'
                                 BEGIN
                                     EXEC Znode_ImportValidateDate
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @ImportHeadId = @ImportHeadId,
                                          @ImportProcessLogId = @ImportProcessLogId;
                                 END;
							 -- Check Manditory Data
		 					 IF @IsRequired = 1 AND @CheckedSourceColumn <> @SourceColumnName
								BEGIN
									SET @CheckedSourceColumn = @SourceColumnName;
									EXEC Znode_ImportValidateManditoryData
									@TableName = @TableName,
									@SourceColumnName = @SourceColumnName,
									@CreateDateString = @CreateDateString,
									@ValidationName = @ValidationName,
									@ControlName = @ControlName,
									@ValidationValue = @ValidationValue,
									@NewGUID = @NewGUID,
									@ImportHeadId = @ImportHeadId;
								END;
							 --END 
							
                             IF @AttributeTypeName = 'Text'
                                 BEGIN
								 
						              EXEC Znode_ImportValidateManditoryText
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @LocaleId = @LocaleId,
                                          @DefaultLocaleId = @DefaultLocaleId,
                                          @AttributeId = @AttributeId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @ImportHeadId = @ImportHeadId;
                                 END;
                             IF @AttributeTypeName = 'Image'
                                 BEGIN
                                     EXEC Znode_ImportValidateImageData
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @LocaleId = @LocaleId,
                                          @DefaultLocaleId = @DefaultLocaleId,
                                          @AttributeId = @AttributeId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @ImportHeadId = @ImportHeadId;
                                 END;

					

                             --Check Default data value is valid 
                             IF @ImportHeadName IN('Product', 'Category','B2BCustomer')
                                 BEGIN
                                     IF @AttributeId IN
                                     (
                                         SELECT PimAttributeId
                                         FROM #DefaultAttributeCode
                                     )
                                         BEGIN
							
                                            IF  @AttributeTypeName = 'Multi Select'
											 BEGIN
										 		 ---Verify Image file is exists in media table or not 
												 SET @SQLQuery = ' INSERT INTO #InvalidDefaultData (RowNumber, Value, ColumnName) 
												 SELECT ROWNUMBER , (Select TOP 1 Item from dbo.split(' + @SourceColumnName + ','','')  SP WHERE NOT EXISTS 
												 (Select ToP 1 1 FROM #DefaultAttributeCode DAC WHERE 
												  DAC.AttributeTypeName <> ''Yes/No'' AND DAC.AttributeDefaultValueCode IS NOT NULL AND DAC.PimAttributeId = 
												 ' + CONVERT(VARCHAR(100), @AttributeId) + ' AND ltrim(rtrim(SP.Item) ) = DAC.AttributeDefaultValueCode
												 )), ''' + @SourceColumnName + ''' as [ColumnName]  FROM ' + @TableName
												 + ' Where ISnull(' + @SourceColumnName +  ','''') <> '''''
												EXEC sys.sp_sqlexec @SQLQuery;
											  END
											  ELSE IF @AttributeTypeName = 'Simple Select'
											  BEGIN
						
												---Verify Image file is exists in media table or not 
												 SET @SQLQuery = ' INSERT INTO #InvalidDefaultData (RowNumber, Value, ColumnName) 
												 SELECT ROWNUMBER , ' + @SourceColumnName + ' , ''' + @SourceColumnName + ''' as [ColumnName]  FROM ' + @TableName
												 + ' SP Where ISnull(' + @SourceColumnName +  ','''') <> '''' AND 
												  NOT EXISTS 
												 (Select TOP 1 1 FROM #DefaultAttributeCode DAC WHERE 
												  DAC.AttributeTypeName <> ''Yes/No'' AND DAC.AttributeDefaultValueCode IS NOT NULL AND DAC.PimAttributeId = 
												 ' + CONVERT(VARCHAR(100), @AttributeId) + ' AND ltrim(rtrim(SP.' + @SourceColumnName + ') ) = DAC.AttributeDefaultValueCode ) '
							
												EXEC sys.sp_sqlexec @SQLQuery;
											  END   
												-- Check Invalid Image 
												 SET @SQLQuery = 'SELECT ''9 '' ErrorDescription,'''+@SourceColumnName+''' as [ColumnName], 
												 Value AS  AttributeValue,RowNumber ,'''+@NewGUID+''',  '+@CreateDateString+' FROM #InvalidDefaultData Where Value IS NOT NULL'
												 INSERT INTO ZnodeImportLog (ErrorDescription, ColumnName, Data, RowNumber, GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
												 EXEC sys.sp_sqlexec @SQLQuery;
												 Delete from #InvalidDefaultData

       
                                         END;
                                 END;
							
                             FETCH NEXT FROM Cr_Attribute INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @ControlName, @ValidationName, @SubValidationName, @ValidationValue, @RegExp;
                         END;
                     CLOSE Cr_Attribute;
                     DEALLOCATE Cr_Attribute;
                     --SELECT top 1 1 FROM @FamilyAttributeDetail where  iSNULL(SourceColumnName,'') = ''  and IsRequired = 1
                 END;
             
			 
			  
------------------------------------------------------------------------------------------
		 Declare @SQLQueryNew NVARCHAR(4000)
		 Declare @SourceColumnNameProduct nvarchar(4000) 
         IF @ImportHeadName IN('Product','Pricing','ProductAssociation','Inventory')
		 BEGIN
		  	 
		 SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'SKU'
		 AND ImportTemplateId = @TemplateId


			SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  SKU - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;			
		END
		ELSE IF @ImportHeadName IN('ProductAttribute')
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'AttributeCode'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  Attribute - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'ZipCode'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'ZIP'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  ZIPCode - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'Category'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'CategoryCode'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  CategoryCode - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'CategoryAssociation'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'CategoryName'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  CategoryName - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;

		END
		ELSE IF @ImportHeadName IN ('Customer','CustomerAddress')
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'UserName'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  UserName - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'SEODetails'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'Code'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  Code - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'Highlight'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'HighlightCode'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  HighlightCode - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'AddonAssociation'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'SKU'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  SKU - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'AttributeDefaultValue'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'AttributeDefaultValueCode'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  AttributeDefaultValueCode - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
	-------------------------------------------------------------------------------------------------------------
	
	--DECLARE @SQLLOG NVARCHAR(MAX)

	--SET @SQLLOG = '

	--SELECT TBL.*,ZM.MessageName AS ErrorDescription INTO  tempdb..[##ImportProcessLog_'+@NewGUID+ ']
	--FROM '+@TableName+' TBL
	--INNER JOIN ZnodeImportLog ZILL ON (TBL.Rownumber = ZILL.Rownumber)
	--INNER JOIN Znodemessage ZM ON (ZM.MessageCode = ZILL.ErrorDescription)
	--WHERE ImportProcessLogId =  '+CONVERT(VARCHAR(100), @ImportProcessLogId)+'
	--AND ZILL.Rownumber IS NOT NULL	
	--'	
	-- PRINT @SQLLOG
	-- EXEC sys.sp_sqlexec  @SQLLOG;

	 --SET @SQLLOG = ''

	 --SET @SQLLOG = 'SELECT * FROM [TempDB..##ImportProcessLog_'+@NewGUID+ ']'
	 --EXEC sys.sp_sqlexec  @SQLLOG;


	--------------------------------------------------------------------------------------------------------------------
			 
  		SET @SQLQuery = 'Delete FROM  '+@TableName+' Where Rownumber IN (Select Rownumber FROM ZnodeImportLog  WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND Rownumber IS NOT NULL)';
        EXEC sys.sp_sqlexec  @SQLQuery;
			 			
	  
             IF @ImportHeadName IN('Product', 'Category')
                 BEGIN
                     IF NOT EXISTS
                     (
                         SELECT TOP 1 1
                         FROM @FamilyAttributeDetail
                         WHERE ISNULL(SourceColumnName, '') = ''
                               AND IsRequired = 1
                     ) AND NOT EXISTS
					 (
						 SELECT TOP 1 1
						 FROM ZnodeImportLog
						 WHERE Guid = @NewGUID
							   AND ErrorDescription IN(43, 42)
						 AND ImportProcessLogId = @ImportProcessLogId
					 )
                         BEGIN
                             IF @IsCategory = 0
                                 BEGIN
							
                                     EXEC Znode_ImportPimProductData
                                          @TableName = @TableName,
                                          @NewGUID = @NewGUID,
                                          @TemplateId = @TemplateId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @UserId = @UserId,
                                          @LocaleId = @LocaleId,
                                          @DefaultFamilyId = @DefaultFamilyId;

                                 END;
                             ELSE
                                 BEGIN
                                     EXEC Znode_ImportPimCategoryData
                                          @TableName = @TableName,
                                          @NewGUID = @NewGUID,
                                          @TemplateId = @TemplateId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @UserId = @UserId,
                                          @LocaleId = @LocaleId,
                                          @DefaultFamilyId = @DefaultFamilyId;
                                 END;
                         END
						 ELSE
							BEGIN
								-- Update Record count in log 
								
							
								--SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
								--EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount out
								--UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
								--WHERE ImportProcessLogId = @ImportProcessLogId;

								SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
								SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
								EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount out
								UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
								WHERE ImportProcessLogId = @ImportProcessLogId;
							END

                 END;
				IF NOT EXISTS
					 (
						 SELECT TOP 1 1
						 FROM ZnodeImportLog
						 WHERE Guid = @NewGUID
							   AND ErrorDescription IN(43, 42)
						 AND ImportProcessLogId = @ImportProcessLogId
					 )
             BEGIN
                 IF @ImportHeadName = 'Pricing'
                     BEGIN
                         EXEC [Znode_ImportPriceList]
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID,
                              @PriceListId = @PriceListId;
                     END;

                 IF @ImportHeadName = 'Inventory'
                     BEGIN
				
                         EXEC Znode_ImportInventory_Ver1
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID;
                     END;
                 IF @ImportHeadName = 'ZipCode'
                     BEGIN
						 EXEC Znode_ImportZipCode
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID,
							  @CountryCode = @CountryCode;
                     END;
					 IF @ImportHeadName = 'CategoryAssociation'
                     BEGIN
						 EXEC Znode_ImportCatalogCategory
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID,
							  @PimCatalogId = @PimCatalogId;
                     END;
					 IF @ImportHeadName = 'ProductAssociation'
                     BEGIN
						 EXEC Znode_ImportAssociateProducts
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID
                     END;
			
					 IF @ImportHeadName = 'SEODetails' AND @PortalId > 0 
                     BEGIN
						 EXEC Znode_ImportSEODetails
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
							  @LocaleId = @LocaleId,
							  @PortalId =@PortalId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID,
							  @CsvColumnString = @CsvColumnString 

				
                     END;
				
					 IF @ImportHeadName = 'ProductAttribute' 
                     BEGIN
						 EXEC Znode_ImportAttributes
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
							  @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID
				
                     END;

					 IF @ImportHeadName = 'Customer' AND @PortalId > 0 
                     BEGIN
					
					
						 EXEC Znode_ImportCustomer
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = @PortalId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString
				
                     END;
					 
					 IF @ImportHeadName = 'UserApprovers' AND @PortalId > 0 
                     BEGIN
						 EXEC Znode_ImportUserApproval
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = @PortalId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString
				
                     END;

					 IF @ImportHeadName = 'B2BCustomer' AND @PortalId > 0 
                     BEGIN

							 EXEC Znode_ImportB2BCustomer
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = @PortalId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString
				
                     END;

					 IF @ImportHeadName = 'CustomerAddress' --AND @PortalId > 0 
                     BEGIN
						 EXEC Znode_ImportCustomerAddress
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = 1, -- not implemented from forntend 
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString,
							  @IsAccountAddress = @IsAccountAddress
				
                     END;
					 IF @ImportHeadName = 'ShippingAddress' --AND @PortalId > 0 
                     BEGIN
						 EXEC Znode_ImportCustomerAddress
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = 1, -- not implemented from forntend 
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString,
							  @IsAccountAddress = @IsAccountAddress
				
                     END;
					 IF @ImportHeadName = 'StoreLocator' --AND @PortalId > 0 
                     BEGIN
					 	 EXEC Znode_ImportStoreLocatorAddress
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString
                     END;

					IF @ImportHeadName = 'Highlight'
					BEGIN
					EXEC Znode_ImportHighlight 
					@TableName = @TableName, 
					@Status = @Status, 
					@UserId = @UserId, 
					@ImportProcessLogId = @ImportProcessLogId, 
					@NewGUID = @NewGUID 
					END;

					IF @ImportHeadName = 'AddonAssociation'
					BEGIN
					EXEC Znode_ImportAddonAssociation 
					@TableName = @TableName, 
					@Status = @Status, 
					@UserId = @UserId, 
					@ImportProcessLogId = @ImportProcessLogId, 
					@NewGUID = @NewGUID,
					@PimCatalogId = @PimCatalogId
					END;

					IF @ImportHeadName = 'AttributeDefaultValue'
					BEGIN
					EXEC Znode_ImportAttributeDefaultValue 
					@TableName = @TableName, 
					@Status = @Status, 
					@UserId = @UserId, 
					@ImportProcessLogId = @ImportProcessLogId, 
					@NewGUID = @NewGUID
					
					END;

					IF @ImportHeadName = 'Voucher'
					BEGIN
						EXEC Znode_ImportVoucher 
						@TableName = @TableName, 
						@Status = @Status, 
						@UserId = @UserId, 
						@ImportProcessLogId = @ImportProcessLogId, 
						@NewGUID = @NewGUID
					
					END;
					IF @ImportHeadName = 'Account'
					BEGIN
						
						EXEC Znode_ImportAccount 
						@TableName = @TableName, 
						@Status = @Status, 
						@UserId = @UserId, 
						@ImportProcessLogId = @ImportProcessLogId, 
						@NewGUID = @NewGUID,
						@CsvColumnString = @CsvColumnString,
						@PortalId = @PortalId
					
					END;
				 
             END
			 ELSE 
				 BEGIN
					-- Update Record count in log 	
					SET @SQLQuery = ' Select @FailedRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
					EXEC	sp_executesql @SQLQuery , N'@FailedRecordCount BIGINT out' , @FailedRecordCount =@FailedRecordCount out
					--SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS  NULL AND  ImportProcessLogId = @ImportProcessLogId;
					SELECT @SuccessRecordCount = 0
									
					UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
					WHERE ImportProcessLogId = @ImportProcessLogId;
					--SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
					--SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
					--EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount out
					--UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount , TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
					--WHERE ImportProcessLogId = @ImportProcessLogId;
				 END

             EXEC Znode_ImportReadErrorLog
                  @ImportProcessLogId = @ImportProcessLogId,
                  @NewGUID = @NewGUID;
             DROP TABLE #GlobalTempTableColumns;

             -- Finally call product insert process if error not found in error log table 
             IF EXISTS
             (
                 SELECT TOP 1 1
                 FROM ZnodeImportLog
                 WHERE ImportProcessLogId = @ImportProcessLogId
                       AND Guid = @NewGUID
             )
                 BEGIN
                     --Update process with completed status for current import 
                     UPDATE ZnodeImportProcessLog
                       SET
                           Status = dbo.Fn_GetImportStatus(3),
                           ProcessCompletedDate = GETDATE()
                       WHERE ImportProcessLogId = @ImportProcessLogId;
                 END;
				 --SET @SQLQuery = 'Drop Table ' + @TableName
				 SET @SQLQuery = 'IF Object_id(''+@TableName+'') IS NOT NULL  DROP TABLE ' + @TableName
                 EXEC sys.sp_sqlexec @SQLQuery;
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE(),
                    ERROR_LINE(),
                    ERROR_PROCEDURE();
             EXEC Znode_ImportReadErrorLog
                  @ImportProcessLogId = @ImportProcessLogId,
                  @NewGUID = @NewGUID; 
             --Update process with failed status for current import 
             UPDATE ZnodeImportProcessLog
               SET
                   Status = dbo.Fn_GetImportStatus(3),
                   ProcessCompletedDate = GETDATE()
             WHERE ImportProcessLogId = @ImportProcessLogId;
			 				 SET @SQLQuery = 'Drop Table ' + @TableName
                 EXEC sys.sp_sqlexec @SQLQuery;
             --ROLLBACK TRAN TRN_ImportValidProductData;
         END CATCH;
     END;
GO
IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportCustomerAddress')
	DROP PROC Znode_ImportCustomerAddress
GO
CREATE PROCEDURE [dbo].[Znode_ImportCustomerAddress](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @LocaleId int= 0,@PortalId int ,@CsvColumnString nvarchar(max), @IsAccountAddress bit = 0 )
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import SEO Details
	
	-- Unit Testing : 
	--------------------------------------------------------------------------------------

BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max),@IsAllowGlobalLevelUserCreation nvarchar(10)

		DECLARE @GetDate datetime= dbo.Fn_GetDate();
		-- Retrive Value from global setting 
		Select @IsAllowGlobalLevelUserCreation = FeatureValues from ZnodeGlobalsetting where FeatureName = 'AllowGlobalLevelUserCreation'
		-- Three type of import required three table varible for product , category and brand

		CREATE TABLE #InsertCustomerAddress 
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int,UserName	nvarchar(512)
			,FirstName	varchar	(300),LastName	varchar	(300),DisplayName	nvarchar(1200),Address1	varchar	(300),Address2	varchar	(300)
			,CountryName	varchar	(3000),StateName	varchar	(3000),CityName	varchar	(3000),PostalCode	varchar	(50)
			,PhoneNumber	varchar	(50),
			--Mobilenumber	varchar(50),AlternateMobileNumber	varchar(50),FaxNumber	varchar(30),
			IsDefaultBilling	bit 
			,IsDefaultShipping	bit	,IsActive	bit	,ExternalId	nvarchar(2000),CompanyName nvarchar(2000), GUID NVARCHAR(400)
		);
	
		--SET @SSQL = 'SELECT RowNumber,UserName,FirstName,LastName,MiddleName,BudgetAmount,Email,PhoneNumber,EmailOptIn,IsActive,ExternalId,GUID FROM '+ @TableName;
		--SET @SSQL = 'SELECT RowNumber,' + @CsvColumnString + ',GUID FROM '+ @TableName;
		SET @SSQL = ' INSERT INTO #InsertCustomerAddress ( RowNumber, ' + @CsvColumnString + ' ,GUID )
		SELECT RowNumber,' + @CsvColumnString + ',GUID FROM '+ @TableName;
		--INSERT INTO @InsertCustomerAddress( RowNumber,UserName,FirstName,LastName,DisplayName,Address1,Address2,CountryName,
		--									StateName,CityName,PostalCode,PhoneNumber,
		--									IsDefaultBilling,IsActive,IsDefaultShipping,ExternalId,CompanyName,GUID )
		EXEC sys.sp_sqlexec @SSQL;

		-- start Functional Validation 
		----------------------------------------------
		IF (@IsAccountAddress = 0)
		BEGIN
			IF @IsAllowGlobalLevelUserCreation = 'true'
					INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
						   SELECT '19', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
						   FROM #InsertCustomerAddress AS ii
						   WHERE ii.UserName NOT IN 
						   (
							   SELECT UserName FROM AspNetZnodeUser   where PortalId = @PortalId
						   );
			ELSE 
					INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
						   SELECT '19', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
						   FROM #InsertCustomerAddress AS ii
						   WHERE ii.UserName NOT IN 
						   (
							   SELECT UserName FROM AspNetZnodeUser   
						   );

					INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
							SELECT '8', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
							FROM #InsertCustomerAddress AS ii
							WHERE ISnull(ltrim(rtrim(ii.UserName)), '') = ''

		 END

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '8', 'StateName', StateName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertCustomerAddress AS ii
		WHERE not exists(select * from ZnodeState ZS where ZS.StateName = ISnull(ltrim(rtrim(ii.StateName)), '') )

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '8', 'CountryName', CountryName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertCustomerAddress AS ii
		WHERE not exists(select * from ZnodeCountry ZC where ZC.CountryName = ISnull(ltrim(rtrim(ii.CountryName)), '') )

		UPDATE ZA SET ZA.IsDefaultBilling = 0
		from AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
		INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
		INNER JOIN ZnodeUserAddress ZUA ON ZUA.UserId = ZU.UserId
		INNER JOIN ZnodeAddress ZA ON ZUA.AddressId = ZA.AddressId
		inner join #InsertCustomerAddress IC on ANZU.UserName = IC.UserName --and IC.IsDefaultBilling <> ZA.IsDefaultBilling 
		where IC.IsDefaultBilling = 1 

		UPDATE ZA SET ZA.IsDefaultShipping = 0
		from AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
		INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
		INNER JOIN ZnodeUserAddress ZUA ON ZUA.UserId = ZU.UserId
		INNER JOIN ZnodeAddress ZA ON ZUA.AddressId = ZA.AddressId
		inner join #InsertCustomerAddress IC on ANZU.UserName = IC.UserName
		where IC.IsDefaultShipping = 1 

		 -- error log when atleast db have 
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
					   SELECT '63', 'IsDefaultBilling/IsDefaultShipping', IsDefaultBilling, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
					   FROM #InsertCustomerAddress IC where  exists (
		SELECT TOP 1 1  from AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
		INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
		INNER JOIN ZnodeUserAddress ZUA ON ZUA.UserId = ZU.UserId
		INNER JOIN ZnodeAddress ZA ON ZUA.AddressId = ZA.AddressId
		where ANZU.UserName = IC.UserName AND ZA.IsDefaultBilling =IC.IsDefaultBilling 
		AND ZA.IsDefaultShipping =IC.IsDefaultShipping )
			
		--INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		--SELECT '35', 'IsDefaultBilling', IsDefaultBilling, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		--FROM #InsertCustomerAddress IC WHERE IsDefaultBilling = 0 AND IsDefaultShipping = 0 


		--INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		--	   SELECT '35', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		--	   FROM @InsertCustomer AS ii
		--	   WHERE ii.UserName not like '%_@_%_.__%' 
		 
		--Note : Content page import is not required 
		
		-- End Function Validation 	
		-----------------------------------------------
		--- Delete Invalid Data after functional validatin  

		--IF ( @IsAccountAddress = 1 )
		--BEGIN
		--	INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		--		SELECT '53', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		--		FROM #InsertCustomerAddress AS ii
		--		WHERE isnull(ii.UserName,'') <> ''
		--END


		UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ UserName - ' + ISNULL(UserName,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN #InsertCustomerAddress IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL


		DELETE FROM #InsertCustomerAddress
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber IS NOT NULL 
			--AND GUID = @NewGUID
		);

		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM #InsertCustomerAddress
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount ,
		TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End

		----------update ZnodeAddress
		DECLARE @AddressColumnString VARCHAR(1000), @WhereConditionString VARCHAR(1000), @UpdateColumnString VARCHAR(1000)

		SELECT @AddressColumnString = COALESCE(@AddressColumnString + ',', '')+a.ColumnName --COALESCE(@CsvColumnString + ' and ', '') +'ZA.'+ColumnName+' =  IC.'+ColumnName
		FROM ZnodeImportUpdatableColumns a
		INNER JOIN INFORMATION_SCHEMA.COLUMNS b on a.ColumnName = b.COLUMN_NAME  
		INNER JOIN dbo.Split(@CsvColumnString,',')C on b.COLUMN_NAME = c.Item
		WHERE b.TABLE_NAME = 'ZnodeAddress' 
		AND EXISTS(SELECT * FROM ZnodeImportHead IH where a.ImportHeadId = IH.ImportHeadId and IH.Name in ('CustomerAddress','ShippingAddress'))

		SELECT @UpdateColumnString = COALESCE(@UpdateColumnString + ' , ', '') +'ZA.'+a.COLUMN_NAME+' =  IC.'+a.COLUMN_NAME  
		FROM INFORMATION_SCHEMA.COLUMNS a
		INNER JOIN dbo.Split(@CsvColumnString,',')b on a.COLUMN_NAME = b.Item
		WHERE NOT EXISTS (SELECT * FROM dbo.Split(@AddressColumnString,',') c WHERE a.COLUMN_NAME = c.Item )
		AND a.TABLE_NAME = 'ZnodeAddress'

		SELECT @WhereConditionString = COALESCE(@WhereConditionString + ' AND ', '') +'ZA.'+item+' =  IC.'+item from dbo.split(@AddressColumnString,',')
	
				
				CREATE TABLE #InsertedUserAddress (AddressId  nvarchar(256), UserId nvarchar(max)) 

			    IF ( @IsAccountAddress = 1 )
				BEGIN

					UPDATE ZnodeAddress SET IsDefaultBilling = 0,  IsDefaultShipping = 0
					from AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
					INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
					INNER JOIN ZnodeUserAddress ZUA ON ZUA.UserId = ZU.UserId
					INNER JOIN ZnodeAddress ZA ON ZUA.AddressId = ZA.AddressId
					INNER JOIN #InsertCustomerAddress IC ON ANZU.UserName = IC.UserName AND ZA.IsDefaultBilling =IC.IsDefaultBilling 
															AND ZA.IsDefaultShipping =IC.IsDefaultShipping

					SET @SSQL = '
						UPDATE ZA set ModifiedBy = '+CONVERT(VARCHAR(10), @UserId)+', ModifiedDate = getdate() '+CASE WHEN ISNULL(@UpdateColumnString,'') = '' THEN '' ELSE ','+@UpdateColumnString END+' 
						FROM ZnodeAddress ZA
						INNER JOIN #InsertCustomerAddress IC ON '+CASE WHEN ISNULL(@WhereConditionString,'') = '' THEN ' 1 = 0 ' ELSE @WhereConditionString END

					EXEC (@SSQL)

					SET @SSQL = '
					Insert into ZnodeAddress (FirstName,LastName,DisplayName,Address1,Address2,Address3,CountryName,
											StateName,CityName,PostalCode,PhoneNumber,
											IsDefaultBilling,IsDefaultShipping,IsActive,ExternalId,CompanyName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,IsShipping,IsBilling)		
					OUTPUT INSERTED.AddressId INTO  #InsertedUserAddress (AddressId) 			 
					SELECT IC.FirstName,IC.LastName,IC.DisplayName,IC.Address1,IC.Address2,null,ZC.CountryCode,
					ZS.StateCode,IC.CityName,IC.PostalCode,IC.PhoneNumber,
					isnull(IC.IsDefaultBilling,0),isnull(IC.IsDefaultShipping,0),isnull(IC.IsActive,0),IC.ExternalId,IC.CompanyName, '+CONVERT(VARCHAR(10), @UserId)+' , getdate() , '+CONVERT(VARCHAR(10), @UserId)+' ,getdate(), 1, 1
					FROM  #InsertCustomerAddress IC
					inner join ZnodeState ZS on IC.StateName = ZS.StateName
					inner join ZnodeCountry ZC ON IC.CountryName = ZC.CountryName
					WHERE NOT EXISTS(SELECT * FROM ZnodeAddress ZA WHERE '+CASE WHEN ISNULL(@WhereConditionString,'') = '' THEN ' 1 = 0 ' ELSE @WhereConditionString END +')'

					EXEC (@SSQL)

					DECLARE @AccountId INT
					SELECT @AccountId = AccountId FROM ZnodeUser where UserId = @UserId
					INSERT INTO ZnodeAccountAddress ( AccountId, AddressId, CreatedBy, CreatedDate,	ModifiedBy,	ModifiedDate )
					SELECT @AccountId, Addressid ,  @UserId , @GetDate, @UserId , @GetDate FROM #InsertedUserAddress UA
					WHERE NOT EXISTS ( SELECT * FROM ZnodeAccountAddress AA WHERE AccountId = @AccountId and AA.Addressid = UA.Addressid )
				END
				ELSE
				BEGIN
					
					UPDATE ZnodeAddress SET IsDefaultBilling = 0,  IsDefaultShipping = 0
					from AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
					INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
					INNER JOIN ZnodeUserAddress ZUA ON ZUA.UserId = ZU.UserId
					INNER JOIN ZnodeAddress ZA ON ZUA.AddressId = ZA.AddressId
					INNER JOIN #InsertCustomerAddress IC ON ANZU.UserName = IC.UserName AND ZA.IsDefaultBilling =IC.IsDefaultBilling 
															AND ZA.IsDefaultShipping =IC.IsDefaultShipping
					

					SET @SSQL = '
						UPDATE ZA set ModifiedBy = '+CONVERT(VARCHAR(10), @UserId)+', ModifiedDate = getdate() '+CASE WHEN ISNULL(@UpdateColumnString,'') = '' THEN '' ELSE ','+@UpdateColumnString END+' 
						FROM ZnodeAddress ZA
						INNER JOIN #InsertCustomerAddress IC ON '+CASE WHEN ISNULL(@WhereConditionString,'') = '' THEN ' 1 = 0 ' ELSE @WhereConditionString END
						print @SSQL
					EXEC (@SSQL)

					SET @SSQL = '
					Insert into ZnodeAddress (FirstName,LastName,DisplayName,Address1,Address2,Address3,CountryName,
												StateName,CityName,PostalCode,PhoneNumber,
												IsDefaultBilling,IsDefaultShipping,IsActive,ExternalId,CompanyName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,IsShipping,IsBilling)		
					OUTPUT INSERTED.AddressId, INSERTED.Address3 INTO  #InsertedUserAddress (AddressId, UserId ) 			 
					SELECT IC.FirstName,IC.LastName,IC.DisplayName,IC.Address1,IC.Address2,convert(nvarchar(100),ZU.UserId),ZC.CountryCode,
					ZS.StateCode,IC.CityName,IC.PostalCode,IC.PhoneNumber,
					isnull(IC.IsDefaultBilling,0),isnull(IC.IsDefaultShipping,0),isnull(IC.IsActive,0),IC.ExternalId,IC.CompanyName, '+CONVERT(VARCHAR(10), @UserId)+' , getdate() , '+CONVERT(VARCHAR(10), @UserId)+' ,getdate(),1,1
					FROM AspNetZnodeUser ANZU 
					INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
					INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
					INNER JOIN #InsertCustomerAddress IC ON ANZU.UserName = IC.UserName 
					inner join ZnodeState ZS on IC.StateName = ZS.StateName
					inner join ZnodeCountry ZC ON IC.CountryName = ZC.CountryName
					WHERE NOT EXISTS(SELECT * FROM ZnodeAddress ZA WHERE '+CASE WHEN ISNULL(@WhereConditionString,'') = '' THEN ' 1 = 0 ' ELSE @WhereConditionString END +')'
					print @SSQL
					EXEC (@SSQL)

					INSERT INTO ZnodeUserAddress(UserId,AddressId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
					SELECT CAST( UserId AS INT ) , Addressid , @UserId , @GetDate, @UserId , @GetDate FROM  #InsertedUserAddress
				END
				
				UPDATE ZA SET ZA.CountryName = ZC.CountryCode
				from ZnodeAddress ZA
				Inner join ZnodeCountry ZC ON ltrim(rtrim(ZA.CountryName)) = ltrim(rtrim(ZC.CountryName))

				UPDATE ZA SET ZA.Address3 = null 
				From ZnodeAddress ZA INNER JOIN #InsertedUserAddress IUA ON ZA.AddressId = IUA.AddressId 

		-- 'End'
		--      SET @Status = 1;
		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;
	END TRY
	BEGIN CATCH

		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN A;
	END CATCH;
END;
GO
IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_GetProductInfoForWebStore')
	DROP PROC Znode_GetProductInfoForWebStore
GO
CREATE PROCEDURE [dbo].[Znode_GetProductInfoForWebStore]
(   
	@PortalId         INT,
    @LocaleId         INT,
	@UserId			  INT = 2,
	@currentUtcDate    VARCHAR(200) = '',
	@ProductDetailsFromWebStore   DBO.ProductDetailsFromWebStore READONLY,
	@IsAllLocation bit =0)
AS 
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
			 
			 DECLARE @Tlb_SKU TABLE (SKU VARCHAR(100))
			 DECLARE @PublishProductIds  NVARCHAR(max) ,@SKU NVARCHAR(max) 

			 DECLARE @Fn_GetDefaultLocaleId int = Dbo.Fn_GetDefaultLocaleId()
				
			 DECLARE @TBL_PricebyCatalogforAssociateProduct TABLE (PimProductId int ,AssociatedProductId int,ParentSKU NVARCHAR(300),
				ChildSKU NVARCHAR(300),RetailPrice  numeric(28,6),AssociatedProductDisplayOrder int ,
				TypeOfProduct nvarchar(100),SalesPrice  numeric(28,6))
		     DECLARE @tbl_PricingSkuOfAssociatedProduct TABLE (sku nvarchar(200),RetailPrice numeric(28,6),SalesPrice numeric(28,6),TierPrice numeric(28,6),
				TierQuantity numeric(28,6),CurrencyCode varchar(200),CurrencySuffix varchar(2000), ExternalId NVARCHAR(2000))				
		

			--Create TABLE #Tlb_PromotionProductData 
   --          (
			--	  PromotionId      INT,
			--	  PromotionType	   INT, 
			--	  ExpirationDate   Datetime, 
			--	  ActivationDate   Datetime,
			--	  PublishProductId INT,
			--	  PromotionMessage Nvarchar(max)  
   --          );
			 Create TABLE #Tbl_PriceListWisePrice 
             (
				  SKU            VARCHAR(300),
				  RetailPrice    NUMERIC(28, 6),
				  SalesPrice     NUMERIC(28, 6),
				  TierPrice      NUMERIC(28, 6),
				  TierQuantity   NUMERIC(28, 6),
				  CurrencyCode   Varchar(100),
				  CurrencySuffix Varchar(1000),
				  CultureCode      VARCHAr(1000),
				  ExternalId NVARCHAR(2000),
				  Custom1        NVARCHAR(MAX),
				  Custom2        NVARCHAR(MAX),
				  Custom3        NVARCHAR(MAX)
             );

			 CREATE TABLE #Tlb_ProductData 
             (
				  PublishProductId INT,
				  SKU              NVARCHAR(100),
				  SEOTitle         NVARCHAR(200),
				  SEODescription   NVARCHAR(MAX),
				  SEOKeywords      NVARCHAR(MAX),
				  SEOUrl           NVARCHAR(MAX),
				  Rating           Numeric(28,6),
				  TotalReviews     INT,
				  RetailPrice      NUMERIC(28, 6),
				  SalesPrice       NUMERIC(28, 6),
				  TierPrice        NUMERIC(28, 6),
				  TierQuantity     NUMERIC(28, 6),
				  CurrencyCode     Varchar(100),
				  CurrencySuffix   Varchar(1000),
				
				  ExternalId       NVARCHAR(2000),
				  Quantity    NUMERIC(28, 6),
				  ReOrderLevel     NUMERIC(28, 6),
				  Custom1        NVARCHAR(MAX),
				  Custom2        NVARCHAR(MAX),
				  Custom3        NVARCHAR(MAX),
				  CanonicalURL VARCHAR(200),   
				  RobotTag VARCHAR(50)
			   );


			 Create TABLE #Tbl_Inventory
             (
				  SKU            VARCHAR(300),
				  Quantity    NUMERIC(28, 6),
				  ReOrderLevel     NUMERIC(28, 6),
				  PortalId      int,
				  WarehouseName	varchar(100),
			      WarehouseCode	varchar(100),
			      DefaultInventoryCount varchar(1000),
				
             );
			 
			 Create TABLE #Tbl_WarehouseWiseInventory
             (
				  SKU            VARCHAR(300),
				  Quantity    NUMERIC(28, 6),
				  ReOrderLevel NUMERIC(28, 6),
				  PortalId      int,
				  WarehouseCode VARCHAR(100),
				  WarehouseName VARCHAR(100),
				  IsDefaultWarehouse BIT

             );

            INSERT INTO #Tlb_ProductData (PublishProductId,SKU)
            SELECT id,SKU FROM @ProductDetailsFromWebStore
			  		
			SELECT @SKU = Substring((SELECT ',' + SKU FROM @ProductDetailsFromWebStore FOR XML PAth('')),2,4000) 

			SELECT @PublishProductIds = Substring((SELECT ',' + CONVERT(NVARCHAR(100),id ) FROM @ProductDetailsFromWebStore FOR XML PAth('')),2,4000) 
			
			--INSERT INTO  #Tlb_PromotionProductData(PromotionId,PromotionType, ExpirationDate,  ActivationDate, PublishProductId,PromotionMessage)
			--Exec [Znode_GetPromotionByPublishProductId] @PublishProductIds = @PublishProductIds ,@UserId  = @UserId	,@PortalId  = @PortalId  
			 
			INSERT INTO #Tbl_PriceListWisePrice( SKU, RetailPrice,SalesPrice,TierPrice,TierQuantity,CurrencyCode,CurrencySuffix,CultureCode,ExternalId,Custom1,Custom2,Custom3)
			EXEC Znode_GetPublishProductPricingBySku @SKU = @SKU ,@PortalId = @PortalId ,@currentUtcDate = @currentUtcDate,@UserId = @UserId 

			IF @IsAllLocation=1
			BEGIN 
				Insert into #Tbl_WarehouseWiseInventory(SKU,	Quantity,ReOrderLevel,PortalId,	WarehouseCode,	WarehouseName,	IsDefaultWarehouse)
				EXEC Znode_GetWarehouseInventoryBySkus  @SKUs=@SKU,@PortalId=@PortalId
			END

			insert into #Tbl_Inventory (SKU,	Quantity,	ReOrderLevel,	PortalId, WarehouseName, WarehouseCode, DefaultInventoryCount)
			EXEC Znode_GetInventoryBySkus @SKUs=@SKU,@PortalId=@PortalId
			
			--Price logic for Associate products
			----INSERT INTO @TBL_PricebyCatalogforAssociateProduct(AssociatedProductId,ChildSKU,ParentSKU,PimProductId,RetailPrice,SalesPrice,TypeOfProduct)
			----SELECT cl.Item, NULL , PR.SKU, PR.ID, null, null , PR.[ProductType]  FROM @ProductDetailsFromWebStore PR
			----Cross Apply dbo.split (AssociateProducts, ',') CL 

			----UPDATE PDI SET PDI.ChildSKU = ZPPD.SKU 
			----from @TBL_PricebyCatalogforAssociateProduct PDI inner join
			----ZnodePublishProductDetail ZPPD On PDI.AssociatedProductId = ZPPD.PublishProductId
			
			----SELECT @SKU = Substring((SELECT ',' + Convert(nvarchar(100),AssociatedProductId) 
			----FROM @TBL_PricebyCatalogforAssociateProduct where AssociatedProductId is not null FOR XML PAth('')),2,4000) 

			----INSERT INTO @tbl_PricingSkuOfAssociatedProduct (SKU,RetailPrice ,SalesPrice,TierPrice,TierQuantity,CurrencyCode,CurrencySuffix, ExternalId)	
			----EXEC Znode_GetPublishProductPricingBySku  @Sku ,@portalID  ,@currentUtcDate,@UserId 

			----update PLC SET PLC.RetailPrice = PLCA.RetailPrice ,
			----PLC.SalesPrice = PLCA.SalesPrice 
			----from @TBL_PricebyCatalogforAssociateProduct PLC inner join @tbl_PricingSkuOfAssociatedProduct
			----PLCA on PLC.ChildSKU = PLCA.sku
			
			----Update PBC SET PBC.RetailPrice = 
			----	(Select TOP 1 Isnull(RetailPrice ,SalesPrice) from @TBL_PricebyCatalogforAssociateProduct PCBA  where PCBA.ParentSKU =PBC.SKU
			----		and PCBA.ParentSKU is not null and PCBA.ChildSKU is not null
			----	Order by AssociatedProductDisplayOrder)
			----	from #Tbl_PriceListWisePrice  PBC  where 
			----	Exists (Select TOP 1 1  from @TBL_PricebyCatalogforAssociateProduct PCBA
			----	where PCBA.ParentSKU =PBC.SKU and PCBA.TypeOfProduct = 'ConfigurableProduct')
			----	and PBC.RetailPrice IS null 

			Update PD SET 
			 PD.SKU             = PLWP.SKU            
			,PD.RetailPrice     = PLWP.RetailPrice     
			,PD.SalesPrice      = PLWP.SalesPrice      
			,PD.TierPrice       = PLWP.TierPrice       
			,PD.TierQuantity    = PLWP.TierQuantity    
			,PD.CurrencyCode    = PLWP.CurrencyCode    
			,PD.CurrencySuffix  = PLWP.CurrencySuffix  
			,PD.ExternalId 	    = PLWP.ExternalId
			,PD.Custom1			= PLWP.Custom1
			,PD.Custom2			= PLWP.Custom2
			,PD.Custom3			= PLWP.Custom3
			FROM #Tlb_ProductData PD Inner join #Tbl_PriceListWisePrice PLWP on 
			PD.SKU = PLWP.SKU

			Update PD SET 
			 PD.Quantity = TLI.Quantity,
			 PD.ReOrderLevel= TLI.ReOrderLevel
			 FROM #Tlb_ProductData PD Inner join #Tbl_Inventory TLI on 
			PD.SKU = TLI.SKU

			 

			----Update PD SET 
			----	  PD.PromotionId      =PLWP.PromotionId,
			----	  PD.PromotionType	  =PLWP.PromotionType, 
			----	  PD.ExpirationDate   =PLWP.ExpirationDate, 
			----	  PD.ActivationDate   =PLWP.ActivationDate,
			----	  PD.PublishProductId =PLWP.PublishProductId,
			----	  PD.PromotionMessage  =PLWP.PromotionMessage   
			----from #Tlb_ProductData PD Inner join #Tlb_PromotionProductData PLWP on 
			----PD.PublishProductId = PLWP.PublishProductId


			 DECLARE @Tlb_CustomerAverageRatings TABLE
             (PublishProductId INT,
              Rating           NUMERIC(28,6),
              TotalReviews     INT
             ); 
             -- Calculate Average rating 
             INSERT INTO @Tlb_CustomerAverageRatings(PublishProductId,Rating,TotalReviews)
             SELECT CCR.PublishProductId,SUM(CAST(CCR.Rating AS NUMERIC(28,6)) )/ COUNT(CCR.PublishProductId),COUNT(CCR.PublishProductId) 
			 FROM ZnodeCMSCustomerReview AS CCR
             INNER JOIN #Tlb_ProductData AS PD ON CCR.PublishProductId = PD.PublishProductId AND CCR.Status = 'A' 
			 AND  (CCR.PortalId  = @PortalId OR @PortalId = 0 )
			 GROUP BY CCR.PublishProductId    ;

             UPDATE PD SET PD.Rating = CAR.Rating,PD.TotalReviews = CAR.TotalReviews 
			 FROM @Tlb_CustomerAverageRatings CAR
             INNER JOIN #Tlb_ProductData PD ON CAR.PublishProductId = PD.PublishProductId;

             UPDATE PD SET PD.SEOTitle = ZCSDL.SEOTitle,PD.SEODescription = ZCSDL.SEODescription,PD.SEOKeywords = ZCSDL.SEOKeywords,PD.SEOUrl = ZCSO.SEOUrl,
			               PD.CanonicalURL = ZCSDL.CanonicalURL, PD.RobotTag = ZCSDL.RobotTag
			 FROM #Tlb_ProductData PD
             INNER JOIN ZnodeCMSSEODetail ZCSO ON PD.SKU = ZCSO.SEOCode
             LEFT JOIN ZnodeCMSSEODetailLocale ZCSDL ON(ZCSDL.CMSSEODetailId = ZCSO.CMSSEODetailId AND ZCSDL.LocaleId = @LocaleId)
             INNER JOIN ZnodeCMSSEOType ZCOT ON ZCOT.CMSSEOTypeId = ZCSO.CMSSEOTypeId AND ZCOT.Name = 'Product'
			 WHERE ZCSO.PortalId = @PortalId
             
			 --UPDATE PD SET PD.SEOTitle = ZCSDL.SEOTitle,PD.SEODescription = ZCSDL.SEODescription,PD.SEOKeywords = ZCSDL.SEOKeywords,PD.SEOUrl = ZCSO.SEOUrl 
			 --FROM #Tlb_ProductData PD
    --         INNER JOIN ZnodeCMSSEODetail ZCSO ON PD.SKU = ZCSO.SEOCode
    --         LEFT JOIN ZnodeCMSSEODetailLocale ZCSDL ON(ZCSDL.CMSSEODetailId = ZCSO.CMSSEODetailId AND ZCSDL.LocaleId = @LocaleId)
    --         INNER JOIN ZnodeCMSSEOType ZCOT ON ZCOT.CMSSEOTypeId = ZCSO.CMSSEOTypeId AND ZCOT.Name = 'Product'
			 --WHERE ZCSO.PortalId = @PortalId

             UPDATE PD SET PD.SEOTitle = ZCPS.ProductTitle,PD.SEODescription = ZCPS.ProductDescription,PD.SEOKeywords = ZCPS.ProductKeyword FROM #Tlb_ProductData PD
             INNER JOIN ZnodeCMSPortalSEOSetting ZCPS ON ZCPS.PortalId = @PortalId WHERE PD.SEOTitle IS NULL AND PD.SEODescription IS NULL AND PD.SEOKeywords IS NULL AND PD.SEOUrl IS NULL
			  --AND ZCSO.PortalId = @PortalId

			 
			 -- ;With Cte_Catalogdaata AS 
			 --(
			   SELECT  a.PublishCatalogId ,Max(PublishCatalogLogId) PublishCatalogLogId
			   into #Cte_Catalogdaata
			   FROM ZnodePortalCatalog a 
			   INNER JOIN ZnodePublishCatalogLog b ON (b.PublishCatalogId = a.PublishCatalogId )
			   WHERE a.PortalId = @PortalId
			   GROUP BY a.PublishCatalogId 
	 
			 --)
			 SELECT Row_Number()Over( PARTITION BY  BTY.SKU ORDER BY ZPAP.DisplayOrder, ZPAP.PublishAssociatedProductId) RowId ,
					BTY.SKU ParentSKU, BTY1.SKU --, UI.Quantity, UI.ReOrderLevel ,UI.WarehouseId
			 INTO #TempPublishData
			 FROM ZnodePublishProduct CTR 
			 INNER JOIN ZnodePublishProductDetail BTY ON (BTY.PublishProductId = CTR.PublishProductId)
			 INNER JOIN ZnodePublishAssociatedProduct ZPAP ON (ZPAP.ParentPimProductId = CTR.PimProductId)	
			 INNER JOIN ZnodePublishProduct CTR1 ON (ZPAP.PimProductId = CTR1.PimProductId)
			 INNER JOIN ZnodePublishProductDetail BTY1 ON (BTY1.PublishProductId = CTR1.PublishProductId)
			 --LEFT JOIN ZnodeInventory UI ON (UI.SKU = BTY1.SKU)
			 WHERE ZPAP.IsConfigurable = 1  
			 AND EXISTS (SELECT TOP 1 1 FROM #Cte_Catalogdaata TY WHERE TY.PublishCatalogId = CTR.PublishCatalogId )-- AND TY.PublishCatalogLogId =ZPXML.PublishCatalogLogId)
			 AND EXISTS (SELECT TOP 1 1 FROM #Tlb_ProductData TU WHERE TU.SKU = BTY.SKU)
			 AND BTY.LocaleId = @Fn_GetDefaultLocaleId
			 AND BTY1.LocaleId = @Fn_GetDefaultLocaleId

			 alter table #TempPublishData add Quantity numeric(28,6), ReOrderLevel numeric(28,6), WarehouseId int

			 update TPD set Quantity = UI.Quantity ,  ReOrderLevel = UI.ReOrderLevel , WarehouseId = UI.WarehouseId
			 from #TempPublishData TPD
			 inner join ZnodeInventory UI ON (UI.SKU = TPD.SKU)

			DELETE FROM #TempPublishData WHERE RowId <> 1
			IF @IsAllLocation=1
			BEGIN 
				SELECT A.PublishProductId,a.SKU,a.SEOTitle,a.SEODescription,a.SEOKeywords,a.SEOUrl,a.Rating,a.TotalReviews ,  
				a.RetailPrice,a.SalesPrice,a.TierPrice, a.TierQuantity,a.CurrencyCode,a.CurrencySuffix,a.ExternalId, 
				CASE WHEN TYI.ParentSKU IS NULL AND ZPCPA.PimProductId IS NULL THEN  b.Quantity ELSE ISNULL(TYI.Quantity,0) END as Quantity , 
				CASE WHEN TYI.ParentSKU IS NULL THEN  b.ReOrderLevel ELSE TYI.ReOrderLevel END ReOrderLevel, a.CanonicalURL, a.RobotTag,
				INV.Quantity AllLocationQuantity,
				b.WarehouseCode,b.WarehouseName,ISNULL(b.IsDefaultWarehouse,0) AS IsDefaultWarehouse, INV.DefaultInventoryCount
				FROM #Tlb_ProductData a
				LEFT JOIN #TempPublishData TYI ON (TYI.ParentSKU = a.SKU AND  TYI.WarehouseId  IN (SELECT  WarehouseId FROM ZnodePortalWarehouse WHERE PortalId = @PortalId))
				LEFT JOIN  #Tbl_WarehouseWiseInventory   b ON b.SKU  = a.SKU   
				LEFT JOIN ZnodePublishProduct ZPP on a.PublishProductId = ZPP.PublishProductId 
				LEFT join ZnodePimConfigureProductAttribute ZPCPA on ZPP.PimProductId = ZPCPA.PimProductId
				LEFT JOIN #Tbl_Inventory INV ON b.SKU = INV.SKU
			END
			ELSE 
			Begin 
			declare @wid int;
			SELECT  @wid=WarehouseId FROM ZnodePortalWarehouse WHERE PortalId = @PortalId
			 SELECT A.PublishProductId,a.SKU,a.SEOTitle,a.SEODescription,a.SEOKeywords,a.SEOUrl,a.Rating,a.TotalReviews ,  
					a.RetailPrice,a.SalesPrice,a.TierPrice, a.TierQuantity,a.CurrencyCode,a.CurrencySuffix,a.ExternalId, 
					CASE WHEN TYI.ParentSKU IS NULL AND ZPCPA.PimProductId IS NULL THEN  ISNULL(b.Quantity,0) ELSE ISNULL(TYI.Quantity,0) END as Quantity , 
			 CASE WHEN TYI.ParentSKU IS NULL THEN  b.ReOrderLevel ELSE TYI.ReOrderLevel END ReOrderLevel, a.CanonicalURL, a.RobotTag,
			 INV.Quantity AllLocationQuantity
			 FROM #Tlb_ProductData a
			 LEFT JOIN #TempPublishData TYI ON (TYI.ParentSKU = a.SKU AND  TYI.WarehouseId  IN (SELECT  WarehouseId FROM ZnodePortalWarehouse WHERE PortalId = @PortalId))
			 LEFT JOIN ZnodeInventory b ON (b.SKU  = a.SKU  AND  b.WarehouseId  IN (SELECT  WarehouseId FROM ZnodePortalWarehouse WHERE PortalId = @PortalId)) 
			 LEFT JOIN ZnodePublishProduct ZPP on a.PublishProductId = ZPP.PublishProductId 
			 LEFT join ZnodePimConfigureProductAttribute ZPCPA on ZPP.PimProductId = ZPCPA.PimProductId
			 LEFT JOIN #Tbl_Inventory INV ON b.SKU = INV.SKU
			
			 END
	
		
         END TRY
         BEGIN CATCH
		
              DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), 
			 @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(),
			  @ErrorLine VARCHAR(100)= ERROR_LINE(),
			   @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetProductInfoForWebStore @PortalId='+CAST(@PortalId AS VARCHAR(50))+',@LocaleId='+CAST(@LocaleId AS VARCHAR(50));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetProductInfoForWebStore',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO
IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_GetWarehouseInventoryBySkus')
	DROP PROC Znode_GetWarehouseInventoryBySkus
GO
CREATE  PROCEDURE [dbo].[Znode_GetWarehouseInventoryBySkus]
( @SKUs     NVARCHAR(MAX),
  @PortalId VARCHAR(2000))
AS 
  /* 
    Summary: This procedure is used to get inventory details of sku portal wise 
	         including their warehouse details      		   
    Unit Testing   
     EXEC Znode_GetWarehouseInventoryBySku  @SKUs='ap1234,LI001',@PortalId=1
 
   */ 
	 BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
           
			 Create table #TBL_SKUs (SKU NVARCHAR(MAX));
             Create table #TBL_PortalIds (PortalId INT);
			 

             INSERT INTO #TBL_SKUs 
                    SELECT item
                    FROM dbo.split(@SKUs, ',');

             INSERT INTO #TBL_PortalIds
                    SELECT item
                    FROM dbo.split(@PortalId, ',');

           
			 CREATE TABLE #TLB_SKUSumInventory 
             (SKU          VARCHAR(600),
              Quantity     NUMERIC(28, 6),
              ReOrderLevel NUMERIC(28, 6),
              PortalId     INT,
			  WarehouseCode VARCHAR(100),
			  WarehouseName VARCHAR(100),
			  IsDefaultWarehouse Bit Default 0 );
			 
			 CREATE TABLE #TBL_AllwareHouseToportal 
             (WarehouseId       INT,
              PortalId          INT,
              PortalWarehouseId INT,
			  IsDefaultWarehouse Bit
             );
		
             INSERT INTO #TBL_AllwareHouseToportal
                    SELECT zpw.WarehouseId,zp.PortalId,zpw.PortalWarehouseId,1
                    FROM [dbo].ZnodePortal AS zp
                         INNER JOIN [ZnodePortalWarehouse] AS zpw ON(zpw.PortalId = zp.PortalId)
                    WHERE EXISTS
                    (
                        SELECT TOP 1 1
                        FROM #TBL_PortalIds AS tp
                        WHERE tp.PortalId = zp.PortalId
                    );
             INSERT INTO #TBL_AllwareHouseToportal
                    SELECT zpaw.WarehouseId,a.PortalId,zpaw.PortalWarehouseId,0
                    FROM [dbo].[ZnodePortalAlternateWarehouse] AS zpaw
                         INNER JOIN #TBL_AllwareHouseToportal AS a ON(zpaw.PortalWarehouseId = a.PortalWarehouseId);

			
             SELECT TY.SKU,isnull(zi.Quantity,0) Quantity,zi.ReOrderLevel,zpw.PortalId,ZW.WarehouseCode,ZW.WarehouseName,ZPW.IsDefaultWarehouse
             FROM #TBL_AllwareHouseToportal AS zpw
			 CROSS APPLY #TBL_SKUs  TY 
             LEFT JOIN [dbo].[ZnodeInventory] AS ZI ON (  ISNULL(Zi.WarehouseId,-1) = CASE WHEN ISNULL(Zi.WarehouseId,-1) = -1 THEN -1 ELSE  zpw.WarehouseId END ) AND   (ZI.SKU=TY.SKU  )--(SELECT ''+ZI.SKU FOR XML PATH ('')) = TY.SKU )
			 Inner join ZnodeWarehouse ZW on zpw.WarehouseId = ZW.WarehouseId
           
         END TRY
         BEGIN CATCH
            DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetInventoryBySkus @SKUs = '+@SKUs+',@PortalId='+@PortalId+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		    
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetInventoryBySkus',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO
if not exists(select * from information_schema.columns where table_name = 'ZnodePimProductTypeAssociation' and column_name = 'IsDefault')
begin
	alter table ZnodePimProductTypeAssociation add [IsDefault]                   BIT NULL
end
go
if not exists(select * from information_schema.columns where table_name = 'ZnodePublishAssociatedProduct' and column_name = 'IsDefault')
begin
	alter table ZnodePublishAssociatedProduct add [IsDefault]                   BIT NULL
end
go

if not exists(select * from information_schema.columns where table_name = 'ZnodePublishAssociatedProductLog' and column_name = 'IsDefault')
begin
	alter table ZnodePublishAssociatedProductLog add [IsDefault]                   BIT NULL
end
go
if not exists(select * from information_schema.columns where table_name = 'ZnodePublishConfigurableProductEntity' and column_name = 'IsDefault')
begin
	alter table ZnodePublishConfigurableProductEntity add [IsDefault]                   BIT NULL
end
go
update znodeapplicationsetting set Setting = '<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>PimProductTypeAssociationId</name>      <headertext>Checkbox</headertext>      <width>20</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>PimProductTypeAssociationId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>RelatedProductId</name>      <headertext>RelatedProductId</headertext>      <width>20</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>PimProductTypeAssociationId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>ProductId</name>      <headertext>ID</headertext>      <width>30</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>productId</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>Image</name>      <headertext>Image</headertext>      <width>20</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>ImagePath,ProductName</imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>imageicon</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>ProductName</name>      <headertext>Product Name</headertext>      <width>60</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>ProductType</name>      <headertext>Product Type</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>SKU</name>      <headertext>SKU</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>SKU</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>8</id>      <name>AvailableInventory</name>      <headertext>Available Inventory</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>SKU</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>9</id>      <name>Assortment</name>      <headertext>Assortment</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>10</id>      <name>DisplayOrder</name>      <headertext>Display Order</headertext>      <width>10</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>3</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>Text</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>11</id>      <name>IsDefault</name>      <headertext>Is Default</headertext>      <width>40</width>      <datatype>Boolean</datatype>      <columntype>Boolean</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>DropDown</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>isDefaultVariant</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>12</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>Delete</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Delete</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/PIM/Pr/PIM/Products/UnassociateProducts</manageactionurl>      <manageparamfield>PimProductTypeAssocPimProductTypeAssociationId,ProductId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>'
where itemname = 'View_ManageProductTypeList'
go

INSERT ZnodeImportTemplateMapping(ImportTemplateId,SourceColumnName,TargetColumnName,DisplayOrder,IsActive,IsAllowNull,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT (select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'ProductAssociation'),
'IsDefault' SourceColumnName,'IsDefault' TargetColumnName,0 DisplayOrder,0 IsActive, 0 IsAllowNull,2 CreatedBy,GETDATE() CreatedDate,2 ModifiedBy,GETDATE() ModifiedDate
WHERE NOT EXISTS(SELECT * FROM ZnodeImportTemplateMapping WHERE ImportTemplateId=(select Top 1 ImportTemplateId from ZnodeImportTemplate where TemplateName = 'ProductAssociation') 
	AND SourceColumnName ='IsDefault')

insert into ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName
,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
select 'Text','IsDefault',(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'ProductAssociation'),0,'Text','RegularExpression',
null,'','',null,2,getdate(),2,getdate(),null
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName ='Text' and AttributeCode = 'IsDefault' 
      and ControlName = 'Text' and ImportHeadId=(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'ProductAssociation')
	  and ValidationName = 'RegularExpression')
go

if exists(select * from information_schema.columns where table_name = 'ZnodePimProductTypeAssociation' and column_name = 'IsDefault')
begin
	update ZnodePimProductTypeAssociation set IsDefault = 0 where IsDefault is null
end
go
if exists(select * from information_schema.columns where table_name = 'ZnodePublishAssociatedProduct' and column_name = 'IsDefault')
begin
	update ZnodePublishAssociatedProduct set IsDefault = 0 where IsDefault is null
end
go
if exists(select * from information_schema.columns where table_name = 'ZnodePublishAssociatedProductLog' and column_name = 'IsDefault')
begin
	update ZnodePublishAssociatedProductLog set IsDefault = 0 where IsDefault is null
end
go
if exists(select * from information_schema.columns where table_name = 'ZnodePublishConfigurableProductEntity' and column_name = 'IsDefault')
begin
	update ZnodePublishConfigurableProductEntity set IsDefault = 0 where IsDefault is null
end
go

if exists(select * from information_schema.columns where table_name = 'ZnodePimProductTypeAssociation' and column_name = 'IsDefault')
  and not exists(select * from sys.default_constraints where name = 'DF_ZnodePimProductTypeAssociation_IsDefault')
begin
	alter table ZnodePimProductTypeAssociation add CONSTRAINT [DF_ZnodePimProductTypeAssociation_IsDefault] DEFAULT ((0)) For IsDefault
end
go


if exists(select * from information_schema.columns where table_name = 'ZnodePublishAssociatedProduct' and column_name = 'IsDefault')
  and not exists(select * from sys.default_constraints where name = 'DF_ZnodePublishAssociatedProduct_IsDefault')
begin
	alter table ZnodePublishAssociatedProduct add CONSTRAINT [DF_ZnodePublishAssociatedProduct_IsDefault] DEFAULT ((0)) For IsDefault
end
go

if exists(select * from information_schema.columns where table_name = 'ZnodePublishAssociatedProductLog' and column_name = 'IsDefault')
  and not exists(select * from sys.default_constraints where name = 'DF_ZnodePublishAssociatedProductLog_IsDefault')
begin
	alter table ZnodePublishAssociatedProductLog add CONSTRAINT [DF_ZnodePublishAssociatedProductLog_IsDefault] DEFAULT ((0)) For IsDefault
end
go
if exists(select * from information_schema.columns where table_name = 'ZnodePublishConfigurableProductEntity' and column_name = 'IsDefault')
  and not exists(select * from sys.default_constraints where name = 'DF_ZnodePublishConfigurableProductEntity_IsDefault')
begin
	alter table ZnodePublishConfigurableProductEntity add CONSTRAINT [DF_ZnodePublishConfigurableProductEntity_IsDefault] DEFAULT ((0)) For IsDefault
end
go

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_GetPublishAssociatedProductsJson')
	DROP PROC Znode_GetPublishAssociatedProductsJson
GO
CREATE PROCEDURE [dbo].[Znode_GetPublishAssociatedProductsJson]
(   
	@PublishCatalogId VARCHAR(MAX) = '',
    @PimProductId     TransferId Readonly,
    @ProductType      VARCHAR(300) = 'BundleProduct',
    @VersionId        INT          = 0,
    @UserId           INT,
	@PimCategoryHierarchyId int = 0,
	@PublishStateId INT = 0  ,
	@VersionIdString  VARCHAR(100)= '',
	@Status  BIT  Output,
	@RevisionType Varchar(50) = ''
)
AS
  /*
    Summary : If PimcatalogId is provided then get all  Bundles / Group / Configurable product and  provide above mentioned data
              If PimProductId is provided then get all Bundles / Group / Configurable if associated with given product id and provide above mentioned data
    		 Input: @PublishCatalogId or @PimProductId
    		 Output should be in XML format
             Required o/p
    			<BundleProductEntity>
    			<ZnodeProductId></ZnodeProductId>
    			<ZnodeCatalogId></ZnodeCatalogId>
    			<AsscociadedZnodeProductIds></AsscociadedZnodeProductIds>
    			</BundleProductEntity>
    Unit Testing 
    BundleProduct
	DECLARE 
    EXEC [dbo].[Znode_GetPublishAssociatedProducts] @PublishCatalogId = 1  , @ProductType = 'BundleProduct' ,@userId = 2 
    EXEC [dbo].[Znode_GetPublishAssociatedProducts] @PublishCatalogId =2 , @ProductType = 'ConfigurableProduct',@userId = 2 ,@PimCategoryHierarchyId = 7 
    Group Product
    EXEC [dbo].[Znode_GetPublishAssociatedProducts]  @PublishCatalogId ='2',@PimProductIdh =''  , @PimProducttType = 'GroupedProduct'
    EXEC [dbo].[Znode_GetPublishAssociatedProducts]  @PublishCatalogId ='',@PimProductId ='200066'  , @PimProducttType = 'GroupedProduct'
    EXEC [dbo].[Znode_GetPublishAssociatedProducts] @PimProductId ='200066'  , @PimProducttType = 'GroupedProduct'
   */
     BEGIN
         BEGIN TRAN GetPublishAssociatedProducts;
         BEGIN TRY
             SET NOCOUNT ON;
		
			 IF OBJECT_ID('tempdb..#VesionIds') is not null
				DROP TABLE #VesionIds
			 Create Table #VesionIds(ZnodeCatalogId int , VersionId int , LocaleId int , RevisionType varchar(50) )

  			 If @VersionIdString <> ''		 
				Insert into #VesionIds (ZnodeCatalogId, VersionId, LocaleId, RevisionType)	
				SELECT PV.ZnodeCatalogId, PV.VersionId, PV.LocaleId, PV.RevisionType FROM ZnodePublishVersionEntity PV Inner join Split(@VersionIdString,',') S ON PV.VersionId = S.Item
			 Else 
				Begin
					If  (@RevisionType like '%Preview%'  OR @RevisionType like '%Production%' )
						Insert into #VesionIds (ZnodeCatalogId, VersionId, LocaleId, RevisionType)	
						SELECT PV.ZnodeCatalogId, PV.VersionId, PV.LocaleId, PV.RevisionType FROM ZnodePublishVersionEntity PV  where PV.IsPublishSuccess =1 
						AND PV.RevisionType ='Preview'

					If  (@RevisionType like '%Production%' OR @RevisionType = 'None')
						Insert into #VesionIds (ZnodeCatalogId, VersionId, LocaleId, RevisionType)	
						SELECT PV.ZnodeCatalogId, PV.VersionId, PV.LocaleId, PV.RevisionType FROM ZnodePublishVersionEntity PV  where PV.IsPublishSuccess =1 
						AND PV.RevisionType ='Production'
				 end 

			IF OBJECT_ID('tempdb..#TBL_PublishCatalogId') is not null
				DROP TABLE #TBL_PublishCatalogId
			
			CREATE TABLE #TBL_PublishCatalogId (PublishCatalogId INT,PublishProductId INT,PimProductId  INT , VersionId INT,LocaleId INT  );
			DECLARE  @PimAttributeId INT = [dbo].[Fn_GetProductTypeAttributeId]()
					,@PimAttributeDefaultValueId INT = (SELECT TOP 1 PimAttributeDefaultValueId FROM ZnodePimAttributeDefaultValue WHERE AttributeDefaultValueCode = @ProductType)
					,@DefaultLocaleId INT = dbo.fn_getDefaultlocaleId() 
			DECLARE @GetDate DATETIME =dbo.Fn_GetDate()
			 
			IF OBJECT_ID('tempdb..#TBL_PublisshIds') is not null
			DROP TABLE #TBL_PublisshIds
			Create TABLE #TBL_PublisshIds (PublishProductId INT , PimProductId INT , PublishCatalogId INT)

			DECLARE  @PimProductId_New TransferId
					 
			 IF  @PublishCatalogId IS NULL  OR @PublishCatalogId = 0 
			 BEGIN 
				INSERT INTO #TBL_PublisshIds 
				Select ZPP.PublishProductId ,ZPP.PimProductId , ZPP.PublishCatalogId from ZnodePublishProduct ZPP Inner join @PimProductId  PPI on ZPP.PimProductId = PPI.ID
			   --EXEC [dbo].[Znode_InsertPublishProductIds] @PublishCatalogId,@userid,@PimProductId,1
			   
			   INSERT INTO @PimProductId_New
			   SELECT DISTINCT PimProductId FROM #TBL_PublisshIds

			  -- SELECT 	@PimProductId	
			 END 
			 
			 IF  ISnull(@PimCategoryHierarchyId,0) <> 0 
			 BEGIN 
			 
			   INSERT INTO #TBL_PublisshIds 
			   EXEC [dbo].[Znode_InsertPublishProductIds] @PublishCatalogId,@userid,@PimProductId,1,@PimCategoryHierarchyId
			   
			   --SET @PimProductId = SUBSTRING((SELECT DISTINCT ','+CAST(PimProductId AS VARCHAr(50)) FROM #TBL_PublisshIds FOR XML PATH ('')),2,8000 )

			   INSERT INTO @PimProductId_New
			   SELECT PimProductId FROM #TBL_PublisshIds

			   
			 END 

			 IF  ISnull(@PimCategoryHierarchyId,0) <> 0 
			 BEGIN 
				 INSERT INTO #TBL_PublishCatalogId 
				 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,ZPP.PimProductId,MAX(ZPCP.PublishCatalogLogId) ,ZPCP.LocaleID  
				 FROM ZnodePublishProduct ZPP 
				 INNER JOIN ZnodePimAttributeValue ZPV ON (ZPV.PimProductId = ZPP.PimProductId )
				 INNER JOIN ZnodePimProductAttributeDefaultValue ZPAVL ON (ZPAVL.PimAttributeValueId = ZPV.PimAttributeValueId)
				 LEFT JOIN  ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
				 WHERE (EXISTS (SELECT TOP 1 1 FROM #TBL_PublisshIds SP WHERE SP.PublishProductId = ZPP.PublishProductId   ) 
				 AND  (ZPP.PublishCatalogId =  @PublishCatalogId ))
				 AND ZPV.PimAttributeId  = @PimAttributeId
				 AND ZPAVL.PimAttributeDefaultValueId= @PimAttributeDefaultValueId
				 AND ZPAVL.LocaleId = @DefaultLocaleId
				 AND ISNULL(ZPCP.LocaleId,0) <> 0 
				 AND ZPCP.PublishStateId= @PublishStateId
				 AND EXISTS(SELECT * FROM ZnodeLocale ZL where ZL.IsActive = 1  and ZPCP.LocaleId = ZL.LocaleId )
				 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,ZPP.PimProductId,ZPCP.LocaleID 
					
			 END
			 ELSE 
			 BEGIN 
			 
				IF NOT EXISTS (SELECT TOP 1 1 FROM @PimProductId ) AND @PublishCatalogId <> 0
				BEGIN
					 INSERT INTO #TBL_PublishCatalogId 
					 SELECT distinct ZPP.PublishCatalogId , ZPP.PublishProductId,ZPP.PimProductId,  ZPCP.VersionId PublishCatalogLogId	,ZPCP.LocaleID 
					 FROM ZnodePublishProduct ZPP 
					 INNER JOIN ZnodePimAttributeValue ZPV ON (ZPV.PimProductId = ZPP.PimProductId )
					 INNER JOIN ZnodePimProductAttributeDefaultValue ZPAVL ON (ZPAVL.PimAttributeValueId = ZPV.PimAttributeValueId)
					 INNER JOIN  #VesionIds  ZPCP ON (ZPCP.ZnodeCatalogId  = ZPP.PublishCatalogId AND ISNULL(ZPCP.LocaleId,0) <> 0 )			 			 
					 WHERE 
					 --(EXISTS (SELECT TOP 1 1 FROM #TBL_PublisshIds SP WHERE SP.PublishProductId = ZPP.PublishProductId  AND  @PublishCatalogId = '' ) 
					 --OR 
					 (ZPP.PublishCatalogId =  @PublishCatalogId )
					 AND ZPV.PimAttributeId  = @PimAttributeId
					 AND ZPAVL.PimAttributeDefaultValueId= @PimAttributeDefaultValueId
					 AND ZPAVL.LocaleId = @DefaultLocaleId
					 AND EXISTS(SELECT * FROM ZnodeLocale ZL where ZL.IsActive = 1  and ZPCP.LocaleId = ZL.LocaleId )
				END
				ELSE
				BEGIN
					 INSERT INTO #TBL_PublishCatalogId 
					 
					 SELECT distinct ZPP.PublishCatalogId , ZPP.PublishProductId,ZPP.PimProductId,  ZPCP.VersionId PublishCatalogLogId	,ZPCP.LocaleID 
					 FROM ZnodePublishProduct ZPP 
					 INNER JOIN ZnodePimAttributeValue ZPV ON (ZPV.PimProductId = ZPP.PimProductId )
					 INNER JOIN ZnodePimProductAttributeDefaultValue ZPAVL ON (ZPAVL.PimAttributeValueId = ZPV.PimAttributeValueId)
					 LEFT JOIN  #VesionIds ZPCP ON (ZPCP.ZnodeCatalogId  = ZPP.PublishCatalogId AND ISNULL(ZPCP.LocaleId,0) <> 0 )			 			 
					 WHERE (EXISTS (SELECT TOP 1 1 FROM #TBL_PublisshIds SP WHERE SP.PublishProductId = ZPP.PublishProductId  AND ZPP.PublishCatalogId = SP.PublishCatalogId) )
					 AND ZPV.PimAttributeId  = @PimAttributeId
					 AND ZPAVL.PimAttributeDefaultValueId= @PimAttributeDefaultValueId
					 AND ZPAVL.LocaleId = @DefaultLocaleId
					 AND EXISTS(SELECT * FROM ZnodeLocale ZL where ZL.IsActive = 1  and ZPCP.LocaleId = ZL.LocaleId )
					 --GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,ZPP.PimProductId,ZPCP.LocaleID,

				END 
				 
			 END
	 		
             DECLARE @TBL_ProductTypeXML TABLE
             (PublishProductId INT,
			  PublishCatalogId INT,
              ReturnXML        XML,
              VersionId        INT
             );
             DECLARE @TBL_PimProductId TABLE
             ([PimProductId]   INT,
              PublishCatalogId INT,
         PublishProductId INT
             );
            
             DECLARE @TBL_PimAssociatedEntity TABLE
             (
			  ZnodeProductId                  INT,
              ZnodeCatalogId                  INT,
              AsscociadedZnodeProductIds  VARCHAR(MAX),
			  ConfigurableProductEntity       NVARCHAR(MAX),
              LocaleId                        INT,
			  DisplayOrder					  INT,
              VersionId                       INT
             );

			 If @ProductType = 'BundleProduct' AND Exists (Select TOP 1 1 from #TBL_PublishCatalogId)
			 Begin
             		IF OBJECT_ID('tempdb..#BundleProductPublishedXML') is not null
						drop table #BundleProductPublishedXML

					IF (isnull(@PublishCatalogId ,'') = '' or isnull(@PublishCatalogId,0) = 0) and @VersionIdString = ''
					Begin 
						DELETE ZnodePublishBundleProductEntity 
						where not exists(select * from ZnodePublishProduct where ZnodePublishBundleProductEntity.ZnodeProductId = ZnodePublishProduct.PublishProductId)
						
						Delete from ZnodePublishBundleProductEntity where Exists ( Select TOP 1 1 from 
						#TBL_PublishCatalogId A where ZnodePublishBundleProductEntity.ZnodeCatalogId =A.PublishCatalogId AND 
						ZnodePublishBundleProductEntity.ZnodeProductId  = A.PublishProductId )
						AND Exists (SELECT TOP 1 1 FRoM #VesionIds 
						Where ZnodePublishBundleProductEntity.VersionId =  #VesionIds.VersionId)
					end 

					insert into ZnodePublishBundleProductEntity 
					(VersionId,ZnodeProductId,ZnodeCatalogId,AssociatedZnodeProductId,AssociatedProductDisplayOrder)
					SELECT TBP.VersionId, TBP.PublishProductId, TBP.PublishCatalogId ,
					TBPU.PublishProductId AssociatedZnodeProductId,ISNULL(ZPTA.DisplayOrder,0)  AssociatedProductDisplayOrder
					FROM #TBL_PublishCatalogId TBP
					INNER JOIN ZnodePimProductTypeAssociation ZPTA ON(ZPTA.PimParentProductId = TBP.PimProductId)
					INNER JOIN ZnodePublishProduct TBPU ON (TBPU.PimProductId = ZPTA.PimProductId AND TBPU.PublishCatalogId = TBP.PublishCatalogId )
			End 
            If @ProductType = 'GroupedProduct' AND Exists (Select TOP 1 1 from #TBL_PublishCatalogId)
			Begin
					IF (isnull(@PublishCatalogId ,'') = '' or isnull(@PublishCatalogId,0) = 0) and @VersionIdString = ''
					Begin 
						DELETE ZnodePublishGroupProductEntity 
						WHERE not exists(select * from ZnodePublishProduct where ZnodePublishGroupProductEntity.ZnodeProductId = ZnodePublishProduct.PublishProductId)
								
						Delete from ZnodePublishGroupProductEntity where Exists ( Select TOP 1 1 from 
						#TBL_PublishCatalogId A where ZnodePublishGroupProductEntity.ZnodeCatalogId =A.PublishCatalogId AND 
						ZnodePublishGroupProductEntity.ZnodeProductId  = A.PublishProductId )
						AND Exists (SELECT TOP 1 1 FRoM #VesionIds 
							Where ZnodePublishGroupProductEntity.VersionId =  #VesionIds.VersionId)
					end 

             		 insert into ZnodePublishGroupProductEntity 
					 (VersionId,ZnodeProductId,ZnodeCatalogId,AssociatedZnodeProductId,AssociatedProductDisplayOrder)
					 SELECT TBP.VersionId, TBP.PublishProductId ,TBP.PublishCatalogId ,TBPU.PublishProductId ,ISNULL(ZPTA.DisplayOrder,0)
					 FROM #TBL_PublishCatalogId TBP
					 INNER JOIN ZnodePimProductTypeAssociation ZPTA ON(ZPTA.PimParentProductId = TBP.PimProductId)
					 INNER JOIN ZnodePublishProduct TBPU ON (TBPU.PimProductId = ZPTA.PimProductId AND TBPU.PublishCatalogId = TBP.PublishCatalogId )
			End 
            If @ProductType = 'ConfigurableProduct' AND Exists (Select TOP 1 1 from #TBL_PublishCatalogId)
			Begin
					If (isnull(@PublishCatalogId ,'') = '' or isnull(@PublishCatalogId,0) = 0) and @VersionIdString = ''
					Begin
						DELETE ZnodePublishConfigurableProductEntity 
						where not exists(select * from ZnodePublishProduct where ZnodePublishConfigurableProductEntity.ZnodeProductId = ZnodePublishProduct.PublishProductId)
				
						Delete from ZnodePublishConfigurableProductEntity where Exists ( Select TOP 1 1 from 
						#TBL_PublishCatalogId A where ZnodePublishConfigurableProductEntity.ZnodeCatalogId =A.PublishCatalogId AND 
						ZnodePublishConfigurableProductEntity.ZnodeProductId  = A.PublishProductId ) 
						AND Exists (SELECT TOP 1 1 FRoM #VesionIds 
							Where ZnodePublishConfigurableProductEntity.VersionId =  #VesionIds.VersionId)
					end 


             		Insert into ZnodePublishConfigurableProductEntity
					(VersionId,ZnodeProductId,ZnodeCatalogId,AssociatedZnodeProductId,AssociatedProductDisplayOrder,
					 SelectValues,ConfigurableAttributeCodes, IsDefault)
				 	SELECT DISTINCT TBP.VersionId, TBP.PublishProductId ,
						TBP.PublishCatalogId ,
						Isnull(TBPU.PublishProductId,0) , 
						ISNULL(ZPTA.DisplayOrder,0) ,'[]',						
						'[' + Isnull(SUBSTRING((SELECT Distinct ','+ +'"'+CAST(ZPA.AttributeCode AS VARCHAR(50)) +'"' 
						FROM ZnodePimConfigureProductAttribute ZPCPA 
						LEFT JOIN ZnodePimAttribute ZPA ON Zpa.PimAttributeId = ZPCPA.PimAttributeId FOR XML PATH ('') ),2,2000),Null) +']'	
						, ZPTA.IsDefault
					FROM #TBL_PublishCatalogId TBP
					INNER JOIN ZnodePimProductTypeAssociation ZPTA ON(ZPTA.PimParentProductId = TBP.PimProductId)
					INNER JOIN ZnodePublishProduct TBPU ON (TBPU.PimProductId = ZPTA.PimProductId AND TBPU.PublishCatalogId = TBP.PublishCatalogId )
						
	

						IF OBJECT_ID('tempdb..#TBL_PublishCatalogId') is not null
							drop table #TBL_PublishCatalogId

						IF OBJECT_ID('tempdb..#ConfigurableProductPublishedXML') is not null
							drop table #ConfigurableProductPublishedXML

				End 
				COMMIT TRAN GetPublishAssociatedProducts;
	 	 SET @Status = 1;
         END TRY
         BEGIN CATCH
		    SELECT ERROR_MESSAGE()
            SET @Status = 0;
			DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPublishAssociatedProducts @PublishCatalogId = '+@PublishCatalogId+',@ProductType= '+@ProductType+',@VersionId='+CAST(@VersionId AS VARCHAR(50))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
			SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
			ROLLBACK TRANSACTION GetPublishAssociatedProducts;
			EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetPublishAssociatedProducts',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;

GO
IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_GetPublishSingleProductJson')
	DROP PROC Znode_GetPublishSingleProductJson
GO
CREATE PROCEDURE [dbo].[Znode_GetPublishSingleProductJson]
(
	 @PublishCatalogId INT = 0 
	,@VersionId       VARCHAR(50) = 0 
	,@PimProductId    TransferId Readonly 
	,@UserId		  INT = 0 
	,@TokenId nvarchar(max)= ''	
	,@LocaleIds TransferId READONLY
	,@PublishStateId INT = 0  
	,@RevisionType varchar(50)
	,@Status bit = 0 OutPut
	
)
AS


--Declare @PimProductId TransferId 
--insert into @PimProductId  select 134
-- EXEC Znode_GetPublishSingleProductJson  @PublishCatalogId = 0 ,@VersionId= 0 ,@PimProductId =@PimProductId, @UserId=2 ,@RevisionType ='Production'


BEGIN 
BEGIN TRY 
 SET NOCOUNT ON 

EXEC Znode_InsertUpdatePimAttributeJson 1 
EXEC Znode_InsertUpdateCustomeFieldJson 1
EXEC Znode_InsertUpdateAttributeDefaultValueJson 1 

Select ZPLPD.PimParentProductId, ZPLPD.PimProductId, ZPLPD.PimAttributeId, ZPAVL.AttributeValue as SKU
into #LinkProduct
FROM ZnodePimLinkProductDetail ZPLPD 
INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId = ZPLPD.PimProductId)
INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId
WHERE exists(select * from ZnodePimAttribute ZPA where ZPA.PimAttributeId = ZPAV.PimAttributeId and ZPA.AttributeCode = 'SKU')
and exists(select * from @PimProductId pp where ZPLPD.PimParentProductId = pp.Id)

 IF OBJECT_ID('tempdb..#Cte_BrandData') is not null
 BEGIN 
	DROP TABLE #Cte_BrandData
 END 
 

 IF OBJECT_ID('tempdb..#ProductIds') is not null
 BEGIN 
	DROP TABLE #ProductIds
 END 

			Create Table #ProductIds (PimProductId int, PublishProductId  int )
			
			--DECLARE @PimProductAttributeJson TABLE(PimAttributeJsonId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )
			CREATE TABLE #PimProductAttributeJson (PimAttributeJsonId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )
			DECLARE @PimDefaultValueLocale  TABLE (PimAttributeDefaultJsonId INT  PRIMARY KEY ,PimAttributeDefaultValueId INT ,LocaleId INT ) 
			DECLARE @ProductNamePimAttributeId INT = dbo.Fn_GetProductNameAttributeId(),@DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId(),@LocaleId INT = 0 
			,@SkuPimAttributeId  INT =  dbo.Fn_GetProductSKUAttributeId() , @IsActivePimAttributeId INT =  dbo.Fn_GetProductIsActiveAttributeId()
			DECLARE @GetDate DATETIME =dbo.Fn_GetDate()
			DECLARE @TBL_LocaleId  TABLE (RowId INT IDENTITY(1,1) PRIMARY KEY  , LocaleId INT )

			DECLARE @DomainUrl varchar(max) = (select TOp 1 URL FROM ZnodeMediaConfiguration WHERE IsActive =1)
 
			INSERT INTO @TBL_LocaleId (LocaleId)
			SELECT  LocaleId
			FROM ZnodeLocale MT
			WHERE IsActive = 1
			AND (EXISTS (SELECT TOP 1 1  FROM @LocaleIds RT WHERE RT.Id = MT.LocaleId )
			OR NOT EXISTS (SELECT TOP 1 1 FROM @LocaleIds )) 

			-----to update link products newly addded and deleted from PIM
			delete ZPAP
			from ZnodePublishAssociatedProduct ZPAP
			where ZPAP.IsLink = 1
			AND not exists(select * from ZnodePimLinkProductDetail ZPPD where ZPAP.ParentPimProductId = ZPPD.PimParentProductId AND ZPAP.PimProductId = ZPPD.PimProductId)
			and exists(select * from @PimProductId PP where PP.Id = ZPAP.ParentPimProductId )

			insert into ZnodePublishAssociatedProduct(PimCatalogId,ParentPimProductId,PimProductId,PublishStateId,IsConfigurable,IsBundle,IsGroup,IsAddOn,IsLink,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			select distinct ZPCH.PimCatalogId, ZPLPD.PimParentProductId, ZPLPD.PimProductId, @PublishStateId, 0, 0, 0, 0, 1, ZPLPD.DisplayOrder, @UserId,@GetDate ,@UserId , @GetDate
			from ZnodePimLinkProductDetail ZPLPD
			INNER JOIN ZnodePimCategoryProduct ZPCP ON ZPLPD.PimParentProductId = ZPCP.PimProductId
			INNER JOIN ZnodePimCategoryHierarchy ZPCH ON ZPCP.PimCategoryId = ZPCH.PimCategoryId
			where exists(select * from @PimProductId PP where PP.Id = ZPLPD.PimParentProductId )
			and not exists(select * from ZnodePublishAssociatedProduct ZPACP where ZPCH.PimCatalogId = ZPACP.PimCatalogId and ZPLPD.PimParentProductId = ZPACP.ParentPimProductId AND ZPLPD.PimProductId = ZPACP.PimProductId  )
			
			-----to update config products newly addded and deleted from PIM
			delete ZPAP
			from ZnodePublishAssociatedProduct ZPAP
			where ZPAP.IsConfigurable = 1
			AND exists(select * from ZnodePimProductTypeAssociation ZPPD where ZPAP.ParentPimProductId = ZPPD.PimParentProductId )
			and exists(select * from @PimProductId PP where PP.Id = ZPAP.ParentPimProductId )

			insert into ZnodePublishAssociatedProduct(PimCatalogId,ParentPimProductId,PimProductId,PublishStateId,IsConfigurable,IsBundle,IsGroup,IsAddOn,IsLink,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate, IsDefault)
			select distinct ZPCH.PimCatalogId, ZPLPD.PimParentProductId, ZPLPD.PimProductId, @PublishStateId, 1, 0, 0, 0, 0, ZPLPD.DisplayOrder, @UserId,@GetDate ,@UserId , @GetDate, ZPLPD.IsDefault
			from ZnodePimProductTypeAssociation ZPLPD
			INNER JOIN ZnodePimCategoryProduct ZPCP ON ZPLPD.PimParentProductId = ZPCP.PimProductId
			INNER JOIN ZnodePimCategoryHierarchy ZPCH ON ZPCP.PimCategoryId = ZPCH.PimCategoryId
			where exists(select * from @PimProductId PP where PP.Id = ZPLPD.PimParentProductId )
			and not exists(select * from ZnodePublishAssociatedProduct ZPACP where ZPCH.PimCatalogId = ZPACP.PimCatalogId and ZPLPD.PimParentProductId = ZPACP.ParentPimProductId AND ZPLPD.PimProductId = ZPACP.PimProductId  )
			-------

			DECLARE @Counter INT =1 ,@maxCountId INT = (SELECT max(RowId) FROM @TBL_LocaleId ) 

			CREATE TABLE #TBL_PublishCatalogId (PublishCatalogId INT,PublishProductId INT,PimProductId  INT   , VersionId INT ,LocaleId INT, PriceListId INT , PortalId INT ,MaxSmallWidth NVARCHAr(max)  )
			CREATE INDEX idx_#TBL_PublishCatalogIdPimProductId on #TBL_PublishCatalogId(PimProductId)
			CREATE INDEX idx_#TBL_PublishCatalogIdPimPublishCatalogId on #TBL_PublishCatalogId(PublishCatalogId)

			INSERT INTO #TBL_PublishCatalogId 
			SELECT Distinct ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId, 0,0 ,
			(SELECT TOP 1 PriceListId FROM ZnodePriceListPortal NT 
			INNER JOIN ZnodePimCatalog ZPC on ZPC.PortalId=NT.PortalId  
			ORDER BY NT.Precedence ASC ) ,TY.PortalId,
			(SELECT TOP 1  MAX(MaxSmallWidth) FROM ZnodePortalDisplaySetting TYR WHERE TYR.PortalId = TY.PortalId)
			FROM ZnodePublishProduct ZPP 
			--INNER JOIN ZnodePublishVersionEntity ZPCP ON (ZPCP.ZnodeCatalogId  = ZPP.PublishCatalogId)
			LEFT JOIN ZnodePortalCatalog TY ON (TY.PublishCatalogId = ZPP.PublishCatalogId)
			WHERE (EXISTS (SELECT TOP 1 1 FROM @PimProductId SP WHERE SP.Id = ZPP.PimProductId  
			AND  (@PublishCatalogId IS NULL OR @PublishCatalogId = 0 ))
			OR  (ZPP.PublishCatalogId = @PublishCatalogId ))
			And Exists 
			(Select TOP 1 1 from ZnodePublishVersionEntity ZPCP  where ZPCP.ZnodeCatalogId  = ZPP.PublishCatalogId AND ZPCP.IsPublishSuccess =1 )

			Insert into #ProductIds (PimProductId,PublishProductId) Select distinct PimProductId,PublishProductId from #TBL_PublishCatalogId  

             Create TABLE #TBL_ZnodeTempPublish (PimProductId INT , AttributeCode VARCHAR(300) ,AttributeValue NVARCHAR(max) ) 			
			 DECLARE @TBL_AttributeVAlueLocale TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT,LocaleId INT ,AttributeValue Nvarchar(1000) )


			 INSERT INTO @TBL_AttributeValueLocale (PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId ,LocaleId ,AttributeValue )
			 SELECT VIR.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId,VIR.LocaleId, ''
			 FROM View_LoadManageProductInternal VIR
			 INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = VIR.PimProductId)
			 UNION ALL 
			 SELECT VIR.PimProductId,PimAttributeId,PimProductAttributeMediaId,ZPDE.LocaleId , ''
			 FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimProductAttributeMedia ZPDE ON (ZPDE.PimAttributeValueId = VIR.PimAttributeValueId )
			 WHERE EXISTS (SELECT TOP 1 1 FROM #ProductIds ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
			 Union All 
			 SELECT VIR.PimProductId,VIR.PimAttributeId,ZPDVL.PimAttributeDefaultValueLocaleId,ZPDVL.LocaleId ,ZPDVL.AttributeDefaultValue
			   FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1 )
			 INNER JOIN ZnodePimAttributeDefaultValue ZPADV ON ZPADV.PimAttributeId = D.PimAttributeId
			 INNER JOIN ZnodePimAttributeDefaultValueLocale ZPDVL   on (ZPADV.PimAttributeDefaultValueId = ZPDVL.PimAttributeDefaultValueId)
			 --INNER JOIN ZnodePimProductAttributeDefaultValue ZPDVP ON (ZPDVP.PimAttributeValueId = VIR.PimAttributeValueId AND ZPADV.PimAttributeDefaultValueId = ZPDVP.PimAttributeDefaultValueId )
			 WHERE ( ZPDVL.LocaleId = @DefaultLocaleId OR ZPDVL.LocaleId = @LocaleId )
			 AND EXISTS(SELECT TOP 1 1 FROM #ProductIds ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
			 Union All 
			 SELECT VIR.PimProductId,VIR.PimAttributeId,'','' ,''
			 FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1 )
			 WHERE  EXISTS(SELECT TOP 1 1 FROM #ProductIds ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
			
				--insert INTO #ZnodePrice
				SELECT RetailPrice,SalesPrice,ZC.CurrencyCode,ZCC.CultureCode ,ZCC.Symbol CurrencySuffix,TYU.PublishProductId ,isnull(ZPC1.IsAllowIndexing,0) as IsAllowIndexing
				into #ZnodePrice
				FROM ZnodePrice ZP 
				INNER JOIN ZnodePriceList ZPL ON (ZPL.PriceListId = ZP.PriceListId)
				INNER JOIN ZnodeCurrency ZC oN (ZC.CurrencyId = ZPL.CurrencyId )
				INNER JOIN ZnodeCulture ZCC ON (ZCC.CultureId = ZPL.CultureId)
				INNER JOIN ZnodePublishProductDetail TY ON (TY.SKU = ZP.SKU ) 
				INNER JOIN ZnodePublishProduct TYU ON (TYU.PublishProductId = TY.PublishProductId)
				INNER JOIN ZnodePublishCatalog ZPC ON (TYU.PublishCatalogId = ZPC.PublishCatalogId)
				INNER JOIN ZnodePimCatalog ZPC1 ON (ZPC.PimCatalogId = ZPC1.PimCatalogId)
				WHERE EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId TYUR WHERE TYUR.PriceListId = ZPL.PriceListId AND TYUR.PublishCatalogId = TYU.PublishCatalogId
				AND TYU.PublishProductId = TYUR.PublishProductId)
				AND TY.LocaleId = dbo.Fn_GetDefaultLocaleId()
				AND EXISTS (SELECT TOP 1 1 FROM ZnodePriceListPortal ZPLP 
				INNER JOIN ZnodePimCatalog ZPC on ZPC.PortalId=ZPLP.PortalId WHERE ZPLP.PriceListId=ZP.PriceListId )
				
				--insert INTO #ProductSKU
				SELECT ZCSD.SEOUrl , ZCDL.SEODescription,ZCDL.SEOKeywords ,ZCDL.SEOTitle, TYU.PublishProductId ,isnull(ZPC1.IsAllowIndexing,0) as IsAllowIndexing
				INTO #ProductSKU
				FROM ZnodeCMSSEODetail ZCSD 
				INNER JOIN ZnodeCMSSEODetailLocale ZCDL ON (ZCDL.CMSSEODetailId = ZCSD.CMSSEODetailId)
				INNER JOIN ZnodePublishProductDetail TY ON (TY.SKU = ZCSD.SEOCode AND ZCDL.LocaleId = TY.LocaleId) 
				INNER JOIN ZnodePublishProduct TYU ON (TYU.PublishProductId = TY.PublishProductId)
				INNER JOIN ZnodePublishCatalog ZPC ON (TYU.PublishCatalogId = ZPC.PublishCatalogId)
				INNER JOIN ZnodePimCatalog ZPC1 ON (ZPC.PimCatalogId = ZPC1.PimCatalogId)
				WHERE CMSSEOTypeId = (SELECT TOP 1 CMSSEOTypeId FROM ZnodeCMSSEOType WHERE Name = 'Product') 
				AND EXISTS (SELECT TOP 1 1  FROM #TBL_PublishCatalogId TYUR WHERE  TYUR.PublishCatalogId = TYU.PublishCatalogId
				AND TYU.PublishProductId = TYUR.PublishProductId)
				AND ZCDL.LocaleId = dbo.Fn_GetDefaultLocaleId()
				and ZCSD.PortalId = isnull(ZPC1.PortalId,0)

				
				--insert INTO #ProductImages
				SELECT  TUI.PublishCatalogId, TYU.PublishProductId , @DomainUrl +'Catalog/'  + CAST(Max(ZPC1.PortalId) AS VARCHAr(100)) + '/'+ CAST(Isnull(Max(TUI.MaxSmallWidth),'') AS VARCHAR(100)) + '/' + Isnull(RT.MediaPath,'') AS ImageSmallPath    
				,isnull(ZPC1.IsAllowIndexing,0) as IsAllowIndexing
				INTO #ProductImages
				FROM ZnodePimAttributeValue ZPAV 
				INNER JOIN ZnodePublishProduct TYU ON (TYU.PimProductId  = ZPAV.PimProductId)
				INNER JOIN ZnodePimProductAttributeMedia  RT ON ( RT.PimAttributeValueId = ZPAV.PimAttributeValueId )
				--AND 
				--EXISTS (SELECT TOP 1 1  FROM #TBL_PublishCatalogId TUI WHERE  TUI.PublishProductId = TYU.PublishProductId AND TUI.PublishCatalogId = TYU.PublishCatalogId)
				INNER JOIN #TBL_PublishCatalogId TUI ON (TUI.PublishProductId = TYU.PublishProductId AND TUI.PublishCatalogId = TYU.PublishCatalogId
						 )--AND  TUI.LocaleId = dbo.Fn_GetDefaultLocaleId()
				INNER JOIN ZnodePublishCatalog ZPC ON (TYU.PublishCatalogId = ZPC.PublishCatalogId)
				INNER JOIN ZnodePimCatalog ZPC1 ON (ZPC.PimCatalogId = ZPC1.PimCatalogId)
				WHERE  RT.LocaleId = dbo.Fn_GetDefaultLocaleId()
				AND ZPAV.PimAttributeId = (SELECT TOp 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'ProductImage')
				group by TUI.PublishCatalogId, TYU.PublishProductId ,isnull(RT.MediaPath,''),isnull(ZPC1.IsAllowIndexing,0) 
		  -- end
		    
WHILE @Counter <= @maxCountId
BEGIN
 SET @LocaleId = (SELECT TOP 1 LocaleId FROM @TBL_LocaleId WHERE RowId = @Counter)
 

  INSERT INTO #PimProductAttributeJson 
  SELECT PimAttributeJsonId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeJSON
  WHERE LocaleId = @LocaleId

  INSERT INTO #PimProductAttributeJson 
  SELECT PimAttributeJsonId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeJSON ZPAX
  WHERE ZPAX.LocaleId = @DefaultLocaleId  
  AND NOT EXISTS (SELECT TOP 1 1 FROM #PimProductAttributeJson ZPAXI WHERE ZPAXI.PimAttributeId = ZPAX.PimAttributeId )

  INSERT INTO @PimDefaultValueLocale
  SELECT PimAttributeDefaultJsonId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultJson
  WHERE localeId = @LocaleId

  INSERT INTO @PimDefaultValueLocale 
   SELECT PimAttributeDefaultJsonId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultJson ZX
  WHERE localeId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM @PimDefaultValueLocale TRTR WHERE TRTR.PimAttributeDefaultValueId = ZX.PimAttributeDefaultValueId)
  
 
  --DECLARE @TBL_AttributeVAlue TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT  )
  --DECLARE @TBL_CustomeFiled TABLE (PimCustomeFieldJsonId INT ,CustomCode VARCHAR(300),PimProductId INT ,LocaleId INT )
  CREATE TABLE #TBL_CustomeFiled  (PimCustomeFieldJsonId INT ,CustomCode VARCHAR(300),PimProductId INT ,LocaleId INT )
  CREATE TABLE #TBL_AttributeVAlue (PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT  )



  INSERT INTO #TBL_CustomeFiled (PimCustomeFieldJsonId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldJsonId,RTR.PimProductId ,RTR.LocaleId,CustomCode
  FROM ZnodePimCustomeFieldJson RTR 
  INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = RTR.PimProductId)
  WHERE RTR.LocaleId = @LocaleId
 

  INSERT INTO #TBL_CustomeFiled (PimCustomeFieldJsonId,PimProductId ,LocaleId,CustomCode)
  SELECT  Distinct  PimCustomeFieldJsonId,ITR.PimProductId ,ITR.LocaleId,CustomCode
  FROM ZnodePimCustomeFieldJson ITR
  INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = ITR.PimProductId)
  WHERE ITR.LocaleId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM #TBL_CustomeFiled TBL  WHERE ITR.CustomCode = TBL.CustomCode AND ITR.PimProductId = TBL.PimProductId)
  

    INSERT INTO #TBL_AttributeVAlue (PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId )
    SELECT Distinct  PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId
	FROM @TBL_AttributeVAlueLocale
    WHERE LocaleId = @LocaleId

    
	INSERT INTO #TBL_AttributeVAlue(PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId )
	SELECT VI.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId
	FROM @TBL_AttributeVAlueLocale VI 
    WHERE VI.LocaleId = @DefaultLocaleId 
	AND NOT EXISTS (SELECT TOP 1 1 FROM #TBL_AttributeVAlue  CTE WHERE CTE.PimProductId = VI.PimProductId AND CTE.PimAttributeId = VI.PimAttributeId )
 
	------------Facet Merging Patch --------------
	IF OBJECT_ID('tempdb..#PimChildProductFacets') is not null
	BEGIN 
		DROP TABLE #PimChildProductFacets
	END 

	IF OBJECT_ID('tempdb..#PimAttributeDefaultXML') is not null
	BEGIN 
		DROP TABLE #PimAttributeDefaultXML
	END
	----Getting parent facets data
	Select  ZPPADV.PimAttributeDefaultValueId, ZPAV_Parent.PimAttributeValueId, ZPPADV.LocaleId
	Into #PimChildProductFacets
	from ZnodePimAttributeValue ZPAV_Parent
	inner join ZnodePimProductAttributeDefaultValue ZPPADV ON ZPAV_Parent.PimAttributeValueId = ZPPADV.PimAttributeValueId 
	where exists(select * from #ProductIds ZPPC where ZPAV_Parent.PimProductId = ZPPC.PimProductId )

	----Getting child facets for merging	
	insert into #PimChildProductFacets	  
	Select distinct ZPPADV.PimAttributeDefaultValueId, ZPAV_Parent.PimAttributeValueId, ZPPADV.LocaleId
	from ZnodePimAttributeValue ZPAV_Parent
	inner join ZnodePimProductTypeAssociation ZPPTA ON ZPAV_Parent.PimProductId = ZPPTA.PimParentProductId
	inner join ZnodePimAttributeValue ZPAV_Child ON ZPPTA.PimProductId = ZPAV_Child.PimProductId AND ZPAV_Parent.PimAttributeId = ZPAV_Child.PimAttributeId
	inner join ZnodePimProductAttributeDefaultValue ZPPADV ON ZPAV_Child.PimAttributeValueId = ZPPADV.PimAttributeValueId 
	where exists(select * from ZnodePimFrontendProperties ZPFP where ZPAV_Parent.PimAttributeId = ZPFP.PimAttributeId and ZPFP.IsFacets = 1)
	and exists(select * from #ProductIds ZPPC where ZPAV_Parent.PimProductId = ZPPC.PimProductId )
	and not exists(select * from ZnodePimProductAttributeDefaultValue ZPPADV1 where ZPAV_Parent.PimAttributeValueId = ZPPADV1.PimAttributeValueId 
		            and ZPPADV1.PimAttributeDefaultValueId = ZPPADV.PimAttributeDefaultValueId )

	----Merging childs facet attribute Default value XML for parent
	select  ZPADX.DefaultValueJson, ZPPADV.PimAttributeValueId, ZPPADV.LocaleId
	into #PimAttributeDefaultXML
	from #PimChildProductFacets ZPPADV		  
	inner join ZnodePimAttributeDefaultJson ZPADX ON ( ZPPADV.PimAttributeDefaultValueId = ZPADX.PimAttributeDefaultValueId )--AND ZPPADV.LocaleId = ZPADX.LocaleId)
	INNER JOIN @PimDefaultValueLocale GH ON (GH.PimAttributeDefaultJsonId = ZPADX.PimAttributeDefaultJsonId)
	------------Facet Merging Patch --------------   

	 IF OBJECT_ID('tempdb..#View_LoadManageProductInternal') is not null
	 BEGIN 
		DROP TABLE #View_LoadManageProductInternal
	 END 

	SELECT a.PimProductId ,b.AttributeValue as AttributeValue , b.LocaleId  ,a.PimAttributeId,c.AttributeCode ,b.ZnodePimAttributeValueLocaleId
	into #View_LoadManageProductInternal
	FROM ZnodePimAttributeValue a 
	INNER JOIN  ZnodePimAttributeValueLocale b ON ( b.PimAttributeValueId = a.PimAttributeValueId )
	INNER JOIN ZnodePimAttribute c ON ( c.PimAttributeId=a.PimAttributeId )
	INNER JOIN ZnodePimAttributeJSON c1   ON (c1.PimAttributeId = a.PimAttributeId )
	INNER JOIN #PimProductAttributeJson b1 ON (b1.PimAttributeJsonId = c1.PimAttributeJsonId )
	INNER JOIN #TBL_AttributeVAlue CTE ON (Cte.PimAttributeId = a.PimAttributeId AND Cte.ZnodePimAttributeValueLocaleId = b.ZnodePimAttributeValueLocaleId)
	UNION ALL
	SELECT a.PimProductId,ZPPATAV.AttributeValue AS AttributeValue  
	,ZPPATAV.LocaleId,a.PimAttributeId,c.AttributeCode  ,ZPPATAV.PimProductAttributeTextAreaValueId
	FROM ZnodePimAttributeValue a 
	INNER JOIN ZnodePimProductAttributeTextAreaValue ZPPATAV ON (ZPPATAV.PimAttributeValueId = a.PimAttributeValueId )
	INNER JOIN ZnodePimAttribute c ON ( c.PimAttributeId=a.PimAttributeId )
	INNER JOIN ZnodePimAttributeJSON c1   ON (c1.PimAttributeId = a.PimAttributeId )
	INNER JOIN #PimProductAttributeJson b1 ON (b1.PimAttributeJsonId = c1.PimAttributeJsonId )
	INNER JOIN #TBL_AttributeVAlue CTE ON (Cte.PimAttributeId = a.PimAttributeId AND Cte.ZnodePimAttributeValueLocaleId = ZPPATAV.PimProductAttributeTextAreaValueId)
	
	INSERT INTO #TBL_ZnodeTempPublish  
		SELECT  a.PimProductId,a.AttributeCode , 
			JSON_MODIFY (JSON_MODIFY (Json_Query( c.AttributeJSON  ) , '$.AttributeValues' ,  
			ISNULL(a.AttributeValue,'') ) ,'$.SelectValues',Json_Query('[]'))
			AS 'AttributeValue'
		FROM #View_LoadManageProductInternal a 
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = a.PimAttributeId )
		INNER JOIN #PimProductAttributeJson b ON (b.PimAttributeJsonId = c.PimAttributeJsonId )
		INNER JOIN #TBL_AttributeVAlue CTE ON (Cte.PimAttributeId = a.PimAttributeId AND Cte.ZnodePimAttributeValueLocaleId = a.ZnodePimAttributeValueLocaleId)
	UNION ALL 
			SELECT  a.PimProductId,c.AttributeCode , 
			JSON_MODIFY (JSON_MODIFY (Json_Query( c.AttributeJSON  ) , '$.AttributeValues' ,  
			ISNULL(TAVL.AttributeValue,'') ) ,'$.SelectValues',Json_Query('[]'))
			AS 'AttributeValue'
		FROM ZnodePimAttributeValue  a 
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = a.PimAttributeId )
		INNER JOIN #PimProductAttributeJson b ON (b.PimAttributeJsonId = c.PimAttributeJsonId )
		INNER JOIN ZnodePImAttribute ZPA  ON (ZPA.PimAttributeId = a.PimAttributeId)
		INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = a.PimProductId)
		Inner JOIN @TBL_AttributeVAlueLocale TAVL ON  (c.PimAttributeId = TAVL.PimAttributeId  and ZPP.PimProductId = TAVL.PimProductId )
		WHERE ZPA.IsPersonalizable = 1 
		AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodePimAttributeValueLocale q WHERE q.PimAttributeValueId = a.PimAttributeValueId) 
	UNION ALL 
		SELECT THB.PimProductId,THB.CustomCode,
		--'<Attributes><AttributeEntity>'+CustomeFiledJson +'</AttributeEntity></Attributes>' 
		JSON_MODIFY (Json_Query( CustomeFiledJson ) ,'$.SelectValues',Json_Query('[]')) 
		FROM ZnodePimCustomeFieldJson THB 
		INNER JOIN #TBL_CustomeFiled TRTE ON (TRTE.PimCustomeFieldJsonId = THB.PimCustomeFieldJsonId)
		UNION ALL 
		SELECT ZPAV.PimProductId,c.AttributeCode,
			JSON_MODIFY (JSON_MODIFY (c.AttributeJson,'$.AttributeValues',''), '$.SelectValues',
			Isnull((SELECT 
			Isnull(JSON_VALUE(DefaultValueJson, '$.Code'),'') Code 
			,Isnull(JSON_VALUE(DefaultValueJson, '$.LocaleId'),0) LocaleId
			,IsNull(JSON_VALUE(DefaultValueJson, '$.Value'),'') Value
			,IsNull(JSON_VALUE(DefaultValueJson, '$.AttributeDefaultValue'),'') AttributeDefaultValue
			,Isnull(JSON_VALUE(DefaultValueJson, '$.DisplayOrder'),0) DisplayOrder
			,Isnull(JSON_VALUE(DefaultValueJson, '$.IsEditable'),'false') IsEditable
			,Isnull(JSON_VALUE(DefaultValueJson, '$.SwatchText'),'') SwatchText
			,Isnull(JSON_VALUE(DefaultValueJson, '$.Path'),'') Path
			FROM #PimAttributeDefaultXML ZPADV
			WHERE (ZPADV.PimAttributeValueId = ZPAV.PimAttributeValueId) For JSON Auto 
			),'[]') 
		)  AttributeValue
		FROM ZnodePimAttributeValue ZPAV  With (NoLock)
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
		INNER JOIN #PimProductAttributeJson b ON (b.PimAttributeJsonId = c.PimAttributeJsonId )
		INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
		WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL 
		WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
	UNION ALL 
		SELECT DISTINCT  ZPAV.PimProductId,c.AttributeCode,
			JSON_MODIFY (JSON_MODIFY (Json_Query( c.AttributeJson  ) , '$.AttributeValues',  
			ISNULL((Select stuff( 
			(SELECT ','+ZPPG.MediaPath 
			FROM ZnodePimProductAttributeMedia ZPPG INNER JOIN  #TBL_AttributeVAlue TBLV ON 
			(	TBLV.PimProductId=  ZPAV.PimProductId AND TBLV.PimAttributeId = ZPAV.PimAttributeId )
			WHERE ZPPG.PimProductAttributeMediaId = TBLV.ZnodePimAttributeValueLocaleId
			FOR XML PATH(''),Type).value('.', 'varchar(max)'), 1, 1, '')),'') ) ,'$.SelectValues',Json_Query('[]'))   
			AS 'AttributeEntity'
		FROM ZnodePimAttributeValue ZPAV 
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
		INNER JOIN #PimProductAttributeJson b ON (b.PimAttributeJsonId = c.PimAttributeJsonId )
		INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
		WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeMedia ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
	UNION ALL 
		SELECT ZPLP.PimParentProductId ,c.AttributeCode, 
			JSON_MODIFY( JSON_Modify(c.AttributeJson , '$.AttributeValues' , 
			ISNULL(SUBSTRING((SELECT ','+cast( LP.SKU as varchar(600)) 
							 FROM #LinkProduct LP
							 WHERE LP.PimParentProductId = ZPLP.PimParentProductId 
							 AND LP.PimAttributeId = ZPLP.PimAttributeId
		FOR XML PATH ('') ),2,4000),'')),'$.SelectValues',Json_Query('[]'))   
	
		FROM ZnodePimLinkProductDetail ZPLP 
		INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPLP.PimParentProductId)
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = ZPLP.PimAttributeId )
		INNER JOIN #PimProductAttributeJson b ON (b.PimAttributeJsonId = c.PimAttributeJsonId )
		GROUP BY ZPLP.PimParentProductId , ZPP.PublishProductId  ,ZPLP.PimAttributeId,c.AttributeCode,c.AttributeJson,ZPP.PublishCatalogId
	UNION ALL 
		SELECT ZPAV.PimProductId,'DefaultSkuForConfigurable' ,
			JSON_MODIFY( JSON_Modify(
			REPLACE(REPLACE (c.AttributeJson,'ProductType','DefaultSkuForConfigurable'),'Product Type','Default Sku For Configurable'),
			'$.AttributeValues' , 
			ISNULL(SUBSTRING((SELECT ','+CAST(AttributeValue AS VARCHAR(50)) 
		FROM View_LoadManageProductInternal  ad 
		INNER JOIN ZnodePimProductTypeAssociation yt ON (yt.PimProductId = ad.PimProductId)
		WHERE Ad.AttributeCode = 'SKU'
		AND yt.PimParentProductId = ZPAV.PimProductId 
		ORDER BY yt.DisplayOrder , yt.PimProductTypeAssociationId ASC FOR XML PATH ('') ),2,4000),'')),'$.SelectValues',Json_Query('[]'))   
		FROM ZnodePimAttributeValue ZPAV  
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
		INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
		WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL 
		INNER JOIN ZnodePimAttributeDefaultValue dr ON (dr.PimAttributeDefaultValueId = ZPADVL.PimAttributeDefaultValueId)
		WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId
		AND dr.AttributeDefaultValueCode= 'ConfigurableProduct' 
		)
		AND EXISTS (select * from #PimProductAttributeJson b where b.PimAttributeJsonId = c.PimAttributeJsonId)
		AND c.AttributeCode = 'ProductType' 

	UNION ALL
		SELECT DISTINCT  UOP.PimProductId,c.AttributeCode,
			JSON_MODIFY (JSON_MODIFY (c.AttributeJson,'$.AttributeValues',''), '$.SelectValues',
			Isnull((SELECT  DISTINCT 
			Isnull(JSON_VALUE(AA.DefaultValueJson, '$.Code'),'') Code 
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.LocaleId'),0) LocaleId
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.Value'),'') Value
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.AttributeDefaultValue'),'') AttributeDefaultValue
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.DisplayOrder'),0) DisplayOrder
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.IsEditable'),'false') IsEditable
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.SwatchText'),'') SwatchText
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.Path'),'') Path 
			,ISNULL(ZPA.DisplayOrder,0)  AS VariantDisplayOrder 
			,ISNULL(ZPAVL_SKU.AttributeValue,'')   AS VariantSKU 
			--,Isnull(ZM.Path,'') 
		,'' AS VariantImagePath 
		FROM ZnodePimAttributeDefaultJson AA 
		INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId )
		INNER JOIN ZnodePimAttributeValue ZPAV1 ON (ZPAV1.PimAttributeValueId= ZPADV.PimAttributeValueId )
		-- check/join for active variants 
		INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId =ZPAV1.PimProductId)
		INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON (ZPAV.PimAttributevalueid = ZPAVL.PimAttributeValueId AND ZPAVL.AttributeValue = 'True')
		INNER JOIN ZnodePimProductTypeAssociation YUP ON (YUP.PimProductId = ZPAV1.PimProductId)
		-- SKU
		INNER JOIN ZnodePimAttributeValue ZPAV_SKU ON(YUP.PimProductId = ZPAV_SKU.PimProductId)
		INNER JOIN ZnodePimAttributeValueLocale ZPAVL_SKU ON (ZPAVL_SKU.PimAttributeValueId = ZPAV_SKU.PimAttributeValueId)
		LEFT JOIN ZnodePimAttribute ZPA ON (ZPA.PimattributeId = ZPAV1.PimAttributeId)
		WHERE (YUP.PimParentProductId  = UOP.PimProductId AND ZPAV1.pimAttributeId = UOP.PimAttributeId )
		-- Active Variants
		AND ZPAV.PimAttributeId = (SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'IsActive')
		-- VariantSKU
		AND ZPAV_SKU.PimAttributeId = (SELECT PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'SKU')
		For JSON Auto 
		),'[]')) 
				
		--</AttributeEntity></Attributes>' 
		FROM ZnodePimConfigureProductAttribute UOP 
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = UOP.PimAttributeId )
		WHERE  exists(select * from #TBL_PublishCatalogId PPCP1 where UOP.PimProductId = PPCP1.PimProductId )
		AND EXISTS (select * from #PimProductAttributeJson b where b.PimAttributeJsonId = c.PimAttributeJsonId)


			-------------configurable attribute 
			---------------------------------------------------------------------
			
			If (@RevisionType like '%Preview%'  OR @RevisionType like '%Production%'  ) 
				Delete from ZnodePublishProductEntity where SKU  in (select SKU from #TBL_PublishCatalogId
				A inner join ZnodePublishProductDetail B on A.PublishProductId   =B.PublishProductId   )
				AND LocaleId = @LocaleId
				AND VersionId in (SELECT VersionId FROM ZnodePublishVersionEntity where RevisionType = 'PREVIEW')
			If (@RevisionType like '%Production%' OR @RevisionType = 'None')
				Delete from ZnodePublishProductEntity where SKU  in (select SKU from #TBL_PublishCatalogId
				A inner join ZnodePublishProductDetail B on A.PublishProductId   =B.PublishProductId   )
				AND LocaleId = @LocaleId
				AND VersionId in (SELECT VersionId FROM ZnodePublishVersionEntity where RevisionType = 'PRODUCTION')

			Insert into ZnodePublishProductEntity (
					VersionId, --1
					IndexId, --2 
					ZnodeProductId,ZnodeCatalogId, --3
					SKU,LocaleId, --4 
					Name,ZnodeCategoryIds, --5
					IsActive, -- 6 
					Attributes, -- 7 
					Brands, -- 9
					CategoryName, --9
					CatalogName,DisplayOrder, --10 
					RevisionType,AssociatedProductDisplayOrder, --11
					ProductIndex,--12
					SalesPrice,RetailPrice,CultureCode,CurrencySuffix,CurrencyCode,SeoDescription,SeoKeywords,SeoTitle,SeoUrl,ImageSmallPath,SKULower --13 
					)
 			SELECT distinct ZPVE.VersionId, --1 
			CAST(ISNULL(ZPCP.ProductIndex,1) AS VARCHAr(100)) + CAST(ISNULL(ZPC.PublishCategoryId,'')  AS VARCHAR(50))  + 
			CAST(Isnull(ZPP.PublishCatalogId ,'')  AS VARCHAR(50)) + CAST( @LocaleId AS VARCHAR(50)) IndexId, --2 
			CAST(ZPP.PublishProductId AS VARCHAR(50)) PublishProductId,CAST(ZPP.PublishCatalogId  AS VARCHAR(50)) PublishCatalogId,  --3 
			CAST(ISNULL(ZPPDFG.SKU ,'') AS NVARCHAR(2000)) SKU,CAST( Isnull(@LocaleId ,'') AS VARCHAR(50)) LocaleId, -- 4 
			CAST(isnull(ZPPDFG.ProductName,'') AS NVARCHAR(2000) )  ProductName ,CAST(ISNULL(ZPCD.PublishCategoryId,'')  AS VARCHAR(50)) PublishCategoryId  -- 5 
			,CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50)) IsActive , --6 
			'[' +
				(Select STUFF((SELECT distinct ','+ AttributeValue from #TBL_ZnodeTempPublish TY WHERE TY.PimProductId = ZPP.PimProductId   
				FOR XML Path ('')) ,1,1,'')  ) 
			+ ']' xmlvalue,  -- 7 
			'[]' Brands  --8 
			,CAST(isnull(PublishCategoryName,'') AS NVARCHAR(2000)) CategoryName  --9
			,CAST(Isnull(CatalogName,'')  AS NVARCHAR(2000)) CatalogName,CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50)) DisplayOrder  -- 10  
			,ZPVE.RevisionType RevisionType , 0 AssociatedProductDisplayOrder,-- pending  -- 11 
			Isnull(ZPCP.ProductIndex,1),  -- 12 

			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(CAST(SalesPrice  AS varchar(500)),'') else '' end SalesPrice , 
			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(CAST(RetailPrice  AS varchar(500)),'') else '' end RetailPrice , 
			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(CultureCode ,'') else '' end CultureCode , 
			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(CurrencySuffix ,'') else '' end CurrencySuffix , 
			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(CurrencyCode ,'') else '' end CurrencyCode , 
			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(SEODescription,'') else '' end SEODescriptionForIndex,
			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(SEOKeywords,'') else '' end SEOKeywords,
			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(SEOTitle,'') else '' end SEOTitle,
			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(SEOUrl ,'') else '' end SEOUrl,
			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(ImageSmallPath,'') else '' end ImageSmallPath,
			CAST(ISNULL(LOWER(ZPPDFG.SKU) ,'') AS NVARCHAR(100)) Lower_SKU -- 13
	FROM  #TBL_PublishCatalogId zpp
	INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
	INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
	INNER JOIN ZnodePublishVersionEntity ZPVE ON (ZPVE.ZnodeCatalogId  = ZPP.PublishCatalogId AND ZPVE.IsPublishSuccess =1 AND ZPVE.LocaleId = @LocaleId )
	LEFT JOIN #ZnodePrice TBZP ON (TBZP.PublishProductId = ZPP.PublishProductId)
	LEFT JOIN #ProductSKU TBPS ON (TBPS.PublishProductId = ZPP.PublishProductId)
	LEFT JOIN #ProductImages TBPI ON (TBPI.PublishProductId = ZPP.PublishProductId  )
	LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
	LEFT JOIN ZnodePublishCategory ZPC ON (ZPC.PublishCatalogId = ZPCP.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId)
	LEFT JOIN ZnodePimCategoryProduct ZPCCF ON (ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId )
	LEFT JOIN ZnodePimCategoryHierarchy ZPCH ON (ZPCH.PimCatalogId = ZPCV.PimCatalogId AND  ZPCH.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId) 
	LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ZPCP.PublishCategoryId AND ZPCD.LocaleId = @LocaleId )
	WHERE ZPPDFG.LocaleId = @LocaleId
		--AND zpp.LocaleId = @LocaleId
	AND 
		(
			(ZPVE.RevisionType =  Case when  (@RevisionType like '%Preview%'  OR @RevisionType like '%Production%' ) then 'Preview' End ) 
			OR 
			(ZPVE.RevisionType =  Case when (@RevisionType like '%Production%' OR @RevisionType = 'None') then  'Production'  end )
		)

	DELETE FROM #TBL_ZnodeTempPublish
	IF OBJECT_ID('tempdb..#PimProductAttributeJson') is not null
	 BEGIN 
		DELETE FROM #PimProductAttributeJson
	 END
	 IF OBJECT_ID('tempdb..#TBL_CustomeFiled') is not null
	 BEGIN 
	 DROP TABLE #TBL_CustomeFiled
	 END
	 IF OBJECT_ID('tempdb..#TBL_AttributeVAlue') is not null
	 BEGIN 
	 DROP TABLE #TBL_AttributeVAlue
	 END
 
	DELETE FROM @PimDefaultValueLocale
SET @Counter = @counter + 1 
END

SET @Status =1 

END TRY 
BEGIN CATCH 
	SET @Status =0  
	 SELECT 1 AS ID,@Status AS Status;   
	 DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
		@ErrorLine VARCHAR(100)= ERROR_LINE(),
		@ErrorCall NVARCHAR(MAX)= 'EXEC [Znode_GetPublishSingleProductJson] 
		@PublishCatalogId = '+CAST(@PublishCatalogId  AS VARCHAR	(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10))
				
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_GetPublishSingleProductJson',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
END CATCH
END
GO
IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportAssociateProducts')
	DROP PROC Znode_ImportAssociateProducts
GO

CREATE PROCEDURE [dbo].[Znode_ImportAssociateProducts](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @PimCatalogId int= 0)
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import Product Association 
	
	-- Unit Testing : 
	--BEGIN TRANSACTION;
	--update ZnodeGlobalSetting set FeatureValues = '5' WHERE FeatureName = 'InventoryRoundOff' 
	--    DECLARE @status INT;
	--    EXEC [Znode_ImportInventory] @InventoryXML = '<ArrayOfImportInventoryModel>
	-- <ImportInventoryModel>
	--   <SKU>S1002</SKU>
	--   <Quantity>999998.33</Quantity>
	--   <ReOrderLevel>10</ReOrderLevel>
	--   <RowNumber>1</RowNumber>
	--   <ListCode>TestInventory</ListCode>
	--   <ListName>TestInventory</ListName>
	-- </ImportInventoryModel>
	--</ArrayOfImportInventoryModel>' , @status = @status OUT , @UserId = 2;
	--    SELECT @status;
	--    ROLLBACK TRANSACTION;
	--------------------------------------------------------------------------------------

BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max);
		DECLARE @GetDate datetime= dbo.Fn_GetDate();

		IF OBJECT_ID('TEMPDB..#InsertProductAssociation') IS NOT NULL 
			DROP TABLE #InsertProductAssociation

		IF OBJECT_ID('TEMPDB..#InsertProduct') IS NOT NULL 
			DROP TABLE #InsertProduct

		IF OBJECT_ID('TEMPDB..#SKU') IS NOT NULL 
			DROP TABLE #SKU
		-- Retrive RoundOff Value from global setting 

		CREATE TABLE #InsertProductAssociation 
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, ParentSKU varchar(300), ChildSKU varchar(200), DisplayOrder int,IsDefault varchar(10), GUID nvarchar(400)
		);
		
		CREATE TABLE #InsertProduct 
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, ParentProductId varchar(300), ChildProductId varchar(200), DisplayOrder int,IsDefault varchar(10), GUID nvarchar(400)
		);


		DECLARE @CategoryAttributId int;

		DECLARE @InventoryListId int;

		SET @SSQL = 'Select RowNumber,ParentSKU,ChildSKU,DisplayOrder,IsDefault,GUID FROM '+@TableName;
		INSERT INTO #InsertProductAssociation( RowNumber, ParentSKU,ChildSKU,DisplayOrder,IsDefault, GUID )
		EXEC sys.sp_sqlexec @SSQL;


		--@MessageDisplay will use to display validate message for input inventory value  
		CREATE TABLE #SKU 
		( 
						   SKU nvarchar(300), PimProductId int
		);
		INSERT INTO #SKU
			   SELECT b.AttributeValue, a.PimProductId
			   FROM ZnodePimAttributeValue AS a
					INNER JOIN
					ZnodePimAttributeValueLocale AS b
					ON a.PimAttributeId = dbo.Fn_GetProductSKUAttributeId() AND 
					   a.PimAttributeValueId = b.PimAttributeValueId;

		DECLARE @ProductType TABLE
		( 
			ProductType nvarchar(100) ,PimProductId int
		);
		INSERT INTO @ProductType
			   SELECT  ZPADV.AttributeDefaultValueCode, a.PimProductId
			   FROM ZnodePimAttributeValue AS a
					INNER JOIN
					ZnodePimProductAttributeDefaultValue AS b
					ON a.PimAttributeId = dbo.Fn_GetProductTypeAttributeId() AND 
					   a.PimAttributeValueId = b.PimAttributeValueId
					   Inner join ZnodePimAttributeDefaultValue ZPADV On b.PimAttributeDefaultValueId = ZPADV.PimAttributeDefaultValueId
					   where  ZPADV.AttributeDefaultValueCode in ('GroupedProduct','BundleProduct','ConfigurableProduct');
		-- start Functional Validation 
		-----------------------------------------------
			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '84', 'IsDefault', IsDefault, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertProductAssociation AS ii
			   WHERE isnull(ii.IsDefault,'') = ''

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '68', 'IsDefault', IsDefault, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertProductAssociation AS ii
			   WHERE isnull(ii.IsDefault,'') not in ('true','1','false','0') and isnull(ii.IsDefault,'') <> ''

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '19', 'ChildSKU', ChildSKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertProductAssociation AS ii
			   WHERE NOT EXISTS( SELECT SKU FROM #SKU SKU WHERE ii.ChildSKU = SKU.SKU)

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '53', 'ParentSKU / ChildSKU', ParentSKU+' / '+ChildSKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertProductAssociation AS ii
			   WHERE ii.ParentSKU IN
			   (
				   select ParentSKU from #InsertProductAssociation
					group by ParentSKU,ChildSKU
					having count(1)>1
			   );

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '49', 'ParentSKU',   ParentSKU , @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertProductAssociation AS ii
			   WHERE not exists
			   (
				   SELECT SKU  FROM #SKU SKU inner join @ProductType  PT ON SKU.PimProductId = PT.PimProductId and ii.ParentSKU = SKU.SKU
	
			   );

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '51', 'ChildSKU',   ChildSKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertProductAssociation AS ii
			   WHERE exists 
			   (
				   SELECT SKU  FROM #SKU SKU inner join @ProductType  PT ON SKU.PimProductId = PT.PimProductId and ii.ChildSKU = SKU.SKU
	
			   );

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '35', 'ParentSKU',  'Configure Attribute Missing: '+ Convert(nvarchar(400),isnull(ParentSKU,'')), @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertProductAssociation AS ii Inner join #SKU PS ON 
			   ii.ParentSKU = PS.SKU 
			   Inner join @ProductType  PT ON PS.PimProductId = PT.PimProductId  AND PT.ProductType  in ('ConfigurableProduct')
			   where  NOT exists 
			   (select PimProductId  from ZnodePimConfigureProductAttribute d where PS.PimProductId = d.PimProductId)
			   -- End Function Validation 	

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			SELECT '17', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			FROM #InsertProductAssociation AS ii
			WHERE (ii.DisplayOrder <> '' OR ii.DisplayOrder IS NOT NULL )AND  ii.DisplayOrder = 0

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			SELECT '64', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			FROM #InsertProductAssociation AS ii
			WHERE (ii.DisplayOrder <> '' OR ii.DisplayOrder IS NOT NULL )AND  ii.DisplayOrder > 999

			   UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ SKU - ' + isnull(ParentSKU,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN #InsertProductAssociation IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL

		-----------------------------------------------
		--- Delete Invalid Data after functional validatin  
		DELETE FROM #InsertProductAssociation
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId AND 
				  GUID = @NewGUID
		);

		insert into #InsertProduct (RowNumber,  ParentProductId , ChildProductId , DisplayOrder, IsDefault)
			SELECT RowNumber , SKUParent.PimProductId SKUParentId , 
				   ( Select TOP 1 SKUChild.PimProductId from #SKU AS SKUChild where  SKUChild.SKU = IPAC.ChildSKU ) SKUChildId,
				    DisplayOrder, IsDefault
					FROM #InsertProductAssociation AS IPAC INNER JOIN #SKU AS SKUParent ON IPAC.ParentSKU = SKUParent.SKU 

	-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM #InsertProduct
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End
	
		UPDATE B set b.ModifiedDate = @GetDate, b.ModifiedBy = @UserId, b.DisplayOrder = case when a.DisplayOrder is not null then a.DisplayOrder else b.DisplayOrder end
				,b.IsDefault = A.IsDefault
		from #InsertProduct A
		INNER JOIN ZnodePimProductTypeAssociation B ON a.ParentProductId = b.PimParentProductId and a.ChildProductId = b.PimProductId

		INSERT INTO ZnodePimProductTypeAssociation (PimParentProductId, PimProductId, DisplayOrder, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, IsDefault) 
		select  ParentProductId , ChildProductId , DisplayOrder, @UserId, @GetDate, @UserId, @GetDate, IsDefault  
		from #InsertProduct 
		where  NOT Exists (Select TOP 1 1 from ZnodePimProductTypeAssociation where PimParentProductId =  #InsertProduct.ParentProductId
		AND PimProductId = #InsertProduct.ChildProductId )

								 
		--select 'End'
		--      SET @Status = 1;
		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;
	END TRY
	BEGIN CATCH

		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN A;
	END CATCH;
END;
GO
IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ManageProductListByAttributes')
	DROP PROC Znode_ManageProductListByAttributes
GO
CREATE PROCEDURE [dbo].[Znode_ManageProductListByAttributes]
(   @WhereClause      XML,
	@PimAttributeIds  VARCHAR(3000) = NULL,
	@Rows             INT           = 100,
	@PageNo           INT           = 0,
	@Order_BY         VARCHAR(1000) = '',
	@LocaleId         INT,
	@PimProductId     VARCHAR(max) = NULL,
	@IsProductNotIn   BIT           = 0,
	@RelatedProductId INT           = 0, 
	@IsDebug		    BIT = 0 
	)
AS
   /*  Summary:-  This Procedure is used for get product List with extra column attribute supllied to the procedure 
     Unit Testing 
     DECLARE @EDE INT = 0 
	 exec Znode_ManageProductListByAttributes @WhereClause='',@PimAttributeIds = '35,81',@Rows = 10,@PageNo=1,@Order_BY = '',@RelatedProductId = 53442,@PimProductId = '',@IsProductNotIn= 0 ,@LocaleId=1 --SELECT @EDE 
	
	*/
     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY
		  --  SELECT '123112'
             DECLARE @SQL NVARCHAR(MAX), @AttributeCode_filter NVARCHAR(2000), @WhereClauseChanges NVARCHAR(MAX)= '',@OutPimProductIds varchar(max) ;
             SET @WhereClauseChanges = CONVERT(NVARCHAR(MAX), @WhereClause);
             DECLARE @PimAttributeFamilyId INT= Dbo.Fn_GetDefaultValue('PimFamily'), @RowsCount INT, @DefaultLocaleId INT= Dbo.Fn_GetDefaultlocaleId();
             DECLARE @TransferPimProductId TransferId 
			 DECLARE @TBL_PimMediaAttributeId TABLE (PimAttributeId INT ,AttributeCode VARCHAR(600))
			 INSERT INTO @TBL_PimMediaAttributeId (PimAttributeId,AttributeCode)
			 SELECT PimAttributeId,AttributeCode FROM Dbo.Fn_GetProductMediaAttributeId ()					 
			
	
			 DECLARE @ProductIdTable TABLE
             (PimProductId INT,
              CountId      INT,
              RowId        INT identity(1,1)
             );
             DECLARE @TBL_PimAttributeId TABLE
             (PimAttributeId INT,
              AttributeCode  VARCHAR(600)
             );
             INSERT INTO @TBL_PimAttributeId
             (PimAttributeId,
              AttributeCode
             )
                    SELECT PimAttributeId,
                           AttributeCode
                    FROM ZnodePimAttribute ZPA
                    WHERE EXISTS
                    (
                        SELECT TOP 1 1
                        FROM dbo.Split(@PimAttributeIds, ',') SP
                        WHERE SP.Item = ZPA.PimAttributeId
                    );
					
             SET @AttributeCode_filter = ISNULL(CAST((
                                                      SELECT CAST('<WhereClauseModel><attributecode>'+ '  = '+''''+TBPA.AttributeCode+''''+'</attributecode></WhereClauseModel>' AS XML )
                                                      FROM @TBL_PimAttributeId TBPA
                                                      FOR XML PATH(''),TYPE
                                                  ) AS NVARCHAR(max)),'');
          
		     SET @WhereClauseChanges = [dbo].[Fn_GetXmlWhereClauseForAttribute](@WhereClauseChanges,@AttributeCode_filter, @LocaleId);
             SET @WhereClause = CONVERT(XML, @WhereClauseChanges);	
	    
		  INSERT INTO @TransferPimProductId
		  SELECT ITEM
		  FROM DBO.SPLIT(@PIMPRODUCTID,',')
		  UNION ALL 
		  SELECT PimProductId 
		  FROM ZnodePimProductTypeAssociation  
		  WHERE PimParentProductId=  @RelatedProductId
		  AND @PIMPRODUCTID = '0'
		
		   DECLARE @AttributeCode NVARCHAR(max)
		   SET @AttributeCode = SUBSTRING ((SELECT ','+AttributeCode FROM [dbo].[Fn_GetProductGridAttributes]() qt WHERE (EXISTS (SELECT TOP 1 1 
				FROM dbo.split(@PimAttributeIds,',') TR WHERE tr.Item = qt.PimAttributeId)  OR AttributeCode = 'ProductType')
		   FOR XML PATH('')  ),2,4000)
	
	SET @IsProductNotIn = CASE WHEN @IsProductNotIn = 1 THEN 0 
	 WHEN @IsProductNotIn = 0 THEN 1  END
     DECLARE  @ProductListIdRTR TransferId
	 DECLARE @TAb Transferid 
	 DECLARE @tBL_mainList TABLE(Id INT , RowId INT )
	
	 INSERT INTO @ProductListIdRTR
	 EXEC Znode_GetProductList @IsProductNotIn ,@TransferPimProductId


	 IF CAST(@WhereClause AS NVARCHAR(max))<> N''
	 BEGIN 
	  
	  SET @SQL = 'SELECT PimProductId FROM ##Temp_PimProductId'+CAST(@@SPID AS VARCHAR(500))
	  --INSERT INTO @TAB 
	  EXEC Znode_GetFilterPimProductId @WhereClause,@ProductListIdRTR,@localeId
	  
      INSERT INTO @TAB 
	  EXEC (@SQL)
	 
	 END 
	 	
	 
	 IF EXISTS (SELECT Top 1 1 FROM @TAb )OR CAST(@WhereClause AS NVARCHAR(max)) <> N''
	 BEGIN 
	
	 SET @AttributeCode = dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC',''))
	 INSERT INTO @TBL_MainList
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @TAb ,@AttributeCode,@localeId
	
	 END 
	 ELSE 
	 BEGIN
	 SET @AttributeCode = dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC',''))
	 INSERT INTO @TBL_MainList
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @ProductListIdRTR ,@AttributeCode,@localeId 
	 END 
	
			 INSERT INTO @ProductIdTable
             (PimProductId) 
			 select id
			 from @TBL_MainList
		
             SET @AttributeCode_filter = SUBSTRING(
                                                  (
                                                      SELECT ','+TBPA.AttributeCode
                                                      FROM @TBL_PimAttributeId TBPA
                                                      FOR XML PATH('')
                                                  ), 1, 4000);
     

			 DECLARE @PimProductIds TransferId

			 INSERT INTO @PimProductIds ( Id )
			 SELECT distinct id FROM @TBL_MainList
														      		
             DECLARE @DefaultAttributeCode VARCHAR(MAX)= dbo.Fn_GetDefaultValue('AttributeCode');
          			
			 INSERT INTO @TBL_PimAttributeId
             (PimAttributeId,
              AttributeCode
             )
                    SELECT PimAttributeId,
                           AttributeCode
                    FROM ZnodePimAttribute ZPA
                    WHERE EXISTS
                    (
                        SELECT TOP 1 1
                        FROM dbo.Split(@DefaultAttributeCode, ',') SP
                        WHERE SP.Item = ZPA.AttributeCode
                    );
			
		

			INSERT INTO @TBL_PimAttributeId
             (PimAttributeId,
              AttributeCode
             )
                    SELECT PimAttributeId,
                           'OR_'+AttributeCode
                    FROM ZnodePimAttribute ZPA
                    WHERE EXISTS
                    (
                        SELECT TOP 1 1
                        FROM dbo.Split(@PimAttributeIds, ',') SP
                        WHERE SP.Item = ZPA.PimAttributeId
                    );
             
	
             SET @DefaultAttributeCode = @DefaultAttributeCode + @AttributeCode_filter;
             Create TABLE #TBL_AttributeDetails 
             (
				  PimProductId                INT ,
				  AttributeValue              NVARCHAR(MAX),
				  AttributeCode               VARCHAR(600),
				  PimAttributeId              INT,
				  PimProductTypeAssociationId INT,
				  DisplayOrder                INT,
				  IsNonEditableRow            BIT DEFAULT 0,
				  IsDefault bit
             );
             DECLARE @TBL_AttributeCode TABLE
             (
				  PimAttributeId INT,
				  AttributeCode  VARCHAR(300)
             );
             INSERT INTO @TBL_AttributeCode
             (
				  PimAttributeId,
				  AttributeCode
             )
                    SELECT PimAttributeId,
                           AttributeCode
                    FROM ZnodePimAttribute ZPA
                    WHERE EXISTS
                    (
                        SELECT TOP 1 1
                        FROM dbo.split(@DefaultAttributeCode, ',') SP
                        WHERE Sp.Item = ZPA.AttributeCode
                    );

             DECLARE @TBL_AttributeDefaultValue TABLE
             (
				PimAttributeId            INT,
				AttributeDefaultValueCode VARCHAR(100),
				IsEditable                BIT,
				AttributeDefaultValue     NVARCHAR(MAX),
				DisplayOrder INT
             );
			  
             DECLARE @PimAttributeId VARCHAR(MAX);
             SET @PimAttributeId = SUBSTRING(
                                            (
                                                SELECT ','+CAST(TBAC.PimAttributeId AS VARCHAR(50))
                                                FROM @TBL_AttributeCode TBAC
                                                     INNER JOIN ZnodePimAttributeDefaultValue ZPADV ON(ZPADV.PimAttributeId = TBAC.PimAttributeId)
                                                FOR XML PATH('')
                                            ), 2, 4000);

													
             INSERT INTO @TBL_AttributeDefaultValue
             (
				PimAttributeId,
				AttributeDefaultValueCode,
				IsEditable,
				AttributeDefaultValue,
				DisplayOrder
             )
             EXEC Znode_GetAttributeDefaultValueLocale
                  @PimAttributeId,
                  @LocaleId;

			
             INSERT INTO #TBL_AttributeDetails
             (
				  PimProductId,
				  AttributeValue,
				  AttributeCode,
				  PimAttributeId
             )
             EXEC Znode_GetProductsAttributeValue
                  @PimProductIds,
                  @DefaultAttributeCode,
                  @localeId;
				
			 INSERT INTO #TBL_AttributeDetails
             (
				  PimProductId,
				  AttributeValue,
				  AttributeCode,
				  PimAttributeId
             )
			SELECT ZPAV.PimProductId ,ZPPAVD.PimAttributeDefaultValueId,'OR_'+ZPA.AttributeCode,ZPA.PimAttributeId
			FROM ZnodePimAttributeValue ZPAV 
			INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ZPAV.PimAttributeId) 
			INNER JOIN @ProductIdTable TBL ON (TBL.PimProductId = ZPAV.PimProductId )
			INNER JOIN ZnodePimProductAttributeDefaultValue ZPPAVD ON (ZPPAVD.PimAttributeValueId = ZPAV.PimAttributeValueId  )
			WHERE ZPPAVD.LocaleId = @DefaultLocaleId
			AND EXISTS (SELECT TOP 1 1 FROM dbo.Split(@PimAttributeIds,',') SP WHERE Sp.Item = ZPA.PimAttributeId )

				
			----------------------------------------------------------------------------------------------
			DECLARE @SKU SelectColumnList
			Create TABLE  #Temp_Inventory (Quantity NVARCHAR(MAX),PimProductId INT)

			INSERT INTO @SKU
			SELECT AttributeValue FROM #TBL_AttributeDetails
			WHERE AttributeCode = 'SKU'
						
			INSERT INTO #Temp_Inventory(Quantity,PimProductId)
			EXEC Znode_GetPimProductAttributeInventory @SKU
						
			---------------------------------------------------------------------------------------------------------

             DECLARE @FamilyDetails TABLE
             (PimProductId         INT,
              PimAttributeFamilyId INT,
              FamilyName           NVARCHAR(3000)
             );

             INSERT INTO @FamilyDetails
             (PimAttributeFamilyId,
              PimProductId
             )
             EXEC [dbo].[Znode_GetPimProductAttributeFamilyId]
                  @PimProductIds,
                  1;
					  
             UPDATE a
               SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
                  INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                       AND LocaleId = @LocaleId);
             UPDATE a
               SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
                  INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                       AND LocaleId = @DefaultLocaleId)
             WHERE a.FamilyName IS NULL
                   OR a.FamilyName = '';
			
             --- Update the  product families name locale wise   

				   
			   SELECT TBA.PimProductId , TBA.PimAttributeId 
			   , SUBSTRING( ( SELECT ','+dbo.Fn_GetMediaThumbnailMediaPath (zm.PATH) 
			   FROM ZnodeMedia AS ZM
              
			   INNER JOIN #TBL_AttributeDetails AS TBAI ON (TBAI.AttributeValue  = CAST(ZM.MediaId AS VARCHAR(50)) )
			   INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBAI.PimATtributeId)
			   WHERE TBAI.PimProductId = TBA.PimProductId AND TBAI.PimAttributeId = TBA.PimAttributeId 
			   FOR XML PATH('') ), 2 , 4000) AS AttributeValue 
			   into #TBL_ProductMedia
			   FROM #TBL_AttributeDetails AS TBA 
			   INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBA.PimATtributeId )
                         
   
		       UPDATE TBAV SET AttributeValue = CTPM.AttributeVALue
			   FROM #TBL_AttributeDetails TBAV 
			   INNER JOIN #TBL_ProductMedia CTPM ON CTPM.PimProductId = TBAV.PimProductId  AND CTPM.PimAttributeId = TBAV.PimAttributeId 
			   AND CTPM.PimAttributeId = TBAV.PimAttributeId;
			  					
		
             UPDATE TBAD
               SET
                   PimProductTypeAssociationId = ZPTA.PimProductTypeAssociationId,
                   DisplayOrder = ZPTA.DisplayOrder, IsDefault = ZPTA.IsDefault
             FROM #TBL_AttributeDetails TBAD
                  INNER JOIN ZnodePimproductTypeAssociation ZPTA ON(ZPTA.PimProductId = TBAD.PimProductId)
             WHERE ZPTA.PimParentProductId = @RelatedProductId;
            
			-- DECLARE @AttributeCode NVARCHAR(4000);
             SET @AttributeCode = SUBSTRING(
                                           (
                                               SELECT DISTINCT
                                                      ','+QUOTENAME(AttributeCode)
                                               FROM @TBL_PimAttributeId
                                               FOR XML PATH('')
                                           ), 2, 4000);
             DECLARE @AttributeCode_Duplicate NVARCHAR(4000)= SUBSTRING(
                                                                       (
                                                                           SELECT 
                                                                                  ', Piv.'+QUOTENAME(AttributeCode)
                                                                           FROM ZnodePimAttribute ZPA
                                                                           WHERE EXISTS
                                                                           (
                                                                               SELECT TOP 1 1
                                                                               FROM dbo.Split(@PimAttributeIds, ',') SP
                                                                               WHERE SP.Item = ZPA.PimAttributeId
                                                                               ORDER BY AttributeCode
                                                                           )
																		   GROUP BY ZPA.AttributeCode,ZPA.DisplayOrder
																		   ORDER BY ZPA.DisplayOrder  DESC
                                                                           FOR XML PATH('')
                                                                       ), 1, 4000);
             DECLARE @AttributeCode_Duplicate_Data NVARCHAR(4000);
			 	 
			

			  SET  @AttributeCode_Duplicate_Data= SUBSTRING(
                                                                       (
                                                                           SELECT 
                                                                                  'AND Piv.'+QUOTENAME('OR_'+AttributeCode) +'= Isa.'+QUOTENAME(AttributeCode)+' '
                                                                           FROM ZnodePimAttribute ZPA
                                                                           WHERE EXISTS
                                                                           (
                                                                               SELECT TOP 1 1
                                                                               FROM dbo.Split(@PimAttributeIds, ',') SP
                                                                               WHERE SP.Item = ZPA.PimAttributeId
                                                                               ORDER BY AttributeCode
                                                                           )
																		   GROUP BY ZPA.AttributeCode,ZPA.DisplayOrder
																		   ORDER BY ZPA.DisplayOrder  DESC
                                                                           FOR XML PATH('')
                                                                       ), 4, 4000) +' '

            -- SET @AttributeCode_Duplicate_Data = REPLACE(SUBSTRING(@AttributeCode_Duplicate, 2, 4000), ',', '+'',''+');
             SELECT PimProductId,
                    AttributeValue,
                    AttributeCode,
                    PimProductTypeAssociationId,
                    DisplayOrder, IsDefault
             INTO #Temp_attribute
             FROM #TBL_AttributeDetails
             ORDER BY DisplayOrder;
             SELECT *
             INTO #temp_Family
             FROM @FamilyDetails;
             
			 DECLARE @IsSelectedAttributeValue TABLE
             (ProductId      INT,
              AttributeValue NVARCHAR(500),
              AttributeCode  NVARCHAR(500),
              PimAttributeId INT,PimAttributeDefaultValueId INT 
             );

			  
		   DECLARE @IsSelectedAttributeValueLocale TABLE
             (PimAttributeId            INT,
              AttributeDefaultValueCode NVARCHAR(600),
              IsEditable                BIT,
              AttributeDefaultValue     NVARCHAR(max),
			  DisplayOrder   INT 
             );
          

		  -- select @PimProductId ,@AttributeCode ,@LocaleId 
		  ;With Cte_AttributeVAkuestest AS 
		  (
		    SELECT ZPAV.PimAttributeId , ZPPAD.PimAttributeDefaultValueId ,ZPAV.PimProductId
			FROM ZnodePimAttributeVAlue ZPAV 
			INNER JOIN ZnodePimProductAttributeDefaultValue ZPPAD ON (ZPPAD.PimAttributeValueId = ZPAV.PimAttributeValueId)
			LEFT JOIN ZnodePimproductTypeAssociation ZPPTA on ZPAV.PimProductId = ZPPTA.PimProductId and ZPPTA.PimParentProductId = @RelatedProductId 
			WHERE EXISTS (SELECT TOP 1 1 FROM dbo.split(@PimAttributeIds,',') SP WHERE SP.Item = ZPAV.PimAttributeId )
			AND EXISTS (SELECT TOP 1 1 FROM dbo.split(@PimProductId,',') SP WHERE SP.Item = ZPAV.PimProductId )-- or @PimProductId = '0')
		) ,Cte_PimAttributeDefaultValueLocale AS 
		(
		  SELECT  AttributeDefaultValue ,PimAttributeId,PimProductId,CTA.PimAttributeDefaultValueId
		  FROM ZnodePimAttributeDefaultValueLocale CTA  
		  INNER JOIN Cte_AttributeVAkuestest CTB ON (CTB.PimAttributeDefaultValueId = CTA.PimAttributeDefaultValueId)		
		  WHERE LocaleId = @DefaultLocaleId 
		  UNION 
		  SELECT  AttributeDefaultValue ,PimAttributeId,PimProductId,CTA.PimAttributeDefaultValueId
		  FROM ZnodePimAttributeDefaultValueLocale CTA 
		  INNER JOIN Cte_AttributeVAkuestest CTB ON (CTB.PimAttributeDefaultValueId = CTA.PimAttributeDefaultValueId)		
		  WHERE LocaleId = @DefaultLocaleId 	
		)
		,Cte_AttributeValueForCode 
		As
		(
		  SELECT AttributeDefaultValue AtributeValue , AttributeCode ,PimProductId ,a.PimAttributeDefaultValueId
		  FROM Cte_PimAttributeDefaultValueLocale a
		  INNER JOIN ZnodePimAttribute b ON (b.PimAttributeId = a.PimAttributeId )
		)
			 INSERT INTO @IsSelectedAttributeValue (ProductId,AttributeCode,AttributeValue,PimAttributeDefaultValueId)
             SELECT PimProductId,AttributeCode,AtributeValue,PimAttributeDefaultValueId
			 FROM Cte_AttributeValueForCode
             
			 --INSERT INTO @IsSelectedAttributeValueLocale
    --         EXEC Znode_GetAttributeDefaultValueLocale
    --              @PimAttributeIds,
    --              @LocaleId;
             
			 --UPDATE izav
    --           SET
    --               izav.AttributeValue = isval.AttributeDefaultValue
    --         FROM @IsSelectedAttributeValue izav
    --              INNER JOIN @IsSelectedAttributeValueLocale isval ON izav.AttributeValue = isval.AttributeDefaultValueCode AND izav.PimAttributeId = isval.PimAttributeId ;
             

			 SELECT * 
			 --SUBSTRING(
    --                         (
    --                             SELECT ','+isav.AttributeValue
    --                             FROM @IsSelectedAttributeValue isav
				--				 INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ISAV.PimAttributeID )
    --                             WHERE isa.ProductId = isav.ProductId
    --                             ORDER BY ZPA.DisplayOrder DESC
    --                             FOR XML PATH('')
    --                         ), 2, 4000) AttributeValue,
							

             INTO #IsSelectedAttribute
             FROM @IsSelectedAttributeValue isa
			; 
				 
			 IF @IsDebug = 1 
			 BEGIN 
			 SELECT * FROM @IsSelectedAttributeValue izav

			 SELECT * FROM #IsSelectedAttribute

			 END 
             --select * from @IsSelectedAttributeValue
             --select @AttributeCode_Duplicate,@AttributeCode_Duplicate_data
             --select * from #IsSelectedAttribute
			 
             SET @AttributeCode = REPLACE(@AttributeCode, ',[DisplayOrder]', '');
             SET @SQL = '
			     
				 ;with Cte_Getvalue AS (
				 SELECT ProductId , '+SUBSTRING(@AttributeCode_Duplicate, 2, 4000)+'
				 FROM ( SELECT ProductId,AttributeCode,PimAttributeDefaultValueId FROM #IsSelectedAttribute gt ) dd 
				 PIVOT ( MAX (PimAttributeDefaultValueId) FOR AttributeCode IN ('+REPLACE(SUBSTRING(@AttributeCode_Duplicate, 2, 4000),'Piv.','')+')  ) PIV 
				 )

				SELECT DISTINCT  piv.PimProductTypeAssociationId, zpp.PimProductid ProductId, [ProductName],ProductType ,ISNULL(zf.FamilyName,'''')  AttributeFamily , [SKU]
						  , CASE WHEN [IsActive] IS NULL THEN ''false'' ELSE   [IsActive]  END  [Status],  piv.[ProductImage] ImagePath,[Assortment],DisplayOrder  ,'+CAST(@LocaleId AS VARCHAR(50))+' LocaleId
						  ,DENSE_RANK()Over(Order By'+SUBSTRING(@AttributeCode_Duplicate, 2, 4000)+') CombinationId '+@AttributeCode_Duplicate+'
					, CASE When isa.ProductId Is Null then 0 ELSE 1 END IsNonEditableRow,'+ CAST(@RelatedProductId AS VARCHAR(50))+' RelatedProductId, IDD.Quantity AvailableInventory, piv.IsDefault
				FROM ZNodePimProduct zpp 
				LEFT JOIN  #temp_Family zf ON (zf.PimProductId = zpp.PimProductId)
				INNER JOIN #Temp_attribute 
				PIVOT 
				(
				Max(AttributeValue) FOR AttributeCode  IN ( '+@AttributeCode+')
				)Piv  
				ON (Piv.PimProductId = zpp.PimProductid) 
				LEFT JOIN #Temp_Inventory IDD ON (IDD.PimProductId = Piv.PimProductId)
				--LEFT JOIN ZnodeMedia zm ON (zm.MediaId = piv.[ProductImage])
				LEFT OUTER JOIN Cte_Getvalue isa ON ('+@AttributeCode_Duplicate_Data+')
				    '+' Order BY '+ISNULL(CASE
                                                  WHEN @Order_BY = ''
                                                  THEN 'DisplayOrder'
                                                  ELSE @Order_BY
                                              END, 'DisplayOrder');
		
	
             -- SELECT '''+SUBSTRINg(REPLACE(@AttributeCode_Duplicate,'Piv.',''),2,4000)+''' Ids
			 
             SELECT AttributeCode
             FROM ZnodePimAttribute ZPA
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM dbo.Split(@PimAttributeIds, ',') SP
                 WHERE SP.Item = ZPA.PimAttributeId
             );
             
			PRINT @SQL
             EXEC SP_executesql
                  @SQL;
        
     IF EXISTS (SELECT Top 1 1 FROM @TAb ) OR CAST(@WhereClause AS NVARCHAR(max)) <> N''
	 BEGIN 

		  SELECT (SELECT COUNT(1) FROM @TAb) AS RowsCount   
	 END 
	 ELSE 
	 BEGIN
	 		  SELECT (SELECT COUNT(1) FROM @ProductListIdRTR) AS RowsCount   
	 END ;

             DROP TABLE #Temp_attribute;
             DROP TABLE #temp_Family;
   
             -- find the all locale values 
         END TRY
         BEGIN CATCH
		  SELECT ERROR_MESSAGE()
                DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ManageProductListByAttributes @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@PimAttributeIds='+@PimAttributeIds+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@LocaleId = '+CAST(@LocaleId AS VARCHAR(50))+',@PimProductId='+@PimProductId+',@IsProductNotIn='+CAST(@IsProductNotIn AS VARCHAR(50))+',@RelatedProductId='+CAST(@RelatedProductId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_ManageProductListByAttributes',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO
IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_PublishAssociatedProduct')
	DROP PROC Znode_PublishAssociatedProduct
GO
CREATE Procedure [dbo].[Znode_PublishAssociatedProduct]	
(
	@Status bit = 0 Out
)
AS
BEGIN
	SET NOCOUNT ON
	BEGIN TRY
	BEGIN TRAN

			delete TARGET from ZnodePublishAssociatedProduct TARGET
			where exists (select * from ZnodePublishAssociatedProductLog SOURCE1 where SOURCE1.PimCatalogId = TARGET.PimCatalogId )
			AND not exists(select * from ZnodePublishAssociatedProductLog SOURCE where (TARGET.PimProductId = SOURCE.PimProductId									   
				AND TARGET.PimCatalogId = SOURCE.PimCatalogId 									   
				AND TARGET.ParentPimProductId = SOURCE.ParentPimProductId						 
				AND TARGET.IsConfigurable = SOURCE.IsConfigurable 
				AND TARGET.IsBundle = SOURCE.IsBundle
				AND TARGET.IsGroup = SOURCE.IsGroup
				AND TARGET.IsAddOn = SOURCE.IsAddOn
				AND TARGET.IsLink = SOURCE.IsLink	
				AND TARGET.PublishStateId = SOURCE.PublishStateId))

			update TARGET 
			SET  TARGET.ModifiedBy = SOURCE.ModifiedBy 
				 ,TARGET.ModifiedDate = GETDATE(),TARGET.IsDefault = SOURCE.IsDefault
			from ZnodePublishAssociatedProduct TARGET
			inner join ZnodePublishAssociatedProductLog SOURCE ON (TARGET.PimProductId = SOURCE.PimProductId									   
			AND TARGET.PimCatalogId = SOURCE.PimCatalogId 									   
			AND TARGET.ParentPimProductId = SOURCE.ParentPimProductId						 
			AND TARGET.IsConfigurable = SOURCE.IsConfigurable 
			AND TARGET.IsBundle = SOURCE.IsBundle
			AND TARGET.IsGroup = SOURCE.IsGroup
			AND TARGET.IsAddOn = SOURCE.IsAddOn
			AND TARGET.IsLink = SOURCE.IsLink	
			AND TARGET.PublishStateId = SOURCE.PublishStateId )

			insert into ZnodePublishAssociatedProduct(ParentPimProductId,PimProductId,IsConfigurable,IsBundle,IsGroup,IsAddOn,IsLink,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
					,PimCatalogId,PublishStateId, DisplayOrder,IsDefault)
			select SOURCE.ParentPimProductId,SOURCE.PimProductId,SOURCE.IsConfigurable,SOURCE.IsBundle,SOURCE.IsGroup,SOURCE.IsAddOn,SOURCE.IsLink
					,SOURCE.CreatedBy ,GETDATE(),SOURCE.ModifiedBy ,GETDATE() ,SOURCE.PimCatalogId,SOURCE.PublishStateId, SOURCE.DisplayOrder, SOURCE.IsDefault
			from ZnodePublishAssociatedProductLog SOURCE
			where not exists(select * from ZnodePublishAssociatedProduct TARGET where (TARGET.PimProductId = SOURCE.PimProductId									   
			AND TARGET.PimCatalogId = SOURCE.PimCatalogId 									   
			AND TARGET.ParentPimProductId = SOURCE.ParentPimProductId						 
			AND TARGET.IsConfigurable = SOURCE.IsConfigurable 
			AND TARGET.IsBundle = SOURCE.IsBundle
			AND TARGET.IsGroup = SOURCE.IsGroup
			AND TARGET.IsAddOn = SOURCE.IsAddOn
			AND TARGET.IsLink = SOURCE.IsLink	
			AND TARGET.PublishStateId = SOURCE.PublishStateId
			AND SOURCE.PimCatalogId = TARGET.PimCatalogId  ))

			set @Status = 1
			select 1 Id,@Status [Status]

	COMMIT TRAN
	END TRY
	BEGIN CATCH
	set @Status = 0
	select 2 Id,@Status [Status]
		ROLLBACK TRAN

	END CATCH
end
GO
IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_PublishLatestAssociatedProduct')
	DROP PROC Znode_PublishLatestAssociatedProduct
GO
CREATE Procedure [dbo].[Znode_PublishLatestAssociatedProduct]	
(
	@PublishCatalogId Int = 0,
	@PimProductId TransferId Readonly,
	@UserId int,
	@PublishStateId INT = 0 
)
as
--[Znode_PublishLatestAssociatedProduct] @PublishCatalogId=3,@UserId=2,@PublishStateId=3
begin	
		DECLARE @ProductTypePimAttributeId INT =  dbo.Fn_GetProductTypeAttributeId()

		truncate table ZnodePublishAssociatedProductLog

		-- Retrive all catalaog, category and their products   
		SELECT ZPCH.PimCatalogId ,ZPCC.PimCategoryId , ZPCH.PimCategoryHierarchyId , ZPCC.PimProductId , d.AttributeDefaultValueCode ProductType
			   ,ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
						FROM ZnodeProfile ZPFC 
						WHERE ZPCH.PimCatalogId = ZPFC.PimCatalogId  FOR XML PATH('')),2,8000),'') ProfileIds	
	    INTO #PimCatalogCategory 
		FROM ZnodePimCategoryProduct ZPCC 
		INNER JOIN ZnodePimCategoryHierarchy ZPCH ON ZPCC.PimCategoryId = ZPCH.PimCategoryId
		INNER JOIN ZnodePimAttributeValue b ON (b.PimProductId = ZPCC.PimProductId )	
		INNER JOIN ZnodePimProductAttributeDefaultValue c ON (c.PimAttributeValueId = b.PimAttributeValueId) 	
		INNER JOIN ZnodePimAttributeDefaultValue d ON (d.PimAttributeDefaultValueId = c.PimAttributeDefaultValueId)
		INNER JOIN ZnodePublishCatalog ZPC ON ZPC.PimCatalogId = ZPCH.PimCatalogId
		WHERE b.PimAttributeId  = @ProductTypePimAttributeId		
		AND  ( exists(select * from @PimProductId P where ZPCC.PimProductId = P.Id) OR ZPC.PublishCatalogId = @PublishCatalogId )
	   
	    -- here find all link products and associate to that catalog 
	    SELECT ZPLPD.PimProductId, CTPP.PimCategoryId, CTPP.PimCatalogId,CTPP.PimCategoryHierarchyId,CTPP.PimProductId ParentPimProductId 
				,0 IsConfigurable,0 IsBundle,0 IsGroup,0 IsAddOn,1 IsLink, 1 IsWithCatalog , ZPLPD.DisplayOrder
		INTO #AssociatedProduct
		FROM ZnodePimLinkProductDetail AS ZPLPD
		INNER JOIN #PimCatalogCategory AS CTPP ON ZPLPD.PimParentProductId = CTPP.PimProductId 
		ORDER BY ZPLPD.DisplayOrder , ZPLPD.PimLinkProductDetailid
		
		alter table #AssociatedProduct add IsDefault bit

		-- IsWithCatalog this flag will manage to find the parent product 
		INSERT INTO #AssociatedProduct
		SELECT ZPAPD.PimChildProductId, ISNULL(CTALP.PimCategoryId,0) PimCategoryId ,CTALP.PimCatalogId,CTALP.PimCategoryHierarchyId,CTALP.PimProductId ParentPimProductId
				,0 IsConfigurable,0 IsBundle,0 IsGroup,1 IsAddOn,0 IsLink, 0 IsWithCatalog , ZPAPD.DisplayOrder, 0 IsDefault
		FROM ZnodePimAddOnProductDetail AS ZPAPD 
		INNER JOIN ZnodePimAddOnProduct AS ZPAP ON ZPAP.PimAddOnProductId = ZPAPD.PimAddOnProductId
		INNER JOIN #PimCatalogCategory AS CTALP ON CTALP.PimProductId = ZPAP.PimProductId 
		ORDER BY ZPAPD.DisplayOrder , ZPAPD.PimAddOnProductDetailId

		-- associated product with there flag 
		INSERT INTO #AssociatedProduct
		SELECT ZPTA.PimProductId,ISNULL(CTAAP.PimCategoryId,0),CTAAP.PimCatalogId,ISNULL(CTAAP.PimCategoryHierarchyId,0) PimCategoryHierarchyId ,CTAAP.PimProductId ParentPimProductId
						,CASE WHEN CTAAP.ProductType = 'ConfigurableProduct' THEN 1 ELSE 0 END , CASE WHEN CTAAP.ProductType = 'BundleProduct' THEN 1 ELSE 0 END
						, CASE WHEN CTAAP.ProductType = 'GroupedProduct' THEN 1 ELSE 0 END,0,0, 0 IsWithCatalog , ZPTA.DisplayOrder, ZPTA.IsDefault		
        FROM ZnodePimProductTypeAssociation AS ZPTA 
		INNER JOIN #PimCatalogCategory AS CTAAP ON CTAAP.PimProductId = ZPTA.PimParentProductId 
		ORDER BY ZPTA.DisplayOrder , ZPTA.PimProductTypeAssociationId

		SELECT  PimProductId,PimCatalogId,ParentPimProductId,IsConfigurable,IsBundle,IsGroup,IsAddOn,IsLink, DisplayOrder, IsDefault  
		Into #AssociatedProduct1
		FROM #AssociatedProduct
		GROUP BY  PimProductId,PimCatalogId,ParentPimProductId,IsConfigurable,IsBundle,IsGroup,IsAddOn,IsLink, DisplayOrder, IsDefault

		--update ZPAPL set   
		--from ZnodePublishAssociatedProductLog ZPAPL 
		--inner join #AssociatedProduct1 AP

		insert into ZnodePublishAssociatedProductLog(ParentPimProductId,PimProductId,IsConfigurable,IsBundle,IsGroup,IsAddOn,IsLink,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
				,PimCatalogId,PublishStateId, DisplayOrder, IsDefault)
		select SOURCE.ParentPimProductId,SOURCE.PimProductId,SOURCE.IsConfigurable,SOURCE.IsBundle,SOURCE.IsGroup,SOURCE.IsAddOn,SOURCE.IsLink
				,@UserId ,GETDATE(),@UserId ,GETDATE() ,SOURCE.PimCatalogId,@PublishStateId, SOURCE.DisplayOrder, IsDefault
		from #AssociatedProduct1 SOURCE
		
end
GO
IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_UpdateDefaultChildProductOfParent')
	DROP PROC Znode_UpdateDefaultChildProductOfParent
GO
CREATE PROCEDURE [dbo].[Znode_UpdateDefaultChildProductOfParent]
(
	@PimParentProductId int,
	@PimProductId int,
	@IsDefault bit = 1,
	@Status bit = 0 out
)
as
--execute Znode_UpdateDefaultChildProductOfParent @PimParentProductId = 89, @PimProductId =1, @IsDefault = 'true'
Begin 
	SET NOCOUNT ON
	BEGIN TRY

		update ZnodePimProductTypeAssociation set IsDefault = 0 
		where IsDefault = 1 and PimParentProductId = @PimParentProductId

		update ZnodePimProductTypeAssociation set IsDefault = @IsDefault 
		where PimParentProductId = @PimParentProductId and PimProductId = @PimProductId
		
		set @Status = 1
		select @PimParentProductId Id, @Status Status
	END TRY
	BEGIN CATCH
		SET @Status = 0;
		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_UpdateDefaultChildProductOfParent @PimParentProductId = '+cast(@PimParentProductId as varchar(10))+',@PimProductId = '+cast(@PimProductId as varchar(10))+',@IsDefault='+CAST(@IsDefault AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
		SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		    
		EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_UpdateDefaultChildProductOfParent',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
	END CATCH;
End
GO
update [dbo].[ZnodeImportAttributeValidation]
set IsRequired =0
where importheadid=(select top 1 importheadid from ZnodeImportHead where Name ='ProductAssociation') and AttributeCode ='DisplayOrder'
go
IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportAssociateProducts')
	DROP PROC Znode_ImportAssociateProducts
GO
CREATE PROCEDURE [dbo].[Znode_ImportAssociateProducts](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @PimCatalogId int= 0)
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import Product Association 
	
	-- Unit Testing : 
	--BEGIN TRANSACTION;
	--update ZnodeGlobalSetting set FeatureValues = '5' WHERE FeatureName = 'InventoryRoundOff' 
	--    DECLARE @status INT;
	--    EXEC [Znode_ImportInventory] @InventoryXML = '<ArrayOfImportInventoryModel>
	-- <ImportInventoryModel>
	--   <SKU>S1002</SKU>
	--   <Quantity>999998.33</Quantity>
	--   <ReOrderLevel>10</ReOrderLevel>
	--   <RowNumber>1</RowNumber>
	--   <ListCode>TestInventory</ListCode>
	--   <ListName>TestInventory</ListName>
	-- </ImportInventoryModel>
	--</ArrayOfImportInventoryModel>' , @status = @status OUT , @UserId = 2;
	--    SELECT @status;
	--    ROLLBACK TRANSACTION;
	--------------------------------------------------------------------------------------

BEGIN
	
	BEGIN TRY
	BEGIN TRAN A;
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max);
		DECLARE @GetDate datetime= dbo.Fn_GetDate();

		IF OBJECT_ID('TEMPDB..#InsertProductAssociation') IS NOT NULL 
			DROP TABLE #InsertProductAssociation

		IF OBJECT_ID('TEMPDB..#InsertProduct') IS NOT NULL 
			DROP TABLE #InsertProduct

		IF OBJECT_ID('TEMPDB..#SKU') IS NOT NULL 
			DROP TABLE #SKU

		IF OBJECT_ID('TEMPDB..#InsertProductAssociation_Parent_type') IS NOT NULL 
			DROP TABLE #InsertProductAssociation_Parent_type
		-- Retrive RoundOff Value from global setting 

		CREATE TABLE #InsertProductAssociation 
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, ParentSKU varchar(300), ChildSKU varchar(200), DisplayOrder int,IsDefault varchar(10), GUID nvarchar(400)
		);

		CREATE TABLE #InsertProductAssociation_Parent_type
		( 
			RowId int  PRIMARY KEY, RowNumber int, ParentSKU varchar(300), ChildSKU varchar(200), DisplayOrder int,IsDefault varchar(10), GUID nvarchar(400)
			,PT_ParentProductId varchar(300), PT_ProductType nvarchar(100)
		);
		
		CREATE TABLE #InsertProduct 
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, ParentProductId varchar(300), ChildProductId varchar(200), DisplayOrder int,IsDefault varchar(10), GUID nvarchar(400), ProductType nvarchar(100)
		);


		DECLARE @CategoryAttributId int;

		DECLARE @InventoryListId int;

		SET @SSQL = 'Select RowNumber,ParentSKU,ChildSKU,DisplayOrder,IsDefault,GUID FROM '+@TableName;
		INSERT INTO #InsertProductAssociation( RowNumber, ParentSKU,ChildSKU,DisplayOrder,IsDefault, GUID )
		EXEC sys.sp_sqlexec @SSQL;


		--@MessageDisplay will use to display validate message for input inventory value  
		CREATE TABLE #SKU 
		( 
						   SKU nvarchar(300), PimProductId int
		);
		INSERT INTO #SKU
			   SELECT b.AttributeValue, a.PimProductId
			   FROM ZnodePimAttributeValue AS a
					INNER JOIN
					ZnodePimAttributeValueLocale AS b
					ON a.PimAttributeId = dbo.Fn_GetProductSKUAttributeId() AND 
					   a.PimAttributeValueId = b.PimAttributeValueId;

		DECLARE @ProductType TABLE
		( 
			ProductType nvarchar(100) ,PimProductId int
		);
		INSERT INTO @ProductType
			   SELECT  ZPADV.AttributeDefaultValueCode, a.PimProductId
			   FROM ZnodePimAttributeValue AS a
					INNER JOIN
					ZnodePimProductAttributeDefaultValue AS b
					ON a.PimAttributeId = dbo.Fn_GetProductTypeAttributeId() AND 
					   a.PimAttributeValueId = b.PimAttributeValueId
					   Inner join ZnodePimAttributeDefaultValue ZPADV On b.PimAttributeDefaultValueId = ZPADV.PimAttributeDefaultValueId
					   where  ZPADV.AttributeDefaultValueCode in ('GroupedProduct','BundleProduct','ConfigurableProduct');

		INSERT INTO #InsertProductAssociation_Parent_type
			SELECT IPAC.*,SKUParent.PimProductId, PT.ProductType
					FROM #InsertProductAssociation AS IPAC INNER JOIN #SKU AS SKUParent ON IPAC.ParentSKU = SKUParent.SKU 
					inner join @ProductType PT on PT.PimProductId = SKUParent.PimProductId


		-- start Functional Validation 
			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '84', 'IsDefault', IsDefault, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertProductAssociation_Parent_type AS ii
			   WHERE isnull(ii.IsDefault,'') = '' and ii.PT_ProductType ='ConfigurableProduct'

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '68', 'IsDefault', IsDefault, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertProductAssociation_Parent_type AS ii
			   WHERE isnull(ii.IsDefault,'') not in ('true','1','false','0') and isnull(ii.IsDefault,'') <> '' and ii.PT_ProductType ='ConfigurableProduct'

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '19', 'ChildSKU', ChildSKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertProductAssociation_Parent_type AS ii
			   WHERE NOT EXISTS( SELECT SKU FROM #SKU SKU WHERE ii.ChildSKU = SKU.SKU)

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '53', 'ParentSKU / ChildSKU', ParentSKU+' / '+ChildSKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertProductAssociation AS ii
			   WHERE ii.ParentSKU IN
			   (
				   select ParentSKU from #InsertProductAssociation_Parent_type
					group by ParentSKU,ChildSKU
					having count(1)>1
			   );

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '49', 'ParentSKU',   ParentSKU , @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertProductAssociation_Parent_type AS ii
			   WHERE not exists
			   (
				   SELECT SKU  FROM #SKU SKU inner join @ProductType  PT ON SKU.PimProductId = PT.PimProductId and ii.ParentSKU = SKU.SKU
	
			   );

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '51', 'ChildSKU',   ChildSKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertProductAssociation_Parent_type AS ii
			   WHERE exists 
			   (
				   SELECT SKU  FROM #SKU SKU inner join @ProductType  PT ON SKU.PimProductId = PT.PimProductId and ii.ChildSKU = SKU.SKU
	
			   );

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '35', 'ParentSKU',  'Configure Attribute Missing: '+ Convert(nvarchar(400),isnull(ParentSKU,'')), @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertProductAssociation_Parent_type AS ii Inner join #SKU PS ON 
			   ii.ParentSKU = PS.SKU 
			   Inner join @ProductType  PT ON PS.PimProductId = PT.PimProductId  AND PT.ProductType  in ('ConfigurableProduct')
			   where  NOT exists 
			   (select PimProductId  from ZnodePimConfigureProductAttribute d where PS.PimProductId = d.PimProductId)
			   -- End Function Validation 	

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			SELECT '17', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			FROM #InsertProductAssociation_Parent_type AS ii
			WHERE ((isnull(ii.DisplayOrder,'') = '' ) and ii.PT_ProductType !='ConfigurableProduct' ) --or  ii.DisplayOrder = 0

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			SELECT '64', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			FROM #InsertProductAssociation_Parent_type AS ii
			WHERE ((isnull(ii.DisplayOrder,'') = '' ) and ii.PT_ProductType !='ConfigurableProduct' ) --or  ii.DisplayOrder > 999

			   UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ SKU - ' + isnull(ParentSKU,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN #InsertProductAssociation_Parent_type IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL

		--- Delete Invalid Data after functional validatin  
		DELETE FROM #InsertProductAssociation_Parent_type
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId AND 
				  GUID = @NewGUID
		);


		insert into #InsertProduct (RowNumber,  ParentProductId , ChildProductId , DisplayOrder, IsDefault, ProductType)
			SELECT RowNumber , SKUParent.PimProductId SKUParentId , 
				   ( Select TOP 1 SKUChild.PimProductId from #SKU AS SKUChild where  SKUChild.SKU = IPAC.ChildSKU ) SKUChildId,
				    case when isnull(DisplayOrder,'')= '' and IPAC.PT_ProductType ='ConfigurableProduct'  then 99 else DisplayOrder end DisplayOrder ,
					 case when (isnull(IsDefault,'')= '' or IsDefault =0 or IsDefault > 999) and IPAC.PT_ProductType !='ConfigurableProduct'  then '0' else IsDefault end IsDefault, IPAC.PT_ProductType
					FROM #InsertProductAssociation_Parent_type AS IPAC INNER JOIN #SKU AS SKUParent ON IPAC.ParentSKU = SKUParent.SKU 

	-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM #InsertProduct
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End

		update #InsertProduct
		set IsDefault =0
		where RowNumber < (select max(RowNumber) from #InsertProduct where IsDefault = '1' or  IsDefault = 'True' and ProductType ='ConfigurableProduct')
		and  ProductType ='ConfigurableProduct';


		update ZnodePimProductTypeAssociation
		set  IsDefault =0
		where  exists (select top 1 1  from #InsertProduct IP where IsDefault = '1' or  IsDefault = 'true' and PimParentProductId = IP.ParentProductId and ProductType ='ConfigurableProduct')
		

		UPDATE B set b.ModifiedDate = @GetDate, b.ModifiedBy = @UserId, b.DisplayOrder = case when a.DisplayOrder is not null then a.DisplayOrder else b.DisplayOrder end
				,b.IsDefault = A.IsDefault
		from #InsertProduct A
		INNER JOIN ZnodePimProductTypeAssociation B ON a.ParentProductId = b.PimParentProductId and a.ChildProductId = b.PimProductId

		INSERT INTO ZnodePimProductTypeAssociation (PimParentProductId, PimProductId, DisplayOrder, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, IsDefault) 
		select  ParentProductId , ChildProductId , DisplayOrder, @UserId, @GetDate, @UserId, @GetDate, IsDefault  
		from #InsertProduct 
		where  NOT Exists (Select TOP 1 1 from ZnodePimProductTypeAssociation where PimParentProductId =  #InsertProduct.ParentProductId
		AND PimProductId = #InsertProduct.ChildProductId )

								 
		--select 'End'
		--      SET @Status = 1;
		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;
	END TRY
	BEGIN CATCH
		ROLLBACK TRAN A;
		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
	
	END CATCH;
END;
GO
IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_GetQuickOrderPublishProduct')
	DROP PROC Znode_GetQuickOrderPublishProduct
GO
CREATE PROCEDURE [dbo].[Znode_GetQuickOrderPublishProduct]
(
	@PublishCatalogId int,
	@LocaleId int,
	@PublishCategoryIds NVARCHAR(MAX),
	@SKUs NVARCHAR(MAX),
	@VersionId int,
	@ProductIndex int,
	@PortalId int 
)
AS
/*
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
 EXEC Znode_GetQuickOrderPublishProduct 
@PublishCatalogId= '3',
@LocaleId= '1',
@PublishCategoryIds = '34,35,36,37,38,39,40,41,42,43,50,79,82,83,84,85,86,87,88,90' ,
@SKUs= 'TestConfig1',
@VersionId= '5942',
@ProductIndex= '1',
@PortalId =1 
*/
BEGIN

SET NOCOUNT ON;
BEGIN TRY
	Declare @Getdate datetime = Getdate()
   -- Insert statements for procedure here
	Create table #TBL_SKUs (SKU NVARCHAR(MAX));
	Create table #TBL_CategoryIds (CategoryId INT);

	INSERT INTO #TBL_SKUs
	SELECT item
	FROM dbo.split(@SKUs, ',');

	INSERT INTO #TBL_CategoryIds
	SELECT item
	FROM dbo.split(@PublishCategoryIds, ',');

	SELECT P.Name,P.SKU,P.ZnodeProductId as Id, Cast('false' as bit) as HasPromotion,P.IsActive as IsActive, P.Attributes  
	into #ProductDetail
	FROM ZnodePublishProductEntity  AS P
	INNER JOIN #TBL_SKUs AS S ON P.SKU=S.SKU
	INNER JOIN #TBL_CategoryIds AS C ON C.CategoryId = P.ZnodeCategoryIds
	WHERE ZnodeCatalogId = @PublishCatalogId and LocaleId = @LocaleId and IsActive = 'true' and ZnodeCategoryIds != 0 and ProductIndex = @ProductIndex and VersionId = @VersionId  

	CREATE TABLE #TempSKUInventory (SKU varchar(600),Quantity numeric(28,6),ReOrderLevel numeric(28,6),PortalId int, WarehouseName varchar(100), WarehouseCode varchar(100), DefaultInventoryCount numeric(28,6))

	CREATE TABLE #TempProductPrice 
	(	
		SKU varchar(600),RetailPrice numeric(28,6),SalesPrice numeric(28,6),TierPrice  numeric(28,6),TierQuantity  numeric(28,6),CurrencyCode varchar(100),
		CurrencySuffix varchar(1000),CultureCode varchar(100),ExternalId varchar(1000),Custom1 varchar(1000),Custom2 varchar(1000),Custom3 varchar(1000)
	)
	----getting products inventory details
	insert into #TempSKUInventory(SKU ,Quantity ,ReOrderLevel ,PortalId, WarehouseName, WarehouseCode, DefaultInventoryCount)
	Execute [Znode_GetInventoryBySkus] @SKUs = @SKUs, @PortalId = @PortalId

	----getting product pricing details
	insert into #TempProductPrice(SKU,RetailPrice,SalesPrice,TierPrice,TierQuantity,CurrencyCode,CurrencySuffix,CultureCode,ExternalId ,Custom1,Custom2 ,Custom3 )
	Execute [Znode_GetPublishProductPricingBySku] @SKU = @SKUs, @PortalId=@PortalId, @currentUtcDate=@Getdate

	----getting publish product associations
	select ZPAVL.AttributeValue as ParentSKU, ZPAP.ParentPimProductId,ZPAP.PimProductId, ZPAVL1.attributeValue as SKU, 
		   IsConfigurable,IsBundle,IsGroup,IsAddOn,IsLink
	into #TempProductassociation
	from ZnodePublishAssociatedProduct ZPAP
	inner join ZnodePimAttributeValue ZPAV ON ZPAV.PimProductId = ZPAP.ParentPimProductId
	inner join ZnodePimAttributeValueLocale ZPAVL ON ZPAV.PimattributeValueId = ZPAVL.PimAttributeValueId
	inner join ZnodePimAttributeValue ZPAV1 ON ZPAV1.PimProductId = ZPAP.PimProductId
	inner join ZnodePimAttributeValueLocale ZPAVL1 ON ZPAV1.PimattributeValueId = ZPAVL1.PimAttributeValueId
	where ZPAV.PimattributeId = (select Top 1 PimattributeId from ZnodePimAttribute ZPA where ZPa.AttributeCode = 'SKU')
	AND ZPAV1.PimattributeId = (select Top 1 PimattributeId from ZnodePimAttribute ZPA where ZPa.AttributeCode = 'SKU') 
	and Exists(select * from #ProductDetail s where s.sku = ZPAVL.AttributeValue )
	
	--getting comma seperated Addon Product
	select TPA.ParentSKU,
		stuff( (SELECT ','+TPA1.SKU FROM #TempProductassociation TPA1 
		WHERE (TPA.ParentPimProductId = TPA1.ParentPimProductId and IsAddOn = 1)
					 FOR XML PATH(''),Type).value('.', 'varchar(max)'), 1, 1, '') as AddOnProductSkus
	into #AddOnProductSkus
	from #TempProductassociation TPA
	where IsAddOn = 1

	--getting comma seperated Configurable Products
	select TPA.ParentSKU,
		stuff( (SELECT ','+TPA1.SKU FROM #TempProductassociation TPA1 
		WHERE (TPA.ParentPimProductId = TPA1.ParentPimProductId and IsConfigurable = 1)
					 FOR XML PATH(''),Type).value('.', 'varchar(max)'), 1, 1, '') as ConfigurableProductSKUs
	into #ConfigurableProductSKUs
	from #TempProductassociation TPA
	where IsConfigurable = 1

	--getting comma seperated Group Products
	select TPA.ParentSKU,
		stuff( (SELECT ','+TPA1.SKU FROM #TempProductassociation TPA1 
		WHERE (TPA.ParentPimProductId = TPA1.ParentPimProductId and IsGroup = 1)
					 FOR XML PATH(''),Type).value('.', 'varchar(max)'), 1, 1, '') GroupProductSKUs
		,count(TPA.SKU) as GroupProductsQuantity
	into #GroupProductSKUs
	from #TempProductassociation TPA
	where IsGroup = 1
	group by TPA.ParentSKU, TPA.ParentPimProductId 
		
	--getting comma seperated Link Products
	--select TPA.ParentSKU,
	--	stuff( (SELECT ','+TPA1.SKU FROM #TempProductassociation TPA1 
	--	WHERE (TPA.ParentPimProductId = TPA1.ParentPimProductId and IsLink = 1)
	--				 FOR XML PATH(''),Type).value('.', 'varchar(max)'), 1, 1, '') LinkProductSkus
	--into #LinkProductSkus
	--from #TempProductassociation TPA
	--where IsLink = 1

	--getting comma seperated Bundle Products
	--select TPA.ParentSKU,
	--	stuff( (SELECT ','+TPA1.SKU FROM #TempProductassociation TPA1 
	--	WHERE (TPA.ParentPimProductId = TPA1.ParentPimProductId)
	--				 FOR XML PATH(''),Type).value('.', 'varchar(max)'), 1, 1, '')
	--from #TempProductassociation TPA
	--where IsBundle = 1

	Select PD.SKU, ZPP.PromotionId 
	into #TempProductPromotion
	from #ProductDetail PD
	inner join ZnodePromotionProduct ZPP ON PD.Id = ZPP.PublishProductId 
	where exists(select * from ZnodePromotion ZP inner join ZnodePromotionType ZPT ON ZP.PromotionTypeId = ZPT.PromotionTypeId
	      where ZPP.PromotionId = ZP.PromotionId and ZPT.Name = 'Call For Pricing')

	select PD.Name,PD.SKU,PD.Id as Id, PD.IsActive as IsActive, PD.Attributes, TPP.RetailPrice, 
	       addon.AddOnProductSkus, config.ConfigurableProductSKUs, grp.GroupProductSKUs, ISNULL(grp.GroupProductsQuantity,0) AS GroupProductsQuantity,
		  ISNULL(Inv.Quantity,0) as QuantityOnHand, Cast(case when Promo.PromotionId is null then 'false' else 'true' end as bit) HasPromotion
	from #ProductDetail PD
	inner join #TempProductPrice TPP ON PD.SKU = TPP.SKU
	left join #AddOnProductSkus addon ON PD.SKU = addon.ParentSKU
	left join #ConfigurableProductSKUs config  ON PD.SKU = config.ParentSKU
	left join #GroupProductSKUs grp  ON PD.SKU = grp.ParentSKU
	left join #TempSKUInventory Inv  ON PD.SKU = Inv.SKU
	left join #TempProductPromotion Promo  ON PD.SKU = Promo.SKU
	
END TRY
BEGIN CATCH
	SELECT ERROR_MESSAGE()
	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetQuickOrderPublishProduct @PublishCatalogId = '+cast(@PublishCatalogId as varchar(10))+',@LocaleId= '+cast(@LocaleId as varchar(10))+',@VersionId='+CAST(@VersionId AS VARCHAR(50))+',@PublishCategoryIds='+CAST(@PublishCategoryIds AS VARCHAR(50))+',@SKUs='+CAST(@SKUs AS VARCHAR(10))+',@ProductIndex='+CAST(@ProductIndex AS VARCHAR(10))+',@PortalId='+CAST(@PortalId AS VARCHAR(10));
              			 
	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
	ROLLBACK TRANSACTION GetPublishAssociatedProducts;
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_GetQuickOrderPublishProduct',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
END CATCH;
	
END
GO
Declare @GlobalAttributeStoreVoucher int
select @GlobalAttributeStoreVoucher = b.GlobalAttributeId
from ZnodeGlobalAttributeGroup a
inner join ZnodeGlobalAttributeGroupMapper c on c.GlobalAttributeGroupId = a.GlobalAttributeGroupId  
inner join ZnodeGlobalAttribute b on c.GlobalAttributeId = b.GlobalAttributeId 
where a.GroupCode = 'VoucherSettings' and b.AttributeCode = 'VoucherExpirationReminderEmailInDays'
and b.GlobalEntityId = (select top 1 GlobalEntityId from ZnodeGlobalEntity d where d.EntityName = 'Store')

Declare @GlobalAttributeAccountVoucher int
select @GlobalAttributeAccountVoucher = b.GlobalAttributeId
from ZnodeGlobalAttributeGroup a
inner join ZnodeGlobalAttributeGroupMapper c on c.GlobalAttributeGroupId = a.GlobalAttributeGroupId  
inner join ZnodeGlobalAttribute b on c.GlobalAttributeId = b.GlobalAttributeId 
where a.GroupCode = 'AccountVoucherSettings' and b.AttributeCode = 'AccountVoucherExpirationReminderEmailInDays'
and b.GlobalEntityId = (select top 1 GlobalEntityId from ZnodeGlobalEntity d where d.EntityName = 'Account')

update ZnodeAccountGlobalAttributeValue set GlobalAttributeId = @GlobalAttributeAccountVoucher
where GlobalAttributeId = @GlobalAttributeStoreVoucher and isnull(@GlobalAttributeAccountVoucher,0) <> 0
go
update ZnodeMenu set CSSClassName = 'z-analytics' where MenuName='Analytics' and CSSClassName = 'z-analytics-report'
go
if exists(select * from sys.procedures where name = 'Znode_GetAccountGlobalAttributeValue')
	drop proc Znode_GetAccountGlobalAttributeValue
go
CREATE  PROCEDURE [dbo].[Znode_GetAccountGlobalAttributeValue]
(
    @EntityName       nvarchar(200) = 0,
    @GlobalEntityValueId   INT = 0,
	@LocaleCode       VARCHAR(100) = '',
   @GroupCode  nvarchar(200) = null,
       @SelectedValue bit = 0
 --   @LocaleId       INT = 0,
	--@GlobalEnt
)
AS
/*
	 Summary :- This procedure is used to get the Attribute and EntityValue attribute value as per filter pass 
	 Unit Testing 
	 BEGIN TRAN
	 EXEC [Znode_GetGlobalEntityAttributeValue] 'Store',1
	 ROLLBACK TRAN

*/	 
     BEGIN
 BEGIN TRY
 declare @EntityValue nvarchar(200), @LocaleId int

 	DECLARE @GlobalFamilyId int
	SET  @GlobalFamilyId = (select FM.GlobalAttributeFamilyId from ZnodeGlobalEntity GE inner join  ZnodeGlobalEntityFamilyMapper FM
	on GE.GlobalEntityId = FM.GlobalEntityId
	where GE.EntityName =  @EntityName and  (FM.GlobalEntityValueId = @GlobalEntityValueId or FM.GlobalEntityValueId is null))
  

  DECLARE @V_MediaServerThumbnailPath VARCHAR(4000);
          SET @V_MediaServerThumbnailPath =
         (
             SELECT ISNULL(CASE WHEN CDNURL = '' THEN NULL ELSE CDNURL END,URL)+ZMSM.ThumbnailFolderName+'/'  
             FROM ZnodeMediaConfiguration ZMC 
			 INNER JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMC.MediaServerMasterId)
		     WHERE IsActive = 1 
         );


 Select @EntityValue=Name  from ZnodeAccount
 Where AccountId=@GlobalEntityValueId

            Declare	@EntityAttributeList as	table  (GlobalEntityId int,EntityName nvarchar(300),EntityValue nvarchar(max),
			GlobalAttributeGroupId int,GlobalAttributeId int,AttributeTypeId int,AttributeTypeName nvarchar(300),
			 AttributeCode nvarchar(300) ,IsRequired bit,IsLocalizable bit,AttributeName  nvarchar(300) , HelpDescription nvarchar(max),DisplayOrder int
			) 
			 
			Declare @EntityAttributeValidationList  as	table  
			( GlobalAttributeId int, ControlName nvarchar(300), ValidationName nvarchar(300),SubValidationName nvarchar(300),
			 RegExp nvarchar(300), ValidationValue nvarchar(300),IsRegExp Bit)

			Declare	@EntityAttributeValueList as	table  (GlobalAttributeId int,AttributeValue nvarchar(max),
			GlobalAttributeValueId int,GlobalAttributeDefaultValueId int,AttributeDefaultValueCode nvarchar(300),
			AttributeDefaultValue nvarchar(300),
			MediaId int,MediaPath nvarchar(300),IsEditable bit,DisplayOrder int )



			Declare	@EntityAttributeDefaultValueList as	table  (GlobalAttributeDefaultValueId int,GlobalAttributeId int,
			AttributeDefaultValueCode nvarchar(300),AttributeDefaultValue nvarchar(300),RowId int,IsEditable bit,DisplayOrder int )

			set @LocaleId = (select top 1 LocaleId from ZnodeLocale where Code = @LocaleCode)

            IF ISnull(@GroupCode, '') = ''
            Begin
			
				insert into @EntityAttributeList
					(	GlobalEntityId ,EntityName ,EntityValue ,
					GlobalAttributeGroupId ,GlobalAttributeId ,AttributeTypeId ,AttributeTypeName ,
					AttributeCode  ,IsRequired ,IsLocalizable ,AttributeName,HelpDescription,DisplayOrder  ) 
				SELECT qq.GlobalEntityId,qq.EntityName,@EntityValue EntityValue,ww.GlobalAttributeGroupId,
					c.GlobalAttributeId,c.AttributeTypeId,q.AttributeTypeName,c.AttributeCode,c.IsRequired,
					c.IsLocalizable,f.AttributeName,c.HelpDescription,c.DisplayOrder
				 FROM dbo.ZnodeGlobalEntity AS qq
					  INNER JOIN dbo.ZnodeGlobalAttributeFamily AS w ON qq.GlobalEntityId = w.GlobalEntityId
					  INNER JOIN dbo.ZnodeGlobalFamilyGroupMapper AS FGM ON FGM.GlobalAttributeFamilyId = w.GlobalAttributeFamilyId
					  INNER JOIN dbo.ZnodeGlobalAttributeGroupMapper AS ww ON ww.GlobalAttributeGroupId = FGM.GlobalAttributeGroupId
					  INNER JOIN dbo.ZnodeGlobalAttribute AS c ON ww.GlobalAttributeId = c.GlobalAttributeId
					  INNER JOIN dbo.ZnodeAttributeType AS q ON c.AttributeTypeId = q.AttributeTypeId
					  INNER JOIN dbo.ZnodeGlobalAttributeLocale AS f ON c.GlobalAttributeId = f.GlobalAttributeId
					  Where qq.EntityName=@EntityName AND ( f.LocaleId = isnull(@LocaleId, 0 ) or isnull(@LocaleId,0) = 0 )
					  and w.GlobalAttributeFamilyId = @GlobalFamilyId
			END
			Else

               Begin
                       insert into @EntityAttributeList
                               ( GlobalEntityId ,EntityName ,EntityValue ,
                               GlobalAttributeGroupId ,GlobalAttributeId ,AttributeTypeId ,AttributeTypeName ,
                               AttributeCode  ,IsRequired ,IsLocalizable ,AttributeName,HelpDescription,DisplayOrder  )
                               SELECT qq.GlobalEntityId,qq.EntityName,@EntityValue EntityValue,ww.GlobalAttributeGroupId,
                               c.GlobalAttributeId,c.AttributeTypeId,q.AttributeTypeName,c.AttributeCode,c.IsRequired,
                               c.IsLocalizable,f.AttributeName,c.HelpDescription,c.DisplayOrder
                        FROM dbo.ZnodeGlobalEntity AS qq
					  INNER JOIN dbo.ZnodeGlobalAttributeFamily AS w ON qq.GlobalEntityId = w.GlobalEntityId
					  INNER JOIN dbo.ZnodeGlobalFamilyGroupMapper AS FGM ON FGM.GlobalAttributeFamilyId = w.GlobalAttributeFamilyId
					  INNER JOIN dbo.ZnodeGlobalAttributeGroupMapper AS ww ON ww.GlobalAttributeGroupId = FGM.GlobalAttributeGroupId
					  INNER JOIN dbo.ZnodeGlobalAttribute AS c ON ww.GlobalAttributeId = c.GlobalAttributeId
					  INNER JOIN dbo.ZnodeAttributeType AS q ON c.AttributeTypeId = q.AttributeTypeId
					  INNER JOIN dbo.ZnodeGlobalAttributeLocale AS f ON c.GlobalAttributeId = f.GlobalAttributeId
					  Where qq.EntityName=@EntityName AND ( f.LocaleId = isnull(@LocaleId, 0 ) or isnull(@LocaleId,0) = 0 )
					  and w.GlobalAttributeFamilyId = @GlobalFamilyId	
                                 AND exists( select 1 from ZnodeGlobalAttributeGroup g where ww.GlobalAttributeGroupId = g.GlobalAttributeGroupId and g.GroupCode = @GroupCode )	
               END


		  INSERT INTO @EntityAttributeValidationList
		  (GlobalAttributeId,ControlName , ValidationName ,SubValidationName ,
		RegExp, ValidationValue,IsRegExp)

		 Select aa.GlobalAttributeId,i.ControlName,i.Name AS ValidationName,j.ValidationName AS SubValidationName,
		j.RegExp,k.Name AS ValidationValue,CAST(CASE WHEN j.RegExp IS NULL THEN 0 ELSE 1 END AS BIT) AS IsRegExp
		
		fROM @EntityAttributeList aa
		  inner  JOIN dbo.ZnodeGlobalAttributeValidation AS k ON k.GlobalAttributeId = aa.GlobalAttributeId
          inner  JOIN dbo.ZnodeAttributeInputValidation AS i ON k.InputValidationId = i.InputValidationId
          LEFT  JOIN dbo.ZnodeAttributeInputValidationRule AS j ON k.InputValidationRuleId = j.InputValidationRuleId

		  insert into @EntityAttributeValueList
		  (GlobalAttributeId,GlobalAttributeValueId,GlobalAttributeDefaultValueId,AttributeValue ,MediaId,MediaPath)
		  Select DISTINCT GlobalAttributeId,aa.AccountGlobalAttributeValueId,bb.GlobalAttributeDefaultValueId,
		  case when bb.MediaPath is not null then  @V_MediaServerThumbnailPath+bb.MediaPath--+'~'+convert(nvarchar(10),bb.MediaId) 
		  else bb.AttributeValue end,		  
		  bb.MediaId,bb.MediaPath
		  from  dbo.ZnodeAccountGlobalAttributeValue aa
		   inner join ZnodeAccountGlobalAttributeValueLocale bb ON bb.AccountGlobalAttributeValueId = aa.AccountGlobalAttributeValueId 
		  Where  AccountId=@GlobalEntityValueId

		

		  

		  update aa
		  Set AttributeDefaultValueCode= h.AttributeDefaultValueCode,
              AttributeDefaultValue=g.AttributeDefaultValue,
			  GlobalAttributeDefaultValueId=g.GlobalAttributeDefaultValueId,
			  AttributeValue=case when aa.AttributeValue is  null then h.AttributeDefaultValueCode else aa.AttributeValue end,
			  IsEditable = ISNULL(h.IsEditable, 1),DisplayOrder = h.DisplayOrder
		  from  @EntityAttributeValueList aa
		  inner JOIN dbo.ZnodeGlobalAttributeDefaultValue h ON h.GlobalAttributeDefaultValueId = aa.GlobalAttributeDefaultValueId                                       
          inner JOIN dbo.ZnodeGlobalAttributeDefaultValueLocale g ON h.GlobalAttributeDefaultValueId = g.GlobalAttributeDefaultValueId
          
		  insert into @EntityAttributeDefaultValueList
		  (GlobalAttributeDefaultValueId,GlobalAttributeId,AttributeDefaultValueCode,
			AttributeDefaultValue ,RowId ,IsEditable ,DisplayOrder )
		  Select  h.GlobalAttributeDefaultValueId, aa.GlobalAttributeId,h.AttributeDefaultValueCode,g.AttributeDefaultValue,0,ISNULL(h.IsEditable, 1),
		  h.DisplayOrder
		  from  @EntityAttributeList aa
		  inner JOIN dbo.ZnodeGlobalAttributeDefaultValue h ON h.GlobalAttributeId = aa.GlobalAttributeId
          inner JOIN dbo.ZnodeGlobalAttributeDefaultValueLocale g ON h.GlobalAttributeDefaultValueId = g.GlobalAttributeDefaultValueId
		  
		 
			if not exists (Select 1 from @EntityAttributeList )
			Begin
			insert into @EntityAttributeList
			(	GlobalEntityId ,EntityName ,EntityValue ,
			GlobalAttributeGroupId ,GlobalAttributeId ,AttributeTypeId ,AttributeTypeName ,
			AttributeCode  ,IsRequired ,IsLocalizable ,AttributeName,HelpDescription  ) 
			SELECT qq.GlobalEntityId,qq.EntityName,@EntityValue EntityValue,0 GlobalAttributeGroupId,
			0 GlobalAttributeId,0 AttributeTypeId,''AttributeTypeName,''AttributeCode,0 IsRequired,
			0 IsLocalizable,'' AttributeName,'' HelpDescription
			FROM dbo.ZnodeGlobalEntity AS qq
			 Where qq.EntityName=@EntityName 
			End
				

			SELECT GlobalEntityId,EntityName,EntityValue,GlobalAttributeGroupId,
			AA.GlobalAttributeId,AttributeTypeId,AttributeTypeName,AttributeCode,IsRequired,
			IsLocalizable,AttributeName,ControlName,ValidationName,SubValidationName,RegExp,
			ValidationValue,cast(isnull(IsRegExp,0) as bit)  IsRegExp,
			HelpDescription,AttributeValue,GlobalAttributeValueId,bb.GlobalAttributeDefaultValueId,
			aab.AttributeDefaultValueCode,
			aab.AttributeDefaultValue,isnull(aab.RowId,0)   RowId,cast(isnull(aab.IsEditable,0) as bit)   IsEditable
			,bb.MediaId,AA.DisplayOrder
			fROM @EntityAttributeList AA				
			left join @EntityAttributeDefaultValueList aab on aab.GlobalAttributeId=AA.GlobalAttributeId	
			left join @EntityAttributeValidationList vl on vl.GlobalAttributeId=aa.GlobalAttributeId			
			LEFT JOIN @EntityAttributeValueList BB ON BB.GlobalAttributeId=AA.GlobalAttributeId		 
		    and ( (aab.GlobalAttributeDefaultValueId=bb.GlobalAttributeDefaultValueId	)
			or  ( bb.MediaId is not null and isnull(vl.ValidationName,'')='IsAllowMultiUpload'  and bb.GlobalAttributeDefaultValueId is null )
			or  ( bb.MediaId is  null and  bb.GlobalAttributeDefaultValueId is null ))
			order by AA.DisplayOrder, aab.DisplayOrder

			SELECT 1 AS ID,CAST(1 AS BIT) AS Status;       
		  END TRY
         BEGIN CATCH
		 SELECT ERROR_MESSAGE()
             DECLARE @Status BIT ;
		  SET @Status = 0;
		  DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(),
		   @ErrorLine VARCHAR(100)= ERROR_LINE(),
		    @ErrorCall NVARCHAR(MAX)= null       			 
          SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		 
          EXEC Znode_InsertProcedureErrorLog
            @ProcedureName = 'Znode_GetGlobalEntityValueAttributeValues',
            @ErrorInProcedure = @Error_procedure,
            @ErrorMessage = @ErrorMessage,
            @ErrorLine = @ErrorLine,
            @ErrorCall = @ErrorCall;
         END CATCH;
     END;
	 go
	 if exists(select * from sys.procedures where name = 'Znode_GetGlobalAttributeGroups')
	drop proc Znode_GetGlobalAttributeGroups
go
CREATE PROCEDURE [dbo].[Znode_GetGlobalAttributeGroups]  
( @WhereClause NVARCHAR(Max) = '',  
  @Rows        INT           = 100,  
  @PageNo      INT           = 1,  
  @Order_BY VARCHAR(1000)    = '',  
  @RowsCount   INT OUT)  
AS  
/*  
Summary: This procedure is used get GlobalAttributeGroups from both the locale  
   The result is displayed order by GlobalAttributeGroupId in descending order  
Unit Testing:  
    
   DECLARE @Ree INT   
         EXEC Znode_GetGlobalAttributeGroups @WhereClause= 'LocaleId = 1' , @RowsCount =  @Ree OUT, @PageNo = 1, @Rows = 10   
     
     
*/  
     BEGIN  
         SET NOCOUNT ON;  
         BEGIN TRY  
             DECLARE @SQL NVARCHAR(MAX);  
    DECLARE @TBL_GlobalAttributeGroups TABLE (GlobalAttributeGroupId int,GroupCode VARCHAR(200), AttributeGroupName NVARCHAR(600),LocaleId INT,GlobalEntityId INT,EntityName NVARCHAR(300),RowId INT,CountNo INT )  
             
    SET @SQL = '  
     ;WITH CTE_GlobalGroupList AS  
     ( SELECT ZPAG.GlobalAttributeGroupId,ZPAG.GroupCode ,ZPAGL.AttributeGroupName,ZPAGL.LocaleId,ZPAG.GlobalEntityId,ZGE.EntityName  
       FROM ZnodeGlobalAttributeGroup ZPAG   
          Inner JOIN ZnodeGlobalAttributeGroupLocale ZPAGL on (ZPAG.GlobalAttributeGroupId = ZPAGL.GlobalAttributeGroupId )  
		  Inner JOIN ZnodeGlobalEntity ZGE on (ZPAG.GlobalEntityId = ZGE.GlobalEntityId )  
      )  
  
        ,CTE_GlobalGroup AS  
         ( SELECT GlobalAttributeGroupId,GroupCode,AttributeGroupName,LocaleId,GlobalEntityId,EntityName
        ,'+dbo.Fn_GetPagingRowId(@Order_BY,'GlobalAttributeGroupId DESC')+',Count(*)Over() CountNo  
        FROM CTE_GlobalGroupList  
           WHERE 1=1   
        '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'      
      )  
     SELECT GlobalAttributeGroupId,GroupCode,AttributeGroupName,LocaleId,GlobalEntityId,EntityName,RowId,CountNo  
     FROM CTE_GlobalGroup  
     '+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)  
	
	 --PRINT @SQL
     INSERT INTO @TBL_GlobalAttributeGroups(GlobalAttributeGroupId,GroupCode,AttributeGroupName,LocaleId,GlobalEntityId,EntityName,RowId,CountNo)  
     EXEC(@SQL)  
  
     SET @RowsCount = ISNULL((SELECT TOP 1 CountNo FROM @TBL_GlobalAttributeGroups),0)  
  
     SELECT GlobalAttributeGroupId,GroupCode,AttributeGroupName,LocaleId,GlobalEntityId,EntityName  
     FROM  @TBL_GlobalAttributeGroups  
   
         END TRY  
         BEGIN CATCH  
          DECLARE @Status BIT ;  
       SET @Status = 0;  
       DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetGlobalAttributeGroups @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));  
                    
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                      
      
             EXEC Znode_InsertProcedureErrorLog  
    @ProcedureName = 'Znode_GetGlobalAttributeGroups',  
    @ErrorInProcedure = @Error_procedure,  
    @ErrorMessage = @ErrorMessage,  
    @ErrorLine = @ErrorLine,  
    @ErrorCall = @ErrorCall;                              
         END CATCH;  
     END;
	 go
	 if exists(select * from sys.procedures where name = 'Znode_GetGlobalAttributes')
	drop proc Znode_GetGlobalAttributes
go
CREATE PROCEDURE [dbo].[Znode_GetGlobalAttributes]  
(   @WhereClause         VARCHAR(MAX)  = '',  
    @Rows                INT           = 100,  
    @PageNo              INT           = 1,  
    @Order_BY            VARCHAR(1000) = '',  
    @RowsCount           INT OUT,  
    @LocaleId            INT           = 0,  
    @GlobalAttributeId      VARCHAR(MAX)  = '',  
    @IsReturnAllCoulumns BIT           = 0)  
AS  
/*  
     Summary :- This Procedure is used to get the attribute details with the attribute name locale wise   
    Result is fetched order by GlobalAttributeId in descending order  
     Unit Testing   
    
     EXEC [Znode_GetGlobalAttributes] '',10,1,'',0,1,'54,53,56',1  
   
*/  
     BEGIN  
         SET NOCOUNT ON;  
     
         BEGIN TRY  
             DECLARE @SQL NVARCHAR(MAX);  
             DECLARE @DefaultLocaleId INT= dbo.Fn_GetdefaultLocaleId();  
              
             DECLARE @TBL_AttributeDefault TABLE  
             (GlobalAttributeId       INT,  
              AttributeTypeId      INT,  
              AttributeCode        VARCHAR(600),  
              IsRequired           BIT,  
              IsLocalizable        BIT,  
              DisplayOrder         INT,  
              HelpDescription      VARCHAR(MAX),    
              CreatedDate          DATETIME,  
              ModifiedDate         DATETIME,  
              AttributeName        NVARCHAR(MAX),  
              AttributeTypeName    VARCHAR(300),  
			  GlobalEntityId	   INT,
			  EntityName		   NVARCHAR(300), 
              RowId                INT,  
              CountId              INT  
             );  
             IF @GlobalAttributeId <> ''  
                 BEGIN  
                     SET @WhereClause = CASE  WHEN @WhereClause = '' THEN '' ELSE ' AND ' END+' EXISTS (SELECT TOP 1  1  FROM dbo.Split('''+@GlobalAttributeId+''','','') SP WHERE SP.Item = CTPADV.GlobalAttributeId )';                                      
                                                                                                                                      
                 END;  
             SET @SQL = '  
       ;With Cte_GlobalAttribute AS   
    (  
     SELECT ZPA.GlobalAttributeId,ZPA.AttributeTypeId,ZPA.AttributeCode,ZPA.IsRequired,ZPA.IsLocalizable,  
     ZPA.DisplayOrder,ZPA.HelpDescription  
     ,ZPA.CreatedBy,ZPA.CreatedDate,ZPA.ModifiedBy,ZPA.ModifiedDate,ZPAL.AttributeName,ZAT.AttributeTypeName , ZPAL.LocaleId,ZPA.GlobalEntityId,ZGE.EntityName   
     FROM ZnodeGlobalAttribute ZPA   
     INNER JOIN ZnodeGlobalAttributeLocale ZPAL ON (ZPAL.GlobalAttributeId = ZPA.GlobalAttributeId)  
     INNER JOIN ZnodeAttributeType ZAT ON (ZAT.AttributeTypeId = ZPA.AttributeTypeId)  
	 INNER JOIN ZnodeGlobalEntity ZGE ON (ZPA.GlobalEntityId = ZGE.GlobalEntityId)
       
    )  
    , Cte_GlobalAttributeFirstLocale AS   
    (  
     SELECT GlobalAttributeId,AttributeTypeId,AttributeCode,IsRequired,IsLocalizable  
     ,DisplayOrder,HelpDescription  
     ,AttributeName ,AttributeTypeName,CreatedDate,ModifiedDate,LocaleId,GlobalEntityId,EntityName
     FROM Cte_GlobalAttribute CTA   
     WHERE LocaleId = '+CAST(@localeId AS VARCHAR(20))+'  
    )  
    , Cte_GlobalAttributeDefaultLocale AS   
    (  
        SELECT GlobalAttributeId,AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,DisplayOrder,HelpDescription  
        ,AttributeName ,AttributeTypeName,CreatedDate,ModifiedDate,LocaleId,GlobalEntityId,EntityName  
        FROM Cte_GlobalAttributeFirstLocale   
        UNION ALL   
        SELECT GlobalAttributeId,AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,DisplayOrder,HelpDescription  
     ,AttributeName ,AttributeTypeName,CreatedDate,ModifiedDate,LocaleId,GlobalEntityId,EntityName  
        FROM Cte_GlobalAttribute CTA  
        WHERE LocaleId = '+CAST(@DefaultLocaleId AS VARCHAR(20))+'  
        AND NOT EXISTS (SELECT TOP 1 1 FROM Cte_GlobalAttributeFirstLocale CTAFL WHERE CTAFL.GlobalAttributeId = CTA.GlobalAttributeId)     
     )  
     ,Cte_GlobalAttributeFilter AS   
     (  
        SELECT GlobalAttributeId,AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,DisplayOrder,HelpDescription,CreatedDate,ModifiedDate  
     ,AttributeName ,AttributeTypeName,LocaleId,GlobalEntityId,EntityName, '+[dbo].[Fn_GetPagingRowId](@Order_BY, ' GlobalAttributeId DESC')+' , Count(*)Over() CountId  
        FROM Cte_GlobalAttributeDefaultLocale  CTPADV   
        WHERE 1=1   
        '+[dbo].[Fn_GetFilterWhereClause](@WhereClause)+'  
     )  
      
        SELECT GlobalAttributeId,AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,DisplayOrder,HelpDescription,CreatedDate,ModifiedDate  
     ,AttributeName ,AttributeTypeName,GlobalEntityId,EntityName ,RowId ,CountId   
        FROM Cte_GlobalAttributeFilter CTAF   
        '+[dbo].[Fn_GetPaginationWhereClause](@PageNo, @Rows)+'  
        '+[dbo].[Fn_GetOrderByClause](@Order_BY, 'GlobalAttributeId DESC')+'  
        ';  
              INSERT INTO @TBL_AttributeDefault  
     (GlobalAttributeId,AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,DisplayOrder,HelpDescription,CreatedDate,ModifiedDate,AttributeName,AttributeTypeName,GlobalEntityId,EntityName,RowId,CountId)  
     EXEC (@SQL);  
     IF @IsReturnAllCoulumns = 0  
                 BEGIN  
                     SELECT GlobalAttributeId,AttributeCode,AttributeName,AttributeTypeName,IsRequired,IsLocalizable,GlobalEntityId,EntityName,CreatedDate  
                     FROM @TBL_AttributeDefault;  
                 END;  
                 ELSE  
                 BEGIN  
                     SELECT GlobalAttributeId,AttributeTypeId,AttributeCode,IsRequired,IsLocalizable  
      ,DisplayOrder,HelpDescription,CreatedDate,ModifiedDate,AttributeName,AttributeTypeName,GlobalEntityId,EntityName  
                     FROM @TBL_AttributeDefault;  
                 END;  
                 SET @RowsCount = ISNULL((SELECT TOP 1 CountId FROM @TBL_AttributeDefault), 0);  
    
         END TRY  
         BEGIN CATCH  
  select  error_message()  
  DECLARE @Status BIT ;  
       SET @Status = 0;  
       DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),  
    @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetGlobalAttributes @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@LocaleId = '+CAST(@LocaleId AS VARCHAR(50))+',@GlobalAttributeId='+@GlobalAttributeId+',@IsReturnAllCoulumns='+CAST(@IsReturnAllCoulumns AS VARCHAR(50))+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));  
                    
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                      
      
             EXEC Znode_InsertProcedureErrorLog  
    @ProcedureName = 'Znode_GetGlobalAttributes',  
    @ErrorInProcedure = @Error_procedure,  
    @ErrorMessage = @ErrorMessage,  
    @ErrorLine = @ErrorLine,  
    @ErrorCall = @ErrorCall;  
              
         END CATCH;  
     END;  
	 go
if exists(select * from sys.procedures where name = 'Znode_GetPortalGlobalAttributeValue')
	drop proc Znode_GetPortalGlobalAttributeValue
go
CREATE   PROCEDURE [dbo].[Znode_GetPortalGlobalAttributeValue]
(
    @EntityName       nvarchar(200) = 0,
    @GlobalEntityValueId   INT = 0,
	@LocaleCode       VARCHAR(100) = '',
    @GroupCode  nvarchar(200) = null,
	@SelectedValue bit = 0
)
AS
/*
	 Summary :- This procedure is used to get the Attribute and EntityValue attribute value as per filter pass 
	 Unit Testing 
	 BEGIN TRAN
	 EXEC [Znode_GetGlobalEntityAttributeValue] 'Store',1
	 ROLLBACK TRAN

*/	 
     BEGIN
 BEGIN TRY
 declare @EntityValue nvarchar(200), @LocaleId int
 
	DECLARE @GlobalFamilyId int
	SET  @GlobalFamilyId = (select FM.GlobalAttributeFamilyId from ZnodeGlobalEntity GE inner join  ZnodeGlobalEntityFamilyMapper FM
	on GE.GlobalEntityId = FM.GlobalEntityId
	where GE.EntityName =  @EntityName and  (FM.GlobalEntityValueId = @GlobalEntityValueId or FM.GlobalEntityValueId is null))

  DECLARE @V_MediaServerThumbnailPath VARCHAR(4000);
          SET @V_MediaServerThumbnailPath =
         (
             SELECT ISNULL(CASE WHEN CDNURL = '' THEN NULL ELSE CDNURL END,URL)+ZMSM.ThumbnailFolderName+'/'  
             FROM ZnodeMediaConfiguration ZMC 
			 INNER JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMC.MediaServerMasterId)
		     WHERE IsActive = 1 
         );


 Select @EntityValue=StoreName from ZnodePortal
 Where PortalId=@GlobalEntityValueId

            Declare	@EntityAttributeList as	table  (GlobalEntityId int,EntityName nvarchar(300),EntityValue nvarchar(max),
			GlobalAttributeGroupId int,GlobalAttributeId int,AttributeTypeId int,AttributeTypeName nvarchar(300),
			 AttributeCode nvarchar(300) ,IsRequired bit,IsLocalizable bit,AttributeName  nvarchar(300) , HelpDescription nvarchar(max)
			,AttributeGroupDisplayOrder int,DisplayOrder int) 
			 
			Declare @EntityAttributeValidationList  as	table  
			( GlobalAttributeId int, ControlName nvarchar(300), ValidationName nvarchar(300),SubValidationName nvarchar(300),
			 RegExp nvarchar(300), ValidationValue nvarchar(300),IsRegExp Bit)

			Declare	@EntityAttributeValueList as	table  (GlobalAttributeId int,AttributeValue nvarchar(max),
			GlobalAttributeValueId int,GlobalAttributeDefaultValueId int,AttributeDefaultValueCode nvarchar(300),
			AttributeDefaultValue nvarchar(300),
			MediaId int,MediaPath nvarchar(300),IsEditable bit,DisplayOrder int )



			Declare	@EntityAttributeDefaultValueList as	table  (GlobalAttributeDefaultValueId int,GlobalAttributeId int,
			AttributeDefaultValueCode nvarchar(300),AttributeDefaultValue nvarchar(300),RowId int,IsEditable bit,DisplayOrder int )

			set @LocaleId = (select top 1 LocaleId from ZnodeLocale where Code = @LocaleCode)

			IF ISnull(@GroupCode, '') = '' 
            Begin
			
				insert into @EntityAttributeList
					(	GlobalEntityId ,EntityName ,EntityValue ,
					GlobalAttributeGroupId ,GlobalAttributeId ,AttributeTypeId ,AttributeTypeName ,
					AttributeCode  ,IsRequired ,IsLocalizable ,AttributeName,HelpDescription ,AttributeGroupDisplayOrder,DisplayOrder ) 
					SELECT qq.GlobalEntityId,qq.EntityName,@EntityValue EntityValue,ww.GlobalAttributeGroupId,
					c.GlobalAttributeId,c.AttributeTypeId,q.AttributeTypeName,c.AttributeCode,c.IsRequired,
					c.IsLocalizable,f.AttributeName,c.HelpDescription,FGM.AttributeGroupDisplayOrder,c.DisplayOrder
				 FROM dbo.ZnodeGlobalEntity AS qq
					  INNER JOIN dbo.ZnodeGlobalAttributeFamily AS w ON qq.GlobalEntityId = w.GlobalEntityId
					  INNER JOIN dbo.ZnodeGlobalFamilyGroupMapper AS FGM ON FGM.GlobalAttributeFamilyId = w.GlobalAttributeFamilyId
					  INNER JOIN dbo.ZnodeGlobalAttributeGroupMapper AS ww ON ww.GlobalAttributeGroupId = FGM.GlobalAttributeGroupId
					  INNER JOIN dbo.ZnodeGlobalAttribute AS c ON ww.GlobalAttributeId = c.GlobalAttributeId
					  INNER JOIN dbo.ZnodeAttributeType AS q ON c.AttributeTypeId = q.AttributeTypeId
					  INNER JOIN dbo.ZnodeGlobalAttributeLocale AS f ON c.GlobalAttributeId = f.GlobalAttributeId
					  Where qq.EntityName=@EntityName AND ( f.LocaleId = isnull(@LocaleId, 0 ) or isnull(@LocaleId,0) = 0 )
					  and w.GlobalAttributeFamilyId = @GlobalFamilyId
			
			END 
			Else 
			Begin
				insert into @EntityAttributeList
				(	GlobalEntityId ,EntityName ,EntityValue ,
				GlobalAttributeGroupId ,GlobalAttributeId ,AttributeTypeId ,AttributeTypeName ,
				AttributeCode  ,IsRequired ,IsLocalizable ,AttributeName,HelpDescription ,AttributeGroupDisplayOrder,DisplayOrder ) 
				SELECT qq.GlobalEntityId,qq.EntityName,@EntityValue EntityValue,ww.GlobalAttributeGroupId,
				c.GlobalAttributeId,c.AttributeTypeId,q.AttributeTypeName,c.AttributeCode,c.IsRequired,
				c.IsLocalizable, f.AttributeName, c.HelpDescription,FGM.AttributeGroupDisplayOrder,c.DisplayOrder
				FROM dbo.ZnodeGlobalEntity AS qq
					INNER JOIN dbo.ZnodeGlobalAttributeFamily AS w ON qq.GlobalEntityId = w.GlobalEntityId
					  INNER JOIN dbo.ZnodeGlobalFamilyGroupMapper AS FGM ON FGM.GlobalAttributeFamilyId = w.GlobalAttributeFamilyId
					  INNER JOIN dbo.ZnodeGlobalAttributeGroupMapper AS ww ON ww.GlobalAttributeGroupId = FGM.GlobalAttributeGroupId
					  INNER JOIN dbo.ZnodeGlobalAttribute AS c ON ww.GlobalAttributeId = c.GlobalAttributeId
					  INNER JOIN dbo.ZnodeAttributeType AS q ON c.AttributeTypeId = q.AttributeTypeId
					  INNER JOIN dbo.ZnodeGlobalAttributeLocale AS f ON c.GlobalAttributeId = f.GlobalAttributeId
					  Where qq.EntityName=@EntityName AND ( f.LocaleId = isnull(@LocaleId, 0 ) or isnull(@LocaleId,0) = 0 )
					  and w.GlobalAttributeFamilyId = @GlobalFamilyId				  
					 AND exists( select 1 from ZnodeGlobalAttributeGroup g where ww.GlobalAttributeGroupId = g.GlobalAttributeGroupId and g.GroupCode = @GroupCode )
			
			End 


		  INSERT INTO @EntityAttributeValidationList
		  (GlobalAttributeId,ControlName , ValidationName ,SubValidationName ,
		RegExp, ValidationValue,IsRegExp)

		 Select aa.GlobalAttributeId,i.ControlName,i.Name AS ValidationName,j.ValidationName AS SubValidationName,
		j.RegExp,k.Name AS ValidationValue,CAST(CASE WHEN j.RegExp IS NULL THEN 0 ELSE 1 END AS BIT) AS IsRegExp
		fROM @EntityAttributeList aa
		  inner  JOIN dbo.ZnodeGlobalAttributeValidation AS k ON k.GlobalAttributeId = aa.GlobalAttributeId
          inner  JOIN dbo.ZnodeAttributeInputValidation AS i ON k.InputValidationId = i.InputValidationId
          LEFT  JOIN dbo.ZnodeAttributeInputValidationRule AS j ON k.InputValidationRuleId = j.InputValidationRuleId

		  insert into @EntityAttributeValueList
		  (GlobalAttributeId,GlobalAttributeValueId,GlobalAttributeDefaultValueId,AttributeValue ,MediaId,MediaPath)
		  Select DISTINCT GlobalAttributeId,aa.PortalGlobalAttributeValueId,bb.GlobalAttributeDefaultValueId,
		  case when bb.MediaPath is not null then  @V_MediaServerThumbnailPath+bb.MediaPath--+'~'+convert(nvarchar(10),bb.MediaId) 
		  else bb.AttributeValue end,		  
		  bb.MediaId,bb.MediaPath
		  from  dbo.ZnodePortalGlobalAttributeValue aa
		   inner join ZnodePortalGlobalAttributeValueLocale bb ON bb.PortalGlobalAttributeValueId = aa.PortalGlobalAttributeValueId 
		  Where  PortalId=@GlobalEntityValueId

		

		  

		  update aa
		  Set AttributeDefaultValueCode= h.AttributeDefaultValueCode,
              AttributeDefaultValue=g.AttributeDefaultValue,
			  GlobalAttributeDefaultValueId=g.GlobalAttributeDefaultValueId,
			  AttributeValue=case when aa.AttributeValue is  null then h.AttributeDefaultValueCode else aa.AttributeValue end,
			  IsEditable = ISNULL(h.IsEditable, 1),DisplayOrder = h.DisplayOrder
		  from  @EntityAttributeValueList aa
		  inner JOIN dbo.ZnodeGlobalAttributeDefaultValue h ON h.GlobalAttributeDefaultValueId = aa.GlobalAttributeDefaultValueId                                       
          inner JOIN dbo.ZnodeGlobalAttributeDefaultValueLocale g ON h.GlobalAttributeDefaultValueId = g.GlobalAttributeDefaultValueId
          
		  insert into @EntityAttributeDefaultValueList
		  (GlobalAttributeDefaultValueId,GlobalAttributeId,AttributeDefaultValueCode,
			AttributeDefaultValue ,RowId ,IsEditable ,DisplayOrder )
		  Select  h.GlobalAttributeDefaultValueId, aa.GlobalAttributeId,h.AttributeDefaultValueCode,g.AttributeDefaultValue,0,ISNULL(h.IsEditable, 1),
		  h.DisplayOrder
		  from  @EntityAttributeList aa
		  inner JOIN dbo.ZnodeGlobalAttributeDefaultValue h ON h.GlobalAttributeId = aa.GlobalAttributeId
          inner JOIN dbo.ZnodeGlobalAttributeDefaultValueLocale g ON h.GlobalAttributeDefaultValueId = g.GlobalAttributeDefaultValueId
		  
		  if not exists (Select 1 from @EntityAttributeList )
			Begin
			insert into @EntityAttributeList
			(	GlobalEntityId ,EntityName ,EntityValue ,
			GlobalAttributeGroupId ,GlobalAttributeId ,AttributeTypeId ,AttributeTypeName ,
			AttributeCode  ,IsRequired ,IsLocalizable ,AttributeName,HelpDescription  ) 
			SELECT qq.GlobalEntityId,qq.EntityName,@EntityValue EntityValue,0 GlobalAttributeGroupId,
			0 GlobalAttributeId,0 AttributeTypeId,''AttributeTypeName,''AttributeCode,0 IsRequired,
			0 IsLocalizable,'' AttributeName,'' HelpDescription
			FROM dbo.ZnodeGlobalEntity AS qq
			 Where qq.EntityName=@EntityName 
			End

				

			SELECT  GlobalEntityId,EntityName,EntityValue,GlobalAttributeGroupId,
			AA.GlobalAttributeId,AttributeTypeId,AttributeTypeName,AttributeCode,IsRequired,
			IsLocalizable,AttributeName,ControlName,ValidationName,SubValidationName,RegExp,
			ValidationValue,cast(isnull(IsRegExp,0) as bit)  IsRegExp,
			HelpDescription,AttributeValue,GlobalAttributeValueId,bb.GlobalAttributeDefaultValueId,
			aab.AttributeDefaultValueCode,
			aab.AttributeDefaultValue,isnull(aab.RowId,0)   RowId,cast(isnull(aab.IsEditable,0) as bit)   IsEditable
			,bb.MediaId,AA.DisplayOrder
			fROM @EntityAttributeList AA				
			left join @EntityAttributeDefaultValueList aab on aab.GlobalAttributeId=AA.GlobalAttributeId	
			left join @EntityAttributeValidationList vl on vl.GlobalAttributeId=aa.GlobalAttributeId			
			LEFT JOIN @EntityAttributeValueList BB ON BB.GlobalAttributeId=AA.GlobalAttributeId		 
		    and ( (aab.GlobalAttributeDefaultValueId=bb.GlobalAttributeDefaultValueId	)
			or  ( bb.MediaId is not null and isnull(vl.ValidationName,'')='IsAllowMultiUpload'  and bb.GlobalAttributeDefaultValueId is null )
			or  ( bb.MediaId is  null and  bb.GlobalAttributeDefaultValueId is null ))
			order by  aa.DisplayOrder, aab.DisplayOrder

			SELECT 1 AS ID,CAST(1 AS BIT) AS Status;       
		  END TRY
         BEGIN CATCH
		 SELECT ERROR_MESSAGE()
             DECLARE @Status BIT ;
		  SET @Status = 0;
		  DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(),
		   @ErrorLine VARCHAR(100)= ERROR_LINE(),
		    @ErrorCall NVARCHAR(MAX)= null       			 
          SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		 
          EXEC Znode_InsertProcedureErrorLog
            @ProcedureName = 'Znode_GetGlobalEntityValueAttributeValues',
            @ErrorInProcedure = @Error_procedure,
            @ErrorMessage = @ErrorMessage,
            @ErrorLine = @ErrorLine,
            @ErrorCall = @ErrorCall;
         END CATCH;
     END;
go
if exists(select * from sys.procedures where name = 'Znode_GetUserGlobalAttributeValue')
	drop proc Znode_GetUserGlobalAttributeValue
go
CREATE PROCEDURE [dbo].[Znode_GetUserGlobalAttributeValue]
(
    @EntityName       nvarchar(200) = 0,
    @GlobalEntityValueId   INT = 0,
	@LocaleCode       VARCHAR(100) = '',
    @GroupCode  nvarchar(200) = null,
	@SelectedValue bit = 0
	
)
AS
/*
	 Summary :- This procedure is used to get the Attribute and EntityValue attribute value as per filter pass 
	 Unit Testing 
	 BEGIN TRAN
	 EXEC [Znode_GetGlobalEntityAttributeValue] 'Store',1
	 ROLLBACK TRAN

*/	 
     BEGIN
 BEGIN TRY
DECLARE @EntityValue nvarchar(200), @LocaleId int

	DECLARE @GlobalFamilyId int
	SET  @GlobalFamilyId = (select FM.GlobalAttributeFamilyId from ZnodeGlobalEntity GE inner join  ZnodeGlobalEntityFamilyMapper FM
	on GE.GlobalEntityId = FM.GlobalEntityId
	where GE.EntityName =  @EntityName and  (FM.GlobalEntityValueId = @GlobalEntityValueId or FM.GlobalEntityValueId is null))
  
  DECLARE @V_MediaServerThumbnailPath VARCHAR(4000);
          SET @V_MediaServerThumbnailPath =
         (
             SELECT ISNULL(CASE WHEN CDNURL = '' THEN NULL ELSE CDNURL END,URL)+ZMSM.ThumbnailFolderName+'/'  
             FROM ZnodeMediaConfiguration ZMC 
			 INNER JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMC.MediaServerMasterId)
		     WHERE IsActive = 1 
         );


		 Select @EntityValue=Isnull(FirstName,'')+' '+Isnull(LastName,'')
		  from ZnodeUser
		 Where UserId=@GlobalEntityValueId

            Declare	@EntityAttributeList as	table  (GlobalEntityId int,EntityName nvarchar(300),EntityValue nvarchar(max),
			GlobalAttributeGroupId int,GlobalAttributeId int,AttributeTypeId int,AttributeTypeName nvarchar(300),
			 AttributeCode nvarchar(300) ,IsRequired bit,IsLocalizable bit,AttributeName  nvarchar(300) , HelpDescription nvarchar(max),DisplayOrder int
			) 
			 
			Declare @EntityAttributeValidationList  as	table  
			( GlobalAttributeId int, ControlName nvarchar(300), ValidationName nvarchar(300),SubValidationName nvarchar(300),
			 RegExp nvarchar(300), ValidationValue nvarchar(300),IsRegExp Bit)

			Declare	@EntityAttributeValueList as	table  (GlobalAttributeId int,AttributeValue nvarchar(max),
			GlobalAttributeValueId int,GlobalAttributeDefaultValueId int,AttributeDefaultValueCode nvarchar(300),
			AttributeDefaultValue nvarchar(300),
			MediaId int,MediaPath nvarchar(300),IsEditable bit,DisplayOrder int )



			Declare	@EntityAttributeDefaultValueList as	table  (GlobalAttributeDefaultValueId int,GlobalAttributeId int,
			AttributeDefaultValueCode nvarchar(300),AttributeDefaultValue nvarchar(300),RowId int,IsEditable bit,DisplayOrder int )

			 set @LocaleId = (select top 1 LocaleId from ZnodeLocale where Code = @LocaleCode)


			IF ISnull(@GroupCode, '') = '' 
            Begin
                insert into @EntityAttributeList
                    (   GlobalEntityId ,EntityName ,EntityValue ,
                    GlobalAttributeGroupId ,GlobalAttributeId ,AttributeTypeId ,AttributeTypeName ,
                    AttributeCode  ,IsRequired ,IsLocalizable ,AttributeName,HelpDescription,DisplayOrder ) 
                    SELECT qq.GlobalEntityId,qq.EntityName,@EntityValue EntityValue,ww.GlobalAttributeGroupId,
                    c.GlobalAttributeId,c.AttributeTypeId,q.AttributeTypeName,c.AttributeCode,c.IsRequired,
                    c.IsLocalizable,f.AttributeName,c.HelpDescription,c.DisplayOrder
                 FROM dbo.ZnodeGlobalEntity AS qq
					  INNER JOIN dbo.ZnodeGlobalAttributeFamily AS w ON qq.GlobalEntityId = w.GlobalEntityId
					  INNER JOIN dbo.ZnodeGlobalFamilyGroupMapper AS FGM ON FGM.GlobalAttributeFamilyId = w.GlobalAttributeFamilyId
					  INNER JOIN dbo.ZnodeGlobalAttributeGroupMapper AS ww ON ww.GlobalAttributeGroupId = FGM.GlobalAttributeGroupId
					  INNER JOIN dbo.ZnodeGlobalAttribute AS c ON ww.GlobalAttributeId = c.GlobalAttributeId
					  INNER JOIN dbo.ZnodeAttributeType AS q ON c.AttributeTypeId = q.AttributeTypeId
					  INNER JOIN dbo.ZnodeGlobalAttributeLocale AS f ON c.GlobalAttributeId = f.GlobalAttributeId
					  Where qq.EntityName=@EntityName AND ( f.LocaleId = isnull(@LocaleId, 0 ) or isnull(@LocaleId,0) = 0 )
					  and w.GlobalAttributeFamilyId = @GlobalFamilyId
            END 
            Else 
            Begin
                insert into @EntityAttributeList
                    (   GlobalEntityId ,EntityName ,EntityValue ,
                    GlobalAttributeGroupId ,GlobalAttributeId ,AttributeTypeId ,AttributeTypeName ,
                    AttributeCode  ,IsRequired ,IsLocalizable ,AttributeName,HelpDescription,DisplayOrder ) 
                    SELECT qq.GlobalEntityId,qq.EntityName,@EntityValue EntityValue,ww.GlobalAttributeGroupId,
                    c.GlobalAttributeId,c.AttributeTypeId,q.AttributeTypeName,c.AttributeCode,c.IsRequired,
                    c.IsLocalizable,f.AttributeName,c.HelpDescription,c.DisplayOrder
                 FROM dbo.ZnodeGlobalEntity AS qq
						INNER JOIN dbo.ZnodeGlobalAttributeFamily AS w ON qq.GlobalEntityId = w.GlobalEntityId
					  INNER JOIN dbo.ZnodeGlobalFamilyGroupMapper AS FGM ON FGM.GlobalAttributeFamilyId = w.GlobalAttributeFamilyId
					  INNER JOIN dbo.ZnodeGlobalAttributeGroupMapper AS ww ON ww.GlobalAttributeGroupId = FGM.GlobalAttributeGroupId
					  INNER JOIN dbo.ZnodeGlobalAttribute AS c ON ww.GlobalAttributeId = c.GlobalAttributeId
					  INNER JOIN dbo.ZnodeAttributeType AS q ON c.AttributeTypeId = q.AttributeTypeId
					  INNER JOIN dbo.ZnodeGlobalAttributeLocale AS f ON c.GlobalAttributeId = f.GlobalAttributeId
					  Where qq.EntityName=@EntityName AND ( f.LocaleId = isnull(@LocaleId, 0 ) or isnull(@LocaleId,0) = 0 )
					  and w.GlobalAttributeFamilyId = @GlobalFamilyId	
                      AND exists( select 1 from ZnodeGlobalAttributeGroup g where ww.GlobalAttributeGroupId = g.GlobalAttributeGroupId and g.GroupCode = @GroupCode )
            END
	

		  INSERT INTO @EntityAttributeValidationList
		  (GlobalAttributeId,ControlName , ValidationName ,SubValidationName ,
		RegExp, ValidationValue,IsRegExp)

		 Select aa.GlobalAttributeId,i.ControlName,i.Name AS ValidationName,j.ValidationName AS SubValidationName,
		j.RegExp,k.Name AS ValidationValue,CAST(CASE WHEN j.RegExp IS NULL THEN 0 ELSE 1 END AS BIT) AS IsRegExp
		
		fROM @EntityAttributeList aa
		  inner  JOIN dbo.ZnodeGlobalAttributeValidation AS k ON k.GlobalAttributeId = aa.GlobalAttributeId
          inner  JOIN dbo.ZnodeAttributeInputValidation AS i ON k.InputValidationId = i.InputValidationId
          LEFT  JOIN dbo.ZnodeAttributeInputValidationRule AS j ON k.InputValidationRuleId = j.InputValidationRuleId

		  insert into @EntityAttributeValueList
		  (GlobalAttributeId,GlobalAttributeValueId,GlobalAttributeDefaultValueId,AttributeValue ,MediaId,MediaPath)
		  Select GlobalAttributeId,aa.UserGlobalAttributeValueId,bb.GlobalAttributeDefaultValueId,
		  case when bb.MediaPath is not null then  @V_MediaServerThumbnailPath+bb.MediaPath--+'~'+convert(nvarchar(10),bb.MediaId) 
		  else bb.AttributeValue end,		  
		  bb.MediaId,bb.MediaPath
		  from  dbo.ZnodeUserGlobalAttributeValue aa
		   inner join ZnodeUserGlobalAttributeValueLocale bb ON bb.UserGlobalAttributeValueId = aa.UserGlobalAttributeValueId 
		  Where  UserId=@GlobalEntityValueId

		 update aa
		  Set AttributeDefaultValueCode= h.AttributeDefaultValueCode,
              AttributeDefaultValue=g.AttributeDefaultValue,
			  GlobalAttributeDefaultValueId=g.GlobalAttributeDefaultValueId,
			  AttributeValue=case when aa.AttributeValue is  null then h.AttributeDefaultValueCode else aa.AttributeValue end, 
			  IsEditable = ISNULL(h.IsEditable, 1),DisplayOrder = h.DisplayOrder
		  from  @EntityAttributeValueList aa
		  inner JOIN dbo.ZnodeGlobalAttributeDefaultValue h ON h.GlobalAttributeDefaultValueId = aa.GlobalAttributeDefaultValueId                                       
          inner JOIN dbo.ZnodeGlobalAttributeDefaultValueLocale g ON h.GlobalAttributeDefaultValueId = g.GlobalAttributeDefaultValueId
          
		  insert into @EntityAttributeDefaultValueList
		  (GlobalAttributeDefaultValueId,GlobalAttributeId,AttributeDefaultValueCode,
			AttributeDefaultValue ,RowId ,IsEditable ,DisplayOrder )
		  Select  h.GlobalAttributeDefaultValueId, aa.GlobalAttributeId,h.AttributeDefaultValueCode,g.AttributeDefaultValue,0,ISNULL(h.IsEditable, 1),
		  h.DisplayOrder
		  from  @EntityAttributeList aa
		  inner JOIN dbo.ZnodeGlobalAttributeDefaultValue h ON h.GlobalAttributeId = aa.GlobalAttributeId
          inner JOIN dbo.ZnodeGlobalAttributeDefaultValueLocale g ON h.GlobalAttributeDefaultValueId = g.GlobalAttributeDefaultValueId
		  
		   if not exists (Select 1 from @EntityAttributeList )
			Begin
				insert into @EntityAttributeList
				(	GlobalEntityId ,EntityName ,EntityValue ,
				GlobalAttributeGroupId ,GlobalAttributeId ,AttributeTypeId ,AttributeTypeName ,
				AttributeCode  ,IsRequired ,IsLocalizable ,AttributeName,HelpDescription  ) 
				SELECT qq.GlobalEntityId,qq.EntityName,@EntityValue EntityValue,0 GlobalAttributeGroupId,
				0 GlobalAttributeId,0 AttributeTypeId,''AttributeTypeName,''AttributeCode,0 IsRequired,
				0 IsLocalizable,'' AttributeName,'' HelpDescription
				FROM dbo.ZnodeGlobalEntity AS qq
				 Where qq.EntityName=@EntityName 
			End
				

			SELECT GlobalEntityId,EntityName,EntityValue,GlobalAttributeGroupId,
			AA.GlobalAttributeId,AttributeTypeId,AttributeTypeName,AttributeCode,IsRequired,
			IsLocalizable,AttributeName,ControlName,ValidationName,SubValidationName,RegExp,
			ValidationValue,cast(isnull(IsRegExp,0) as bit)  IsRegExp,
			HelpDescription,AttributeValue,GlobalAttributeValueId,bb.GlobalAttributeDefaultValueId,
			aab.AttributeDefaultValueCode,
			aab.AttributeDefaultValue,isnull(aab.RowId,0)   RowId,cast(isnull(aab.IsEditable,0) as bit)   IsEditable
			,bb.MediaId,AA.DisplayOrder
			fROM @EntityAttributeList AA				
			left join @EntityAttributeDefaultValueList aab on aab.GlobalAttributeId=AA.GlobalAttributeId	
			left join @EntityAttributeValidationList vl on vl.GlobalAttributeId=aa.GlobalAttributeId			
			LEFT JOIN @EntityAttributeValueList BB ON BB.GlobalAttributeId=AA.GlobalAttributeId		 
		    and ( (aab.GlobalAttributeDefaultValueId=bb.GlobalAttributeDefaultValueId	)
			or  ( bb.MediaId is not null and isnull(vl.ValidationName,'')='IsAllowMultiUpload'  and bb.GlobalAttributeDefaultValueId is null )
			or  ( bb.MediaId is  null and  bb.GlobalAttributeDefaultValueId is null ))
			order by AA.DisplayOrder,aab.DisplayOrder

			SELECT 1 AS ID,CAST(1 AS BIT) AS Status;       
		  END TRY
         BEGIN CATCH
		 SELECT ERROR_MESSAGE()
             DECLARE @Status BIT ;
		  SET @Status = 0;
		  DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(),
		   @ErrorLine VARCHAR(100)= ERROR_LINE(),
		    @ErrorCall NVARCHAR(MAX)= null       			 
          SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		 
          EXEC Znode_InsertProcedureErrorLog
            @ProcedureName = 'Znode_GetGlobalEntityValueAttributeValues',
            @ErrorInProcedure = @Error_procedure,
            @ErrorMessage = @ErrorMessage,
            @ErrorLine = @ErrorLine,
            @ErrorCall = @ErrorCall;
         END CATCH;
     END;
go
if exists(select * from sys.procedures where name = 'Znode_InsertUpdateGlobalEntityAttributeValue')
	drop proc Znode_InsertUpdateGlobalEntityAttributeValue
go
CREATE PROCEDURE [dbo].[Znode_InsertUpdateGlobalEntityAttributeValue]
(   @GlobalEntityValueXml NVARCHAR(max),
    @GlobalEntityValueId int,
	@EntityName varchar(200),
	@FamilyId  INT,
    @UserId     INT,
    @status     BIT OUT )
AS
/*
     Summary : To Insert / Update single Global Entity Value with multiple attribute values 
     Update Logic: 
*/
     BEGIN
         BEGIN TRAN A;
         BEGIN TRY

		     DECLARE @ConvertedXML XML = REPLACE(REPLACE(REPLACE(@GlobalEntityValueXml,' & ', '&amp;'),'"', '&quot;'),'''', '&apos;')
              DECLARE @GlobalEntityValueDetail_xml GlobalEntityValueDetail;

             INSERT INTO @GlobalEntityValueDetail_xml
			 (GlobalAttributeId,GlobalAttributeValueId,GlobalAttributeDefaultValueId,AttributeCode,AttributeValue
			 ,LocaleId,GlobalEntityValueId)
			SELECT Tbl.Col.value('GlobalAttributeId[1]', 'int') AS GlobalAttributeId,
			Tbl.Col.value('GlobalAttributeValueId[1]', 'int') AS GlobalAttributeValueId,
			Tbl.Col.value('GlobalAttributeDefaultValueId[1]', 'int') AS GlobalAttributeDefaultValueId,
			Tbl.Col.value('AttributeCode[1]', 'NVARCHAR(300)') AS AttributeCode,
			Tbl.Col.value('AttributeValue[1]', 'NVARCHAR(MAX)') AS AttributeValue,
			Tbl.Col.value('LocaleId[1]', 'INT') AS LocaleId,
			@GlobalEntityValueId AS GlobalEntityValueId
			FROM @ConvertedXML.nodes('//ArrayOfEntityAttributeDetailsModel/EntityAttributeDetailsModel') AS Tbl(Col);

			Declare @IsFamilyUnique BIT
			set @IsFamilyUnique = (select IsFamilyUnique from ZnodeGlobalEntity where EntityName = @EntityName)
			if(@IsFamilyUnique = 0)
			BEGIN
			   IF EXISTS(select * from ZnodeGlobalEntityFamilyMapper where GlobalEntityId = (select GlobalEntityId from ZnodeGlobalEntity where EntityName = @EntityName) and GlobalAttributeFamilyId = @FamilyId  and GlobalEntityValueId = @GlobalEntityValueId )
					update ZnodeGlobalEntityFamilyMapper set GlobalAttributeFamilyId= @FamilyId where GlobalEntityValueId = @GlobalEntityValueId
			   ELSE
					insert into ZnodeGlobalEntityFamilyMapper values (@FamilyId,(select GlobalEntityId from ZnodeGlobalEntity where  EntityName = @EntityName),@GlobalEntityValueId)
			END

			If @EntityName='Store'
             EXEC [dbo].[Znode_ImportInsertUpdatePortalGlobalAttributeValue]
                  @GlobalEntityValueDetail_xml,
                  @UserId,
                  @status OUT,0 ; 
			else If @EntityName='User'
			EXEC [dbo].[Znode_ImportInsertUpdateUserGlobalAttributeValue]
                  @GlobalEntityValueDetail_xml,
                  @UserId,
                  @status OUT,0 ; 
			else If @EntityName='Account'
			EXEC [dbo].Znode_ImportInsertUpdateAccountGlobalAttributeValue
                  @GlobalEntityValueDetail_xml,
                  @UserId,
                  @status OUT,0 ; 
			else If @EntityName='FormBuilder'
			EXEC [dbo].Znode_ImportInsertUpdateFormBuilderGlobalAttributeValue
                  @GlobalEntityValueDetail_xml,
                  @UserId,
                  @status OUT,0 ; 
			
             SET @status = 1;
             COMMIT TRAN A;
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE()
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC [Znode_InsertUpdateGlobalEntityValue] @GlobalEntityValueXml= '+CAST(@GlobalEntityValueXml AS VARCHAR(max))+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
			 ROLLBACK TRAN A;
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_InsertUpdateGlobalEntityValue',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
go
if exists(select * from sys.procedures where name = 'Znode_DeleteGlobalAttributeFamily')
	drop proc Znode_DeleteGlobalAttributeFamily
go
CREATE PROCEDURE [dbo].[Znode_DeleteGlobalAttributeFamily]
(@GlobalAtrributeFamilyId  VARCHAR(2000),
@status  BIT OUT)


AS

BEGIN
			BEGIN TRY
			 BEGIN TRAN DeleteAttributeFamily
			 DECLARE @AttributeFamilyId TABLE(GlobalAtrributeFamilyId int)

			 INSERT @AttributeFamilyId (GlobalAtrributeFamilyId)
			 SELECT item FROM  dbo.Split(@GlobalAtrributeFamilyId, ',')

			 DECLARE @DeleteFamily TABLE(DeleteFamilyId int)
			 INSERT @DeleteFamily (DeleteFamilyId )
			 SELECT  GlobalAtrributeFamilyId from @AttributeFamilyId AFI
			 inner JOIN ZnodeGlobalAttributeFamily GEFM ON AFI.GlobalAtrributeFamilyId = GEFM.GlobalAttributeFamilyId
			 WHERE NOT EXISTS
			 (
				SELECT TOP 1 1 FROM ZnodeGlobalEntityFamilyMapper GFM where 
				GFM.GlobalAttributeFamilyId = GlobalAtrributeFamilyId
			 )

			DELETE FROM ZnodeGlobalFamilyGroupMapper
			WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @DeleteFamily AS DF
                 WHERE DF.DeleteFamilyId = ZnodeGlobalFamilyGroupMapper.GlobalAttributeFamilyId
             );

           
             DELETE FROM ZnodeGlobalAttributeFamilyLocale
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @DeleteFamily AS DF
                 WHERE  DF.DeleteFamilyId = ZnodeGlobalAttributeFamilyLocale.GlobalAttributeFamilyId
             );

             DELETE FROM ZnodeGlobalAttributeFamily
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @DeleteFamily AS DF
                 WHERE  DF.DeleteFamilyId = ZnodeGlobalAttributeFamily.GlobalAttributeFamilyId
             );


			   IF
             (
                 SELECT COUNT(1)
                 FROM @DeleteFamily
             ) =
             (   -- check statement with counts if equal then data set return true else return false
                 SELECT COUNT(1)
                 FROM @AttributeFamilyId
             )   
                 BEGIN
                     SET @Status = 1;
                     SELECT 1 AS ID,
                            CAST(1 AS BIT) AS [Status];
                 END;
             ELSE
                 BEGIN
                     SET @Status = 0;
                     SELECT 1 AS ID,
                            CAST(0 AS BIT) AS [Status];
                 END;
             COMMIT TRAN DeleteAttributeFamily;
			END TRY

		BEGIN CATCH
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
			 @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_DeleteGlobalAttributeFamily 
			 @GlobalAtrributeFamilyId = '+@GlobalAtrributeFamilyId+',@Status='+CAST(@Status AS VARCHAR(50));  
			  
			  SET @Status =0  
			  SELECT 1 AS ID,@Status AS Status;  
              ROLLBACK TRAN DeleteAttributeFamily;
              EXEC Znode_InsertProcedureErrorLog
                   @ProcedureName = 'Znode_DeleteGlobalAttributeFamily',
                   @ErrorInProcedure = @Error_procedure,
                   @ErrorMessage = @ErrorMessage,
                   @ErrorLine = @ErrorLine,
                   @ErrorCall = @ErrorCall;
       
		END CATCH

END
go
if exists(select * from sys.procedures where name = 'Znode_GetGlobalAttributeFamilies')
	drop proc Znode_GetGlobalAttributeFamilies
go
CREATE PROCEDURE [dbo].[Znode_GetGlobalAttributeFamilies]    
( @WhereClause NVARCHAR(Max) = '',    
  @Rows        INT           = 100,    
  @PageNo      INT           = 1,    
  @Order_BY VARCHAR(1000)    = '',    
  @RowsCount   INT OUT)    
AS    
/*    
Summary: This procedure is used get ZnodeGlobalAttributeFamily from both the locale    
   The result is displayed order by GlobalAttributeFamilyId in descending order    
Unit Testing:    
      
   DECLARE @Ree INT     
         EXEC Znode_GetGlobalAttributeFamilies @WhereClause= 'LocaleId = 1' , @RowsCount =  @Ree OUT, @PageNo = 1, @Rows = 10     
       
       
*/    
     BEGIN    
         SET NOCOUNT ON;    
         BEGIN TRY    
             DECLARE @SQL NVARCHAR(MAX);    
    DECLARE @TBL_GlobalAttributeFamily TABLE (GlobalAttributeFamilyId int,FamilyCode VARCHAR(200),AttributeFamilyName NVARCHAR(300),LocaleId INT,GlobalEntityId INT,EntityName NVARCHAR(300),RowId INT,CountNo INT )    
               
    SET @SQL = '    
     ;WITH CTE_GlobalAttributeFamilyList AS    
     ( SELECT ZGAF.GlobalAttributeFamilyId,ZGAF.FamilyCode,ZGAFL.LocaleId,ZGAFL.AttributeFamilyName,ZGAF.GlobalEntityId,ZGE.EntityName    
       FROM ZnodeGlobalAttributeFamily ZGAF     
          Inner JOIN ZnodeGlobalAttributeFamilyLocale ZGAFL on (ZGAF.GlobalAttributeFamilyId = ZGAFL.GlobalAttributeFamilyId )    
    Inner JOIN ZnodeGlobalEntity ZGE on (ZGAF.GlobalEntityId = ZGE.GlobalEntityId )    
      )    
    
        ,CTE_GlobalAttributeFamily AS    
         ( SELECT GlobalAttributeFamilyId,FamilyCode,LocaleId,AttributeFamilyName,GlobalEntityId,EntityName  
        ,'+dbo.Fn_GetPagingRowId(@Order_BY,'GlobalAttributeFamilyId DESC')+',Count(*)Over() CountNo    
        FROM CTE_GlobalAttributeFamilyList    
           WHERE 1=1     
        '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'        
      )    
     SELECT GlobalAttributeFamilyId,FamilyCode,LocaleId,AttributeFamilyName,GlobalEntityId,EntityName,RowId,CountNo    
     FROM CTE_GlobalAttributeFamily    
     '+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)    
   
  
     INSERT INTO @TBL_GlobalAttributeFamily(GlobalAttributeFamilyId,FamilyCode,LocaleId,AttributeFamilyName,GlobalEntityId,EntityName,RowId,CountNo)    
     EXEC(@SQL)    
    
     SET @RowsCount = ISNULL((SELECT TOP 1 CountNo FROM @TBL_GlobalAttributeFamily),0)    


    
     SELECT GlobalAttributeFamilyId,FamilyCode,LocaleId,AttributeFamilyName,GlobalEntityId,EntityName    
     FROM  @TBL_GlobalAttributeFamily    
     
         END TRY    
         BEGIN CATCH    
          DECLARE @Status BIT ;    
       SET @Status = 0;    
       DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetGlobalAttributeFamilies @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));    
                      
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                        
        
             EXEC Znode_InsertProcedureErrorLog    
    @ProcedureName = 'Znode_GetGlobalAttributeFamilies',    
    @ErrorInProcedure = @Error_procedure,    
    @ErrorMessage = @ErrorMessage,    
    @ErrorLine = @ErrorLine,    
    @ErrorCall = @ErrorCall;                                
         END CATCH;    
     END;
go

if exists(select * from sys.procedures where name = 'Znode_UnassociateGroupFromFamily')
	drop proc Znode_UnassociateGroupFromFamily
go
CREATE PROCEDURE [dbo].[Znode_UnassociateGroupFromFamily](
       @GlobalAttributeGroupId  VARCHAR(2000) ,
       @GlobalAttributeFamilyId INT  )
AS 
    /*
    Summary:  Check and unassociate the group from family if attribute of group is present in pim values then dont
    		  unassociate the group from family
 
   */
     BEGIN
         BEGIN TRAN B;
         BEGIN TRY
             SET NOCOUNT ON; 
			 DECLARE @GlobalEntityId as int
			 SET  @GlobalEntityId = (select GlobalEntityId from ZnodeGlobalAttributeFamily where GlobalAttributeFamilyId = @GlobalAttributeFamilyId)
			 Declare @TableName nvarchar(200) ,@SQL nvarchar(max) 
             ---- Declare the table to store the comma seperated data into record format ------------
             DECLARE @TBL_Group TABLE (
                                      ID                  INT ,
                                      GlobalAttributeGroupId INT
									  );
			DECLARE @TBL_NotToDeleteGroup TABLE (GlobalAttributeGroupId INT
									  );

			Select @TableName=TableName
			from ZnodeGlobalEntity
			Where GlobalEntityId =@GlobalEntityId

			if @TableName is not null
			Begin
		    	Set @SQL =' Select GlobalAttributeGroupId 
						from [dbo].['+@TableName+'] a
						inner join ZnodeGlobalAttributeGroupMapper b on a.GlobalAttributeId=b.GlobalAttributeId
						inner join dbo.Split('''+@GlobalAttributeGroupId+''','','') c on c.item =b.GlobalAttributeGroupId
						group by GlobalAttributeGroupId '
				   Begin Try
					  insert into @TBL_NotToDeleteGroup
					   EXEC SP_EXECUTESQl  @SQL
				   End Try
					Begin Catch
					End  Catch;
			end 


             INSERT INTO @TBL_Group
                    SELECT ID , item 
                    FROM ZnodeGlobalAttributeGroup  ZGAG 
					INNER JOIN dbo.split ( @GlobalAttributeGroupId , ',' ) SP ON (SP.Item = ZGAG.GlobalAttributeGroupId) --- store the comma separeted category id into variable table 
					Where not exists (Select 1 
					from @TBL_NotToDeleteGroup d
					Where d.GlobalAttributeGroupId=sp.Item )
					
					 

                BEGIN
                     DELETE FROM ZnodeGlobalFamilyGroupMapper
                     WHERE EXISTS ( SELECT TOP 1 1
                                    FROM @TBL_Group AS gwa
                                    WHERE gwa.GlobalAttributeGroupId = ZnodeGlobalFamilyGroupMapper.GlobalAttributeGroupId									
                                  )
					 AND ZnodeGlobalFamilyGroupMapper.GlobalAttributeFamilyId =@GlobalAttributeFamilyId;
                    

					  IF( SELECT COUNT(1) FROM @TBL_Group ) =
					 ( SELECT COUNT(1) FROM Split(@GlobalAttributeGroupId, ',') )   
						 BEGIN
								SELECT 1 AS ID,CAST(1 AS BIT) AS [Status];
						 END;
					 ELSE
						 BEGIN
							  SELECT 1 AS ID,CAST(0 AS BIT) AS [Status];
						 END;

                 END;
             COMMIT TRAN B;
         END TRY
         BEGIN CATCH
               DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			   @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_UnassociateGroupEntity @GlobalAttributeGroupId = '+@GlobalAttributeGroupId+',@GlobalEntityId='+CAST(@GlobalEntityId AS VARCHAR(200));
             SELECT 0 AS ID,
                    CAST(0 AS BIT) AS Status;
			 ROLLBACK TRAN B;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_UnassociateGroupEntity',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
go

if exists(select * from sys.procedures where name = 'Znode_DeleteGlobalAttributeGroup')
	drop proc Znode_DeleteGlobalAttributeGroup
go
CREATE PROCEDURE [dbo].[Znode_DeleteGlobalAttributeGroup]
( @GlobalAttributeGroupId VARCHAR(2000),
  @Status                BIT OUT,
  @IsDebug bit = 0)
AS 
   /*
     Summary: Remove attribute group with details from child tables
     Before delete check is not system defined group or is not associated with any family or attribute 
     output dataset contain the status if passed @GlobalAttributegroupedId all ids are deleted then this will true other wise false 
     dbo.Split function use to make comma separeted data in table rows 
     Delete table sequence 
     1.[ZnodeGlobalAttributeGroupMapper]
     2.[ZnodeGlobalAttributeGroupLocale]
     3.[ZnodeGlobalAttributeGroup]
     Unit Testing
	 begin tran   
     EXEC ZNode_DeleteGlobalAttributeGroup 15,1
     rollback tran
  */
     BEGIN
         BEGIN TRY
             BEGIN TRAN DeleteAttributeGroup;
			 -- to hold the group ids
             DECLARE @TBL_DeletedGroupedId TABLE(GlobalAttributeGroupId INT); 
             INSERT INTO @TBL_DeletedGroupedId(GlobalAttributeGroupId)
                    SELECT Item
                    FROM  dbo.Split(@GlobalAttributeGroupId, ',') a
					inner join ZnodeGlobalAttributeGroup b on a.item = b.GlobalAttributeGroupId
					Where NOT EXISTS ( SELECT TOP 1 1
                                       FROM ZnodeGlobalFamilyGroupMapper AS c
                                       WHERE c.GlobalAttributeGroupId = item
                                     )
					and b.IsSystemDefined <> 1
			                   
            DELETE FROM ZnodeGlobalFamilyGroupMapper
			WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeletedGroupedId AS a
                 WHERE a.GlobalAttributeGroupId = ZnodeGlobalFamilyGroupMapper.GlobalAttributeGroupId
             );

             DELETE FROM [dbo].[ZnodeGlobalAttributeGroupMapper]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeletedGroupedId AS a
                 WHERE a.GlobalAttributeGroupId = ZnodeGlobalAttributeGroupMapper.GlobalAttributeGroupId
             );
             DELETE FROM [dbo].[ZnodeGlobalAttributeGroupLocale]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeletedGroupedId AS a
                 WHERE a.GlobalAttributeGroupId = ZnodeGlobalAttributeGroupLocale.GlobalAttributeGroupId
             );
             DELETE FROM [dbo].[ZnodeGlobalAttributeGroup]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeletedGroupedId AS a
                 WHERE a.GlobalAttributeGroupId = ZnodeGlobalAttributeGroup.GlobalAttributeGroupId
             );
             IF
             (
                 SELECT COUNT(1)
                 FROM @TBL_DeletedGroupedId
             ) =
             (   -- check statement with counts if equal then data set return true else return false
                 SELECT COUNT(1)
                 FROM Split(@GlobalAttributeGroupId, ',')
             )   
                 BEGIN
                     SET @Status = 1;
                     SELECT 1 AS ID,
                            CAST(1 AS BIT) AS [Status];
                 END;
             ELSE
                 BEGIN
                     SET @Status = 0;
                     SELECT 1 AS ID,
                            CAST(0 AS BIT) AS [Status];
                 END;
             COMMIT TRAN DeleteAttributeGroup;
         END TRY
         BEGIN CATCH
		    -- SELECT ERROR_MESSAGE()
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC ZNode_DeleteGlobalAttributeGroup @GlobalAttributegroupedId = '+@GlobalAttributeGroupId+',@Status='+CAST(@Status AS VARCHAR(50));
            	SET @Status = 0  
				SELECT 1 AS ID,@Status AS Status;  
				ROLLBACK TRAN DeleteAttributeGroup;
				EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'ZNode_DeleteGlobalAttributeGroup',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
go
if exists(select * from sys.procedures where name = 'Znode_GetQuickOrderPublishProduct')
	drop proc Znode_GetQuickOrderPublishProduct
go
CREATE PROCEDURE [dbo].[Znode_GetQuickOrderPublishProduct]
(
	@PublishCatalogId int,
	@LocaleId int,
	@PublishCategoryIds NVARCHAR(MAX),
	@SKUs NVARCHAR(MAX),
	@VersionId int,
	@ProductIndex int,
	@PortalId int 
)
AS
/*
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
 EXEC Znode_GetQuickOrderPublishProduct 
@PublishCatalogId= '3',
@LocaleId= '1',
@PublishCategoryIds = '34,35,36,37,38,39,40,41,42,43,50,79,82,83,84,85,86,87,88,90' ,
@SKUs= 'TestConfig1',
@VersionId= '5942',
@ProductIndex= '1',
@PortalId =1 
*/
BEGIN

SET NOCOUNT ON;
BEGIN TRY
	Declare @Getdate datetime = Getdate()
   -- Insert statements for procedure here
	Create table #TBL_SKUs (SKU NVARCHAR(MAX));
	Create table #TBL_CategoryIds (CategoryId INT);

	INSERT INTO #TBL_SKUs
	SELECT item
	FROM dbo.split(@SKUs, ',');

	INSERT INTO #TBL_CategoryIds
	SELECT item
	FROM dbo.split(@PublishCategoryIds, ',');


	----getting publish product associations
	select ZPAVL.AttributeValue as ParentSKU, ZPAP.ParentPimProductId,ZPAP.PimProductId, ZPAVL1.attributeValue as SKU, 
		   IsConfigurable,IsBundle,IsGroup,IsAddOn,IsLink, ZPAP.DisplayOrder, ZPAP.PublishAssociatedProductId
	into #TempProductassociation
	from ZnodePublishAssociatedProduct ZPAP
	inner join ZnodePimAttributeValue ZPAV ON ZPAV.PimProductId = ZPAP.ParentPimProductId
	inner join ZnodePimAttributeValueLocale ZPAVL ON ZPAV.PimattributeValueId = ZPAVL.PimAttributeValueId
	inner join ZnodePimAttributeValue ZPAV1 ON ZPAV1.PimProductId = ZPAP.PimProductId
	inner join ZnodePimAttributeValueLocale ZPAVL1 ON ZPAV1.PimattributeValueId = ZPAVL1.PimAttributeValueId
	where ZPAV.PimattributeId = (select Top 1 PimattributeId from ZnodePimAttribute ZPA where ZPa.AttributeCode = 'SKU')
	AND ZPAV1.PimattributeId = (select Top 1 PimattributeId from ZnodePimAttribute ZPA where ZPa.AttributeCode = 'SKU') 
	and Exists(select * from #TBL_SKUs s where s.sku = ZPAVL.AttributeValue )
	

	----getting publish product associations
	select ParentSKU,  SKU,
		    Row_Number()Over( PARTITION BY  ParentSKU ORDER BY DisplayOrder, PublishAssociatedProductId) RowId
	into #TempConfigProduct
	from #TempProductassociation
	where IsConfigurable = 1

	------getting publish product associations
	--select ZPAVL.AttributeValue as ParentSKU, ZPAP.ParentPimProductId,ZPAP.PimProductId, ZPAVL1.attributeValue as SKU, 
	--	   IsConfigurable,IsBundle,IsGroup,IsAddOn,IsLink, 
	--	    Row_Number()Over( PARTITION BY  ZPAVL.AttributeValue ORDER BY ZPAP.DisplayOrder, ZPAP.PublishAssociatedProductId) RowId
	--into #TempConfigProduct
	--from ZnodePublishAssociatedProduct ZPAP
	--inner join ZnodePimAttributeValue ZPAV ON ZPAV.PimProductId = ZPAP.ParentPimProductId
	--inner join ZnodePimAttributeValueLocale ZPAVL ON ZPAV.PimattributeValueId = ZPAVL.PimAttributeValueId
	--inner join ZnodePimAttributeValue ZPAV1 ON ZPAV1.PimProductId = ZPAP.PimProductId
	--inner join ZnodePimAttributeValueLocale ZPAVL1 ON ZPAV1.PimattributeValueId = ZPAVL1.PimAttributeValueId
	--where ZPAV.PimattributeId = (select Top 1 PimattributeId from ZnodePimAttribute ZPA where ZPa.AttributeCode = 'SKU')
	--AND ZPAV1.PimattributeId = (select Top 1 PimattributeId from ZnodePimAttribute ZPA where ZPa.AttributeCode = 'SKU') 
	--and Exists(select * from #TBL_SKUs s where s.sku = ZPAVL.AttributeValue )
	--and IsConfigurable = 1
	
	SELECT sku.SKU as ParentSKU, case when ParentSKU is null then sku.SKU else config.sku  end as childsku, ParentSKU as ConfigurableProductSKUs
	into #SKUs
	FROM #TBL_SKUs sku
	LEFT JOIN #TempConfigProduct config on sku.sku = config.ParentSKU and RowId = 1
	
	SELECT P.Name,P.SKU,P.ZnodeProductId as Id, P.IsActive as IsActive, P.Attributes, s.ParentSKU , s.ConfigurableProductSKUs 
	into #ProductDetail
	FROM ZnodePublishProductEntity  AS P
	INNER JOIN #SKUs AS S ON P.SKU=S.childsku
	INNER JOIN #TBL_CategoryIds AS C ON C.CategoryId = P.ZnodeCategoryIds
	WHERE ZnodeCatalogId = @PublishCatalogId and LocaleId = @LocaleId and IsActive = 'true' and ZnodeCategoryIds != 0 and ProductIndex = @ProductIndex and VersionId = @VersionId  

	CREATE TABLE #TempSKUInventory (SKU varchar(600),Quantity numeric(28,6),ReOrderLevel numeric(28,6),PortalId int, WarehouseName varchar(100), WarehouseCode varchar(100), DefaultInventoryCount numeric(28,6))

	CREATE TABLE #TempProductPrice 
	(	
		SKU varchar(600),RetailPrice numeric(28,6),SalesPrice numeric(28,6),TierPrice  numeric(28,6),TierQuantity  numeric(28,6),CurrencyCode varchar(100),
		CurrencySuffix varchar(1000),CultureCode varchar(100),ExternalId varchar(1000),Custom1 varchar(1000),Custom2 varchar(1000),Custom3 varchar(1000)
	)

	Declare @NewSKU vaRCHAR(MAX)

	SET @NewSKU = SUBSTRING((SELECT ','+SKU FROM #ProductDetail FOR XML PATH(''),Type).value('.', 'varchar(max)'), 2, 4000);

	----getting products inventory details
	insert into #TempSKUInventory(SKU ,Quantity ,ReOrderLevel ,PortalId, WarehouseName, WarehouseCode, DefaultInventoryCount)
	Execute [Znode_GetInventoryBySkus] @SKUs = @NewSKU, @PortalId = @PortalId

	----getting product pricing details
	insert into #TempProductPrice(SKU,RetailPrice,SalesPrice,TierPrice,TierQuantity,CurrencyCode,CurrencySuffix,CultureCode,ExternalId ,Custom1,Custom2 ,Custom3 )
	Execute [Znode_GetPublishProductPricingBySku] @SKU = @NewSKU, @PortalId=@PortalId, @currentUtcDate=@Getdate

	--getting comma seperated Addon Product
	select TPA.ParentSKU,
		stuff( (SELECT ','+TPA1.SKU FROM #TempProductassociation TPA1 
		WHERE (TPA.ParentPimProductId = TPA1.ParentPimProductId and IsAddOn = 1)
					 FOR XML PATH(''),Type).value('.', 'varchar(max)'), 1, 1, '') as AddOnProductSkus
	into #AddOnProductSkus
	from #TempProductassociation TPA
	where IsAddOn = 1

	----getting comma seperated Configurable Products
	--select TPA.ParentSKU as ConfigurableProductSKUs, TPA.SKU,
	--	 Row_Number()Over( PARTITION BY  TPA.SKU ORDER BY ZPAP.DisplayOrder, ZPAP.PublishAssociatedProductId) RowId
	--into #ConfigurableProductSKUs
	--from #TempProductassociation TPA
	--where IsConfigurable = 1

	--getting comma seperated Group Products
	select TPA.ParentSKU,
		stuff( (SELECT ','+TPA1.SKU FROM #TempProductassociation TPA1 
		WHERE (TPA.ParentPimProductId = TPA1.ParentPimProductId and IsGroup = 1)
					 FOR XML PATH(''),Type).value('.', 'varchar(max)'), 1, 1, '') GroupProductSKUs
		,count(TPA.SKU) as GroupProductsQuantity
	into #GroupProductSKUs
	from #TempProductassociation TPA
	where IsGroup = 1
	group by TPA.ParentSKU, TPA.ParentPimProductId 
		
	--getting comma seperated Link Products
	--select TPA.ParentSKU,
	--	stuff( (SELECT ','+TPA1.SKU FROM #TempProductassociation TPA1 
	--	WHERE (TPA.ParentPimProductId = TPA1.ParentPimProductId and IsLink = 1)
	--				 FOR XML PATH(''),Type).value('.', 'varchar(max)'), 1, 1, '') LinkProductSkus
	--into #LinkProductSkus
	--from #TempProductassociation TPA
	--where IsLink = 1

	--getting comma seperated Bundle Products
	--select TPA.ParentSKU,
	--	stuff( (SELECT ','+TPA1.SKU FROM #TempProductassociation TPA1 
	--	WHERE (TPA.ParentPimProductId = TPA1.ParentPimProductId)
	--				 FOR XML PATH(''),Type).value('.', 'varchar(max)'), 1, 1, '')
	--from #TempProductassociation TPA
	--where IsBundle = 1

	Select PD.SKU, ZPP.PromotionId 
	into #TempProductPromotion
	from #ProductDetail PD
	inner join ZnodePromotionProduct ZPP ON PD.Id = ZPP.PublishProductId 
	where exists(select * from ZnodePromotion ZP inner join ZnodePromotionType ZPT ON ZP.PromotionTypeId = ZPT.PromotionTypeId
	      where ZPP.PromotionId = ZP.PromotionId and ZPT.Name = 'Call For Pricing')

	select DISTINCT PD.Name,PD.SKU,PD.Id as Id, PD.IsActive as IsActive, PD.Attributes, TPP.RetailPrice, 
	       addon.AddOnProductSkus, PD.ConfigurableProductSKUs, grp.GroupProductSKUs, ISNULL(grp.GroupProductsQuantity,0) AS GroupProductsQuantity,
		   ISNULL(Inv.Quantity,0) as QuantityOnHand, Cast(case when Promo.PromotionId is null then 'false' else 'true' end as bit) HasPromotion
	from #ProductDetail PD
	left join #TempProductPrice TPP ON PD.SKU = TPP.SKU
	left join #AddOnProductSkus addon ON PD.SKU = addon.ParentSKU
	left join #GroupProductSKUs grp  ON PD.SKU = grp.ParentSKU
	left join #TempSKUInventory Inv  ON PD.SKU = Inv.SKU
	left join #TempProductPromotion Promo  ON PD.SKU = Promo.SKU
	
END TRY
BEGIN CATCH
	SELECT ERROR_MESSAGE()
	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetQuickOrderPublishProduct @PublishCatalogId = '+cast(@PublishCatalogId as varchar(10))+',@LocaleId= '+cast(@LocaleId as varchar(10))+',@VersionId='+CAST(@VersionId AS VARCHAR(50))+',@PublishCategoryIds='+CAST(@PublishCategoryIds AS VARCHAR(50))+',@SKUs='+CAST(@SKUs AS VARCHAR(10))+',@ProductIndex='+CAST(@ProductIndex AS VARCHAR(10))+',@PortalId='+CAST(@PortalId AS VARCHAR(10));
              			 
	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
	ROLLBACK TRANSACTION GetPublishAssociatedProducts;
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_GetQuickOrderPublishProduct',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
END CATCH;
	
END

go
if exists(select * from sys.procedures where name = 'Znode_GetOmsOrderDetail')
	drop proc Znode_GetOmsOrderDetail
go
CREATE PROCEDURE [dbo].[Znode_GetOmsOrderDetail]
( @WhereClause NVARCHAR(MAx),
  @Rows        INT            = 100,
  @PageNo      INT            = 1,
  @Order_BY    VARCHAR(1000)  = '',
  @RowsCount   INT OUT			,
  @UserId	   INT = 0 ,
  @IsFromAdmin int=0 
 
  )
AS
    /*
     Summary : This procedure is used to get the oms order detils
			   Records are fetched for those users who placed the order i.e UserId is Present in ZnodeUser and  ZnodeOmsOrderDetails tables
	 Unit Testing:

    EXEC [Znode_GetOmsOrderDetail] 'PortalId =1',@Order_BY = '',@RowsCount= 0, @UserId = 0 ,@Rows = 50, @PageNo = 1

	declare @p7 int
	set @p7=4
	exec sp_executesql N'Znode_GetOmsOrderDetail @WhereClause, @Rows,@PageNo,@Order_By,@RowCount OUT,@UserId,@IsFromAdmin',N'@WhereClause nvarchar(30),@Rows int,@PageNo int,@Order_By nvarchar(14),@RowCount int output,@UserId int,@IsFromAdmin int',@WhereClause=N'(PortalId in(''1'',''4'',''5'',''6''))',@Rows=50,@PageNo=1,@Order_By=N'orderdate desc',@RowCount=@p7 output,@UserId=0,@IsFromAdmin=1
	select @p7



   */
     BEGIN
         BEGIN TRY
			SET NOCOUNT ON;
			SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
			DECLARE @SQL NVARCHAR(MAX), @ProcessType  varchar(50)='Order'
			DECLARE @OrderLineItemRelationshipTypeId INT
			SET @OrderLineItemRelationshipTypeId = ( SELECT top 1 OrderLineItemRelationshipTypeId  FROM ZnodeOmsOrderLineItemRelationshipType where Name = 'AddOns' )

			DECLARE @Fn_GetPaginationWhereClause VARCHAR(500) = dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows),
			@Fn_GetFilterWhereClause NVARCHAR(MAX) = dbo.Fn_GetFilterWhereClause(@WhereClause),
			@Fn_GetPagingRowId NVARCHAR(MAX) = ' DENSE_RANK()Over('+ ' Order By '+CASE WHEN Isnull(@Order_BY,'') = '' THEN 'OmsOrderId DESC' ELSE @Order_BY + ',OmsOrderId DESC' END  + ') RowId '
						
			IF OBJECT_ID('tempdb..#OrderList') is not null
			DROP TABLE #OrderList
			IF OBJECT_ID('tempdb..#TBL_OrderList') is not null
			DROP TABLE #TBL_OrderList
			
			IF OBJECT_ID('tempdb..#TBL_RowCount') is not null
			DROP TABLE #TBL_RowCount
				Create table #TBL_RowCount(RowsCount int )
			DECLARE @tbl_GetRecurciveUserId TABLE (ID INT IDENTITY(1,1) Primary key,UserId INT,ParentUserId INT)
			INSERT INTO @tbl_GetRecurciveUserId
			SELECT UserId,ParentUserId FROM dbo.Fn_GetRecurciveUserId (CAST(@UserId AS VARCHAR(50)),@ProcessType ) FNRU
			 
			CREATE TABLE #TBL_OrderList ( OmsOrderId INT,OrderNumber VARCHAR(200),PortalId INT,StoreName NVARCHAR(100),CurrencyCode VARCHAR(100),OrderState NVARCHAR(200),ShippingId INT ,
			PaymentTypeId INT,PaymentSettingId INT,PaymentStatus NVARCHAR(200),PaymentType VARCHAR(100),ShippingStatus BIT ,OrderDate DATETIME,UserId INT,UserName VARCHAR(300),PaymentTransactionToken NVARCHAR(600),Total NUMERIC(28,6),
			OrderItem NVARCHAR(300),OmsOrderDetailsId INT, ItemCount INT,PODocumentPath NVARCHAR(600),IsInRMA BIT,CreatedByName NVARCHAr(200),ModifiedByName NVARCHAR(200),RowId INT,CountNo INT,Email NVARCHAR(200),PhoneNumber NVARCHAR(50),
			SubTotal NUMERIC(28,6),TaxCost NUMERIC(28,6),ShippingCost NUMERIC(28,6),BillingPostalCode NVARCHAR(200),ShippingPostalCode NVARCHAR(200),OrderModifiedDate datetime, PaymentDisplayName nvarchar(200), 
			ExternalId nvarchar(300),CreditCardExpMonth	int,CreditCardExpYear	int,CardType	varchar(50),CreditCardNumber varchar(10),PaymentExternalId nvarchar(1000),CultureCode nvarchar(100),PublishState nvarchar(600))
			
			SELECT Zoo.OmsOrderId,Zoo.OrderNumber, Zp.PortalId,Zp.StoreName ,ZODD.CurrencyCode,case when ZOS.IsShowToCustomer=0 and cast( @IsFromAdmin as varchar(50)) = 0 then ZOSC.Description else  ZOS.Description end  OrderState,ZODD.ShippingId,ZODD.PaymentTypeId,ZODD.PaymentSettingId
			,ZOPS.Name PaymentStatus,ZPS.Name PaymentType,CAST(1 AS BIT) ShippingStatus ,ZODD.OrderDate,ZODD.UserId,ISNULL(RTRIM(LTRIM(ZODD.FirstName)),'')
			+' '+ISNULL(RTRIM(LTRIM(ZODD.LastName)),'') UserName ,ZODD.PaymentTransactionToken ,ZODD.Total ,ZODD.OmsOrderDetailsId,ZODD.PoDocument,
			--ZVGD.UserName CreatedBy ,
			--ZVGDI.UserName ModifiedBy
			'' CreatedBy ,
			'' ModifiedBy

			,ZU.Email ,ZU.PhoneNumber ,ZODD.SubTotal ,ZODD.TaxCost ,ZODD.ShippingCost,ZODD.BillingPostalCode,
			ZODD.ModifiedDate AS OrderModifiedDate,  ZODD.PaymentDisplayName  ,isnull(Zoo.ExternalId,0) ExternalId,ZODD.CreditCardExpMonth,ZODD.CultureCode--,ZODD.TotalAdditionalCost
			,ZODD.CreditCardExpYear,ZODD.CardType,ZODD.CreditCardNumber,ZODD.PaymentExternalId,ZODPS.DisplayName as PublishState,
			'' ProductName, 0 CountId, CAST (0 as bit) IsInRMA 
			INTO #OrderList
			FROM ZnodeOmsOrder (nolock) ZOO 
			INNER JOIN ZnodeOmsOrderDetails (nolock) ZODD ON (ZODD.OmsOrderId = ZOO.OmsOrderId AND  ZODD.IsActive = 1)
			INNER JOIN ZnodePortal (nolock) ZP ON (ZP.PortalId = ZODD.portalId )
			INNER JOIN ZnodePublishState ZODPS ON (ZODPS.PublishStateId = ZOO.PublishStateId)
			LEFT JOIN ZnodePaymentType (nolock) ZPS ON (ZPS.PaymentTypeId = ZODD.PaymentTypeId )
			LEFT JOIN ZnodeOmsOrderStateShowToCustomer (nolock) ZOSC ON (ZOSC.OmsOrderStateId = ZODD.OmsOrderStateId)
			LEFT JOIN ZnodeOmsOrderState (nolock) ZOS ON (ZOS.OmsOrderStateId = ZODD.OmsOrderStateId)
			LEFT JOIN ZnodeOmsPaymentState (nolock) ZOPS ON (ZOPS.OmsPaymentStateId = ZODD.OmsPaymentStateId)
			LEFT JOIN ZnodeUser ZU ON (ZU.UserId = ZODD.UserId)
			--LEFT JOIN [dbo].[View_GetUserDetails]  (nolock) ZVGD ON (ZVGD.UserId = ZODD.CreatedBy )
			--LEFT JOIN [dbo].[View_GetUserDetails]  (nolock) ZVGDI ON (ZVGDI.UserId = ZODD.ModifiedBy)
			LEFT JOIN ZnodeShipping ZS ON (ZS.ShippingId = ZODD.ShippingId)
			LEFT OUTER JOIN ZnodePaymentSetting (nolock) ZPSS ON (ZPSS.PaymentSettingId = ZODD.PaymentSettingId)
			LEFT JOIN ZnodePortalPaymentSetting (nolock) ZPPS ON (ZPPS.PaymentSettingId = ZPSS.PaymentSettingId  AND ZPPS.PortalId = ZODD.PortalId   )
			WHERE (EXISTS (SELECT TOP 1 1 FROM @tbl_GetRecurciveUserId FNRU WHERE FNRU.UserId = ZU.UserId ) OR @UserId  =0 )
		
			ALTER TABLE #OrderList ADD ShippingPostalCode VARCHAR(50)    
			CREATE NONCLUSTERED INDEX [IDX_#OrderList_OmsOrderId] ON [dbo].[#OrderList] (OmsOrderId)
						
			If @WhereClause like  '%ShippingPostalCode%'
				Begin
					CREATE NONCLUSTERED INDEX [IDX_#OrderList_OmsOrderDetailsId] ON [dbo].[#OrderList] (OmsOrderDetailsId)

					UPDATE OL SET OL.ShippingPostalCode=ZOOS.ShipToPostalCode
					from #OrderList OL
					INNER JOIN ZnodeOmsOrderLineItems ZOOLI ON (ZOOLI.OmsOrderDetailsId = OL.OmsOrderDetailsId)
					INNER JOIN ZnodeOmsOrderShipment  ZOOS ON (ZOOLI.OmsOrderShipmentId= ZOOS.OmsOrderShipmentId )
					where Isnull(ZOOS.ShipToPostalCode,'') <> ''
				End
		 
			SET @SQL = '
			SELECT OmsOrderId,OrderNumber,PortalId,StoreName,CurrencyCode,OrderState,ShippingId,PaymentTypeId,PaymentSettingId,
			PaymentStatus,PaymentType,ShippingStatus ,OrderDate,UserId,UserName ,PaymentTransactionToken ,Total ,OmsOrderDetailsId,
			PoDocument,CreatedBy,ModifiedBy,Email ,PhoneNumber ,SubTotal ,TaxCost ,ShippingCost,BillingPostalCode,
			OrderModifiedDate,PaymentDisplayName  ,ExternalId,CreditCardExpMonth,CultureCode,PublishState,
			CreditCardExpYear,CardType,CreditCardNumber,PaymentExternalId,ShippingPostalCode,
			ProductName,CountId ,IsInRMA,'+@Fn_GetPagingRowId+',0 CountNo
			into #Cte_OrderLineDescribe
			FROM #OrderList
			WHERE 1 = 1  ' + @Fn_GetFilterWhereClause+'
			
			Insert Into #TBL_RowCount Values(@@RowCount)
			
			Create index Ind_OrderLineDescribe_RowId on #Cte_OrderLineDescribe(RowId )

			SELECT OmsOrderId,OrderNumber,PortalId,StoreName,CurrencyCode,OrderState,ShippingId,
			PaymentTypeId,PaymentSettingId,PaymentStatus,PaymentType,ShippingStatus,OrderDate,UserId,UserName,PaymentTransactionToken,Total,
			ProductName OrderItem,OmsOrderDetailsId,CountId ItemCount, PoDocument AS PODocumentPath,IsInRMA ,CASE WHEN CreatedBy IS NULL THEN email  ELSE CreatedBy END AS CreatedByName ,
			ModifiedBy as ModifiedByName,--RowId,CountNo,
			Email,PhoneNumber,SubTotal,TaxCost,ShippingCost,BillingPostalCode, ShippingPostalCode,OrderModifiedDate,PaymentDisplayName, 
			ExternalId,CreditCardExpMonth,CreditCardExpYear,CardType,CreditCardNumber,PaymentExternalId,CultureCode,PublishState --TotalAdditionalCost
			FROM #Cte_OrderLineDescribe
			' + @Fn_GetPaginationWhereClause 
			EXEC(@SQL)
			Select @RowsCount= isnull(RowsCount  ,0) from #TBL_RowCount

			--SELECT OmsOrderId,OrderNumber,PortalId,StoreName,CurrencyCode,OrderState,ShippingId,
			--PaymentTypeId,PaymentSettingId,PaymentStatus,PaymentType,ShippingStatus,OrderDate,UserId,UserName,PaymentTransactionToken,Total,
			--OrderItem,OmsOrderDetailsId, ItemCount, PODocumentPath,IsInRMA ,CreatedByName ,ModifiedByName,Email,PhoneNumber,SubTotal,TaxCost,ShippingCost,BillingPostalCode,ShippingPostalCode,OrderModifiedDate,PaymentDisplayName,ExternalId,CreditCardExpMonth,CreditCardExpYear,CardType,CreditCardNumber,PaymentExternalId,CultureCode,PublishState--TotalAdditionalCost
			--FROM #TBL_OrderList
			--order by RowId
						
			IF OBJECT_ID('tempdb..#OrderList') is not null
			DROP TABLE #OrderList
			IF OBJECT_ID('tempdb..#TBL_OrderList') is not null
			DROP TABLE #TBL_OrderList
			IF OBJECT_ID('tempdb..#TBL_RowCount') is not null
			DROP TABLE #TBL_RowCount
	
			
          END TRY
         BEGIN CATCH
             DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetOmsOrderDetail @WhereClause = '''+ISNULL(CAST(@WhereClause AS VARCHAR(max)),'''''')+''',@Rows='''+ISNULL(CAST(@Rows AS VARCHAR(50)),'''''')+''',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',
			 @Order_BY='+ISNULL(@Order_BY,'''''')+',@UserId = '+ISNULL(CAST(@UserId AS VARCHAR(50)),'''')+',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')+',@IsFromAdmin='+ISNULL(CAST(@IsFromAdmin AS VARCHAR(10)),'''');
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetOmsOrderDetail',
				@ErrorInProcedure = 'Znode_GetOmsOrderDetail',
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
go
update znodeapplicationsetting set Setting = '<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>PimProductTypeAssociationId</name>      <headertext>Checkbox</headertext>      <width>20</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>PimProductTypeAssociationId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>RelatedProductId</name>      <headertext>RelatedProductId</headertext>      <width>20</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>PimProductTypeAssociationId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>ProductId</name>      <headertext>ID</headertext>      <width>30</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>productId</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>Image</name>      <headertext>Image</headertext>      <width>20</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>ImagePath,ProductName</imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>imageicon</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>ProductName</name>      <headertext>Product Name</headertext>      <width>60</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>ProductType</name>      <headertext>Product Type</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>SKU</name>      <headertext>SKU</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>SKU</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>8</id>      <name>AvailableInventory</name>      <headertext>Available Inventory</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>SKU</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>9</id>      <name>Assortment</name>      <headertext>Assortment</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>10</id>      <name>DisplayOrder</name>      <headertext>Display Order</headertext>      <width>10</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>3</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>Text</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>11</id>      <name>IsDefault</name>      <headertext>Is Default</headertext>      <width>40</width>      <datatype>Boolean</datatype>      <columntype>Boolean</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>DropDown</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>isDefaultVariant</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>12</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>Delete</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Delete</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/PIM/Products/UnassociateProducts</manageactionurl>      <manageparamfield>PimProductTypeAssociationId,ProductId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>'
where itemname = 'View_ManageProductTypeList'
go
INSERT INTO [dbo].[ZnodeMessage]
          ([MessageCode]
          ,[MessageType]
          ,[MessageName]
          ,[CreatedBy]
          ,[CreatedDate]
          ,[ModifiedBy]
          ,[ModifiedDate])
select 88,'Text','The Account cannot be changed.',2,getdate(),2,getdate()
where not exists(select * from [ZnodeMessage] where [MessageCode] = 88 )
go
if exists(select * from sys.procedures where name = 'Znode_GetGiftCardHistoryList')
	drop proc Znode_GetGiftCardHistoryList
go
CREATE PROCEDURE [dbo].[Znode_GetGiftCardHistoryList]  
(   @WhereClause NVARCHAR(max),  
    @Rows        INT            = 100,  
    @PageNo      INT            = 1,  
    @Order_BY    VARCHAR(1000)  = '',  
    @RowsCount   INT  out 
  )    
AS   
/*   
    Summary: This procedure is used to find the GiftCardhistoryList 

     EXEC Znode_GetGiftCardHistoryList @WhereClause='' ,@PortalId ='1',  @RowsCount= 0,@ExpirationDate = ''  
*/  
  
     BEGIN  
         BEGIN TRY  
             SET NOCOUNT ON;  
             DECLARE @SQL NVARCHAR(MAX);
			 
			 DECLARE @TBL_GiftCardHistoryList TABLE (OmsOrderId INT,OrderNumber NVARCHAR(600),TransactionAmount NUMERIC(28,6),TransactionDate DATETIME,UserName NVARCHAR(512),CustomerName NVARCHAR(512),PortalId INT,UserId INT,OmsUserId INT,GiftCardId INT,CultureCode VARCHAR(100), RowId INT, CountNo INT )  
			   
    SET @SQL ='  
 
      ;WITH CTE_GetGiftHistoryCard AS  
      (  
      SELECT  ZOD.OmsOrderId AS OmsOrderId ,ZO.OrderNumber,ZGH.TransactionAmount,ZGH.TransactionDate,ZU.Email As UserName, 
         CASE WHEN ZU.FirstName IS NULL THEN '''' ELSE ZU.FirstName END + CASE WHEN ZU.LastName IS NULL  THEN '''' ELSE '' ''+ZU.LastName END as CustomerName,ZGC.PortalId,ZGC.UserId,ZOD.UserId as OmsUserId,ZGC.GiftCardId,zc.CultureCode,ZGC.IsActive,ZGC.RemainingAmount
      FROM ZnodeGiftCard ZGC   
      INNER JOIN ZnodeGiftCardHistory ZGH ON (ZGC.GiftCardId = ZGH.GiftCardId)  
      INNER JOIN ZnodeOmsOrderDetails ZOD on (ZGH.OmsOrderDetailsId = ZOD.OmsOrderDetailsId AND ZOD.IsActive = 1)
	  INNER JOIN ZnodePortal ZP ON (ZGC.PortalId = ZP.PortalId)  
      INNER JOIN ZnodePortalUnit zpu on (zp.PortalId = zpu.PortalId)  
      LEFT JOIN ZnodeCulture zc on (zc.CultureId = zpu.CultureId)    
      LEFT JOIN ZnodeOmsOrder ZO on (ZOD.OmsOrderId = ZO.OmsOrderId)  
      LEFT JOIN ZnodeUser ZU ON (ZU.UserId = ZOD.UserId) 	
	   		
      )  
      , CTE_GetGiftCardHistoryList AS  
      (  
      SELECT  OmsOrderId ,OrderNumber,TransactionAmount,TransactionDate,UserName,CustomerName,PortalId,UserId,OmsUserId,GiftCardId,CultureCode,IsActive,RemainingAmount,
      '+dbo.Fn_GetPagingRowId(@Order_BY,'OmsOrderId DESC')+',Count(*)Over() CountNo   
      FROM CTE_GetGiftHistoryCard  
      WHERE 1=1 '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'       
      )  
  
      SELECT  OmsOrderId ,OrderNumber,TransactionAmount,TransactionDate,UserName,CustomerName,PortalId,UserId,OmsUserId,GiftCardId,CultureCode,RowId,CountNo 
      FROM CTE_GetGiftCardHistoryList  
      '+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)  
       
     
   INSERT INTO @TBL_GiftCardHistoryList  
   EXEC(@SQL)  
  
   SET @RowsCount =ISNULL((SELECT TOP 1 CountNo FROM @TBL_GiftCardHistoryList ),0)  
     
   SELECT  OmsOrderId ,OrderNumber,TransactionAmount,TransactionDate,UserName,CustomerName,PortalId,UserId,OmsUserId,GiftCardId,CultureCode
   FROM @TBL_GiftCardHistoryList  
  
      END TRY  
   BEGIN CATCH  
    DECLARE @Status BIT ;  
       SET @Status = 0;  
       DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),  
    @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetGiftCardHIstoryList @WhereClause = '+CAST(@WhereClause AS VARCHAR(MAX))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+'@Status='+CAST(@Status AS VARCHAR(10));  
                    
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                      
      
             EXEC Znode_InsertProcedureErrorLog  
    @ProcedureName = 'Znode_GetGiftCardHistoryList',  
    @ErrorInProcedure = @Error_procedure,  
    @ErrorMessage = @ErrorMessage,  
    @ErrorLine = @ErrorLine,  
    @ErrorCall = @ErrorCall;  
   END CATCH  
     END
go
if exists(select * from sys.procedures where name = 'Znode_GetPublishSingleProductJson')
	drop proc Znode_GetPublishSingleProductJson
go
CREATE PROCEDURE [dbo].[Znode_GetPublishSingleProductJson]
(
	 @PublishCatalogId INT = 0 
	,@VersionId       VARCHAR(50) = 0 
	,@PimProductId    TransferId Readonly 
	,@UserId		  INT = 0 
	,@TokenId nvarchar(max)= ''	
	,@LocaleIds TransferId READONLY
	,@PublishStateId INT = 0  
	,@RevisionType varchar(50)
	,@Status bit = 0 OutPut
	
)
AS


--Declare @PimProductId TransferId 
--insert into @PimProductId  select 230147
-- EXEC Znode_GetPublishSingleProductJson  @PublishCatalogId = 0 ,@VersionId= 0 ,@PimProductId =@PimProductId, @UserId=2 ,@RevisionType ='Production'


BEGIN 
BEGIN TRY 
 SET NOCOUNT ON 

EXEC Znode_InsertUpdatePimAttributeJson 1 
EXEC Znode_InsertUpdateCustomeFieldJson 1
EXEC Znode_InsertUpdateAttributeDefaultValueJson 1 
				
Select ZPLPD.PimParentProductId, ZPLPD.PimProductId, ZPLPD.PimAttributeId, ZPAVL.AttributeValue as SKU
into #LinkProduct
FROM ZnodePimLinkProductDetail ZPLPD 
INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId = ZPLPD.PimProductId)
INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId
WHERE exists(select * from ZnodePimAttribute ZPA where ZPA.PimAttributeId = ZPAV.PimAttributeId and ZPA.AttributeCode = 'SKU')
and exists(select * from @PimProductId pp where ZPLPD.PimParentProductId = pp.Id)

select * into #PimProductId from @PimProductId

create index Idx_#PimProductId_Id on #PimProductId(Id)
 IF OBJECT_ID('tempdb..#Cte_BrandData') is not null
 BEGIN 
	DROP TABLE #Cte_BrandData
 END 
 

 IF OBJECT_ID('tempdb..#ProductIds') is not null
 BEGIN 
	DROP TABLE #ProductIds
 END 

			Create Table #ProductIds (PimProductId int, PublishProductId  int )
			
			--DECLARE @PimProductAttributeJson TABLE(PimAttributeJsonId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )
			CREATE TABLE #PimProductAttributeJson (PimAttributeJsonId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )
			DECLARE @PimDefaultValueLocale  TABLE (PimAttributeDefaultJsonId INT  PRIMARY KEY ,PimAttributeDefaultValueId INT ,LocaleId INT ) 
			DECLARE @ProductNamePimAttributeId INT = dbo.Fn_GetProductNameAttributeId(),@DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId(),@LocaleId INT = 0 
			,@SkuPimAttributeId  INT =  dbo.Fn_GetProductSKUAttributeId() , @IsActivePimAttributeId INT =  dbo.Fn_GetProductIsActiveAttributeId()
			DECLARE @GetDate DATETIME =dbo.Fn_GetDate()
			DECLARE @TBL_LocaleId  TABLE (RowId INT IDENTITY(1,1) PRIMARY KEY  , LocaleId INT )

			DECLARE @DomainUrl varchar(max) = (select TOp 1 URL FROM ZnodeMediaConfiguration WHERE IsActive =1)

			INSERT INTO @TBL_LocaleId (LocaleId)
			SELECT  LocaleId
			FROM ZnodeLocale MT
			WHERE IsActive = 1
			AND (EXISTS (SELECT TOP 1 1  FROM @LocaleIds RT WHERE RT.Id = MT.LocaleId )
			OR NOT EXISTS (SELECT TOP 1 1 FROM @LocaleIds )) 
	
			-----to update link products newly addded and deleted from PIM
			delete ZPAP
			from ZnodePublishAssociatedProduct ZPAP
			where ZPAP.IsLink = 1
			AND not exists(select * from ZnodePimLinkProductDetail ZPPD where ZPAP.ParentPimProductId = ZPPD.PimParentProductId AND ZPAP.PimProductId = ZPPD.PimProductId)
			and exists(select * from #PimProductId PP where PP.Id = ZPAP.ParentPimProductId )

			insert into ZnodePublishAssociatedProduct(PimCatalogId,ParentPimProductId,PimProductId,PublishStateId,IsConfigurable,IsBundle,IsGroup,IsAddOn,IsLink,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			select distinct ZPCH.PimCatalogId, ZPLPD.PimParentProductId, ZPLPD.PimProductId, @PublishStateId, 0, 0, 0, 0, 1, ZPLPD.DisplayOrder, @UserId,@GetDate ,@UserId , @GetDate
			from ZnodePimLinkProductDetail ZPLPD
			INNER JOIN ZnodePimCategoryProduct ZPCP ON ZPLPD.PimParentProductId = ZPCP.PimProductId
			INNER JOIN ZnodePimCategoryHierarchy ZPCH ON ZPCP.PimCategoryId = ZPCH.PimCategoryId
			where exists(select * from #PimProductId PP where PP.Id = ZPLPD.PimParentProductId )
			and not exists(select * from ZnodePublishAssociatedProduct ZPACP where ZPCH.PimCatalogId = ZPACP.PimCatalogId and ZPLPD.PimParentProductId = ZPACP.ParentPimProductId AND ZPLPD.PimProductId = ZPACP.PimProductId  )
		
			-----to update config products newly addded and deleted from PIM
			delete ZPAP
			from ZnodePublishAssociatedProduct ZPAP
			where ZPAP.IsConfigurable = 1
			AND exists(select * from ZnodePimProductTypeAssociation ZPPD where ZPAP.ParentPimProductId = ZPPD.PimParentProductId )
			and exists(select * from #PimProductId PP where PP.Id = ZPAP.ParentPimProductId )

			insert into ZnodePublishAssociatedProduct(PimCatalogId,ParentPimProductId,PimProductId,PublishStateId,IsConfigurable,IsBundle,IsGroup,IsAddOn,IsLink,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate, IsDefault)
			select distinct ZPCH.PimCatalogId, ZPLPD.PimParentProductId, ZPLPD.PimProductId, @PublishStateId, 1, 0, 0, 0, 0, ZPLPD.DisplayOrder, @UserId,@GetDate ,@UserId , @GetDate, ZPLPD.IsDefault
			from ZnodePimProductTypeAssociation ZPLPD
			INNER JOIN ZnodePimCategoryProduct ZPCP ON ZPLPD.PimParentProductId = ZPCP.PimProductId
			INNER JOIN ZnodePimCategoryHierarchy ZPCH ON ZPCP.PimCategoryId = ZPCH.PimCategoryId
			where exists(select * from #PimProductId PP where PP.Id = ZPLPD.PimParentProductId )
			and not exists(select * from ZnodePublishAssociatedProduct ZPACP where ZPCH.PimCatalogId = ZPACP.PimCatalogId and ZPLPD.PimParentProductId = ZPACP.ParentPimProductId AND ZPLPD.PimProductId = ZPACP.PimProductId  )
			--group by ZPCH.PimCatalogId, ZPLPD.PimParentProductId, ZPLPD.PimProductId, ZPLPD.DisplayOrder, ZPLPD.IsDefault
			-------

			DECLARE @Counter INT =1 ,@maxCountId INT = (SELECT max(RowId) FROM @TBL_LocaleId ) 

			CREATE TABLE #TBL_PublishCatalogId (PublishCatalogId INT,PublishProductId INT,PimProductId  INT   , VersionId INT ,LocaleId INT, PriceListId INT , PortalId INT ,MaxSmallWidth NVARCHAr(max)  )
			CREATE INDEX idx_#TBL_PublishCatalogIdPimProductId on #TBL_PublishCatalogId(PimProductId)
			CREATE INDEX idx_#TBL_PublishCatalogIdPimPublishCatalogId on #TBL_PublishCatalogId(PublishCatalogId)

			INSERT INTO #TBL_PublishCatalogId 
			SELECT Distinct ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId, 0,0 ,
			(SELECT TOP 1 PriceListId FROM ZnodePriceListPortal NT 
			INNER JOIN ZnodePimCatalog ZPC on ZPC.PortalId=NT.PortalId  
			ORDER BY NT.Precedence ASC ) ,TY.PortalId,
			(SELECT TOP 1  MAX(MaxSmallWidth) FROM ZnodePortalDisplaySetting TYR WHERE TYR.PortalId = TY.PortalId)
			FROM ZnodePublishProduct ZPP 
			--INNER JOIN ZnodePublishVersionEntity ZPCP ON (ZPCP.ZnodeCatalogId  = ZPP.PublishCatalogId)
			LEFT JOIN ZnodePortalCatalog TY ON (TY.PublishCatalogId = ZPP.PublishCatalogId)
			WHERE (EXISTS (SELECT TOP 1 1 FROM #PimProductId SP WHERE SP.Id = ZPP.PimProductId  
			AND  (@PublishCatalogId IS NULL OR @PublishCatalogId = 0 ))
			OR  (ZPP.PublishCatalogId = @PublishCatalogId ))
			And Exists 
			(Select TOP 1 1 from ZnodePublishVersionEntity ZPCP  where ZPCP.ZnodeCatalogId  = ZPP.PublishCatalogId AND ZPCP.IsPublishSuccess =1 )

			Insert into #ProductIds (PimProductId,PublishProductId) Select distinct PimProductId,PublishProductId from #TBL_PublishCatalogId  

             Create TABLE #TBL_ZnodeTempPublish (PimProductId INT , AttributeCode VARCHAR(300) ,AttributeValue NVARCHAR(max) ) 			
			 DECLARE @TBL_AttributeVAlueLocale TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT,LocaleId INT ,AttributeValue Nvarchar(1000) )


			 INSERT INTO @TBL_AttributeValueLocale (PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId ,LocaleId ,AttributeValue )
			 SELECT VIR.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId,VIR.LocaleId, ''
			 FROM View_LoadManageProductInternal VIR
			 INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = VIR.PimProductId)
			 UNION ALL 
			 SELECT VIR.PimProductId,PimAttributeId,PimProductAttributeMediaId,ZPDE.LocaleId , ''
			 FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimProductAttributeMedia ZPDE ON (ZPDE.PimAttributeValueId = VIR.PimAttributeValueId )
			 WHERE EXISTS (SELECT TOP 1 1 FROM #ProductIds ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
			 Union All 
			 SELECT VIR.PimProductId,VIR.PimAttributeId,ZPDVL.PimAttributeDefaultValueLocaleId,ZPDVL.LocaleId ,ZPDVL.AttributeDefaultValue
			   FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1 )
			 INNER JOIN ZnodePimAttributeDefaultValue ZPADV ON ZPADV.PimAttributeId = D.PimAttributeId
			 INNER JOIN ZnodePimAttributeDefaultValueLocale ZPDVL   on (ZPADV.PimAttributeDefaultValueId = ZPDVL.PimAttributeDefaultValueId)
			 --INNER JOIN ZnodePimProductAttributeDefaultValue ZPDVP ON (ZPDVP.PimAttributeValueId = VIR.PimAttributeValueId AND ZPADV.PimAttributeDefaultValueId = ZPDVP.PimAttributeDefaultValueId )
			 WHERE ( ZPDVL.LocaleId = @DefaultLocaleId OR ZPDVL.LocaleId = @LocaleId )
			 AND EXISTS(SELECT TOP 1 1 FROM #ProductIds ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
			 Union All 
			 SELECT VIR.PimProductId,VIR.PimAttributeId,'','' ,''
			 FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1 )
			 WHERE  EXISTS(SELECT TOP 1 1 FROM #ProductIds ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
		
				--insert INTO #ZnodePrice
				SELECT RetailPrice,SalesPrice,ZC.CurrencyCode,ZCC.CultureCode ,ZCC.Symbol CurrencySuffix,TYU.PublishProductId ,isnull(ZPC1.IsAllowIndexing,0) as IsAllowIndexing
				into #ZnodePrice
				FROM ZnodePrice ZP 
				INNER JOIN ZnodePriceList ZPL ON (ZPL.PriceListId = ZP.PriceListId)
				INNER JOIN ZnodeCurrency ZC oN (ZC.CurrencyId = ZPL.CurrencyId )
				INNER JOIN ZnodeCulture ZCC ON (ZCC.CultureId = ZPL.CultureId)
				INNER JOIN ZnodePublishProductDetail TY ON (TY.SKU = ZP.SKU ) 
				INNER JOIN ZnodePublishProduct TYU ON (TYU.PublishProductId = TY.PublishProductId)
				INNER JOIN ZnodePublishCatalog ZPC ON (TYU.PublishCatalogId = ZPC.PublishCatalogId)
				INNER JOIN ZnodePimCatalog ZPC1 ON (ZPC.PimCatalogId = ZPC1.PimCatalogId)
				WHERE EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId TYUR WHERE TYUR.PriceListId = ZPL.PriceListId AND TYUR.PublishCatalogId = TYU.PublishCatalogId
				AND TYU.PublishProductId = TYUR.PublishProductId)
				AND TY.LocaleId = dbo.Fn_GetDefaultLocaleId()
				AND EXISTS (SELECT TOP 1 1 FROM ZnodePriceListPortal ZPLP 
				INNER JOIN ZnodePimCatalog ZPC on ZPC.PortalId=ZPLP.PortalId WHERE ZPLP.PriceListId=ZP.PriceListId )
				
				--insert INTO #ProductSKU
				SELECT ZCSD.SEOUrl , ZCDL.SEODescription,ZCDL.SEOKeywords ,ZCDL.SEOTitle, TYU.PublishProductId ,isnull(ZPC1.IsAllowIndexing,0) as IsAllowIndexing
				INTO #ProductSKU
				FROM ZnodeCMSSEODetail ZCSD 
				INNER JOIN ZnodeCMSSEODetailLocale ZCDL ON (ZCDL.CMSSEODetailId = ZCSD.CMSSEODetailId)
				INNER JOIN ZnodePublishProductDetail TY ON (TY.SKU = ZCSD.SEOCode AND ZCDL.LocaleId = TY.LocaleId) 
				INNER JOIN ZnodePublishProduct TYU ON (TYU.PublishProductId = TY.PublishProductId)
				INNER JOIN ZnodePublishCatalog ZPC ON (TYU.PublishCatalogId = ZPC.PublishCatalogId)
				INNER JOIN ZnodePimCatalog ZPC1 ON (ZPC.PimCatalogId = ZPC1.PimCatalogId)
				WHERE CMSSEOTypeId = (SELECT TOP 1 CMSSEOTypeId FROM ZnodeCMSSEOType WHERE Name = 'Product') 
				AND EXISTS (SELECT TOP 1 1  FROM #TBL_PublishCatalogId TYUR WHERE  TYUR.PublishCatalogId = TYU.PublishCatalogId
				AND TYU.PublishProductId = TYUR.PublishProductId)
				AND ZCDL.LocaleId = dbo.Fn_GetDefaultLocaleId()
				and ZCSD.PortalId = isnull(ZPC1.PortalId,0)

			
				--insert INTO #ProductImages
				SELECT  TUI.PublishCatalogId, TYU.PublishProductId , @DomainUrl +'Catalog/'  + CAST(Max(ZPC1.PortalId) AS VARCHAr(100)) + '/'+ CAST(Isnull(Max(TUI.MaxSmallWidth),'') AS VARCHAR(100)) + '/' + Isnull(RT.MediaPath,'') AS ImageSmallPath    
				,isnull(ZPC1.IsAllowIndexing,0) as IsAllowIndexing
				INTO #ProductImages
				FROM ZnodePimAttributeValue ZPAV 
				INNER JOIN ZnodePublishProduct TYU ON (TYU.PimProductId  = ZPAV.PimProductId)
				INNER JOIN ZnodePimProductAttributeMedia  RT ON ( RT.PimAttributeValueId = ZPAV.PimAttributeValueId )
				--AND 
				--EXISTS (SELECT TOP 1 1  FROM #TBL_PublishCatalogId TUI WHERE  TUI.PublishProductId = TYU.PublishProductId AND TUI.PublishCatalogId = TYU.PublishCatalogId)
				INNER JOIN #TBL_PublishCatalogId TUI ON (TUI.PublishProductId = TYU.PublishProductId AND TUI.PublishCatalogId = TYU.PublishCatalogId
						 )--AND  TUI.LocaleId = dbo.Fn_GetDefaultLocaleId()
				INNER JOIN ZnodePublishCatalog ZPC ON (TYU.PublishCatalogId = ZPC.PublishCatalogId)
				INNER JOIN ZnodePimCatalog ZPC1 ON (ZPC.PimCatalogId = ZPC1.PimCatalogId)
				WHERE  RT.LocaleId = dbo.Fn_GetDefaultLocaleId()
				AND ZPAV.PimAttributeId = (SELECT TOp 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'ProductImage')
				group by TUI.PublishCatalogId, TYU.PublishProductId ,isnull(RT.MediaPath,''),isnull(ZPC1.IsAllowIndexing,0) 
		  -- end
	  
WHILE @Counter <= @maxCountId
BEGIN
 SET @LocaleId = (SELECT TOP 1 LocaleId FROM @TBL_LocaleId WHERE RowId = @Counter)

  INSERT INTO #PimProductAttributeJson 
  SELECT PimAttributeJsonId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeJSON
  WHERE LocaleId = @LocaleId
  
  INSERT INTO #PimProductAttributeJson 
  SELECT PimAttributeJsonId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeJSON ZPAX
  WHERE ZPAX.LocaleId = @DefaultLocaleId  
  AND NOT EXISTS (SELECT TOP 1 1 FROM #PimProductAttributeJson ZPAXI WHERE ZPAXI.PimAttributeId = ZPAX.PimAttributeId )

  INSERT INTO @PimDefaultValueLocale
  SELECT PimAttributeDefaultJsonId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultJson
  WHERE localeId = @LocaleId

  INSERT INTO @PimDefaultValueLocale 
   SELECT PimAttributeDefaultJsonId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultJson ZX
  WHERE localeId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM @PimDefaultValueLocale TRTR WHERE TRTR.PimAttributeDefaultValueId = ZX.PimAttributeDefaultValueId)
  
 
  --DECLARE @TBL_AttributeVAlue TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT  )
  --DECLARE @TBL_CustomeFiled TABLE (PimCustomeFieldJsonId INT ,CustomCode VARCHAR(300),PimProductId INT ,LocaleId INT )
  CREATE TABLE #TBL_CustomeFiled  (PimCustomeFieldJsonId INT ,CustomCode VARCHAR(300),PimProductId INT ,LocaleId INT )
  CREATE TABLE #TBL_AttributeVAlue (PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT  )



  INSERT INTO #TBL_CustomeFiled (PimCustomeFieldJsonId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldJsonId,RTR.PimProductId ,RTR.LocaleId,CustomCode
  FROM ZnodePimCustomeFieldJson RTR 
  INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = RTR.PimProductId)
  WHERE RTR.LocaleId = @LocaleId
 

  INSERT INTO #TBL_CustomeFiled (PimCustomeFieldJsonId,PimProductId ,LocaleId,CustomCode)
  SELECT  Distinct  PimCustomeFieldJsonId,ITR.PimProductId ,ITR.LocaleId,CustomCode
  FROM ZnodePimCustomeFieldJson ITR
  INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = ITR.PimProductId)
  WHERE ITR.LocaleId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM #TBL_CustomeFiled TBL  WHERE ITR.CustomCode = TBL.CustomCode AND ITR.PimProductId = TBL.PimProductId)
  

    INSERT INTO #TBL_AttributeVAlue (PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId )
    SELECT Distinct  PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId
	FROM @TBL_AttributeVAlueLocale
    WHERE LocaleId = @LocaleId

    
	INSERT INTO #TBL_AttributeVAlue(PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId )
	SELECT VI.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId
	FROM @TBL_AttributeVAlueLocale VI 
    WHERE VI.LocaleId = @DefaultLocaleId 
	AND NOT EXISTS (SELECT TOP 1 1 FROM #TBL_AttributeVAlue  CTE WHERE CTE.PimProductId = VI.PimProductId AND CTE.PimAttributeId = VI.PimAttributeId )
 
	------------Facet Merging Patch --------------
	IF OBJECT_ID('tempdb..#PimChildProductFacets') is not null
	BEGIN 
		DROP TABLE #PimChildProductFacets
	END 

	IF OBJECT_ID('tempdb..#PimAttributeDefaultXML') is not null
	BEGIN 
		DROP TABLE #PimAttributeDefaultXML
	END
	----Getting parent facets data
	Select  ZPPADV.PimAttributeDefaultValueId, ZPAV_Parent.PimAttributeValueId, ZPPADV.LocaleId
	Into #PimChildProductFacets
	from ZnodePimAttributeValue ZPAV_Parent
	inner join ZnodePimProductAttributeDefaultValue ZPPADV ON ZPAV_Parent.PimAttributeValueId = ZPPADV.PimAttributeValueId 
	where exists(select * from #ProductIds ZPPC where ZPAV_Parent.PimProductId = ZPPC.PimProductId )

	----Getting child facets for merging	
	insert into #PimChildProductFacets	  
	Select distinct ZPPADV.PimAttributeDefaultValueId, ZPAV_Parent.PimAttributeValueId, ZPPADV.LocaleId
	from ZnodePimAttributeValue ZPAV_Parent
	inner join ZnodePimProductTypeAssociation ZPPTA ON ZPAV_Parent.PimProductId = ZPPTA.PimParentProductId
	inner join ZnodePimAttributeValue ZPAV_Child ON ZPPTA.PimProductId = ZPAV_Child.PimProductId AND ZPAV_Parent.PimAttributeId = ZPAV_Child.PimAttributeId
	inner join ZnodePimProductAttributeDefaultValue ZPPADV ON ZPAV_Child.PimAttributeValueId = ZPPADV.PimAttributeValueId 
	where exists(select * from ZnodePimFrontendProperties ZPFP where ZPAV_Parent.PimAttributeId = ZPFP.PimAttributeId and ZPFP.IsFacets = 1)
	and exists(select * from #ProductIds ZPPC where ZPAV_Parent.PimProductId = ZPPC.PimProductId )
	and not exists(select * from ZnodePimProductAttributeDefaultValue ZPPADV1 where ZPAV_Parent.PimAttributeValueId = ZPPADV1.PimAttributeValueId 
		            and ZPPADV1.PimAttributeDefaultValueId = ZPPADV.PimAttributeDefaultValueId )

	----Merging childs facet attribute Default value XML for parent
	select  ZPADX.DefaultValueJson, ZPPADV.PimAttributeValueId, ZPPADV.LocaleId
	into #PimAttributeDefaultXML
	from #PimChildProductFacets ZPPADV		  
	inner join ZnodePimAttributeDefaultJson ZPADX ON ( ZPPADV.PimAttributeDefaultValueId = ZPADX.PimAttributeDefaultValueId )--AND ZPPADV.LocaleId = ZPADX.LocaleId)
	INNER JOIN @PimDefaultValueLocale GH ON (GH.PimAttributeDefaultJsonId = ZPADX.PimAttributeDefaultJsonId)
	------------Facet Merging Patch --------------   

	 IF OBJECT_ID('tempdb..#View_LoadManageProductInternal') is not null
	 BEGIN 
		DROP TABLE #View_LoadManageProductInternal
	 END 

	SELECT a.PimProductId ,b.AttributeValue as AttributeValue , b.LocaleId  ,a.PimAttributeId,c.AttributeCode ,b.ZnodePimAttributeValueLocaleId
	into #View_LoadManageProductInternal
	FROM ZnodePimAttributeValue a 
	INNER JOIN  ZnodePimAttributeValueLocale b ON ( b.PimAttributeValueId = a.PimAttributeValueId )
	INNER JOIN ZnodePimAttribute c ON ( c.PimAttributeId=a.PimAttributeId )
	INNER JOIN ZnodePimAttributeJSON c1   ON (c1.PimAttributeId = a.PimAttributeId )
	INNER JOIN #PimProductAttributeJson b1 ON (b1.PimAttributeJsonId = c1.PimAttributeJsonId )
	INNER JOIN #TBL_AttributeVAlue CTE ON (Cte.PimAttributeId = a.PimAttributeId AND Cte.ZnodePimAttributeValueLocaleId = b.ZnodePimAttributeValueLocaleId)
	UNION ALL
	SELECT a.PimProductId,ZPPATAV.AttributeValue AS AttributeValue  
	,ZPPATAV.LocaleId,a.PimAttributeId,c.AttributeCode  ,ZPPATAV.PimProductAttributeTextAreaValueId
	FROM ZnodePimAttributeValue a 
	INNER JOIN ZnodePimProductAttributeTextAreaValue ZPPATAV ON (ZPPATAV.PimAttributeValueId = a.PimAttributeValueId )
	INNER JOIN ZnodePimAttribute c ON ( c.PimAttributeId=a.PimAttributeId )
	INNER JOIN ZnodePimAttributeJSON c1   ON (c1.PimAttributeId = a.PimAttributeId )
	INNER JOIN #PimProductAttributeJson b1 ON (b1.PimAttributeJsonId = c1.PimAttributeJsonId )
	INNER JOIN #TBL_AttributeVAlue CTE ON (Cte.PimAttributeId = a.PimAttributeId AND Cte.ZnodePimAttributeValueLocaleId = ZPPATAV.PimProductAttributeTextAreaValueId)
	
	INSERT INTO #TBL_ZnodeTempPublish  
		SELECT  a.PimProductId,a.AttributeCode , 
			JSON_MODIFY (JSON_MODIFY (Json_Query( c.AttributeJSON  ) , '$.AttributeValues' ,  
			ISNULL(a.AttributeValue,'') ) ,'$.SelectValues',Json_Query('[]'))
			AS 'AttributeValue'
		FROM #View_LoadManageProductInternal a 
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = a.PimAttributeId )
		INNER JOIN #PimProductAttributeJson b ON (b.PimAttributeJsonId = c.PimAttributeJsonId )
		INNER JOIN #TBL_AttributeVAlue CTE ON (Cte.PimAttributeId = a.PimAttributeId AND Cte.ZnodePimAttributeValueLocaleId = a.ZnodePimAttributeValueLocaleId)
	UNION ALL 
			SELECT  a.PimProductId,c.AttributeCode , 
			JSON_MODIFY (JSON_MODIFY (Json_Query( c.AttributeJSON  ) , '$.AttributeValues' ,  
			ISNULL(TAVL.AttributeValue,'') ) ,'$.SelectValues',Json_Query('[]'))
			AS 'AttributeValue'
		FROM ZnodePimAttributeValue  a 
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = a.PimAttributeId )
		INNER JOIN #PimProductAttributeJson b ON (b.PimAttributeJsonId = c.PimAttributeJsonId )
		INNER JOIN ZnodePImAttribute ZPA  ON (ZPA.PimAttributeId = a.PimAttributeId)
		INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = a.PimProductId)
		Inner JOIN @TBL_AttributeVAlueLocale TAVL ON  (c.PimAttributeId = TAVL.PimAttributeId  and ZPP.PimProductId = TAVL.PimProductId )
		WHERE ZPA.IsPersonalizable = 1 
		AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodePimAttributeValueLocale q WHERE q.PimAttributeValueId = a.PimAttributeValueId) 
	UNION ALL 
		SELECT THB.PimProductId,THB.CustomCode,
		--'<Attributes><AttributeEntity>'+CustomeFiledJson +'</AttributeEntity></Attributes>' 
		JSON_MODIFY (Json_Query( CustomeFiledJson ) ,'$.SelectValues',Json_Query('[]')) 
		FROM ZnodePimCustomeFieldJson THB 
		INNER JOIN #TBL_CustomeFiled TRTE ON (TRTE.PimCustomeFieldJsonId = THB.PimCustomeFieldJsonId)
		UNION ALL 
		SELECT ZPAV.PimProductId,c.AttributeCode,
			JSON_MODIFY (JSON_MODIFY (c.AttributeJson,'$.AttributeValues',''), '$.SelectValues',
			Isnull((SELECT 
			Isnull(JSON_VALUE(DefaultValueJson, '$.Code'),'') Code 
			,Isnull(JSON_VALUE(DefaultValueJson, '$.LocaleId'),0) LocaleId
			,IsNull(JSON_VALUE(DefaultValueJson, '$.Value'),'') Value
			,IsNull(JSON_VALUE(DefaultValueJson, '$.AttributeDefaultValue'),'') AttributeDefaultValue
			,Isnull(JSON_VALUE(DefaultValueJson, '$.DisplayOrder'),0) DisplayOrder
			,Isnull(JSON_VALUE(DefaultValueJson, '$.IsEditable'),'false') IsEditable
			,Isnull(JSON_VALUE(DefaultValueJson, '$.SwatchText'),'') SwatchText
			,Isnull(JSON_VALUE(DefaultValueJson, '$.Path'),'') Path
			FROM #PimAttributeDefaultXML ZPADV
			WHERE (ZPADV.PimAttributeValueId = ZPAV.PimAttributeValueId) For JSON Auto 
			),'[]') 
		)  AttributeValue
		FROM ZnodePimAttributeValue ZPAV  With (NoLock)
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
		INNER JOIN #PimProductAttributeJson b ON (b.PimAttributeJsonId = c.PimAttributeJsonId )
		INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
		WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL 
		WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
	UNION ALL 
		SELECT DISTINCT  ZPAV.PimProductId,c.AttributeCode,
			JSON_MODIFY (JSON_MODIFY (Json_Query( c.AttributeJson  ) , '$.AttributeValues',  
			ISNULL((Select stuff( 
			(SELECT ','+ZPPG.MediaPath 
			FROM ZnodePimProductAttributeMedia ZPPG INNER JOIN  #TBL_AttributeVAlue TBLV ON 
			(	TBLV.PimProductId=  ZPAV.PimProductId AND TBLV.PimAttributeId = ZPAV.PimAttributeId )
			WHERE ZPPG.PimProductAttributeMediaId = TBLV.ZnodePimAttributeValueLocaleId
			FOR XML PATH(''),Type).value('.', 'varchar(max)'), 1, 1, '')),'') ) ,'$.SelectValues',Json_Query('[]'))   
			AS 'AttributeEntity'
		FROM ZnodePimAttributeValue ZPAV 
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
		INNER JOIN #PimProductAttributeJson b ON (b.PimAttributeJsonId = c.PimAttributeJsonId )
		INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
		WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeMedia ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
	UNION ALL 
		SELECT ZPLP.PimParentProductId ,c.AttributeCode, 
			JSON_MODIFY( JSON_Modify(c.AttributeJson , '$.AttributeValues' , 
			ISNULL(SUBSTRING((SELECT ','+cast( LP.SKU as varchar(600)) 
							 FROM #LinkProduct LP
							 WHERE LP.PimParentProductId = ZPLP.PimParentProductId 
							 AND LP.PimAttributeId = ZPLP.PimAttributeId
		FOR XML PATH ('') ),2,4000),'')),'$.SelectValues',Json_Query('[]'))   
	
		FROM ZnodePimLinkProductDetail ZPLP 
		INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPLP.PimParentProductId)
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = ZPLP.PimAttributeId )
		INNER JOIN #PimProductAttributeJson b ON (b.PimAttributeJsonId = c.PimAttributeJsonId )
		GROUP BY ZPLP.PimParentProductId , ZPP.PublishProductId  ,ZPLP.PimAttributeId,c.AttributeCode,c.AttributeJson,ZPP.PublishCatalogId
	UNION ALL 
		SELECT ZPAV.PimProductId,'DefaultSkuForConfigurable' ,
			JSON_MODIFY( JSON_Modify(
			REPLACE(REPLACE (c.AttributeJson,'ProductType','DefaultSkuForConfigurable'),'Product Type','Default Sku For Configurable'),
			'$.AttributeValues' , 
			ISNULL(SUBSTRING((SELECT ','+CAST(adl.AttributeValue AS VARCHAR(50)) 
		FROM ZnodePimAttributeValue ad 
		inner join ZnodePimAttributeValueLocale adl on ad.PimattributeValueId = adl.PimAttributeValueId
		INNER JOIN ZnodePimProductTypeAssociation yt ON (yt.PimProductId = ad.PimProductId)
		WHERE EXISTS (select * from #ProductIds p where yt.PimParentProductId = p.PimProductId)
		AND Ad.PimAttributeId =(select top 1 PimAttributeId from ZnodePimAttribute zpa where zpa.AttributeCode = 'SKU')
		AND yt.PimParentProductId = ZPAV.PimProductId 
		ORDER BY yt.DisplayOrder , yt.PimProductTypeAssociationId ASC FOR XML PATH ('') ),2,4000),'')),'$.SelectValues',Json_Query('[]'))   
		FROM ZnodePimAttributeValue ZPAV  
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
		INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
		WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL 
		INNER JOIN ZnodePimAttributeDefaultValue dr ON (dr.PimAttributeDefaultValueId = ZPADVL.PimAttributeDefaultValueId)
		WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId
		AND dr.AttributeDefaultValueCode= 'ConfigurableProduct' 
		)
		AND EXISTS (select * from #PimProductAttributeJson b where b.PimAttributeJsonId = c.PimAttributeJsonId)
		AND c.AttributeCode = 'ProductType' 
	UNION ALL
		SELECT DISTINCT  UOP.PimProductId,c.AttributeCode,
			JSON_MODIFY (JSON_MODIFY (c.AttributeJson,'$.AttributeValues',''), '$.SelectValues',
			Isnull((SELECT  DISTINCT 
			Isnull(JSON_VALUE(AA.DefaultValueJson, '$.Code'),'') Code 
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.LocaleId'),0) LocaleId
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.Value'),'') Value
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.AttributeDefaultValue'),'') AttributeDefaultValue
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.DisplayOrder'),0) DisplayOrder
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.IsEditable'),'false') IsEditable
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.SwatchText'),'') SwatchText
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.Path'),'') Path 
			,ISNULL(ZPA.DisplayOrder,0)  AS VariantDisplayOrder 
			,ISNULL(ZPAVL_SKU.AttributeValue,'')   AS VariantSKU 
			--,Isnull(ZM.Path,'') 
		,'' AS VariantImagePath 
		FROM ZnodePimAttributeDefaultJson AA 
		INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId )
		INNER JOIN ZnodePimAttributeValue ZPAV1 ON (ZPAV1.PimAttributeValueId= ZPADV.PimAttributeValueId )
		-- check/join for active variants 
		INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId =ZPAV1.PimProductId)
		INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON (ZPAV.PimAttributevalueid = ZPAVL.PimAttributeValueId AND ZPAVL.AttributeValue = 'True')
		INNER JOIN ZnodePimProductTypeAssociation YUP ON (YUP.PimProductId = ZPAV1.PimProductId)
		-- SKU
		INNER JOIN ZnodePimAttributeValue ZPAV_SKU ON(YUP.PimProductId = ZPAV_SKU.PimProductId)
		INNER JOIN ZnodePimAttributeValueLocale ZPAVL_SKU ON (ZPAVL_SKU.PimAttributeValueId = ZPAV_SKU.PimAttributeValueId)
		LEFT JOIN ZnodePimAttribute ZPA ON (ZPA.PimattributeId = ZPAV1.PimAttributeId)
		WHERE (YUP.PimParentProductId  = UOP.PimProductId AND ZPAV1.pimAttributeId = UOP.PimAttributeId )
		-- Active Variants
		AND ZPAV.PimAttributeId = (SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'IsActive')
		-- VariantSKU
		AND ZPAV_SKU.PimAttributeId = (SELECT PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'SKU')
		For JSON Auto 
		),'[]')) 
				
		--</AttributeEntity></Attributes>' 
		FROM ZnodePimConfigureProductAttribute UOP 
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = UOP.PimAttributeId )
		WHERE  exists(select * from #TBL_PublishCatalogId PPCP1 where UOP.PimProductId = PPCP1.PimProductId )
		AND EXISTS (select * from #PimProductAttributeJson b where b.PimAttributeJsonId = c.PimAttributeJsonId)

			-------------configurable attribute 
			---------------------------------------------------------------------
			
			If (@RevisionType like '%Preview%'  OR @RevisionType like '%Production%'  ) 
				Delete from ZnodePublishProductEntity where SKU  in (select SKU from #TBL_PublishCatalogId
				A inner join ZnodePublishProductDetail B on A.PublishProductId   =B.PublishProductId   )
				AND LocaleId = @LocaleId
				AND VersionId in (SELECT VersionId FROM ZnodePublishVersionEntity where RevisionType = 'PREVIEW')
			If (@RevisionType like '%Production%' OR @RevisionType = 'None')
				Delete from ZnodePublishProductEntity where SKU  in (select SKU from #TBL_PublishCatalogId
				A inner join ZnodePublishProductDetail B on A.PublishProductId   =B.PublishProductId   )
				AND LocaleId = @LocaleId
				AND VersionId in (SELECT VersionId FROM ZnodePublishVersionEntity where RevisionType = 'PRODUCTION')

			Insert into ZnodePublishProductEntity (
					VersionId, --1
					IndexId, --2 
					ZnodeProductId,ZnodeCatalogId, --3
					SKU,LocaleId, --4 
					Name,ZnodeCategoryIds, --5
					IsActive, -- 6 
					Attributes, -- 7 
					Brands, -- 9
					CategoryName, --9
					CatalogName,DisplayOrder, --10 
					RevisionType,AssociatedProductDisplayOrder, --11
					ProductIndex,--12
					SalesPrice,RetailPrice,CultureCode,CurrencySuffix,CurrencyCode,SeoDescription,SeoKeywords,SeoTitle,SeoUrl,ImageSmallPath,SKULower --13 
					)
 			SELECT distinct ZPVE.VersionId, --1 
			CAST(ISNULL(ZPCP.ProductIndex,1) AS VARCHAr(100)) + CAST(ISNULL(ZPC.PublishCategoryId,'')  AS VARCHAR(50))  + 
			CAST(Isnull(ZPP.PublishCatalogId ,'')  AS VARCHAR(50)) + CAST( @LocaleId AS VARCHAR(50)) IndexId, --2 
			CAST(ZPP.PublishProductId AS VARCHAR(50)) PublishProductId,CAST(ZPP.PublishCatalogId  AS VARCHAR(50)) PublishCatalogId,  --3 
			CAST(ISNULL(ZPPDFG.SKU ,'') AS NVARCHAR(2000)) SKU,CAST( Isnull(@LocaleId ,'') AS VARCHAR(50)) LocaleId, -- 4 
			CAST(isnull(ZPPDFG.ProductName,'') AS NVARCHAR(2000) )  ProductName ,CAST(ISNULL(ZPCD.PublishCategoryId,'')  AS VARCHAR(50)) PublishCategoryId  -- 5 
			,CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50)) IsActive , --6 
			'[' +
				(Select STUFF((SELECT distinct ','+ AttributeValue from #TBL_ZnodeTempPublish TY WHERE TY.PimProductId = ZPP.PimProductId   
				FOR XML Path ('')) ,1,1,'')  ) 
			+ ']' xmlvalue,  -- 7 
			'[]' Brands  --8 
			,CAST(isnull(PublishCategoryName,'') AS NVARCHAR(2000)) CategoryName  --9
			,CAST(Isnull(CatalogName,'')  AS NVARCHAR(2000)) CatalogName,CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50)) DisplayOrder  -- 10  
			,ZPVE.RevisionType RevisionType , 0 AssociatedProductDisplayOrder,-- pending  -- 11 
			Isnull(ZPCP.ProductIndex,1),  -- 12 

			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(CAST(SalesPrice  AS varchar(500)),'') else '' end SalesPrice , 
			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(CAST(RetailPrice  AS varchar(500)),'') else '' end RetailPrice , 
			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(CultureCode ,'') else '' end CultureCode , 
			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(CurrencySuffix ,'') else '' end CurrencySuffix , 
			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(CurrencyCode ,'') else '' end CurrencyCode , 
			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(SEODescription,'') else '' end SEODescriptionForIndex,
			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(SEOKeywords,'') else '' end SEOKeywords,
			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(SEOTitle,'') else '' end SEOTitle,
			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(SEOUrl ,'') else '' end SEOUrl,
			Case When TBPS.IsAllowIndexing = 1 then  ISNULL(ImageSmallPath,'') else '' end ImageSmallPath,
			CAST(ISNULL(LOWER(ZPPDFG.SKU) ,'') AS NVARCHAR(100)) Lower_SKU -- 13
	FROM  #TBL_PublishCatalogId zpp
	INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
	INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
	INNER JOIN ZnodePublishVersionEntity ZPVE ON (ZPVE.ZnodeCatalogId  = ZPP.PublishCatalogId AND ZPVE.IsPublishSuccess =1 AND ZPVE.LocaleId = @LocaleId )
	LEFT JOIN #ZnodePrice TBZP ON (TBZP.PublishProductId = ZPP.PublishProductId)
	LEFT JOIN #ProductSKU TBPS ON (TBPS.PublishProductId = ZPP.PublishProductId)
	LEFT JOIN #ProductImages TBPI ON (TBPI.PublishProductId = ZPP.PublishProductId  )
	LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
	LEFT JOIN ZnodePublishCategory ZPC ON (ZPC.PublishCatalogId = ZPCP.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId)
	LEFT JOIN ZnodePimCategoryProduct ZPCCF ON (ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId )
	LEFT JOIN ZnodePimCategoryHierarchy ZPCH ON (ZPCH.PimCatalogId = ZPCV.PimCatalogId AND  ZPCH.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId) 
	LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ZPCP.PublishCategoryId AND ZPCD.LocaleId = @LocaleId )
	WHERE ZPPDFG.LocaleId = @LocaleId
		--AND zpp.LocaleId = @LocaleId
	AND 
		(
			(ZPVE.RevisionType =  Case when  (@RevisionType like '%Preview%'  OR @RevisionType like '%Production%' ) then 'Preview' End ) 
			OR 
			(ZPVE.RevisionType =  Case when (@RevisionType like '%Production%' OR @RevisionType = 'None') then  'Production'  end )
		)


	DELETE FROM #TBL_ZnodeTempPublish
	IF OBJECT_ID('tempdb..#PimProductAttributeJson') is not null
	 BEGIN 
		DELETE FROM #PimProductAttributeJson
	 END
	 IF OBJECT_ID('tempdb..#TBL_CustomeFiled') is not null
	 BEGIN 
	 DROP TABLE #TBL_CustomeFiled
	 END
	 IF OBJECT_ID('tempdb..#TBL_AttributeVAlue') is not null
	 BEGIN 
	 DROP TABLE #TBL_AttributeVAlue
	 END
 
	DELETE FROM @PimDefaultValueLocale
SET @Counter = @counter + 1 
END

SET @Status =1 

END TRY 
BEGIN CATCH 
	SET @Status =0  
	 SELECT 1 AS ID,@Status AS Status;   
	 DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
		@ErrorLine VARCHAR(100)= ERROR_LINE(),
		@ErrorCall NVARCHAR(MAX)= 'EXEC [Znode_GetPublishSingleProductJson] 
		@PublishCatalogId = '+CAST(@PublishCatalogId  AS VARCHAR	(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10))
				
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_GetPublishSingleProductJson',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
END CATCH
END
go
if exists(select * from sys.procedures where name = 'Znode_ImportCustomer')
	drop proc Znode_ImportCustomer
go

CREATE PROCEDURE [dbo].[Znode_ImportCustomer](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @LocaleId int= 0,@PortalId int ,@CsvColumnString nvarchar(max))
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import SEO Details
	
	-- Unit Testing : 
	--------------------------------------------------------------------------------------

BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max),@AspNetZnodeUserId nvarchar(256),@ASPNetUsersId nvarchar(256),
		@PasswordHash nvarchar(max),@SecurityStamp nvarchar(max),@RoleId nvarchar(256),@IsAllowGlobalLevelUserCreation nvarchar(10)
		Declare @ProfileId  int
		DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		 
		SET @SecurityStamp = '0wVYOZNK4g4kKz9wNs-UHw2'
		SET @PasswordHash = 'APy4Tm1KbRG6oy7h3r85UDh/lCW4JeOi2O2Mfsb3OjkpWTp1YfucMAvvcmUqNaSOlA==';
		SELECT  @RoleId  = Id from AspNetRoles where   NAME = 'Customer'  

		Select @IsAllowGlobalLevelUserCreation = FeatureValues from ZnodeGlobalsetting where FeatureName = 'AllowGlobalLevelUserCreation'

		DECLARE @GetDate datetime= dbo.Fn_GetDate();
		-- Retrive RoundOff Value from global setting 

		-- Three type of import required three table varible for product , category and brand
		DECLARE @InsertCustomer TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, UserName nvarchar(512) ,FirstName	nvarchar(200),
			LastName nvarchar(200), BudgetAmount	numeric,Email	nvarchar(100),PhoneNumber	nvarchar(100),
		    EmailOptIn	bit	,ReferralStatus	nvarchar(40),IsActive	bit	,ExternalId	nvarchar(max),CreatedDate Datetime,
			ProfileName varchar(200),AccountCode nvarchar(100),DepartmentName varchar(300),RoleName nvarchar(256), GUID NVARCHAR(400)
		);

			--SET @SSQL = 'SELECT RowNumber,UserName,FirstName,LastName,BudgetAmount,Email,PhoneNumber,EmailOptIn,IsActive,ExternalId,GUID FROM '+ @TableName;
		SET @SSQL = 'SELECT RowNumber,' + @CsvColumnString + ',GUID FROM '+ @TableName;
		INSERT INTO @InsertCustomer( RowNumber,UserName,FirstName,LastName,Email,PhoneNumber, EmailOptIn,IsActive,ExternalId,CreatedDate,ProfileName,AccountCode,DepartmentName,RoleName,GUID )
		EXEC sys.sp_sqlexec @SSQL;
		
		
		select TOP 1 @ProfileId   =  ProfileId from ZnodePortalprofile where Portalid = @Portalid and IsDefaultRegistedProfile=1
		If( Isnull(@ProfileId ,0) = 0 ) 
		Begin
		
		
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '62', 'Default Portal Profile', '', @NewGUId, 1 , @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
							
				UPDATE ZnodeImportProcessLog
				SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
				WHERE ImportProcessLogId = @ImportProcessLogId;
			

				SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog 
				WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
				Select @SuccessRecordCount = 0

				UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount , 
				TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
				WHERE ImportProcessLogId = @ImportProcessLogId;

				DELETE FROM @InsertCustomer 
				SET @Status = 0;

				COMMIT TRAN A;
				Return 0 
		End
	
	    -- start Functional Validation 

		-----------------------------------------------
		--If @IsAllowGlobalLevelUserCreation = 'false'
		--		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		--			   SELECT '10', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		--			   FROM @InsertCustomer AS ii
		--			    WHERE ltrim(rtrim(ii.UserName)) in 
		--			   (
		--				   SELECT UserName FROM AspNetZnodeUser   where PortalId = @PortalId
		--			   );
		--Else 
		--		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		--			   SELECT '10', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		--			   FROM @InsertCustomer AS ii
		--			   WHERE ltrim(rtrim(ii.UserName)) in 
		--			   (
		--				   SELECT UserName FROM AspNetZnodeUser   
		--			   );
		
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
					   SELECT '35', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
					   FROM @InsertCustomer AS ii
					   WHERE ii.UserName not like '%_@_%_.__%' 
				
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
					   SELECT '30', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
					   FROM @InsertCustomer AS ii
					   WHERE ltrim(rtrim(ii.UserName)) in 
					   (SELECT ltrim(rtrim(UserName))  FROM @InsertCustomer group by ltrim(rtrim(UserName))  having count(*) > 1 )

				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				select '77', 'AccountCode', ii.AccountCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				from @InsertCustomer ii 
				where isnull(ltrim(rtrim(ii.AccountCode)),'') !='' and not exists(select * from ZnodeAccount za
				inner join ZnodePortalAccount zpa on za.AccountId = zpa.AccountId
				where  isnull(ltrim(rtrim(ii.AccountCode)),'') = za.AccountCode and zpa.PortalId = @PortalId )

				--INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				--SELECT '73', 'AccountCode', AccountCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				--FROM @InsertCustomer AS ii
				--WHERE   isnull(ltrim(rtrim(ii.AccountCode)),'') !=''   and isnull(ltrim(rtrim(ii.AccountCode)),'') not in 
				--(
				--	SELECT isnull(ltrim(rtrim(AccountCode)),'') FROM ZnodeAccount   
				--);

				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '88', 'AccountCode', AccountCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				FROM @InsertCustomer AS ii
				WHERE   isnull(ltrim(rtrim(ii.AccountCode)),'') !='' and  exists
				(
					SELECT top 1 1 FROM  AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
				INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	 
				inner join ZnodeAccount ZA on  ZU.AccountId = ZA.AccountId
				where ANZU.UserName = ii.UserName and  ZA.AccountCode != ii.AccountCode
				);

				

				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '75', 'RoleName', RoleName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				FROM @InsertCustomer AS ii
				WHERE   isnull(ltrim(rtrim(ii.AccountCode)),'') ='' and isnull(ltrim(rtrim(RoleName)),'') <> '' 

				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '74', 'RoleName', RoleName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				FROM @InsertCustomer AS ii
				WHERE --ltrim(rtrim(ii.RoleName)) not in ('User','Manager','Administrator') and isnull(ltrim(rtrim(RoleName)),'') <> '' and
				 isnull(ltrim(rtrim(RoleName)),'') <> '' and not exists (select top 1 1 from  AspNetRoles ANR where name in ('User','Manager','Administrator') and  ANR.name =ii.RoleName)


				--INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				--SELECT '75', 'RoleName', RoleName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				--FROM @InsertCustomer AS ii
				--WHERE  isnull(ltrim(rtrim(AccountCode)),'') != '' and isnull(ltrim(rtrim(RoleName)),'') <> ''

				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '76', 'DepartmentName', DepartmentName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				FROM @InsertCustomer AS ii
				WHERE isnull(ltrim(rtrim(ii.DepartmentName)),'') <> ''
				and not exists(select * from  ZnodeAccount ZA inner join ZnodeDepartment ZD on ZA.AccountId = ZD.AccountId
					where isnull(ltrim(rtrim(ii.AccountCode)),'') = ltrim(rtrim(za.AccountCode))
					and isnull(ltrim(rtrim(ii.DepartmentName)),'') = ltrim(rtrim(ZD.DepartmentName)))
				

		 UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ UserName - ' + ISNULL(UserName,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN @InsertCustomer IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL

		--Note : Content page import is not required 
		
		-- End Function Validation 	
		-----------------------------------------------
		--- Delete Invalid Data after functional validatin  

		DELETE FROM @InsertCustomer
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
			--AND GUID = @NewGUID
		);


		-- Update Record count in log 
        
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM @InsertCustomer
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount , 
		TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End

		-- Insert Product Data 
				
				
				DECLARE @InsertedAspNetZnodeUser TABLE (AspNetZnodeUserId nvarchar(256) ,UserName nvarchar(512),PortalId int )
				DECLARE @InsertedASPNetUsers TABLE (Id nvarchar(256) ,UserName nvarchar(512))
				DECLARE @InsertZnodeUser TABLE (UserId int,AspNetUserId nvarchar(256),CreatedDate Datetime )

				UPDATE ANU SET 
				ANU.PhoneNumber	= IC.PhoneNumber, ANU.LockoutEndDateUtc = case when IC.IsActive = 0 then @GetDate when IC.IsActive = 1 then null else ANU.LockoutEndDateUtc end
				from AspNetZnodeUser ANZU 
				INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
				INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
				INNER JOIN @InsertCustomer IC ON ANZU.UserName = IC.UserName 
				where case when @IsAllowGlobalLevelUserCreation = 'true' then -1 else Isnull(ANZU.PortalId,0) end = case when @IsAllowGlobalLevelUserCreation = 'true' then -1 else Isnull(@PortalId ,0) end
				----Isnull(ANZU.PortalId,0) = Isnull(@PortalId ,0)

				UPDATE ZU SET 
				ZU.FirstName	= IC.FirstName,
				ZU.LastName		= IC.LastName,
				--ZU.MiddleName	= IC.MiddleName,
				ZU.BudgetAmount = IC.BudgetAmount,
				ZU.Email		= IC.Email,
				ZU.PhoneNumber	= IC.PhoneNumber,
				ZU.EmailOptIn	= Isnull(IC.EmailOptIn,0),
				ZU.IsActive		= IC.IsActive
				--ZU.ExternalId = ExternalId
				from AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
				INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
				INNER JOIN @InsertCustomer IC ON ANZU.UserName = IC.UserName 
				where case when @IsAllowGlobalLevelUserCreation = 'true' then -1 else Isnull(ANZU.PortalId,0) end = case when @IsAllowGlobalLevelUserCreation = 'true' then -1 else Isnull(@PortalId ,0) end
				--where Isnull(ANZU.PortalId,0) = Isnull(@PortalId ,0)

				Insert into AspNetZnodeUser (AspNetZnodeUserId, UserName, PortalId)		
				OUTPUT INSERTED.AspNetZnodeUserId, INSERTED.UserName, INSERTED.PortalId	INTO  @InsertedAspNetZnodeUser 			 
				Select NEWID(),IC.UserName, @PortalId FROM @InsertCustomer IC 
				where Not Exists (Select TOP 1 1  from AspNetZnodeUser ANZ 
				where Isnull(ANZ.PortalId,0) = Isnull(@PortalId,0) AND ANZ.UserName = IC.UserName)

				INSERT INTO ASPNetUsers (Id,Email,EmailConfirmed,PasswordHash,SecurityStamp,PhoneNumber,PhoneNumberConfirmed,TwoFactorEnabled,
				LockoutEndDateUtc,LockOutEnabled,AccessFailedCount,PasswordChangedDate,UserName)
				output inserted.Id, inserted.UserName into @InsertedASPNetUsers
				SELECT NewId(), Email,0 ,@PasswordHash,@SecurityStamp,PhoneNumber,0,0,case when A.IsActive = 0 then @GetDate else null end LockoutEndDateUtc,1 LockoutEnabled,
				0,@GetDate,AspNetZnodeUserId from @InsertCustomer A INNER JOIN @InsertedAspNetZnodeUser  B 
				ON A.UserName = B.UserName
				
				INSERT INTO  ZnodeUser(AspNetUserId,FirstName,LastName,CustomerPaymentGUID,Email,PhoneNumber,EmailOptIn,
				IsActive,ExternalId, CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				OUTPUT Inserted.UserId, Inserted.AspNetUserId,Inserted.CreatedDate into @InsertZnodeUser
				SELECT IANU.Id AspNetUserId ,IC.FirstName,IC.LastName,null CustomerPaymentGUID,IC.Email
				,IC.PhoneNumber,Isnull(IC.EmailOptIn,0),IC.IsActive,IC.ExternalId, @UserId,
				CASE WHEN IC.CreatedDate IS NULL OR IC.CreatedDate = '' THEN  @Getdate ELSE IC.CreatedDate END,@UserId,@Getdate
				from @InsertCustomer IC Inner join 
				@InsertedAspNetZnodeUser IANZU ON IC.UserName = IANZU.UserName  INNER JOIN 
				@InsertedASPNetUsers IANU ON IANZU.AspNetZnodeUserId = IANU.UserName 
				  	     
				INSERT INTO AspNetUserRoles (UserId,RoleId)  Select AspNetUserId, @RoleID from @InsertZnodeUser 
				INSERT INTO ZnodeUserPortal (UserId,PortalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate) 
				SELECT UserId, @PortalId , @UserId, IZU.CreatedDate,@UserId,@Getdate 
				from @InsertZnodeUser IZU

				insert into ZnodeAccountUserPermission(UserId,AccountPermissionAccessId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				SELECT UserId, 4 , @UserId, @Getdate,@UserId,@Getdate 
				from @InsertZnodeUser IZU
				--Declare @ProfileId  int 
				--select TOP 1 @ProfileId   =  ProfileId from ZnodePortalprofile where Portalid = @Portalid and IsDefaultRegistedProfile=1

				--insert into ZnodeUserProfile (ProfileId,UserId,IsDefault,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				--SELECT @ProfileId  , UserId, 1 , @UserId,CreatedDate,@UserId,@Getdate from @InsertZnodeUser
---------------------------------------------------------------------------------

				declare @Profile table (ProfileId int)

				INSERT INTO ZnodeProfile (ProfileName,ShowOnPartnerSignup,Weighting,TaxExempt,DefaultExternalAccountNo,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ParentProfileId)
				OUTPUT inserted.ProfileId INTO @Profile(ProfileId)
				SELECT Distinct ProfileName, 0, null,0, replace(ltrim(rtrim(ProfileName)),' ','') as DefaultExternalAccountNo, @UserId,@Getdate, @UserId,@Getdate, null as ParentProfileId				
				from @InsertCustomer IC
				where not exists(select * from ZnodeProfile ZP where IC.ProfileName = ZP.ProfileName )
				AND ISNULL(ic.ProfileName,'') <> ''

				INSERT INTO ZnodePortalProfile (PortalId,	ProfileId,	IsDefaultAnonymousProfile,	IsDefaultRegistedProfile,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate)
				SELECT @PortalId, ProfileId, 0 AS IsDefaultAnonymousProfile, 0 AS IsDefaultRegistedProfile, @UserId,@Getdate, @UserId,@Getdate
				from @Profile

				UPDATE ZnodeUserProfile 
				SET ProfileId = COALESCE(ZP.ProfileId,@ProfileId)
				FROM ZnodeUser a
				inner join ASPNetUsers b on (b.Id = a.AspNetUserId)
				inner join AspNetZnodeUser c on (c.AspNetZnodeUserId = b.UserName)
				inner join @InsertCustomer IC on (IC.UserName = c.UserName)
				inner join ZnodeUserProfile u ON u.UserId = a.UserId
				LEFT join ZnodeProfile ZP on IC.ProfileName = ZP.ProfileName
				--where IC.ProfileName <> ''
				
				INSERT INTO ZnodeUserProfile (ProfileId,UserId,IsDefault,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				SELECT COALESCE(ZP.ProfileId,@ProfileId)  , a.UserId, 1 , @UserId,a.CreatedDate,@UserId,@Getdate 
				from ZnodeUser a
				INNER JOIN ASPNetUsers b on (b.Id = a.AspNetUserId)
				inner join AspNetZnodeUser c on (c.AspNetZnodeUserId = b.UserName)
				inner join @InsertCustomer IC on (IC.UserName = c.UserName)
				LEFT join ZnodeProfile ZP on IC.ProfileName = ZP.ProfileName
				where NOT EXISTS (SELECT TOP  1 1 FROM ZnodeUserProfile u WHERE u.UserId = a.UserId )
				AND EXISTS(SELECT * FROM @InsertZnodeUser IZU WHERE A.UserId = IZU.UserId)

				---to update accountid agaist user
				UPDATE ZU SET ZU.AccountId = ZA.AccountId 
				from AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
				INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	 
				INNER JOIN @InsertCustomer IC ON ANZU.UserName = IC.UserName
				INNER JOIN ZnodeAccount ZA ON ZA.AccountCode = IC.AccountCode 
				--inner join @InsertZnodeUser IZU on IZU.UserId =ZU.UserId
				where Isnull(ANZU.PortalId,0) = Isnull(@PortalId ,0) and isnull(IC.AccountCode,'') <> ''
				
				update ZDU set ZDU.DepartmentId = ZD.DepartmentId, ModifiedBy = @UserId, ModifiedDate = @Getdate
				from ZnodeUser a
				INNER JOIN ASPNetUsers b on (b.Id = a.AspNetUserId)
				inner join AspNetZnodeUser c on (c.AspNetZnodeUserId = b.UserName)
				inner join @InsertCustomer IC on (IC.UserName = c.UserName)
				inner join ZnodeDepartment ZD on IC.DepartmentName = ZD.DepartmentName
				inner join ZnodeDepartmentUser ZDU on ZDU.UserId = a.UserId
				where isnull(IC.DepartmentName,'') <> ''

				insert into ZnodeDepartmentUser(UserId,DepartmentId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				SELECT a.UserId, ZD.DepartmentId, @UserId,a.CreatedDate,@UserId,@Getdate 
				from ZnodeUser a
				INNER JOIN ASPNetUsers b on (b.Id = a.AspNetUserId)
				inner join AspNetZnodeUser c on (c.AspNetZnodeUserId = b.UserName)
				inner join @InsertCustomer IC on (IC.UserName = c.UserName)
				inner join ZnodeDepartment ZD on IC.DepartmentName = ZD.DepartmentName
				where NOT EXISTS (SELECT TOP  1 1 FROM ZnodeDepartmentUser u WHERE u.UserId = a.UserId)
				AND isnull(IC.DepartmentName,'') <> ''
		
				update u set u.RoleId = ZD.Id
				from ZnodeUser a
				INNER JOIN ASPNetUsers b on (b.Id = a.AspNetUserId)
				inner join AspNetZnodeUser c on (c.AspNetZnodeUserId = b.UserName)
				inner join @InsertCustomer IC on (IC.UserName = c.UserName)
				inner join AspNetRoles ZD on IC.RoleName = ZD.Name
				inner join AspNetUserRoles u on u.UserId = b.Id
				where isnull(IC.RoleName,'') <> ''
				
				insert into AspNetUserRoles(UserId,RoleId)
				SELECT b.Id as ASPNetUserId, ZD.Id as RoleId
				from ZnodeUser a
				INNER JOIN ASPNetUsers b on (b.Id = a.AspNetUserId)
				inner join AspNetZnodeUser c on (c.AspNetZnodeUserId = b.UserName)
				inner join @InsertCustomer IC on (IC.UserName = c.UserName)
				inner join AspNetRoles ZD on IC.RoleName = ZD.Name
				where NOT EXISTS (SELECT TOP  1 1 FROM AspNetUserRoles u WHERE u.UserId = b.Id)
				AND EXISTS(SELECT * FROM @InsertZnodeUser IZU WHERE A.UserId = IZU.UserId)
				AND isnull(IC.RoleName,'') <> ''


		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;
	END TRY
	BEGIN CATCH
	ROLLBACK TRAN A;
		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		
	END CATCH;
END;
go
if exists(select * from sys.procedures where name = 'Znode_ImportAccount')
	drop proc Znode_ImportAccount
go
CREATE PROCEDURE [dbo].[Znode_ImportAccount](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200),@PortalId int 
	  ,@CsvColumnString nvarchar(max) )
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import SEO Details
	
	-- Unit Testing : 
	--------------------------------------------------------------------------------------

BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max),@IsAllowGlobalLevelUserCreation nvarchar(10)

		DECLARE @GetDate datetime= dbo.Fn_GetDate();
	
		-- Three type of import required three table varible for product , category and brand

		CREATE TABLE #InsertAccount 
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int,ParentAccountCode nvarchar(max),AccountName nvarchar(max), AccountCode nvarchar(max),ExternalID nvarchar(max),
			CatalogCode nvarchar(max),AddressName nvarchar(max),FirstName varchar(max),LastName varchar(max),CompanyName varchar(max),
			Address1 varchar(max),Address2 varchar(max),CountryName varchar(max),StateName varchar(max),CityName varchar(max),
			PostalCode varchar(max),PhoneNumber varchar(max),IsDefaultBilling varchar(10),IsDefaultShipping varchar(10),GUID VARCHAR(100)
		);
	
		SET @SSQL = ' INSERT INTO #InsertAccount ( RowNumber, ParentAccountCode,AccountName ,AccountCode,ExternalID,CatalogCode,AddressName,FirstName,LastName,CompanyName
						,Address1,Address2,CountryName,StateName,CityName,PostalCode,PhoneNumber,IsDefaultBilling,IsDefaultShipping,GUID )
		SELECT RowNumber, ParentAccountCode,AccountName ,AccountCode,ExternalID,CatalogCode,AddressName,FirstName,LastName,CompanyName
						,Address1,Address2,CountryName,StateName,CityName,PostalCode,PhoneNumber,IsDefaultBilling,IsDefaultShipping,GUID FROM '+ @TableName;

		EXEC sys.sp_sqlexec @SSQL;

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '78', 'ParentAccountCode', ParentAccountCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ii.AccountCode, '')) >100 and ISnull(ltrim(rtrim(ii.ParentAccountCode)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '86', 'ParentAccountCode', ParentAccountCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.ParentAccountCode)), '') <> ''
		and not exists(select * from znodePortalAccount ZPA inner join ZnodeAccount ZA ON ZPA.AccountId = ZA.AccountId where ii.ParentAccountCode = ZA.AccountCode and ZPA.PortalId = @PortalId)
		and not exists(select * from #InsertAccount IA where ISnull(ltrim(rtrim(ii.ParentAccountCode)), '') = ISnull(ltrim(rtrim(IA.AccountCode)), '') and ii.RowNumber > IA.RowNumber)
	
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '87', 'ParentAccountCode', ParentAccountCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.ParentAccountCode)), '') <> ''
		and not exists(select * from ZnodeAccount ZA where ii.ParentAccountCode = ZA.AccountCode and ZA.ParentAccountId is not null)
		and not exists(select * from #InsertAccount IA where ISnull(ltrim(rtrim(ii.ParentAccountCode)), '') = ISnull(ltrim(rtrim(IA.AccountCode)), '') and ii.RowNumber > IA.RowNumber)

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '89', 'ParentAccountCode', ParentAccountCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.ParentAccountCode)), '') <> ''
		and exists(select * from ZnodeAccount ZA where ii.ParentAccountCode = ZA.AccountCode and ZA.ParentAccountId is not null)
		and not exists(select * from #InsertAccount IA where ISnull(ltrim(rtrim(ii.ParentAccountCode)), '') = ISnull(ltrim(rtrim(IA.AccountCode)), '')
		and ii.RowNumber > IA.RowNumber )
		

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'AccountCode', AccountCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.AccountCode)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '78', 'AccountCode', AccountCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ii.AccountCode, '')) >100 and ISnull(ltrim(rtrim(ii.AccountCode)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '79', 'AccountCode', AccountCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ii.AccountCode like '%[^a-zA-Z0-9]%' and ISnull(ltrim(rtrim(ii.AccountCode)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'AccountName', AccountName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.AccountName)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '78', 'AccountName', AccountName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ii.AccountName, '')) >100 and ISnull(ltrim(rtrim(ii.AccountName)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '52', 'AccountName', AccountName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE isnull(replace(ii.AccountName,' ',''),'') like '%[^a-Z0-9]%' and ISnull(ltrim(rtrim(ii.AccountName)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'StateName', StateName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.StateName)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '78', 'StateName', StateName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ltrim(rtrim(ii.StateName)), '')) >100 and ISnull(ltrim(rtrim(ii.StateName)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '83', 'StateName', StateName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE not exists(select * from ZnodeState ZS where ZS.StateName = ISnull(ltrim(rtrim(ii.StateName)), '') ) and ISnull(ltrim(rtrim(ii.StateName)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '83', 'CountryName', CountryName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE not exists(select * from ZnodeCountry ZC where ZC.CountryName = ISnull(ltrim(rtrim(ii.CountryName)), '') ) AND ISnull(ltrim(rtrim(ii.CountryName)), '') <> ''
		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'CountryName', CountryName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.CountryName)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '90', 'CountryName', CountryName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.CountryName)), '') <> ''
		and not exists(select * from ZnodePortalCountry ZPC inner join ZnodeCountry ZC ON ZPC.CountryCode = ZC.CountryCode
		    where PortalId = @PortalId and ltrim(rtrim(ii.CountryName)) = ltrim(rtrim(ZC.CountryName)))

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'CityName', CityName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.CityName)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '78', 'CityName', CityName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ltrim(rtrim(ii.CityName)), '')) >100 and ISnull(ltrim(rtrim(ii.CityName)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'PostalCode', PostalCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.PostalCode)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '78', 'PostalCode', PostalCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ltrim(rtrim(ii.PostalCode)), '')) >100 and ISnull(ltrim(rtrim(ii.PostalCode)), '') <> ''
				
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'PhoneNumber', PhoneNumber, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.PhoneNumber)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '78', 'PhoneNumber', PhoneNumber, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ltrim(rtrim(ii.PhoneNumber)), '')) >100 and ISnull(ltrim(rtrim(ii.PhoneNumber)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'IsDefaultBilling', IsDefaultBilling, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.IsDefaultBilling)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
		SELECT '68', 'IsDefaultBilling', IsDefaultBilling, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
		FROM #InsertAccount AS ii  
		WHERE ISnull(ltrim(rtrim(ii.IsDefaultBilling)),'') not in ('True','1','FALSE','0') and ISnull(ltrim(rtrim(ii.IsDefaultBilling)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
		SELECT '91', 'IsDefaultBilling', IsDefaultBilling, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
		FROM #InsertAccount AS ii  
		WHERE exists(select * from ZnodeAccount ZA where ii.AccountCode = ZA.AccountCode)  
		and ISnull(ltrim(rtrim(ii.IsDefaultBilling)), '') <> '' and ISnull(ltrim(rtrim(ii.IsDefaultBilling)),'') in ('FALSE','0')

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'IsDefaultShipping', IsDefaultShipping, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.IsDefaultShipping)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
		SELECT '68', 'IsDefaultShipping', IsDefaultShipping, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
		FROM #InsertAccount AS ii  
		WHERE ISnull(ltrim(rtrim(ii.IsDefaultShipping)),'') not in ('True','1','FALSE','0') and ISnull(ltrim(rtrim(ii.IsDefaultShipping)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
		SELECT '91', 'IsDefaultShipping', IsDefaultShipping, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
		FROM #InsertAccount AS ii  
		WHERE exists(select * from ZnodeAccount ZA where ii.AccountCode = ZA.AccountCode)  
		and ISnull(ltrim(rtrim(ii.IsDefaultShipping)), '') <> '' and ISnull(ltrim(rtrim(ii.IsDefaultShipping)),'') in ('FALSE','0')

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'AddressName', AddressName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.AddressName)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '81', 'AddressName', AddressName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ii.AddressName, '')) >200 and ISnull(ltrim(rtrim(ii.AddressName)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'Address1', Address1, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.Address1)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '81', 'Address1', Address1, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ii.Address1, '')) >200 and ISnull(ltrim(rtrim(ii.Address1)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '82', 'CompanyName', CompanyName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ii.CompanyName, '')) >300 and ISnull(ltrim(rtrim(ii.CompanyName)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'LastName', LastName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.LastName)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '82', 'LastName', LastName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ltrim(rtrim(ii.LastName)), '')) >300 and ISnull(ltrim(rtrim(ii.LastName)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'FirstName', FirstName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.FirstName)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '82', 'FirstName', FirstName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ii.FirstName, '')) >300 and ISnull(ltrim(rtrim(ii.FirstName)), '') <> ''
		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '80', 'CatalogCode', CatalogCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE not exists(select * from ZnodePimCatalog ZS where ZS.CatalogCode = ISnull(ltrim(rtrim(ii.CatalogCode)), '') )
		and ISnull(ltrim(rtrim(ii.CatalogCode)), '') <> ''
		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'CatalogCode', CatalogCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.CatalogCode)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '82', 'ExternalID', ExternalID, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ii.ExternalID, '')) >300 and ISnull(ltrim(rtrim(ii.ExternalID)), '') <> ''


		-- -- error log when atleast db have 
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '85', 'IsDefaultBilling/IsDefaultShipping', IsDefaultBilling +'/'+ IsDefaultShipping, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount IC where not exists (
		SELECT TOP 1 1  from ZnodeAccount ZAA where IC.AccountCode = ZAA.AccountCode )
		and (IC.IsDefaultBilling not in ('1', 'true') or (IsDefaultShipping not in ('1', 'true')))  
		
		UPDATE ZIL
		SET ZIL.ColumnName =   ZIL.ColumnName + ' [ AccountCode - ' + ISNULL(AccountCode,'') + ' ] '
		FROM ZnodeImportLog ZIL 
		INNER JOIN #InsertAccount IPA ON (ZIL.RowNumber = IPA.RowNumber)
		WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL


		DELETE FROM #InsertAccount
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber IS NOT NULL 
		);

		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM #InsertAccount
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount ,
		TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End
		CREATE TABLE #InsertedAccount (AccountId int, Accountcode nvarchar(100)) 
		INSERT INTO ZnodeAccount(AccountCode,ParentAccountId,Name,ExternalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		OUTPUT INSERTED.AccountId, INSERTED.Accountcode INTO  #InsertedAccount (AccountId, Accountcode) 
		select IC.AccountCode, za.AccountId as ParentAccountId, AccountName, IC.ExternalID, @UserId, @GetDate, @UserId, @GetDate
		from #InsertAccount IC
		left join ZnodeAccount za on IC.ParentAccountCode = za.AccountCode
		where not exists(select * from ZnodeAccount ZA1 where ZA1.AccountCode = IC.AccountCode)

		INSERT INTO ZnodePortalAccount(PortalId,AccountId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT @PortalId, IA.AccountId,  @UserId, @GetDate, @UserId, @GetDate
		FROM #InsertedAccount IA 
		WHERE not exists(select * from ZnodePortalAccount ZPA where IA.AccountId = ZPA.AccountId )
		
		update ZA set ZA.ParentAccountId =  ZA1.AccountId
		from ZnodeAccount ZA
		inner join #InsertAccount IA ON ZA.AccountCode = IA.AccountCode
		inner join ZnodeAccount ZA1 ON ZA1.AccountCode = IA.ParentAccountCode 
		where exists(select * from #InsertedAccount IC where IA.AccountCode = IC.AccountCode)
		and ZA.ParentAccountId is null

		----updating AccountName for respective account
		update ZA set Name = IC.AccountName, AccountCode = IC.AccountCode
		OUTPUT INSERTED.AccountId, INSERTED.Accountcode INTO  #InsertedAccount (AccountId, Accountcode)
		from ZnodeAccount ZA
		inner join #InsertAccount IC ON ZA.AccountCode = IC.AccountCode

		----updating publishcatalogin to respective account
		update ZA set PublishCatalogId = ZPC1.PublishCatalogId, AccountCode = IC.AccountCode
		OUTPUT INSERTED.AccountId, INSERTED.Accountcode INTO  #InsertedAccount (AccountId, Accountcode) 
		from ZnodeAccount ZA
		inner join #InsertAccount IC ON ZA.AccountCode = IC.AccountCode
		inner join ZnodePimCatalog ZPC ON IC.CatalogCode = ZPC.CatalogCode
		inner join ZnodePublishCatalog ZPC1 ON ZPC.PimCatalogId = ZPC1.PimCatalogId
		where not exists(select * from ZnodePortalCatalog ZPCa where ZPCa.PublishCatalogId = ZPC1.PublishCatalogId and ZPCa.PortalId = @PortalId)

		----------update ZnodeAddress
		DECLARE @AddressColumnString VARCHAR(1000), @WhereConditionString VARCHAR(1000), @UpdateColumnString VARCHAR(1000)

		SELECT @AddressColumnString = COALESCE(@AddressColumnString + ',', '')+a.ColumnName --COALESCE(@CsvColumnString + ' and ', '') +'ZA.'+ColumnName+' =  IC.'+ColumnName
		FROM ZnodeImportUpdatableColumns a
		INNER JOIN INFORMATION_SCHEMA.COLUMNS b on a.ColumnName = b.COLUMN_NAME  
		INNER JOIN dbo.Split(@CsvColumnString,',')C on b.COLUMN_NAME = c.Item
		WHERE b.TABLE_NAME = 'ZnodeAddress' 
		AND EXISTS(SELECT * FROM ZnodeImportHead IH where a.ImportHeadId = IH.ImportHeadId and IH.Name= 'Account')

		SELECT @UpdateColumnString = COALESCE(@UpdateColumnString + ' , ', '') +'ZA.'+a.COLUMN_NAME+' =  IC.'+a.COLUMN_NAME  
		FROM INFORMATION_SCHEMA.COLUMNS a
		INNER JOIN dbo.Split(@CsvColumnString,',')b on a.COLUMN_NAME = b.Item
		WHERE NOT EXISTS (SELECT * FROM dbo.Split(@AddressColumnString,',') c WHERE a.COLUMN_NAME = c.Item )
		AND a.TABLE_NAME = 'ZnodeAddress'

		SELECT @WhereConditionString = COALESCE(@WhereConditionString + ' AND ', '') +'ZA.'+item+' =  IC.'+item from dbo.split(@AddressColumnString,',')
	
				
		CREATE TABLE #InsertedAccountAddress (AddressId  int, AccountCode varchar(100)) 

		SET @SSQL = '
			UPDATE ZA set ModifiedBy = '+CONVERT(VARCHAR(10), @UserId)+', ModifiedDate = getdate() '+CASE WHEN ISNULL(@UpdateColumnString,'') = '' THEN '' ELSE ','+@UpdateColumnString END+' 
			FROM ZnodeAddress ZA
			INNER JOIN #InsertAccount IC ON '+CASE WHEN ISNULL(@WhereConditionString,'') = '' THEN ' 1 = 0 ' ELSE @WhereConditionString END

		EXEC (@SSQL)

		SET @SSQL = '
		Insert into ZnodeAddress (FirstName,LastName,DisplayName,Address1,Address2,Address3,CountryName,
								StateName,CityName,PostalCode,PhoneNumber,
								IsDefaultBilling,IsDefaultShipping,IsActive,ExternalId,CompanyName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)		
		OUTPUT INSERTED.AddressId, INSERTED.Address3 INTO  #InsertedAccountAddress (AddressId, AccountCode) 			 
		SELECT IC.FirstName,IC.LastName,IC.AddressName,IC.Address1,IC.Address2,IC.AccountCode,ZC.CountryCode,
		ZS.StateCode,IC.CityName,IC.PostalCode,IC.PhoneNumber,
		isnull(IC.IsDefaultBilling,0),isnull(IC.IsDefaultShipping,0),1,IC.ExternalId,IC.CompanyName, '+CONVERT(VARCHAR(10), @UserId)+' , getdate() , '+CONVERT(VARCHAR(10), @UserId)+' ,getdate()
		FROM  #InsertAccount IC
		inner join ZnodeState ZS on IC.StateName = ZS.StateName
		inner join ZnodeCountry ZC ON IC.CountryName = ZC.CountryName and ZS.CountryCode = ZC.CountryCode
		WHERE NOT EXISTS(SELECT * FROM ZnodeAddress ZA WHERE '+CASE WHEN ISNULL(@WhereConditionString,'') = '' THEN ' 1 = 0 ' ELSE @WhereConditionString END +')'

		EXEC (@SSQL)

		update ZAA set AddressId = UA.AddressId
		FROM #InsertedAccountAddress UA
		INNER JOIN #InsertedAccount IA ON UA.AccountCode = IA.AccountCode
		inner join ZnodeAccount ZA ON IA.AccountCode = ZA.AccountCode
		inner join ZnodeAccountAddress ZAA ON ZA.AccountId = ZAA.AccountId
		
		INSERT INTO ZnodeAccountAddress ( AccountId, AddressId, CreatedBy, CreatedDate,	ModifiedBy,	ModifiedDate )
		SELECT distinct IA.AccountId, AddressId ,  @UserId , @GetDate, @UserId , @GetDate 
		FROM #InsertedAccountAddress UA
		INNER JOIN #InsertedAccount IA ON UA.AccountCode = IA.AccountCode
		WHERE NOT EXISTS ( SELECT * FROM ZnodeAccountAddress AA WHERE AA.AccountId = IA.AccountId )

		update ZnodeAddress set Address3 = null
		where exists(select * from #InsertedAccountAddress IAA where IAA.AddressId = ZnodeAddress.AddressId )
		and Address3 is null
		
		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = getdate()
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;
	END TRY
	BEGIN CATCH

		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = getdate()
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN A;
		 DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportAccount @TableName = '+CAST(@TableName AS VARCHAR(max))+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@ImportProcessLogId='+CAST(@ImportProcessLogId AS VARCHAR(10))+',@PortalId='+CAST(@PortalId AS VARCHAR(10))+',@CsvColumnString='+CAST(@CsvColumnString AS VARCHAR(max));
              			
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_ImportAccount',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
	END CATCH;
END;
go
if exists(select * from sys.procedures where name = 'Znode_DeletePublishCatalogProduct')
	drop proc Znode_DeletePublishCatalogProduct
go
CREATE PROCEDURE [dbo].[Znode_DeletePublishCatalogProduct]
(   
   	@PublishProductIds	Transferid READONLY 
	,@PublishCatalogId   INT = 0 
	,@PimCategoryHierarchyId int = 0 
	,@PimCatalogId int = 0 
	
)
AS
   /*
    Summary:Delete the publish product from all related references 
    Unit Testing   
	begin tran
	SELECT * FROM ZnodePublishCatalog 
    EXEC Znode_DeletePublishCatalog @PublishCatalogIds =5 ,@IsDeleteCatalogId = 1 , @PublishCategoryIds = ''
	rollback tran
   */ 
     BEGIN
         BEGIN TRANSACTION A;
         BEGIN TRY
             SET NOCOUNT ON;
	
	         DECLARE @TBL_DeleteIds TABLE (PublishCatalogId INT ,PublishCategoryId INT ,PublishProductId INT )  
			 DECLARE @TBL_DeleteCategoryProduct TABLE (PublishCategoryProductId INT )			 
			 DECLARE @TBL_CategoryCategoryHierarchyIds TABLE (CategoryId int , ParentCategoryId int )
			 
		
			If @PimCategoryHierarchyId <> 0 AND @PimCatalogId <>  0 
			Begin
				INSERT INTO @TBL_CategoryCategoryHierarchyIds(CategoryId , ParentCategoryId )
				Select Distinct PimCategoryId , Null FROM (
				SELECT PimCategoryId,ParentPimCategoryId from DBO.[Fn_GetRecurciveCategoryIds](@PimCategoryHierarchyId,@PimCatalogId)
				Union 
				Select PimCategoryId , null  from ZnodePimCategoryHierarchy where PimCategoryHierarchyId = @PimCategoryHierarchyId 
				Union 
				Select PimCategoryId , null  from [Fn_GetRecurciveCategoryIds_new] (@PimCategoryHierarchyId,@PimCatalogId) ) Category  


				INSERT INTO @TBL_DeleteIds (PublishCatalogId,PublishProductId,PublishCategoryId  )
				 SELECT ZPP.PublishCatalogId,ZPP.PublishProductId ,ZPCP.PublishCategoryId
				 FROM ZnodePublishProduct  ZPP 
				 INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId) 
				 LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND ZPCP.PublishProductId = ZPP.PublishProductId )
				 LEFT JOIN ZnodePublishCategory  ZPPC ON (ZPPC.PublishCatalogId = ZPC.PublishCatalogId AND ZPPC.PublishCategoryId = ZPCP.PublishCategoryId)
				 AND ZPPC.PimCategoryId in 
							(
								Select CategoryId from @TBL_CategoryCategoryHierarchyIds
							) 
				 WHERE EXISTS (SELECT TOP 1 1 FROM @PublishProductIds ZPCC WHERE ZPCC.Id = ZPP.PublishProductId )

				 INSERT INTO @TBL_DeleteCategoryProduct 
				 SELECT PublishCategoryProductId 
				 FROM ZnodePublishCategoryProduct a 
				 INNER JOIN ZnodePublishProduct ZPP ON (ZPP.PublishProductId = a.PublishProductId AND ZPP.PublishCatalogId = a.PublishCatalogId)
				 INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = a.PublishCatalogId )
				 INNER JOIN ZnodePublishCategory ZPCC ON (ZPCC.PublishCategoryId = a.PublishCategoryId)
				 WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimCategoryProduct ZPDF 
				       INNER JOIN ZnodePimCategoryHierarchy ZPCH ON ZPDF.PimCategoryId = ZPCH.PimCategoryId
					   WHERE ZPCH.PimCatalogId = ZPC.PimCatalogId AND ZPDF.PimCategoryId = ZPCC.PimCategoryId AND ZPDF.PimProductId = ZPP.PimProductId  )
				 AND ZPCC.PimCategoryId in 
							(
								Select CategoryId from @TBL_CategoryCategoryHierarchyIds
							) 


				 AND a.PublishCatalogId = @PublishCatalogId
			END 
			Else 
			Begin
				 INSERT INTO @TBL_DeleteIds (PublishCatalogId,PublishProductId,PublishCategoryId  )
				 SELECT ZPP.PublishCatalogId,ZPP.PublishProductId ,ZPCP.PublishCategoryId
				 FROM ZnodePublishProduct  ZPP 
				 INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId) 
				 LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND ZPCP.PublishProductId = ZPP.PublishProductId )
				 LEFT JOIN ZnodePublishCategory  ZPPC ON (ZPPC.PublishCatalogId = ZPC.PublishCatalogId AND ZPPC.PublishCategoryId = ZPCP.PublishCategoryId)
				 WHERE EXISTS (SELECT TOP 1 1 FROM @PublishProductIds ZPCC WHERE ZPCC.Id = ZPP.PublishProductId )

				 INSERT INTO @TBL_DeleteCategoryProduct 
				 SELECT PublishCategoryProductId 
				 FROM ZnodePublishCategoryProduct a 
				 INNER JOIN ZnodePublishProduct ZPP ON (ZPP.PublishProductId = a.PublishProductId AND ZPP.PublishCatalogId = a.PublishCatalogId)
				 INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = a.PublishCatalogId )
				 INNER JOIN ZnodePublishCategory ZPCC ON (ZPCC.PublishCategoryId = a.PublishCategoryId)
				 WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimCategoryProduct ZPDF 
				       INNER JOIN ZnodePimCategoryHierarchy ZPCH ON ZPDF.PimCategoryId = ZPCH.PimCategoryId
					   WHERE ZPCH.PimCatalogId = ZPC.PimCatalogId AND ZPDF.PimCategoryId = ZPCC.PimCategoryId AND ZPDF.PimProductId = ZPP.PimProductId  )
				 AND a.PublishCatalogId = @PublishCatalogId
			 END 

			delete del from @TBL_DeleteIds del
			where exists(select * from ZnodePimCategoryProduct ZPCC 
				INNER JOIN ZnodePublishProduct ZPP on ZPCC.PimProductId = ZPP.PimproductId	
			       and ZPP.PublishProductId = del.PublishProductId)		
				
		     UPDATE 	TBL 
			 SET PublishCategoryId = NULL 
			 FROM @TBL_DeleteIds TBL 
			 WHERE  EXISTS  (SELECT TOP 1 1 FROM ZnodePublishCategoryProduct ZPCC 
			 WHERE  TBL.PublishCatalogId = ZPCC.PublishCatalogId AND ZPCC.PublishCategoryId = TBL.PublishCategoryId   AND TBL.PublishProductId <> ZPCC.PublishProductId ) 			 

             DELETE FROM ZnodeUserWishList
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE EXISTS
                 (
                     SELECT TOP 1 1
                     FROM ZnodePublishProductDetail ZPPD
                     WHERE ZPPD.SKU = ZnodeUserWishList.SKU
                           AND qw.[PublishProductId] = ZPPD.[PublishProductId]
                 )
             );
            

             DELETE FROM [ZnodePromotionProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishProductId] = [ZnodePromotionProduct].[PublishProductId]
             );
             DELETE FROM [ZnodePromotionCategory]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS w
                 WHERE w.[PublishCategoryId] = [ZnodePromotionCategory].[PublishCategoryId]
             );
             DELETE FROM [ZnodePublishCategoryDetail]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS w
                 WHERE w.[PublishCategoryId] = [ZnodePublishCategoryDetail].[PublishCategoryId]
             );	
            
       
             DELETE FROM [ZnodePublishCategoryProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishProductId] = [ZnodePublishCategoryProduct].[PublishProductId]
             )
			 OR 
			 EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteCategoryProduct AS qw
                 WHERE qw.PublishCategoryProductId = [ZnodePublishCategoryProduct].PublishCategoryProductId
             )
			 ;
             DELETE FROM [ZnodePublishCategoryProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS w
                 WHERE w.[PublishCategoryId] = [ZnodePublishCategoryProduct].[PublishCategoryId]
             );
			  DELETE FROM dbo.ZnodeSearchGlobalProductBoost WHERE 
			 EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishProductId] = ZnodeSearchGlobalProductBoost.[PublishProductId]
              );
             DELETE FROM [ZnodePublishProductDetail]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishProductId] = [ZnodePublishProductDetail].[PublishProductId]
             );
             DELETE FROM [ZNodePublishProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishProductId] = [ZNodePublishProduct].[PublishProductId]
             
			 );
		
			 DELETE FROM ZnodePublishCategoryDetail 
			 WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishCategoryId] = ZnodePublishCategoryDetail.[PublishCategoryId]
              );
			
			DELETE FROM ZnodeSearchGlobalProductCategoryBoost 
			 WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishCategoryId] = ZnodeSearchGlobalProductCategoryBoost.[PublishCategoryId]
             
			 );
			 DELETE FROM ZnodePublishCategory
			 WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishCategoryId] = ZnodePublishCategory.[PublishCategoryId]
             
			 );

			 			 				
             COMMIT TRANSACTION A;
			 
         END TRY
         BEGIN CATCH
		      SELECT ERROR_MESSAGE() 
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_DeletePublishCatalogProduct @PublishCatalogId = '+CAST(@PublishCatalogId AS VARCHAR(200))+',@PimCategoryHierarchyId='+CAST(@PimCategoryHierarchyId AS VARCHAR(200))+',@PimCatalogId='+CAST(@PimCatalogId AS VARCHAR(200));


             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_DeletePublishCatalogProduct',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;

         END CATCH;
     END;
go
if exists(select * from sys.procedures where name = 'Znode_InsertUpdatePimCatalogProductDetailJson')
	drop proc Znode_InsertUpdatePimCatalogProductDetailJson
go
CREATE PROCEDURE [dbo].[Znode_InsertUpdatePimCatalogProductDetailJson] 
(
  @PublishCatalogId INT = 0 
  ,@LocaleId TransferId READONLY 
  ,@UserId INT = 0   
)
AS 

--declare @LocaleId TransferId
--insert into @LocaleId
--select 1
--exec [Znode_InsertUpdatePimCatalogProductDetailJson] @PublishCatalogId=3,@LocaleId=@LocaleId,@UserId=2

--declare @LocaleId TransferId
--insert into @LocaleId
--select 1
--union 
--select 4
--union 
--select 2
--exec [Znode_POC_InsertUpdatePimCatalogProductDetail] @PublishCatalogId=3,@LocaleId=@LocaleId,@UserId=2
BEGIN 
 BEGIN TRY 

  SET NOCOUNT ON 
       DECLARE @LocaleId_In INT = 0 , @DefaultLocaleId INT = dbo.FN_GETDefaultLocaleId()
			   ,@Date DATETIME = dbo.fn_GetDate()
	   DECLARE @PimMediaAttributeId INT = dbo.Fn_GetProductImageAttributeId()		   

	   CREATE TABLE #PimDefaultValueLocale  (PimAttributeDefaultJsonId INT  PRIMARY KEY ,PimAttributeDefaultValueId INT ,LocaleId INT, DefaultValueJson	nvarchar(max) )

	   CREATE TABLE #AttributeValueLocale  (Id int Identity,  PimProductId int, AttributeCode Varchar(300), AttributeValue varchar(max), AttributeEntity varchar(max), LocaleId int )

	    SELECT ZPAV.PimProductId, ZPP.PublishProductId, ZPAVL.LocaleId
		into #ProductLocaleWise
		FROM ZnodePimAttributeValue ZPAV 
		INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId
		inner join ZnodePublishProduct ZPP on ZPAV.PimProductId = ZPP.PimProductId
		WHERE ZPAV.PimAttributeId = (select PimAttributeId from ZnodePimAttribute where AttributeCode = 'SKU')

		SELECT BTM.PimProductId , ZPCPD.PublishProductId, ZPCPD.PublishCatalogId,BTM.ModifiedDate
		into #ProductAttributeXML
		FROM ZnodePublishProductAttributeJson BTM 
		inner join ZnodePublishProduct ZPP1 ON BTM.PimProductId = ZPP1.PimProductId
		inner join ZnodePublishCatalogProductDetail ZPCPD ON ZPP1.PublishProductId = ZPCPD.PublishProductId AND ZPCPD.PublishCatalogId = ZPP1.PublishCatalogId 
		WHERE ZPCPD.PublishCatalogId =  @PublishCatalogId 

	    -------- Products Attribute modified 
		SELECT DISTINCT ZPP.PublishProductId,  ZPCC.PimCategoryHierarchyId 
		Into #ModifiedProducts
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId = ZPP.PimProductId )
		INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ZPAV.PimAttributeId)
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (isnull(ZPPC.PimCategoryHierarchyId,0) = isnull(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId AND ZPFGM.PimAttributeId = ZPAV.PimAttributeId))
		AND EXISTS (SELECT TOP 1 1 FROM #ProductAttributeXML BTM WHERE BTM.PimProductId = ZPP.PimProductId AND BTM.PublishCatalogId = ZPP.PublishCatalogId
						AND (BTM.ModifiedDate < ZPAV.ModifiedDate OR BTM.ModifiedDate < ZPA.ModifiedDate)   ) 
		
		-------- Products not published  
		Insert Into #ModifiedProducts
		SELECT ZPP.PublishProductId,  ZPCC.PimCategoryHierarchyId 
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (isnull(ZPPC.PimCategoryHierarchyId,0) = isnull(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId ))--AND ZPFGM.PimAttributeId = ZPAV.PimAttributeId))
		AND exists(select * from ZnodePimProduct ZPP1 INNER JOIN ZnodePublishState ZPS ON ZPP1.PublishStateId = ZPS.PublishStateId
					where StateName <> 'Publish' and ZPP.PimProductId = ZPP1.PimProductId )	
			
		-------- Products associated to catalog or category or modified catalog category products
		Insert Into #ModifiedProducts		
		SELECT ZPP.PublishProductId,  ZPCC.PimCategoryHierarchyId 
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		INNER JOIN ZnodePimCategoryProduct ZPCC1 ON  ZPP.PimProductId = ZPCC1.PimProductId 
		INNER JOIN ZnodePimCategoryHierarchy ZPCH ON ZPCC1.PimCategoryId = ZPCH.PimCategoryId and ZPC.PimCatalogId = ZPCH.PimCatalogId 
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (isnull(ZPPC.PimCategoryHierarchyId,0) = isnull(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId ))--AND ZPFGM.PimAttributeId = ZPAV.PimAttributeId))
		AND EXISTS (SELECT TOP 1 1 FROM #ProductAttributeXML BTM WHERE BTM.PimProductId = ZPCC1.PimProductId AND BTM.PublishCatalogId = ZPP.PublishCatalogId
						AND (BTM.ModifiedDate < ZPCC1.ModifiedDate )   ) 

		-------- Link Product modified 
		Insert Into #ModifiedProducts	
		SELECT ZPP.PublishProductId,  ZPCC.PimCategoryHierarchyId 
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePimLinkProductDetail ZPAV ON (ZPAV.PimParentProductId = ZPP.PimProductId )
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (isnull(ZPPC.PimCategoryHierarchyId,0) = isnull(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		--AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId AND ZPFGM.PimAttributeId = ZPAV.PimAttributeId))
		AND EXISTS (SELECT TOP 1 1 FROM #ProductAttributeXML BTM WHERE BTM.PimProductId = ZPP.PimProductId AND BTM.PublishCatalogId = ZPP.PublishCatalogId
						AND (BTM.ModifiedDate < ZPAV.ModifiedDate)   ) 

		--------Associated child Products (varients, Group) not published	
		Insert Into #ModifiedProducts	
		SELECT ZPP.PublishProductId,  ZPCC.PimCategoryHierarchyId 
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePimProductTypeAssociation ZPAV ON (ZPAV.PimProductId = ZPP.PimProductId )
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (isnull(ZPPC.PimCategoryHierarchyId,0) = isnull(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		AND exists(select * from ZnodePimProduct ZPP1 INNER JOIN ZnodePublishState ZPS ON ZPP1.PublishStateId = ZPS.PublishStateId
					where StateName <> 'Publish' and ZPAV.PimProductId = ZPP1.PimProductId )


		--------Link child Products (Bundle) not published 	
		Insert Into #ModifiedProducts
		SELECT ZPP.PublishProductId,  ZPCC.PimCategoryHierarchyId 
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePimLinkProductDetail ZPAV ON (ZPAV.PimProductId = ZPP.PimProductId )
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (isnull(ZPPC.PimCategoryHierarchyId,0) = isnull(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		AND exists(select * from ZnodePimProduct ZPP1 INNER JOIN ZnodePublishState ZPS ON ZPP1.PublishStateId = ZPS.PublishStateId
					where StateName <> 'Publish' and ZPAV.PimProductId = ZPP1.PimProductId )

		----Getting products of newly added category hierarchy 
		Insert Into #ModifiedProducts		
		SELECT ZPP.PublishProductId,  ZPCC.PimCategoryHierarchyId
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		INNER JOIN ZnodePimCategoryProduct ZPCC1 ON  ZPP.PimProductId = ZPCC1.PimProductId 
		INNER JOIN ZnodePimCategoryHierarchy ZPCH ON ZPCC1.PimCategoryId = ZPCH.PimCategoryId and ZPC.PimCatalogId = ZPCH.PimCatalogId 
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (isnull(ZPPC.PimCategoryHierarchyId,0) = isnull(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId ))--AND ZPFGM.PimAttributeId = ZPAV.PimAttributeId))
		AND not exists(select * from ZnodePublishCatalogProductDetail ZPCPPD where ZPCPPD.PimCategoryHierarchyId =  ZPCH.PimCategoryHierarchyId and ZPCPPD.PublishCatalogId = ZPP.PublishCatalogId ) 

		---------------------Category associated to catalog or category or modified catalog
		SELECT ZPCH.PimCategoryId, ZPC1.PublishCategoryId, ZPCH.PimCategoryHierarchyId
		into #ModifiedCategory
		FROM ZnodePimCategoryHierarchy ZPCH 
		INNER JOIN ZnodePublishCategory ZPC1 ON ZPCH.PimCategoryId = ZPC1.PimCategoryId 
        WHERE ZPC1.PublishCatalogId =  @PublishCatalogId 
		AND EXISTS (SELECT TOP 1 1 FROM ZnodePublishCatalogProductDetail BTM  
		WHERE BTM.PublishCatalogId = ZPC1.PublishCatalogId AND (BTM.ModifiedDate < ZPCH.ModifiedDate )   )
		and not exists(select * from #ModifiedProducts MP where  isnull(ZPCH.PimCategoryHierarchyId,0) = isnull(MP.PimCategoryHierarchyId,0))

		-------- Category associated to catalog or category or modified catalog
		Insert Into #ModifiedProducts		
		SELECT ZPP.PublishProductId,  ZPCC.PimCategoryHierarchyId 
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		INNER JOIN ZnodePimCategoryProduct ZPCC1 ON  ZPP.PimProductId = ZPCC1.PimProductId 
		INNER JOIN ZnodePimCategoryHierarchy ZPCH ON ZPCC1.PimCategoryId = ZPCH.PimCategoryId and ZPC.PimCatalogId = ZPCH.PimCatalogId 
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (isnull(ZPPC.PimCategoryHierarchyId,0) = isnull(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId ))
		AND EXISTS (SELECT TOP 1 1 FROM #ModifiedCategory BTM where BTM.PimCategoryHierarchyId = ZPCH.PimCategoryHierarchyId  ) 
		------------------

		--Getting all products of catalog for publish first time 
		SELECT ZPP.PublishProductId,  ZPAV.PimAttributeId, ZPP.PublishCatalogId , ZPCC.PimCategoryHierarchyId , ZPCC.PublishCategoryId,
		       ZPAV.PimAttributeValueId, ZPC.CatalogName ,ZPP.PimProductId ,ZPA.AttributeCode				
		INTO #ZnodePublishCategoryProduct
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId = ZPP.PimProductId )
		INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ZPAV.PimAttributeId)
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (isnull(ZPPC.PimCategoryHierarchyId,0) = isnull(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId AND ZPFGM.PimAttributeId = ZPAV.PimAttributeId))
		AND NOT EXISTS (SELECT TOP 1 1 FROM #ProductAttributeXML BTM WHERE BTM.PimProductId = ZPP.PimProductId AND BTM.PublishCatalogId = ZPP.PublishCatalogId)
		
		--Getting all products of catalog for publish which are modified after last publish
		INSERT INTO #ZnodePublishCategoryProduct 
		SELECT ZPP.PublishProductId,  ZPAV.PimAttributeId, ZPP.PublishCatalogId , ZPCC.PimCategoryHierarchyId , ZPCC.PublishCategoryId
			   ,ZPAV.PimAttributeValueId, ZPC.CatalogName--,CASE WHEN ZPCC.PublishProductId IS NULL THEN 1 ELSE  dense_rank()Over(ORDER BY ZPCC.PimCategoryHierarchyId,ZPCC.PublishProductId) END  ProductIndex 	
			   ,ZPP.PimProductId ,ZPA.AttributeCode				
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId = ZPP.PimProductId )
		INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ZPAV.PimAttributeId)
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (ZPPC.PimCategoryHierarchyId = ZPCC.PimCategoryHierarchyId AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId AND ZPFGM.PimAttributeId = ZPAV.PimAttributeId))
		AND EXISTS (SELECT * from #ModifiedProducts MP where ZPP.PublishProductId = MP.PublishProductId 
		AND isnull(ZPCC.PimCategoryHierarchyId,0) = isnull(MP.PimCategoryHierarchyId,0)
		) 
	
		CREATE INDEX IDX_#ZnodePublishCategoryProduct_PimProductId ON #ZnodePublishCategoryProduct(PimProductId)
		CREATE INDEX IDX_#ZnodePublishCategoryProduct_PublishCategoryId ON #ZnodePublishCategoryProduct(PublishCategoryId)

		CREATE INDEX IDX_#ZnodePublishCategoryProduct_PimAttributeValueId ON #ZnodePublishCategoryProduct(PimAttributeValueId)
		CREATE INDEX IDX_#ZnodePublishCategoryProduct_PimAttributeId ON #ZnodePublishCategoryProduct(PimAttributeId)
		 
		------Getting All Link Product Details
		Select ZPLPD.PimParentProductId, ZPLPD.PimProductId, ZPLPD.PimAttributeId, ZPAVL.AttributeValue as SKU
		into #LinkProduct
		FROM ZnodePimLinkProductDetail ZPLPD 
		INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId = ZPLPD.PimProductId)
		INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId
		WHERE exists(select * from ZnodePimAttribute ZPA where ZPA.PimAttributeId = ZPAV.PimAttributeId and ZPA.AttributeCode = 'SKU')
		
		 ----Getting products link product value entity
	     INSERT INTO #AttributeValueLocale ( PimProductId, AttributeCode, AttributeValue, AttributeEntity, LocaleId )
	     SELECT ZPLP.PimParentProductId ,ZPAX.AttributeCode, '' AttributeValue , 
		 JSON_MODIFY( JSON_Modify(ZPAX.AttributeJson , '$.AttributeValues' , 
		 ISNULL(SUBSTRING ( (SELECT ','+cast( LP.SKU as varchar(600))
							FROM #LinkProduct LP
							WHERE LP.PimParentProductId = ZPLP.PimParentProductId 
							AND LP.PimAttributeId = ZPLP.PimAttributeId FOR XML PATH('')),2,8000),'') ),'$.SelectValues',Json_Query('[]'))   

							, ZPAX.LocaleId
		 FROM ZnodePimLinkProductDetail ZPLP
		 INNER JOIN ZnodePimAttributeJSON ZPAX ON (ZPAX.PimAttributeId = ZPLP.PimAttributeId )
		 WHERE EXISTS(SELECT * FROM #ZnodePublishCategoryProduct PPCP  WHERE (ZPLP.PimParentProductId = PPCP.PimProductId ))
		 GROUP BY ZPLP.PimParentProductId ,ZPAX.AttributeCode , ZPAX.AttributeJSON,ZPAX.LocaleId,ZPAX.AttributeCode,ZPLP.PimAttributeId


		  ----Getting product attribute value entity
	      INSERT INTO #AttributeValueLocale ( PimProductId, AttributeCode, AttributeValue, AttributeEntity, LocaleId )
		  SELECT PPCP.PimProductId , ZPA.AttributeCode,ZPAVL.AttributeValue ,
					JSON_MODIFY(
					JSON_MODIFY (Json_Query( ZPAX.AttributeJSON  ) , '$.AttributeValues' ,  ISNULL(ZPAVL.AttributeValue,'') )    
					,'$.SelectValues',Json_Query('[]'))   
					AS 'AttributeEntity', 
				 ZPAVL.LocaleId
		  FROM ZnodePimAttributeValue PPCP
		  INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = PPCP.PimAttributeId)
		  INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON (PPCP.PimAttributeValueId =ZPAVL.PimAttributeValueId)
		  INNER JOIN ZnodePimAttributeJSON ZPAX ON (ZPAX.PimAttributeId = ZPA.PimAttributeId and ZPAX.LocaleId = ZPAVL.LocaleId)
		  WHERE --ZPAVL.LocaleId = @LocaleId_In AND
		  EXISTS(SELECT * FROM #ZnodePublishCategoryProduct PPCP1  WHERE PPCP1.PimProductId = PPCP.PimProductId)--(PPCP1.PimAttributeValueId =PPCP.PimAttributeValueId) AND (ZPA.PimAttributeId = PPCP1.PimAttributeId))
		  AND not exists(select * from #AttributeValueLocale AVL where PPCP.PimProductId = AVL.PimProductId and ZPA.AttributeCode = AVL.AttributeCode and ZPAVL.LocaleId = AVL.LocaleId )
		  and not exists(select * from ZnodePimConfigureProductAttribute UOP where ZPAX.PimAttributeId = UOP.PimAttributeId and PPCP.PimProductId = UOP.PimProductId )

		  IF OBJECT_ID('TEMPDB..#ZnodePublishCatalogProductDetail') IS NOT NULL
			DROP TABLE #ZnodePublishCatalogProductDetail

		  IF OBJECT_ID('TEMPDB..#ZnodePublishCatalogProductDetail1') IS NOT NULL
			DROP TABLE #ZnodePublishCatalogProductDetail1

		  IF OBJECT_ID('TEMPDB..#TBL_ProductRequiredAttribute') IS NOT NULL
			DROP TABLE #TBL_ProductRequiredAttribute

		  
		create table #TBL_ProductRequiredAttribute (PimProductId int,SKU varchar(600),ProductName varchar(600), IsActive varchar(10), LocaleId INT)

		insert into #TBL_ProductRequiredAttribute(PimProductId, LocaleId)
		select distinct PimProductId, LocaleId from #AttributeValueLocale

		update #TBL_ProductRequiredAttribute 
		set SKU = b.AttributeValue
		from #TBL_ProductRequiredAttribute a
		inner join #AttributeValueLocale b on a.PimproductId = b.PimProductId AND a.LocaleId = b.LocaleId
		where b.AttributeCode = 'SKU'

		update #TBL_ProductRequiredAttribute 
		set ProductName = b.AttributeValue
		from #TBL_ProductRequiredAttribute a
		inner join #AttributeValueLocale b on a.PimproductId = b.PimProductId AND a.LocaleId = b.LocaleId
		where b.AttributeCode = 'ProductName'

		update #TBL_ProductRequiredAttribute 
		set IsActive = b.AttributeValue
		from #TBL_ProductRequiredAttribute a
		inner join #AttributeValueLocale b on a.PimproductId = b.PimProductId AND a.LocaleId = b.LocaleId
		where b.AttributeCode = 'IsActive'

		  CREATE INDEX IDX_#TBL_ProductRequiredAttribute_PimProductId ON #TBL_ProductRequiredAttribute(PimProductId)

		  SELECT ZPI.PublishProductId, ZPI.PublishCatalogId ,TYU.PublishCategoryId,ZPI.CatalogName,ISNULL(ZPI.PimCategoryHierarchyId,0) PimCategoryHierarchyId
					,TPAR.SKU,TPAR.ProductName,TPAR.IsActive,TYU.PublishCategoryName CategoryName,TPAR.LocaleId
		   into #ZnodePublishCatalogProductDetail
		   FROM #ZnodePublishCategoryProduct ZPI
		   INNER JOIN #TBL_ProductRequiredAttribute TPAR ON (TPAR.PimProductId = ZPI.PimProductId )
		   LEFT JOIN ZnodePublishCategoryDetail TYU ON (TYU.PublishCategoryId = ZPI.PublishCategoryId)
		   GROUP BY PublishProductId, PublishCatalogId ,TYU.PublishCategoryId,CatalogName,PimCategoryHierarchyId
					,SKU,ProductName,TPAR.IsActive,PublishCategoryName, TPAR.LocaleId  

	
						
			CREATE INDEX IDX_#ZnodePublishCatalogProductDetail ON #ZnodePublishCatalogProductDetail(PublishProductId,PublishCatalogId,PimCategoryHierarchyId,LocaleId)

			SELECT PublishProductId,PublishCatalogId,PimCategoryHierarchyId,SKU,ProductName,CategoryName, CatalogName, LocaleId ,IsActive
			      ,CASE WHEN PublishProductId IS NULL THEN 1 ELSE Row_Number()Over(Partition by PublishProductId ORDER BY PublishProductId,PimCategoryHierarchyId) END  ProductIndex
			INTO #ZnodePublishCatalogProductDetail1
			from #ZnodePublishCatalogProductDetail


			insert into #ZnodePublishCatalogProductDetail1 (PublishProductId,PublishCatalogId,PimCategoryHierarchyId,SKU,ProductName,CategoryName, CatalogName, LocaleId ,IsActive,ProductIndex)
			select PublishProductId,PublishCatalogId,PimCategoryHierarchyId,SKU,ProductName,CategoryName, CatalogName, b.Id ,IsActive,ProductIndex
			from #ZnodePublishCatalogProductDetail1 a
			cross apply @LocaleId b 
			where not exists(select * from #ZnodePublishCatalogProductDetail1 c where a.PublishProductId = c.PublishProductId and b.Id = c.LocaleId  )
			and a.LocaleId = @DefaultLocaleId 

			DELETE ZPCPD 
			from ZnodePublishCatalogProductDetail ZPCPD
			WHERE not exists(select * from #ProductLocaleWise ZPCPD1 where ZPCPD.PublishProductId = ZPCPD1.PublishProductId 
			                 and ZPCPD.LocaleId = ZPCPD1.LocaleId )  

			DELETE ZPCPD 
			from ZnodePublishCatalogProductDetail ZPCPD
			WHERE exists(select * from #ZnodePublishCatalogProductDetail ZPCPD1 where 
						ZPCPD.PublishProductId = ZPCPD1.PublishProductId 
			            and ZPCPD.LocaleId = ZPCPD1.LocaleId 
						and Isnull(ZPCPD1.PimCategoryHierarchyId,0)  <> 0 ) AND ZPCPD.PimCategoryHierarchyId =0
			
			----Update data ZnodePublishCatalogProductDetail 
			UPDATE TARGET
			SET  TARGET.ProductIndex	=SOURCE.ProductIndex
				,TARGET.ModifiedBy		= @UserId	
				,TARGET.ModifiedDate	= @Date
			from ZnodePublishCatalogProductDetail TARGET
			INNER JOIN #ZnodePublishCatalogProductDetail1 SOURCE
			ON (
		        SOURCE.PublishProductId = TARGET.PublishProductId
				AND SOURCE.PublishCatalogId = TARGET.PublishCatalogId 
				AND isnull(SOURCE.PimCategoryHierarchyId,0) = isnull(TARGET.PimCategoryHierarchyId,0)
				AND SOURCE.LocaleId = TARGET.LocaleId --@LocaleId_In
				)

			----Update data ZnodePublishCatalogProductDetail 
			UPDATE TARGET
			SET  
				TARGET.ProductName		=SOURCE.ProductName
				,TARGET.CategoryName	=SOURCE.CategoryName
				,TARGET.CatalogName		=SOURCE.CatalogName
				,TARGET.IsActive		=case when SOURCE.IsActive in ('0','false') then 0 else 1 end 
				,TARGET.ModifiedBy		= @UserId	
				,TARGET.ModifiedDate	= @Date
			from ZnodePublishCatalogProductDetail TARGET
			INNER JOIN #ZnodePublishCatalogProductDetail1 SOURCE
			ON (
		        TARGET.SKU = SOURCE.SKU
				AND SOURCE.LocaleId = TARGET.LocaleId --@LocaleId_In
				)


			----Insert data ZnodePublishCatalogProductDetail 
			INSERT INTO ZnodePublishCatalogProductDetail
				( PublishProductId,PublishCatalogId,PimCategoryHierarchyId,SKU,ProductName,CategoryName, CatalogName,
				  LocaleId ,IsActive,ProductIndex,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate )
			SELECT SOURCE.PublishProductId ,SOURCE.PublishCatalogId ,SOURCE.PimCategoryHierarchyId ,SOURCE.SKU ,SOURCE.ProductName
			,SOURCE.CategoryName ,SOURCE.CatalogName ,SOURCE.LocaleId ,SOURCE.IsActive ,SOURCE.ProductIndex ,@UserId ,@Date ,@UserId ,@Date
			FROM #ZnodePublishCatalogProductDetail1 SOURCE
			WHERE NOT EXISTS(SELECT * FROM ZnodePublishCatalogProductDetail TARGET WHERE SOURCE.PublishProductId = TARGET.PublishProductId
							AND SOURCE.PublishCatalogId = TARGET.PublishCatalogId 
							AND SOURCE.PimCategoryHierarchyId = TARGET.PimCategoryHierarchyId 
							AND TARGET.LocaleId = SOURCE.LocaleId )
					
			----		  
		    insert into ZnodePublishCatalogProductDetail (PublishProductId,PublishCatalogId,PimCategoryHierarchyId,SKU,ProductName,CategoryName, CatalogName,
				  LocaleId ,IsActive,ProductIndex,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			select PublishProductId,PublishCatalogId,PimCategoryHierarchyId,SKU,ProductName,CategoryName, CatalogName,
				  b.Id ,IsActive,ProductIndex,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
			from ZnodePublishCatalogProductDetail a
			cross apply @LocaleId b 
			where not exists(select * from ZnodePublishCatalogProductDetail c where a.PublishProductId = c.PublishProductId and b.Id = c.LocaleId  )
			and a.LocaleId = @DefaultLocaleId

			DELETE ZPCPD from ZnodePublishCatalogProductDetail ZPCPD
			inner join ZnodePublishProduct ZPD on ZPCPD.PublishProductId = ZPD.PublishProductId and ZPCPD.PublishCatalogId = ZPD.PublishCatalogId
			inner join ZnodePublishCatalog ZPC on ZPCPD.PublishCatalogId = ZPC.PublishCatalogId
			where not exists(select * from ZnodePimCategoryProduct ZPCC 
			      inner join ZnodePimCategoryHierarchy ZPCH ON ZPCC.PimCategoryId = ZPCH.PimCategoryId where ZPD.PimProductId = ZPCC.PimProductId and ZPC.PimCatalogId = ZPCH.PimCatalogId and ZPCPD.PimCategoryHierarchyId = ZPCH.PimCategoryHierarchyId)
			and ZPCPD.PimCategoryHierarchyId <> 0

			update ZnodePublishCatalogProductDetail 
			set SKU = b.AttributeValue
			from ZnodePublishCatalogProductDetail a
			inner join ZnodePublishProduct ZPP on a.PublishProductId = ZPP.PublishProductId
			inner join #AttributeValueLocale b on ZPP.PimproductId = b.PimProductId AND a.LocaleId = b.LocaleId
			where b.AttributeCode = 'SKU'

		update ZnodePublishCatalogProductDetail 
		set ProductName = b.AttributeValue
		from ZnodePublishCatalogProductDetail a
		inner join ZnodePublishProduct ZPP on a.PublishProductId = ZPP.PublishProductId
		inner join #AttributeValueLocale b on ZPP.PimproductId = b.PimProductId AND a.LocaleId = b.LocaleId
		where b.AttributeCode = 'ProductName'

		update ZnodePublishCatalogProductDetail 
		set IsActive = b.AttributeValue
		from ZnodePublishCatalogProductDetail a
		inner join ZnodePublishProduct ZPP on a.PublishProductId = ZPP.PublishProductId
		inner join #AttributeValueLocale b on ZPP.PimproductId = b.PimProductId AND a.LocaleId = b.LocaleId
		where b.AttributeCode = 'IsActive'

		  select a.PimProductId,  a.PimAttributeId
		  into #PimProductAttributeDefaultValue
		  from ZnodePimAttributeValue a 
		  Inner join ZnodePimProductAttributeDefaultValue b on a.PimAttributeValueId = b.PimAttributeValueId 

		  create index Idx_#PimProductAttributeDefaultValue on #PimProductAttributeDefaultValue (PimProductId,PimAttributeId)

		  INSERT INTO #PimDefaultValueLocale
		  SELECT PimAttributeDefaultJsonId,PimAttributeDefaultValueId,LocaleId ,DefaultValueJson
		  FROM ZnodePimAttributeDefaultJSON

		  SELECT  AA.DefaultValueJson , ZPADV.PimAttributeValueId, AA.LocaleId 
		  into #PimAttributeDefaultXML
		  FROM ZnodePimAttributeDefaultJSON AA 
		  INNER JOIN #PimDefaultValueLocale GH ON (GH.PimAttributeDefaultJsonId = AA.PimAttributeDefaultJsonId AND AA.LocaleId = GH.LocaleId)
		  INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId AND AA.LocaleId = ZPADV.LocaleId)

		  ----Getting child facets for merging		  
		  Select distinct ZPPADV.PimAttributeDefaultValueId, ZPAV_Parent.PimAttributeValueId, ZPPADV.LocaleId
		  Into #PimChildProductFacets
		  from ZnodePimAttributeValue ZPAV_Parent
		  inner join ZnodePimProductTypeAssociation ZPPTA ON ZPAV_Parent.PimProductId = ZPPTA.PimParentProductId
		  inner join ZnodePimAttributeValue ZPAV_Child ON ZPPTA.PimProductId = ZPAV_Child.PimProductId AND ZPAV_Parent.PimAttributeId = ZPAV_Child.PimAttributeId
		  inner join ZnodePimProductAttributeDefaultValue ZPPADV ON ZPAV_Child.PimAttributeValueId = ZPPADV.PimAttributeValueId 
		  where exists(select * from ZnodePimFrontendProperties ZPFP where ZPAV_Parent.PimAttributeId = ZPFP.PimAttributeId and ZPFP.IsFacets = 1)
		  and exists(select * from #ZnodePublishCategoryProduct ZPPC where ZPAV_Parent.PimProductId = ZPPC.PimProductId )
		  and not exists(select * from ZnodePimProductAttributeDefaultValue ZPPADV1 where ZPAV_Parent.PimAttributeValueId = ZPPADV1.PimAttributeValueId 
		                 and ZPPADV1.PimAttributeDefaultValueId = ZPPADV.PimAttributeDefaultValueId )

		  ----Merging childs facet attribute Default value XML for parent
		  insert into #PimAttributeDefaultXML (DefaultValueJson, PimAttributeValueId, LocaleId)
		  select ZPADX.DefaultValueJson, ZPPADV.PimAttributeValueId, ZPPADV.LocaleId
		  from #PimChildProductFacets ZPPADV		  
		  inner join ZnodePimAttributeDefaultJSON ZPADX ON ( ZPPADV.PimAttributeDefaultValueId = ZPADX.PimAttributeDefaultValueId AND ZPPADV.LocaleId = ZPADX.LocaleId)

		  CREATE INDEX Idx_#PimDefaultValueLocale ON #PimDefaultValueLocale(PimAttributeDefaultJsonId,LocaleId)

		  CREATE INDEX Idx_#PimAttributeDefaultXML ON #PimAttributeDefaultXML(PimAttributeValueId,LocaleId)
		  INCLUDE (DefaultValueJson)

		----Getting default attribute value entity
		INSERT INTO #AttributeValueLocale
		
		  SELECT PPCP.PimProductId, PPCP.AttributeCode,'' AttributeValue,
		JSON_MODIFY (JSON_MODIFY (ZPAX.AttributeJson,'$.AttributeValues',''), '$.SelectValues',
			
				Isnull((SELECT 
							Isnull(JSON_VALUE(DefaultValueJson, '$.Code'),'') Code 
							,Isnull(JSON_VALUE(DefaultValueJson, '$.LocaleId'),0) LocaleId
							,IsNull(JSON_VALUE(DefaultValueJson, '$.Value'),'') Value
							,IsNull(JSON_VALUE(DefaultValueJson, '$.AttributeDefaultValue'),'') AttributeDefaultValue
							,Isnull(JSON_VALUE(DefaultValueJson, '$.DisplayOrder'),0) DisplayOrder
							,Isnull(JSON_VALUE(DefaultValueJson, '$.IsEditable'),'false') IsEditable
							,Isnull(JSON_VALUE(DefaultValueJson, '$.SwatchText'),'') SwatchText
							,Isnull(JSON_VALUE(DefaultValueJson, '$.Path'),'') Path
					FROM #PimAttributeDefaultXML aa
					WHERE (aa.PimAttributeValueId = PPCP.PimAttributeValueId and AA.LocaleId = ZPAX.LocaleId ) For JSON Auto 
				),'[]') 
				) 
			 AttributeEntity 
		 , ZPAX.LocaleId
		 FROM #ZnodePublishCategoryProduct PPCP 
		 INNER JOIN ZnodePimAttributeJSON ZPAX ON (ZPAX.PimAttributeId = PPCP.PimAttributeId)
		 where 
		 not exists(select * from #AttributeValueLocale AVL where PPCP.PimProductId = AVL.PimProductId and PPCP.AttributeCode = AVL.AttributeCode and ZPAX.LocaleId = AVL.LocaleId )
		 and exists(select * from #PimProductAttributeDefaultValue a  where PPCP.PimProductId = a.PimProductId and ZPAX.PimAttributeId = a.PimAttributeId )
		 and exists(select * from ZnodePimAttributeValue a Inner join ZnodePimProductAttributeDefaultValue b on a.PimAttributeValueId = b.PimAttributeValueId 
		            and PPCP.PimProductId = a.PimProductId and ZPAX.PimAttributeId = a.PimAttributeId )
		 and not exists(select * from ZnodePimConfigureProductAttribute UOP where ZPAX.PimAttributeId = UOP.PimAttributeId and PPCP.PimProductId = UOP.PimProductId )

		 
		 ----Getting text attribute value entity
		 INSERT INTO #AttributeValueLocale ( PimProductId, AttributeCode, AttributeValue, AttributeEntity, LocaleId )
		 SELECT PPCP.PimProductId , ZPA.AttributeCode,'' AttributeValue ,
		 JSON_MODIFY (JSON_MODIFY (Json_Query( ZPAX.AttributeJSON  ) , '$.AttributeValues' ,  ISNULL(ZPAVL.AttributeValue,'') ) ,'$.SelectValues',Json_Query('[]'))
		    AS 'AttributeEntity', 
		 ZPAVL.LocaleId
		 FROM ZnodePimAttributeValue PPCP
		 INNER JOIN ZnodePimProductAttributeTextAreaValue ZPAVL ON (PPCP.PimAttributeValueId =ZPAVL.PimAttributeValueId)
		 INNER JOIN ZnodePimAttributeJSON ZPAX ON (ZPAX.PimAttributeId = PPCP.PimAttributeId AND ZPAX.LocaleId = ZPAVL.LocaleId)
		 INNER JOIN ZnodePimAttribute ZPA on PPCP.PimAttributeId = ZPA.PimAttributeId
	     where exists(select * from #ZnodePublishCategoryProduct PPCP1 WHERE PPCP1.PimProductId = PPCP.PimProductId) --(PPCP1.PimAttributeValueId =ZPAVL.PimAttributeValueId) and (ZPAX.PimAttributeId = PPCP1.PimAttributeId))
		 and not exists(select * from #AttributeValueLocale AVL where PPCP.PimProductId = AVL.PimProductId and ZPA.AttributeCode = AVL.AttributeCode and ZPAVL.LocaleId = AVL.LocaleId )
		group by PPCP.PimProductId , ZPA.AttributeCode,ZPAX.AttributeJson,ZPAVL.LocaleId,ZPAVL.AttributeValue

		 ----Getting custome field value entity
		 INSERT INTO #AttributeValueLocale ( PimProductId, AttributeCode, AttributeValue, AttributeEntity, LocaleId )
 		 SELECT ZPCFX.PimProductId , ZPCFX.CustomCode, '' AttributeValue ,
		 JSON_MODIFY (Json_Query( ZPCFX.CustomeFiledJson) ,'$.SelectValues',Json_Query('[]')) 
		 AttributeEntity, 
		 ZPCFX.LocaleId
		 FROM ZnodePimCustomeFieldJSON ZPCFX 
		 where exists(select * from #ZnodePublishCategoryProduct PPCP where (PPCP.PimProductId = ZPCFX.PimProductId ))
		 and not exists(select * from #AttributeValueLocale AVL where ZPCFX.PimProductId = AVL.PimProductId and ZPCFX.CustomCode = AVL.AttributeCode and ZPCFX.LocaleId = AVL.LocaleId )
		 group by ZPCFX.PimProductId , ZPCFX.CustomCode, ZPCFX.CustomeFiledJson , ZPCFX.LocaleId

		  ----Getting image attribute value entity
		 INSERT INTO #AttributeValueLocale ( PimProductId, AttributeCode, AttributeValue, AttributeEntity, LocaleId )
		 SELECT PPCP.PimProductId, ZPA.AttributeCode,'' AttributeValue,
		 JSON_MODIFY (JSON_MODIFY (Json_Query( ZPAX.AttributeJSON  ) , '$.AttributeValues',  
		 ISNULL((Select stuff( (SELECT ','+ZPPAM.MediaPath FROM ZnodePimProductAttributeMedia ZPPAM WHERE (ZPPAM.PimAttributeValueId = PPCP.PimAttributeValueId)
				 FOR XML PATH(''),Type).value('.', 'varchar(max)'), 1, 1, '')
				 
				 ),'') ) ,'$.SelectValues',Json_Query('[]'))   
				 AS 'AttributeEntity', 
				 ZPAX.LocaleId
		 FROM ZnodePimAttributeValue PPCP 
		 INNER JOIN ZnodePimAttributeJSON ZPAX ON (ZPAX.PimAttributeId = PPCP.PimAttributeId)
		 INNER JOIN ZnodePimAttribute ZPA ON ZPA.PimAttributeId = PPCP.PimAttributeId
		 where not exists(select * from #AttributeValueLocale AVL where PPCP.PimProductId = AVL.PimProductId and ZPA.AttributeCode = AVL.AttributeCode and ZPAX.LocaleId = AVL.LocaleId )
		 and exists(select * from ZnodePimProductAttributeMedia b where PPCP.PimAttributeValueId = b.PimAttributeValueId )
		 and exists(select * from #ZnodePublishCategoryProduct PPCP1 where PPCP.PimProductId = PPCP1.PimProductId )
		 and not exists(select * from ZnodePimConfigureProductAttribute UOP where ZPAX.PimAttributeId = UOP.PimAttributeId and PPCP.PimProductId = UOP.PimProductId )

		 -------------configurable attribute 		 
		
		INSERT INTO #AttributeValueLocale ( PimProductId, AttributeCode, AttributeValue, AttributeEntity, LocaleId )
		SELECT DISTINCT UOP.PimProductId,c.AttributeCode,'' AttributeValue ,--'<Attributes><AttributeEntity>'+
		JSON_MODIFY (Isnull(JSON_MODIFY (c.AttributeJson,'$.AttributeValues',''),'')  ,'$.SelectValues',
			Isnull((SELECT DISTINCT 
							Isnull(JSON_VALUE(AA.DefaultValueJson, '$.Code'),'') Code 
							,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.LocaleId'),0) LocaleId
							,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.Value'),'') Value
							,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.AttributeDefaultValue'),'') AttributeDefaultValue
							,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.DisplayOrder'),0) DisplayOrder
							,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.IsEditable'),'false') IsEditable
							,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.SwatchText'),'') SwatchText
							,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.Path'),'') Path 
							,ISNULL(ZPA.DisplayOrder,0)  AS VariantDisplayOrder 
							,ISNULL(ZPAVL_SKU.AttributeValue,'')   AS VariantSKU 
							,Isnull(ZM.Path,'') AS VariantImagePath 
						 FROM ZnodePimAttributeDefaultJSON AA 
						 INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId )
						 INNER JOIN ZnodePimAttributeValue ZPAV1 ON (ZPAV1.PimAttributeValueId= ZPADV.PimAttributeValueId )
						 -- check/join for active variants 
						 INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId =ZPAV1.PimProductId)
						 INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON (ZPAV.PimAttributevalueid = ZPAVL.PimAttributeValueId AND ZPAVL.AttributeValue = 'True')
						 INNER JOIN ZnodePimProductTypeAssociation YUP ON (YUP.PimProductId = ZPAV1.PimProductId)
						 -- SKU
						 INNER JOIN ZnodePimAttributeValue ZPAV_SKU ON(YUP.PimProductId = ZPAV_SKU.PimProductId)
						 INNER JOIN ZnodePimAttributeValueLocale ZPAVL_SKU ON (ZPAVL_SKU.PimAttributeValueId = ZPAV_SKU.PimAttributeValueId)
						 LEFT  JOIN ZnodePimAttributeValue ZPAV12 ON (ZPAV12.PimProductId= YUP.PimProductId  AND ZPAV12.PimAttributeId = @PimMediaAttributeId ) 
						 LEFT JOIN ZnodePimProductAttributeMedia ZPAVM ON (ZPAVM.PimAttributeValueId= ZPAV12.PimAttributeValueId ) 
						 LEFT JOIN ZnodeMedia ZM ON (ZM.MediaId = ZPAVM.MediaId)
						 LEFT JOIN ZnodePimAttribute ZPA ON (ZPA.PimattributeId = ZPAV1.PimAttributeId)
						 WHERE (YUP.PimParentProductId  = UOP.PimProductId AND ZPAV1.pimAttributeId = UOP.PimAttributeId )
						 -- Active Variants
						 AND ZPAV.PimAttributeId = (SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'IsActive')
						 -- VariantSKU
						 AND ZPAV_SKU.PimAttributeId = (SELECT PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'SKU')
		FOR JSON auto),'[]')) SelectValuesEntity ,
		c.LocaleId
		FROM ZnodePimConfigureProductAttribute UOP 
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = UOP.PimAttributeId )
		WHERE  exists(select * from #ZnodePublishCategoryProduct PPCP1 where UOP.PimProductId = PPCP1.PimProductId )

		-------------configurable attribute 

		CREATE INDEX IDX_#AttributeValueLocale ON #AttributeValueLocale(PimProductId,AttributeCode,LocaleId)
		CREATE INDEX IDX_#AttributeValueLocale_Id ON #AttributeValueLocale(ID)
		 	
		delete ZPPAX from ZnodePublishProductAttributeJson ZPPAX
		where exists (select * from #AttributeValueLocale AVL where ZPPAX.PimProductId = AVL.PimProductId and AVL.LocaleId = ZPPAX.LocaleId )
		and not exists(select * from #AttributeValueLocale AVL where ZPPAX.PimProductId = AVL.PimProductId and AVL.LocaleId = ZPPAX.LocaleId AND ZPPAX.AttributeCode = AVL.AttributeCode )

		DECLARE @MaxCount INT, @MinRow INT, @MaxRow INT, @Rows numeric(10,2);
		SELECT @MaxCount = COUNT(*) FROM #AttributeValueLocale;

		SELECT @Rows = 200000
        
		SELECT @MaxCount = CEILING(@MaxCount / @Rows);

		IF OBJECT_ID('tempdb..#Temp_ImportLoop') IS NOT NULL
            DROP TABLE #Temp_ImportLoop;
        
		---- To get the min and max rows for import in loop
		;WITH cte AS 
		(
			SELECT RowId = 1, 
				   MinRow = 1, 
                   MaxRow = cast(@Rows as int)
            UNION ALL
            SELECT RowId + 1, 
                   MinRow + cast(@Rows as int), 
                   MaxRow + cast(@Rows as int)
            FROM cte
            WHERE RowId + 1 <= @MaxCount
		)
        SELECT RowId, MinRow, MaxRow
        INTO #Temp_ImportLoop
        FROM cte
		option (maxrecursion 0);


 
	
		DECLARE cur_BulkData CURSOR LOCAL FAST_FORWARD
        FOR SELECT MinRow, MaxRow FROM #Temp_ImportLoop
		WHERE EXISTS(SELECT * FROM #AttributeValueLocale);

        OPEN cur_BulkData;
        FETCH NEXT FROM cur_BulkData INTO  @MinRow, @MaxRow;

        WHILE @@FETCH_STATUS = 0
        BEGIN
	         UPDATE ZnodePublishProductAttributeJson set IsUpdateLocaleWise = 0 where isnull(IsUpdateLocaleWise,0) = 1
			  ----Update Product Attribute XML
			 UPDATE ZPPAX SET ZPPAX.Attributes = AVL.AttributeEntity, ZPPAX.ModifiedBy = @UserId, ZPPAX.ModifiedDate = GETDATE() 
			        , ZPPAX.IsUpdateLocaleWise = 0
			 FROM ZnodePublishProductAttributeJson ZPPAX 
			 INNER JOIN #AttributeValueLocale AVL ON ZPPAX.PimProductId = AVL.PimProductId and AVL.LocaleId = ZPPAX.LocaleId AND ZPPAX.AttributeCode = AVL.AttributeCode 
			 where  AVL.Id BETWEEN @MinRow AND @MaxRow and AVL.AttributeEntity is not null
		 
			 ----Insert Product Attribute XML
			 INSERT INTO ZnodePublishProductAttributeJson(PimProductId,LocaleId,AttributeCode,Attributes,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			 SELECT AVL.PimProductId, AVL.LocaleId, AVL.AttributeCode, cast(AVL.AttributeEntity as varchar(max)), @UserId CreatedBy, GETDATE() CreatedDate, @UserId ModifiedBy, GETDATE() ModifiedDate
			 FROM #AttributeValueLocale AVL
			 WHERE NOT EXISTS(SELECT * FROM ZnodePublishProductAttributeJson ZPPAX WHERE AVL.PimProductId = ZPPAX.PimProductId AND  AVL.LocaleId = ZPPAX.LocaleId AND AVL.AttributeCode = ZPPAX.AttributeCode )
			 and  AVL.Id BETWEEN @MinRow AND @MaxRow and AVL.AttributeEntity is not null
			 GROUP BY AVL.PimProductId, AVL.AttributeEntity, AVL.LocaleId, AVL.AttributeCode

			 FETCH NEXT FROM cur_BulkData INTO  @MinRow, @MaxRow;
        END;
		CLOSE cur_BulkData;
		DEALLOCATE cur_BulkData;

		delete ZPPAX
		from ZnodePublishProductAttributeJson ZPPAX
		where LocaleId <> @DefaultLocaleId
		and exists( select * from ZnodePublishProductAttributeJson ZPPAX1 where ZPPAX.AttributeCode = ZPPAX1.AttributeCode and ZPPAX.PimProductId = ZPPAX1.PimProductId )
		and not exists(select * from #ProductLocaleWise AVL where AVL.PimProductId = ZPPAX.PimProductId AND  AVL.LocaleId = ZPPAX.LocaleId )
		
		
		delete  ZPPAX
		from ZnodePublishProductAttributeJson ZPPAX
		WHERE not exists(select * from #ProductLocaleWise ZLW where ZPPAX.PimProductId = ZLW.PimProductId 
			                and ZPPAX.LocaleId = ZLW.LocaleId )

		select PimProductId,Attributes Attributes,AttributeCode
		into #ZnodePublishProductAttributeJson
		from ZnodePublishProductAttributeJson 
		where LocaleId = @DefaultLocaleId

		insert into ZnodePublishProductAttributeJson (PimProductId,Attributes,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,AttributeCode)
		select PimProductId,Attributes,b.id,@UserId,GETDATE(),@UserId,GETDATE(),AttributeCode
		from #ZnodePublishProductAttributeJson a
		cross apply @LocaleId b 
		where not exists(select * from ZnodePublishProductAttributeJson c where a.PimProductId = c.PimProductId and b.Id = c.LocaleId AND a.AttributeCode = c.AttributeCode )
		and b.Id <> @DefaultLocaleId
					  
		END TRY
         BEGIN CATCH
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_InsertUpdatePimCatalogProductDetailJson @PublishCatalogId = '+CAST(@PublishCatalogId AS VARCHAR(200))+',@UserId='+CAST(@UserId AS VARCHAR(200));


             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_InsertUpdatePimCatalogProductDetailJson',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
            
            
         END CATCH;
END
go
INSERT INTO [dbo].[ZnodeMessage]
          ([MessageCode]
          ,[MessageType]
          ,[MessageName]
          ,[CreatedBy]
          ,[CreatedDate]
          ,[ModifiedBy]
          ,[ModifiedDate])
select 89,'Text','The added value should be the same as the existing value because this value cannot be updated.',2,getdate(),2,getdate()
where not exists(select * from [ZnodeMessage] where [MessageCode] = 89 )
	
INSERT INTO [dbo].[ZnodeMessage]
          ([MessageCode]
          ,[MessageType]
          ,[MessageName]
          ,[CreatedBy]
          ,[CreatedDate]
          ,[ModifiedBy]
          ,[ModifiedDate])
select 90,'Text','Country should belong to the selected Store.',2,getdate(),2,getdate()
where not exists(select * from [ZnodeMessage] where [MessageCode] = 90 )
	
INSERT INTO [dbo].[ZnodeMessage]
          ([MessageCode]
          ,[MessageType]
          ,[MessageName]
          ,[CreatedBy]
          ,[CreatedDate]
          ,[ModifiedBy]
          ,[ModifiedDate])
select 91,'Text','The default address cannot be marked as non-default.',2,getdate(),2,getdate()
where not exists(select * from [ZnodeMessage] where [MessageCode] = 91 )


delete from ZnodeImportUpdatableColumns
where ImportHeadId = (SELECT TOP 1 ImportHeadId from ZnodeImportHead where Name = 'Account')
and ColumnName in ('IsDefaultBilling','IsDefaultShipping')
GO
if exists(select * from sys.procedures where name = 'Znode_ImportCustomer')
	 drop proc Znode_ImportCustomer
go
CREATE PROCEDURE [dbo].[Znode_ImportCustomer](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @LocaleId int= 0,@PortalId int ,@CsvColumnString nvarchar(max))
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import SEO Details
	
	-- Unit Testing : 
	--------------------------------------------------------------------------------------

BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max),@AspNetZnodeUserId nvarchar(256),@ASPNetUsersId nvarchar(256),
		@PasswordHash nvarchar(max),@SecurityStamp nvarchar(max),@RoleId nvarchar(256),@IsAllowGlobalLevelUserCreation nvarchar(10)
		Declare @ProfileId  int
		DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		 
		SET @SecurityStamp = '0wVYOZNK4g4kKz9wNs-UHw2'
		SET @PasswordHash = 'APy4Tm1KbRG6oy7h3r85UDh/lCW4JeOi2O2Mfsb3OjkpWTp1YfucMAvvcmUqNaSOlA==';
		SELECT  @RoleId  = Id from AspNetRoles where   NAME = 'Customer'  

		Select @IsAllowGlobalLevelUserCreation = FeatureValues from ZnodeGlobalsetting where FeatureName = 'AllowGlobalLevelUserCreation'

		DECLARE @GetDate datetime= dbo.Fn_GetDate();
		-- Retrive RoundOff Value from global setting 

		-- Three type of import required three table varible for product , category and brand
		DECLARE @InsertCustomer TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, UserName nvarchar(512) ,FirstName	nvarchar(200),
			LastName nvarchar(200), BudgetAmount	numeric,Email	nvarchar(100),PhoneNumber	nvarchar(100),
		    EmailOptIn	bit	,ReferralStatus	nvarchar(40),IsActive	bit	,ExternalId	nvarchar(max),CreatedDate Datetime,
			ProfileName varchar(200),AccountCode nvarchar(100),DepartmentName varchar(300),RoleName nvarchar(256), GUID NVARCHAR(400)
		);

			--SET @SSQL = 'SELECT RowNumber,UserName,FirstName,LastName,BudgetAmount,Email,PhoneNumber,EmailOptIn,IsActive,ExternalId,GUID FROM '+ @TableName;
		SET @SSQL = 'SELECT RowNumber,' + @CsvColumnString + ',GUID FROM '+ @TableName;
		INSERT INTO @InsertCustomer( RowNumber,UserName,FirstName,LastName,Email,PhoneNumber, EmailOptIn,IsActive,ExternalId,CreatedDate,ProfileName,AccountCode,DepartmentName,RoleName,GUID )
		EXEC sys.sp_sqlexec @SSQL;
		
		
		select TOP 1 @ProfileId   =  ProfileId from ZnodePortalprofile where Portalid = @Portalid and IsDefaultRegistedProfile=1
		If( Isnull(@ProfileId ,0) = 0 ) 
		Begin
		
		
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '62', 'Default Portal Profile', '', @NewGUId, 1 , @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
							
				UPDATE ZnodeImportProcessLog
				SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
				WHERE ImportProcessLogId = @ImportProcessLogId;
			

				SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog 
				WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
				Select @SuccessRecordCount = 0

				UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount , 
				TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
				WHERE ImportProcessLogId = @ImportProcessLogId;

				DELETE FROM @InsertCustomer 
				SET @Status = 0;

				COMMIT TRAN A;
				Return 0 
		End
	
	    -- start Functional Validation 

		-----------------------------------------------
		--If @IsAllowGlobalLevelUserCreation = 'false'
		--		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		--			   SELECT '10', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		--			   FROM @InsertCustomer AS ii
		--			    WHERE ltrim(rtrim(ii.UserName)) in 
		--			   (
		--				   SELECT UserName FROM AspNetZnodeUser   where PortalId = @PortalId
		--			   );
		--Else 
		--		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		--			   SELECT '10', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		--			   FROM @InsertCustomer AS ii
		--			   WHERE ltrim(rtrim(ii.UserName)) in 
		--			   (
		--				   SELECT UserName FROM AspNetZnodeUser   
		--			   );
		
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
					   SELECT '35', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
					   FROM @InsertCustomer AS ii
					   WHERE ii.UserName not like '%_@_%_.__%' 
				
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
					   SELECT '30', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
					   FROM @InsertCustomer AS ii
					   WHERE ltrim(rtrim(ii.UserName)) in 
					   (SELECT ltrim(rtrim(UserName))  FROM @InsertCustomer group by ltrim(rtrim(UserName))  having count(*) > 1 )

				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				select '77', 'AccountCode', ii.AccountCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				from @InsertCustomer ii 
				where isnull(ltrim(rtrim(ii.AccountCode)),'') !='' 
				and not exists(select * from ZnodeAccount za inner join ZnodePortalAccount zpa on za.AccountId = zpa.AccountId
					where  isnull(ltrim(rtrim(ii.AccountCode)),'') = za.AccountCode and zpa.PortalId = @PortalId )
				and exists(SELECT isnull(ltrim(rtrim(AccountCode)),'') FROM ZnodeAccount za1 where isnull(ltrim(rtrim(ii.AccountCode)),'') = za1.AccountCode );

				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '73', 'AccountCode', AccountCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				FROM @InsertCustomer AS ii
				WHERE   isnull(ltrim(rtrim(ii.AccountCode)),'') !=''   and isnull(ltrim(rtrim(ii.AccountCode)),'') not in 
				(
					SELECT isnull(ltrim(rtrim(AccountCode)),'') FROM ZnodeAccount   
				);

				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '88', 'AccountCode', AccountCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				FROM @InsertCustomer AS ii
				WHERE   isnull(ltrim(rtrim(ii.AccountCode)),'') !='' and  exists
				(
					SELECT top 1 1 FROM  AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
				INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	 
				inner join ZnodeAccount ZA on  ZU.AccountId = ZA.AccountId
				where ANZU.UserName = ii.UserName and  ZA.AccountCode != ii.AccountCode
				);

				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '92', 'RoleName', RoleName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				FROM @InsertCustomer AS ii
				where isnull(ltrim(rtrim(ii.RoleName)),'') <> '' and  isnull(ltrim(rtrim(ii.RoleName)),'') in ('User','Manager','Administrator')
				and exists(select * from ZnodeUser a INNER JOIN ASPNetUsers b on (b.Id = a.AspNetUserId)
						inner join AspNetZnodeUser c on (c.AspNetZnodeUserId = b.UserName)
						--inner join @InsertCustomer IC on (IC.UserName = c.UserName)						
						inner join AspNetUserRoles u on u.UserId = b.Id
						inner join AspNetRoles ZD on u.RoleId = zd.Id
						where (ii.UserName = c.UserName) and isnull(ltrim(rtrim(ii.RoleName)),'') <> ZD.Name )

				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '75', 'RoleName', RoleName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				FROM @InsertCustomer AS ii
				WHERE   isnull(ltrim(rtrim(ii.AccountCode)),'') ='' and isnull(ltrim(rtrim(RoleName)),'') <> '' 

				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '74', 'RoleName', RoleName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				FROM @InsertCustomer AS ii
				WHERE --ltrim(rtrim(ii.RoleName)) not in ('User','Manager','Administrator') and isnull(ltrim(rtrim(RoleName)),'') <> '' and
				 isnull(ltrim(rtrim(RoleName)),'') <> '' and not exists (select top 1 1 from  AspNetRoles ANR where name in ('User','Manager','Administrator') and  ANR.name =ii.RoleName)


				--INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				--SELECT '75', 'RoleName', RoleName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				--FROM @InsertCustomer AS ii
				--WHERE  isnull(ltrim(rtrim(AccountCode)),'') != '' and isnull(ltrim(rtrim(RoleName)),'') <> ''

				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '76', 'DepartmentName', DepartmentName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				FROM @InsertCustomer AS ii
				WHERE isnull(ltrim(rtrim(ii.DepartmentName)),'') <> ''
				and not exists(select * from  ZnodeAccount ZA inner join ZnodeDepartment ZD on ZA.AccountId = ZD.AccountId
					where isnull(ltrim(rtrim(ii.AccountCode)),'') = ltrim(rtrim(za.AccountCode))
					and isnull(ltrim(rtrim(ii.DepartmentName)),'') = ltrim(rtrim(ZD.DepartmentName)))
				

		 UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ UserName - ' + ISNULL(UserName,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN @InsertCustomer IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL

		--Note : Content page import is not required 
		
		-- End Function Validation 	
		-----------------------------------------------
		--- Delete Invalid Data after functional validatin  

		DELETE FROM @InsertCustomer
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
			--AND GUID = @NewGUID
		);


		-- Update Record count in log 
        
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM @InsertCustomer
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount , 
		TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End

		-- Insert Product Data 
				
				
				DECLARE @InsertedAspNetZnodeUser TABLE (AspNetZnodeUserId nvarchar(256) ,UserName nvarchar(512),PortalId int )
				DECLARE @InsertedASPNetUsers TABLE (Id nvarchar(256) ,UserName nvarchar(512))
				DECLARE @InsertZnodeUser TABLE (UserId int,AspNetUserId nvarchar(256),CreatedDate Datetime )

				UPDATE ANU SET 
				ANU.PhoneNumber	= IC.PhoneNumber, ANU.LockoutEndDateUtc = case when IC.IsActive = 0 then @GetDate when IC.IsActive = 1 then null else ANU.LockoutEndDateUtc end
				from AspNetZnodeUser ANZU 
				INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
				INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
				INNER JOIN @InsertCustomer IC ON ANZU.UserName = IC.UserName 
				where case when @IsAllowGlobalLevelUserCreation = 'true' then -1 else Isnull(ANZU.PortalId,0) end = case when @IsAllowGlobalLevelUserCreation = 'true' then -1 else Isnull(@PortalId ,0) end
				----Isnull(ANZU.PortalId,0) = Isnull(@PortalId ,0)

				UPDATE ZU SET 
				ZU.FirstName	= IC.FirstName,
				ZU.LastName		= IC.LastName,
				--ZU.MiddleName	= IC.MiddleName,
				ZU.BudgetAmount = IC.BudgetAmount,
				ZU.Email		= IC.Email,
				ZU.PhoneNumber	= IC.PhoneNumber,
				ZU.EmailOptIn	= Isnull(IC.EmailOptIn,0),
				ZU.IsActive		= IC.IsActive
				--ZU.ExternalId = ExternalId
				from AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
				INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
				INNER JOIN @InsertCustomer IC ON ANZU.UserName = IC.UserName 
				where case when @IsAllowGlobalLevelUserCreation = 'true' then -1 else Isnull(ANZU.PortalId,0) end = case when @IsAllowGlobalLevelUserCreation = 'true' then -1 else Isnull(@PortalId ,0) end
				--where Isnull(ANZU.PortalId,0) = Isnull(@PortalId ,0)

				Insert into AspNetZnodeUser (AspNetZnodeUserId, UserName, PortalId)		
				OUTPUT INSERTED.AspNetZnodeUserId, INSERTED.UserName, INSERTED.PortalId	INTO  @InsertedAspNetZnodeUser 			 
				Select NEWID(),IC.UserName, @PortalId FROM @InsertCustomer IC 
				where Not Exists (Select TOP 1 1  from AspNetZnodeUser ANZ 
				where Isnull(ANZ.PortalId,0) = Isnull(@PortalId,0) AND ANZ.UserName = IC.UserName)

				INSERT INTO ASPNetUsers (Id,Email,EmailConfirmed,PasswordHash,SecurityStamp,PhoneNumber,PhoneNumberConfirmed,TwoFactorEnabled,
				LockoutEndDateUtc,LockOutEnabled,AccessFailedCount,PasswordChangedDate,UserName)
				output inserted.Id, inserted.UserName into @InsertedASPNetUsers
				SELECT NewId(), Email,0 ,@PasswordHash,@SecurityStamp,PhoneNumber,0,0,case when A.IsActive = 0 then @GetDate else null end LockoutEndDateUtc,1 LockoutEnabled,
				0,@GetDate,AspNetZnodeUserId from @InsertCustomer A INNER JOIN @InsertedAspNetZnodeUser  B 
				ON A.UserName = B.UserName
				
				INSERT INTO  ZnodeUser(AspNetUserId,FirstName,LastName,CustomerPaymentGUID,Email,PhoneNumber,EmailOptIn,
				IsActive,ExternalId, CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				OUTPUT Inserted.UserId, Inserted.AspNetUserId,Inserted.CreatedDate into @InsertZnodeUser
				SELECT IANU.Id AspNetUserId ,IC.FirstName,IC.LastName,null CustomerPaymentGUID,IC.Email
				,IC.PhoneNumber,Isnull(IC.EmailOptIn,0),IC.IsActive,IC.ExternalId, @UserId,
				CASE WHEN IC.CreatedDate IS NULL OR IC.CreatedDate = '' THEN  @Getdate ELSE IC.CreatedDate END,@UserId,@Getdate
				from @InsertCustomer IC Inner join 
				@InsertedAspNetZnodeUser IANZU ON IC.UserName = IANZU.UserName  INNER JOIN 
				@InsertedASPNetUsers IANU ON IANZU.AspNetZnodeUserId = IANU.UserName 
				  	     
				INSERT INTO AspNetUserRoles (UserId,RoleId)  Select AspNetUserId, @RoleID from @InsertZnodeUser 
				INSERT INTO ZnodeUserPortal (UserId,PortalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate) 
				SELECT UserId, @PortalId , @UserId, IZU.CreatedDate,@UserId,@Getdate 
				from @InsertZnodeUser IZU

				insert into ZnodeAccountUserPermission(UserId,AccountPermissionAccessId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				SELECT UserId, 4 , @UserId, @Getdate,@UserId,@Getdate 
				from @InsertZnodeUser IZU
				--Declare @ProfileId  int 
				--select TOP 1 @ProfileId   =  ProfileId from ZnodePortalprofile where Portalid = @Portalid and IsDefaultRegistedProfile=1

				--insert into ZnodeUserProfile (ProfileId,UserId,IsDefault,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				--SELECT @ProfileId  , UserId, 1 , @UserId,CreatedDate,@UserId,@Getdate from @InsertZnodeUser
---------------------------------------------------------------------------------

				declare @Profile table (ProfileId int)

				INSERT INTO ZnodeProfile (ProfileName,ShowOnPartnerSignup,Weighting,TaxExempt,DefaultExternalAccountNo,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ParentProfileId)
				OUTPUT inserted.ProfileId INTO @Profile(ProfileId)
				SELECT Distinct ProfileName, 0, null,0, replace(ltrim(rtrim(ProfileName)),' ','') as DefaultExternalAccountNo, @UserId,@Getdate, @UserId,@Getdate, null as ParentProfileId				
				from @InsertCustomer IC
				where not exists(select * from ZnodeProfile ZP where IC.ProfileName = ZP.ProfileName )
				AND ISNULL(ic.ProfileName,'') <> ''

				INSERT INTO ZnodePortalProfile (PortalId,	ProfileId,	IsDefaultAnonymousProfile,	IsDefaultRegistedProfile,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate)
				SELECT @PortalId, ProfileId, 0 AS IsDefaultAnonymousProfile, 0 AS IsDefaultRegistedProfile, @UserId,@Getdate, @UserId,@Getdate
				from @Profile

				UPDATE ZnodeUserProfile 
				SET ProfileId = COALESCE(ZP.ProfileId,@ProfileId)
				FROM ZnodeUser a
				inner join ASPNetUsers b on (b.Id = a.AspNetUserId)
				inner join AspNetZnodeUser c on (c.AspNetZnodeUserId = b.UserName)
				inner join @InsertCustomer IC on (IC.UserName = c.UserName)
				inner join ZnodeUserProfile u ON u.UserId = a.UserId
				LEFT join ZnodeProfile ZP on IC.ProfileName = ZP.ProfileName
				--where IC.ProfileName <> ''
				
				INSERT INTO ZnodeUserProfile (ProfileId,UserId,IsDefault,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				SELECT COALESCE(ZP.ProfileId,@ProfileId)  , a.UserId, 1 , @UserId,a.CreatedDate,@UserId,@Getdate 
				from ZnodeUser a
				INNER JOIN ASPNetUsers b on (b.Id = a.AspNetUserId)
				inner join AspNetZnodeUser c on (c.AspNetZnodeUserId = b.UserName)
				inner join @InsertCustomer IC on (IC.UserName = c.UserName)
				LEFT join ZnodeProfile ZP on IC.ProfileName = ZP.ProfileName
				where NOT EXISTS (SELECT TOP  1 1 FROM ZnodeUserProfile u WHERE u.UserId = a.UserId )
				AND EXISTS(SELECT * FROM @InsertZnodeUser IZU WHERE A.UserId = IZU.UserId)

				---to update accountid agaist user
				UPDATE ZU SET ZU.AccountId = ZA.AccountId 
				from AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
				INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	 
				INNER JOIN @InsertCustomer IC ON ANZU.UserName = IC.UserName
				INNER JOIN ZnodeAccount ZA ON ZA.AccountCode = IC.AccountCode 
				--inner join @InsertZnodeUser IZU on IZU.UserId =ZU.UserId
				where Isnull(ANZU.PortalId,0) = Isnull(@PortalId ,0) and isnull(IC.AccountCode,'') <> ''
				
				update ZDU set ZDU.DepartmentId = ZD.DepartmentId, ModifiedBy = @UserId, ModifiedDate = @Getdate
				from ZnodeUser a
				INNER JOIN ASPNetUsers b on (b.Id = a.AspNetUserId)
				inner join AspNetZnodeUser c on (c.AspNetZnodeUserId = b.UserName)
				inner join @InsertCustomer IC on (IC.UserName = c.UserName)
				inner join ZnodeDepartment ZD on IC.DepartmentName = ZD.DepartmentName
				inner join ZnodeDepartmentUser ZDU on ZDU.UserId = a.UserId
				where isnull(IC.DepartmentName,'') <> ''

				insert into ZnodeDepartmentUser(UserId,DepartmentId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				SELECT a.UserId, ZD.DepartmentId, @UserId,a.CreatedDate,@UserId,@Getdate 
				from ZnodeUser a
				INNER JOIN ASPNetUsers b on (b.Id = a.AspNetUserId)
				inner join AspNetZnodeUser c on (c.AspNetZnodeUserId = b.UserName)
				inner join @InsertCustomer IC on (IC.UserName = c.UserName)
				inner join ZnodeDepartment ZD on IC.DepartmentName = ZD.DepartmentName
				where NOT EXISTS (SELECT TOP  1 1 FROM ZnodeDepartmentUser u WHERE u.UserId = a.UserId)
				AND isnull(IC.DepartmentName,'') <> ''
		
				update u set u.RoleId = ZD.Id
				from ZnodeUser a
				INNER JOIN ASPNetUsers b on (b.Id = a.AspNetUserId)
				inner join AspNetZnodeUser c on (c.AspNetZnodeUserId = b.UserName)
				inner join @InsertCustomer IC on (IC.UserName = c.UserName)
				inner join AspNetRoles ZD on IC.RoleName = ZD.Name
				inner join AspNetUserRoles u on u.UserId = b.Id
				where isnull(IC.RoleName,'') <> ''
				
				insert into AspNetUserRoles(UserId,RoleId)
				SELECT b.Id as ASPNetUserId, ZD.Id as RoleId
				from ZnodeUser a
				INNER JOIN ASPNetUsers b on (b.Id = a.AspNetUserId)
				inner join AspNetZnodeUser c on (c.AspNetZnodeUserId = b.UserName)
				inner join @InsertCustomer IC on (IC.UserName = c.UserName)
				inner join AspNetRoles ZD on IC.RoleName = ZD.Name
				where NOT EXISTS (SELECT TOP  1 1 FROM AspNetUserRoles u WHERE u.UserId = b.Id)
				AND EXISTS(SELECT * FROM @InsertZnodeUser IZU WHERE A.UserId = IZU.UserId)
				AND isnull(IC.RoleName,'') <> ''


		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;
	END TRY
	BEGIN CATCH
	ROLLBACK TRAN A;
		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		
		 DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportCustomer @TableName = '+CAST(@TableName AS VARCHAR(max))+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@ImportProcessLogId='+CAST(@ImportProcessLogId AS VARCHAR(10))+',@PortalId='+CAST(@PortalId AS VARCHAR(10))+',@CsvColumnString='+CAST(@CsvColumnString AS VARCHAR(max));
              			
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_ImportCustomer',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
	END CATCH;
END;
GO
if exists(select * from sys.procedures where name = 'Znode_GetQuickOrderPublishProduct')
	 drop proc Znode_GetQuickOrderPublishProduct
go
CREATE PROCEDURE [dbo].[Znode_GetQuickOrderPublishProduct]
(
	@PublishCatalogId int,
	@LocaleId int,
	@PublishCategoryIds NVARCHAR(MAX),
	@SKUs NVARCHAR(MAX),
	@VersionId int,
	@ProductIndex int,
	@PortalId int 
)
AS
/*
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
 EXEC Znode_GetQuickOrderPublishProduct 
@PublishCatalogId= '3',
@LocaleId= '1',
@PublishCategoryIds = '34,35,36,37,38,39,40,41,42,43,50,79,82,83,84,85,86,87,88,90' ,
@SKUs= 'TestConfig1',
@VersionId= '5942',
@ProductIndex= '1',
@PortalId =1 
*/
BEGIN

SET NOCOUNT ON;
BEGIN TRY
	Declare @Getdate datetime = Getdate()
   -- Insert statements for procedure here
	Create table #TBL_SKUs (SKU NVARCHAR(MAX));
	Create table #TBL_CategoryIds (CategoryId INT);

	INSERT INTO #TBL_SKUs
	SELECT item
	FROM dbo.split(@SKUs, ',');

	INSERT INTO #TBL_CategoryIds
	SELECT item
	FROM dbo.split(@PublishCategoryIds, ',');


	----getting publish product associations
	select ZPAVL.AttributeValue as ParentSKU, ZPAP.ParentPimProductId,ZPAP.PimProductId, ZPAVL1.attributeValue as SKU, 
		   IsConfigurable,IsBundle,IsGroup,IsAddOn,IsLink, ZPAP.DisplayOrder, ZPAP.PublishAssociatedProductId
	into #TempProductassociation
	from ZnodePublishAssociatedProduct ZPAP
	inner join ZnodePimAttributeValue ZPAV ON ZPAV.PimProductId = ZPAP.ParentPimProductId
	inner join ZnodePimAttributeValueLocale ZPAVL ON ZPAV.PimattributeValueId = ZPAVL.PimAttributeValueId
	inner join ZnodePimAttributeValue ZPAV1 ON ZPAV1.PimProductId = ZPAP.PimProductId
	inner join ZnodePimAttributeValueLocale ZPAVL1 ON ZPAV1.PimattributeValueId = ZPAVL1.PimAttributeValueId
	where ZPAV.PimattributeId = (select Top 1 PimattributeId from ZnodePimAttribute ZPA where ZPa.AttributeCode = 'SKU')
	AND ZPAV1.PimattributeId = (select Top 1 PimattributeId from ZnodePimAttribute ZPA where ZPa.AttributeCode = 'SKU') 
	and Exists(select * from #TBL_SKUs s where s.sku = ZPAVL.AttributeValue )
	

	----getting publish product associations
	select ParentSKU,  SKU,
		    Row_Number()Over( PARTITION BY  ParentSKU ORDER BY DisplayOrder, PublishAssociatedProductId) RowId
	into #TempConfigProduct
	from #TempProductassociation
	where IsConfigurable = 1

	------getting publish product associations
	--select ZPAVL.AttributeValue as ParentSKU, ZPAP.ParentPimProductId,ZPAP.PimProductId, ZPAVL1.attributeValue as SKU, 
	--	   IsConfigurable,IsBundle,IsGroup,IsAddOn,IsLink, 
	--	    Row_Number()Over( PARTITION BY  ZPAVL.AttributeValue ORDER BY ZPAP.DisplayOrder, ZPAP.PublishAssociatedProductId) RowId
	--into #TempConfigProduct
	--from ZnodePublishAssociatedProduct ZPAP
	--inner join ZnodePimAttributeValue ZPAV ON ZPAV.PimProductId = ZPAP.ParentPimProductId
	--inner join ZnodePimAttributeValueLocale ZPAVL ON ZPAV.PimattributeValueId = ZPAVL.PimAttributeValueId
	--inner join ZnodePimAttributeValue ZPAV1 ON ZPAV1.PimProductId = ZPAP.PimProductId
	--inner join ZnodePimAttributeValueLocale ZPAVL1 ON ZPAV1.PimattributeValueId = ZPAVL1.PimAttributeValueId
	--where ZPAV.PimattributeId = (select Top 1 PimattributeId from ZnodePimAttribute ZPA where ZPa.AttributeCode = 'SKU')
	--AND ZPAV1.PimattributeId = (select Top 1 PimattributeId from ZnodePimAttribute ZPA where ZPa.AttributeCode = 'SKU') 
	--and Exists(select * from #TBL_SKUs s where s.sku = ZPAVL.AttributeValue )
	--and IsConfigurable = 1
	
	SELECT sku.SKU as ParentSKU, case when ParentSKU is null then sku.SKU else config.sku  end as childsku, ParentSKU as ConfigurableProductSKUs
	into #SKUs
	FROM #TBL_SKUs sku
	LEFT JOIN #TempConfigProduct config on sku.sku = config.ParentSKU and RowId = 1
	
	SELECT P.Name,P.SKU,P.ZnodeProductId as Id, P.IsActive as IsActive, P.Attributes, s.ParentSKU , s.ConfigurableProductSKUs 
	into #ProductDetail
	FROM ZnodePublishProductEntity  AS P
	INNER JOIN #SKUs AS S ON P.SKU=S.childsku
	INNER JOIN #TBL_CategoryIds AS C ON C.CategoryId = P.ZnodeCategoryIds
	WHERE ZnodeCatalogId = @PublishCatalogId and LocaleId = @LocaleId and IsActive = 'true' and ZnodeCategoryIds != 0 and ProductIndex = @ProductIndex and VersionId = @VersionId  

	CREATE TABLE #TempSKUInventory (SKU varchar(600),Quantity numeric(28,6),ReOrderLevel numeric(28,6),PortalId int, WarehouseName varchar(100), WarehouseCode varchar(100), DefaultInventoryCount numeric(28,6))

	CREATE TABLE #TempProductPrice 
	(	
		SKU varchar(600),RetailPrice numeric(28,6),SalesPrice numeric(28,6),TierPrice  numeric(28,6),TierQuantity  numeric(28,6),CurrencyCode varchar(100),
		CurrencySuffix varchar(1000),CultureCode varchar(100),ExternalId varchar(1000),Custom1 varchar(1000),Custom2 varchar(1000),Custom3 varchar(1000)
	)

	Declare @NewSKU vaRCHAR(MAX)

	SET @NewSKU = SUBSTRING((SELECT ','+SKU FROM #ProductDetail FOR XML PATH(''),Type).value('.', 'varchar(max)'), 2, 4000);

	----getting products inventory details
	insert into #TempSKUInventory(SKU ,Quantity ,ReOrderLevel ,PortalId, WarehouseName, WarehouseCode, DefaultInventoryCount)
	Execute [Znode_GetInventoryBySkus] @SKUs = @NewSKU, @PortalId = @PortalId

	----getting product pricing details
	insert into #TempProductPrice(SKU,RetailPrice,SalesPrice,TierPrice,TierQuantity,CurrencyCode,CurrencySuffix,CultureCode,ExternalId ,Custom1,Custom2 ,Custom3 )
	Execute [Znode_GetPublishProductPricingBySku] @SKU = @NewSKU, @PortalId=@PortalId, @currentUtcDate=@Getdate

	--getting comma seperated Addon Product
	select TPA.ParentSKU,
		stuff( (SELECT ','+TPA1.SKU FROM #TempProductassociation TPA1 
		WHERE (TPA.ParentPimProductId = TPA1.ParentPimProductId and IsAddOn = 1)
					 FOR XML PATH(''),Type).value('.', 'varchar(max)'), 1, 1, '') as AddOnProductSkus
	into #AddOnProductSkus
	from #TempProductassociation TPA
	where IsAddOn = 1

	----getting comma seperated Configurable Products
	--select TPA.ParentSKU as ConfigurableProductSKUs, TPA.SKU,
	--	 Row_Number()Over( PARTITION BY  TPA.SKU ORDER BY ZPAP.DisplayOrder, ZPAP.PublishAssociatedProductId) RowId
	--into #ConfigurableProductSKUs
	--from #TempProductassociation TPA
	--where IsConfigurable = 1

	--getting comma seperated Group Products
	select TPA.ParentSKU,
		stuff( (SELECT ','+TPA1.SKU FROM #TempProductassociation TPA1 
		WHERE (TPA.ParentPimProductId = TPA1.ParentPimProductId and IsGroup = 1)
					 FOR XML PATH(''),Type).value('.', 'varchar(max)'), 1, 1, '') GroupProductSKUs
		,count(TPA.SKU) as GroupProductsQuantity
	into #GroupProductSKUs
	from #TempProductassociation TPA
	where IsGroup = 1
	group by TPA.ParentSKU, TPA.ParentPimProductId 
		
	--getting comma seperated Link Products
	--select TPA.ParentSKU,
	--	stuff( (SELECT ','+TPA1.SKU FROM #TempProductassociation TPA1 
	--	WHERE (TPA.ParentPimProductId = TPA1.ParentPimProductId and IsLink = 1)
	--				 FOR XML PATH(''),Type).value('.', 'varchar(max)'), 1, 1, '') LinkProductSkus
	--into #LinkProductSkus
	--from #TempProductassociation TPA
	--where IsLink = 1

	--getting comma seperated Bundle Products
	--select TPA.ParentSKU,
	--	stuff( (SELECT ','+TPA1.SKU FROM #TempProductassociation TPA1 
	--	WHERE (TPA.ParentPimProductId = TPA1.ParentPimProductId)
	--				 FOR XML PATH(''),Type).value('.', 'varchar(max)'), 1, 1, '')
	--from #TempProductassociation TPA
	--where IsBundle = 1

	select SKU,sum(ISNULL(Quantity,0)) as Quantity 
	into #TempSKUInventory_Sum
	from #TempSKUInventory
	group by SKU

	Select PD.SKU, ZPP.PromotionId 
	into #TempProductPromotion
	from #ProductDetail PD
	inner join ZnodePromotionProduct ZPP ON PD.Id = ZPP.PublishProductId 
	where exists(select * from ZnodePromotion ZP inner join ZnodePromotionType ZPT ON ZP.PromotionTypeId = ZPT.PromotionTypeId
	      where ZPP.PromotionId = ZP.PromotionId and ZPT.Name = 'Call For Pricing')

	select DISTINCT PD.Name,PD.SKU,PD.Id as Id, PD.IsActive as IsActive, PD.Attributes, TPP.RetailPrice, 
	       addon.AddOnProductSkus, PD.ConfigurableProductSKUs, grp.GroupProductSKUs, ISNULL(grp.GroupProductsQuantity,0) AS GroupProductsQuantity,
		   ISNULL(Inv.Quantity,0) as QuantityOnHand, Cast(case when Promo.PromotionId is null then 'false' else 'true' end as bit) HasPromotion
	from #ProductDetail PD
	left join #TempProductPrice TPP ON PD.SKU = TPP.SKU
	left join #AddOnProductSkus addon ON PD.SKU = addon.ParentSKU
	left join #GroupProductSKUs grp  ON PD.SKU = grp.ParentSKU
	left join #TempSKUInventory_Sum Inv  ON PD.SKU = Inv.SKU
	left join #TempProductPromotion Promo  ON PD.SKU = Promo.SKU
	
END TRY
BEGIN CATCH
	SELECT ERROR_MESSAGE()
	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetQuickOrderPublishProduct @PublishCatalogId = '+cast(@PublishCatalogId as varchar(10))+',@LocaleId= '+cast(@LocaleId as varchar(10))+',@VersionId='+CAST(@VersionId AS VARCHAR(50))+',@PublishCategoryIds='+CAST(@PublishCategoryIds AS VARCHAR(50))+',@SKUs='+CAST(@SKUs AS VARCHAR(10))+',@ProductIndex='+CAST(@ProductIndex AS VARCHAR(10))+',@PortalId='+CAST(@PortalId AS VARCHAR(10));
              			 
	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
	ROLLBACK TRANSACTION GetPublishAssociatedProducts;
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_GetQuickOrderPublishProduct',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
END CATCH;
	
END


GO
if exists(select * from sys.procedures where name = 'Znode_DeletePimCatalog')
	 drop proc Znode_DeletePimCatalog
go
CREATE PROCEDURE [dbo].[Znode_DeletePimCatalog]
( 
  @PimCatalogIds       VARCHAR(500)= '',
  @IsDeleteFromPublish BIT          = 0,
  @PimCatalogId		   TransferId READONLY, 
  @IsForceFullyDelete  BIT = 0 
)
AS
/*
Summary: This Procedure is used to delete PimCatalog with their respective details
Unit Testing:
EXEC Znode_DeletePimCatalog 1

*/
        BEGIN
         BEGIN TRAN;
         BEGIN TRY

             SET NOCOUNT ON;
             DECLARE @PublishCatalogIdsGen TABLE(PublishCatalogId INT);
			 DECLARE @DeletedCategoryHirachyId  TABLE(PimCategoryHierarchyId INT);
             DECLARE @PublishCatalogIds VARCHAR(3000);
             DECLARE @CatalogIds TABLE(PimCatalogId INT);
             INSERT INTO @CatalogIds
                    SELECT item
                    FROM dbo.Split(@PimCatalogIds, ',') AS zs
					WHERE @PimCatalogIds <> '';
					
			 INSERT INTO @CatalogIds 
			 SELECT id 
			 FROM  @PimCatalogId
             DECLARE @DeletePimCatalogId TABLE(PimCatalogId INT);

             INSERT INTO @DeletePimCatalogId
                    SELECT a.PimCatalogId
                    FROM [dbo].ZnodePimCatalog AS a
                         INNER JOIN @CatalogIds AS b ON(a.PimCatalogId = b.PimCatalogId)
                    WHERE(NOT EXISTS
                         (
                             SELECT TOP 1 1
                             FROM ZnodePublishCatalog AS zpc
                                  INNER JOIN ZnodePortalCatalog AS de ON(de.PublishCatalogId = zpc.PublishCatalogId)
                             WHERE CASE 
							 WHEN @IsDeleteFromPublish = 1 
							 THEN zpc.PimCatalogId 
							 ELSE 0
                                   END = a.PimCatalogId
                         ) OR @IsForceFullyDelete = 1 );

             INSERT INTO @PublishCatalogIdsGen
                    SELECT PublishCatalogId
                    FROM ZnodePublishCatalog AS a
                         INNER JOIN @DeletePimCatalogId AS b ON(a.PimCatalogId = b.PimCatalogId)
                    WHERE(NOT EXISTS
                         (
                             SELECT TOP 1 1
                             FROM ZnodePublishCatalog AS zpc
                                  INNER JOIN ZnodePortalCatalog AS de ON(de.PublishCatalogId = zpc.PublishCatalogId)
                             WHERE zpc.PimCatalogId = a.PimCatalogId
                         ));

			
			 INSERT INTO @DeletedCategoryHirachyId
			 SELECT PimCategoryHierarchyId
			 FROM ZnodePimCategoryHierarchy
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @DeletePimCatalogId AS b
                 WHERE b.Pimcatalogid = ZnodePimCategoryHierarchy.Pimcatalogid
             );

			 
             DELETE FROM ZnodePimVersioning
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @DeletePimCatalogId AS b
                 WHERE b.Pimcatalogid = ZnodePimVersioning.Pimcatalogid
             );
             
           
             DELETE FROM ZnodePimCategoryHierarchy
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @DeletePimCatalogId AS b
                 WHERE b.Pimcatalogid = ZnodePimCategoryHierarchy.Pimcatalogid
             );
			
			Update a set a.PimCatalogId = null  from ZnodeProfile a Inner join @DeletePimCatalogId  b on 
			b.Pimcatalogid =b.Pimcatalogid

			 DELETE FROM ZnodePimCatalog
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @DeletePimCatalogId AS b
                 WHERE b.Pimcatalogid = ZnodePimCatalog.Pimcatalogid
             );
             IF @IsDeleteFromPublish = 1
                 BEGIN
				   DECLARE Cur_DeleteCatalog CURSOR FOR
				    SELECT PublishCatalogId 
                                                           FROM @PublishCatalogIdsGen
				    OPEN Cur_DeleteCatalog ;
					FETCH NEXT FROM Cur_DeleteCatalog INTO @PublishCatalogIds 
					WHILE @@FETCH_STATUS = 0 
					BEGIN 
             
                     EXEC Znode_DeletePublishCatalog
                          @PublishCatalogIds=@PublishCatalogIds,
                          @IsDeleteCatalogId = 1;

				   FETCH NEXT FROM Cur_DeleteCatalog INTO @PublishCatalogIds 
                    END 
				CLOSE Cur_DeleteCatalog; 
				DEALLOCATE Cur_DeleteCatalog;

                 END;
             IF
             (
                 SELECT COUNT(1)
                 FROM @DeletePimCatalogId
             ) =
             (
                 SELECT COUNT(1)
                 FROM @CatalogIds
             )
                 BEGIN
                     SELECT 1 AS ID,
                            @PublishCatalogIds AS [MessageDetails],
                            CAST(1 AS BIT) AS Status;
                 END;
             ELSE
                 BEGIN
                     SELECT 0 AS ID,
                            @PublishCatalogIds AS [MessageDetails],
                            CAST(0 AS BIT) AS Status;
                 END;
             COMMIT TRAN;
         END TRY
         BEGIN CATCH
            DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_DeletePimCatalog @PimCatalogIds = '+@PimCatalogIds+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             --SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		     ROLLBACK  TRAN;
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_DeletePimCatalog',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;

GO
INSERT INTO [dbo].[ZnodeMessage]
          ([MessageCode]
          ,[MessageType]
          ,[MessageName]
          ,[CreatedBy]
          ,[CreatedDate]
          ,[ModifiedBy]
          ,[ModifiedDate])
select 92,'Text','Role Name cannot be updated.',2,getdate(),2,getdate()
where not exists(select * from [ZnodeMessage] where [MessageCode] = 92 )
GO
if exists(select * from sys.procedures where name = 'Znode_InsertUpdateCustomeFieldJson')
	drop proc Znode_InsertUpdateCustomeFieldJson
go
CREATE Procedure [dbo].[Znode_InsertUpdateCustomeFieldJson] 
(
 @PimProductId VARCHAR(2000)
)
AS
BEGIN 
  BEGIN TRY 
    
	;With Cte_CustomeAttributeValue AS
	(
			

				SELECT ZPCF.PimProductId, ZPCF.CustomCode,
				( Select  ZPCF.CustomCode AS 'AttributeCode', 
					ZPCFL1.CustomKey AS AttributeName, 
					ZPCFL1.CustomKeyValue AS AttributeValues,
					'false' AS IsUseInSearch  ,
					'false' AS IsHtmlTags,
					'false' AS IsComparable, 
					'false' AS IsFacets,
					'Text Area' AS AttributeTypeName,
					'false' AS IsPersonalizable,
					'True' AS IsCustomField,
					'false' AS IsConfigurable,
					'false' AS IsSwatch,
				Isnull(DisplayOrder,0) AS DisplayOrder
			from ZnodePimCustomFieldLocale ZPCFL1 where (ZPCFL1.PimCustomFieldId = ZPCF.PimCustomFieldId)
			For Json Path,WITHOUT_ARRAY_WRAPPER
			)  AS AttributeValue ,ZPCFL.LocaleId  
			FROM ZnodePimCustomField ZPCF Inner join ZnodePimCustomFieldLocale ZPCFL  On ZPCFL.PimCustomFieldId = ZPCF.PimCustomFieldId
	)

  MERGE INTO ZnodePimCustomeFieldJSON TARGET
  USING Cte_CustomeAttributeValue SOURCE 
  ON (TARGET.PimProductId = SOURCE.PimProductId
    AND  TARGET.LocaleId = SOURCE.LocaleId
	AND TARGET.CustomCode = SOURCE.CustomCode
  )
  WHEN MATCHED THEN 
  UPDATE 
   SET TARGET.CustomeFiledJson = SOURCE.AttributeValue
       ,TARGET.ModifiedBy      = 2 
	   ,TARGET.ModifiedDAte   = GETDATE()

  WHEN NOT MATCHED THEN 
  INSERT (PimProductId
				,CustomCode
				,CustomeFiledJson
				,LocaleId
				,CreatedBy
				,CreatedDate
				,ModifiedBy
				,ModifiedDate)
				  VALUES (SOURCE.PimProductId
				  ,SOURCE.CustomCode
				,Source.AttributeValue
				,SOURCE.LocaleId
				,2
				,GETDATE()
				,2
				,GETDATE())
				WHEN NOT MATCHED BY SOURCE THEN 
	DELETE;

  END TRY 
  BEGIN CATCH 
  SELECT ERROR_MESSAGE()
  END CATCH 
END
GO
if exists(select * from sys.procedures where name = 'Znode_InsertUpdateCustomeFieldXML')
	drop proc Znode_InsertUpdateCustomeFieldXML
go
CREATE Procedure [dbo].[Znode_InsertUpdateCustomeFieldXML] 
(
 @PimProductId VARCHAR(2000)
)
AS
BEGIN 
  BEGIN TRY 
    
	;With Cte_CustomeAttributeValue AS
	(

			SELECT PimProductId ,ZPCF.CustomCode,'<AttributeCode>'+ISNULL((SELECT ''+ZPCF.CustomCode FOR XML PATH('')),'') +'</AttributeCode>'+'<AttributeName>'+ISNULL((SELECT ''+ZPCFL.CustomKey FOR XML PATH('')),'')+'</AttributeName>'
			+'<AttributeValues>'+ISNULL((SELECT ''+ZPCFL.CustomKeyValue FOR XML PATH('')),'')+'</AttributeValues>'+'<IsUseInSearch>0</IsUseInSearch>
			<IsHtmlTags>0</IsHtmlTags>
			<IsComparable>0</IsComparable>
			<IsFacets>0</IsFacets>
			<AttributeTypeName>Text Area</AttributeTypeName>
			<IsPersonalizable>0</IsPersonalizable>
			<IsCustomField>1</IsCustomField>
			<IsConfigurable>0</IsConfigurable>
			<IsSwatch>0</IsSwatch>
			<DisplayOrder>'+Convert(nvarchar(100),Isnull(DisplayOrder,0))+'</DisplayOrder>
			' AttributeValue,ZPCFL.LocaleId 
			FROM ZnodePimCustomField ZPCF
			INNER JOIN ZnodePimCustomFieldLocale ZPCFL ON (ZPCFL.PimCustomFieldId = ZPCF.PimCustomFieldId) 
	)

  MERGE INTO ZnodePimCustomeFieldXML TARGET
  USING Cte_CustomeAttributeValue SOURCE 
  ON (TARGET.PimProductId = SOURCE.PimProductId
    AND  TARGET.LocaleId = SOURCE.LocaleId
	AND TARGET.CustomCode = SOURCE.CustomCode
  )
  WHEN MATCHED THEN 
  UPDATE 
   SET TARGET.CustomeFiledXML = SOURCE.AttributeValue
       ,TARGET.ModifiedBy      = 2 
	   ,TARGET.ModifiedDAte   = GETDATE()

  WHEN NOT MATCHED THEN 
  INSERT (PimProductId
				,CustomCode
				,CustomeFiledXML
				,LocaleId
				,CreatedBy
				,CreatedDate
				,ModifiedBy
				,ModifiedDate)
				  VALUES (SOURCE.PimProductId
				  ,SOURCE.CustomCode
				,Source.AttributeValue
				,SOURCE.LocaleId
				,2
				,GETDATE()
				,2
				,GETDATE())
				WHEN NOT MATCHED BY SOURCE THEN 
	DELETE;

  END TRY 
  BEGIN CATCH 
  SELECT ERROR_MESSAGE()
  END CATCH 
END
GO
if exists(select * from sys.procedures where name = 'Znode_InsertUpdatePimAttributeJson')
	drop proc Znode_InsertUpdatePimAttributeJson
go
CREATE PROCEDURE [dbo].[Znode_InsertUpdatePimAttributeJson] 
(
 @PimAttributeId  INT
)
AS
 BEGIN 
  BEGIN TRY 
     
 SET NOCOUNT ON;
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate(); 
			-- DECLARE @PimAttributeId VARCHAR(max) = ''
			
			-- DECLARE @PimCatalogId int= ISNULL((SELECT PimCatalogId FROM ZnodePublishcatalog WHERE PublishCatalogId = @PublishCatalogId), 0);  --- this variable is used to carry y pim catalog id by using published catalog id
            -- This variable is used to carry the default locale which is globaly set

		
		
			DECLARE @TBL_AttributesDetails TABLE(PimAttributeId int , AttributeCode varchar(300), IsUseInSearch bit, IsHtmlTags bit
										, IsComparable bit, IsFacets bit, AttributeValue varchar(max)
										,PRIMARY KEY (AttributeCode,PimAttributeId)) 
			 -- This variable is used in loop to increment the counter
   		    DECLARE @TBL_PimAttributeIds TABLE(PimAttributeId int, ParentPimAttributeId int, AttributeTypeId int, AttributeCode varchar(300)
									, IsRequired bit, IsLocalizable bit, IsFilterable bit, IsSystemDefined bit, IsConfigurable bit, IsPersonalizable bit
									, DisplayOrder int, HelpDescription varchar(max), IsCategory bit, IsHidden bit, CreatedDate datetime, ModifiedDate datetime,
									 AttributeName nvarchar(max), AttributeTypeName varchar(300), IsCustomField bit,LocaleId INT ,IsSwatch BIT);
			    
				INSERT INTO @TBL_AttributesDetails (PimAttributeId,AttributeCode,IsComparable,IsUseInSearch,IsHtmlTags,IsFacets )
				SELECT ZPA.PimAttributeId,ZPA.AttributeCode,IsComparable,IsUseInSearch,IsHtmlTags,IsFacets
				FROM ZnodePimAttribute AS ZPA 
				LEFT JOIN ZnodePimFrontendProperties AS ZPFP ON ZPFP.PimAttributeId = ZPA.PimATtributeId
				GROUP BY ZPA.PimAttributeId,ZPA.AttributeCode,IsComparable,IsUseInSearch,IsHtmlTags,IsFacets
	
				 ;WITH Cte_PimAttributeFilter
                  AS (SELECT ZPA.PimAttributeId,ZPA.ParentPimAttributeId,ZPA.AttributeTypeId,ZPA.AttributeCode,ZPA.IsRequired,ZPA.IsLocalizable,ZPA.IsFilterable,
					  ZPA.IsSystemDefined,ZPA.IsConfigurable,ZPA.IsPersonalizable,ZPA.DisplayOrder,ZPA.HelpDescription,ZPA.IsCategory,ZPA.IsHidden,ZPA.CreatedBy,
					  ZPA.CreatedDate,ZPA.ModifiedBy,ZPA.ModifiedDate,ZPAL.AttributeName,ZAT.AttributeTypeName,ZPAL.LocaleId,ZPA.IsSwatch
                      FROM ZnodePimAttribute ZPA
                      INNER JOIN ZnodePimAttributeLocale ZPAL ON(ZPAL.PimAttributeId = ZPA.PimAttributeId)
                      INNER JOIN ZnodeAttributeType ZAT ON(ZAT.AttributeTypeId = ZPA.AttributeTypeId)
					--  WHERE AttributeCode = 'ShortDescription'
                      --    WHERE EXISTS(SELECT TOP 1 1 FROM @PimAttributeId SP WHERE SP.id = CTPADV.PimAttributeId)
					  )
       		INSERT INTO @TBL_PimAttributeIds ( PimAttributeId,ParentPimAttributeId,AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable,IsSystemDefined,
                      IsConfigurable,IsPersonalizable,DisplayOrder,HelpDescription,IsCategory,IsHidden,CreatedDate,ModifiedDate,AttributeName,AttributeTypeName,LocaleId,IsSwatch )
			SELECT PimAttributeId,ParentPimAttributeId,AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable,IsSystemDefined,IsConfigurable,
				  IsPersonalizable,DisplayOrder,HelpDescription,IsCategory,IsHidden,CreatedDate,ModifiedDate,AttributeName,AttributeTypeName,LocaleId,IsSwatch
            FROM Cte_PimAttributeFilter CTAF

			DECLARE @TBL_AttributevalueGet TABLE(PimAttributeId INT,AttributeCode VARCHAR(300),AttributeValue NVARCHAR(max),LocaleId INT)
					
			INSERT INTO @TBL_AttributevalueGet (PimAttributeId,AttributeCode,AttributeValue,LocaleId)
			 SELECT PimAttributeId  , AttributeCode ,
			        (SELECT  (
								SELECT  TBA.AttributeCode,
									AttributeName,
									CASE WHEN  IsUseInSearch= 1 THEN 'true' WHEN IsUseInSearch= 0  THEN 'false' ELSE 'false' END AS IsUseInSearch,
									CASE WHEN  IsHtmlTags= 1 THEN 'true' WHEN IsHtmlTags= 0  THEN 'false' ELSE 'false' END AS IsHtmlTags,
									CASE WHEN  IsComparable= 1 THEN 'true' WHEN IsComparable= 0  THEN 'false' ELSE 'false' END AS IsComparable,
									CASE WHEN  IsFacets= 1 THEN 'true' WHEN IsFacets= 0  THEN 'false' ELSE 'false' END AS IsFacets,
									ISNULL(DisplayOrder,0) AS DisplayOrder,
									AttributeTypeName,
									CASE WHEN  IsPersonalizable= 1 THEN 'true' WHEN IsPersonalizable= 0  THEN 'false' ELSE 'false' END AS IsPersonalizable,
									CASE WHEN  TBA.IsCustomField= 1 THEN 'true' WHEN TBA.IsCustomField= 0  THEN 'false' ELSE 'false' END AS IsCustomField,
									CASE WHEN  IsConfigurable= 1 THEN 'true' WHEN IsConfigurable= 0  THEN 'false' ELSE 'false' END AS IsConfigurable,
									CASE WHEN  IsSwatch = 1 THEN 'true' WHEN IsSwatch = 0  THEN 'false' ELSE '' END AS IsSwatch
                                FROM  @TBL_PimAttributeIds AS TBA 
								INNER JOIN @TBL_AttributesDetails AS TBAD ON TBAD.PimAttributeId = TBA.PimAttributeId										
                                WHERE TBA.PimAttributeId = TBAVI.PimAttributeId
								AND TBA.LocaleId = TBAVI.LocaleId
								FOR JSON PATH,WITHOUT_ARRAY_WRAPPER
                               )  ) AttributeValue, LocaleId
                  FROM @TBL_PimAttributeIds AS TBAVI
				  
		 		  	  
				  MERGE INTO ZnodePimAttributeJSON TARGET 
				  USING (    SELECT * FROM @TBL_AttributevalueGet ) SOURCE 
				  ON (TARGET.PimAttributeId = SOURCE.PimAttributeId 
				  AND TARGET.LocaleId = Source.LocaleID  )
				  WHEN MATCHED THEN 
				  uPDATE 
				  SET TARGET.AttributeJson = SOURCE.AttributeValue
				      , TARGET.AttributeCode = Source.AttributeCode
				      ,TARGET.ModifiedDate = GETDATE()
					  ,TARGET.ModifiedBY = 2 
                  WHEN NOT MATCHED THEN 
				  INSERT (PimAttributeId
				          , AttributeCode
							,AttributeJson
							,LocaleId
							,CreatedBy
							,CreatedDate
							,ModifiedBy
							,ModifiedDate)
				  VALUES (SOURCE.PimAttributeId,SOURCE.AttributeCode, SOURCE.AttributeValue ,Source.LocaleId ,2,GETDATE(),2 ,GETDATE());

			

   
  END TRY 
  BEGIN CATCH
  SELECT ERROR_MESSAGE() 
  END CATCH 
 END
 GO
 if exists(select * from sys.procedures where name = 'Znode_InsertUpdatePimAttributeXML')
	drop proc Znode_InsertUpdatePimAttributeXML
go
CREATE PROCEDURE [dbo].[Znode_InsertUpdatePimAttributeXML] 
(
 @PimAttributeId  INT
)
AS
 BEGIN 
  BEGIN TRY 
     
 SET NOCOUNT ON;
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate(); 
			-- DECLARE @PimAttributeId VARCHAR(max) = ''
			
			-- DECLARE @PimCatalogId int= ISNULL((SELECT PimCatalogId FROM ZnodePublishcatalog WHERE PublishCatalogId = @PublishCatalogId), 0);  --- this variable is used to carry y pim catalog id by using published catalog id
            -- This variable is used to carry the default locale which is globaly set

		
		
			DECLARE @TBL_AttributesDetails TABLE(PimAttributeId int , AttributeCode varchar(300), IsUseInSearch bit, IsHtmlTags bit
										, IsComparable bit, IsFacets bit, AttributeValue varchar(max)
										,PRIMARY KEY (AttributeCode,PimAttributeId)) 
			 -- This variable is used in loop to increment the counter
   		    DECLARE @TBL_PimAttributeIds TABLE(PimAttributeId int, ParentPimAttributeId int, AttributeTypeId int, AttributeCode varchar(300)
									, IsRequired bit, IsLocalizable bit, IsFilterable bit, IsSystemDefined bit, IsConfigurable bit, IsPersonalizable bit
									, DisplayOrder int, HelpDescription varchar(max), IsCategory bit, IsHidden bit, CreatedDate datetime, ModifiedDate datetime,
									 AttributeName nvarchar(max), AttributeTypeName varchar(300), IsCustomField bit,LocaleId INT ,IsSwatch BIT);
			    
				INSERT INTO @TBL_AttributesDetails (PimAttributeId,AttributeCode,IsComparable,IsUseInSearch,IsHtmlTags,IsFacets )
				SELECT ZPA.PimAttributeId,ZPA.AttributeCode,IsComparable,IsUseInSearch,IsHtmlTags,IsFacets
				FROM ZnodePimAttribute AS ZPA 
				LEFT JOIN ZnodePimFrontendProperties AS ZPFP ON ZPFP.PimAttributeId = ZPA.PimATtributeId
				GROUP BY ZPA.PimAttributeId,ZPA.AttributeCode,IsComparable,IsUseInSearch,IsHtmlTags,IsFacets
	
				 ;WITH Cte_PimAttributeFilter
                  AS (SELECT ZPA.PimAttributeId,ZPA.ParentPimAttributeId,ZPA.AttributeTypeId,ZPA.AttributeCode,ZPA.IsRequired,ZPA.IsLocalizable,ZPA.IsFilterable,
					  ZPA.IsSystemDefined,ZPA.IsConfigurable,ZPA.IsPersonalizable,ZPA.DisplayOrder,ZPA.HelpDescription,ZPA.IsCategory,ZPA.IsHidden,ZPA.CreatedBy,
					  ZPA.CreatedDate,ZPA.ModifiedBy,ZPA.ModifiedDate,ZPAL.AttributeName,ZAT.AttributeTypeName,ZPAL.LocaleId,ZPA.IsSwatch
                      FROM ZnodePimAttribute ZPA
                      INNER JOIN ZnodePimAttributeLocale ZPAL ON(ZPAL.PimAttributeId = ZPA.PimAttributeId)
                      INNER JOIN ZnodeAttributeType ZAT ON(ZAT.AttributeTypeId = ZPA.AttributeTypeId)
					--  WHERE AttributeCode = 'ShortDescription'
                      --    WHERE EXISTS(SELECT TOP 1 1 FROM @PimAttributeId SP WHERE SP.id = CTPADV.PimAttributeId)
					  )
       		INSERT INTO @TBL_PimAttributeIds ( PimAttributeId,ParentPimAttributeId,AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable,IsSystemDefined,
                      IsConfigurable,IsPersonalizable,DisplayOrder,HelpDescription,IsCategory,IsHidden,CreatedDate,ModifiedDate,AttributeName,AttributeTypeName,LocaleId,IsSwatch )
			SELECT PimAttributeId,ParentPimAttributeId,AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable,IsSystemDefined,IsConfigurable,
				  IsPersonalizable,DisplayOrder,HelpDescription,IsCategory,IsHidden,CreatedDate,ModifiedDate,AttributeName,AttributeTypeName,LocaleId,IsSwatch
            FROM Cte_PimAttributeFilter CTAF

			DECLARE @TBL_AttributevalueGet TABLE(PimAttributeId INT,AttributeCode VARCHAR(300),AttributeValue NVARCHAR(max),LocaleId INT)

			INSERT INTO @TBL_AttributevalueGet (PimAttributeId,AttributeCode,AttributeValue,LocaleId)
			 SELECT PimAttributeId  , AttributeCode ,
			        (SELECT  (
                                   SELECT  TBA.AttributeCode,
                                          AttributeName,
                                          ISNULL(IsUseInSearch, 0) AS IsUseInSearch,
                                          ISNULL(IsHtmlTags, 0) AS IsHtmlTags,
										  ISNULL(IsComparable, 0) AS IsComparable,
                                          ISNULL(IsFacets, 0) AS IsFacets,
                                          ISNULL(DisplayOrder,0) AS DisplayOrder,
										  AttributeTypeName,
                                          IsPersonalizable,
                                          ISNULL(TBA.IsCustomField, 0) AS IsCustomField,
                                          ISNULL(IsConfigurable, 0) AS IsConfigurable,
										 CASE WHEN  IsSwatch = 1 THEN 'true' 
										   WHEN IsSwatch = 0  THEN 'false' ELSE 'null' END    IsSwatch
										  
                                   FROM  @TBL_PimAttributeIds AS TBA 
								   INNER JOIN @TBL_AttributesDetails AS TBAD ON TBAD.PimAttributeId = TBA.PimAttributeId										
                                   WHERE TBA.PimAttributeId = TBAVI.PimAttributeId
								   AND TBA.LocaleId = TBAVI.LocaleId
								   FOR XML PATH('') 
                               )  ) AttributeValue, LocaleId
                  FROM @TBL_PimAttributeIds AS TBAVI
				  
				 		  	  
				  MERGE INTO ZnodePimAttributeXML TARGET 
				  USING (    SELECT * FROM @TBL_AttributevalueGet ) SOURCE 
				  ON (TARGET.PimAttributeId = SOURCE.PimAttributeId 
				  AND TARGET.LocaleId = Source.LocaleID  )
				  WHEN MATCHED THEN 
				  uPDATE 
				  SET TARGET.AttributeXml = SOURCE.AttributeValue
				      , TARGET.AttributeCode = Source.AttributeCode
				      ,TARGET.ModifiedDate = GETDATE()
					  ,TARGET.ModifiedBY = 2 
                  WHEN NOT MATCHED THEN 
				  INSERT (PimAttributeId
				          , AttributeCode
							,AttributeXml
							,LocaleId
							,CreatedBy
							,CreatedDate
							,ModifiedBy
							,ModifiedDate)
				  VALUES (SOURCE.PimAttributeId,SOURCE.AttributeCode, SOURCE.AttributeValue ,Source.LocaleId ,2,GETDATE(),2 ,GETDATE());

			

   
  END TRY 
  BEGIN CATCH
  SELECT ERROR_MESSAGE() 
  END CATCH 
 END
 go
 if exists(select * from sys.procedures where name = 'Znode_ImportAccount')
	drop proc Znode_ImportAccount
go
CREATE PROCEDURE [dbo].[Znode_ImportAccount](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200),@PortalId int 
	  ,@CsvColumnString nvarchar(max) )
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import SEO Details
	
	-- Unit Testing : 
	--------------------------------------------------------------------------------------

BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max),@IsAllowGlobalLevelUserCreation nvarchar(10)

		DECLARE @GetDate datetime= dbo.Fn_GetDate();
	
		-- Three type of import required three table varible for product , category and brand

		CREATE TABLE #InsertAccount 
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int,ParentAccountCode nvarchar(max),AccountName nvarchar(max), AccountCode nvarchar(max),ExternalID nvarchar(max),
			CatalogCode nvarchar(max),AddressName nvarchar(max),FirstName varchar(max),LastName varchar(max),CompanyName varchar(max),
			Address1 varchar(max),Address2 varchar(max),CountryName varchar(max),StateName varchar(max),CityName varchar(max),
			PostalCode varchar(max),PhoneNumber varchar(max),IsDefaultBilling varchar(10),IsDefaultShipping varchar(10),GUID VARCHAR(100)
		);
	
		SET @SSQL = ' INSERT INTO #InsertAccount ( RowNumber, ParentAccountCode,AccountName ,AccountCode,ExternalID,CatalogCode,AddressName,FirstName,LastName,CompanyName
						,Address1,Address2,CountryName,StateName,CityName,PostalCode,PhoneNumber,IsDefaultBilling,IsDefaultShipping,GUID )
		SELECT RowNumber, ParentAccountCode,AccountName ,AccountCode,ExternalID,CatalogCode,AddressName,FirstName,LastName,CompanyName
						,Address1,Address2,CountryName,StateName,CityName,PostalCode,PhoneNumber,IsDefaultBilling,IsDefaultShipping,GUID FROM '+ @TableName;

		EXEC sys.sp_sqlexec @SSQL;

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '78', 'ParentAccountCode', ParentAccountCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ii.AccountCode, '')) >100 and ISnull(ltrim(rtrim(ii.ParentAccountCode)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '86', 'ParentAccountCode', ParentAccountCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.ParentAccountCode)), '') <> ''
		and not exists(select * from znodePortalAccount ZPA inner join ZnodeAccount ZA ON ZPA.AccountId = ZA.AccountId where ii.ParentAccountCode = ZA.AccountCode and ZPA.PortalId = @PortalId)
		and not exists(select * from #InsertAccount IA where ISnull(ltrim(rtrim(ii.ParentAccountCode)), '') = ISnull(ltrim(rtrim(IA.AccountCode)), '') and ii.RowNumber > IA.RowNumber)
	
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '87', 'ParentAccountCode', ParentAccountCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.ParentAccountCode)), '') <> ''
		and exists(select * from ZnodeAccount ZA where ii.ParentAccountCode = ZA.AccountCode and ZA.ParentAccountId is not null)
		--and not exists(select * from #InsertAccount IA where ISnull(ltrim(rtrim(ii.ParentAccountCode)), '') = ISnull(ltrim(rtrim(IA.AccountCode)), '') and ii.RowNumber > IA.RowNumber)

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '89', 'ParentAccountCode', ParentAccountCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.ParentAccountCode)), '') <> ''
		and exists(select * from ZnodeAccount ZA where ii.AccountCode = ZA.AccountCode and ZA.ParentAccountId is not null)
		and exists(select * from ZnodeAccount ZA 
				inner join ZnodeAccount ZA1 on ZA.ParentAccountId = ZA1.accountId 
				 where ii.ParentAccountCode <> ZA1.AccountCode)
		and not exists(select * from #InsertAccount IA where ISnull(ltrim(rtrim(ii.ParentAccountCode)), '') = ISnull(ltrim(rtrim(IA.AccountCode)), '')
		and ii.RowNumber > IA.RowNumber )
		

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'AccountCode', AccountCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.AccountCode)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '78', 'AccountCode', AccountCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ii.AccountCode, '')) >100 and ISnull(ltrim(rtrim(ii.AccountCode)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '79', 'AccountCode', AccountCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ii.AccountCode like '%[^a-zA-Z0-9]%' and ISnull(ltrim(rtrim(ii.AccountCode)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'AccountName', AccountName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.AccountName)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '78', 'AccountName', AccountName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ii.AccountName, '')) >100 and ISnull(ltrim(rtrim(ii.AccountName)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '52', 'AccountName', AccountName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE isnull(replace(ii.AccountName,' ',''),'') like '%[^a-Z0-9]%' and ISnull(ltrim(rtrim(ii.AccountName)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'StateName', StateName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.StateName)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '78', 'StateName', StateName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ltrim(rtrim(ii.StateName)), '')) >100 and ISnull(ltrim(rtrim(ii.StateName)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '83', 'StateName', StateName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE not exists(select * from ZnodeState ZS where ZS.StateName = ISnull(ltrim(rtrim(ii.StateName)), '') ) and ISnull(ltrim(rtrim(ii.StateName)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '83', 'CountryName', CountryName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE not exists(select * from ZnodeCountry ZC where ZC.CountryName = ISnull(ltrim(rtrim(ii.CountryName)), '') ) AND ISnull(ltrim(rtrim(ii.CountryName)), '') <> ''
		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'CountryName', CountryName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.CountryName)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '90', 'CountryName', CountryName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.CountryName)), '') <> ''
		and not exists(select * from ZnodePortalCountry ZPC inner join ZnodeCountry ZC ON ZPC.CountryCode = ZC.CountryCode
		    where PortalId = @PortalId and ltrim(rtrim(ii.CountryName)) = ltrim(rtrim(ZC.CountryName)))

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'CityName', CityName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.CityName)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '78', 'CityName', CityName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ltrim(rtrim(ii.CityName)), '')) >100 and ISnull(ltrim(rtrim(ii.CityName)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'PostalCode', PostalCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.PostalCode)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '78', 'PostalCode', PostalCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ltrim(rtrim(ii.PostalCode)), '')) >100 and ISnull(ltrim(rtrim(ii.PostalCode)), '') <> ''
				
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'PhoneNumber', PhoneNumber, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.PhoneNumber)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '78', 'PhoneNumber', PhoneNumber, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ltrim(rtrim(ii.PhoneNumber)), '')) >100 and ISnull(ltrim(rtrim(ii.PhoneNumber)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'IsDefaultBilling', IsDefaultBilling, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.IsDefaultBilling)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
		SELECT '68', 'IsDefaultBilling', IsDefaultBilling, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
		FROM #InsertAccount AS ii  
		WHERE ISnull(ltrim(rtrim(ii.IsDefaultBilling)),'') not in ('True','1','FALSE','0') and ISnull(ltrim(rtrim(ii.IsDefaultBilling)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
		SELECT '91', 'IsDefaultBilling', IsDefaultBilling, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
		FROM #InsertAccount AS ii  
		WHERE exists(select * from ZnodeAccount ZA where ii.AccountCode = ZA.AccountCode)  
		and ISnull(ltrim(rtrim(ii.IsDefaultBilling)), '') <> '' and ISnull(ltrim(rtrim(ii.IsDefaultBilling)),'') in ('FALSE','0')

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'IsDefaultShipping', IsDefaultShipping, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.IsDefaultShipping)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
		SELECT '68', 'IsDefaultShipping', IsDefaultShipping, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
		FROM #InsertAccount AS ii  
		WHERE ISnull(ltrim(rtrim(ii.IsDefaultShipping)),'') not in ('True','1','FALSE','0') and ISnull(ltrim(rtrim(ii.IsDefaultShipping)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
		SELECT '91', 'IsDefaultShipping', IsDefaultShipping, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
		FROM #InsertAccount AS ii  
		WHERE exists(select * from ZnodeAccount ZA where ii.AccountCode = ZA.AccountCode)  
		and ISnull(ltrim(rtrim(ii.IsDefaultShipping)), '') <> '' and ISnull(ltrim(rtrim(ii.IsDefaultShipping)),'') in ('FALSE','0')

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'AddressName', AddressName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.AddressName)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '81', 'AddressName', AddressName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ii.AddressName, '')) >200 and ISnull(ltrim(rtrim(ii.AddressName)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'Address1', Address1, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.Address1)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '81', 'Address1', Address1, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ii.Address1, '')) >200 and ISnull(ltrim(rtrim(ii.Address1)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '82', 'CompanyName', CompanyName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ii.CompanyName, '')) >300 and ISnull(ltrim(rtrim(ii.CompanyName)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'LastName', LastName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.LastName)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '82', 'LastName', LastName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ltrim(rtrim(ii.LastName)), '')) >300 and ISnull(ltrim(rtrim(ii.LastName)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'FirstName', FirstName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.FirstName)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '82', 'FirstName', FirstName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ii.FirstName, '')) >300 and ISnull(ltrim(rtrim(ii.FirstName)), '') <> ''
		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '80', 'CatalogCode', CatalogCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE not exists(select * from ZnodePimCatalog ZS where ZS.CatalogCode = ISnull(ltrim(rtrim(ii.CatalogCode)), '') )
		and ISnull(ltrim(rtrim(ii.CatalogCode)), '') <> ''
		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'CatalogCode', CatalogCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.CatalogCode)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '82', 'ExternalID', ExternalID, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ii.ExternalID, '')) >300 and ISnull(ltrim(rtrim(ii.ExternalID)), '') <> ''


		-- -- error log when atleast db have 
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '85', 'IsDefaultBilling/IsDefaultShipping', IsDefaultBilling +'/'+ IsDefaultShipping, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount IC where not exists (
		SELECT TOP 1 1  from ZnodeAccount ZAA where IC.AccountCode = ZAA.AccountCode )
		and (IC.IsDefaultBilling not in ('1', 'true') or (IsDefaultShipping not in ('1', 'true')))  
		
		UPDATE ZIL
		SET ZIL.ColumnName =   ZIL.ColumnName + ' [ AccountCode - ' + ISNULL(AccountCode,'') + ' ] '
		FROM ZnodeImportLog ZIL 
		INNER JOIN #InsertAccount IPA ON (ZIL.RowNumber = IPA.RowNumber)
		WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL

		
		DELETE FROM #InsertAccount
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber IS NOT NULL 
		);

		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM #InsertAccount
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount ,
		TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End
		CREATE TABLE #InsertedAccount (AccountId int, Accountcode nvarchar(100)) 
		
		INSERT INTO ZnodeAccount(AccountCode,ParentAccountId,Name,ExternalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		OUTPUT INSERTED.AccountId, INSERTED.Accountcode INTO  #InsertedAccount (AccountId, Accountcode) 
		select IC.AccountCode, null as ParentAccountId, AccountName, IC.ExternalID, @UserId, @GetDate, @UserId, @GetDate
		from #InsertAccount IC
		where not exists(select * from ZnodeAccount ZA1 where ZA1.AccountCode = IC.AccountCode)
		and ISnull(ltrim(rtrim(IC.ParentAccountCode)), '') = '' 

		INSERT INTO ZnodePortalAccount(PortalId,AccountId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT @PortalId, IA.AccountId,  @UserId, @GetDate, @UserId, @GetDate
		FROM #InsertedAccount IA 
		WHERE not exists(select * from ZnodePortalAccount ZPA where IA.AccountId = ZPA.AccountId )

		----Import Child Account where Parent account details having in same CSV ****Start
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '86', 'ParentAccountCode', ParentAccountCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.ParentAccountCode)), '') <> ''
		and not exists(select * from znodePortalAccount ZPA inner join ZnodeAccount ZA ON ZPA.AccountId = ZA.AccountId where ii.ParentAccountCode = ZA.AccountCode and ZPA.PortalId = @PortalId)
		and not exists(select * from #InsertAccount IA where ISnull(ltrim(rtrim(ii.ParentAccountCode)), '') = ISnull(ltrim(rtrim(IA.AccountCode)), '') and ii.RowNumber > IA.RowNumber)
	
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '87', 'ParentAccountCode', ParentAccountCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.ParentAccountCode)), '') <> ''
		and exists(select * from ZnodeAccount ZA where ii.ParentAccountCode = ZA.AccountCode and ZA.ParentAccountId is not null)

		UPDATE ZIL
		SET ZIL.ColumnName =   ZIL.ColumnName + ' [ AccountCode - ' + ISNULL(AccountCode,'') + ' ] '
		FROM ZnodeImportLog ZIL 
		INNER JOIN #InsertAccount IPA ON (ZIL.RowNumber = IPA.RowNumber)
		WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL

		DELETE FROM #InsertAccount
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber IS NOT NULL 
		);

		INSERT INTO ZnodeAccount(AccountCode,ParentAccountId,Name,ExternalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		OUTPUT INSERTED.AccountId, INSERTED.Accountcode INTO  #InsertedAccount (AccountId, Accountcode) 
		select IC.AccountCode, za.AccountId as ParentAccountId, AccountName, IC.ExternalID, @UserId, @GetDate, @UserId, @GetDate
		from #InsertAccount IC
		left join ZnodeAccount za on IC.ParentAccountCode = za.AccountCode
		where not exists(select * from ZnodeAccount ZA1 where ZA1.AccountCode = IC.AccountCode)
		and ISnull(ltrim(rtrim(IC.ParentAccountCode)), '') <> ''

		INSERT INTO ZnodePortalAccount(PortalId,AccountId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT @PortalId, IA.AccountId,  @UserId, @GetDate, @UserId, @GetDate
		FROM #InsertedAccount IA 
		WHERE not exists(select * from ZnodePortalAccount ZPA where IA.AccountId = ZPA.AccountId )
		--------
		update ZA set ZA.ParentAccountId =  ZA1.AccountId
		from ZnodeAccount ZA
		inner join #InsertAccount IA ON ZA.AccountCode = IA.AccountCode
		inner join ZnodeAccount ZA1 ON ZA1.AccountCode = IA.ParentAccountCode 
		where exists(select * from #InsertedAccount IC where IA.AccountCode = IC.AccountCode)
		and ZA.ParentAccountId is null

		----updating AccountName for respective account
		update ZA set Name = IC.AccountName, AccountCode = IC.AccountCode
		OUTPUT INSERTED.AccountId, INSERTED.Accountcode INTO  #InsertedAccount (AccountId, Accountcode)
		from ZnodeAccount ZA
		inner join #InsertAccount IC ON ZA.AccountCode = IC.AccountCode

		----updating publishcatalogin to respective account
		update ZA set PublishCatalogId = ZPC1.PublishCatalogId, AccountCode = IC.AccountCode
		OUTPUT INSERTED.AccountId, INSERTED.Accountcode INTO  #InsertedAccount (AccountId, Accountcode) 
		from ZnodeAccount ZA
		inner join #InsertAccount IC ON ZA.AccountCode = IC.AccountCode
		inner join ZnodePimCatalog ZPC ON IC.CatalogCode = ZPC.CatalogCode
		inner join ZnodePublishCatalog ZPC1 ON ZPC.PimCatalogId = ZPC1.PimCatalogId
		where not exists(select * from ZnodePortalCatalog ZPCa where ZPCa.PublishCatalogId = ZPC1.PublishCatalogId and ZPCa.PortalId = @PortalId)

		----------update ZnodeAddress
		DECLARE @AddressColumnString VARCHAR(1000), @WhereConditionString VARCHAR(1000), @UpdateColumnString VARCHAR(1000)

		SELECT @AddressColumnString = COALESCE(@AddressColumnString + ',', '')+a.ColumnName --COALESCE(@CsvColumnString + ' and ', '') +'ZA.'+ColumnName+' =  IC.'+ColumnName
		FROM ZnodeImportUpdatableColumns a
		INNER JOIN INFORMATION_SCHEMA.COLUMNS b on a.ColumnName = b.COLUMN_NAME  
		INNER JOIN dbo.Split(@CsvColumnString,',')C on b.COLUMN_NAME = c.Item
		WHERE b.TABLE_NAME = 'ZnodeAddress' 
		AND EXISTS(SELECT * FROM ZnodeImportHead IH where a.ImportHeadId = IH.ImportHeadId and IH.Name= 'Account')

		SELECT @UpdateColumnString = COALESCE(@UpdateColumnString + ' , ', '') +'ZA.'+a.COLUMN_NAME+' =  IC.'+a.COLUMN_NAME  
		FROM INFORMATION_SCHEMA.COLUMNS a
		INNER JOIN dbo.Split(@CsvColumnString,',')b on a.COLUMN_NAME = b.Item
		WHERE NOT EXISTS (SELECT * FROM dbo.Split(@AddressColumnString,',') c WHERE a.COLUMN_NAME = c.Item )
		AND a.TABLE_NAME = 'ZnodeAddress'

		SELECT @WhereConditionString = COALESCE(@WhereConditionString + ' AND ', '') +'ZA.'+item+' =  IC.'+item from dbo.split(@AddressColumnString,',')
	
				
		CREATE TABLE #InsertedAccountAddress (AddressId  int, AccountCode varchar(100)) 

		SET @SSQL = '
			UPDATE ZA set ModifiedBy = '+CONVERT(VARCHAR(10), @UserId)+', ModifiedDate = getdate() '+CASE WHEN ISNULL(@UpdateColumnString,'') = '' THEN '' ELSE ','+@UpdateColumnString END+' 
			FROM ZnodeAddress ZA
			INNER JOIN #InsertAccount IC ON '+CASE WHEN ISNULL(@WhereConditionString,'') = '' THEN ' 1 = 0 ' ELSE @WhereConditionString END

		EXEC (@SSQL)

		SET @SSQL = '
		Insert into ZnodeAddress (FirstName,LastName,DisplayName,Address1,Address2,Address3,CountryName,
								StateName,CityName,PostalCode,PhoneNumber,
								IsDefaultBilling,IsDefaultShipping,IsActive,ExternalId,CompanyName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)		
		OUTPUT INSERTED.AddressId, INSERTED.Address3 INTO  #InsertedAccountAddress (AddressId, AccountCode) 			 
		SELECT IC.FirstName,IC.LastName,IC.AddressName,IC.Address1,IC.Address2,IC.AccountCode,ZC.CountryCode,
		ZS.StateCode,IC.CityName,IC.PostalCode,IC.PhoneNumber,
		isnull(IC.IsDefaultBilling,0),isnull(IC.IsDefaultShipping,0),1,IC.ExternalId,IC.CompanyName, '+CONVERT(VARCHAR(10), @UserId)+' , getdate() , '+CONVERT(VARCHAR(10), @UserId)+' ,getdate()
		FROM  #InsertAccount IC
		inner join ZnodeState ZS on IC.StateName = ZS.StateName
		inner join ZnodeCountry ZC ON IC.CountryName = ZC.CountryName and ZS.CountryCode = ZC.CountryCode
		WHERE NOT EXISTS(SELECT * FROM ZnodeAddress ZA WHERE '+CASE WHEN ISNULL(@WhereConditionString,'') = '' THEN ' 1 = 0 ' ELSE @WhereConditionString END +')'

		EXEC (@SSQL)

		update ZAA set AddressId = UA.AddressId
		FROM #InsertedAccountAddress UA
		INNER JOIN #InsertedAccount IA ON UA.AccountCode = IA.AccountCode
		inner join ZnodeAccount ZA ON IA.AccountCode = ZA.AccountCode
		inner join ZnodeAccountAddress ZAA ON ZA.AccountId = ZAA.AccountId
		
		INSERT INTO ZnodeAccountAddress ( AccountId, AddressId, CreatedBy, CreatedDate,	ModifiedBy,	ModifiedDate )
		SELECT distinct IA.AccountId, AddressId ,  @UserId , @GetDate, @UserId , @GetDate 
		FROM #InsertedAccountAddress UA
		INNER JOIN #InsertedAccount IA ON UA.AccountCode = IA.AccountCode
		WHERE NOT EXISTS ( SELECT * FROM ZnodeAccountAddress AA WHERE AA.AccountId = IA.AccountId )

		update ZnodeAddress set Address3 = null
		where exists(select * from #InsertedAccountAddress IAA where IAA.AddressId = ZnodeAddress.AddressId )
		and Address3 is null
		
		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = getdate()
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;
	END TRY
	BEGIN CATCH

		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = getdate()
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN A;
		 DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportAccount @TableName = '+CAST(@TableName AS VARCHAR(max))+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@ImportProcessLogId='+CAST(@ImportProcessLogId AS VARCHAR(10))+',@PortalId='+CAST(@PortalId AS VARCHAR(10))+',@CsvColumnString='+CAST(@CsvColumnString AS VARCHAR(max));
              			
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_ImportAccount',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
	END CATCH;
END;
go
if exists(select * from sys.procedures where name = 'Znode_GetHighlightDetail')
	drop proc Znode_GetHighlightDetail
go
CREATE PROCEDURE [dbo].[Znode_GetHighlightDetail]
	( @WhereClause nvarchar(max),
	  @Rows int= 10,
	  @PageNo int= 1,
	  @Order_BY varchar(1000)= '', 
	  @RowsCount int= 0 OUT,
	  @LocaleId int= 1,
      @IsAssociated bit= 0,
      @Isdebug bit= 0)
AS
/*
	 Summary :- This Procedure is used to get the highlights details 
	 Unit Testing 
	 begin tran
	 EXEC Znode_GetHighlightDetail '',10,1,'',0,1,0
	 rollback tran
	 
*/
BEGIN
	BEGIN TRY
		SET NOCOUNT ON;

		DECLARE @DefaultLocaleId int= dbo.Fn_GetDefaultLocaleId();
		DECLARE @SeoId varchar(max)= '', @SQL nvarchar(max);
		DECLARE @TBL_HighlightsDetails TABLE
		( 
			Description nvarchar(max), 
			HighlightId int,
			HighlightCode varchar(600),
			HighlightType NVARCHAR(400),
			DisplayOrder int,
			IsActive bit, 
			HighlightLocaleId int,
			MediaPath nvarchar(max), 
			MediaId int,
			Hyperlink nvarchar(max),
			ImageAltTag NVARCHAR(4000),DisplayPopup BIT
		);
		--Get default attributeid for ProductHighlights
		DECLARE @AttributeId int= [dbo].[Fn_GetProductHighlightsAttributeId]();
		DECLARE @TBL_AttributeDefault TABLE
		( 
			PimAttributeId int,
			AttributeDefaultValueCode varchar(600),
			IsEditable bit, 
			AttributeDefaultValue nvarchar(max),
			DisplayOrder INT
		);
	    DECLARE @TBL_HighlightsDetail TABLE
		( 
			 Description nvarchar(max),
			 HighlightId int, 
			 HighlightCode varchar(600),
			 HighlightType NVARCHAR(400),
			 DisplayOrder int,
			 IsActive bit,
			 HighlightLocaleId int, 
			 MediaPath nvarchar(max), 
			 MediaId int, 
			 Hyperlink nvarchar(max),
			 ImageAltTag NVARCHAR(4000),DisplayPopup BIT,
			 HighlightName nvarchar(max), 
			 RowId int, 
			 CountId int
		);

		
		INSERT INTO @TBL_AttributeDefault
		EXEC Znode_GetAttributeDefaultValueLocale @AttributeId, @LocaleId;

		SET @WhereClause = ' '+@WhereClause+CASE
											WHEN @IsAssociated = 1 THEN CASE
																		WHEN @WhereClause = '' THEN ' '
																		ELSE ' AND '
																		END+' EXISTS ( SELECT TOP 1 1 
																						FROM ZnodePimAttributeValue ZAV 
																						INNER JOIN ZnodePimAttribute ZA ON (ZA.PimAttributeId = ZAV.PimAttributeId AND ZA.AttributeCode = ''Highlights'') 
																				        INNER JOIN ZnodePimProductAttributeDefaultValue ZAVL ON (ZAV.PimAttributeValueId= ZAVL.PimAttributeValueId ) 
																		WHERE ( ZAVL.AttributeValue = TMADV.AttributeDefaultValueCode))'
											ELSE CASE
												 WHEN @WhereClause = '' THEN ' 1 = 1  '
												 ELSE ''
												 END
											END;

		WITH Cte_GetHighlightsBothLocale
			 AS (SELECT Row_Number()Over( PARTITION BY   ZH.HighlightCode ORDER BY ZADV.MediaId desc) RowId, ZHL.Description, ZH.HighlightId, LocaleId, ZH.HighlightCode,ZPHT.Name HighlightType , ZADV.DisplayOrder, ZH.IsActive, ZHL.HighlightLocaleId, [dbo].[Fn_GetMediaThumbnailMediaPath]( Zm.path ) AS MediaPath
							, ZADV.MediaId, Hyperlink,ImageAltTag,DisplayPopup
				 FROM ZnodeHighlight AS ZH
					  left Join ZnodePimAttributeDefaultValue ZADV on ZADV.AttributeDefaultValueCode =ZH.HighlightCode
					  left JOIN  ZnodeHighlightLocale AS ZHL ON(ZHL.HighlightId = ZH.HighlightId)					 					  
					  left JOIN ZnodeMedia AS ZM ON(ZM.MediaId = ZADV.MediaId)
					  left JOIN ZnodeHighLightType ZPHT ON (ZPHT.HighlightTypeId = ZH.HighlightTypeId)					  
				 WHERE LocaleId IN( @LocaleId, @DefaultLocaleId )					 
			    ),

			 Cte_HighlightsFirstLocale
			 AS (SELECT Description, HighlightId, LocaleId, HighlightCode,HighlightType, DisplayOrder, IsActive, HighlightLocaleId, MediaPath
			           , MediaId, Hyperlink,ImageAltTag,DisplayPopup
				 FROM Cte_GetHighlightsBothLocale AS CTGBBL
				 WHERE LocaleId = @LocaleId and RowId = 1),

			 Cte_HighlightsDefaultLocale
			 AS (
			 SELECT Description, HighlightId, HighlightCode,HighlightType, DisplayOrder, IsActive, HighlightLocaleId, MediaPath
			            , MediaId, Hyperlink,ImageAltTag,DisplayPopup
			 FROM Cte_HighlightsFirstLocale
			 UNION ALL
			 SELECT Description, HighlightId, HighlightCode,HighlightType, DisplayOrder, IsActive, HighlightLocaleId, MediaPath
			             , MediaId, Hyperlink,ImageAltTag,DisplayPopup
			 FROM Cte_GetHighlightsBothLocale AS CTBBL
			 WHERE LocaleId = @DefaultLocaleId and RowId = 1 AND 
				   NOT EXISTS
			 (
				 SELECT TOP 1 1
				 FROM Cte_HighlightsFirstLocale AS CTBFL
				 WHERE CTBBL.HighlightId = CTBFL.HighlightId
			 ))


			 INSERT INTO @TBL_HighlightsDetails( Description, HighlightId, HighlightCode,HighlightType, DisplayOrder, IsActive, HighlightLocaleId, MediaPath, MediaId, Hyperlink,ImageAltTag,DisplayPopup )
					SELECT Description, HighlightId, HighlightCode,HighlightType, DisplayOrder, IsActive, HighlightLocaleId, MediaPath, MediaId, Hyperlink,ImageAltTag,DisplayPopup
					FROM Cte_HighlightsDefaultLocale AS CTEBD; 

		
		SELECT TBBD.*, TBAD.AttributeDefaultValue AS HighlightName, TBAD.AttributeDefaultValueCode
		INTO #TM_HighlightsLocale
		FROM @TBL_HighlightsDetails AS TBBD 
			 INNER JOIN @TBL_AttributeDefault AS TBAD  ON(TBAD.AttributeDefaultValueCode = TBBD.HighlightCode);
			 		
		SET @SQL = ' 
	            ;With Cte_HighlightsDetails AS 
				(
					SELECT * ,'+[dbo].[Fn_GetPagingRowId]( @Order_BY, 'HighlightId DESC' )+',Count(*)Over() CountId
					FROM #TM_HighlightsLocale TMADV
					WHERE 1=1
					'+[dbo].[Fn_GetFilterWhereClause]( @WhereClause )+'

			    )
				SELECT Description ,HighlightId , HighlightCode,HighlightType , DisplayOrder  ,IsActive   ,HighlightLocaleId 
										,MediaPath ,MediaId ,Hyperlink,ImageAltTag,DisplayPopup
									    ,HighlightName ,RowId  ,CountId 
				FROM Cte_HighlightsDetails
				'+[dbo].[Fn_GetOrderByClause]( @Order_BY, 'HighlightId DESC' )+' ';

		INSERT INTO @TBL_HighlightsDetail( Description, HighlightId, HighlightCode,HighlightType, DisplayOrder, IsActive, HighlightLocaleId, MediaPath, MediaId, Hyperlink,ImageAltTag,DisplayPopup, HighlightName, RowId, CountId )
		EXEC (@SQL);

		SET @RowsCount = ISNULL(( SELECT TOP 1 CountId FROM @TBL_HighlightsDetail), 0);

		SELECT distinct HighlightId, Description, HighlightCode,HighlightType, DisplayOrder, IsActive, HighlightLocaleId, MediaPath, MediaId, Hyperlink,ImageAltTag,DisplayPopup, HighlightName
		FROM @TBL_HighlightsDetail order by DisplayOrder;
	END TRY
	BEGIN CATCH
		 DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetHighlightDetail @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@LocaleId = '+CAST(@LocaleId AS VARCHAR(50))+',@IsAssociated='+CAST(@IsAssociated AS VARCHAR(50))+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetHighlightDetail',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
	END CATCH;
END;
go
delete from ZnodeCMSAreaMessageKey where CMSMessageKeyId in (select CMSMessageKeyId from ZnodeCMSMessageKey where MessageKey = 'CJ')
delete from ZnodeCMSPortalMessage where CMSMessageKeyId in (select CMSMessageKeyId from ZnodeCMSMessageKey where MessageKey = 'CJ')
delete from ZnodeCMSPortalMessageKeyTag where CMSMessageKeyId in (select CMSMessageKeyId from ZnodeCMSMessageKey where MessageKey = 'CJ')
delete from ZnodeCMSMessageKey where CMSMessageKeyId in (select CMSMessageKeyId from ZnodeCMSMessageKey where MessageKey = 'CJ')

