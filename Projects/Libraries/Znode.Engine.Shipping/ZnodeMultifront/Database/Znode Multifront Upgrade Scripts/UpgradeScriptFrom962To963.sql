IF EXISTS (SELECT TOP 1 1 FROM Sys.Tables WHERE Name = 'ZnodeMultifront')
BEGIN 
IF EXISTS (SELECT TOP 1 1 FROM ZnodeMultifront where BuildVersion =   963 and VersionName = 'Znode_Multifront_9_6_3_GA' )
BEGIN 
PRINT 'Script is already executed....'
 SET NOEXEC ON 
END 
END
ELSE 
BEGIN 
  SET NOEXEC ON
END 
INSERT INTO [dbo].[ZnodeMultifront] ( [VersionName], [Descriptions], [MajorVersion], [MinorVersion], [LowerVersion], [BuildVersion], [PatchIndex], [CreatedBy], 
[CreatedDate], [ModifiedBy], [ModifiedDate]) 
VALUES ( N'Znode_Multifront_9_6_3_GA', N'Upgrade GA Release by 963',9,6,3,963,0,2, GETDATE(),2, GETDATE())
GO 
SET ANSI_NULLS ON
GO
If not exists(select * from sys.indexes where name = 'IDX_ZnodeAccountProfile_ProfileId')
begin
	CREATE NONCLUSTERED INDEX [IDX_ZnodeAccountProfile_ProfileId]
	ON [dbo].[ZnodeAccountProfile] ([ProfileId])
	INCLUDE ([AccountId])
End
go
If not exists(select * from sys.indexes where name = 'IDX_ZnodeInventory_SKU_Quantity')
begin
CREATE NONCLUSTERED INDEX [IDX_ZnodeInventory_SKU_Quantity]
    ON [dbo].[ZnodeInventory]([WarehouseId] ASC)
    INCLUDE([SKU], [Quantity])
end
go
IF exists(select * from sys.procedures where name = 'Znode_CopyPortalMessageAndContentPages')
	drop proc Znode_CopyPortalMessageAndContentPages
go
CREATE PROCEDURE [dbo].[Znode_CopyPortalMessageAndContentPages]
(	@CopyPortalId    INT,
    @PortalId        INT,
    @UserId          INT,
    @Status          INT = 1 OUT)
AS 
    
	/*
     Summary :- This procedure is used to copy existing portal messages and content pages to the another portal 
     Fn_GetDefaultValue use to find the defualt value of locale 
     copy only default locale data and active records 
     Affected tables "ZnodeCMSContentPages" copy the record of one portal to another portal 
     "ZnodeCMSContentPagesLocale" copy the record of one portal to another portal 
     "ZnodeCMSPortalMessage" copy the record of one portal to another portal 
     Unit Testing
	 begin tran
     EXEC Znode_CopyPortalMessageAndContentPages @CopyPortalId = 1 ,@PortalId = 1 ,@UserId = 2 ,@Status =0 
     rollback tran  
   */
    
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @TBL_ContentPageDetail TABLE
             (
			    CMSContentPagesId    INT,
                OldCMSContentPagesId INT,
				PageName NVARCHAR(200)
                
             );
             DECLARE @TBL_CMSSEODetailId TABLE
             (
			    CMSSEODetailId    INT,
                OldCMSSEODetailId INT 
                 
             );
			 -- copy the  messages for portal
			 Declare @messageid table (id int, message varchar(max) null,messagekeyid int null);

			 Insert into ZnodeCMSMessage (LocaleId,	Message,	IsPublished,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate,	PublishStateId )
			 output inserted.CMSMessageId, inserted.Message into @messageid (id,message)
				select LocaleId,	Message,	IsPublished,@UserId,@GetDate,@UserId,@GetDate,	PublishStateId
					from ZnodeCMSMessage ZCM inner join ZnodeCMSPortalMessage AS ZCPM ON(ZCM.CMSMessageId = ZCPM.CMSMessageId)
					WHERE ZCPM.PortalId = @CopyPortalId;  

			Update m
			set messagekeyid = ZCPM.CMSMessageKeyId
			 FROM ZnodeCMSPortalMessage AS ZCPM
             INNER JOIN ZnodeCMSMessage AS ZCM ON(ZCM.CMSMessageId = ZCPM.CMSMessageId)
			 inner join @messageid m on m.message = ZCM.message
			WHERE ZCPM.PortalId = @CopyPortalId; 

             INSERT INTO ZnodeCMSPortalMessage (PortalId, CMSMessageKeyId,CMSMessageId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             SELECT DISTINCT @PortalId,ZCPM.CMSMessageKeyId,m.id,@UserId,@GetDate,@UserId,@GetDate
             FROM ZnodeCMSPortalMessage AS ZCPM
             INNER JOIN ZnodeCMSMessage AS ZCM ON(ZCM.CMSMessageId = ZCPM.CMSMessageId)
			 inner join @messageid m on ZCPM.CMSMessageKeyId =m.messagekeyid
             WHERE ZCPM.PortalId = @CopyPortalId;  
            
			 INSERT INTO ZnodeCMSPortalMessageKeyTag (PortalId,CMSMessageKeyId,TagXML,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             SELECT @PortalId,CMSMessageKeyId,TagXML,@UserId,@GetDate,@UserId,@GetDate
             FROM ZnodeCMSPortalMessageKeyTag ZCPMT
             WHERE PortalId = @CopyPortalId;
			 -- this cte use to collect the required data to merge with ZnodeCMSContentPages 
             WITH Cte_CMSContentPages
             AS 
             (SELECT DISTINCT ZCCP.CMSContentPagesId,@PortalId AS PortalId,CMSTemplateId,PageName,ActivationDate,ExpirationDate,IsActive,@UserId AS CreatedBy,@GetDate AS CreatedDate,@UserId AS ModifiedBy,@GetDate AS ModifiedDate 
	         FROM ZnodeCMSContentPages AS ZCCP
             WHERE IsActive = 1 AND PortalId = @CopyPortalId)
			 -- merge use for catching the output 
             MERGE INTO ZnodeCMSContentPages TARGET
             USING Cte_CMSContentPages SOURCE 
             ON 1 = 0
                      WHEN NOT MATCHED
                      THEN INSERT(PortalId,CMSTemplateId,PageName,ActivationDate,ExpirationDate,IsActive,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
					  VALUES (SOURCE.PortalId,SOURCE.CMSTemplateId,SOURCE.PageName,SOURCE.ActivationDate,SOURCE.ExpirationDate,SOURCE.IsActive,SOURCE.CreatedBy,SOURCE.CreatedDate,SOURCE.ModifiedBy,SOURCE.ModifiedDate)
                      OUTPUT Inserted.CMSContentPagesId,
                      SOURCE.CMSContentPagesId,Inserted.PageName 
                      INTO @TBL_ContentPageDetail;

             -- here collect the inserted data for further use 

             INSERT INTO ZnodeCMSContentPageGroupMapping (CMSContentPageGroupId,CMSContentPagesId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             SELECT CMSContentPageGroupId,TBCPD.CMSContentPagesId,@UserId,@GetDate,@userId,@GetDate
			 FROM ZnodeCMSContentPageGroupMapping ZCCPGM
             INNER JOIN @TBL_ContentPageDetail TBCPD ON(TBCPD.OldCMSContentPagesId = ZCCPGM.CMSContentPagesId);

             INSERT INTO ZnodeCMSContentPagesLocale(CMSContentPagesId,LocaleId,PageTitle,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             SELECT TBCPD.CMSContentPagesId,LocaleId,PageTitle,@UserId,@GetDate,@userId,@GetDate -- insert default locale records 
             FROM ZnodeCMSContentPagesLocale AS ZCCPL
             INNER JOIN @TBL_ContentPageDetail AS TBCPD ON(TBCPD.OldCMSContentPagesId = ZCCPL.CMSContentPagesId);

             INSERT INTO ZnodeCMSContentPagesProfile (ProfileId,CMSContentPagesId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             SELECT ProfileId,TBCPD.CMSContentPagesId,@UserId,@GetDate,@userId,@GetDate
             FROM ZnodeCMSContentPagesProfile ZCPP
             INNER JOIN @TBL_ContentPageDetail TBCPD ON(TBCPD.OldCMSContentPagesId = ZCPP.CMSContentPagesId)
             WHERE EXISTS  ( SELECT TOP 1 1 FROM ZnodePortalProfile ZPP WHERE ZPP.PortalId = @CopyPortalId AND isnull(ZPP.ProfileId,0) = isnull(ZCPP.ProfileId,0) )
             -- this cte use to collect the required data to merge with ZnodeCMSContentPages 
			 ;WITH Cte_CMSSEODetails
             AS  
             (
			 SELECT ZCSD.CMSSEODetailId,ZCSD.CMSSEOTypeId,TBCPD.CMSContentPagesId,IsRedirect,MetaInformation,@PortalId PortalId,SEOUrl,@UserId CREATEDBy,@GetDate CREATEDDATE,@userId MODIFIEDBY,@GetDate MODIFIEDDATE
			 ,ZCSD.IsPublish,ZCSD.SEOCode
             FROM ZnodeCMSSEODetail ZCSD
             INNER JOIN @TBL_ContentPageDetail TBCPD ON(TBCPD.PageName = ZCSD.SEOCode)
             INNER JOIN ZnodeCMSSEOType ZCST ON(ZCST.CMSSEOTypeId = ZCSD.CMSSEOTypeId AND ZCST.Name = 'Content Page')
			 WHERE ZCSD.PortalId = @CopyPortalId)
			 -- merge use for catching the output
             MERGE INTO ZnodeCMSSEODetail TARGET
             USING Cte_CMSSEODetails SOURCE 
             ON 1 = 0
             WHEN NOT MATCHED
             THEN INSERT(CMSSEOTypeId,SEOId,IsRedirect,MetaInformation,PortalId,SEOUrl,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,IsPublish,SEOCode)
			 VALUES (SOURCE.CMSSEOTypeId,NULL,SOURCE.IsRedirect,SOURCE.MetaInformation,SOURCE.PortalId,SOURCE.SEOUrl,SOURCE.CreatedBy,SOURCE.CreatedDate,SOURCE.ModifiedBy,SOURCE.ModifiedDate,SOURCE.IsPublish,SOURCE.SEOCode)
             OUTPUT Inserted.CMSSEODetailId,
             SOURCE.CMSSEODetailId 
             INTO @TBL_CMSSEODetailId;

             INSERT INTO ZnodeCMSSEODetailLocale (CMSSEODetailId,LocaleId,SEOTitle,SEODescription,SEOKeywords,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate, CanonicalURL, RobotTag)
             SELECT TBCPD.CMSSEODetailId,ZCSDl.LocaleId,ZCSDl.SEOTitle,ZCSDl.SEODescription,ZCSDl.SEOKeywords,@UserId as CreatedBy,@GetDate as CreatedDate,@userId as ModifiedBy,@GetDate as ModifiedDate, ZCSDl.CanonicalURL, ZCSDl.RobotTag
             FROM ZnodeCMSSEODetailLocale ZCSDl
             INNER JOIN @TBL_CMSSEODetailId TBCPD ON(TBCPD.OldCMSSEODetailId = ZCSDl.CMSSEODetailId);
                          
			 INSERT INTO ZnodePortalCountry (PortalId,CountryCode,IsDefault,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate) 
			 SELECT @PortalId,CountryCode,IsDefault,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
			 FROM ZnodePortalCountry ZPC
			 WHERE PortalId = @CopyPortalId
			 AND IsDefault = 1 
			 AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodePortalCountry ZPPP WHERE ZPPP.PortalId = @PortalId AND ZPPP.CountryCode = CountryCode );

			 EXEC Znode_CopyPortalEmailTemplate @PortalId,@CopyPortalId,@userId
			 SET @Status = 1;
			 SELECT @CopyPortalId AS ID,CAST(1 AS BIT) AS [Status];
         END TRY
         BEGIN CATCH
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= ' EXEC Znode_CopyPortalMessageAndContentPages @CopyPortalId = '+CAST(@CopyPortalId AS VARCHAR(100))+' ,@PortalId='+CAST(@PortalId AS VARCHAR(100))+' ,@UserId= '+CAST(@UserId AS VARCHAR(100))+',@Status='+CAST(@Status AS VARCHAR(50));
             SELECT @PortalId AS ID,
                    CAST(0 AS BIT) AS [Status];
             SET @Status = 0;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_CopyPortalMessageAndContentPages',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
go
IF exists(select * from sys.procedures where name = 'Znode_ReturnOrderLineItem')
	drop proc Znode_ReturnOrderLineItem
go
CREATE PROCEDURE [dbo].[Znode_ReturnOrderLineItem]
(	@OrderLineItemIds nvarchar(500),
	@OmsOrderDetailsId int,
	@OrderStateName nvarchar(100) ,
	@ReasonForReturnId int,
	@Quantity [numeric](28, 6),
	@IsShippingReturn bit,
	@ShippingCost [numeric](28, 6),
	@ProductDiscountAmount [numeric](28, 6) ,
	@Status BIT OUT
)
AS

/*
begin tran
exec Znode_DeleteOrderById 6
rollback tran
*/
BEGIN
  SET NOCOUNT ON
   BEGIN  TRAN _TranReturnOrderLineItem
  BEGIN TRY 


			DECLARE @RETURNSTATEID INT, @ORDERSHIPMENTID INT
			
			select  top 1 @ORDERSHIPMENTID = OmsOrderShipmentId from ZNODEOMSORDERLINEITEMS where OmsOrderDetailsId = @OmsOrderDetailsId and IsActive = 1

			SELECT @RETURNSTATEID=OMSORDERSTATEID FROM ZNODEOMSORDERSTATE WHERE ORDERSTATENAME = @OrderStateName

			UPDATE ZNODEOMSORDERLINEITEMS
			SET ISACTIVE = 1 ,OMSORDERDETAILSID = @OmsOrderDetailsId ,
			ORDERLINEITEMSTATEID = @RETURNSTATEID , 
			RmaReasonForReturnId = @ReasonForReturnId,
			OmsOrderShipmentId= @ORDERSHIPMENTID,
			Quantity = CASE WHEN Quantity =0 THEN 0 ELSE @Quantity END,
			ShippingCost = CASE WHEN ISNULL(ShippingCost,0) =0 THEN 0 ELSE @ShippingCost END,
			IsShippingReturn =  @IsShippingReturn,
			DiscountAmount = @ProductDiscountAmount
			WHERE OMSORDERLINEITEMSID 
			IN(
			SELECT ITEM FROM DBO.SPLIT(@OrderLineItemIds,',')) OR 
			PARENTOMSORDERLINEITEMSID IN(SELECT ITEM FROM DBO.SPLIT(@OrderLineItemIds,',')
			)   


            SELECT 1 AS ID , CAST(1 AS BIT) AS Status;
        SET @Status = 1;    
		 COMMIT  TRAN _TranReturnOrderLineItem
	END TRY
	BEGIN CATCH
	   SELECT 0 AS ID , CAST(0 AS BIT) AS Status;
	    SET @Status = 0;
		ROLLBACK TRAN _TranReturnOrderLineItem
	SELECT ERROR_MESSAGE()
	END CATCH

END
go

If not exists(select * from sys.indexes where name = 'INX_ZnodeCMSCustomerReview_SKU_Status_PortalId')
begin
CREATE NONCLUSTERED INDEX [INX_ZnodeCMSCustomerReview_SKU_Status_PortalId]
    ON [dbo].[ZnodeCMSCustomerReview]([Status] ASC, [PortalId] ASC, [SKU] ASC)
end
go
If not exists(select * from sys.indexes where name = 'INX_ZnodePublishAddonEntity_LocaleId_ZnodeProductId_VersionId')
begin
CREATE NONCLUSTERED INDEX [INX_ZnodePublishAddonEntity_LocaleId_ZnodeProductId_VersionId]
    ON [dbo].[ZnodePublishAddonEntity]([VersionId] ASC, [ZnodeProductId] ASC, [LocaleId] ASC);
end
go
If not exists(select * from sys.indexes where name = 'Inx_ZnodePublishCategoryEntity_ZnodeCategoryId_IsActive_VersionId')
begin
CREATE NONCLUSTERED INDEX [Inx_ZnodePublishCategoryEntity_ZnodeCategoryId_IsActive_VersionId]
    ON [dbo].[ZnodePublishCategoryEntity]([VersionId] ASC, [ZnodeCategoryId] ASC, [IsActive] ASC);
end
go
If not exists(select * from sys.indexes where name = 'Inx_ZnodePublishPortalBrandEntity_PortalId_BrandCode_LocaleId_VersionId_IsActive')
begin
CREATE NONCLUSTERED INDEX [Inx_ZnodePublishPortalBrandEntity_PortalId_BrandCode_LocaleId_VersionId_IsActive]
    ON [dbo].[ZnodePublishPortalBrandEntity]([VersionId] ASC, [PortalId] ASC, [LocaleId] ASC, [BrandCode] ASC, [IsActive] ASC);
End
go
If not exists(select * from sys.indexes where name = 'Inx_ZnodePublishProductEntity_ZnodeProductId_LocaleId_IsActive_VersionId_ProductIndex')
begin
CREATE NONCLUSTERED INDEX [Inx_ZnodePublishProductEntity_ZnodeProductId_LocaleId_IsActive_VersionId_ProductIndex]
    ON [dbo].[ZnodePublishProductEntity]([VersionId] ASC, [ZnodeProductId] ASC, [LocaleId] ASC, [IsActive] ASC, [ProductIndex] ASC);
end

go
IF exists(select * from sys.procedures where name = 'Znode_ImportPriceList')
	drop proc Znode_ImportPriceList
go
CREATE PROCEDURE [dbo].[Znode_ImportPriceList]
(
	@TableName nvarchar(100),
	@Status bit OUT, 
	@UserId int, 
	@ImportProcessLogId int,
	@NewGUId nvarchar(200),
	@PriceListId int )
AS 
	/*
	----Summary:  Import RetailPrice List 
	----		  Input XML data extracted in table format (table variable name:  #InsertPriceForValidation) by using  @xml.nodes 
	----		  Validate data column wise and store error log into @ErrorLogForInsertPrice table 
	----          Remove wrong data from table #InsertPriceForValidation and inserted correct data into @InsertPrice table for 
	----		  further processing (Importing to target database )
	---- Version 1 : Required Validation 
	---- UomName should not be null 
	---- Data for this RetailPrice list is already available  
	---- Version 2 : Required Validation 
	---- If UomName will be null then insert first record from UomTable and If UomName is wrong then raise error
	---- SKU with retailprice data is available with price list id will insert 
	---- multiple SKU with retail price is available then updated last sku details to price table and price tier table for respective price list
	----1. Import functionality should be provided only for single price list (Validate - Pending) 
	----  Tier price : TierStartQuantity should not between TierStartQuantity and TierEndQuantity for already existing SKU 
	----  In case of update details for SKU if any kind of price value will null then avoid it to update on existing value. 
	----2. From XML only SKU and RetailPrice is mandatory
	----3. SKUActivation date sholud be less than SKUExpriration date
	----4. Activation date sholud be less than Expiration date
	----5. If Tier RetailPrice has values and TierSartQuantity /TierEndQuantity or both has null value then it should not get updated/created.
	----6. ActivationDate and ExpirationDate value for tier price will be SKUActivationDate SKUExprirationDate 
	--- Change History : 
	--Remove column which is used to store range of qunatity by single column Quantity from table ZnodeTierProduct 
	--Manditory Retail price in Znodepricetable 
	-- SKUActivationfrom date and to date will used for tier price will store in single table ZnodePrice
	--Unit Testing   
	
*/
BEGIN
	BEGIN TRAN A;
	BEGIN TRY
	    DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
		
		IF OBJECT_ID('#InsertPriceForValidation', 'U') IS NOT NULL 
			DROP TABLE #InsertPriceForValidation
		ELSE 
			CREATE TABLE #InsertPriceForValidation 
			(SKU varchar(300) NULL, TierStartQuantity varchar(300) NULL, RetailPrice varchar(300) NULL, SalesPrice varchar(300) NULL, TierPrice varchar(300) NULL, SKUActivationDate varchar(300) NULL, SKUExpirationDate varchar(300) NULL,
			Custom1 varchar(300) NULL, Custom2 varchar(300) NULL, Custom3 varchar(300) NULL,CostPrice varchar(100), RowNumber varchar(300) NULL)

		IF OBJECT_ID('#InsertPrice', 'U') IS NOT NULL 
			DROP TABLE #InsertPrice
		ELSE 
			CREATE TABLE #InsertPrice 
			( 
				SKU varchar(300), TierStartQuantity numeric(28, 6) NULL, RetailPrice numeric(28, 6) NULL, SalesPrice numeric(28, 6) NULL, TierPrice numeric(28, 6) NULL, SKUActivationDate varchar(300) NULL, SKUExpirationDate varchar(300) NULL,
				Custom1 varchar(300) NULL, Custom2 varchar(300) NULL, Custom3 varchar(300) NULL,CostPrice numeric(28, 6), RowNumber varchar(300)
			);
	
	
		DECLARE @SKU TABLE
		( 
				SKU nvarchar(300)
		);
		INSERT INTO @SKU
			   SELECT b.AttributeValue
			   FROM ZnodePimAttributeValue AS a
					INNER JOIN
					ZnodePimAttributeValueLocale AS b
					ON a.PimAttributeId = dbo.Fn_GetProductSKUAttributeId() AND 
					   a.PimAttributeValueId = b.PimAttributeValueId;


		DECLARE @RoundOffValue int, @MessageDisplay nvarchar(100); 
		-- Retrive RoundOff Value from global setting 

		SELECT @RoundOffValue = FeatureValues FROM ZnodeGlobalSetting WHERE FeatureName = 'PriceRoundOff';
	
		--@MessageDisplay will use to display validate message for input inventory value  

		DECLARE @sSql nvarchar(max);
		SET @sSql = ' Select @MessageDisplay_new = Convert(Numeric(28, '+CONVERT(nvarchar(200), @RoundOffValue)+'), 999999.000000000 ) ';
		EXEC SP_EXecutesql @sSql, N'@MessageDisplay_new NVARCHAR(100) OUT', @MessageDisplay_new = @MessageDisplay OUT;
		

		SET @SSQL = 'Select SKU,TierStartQuantity ,RetailPrice,SalesPrice,TierPrice,SKUActivationDate ,SKUExpirationDate ,
		 Custom1, Custom2, Custom3,CostPrice, RowNumber FROM '+@TableName;
		INSERT INTO #InsertPriceForValidation( SKU, TierStartQuantity, RetailPrice, SalesPrice, TierPrice, SKUActivationDate, SKUExpirationDate,
		 Custom1, Custom2, Custom3,CostPrice, RowNumber )
		EXEC sys.sp_sqlexec @SSQL;

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '2', 'TierPrice', TierPrice, @NewGUId, RowNumber , @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				FROM #InsertPriceForValidation
				WHERE (isnumeric(TierPrice)=0  
				or exists(select * from ZnodeCulture where Symbol is not null and TierPrice like '%'+Symbol+'%')) and ISNULL(TierPrice,'')<>''
		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '2', 'SalesPrice', SalesPrice, @NewGUId, RowNumber , @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				FROM #InsertPriceForValidation
				WHERE (isnumeric(SalesPrice)=0	or exists(select * from ZnodeCulture where Symbol is not null and SalesPrice like '%'+Symbol+'%'))
				and ISNULL(SalesPrice,'')<>''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '2', 'RetailPrice', RetailPrice, @NewGUId, RowNumber , @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				FROM #InsertPriceForValidation
				WHERE (isnumeric(RetailPrice)=0 or exists(select * from ZnodeCulture where Symbol is not null and RetailPrice like '%'+Symbol+'%')) and ISNULL(RetailPrice,'')<>''
		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '2', 'CostPrice', CostPrice, @NewGUId, RowNumber , @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				FROM #InsertPriceForValidation
				WHERE (isnumeric(CostPrice)=0	or exists(select * from ZnodeCulture where Symbol is not null and CostPrice like '%'+Symbol+'%'))
				and ISNULL(CostPrice,'')<>''
		
		UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ SKU - ' + ISNULL(SKU,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN #InsertPriceForValidation IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL
			   			  	
	    --- Delete Invalid Data after functional validation 
		DELETE FROM #InsertPriceForValidation
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId AND 
				  Guid = @NewGUId
		);
		-- 1)  Validation for SKU is pending Proper data not found and 
		--Discussion still open for Publish version where we create SKU and use the SKU code for validation 
		--Select * from ZnodePimAttributeValue  where PimAttributeId =248
		--select * from View_ZnodePimAttributeValue Vzpa Inner join ZnodePimAttribute Zpa on Vzpa.PimAttributeId=Zpa.PimAttributeId where Zpa.AttributeCode = 'SKU'
		--Select * from ZnodePimAttribute where AttributeCode = 'SKU'
		--------------------------------------------------------------------------------------
		--2)  Start Data Type Validation for XML Data  
		--------------------------------------------------------------------------------------			
		---------------------------------------------------------------------------------------
		---------If UOM will blank then retrive top -- Finctionality pending 
		---Validate 
		
		INSERT INTO #InsertPrice( SKU, TierStartQuantity, RetailPrice, SalesPrice, TierPrice, SKUActivationDate, SKUExpirationDate,
		 Custom1, Custom2, Custom3,CostPrice, RowNumber )
			   SELECT SKU,
					  CASE
					  WHEN CONVERT(Varchar(100),TierStartQuantity) = '' THEN 0
					  ELSE CONVERT(numeric(28, 6), TierStartQuantity)
					  END, CONVERT(numeric(28, 6), RetailPrice),
															  CASE
															  WHEN SalesPrice = '' THEN NULL
															  ELSE CONVERT(numeric(28, 6), SalesPrice)
															  END,
															  CASE
															  WHEN TierPrice = '' THEN NULL
															  ELSE CONVERT(numeric(28, 6), TierPrice)
															  END, SKUActivationDate, SKUExpirationDate,
															   Custom1, Custom2, Custom3,
															   CASE
															  WHEN CostPrice = '' THEN NULL
															  ELSE CONVERT(numeric(28, 6), CostPrice)
															  END, RowNumber
			   FROM #InsertPriceForValidation;
			 
		--------------------------------------------------------------------------------------
		--- start Functional Validation 
		--------------------------------------------------------------------------------------
		--- Verify SKU is present or not 

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '19', 'SKU', SKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		FROM #InsertPrice AS ii
		WHERE ii.SKU NOT IN
		(
			SELECT SKU
			FROM @SKU
		);

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '39', 'SKUActivationDate', SKUActivationDate, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertPrice AS IP
			   WHERE SKUActivationDate > SKUExpirationDate AND 
					 ISNULL(SKUExpirationDate, '') <> '';
					 
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '35', 'TierStartQuantity', TierStartQuantity, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertPriceForValidation
			   WHERE( TierPrice IS NULL OR TierPrice = '0') AND  TierStartQuantity  = '';
			  
			  
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '35', 'TierPrice', TierPrice, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertPriceForValidation WHERE( TierPrice IS NULL OR  TierPrice = '') AND TierStartQuantity  <> 0;

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '26', 'TierStartQuantity', TierStartQuantity, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertPriceForValidation IPV
			   WHERE TierStartQuantity = ''  
				AND	( TierPrice <> ''  OR TierPrice IS NULL ) 

			  
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '26', 'TierStartQuantity', TierStartQuantity, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertPriceForValidation IPV
			   WHERE TierStartQuantity <> '' AND 
			    ISNULL(CAST(TierStartQuantity AS numeric(28, 6)), 0) <= 0 
				AND	( TierPrice <> ''  OR TierPrice IS NULL ) 
		
		
				  
		UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ SKU - ' + ISNULL(SKU,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN #InsertPrice IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL

			 
 	
		-- End Function Validation 	
		---------------------------
		--- Delete Invalid Data after functional validation 
		DELETE FROM #InsertPrice
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId AND 
				  Guid = @NewGUId
		);
	
		-- Remove duplicate records 
		--insert into @RemoveDuplicateInsertPrice
		--(SKU,TierStartQuantity, RetailPrice , SalesPrice , TierPrice , Uom , UnitSize , PriceListCode , PriceListName , CurrencyId , ActivationDate , ExpirationDate 
		--, SKUActivationDate , SKUExpirationDate , RowNumber )
		--Select SKU,TierStartQuantity, RetailPrice , SalesPrice , TierPrice , Uom , UnitSize , PriceListCode , PriceListName , CurrencyId , ActivationDate , ExpirationDate 
		--, SKUActivationDate , SKUExpirationDate , RowNumber FROM @InsertPrice 
		
		--Delete from @InsertPrice 

		--insert into @InsertPrice (SKU,TierStartQuantity, RetailPrice , SalesPrice , TierPrice , Uom , UnitSize , PriceListCode , PriceListName , CurrencyId , ActivationDate , ExpirationDate 
		--, SKUActivationDate , SKUExpirationDate , RowNumber)
		--Select SKU,TierStartQuantity, RetailPrice , SalesPrice , TierPrice , Uom , UnitSize , PriceListCode , PriceListName , CurrencyId , ActivationDate , ExpirationDate 
		--, SKUActivationDate , SKUExpirationDate , RowNumber from @RemoveDuplicateInsertPrice rdip WHERE rdip.RowNumber IN
		--(
		--	SELECT MAX(ipi.RowNumber) FROM @InsertPrice ipi WHERE rdip.PriceListCode = ipi.PriceListCode AND rdip.SKU = ipi.SKU
		--);

		--Validate StartQuantity and EndQuantity from PriceTier : This validation only for existing data 
		--INSERT INTO @ErrorLogForInsertPrice (RowNumber,SKU,TierStartQuantity ,RetailPrice ,SalesPrice,TierPrice,Uom ,UnitSize,PriceListCode,PriceListName,CurrencyId ,ActivationDate,ExpirationDate,SKUActivationDate,SKUExpirationDate,SequenceNumber,ErrorDescription) 
		--Select IP.RowNumber,IP.SKU,IP.TierStartQuantity ,IP.RetailPrice ,IP.SalesPrice,IP.TierPrice,IP.Uom ,IP.UnitSize,IP.PriceListCode,IP.PriceListName,IP.CurrencyId ,IP.ActivationDate,IP.ExpirationDate,IP.SKUActivationDate,IP.SKUExpirationDate,IP.SequenceNumber,
		--'TierStartQuantity already exists in PriceTier table for SKU '
		--From @InsertPrice IP  Inner join
		--ZnodePriceList Zpl ON Zpl.Listcode = IP.PriceListcode and Zpl.ListName = IP.PriceListName
		--INNER JOIN ZnodeUOM Zu ON ltrim(rtrim(IP.Uom)) = ltrim(rtrim(Zu.Uom)) 
		--INNER JOIN ZnodePriceTier ZPT  ON ZPT.PriceListId = Zpl.PriceListId 
		--AND ZPT.SKU = IP.SKU
		--Where IP.TierStartQuantity  = ZPT.Quantity  
		--- Delete Invalid Data after  Validate StartQuantity and EndQuantity from PriceTier
		
		--INSERT INTO ZnodeUOM (Uom,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		--Select distinct ltrim(rtrim(Uom)) , @UserId,@GetDate,@UserId,@GetDate  from @InsertPrice 
		--where ltrim(rtrim(Uom)) not in (Select ltrim(rtrim(UOM)) From ZnodeUOM where UOM  is not null )
		
		DECLARE @FailedRecordCount BIGINT, @SuccessRecordCount BIGINT 
	
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;

		SELECT @SuccessRecordCount = COUNT(DISTINCT ROWNUMBER) FROM #InsertPrice WHERE 	ROWNUMBER IS NOT NULL ;

		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount,
		TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
		WHERE ImportProcessLogId = @ImportProcessLogId;

		UPDATE ZP
				SET ZP.SalesPrice = IP.SalesPrice, ZP.RetailPrice = CASE
				WHEN CONVERT(varchar(100), ISNULL(IP.RetailPrice, '')) <> '' THEN IP.RetailPrice
				END, ZP.ActivationDate = CASE
				WHEN ISNULL(IP.SKUActivationDate, '') <> '' THEN IP.SKUActivationDate
				ELSE NULL
				END, ZP.ExpirationDate = CASE
				WHEN ISNULL(IP.SKUExpirationDate, '') <> '' THEN IP.SKUExpirationDate
				ELSE NULL
				END, ZP.ModifiedBy = @UserId, ZP.ModifiedDate = @GetDate,
				ZP.CostPrice =IP.CostPrice
		FROM #InsertPrice IP INNER JOIN ZnodePrice ZP ON ZP.PriceListId = @PriceListId AND  ZP.SKU = IP.SKU  
			 --Retrive last record from price list of specific SKU ListCode and Name 									
		WHERE IP.RowNumber IN
		(
			SELECT MAX(IPI.RowNumber) FROM #InsertPrice AS IPI WHERE IPI.SKU = IP.SKU 
		);
		INSERT INTO ZnodePrice( PriceListId, SKU, SalesPrice, RetailPrice, ActivationDate, ExpirationDate, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate,CostPrice )
			   SELECT @PriceListId, IP.SKU, IP.SalesPrice, IP.RetailPrice,
																						   CASE
																						   WHEN ISNULL(IP.SKUActivationDate, '') = '' THEN NULL
																						   ELSE IP.SKUActivationDate
																						   END,
																						   CASE
																						   WHEN ISNULL(IP.SKUExpirationDate, '') = '' THEN NULL
																						   ELSE IP.SKUExpirationDate
																						   END, @UserId, @GetDate, @UserId, @GetDate,IP.CostPrice
			   FROM #InsertPrice AS IP
			   WHERE NOT EXISTS
			   (
				   SELECT TOP 1 1
				   FROM ZnodePrice
				   WHERE ZnodePrice.PriceListId = @PriceListId AND 
						 ZnodePrice.SKU = IP.SKU 
			   ) AND 
					 IP.RowNumber IN
			   (
					SELECT MAX(IPI.RowNumber)
					FROM #InsertPrice AS IPI
					WHERE IPI.SKU = IP.SKU 
			   );

			 

		IF EXISTS
		(
			SELECT TOP 1 1
			FROM #InsertPrice
			WHERE CONVERT(varchar(100), TierStartQuantity) <> '' AND 
				  (CONVERT(varchar(100), TierPrice) <> '' OR CONVERT (varchar(100), TierPrice) IS NOT NULL)
		)
		BEGIN
		
			UPDATE ZPT
			  SET ZPT.Price = IP.TierPrice, ZPT.ModifiedBy = @UserId, ZPT.ModifiedDate = @GetDate,
			  ZPT.Custom1 = IP.Custom1,ZPT.Custom2 = IP.Custom2, ZPT.Custom3 = IP.Custom3 
			FROM #InsertPrice IP INNER JOIN ZnodePriceTier ZPT ON ZPT.PriceListId = @PriceListId AND  ZPT.SKU = IP.SKU AND ZPT.Quantity = IP.TierStartQuantity 
		    --Retrive last record from price list of specific SKU ListCode and Name 
			WHERE IP.RowNumber IN
			(
				SELECT MAX(IPI.RowNumber) FROM #InsertPrice AS IPI WHERE IPI.SKU = IP.SKU AND IPI.TierStartQuantity = IP.TierStartQuantity 
			);

			INSERT INTO ZnodePriceTier( PriceListId, SKU, Price, Quantity, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, Custom1, Custom2, Custom3 )
				   SELECT @PriceListId, IP.SKU, IP.TierPrice, IP.TierStartQuantity,  @UserId, @GetDate, @UserId, @GetDate, Custom1, Custom2, Custom3
				   FROM #InsertPrice AS IP 
				   WHERE NOT EXISTS
				   (
					   SELECT TOP 1 1 FROM ZnodePriceTier WHERE ZnodePriceTier.PriceListId = @PriceListId AND  ZnodePriceTier.SKU = IP.SKU AND 
							 ZnodePriceTier.Quantity = IP.TierStartQuantity
				   ) AND  IP.RowNumber IN
				   (
					   SELECT MAX(IPI.RowNumber) FROM #InsertPrice AS IPI WHERE IPI.SKU = IP.SKU AND  IPI.TierStartQuantity = IP.TierStartQuantity
				   );
		END;  

		SET @Status = 1;
		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = GETDATE()
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- COMMIT TRAN ImportProducts;
		COMMIT TRAN A;
	END TRY
	BEGIN CATCH
		
		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN A;
	END CATCH;
END;
go
IF exists(select * from sys.procedures where name = 'Znode_GetPublishSingleCategoryJson')
	drop proc Znode_GetPublishSingleCategoryJson
go
CREATE PROCEDURE [dbo].[Znode_GetPublishSingleCategoryJson]
(   @PimCategoryId    INT, 
    @UserId           INT,
    @Status           int = 0 OUT,
	@IsDebug          BIT = 0,
	--@LocaleIds		  TransferId READONLY,
	@PimCatalogId     INT = 0, 
	@RevisionType varchar(50)= '',
	@IsAssociate      int = 0 Out 
)
AS 
/*
       Summary:Publish category with their respective products and details 
	            The result is fetched in xml form   
       Unit Testing   
	            During Catalog Publish Publish status should be updated 
				   
       Begin transaction 
       SELECT * FROM ZnodePIMAttribute 
	   SELECT * FROM ZnodePublishCatalog 
	   SELECT * FROM ZnodePublishCategory WHERE publishCAtegoryID = 167 

       EXEC [Znode_GetPublishSingleCategory] @PimCategoryId= 27 ,@UserId =2 ,@IsDebug = 1 
       Rollback Transaction 
	*/
     BEGIN
         
         BEGIN TRY
             SET NOCOUNT ON;
			 BEGIN TRAN GetPublishCategory
			 DECLARE @PublishCatalogLogId int , @PublishCataLogId int , @VersionId  int --,@PimCatalogId int 
			 
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @LocaleId INT= 0, @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId(), @Counter INT= 1, @MaxId INT= 0, @CategoryIdCount INT;
             DECLARE @IsActive BIT= [dbo].[Fn_GetIsActiveTrue]();
             DECLARE @AttributeIds VARCHAR(MAX)= '', @PimCategoryIds VARCHAR(MAX)= '', @DeletedPublishCategoryIds VARCHAR(MAX)= '', @DeletedPublishProductIds VARCHAR(MAX);
			 DECLARE @TBL_PublishCatalogId TABLE(PublishCatalogId INT,PimCatalogId  INT , VersionId INT )
			 
			 INSERT INTO @TBL_PublishCatalogId  (PublishCatalogId,PimCatalogId,VersionId ) 
			 SELECT ZPCL.PublishCatalogId, ZPCL.PimCatalogId,ZPCL.PublishCatalogLogId
			 FROM ZnodePimCategoryHierarchy ZPCH 
			 INNER JOIN ZnodePublishCatalogLog  ZPCL  ON ZPCH.PimCatalogId = ZPCL.PimCatalogId and ZPCH.PimCategoryId = @PimCategoryId 
			 where  PublishCatalogLogId in (Select MAX (PublishCatalogLogId) from ZnodePublishCatalogLog ZPCL where 
			 ZPCH.PimCatalogId = ZPCL.PimCatalogId)
			 AND ZPCL.PimCatalogId = CASE WHEN @PimCatalogId <> 0 THEN @PimCatalogId ELSE ZPCL.PimCatalogId END

			 IF (NOT EXISTS (Select TOP 1 1 from @TBL_PublishCatalogId) 
			 OR NOT EXISTS (select TOP 1 1  from ZnodePimCategoryProduct ZPCP inner join ZnodePimCategoryHierarchy ZPCH ON ZPCP.PimCategoryId = ZPCH.PimCategoryId where ZPCP.PimCategoryId = @PimCategoryId  ))
			 AND NOT Exists(select * from ZnodePimCategoryHierarchy where PimCategoryId = @PimCategoryId  ) 
			 Begin
				Commit tran GetPublishCategory;
				SET @Status = 1  -- Category not associated or catalog not publish
				SET @IsAssociate   = 0 
				Return 0 ;
			 END 

             DECLARE @TBL_AttributeIds TABLE
             (PimAttributeId       INT,
              ParentPimAttributeId INT,
              AttributeTypeId      INT,
              AttributeCode        VARCHAR(600),
              IsRequired           BIT,
              IsLocalizable        BIT,
              IsFilterable         BIT,
              IsSystemDefined      BIT,
              IsConfigurable       BIT,
              IsPersonalizable     BIT,
              DisplayOrder         INT,
              HelpDescription      VARCHAR(MAX),
              IsCategory           BIT,
              IsHidden             BIT,
              CreatedDate          DATETIME,
              ModifiedDate         DATETIME,
              AttributeName        NVARCHAR(MAX),
              AttributeTypeName    VARCHAR(300)
             );
             DECLARE @TBL_AttributeDefault TABLE
             (
				  PimAttributeId            INT,
				  AttributeDefaultValueCode VARCHAR(100),
				  IsEditable                BIT,
				  AttributeDefaultValue     NVARCHAR(MAX),
				  DisplayOrder   INT
             );
             DECLARE @TBL_AttributeValue TABLE
             (
				  PimCategoryAttributeValueId INT,
				  PimCategoryId               INT,
				  CategoryValue               NVARCHAR(MAX),
				  AttributeCode               VARCHAR(300),
				  PimAttributeId              INT
             );
             DECLARE @TBL_LocaleIds TABLE
             (
				  RowId     INT IDENTITY(1, 1),
				  LocaleId  INT,
				  IsDefault BIT
             );
			 DECLARE @TBL_CategoryXml TABLE
             (PublishCategoryId INT,
			  PublishCatalogId  INT,
              CategoryXml       XML,
              LocaleId          INT,
			  VersionId		    INT
             );

             DECLARE @TBL_PimCategoryIds TABLE
             (
				  PimCategoryId       INT,
				  PimParentCategoryId INT,
				  DisplayOrder        INT,
				  ActivationDate      DATETIME,
				  ExpirationDate      DATETIME,
				  CategoryName        NVARCHAR(MAX),
				  ProfileId           VARCHAR(MAX),
				  IsActive            BIT,
				  PimCategoryHierarchyId INT,
				  ParentPimCategoryHierarchyId INT,
				  PublishCatalogId INT,
				  PimCatalogId  INT,
				  VersionId INT  ,
				  CategoryCode  NVARCHAR(MAX)          
			 );
             DECLARE @TBL_PublishPimCategoryIds TABLE
             (PublishCategoryId       INT,
              PimCategoryId           INT,
              PublishProductId        varchar(max),
              PublishParentCategoryId INT ,
			  PimCategoryHierarchyId INT ,
			  parentPimCategoryHierarchyId INT,
			  RowIndex INT
             );
             DECLARE @TBL_DeletedPublishCategoryIds TABLE
             (PublishCategoryId INT,
              PublishProductId  INT
             );
            
             INSERT INTO @TBL_LocaleIds
             (LocaleId,
              IsDefault
             )
			  -- here collect all locale ids
            SELECT LocaleId,IsDefault FROM ZnodeLocale MT WHERE IsActive = @IsActive

             INSERT INTO @TBL_PimCategoryIds(PimCategoryId,PimParentCategoryId,DisplayOrder,ActivationDate,ExpirationDate,IsActive,PimCategoryHierarchyId,ParentPimCategoryHierarchyId,
			 PublishCatalogId,PimCatalogId,VersionId)
			 SELECT DISTINCT ZPCH.PimCategoryId,ZPCH2.PimCategoryId  PimParentCategoryId,ZPCH.DisplayOrder,ZPCH.ActivationDate,ZPCH.ExpirationDate,ZPCH.IsActive ,ZPCH.PimCategoryHierarchyId,ZPCH.ParentPimCategoryHierarchyId,
			 PublishCatalogId,PCI.PimCatalogId,VersionId
			 FROM ZnodePimCategoryHierarchy AS ZPCH 
			 LEFT JOIN ZnodePimCategoryHierarchy AS ZPCH2 ON (ZPCH2.PimCategoryHierarchyId = ZPCH. ParentPimCategoryHierarchyId ) 
			 Inner join @TBL_PublishCatalogId PCI on ZPCH.PimCatalogId = PCI.PimCatalogId 
			 WHERE ZPCH.PimCategoryId = @PimCategoryId ; 

			 MERGE INTO ZnodePublishCategory TARGET USING 
			 ( Select PC.PimCategoryId,
					  PC.PimCategoryHierarchyId,
					  PC.PimParentCategoryId,
					  PC.ParentPimCategoryHierarchyId,
					  PC.PublishCatalogId
					  FROM @TBL_PimCategoryIds PC ) 
			 SOURCE ON
			 (
				 TARGET.PimCategoryId = SOURCE.PimCategoryId 
				 AND TARGET.PublishCatalogId = SOURCE.PublishCatalogId 
				 AND TARGET.PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId
			 )
			 WHEN MATCHED THEN UPDATE SET TARGET.PimParentCategoryId = SOURCE.PimParentCategoryId,TARGET.CreatedBy = @UserId,TARGET.CreatedDate = @GetDate,
				TARGET.ModifiedBy = @UserId,TARGET.ModifiedDate = @GetDate,
			 PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId,ParentPimCategoryHierarchyId=SOURCE.ParentPimCategoryHierarchyId
             
			 WHEN NOT MATCHED THEN 
			 INSERT(PimCategoryId,PublishCatalogId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
			 ,PimCategoryHierarchyId,ParentPimCategoryHierarchyId) 
			 VALUES(SOURCE.PimCategoryId,SOURCE.PublishCatalogId,@UserId,@GetDate,@UserId,@GetDate,SOURCE.PimCategoryHierarchyId
			 ,SOURCE.ParentPimCategoryHierarchyId)

				OUTPUT INSERTED.PublishCategoryId,INSERTED.PimCategoryId,INSERTED.PimCategoryHierarchyId,
			 INSERTED.parentPimCategoryHierarchyId 
			 INTO @TBL_PublishPimCategoryIds(PublishCategoryId,PimCategoryId,PimCategoryHierarchyId,parentPimCategoryHierarchyId);
			     	    
			 -- here update the publish parent category id
            UPDATE ZPC SET [PimParentCategoryId] =TBPC.[PimCategoryId] 
			FROM ZnodePublishCategory ZPC
            INNER JOIN ZnodePublishCategory TBPC ON(ZPC.parentPimCategoryHierarchyId = TBPC.PimCategoryHierarchyId  ) 
			WHERE ZPC.PublishCatalogId = TBPC.PublishCatalogId 
			AND TBPC.PublishCatalogId  in (Select PublishCatalogId from @TBL_PublishCatalogId)
			AND ZPC.ParentPimCategoryHierarchyId IS NOT NULL AND 
			ZPC.PimCategoryId = @PimCategoryId  ;

			UPDATE a
			SET  a.PublishParentCategoryId = b.PublishCategoryId
			FROM ZnodePublishCategory a 
			INNER JOIN ZnodePublishCategory b   ON (a.parentpimCategoryHierarchyId = b.pimCategoryHierarchyId)
			WHERE a.parentpimCategoryHierarchyId IS NOT NULL 
			AND a.PublishCatalogId = b.PublishCatalogId AND b.PublishCatalogId in (Select PublishCatalogId from @TBL_PublishCatalogId)
			AND a.PimCategoryId = @PimCategoryId 

			 -- product are published here 
            --  EXEC Znode_GetPublishProducts @PublishCatalogId,0,@UserId,1,0,0;
			
		     SET @MaxId =(SELECT MAX(RowId)FROM @TBL_LocaleIds);
			 DECLARE @TransferID TRANSFERID 
			 INSERT INTO @TransferID 
			 SELECT DISTINCT  PimCategoryId	 FROM @TBL_PublishPimCategoryIds 

             SET @PimCategoryIds = SUBSTRING((SELECT ','+CAST(PimCategoryId AS VARCHAR(50)) FROM @TBL_PublishPimCategoryIds FOR XML PATH('')), 2, 4000);
			 
             WHILE @Counter <= @MaxId -- Loop on Locale id 
                 BEGIN
                     SET @LocaleId =(SELECT LocaleId FROM @TBL_LocaleIds WHERE RowId = @Counter);
                   
				     SET @AttributeIds = SUBSTRING((SELECT ','+CAST(ZPCAV.PimAttributeId AS VARCHAR(50)) FROM ZnodePimCategoryAttributeValue ZPCAV 
										 WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimCategoryIds TBPC WHERE TBPC.PimCategoryId = ZPCAV.PimCategoryId) GROUP BY ZPCAV.PimAttributeId FOR XML PATH('')), 2, 4000);
                
				     SET @CategoryIdCount =(SELECT COUNT(1) FROM @TBL_PimCategoryIds);

                     INSERT INTO @TBL_AttributeIds (PimAttributeId,ParentPimAttributeId,AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable,IsSystemDefined,
					 IsConfigurable,IsPersonalizable,DisplayOrder,HelpDescription,IsCategory,IsHidden,CreatedDate,ModifiedDate,AttributeName,AttributeTypeName)
                     EXEC [Znode_GetPimAttributesDetails] @AttributeIds,@LocaleId;

                     INSERT INTO @TBL_AttributeDefault (PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder)
                     EXEC [dbo].[Znode_GetAttributeDefaultValueLocale] @AttributeIds,@LocaleId;

                     INSERT INTO @TBL_AttributeValue (PimCategoryAttributeValueId,PimCategoryId,CategoryValue,AttributeCode,PimAttributeId)
                     EXEC [dbo].[Znode_GetCategoryAttributeValueId] @TransferID,@AttributeIds,@LocaleId;

					 
			

                     ;WITH Cte_UpdateDefaultAttributeValue
                     AS (
					  SELECT TBAV.PimCategoryId,TBAV.PimAttributeId,SUBSTRING((SELECT ','+AttributeDefaultValue FROM @TBL_AttributeDefault TBD WHERE TBAV.PimAttributeId = TBD.PimAttributeId
						AND EXISTS(SELECT TOP 1 1 FROM Split(TBAV.CategoryValue, ',') SP WHERE SP.Item = TBD.AttributeDefaultValueCode)FOR XML PATH('')), 2, 4000) DefaultCategoryAttributeValue
						FROM @TBL_AttributeValue TBAV WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_AttributeDefault TBAD WHERE TBAD.PimAttributeId = TBAV.PimAttributeId))
					 
					 -- update the default value with locale 
                     UPDATE TBAV SET CategoryValue = CTUDFAV.DefaultCategoryAttributeValue FROM @TBL_AttributeValue TBAV 
					 INNER JOIN Cte_UpdateDefaultAttributeValue CTUDFAV ON(CTUDFAV.PimCategoryId = TBAV.PimCategoryId AND CTUDFAV.PimAttributeId = TBAV.PimAttributeId)
					 WHERE CategoryValue IS NULL ;
					 
					 -- here is update the media path  
						WITH Cte_productMedia
						AS (
							SELECT TBA.PimCategoryId,TBA.PimAttributeId,
							Isnull(
							(STUFF((SELECT ','+zm.PATH FROM ZnodeMedia ZM WHERE EXISTS
							(SELECT TOP 1 1 FROM dbo.split(TBA.CategoryValue, ',') SP
							WHERE SP.Item = CAST(Zm.MediaId AS VARCHAR(50)))FOR XML PATH(''),Type).value('.', 'varchar(max)'), 1, 1,'')) ,'no-image.png')
							CategoryValue
							FROM @TBL_AttributeValue TBA WHERE EXISTS(SELECT TOP 1 1 FROM [dbo].[Fn_GetProductMediaAttributeId]() FNMA WHERE FNMA.PImAttributeId = TBA.PimATtributeId)
						)


					 UPDATE TBAV SET CategoryValue = CTCM.CategoryValue 
					 FROM @TBL_AttributeValue TBAV 
					 INNER JOIN Cte_productMedia CTCM ON(CTCM.PimCategoryId = TBAV.PimCategoryId
					 AND CTCM.PimAttributeId = TBAV.PimAttributeId);

                     WITH Cte_PublishProductIds
					 AS (SELECT TBPC.PublishcategoryId,SUBSTRING((SELECT ','+CAST(PublishProductId AS VARCHAR(50))
					  FROM ZnodePublishCategoryProduct ZPCP 
					  WHERE ZPCP.PublishCategoryId = TBPC.publishCategoryId
					  AND ZPCP.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId
                      AND ZPCP.PublishCatalogId in (Select PublishCatalogId from @TBL_PublishCatalogId)
					   FOR XML PATH('')), 2, 8000) PublishProductId ,PimCategoryHierarchyId
					  FROM @TBL_PublishPimCategoryIds TBPC)
                          
					 UPDATE TBPPC SET PublishProductId = CTPP.PublishProductId FROM @TBL_PublishPimCategoryIds TBPPC INNER JOIN Cte_PublishProductIds CTPP ON(TBPPC.PublishCategoryId = CTPP.PublishCategoryId 
					 AND TBPPC.PimCategoryHierarchyId = CTPP.PimCategoryHierarchyId);

                     WITH Cte_CategoryProfile
                     AS (
							SELECT PimCategoryId,ZPCC.PimCategoryHierarchyId,
									SUBSTRING(( SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
									FROM ZnodeProfile ZPC 
									INNER JOIN ZnodePimCategoryHierarchy ZPRCC ON(ZPRCC.PimCategoryHierarchyId = ZPCC.PimCategoryHierarchyId
									AND ZPRCC.PimCatalogId = ZPC.PimCatalogId) 
									WHERE ZPC.PimCatalogId = ZPCC.PimCatalogId FOR XML PATH('')), 2, 4000) ProfileIds
						   FROM ZnodePimCategoryHierarchy ZPCC 
						   WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimCategoryIds TBPC 
						   WHERE TBPC.PimCategoryId = ZPCC.PimCategoryId AND ZPCC.PimCatalogId in (Select PimCatalogId from @TBL_PublishCatalogId)
						   AND ZPCC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId)
					   )                          
				      UPDATE TBPC SET TBPC.ProfileId = CTCP.ProfileIds 
					  FROM @TBL_PimCategoryIds TBPC 
					  LEFT JOIN Cte_CategoryProfile CTCP ON(CTCP.PimCategoryId = TBPC.PimCategoryId AND CTCP.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId );
               
					 UPDATE TBPC SET TBPC.CategoryName = TBAV.CategoryValue FROM @TBL_PimCategoryIds TBPC INNER JOIN @TBL_AttributeValue TBAV ON(TBAV.PimCategoryId = TBPC.PimCategoryId
                     AND EXISTS(SELECT TOP 1 1 FROM [dbo].[Fn_GetCategoryNameAttribute]() FNGCNA WHERE FNGCNA.PimAttributeId = TBAV.PimAttributeId))


					 UPDATE TBPC SET TBPC.CategoryCode = TBAV.CategoryValue FROM @TBL_PimCategoryIds TBPC INNER JOIN @TBL_AttributeValue TBAV ON(TBAV.PimCategoryId = TBPC.PimCategoryId
					 AND EXISTS(SELECT TOP 1 1 FROM dbo.Fn_GetCategoryCodeAttribute() FNGCNA WHERE FNGCNA.PimAttributeId = TBAV.PimAttributeId)
					 )

					 -- here update the publish category details 
                     ;WITH Cte_UpdateCategoryDetails
                     AS (
					 SELECT TBC.PimCategoryId,PublishCategoryId,CategoryName, TBPPC.PimCategoryHierarchyId,CategoryCode
					 FROM @TBL_PimCategoryIds TBC
                     INNER JOIN @TBL_PublishPimCategoryIds TBPPC ON(TBC.PimCategoryId = TBPPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPPC.PimCategoryHierarchyId)
					 )						
                     MERGE INTO ZnodePublishCategoryDetail TARGET USING Cte_UpdateCategoryDetails SOURCE ON(TARGET.PublishCategoryId = SOURCE.PublishCategoryId
					 AND TARGET.LocaleId = @LocaleId)
                     WHEN MATCHED THEN UPDATE SET PublishCategoryId = SOURCE.PublishcategoryId,PublishCategoryName = SOURCE.CategoryName,LocaleId = @LocaleId,ModifiedBy = @userId,ModifiedDate = @GetDate,CategoryCode= SOURCE.CategoryCode
                     WHEN NOT MATCHED THEN INSERT(PublishCategoryId,PublishCategoryName,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,CategoryCode) VALUES
                     (SOURCE.PublishCategoryId,SOURCE.CategoryName,@LocaleId,@userId,@GetDate,@userId,@GetDate,CategoryCode);


					DECLARE @UpdateCategoryLog  TABLE (PublishCatalogLogId INT , LocaleId INT ,PublishCatalogId INT  )
					INSERT INTO @UpdateCategoryLog
					SELECT MAX(PublishCatalogLogId) PublishCatalogLogId , LocaleId , PublishCatalogId 
					FROM ZnodePublishCatalogLog a 
					WHERE a.PublishCatalogId =@PublishCatalogId
					AND  a.LocaleId = @LocaleId 
					GROUP BY 	LocaleId,PublishCatalogId  

					-----------------------------------------------------------------
					IF OBJECT_ID('tempdb..#Index') is not null
					BEGIN 
						DROP TABLE #Index
					END 
					CREATE TABLE #Index (RowIndex int ,PimCategoryId int , PimCategoryHierarchyId  int,ParentPimCategoryHierarchyId int )		
					insert into  #Index ( RowIndex ,PimCategoryId , PimCategoryHierarchyId,ParentPimCategoryHierarchyId)
					SELECT CAST(Row_number() OVER (Partition By TBL.PimCategoryId Order by ISNULL(TBL.PimCategoryId,0) desc) AS VARCHAR(100))
					,ZPC.PimCategoryId, ZPC.PimCategoryHierarchyId, ZPC.ParentPimCategoryHierarchyId
					FROM @TBL_PublishPimCategoryIds TBL
					INNER JOIN ZnodePublishCategory ZPC ON (TBL.PimCategoryId = ZPC.PimCategoryId AND TBL.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId)
					WHERE ZPC.PublishCatalogId = @PublishCatalogId

					UPDATE TBP SET  TBP.[RowIndex]=  IDX.RowIndex 
					FROM @TBL_PublishPimCategoryIds TBP INNER JOIN #Index IDX ON (IDX.PimCategoryId = TBP.PimCategoryId AND IDX.PimCategoryHierarchyId = TBP.PimCategoryHierarchyId)  

					------------------------------------------------------------------
					If (@RevisionType like '%Preview%'  OR @RevisionType like '%Production%'  ) 
						Delete from ZnodePublishCategoryEntity Where ZnodeCategoryId in 
						(Select PublishCategoryId from @TBL_PublishPimCategoryIds) AND LocaleId = @LocaleId
						AND VersionId in (SELECT VersionId FROM ZnodePublishVersionEntity where RevisionType = 'PREVIEW')
					If (@RevisionType like '%Production%' OR @RevisionType = 'None')
						Delete from ZnodePublishCategoryEntity Where ZnodeCategoryId in 
						(Select PublishCategoryId from @TBL_PublishPimCategoryIds) AND LocaleId = @LocaleId
						AND VersionId in (SELECT VersionId FROM ZnodePublishVersionEntity where RevisionType = 'PRODUCTION')
				

					INSERT INTO ZnodePublishCategoryEntity
					(
						 VersionId,ZnodeCategoryId,
						 Name,CategoryCode,
						 ZnodeCatalogId,CatalogName,ZnodeParentCategoryIds,
						 ProductIds,LocaleId,IsActive,DisplayOrder,
						 Attributes,
						 ActivationDate,ExpirationDate,CategoryIndex
					)
					OUTPUT INSERTED.ZnodeCategoryId,INSERTED.ZnodeCatalogId, INSERTED.LocaleId  , Inserted.VersionId
					INTO  @TBL_CategoryXml (PublishCategoryId,PublishCatalogId,localeId,VersionId) 
					SELECT ISNULL(TYU.VersionId,'') VersionId,TBPC.PublishCategoryId ZnodeCategoryId,
						   ISNULL(CategoryName, '') Name,ISNULL(CategoryCode,'') CategoryCode,
						   ZPC.PublishCatalogId, ZPC.CatalogName ,
						   Isnull('[' + THR.PublishParentCategoryId + ']',NULL) TempZnodeParentCategoryIds,
						   ISNULL('[' + TBPC.PublishProductId + ']', NULL)  TempProductIds,
						   @LocaleId LocaleId,TBC.IsActive,ISNULL(DisplayOrder, '0') DisplayOrder,
						      ISNULL(
									(
										SELECT TBA.AttributeCode,TBA.AttributeName,ISNULL(IsUseInSearch, 0) IsUseInSearch,
										ISNULL(IsHtmlTags, 0) IsHtmlTags,ISNULL(IsComparable, 0) IsComparable,
										TBAV.CategoryValue AttributeValues,TBA.AttributeTypeName 
										FROM @TBL_AttributeValue TBAV
										INNER JOIN @TBL_AttributeIds TBA ON(TBAV.PimAttributeId = TBA.PimAttributeId) 
										LEFT JOIN ZnodePimFrontendProperties ZPFP ON(ZPFP.PimAttributeId = TBA.PimAttributeId)
										WHERE TBC.PimCategoryId = TBAV.PimCategoryId  
										FOR JSON PATH) 
									, '[]')  ,
							ActivationDate,ExpirationDate,ISNULL(TBPC.RowIndex,1) CategoryIndex
						   --,ProfileId TempProfileIds

						FROM @TBL_PublishPimCategoryIds TBPC 
						INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId in  (Select PublishCatalogId from @TBL_PublishCatalogId))
						INNER JOIN ZnodePublishCategory THR ON (THR.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId AND THR.PimCategoryId = TBPC.PimCategoryId AND THR.PublishCatalogId =ZPC.PublishCatalogId  )
						LEFT JOIN @UpdateCategoryLog TY ON ( TY.PublishCatalogId IN (Select PublishCatalogId from @TBL_PublishCatalogId) AND TY.localeId = @LocaleId  )
						INNER JOIN @TBL_PimCategoryIds TBC ON(TBC.PimCategoryId = TBPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId) 
						INNER JOIN ZnodePublishVersionEntity TYU ON (TYU.ZnodeCatalogId  = ZPC.PublishCatalogId AND TYU.IsPublishSuccess =1 AND TYU.LocaleId = @LocaleId )
						where 
						(	
							(TYU.RevisionType =  Case when  (@RevisionType like '%Preview%'  OR @RevisionType like '%Production%' ) then 'Preview' End ) 
							OR 
							(TYU.RevisionType =  Case when (@RevisionType like '%Production%' OR @RevisionType = 'None') then  'Production'  end )
						)


				     DELETE FROM @TBL_AttributeIds;
                     DELETE FROM @TBL_AttributeDefault;
                     DELETE FROM @TBL_AttributeValue;
                     SET @Counter = @Counter + 1;
                 END;
	

			Select PublishCategoryId ,VersionId	, 0 PimCatalogId, LocaleId,PublishCatalogId, '404test' SeoUrl
			into #OutPublish from @TBL_CategoryXml 

			Alter TABLE #OutPublish ADD Id int Identity 
			SET @MaxId =(SELECT COUNT(*) FROM #OutPublish);
			 --SET @PimCategoryIds = SUBSTRING((SELECT ','+CAST(PimCategoryId AS VARCHAR(50)) FROM @TBL_PublishPimCategoryIds FOR XML PATH('')), 2, 4000);
			Declare @ExistingPublishCategoryId  nvarchar(max), @PublishCategoryId  int 
			SET @Counter =1 
            WHILE @Counter <= @MaxId -- Loop on Locale id 
            BEGIN
				SELECT @VersionId = VersionId  ,
				@PublishCategoryId = PublishCategoryId 
				from #OutPublish where ID = @Counter

		----Single category publish. Category count update for verison for specific catalog
		if Exists (select count(1) from @TBL_PublishPimCategoryIds)
	    begin
			UPDATE ZnodePublishCatalogLog 
				SET PublishCategoryId = (select count(distinct a.PimCategoryId)
				from ZnodePublishCategory a 
				inner join ZnodePublishCatalog c on a.PublishCatalogId = c.PublishCatalogId
				inner join ZnodePimCategoryProduct b on  a.PimCategoryId = b.PimCategoryId 
				inner join ZnodePimCategoryHierarchy ZPCH ON b.PimCategoryId = ZPCH.PimCategoryId and c.PimCatalogId = ZPCH.PimCatalogId
				where a.PublishCatalogId = ZnodePublishCatalogLog.PublishCatalogId)
				,ModifiedDate = @GetDate
			FROM ZnodePublishCatalogLog
			WHERE ZnodePublishCatalogLog.PublishCatalogLogId = @VersionId 
			AND exists(select * from ZnodePublishCatalog ZPC where ZnodePublishCatalogLog.PublishCatalogId = ZPC.PublishCatalogId and ZPC.PimCatalogId = @PimCatalogId )
		end

		----Single category publish. Category count update in all associated catalog 
		if isnull(@PimCatalogId,0)=0 and isnull(@PimcategoryId,0)<>0
		begin
			if object_Id('tempdb..#temp_CatalogCategory') is not null
				drop table #temp_CatalogCategory

			select max(c.PublishCatalogLogId) PublishCatalogLogId, C.PublishCatalogId
			into #temp_CatalogCategory
			from ZnodePimCategoryProduct a
			inner join ZnodePimCategoryHierarchy ZPCH ON a.PimCategoryId = ZPCH.PimCategoryId
			inner join ZnodePublishCatalog b on ZPCH.PimCatalogId = b.PimCatalogId
			inner join ZnodePublishCatalogLog c on b.PublishCatalogId = c.PublishCatalogId
			where a.PimCategoryId = @PimcategoryId
			group by C.PublishCatalogId

		   UPDATE ZPCC 
				SET PublishCategoryId = (select count(distinct a.PimCategoryId)
				from ZnodePublishCategory a 
				inner join ZnodePublishCatalog c on a.PublishCatalogId = c.PublishCatalogId
				inner join ZnodePimCategoryProduct b on  a.PimCategoryId = b.PimCategoryId 
				inner join ZnodePimCategoryHierarchy ZPCH ON b.PimCategoryId = ZPCH.PimCategoryId and c.PimCatalogId = ZPCH.PimCatalogId
				where a.PublishCatalogId = ZPCC.PublishCatalogId)
				,ModifiedDate = @GetDate
			FROM ZnodePublishCatalogLog ZPCC
			WHERE exists(select * from #temp_CatalogCategory CC where ZPCC.PublishCatalogLogId = CC.PublishCatalogLogId )
		end

				SET @Counter  = @Counter  + 1  
			END

			SET @Status = 1 

			If  @RevisionType = 'PREVIEW'
				UPDATE ZnodePimCategory	SET IsCategoryPublish = 1,PublishStateId =  DBO.Fn_GetPublishStateIdForPreview()  WHERE PimCategoryId = @PimCategoryId 
			else 
				UPDATE ZnodePimCategory	SET IsCategoryPublish = 1,PublishStateId =  DBO.Fn_GetPublishStateIdForPublish()  WHERE PimCategoryId = @PimCategoryId 


			if object_Id('tempdb..##PublishCategoryDetails') is not null
				drop table ##PublishCategoryDetails
			Select PublishCategoryId,VersionId,LocaleId,PublishCatalogId INTO ##PublishCategoryDetails  from @TBL_CategoryXml 
			SET @IsAssociate     = 1  
			Commit TRAN GetPublishCategory;

         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE();
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPublishSingleCategoryJson @PimCategoryId= '+CAST(@PimCategoryId AS VARCHAR(50))+',@PublishCatalogId = '+CAST(@PublishCatalogId AS VARCHAR(50))+',@UserId ='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(50));
             SET @Status = 0 -- Publish Falies 

             ROLLBACK TRAN GetPublishCategory;
			 	SET @IsAssociate     =   0
				 SELECT ERROR_MESSAGE();
			 EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_GetPublishSingleCategoryJson',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
go
IF exists(select * from sys.procedures where name = 'Znode_GetPublishSingleProductJson')
	drop proc Znode_GetPublishSingleProductJson
go
CREATE PROCEDURE [dbo].[Znode_GetPublishSingleProductJson]
(
	 @PublishCatalogId INT = 0 
	,@VersionId       VARCHAR(50) = 0 
	,@PimProductId    TransferId Readonly 
	,@UserId		  INT = 0 
	,@TokenId nvarchar(max)= ''	
	,@LocaleIds TransferId READONLY
	,@PublishStateId INT = 0  
	,@RevisionType varchar(50)
	,@Status bit = 0 OutPut
	
)
AS


--Declare @PimProductId TransferId 
--insert into @PimProductId  select 230147
-- EXEC Znode_GetPublishSingleProductJson  @PublishCatalogId = 0 ,@VersionId= 0 ,@PimProductId =@PimProductId, @UserId=2 ,@RevisionType ='Production'


BEGIN 
BEGIN TRY 
 SET NOCOUNT ON 

EXEC Znode_InsertUpdatePimAttributeJson 1 
EXEC Znode_InsertUpdateCustomeFieldJson 1
EXEC Znode_InsertUpdateAttributeDefaultValueJson 1 
				
Select ZPLPD.PimParentProductId, ZPLPD.PimProductId, ZPLPD.PimAttributeId, ZPAVL.AttributeValue as SKU
into #LinkProduct
FROM ZnodePimLinkProductDetail ZPLPD 
INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId = ZPLPD.PimProductId)
INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId
WHERE exists(select * from ZnodePimAttribute ZPA where ZPA.PimAttributeId = ZPAV.PimAttributeId and ZPA.AttributeCode = 'SKU')
and exists(select * from @PimProductId pp where ZPLPD.PimParentProductId = pp.Id)

select * into #PimProductId from @PimProductId

create index Idx_#PimProductId_Id on #PimProductId(Id)
 IF OBJECT_ID('tempdb..#Cte_BrandData') is not null
 BEGIN 
	DROP TABLE #Cte_BrandData
 END 
 

 IF OBJECT_ID('tempdb..#ProductIds') is not null
 BEGIN 
	DROP TABLE #ProductIds
 END 

			Create Table #ProductIds (PimProductId int, PublishProductId  int )
			
			--DECLARE @PimProductAttributeJson TABLE(PimAttributeJsonId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )
			CREATE TABLE #PimProductAttributeJson (PimAttributeJsonId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )
			DECLARE @PimDefaultValueLocale  TABLE (PimAttributeDefaultJsonId INT  PRIMARY KEY ,PimAttributeDefaultValueId INT ,LocaleId INT ) 
			DECLARE @ProductNamePimAttributeId INT = dbo.Fn_GetProductNameAttributeId(),@DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId(),@LocaleId INT = 0 
			,@SkuPimAttributeId  INT =  dbo.Fn_GetProductSKUAttributeId() , @IsActivePimAttributeId INT =  dbo.Fn_GetProductIsActiveAttributeId()
			DECLARE @GetDate DATETIME =dbo.Fn_GetDate()
			DECLARE @TBL_LocaleId  TABLE (RowId INT IDENTITY(1,1) PRIMARY KEY  , LocaleId INT )

			DECLARE @DomainUrl varchar(max) = (select TOp 1 URL FROM ZnodeMediaConfiguration WHERE IsActive =1)

			INSERT INTO @TBL_LocaleId (LocaleId)
			SELECT  LocaleId
			FROM ZnodeLocale MT
			WHERE IsActive = 1
			AND (EXISTS (SELECT TOP 1 1  FROM @LocaleIds RT WHERE RT.Id = MT.LocaleId )
			OR NOT EXISTS (SELECT TOP 1 1 FROM @LocaleIds )) 
	
			-----to update link products newly addded and deleted from PIM
			delete ZPAP
			from ZnodePublishAssociatedProduct ZPAP
			where ZPAP.IsLink = 1
			AND not exists(select * from ZnodePimLinkProductDetail ZPPD where ZPAP.ParentPimProductId = ZPPD.PimParentProductId AND ZPAP.PimProductId = ZPPD.PimProductId)
			and exists(select * from #PimProductId PP where PP.Id = ZPAP.ParentPimProductId )

			insert into ZnodePublishAssociatedProduct(PimCatalogId,ParentPimProductId,PimProductId,PublishStateId,IsConfigurable,IsBundle,IsGroup,IsAddOn,IsLink,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			select distinct ZPCH.PimCatalogId, ZPLPD.PimParentProductId, ZPLPD.PimProductId, @PublishStateId, 0, 0, 0, 0, 1, ZPLPD.DisplayOrder, @UserId,@GetDate ,@UserId , @GetDate
			from ZnodePimLinkProductDetail ZPLPD
			INNER JOIN ZnodePimCategoryProduct ZPCP ON ZPLPD.PimParentProductId = ZPCP.PimProductId
			INNER JOIN ZnodePimCategoryHierarchy ZPCH ON ZPCP.PimCategoryId = ZPCH.PimCategoryId
			where exists(select * from #PimProductId PP where PP.Id = ZPLPD.PimParentProductId )
			and not exists(select * from ZnodePublishAssociatedProduct ZPACP where ZPCH.PimCatalogId = ZPACP.PimCatalogId and ZPLPD.PimParentProductId = ZPACP.ParentPimProductId AND ZPLPD.PimProductId = ZPACP.PimProductId  )
		
			-----to update config products newly addded and deleted from PIM
			delete ZPAP
			from ZnodePublishAssociatedProduct ZPAP
			where ZPAP.IsConfigurable = 1
			AND exists(select * from ZnodePimProductTypeAssociation ZPPD where ZPAP.ParentPimProductId = ZPPD.PimParentProductId )
			and exists(select * from #PimProductId PP where PP.Id = ZPAP.ParentPimProductId )

			insert into ZnodePublishAssociatedProduct(PimCatalogId,ParentPimProductId,PimProductId,PublishStateId,IsConfigurable,IsBundle,IsGroup,IsAddOn,IsLink,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate, IsDefault)
			select distinct ZPCH.PimCatalogId, ZPLPD.PimParentProductId, ZPLPD.PimProductId, @PublishStateId, 1, 0, 0, 0, 0, ZPLPD.DisplayOrder, @UserId,@GetDate ,@UserId , @GetDate, ZPLPD.IsDefault
			from ZnodePimProductTypeAssociation ZPLPD
			INNER JOIN ZnodePimCategoryProduct ZPCP ON ZPLPD.PimParentProductId = ZPCP.PimProductId
			INNER JOIN ZnodePimCategoryHierarchy ZPCH ON ZPCP.PimCategoryId = ZPCH.PimCategoryId
			where exists(select * from #PimProductId PP where PP.Id = ZPLPD.PimParentProductId )
			and not exists(select * from ZnodePublishAssociatedProduct ZPACP where ZPCH.PimCatalogId = ZPACP.PimCatalogId and ZPLPD.PimParentProductId = ZPACP.ParentPimProductId AND ZPLPD.PimProductId = ZPACP.PimProductId  )
			--group by ZPCH.PimCatalogId, ZPLPD.PimParentProductId, ZPLPD.PimProductId, ZPLPD.DisplayOrder, ZPLPD.IsDefault
			-------

			DECLARE @Counter INT =1 ,@maxCountId INT = (SELECT max(RowId) FROM @TBL_LocaleId ) 

			CREATE TABLE #TBL_PublishCatalogId (PublishCatalogId INT,PublishProductId INT,PimProductId  INT   , VersionId INT ,LocaleId INT, PriceListId INT , PortalId INT ,MaxSmallWidth NVARCHAr(max)  )
			CREATE INDEX idx_#TBL_PublishCatalogIdPimProductId on #TBL_PublishCatalogId(PimProductId)
			CREATE INDEX idx_#TBL_PublishCatalogIdPimPublishCatalogId on #TBL_PublishCatalogId(PublishCatalogId)

			INSERT INTO #TBL_PublishCatalogId 
			SELECT Distinct ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId, 0,0 ,
			(SELECT TOP 1 PriceListId FROM ZnodePriceListPortal NT 
			INNER JOIN ZnodePimCatalog ZPC on ZPC.PortalId=NT.PortalId  
			ORDER BY NT.Precedence ASC ) ,TY.PortalId,
			(SELECT TOP 1  MAX(MaxSmallWidth) FROM ZnodeGlobalMediaDisplaySetting)
			FROM ZnodePublishProduct ZPP 
			LEFT JOIN ZnodePortalCatalog TY ON (TY.PublishCatalogId = ZPP.PublishCatalogId)
			WHERE (EXISTS (SELECT TOP 1 1 FROM #PimProductId SP WHERE SP.Id = ZPP.PimProductId  
			AND  (@PublishCatalogId IS NULL OR @PublishCatalogId = 0 ))
			OR  (ZPP.PublishCatalogId = @PublishCatalogId ))
			And Exists 
			(Select TOP 1 1 from ZnodePublishVersionEntity ZPCP  where ZPCP.ZnodeCatalogId  = ZPP.PublishCatalogId AND ZPCP.IsPublishSuccess =1 )

			Insert into #ProductIds (PimProductId,PublishProductId) Select distinct PimProductId,PublishProductId from #TBL_PublishCatalogId  

             Create TABLE #TBL_ZnodeTempPublish (PimProductId INT , AttributeCode VARCHAR(300) ,AttributeValue NVARCHAR(max) ) 			
			 DECLARE @TBL_AttributeVAlueLocale TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT,LocaleId INT ,AttributeValue Nvarchar(1000) )


			 INSERT INTO @TBL_AttributeValueLocale (PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId ,LocaleId ,AttributeValue )
			 SELECT VIR.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId,VIR.LocaleId, ''
			 FROM View_LoadManageProductInternal VIR
			 INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = VIR.PimProductId)
			 UNION ALL 
			 SELECT VIR.PimProductId,PimAttributeId,PimProductAttributeMediaId,ZPDE.LocaleId , ''
			 FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimProductAttributeMedia ZPDE ON (ZPDE.PimAttributeValueId = VIR.PimAttributeValueId )
			 WHERE EXISTS (SELECT TOP 1 1 FROM #ProductIds ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
			 Union All 
			 SELECT VIR.PimProductId,VIR.PimAttributeId,ZPDVL.PimAttributeDefaultValueLocaleId,ZPDVL.LocaleId ,ZPDVL.AttributeDefaultValue
			   FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1 )
			 INNER JOIN ZnodePimAttributeDefaultValue ZPADV ON ZPADV.PimAttributeId = D.PimAttributeId
			 INNER JOIN ZnodePimAttributeDefaultValueLocale ZPDVL   on (ZPADV.PimAttributeDefaultValueId = ZPDVL.PimAttributeDefaultValueId)
			 WHERE ( ZPDVL.LocaleId = @DefaultLocaleId OR ZPDVL.LocaleId = @LocaleId )
			 AND EXISTS(SELECT TOP 1 1 FROM #ProductIds ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
			 Union All 
			 SELECT VIR.PimProductId,VIR.PimAttributeId,'','' ,''
			 FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1 )
			 WHERE  EXISTS(SELECT TOP 1 1 FROM #ProductIds ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
		
				--insert INTO #ZnodePrice
				SELECT RetailPrice,SalesPrice,ZC.CurrencyCode,ZCC.CultureCode ,ZCC.Symbol CurrencySuffix,TYU.PublishProductId ,isnull(ZPC1.IsAllowIndexing,0) as IsAllowIndexing
				into #ZnodePrice
				FROM ZnodePrice ZP 
				INNER JOIN ZnodePriceList ZPL ON (ZPL.PriceListId = ZP.PriceListId)
				INNER JOIN ZnodeCurrency ZC oN (ZC.CurrencyId = ZPL.CurrencyId )
				INNER JOIN ZnodeCulture ZCC ON (ZCC.CultureId = ZPL.CultureId)
				INNER JOIN ZnodePublishProductDetail TY ON (TY.SKU = ZP.SKU ) 
				INNER JOIN ZnodePublishProduct TYU ON (TYU.PublishProductId = TY.PublishProductId)
				INNER JOIN ZnodePublishCatalog ZPC ON (TYU.PublishCatalogId = ZPC.PublishCatalogId)
				INNER JOIN ZnodePimCatalog ZPC1 ON (ZPC.PimCatalogId = ZPC1.PimCatalogId)
				WHERE EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId TYUR WHERE TYUR.PriceListId = ZPL.PriceListId AND TYUR.PublishCatalogId = TYU.PublishCatalogId
				AND TYU.PublishProductId = TYUR.PublishProductId)
				AND TY.LocaleId = dbo.Fn_GetDefaultLocaleId()
				AND EXISTS (SELECT TOP 1 1 FROM ZnodePriceListPortal ZPLP 
				INNER JOIN ZnodePimCatalog ZPC on ZPC.PortalId=ZPLP.PortalId WHERE ZPLP.PriceListId=ZP.PriceListId )
				
				--insert INTO #ProductSKU
				SELECT ZCSD.SEOUrl , ZCDL.SEODescription,ZCDL.SEOKeywords ,ZCDL.SEOTitle, TYU.PublishProductId ,isnull(ZPC1.IsAllowIndexing,0) as IsAllowIndexing
				INTO #ProductSKU
				FROM ZnodeCMSSEODetail ZCSD 
				INNER JOIN ZnodeCMSSEODetailLocale ZCDL ON (ZCDL.CMSSEODetailId = ZCSD.CMSSEODetailId)
				INNER JOIN ZnodePublishProductDetail TY ON (TY.SKU = ZCSD.SEOCode AND ZCDL.LocaleId = TY.LocaleId) 
				INNER JOIN ZnodePublishProduct TYU ON (TYU.PublishProductId = TY.PublishProductId)
				INNER JOIN ZnodePublishCatalog ZPC ON (TYU.PublishCatalogId = ZPC.PublishCatalogId)
				INNER JOIN ZnodePimCatalog ZPC1 ON (ZPC.PimCatalogId = ZPC1.PimCatalogId)
				WHERE CMSSEOTypeId = (SELECT TOP 1 CMSSEOTypeId FROM ZnodeCMSSEOType WHERE Name = 'Product') 
				AND EXISTS (SELECT TOP 1 1  FROM #TBL_PublishCatalogId TYUR WHERE  TYUR.PublishCatalogId = TYU.PublishCatalogId
				AND TYU.PublishProductId = TYUR.PublishProductId)
				AND ZCDL.LocaleId = dbo.Fn_GetDefaultLocaleId()
				and ZCSD.PortalId = isnull(ZPC1.PortalId,0)

			
				--insert INTO #ProductImages
				SELECT  TUI.PublishCatalogId, TYU.PublishProductId , @DomainUrl +'Catalog/'  + CAST(Max(ZPC1.PortalId) AS VARCHAr(100)) + '/'+ CAST(Isnull(Max(TUI.MaxSmallWidth),'') AS VARCHAR(100)) + '/' + Isnull(RT.MediaPath,'') AS ImageSmallPath    
				,isnull(ZPC1.IsAllowIndexing,0) as IsAllowIndexing
				INTO #ProductImages
				FROM ZnodePimAttributeValue ZPAV 
				INNER JOIN ZnodePublishProduct TYU ON (TYU.PimProductId  = ZPAV.PimProductId)
				INNER JOIN ZnodePimProductAttributeMedia  RT ON ( RT.PimAttributeValueId = ZPAV.PimAttributeValueId )
				INNER JOIN #TBL_PublishCatalogId TUI ON (TUI.PublishProductId = TYU.PublishProductId AND TUI.PublishCatalogId = TYU.PublishCatalogId
						 )--AND  TUI.LocaleId = dbo.Fn_GetDefaultLocaleId()
				INNER JOIN ZnodePublishCatalog ZPC ON (TYU.PublishCatalogId = ZPC.PublishCatalogId)
				INNER JOIN ZnodePimCatalog ZPC1 ON (ZPC.PimCatalogId = ZPC1.PimCatalogId)
				WHERE  RT.LocaleId = dbo.Fn_GetDefaultLocaleId()
				AND ZPAV.PimAttributeId = (SELECT TOp 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'ProductImage')
				group by TUI.PublishCatalogId, TYU.PublishProductId ,isnull(RT.MediaPath,''),isnull(ZPC1.IsAllowIndexing,0) 
		  -- end
	  
WHILE @Counter <= @maxCountId
BEGIN
 SET @LocaleId = (SELECT TOP 1 LocaleId FROM @TBL_LocaleId WHERE RowId = @Counter)

  INSERT INTO #PimProductAttributeJson 
  SELECT PimAttributeJsonId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeJSON
  WHERE LocaleId = @LocaleId
  
  INSERT INTO #PimProductAttributeJson 
  SELECT PimAttributeJsonId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeJSON ZPAX
  WHERE ZPAX.LocaleId = @DefaultLocaleId  
  AND NOT EXISTS (SELECT TOP 1 1 FROM #PimProductAttributeJson ZPAXI WHERE ZPAXI.PimAttributeId = ZPAX.PimAttributeId )

  INSERT INTO @PimDefaultValueLocale
  SELECT PimAttributeDefaultJsonId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultJson
  WHERE localeId = @LocaleId

  INSERT INTO @PimDefaultValueLocale 
   SELECT PimAttributeDefaultJsonId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultJson ZX
  WHERE localeId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM @PimDefaultValueLocale TRTR WHERE TRTR.PimAttributeDefaultValueId = ZX.PimAttributeDefaultValueId)
  
 
  --DECLARE @TBL_AttributeVAlue TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT  )
  --DECLARE @TBL_CustomeFiled TABLE (PimCustomeFieldJsonId INT ,CustomCode VARCHAR(300),PimProductId INT ,LocaleId INT )
  CREATE TABLE #TBL_CustomeFiled  (PimCustomeFieldJsonId INT ,CustomCode VARCHAR(300),PimProductId INT ,LocaleId INT )
  CREATE TABLE #TBL_AttributeVAlue (PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT  )



  INSERT INTO #TBL_CustomeFiled (PimCustomeFieldJsonId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldJsonId,RTR.PimProductId ,RTR.LocaleId,CustomCode
  FROM ZnodePimCustomeFieldJson RTR 
  INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = RTR.PimProductId)
  WHERE RTR.LocaleId = @LocaleId
 

  INSERT INTO #TBL_CustomeFiled (PimCustomeFieldJsonId,PimProductId ,LocaleId,CustomCode)
  SELECT  Distinct  PimCustomeFieldJsonId,ITR.PimProductId ,ITR.LocaleId,CustomCode
  FROM ZnodePimCustomeFieldJson ITR
  INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = ITR.PimProductId)
  WHERE ITR.LocaleId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM #TBL_CustomeFiled TBL  WHERE ITR.CustomCode = TBL.CustomCode AND ITR.PimProductId = TBL.PimProductId)
  

    INSERT INTO #TBL_AttributeVAlue (PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId )
    SELECT Distinct  PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId
	FROM @TBL_AttributeVAlueLocale
    WHERE LocaleId = @LocaleId

    
	INSERT INTO #TBL_AttributeVAlue(PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId )
	SELECT VI.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId
	FROM @TBL_AttributeVAlueLocale VI 
    WHERE VI.LocaleId = @DefaultLocaleId 
	AND NOT EXISTS (SELECT TOP 1 1 FROM #TBL_AttributeVAlue  CTE WHERE CTE.PimProductId = VI.PimProductId AND CTE.PimAttributeId = VI.PimAttributeId )
 
	------------Facet Merging Patch --------------
	IF OBJECT_ID('tempdb..#PimChildProductFacets') is not null
	BEGIN 
		DROP TABLE #PimChildProductFacets
	END 

	IF OBJECT_ID('tempdb..#PimAttributeDefaultXML') is not null
	BEGIN 
		DROP TABLE #PimAttributeDefaultXML
	END
	----Getting parent facets data
	Select  ZPPADV.PimAttributeDefaultValueId, ZPAV_Parent.PimAttributeValueId, ZPPADV.LocaleId
	Into #PimChildProductFacets
	from ZnodePimAttributeValue ZPAV_Parent
	inner join ZnodePimProductAttributeDefaultValue ZPPADV ON ZPAV_Parent.PimAttributeValueId = ZPPADV.PimAttributeValueId 
	where exists(select * from #ProductIds ZPPC where ZPAV_Parent.PimProductId = ZPPC.PimProductId )

	----Getting child facets for merging	
	insert into #PimChildProductFacets	  
	Select distinct ZPPADV.PimAttributeDefaultValueId, ZPAV_Parent.PimAttributeValueId, ZPPADV.LocaleId
	from ZnodePimAttributeValue ZPAV_Parent
	inner join ZnodePimProductTypeAssociation ZPPTA ON ZPAV_Parent.PimProductId = ZPPTA.PimParentProductId
	inner join ZnodePimAttributeValue ZPAV_Child ON ZPPTA.PimProductId = ZPAV_Child.PimProductId AND ZPAV_Parent.PimAttributeId = ZPAV_Child.PimAttributeId
	inner join ZnodePimProductAttributeDefaultValue ZPPADV ON ZPAV_Child.PimAttributeValueId = ZPPADV.PimAttributeValueId 
	where exists(select * from ZnodePimFrontendProperties ZPFP where ZPAV_Parent.PimAttributeId = ZPFP.PimAttributeId and ZPFP.IsFacets = 1)
	and exists(select * from #ProductIds ZPPC where ZPAV_Parent.PimProductId = ZPPC.PimProductId )
	and not exists(select * from ZnodePimProductAttributeDefaultValue ZPPADV1 where ZPAV_Parent.PimAttributeValueId = ZPPADV1.PimAttributeValueId 
		            and ZPPADV1.PimAttributeDefaultValueId = ZPPADV.PimAttributeDefaultValueId )

	----Merging childs facet attribute Default value XML for parent
	select  ZPADX.DefaultValueJson, ZPPADV.PimAttributeValueId, ZPPADV.LocaleId
	into #PimAttributeDefaultXML
	from #PimChildProductFacets ZPPADV		  
	inner join ZnodePimAttributeDefaultJson ZPADX ON ( ZPPADV.PimAttributeDefaultValueId = ZPADX.PimAttributeDefaultValueId )--AND ZPPADV.LocaleId = ZPADX.LocaleId)
	INNER JOIN @PimDefaultValueLocale GH ON (GH.PimAttributeDefaultJsonId = ZPADX.PimAttributeDefaultJsonId)
	------------Facet Merging Patch --------------   

	 IF OBJECT_ID('tempdb..#View_LoadManageProductInternal') is not null
	 BEGIN 
		DROP TABLE #View_LoadManageProductInternal
	 END 

	SELECT a.PimProductId ,b.AttributeValue as AttributeValue , b.LocaleId  ,a.PimAttributeId,c.AttributeCode ,b.ZnodePimAttributeValueLocaleId
	into #View_LoadManageProductInternal
	FROM ZnodePimAttributeValue a 
	INNER JOIN  ZnodePimAttributeValueLocale b ON ( b.PimAttributeValueId = a.PimAttributeValueId )
	INNER JOIN ZnodePimAttribute c ON ( c.PimAttributeId=a.PimAttributeId )
	INNER JOIN ZnodePimAttributeJSON c1   ON (c1.PimAttributeId = a.PimAttributeId )
	INNER JOIN #PimProductAttributeJson b1 ON (b1.PimAttributeJsonId = c1.PimAttributeJsonId )
	INNER JOIN #TBL_AttributeVAlue CTE ON (Cte.PimAttributeId = a.PimAttributeId AND Cte.ZnodePimAttributeValueLocaleId = b.ZnodePimAttributeValueLocaleId)
	UNION ALL
	SELECT a.PimProductId,ZPPATAV.AttributeValue AS AttributeValue  
	,ZPPATAV.LocaleId,a.PimAttributeId,c.AttributeCode  ,ZPPATAV.PimProductAttributeTextAreaValueId
	FROM ZnodePimAttributeValue a 
	INNER JOIN ZnodePimProductAttributeTextAreaValue ZPPATAV ON (ZPPATAV.PimAttributeValueId = a.PimAttributeValueId )
	INNER JOIN ZnodePimAttribute c ON ( c.PimAttributeId=a.PimAttributeId )
	INNER JOIN ZnodePimAttributeJSON c1   ON (c1.PimAttributeId = a.PimAttributeId )
	INNER JOIN #PimProductAttributeJson b1 ON (b1.PimAttributeJsonId = c1.PimAttributeJsonId )
	INNER JOIN #TBL_AttributeVAlue CTE ON (Cte.PimAttributeId = a.PimAttributeId AND Cte.ZnodePimAttributeValueLocaleId = ZPPATAV.PimProductAttributeTextAreaValueId)
	
	INSERT INTO #TBL_ZnodeTempPublish  
		SELECT  a.PimProductId,a.AttributeCode , 
			JSON_MODIFY (JSON_MODIFY (Json_Query( c.AttributeJSON  ) , '$.AttributeValues' ,  
			ISNULL(a.AttributeValue,'') ) ,'$.SelectValues',Json_Query('[]'))
			AS 'AttributeValue'
		FROM #View_LoadManageProductInternal a 
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = a.PimAttributeId )
		INNER JOIN #PimProductAttributeJson b ON (b.PimAttributeJsonId = c.PimAttributeJsonId )
		INNER JOIN #TBL_AttributeVAlue CTE ON (Cte.PimAttributeId = a.PimAttributeId AND Cte.ZnodePimAttributeValueLocaleId = a.ZnodePimAttributeValueLocaleId)
	UNION ALL 
			SELECT  a.PimProductId,c.AttributeCode , 
			JSON_MODIFY (JSON_MODIFY (Json_Query( c.AttributeJSON  ) , '$.AttributeValues' ,  
			ISNULL(TAVL.AttributeValue,'') ) ,'$.SelectValues',Json_Query('[]'))
			AS 'AttributeValue'
		FROM ZnodePimAttributeValue  a 
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = a.PimAttributeId )
		INNER JOIN #PimProductAttributeJson b ON (b.PimAttributeJsonId = c.PimAttributeJsonId )
		INNER JOIN ZnodePImAttribute ZPA  ON (ZPA.PimAttributeId = a.PimAttributeId)
		INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = a.PimProductId)
		Inner JOIN @TBL_AttributeVAlueLocale TAVL ON  (c.PimAttributeId = TAVL.PimAttributeId  and ZPP.PimProductId = TAVL.PimProductId )
		WHERE ZPA.IsPersonalizable = 1 
		AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodePimAttributeValueLocale q WHERE q.PimAttributeValueId = a.PimAttributeValueId) 
	UNION ALL 
		SELECT THB.PimProductId,THB.CustomCode,
		--'<Attributes><AttributeEntity>'+CustomeFiledJson +'</AttributeEntity></Attributes>' 
		JSON_MODIFY (Json_Query( CustomeFiledJson ) ,'$.SelectValues',Json_Query('[]')) 
		FROM ZnodePimCustomeFieldJson THB 
		INNER JOIN #TBL_CustomeFiled TRTE ON (TRTE.PimCustomeFieldJsonId = THB.PimCustomeFieldJsonId)
		UNION ALL 
		SELECT ZPAV.PimProductId,c.AttributeCode,
			JSON_MODIFY (JSON_MODIFY (c.AttributeJson,'$.AttributeValues',''), '$.SelectValues',
			Isnull((SELECT 
			Isnull(JSON_VALUE(DefaultValueJson, '$.Code'),'') Code 
			,Isnull(JSON_VALUE(DefaultValueJson, '$.LocaleId'),0) LocaleId
			,IsNull(JSON_VALUE(DefaultValueJson, '$.Value'),'') Value
			,IsNull(JSON_VALUE(DefaultValueJson, '$.AttributeDefaultValue'),'') AttributeDefaultValue
			,Isnull(JSON_VALUE(DefaultValueJson, '$.DisplayOrder'),0) DisplayOrder
			,Isnull(JSON_VALUE(DefaultValueJson, '$.IsEditable'),'false') IsEditable
			,Isnull(JSON_VALUE(DefaultValueJson, '$.SwatchText'),'') SwatchText
			,Isnull(JSON_VALUE(DefaultValueJson, '$.Path'),'') Path
			FROM #PimAttributeDefaultXML ZPADV
			WHERE (ZPADV.PimAttributeValueId = ZPAV.PimAttributeValueId) For JSON Auto 
			),'[]') 
		)  AttributeValue
		FROM ZnodePimAttributeValue ZPAV  With (NoLock)
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
		INNER JOIN #PimProductAttributeJson b ON (b.PimAttributeJsonId = c.PimAttributeJsonId )
		INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
		WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL 
		WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
	UNION ALL 
		SELECT DISTINCT  ZPAV.PimProductId,c.AttributeCode,
			JSON_MODIFY (JSON_MODIFY (Json_Query( c.AttributeJson  ) , '$.AttributeValues',  
			ISNULL((Select stuff( 
			(SELECT ','+ZPPG.MediaPath 
			FROM ZnodePimProductAttributeMedia ZPPG INNER JOIN  #TBL_AttributeVAlue TBLV ON 
			(	TBLV.PimProductId=  ZPAV.PimProductId AND TBLV.PimAttributeId = ZPAV.PimAttributeId )
			WHERE ZPPG.PimProductAttributeMediaId = TBLV.ZnodePimAttributeValueLocaleId
			FOR XML PATH(''),Type).value('.', 'varchar(max)'), 1, 1, '')),'') ) ,'$.SelectValues',Json_Query('[]'))   
			AS 'AttributeEntity'
		FROM ZnodePimAttributeValue ZPAV 
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
		INNER JOIN #PimProductAttributeJson b ON (b.PimAttributeJsonId = c.PimAttributeJsonId )
		INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
		WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeMedia ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
	UNION ALL 
		SELECT ZPLP.PimParentProductId ,c.AttributeCode, 
			JSON_MODIFY( JSON_Modify(c.AttributeJson , '$.AttributeValues' , 
			ISNULL(SUBSTRING((SELECT ','+cast( LP.SKU as varchar(600)) 
							 FROM #LinkProduct LP
							 WHERE LP.PimParentProductId = ZPLP.PimParentProductId 
							 AND LP.PimAttributeId = ZPLP.PimAttributeId
		FOR XML PATH ('') ),2,4000),'')),'$.SelectValues',Json_Query('[]'))   
	
		FROM ZnodePimLinkProductDetail ZPLP 
		INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPLP.PimParentProductId)
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = ZPLP.PimAttributeId )
		INNER JOIN #PimProductAttributeJson b ON (b.PimAttributeJsonId = c.PimAttributeJsonId )
		GROUP BY ZPLP.PimParentProductId , ZPP.PublishProductId  ,ZPLP.PimAttributeId,c.AttributeCode,c.AttributeJson,ZPP.PublishCatalogId
	UNION ALL 
		SELECT ZPAV.PimProductId,'DefaultSkuForConfigurable' ,
			JSON_MODIFY( JSON_Modify(
			REPLACE(REPLACE (c.AttributeJson,'ProductType','DefaultSkuForConfigurable'),'Product Type','Default Sku For Configurable'),
			'$.AttributeValues' , 
			ISNULL(SUBSTRING((SELECT ','+CAST(adl.AttributeValue AS VARCHAR(50)) 
		FROM ZnodePimAttributeValue ad 
		inner join ZnodePimAttributeValueLocale adl on ad.PimattributeValueId = adl.PimAttributeValueId
		INNER JOIN ZnodePimProductTypeAssociation yt ON (yt.PimProductId = ad.PimProductId)
		WHERE EXISTS (select * from #ProductIds p where yt.PimParentProductId = p.PimProductId)
		AND Ad.PimAttributeId =(select top 1 PimAttributeId from ZnodePimAttribute zpa where zpa.AttributeCode = 'SKU')
		AND yt.PimParentProductId = ZPAV.PimProductId 
		ORDER BY yt.DisplayOrder , yt.PimProductTypeAssociationId ASC FOR XML PATH ('') ),2,4000),'')),'$.SelectValues',Json_Query('[]'))   
		FROM ZnodePimAttributeValue ZPAV  
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
		INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
		WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL 
		INNER JOIN ZnodePimAttributeDefaultValue dr ON (dr.PimAttributeDefaultValueId = ZPADVL.PimAttributeDefaultValueId)
		WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId
		AND dr.AttributeDefaultValueCode= 'ConfigurableProduct' 
		)
		AND EXISTS (select * from #PimProductAttributeJson b where b.PimAttributeJsonId = c.PimAttributeJsonId)
		AND c.AttributeCode = 'ProductType' 
	UNION ALL
		SELECT DISTINCT  UOP.PimProductId,c.AttributeCode,
			JSON_MODIFY (JSON_MODIFY (c.AttributeJson,'$.AttributeValues',''), '$.SelectValues',
			Isnull((SELECT  DISTINCT 
			Isnull(JSON_VALUE(AA.DefaultValueJson, '$.Code'),'') Code 
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.LocaleId'),0) LocaleId
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.Value'),'') Value
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.AttributeDefaultValue'),'') AttributeDefaultValue
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.DisplayOrder'),0) DisplayOrder
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.IsEditable'),'false') IsEditable
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.SwatchText'),'') SwatchText
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.Path'),'') Path 
			,ISNULL(ZPA.DisplayOrder,0)  AS VariantDisplayOrder 
			,ISNULL(ZPAVL_SKU.AttributeValue,'')   AS VariantSKU 
			--,Isnull(ZM.Path,'') 
		,'' AS VariantImagePath 
		FROM ZnodePimAttributeDefaultJson AA 
		INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId )
		INNER JOIN ZnodePimAttributeValue ZPAV1 ON (ZPAV1.PimAttributeValueId= ZPADV.PimAttributeValueId )
		-- check/join for active variants 
		INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId =ZPAV1.PimProductId)
		INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON (ZPAV.PimAttributevalueid = ZPAVL.PimAttributeValueId AND ZPAVL.AttributeValue = 'True')
		INNER JOIN ZnodePimProductTypeAssociation YUP ON (YUP.PimProductId = ZPAV1.PimProductId)
		-- SKU
		INNER JOIN ZnodePimAttributeValue ZPAV_SKU ON(YUP.PimProductId = ZPAV_SKU.PimProductId)
		INNER JOIN ZnodePimAttributeValueLocale ZPAVL_SKU ON (ZPAVL_SKU.PimAttributeValueId = ZPAV_SKU.PimAttributeValueId)
		LEFT JOIN ZnodePimAttribute ZPA ON (ZPA.PimattributeId = ZPAV1.PimAttributeId)
		WHERE (YUP.PimParentProductId  = UOP.PimProductId AND ZPAV1.pimAttributeId = UOP.PimAttributeId )
		-- Active Variants
		AND ZPAV.PimAttributeId = (SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'IsActive')
		-- VariantSKU
		AND ZPAV_SKU.PimAttributeId = (SELECT PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'SKU')
		For JSON Auto 
		),'[]')) 
				
		--</AttributeEntity></Attributes>' 
		FROM ZnodePimConfigureProductAttribute UOP 
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = UOP.PimAttributeId )
		WHERE  exists(select * from #TBL_PublishCatalogId PPCP1 where UOP.PimProductId = PPCP1.PimProductId )
		AND EXISTS (select * from #PimProductAttributeJson b where b.PimAttributeJsonId = c.PimAttributeJsonId)

			-------------configurable attribute 
			---------------------------------------------------------------------
			
			If (@RevisionType like '%Preview%'  OR @RevisionType like '%Production%'  ) 
				Delete from ZnodePublishProductEntity where SKU  in (select SKU from #TBL_PublishCatalogId
				A inner join ZnodePublishProductDetail B on A.PublishProductId   =B.PublishProductId   )
				AND LocaleId = @LocaleId
				AND VersionId in (SELECT VersionId FROM ZnodePublishVersionEntity where RevisionType = 'PREVIEW')
			If (@RevisionType like '%Production%' OR @RevisionType = 'None')
				Delete from ZnodePublishProductEntity where SKU  in (select SKU from #TBL_PublishCatalogId
				A inner join ZnodePublishProductDetail B on A.PublishProductId   =B.PublishProductId   )
				AND LocaleId = @LocaleId
				AND VersionId in (SELECT VersionId FROM ZnodePublishVersionEntity where RevisionType = 'PRODUCTION')

			Insert into ZnodePublishProductEntity (
					VersionId, --1
					IndexId, --2 
					ZnodeProductId,ZnodeCatalogId, --3
					SKU,LocaleId, --4 
					Name,ZnodeCategoryIds, --5
					IsActive, -- 6 
					Attributes, -- 7 
					Brands, -- 9
					CategoryName, --9
					CatalogName,DisplayOrder, --10 
					RevisionType,AssociatedProductDisplayOrder, --11
					ProductIndex,--12
					SalesPrice,RetailPrice,CultureCode,CurrencySuffix,CurrencyCode,SeoDescription,SeoKeywords,SeoTitle,SeoUrl,ImageSmallPath,SKULower --13 
					)
 			SELECT distinct ZPVE.VersionId, --1 
			CAST(ISNULL(ZPCP.ProductIndex,1) AS VARCHAr(100)) + CAST(ISNULL(ZPC.PublishCategoryId,'')  AS VARCHAR(50))  + 
			CAST(Isnull(ZPP.PublishCatalogId ,'')  AS VARCHAR(50)) + CAST( @LocaleId AS VARCHAR(50)) IndexId, --2 
			CAST(ZPP.PublishProductId AS VARCHAR(50)) PublishProductId,CAST(ZPP.PublishCatalogId  AS VARCHAR(50)) PublishCatalogId,  --3 
			CAST(ISNULL(ZPPDFG.SKU ,'') AS NVARCHAR(2000)) SKU,CAST( Isnull(@LocaleId ,'') AS VARCHAR(50)) LocaleId, -- 4 
			CAST(isnull(ZPPDFG.ProductName,'') AS NVARCHAR(2000) )  ProductName ,CAST(ISNULL(ZPCD.PublishCategoryId,'')  AS VARCHAR(50)) PublishCategoryId  -- 5 
			,CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50)) IsActive , --6 
			'[' +
				(Select STUFF((SELECT distinct ','+ AttributeValue from #TBL_ZnodeTempPublish TY WHERE TY.PimProductId = ZPP.PimProductId   
				FOR XML Path ('')) ,1,1,'')  ) 
			+ ']' xmlvalue,  -- 7 
			'[]' Brands  --8 
			,CAST(isnull(PublishCategoryName,'') AS NVARCHAR(2000)) CategoryName  --9
			,CAST(Isnull(CatalogName,'')  AS NVARCHAR(2000)) CatalogName,CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50)) DisplayOrder  -- 10  
			,ZPVE.RevisionType RevisionType , 0 AssociatedProductDisplayOrder,-- pending  -- 11 
			Isnull(ZPCP.ProductIndex,1),  -- 12 

			Case When TBZP.IsAllowIndexing = 1 then  ISNULL(CAST(SalesPrice  AS varchar(500)),'') else '' end SalesPrice , 
			Case When TBZP.IsAllowIndexing = 1 then  ISNULL(CAST(RetailPrice  AS varchar(500)),'') else '' end RetailPrice , 
			Case When TBZP.IsAllowIndexing = 1 then  ISNULL(CultureCode ,'') else '' end CultureCode , 
			Case When TBZP.IsAllowIndexing = 1 then  ISNULL(CurrencySuffix ,'') else '' end CurrencySuffix , 
			Case When TBZP.IsAllowIndexing = 1 then  ISNULL(CurrencyCode ,'') else '' end CurrencyCode , 
			Case When TBZP.IsAllowIndexing = 1 then  ISNULL(SEODescription,'') else '' end SEODescriptionForIndex,
			Case When TBZP.IsAllowIndexing = 1 then  ISNULL(SEOKeywords,'') else '' end SEOKeywords,
			Case When TBZP.IsAllowIndexing = 1 then  ISNULL(SEOTitle,'') else '' end SEOTitle,
			Case When TBZP.IsAllowIndexing = 1 then  ISNULL(SEOUrl ,'') else '' end SEOUrl,
			Case When TBZP.IsAllowIndexing = 1 then  ISNULL(ImageSmallPath,'') else '' end ImageSmallPath,
			CAST(ISNULL(LOWER(ZPPDFG.SKU) ,'') AS NVARCHAR(100)) Lower_SKU -- 13
	FROM  #TBL_PublishCatalogId zpp
	INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
	INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
	INNER JOIN ZnodePublishVersionEntity ZPVE ON (ZPVE.ZnodeCatalogId  = ZPP.PublishCatalogId AND ZPVE.IsPublishSuccess =1 AND ZPVE.LocaleId = @LocaleId )
	LEFT JOIN #ZnodePrice TBZP ON (TBZP.PublishProductId = ZPP.PublishProductId)
	LEFT JOIN #ProductSKU TBPS ON (TBPS.PublishProductId = ZPP.PublishProductId)
	LEFT JOIN #ProductImages TBPI ON (TBPI.PublishProductId = ZPP.PublishProductId  )
	LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
	LEFT JOIN ZnodePublishCategory ZPC ON (ZPC.PublishCatalogId = ZPCP.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId)
	LEFT JOIN ZnodePimCategoryProduct ZPCCF ON (ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId )
	LEFT JOIN ZnodePimCategoryHierarchy ZPCH ON (ZPCH.PimCatalogId = ZPCV.PimCatalogId AND  ZPCH.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId) 
	LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ZPCP.PublishCategoryId AND ZPCD.LocaleId = @LocaleId )
	WHERE ZPPDFG.LocaleId = @LocaleId
		--AND zpp.LocaleId = @LocaleId
	AND 
		(
			(ZPVE.RevisionType =  Case when  (@RevisionType like '%Preview%'  OR @RevisionType like '%Production%' ) then 'Preview' End ) 
			OR 
			(ZPVE.RevisionType =  Case when (@RevisionType like '%Production%' OR @RevisionType = 'None') then  'Production'  end )
		)


	DELETE FROM #TBL_ZnodeTempPublish
	IF OBJECT_ID('tempdb..#PimProductAttributeJson') is not null
	 BEGIN 
		DELETE FROM #PimProductAttributeJson
	 END
	 IF OBJECT_ID('tempdb..#TBL_CustomeFiled') is not null
	 BEGIN 
	 DROP TABLE #TBL_CustomeFiled
	 END
	 IF OBJECT_ID('tempdb..#TBL_AttributeVAlue') is not null
	 BEGIN 
	 DROP TABLE #TBL_AttributeVAlue
	 END
 
	DELETE FROM @PimDefaultValueLocale
SET @Counter = @counter + 1 
END

SET @Status =1 

END TRY 
BEGIN CATCH 
	SET @Status =0  
	 SELECT 1 AS ID,@Status AS Status;   
	 DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
		@ErrorLine VARCHAR(100)= ERROR_LINE(),
		@ErrorCall NVARCHAR(MAX)= 'EXEC [Znode_GetPublishSingleProductJson] 
		@PublishCatalogId = '+CAST(@PublishCatalogId  AS VARCHAR	(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10))
				
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_GetPublishSingleProductJson',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
END CATCH
END
go
IF NOT EXISTS(select * from INFORMATION_SCHEMA.columns where TABLE_NAME = 'ZnodeUser' and COLUMN_NAME = 'UserName')
Begin
Alter table ZnodeUser add [UserName] NVARCHAR (512)  NULL
End
go
IF NOT EXISTS(select * from INFORMATION_SCHEMA.columns where TABLE_NAME = 'ZnodeOmsOrderDetails' and COLUMN_NAME = 'Email')
Begin
Alter table ZnodeOmsOrderDetails add [Email] VARCHAR (50) NULL
End
go
IF NOT EXISTS(select * from INFORMATION_SCHEMA.columns where TABLE_NAME = 'ZnodeOmsOrderDetails' and COLUMN_NAME = 'PhoneNumber')
Begin
Alter table ZnodeOmsOrderDetails add [PhoneNumber]             VARCHAR (50) NULL
End
go
update ZnodeApplicationSetting
set Setting = '<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>UserId</name>      <headertext>Checkbox</headertext>      <width>40</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>UserId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>UserName</name>      <headertext>Username</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>y</isallowlink>      <islinkactionurl>/Customer/CustomerEdit</islinkactionurl>      <islinkparamfield>UserId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>FullName</name>      <headertext>Full Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>y</isallowlink>      <islinkactionurl>/Customer/CustomerEdit</islinkactionurl>      <islinkparamfield>UserId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>Email</name>      <headertext>Email ID</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>AccountId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Email Id</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>PhoneNumber</name>      <headertext>Phone Number</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>AccountId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Phone Number</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>AccountCode</name>      <headertext>Account Code</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Account Code</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>Accountname</name>      <headertext>Account Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>AccountId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Account Name</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>8</id>      <name>RoleName</name>      <headertext>Role Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>9</id>      <name>StoreName</name>      <headertext>Store Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>10</id>      <name>DepartmentName</name>      <headertext>Department Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>11</id>      <name>LastName</name>      <headertext>Last Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>y</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>AccountId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Last Name</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>12</id>      <name>IsLock</name>      <headertext>Is Lock</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>y</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>AccountId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Is Disable</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>13</id>      <name>CreatedDate</name>      <headertext>Created Date </headertext>      <width>60</width>      <datatype>Date</datatype>      <columntype>DateTime</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>14</id>      <name>CompanyName</name>      <headertext>Company Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>15</id>      <name>CityName</name>      <headertext>City</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>16</id>      <name>StateName</name>      <headertext>State</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>17</id>      <name>PostalCode</name>      <headertext>Postal Code</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>18</id>      <name>CountryName</name>      <headertext>Country</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>19</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>Manage|Disable|Delete</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>y</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>AccountId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Manage|Disable|Delete</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/Customer/CustomerEdit|/User/CustomerEnableDisableAccount|/User/CustomerDelete</manageactionurl>      <manageparamfield>UserId|UserId,IsLock|UserId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>grid-action</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>'
 where ItemName = 'ZnodeCustomerAccount'

update ZnodeApplicationSetting
set Setting = '<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>OmsOrderId</name>      <headertext>Checkbox</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>OrderNumber</name>      <headertext>Order No</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>y</isallowlink>      <islinkactionurl>/Order/Manage</islinkactionurl>      <islinkparamfield>OmsOrderId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>UserName</name>      <headertext>Customer Name</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>Email</name>      <headertext>Email</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>PhoneNumber</name>      <headertext>Phone Number</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>StoreName</name>      <headertext>Store Name</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>OrderState</name>      <headertext>Order Status</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>orderState</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>8</id>      <name>PaymentStatus</name>      <headertext>Payment Status</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>paymentStatus</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>9</id>      <name>PaymentDisplayName</name>      <headertext>Payment Name</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>paymentType</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>10</id>      <name>OrderTotalWithCurrency</name>      <headertext>Total</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>11</id>      <name>Total</name>      <headertext>Total</headertext>      <width>30</width>      <datatype>Decimal</datatype>      <columntype>Decimal</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>12</id>      <name>SubTotalAmount</name>      <headertext>SubTotal</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>13</id>      <name>Tax</name>      <headertext>Tax</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>14</id>      <name>Shipping</name>      <headertext>Shipping</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>15</id>      <name>BillingPostalCode</name>      <headertext>Billing Zip Code</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>16</id>      <name>ShippingPostalCode</name>      <headertext>Shipping Zip Code</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>17</id>      <name>OrderDateWithTime</name>      <headertext>Order Date</headertext>      <width>0</width>      <datatype>DateTime</datatype>      <columntype>DateTime</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>18</id>      <name>CreatedByName</name>      <headertext>Created By</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>Boolean</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>19</id>      <name>PublishState</name>      <headertext>Application Type</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>20</id>      <name>ModifiedByName</name>      <headertext>Modified By</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>Boolean</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>21</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>View|void-payment</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>View</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/Order/Manage</manageactionurl>      <manageparamfield>OmsOrderId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>'
where ItemName = 'ZnodeOrder'

update ZnodeApplicationSetting
set Setting = '<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>UserId</name>      <headertext>Checkbox</headertext>      <width>40</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>UserId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>FullName</name>      <headertext>Full Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>y</isallowlink>      <islinkactionurl>/Customer/CustomerEdit</islinkactionurl>      <islinkparamfield>UserId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>Email</name>      <headertext>Email ID</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>AccountId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Email Id</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>RoleName</name>      <headertext>Role Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>StoreName</name>      <headertext>Store Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>DepartmentName</name>      <headertext>Department Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>LastName</name>      <headertext>Last Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>y</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>AccountId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Last Name</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>8</id>      <name>CreatedDate</name>      <headertext>Created Date </headertext>      <width>60</width>      <datatype>Date</datatype>      <columntype>DateTime</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>9</id>      <name>CompanyName</name>      <headertext>Company Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>10</id>      <name>CityName</name>      <headertext>City</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>11</id>      <name>StateName</name>      <headertext>State</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>12</id>      <name>PostalCode</name>      <headertext>Postal Code</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>13</id>      <name>CountryName</name>      <headertext>Country</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>14</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>Manage</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>y</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>AccountId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Manage</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/Customer/CustomerEdit</manageactionurl>      <manageparamfield>UserId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>grid-action</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>'
where ItemName = 'ZnodeGuestAccount'
go
update a set a.Email = b.Email, a.PhoneNumber = b.PhoneNumber from ZnodeOmsOrderDetails a
inner join ZnodeUser b on a.UserId = b.UserId
where a.Email is null

update a set a.PhoneNumber = b.PhoneNumber from ZnodeOmsOrderDetails a
inner join ZnodeUser b on a.UserId = b.UserId
where a.PhoneNumber is null
go
update a set a.UserName = c.UserName 
from znodeuser a
inner join AspNetUsers b on a.AspNetUserId = b.id
inner join AspNetZnodeUser c on b.username = c.AspNetZnodeUserId
where a.UserName is null
go
IF exists(select * from sys.procedures where name = 'Znode_AdminUsersByUserId')
	drop proc Znode_AdminUsersByUserId
go
CREATE PROCEDURE [dbo].[Znode_AdminUsersByUserId]
(	@RoleName		VARCHAR(200),
    @UserName		VARCHAR(200),
    @WhereClause	XML,
    @Rows			INT           = 100,
    @PageNo			INT           = 1,
    @Order_By		VARCHAR(1000) = '',
    @RowCount		INT        = 0 OUT,
	@IsCallOnSite   BIT = 0 ,
	@PortalId		VARCHAR(1000) = 0,
	@IsGuestUser    BIT = 0,
	@ColumnName     dbo.SelectColumnList ReadOnly
)
AS
   /* 
      Summary: List of users with detsils and shows link with ASPNet tables 
      This procedure is used for finding both users and admin users 
      here use three view "View_RoleUsers" for check  @UserName is present or not 
      "View_AdminUserDetail"  this view use for admin users 
      "View_CustomerUserDetail" Use for customer users 
      Unit Testing   
	  SELECT * FROM ZnodeUser 
      DECLARE @EDE INT=0  EXEC Znode_AdminUsersByUserId '','admin@znode.com',@WhereClause='',@Order_By='',@PageNo= 1 ,@Rows= 214,@IsCallOnSite='false',@PortalId=0,@RowCount=@EDE OUT  SELECT @EDE
   */
     BEGIN
         BEGIN TRY
            SET NOCOUNT ON;
			
            DECLARE @SQL NVARCHAR(MAX)= '', @PaginationWhereClause VARCHAR(300)= dbo.Fn_GetRowsForPagination(@PageNo, @Rows, ' WHERE RowId');
             
			IF OBJECT_ID('tempdb..#TBL_RowCount') is not null
				DROP TABLE #TBL_RowCount
			Create table #TBL_RowCount(RowsCount int )
			-----Split where clause XMl 
			CREATE TABLE #WhereColumnList(RowId Int identity, filterName varchar(max), WhereCondition varchar(max))
			insert into #WhereColumnList(filterName,WhereCondition)
			SELECT 
					Tbl.Col.value('key[1]', 'varchar(max)') as filterName,
					Tbl.Col.value('condition[1]', 'varchar(max)') WhereCondition
			FROM   @WhereClause.nodes('//filter') Tbl(Col) 
			----Address column in global search
			declare @AddressGlobalSearch varchar(1000)
			declare @GlobalSearch varchar(100)
			select @GlobalSearch = substring(WhereCondition,charindex(' like ',WhereCondition), charindex(' OR ',WhereCondition)-charindex(' like ',WhereCondition)) 
			from #WhereColumnList
			where filtername like '%|%'
			and filtername <> ''
			and filterName in ('CityName','CountryName','PostalCode','StateName','CompanyName') 

			if isnull(@GlobalSearch,'') <> ''
			begin
				select @AddressGlobalSearch = '('+'CityName '+ @GlobalSearch+' OR '+'CountryName '+ @GlobalSearch+' OR '+'PostalCode '+ @GlobalSearch+' OR '+'StateName '+ @GlobalSearch+' OR '+'CompanyName '+ @GlobalSearch+')'
			end
			else
			begin
				SET @AddressGlobalSearch = ''
			end
			----Global search where clause
			declare @WhereClauseGlobal varchar(1000)=''
			select @WhereClauseGlobal = ISNULL(WhereCondition,'')
			from #WhereColumnList
			where filtername like '%|%'
			and filtername <> ''
			
			----Where clause columns except Address columns
			declare @WhereClause1 varchar(max) 
			select @WhereClause1 = COALESCE(@WhereClause1 + '', '') + WhereCondition+' And '
			--case when @WhereClause1 <> ''  then ' And ' else '' end
			from #WhereColumnList a
			where filterName not like '%|%' and
			filterName not in ('CountryName','CityName','StateName','PostalCode','CompanyName')
			and filtername <> ''

			if @WhereClause1 <> ''
			begin
				set @WhereClause1=isnull(substring(@WhereClause1,1,len(@WhereClause1)-3),'')
			end
			else
			begin
				set @WhereClause1 = ''
			end

			----Where clause columns
			declare @AddressColumnWhereClause varchar(max) 
			select @AddressColumnWhereClause = COALESCE(@AddressColumnWhereClause + '', '') + WhereCondition+' And '
			from #WhereColumnList a
			where filterName not like '%|%' and
			filterName in ('CountryName','CityName','StateName','PostalCode','CompanyName')
			and filtername <> ''
			
			if isnull(@AddressColumnWhereClause,'') <> ''
			begin
				set @AddressColumnWhereClause=isnull(substring(@AddressColumnWhereClause,1,len(@AddressColumnWhereClause)-3),'')
            end
			else
			begin
				set @AddressColumnWhereClause = ''
			end

			declare @WhereClauseAll varchar(max)
			select @WhereClauseAll = COALESCE(@WhereClauseAll + '', '') + WhereCondition+' And '
			from #WhereColumnList a

			set @WhereClauseAll=isnull(substring(@WhereClauseAll,1,len(@WhereClauseAll)-3),'')
			-------------- 

			IF @PortalId  <> '0' 
			BEGIN 
			    SET @WhereClauseAll = CASE WHEN  @WhereClauseAll = '' THEN ' (PortalId IN ('+@PortalId+') OR PortalId IS NULL) ' ELSE @WhereClauseAll+' AND (PortalId IN ('+@PortalId+') OR PortalId IS NULL) ' END 

				SET @WhereClause1 = CASE WHEN  @WhereClause1 = '' THEN ' (isnull(PortalId,0) IN ('+@PortalId+') OR PortalId IS NULL) ' ELSE @WhereClause1+' AND (isnull(PortalId,0) IN ('+@PortalId+') OR PortalId IS NULL) ' END 
			
			END 
			IF EXISTS ( SELECT TOP 1 1 FROM View_RoleUsers  WHERE Username = @UserName   )  AND @RoleName <> ''  
			-- this check for admin user
       		BEGIN
				SET @SQL = ' SELECT  A.UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,A.CreatedBy,A.CreatedDate,A.ModifiedBy,A.ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId ,CustomerPaymentGUID
				INTO #Cte_AdminUserDetail
				FROM View_AdminUserDetail A
				'+CASE WHEN @PortalId  <> '0' THEN ' INNER JOIN ZnodeUserPortal ZUP ON (ZUP.UserId = A.UserId) 'ELSE '' END  +'	 
				'+dbo.Fn_GetWhereClause(@WhereClauseAll, ' WHERE ')+'
				
				;with Cte_AdminUserDetailRowId AS 
				(
				SELECT UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId,CustomerPaymentGUID ,RANK()Over('+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC')+',UserId DESC) RowId
				FROM  #Cte_AdminUserDetail
				)
					 
				SELECT UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId,CustomerPaymentGUID ,RowId 
				INTO #AccountDetails
				FROM Cte_AdminUserDetailRowId 
					 
				SET @Count= ISNULL((SELECT  Count(1) FROM #AccountDetails ),0)
					 
				SELECT DISTINCT UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId ,CustomerPaymentGUID
				FROM #AccountDetails '+@PaginationWhereClause+' '+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC' );
				EXEC SP_executesql
				@SQL,
				N'@Count INT OUT',
				@Count = @RowCount OUT;
			END;
			-- For Customer user
            ELSE   
			BEGIN
				IF @roleName = ''
				BEGIN
					if OBJECT_ID('tempdb..##CustomerUserAddDetail') is not null
					drop table ##CustomerUserAddDetail

					if OBJECT_ID('tempdb..##View_CustomerUserAddDetail') is not null
					drop table ##View_CustomerUserAddDetail
				
					if OBJECT_ID('tempdb..##UserList') is not null
					drop table ##UserList

					CREATE TABLE ##UserList(UserId int,AddressID int)

					declare @UserList varchar(1000)=''

					------To get the list of user having adress column in global search
					if (@AddressGlobalSearch <> '')
					begin
				
					set @UserList = 'select a.UserId, b.AddressID	from ZnodeUserAddress a	inner join ZnodeAddress b on a.AddressId = b.AddressId	where '+@AddressGlobalSearch
					--print @UserList
					insert into ##UserList(UserId, b.AddressID)
					exec (@UserList)
			
					end
					----To get the list of user having adress column in where clause 
					if (@AddressColumnWhereClause <> '')
					begin
					
					set @UserList = 'select a.UserId, b.AddressID	from ZnodeUserAddress a	inner join ZnodeAddress b on a.AddressId = b.AddressId	where '+@AddressColumnWhereClause
					--print @UserList
					insert into ##UserList(UserId,AddressID)
					exec (@UserList)
					
					end

					If @IsGuestUser= 0 
					AND
					NOT Exists (Select filterName from #WhereColumnList where filterName in ('accountid','isaccountcustomer','UserId') and filtername <> '')
					-- Customer List with GuestUsers
					Begin
						SET @SQL = 
							'SELECT a.userId,a.AspNetuserId,azu.UserName,a.FirstName,a.MiddleName,a.LastName,a.PhoneNumber,
							 a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
							 CONVERT( DATE, a.ModifiedDate) ModifiedDate, 0 RoleId,''''  RoleName,
							 CASE	WHEN B.LockoutEndDateUtc IS NULL
							 THEN CAST(1 AS    BIT)	ELSE CAST(0 AS BIT)
							 END IsActive,	CAST(CASE WHEN ISNULL(LockoutEndDateUtc, 0) = 0 THEN  0 ELSE  1 END  AS    BIT) AS IsLock,
				
							 (ISNULL(RTRIM(LTRIM(a.FirstName)), '''')+'' ''+ISNULL(RTRIM(LTRIM(a.MiddleName)), '''')+CASE
							 WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '''') = ''''	THEN ''''
							 ELSE '' ''	END+ISNULL(RTRIM(LTRIM(a.LastName)), '''')) 
				
							 FullName,
							 e.Name AccountName
							 ,a.AccountId,a.ExternalId,	CASE	WHEN a.AccountId IS NULL THEN 0	ELSE 1	END IsAccountCustomer,
							 a.BudgetAmount,
							 '''' TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser,a.CustomerPaymentGUID
							 --,CASE WHEN zp.StoreName IS NULL THEN ''ALL'' ELSE zp.StoreName END StoreName,
							 ,ISnull(zp.StoreName , ''ALL'')StoreName,
							 up.PortalId as PortalId, e.AccountCode
							 into ##View_CustomerUserAddDetail
							 FROM ZnodeUser a
							 INNER JOIN ASPNetUsers B ON(a.AspNetuserId = b.Id)
							 INNER JOIN AspNetZnodeUser azu ON(azu.AspNetZnodeUserId = b.UserName)
							 LEFT JOIN ZnodeUserPortal up ON(up.UserId = a.UserId)  
							 LEFT JOIN ZnodePortal zp ON (up.PortalId = zp.PortalId)
							 LEFT JOIN ZnodeAccount e ON(e.AccountId = a.AccountId)
							' 
						EXEC (@SQL)
					End	
					Else If @IsGuestUser= 1 
					Begin
							SET @SQL='SELECT a.userId,a.AspNetuserId,azu.UserName,a.FirstName,a.MiddleName,a.LastName,a.PhoneNumber,
							a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
							CONVERT( DATE, a.ModifiedDate) ModifiedDate,ur.RoleId,r.Name RoleName,
							CASE WHEN B.LockoutEndDateUtc IS NULL THEN CAST(1 AS    BIT) ELSE CAST(0 AS BIT) END IsActive,
							CAST(CASE WHEN ISNULL(LockoutEndDateUtc, 0) = 0 THEN  0 ELSE  1 END  AS    BIT) AS IsLock,
							(ISNULL(RTRIM(LTRIM(a.FirstName)), '''')+'' ''+ISNULL(RTRIM(LTRIM(a.MiddleName)), '''')+CASE
							WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '''') = '''' THEN '''' ELSE '' '' END+ISNULL(RTRIM(LTRIM(a.LastName)), '''')) FullName,
							e.Name AccountName,a.AccountId,a.ExternalId,
							CASE WHEN a.AccountId IS NULL THEN 0 ELSE 1	END IsAccountCustomer,
							a.BudgetAmount,r.TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser,a.CustomerPaymentGUID
							,CASE WHEN zp.StoreName IS NULL THEN ''ALL'' ELSE zp.StoreName END StoreName,
							CASE WHEN a.AccountId IS NULL THEN up.PortalId ELSE ZPA.PortalId END as PortalId,e.AccountCode
							into ##View_CustomerUserAddDetail
							FROM ZnodeUser a
							LEFT JOIN ASPNetUsers B ON(a.AspNetuserId = b.Id)
							LEFT JOIN ZnodeAccount e ON(e.AccountId = a.AccountId)
							LEFT JOIN AspNetUserRoles ur ON(ur.UserId = a.AspNetUserId)
							LEFT JOIN AspNetRoles r ON(r.Id = ur.RoleId)                       
							LEFT JOIN AspNetZnodeUser azu ON(azu.AspNetZnodeUserId = b.UserName)
							LEFT JOIN ZnodeUserPortal up ON(up.UserId = a.UserId)  
							LEFT JOIN ZnodePortal zp ON (up.PortalId = zp.PortalId)
							LEFT JOIN ZnodePortalAccount ZPA ON(ZPA.AccountId = a.AccountId) 
							WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeUSer ZUQ WHERE ZUQ.UserId = a.UserId AND ZUQ.EmailOptIn = 1 AND ZUQ.AspNetUserId IS NULL )
							AND a.AspNetuserId is null'
						EXEC (@SQL)
					End
					Else IF Exists (Select filterName from #WhereColumnList where filterName in ('UserId') and filtername <> '')
					and  @IsGuestUser= 0   
					-- Customer List for user edit single user 
					Begin
					SET @SQL='SELECT a.userId,a.AspNetuserId,azu.UserName,a.FirstName,a.MiddleName,a.LastName,a.PhoneNumber,
							a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
							CONVERT( DATE, a.ModifiedDate) ModifiedDate,ur.RoleId,r.Name RoleName,
							CASE WHEN B.LockoutEndDateUtc IS NULL THEN CAST(1 AS    BIT) ELSE CAST(0 AS BIT) END IsActive,
							CAST(CASE WHEN ISNULL(LockoutEndDateUtc, 0) = 0 THEN  0 ELSE  1 END  AS    BIT) AS IsLock,
							(ISNULL(RTRIM(LTRIM(a.FirstName)), '''')+'' ''+ISNULL(RTRIM(LTRIM(a.MiddleName)), '''')+CASE
							WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '''') = '''' THEN '''' ELSE '' '' END+ISNULL(RTRIM(LTRIM(a.LastName)), '''')) FullName,
							e.Name AccountName,a.AccountId,a.ExternalId,
							CASE WHEN a.AccountId IS NULL THEN 0 ELSE 1	END IsAccountCustomer,
							a.BudgetAmount,r.TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser,a.CustomerPaymentGUID
							,CASE WHEN zp.StoreName IS NULL THEN ''ALL'' ELSE zp.StoreName END StoreName,
							CASE WHEN a.AccountId IS NULL THEN up.PortalId ELSE ZPA.PortalId END as PortalId,e.AccountCode
							into ##View_CustomerUserAddDetail
							FROM ZnodeUser a
							LEFT JOIN ASPNetUsers B ON(a.AspNetuserId = b.Id)
							LEFT JOIN ZnodeAccount e ON(e.AccountId = a.AccountId)
							LEFT JOIN AspNetUserRoles ur ON(ur.UserId = a.AspNetUserId)
							LEFT JOIN AspNetRoles r ON(r.Id = ur.RoleId)                       
							LEFT JOIN AspNetZnodeUser azu ON(azu.AspNetZnodeUserId = b.UserName)
							LEFT JOIN ZnodeUserPortal up ON(up.UserId = a.UserId)  
							LEFT JOIN ZnodePortal zp ON (up.PortalId = zp.PortalId)
							LEFT JOIN ZnodePortalAccount ZPA ON(ZPA.AccountId = a.AccountId) 
							WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeUSer ZUQ WHERE ZUQ.UserId = a.UserId AND ZUQ.EmailOptIn = 1 AND ZUQ.AspNetUserId IS NULL )'
						EXEC (@SQL)
					End	
					Else -- Account user List 
					Begin
							SELECT a.userId,a.AspNetuserId,azu.UserName,a.FirstName,a.MiddleName,a.LastName,a.PhoneNumber,
							a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
							CONVERT( DATE, a.ModifiedDate) ModifiedDate,ur.RoleId,r.Name RoleName,
							CASE WHEN B.LockoutEndDateUtc IS NULL THEN CAST(1 AS    BIT) ELSE CAST(0 AS BIT) END IsActive,
							CAST(CASE WHEN ISNULL(LockoutEndDateUtc, 0) = 0 THEN  0 ELSE  1 END  AS    BIT) AS IsLock,
							(ISNULL(RTRIM(LTRIM(a.FirstName)), '')+' '+ISNULL(RTRIM(LTRIM(a.MiddleName)), '')+CASE
							WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '') = '' THEN '' ELSE ' ' END+ISNULL(RTRIM(LTRIM(a.LastName)), '')) FullName,
							e.Name AccountName,a.AccountId,a.ExternalId,
							CASE WHEN a.AccountId IS NULL THEN 0 ELSE 1	END IsAccountCustomer,
							a.BudgetAmount,r.TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser,a.CustomerPaymentGUID
							,CASE WHEN zp.StoreName IS NULL THEN 'ALL' ELSE zp.StoreName END StoreName,
							CASE WHEN a.AccountId IS NULL THEN up.PortalId ELSE ZPA.PortalId END as PortalId, e.AccountCode
							into ##View_CustomerUserAddDetail
							FROM ZnodeUser a
							LEFT JOIN ASPNetUsers B ON(a.AspNetuserId = b.Id)
							LEFT JOIN ZnodeAccount e ON(e.AccountId = a.AccountId)
							LEFT JOIN AspNetUserRoles ur ON(ur.UserId = a.AspNetUserId)
							LEFT JOIN AspNetRoles r ON(r.Id = ur.RoleId)                       
							LEFT JOIN AspNetZnodeUser azu ON(azu.AspNetZnodeUserId = b.UserName)
							LEFT JOIN ZnodeUserPortal up ON(up.UserId = a.UserId)  
							LEFT JOIN ZnodePortal zp ON (up.PortalId = zp.PortalId)
							LEFT JOIN ZnodePortalAccount ZPA ON(ZPA.AccountId = a.AccountId) 
							WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeUSer ZUQ WHERE ZUQ.UserId = a.UserId AND ZUQ.EmailOptIn = 1 AND ZUQ.AspNetUserId IS NULL )
					End


					alter table ##View_CustomerUserAddDetail 
					add DepartmentId int, PermissionsName varchar(200), PermissionCode varchar(200), DepartmentName varchar(300), AccountPermissionAccessId int,
					AccountUserOrderApprovalId int, ApprovalName varchar(1000) , ApprovalUserId int
					--, PortalId int , StoreName varchar(1000)
					,CountryName varchar(1000),CityName varchar(1000),StateName varchar(1000),PostalCode varchar(1000), CompanyName varchar(1000),
					SalesRepUserName varchar(600),SalesRepFullName varchar(1000)

	
					IF ((@AddressGlobalSearch like '%CountryName%' OR @AddressGlobalSearch like '%CityName%' OR @AddressGlobalSearch like '%StateName%' OR @AddressGlobalSearch like '%PostalCode%' OR @AddressGlobalSearch like '%CompanyName%')
					and exists(select * from ##UserList))
					BEGIN
						update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
						PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName
						from ##View_CustomerUserAddDetail a
						inner join ZnodeUserAddress ZUA on a.UserId = ZUA.UserId
						inner  JOIN ZnodeAddress ZA on ZA.AddressId = zua.AddressId
						where exists(select * from ##UserList UL where a.UserId = UL.UserId and UL.AddressId = ZA.AddressId )

						update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
						PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName
						from ##View_CustomerUserAddDetail a
						inner join ZnodeAccountAddress ZAA on a.AccountId = ZAA.AccountId
						inner  JOIN ZnodeAddress ZA on ZA.AddressId = ZAA.AddressId
						where isnull(a.AccountId,0)<> 0-- is not null
						and exists(select * from ##UserList UL where a.UserId = UL.UserId and UL.AddressID = ZA.AddressId)
						and (a.CountryName is null OR a.CityName is null OR a.StateName is null or a.PostalCode is null or a.CompanyName is null)
		
					END

					--CREATE NONCLUSTERED INDEX IND_101
					--ON [dbo].[##View_CustomerUserAddDetail] ([userId],[AspNetuserId])

					SET @SQL = '			
						
						create table #AccountDetail
						(
							UserId int,AspNetuserId nvarchar(200),UserName nvarchar(200),FirstName nvarchar(200),MiddleName nvarchar(200),LastName nvarchar(200),
							PhoneNumber nvarchar(100),Email nvarchar(100),EmailOptIn bit,CreatedBy int,CreatedDate datetime,ModifiedBy int,ModifiedDate datetime,
							RoleId varchar(200),RoleName varchar(200),IsActive bit,IsLock bit,FullName  varchar(1000),AccountName  varchar(200),PermissionsName  varchar(200),
							DepartmentName  varchar(200),DepartmentId int,AccountId int,AccountPermissionAccessId int, ExternalId  varchar(200),BudgetAmount numeric(10,6),
							AccountUserOrderApprovalId int,ApprovalName varchar(200),ApprovalUserId int,PermissionCode varchar(500),CustomerPaymentGUID varchar(500),
							StoreName varchar(200),PortalId int,CountryName varchar(200), CityName varchar(200), StateName varchar(200), PostalCode varchar(200), CompanyName varchar(200)
							,SalesRepUserName varchar(200),SalesRepFullName varchar(200) ,RowId int identity , AccountCode nvarchar(100)
						) 
						'+
						+' insert into #AccountDetail(UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,IsActive,IsLock,FullName,
						AccountName,PermissionsName,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId , ExternalId,
						BudgetAmount,AccountUserOrderApprovalId,ApprovalName,ApprovalUserId,PermissionCode,CustomerPaymentGUID
						,StoreName,PortalId, CountryName, CityName, StateName, PostalCode, CompanyName, AccountCode)
						SELECT UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,IsActive,IsLock,FullName,
						AccountName,PermissionsName,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId , ExternalId,
						BudgetAmount,AccountUserOrderApprovalId,ApprovalName,ApprovalUserId,PermissionCode,CustomerPaymentGUID 
						,StoreName,PortalId, CountryName, CityName, StateName, PostalCode, CompanyName, AccountCode
						FROM ##View_CustomerUserAddDetail where 1=1'+
						dbo.Fn_GetWhereClause(@WhereClauseGlobal+case when @WhereClauseGlobal<>'' and @WhereClause1 <> '' then ' And '+@WhereClause1 else @WhereClause1 end, ' AND ')+
						dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC') + '
			
						Insert Into #TBL_RowCount Values(@@RowCount)
							
						SELECT  UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,IsActive,IsLock,FullName,
						AccountName,PermissionsName,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId , ExternalId,
						BudgetAmount,AccountUserOrderApprovalId,ApprovalName,ApprovalUserId,PermissionCode ,CustomerPaymentGUID,StoreName,PortalId,
						CountryName, CityName, StateName, PostalCode, CompanyName, SalesRepUserName, SalesRepFullName, AccountCode
						,Row_Number()Over('+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC')+')  RowNumber
						into ##CustomerUserAddDetail
						FROM #AccountDetail '+@PaginationWhereClause  +' '+ dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC');

					EXEC (@SQL)
				
					Select @RowCount= isnull(RowsCount  ,0) from #TBL_RowCount

					ALTER TABLE ##CustomerUserAddDetail ADD AddressId Int
					--To get data for DepartmentId
					update CUD SET DepartmentId = i.DepartmentId
					from ##CustomerUserAddDetail cud
					INNER JOIN ZnodeDepartmentUser i ON(i.UserId = cud.UserId)

					--To get data for PermissionsName
					update CUD SET PermissionsName = h.PermissionsName, PermissionCode = h.PermissionCode
					from ##CustomerUserAddDetail cud
					INNER JOIN ZnodeAccountUserPermission f ON(f.UserId = cud.UserId)
					INNER JOIN ZnodeAccountPermissionAccess g ON(g.AccountPermissionAccessId = f.AccountPermissionAccessId)
					INNER JOIN ZnodeAccessPermission h ON(h.AccessPermissionId = g.AccessPermissionId)

					------To get data for DepartmentName
					update CUD SET DepartmentName = j.DepartmentName
					from ##CustomerUserAddDetail cud
					INNER JOIN ZnodeDepartmentUser i ON(i.UserId = cud.UserId)
					INNER JOIN ZnodeDepartment j ON(j.DepartmentId = i.DepartmentId)

					--To get data for AccountPermissionAccessId
					update CUD SET AccountPermissionAccessId = f.AccountPermissionAccessId
					from ##CustomerUserAddDetail cud
					INNER JOIN ZnodeAccountUserPermission f ON(f.UserId = cud.UserId)

					--To get data for AccountPermissionAccessId
					update CUD SET AccountPermissionAccessId = f.AccountPermissionAccessId
					from ##CustomerUserAddDetail cud
					INNER JOIN ZnodeAccountUserPermission f ON(f.UserId = cud.UserId)
	
					--To get data for AccountUserOrderApprovalId
					update CUD SET AccountUserOrderApprovalId = ZAUOA.AccountUserOrderApprovalId
					from ##CustomerUserAddDetail cud
					INNER JOIN ZnodeAccountUserOrderApproval ZAUOA ON cud.UserId = ZAUOA.UserID
	
					--To get data for ApprovalName,ApprovalUserId
					update CUD SET ApprovalName = ISNULL(RTRIM(LTRIM(ZU.FirstName)), '')+' '+ISNULL(RTRIM(LTRIM(ZU.MiddleName)), '')
					+CASE
					WHEN ISNULL(RTRIM(LTRIM(ZU.MiddleName)), '') = ''
					THEN ''
					ELSE ' '
					END,
					ApprovalUserId = ZAUOA.ApprovalUserId
					from ##CustomerUserAddDetail cud
					INNER JOIN ZnodeAccountUserOrderApproval ZAUOA ON cud.UserId = ZAUOA.UserID
					INNER JOIN ZnodeUser ZU ON(ZU.UserId = ZAUOA.ApprovalUserId)
	
					----To get data for PortalId
					--update CUD SET PortalId = CASE
					--								WHEN cud.AccountId IS NULL
					--								THEN up.PortalId
					--								ELSE ZPA.PortalId
					--							END 
					--from ##CustomerUserAddDetail cud
					--   LEFT JOIN ZnodeUserPortal up ON(up.UserId = cud.UserId) 
					--LEFT JOIN ZnodePortalAccount ZPA ON(ZPA.AccountId = cud.AccountId) 
	
					----To get data for CountryName, CityName, StateName, PostalCode, CompanyName
					IF (EXISTS(SELECT * FROM @ColumnName where ([StringColumn] LIKE '%CountryName%' OR [StringColumn] LIKE '%CityName%' OR [StringColumn] LIKE '%StateName%' OR [StringColumn] LIKE '%PostalCode%' OR [StringColumn] LIKE '%CompanyName%'))
					OR (@WhereClauseAll like '%CountryName%' OR @WhereClauseAll like '%CityName%' OR @WhereClauseAll like '%StateName%' OR @WhereClauseAll like '%PostalCode%' OR @WhereClauseAll like '%CompanyName%'))
					BEGIN
			 
						update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
						PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName, a.AddressId = ZA.AddressId
						from ##CustomerUserAddDetail a
						inner join ZnodeAccountAddress ZAA on a.AccountId = ZAA.AccountId
						inner  JOIN ZnodeAddress ZA on ZA.AddressId = ZAA.AddressId
						where isnull(a.AccountId,0)<> 0-- is not null
	 
						update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
						PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName, a.AddressId = ZA.AddressId
						from ##CustomerUserAddDetail a
						inner join ZnodeUserAddress ZUA on a.UserId = ZUA.UserId
						inner  JOIN ZnodeAddress ZA on ZA.AddressId = zua.AddressId
					END

					----Updating SalesRep for user if any 
					update CUAD
					set CUAD.SalesRepUserName = azu.UserName, 
					CUAD.SalesRepFullName = (ISNULL(RTRIM(LTRIM(ZU.FirstName)), '')+' '+ISNULL(RTRIM(LTRIM(ZU.MiddleName)), '')
					+CASE
					WHEN ISNULL(RTRIM(LTRIM(ZU.MiddleName)), '') = ''
					THEN ''
					ELSE ' '
					END+ISNULL(RTRIM(LTRIM(ZU.LastName)), '')) 
					from ##CustomerUserAddDetail CUAD
					inner join ZnodeSalesRepCustomerUserPortal SRCUP ON CUAD.UserId = SRCUP.CustomerUserid 
					inner join ZnodeUser ZU ON SRCUP.SalesRepUserId = ZU.UserId
					inner join ASPNetUsers ANU ON(ZU.AspNetuserId = ANU.Id)
					inner join AspNetZnodeUser azu ON(azu.AspNetZnodeUserId = ANU.UserName)

					if ( exists(select * from ##UserList) OR @AddressColumnWhereClause <> '')
					begin
						SELECT UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,IsActive,IsLock,
						Isnull(FirstName,'') +  ' ' + ISnull(LastName,'')  FullName,
						AccountName,PermissionsName,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId , ExternalId,
						BudgetAmount,AccountUserOrderApprovalId,ApprovalName,ApprovalUserId,PermissionCode ,CustomerPaymentGUID,StoreName,PortalId,
						CountryName, CityName, StateName, PostalCode, CompanyName, SalesRepUserName, SalesRepFullName, AccountCode
						from ##CustomerUserAddDetail CUAD
						where exists(select * from ##UserList UL where CUAD.UserId = UL.UserId and CUAD.AddressId = UL.AddressID )
						Order by RowNumber
					end
					else
					begin
						SELECT UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,IsActive,IsLock,
						Isnull(FirstName,'') +  ' ' + ISnull(LastName,'')  FullName,
						AccountName,PermissionsName,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId , ExternalId,
						BudgetAmount,AccountUserOrderApprovalId,ApprovalName,ApprovalUserId,PermissionCode ,CustomerPaymentGUID,StoreName,PortalId,
						CountryName, CityName, StateName, PostalCode, CompanyName, SalesRepUserName, SalesRepFullName, AccountCode
						from ##CustomerUserAddDetail
						Order by RowNumber
					end
	
					if OBJECT_ID('tempdb..##CustomerUserAddDetail') is not null
					drop table ##CustomerUserAddDetail

					if OBJECT_ID('tempdb..##View_CustomerUserAddDetail') is not null
					drop table ##View_CustomerUserAddDetail
				
				END;
            ELSE
				BEGIN
					SELECT * FROM View_CustomerUserDetail AS VICUD WHERE 1 = 0;
					SET @RowCount = 0;
				END;
            END;			
         END TRY
         BEGIN CATCH
            DECLARE @ERROR_PROCEDURE VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_AdminUsersByUserId @RoleName = '+@RoleName+' ,@UserName='+@UserName+',@WhereClause='+cast(@WhereClause as varchar(max))+' ,@Rows= '+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_By='+@Order_By+',@RowCount='+CAST(@RowCount AS VARCHAR(50));
            EXEC Znode_InsertProcedureErrorLog
            @ProcedureName    = 'Znode_AdminUsersByUserId',
            @ErrorInProcedure = @ERROR_PROCEDURE,
            @ErrorMessage     = @ErrorMessage,
            @ErrorLine        = @ErrorLine,
            @ErrorCall        = @ErrorCall;
         END CATCH;


     END;
go
Update ZnodeCMSMessage set Message = replace(Message,'2019','2020')
where Message like '%copyright%' and Message like '%2019%'
go
IF exists(select * from sys.procedures where name = 'Znode_GetOrderByPagingProduct')
	drop proc Znode_GetOrderByPagingProduct
go
CREATE PROCEDURE [dbo].[Znode_GetOrderByPagingProduct]
(
 @Order_by  Nvarchar(max)
 ,@Rows     INT =10 
 ,@PageNo   INT =1 
 ,@PimProductId TransferId Readonly 
 ,@AttributeCode VARCHAR(max)= ''
 ,@localeId INT  
 ,@PimCategoryHierarchyId INT  = 0
 ,@PortalId INT = 0 
)
AS 
BEGIN 
 SET NOCOUNT ON 
 SET @AttributeCode = CASE WHEN @AttributeCode = '' OR  @AttributeCode IS NULL THEN REPLACE(REPLACE (@Order_by , ' DESC',''),' ASC','')

  ELSE @AttributeCode END 
 DECLARE @StartId INT =  CASE WHEN @PageNo = 1 OR @PageNo = 0 THEN 1 ELSE ((@PageNo-1)*@Rows)+1 END 
 DECLARE @EndId INT = CASE WHEN @PageNo = 0 THEN @Rows ELSE @PageNo*@Rows END
 ,@DefaultLocaleId INT = dbo.Fn_GetDefaultLocaleID()   
 
 DECLARE @AttributeTypeName NVARCHAR(2000)= ''

 SELECT TOP 1 @AttributeTypeName = AttributeTypeName 
 FROM ZnodePimAttribute ZPA 
 INNER JOIN ZnodeAttributeType ZTY ON (ZTY.AttributeTypeId = ZPA.AttributeTypeId)
 WHERE ZPA.AttributeCode = @AttributeCode

 if object_id('tempdb..#PimProductId') is not null
	drop table #PimProductId

 SELECT * INTO #PimProductId FROM @PimProductId
 
 --CREATE INDEX Idx_#PimProductId_IND ON #PimProductId(id) 

 IF  @Order_by = '' 
 BEGIN 
  
  create table #Cte_getDataOrder( PimProductId INT, RowId INT Identity )

  INSERT INTO #Cte_getDataOrder (PimProductId)
  SELECT Id  
  FROM #PimProductId TBLP
  INNER JOIN ZnodePimProduct ZPP ON (TBLP.Id= ZPP.PimProductId)

  SELECT PimProductId ,RowId
  FROM #Cte_getDataOrder CTE
  WHERE RowId BETWEEN @StartId AND @EndId
  order by RowId

 END 

  IF @PimCategoryHierarchyId <> 0 AND  @Order_by LIKE 'DisplayOrder%'
 BEGIN 
	create table #Cte_getData( PimProductId INT, RowId INT Identity )
	if @Order_by LIKE  '% DESC'
		INSERT INTO #Cte_getData (PimProductId)
		SELECT TBLP.Id
	    FROM #PimProductId TBLP
	    LEFT JOIN ZnodePimCategoryProduct ZPP ON TBLP.Id= ZPP.PimProductId 
		INNER JOIN ZnodePimCategoryHierarchy ZPCH ON ( ZPP.PimCategoryId = ZPCH.PimCategoryId AND ZPCH.PimCategoryHierarchyId= @PimCategoryHierarchyId )
	    group by TBLP.Id, ZPP.DisplayOrder
		ORDER BY ZPP.DisplayOrder DESC
	else
		INSERT INTO #Cte_getData (PimProductId)
		SELECT TBLP.Id
	    FROM #PimProductId TBLP
	    LEFT JOIN ZnodePimCategoryProduct ZPP ON TBLP.Id= ZPP.PimProductId 
		INNER JOIN ZnodePimCategoryHierarchy ZPCH ON ( ZPP.PimCategoryId = ZPCH.PimCategoryId AND ZPCH.PimCategoryHierarchyId= @PimCategoryHierarchyId )
	    group by TBLP.Id, ZPP.DisplayOrder
		ORDER BY ZPP.DisplayOrder ASC

	SELECT PimProductId ,RowId
	FROM #Cte_getData CTE
	WHERE RowId BETWEEN @StartId AND @EndId
	order by RowId
	
 END 
 ELSE 
  IF @PimCategoryHierarchyId <> 0 AND  @Order_by LIKE 'Price%'
 BEGIN 
         DECLARE @tbl_ProductPricingSkuOrderBy TABLE (sku nvarchar(200),RetailPrice numeric(28,6),SalesPrice numeric(28,6),TierPrice numeric(28,6),
						TierQuantity numeric(28,6),CurrencyCode varchar(200),CurrencySuffix varchar(2000),CultureCode varchar(2000), ExternalId NVARCHAR(2000))	
	     DECLARE @SKUS VARCHAR(max) 
				,@userId INT = 0,@Date DATETIME  = dbo.FN_getDate() 

				SELECT @SKUS = COALESCE(@SKUS+',' ,'') + SKU
				FROM ZnodePublishProductDetail a 
				INNER JOIN ZnodePublishProduct b ON ( a.PublishProductId =b.PublishProductId ) 
				INNER JOIN ZnodePimCategoryProduct f ON (f.PimProductId = b.PimProductId )
				INNER JOIN ZnodePimCategoryHierarchy g ON (g.PimCategoryHierarchyId= @PimCategoryHierarchyId)
				INNER JOIN ZnodePortalCatalog c ON (c.PublishCatalogId = b.PublishCatalogId)
				WHERE c.PortalId = @PortalId 
				AND EXISTS (SELECT TOP 1  1 FROM #PimProductId R WHERE b.PimProductId = R.Id)
				AND a.LocaleId =dbo.Fn_GetDefaultLocaleId()

			DECLARE @Id TransferId 

			INSERT INTO @tbl_ProductPricingSkuOrderBy		
			SELECT * FROM [dbo].[FN_GetPublishProductPricingBySku]( @SKUS,  @PortalId ,@Date, @userid,@Id)
		
		CREATE TABLE #Cte_getDataPrice ( PimProductId INT, RowId INT Identity )

		IF @Order_by LIKE  '% DESC'
			INSERT INTO #Cte_getDataPrice ( PimProductId )
			SELECT Id 
		    FROM #PimProductId TBLP
		    LEFT JOIN View_LoadManageProductInternal ZPP ON (TBLP.Id= ZPP.PimProductId AND ZPP.AttributeCode= 'SKU' )
		    LEFT JOIN @tbl_ProductPricingSkuOrderBy b ON (b.SKU = ZPP.AttributeValue) 
			ORDER BY ISNULL(b.RetailPrice,0) DESC
		ELSE
			INSERT INTO #Cte_getDataPrice ( PimProductId )
			SELECT Id 
		    FROM #PimProductId TBLP
		    LEFT JOIN View_LoadManageProductInternal ZPP ON (TBLP.Id= ZPP.PimProductId AND ZPP.AttributeCode= 'SKU' )
		    LEFT JOIN @tbl_ProductPricingSkuOrderBy b ON (b.SKU = ZPP.AttributeValue) 
			ORDER BY ISNULL(b.RetailPrice,0) ASC

	  SELECT PimProductId ,RowId
	  FROM #Cte_getDataPrice CTE
	  WHERE RowId BETWEEN @StartId AND @EndId
	  order by RowId 

 END 
 ELSE  
 IF  ( @Order_by LIKE 'PimProductId%'  OR @Order_by LIKE 'DisplayOrder%' ) AND @PimCategoryHierarchyId = 0 
 BEGIN 
	CREATE TABLE #Cte_PimProductId ( PimProductId INT, RowId INT Identity )
	IF @Order_by LIKE  '% DESC'
		insert into #Cte_PimProductId ( PimProductId ) 
		SELECT Id
	    FROM #PimProductId TBLP
	    INNER JOIN ZnodePimProduct ZPP ON (TBLP.Id= ZPP.PimProductId)
		order by ZPP.PimProductId DESC
	else 
		insert into #Cte_PimProductId ( PimProductId ) 
		SELECT Id
	    FROM #PimProductId TBLP
	    INNER JOIN ZnodePimProduct ZPP ON (TBLP.Id= ZPP.PimProductId)
		order by ZPP.PimProductId ASC

	SELECT PimProductId ,RowId
    FROM #Cte_PimProductId CTE
    WHERE RowId BETWEEN @StartId AND @EndId

 END 
 ELSE IF  @Order_by LIKE  'ModifiedDate%' 
 BEGIN 
	CREATE TABLE #Cte_GetDataModifiedDate ( PimProductId INT, RowId INT Identity )
	IF @Order_by LIKE  '% DESC'
	    insert into #Cte_GetDataModifiedDate ( PimProductId )
		SELECT Id 
	    FROM  #PimProductId TBLP
	    INNER JOIN ZnodePimAttributeValue ZPAV ON (TBLP.Id = ZPAV.PimProductId)
	    INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ZPAV.PimAttributeId) 
	    WHERE ZPA.AttributeCode = CASE WHEN @AttributeCode = '' OR @AttributeCode = 'ModifiedDate'  THEN 'SKU' ELSE @AttributeCode END
	    ORDER BY ZPAV.ModifiedDate DESC,ZPAV.PimProductId
	else
		insert into #Cte_GetDataModifiedDate ( PimProductId )
		SELECT Id 
	    FROM  #PimProductId TBLP
	    INNER JOIN ZnodePimAttributeValue ZPAV ON (TBLP.Id = ZPAV.PimProductId)
	    INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ZPAV.PimAttributeId) 
	    WHERE ZPA.AttributeCode = CASE WHEN @AttributeCode = '' OR @AttributeCode = 'ModifiedDate'  THEN 'SKU' ELSE @AttributeCode END
	    ORDER BY ZPAV.ModifiedDate ASC,ZPAV.PimProductId

		SELECT PimProductId ,RowId
	   FROM #Cte_GetDataModifiedDate CTE
	   WHERE RowId BETWEEN @StartId AND @EndId
	   ORDER BY RowId

 END
  ELSE IF  @Order_by LIKE  'PublishStatus%' 
 BEGIN 
  
	SELECT TBLP.Id ,CASE WHEN ZPP.IsProductPublish  IS NULL THEN 'Not Published' 
				WHEN ZPP.IsProductPublish = 0 THEN 'Draft'
				ELSE  'Published' END PublishStatus 
    into #Cte_GetData3
    FROM  #PimProductId TBLP
    INNER JOIN ZnodePimProduct ZPP oN (ZPP.PimProductId = TBLP.Id)

	CREATE TABLE #Cte_OrderPublishStatus ( PimProductId INT, RowId INT Identity )

	IF @Order_by LIKE  '% DESC'
		INSERT INTO #Cte_OrderPublishStatus ( PimProductId )
		SELECT Id 
	    FROM  #Cte_GetData3
		Order by PublishStatus DESC , Id
	ELSE
		INSERT INTO #Cte_OrderPublishStatus ( PimProductId )
		SELECT Id 
	    FROM  #Cte_GetData3
		Order by PublishStatus ASC , Id
		

	SELECT PimProductId ,RowId
    FROM #Cte_OrderPublishStatus CTE
    WHERE RowId BETWEEN @StartId AND @EndId
    Order by RowId

 END
 ELSE IF  @Order_by LIKE  'AttributeFamily%' 
 BEGIN 
	;With Cte_attributeValue AS 
    (
		 SELECT ZPAF.PimAttributeFamilyId,FamilyCode,AttributeFamilyName ,ZPFL.LocaleId
		 FROM ZnodePimAttributeFamily ZPAF
		 INNER JOIN ZnodePimFamilyLocale ZPFL ON (ZPFL.PimAttributeFamilyId = ZPAF.PimAttributeFamilyId) 
		 WHERE ZPFL.LocaleId IN (@DefaultLocaleId,@LocaleId)
	 ) 
   , Cte_AttributeValueAttribute AS 
    (
	   SELECT PimAttributeFamilyId,FamilyCode,AttributeFamilyName
	   FROM Cte_attributeValue RTY 
	   WHERE LocaleId = @LocaleId
     )
   , Cte_AttributeValueTht AS (
      SELECT PimAttributeFamilyId,FamilyCode,AttributeFamilyName
	  FROM Cte_AttributeValueAttribute
	  UNION ALL 
	  SELECT PimAttributeFamilyId,FamilyCode,AttributeFamilyName
	  FROM Cte_attributeValue TYY  
	  WHERE NOT EXISTS (SELECT TOP 1 1 FROM Cte_AttributeValueAttribute THE WHERE THE.PimAttributeFamilyId = TYY.PimAttributeFamilyId )
	  AND TYY.LocaleId = @DefaultLocaleId
	  )
  
  SELECT PimAttributeFamilyId,FamilyCode,AttributeFamilyName
  INTO #TBL_FamilyLocale
  FROM Cte_AttributeValueTht 

  CREATE TABLE #Cte_AttributeFamily ( PimProductId INT, RowId INT Identity )

	IF @Order_by LIKE  '% DESC'
		INSERT INTO #Cte_AttributeFamily ( PimProductId )
		SELECT  TBLAV.PimProductId 
	    FROM ZnodePimProduct TBLAV 
	    INNER JOIN #TBL_FamilyLocale THY ON (THY.PimAttributeFamilyId = TBLAV.PimAttributeFamilyId )
	    Order by THY.AttributeFamilyName DESC ,TBLAV.PimProductId
	ELSE
		INSERT INTO #Cte_AttributeFamily ( PimProductId )
		SELECT  TBLAV.PimProductId 
	    FROM ZnodePimProduct TBLAV 
	    INNER JOIN #TBL_FamilyLocale THY ON (THY.PimAttributeFamilyId = TBLAV.PimAttributeFamilyId )
	    Order by THY.AttributeFamilyName ASC ,TBLAV.PimProductId

	SELECT PimProductId ,RowId
    FROM #Cte_AttributeFamily CTE
    WHERE RowId BETWEEN @StartId AND @EndId
    order by RowId
 
 END
 ELSE IF @AttributeTypeName IN ('Text','Number','Datetime','Yes/No')
 BEGIN 
  IF @DefaultLocaleId = @LocaleID 
  BEGIN 

  CREATE TABLE #Cte_AttributeTypeName ( PimProductId int, RowId Int Identity)
	IF  @Order_by LIKE  '% DESC'
	BEGIN
		INSERT INTO #Cte_AttributeTypeName(PimProductId)
		SELECT ZPAV.PimProductId 
		FROM dbo.ZnodePimAttribute ZPA
		INNER JOIN dbo.ZnodePimAttributeValue ZPAV ON (ZPA.PimAttributeId = ZPAV.PimAttributeId)
		INNER JOIN dbo.ZnodePimAttributeValueLocale ZPAVL ON (ZPAVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
		INNER JOIN dbo.ZnodeAttributeType ZTA ON (ZTA.AttributeTypeId = ZPA.AttributeTypeId)
		inner join #PimProductId P ON P.Id = ZPAV.PimProductId
		WHERE ZPA.IsCategory =0 
		AND IsShowOnGrid =1 
		and ZTA.AttributeTypeName IN ('Text','Number','Datetime','Yes/No')
		--and exists(select * from #PimProductId P where P.Id = ZPAV.PimProductId )
		and AttributeCode = @AttributeCode AND LocaleId = @LocaleID
		Order by ZPAVL.AttributeValue DESC ,ZPAV.PimProductId
						
	END
	Else
	BEGIN

		INSERT INTO #Cte_AttributeTypeName(PimProductId)
		SELECT ZPAV.PimProductId 
		FROM dbo.ZnodePimAttribute ZPA
		INNER JOIN dbo.ZnodePimAttributeValue ZPAV ON (ZPA.PimAttributeId = ZPAV.PimAttributeId)
		INNER JOIN dbo.ZnodePimAttributeValueLocale ZPAVL ON (ZPAVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
		INNER JOIN dbo.ZnodeAttributeType ZTA ON (ZTA.AttributeTypeId = ZPA.AttributeTypeId)
		inner join #PimProductId P ON P.Id = ZPAV.PimProductId
		WHERE ZPA.IsCategory =0 
		AND IsShowOnGrid =1 
		and ZTA.AttributeTypeName IN ('Text','Number','Datetime','Yes/No')
		--and exists(select * from #PimProductId P where P.Id = ZPAV.PimProductId )
		and AttributeCode = @AttributeCode AND LocaleId = @LocaleID
		Order by ZPAVL.AttributeValue ASC ,ZPAV.PimProductId

	END
	create index Idx_#Cte_AttributeTypeName_RowId ON #Cte_AttributeTypeName(RowId)
	SELECT PimProductId ,RowId
	FROM #Cte_AttributeTypeName CTE
	WHERE RowId >= @StartId AND RowId <= @EndId
	order by RowId


  END 
  ELSE 
  BEGIN 

	 SELECT TBLAV.ID PimProductId,ZPAVL.AttributeCode,ZPAVL.AttributeValue,ZPAVL.LocaleId,COUNT(*)Over(Partition By TBLAV.ID,ZPAVL.AttributeCode ORDER BY TBLAV.ID,ZPAVL.AttributeCode  ) RowIdIn
	 into #Cte_AttributeDetails
	 FROM #PimProductId   TBLAV 
	 INNER JOIN View_PimProducttextValue ZPAVL ON (ZPAVL.PimProductId = TBLAV.id )
	 WHERE (LocaleId = @DefaultLocaleId OR LocaleId = @LocaleId  )
	 AND AttributeCode = @AttributeCode
	 --) 
	 --,Cte_DataLocale AS 
	 --(
	 CREATE TABLE #Cte_DataLocale (PimProductId INT, RowId INT Identity )

	 IF @Order_by LIKE  '% DESC'
		 insert into #Cte_DataLocale (PimProductId)
		 SELECT  TBLAV.PimProductId 
		 FROM #Cte_AttributeDetails TBLAV 
		 WHERE LocaleId = CASE WHEN RowIdIn =2 THEN @localeId ELSE @DefaultLocaleId END
		 order by TBLAV.AttributeValue DESC ,TBLAV.PimProductId 
	else
	     insert into #Cte_DataLocale (PimProductId)
		 SELECT  TBLAV.PimProductId 
		 FROM #Cte_AttributeDetails TBLAV 
		 WHERE LocaleId = CASE WHEN RowIdIn =2 THEN @localeId ELSE @DefaultLocaleId END
		 order by TBLAV.AttributeValue ASC ,TBLAV.PimProductId

	 SELECT PimProductId ,RowId
	 FROM #Cte_DataLocale 
	 WHERE RowId BETWEEN @StartId AND @EndId
	 order by RowId

  END 
 END
 ELSE IF @AttributeTypeName IN ('Simple Select','Multi Select') 
  BEGIN 
 DECLARE @PimAttributeId TransferId 

 INSERT INTO @PimAttributeId 
 SELECT PimAttributeId
 FROM  ZnodePimAttribute 
 WHERE AttributeCode = @AttributeCode  
 CREATE TABLE #TBL_AttributeDefaultValue ( PimAttributeId INT ,
              AttributeDefaultValueCode VARCHAR(max),IsEditable INT,AttributeDefaultValue NVARCHAR(max),DisplayOrder INT,PimAttributeDefaultValueId INT  ) 
 
			 -- here collect the both locale data 
             SELECT   VIPDV.PimAttributeId,VIPDV.AttributeDefaultValueCode,VIPDV.IsEditable,VIPDVL.AttributeDefaultValue,VIPDVL.LocaleId,VIPDV.PimAttributeDefaultValueId,VIPDV.DisplayOrder
             
			 INTO #Cte_DefaultValueLocale
			 FROM [dbo].[ZnodePimAttributeDefaultValue] VIPDV
			 INNER JOIN [dbo].[ZnodePimAttributeDefaultValueLocale] VIPDVL ON (VIPDVL.PimAttributeDefaultValueId = VIPDV.PimAttributeDefaultValueId) 
             WHERE VIPDVL.LocaleId IN(@DefaultLocaleId, @LocaleId) 
             AND EXISTS
             (
                SELECT TOP 1 1
                FROM @PimAttributeId SP
                WHERE SP.id = VIPDV.PimAttributeId
             )

			 -- filter for first locale
             ;with Cte_DefaultValueFirstLocale
             AS (SELECT CTDVL.PimAttributeId,CTDVL.AttributeDefaultValueCode,CTDVL.IsEditable,CTDVL.AttributeDefaultValue,CTDVL.PimAttributeDefaultValueId,CTDVL.DisplayOrder
                 FROM #Cte_DefaultValueLocale CTDVL
                 WHERE LocaleId = @LocaleId	 
                ),

			 -- get data for second locale if not exists for firts locale 
             Cte_DefaultValueSecondLocale
             AS (SELECT CTDVFL.PimAttributeId,CTDVFL.AttributeDefaultValueCode,CTDVFL.IsEditable,CTDVFL.AttributeDefaultValue,CTDVFL.PimAttributeDefaultValueId,CTDVFL.DisplayOrder
                 FROM Cte_DefaultValueFirstLocale CTDVFL
                 UNION ALL
                 SELECT CTDVL.PimAttributeId,CTDVL.AttributeDefaultValueCode,CTDVL.IsEditable,CTDVL.AttributeDefaultValue,CTDVL.PimAttributeDefaultValueId,CTDVL.DisplayOrder
                 FROM #Cte_DefaultValueLocale CTDVL
                 WHERE LocaleId = @DefaultLocaleId 
                 AND NOT EXISTS
                  (
                      SELECT TOP 1 1
                      FROM Cte_DefaultValueFirstLocale CTDVFL
                      WHERE CTDVFL.PimAttributeDefaultValueId = CTDVL.PimAttributeDefaultValueId
                  ))

                 

    
 INSERT INTO #TBL_AttributeDefaultValue(PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder,PimAttributeDefaultValueId)
  SELECT PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder,PimAttributeDefaultValueId
                  FROM Cte_DefaultValueSecondLocale;


  IF @DefaultLocaleId = @LocaleID 
  BEGIN
	  SELECT  PimProductId ,AttributeDefaultValue as AttributeValue
	  INTO #Cte_AttributeValue
	  FROM #PimProductId TBLP  
	  INNER JOIN ZnodePimAttributeValue ZPAV  ON (TBLP.ID = ZPAV.PimProductId )
	  INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ZPAV.PimAttributeId)
	  INNER JOIN ZnodePimProductAttributeDefaultValue ZPAVL ON ZPAVL.PimAttributeValueId = ZPAV.PimAttributeValueId
	  inner join #TBL_AttributeDefaultValue TTR  ON (TTR.PimAttributeDefaultValueId = ZPAVL.PimAttributeDefaultValueId )
	  WHERE AttributeCode = @AttributeCode AND ZPAVL.LocaleId = @LocaleID

	  create table #CTe_GetDataIn (PimProductId int, RowId int identity)

	 IF @Order_by LIKE  '% DESC'
		 insert into #CTe_GetDataIn (PimProductId)
		 SELECT PimProductId
		 FROM  #Cte_AttributeValue  VPP
		 order by  VPP.AttributeValue DESC ,VPP.PimProductId
	else
		insert into #CTe_GetDataIn (PimProductId)
		SELECT PimProductId
		FROM  #Cte_AttributeValue  VPP
		order by  VPP.AttributeValue asc ,VPP.PimProductId

	 SELECT PimProductId ,RowId
	 FROM #CTe_GetDataIn 
	 WHERE RowId BETWEEN @StartId AND @EndId 
	 order by RowId

   END 
   ELSE 
   BEGIN
    SELECT ZPAV.PimAttributeValueId,ZPAVL.PimAttributeDefaultValueId , ZPAVL.LocaleId ,COUNT(*)Over(Partition By ZPAV.PimAttributeValueId ,ZPAV.PimProductId ORDER BY ZPAV.PimAttributeValueId ,ZPAV.PimProductId  ) RowId
			   INTO #temp_Table 
			   FROM #PimProductId TBLP  
	           INNER JOIN ZnodePimAttributeValue ZPAV  ON (TBLP.ID = ZPAV.PimProductId )
			   INNER JOIN ZnodePimProductAttributeDefaultValue ZPAVL ON (ZPAVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
			   WHERE (ZPAVL.LocaleId = @localeId  OR ZPAVL.LocaleId = @DefaultlocaleId )

	  SELECT  PimProductId ,SUBSTRING((SELECT ','+AttributeDefaultValue FROM #TBL_AttributeDefaultValue TTR 
				INNER JOIN #temp_Table  ZPAVL ON (TTR.PimAttributeDefaultValueId = ZPAVL.PimAttributeDefaultValueId )
				WHERE ZPAVL.PimAttributeValueId = ZPAV.PimAttributeValueId  
				AND ZPAVL.LocaleId = CASE WHEN ZPAVL.RowId = 2 THEN @LocaleId  ELSE @DefaultLocaleId  END  
				FOR XML PATH('') ),2,4000) AttributeValue
	  INTO #Cte_AttributeValue1
	  FROM #PimProductId TBLP  
	  INNER JOIN ZnodePimAttributeValue ZPAV  ON (TBLP.ID = ZPAV.PimProductId )
	  INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ZPAV.PimAttributeId)
	  WHERE AttributeCode = @AttributeCode

	  create table #CTe_GetDataIn1 (PimProductId int, RowId int identity)

	  IF  @Order_by LIKE  '% DESC'
		INSERT INTO #CTe_GetDataIn1 ( PimProductId )
		SELECT PimProductId  
	    FROM  #Cte_AttributeValue  VPP
		ORDER BY VPP.AttributeValue DESC ,VPP.PimProductId
	 ELSE
		INSERT INTO #CTe_GetDataIn1 ( PimProductId )
		SELECT PimProductId  
	    FROM  #Cte_AttributeValue  VPP
		ORDER BY VPP.AttributeValue ASC ,VPP.PimProductId

	 SELECT PimProductId ,RowId
	 FROM #CTe_GetDataIn1 
	 WHERE RowId BETWEEN @StartId AND @EndId 
	 order by RowId

   END 
    DROP TABLE #TBL_AttributeDefaultValue
  END 
  ELSE IF @AttributeTypeName IN ('Text Area') 
  BEGIN 
   IF @DefaultLocaleId = @LocaleID 
   BEGIN 
		create table #CTe_TextArea (PimProductId int, RowId int identity)

		IF @Order_by LIKE  '% DESC'
			INSERT INTO #CTe_TextArea ( PimProductId )
			SELECT VPP.PimProductId  
			FROM #PimProductId TBLP 
			INNER JOIN View_PimProductTextAreaValue VPP ON (TBLP.Id = VPP.PimProductId ) 
			WHERE AttributeCode = @AttributeCode  AND LocaleId = @LocaleID
			Order by VPP.AttributeValue DESC ,VPP.PimProductId
		ELSE
			INSERT INTO #CTe_TextArea ( PimProductId )
			SELECT VPP.PimProductId  
			FROM #PimProductId TBLP 
			INNER JOIN View_PimProductTextAreaValue VPP ON (TBLP.Id = VPP.PimProductId ) 
			WHERE AttributeCode = @AttributeCode  AND LocaleId = @LocaleID
			Order by VPP.AttributeValue ASC ,VPP.PimProductId

	  SELECT PimProductId ,RowId
	  FROM #CTe_TextArea CTE
	  WHERE RowId BETWEEN @StartId AND @EndId
	  order by RowId

   END 
   ELSE 
   BEGIN 

		SELECT TBLAV.ID PimProductId,ZPAVL.AttributeCode,ZPAVL.AttributeValue,ZPAVL.LocaleId,COUNT(*)Over(Partition By ZPAVL.PimProductId,ZPAVL.AttributeCode ORDER BY ZPAVL.PimProductId,ZPAVL.AttributeCode  ) RowIdIn
	    INTO #Cte_AttributeDetails1
		FROM #PimProductId   TBLAV 
	    INNER JOIN View_PimProductTextAreaValue ZPAVL ON (ZPAVL.PimProductId = TBLAV.id )
	    WHERE (LocaleId = @DefaultLocaleId OR LocaleId = @LocaleId  )
	    AND AttributeCode = @AttributeCode

		create table #CTe_TextArea1 (PimProductId int, RowId int identity)

		IF @Order_by LIKE  '% DESC'
			INSERT INTO #CTe_TextArea1 ( PimProductId )
			SELECT  TBLAV.PimProductId 
  			FROM #Cte_AttributeDetails1 TBLAV 
			WHERE LocaleId = CASE WHEN RowIdIn = 2 THEN @localeId ELSE @DefaultLocaleId END  
			Order by TBLAV.AttributeValue DESC ,TBLAV.PimProductId
		ELSE
			INSERT INTO #CTe_TextArea1 ( PimProductId )
			SELECT  TBLAV.PimProductId 
  			FROM #Cte_AttributeDetails1 TBLAV 
			WHERE LocaleId = CASE WHEN RowIdIn = 2 THEN @localeId ELSE @DefaultLocaleId END  
			Order by TBLAV.AttributeValue ASC ,TBLAV.PimProductId

		SELECT PimProductId ,RowId
		FROM #CTe_TextArea1 
		WHERE RowId BETWEEN @StartId AND @EndId
		order by RowId 

	 if object_id('tempdb..#PimProductId') is not null
		drop table #PimProductId
   END 
END 
END
go
IF exists(select * from sys.procedures where name = 'Znode_PurgeData')
	drop proc Znode_PurgeData
go

CREATE PROCEDURE [dbo].[Znode_PurgeData] 
(
 
  @DeleteAllProduct    							BIT = 0 -- This flag 1 will delete all product except ids in @ExceptProductId  table 
 ,@DeleteAllCategory							BIT = 0 -- This flag 1 will delete all category except ids in @ExceptCategoryId  table 
 ,@DeleteAllCatalog								BIT = 0 -- This flag 1 will delete all catalog except ids in @ExceptCatalogId  table 
 ,@DeleteAllSaveCart							Bit = 0	-- This flag 1 will delete all save carts of users.  
 ,@DeleteAllOrder								BIT = 0	-- This flag 1 will delete all orders. 
 ,@DeleteAllAccount								BIT = 0 -- This flag 1 will delete all Account. 
 ,@DeleteAllUser								BIT = 0 -- This flag 1 will delete all user. 
 ,@DeleteAllStore 								BIT = 0 -- This flag 1 will delete all store. 
 ,@DeleteAllGlobalAttribute  					BIT = 0 -- This flag 1 will delete all Global Attribute. 
 ,@DeleteAllProductCategoryAttribute			BIT = 0 -- This flag 1 will delete all Pim Attribute. 
 ,@DeleteAllMedia								BIT = 0 -- This flag 1 will delete all media. 
 ,@DeleteAllWarehouse							BIT = 0 -- This flag 1 will delete all warhouse. 
 ,@DeleteAllPricelist							BIT = 0 -- This flag 1 will delete all price list. 
 ,@DeleteAllProfile								BIT = 0 -- This flag 1 will delete all Profiles. 
 ,@DeleteAllSiteSearchData						BIT = 0	-- This flag 1 will delete all data related to search. 
 ,@DeleteAllCMSData								BIT = 0 -- This flag 1 will delete all CMS data. 
 ,@DeleteAllBrand								BIT = 0 -- This flag 1 will delete all brand. 
 ,@DeleteAllVendor								BIT = 0 -- This flag 1 will delete all vendor. 
 ,@DeleteAllCmsSeoDetails						BIT = 0 -- This flag 1 will delete all Seo details .   
 ,@ResetDomainData								BIT = 0 -- This flag 1 will delete and rest all domain. 
 ,@ExceptProductId								TransferId Readonly
 ,@ExceptCategoryId								TransferId Readonly
 ,@ExceptCatalogId								TransferId Readonly
 ,@ExceptAccountId								TransferId Readonly
 ,@ExceptUserId 								TransferId Readonly
 ,@ExceptStoreId 								TransferId Readonly 
 ,@ExceptGlobalAttributeId 						TransferId Readonly
 ,@ExceptProductCategoryAttributeId 		    TransferId Readonly
 ,@ExceptMediaId								TransferId Readonly
 ,@ExceptWarehouseId							TransferId ReadOnly 
 ,@ExceptPricelistId							TransferId ReadOnly 
 ,@ExceptProfileId								TransferId ReadOnly
 ,@ExceptSeoType								VARCHAR(2000) = ''
 ,@ResetIdentity								BIT = 0    -- Reset identity 
 ,@DeleteAllData								BIT = 0 	
 ,@DeleteAllShippingMethods						BIT = 0 
 ,@DeleteAllPaymentMethods						BIT = 0 
 ,@DeleteAllTaxes								BIT = 0 
)
AS 
BEGIN 
SET NOCOUNT ON 
 	 BEGIN TRY
	    DECLARE @StatusOut Table (Id INT ,Message NVARCHAR(max), Status BIT )
		DECLARE @DeletedIds TransferId 
		DECLARE @PortalId INT , @CMSThemeId INT , @CMSThemeCSSId INT,@PublishCatalogId INT
		,@PimCatalogId INT  
		DELETE FROM @DeletedIds DELETE FROM @StatusOut 
		IF  Object_Id('elmah_error')	 <> 0 
		BEGIN 
			 TRUNCATE TABLE elmah_error
			 DELETE FROM ZnodeImportLog
			 DELETE FROM ZnodeImportProcesslog
			 DELETE FROM ZnodeActivityLog	
             DELETE FROM ZnodePasswordLog	
             DELETE FROM ZnodeProceduresErrorLog
		END 
	
		DECLARE @DeleteId  NVARCHAR(max)= '', @StoreData NVARCHAR(max),@RunTime INT =1 
		DELETE FROM @DeletedIds DELETE FROM @StatusOut 
		IF  @DeleteAllVendor = 1   OR @DeleteAllData =1 
			BEGIN 
			 	INSERT INTO @DeletedIds 
				SELECT PimVendorId 
				FROM ZnodePimVendor ZP 
							
				INSERT INTO @StatusOut(id ,Status) 
				EXEC [dbo].[Znode_DeleteVendor] @PimVendorIds = @DeletedIds ,@Status = 0  
			    
				DELETE FROM ZnodePimProductAttributeDefaultValue WHERE PimAttributeValueId IN (
				SELECT PimAttributeValueId  
				FROM ZnodePimAttributeValue WHERE PimAttributeId = (SELECT PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode= 'Vendor') )
				
				DELETE FROM ZnodePimAttributeValue WHERE PimAttributeId = (SELECT PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode= 'Vendor') 

				DELETE FROM ZnodePimAttributeDefaultValueLocale  WHERE PimAttributeDefaultValueId IN (
				SELECT PimAttributeDefaultValueId FROM ZnodePimAttributeDefaultValue WHERE AttributeDefaultValueCode IN (SELECT VendorCode FROM ZnodePimVendor ))
				
				DELETE FROM  ZnodePimAttributeDefaultValue WHERE AttributeDefaultValueCode IN (SELECT VendorCode FROM ZnodePimVendor )

			    PRINT '<-- Vendor Data Deleted Sucessfully-->'
				
			END
			DELETE FROM @DeletedIds DELETE FROM @StatusOut 
			IF  @DeleteAllBrand = 1  OR @DeleteAllData =1 
			BEGIN 
			   INSERT INTO @DeletedIds 
			   SELECT BrandId
			   FROM ZnodeBrandDetails a
			   INSERT INTO @StatusOut (Id ,Status) 
			   EXEC [dbo].[Znode_DeleteBrand] @BrandIds = @DeletedIds, @Status = 0   
			 IF  EXISTS (SELECT TOP 1 1  FROM @StatusOut WHERE Status = 1 )
				BEGIN 
		     	PRINT '<-- Brand Data Deleted Sucessfully-->'
			   END
			   ELSE 
				BEGIN 
				PRINT '<-- Brand Data Not Deleted Properly -->' 
				END  
		    END 
				
		DELETE FROM @DeletedIds DELETE FROM @StatusOut 
		IF  @DeleteAllProduct = 1  OR @DeleteAllData =1 
		BEGIN 
		   	 INSERT INTO @DeletedIds 
		     SELECT PimProductId 
			 FROM ZnodePimProduct ZPP 
			 WHERE NOT EXISTS (SELECT TOP 1 1 FROM @ExceptProductId WHERE id = ZPP.PimProductId) 
			  INSERT INTO @StatusOut (Id ,Status) 
			  EXEC [dbo].[Znode_DeletePimProducts] @PimProductIds=@DeletedIds , @Status = 0   
			
			SELECT PimAddonGroupId,PimProductId,PimAddOnProductId  
			INTO #Temp_Addon 
			FROM ZnodePimAddOnProduct ZPP
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM @ExceptProductId WHERE id = ZPP.PimProductId)

			DELETE FROM ZnodePimAddOnProductDetail WHERE NOT EXISTS (SELECT TOP 1 1 FROM #Temp_Addon t 
							 WHERE t.PimAddOnProductId  = ZnodePimAddOnProductDetail.PimAddOnProductId )
			
			DELETE FROM  ZnodePimAddOnProduct  WHERE NOT EXISTS (SELECT TOP 1 1 FROM #Temp_Addon t 
							 WHERE t.PimAddOnProductId  = ZnodePimAddOnProduct.PimAddOnProductId )
			
			DELETE FROM ZnodePimAddonGroupLocale WHERE NOT EXISTS (SELECT TOP 1 1 FROM #Temp_Addon t 
							 WHERE t.PimAddonGroupId  = ZnodePimAddonGroupLocale.PimAddonGroupId )
			DELETE FROM ZnodePimAddonGroupProduct 	WHERE NOT EXISTS (SELECT TOP 1 1 FROM #Temp_Addon t 
							 WHERE t.PimAddonGroupId  = ZnodePimAddonGroupProduct.PimAddonGroupId )
			DELETE FROM ZnodePimAddonGroup 	WHERE NOT EXISTS (SELECT TOP 1 1 FROM #Temp_Addon t 
							 WHERE t.PimAddonGroupId  = ZnodePimAddonGroup.PimAddonGroupId )
			IF  EXISTS (SELECT TOP 1 1  FROM @StatusOut WHERE Status = 1 )
				BEGIN 
		     	PRINT '<-- Product Data Deleted Sucessfully-->'
			    END
			    ELSE 
				BEGIN 
				PRINT '<-- Product Data Not Deleted Properly -->' 
				END  
			  
	    END 
		DELETE FROM @DeletedIds DELETE FROM @StatusOut 
		IF  @DeleteAllCategory = 1 	  OR @DeleteAllData =1 
		BEGIN   
		   		INSERT INTO @DeletedIds 
				SELECT  PimCategoryId 
				FROM ZnodePimCategory ZPC
				WHERE NOT EXISTS  (SELECT TOP 1 1 FROM @ExceptCategoryId WHERE id =ZPC.PimCategoryId )
				--Remove extra products from catalog
				INSERT INTO @StatusOut (Id ,Status) 
				EXEC Znode_DeletePimCategory @PimCategoryId = @DeletedIds, @Status = 1;
			
				IF  EXISTS (SELECT TOP 1 1  FROM @StatusOut WHERE Status = 1 )
				BEGIN 
		     	PRINT '<-- Category Data Deleted Sucessfully-->'
			    END
			    ELSE 
				BEGIN 
				PRINT '<-- Category Data Not Deleted Properly -->' 
				END     
		  END
		  DELETE FROM @DeletedIds DELETE FROM @StatusOut 
		  IF  @DeleteAllCatalog = 1 	OR @DeleteAllData =1 
		   BEGIN
		   	 INSERT INTO @DeletedIds 
		   	 SELECT PimCatalogId 
			 FROM ZnodePimCatalog ZP 
			 WHERE NOT EXISTS (SELECT TOP 1 1  FROM @ExceptCatalogId WHERE id = ZP.PimCatalogId)
		   	 INSERT INTO @StatusOut (Id ,Message,Status) 
			 EXEC [dbo].[Znode_DeletePimCatalog] @PimCatalogId = @DeletedIds ,@IsForceFullyDelete = 1  
		      

			 IF  EXISTS (SELECT TOP 1 1  FROM @StatusOut WHERE Status = 1 )
				BEGIN 
		     	PRINT '<-- Catalog Data Deleted Sucessfully-->'
			    END
			    ELSE 
				BEGIN 
				PRINT '<-- Catalog Data Not Deleted Properly -->' 
				END  
           END
		   DELETE FROM @DeletedIds DELETE FROM @StatusOut 
		   IF  @DeleteAllOrder = 1 	OR @DeleteAllData =1 
		   BEGIN
				 INSERT INTO @DeletedIds 
		   		 SELECT OmsOrderID 
				 FROM ZnodeOmsOrder  ZP 
				 INSERT INTO @StatusOut (Id ,Status) 
			     EXEC [dbo].[Znode_DeleteOrderById] @OmsOrderIds = @DeletedIds , @status = 0  
		    
		        IF  EXISTS (SELECT TOP 1 1  FROM @StatusOut WHERE Status = 1 )
				BEGIN 
		     	PRINT '<-- Order Data Deleted Sucessfully-->'
			    END
			    ELSE 
				BEGIN 
				PRINT '<-- Order Data Not Deleted Properly -->' 
				END  
		  END
		
		   DELETE FROM @DeletedIds DELETE FROM @StatusOut
		   IF  @DeleteAllSaveCart = 1  OR @DeleteAllData =1 
		   BEGIN
		      DELETE FROM ZnodeOmsPersonalizeCartItem
			  DELETE FROM ZnodeOmsSavedCartLineItem 
			  DELETE FROM ZnodeOmsSavedCart
			  DELETE FROM ZnodeOmsCookieMapping
			  DELETE FROM ZnodeOmsQuotePersonalizeItem 
			  DELETE FROM ZnodeOmsQuoteLineItem
			  DELETE FROM ZnodeOmsQuote
			  DELETE FROM ZnodeOmsTemplateLineItem 
			  DELETE FROM ZnodeOmsTemplate
			 
		      PRINT '<-- Save Cart & Quote Data Deleted Sucessfully -->'
			  
		   END
		   DELETE FROM @DeletedIds DELETE FROM @StatusOut 
		   IF  @DeleteAllUser = 1 OR @DeleteAllData =1 
		   BEGIN  
		  
			   INSERT INTO @DeletedIds 
			   SELECT UserId
			   FROM ZnodeUser ZU 
			   WHERE NOT EXISTS (SELECT TOP 1  1 FROM @ExceptUserId RT WHERE RT.Id = ZU.UserId) 
			 --  INSERT INTO @StatusOut (Id ,Status) 
			   EXEC Znode_DeleteUserDetails @UserIds =@DeletedIds ,@Status = 0 , @IsForceFullyDelete =1 

			DELETE FROM AspNetUsers  WHERE NOT EXISTS (SELECT TOP 1 1 FROM AspNetZnodeUser rt WHERE rt.AspNetZnodeUserId = AspNetUsers.UserName )

		     	PRINT '<-- User Data Deleted Sucessfully-->'
			  
		   END
	    DELETE FROM @DeletedIds DELETE FROM @StatusOut 
		IF  @DeleteAllAccount = 1 	OR @DeleteAllData =1 
		  BEGIN    
				 INSERT INTO @DeletedIds 
				  SELECT AccountId
			      FROM ZnodeAccount ZU 
			      WHERE NOT EXISTS (SELECT TOP 1  1 FROM @ExceptAccountId RT WHERE RT.Id = ZU.AccountiD) 
			    -- INSERT INTO @StatusOut (Id ,Status) 
				  EXEC Znode_DeleteAccount @AccountIds =  @DeletedIds,@Status= 0,@IsForceFullyDelete =1  
				 
		     	PRINT '<-- Accouts Data Deleted Sucessfully-->'
			    
		  END
		 DELETE FROM @DeletedIds DELETE FROM @StatusOut 
		 IF  @DeleteAllGlobalAttribute = 1 	 OR @DeleteAllData =1 
		   BEGIN 
		   	INSERT INTO @DeletedIds 
			SELECT GlobalAttributeId 
			FROM ZnodeGlobalAttribute ZP 
			WHERE NOT EXISTS (SELECT TOP 1 1  FROM @ExceptGlobalAttributeId a WHERE a.Id = ZP.GlobalAttributeId)
			AND ISNULL(ZP.IsSystemDefined,0) <> 1
			INSERT INTO @StatusOut (Id ,Status) 	   
			EXEC [dbo].[Znode_DeleteGlobalAttribute] @GlobalAttributeIds= @DeletedIds,@Status =0 , 	@IsForceFullyDelete= 1    
			
			DELETE FROM ZnodeGlobalAttributeGroupLocale	WHERE GlobalAttributeGroupId IN  (SELECT GlobalAttributeGroupId  FROM ZnodeGlobalAttributeGroup WHERE IsSystemDefined <> 1 )
			DELETE FROM ZnodeGlobalAttributeGroupMapper WHERE GlobalAttributeGroupId IN  (SELECT GlobalAttributeGroupId  FROM ZnodeGlobalAttributeGroup WHERE IsSystemDefined <> 1)
			DELETE FROM ZnodeGlobalGroupEntityMapper WHERE GlobalAttributeGroupId IN  (SELECT GlobalAttributeGroupId  FROM ZnodeGlobalAttributeGroup WHERE IsSystemDefined <> 1)
			DELETE FROM ZnodeFormBuilderAttributeMapper	WHERE GlobalAttributeGroupId IN  (SELECT GlobalAttributeGroupId  FROM ZnodeGlobalAttributeGroup WHERE IsSystemDefined <> 1)
			DELETE FROM ZnodeGlobalAttributeGroup	WHERE GlobalAttributeGroupId IN  (SELECT GlobalAttributeGroupId  FROM ZnodeGlobalAttributeGroup WHERE IsSystemDefined <> 1)   
			 
			   IF  EXISTS (SELECT TOP 1 1  FROM @StatusOut WHERE Status = 1 )
				BEGIN 
		     	PRINT '<-- Global Attribute Data Deleted Sucessfully-->'
			    END
			    ELSE 
				BEGIN 
				PRINT '<-- Global Attribute Not Deleted Properly -->' 
				END 	   
		   END  
		   DELETE FROM @DeletedIds DELETE FROM @StatusOut 
		   IF  @DeleteAllProductCategoryAttribute = 1  OR @DeleteAllData =1 
		   BEGIN 
			   	INSERT INTO @DeletedIds 
				SELECT PimAttributeId
				FROM ZnodePimAttribute ZP 
				WHERE NOT EXISTS (SELECT TOP 1 1  FROM @ExceptProductCategoryAttributeId WHERE id = ZP.PimAttributeId )
				AND ZP.IsSystemDefined <> 1 
				INSERT INTO @StatusOut (Id ,Status) 			
				EXEC Znode_DeletePimAttributeWithReference @PimAttributeIds = @DeletedIds  , @Status = 1  
			  
			    DELETE FROM ZnodePimAttributeGroupLocale 
					WHERE PimAttributeGroupId IN (SELECT PimAttributeGroupId FROM ZnodePimAttributeGroup WHERE IsSystemDefined <> 1  )
				DELETE FROM ZnodePimAttributeGroupMapper wHERE PimAttributeGroupId IN (SELECT PimAttributeGroupId FROM ZnodePimAttributeGroup WHERE IsSystemDefined <> 1  )
				DELETE FROM ZnodePimFamilyGroupMapper 
					WHERE PimAttributeGroupId IN (SELECT PimAttributeGroupId FROM ZnodePimAttributeGroup WHERE IsSystemDefined <> 1  )
				DELETE FROM ZnodePimAttributeGroup WHERE IsSystemDefined <> 1  

				
				DELETE FROM ZnodePimFamilyLocale WHERE  PimAttributeFamilyId IN (SELECT PimAttributeFamilyId FROM ZnodePimAttributeFamily WHERE IsSystemDefined <> 1  )
				UPDATE ZP SET PimAttributeFamilyId = dbo.Fn_GetDefaultPimProductFamilyId() FROM ZnodePimProduct  ZP  WHERE  PimAttributeFamilyId IN (SELECT PimAttributeFamilyId FROM ZnodePimAttributeFamily WHERE IsSystemDefined <> 1  )

				DELETE FROM ZnodeImportTemplateMapping WHERE ImportTemplateId IN (SELECT ImportTemplateId FROM ZnodeImportTemplate WHERE PimAttributeFamilyId IN (SELECT PimAttributeFamilyId FROM ZnodePimAttributeFamily WHERE IsSystemDefined <> 1  ))
				DELETE FROM ZnodeImportTemplate WHERE PimAttributeFamilyId IN (SELECT PimAttributeFamilyId FROM ZnodePimAttributeFamily WHERE IsSystemDefined <> 1  )
				DELETE FROM ZnodePimFamilyGroupMapper 
					WHERE PimAttributeFamilyId IN (SELECT PimAttributeFamilyId FROM ZnodePimAttributeFamily WHERE IsSystemDefined <> 1  )
				
				DELETE  FROM ZnodePimAttributeFamily WHERE IsSystemDefined <> 1 
				UPDATE ZP SET PimAttributeFamilyId = dbo.Fn_GetDefaultPimProductFamilyId() FROM ZnodePimAttributeValue  ZP  WHERE  PimAttributeFamilyId IN (SELECT PimAttributeFamilyId FROM ZnodePimAttributeFamily WHERE IsSystemDefined <> 1  ) 
			   	IF  EXISTS (SELECT TOP 1 1  FROM @StatusOut WHERE Status = 1 )
				BEGIN 
		     	PRINT '<-- PIM Attribute Data Deleted Sucessfully-->'
			    END
			    ELSE 
				BEGIN 
				PRINT '<-- PIM Attribute Not Deleted Properly -->' 
				END 
		   END
		   DELETE FROM @DeletedIds 
		   DELETE FROM @StatusOut 
		   IF  @DeleteAllMedia = 1  OR @DeleteAllData =1 
		   BEGIN 
		  		INSERT INTO @DeletedIds 
		   		SELECT  MediaId   
				FROM ZnodeMedia ZP 
				WHERE NOT EXISTS (SELECT TOP 1 1  FROM @ExceptMediaId WHERE id = ZP.Mediaid )
				INSERT INTO @StatusOut (Id ,Message,Status)
				EXEC Znode_DeleteMedia @MediaIds = @DeletedIds  , @Status = 1  ,@IsCallInternal =1 
				DELETE FROM ZnodeMediaPathLocale WHERE MediaPathId IN (SELECT MediaPathId FROM ZnodeMediaPath WHERE PathCode<>'Root')
				DELETE FROM ZnodeMediaPath WHERE PathCode<>'Root'
				IF  EXISTS (SELECT TOP 1 1  FROM @StatusOut WHERE Status = 1 )
				BEGIN 
		     	PRINT '<-- Media Data Deleted Sucessfully-->'
			    END
			    ELSE 
				BEGIN 
				PRINT '<-- Media Not Deleted Properly -->' 
				END
				
		   END 
		   DELETE FROM @DeletedIds DELETE FROM @StatusOut 
		
		   IF  @DeleteAllWarehouse = 1 OR @DeleteAllData =1 
		   BEGIN 
		   	
		   		SET @DeleteId =  SUBSTRING((
				SELECT  ',' + CONVERT(NVARCHAR(500), WarehouseId)  
				FROM ZnodeWarehouse ZP 
				WHERE NOT EXISTS (SELECT TOP 1 1  FROM @ExceptWarehouseId WHERE id = ZP.WarehouseId )
				FOR XML PATH ('')
				),2,4000) 
				INSERT INTO @StatusOut (Id ,Status)
			    EXEC Znode_DeleteWarehouse @WarehouseId = @DeleteId  , @Status = 1 
		
				IF  EXISTS (SELECT TOP 1 1  FROM @StatusOut WHERE Status = 1 )
				BEGIN 
		     	PRINT '<-- Warehouse Data Deleted Sucessfully-->'
			    END
			    ELSE 
				BEGIN 
				PRINT '<-- Warehouse Not Deleted Properly -->' 
				END
		    END 
			DELETE FROM @DeletedIds DELETE FROM @StatusOut 
		
			IF  @DeleteAllPricelist = 1   OR @DeleteAllData =1 
		    BEGIN 
				SET @DeleteId =  SUBSTRING((
				SELECT ',' + CONVERT(NVARCHAR(500), PriceListId)  
				FROM ZnodePriceList ZP 
				WHERE NOT EXISTS (SELECT TOP 1 1  FROM @ExceptPricelistId WHERE id = ZP.PriceListId )
				FOR XML PATH ('')
				),2,4000) 
			  
				INSERT INTO @StatusOut (Id ,Status)  
				EXEC Znode_DeletePriceList @PriceListId = @DeleteId  , @Status = 1 
		      
			   IF  EXISTS (SELECT TOP 1 1  FROM @StatusOut WHERE Status = 1 )
				BEGIN 
		     	PRINT '<-- Price List Data Deleted Sucessfully-->'
			    END
			    ELSE 
				BEGIN 
				PRINT '<-- Price List Not Deleted Properly -->' 
				END
		    END
		
			DELETE FROM @DeletedIds DELETE FROM @StatusOut 
			IF  @DeleteAllProfile = 1  OR @DeleteAllData =1 
			 BEGIN 
				SET @DeleteId =  SUBSTRING((
				SELECT ',' + CONVERT(NVARCHAR(500), ProfileId)  
				FROM ZnodeProfile ZP 
				WHERE NOT EXISTS (SELECT TOP 1 1  FROM @ExceptProfileId WHERE id = ZP.ProfileId )
				FOR XML PATH ('')
				),2,4000) 
		   	 	INSERT INTO @StatusOut (Id ,Status)
				EXEC  Znode_DeleteProfile  @ProfileId=@DeleteId, @Status = 0 ,	@IsForceFullyDelete =1 
				
				IF  EXISTS (SELECT TOP 1 1  FROM @StatusOut WHERE Status = 1 )
				BEGIN 
		     	PRINT '<-- Profile Data Deleted Sucessfully-->'
			    END
			    ELSE 
				BEGIN 
				PRINT '<-- Profile Not Deleted Properly -->' 
				END
		    END
			DELETE FROM @DeletedIds DELETE FROM @StatusOut 
			IF  @DeleteAllSiteSearchData  = 1  OR @DeleteAllData =1 
			BEGIN 
			
					DELETE FROM ZnodeSearchIndexServerStatus
					DELETE FROM ZnodeSearchIndexMonitor
					DELETE FROM ZnodeCatalogIndex
					DELETE FROM ZnodePublishCatalogSearchProfile
					DELETE FROM ZnodeCatalogIndex
					DELETE FROM ZnodeCMSCustomerReview 
					DELETE FROM ZnodePublishPortalLog
					DELETE FROM ZnodeListViewFilter
					DELETE FROM ZnodeListView
			
					PRINT '<-- Site Search Data Deleted Sucessfully-->'
			 END
			 DELETE FROM @DeletedIds DELETE FROM @StatusOut 
			 IF  @DeleteAllCMSData = 1 	OR @DeleteAllData =1 
			 BEGIN 
				IF EXISTS (SELECT TOP 1 1  FROM SYS.Tables WHERE name = '_ZnodeCMSPortalTheme' )
				BEGIN
				 DROP TABLE _ZnodeCMSPortalTheme 
				END 
				SELECT * 
				INTO _ZnodeCMSPortalTheme
				FROM ZnodeCMSPortalTheme
				DELETE FROM ZnodeCMSContentPagesProfile 
				DELETE FROM ZnodeFormWidgetEmailConfiguration
				DELETE FROM ZnodeCMSWidgetTitleConfigurationLocale
				DELETE FROM ZnodeCMSWidgetTitleConfiguration
				DELETE FROM ZnodeCMSTextWidgetConfiguration
				DELETE FROM ZnodeCMSFormWidgetConfiguration
				DELETE FROM ZnodeCMSPortalProductPage
				DELETE FROM ZnodeCMSContentPageGroupMapping
				DELETE FROM ZnodeCMSContentPageGroupLocale
				DELETE FROM ZnodeCMSContentPageGroup
				DELETE FROM ZnodeCMSContentPagesLocale
				DELETE FROM ZnodeCMSContentPages
				DELETE FROM ZnodeCMSContentPagesProfile
				DELETE FROM ZnodeCMSPortalTheme  
			    DELETE FROM ZnodeCMSThemeCSS 
				DELETE FROM ZnodeCMSTheme  
				DELETE FROM ZnodeEmailTemplateMapper
				DELETE FROM ZnodeEmailTemplateLocale
				DELETE FROM ZnodeEmailTemplateAreas
				DELETE FROM ZnodeEmailTemplate
			    DELETE FROM ZnodeCMSWidgetSliderBanner
				DELETE FROM ZnodeCMSSliderBannerLocale
				DELETE FROM ZnodeCMSSliderBanner
				DELETE FROM ZnodeCMSSlider
				DELETE FROM ZnodeCmsPortalMessage
				DELETE FROM ZnodeCMSPortalMessageKeyTag
				DELETE FROM ZnodeCMSMessage 
				DELETE FROM ZnodeCMSMessageKey 
				DELETE FROM ZnodeCMSTemplate
				DELETE FROM ZnodeFormBuilderGlobalAttributeValueLocale 
				DELETE FROM ZnodeFormBuilderGlobalAttributeValue
				DELETE FROM ZnodeFormBuilderAttributeMapper 
				DELETE FROM ZnodeFormBuilderSubmit 
				DELETE FROM ZnodeFormBuilder

				IF NOT EXISTS (SELECT TOP 1 1  FROM ZnodeCMSTheme)
				BEGIN 
			   INSERT INTO ZnodeCMSTheme(Name
			,CreatedBy
			,CreatedDate
			,ModIFiedBy
			,ModIFiedDate
			,IsParentTheme
			,ParentThemeId)
			SELECT 'Default',2,GETDATE(),2,GETDATE(),1,NULL
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSTheme WHERE Name = 'Default')

			SET @CMSThemeId = CASE WHEN @CMSThemeId	 IS NULL THEN (SELECT TOP 1 CMSThemeId FROM ZnodeCMSTheme WHERE Name = 'Default'   )  ELSE  @CMSThemeId END 
			INSERT INTO ZnodeCMSThemeCSS  (CMSThemeId
			,CSSName
			,CreatedBy
			,CreatedDate
			,ModIFiedBy
			,ModIFiedDate)
			SELECT @CMSThemeId,'DefaultCSS',2,GETDATE(),2,GETDATE()
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSThemeCSS WHERE CSSName = 'DefaultCSS')
	  	
			SET @CMSThemeCSSId = CASE WHEN @CMSThemeCSSId IS NULL THEN (SELECT TOP 1 CMSThemeCSSId FROM ZnodeCMSThemeCSS 
			WHERE CSSName = 'DefaultCSS'
			) ELSE 	@CMSThemeCSSId END 

			 INSERT INTO ZnodeCMSPortalTheme (PortalId
					,CMSThemeId
					,CMSThemeCSSId
					,MediaId
					,FavIconId
					,WebsiteTitle
					,CreatedBy
					,CreatedDate
					,ModifiedBy
					,ModifiedDate)
			 SELECT DISTINCT PortalId
					,@CMSThemeId
					,@CMSThemeCSSId
					,MediaId
					,FavIconId
					,WebsiteTitle
					,2
					,GETDATE()
					,2
					,GETDATE() 
			 FROM _ZnodeCMSPortalTheme	TYU 
			 WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodeCMSPortalTheme TY  WHERE TY.PortalId = TYU.PortalId AND TY.CMSThemeId = @CMSThemeId AND TY.CMSThemeCSSId = @CMSThemeCSSId)
			 
			 END 

			 PRINT '<-- CMS Data Deleted Sucessfully-->'	  			   
			 IF  NOT EXISTS (SELECT TOP 1 1  FROM ZnodeCMSContentPageGroup )
			 BEGIN 
			    DECLARE @GroupId INT =0 
				INSERT INTO ZnodeCMSContentPageGroup (ParentCMSContentPageGroupId ,Code,CreatedBy,CreatedDate,ModIFiedBy,ModIFiedDate)
				SELECT NULL,'Root',2,GETDATE(),2,GETDATE()
			    SET @GroupId = SCOPE_IDENTITY()
				INSERT INTO ZnodeCMSContentPageGroupLocale(CMSContentPageGroupId,Name,LocaleId,CreatedBy,CreatedDate,ModIFiedBy,ModIFiedDate)
			    SELECT @GroupId,'Root',1,2,GETDATE(),2,GETDATE()
			 END
			 END 
	 		 DELETE FROM @DeletedIds DELETE FROM @StatusOut 
			 IF  @DeleteAllCmsSeoDetails =1 OR @DeleteAllData =1 
			 BEGIN 
			 
			   DELETE FROM ZnodeCMSSEODetailLocale 
			   WHERE CMSSEODetailId IN (SELECT CMSSEODetailId FROM ZnodeCMSSEODetail a 
			   INNER JOIN ZnodeCMSSEOType b ON (b.CMSSEOTypeId = a.CMSSEOTypeId)
			   WHERE NOT EXISTS (SELECT TOP 1 1 FROM dbo.split(@ExceptSeoType,',') t WHERE t.Item = b.Name))
			  
			   DELETE FROM ZnodeCMSSEODetail 
			   WHERE CMSSEODetailId IN (SELECT CMSSEODetailId FROM ZnodeCMSSEODetail a 
			   INNER JOIN ZnodeCMSSEOType b ON (b.CMSSEOTypeId = a.CMSSEOTypeId)
			   WHERE NOT EXISTS (SELECT TOP 1 1 FROM dbo.split(@ExceptSeoType,',') t WHERE t.Item = b.Name))
			   PRINT '<-- SEO Data Deleted Sucessfully-->'
			END 
			
		DELETE FROM @DeletedIds DELETE FROM @StatusOut 
		IF  @DeleteAllStore = 1   OR @DeleteAllData =1 
		   BEGIN 
		   DECLARE @TBL_PortalIds TABLE	 ( PortalId int	);
		   DECLARE @TBL_Promotion TABLE ( PromotionId int	);
		  	IF NOT EXISTS (SELECT TOP 1 1 FROM sys.tables WHERE Name = '_ZnodeDomain')
			BEGIN
				   CREATE TABLE  _ZnodeDomain (PortalId INT  ,DomainName NVARCHAR(max),IsActive BIT ,ApplicationType NVARCHAR(max),CreatedBy INT
		   ,CreatedDate DATETIME ,ModifiedBy INT ,ModIFiedDate DATETIME )
			END 


		   INSERT INTO _ZnodeDomain ( PortalId,DomainName ,IsActive  ,ApplicationType ,CreatedBy,CreatedDate ,ModIFiedBy ,ModIFiedDate) 
		   SELECT PortalId,DomainName ,IsActive  ,ApplicationType ,CreatedBy,CreatedDate ,ModIFiedBy ,ModIFiedDate
		   FROM ZnodeDomain 
		   DECLARE @TBL_DeletedUsers TABLE (AspNetUserId NVARCHAR(1000))

		       SET @DeleteId = Substring((select  ',' + convert(nvarchar(500), PromotionId)  
					FROM ZnodePromotion  SP
					WHERE NOT EXISTS (SELECT TOP 1 1  FROM @ExceptStoreId WHERE id = SP.PortalId )
					for XML Path ('')),2,4000) 
			   
			   

		-- inserting PortalIds which are not present in Order and Quote
		   INSERT INTO @TBL_PortalIds 
		   SELECT PortalId FROM ZnodePortal AS SP
		   WHERE NOT EXISTS (SELECT TOP 1 1  FROM @ExceptStoreId WHERE id = SP.PortalId );

		  	INSERT INTO @StatusOut (Id ,Status)
				EXEC Znode_DeletePromotion  @PromotionId = @DeleteId ,@Status = 1;

		
				IF  EXISTS (SELECT TOP 1 1  FROM @StatusOut WHERE Status = 1 )
				BEGIN 
		     	PRINT '<-- Store Promotion Data Deleted Sucessfully-->'
			    END
			    ELSE 
				BEGIN 
				PRINT '<-- Store Promotion Data Not Deleted Properly -->' 
				END	

-------------------------------------------------

			   DELETE FROM ZnodeGiftCardHistory	
                 WHERE EXISTS( SELECT *  FROM ZnodeGiftCard B	
                               WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS a	
                                                              WHERE a.PortalId = B.PortalId	) AND ZnodeGiftCardHistory.GiftCardId = B.GiftCardId );
	
	
                    DELETE FROM ZnodeRmaRequestItem	
                    WHERE EXISTS( SELECT *  FROM ZnodeGiftCard B WHERE EXISTS ( SELECT TOP 1 1	FROM @TBL_PortalIds AS a  WHERE a.PortalId = B.PortalId	
                              ) AND ZnodeRmaRequestItem.GiftCardId = B.GiftCardId );
	
	
                DELETE FROM ZnodeGiftCardLocale
                    WHERE EXISTS( SELECT *  FROM ZnodeGiftCard B	
                                            WHERE EXISTS ( SELECT TOP 1 1	FROM @TBL_PortalIds AS a	
                                             WHERE a.PortalId = B.PortalId	  ) AND ZnodeGiftCardLocale.GiftCardId = B.GiftCardId );
	
                    	
                    DELETE FROM ZnodeGiftCard	
                    WHERE EXISTS ( SELECT TOP 1 1	
                        FROM @TBL_PortalIds AS a	
                        WHERE a.PortalId = ZnodeGiftCard.PortalId	 );
		
                    DELETE FROM ZnodePortalLoginProvider	
                    WHERE EXISTS ( SELECT TOP 1 1	  FROM @TBL_PortalIds AS a	 WHERE a.PortalId = ZnodePortalLoginProvider.PortalId  );

--------------------------------------------------------------------------------------------------------

		 DELETE FROM  ZnodeBrandPortal  WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeBrandPortal.PortalId);
	    DELETE FROM  ZnodeCustomPortalDetail  WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCustomPortalDetail.PortalId);
		
		 DELETE FROM  ZnodeSupplier WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeSupplier.PortalId)

	     DELETE FROM  ZnodeOmsTemplateLineItem  WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP INNER JOIN ZnodeOmsTemplate ZOT ON 
	     TBP.PortalId = ZOT.PortalId AND ZOT.OmsTemplateId = ZnodeOmsTemplateLineItem.OmsTemplateId);

	     DELETE FROM ZnodeOmsTemplate WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeOmsTemplate.PortalId);
	     DELETE FROM  ZnodeOmsUsersReferralUrl WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeOmsUsersReferralUrl.PortalId)

		DELETE FROM ZnodePortalShipping WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalShipping.PortalId);
		DELETE FROM ZnodePortalTaxClass WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalTaxClass.PortalId);
		DELETE FROM ZnodePortalPaymentSetting WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalPaymentSetting.PortalId);
		DELETE FROM ZnodeCMSPortalMessageKeyTag WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSPortalMessageKeyTag.PortalId);
		DELETE FROM ZnodePriceListProfile WHERE PortalProfileID IN (SELECT PortalProfileID FROM ZnodePortalProfile WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalProfile.PortalId))
		DELETE FROM ZnodePortalProfile WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalProfile.PortalId);
		DELETE FROM ZnodePortalFeatureMapper WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalFeatureMapper.PortalId);
		DELETE FROM ZnodePortalShippingDetails WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalShippingDetails.PortalId);
		DELETE FROM ZnodePortalUnit WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalUnit.PortalId);
		DELETE FROM ZnodeDomain WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeDomain.PortalId);
		
		DELETE FROM ZnodePortalSearchProfile   WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalSearchProfile.PortalId);
		DELETE FROM dbo.ZnodePortalPixelTracking WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalPixelTracking.PortalId); 
		DELETE FROM ZnodeRobotsTxt WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeRobotsTxt.PortalId);
		DELETE FROM ZnodePortalSmtpSetting WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalSmtpSetting.PortalId);
		DELETE FROM ZnodeActivityLog WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeActivityLog.PortalId);
		DELETE FROM ZnodePortalCatalog WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalCatalog.PortalId );
		DELETE FROM ZnodeCMSPortalMessage  WHERE EXISTS  ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSPortalMessage.PortalId );
		DELETE FROM ZnodeGoogleTagManager WHERE  EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeGoogleTagManager.PortalId);
		DELETE FROM ZnodeTaxRuleTypes WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeTaxRuleTypes.PortalId);
		DELETE FROM ZnodeCMSContentPagesProfile WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeCMSContentPages ZCCP  
											WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZCCP.PortalId) AND ZCCP.CMSContentPagesId = ZnodeCMSContentPagesProfile.CMSContentPagesId )
		DELETE FROM ZnodeCMSContentPageGroupMapping WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeCMSContentPages ZCCP  
																	WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZCCP.PortalId) AND ZCCP.CMSContentPagesId = ZnodeCMSContentPageGroupMapping.CMSContentPagesId )
	     DELETE FROM ZnodeCMSContentPagesLocale WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeCMSContentPages ZCCP  
																	WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZCCP.PortalId) AND ZCCP.CMSContentPagesId = ZnodeCMSContentPagesLocale.CMSContentPagesId )
		
		DELETE FROM ZnodeBlogNewsCommentLocale WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeBlogNewsComment ZBC
													WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeBlogNews ZBN
														WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZBN.PortalId) AND ZBN.BlogNewsId = ZBC.BlogNewsId ) and ZBC.BlogNewsCommentId = ZnodeBlogNewsCommentLocale.BlogNewsCommentId)
		DELETE FROM ZnodeBlogNewsComment WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeBlogNews ZBN
													WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZBN.PortalId) AND ZBN.BlogNewsId = ZnodeBlogNewsComment.BlogNewsId )
		 
		DELETE FROM ZnodeBlogNewsContent WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeBlogNews ZBN
													WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZBN.PortalId) AND ZBN.BlogNewsId = ZnodeBlogNewsContent.BlogNewsId )
		DELETE FROM ZnodeBlogNewsLocale WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeBlogNews ZBN
		WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZBN.PortalId) AND ZBN.BlogNewsId = ZnodeBlogNewsLocale.BlogNewsId )
													
		DELETE FROM ZnodeBlogNews WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeBlogNews.PortalId)
		DELETE FROM  ZnodeFormWidgetEmailConfiguration 	WHERE CMSContentPagesId IN (SELECT CMSContentPagesId FROM ZnodeCMSContentPages WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSContentPages.PortalId))
		DELETE FROM ZnodeCMSContentPages WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSContentPages.PortalId);
		DELETE FROM ZnodeCaseRequestHistory WHERE CaseRequestId IN (SELECT CaseRequestId   FROM ZnodeCaseRequest WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCaseRequest.PortalId))
		DELETE FROM ZnodeCaseRequest WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCaseRequest.PortalId);
		DELETE FROM ZnodePortalLocale WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalLocale.PortalId);
		DELETE FROM ZnodeShippingPortal WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeShippingPortal.PortalId);
		
		DELETE FROM   @DeletedIds
		INSERT INTO @DeletedIds 
		SELECT DISTINCT UserId 
		FROM ZnodeUserPortal 
		WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeUserPortal.PortalId);

		--INSERT INTO @StatusOut (Id ,Status) 
		EXEC [dbo].Znode_DeleteUserDetails @UserIds = @DeletedIds , @status = 0,@IsForceFullyDelete =1 ,@IsCallInternal=1 
		
		DELETE FROM AspNetZnodeUser OUTPUT DELETED.AspNetZnodeUserId   INTO @TBL_DeletedUsers WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = AspNetZnodeUser.PortalId )
		
		DELETE FROM ZnodePortalAlternateWarehouse WHERE EXISTS ( SELECT TOP 1 1 FROM ZnodePortalWareHouse AS ZPWH WHERE EXISTS (
				SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZPWH.PortalId ) AND  ZPWH.PortalWarehouseId = ZnodePortalAlternateWarehouse.PortalWarehouseId);
		DELETE FROM ZnodePortalWareHouse WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalWareHouse.PortalId);
		DELETE ZnodePriceListPortal WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePriceListPortal.PortalId );
		
		DELETE FROM ZnodeEmailTemplateMapper WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeEmailTemplateMapper.PortalId);
		DELETE FROM ZnodeGIFtCard WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeGIFtCard.PortalId );
		DELETE FROM ZnodeCMSPortalProductPage WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSPortalProductPage.PortalId);

		DELETE FROM ZnodeCMSPortalSEOSetting WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSPortalSEOSetting.PortalId);

		DELETE FROM ZnodeCMSPortalTheme WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSPortalTheme.PortalId);

		DELETE FROM ZnodeCMSSEODetailLocale WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP INNER JOIN ZnodeCMSSEODetail AS zcsd ON TBP.PortalId = zcsd.PortalId WHERE zcsd.CMSSEODetailId = ZnodeCMSSEODetailLocale.CMSSEODetailId);
		 
		DELETE FROM ZnodeCMSSEODetail WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSSEODetail.PortalId);
		DELETE FROM ZnodePortalAccount WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalAccount.PortalId);
		DELETE FROM ZnodePortalAddress WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalAddress.PortalId);
		DELETE FROM ZnodePortalCountry WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalCountry.PortalId);
		DELETE FROM ZnodeCMSUrlRedirect WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSUrlRedirect.PortalId);
		DELETE FROM ZnodeTaxPortaL  WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeTaxPortaL.PortalId);
	   	INSERT INTO @TBL_Promotion( PromotionId ) SELECT PromotionId FROM ZnodePromotion WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePromotion.PortalId);
		DELETE FROM ZnodePromotionProduct WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_Promotion AS TBP WHERE TBP.PromotionId = ZnodePromotionProduct.PromotionId);
		DELETE FROM dbo.ZnodePromotionCoupon  WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_Promotion AS TBP WHERE TBP.PromotionId = ZnodePromotionCoupon.PromotionId);
		DELETE FROM ZnodePromotionCategory WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_Promotion AS TBP WHERE TBP.PromotionId = ZnodePromotionCategory.PromotionId);
		DELETE FROM ZnodePromotionCatalogs WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_Promotion AS TBP WHERE TBP.PromotionId = ZnodePromotionCatalogs.PromotionId);
		DELETE FROM ZnodePromotion WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_Promotion AS TBP WHERE TBP.PromotionId = ZnodePromotion.PromotionId);
		DELETE FROM ZnodeBlogNewsLocale WHERE exists (select top 1 1 from ZnodeBlogNews ZBN
													WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZBN.PortalId) AND ZBN.BlogNewsId = ZnodeBlogNewsLocale.BlogNewsId )
		
        DELETE a FROM ZnodeFormBuilderGlobalAttributeValueLocale	a 
			INNER JOIN ZnodeFormBuilderGlobalAttributeValue aa ON (a.FormBuilderGlobalAttributeValueId = aa.FormBuilderGlobalAttributeValueId)INNER JOIN ZnodeFormBuilderSubmit b ON (b.FormBuilderSubmitId =aa.FormBuilderSubmitId)
			 WHERE EXISTS ( SELECT TOP 1 1
									   FROM @TBL_PortalIds AS TBDL
									   WHERE TBDL.PortalId = b.PortalId      
									 ); 
		DELETE a FROM ZnodeFormBuilderGlobalAttributeValue a INNER JOIN ZnodeFormBuilderSubmit b ON (b.FormBuilderSubmitId =a.FormBuilderSubmitId)
		 WHERE EXISTS ( SELECT TOP 1 1
								   FROM @TBL_PortalIds AS TBDL
								   WHERE TBDL.PortalId = b.PortalId      
								 ); 
		DELETE FROM ZnodeFormBuilderSubmit 
		WHERE EXISTS ( SELECT TOP 1 1
								   FROM @TBL_PortalIds AS TBDL
								   WHERE TBDL.PortalId = ZnodeFormBuilderSubmit.PortalId      
								 );   
		DELETE FROM   @DeletedIds
		INSERT INTO @DeletedIds 
		SELECT DISTINCT a.OmsOrderId 
		FROM ZnodeOmsOrder A 
		INNER JOIN ZnodeOMsOrderDetails b  ON (b.OmsOrderId = a.OmsOrderId )
		WHERE   EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = b.PortalId)

		INSERT INTO @StatusOut (Id ,Status) 
		EXEC [dbo].[Znode_DeleteOrderById] @OmsOrderIds = @DeletedIds , @status = 0 

		DELETE FROM @DeletedIds DELETE FROM @StatusOut 									  
		
		DELETE FROM dbo.ZnodeSearchSynonyms	 WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalCatalog Tt WHERE Tt.PublishCatalogId = ZnodeSearchSynonyms.PublishCatalogId )
		DELETE FROM ZnodePublishedXml 
		DELETE FROM ZnodePublishCatalogLog	 WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalCatalog Tt WHERE Tt.PublishCatalogId = ZnodePublishCatalogLog.PublishCatalogId )
		DELETE FROM ZnodePublishCatalogSearchProfile WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalCatalog Tt WHERE Tt.PublishCatalogId = ZnodePublishCatalogSearchProfile.PublishCatalogId )
		DELETE FROM ZnodePublishCategoryProduct   WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalCatalog Tt WHERE Tt.PublishCatalogId = ZnodePublishCategoryProduct.PublishCatalogId )
		DELETE FROM ZnodePublishCategoryDetail 	WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePublishCategoryProduct Tt WHERE Tt.PublishCategoryId = ZnodePublishCategoryDetail.PublishCategoryId )
		DELETE FROM ZnodePublishProductDetail WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePublishCategoryProduct Tt WHERE Tt.PublishCategoryId = ZnodePublishProductDetail.PublishProductId )
		
		DELETE FROM ZnodeCMSWidgetCategory WHERE PublishCategoryId IN (SELECT PublishCategoryId FROM ZnodePublishCategory   WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalCatalog Tt WHERE Tt.PublishCatalogId = ZnodePublishCategory.PublishCatalogId ))

		DELETE FROM ZnodePublishCategory   WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalCatalog Tt WHERE Tt.PublishCatalogId = ZnodePublishCategory.PublishCatalogId )
		DELETE FROM dbo.ZnodeCMSWidgetProduct	WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePublishCategoryProduct Tt WHERE Tt.PublishProductId = ZnodeCMSWidgetProduct.PublishProductId )
		DELETE FROM dbo.ZnodeSearchGlobalProductBoost	WHERE PublishProductId IN (SELECT PublishProductId FROM ZnodePublishProduct	 WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalCatalog Tt WHERE Tt.PublishCatalogId = ZnodePublishProduct.PublishCatalogId ))
		DELETE FROM ZnodeCMSCustomerReview 
			WHERE PublishProductId IN (SELECT PublishProductId FROM ZnodePublishProduct	 WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalCatalog Tt WHERE Tt.PublishCatalogId = ZnodePublishProduct.PublishCatalogId ))
		DELETE FROM ZnodePublishProduct	 WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalCatalog Tt WHERE Tt.PublishCatalogId = ZnodePublishProduct.PublishCatalogId )
		DELETE FROM dbo.ZnodeSearchIndexServerStatus WHERE SearchIndexMonitorId IN (SELECT SearchIndexMonitorId FROM dbo.ZnodeSearchIndexMonitor WHERE CatalogIndexId IN (SELECT CatalogIndexId FROM ZnodeCatalogIndex	 WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalCatalog Tt WHERE Tt.PublishCatalogId = ZnodeCatalogIndex.PublishCatalogId )))
		DELETE FROM dbo.ZnodeSearchIndexMonitor WHERE CatalogIndexId IN (SELECT CatalogIndexId FROM ZnodeCatalogIndex	 WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalCatalog Tt WHERE Tt.PublishCatalogId = ZnodeCatalogIndex.PublishCatalogId ))
		DELETE FROM  ZnodeCatalogIndex   WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalCatalog Tt WHERE Tt.PublishCatalogId = ZnodeCatalogIndex.PublishCatalogId )
		DELETE FROM ZnodeSearchDocumentMapping WHERE PublishCatalogId IN (SELECT PublishCatalogId FROM ZnodePublishCatalog	  WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalCatalog Tt WHERE Tt.PublishCatalogId = ZnodePublishCatalog.PublishCatalogId ))
		
		DELETE FROM ZnodePublishCatalog	  WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalCatalog Tt WHERE Tt.PublishCatalogId = ZnodePublishCatalog.PublishCatalogId )
		DELETE FROM ZnodeOmsPersonalizeCartItem WHERE OmsSavedCartLineItemId IN (SELECT OmsSavedCartLineItemId FROM ZnodeOmsSavedCartLineItem WHERE OmsSavedCartId IN (SELECT OmsSavedCartId FROM ZnodeOmsSavedCart WHERE OmsCookieMappingId IN (SELECT OmsCookieMappingId FROM ZnodeOmsCookieMapping WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeOmsCookieMapping.PortalId) ) 	 )) 
		DELETE FROM ZnodeOmsSavedCartLineItem WHERE OmsSavedCartId IN (SELECT OmsSavedCartId FROM ZnodeOmsSavedCart WHERE OmsCookieMappingId IN (SELECT OmsCookieMappingId FROM ZnodeOmsCookieMapping WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeOmsCookieMapping.PortalId) ) 	 )
		DELETE FROM ZnodeOmsSavedCart WHERE OmsCookieMappingId IN (SELECT OmsCookieMappingId FROM ZnodeOmsCookieMapping WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeOmsCookieMapping.PortalId) ) 
		DELETE FROM ZnodeOmsCookieMapping WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeOmsCookieMapping.PortalId); 
		DELETE FROM ZnodeDomain WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeDomain.PortalId);
		
		DELETE FROM ZnodeSalesRepCustomerUserPortal WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeSalesRepCustomerUserPortal.CustomerPortalId);

		delete from ZnodeSalesRepCustomerUserPortal 
		where exists(select * FROM ZnodeUserPortal WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeUserPortal.PortalId) and ZnodeSalesRepCustomerUserPortal.UserPortalId = ZnodeUserPortal.UserPortalId);
		

		DELETE FROM ZnodePortalRecommendationSetting  
		WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalRecommendationSetting.PortalId);
		
		DELETE FROM ZnodePortalPageSetting  
		WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalPageSetting.PortalId);
			
		DELETE FROM ZnodePortal WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortal.PortalId);
		
		PRINT '<-- Store Data Deleted Sucessfully-->'
	   
	   IF  NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortal) 
	   BEGIN 
	        SET @CMSThemeId = NULL 
			SET @CMSThemeCSSId = NULL  
			
	        SET IDENTITY_INSERT [dbo].[ZnodePortal] ON 
			INSERT [dbo].[ZnodePortal] ([PortalId], [CompanyName], [StoreName], [LogoPath], [UseSSL], [AdminEmail], [SalesEmail], [CustomerServiceEmail], [SalesPhoneNumber], [CustomerServicePhoneNumber], [ImageNotAvailablePath], [ShowSwatchInCategory], [ShowAlternateImageInCategory], [ExternalID], [MobileLogoPath], [DefaultOrderStateID], [DefaultReviewStatus], [SplashCategoryID], [SplashImageFile], [MobileTheme], [CopyContentBasedOnPortalId], [CreatedBy], [CreatedDate], [ModIFiedBy], [ModIFiedDate], [InStockMsg], [OutOfStockMsg], [BackOrderMsg], [OrderAmount], [Email], [StoreCode]) 
			VALUES (1, N'DemoStore', N'DemoStore', NULL, 0, N'test@znode.com', N'test@znode.com', N'test@znode.com', N'123456789', N'123456789', N'', 0, 0, NULL, NULL, 50, N'N', NULL, NULL, NULL, NULL, 2, CAST(N'2018-04-23T01:05:48.620' AS DateTime), 2, CAST(N'2018-04-23T01:05:48.620' AS DateTime), N'Demo', N'Demo', N'Demo', NULL, NULL, 'DemoStore')
			SET IDENTITY_INSERT [dbo].[ZnodePortal] OFF
			SET @PortalId  = 1
			INSERT INTO ZnodePimCatalog (CatalogName,IsActive,ExternalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			SELECT 'DefaultCatalog' , 1 ,NULL,2 ,GETDATE(),2,GETDATE() 
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimCatalog r WHERE r.CatalogName = 'DefaultCatalog' )
			SET @PimCatalogId = CASE WHEN @PimCatalogId IS nULL THEN (SELECT TOP 1 PimCatalogId FROM ZnodePimCatalog WHERE	CatalogName = 'DefaultCatalog'  ) ELSE  @PimCatalogId END 	
			INSERT INTO ZnodePublishCatalog (PimCatalogId
			,CatalogName
			,ExternalId
			,CreatedBy
			,CreatedDate
			,ModIFiedBy
			,ModIFiedDate
			,Tokem)
			SELECT @PimCatalogId,'DefaultCatalog' , '',2,GETDATE(),2,GETDAte(),''
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishCatalog WHERE CatalogName = 'DefaultCatalog')
			SET  @PublishCatalogId = CASE WHEN  @PublishCatalogId IS nULL THEN (SELECT TOP 1 PublishCatalogId  FROM ZnodePublishCatalog WHERE CatalogName = 'DefaultCatalog'   )  ELSE @PublishCatalogId END 
			INSERT INTO ZnodeCMSTheme(Name
			,CreatedBy
			,CreatedDate
			,ModIFiedBy
			,ModIFiedDate
			,IsParentTheme
			,ParentThemeId)
			SELECT 'Default',2,GETDATE(),2,GETDATE(),1,NULL
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSTheme WHERE Name = 'Default')
			SET  @CMSThemeId = CASE WHEN @CMSThemeId IS nULL THEN (SELECT TOP 1 CMSThemeId FROM ZnodeCMSTheme WHERE Name = 'Default'   )  ELSE @CMSThemeId END  
		
			INSERT INTO ZnodeCMSThemeCSS  (CMSThemeId
			,CSSName
			,CreatedBy
			,CreatedDate
			,ModIFiedBy
			,ModIFiedDate)
			SELECT @CMSThemeId,'DefaultCSS',2,GETDATE(),2,GETDATE()
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSThemeCSS WHERE CSSName = 'DefaultCSS')
			SET  @CMSThemeCSSId = CASE WHEN @CMSThemeCSSId IS nULL THEN (SELECT TOP 1 CMSThemeCSSId FROM ZnodeCMSThemeCSS WHERE CSSName = 'DefaultCSS'  )  ELSE @CMSThemeCSSId END  
		
			INSERT INTO ZnodeCMSPortalTheme (PortalId
			,CMSThemeId
			,CMSThemeCSSId
			,MediaId
			,FavIconId
			,WebsiteTitle
			,CreatedBy
			,CreatedDate
			,ModIFiedBy
			,ModIFiedDate	)    
			SELECT  @PortalId,@CMSThemeId,@CMSThemeCSSId,NULL,NULL,NULL,2,GETDATE(),2,GETDATE()
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSPortalTheme WHERE PortalId  = @PortalId  )
			INSERT INTO ZnodePortalCatalog (PortalId
			,PublishCatalogId
			,CreatedBy
			,CreatedDate
			,ModIFiedBy
			,ModIFiedDate)
			SELECT @PortalId,@PublishCatalogId,2,GETDATE(),2,GETDATE()
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePortalCatalog WHERE PortalId  = @PortalId )
			
			INSERT INTO ZnodeDomain (PortalId,DomainName ,IsActive,ApplicationType,CreatedBy ,CreatedDate ,ModIFiedBy ,ModIFiedDate)
			SELECT DISTINCT 1,DomainName ,IsActive,ApplicationType,CreatedBy ,GETDATE()CreatedDate ,ModIFiedBy ,GETDATE()ModIFiedDate 
			FROM _ZnodeDomain  TR
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeDomain TY WHERE TR.PortalId = TY.PortalId AND TR.DomainName = TY.DomainName) 
			GROUP BY DomainName ,IsActive,ApplicationType,CreatedBy,ModifiedBy

			INSERT INTO ZnodePortalUnit (PortalId,CurrencyId,WeightUnit,DimensionUnit,CurrencySuffix,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			SELECT @PortalId,(SELECT TOP 1 CurrencyId FROM ZnodeCulture WHERE CultureCode = 'en-US' ) 
			,'Lbs','IN','USD',2,GETDATE(),2,GETDATE()
			WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalUnit  WHERE PortalId = @PortalId AND CurrencyId = (SELECT TOP 1 CurrencyId FROM ZnodeCulture WHERE CultureCode = 'en-US')  )

	   END 
	   
		
		   END  
			 DELETE FROM @DeletedIds DELETE FROM @StatusOut 
			 IF  @ResetDomainData = 1  OR @DeleteAllData =1     
			 BEGIN 
			  DECLARE @OneportalId INT = (SELECT TOP 1 PortalId  FROM ZnodePortal)
			  DELETE FROM ZnodeDomain 
			  INSERT INTO znodedomain(PortalId,DomainName,	IsActive,	ApiKey,	ApplicationType,	CreatedBy,	CreatedDate	,ModIFiedBy	,ModIFiedDate)
			  SELECT @OneportalId, 'localhost:6766',1, '115915F1-7E6B-4386-A623-9779F27D9A5E','Admin',2,GETDATE(),2,GETDATE()
			  WHERE NOT EXISTS(SELECT * FROM znodedomain WHERE DomainName = 'localhost:6766'  and PortalId = (SELECT TOP 1 PortalId FROM ZnodePortal ))
			  
			  INSERT INTO znodedomain(PortalId,DomainName,	IsActive,	ApiKey,	ApplicationType,	CreatedBy,	CreatedDate	,ModIFiedBy	,ModIFiedDate)
			  SELECT @OneportalId, 'localhost:3288',1, 'c58cc0c0-1349-4001-8416-cf1cea7960e8','WebStore',2,GETDATE(),2,GETDATE()
			  WHERE NOT EXISTS(SELECT * FROM znodedomain WHERE DomainName = 'localhost:3288'  and PortalId = (SELECT TOP 1 PortalId FROM ZnodePortal ))
			  
			  INSERT INTO znodedomain(PortalId,DomainName,	IsActive,	ApiKey,	ApplicationType,	CreatedBy,	CreatedDate	,ModIFiedBy	,ModIFiedDate)
			  SELECT @OneportalId, 'localhost:44762',1, '8a8b4931-7d57-42e8-a005-b1c0cce49f1d','Api',2,GETDATE(),2,GETDATE()
			  WHERE NOT EXISTS(SELECT * FROM znodedomain WHERE DomainName = 'localhost:44762' and PortalId = (SELECT TOP 1 PortalId FROM ZnodePortal ) )
			  
			  INSERT INTO znodedomain(PortalId,DomainName,	IsActive,	ApiKey,	ApplicationType,	CreatedBy,	CreatedDate	,ModIFiedBy	,ModIFiedDate)
			  SELECT  @OneportalId  , 'localhost',1, '115915F1-7E6B-4386-A623-9779F27D9A5E','Admin',2,GETDATE(),2,GETDATE()
			  WHERE NOT EXISTS(SELECT * FROM znodedomain WHERE DomainName = 'localhost'  and PortalId = (SELECT TOP 1 PortalId FROM ZnodePortal ))
			 PRINT '<-- Domain reset Sucessfully-->'
			 END 
		DELETE FROM @DeletedIds DELETE FROM @StatusOut 
		IF @DeleteAllShippingMethods = 1 OR @DeleteAllData =1 
		BEGIN 
		
		   	SET @DeleteId = Substring((select  ',' + convert(nvarchar(500), ShippingId)  
					FROM ZnodeShipping for XML Path ('')),2,4000) 
		  -- INSERT INTO @StatusOut (Id ,Status)

		   EXEC Znode_DeleteShipping  @ShippingId = @DeleteId , @Status =0 ,@IsForceFullyDelete =1 
		   
		 PRINT '<-- Shipping Methods are Deleted Sucessfully-->'
			   
		END
		DELETE FROM @DeletedIds DELETE FROM @StatusOut  
		IF @DeleteAllPaymentMethods	 = 1  OR @DeleteAllData =1 
		BEGIN 
			 	 
		INSERT INTO @DeletedIds 
		SELECT DISTINCT a.OmsOrderId 
		FROM ZnodeOmsOrder A 
		INNER JOIN ZnodeOMsOrderDetails b  ON (b.OmsOrderId = a.OmsOrderId )
		WHERE   EXISTS ( SELECT TOP 1 1 FROM ZnodePaymentSetting AS TBP WHERE TBP.PaymentSettingId = b.PaymentSettingId)

		INSERT INTO @StatusOut (Id ,Status) 
		EXEC [dbo].[Znode_DeleteOrderById] @OmsOrderIds = @DeletedIds , @status = 0 
		 
		 DELETE FROM ZnodePortalPaymentSetting 
		 DELETE FROM ZnodeProfilePaymentSetting
		 DELETE FROM ZnodePaymentSetting
		
			  
		 PRINT '<-- Payment Methods are Deleted Sucessfully-->'
			   
		END 
		DELETE FROM @DeletedIds DELETE FROM @StatusOut 
		IF @DeleteAllTaxes	= 1 OR @DeleteAllData =1 		
		BEGIN 
		 
		  	SET @DeleteId = Substring((select  ',' + convert(nvarchar(500), TaxClassId)  
					FROM ZnodeTaxClass for XML Path ('')),2,4000) 
		-- INSERT INTO @StatusOut (Id ,Status) 
		 EXEC [dbo].[Znode_DeleteTaxClass] @TaxClassId =  @DeleteId, @status = 0 , @IsForceFullyDelete =1 
		 DELETE FROM ZnodeTaxRuleTypes   
     	 PRINT '<-- Taxes Data Deleted Sucessfully-->'
		 		 
		END 
		IF  @ResetIdentity =1  OR @DeleteAllData =1 
		 BEGIN
		 DECLARE @table_name varchar(100)= NULL, @showReport bit= 0, @debug bit= 0
	
		IF  OBJECT_ID('tempdb..#reseed_temp1') < 0 
			Drop TABLE #reseed_temp1 
		CREATE TABLE   #reseed_temp1 
		( 
					 tbame varchar(100), mvalue varchar(20) DEFAULT 0
		)

			DECLARE @Tablename varchar(256), @columnname varchar(256), @IndentValue numeric, @query varchar(4000), @query1 nvarchar(4000), @id int;

			DECLARE Cur_Reseed CURSOR LOCAL FAST_FORWARD
			FOR SELECT b.name, c.name
				FROM sys.objects AS a, sys.objects AS b, sys.columns AS c
				WHERE a.type = 'PK' AND 
					  a.parent_object_id = b.object_id AND 
					  b.object_id = c.object_id AND 
					  c.column_id = 1 AND 
					  is_identity <> 0 AND 
					  b.name NOT LIKE '%-%' AND 
					  b.name NOT LIKE '%(%' AND 
					  RTRIM(LTRIM(b.name)) = RTRIM(LTRIM(COALESCE(@table_name, b.name)));

			OPEN Cur_Reseed;

			FETCH NEXT FROM Cur_Reseed INTO @Tablename, @columnname;

			WHILE(@@FETCH_STATUS = 0)

			BEGIN

				 IF  @columnname <> ''

				BEGIN

					SET @query = 'insert into #reseed_temp1  (tbame, mvalue) ( select  '''+@Tablename+''', max( '+@columnname+') from '+@Tablename+')';

					EXECUTE (@query);

					SELECT @Tablename = tbame, @IndentValue = isnull(mvalue,1)
					FROM #reseed_temp1 ;



					DBCC CHECKIDENT(@Tablename, RESEED, @IndentValue);



				END;

				FETCH NEXT FROM Cur_Reseed INTO @Tablename, @columnname;

			END;
			CLOSE Cur_Reseed;
			DEALLOCATE Cur_Reseed;
			DROP TABLE #reseed_temp1
		PRINT '<---Reset Identity Sucessfully-->'
		END   
		--COMMIT TRAN  CleanUpProcess
	 END TRY 
	 BEGIN CATCH 
	 SELECT ERROR_MESSAGE()
	--ROLLBACK TRAN CleanUpProcess
	 END CATCH  
END

go
IF exists(select * from sys.procedures where name = 'Znode_AdminUsers')
	drop proc Znode_AdminUsers
go

CREATE PROCEDURE [dbo].[Znode_AdminUsers]
(	@RoleName		VARCHAR(200),
    @UserName		VARCHAR(200),
    @WhereClause	XML,
    @Rows			INT           = 100,
    @PageNo			INT           = 1,
    @Order_By		VARCHAR(1000) = '',
    @RowCount		INT        = 0 OUT,
	@IsCallOnSite   BIT = 0 ,
	@PortalId		VARCHAR(1000) = 0,
	@IsGuestUser    BIT = 0,
	@ColumnName     dbo.SelectColumnList ReadOnly
)
AS
   /* 
      Summary: List of users with detsils and shows link with ASPNet tables 
      This procedure is used for finding both users and admin users 
      here use three view "View_RoleUsers" for check  @UserName is present or not 
      "View_AdminUserDetail"  this view use for admin users 
      "View_CustomerUserDetail" Use for customer users 
      Unit Testing   
	  SELECT * FROM ZnodeUser 
      DECLARE @EDE INT=0  EXEC Znode_AdminUsers '','admin@znode.com',@WhereClause='',@Order_By='',@PageNo= 1 ,@Rows= 214,@IsCallOnSite='false',@PortalId=0,@RowCount=@EDE OUT  SELECT @EDE
   */
     BEGIN
         BEGIN TRY
            SET NOCOUNT ON;
			
            DECLARE @SQL NVARCHAR(MAX)= '', @PaginationWhereClause VARCHAR(300)= dbo.Fn_GetRowsForPagination(@PageNo, @Rows, ' WHERE RowId');
            
			if OBJECT_ID('tempdb..##CustomerUserAddDetail') is not null
				drop table ##CustomerUserAddDetail

			if OBJECT_ID('tempdb..##View_CustomerUserAddDetail') is not null
				drop table ##View_CustomerUserAddDetail

			IF OBJECT_ID('tempdb..#TBL_RowCount') is not null
				DROP TABLE #TBL_RowCount
			Create table #TBL_RowCount(RowsCount int )
			-----Split where clause XMl 
			CREATE TABLE #WhereColumnList(RowId Int identity, filterName varchar(max), WhereCondition varchar(max))
			insert into #WhereColumnList(filterName,WhereCondition)
			SELECT 
					Tbl.Col.value('key[1]', 'varchar(max)') as filterName,
					Tbl.Col.value('condition[1]', 'varchar(max)') WhereCondition
			FROM   @WhereClause.nodes('//filter') Tbl(Col) 
			----Address column in global search
			declare @AddressGlobalSearch varchar(1000) =''
			declare @GlobalSearch varchar(100) = ''
			
			select @GlobalSearch = substring(WhereCondition,charindex(' like ',WhereCondition), charindex(' OR ',WhereCondition)-charindex(' like ',WhereCondition)) 
			from #WhereColumnList
			where filtername like '%|%'
			and filtername <> ''
			and filterName in ('CityName','CountryName','PostalCode','StateName','CompanyName') 

			

			if isnull(@GlobalSearch,'') <> ''
			begin
				select @AddressGlobalSearch = '('+'CityName '+ @GlobalSearch+' OR '+'CountryName '+ @GlobalSearch+' OR '+'PostalCode '+ @GlobalSearch+' OR '+'StateName '+ @GlobalSearch+' OR '+'CompanyName '+ @GlobalSearch+')'
			end
			else
			begin
				SET @AddressGlobalSearch = ''
			end
			----Global search where clause
			declare @WhereClauseGlobal varchar(1000)=''
			select @WhereClauseGlobal = ISNULL(WhereCondition,'')
			from #WhereColumnList
			where filtername like '%|%'
			and filtername <> ''
			
			----Where clause columns except Address columns
			declare @WhereClause1 varchar(max) = ''
			select @WhereClause1 = COALESCE(@WhereClause1 + '', '') + WhereCondition+' And '
			--case when @WhereClause1 <> ''  then ' And ' else '' end
			from #WhereColumnList a
			where filterName not like '%|%' and
			filterName not in ('CountryName','CityName','StateName','PostalCode','CompanyName')
			and filtername <> ''

			if @WhereClause1 <> ''
			begin
				set @WhereClause1=isnull(substring(@WhereClause1,1,len(@WhereClause1)-3),'')
			end
			else
			begin
				set @WhereClause1 = ''
			end

			----Where clause columns
			declare @AddressColumnWhereClause varchar(max) 
			select @AddressColumnWhereClause = COALESCE(@AddressColumnWhereClause + '', '') + WhereCondition+' And '
			from #WhereColumnList a
			where filterName not like '%|%' and
			filterName in ('CountryName','CityName','StateName','PostalCode','CompanyName')
			and filtername <> ''
			
			if isnull(@AddressColumnWhereClause,'') <> ''
			begin
				set @AddressColumnWhereClause=isnull(substring(@AddressColumnWhereClause,1,len(@AddressColumnWhereClause)-3),'')
            end
			else
			begin
				set @AddressColumnWhereClause = ''
			end

			declare @WhereClauseAll varchar(max) = ''
			select @WhereClauseAll = COALESCE(@WhereClauseAll + '', '') + WhereCondition+' And '
			from #WhereColumnList a
			

			set @WhereClauseAll=isnull(CASE WHEN @WhereClauseAll = '' THEN '' ELSE substring(@WhereClauseAll,1,len(@WhereClauseAll)-3) END ,'')
			-------------- 
			
			IF @PortalId  <> '0' 
			BEGIN 
			    SET @WhereClauseAll = CASE WHEN  @WhereClauseAll = '' THEN ' (PortalId IN ('+@PortalId+') OR PortalId IS NULL) ' ELSE @WhereClauseAll+' AND (PortalId IN ('+@PortalId+') OR PortalId IS NULL) ' END 

				SET @WhereClause1 = CASE WHEN  @WhereClause1 = '' THEN ' (isnull(PortalId,0) IN ('+@PortalId+') OR PortalId IS NULL) ' ELSE @WhereClause1+' AND (isnull(PortalId,0) IN ('+@PortalId+') OR PortalId IS NULL) ' END 
			
			END 

			IF EXISTS ( SELECT TOP 1 1 FROM View_RoleUsers  WHERE Username = @UserName   )  AND @RoleName <> ''  
			-- this check for admin user
       		BEGIN
				SET @SQL = ' SELECT  A.UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,A.CreatedBy,A.CreatedDate,A.ModifiedBy,A.ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId ,CustomerPaymentGUID
				INTO #Cte_AdminUserDetail
				FROM View_AdminUserDetail A
				'+CASE WHEN @PortalId  <> '0' THEN ' INNER JOIN ZnodeUserPortal ZUP ON (ZUP.UserId = A.UserId) 'ELSE '' END  +'	 
				'+dbo.Fn_GetWhereClause(@WhereClauseAll, ' WHERE ')+'
				
				;with Cte_AdminUserDetailRowId AS 
				(
				SELECT UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId,CustomerPaymentGUID ,RANK()Over('+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC')+',UserId DESC) RowId
				FROM  #Cte_AdminUserDetail
				)
					 
				SELECT UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId,CustomerPaymentGUID ,RowId 
				INTO #AccountDetails
				FROM Cte_AdminUserDetailRowId 
					 
				SET @Count= ISNULL((SELECT  Count(1) FROM #AccountDetails ),0)
					 
				SELECT DISTINCT UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId ,CustomerPaymentGUID
				FROM #AccountDetails '+@PaginationWhereClause+' '+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC' );
				EXEC SP_executesql
				@SQL,
				N'@Count INT OUT',
				@Count = @RowCount OUT;

				
			END;
			-- For Customer user
            ELSE   
			BEGIN
				IF @roleName = ''
				BEGIN
					if OBJECT_ID('tempdb..##CustomerUserAddDetail') is not null
					drop table ##CustomerUserAddDetail

					if OBJECT_ID('tempdb..##View_CustomerUserAddDetail') is not null
					drop table ##View_CustomerUserAddDetail
				
					if OBJECT_ID('tempdb..##UserList') is not null
					drop table ##UserList

					CREATE TABLE ##UserList(UserId int,AddressID int)

					declare @UserList varchar(1000)=''

					------To get the list of user having adress column in global search
					if (@AddressGlobalSearch <> '')
					begin
				
					set @UserList = 'select a.UserId, b.AddressID	from ZnodeUserAddress a	inner join ZnodeAddress b on a.AddressId = b.AddressId	where '+@AddressGlobalSearch
					--print @UserList
					insert into ##UserList(UserId, b.AddressID)
					exec (@UserList)
			
					end
					----To get the list of user having adress column in where clause 
					if (@AddressColumnWhereClause <> '')
					begin
					
					set @UserList = 'select a.UserId, b.AddressID	from ZnodeUserAddress a	inner join ZnodeAddress b on a.AddressId = b.AddressId	where '+@AddressColumnWhereClause
					--print @UserList
					insert into ##UserList(UserId,AddressID)
					exec (@UserList)
					
					end

					If @IsGuestUser= 0 
					AND
					NOT Exists (Select filterName from #WhereColumnList where filterName in ('accountid','isaccountcustomer','UserId') and filtername <> '')
					-- Customer List with GuestUsers
					Begin
						SET @SQL = 
							'SELECT a.userId,a.AspNetuserId,a.UserName,a.FirstName,a.MiddleName,a.LastName
							,a.PhoneNumber,
							 a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
							 CONVERT( DATE, a.ModifiedDate) ModifiedDate, 0 RoleId,''''  RoleName,
							 (ISNULL(RTRIM(LTRIM(a.FirstName)), '''')+'' ''+ISNULL(RTRIM(LTRIM(a.MiddleName)), '''')+CASE
							 WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '''') = ''''	THEN ''''
							 ELSE '' ''	END+ISNULL(RTRIM(LTRIM(a.LastName)), ''''))  FullName
							 ,a.AccountId, '''' TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser
							 into ##View_CustomerUserAddDetail
							 FROM ZnodeUser a
							' 
						
						
						EXEC (@SQL)
					End	
					Else If @IsGuestUser= 1 
					Begin
							SET @SQL='SELECT a.userId,a.AspNetuserId,a.UserName,a.FirstName,a.MiddleName,a.LastName
							,a.PhoneNumber,
							a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
							CONVERT( DATE, a.ModifiedDate) ModifiedDate,ur.RoleId,r.Name RoleName,
							(ISNULL(RTRIM(LTRIM(a.FirstName)), '''')+'' ''+ISNULL(RTRIM(LTRIM(a.MiddleName)), '''')+CASE
							WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '''') = '''' THEN '''' ELSE '' '' END+ISNULL(RTRIM(LTRIM(a.LastName)), '''')) FullName,
							a.AccountId,r.TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser
							into ##View_CustomerUserAddDetail
							FROM ZnodeUser a
							LEFT JOIN AspNetUserRoles ur ON(ur.UserId = a.AspNetUserId)
							LEFT JOIN AspNetRoles r ON(r.Id = ur.RoleId)                       
							LEFT JOIN ZnodePortalAccount ZPA ON(ZPA.AccountId = a.AccountId) 
							WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeUSer ZUQ WHERE ZUQ.UserId = a.UserId AND ZUQ.EmailOptIn = 1 AND ZUQ.AspNetUserId IS NULL )
							AND a.AspNetuserId is null'
						EXEC (@SQL)
					End
					Else IF Exists (Select filterName from #WhereColumnList where filterName in ('UserId') and filtername <> '')
					and  @IsGuestUser= 0   
					-- Customer List for user edit single user 
					Begin
					SET @SQL='SELECT a.userId,a.AspNetuserId,a.UserName,a.FirstName,a.MiddleName,a.LastName
					,a.PhoneNumber, a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
							CONVERT( DATE, a.ModifiedDate) ModifiedDate,ur.RoleId,r.Name RoleName,
							(ISNULL(RTRIM(LTRIM(a.FirstName)), '''')+'' ''+ISNULL(RTRIM(LTRIM(a.MiddleName)), '''')+CASE
							WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '''') = '''' THEN '''' ELSE '' '' END+ISNULL(RTRIM(LTRIM(a.LastName)), '''')) FullName,
							a.AccountId, r.TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser
							into ##View_CustomerUserAddDetail
							FROM ZnodeUser a
							LEFT JOIN ZnodeAccount e ON(e.AccountId = a.AccountId)
							LEFT JOIN AspNetUserRoles ur ON(ur.UserId = a.AspNetUserId)
							LEFT JOIN AspNetRoles r ON(r.Id = ur.RoleId)                       
							LEFT JOIN ZnodePortalAccount ZPA ON(ZPA.AccountId = a.AccountId) 
							WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeUSer ZUQ WHERE ZUQ.UserId = a.UserId AND ZUQ.EmailOptIn = 1 AND ZUQ.AspNetUserId IS NULL )'
						print @SQL
						
						EXEC (@SQL)
					End	
					Else -- Account user List 
					Begin
							SELECT a.userId,a.AspNetuserId,a.UserName,a.PhoneNumber,a.FirstName,a.MiddleName,a.LastName
							,a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
							CONVERT( DATE, a.ModifiedDate) ModifiedDate,ur.RoleId,r.Name RoleName,
						    (ISNULL(RTRIM(LTRIM(a.FirstName)), '')+' '+ISNULL(RTRIM(LTRIM(a.MiddleName)), '')+CASE
							WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '') = '' THEN '' ELSE ' ' END+ISNULL(RTRIM(LTRIM(a.LastName)), '')) FullName,
							a.AccountId, r.TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser
							into ##View_CustomerUserAddDetail
							FROM ZnodeUser a
							LEFT JOIN ZnodeAccount e ON(e.AccountId = a.AccountId)
							LEFT JOIN AspNetUserRoles ur ON(ur.UserId = a.AspNetUserId)
							LEFT JOIN AspNetRoles r ON(r.Id = ur.RoleId)                       
							LEFT JOIN ZnodePortalAccount ZPA ON(ZPA.AccountId = a.AccountId) 
							WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeUSer ZUQ WHERE ZUQ.UserId = a.UserId AND ZUQ.EmailOptIn = 1 AND ZUQ.AspNetUserId IS NULL )
					End
					
					alter table ##View_CustomerUserAddDetail 
					add StoreName varchar(1000), CountryName varchar(1000),CityName varchar(1000),StateName varchar(1000),
					PostalCode varchar(1000), CompanyName varchar(1000), SalesRepUserName varchar(600),SalesRepFullName varchar(1000), PortalId INT 

					IF @PortalId > 0 
					BEGIN 
					   UPDATE a SET a.PortalId = b.PortalId
					   FROM ##View_CustomerUserAddDetail a 
					   INNER JOIN ZnodeUserPortal b ON (b.Userid = a.Userid )
					END 

					IF (@WhereClauseAll like '%StoreName%' or @Order_By like '%StoreName%' )
					BEGIN
						CREATE NONCLUSTERED INDEX ##View_CustomerUserAddDetail_UserId
					   ON [dbo].[##View_CustomerUserAddDetail] ([userId])

						update  a set StoreName = CASE WHEN zp.StoreName IS NULL THEN 'ALL' ELSE zp.StoreName END 
						             -- , PortalId = up.PortalId
						from ##View_CustomerUserAddDetail a
						Left join  ZnodeUserPortal up ON(up.UserId = a.UserId)  
						Left JOIN ZnodePortal zp ON (up.PortalId = zp.PortalId)
							
					END
					
					IF (@WhereClauseAll like '%CountryName%' OR @WhereClauseAll like '%CityName%' OR @WhereClauseAll like '%StateName%' OR @WhereClauseAll like '%PostalCode%' OR @WhereClauseAll like '%CompanyName%')
					BEGIN
			 
						update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
						PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName
						from ##View_CustomerUserAddDetail a
						inner join ZnodeAccountAddress ZAA on a.AccountId = ZAA.AccountId
						inner  JOIN ZnodeAddress ZA on ZA.AddressId = ZAA.AddressId
						where isnull(a.AccountId,0)<> 0-- is not null
	 
						update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
						PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName
						from ##View_CustomerUserAddDetail a
						inner join ZnodeUserAddress ZUA on a.UserId = ZUA.UserId
						inner  JOIN ZnodeAddress ZA on ZA.AddressId = zua.AddressId
					END

					set @Rows = @PageNo * @Rows

					SET @SQL = '			
						
						create table #AccountDetail
						(
							UserId int,AspNetuserId nvarchar(200),UserName nvarchar(200),FirstName varchar(200),MiddleName varchar(200),LastName varchar(200),
							PhoneNumber nvarchar(100),Email nvarchar(100),EmailOptIn bit,CreatedBy int,CreatedDate datetime,ModifiedBy int,ModifiedDate datetime,
							RoleId varchar(200),RoleName varchar(200), FullName  varchar(1000),
							StoreName varchar(200),CountryName varchar(200), CityName varchar(200), StateName varchar(200), PostalCode varchar(200), CompanyName varchar(200)
							,AccountId int,SalesRepUserName varchar(200),SalesRepFullName varchar(200) ,RowId int identity 
						) 
						'+
						+' insert into #AccountDetail(UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,FullName,
						StoreName, CountryName, CityName, StateName, PostalCode, CompanyName,AccountId)
						SELECT top '+cast(@Rows as varchar(10))+'UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,FullName,
						StoreName, CountryName, CityName, StateName, PostalCode, CompanyName,AccountId
						FROM ##View_CustomerUserAddDetail where 1=1'+
						dbo.Fn_GetWhereClause(case when @WhereClauseGlobal<>'' and @WhereClause1 <> '' then +@WhereClause1 else @WhereClauseAll end, ' AND ')+
						dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC') + '
			
						Insert Into #TBL_RowCount 
						SELECT count(*)
						FROM ##View_CustomerUserAddDetail where 1=1'+
						dbo.Fn_GetWhereClause(case when @WhereClauseGlobal<>'' and @WhereClause1 <> '' then @WhereClauseGlobal+' And '+@WhereClause1 else @WhereClauseAll end, ' AND ')
						+'
						
						SELECT  UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,FullName,
						StoreName,AccountId,
						CountryName, CityName, StateName, PostalCode, CompanyName, SalesRepUserName, SalesRepFullName
						,Row_Number()Over('+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC')+')  RowNumber
						into ##CustomerUserAddDetail
						FROM #AccountDetail '+@PaginationWhereClause  +' '+ dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC');

						print @SQL
					EXEC (@SQL)

					Select @RowCount= isnull(RowsCount,0) from #TBL_RowCount

					ALTER TABLE ##CustomerUserAddDetail ADD AddressId Int

					------To get data for StoreName
						update  a set StoreName = CASE WHEN zp.StoreName IS NULL THEN 'ALL' ELSE zp.StoreName END 
						from ##CustomerUserAddDetail a
						Left join  ZnodeUserPortal up ON(up.UserId = a.UserId)  
						Left JOIN ZnodePortal zp ON (up.PortalId = zp.PortalId)

	
					----To get data for CountryName, CityName, StateName, PostalCode, CompanyName
					IF (EXISTS(SELECT * FROM @ColumnName where ([StringColumn] LIKE '%CountryName%' OR [StringColumn] LIKE '%CityName%' OR [StringColumn] LIKE '%StateName%' OR [StringColumn] LIKE '%PostalCode%' OR [StringColumn] LIKE '%CompanyName%'))
					OR (@WhereClauseAll like '%CountryName%' OR @WhereClauseAll like '%CityName%' OR @WhereClauseAll like '%StateName%' OR @WhereClauseAll like '%PostalCode%' OR @WhereClauseAll like '%CompanyName%'))
					BEGIN
			 
						update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
						PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName, a.AddressId = ZA.AddressId
						from ##CustomerUserAddDetail a
						inner join ZnodeAccountAddress ZAA on a.AccountId = ZAA.AccountId
						inner  JOIN ZnodeAddress ZA on ZA.AddressId = ZAA.AddressId
						where isnull(a.AccountId,0)<> 0-- is not null
	 
						update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
						PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName, a.AddressId = ZA.AddressId
						from ##CustomerUserAddDetail a
						inner join ZnodeUserAddress ZUA on a.UserId = ZUA.UserId
						inner  JOIN ZnodeAddress ZA on ZA.AddressId = zua.AddressId
					END

					
					----Updating SalesRep for user if any 
					update CUAD
					set CUAD.SalesRepUserName = ZU.UserName, 
					CUAD.SalesRepFullName = (ISNULL(RTRIM(LTRIM(ZU.FirstName)), '')+' '+ISNULL(RTRIM(LTRIM(ZU.MiddleName)), '')
					+CASE
					WHEN ISNULL(RTRIM(LTRIM(ZU.MiddleName)), '') = ''
					THEN ''
					ELSE ' '
					END+ISNULL(RTRIM(LTRIM(ZU.LastName)), '')) 
					from ##CustomerUserAddDetail CUAD
					inner join ZnodeSalesRepCustomerUserPortal SRCUP ON CUAD.UserId = SRCUP.CustomerUserid 
					inner join ZnodeUser ZU ON SRCUP.SalesRepUserId = ZU.UserId

					if ( exists(select * from ##UserList) OR @AddressColumnWhereClause <> '')
					begin
						SELECT UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,
						FullName,
						StoreName,
						CountryName, CityName, StateName, PostalCode, CompanyName, SalesRepUserName, SalesRepFullName
						from ##CustomerUserAddDetail CUAD
						where exists(select * from ##UserList UL where CUAD.UserId = UL.UserId and CUAD.AddressId = UL.AddressID )
						Order by RowNumber
					end
					else
					begin
						SELECT UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,
						FullName,
						StoreName,
						CountryName, CityName, StateName, PostalCode, CompanyName, SalesRepUserName, SalesRepFullName
						from ##CustomerUserAddDetail
						Order by RowNumber
					end
	
					if OBJECT_ID('tempdb..##CustomerUserAddDetail') is not null
					drop table ##CustomerUserAddDetail

					if OBJECT_ID('tempdb..##View_CustomerUserAddDetail') is not null
					drop table ##View_CustomerUserAddDetail
				
				END;
            ELSE
				BEGIN
					SELECT * FROM View_CustomerUserDetail AS VICUD WHERE 1 = 0;
					SET @RowCount = 0;
				END;
            END;			
         END TRY
         BEGIN CATCH
           --SELECT ERROR_MESSAGE()
		   DECLARE @ERROR_PROCEDURE VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_AdminUsers @RoleName = '+@RoleName+' ,@UserName='+@UserName+',@WhereClause='+cast(@WhereClause as varchar(max))+' ,@Rows= '+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_By='+@Order_By+',@RowCount='+CAST(@RowCount AS VARCHAR(50));
            EXEC Znode_InsertProcedureErrorLog
            @ProcedureName    = 'Znode_AdminUsers',
            @ErrorInProcedure = @ERROR_PROCEDURE,
            @ErrorMessage     = @ErrorMessage,
            @ErrorLine        = @ErrorLine,
            @ErrorCall        = @ErrorCall;
         END CATCH;


     END;
go
IF exists(select * from sys.procedures where name = 'Znode_GetOmsOrderDetail')
	drop proc Znode_GetOmsOrderDetail
go
CREATE PROCEDURE [dbo].[Znode_GetOmsOrderDetail]
( @WhereClause NVARCHAR(MAX),
  @Rows        INT            = 100,
  @PageNo      INT            = 1,
  @Order_BY    VARCHAR(1000)  = '',
  @RowsCount   INT OUT			,
  @UserId	   INT = 0 ,
  @IsFromAdmin int=0 
 
  )
AS
    /*
     Summary : This procedure is used to get the oms order detils
			   Records are fetched for those users who placed the order i.e UserId is Present in ZnodeUser and  ZnodeOmsOrderDetails tables
	 Unit Testing:

    EXEC [Znode_GetOmsOrderDetail_SCT] 'PortalId =1',@Order_BY = '',@RowsCount= 0, @UserId = 0 ,@Rows = 50, @PageNo = 1

	declare @p7 int
	set @p7=4
	exec sp_executesql N'Znode_GetOmsOrderDetail_SCT @WhereClause, @Rows,@PageNo,@Order_By,@RowCount OUT,@UserId,@IsFromAdmin',N'@WhereClause nvarchar(30),@Rows int,@PageNo int,@Order_By nvarchar(14),@RowCount int output,@UserId int,@IsFromAdmin int',@WhereClause=N'(PortalId in(''1'',''4'',''5'',''6''))',@Rows=50,@PageNo=1,@Order_By=N'orderdate desc',@RowCount=@p7 output,@UserId=0,@IsFromAdmin=1
	select @p7



   */
BEGIN
    BEGIN TRY
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
		DECLARE @SQL NVARCHAR(MAX), @ProcessType  varchar(50)='Order'
		DECLARE @OrderLineItemRelationshipTypeId INT
		SET @OrderLineItemRelationshipTypeId = ( SELECT top 1 OrderLineItemRelationshipTypeId  FROM ZnodeOmsOrderLineItemRelationshipType where Name = 'AddOns' )

		DECLARE @Fn_GetPaginationWhereClause VARCHAR(500) = dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows),
		@Fn_GetFilterWhereClause NVARCHAR(MAX) = ''
		set @Fn_GetFilterWhereClause=dbo.Fn_GetFilterWhereClause(@WhereClause)
			
		IF @Order_BY = ''
			set @Order_BY = 'OrderDate desc'

			set @Order_BY = replace(@Order_BY,'PortalId','ZODD.PortalId')
			set @Order_BY = replace(@Order_BY,'UserName','ISNULL(RTRIM(LTRIM(ZODD.FirstName)),'''')+'' ''+ISNULL(RTRIM(LTRIM(ZODD.LastName)),'''')')
			set @Order_BY = replace(@Order_BY,'email','ZODD.Email')
			set @Order_BY = replace(@Order_BY,'OrderState','case when ZOS.IsShowToCustomer=0 and '+cast( @IsFromAdmin as varchar(50))+' = 0 then ZOSC.Description else  ZOS.Description end')
			set @Order_BY = replace(@Order_BY,'PaymentStatus','ZOPS.Name')
			set @Order_BY = replace(@Order_BY,'PublishState','ZODPS.DisplayName')
			set @Order_BY = replace(@Order_BY,'StoreName','ZP.StoreName')

			Declare @Fn_GetPagingRowId NVARCHAR(MAX) = ' DENSE_RANK()Over('+ ' Order By '+CASE WHEN Isnull(@Order_BY,'') = '' THEN 'OmsOrderId DESC' ELSE @Order_BY + ',OmsOrderId DESC' END  + ') RowId '
						
			IF OBJECT_ID('tempdb..#TBL_RowCount') is not null
				DROP TABLE #TBL_RowCount

			IF OBJECT_ID('tempdb..#Portal') is not null
				DROP TABLE #Portal
			
			Create table #TBL_RowCount(RowsCount int )
			CREATE TABLE #tbl_GetRecurciveUserId  (ID INT IDENTITY(1,1) Primary key,UserId INT,ParentUserId INT)
			INSERT INTO #tbl_GetRecurciveUserId
			SELECT UserId,ParentUserId FROM dbo.Fn_GetRecurciveUserId (CAST(@UserId AS VARCHAR(50)),@ProcessType ) FNRU
			 
			set @Fn_GetFilterWhereClause = replace(@Fn_GetFilterWhereClause,'PortalId','ZODD.PortalId')
			set @Fn_GetFilterWhereClause = replace(@Fn_GetFilterWhereClause,'UserName','ISNULL(RTRIM(LTRIM(ZODD.FirstName)),'''')+'' ''+ISNULL(RTRIM(LTRIM(ZODD.LastName)),'''')')
			set @Fn_GetFilterWhereClause = replace(@Fn_GetFilterWhereClause,'email','ZODD.Email')
			set @Fn_GetFilterWhereClause = replace(@Fn_GetFilterWhereClause,'OrderState','case when ZOS.IsShowToCustomer=0 and '+cast( @IsFromAdmin as varchar(50))+' = 0 then ZOSC.Description else  ZOS.Description end')
			set @Fn_GetFilterWhereClause = replace(@Fn_GetFilterWhereClause,'PaymentStatus','ZOPS.Name')
			set @Fn_GetFilterWhereClause = replace(@Fn_GetFilterWhereClause,'PublishState','ZODPS.DisplayName')
			set @Fn_GetFilterWhereClause = replace(@Fn_GetFilterWhereClause,'StoreName','ZP.StoreName')

			set @Fn_GetPagingRowId = replace(@Fn_GetPagingRowId,'OmsOrderId','Zoo.OmsOrderId')

			set @Rows = @PageNo * @Rows

			CREATE TABLE #Portal (PortalId int,StoreName varchar(200))
			insert into #Portal
			select PortalId,StoreName
			from ZnodePortal

		SET @SQL = '
		SELECT top '+cast(@Rows as varchar(10))+' Zoo.OmsOrderId,Zoo.OrderNumber, ZODD.PortalId,ZP.StoreName ,ZODD.CurrencyCode,
		case when ZOS.IsShowToCustomer=0 and '+cast( @IsFromAdmin as varchar(50))+' = 0 then ZOSC.Description else  ZOS.Description end  OrderState,ZODD.ShippingId,ZODD.PaymentTypeId,ZODD.PaymentSettingId
		,ZOPS.Name PaymentStatus,ZPS.Name PaymentType,CAST(1 AS BIT) ShippingStatus ,ZODD.OrderDate,ZODD.UserId,ISNULL(RTRIM(LTRIM(ZODD.FirstName)),'''')
		+'' ''+ISNULL(RTRIM(LTRIM(ZODD.LastName)),'''') UserName ,ZODD.PaymentTransactionToken ,ZODD.Total ,ZODD.OmsOrderDetailsId,ZODD.PoDocument,
		ZODD.Email ,ZODD.PhoneNumber ,ZODD.SubTotal ,ZODD.TaxCost ,ZODD.ShippingCost,ZODD.BillingPostalCode,
		ZODD.ModifiedDate AS OrderModifiedDate,  ZODD.PaymentDisplayName  ,isnull(Zoo.ExternalId,0) ExternalId,ZODD.CreditCardExpMonth,ZODD.CultureCode--,ZODD.TotalAdditionalCost
		,ZODD.CreditCardExpYear,ZODD.CardType,ZODD.CreditCardNumber,ZODD.PaymentExternalId,ZODPS.DisplayName as PublishState,
		'''' ProductName, 0 CountId, CAST (0 as bit) IsInRMA, '+@Fn_GetPagingRowId+' ,'''' ShippingPostalCode
		INTO #Cte_OrderLineDescribe
		FROM ZnodeOmsOrder (nolock) ZOO 
		INNER JOIN ZnodeOmsOrderDetails (nolock) ZODD ON (ZODD.OmsOrderId = ZOO.OmsOrderId AND  ZODD.IsActive = 1)
		INNER JOIN ZnodePublishState ZODPS ON (ZODPS.PublishStateId = ZOO.PublishStateId)
		INNER JOIN #Portal ZP (nolock) ON ZODD.PortalId = ZP.PortalId
		LEFT JOIN ZnodePaymentType (nolock) ZPS ON (ZPS.PaymentTypeId = ZODD.PaymentTypeId )
		LEFT JOIN ZnodeOmsOrderStateShowToCustomer (nolock) ZOSC ON (ZOSC.OmsOrderStateId = ZODD.OmsOrderStateId)
		LEFT JOIN ZnodeOmsOrderState (nolock) ZOS ON (ZOS.OmsOrderStateId = ZODD.OmsOrderStateId)
		LEFT JOIN ZnodeOmsPaymentState (nolock) ZOPS ON (ZOPS.OmsPaymentStateId = ZODD.OmsPaymentStateId)
		WHERE (EXISTS (SELECT TOP 1 1 FROM #tbl_GetRecurciveUserId FNRU WHERE FNRU.UserId = ZODD.UserId ) OR '+cast(@UserId as varchar(10))+'  =0 )'
		+ @Fn_GetFilterWhereClause+' 

		Insert Into #TBL_RowCount 
		SELECT count(*)
		FROM ZnodeOmsOrder (nolock) ZOO 
		INNER JOIN ZnodeOmsOrderDetails (nolock) ZODD ON (ZODD.OmsOrderId = ZOO.OmsOrderId AND  ZODD.IsActive = 1)
		INNER JOIN ZnodePublishState ZODPS ON (ZODPS.PublishStateId = ZOO.PublishStateId)
		INNER JOIN #Portal ZP (nolock) ON ZODD.PortalId = ZP.PortalId
		LEFT JOIN ZnodePaymentType (nolock) ZPS ON (ZPS.PaymentTypeId = ZODD.PaymentTypeId )
		LEFT JOIN ZnodeOmsOrderStateShowToCustomer (nolock) ZOSC ON (ZOSC.OmsOrderStateId = ZODD.OmsOrderStateId)
		LEFT JOIN ZnodeOmsOrderState (nolock) ZOS ON (ZOS.OmsOrderStateId = ZODD.OmsOrderStateId)
		LEFT JOIN ZnodeOmsPaymentState (nolock) ZOPS ON (ZOPS.OmsPaymentStateId = ZODD.OmsPaymentStateId)
		WHERE (EXISTS (SELECT TOP 1 1 FROM #tbl_GetRecurciveUserId FNRU WHERE FNRU.UserId = ZODD.UserId ) OR '+cast(@UserId as varchar(10))+'  =0 )'
		+ @Fn_GetFilterWhereClause+' 
			
		Create index Ind_OrderLineDescribe_RowId on #Cte_OrderLineDescribe(RowId )

		SELECT OmsOrderId,OrderNumber,PortalId,StoreName,CurrencyCode,OrderState,ShippingId,
		PaymentTypeId,PaymentSettingId,PaymentStatus,PaymentType,ShippingStatus,OrderDate,UserId,UserName,PaymentTransactionToken,Total,
		ProductName OrderItem,OmsOrderDetailsId,CountId ItemCount, PoDocument AS PODocumentPath,IsInRMA ,
		Email,PhoneNumber,SubTotal,TaxCost,ShippingCost,BillingPostalCode, ShippingPostalCode
		,OrderModifiedDate,PaymentDisplayName, 
		ExternalId,CreditCardExpMonth,CreditCardExpYear,CardType,CreditCardNumber,PaymentExternalId,CultureCode,PublishState --TotalAdditionalCost
		FROM #Cte_OrderLineDescribe
		' + @Fn_GetPaginationWhereClause +' order by RowId '

		print @SQL
		EXEC(@SQL)
		Select @RowsCount= isnull(RowsCount  ,0) from #TBL_RowCount
		
		IF OBJECT_ID('tempdb..#TBL_RowCount') is not null
				DROP TABLE #TBL_RowCount

		IF OBJECT_ID('tempdb..#Portal') is not null
			DROP TABLE #Portal
		
    END TRY
    BEGIN CATCH
        DECLARE @Status BIT ;
		SET @Status = 0;
		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
		@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetOmsOrderDetail @WhereClause = '''+ISNULL(CAST(@WhereClause AS VARCHAR(max)),'''''')+''',@Rows='''+ISNULL(CAST(@Rows AS VARCHAR(50)),'''''')+''',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',
		@Order_BY='+ISNULL(@Order_BY,'''''')+',@UserId = '+ISNULL(CAST(@UserId AS VARCHAR(50)),'''')+',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')+',@IsFromAdmin='+ISNULL(CAST(@IsFromAdmin AS VARCHAR(10)),'''');
              			 
        SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
        EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_GetOmsOrderDetail',
		@ErrorInProcedure = 'Znode_GetOmsOrderDetail',
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
    END CATCH;
END;
	 
go
IF exists(select * from sys.procedures where name = 'Znode_GetOmsOrderDetail')
	drop proc Znode_GetOmsOrderDetail
go
CREATE PROCEDURE [dbo].[Znode_GetOmsOrderDetail]
( @WhereClause NVARCHAR(MAX),
  @Rows        INT            = 100,
  @PageNo      INT            = 1,
  @Order_BY    VARCHAR(1000)  = '',
  @RowsCount   INT OUT			,
  @UserId	   INT = 0 ,
  @IsFromAdmin int=0 
 
  )
AS
    /*
     Summary : This procedure is used to get the oms order detils
			   Records are fetched for those users who placed the order i.e UserId is Present in ZnodeUser and  ZnodeOmsOrderDetails tables
	 Unit Testing:

    EXEC [Znode_GetOmsOrderDetail_SCT] 'PortalId =1',@Order_BY = '',@RowsCount= 0, @UserId = 0 ,@Rows = 50, @PageNo = 1

	declare @p7 int
	set @p7=4
	exec sp_executesql N'Znode_GetOmsOrderDetail_SCT @WhereClause, @Rows,@PageNo,@Order_By,@RowCount OUT,@UserId,@IsFromAdmin',N'@WhereClause nvarchar(30),@Rows int,@PageNo int,@Order_By nvarchar(14),@RowCount int output,@UserId int,@IsFromAdmin int',@WhereClause=N'(PortalId in(''1'',''4'',''5'',''6''))',@Rows=50,@PageNo=1,@Order_By=N'orderdate desc',@RowCount=@p7 output,@UserId=0,@IsFromAdmin=1
	select @p7



   */
BEGIN
    BEGIN TRY
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
		DECLARE @SQL NVARCHAR(MAX), @ProcessType  varchar(50)='Order'
		DECLARE @OrderLineItemRelationshipTypeId INT
		SET @OrderLineItemRelationshipTypeId = ( SELECT top 1 OrderLineItemRelationshipTypeId  FROM ZnodeOmsOrderLineItemRelationshipType where Name = 'AddOns' )

		DECLARE @Fn_GetPaginationWhereClause VARCHAR(500) = dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows),
		@Fn_GetFilterWhereClause NVARCHAR(MAX) = ''
		set @Fn_GetFilterWhereClause=dbo.Fn_GetFilterWhereClause(@WhereClause)
			
		IF @Order_BY = ''
			set @Order_BY = 'OrderDate desc'

			set @Order_BY = replace(@Order_BY,'PortalId','ZODD.PortalId')
			set @Order_BY = replace(@Order_BY,'UserName','ISNULL(RTRIM(LTRIM(ZODD.FirstName)),'''')+'' ''+ISNULL(RTRIM(LTRIM(ZODD.LastName)),'''')')
			set @Order_BY = replace(@Order_BY,'email','ZODD.Email')
			set @Order_BY = replace(@Order_BY,'OrderState','case when ZOS.IsShowToCustomer=0 and '+cast( @IsFromAdmin as varchar(50))+' = 0 then ZOSC.Description else  ZOS.Description end')
			set @Order_BY = replace(@Order_BY,'PaymentStatus','ZOPS.Name')
			set @Order_BY = replace(@Order_BY,'PublishState','ZODPS.DisplayName')
			set @Order_BY = replace(@Order_BY,'StoreName','ZP.StoreName')

			Declare @Fn_GetPagingRowId NVARCHAR(MAX) = ' DENSE_RANK()Over('+ ' Order By '+CASE WHEN Isnull(@Order_BY,'') = '' THEN 'OmsOrderId DESC' ELSE @Order_BY + ',OmsOrderId DESC' END  + ') RowId '
						
			IF OBJECT_ID('tempdb..#TBL_RowCount') is not null
				DROP TABLE #TBL_RowCount

			IF OBJECT_ID('tempdb..#Portal') is not null
				DROP TABLE #Portal
			
			Create table #TBL_RowCount(RowsCount int )
			CREATE TABLE #tbl_GetRecurciveUserId  (ID INT IDENTITY(1,1) Primary key,UserId INT,ParentUserId INT)
			INSERT INTO #tbl_GetRecurciveUserId
			SELECT UserId,ParentUserId FROM dbo.Fn_GetRecurciveUserId (CAST(@UserId AS VARCHAR(50)),@ProcessType ) FNRU
			 
			set @Fn_GetFilterWhereClause = replace(@Fn_GetFilterWhereClause,'PortalId','ZODD.PortalId')
			set @Fn_GetFilterWhereClause = replace(@Fn_GetFilterWhereClause,'UserName','ISNULL(RTRIM(LTRIM(ZODD.FirstName)),'''')+'' ''+ISNULL(RTRIM(LTRIM(ZODD.LastName)),'''')')
			set @Fn_GetFilterWhereClause = replace(@Fn_GetFilterWhereClause,'email','ZODD.Email')
			set @Fn_GetFilterWhereClause = replace(@Fn_GetFilterWhereClause,'OrderState','case when ZOS.IsShowToCustomer=0 and '+cast( @IsFromAdmin as varchar(50))+' = 0 then ZOSC.Description else  ZOS.Description end')
			set @Fn_GetFilterWhereClause = replace(@Fn_GetFilterWhereClause,'PaymentStatus','ZOPS.Name')
			set @Fn_GetFilterWhereClause = replace(@Fn_GetFilterWhereClause,'PublishState','ZODPS.DisplayName')
			set @Fn_GetFilterWhereClause = replace(@Fn_GetFilterWhereClause,'StoreName','ZP.StoreName')

			set @Order_BY = replace(@Order_BY,'ShippingPostalCode','BillingPostalCode')

			set @Fn_GetPagingRowId = replace(@Fn_GetPagingRowId,'OmsOrderId','Zoo.OmsOrderId')

			set @Rows = @PageNo * @Rows

			CREATE TABLE #Portal (PortalId int,StoreName varchar(200))
			insert into #Portal
			select PortalId,StoreName
			from ZnodePortal

		SET @SQL = '
		SELECT top '+cast(@Rows as varchar(10))+' Zoo.OmsOrderId,Zoo.OrderNumber, ZODD.PortalId,ZP.StoreName ,ZODD.CurrencyCode,
		case when ZOS.IsShowToCustomer=0 and '+cast( @IsFromAdmin as varchar(50))+' = 0 then ZOSC.Description else  ZOS.Description end  OrderState,ZODD.ShippingId,ZODD.PaymentTypeId,ZODD.PaymentSettingId
		,ZOPS.Name PaymentStatus,ZPS.Name PaymentType,CAST(1 AS BIT) ShippingStatus ,ZODD.OrderDate,ZODD.UserId,ISNULL(RTRIM(LTRIM(ZODD.FirstName)),'''')
		+'' ''+ISNULL(RTRIM(LTRIM(ZODD.LastName)),'''') UserName ,ZODD.PaymentTransactionToken ,ZODD.Total ,ZODD.OmsOrderDetailsId,ZODD.PoDocument,
		ZODD.Email ,ZODD.PhoneNumber ,ZODD.SubTotal ,ZODD.TaxCost ,ZODD.ShippingCost,ZODD.BillingPostalCode,
		ZODD.ModifiedDate AS OrderModifiedDate,  ZODD.PaymentDisplayName  ,isnull(Zoo.ExternalId,0) ExternalId,ZODD.CreditCardExpMonth,ZODD.CultureCode--,ZODD.TotalAdditionalCost
		,ZODD.CreditCardExpYear,ZODD.CardType,ZODD.CreditCardNumber,ZODD.PaymentExternalId,ZODPS.DisplayName as PublishState,
		'''' ProductName, 0 CountId, CAST (0 as bit) IsInRMA, '+@Fn_GetPagingRowId+' 
		INTO #Cte_OrderLineDescribe
		FROM ZnodeOmsOrder (nolock) ZOO 
		INNER JOIN ZnodeOmsOrderDetails (nolock) ZODD ON (ZODD.OmsOrderId = ZOO.OmsOrderId AND  ZODD.IsActive = 1)
		INNER JOIN ZnodePublishState ZODPS ON (ZODPS.PublishStateId = ZOO.PublishStateId)
		INNER JOIN #Portal ZP (nolock) ON ZODD.PortalId = ZP.PortalId
		LEFT JOIN ZnodePaymentType (nolock) ZPS ON (ZPS.PaymentTypeId = ZODD.PaymentTypeId )
		LEFT JOIN ZnodeOmsOrderStateShowToCustomer (nolock) ZOSC ON (ZOSC.OmsOrderStateId = ZODD.OmsOrderStateId)
		LEFT JOIN ZnodeOmsOrderState (nolock) ZOS ON (ZOS.OmsOrderStateId = ZODD.OmsOrderStateId)
		LEFT JOIN ZnodeOmsPaymentState (nolock) ZOPS ON (ZOPS.OmsPaymentStateId = ZODD.OmsPaymentStateId)
		WHERE (EXISTS (SELECT TOP 1 1 FROM #tbl_GetRecurciveUserId FNRU WHERE FNRU.UserId = ZODD.UserId ) OR '+cast(@UserId as varchar(10))+'  =0 )'
		+ @Fn_GetFilterWhereClause+' 

		Insert Into #TBL_RowCount 
		SELECT count(*)
		FROM ZnodeOmsOrder (nolock) ZOO 
		INNER JOIN ZnodeOmsOrderDetails (nolock) ZODD ON (ZODD.OmsOrderId = ZOO.OmsOrderId AND  ZODD.IsActive = 1)
		INNER JOIN ZnodePublishState ZODPS ON (ZODPS.PublishStateId = ZOO.PublishStateId)
		INNER JOIN #Portal ZP (nolock) ON ZODD.PortalId = ZP.PortalId
		LEFT JOIN ZnodePaymentType (nolock) ZPS ON (ZPS.PaymentTypeId = ZODD.PaymentTypeId )
		LEFT JOIN ZnodeOmsOrderStateShowToCustomer (nolock) ZOSC ON (ZOSC.OmsOrderStateId = ZODD.OmsOrderStateId)
		LEFT JOIN ZnodeOmsOrderState (nolock) ZOS ON (ZOS.OmsOrderStateId = ZODD.OmsOrderStateId)
		LEFT JOIN ZnodeOmsPaymentState (nolock) ZOPS ON (ZOPS.OmsPaymentStateId = ZODD.OmsPaymentStateId)
		WHERE (EXISTS (SELECT TOP 1 1 FROM #tbl_GetRecurciveUserId FNRU WHERE FNRU.UserId = ZODD.UserId ) OR '+cast(@UserId as varchar(10))+'  =0 )'
		+ @Fn_GetFilterWhereClause+' 
			
		Create index Ind_OrderLineDescribe_RowId on #Cte_OrderLineDescribe(RowId )

		SELECT OmsOrderId,OrderNumber,PortalId,StoreName,CurrencyCode,OrderState,ShippingId,
		PaymentTypeId,PaymentSettingId,PaymentStatus,PaymentType,ShippingStatus,OrderDate,UserId,UserName,PaymentTransactionToken,Total,
		ProductName OrderItem,OmsOrderDetailsId,CountId ItemCount, PoDocument AS PODocumentPath,IsInRMA ,
		Email,PhoneNumber,SubTotal,TaxCost,ShippingCost,BillingPostalCode
		,OrderModifiedDate,PaymentDisplayName, 
		ExternalId,CreditCardExpMonth,CreditCardExpYear,CardType,CreditCardNumber,PaymentExternalId,CultureCode,PublishState --TotalAdditionalCost
		FROM #Cte_OrderLineDescribe
		' + @Fn_GetPaginationWhereClause +' order by RowId '

		print @SQL
		EXEC(@SQL)
		Select @RowsCount= isnull(RowsCount  ,0) from #TBL_RowCount
		
		IF OBJECT_ID('tempdb..#TBL_RowCount') is not null
				DROP TABLE #TBL_RowCount

		IF OBJECT_ID('tempdb..#Portal') is not null
			DROP TABLE #Portal
		
    END TRY
    BEGIN CATCH
        DECLARE @Status BIT ;
		SET @Status = 0;
		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
		@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetOmsOrderDetail @WhereClause = '''+ISNULL(CAST(@WhereClause AS VARCHAR(max)),'''''')+''',@Rows='''+ISNULL(CAST(@Rows AS VARCHAR(50)),'''''')+''',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',
		@Order_BY='+ISNULL(@Order_BY,'''''')+',@UserId = '+ISNULL(CAST(@UserId AS VARCHAR(50)),'''')+',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')+',@IsFromAdmin='+ISNULL(CAST(@IsFromAdmin AS VARCHAR(10)),'''');
              			 
        SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
        EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_GetOmsOrderDetail',
		@ErrorInProcedure = 'Znode_GetOmsOrderDetail',
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
    END CATCH;
END;
go
IF exists(select * from sys.procedures where name = 'Znode_GetOmsOrderDetail')
	drop proc Znode_GetOmsOrderDetail
go
CREATE PROCEDURE [dbo].[Znode_GetOmsOrderDetail]
( @WhereClause NVARCHAR(MAX),
  @Rows        INT            = 100,
  @PageNo      INT            = 1,
  @Order_BY    VARCHAR(1000)  = '',
  @RowsCount   INT OUT			,
  @UserId	   INT = 0 ,
  @IsFromAdmin int=0 
 
  )
AS
    /*
     Summary : This procedure is used to get the oms order detils
			   Records are fetched for those users who placed the order i.e UserId is Present in ZnodeUser and  ZnodeOmsOrderDetails tables
	 Unit Testing:

    EXEC [Znode_GetOmsOrderDetail_SCT] 'PortalId =1',@Order_BY = '',@RowsCount= 0, @UserId = 0 ,@Rows = 50, @PageNo = 1

	declare @p7 int
	set @p7=4
	exec sp_executesql N'Znode_GetOmsOrderDetail_SCT @WhereClause, @Rows,@PageNo,@Order_By,@RowCount OUT,@UserId,@IsFromAdmin',N'@WhereClause nvarchar(30),@Rows int,@PageNo int,@Order_By nvarchar(14),@RowCount int output,@UserId int,@IsFromAdmin int',@WhereClause=N'(PortalId in(''1'',''4'',''5'',''6''))',@Rows=50,@PageNo=1,@Order_By=N'orderdate desc',@RowCount=@p7 output,@UserId=0,@IsFromAdmin=1
	select @p7



   */
BEGIN
    BEGIN TRY
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
		DECLARE @SQL NVARCHAR(MAX), @ProcessType  varchar(50)='Order'
		DECLARE @OrderLineItemRelationshipTypeId INT
		SET @OrderLineItemRelationshipTypeId = ( SELECT top 1 OrderLineItemRelationshipTypeId  FROM ZnodeOmsOrderLineItemRelationshipType where Name = 'AddOns' )

		DECLARE @Fn_GetPaginationWhereClause VARCHAR(500) = dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows),
		@Fn_GetFilterWhereClause NVARCHAR(MAX) = ''
		set @Fn_GetFilterWhereClause=dbo.Fn_GetFilterWhereClause(@WhereClause)
			
		IF @Order_BY = ''
			set @Order_BY = 'OrderDate desc'

			set @Order_BY = replace(@Order_BY,'PortalId','ZODD.PortalId')
			set @Order_BY = replace(@Order_BY,'UserName','ISNULL(RTRIM(LTRIM(ZODD.FirstName)),'''')+'' ''+ISNULL(RTRIM(LTRIM(ZODD.LastName)),'''')')
			set @Order_BY = replace(@Order_BY,'email','ZODD.Email')
			set @Order_BY = replace(@Order_BY,'OrderState','case when ZOS.IsShowToCustomer=0 and '+cast( @IsFromAdmin as varchar(50))+' = 0 then ZOSC.Description else  ZOS.Description end')
			set @Order_BY = replace(@Order_BY,'PaymentStatus','ZOPS.Name')
			set @Order_BY = replace(@Order_BY,'PublishState','ZODPS.DisplayName')
			set @Order_BY = replace(@Order_BY,'StoreName','ZP.StoreName')

			Declare @Fn_GetPagingRowId NVARCHAR(MAX) = ' DENSE_RANK()Over('+ ' Order By '+CASE WHEN Isnull(@Order_BY,'') = '' THEN 'OmsOrderId DESC' ELSE @Order_BY + ',OmsOrderId DESC' END  + ') RowId '
						
			IF OBJECT_ID('tempdb..#TBL_RowCount') is not null
				DROP TABLE #TBL_RowCount

			IF OBJECT_ID('tempdb..#Portal') is not null
				DROP TABLE #Portal
			
			Create table #TBL_RowCount(RowsCount int )
			CREATE TABLE #tbl_GetRecurciveUserId  (ID INT IDENTITY(1,1) Primary key,UserId INT,ParentUserId INT)
			INSERT INTO #tbl_GetRecurciveUserId
			SELECT UserId,ParentUserId FROM dbo.Fn_GetRecurciveUserId (CAST(@UserId AS VARCHAR(50)),@ProcessType ) FNRU
			 
			set @Fn_GetFilterWhereClause = replace(@Fn_GetFilterWhereClause,'PortalId','ZODD.PortalId')
			set @Fn_GetFilterWhereClause = replace(@Fn_GetFilterWhereClause,'UserName','ISNULL(RTRIM(LTRIM(ZODD.FirstName)),'''')+'' ''+ISNULL(RTRIM(LTRIM(ZODD.LastName)),'''')')
			set @Fn_GetFilterWhereClause = replace(@Fn_GetFilterWhereClause,'email','ZODD.Email')
			set @Fn_GetFilterWhereClause = replace(@Fn_GetFilterWhereClause,'OrderState','case when ZOS.IsShowToCustomer=0 and '+cast( @IsFromAdmin as varchar(50))+' = 0 then ZOSC.Description else  ZOS.Description end')
			set @Fn_GetFilterWhereClause = replace(@Fn_GetFilterWhereClause,'PaymentStatus','ZOPS.Name')
			set @Fn_GetFilterWhereClause = replace(@Fn_GetFilterWhereClause,'PublishState','ZODPS.DisplayName')
			set @Fn_GetFilterWhereClause = replace(@Fn_GetFilterWhereClause,'StoreName','ZP.StoreName')

			set @Order_BY = replace(@Order_BY,'ShippingPostalCode','BillingPostalCode')

			set @Fn_GetPagingRowId = replace(@Fn_GetPagingRowId,'OmsOrderId','Zoo.OmsOrderId')

			set @Rows = @PageNo * @Rows

			CREATE TABLE #Portal (PortalId int,StoreName varchar(200))
			insert into #Portal
			select PortalId,StoreName
			from ZnodePortal

		SET @SQL = '
		SELECT top '+cast(@Rows as varchar(10))+' Zoo.OmsOrderId,Zoo.OrderNumber, ZODD.PortalId,ZP.StoreName ,ZODD.CurrencyCode,
		case when ZOS.IsShowToCustomer=0 and '+cast( @IsFromAdmin as varchar(50))+' = 0 then ZOSC.Description else  ZOS.Description end  OrderState,ZODD.ShippingId,ZODD.PaymentTypeId,ZODD.PaymentSettingId
		,ZOPS.Name PaymentStatus,ZPS.Name PaymentType,CAST(1 AS BIT) ShippingStatus ,ZODD.OrderDate,ZODD.UserId,ISNULL(RTRIM(LTRIM(ZODD.FirstName)),'''')
		+'' ''+ISNULL(RTRIM(LTRIM(ZODD.LastName)),'''') UserName ,ZODD.PaymentTransactionToken ,ZODD.Total ,ZODD.OmsOrderDetailsId,ZODD.PoDocument,
		ZODD.Email ,ZODD.PhoneNumber ,ZODD.SubTotal ,ZODD.TaxCost ,ZODD.ShippingCost,ZODD.BillingPostalCode,
		ZODD.ModifiedDate AS OrderModifiedDate,  ZODD.PaymentDisplayName  ,isnull(Zoo.ExternalId,0) ExternalId,ZODD.CreditCardExpMonth,ZODD.CultureCode--,ZODD.TotalAdditionalCost
		,ZODD.CreditCardExpYear,ZODD.CardType,ZODD.CreditCardNumber,ZODD.PaymentExternalId,ZODPS.DisplayName as PublishState,
		'''' ProductName, 0 CountId, CAST (0 as bit) IsInRMA, '+@Fn_GetPagingRowId+' 
		INTO #Cte_OrderLineDescribe
		FROM ZnodeOmsOrder (nolock) ZOO 
		INNER JOIN ZnodeOmsOrderDetails (nolock) ZODD ON (ZODD.OmsOrderId = ZOO.OmsOrderId AND  ZODD.IsActive = 1)
		INNER JOIN ZnodePublishState ZODPS ON (ZODPS.PublishStateId = ZOO.PublishStateId)
		INNER JOIN #Portal ZP (nolock) ON ZODD.PortalId = ZP.PortalId
		LEFT JOIN ZnodePaymentType (nolock) ZPS ON (ZPS.PaymentTypeId = ZODD.PaymentTypeId )
		LEFT JOIN ZnodeOmsOrderStateShowToCustomer (nolock) ZOSC ON (ZOSC.OmsOrderStateId = ZODD.OmsOrderStateId)
		LEFT JOIN ZnodeOmsOrderState (nolock) ZOS ON (ZOS.OmsOrderStateId = ZODD.OmsOrderStateId)
		LEFT JOIN ZnodeOmsPaymentState (nolock) ZOPS ON (ZOPS.OmsPaymentStateId = ZODD.OmsPaymentStateId)
		WHERE (EXISTS (SELECT TOP 1 1 FROM #tbl_GetRecurciveUserId FNRU WHERE FNRU.UserId = ZODD.UserId ) OR '+cast(@UserId as varchar(10))+'  =0 )'
		+ @Fn_GetFilterWhereClause+' 

		Insert Into #TBL_RowCount 
		SELECT count(*)
		FROM ZnodeOmsOrder (nolock) ZOO 
		INNER JOIN ZnodeOmsOrderDetails (nolock) ZODD ON (ZODD.OmsOrderId = ZOO.OmsOrderId AND  ZODD.IsActive = 1)
		INNER JOIN ZnodePublishState ZODPS ON (ZODPS.PublishStateId = ZOO.PublishStateId)
		INNER JOIN #Portal ZP (nolock) ON ZODD.PortalId = ZP.PortalId
		LEFT JOIN ZnodePaymentType (nolock) ZPS ON (ZPS.PaymentTypeId = ZODD.PaymentTypeId )
		LEFT JOIN ZnodeOmsOrderStateShowToCustomer (nolock) ZOSC ON (ZOSC.OmsOrderStateId = ZODD.OmsOrderStateId)
		LEFT JOIN ZnodeOmsOrderState (nolock) ZOS ON (ZOS.OmsOrderStateId = ZODD.OmsOrderStateId)
		LEFT JOIN ZnodeOmsPaymentState (nolock) ZOPS ON (ZOPS.OmsPaymentStateId = ZODD.OmsPaymentStateId)
		WHERE (EXISTS (SELECT TOP 1 1 FROM #tbl_GetRecurciveUserId FNRU WHERE FNRU.UserId = ZODD.UserId ) OR '+cast(@UserId as varchar(10))+'  =0 )'
		+ @Fn_GetFilterWhereClause+' 
			
		Create index Ind_OrderLineDescribe_RowId on #Cte_OrderLineDescribe(RowId )

		SELECT OmsOrderId,OrderNumber,PortalId,StoreName,CurrencyCode,OrderState,ShippingId,
		PaymentTypeId,PaymentSettingId,PaymentStatus,PaymentType,ShippingStatus,OrderDate,UserId,UserName,PaymentTransactionToken,Total,
		ProductName OrderItem,OmsOrderDetailsId,CountId ItemCount, PoDocument AS PODocumentPath,IsInRMA ,
		Email,PhoneNumber,SubTotal,TaxCost,ShippingCost,BillingPostalCode
		,OrderModifiedDate,PaymentDisplayName, 
		ExternalId,CreditCardExpMonth,CreditCardExpYear,CardType,CreditCardNumber,PaymentExternalId,CultureCode,PublishState --TotalAdditionalCost
		FROM #Cte_OrderLineDescribe
		' + @Fn_GetPaginationWhereClause +' order by RowId '

		print @SQL
		EXEC(@SQL)
		Select @RowsCount= isnull(RowsCount  ,0) from #TBL_RowCount
		
		IF OBJECT_ID('tempdb..#TBL_RowCount') is not null
				DROP TABLE #TBL_RowCount

		IF OBJECT_ID('tempdb..#Portal') is not null
			DROP TABLE #Portal
		
    END TRY
    BEGIN CATCH
        DECLARE @Status BIT ;
		SET @Status = 0;
		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
		@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetOmsOrderDetail @WhereClause = '''+ISNULL(CAST(@WhereClause AS VARCHAR(max)),'''''')+''',@Rows='''+ISNULL(CAST(@Rows AS VARCHAR(50)),'''''')+''',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',
		@Order_BY='+ISNULL(@Order_BY,'''''')+',@UserId = '+ISNULL(CAST(@UserId AS VARCHAR(50)),'''')+',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')+',@IsFromAdmin='+ISNULL(CAST(@IsFromAdmin AS VARCHAR(10)),'''');
              			 
        SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
        EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_GetOmsOrderDetail',
		@ErrorInProcedure = 'Znode_GetOmsOrderDetail',
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
    END CATCH;
END;
	 
	 go
IF exists(select * from sys.procedures where name = 'Znode_AdminUsers')
	drop proc Znode_AdminUsers
go
CREATE PROCEDURE [dbo].[Znode_AdminUsers]
(	@RoleName		VARCHAR(200),
    @UserName		VARCHAR(200),
    @WhereClause	XML,
    @Rows			INT           = 100,
    @PageNo			INT           = 1,
    @Order_By		VARCHAR(1000) = '',
    @RowCount		INT        = 0 OUT,
	@IsCallOnSite   BIT = 0 ,
	@PortalId		VARCHAR(1000) = 0,
	@IsGuestUser    BIT = 0,
	@ColumnName     dbo.SelectColumnList ReadOnly
)
AS
   /* 
      Summary: List of users with detsils and shows link with ASPNet tables 
      This procedure is used for finding both users and admin users 
      here use three view "View_RoleUsers" for check  @UserName is present or not 
      "View_AdminUserDetail"  this view use for admin users 
      "View_CustomerUserDetail" Use for customer users 
      Unit Testing   
	  SELECT * FROM ZnodeUser 
      DECLARE @EDE INT=0  EXEC Znode_AdminUsers '','admin@znode.com',@WhereClause='',@Order_By='',@PageNo= 1 ,@Rows= 214,@IsCallOnSite='false',@PortalId=0,@RowCount=@EDE OUT  SELECT @EDE
   */
     BEGIN
         BEGIN TRY
            SET NOCOUNT ON;
			
            DECLARE @SQL NVARCHAR(MAX)= '', @PaginationWhereClause VARCHAR(300)= dbo.Fn_GetRowsForPagination(@PageNo, @Rows, ' WHERE RowId');
            
			if OBJECT_ID('tempdb..##CustomerUserAddDetail') is not null
				drop table ##CustomerUserAddDetail

			if OBJECT_ID('tempdb..##View_CustomerUserAddDetail') is not null
				drop table ##View_CustomerUserAddDetail

			IF OBJECT_ID('tempdb..#TBL_RowCount') is not null
				DROP TABLE #TBL_RowCount
			Create table #TBL_RowCount(RowsCount int )
			-----Split where clause XMl 
			CREATE TABLE #WhereColumnList(RowId Int identity, filterName varchar(max), WhereCondition varchar(max))
			insert into #WhereColumnList(filterName,WhereCondition)
			SELECT 
					Tbl.Col.value('key[1]', 'varchar(max)') as filterName,
					Tbl.Col.value('condition[1]', 'varchar(max)') WhereCondition
			FROM   @WhereClause.nodes('//filter') Tbl(Col) 
			----Address column in global search
			declare @AddressGlobalSearch varchar(1000) =''
			declare @GlobalSearch varchar(100) = ''
			
			select @GlobalSearch = substring(WhereCondition,charindex(' like ',WhereCondition), charindex(' OR ',WhereCondition)-charindex(' like ',WhereCondition)) 
			from #WhereColumnList
			where filtername like '%|%'
			and filtername <> ''
			and filterName in ('CityName','CountryName','PostalCode','StateName','CompanyName') 

			

			if isnull(@GlobalSearch,'') <> ''
			begin
				select @AddressGlobalSearch = '('+'CityName '+ @GlobalSearch+' OR '+'CountryName '+ @GlobalSearch+' OR '+'PostalCode '+ @GlobalSearch+' OR '+'StateName '+ @GlobalSearch+' OR '+'CompanyName '+ @GlobalSearch+')'
			end
			else
			begin
				SET @AddressGlobalSearch = ''
			end
			----Global search where clause
			declare @WhereClauseGlobal varchar(1000)=''
			select @WhereClauseGlobal = ISNULL(WhereCondition,'')
			from #WhereColumnList
			where filtername like '%|%'
			and filtername <> ''
			
			----Where clause columns except Address columns
			declare @WhereClause1 varchar(max) = ''
			select @WhereClause1 = COALESCE(@WhereClause1 + '', '') + WhereCondition+' And '
			--case when @WhereClause1 <> ''  then ' And ' else '' end
			from #WhereColumnList a
			where filterName not like '%|%' and
			filterName not in ('CountryName','CityName','StateName','PostalCode','CompanyName')
			and filtername <> ''

			if @WhereClause1 <> ''
			begin
				set @WhereClause1=isnull(substring(@WhereClause1,1,len(@WhereClause1)-3),'')
			end
			else
			begin
				set @WhereClause1 = ''
			end

			----Where clause columns
			declare @AddressColumnWhereClause varchar(max) 
			select @AddressColumnWhereClause = COALESCE(@AddressColumnWhereClause + '', '') + WhereCondition+' And '
			from #WhereColumnList a
			where filterName not like '%|%' and
			filterName in ('CountryName','CityName','StateName','PostalCode','CompanyName')
			and filtername <> ''
			
			if isnull(@AddressColumnWhereClause,'') <> ''
			begin
				set @AddressColumnWhereClause=isnull(substring(@AddressColumnWhereClause,1,len(@AddressColumnWhereClause)-3),'')
            end
			else
			begin
				set @AddressColumnWhereClause = ''
			end

			declare @WhereClauseAll varchar(max) = ''
			select @WhereClauseAll = COALESCE(@WhereClauseAll + '', '') + WhereCondition+' And '
			from #WhereColumnList a
			

			set @WhereClauseAll=isnull(CASE WHEN @WhereClauseAll = '' THEN '' ELSE substring(@WhereClauseAll,1,len(@WhereClauseAll)-3) END ,'')
			-------------- 
			
			IF @PortalId  <> '0' 
			BEGIN 
			    SET @WhereClauseAll = CASE WHEN  @WhereClauseAll = '' THEN ' (PortalId IN ('+@PortalId+') OR PortalId IS NULL) ' ELSE @WhereClauseAll+' AND (PortalId IN ('+@PortalId+') OR PortalId IS NULL) ' END 

				SET @WhereClause1 = CASE WHEN  @WhereClause1 = '' THEN ' (isnull(PortalId,0) IN ('+@PortalId+') OR PortalId IS NULL) ' ELSE @WhereClause1+' AND (isnull(PortalId,0) IN ('+@PortalId+') OR PortalId IS NULL) ' END 
			
			END 

			IF EXISTS ( SELECT TOP 1 1 FROM View_RoleUsers  WHERE Username = @UserName   )  AND @RoleName <> ''  
			-- this check for admin user
       		BEGIN
				SET @SQL = ' SELECT  A.UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,A.CreatedBy,A.CreatedDate,A.ModifiedBy,A.ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId ,CustomerPaymentGUID
				INTO #Cte_AdminUserDetail
				FROM View_AdminUserDetail A
				'+CASE WHEN @PortalId  <> '0' THEN ' INNER JOIN ZnodeUserPortal ZUP ON (ZUP.UserId = A.UserId) 'ELSE '' END  +'	 
				'+dbo.Fn_GetWhereClause(@WhereClauseAll, ' WHERE ')+'
				
				;with Cte_AdminUserDetailRowId AS 
				(
				SELECT UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId,CustomerPaymentGUID ,RANK()Over('+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC')+',UserId DESC) RowId
				FROM  #Cte_AdminUserDetail
				)
					 
				SELECT UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId,CustomerPaymentGUID ,RowId 
				INTO #AccountDetails
				FROM Cte_AdminUserDetailRowId 
					 
				SET @Count= ISNULL((SELECT  Count(1) FROM #AccountDetails ),0)
					 
				SELECT DISTINCT UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId ,CustomerPaymentGUID
				FROM #AccountDetails '+@PaginationWhereClause+' '+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC' );
				EXEC SP_executesql
				@SQL,
				N'@Count INT OUT',
				@Count = @RowCount OUT;

				
			END;
			-- For Customer user
            ELSE   
			BEGIN
				IF @roleName = ''
				BEGIN
					if OBJECT_ID('tempdb..##CustomerUserAddDetail') is not null
					drop table ##CustomerUserAddDetail

					if OBJECT_ID('tempdb..##View_CustomerUserAddDetail') is not null
					drop table ##View_CustomerUserAddDetail
				
					if OBJECT_ID('tempdb..##UserList') is not null
					drop table ##UserList

					CREATE TABLE ##UserList(UserId int,AddressID int)

					declare @UserList varchar(1000)=''

					------To get the list of user having adress column in global search
					if (@AddressGlobalSearch <> '')
					begin
				
					set @UserList = 'select a.UserId, b.AddressID	from ZnodeUserAddress a	inner join ZnodeAddress b on a.AddressId = b.AddressId	where '+@AddressGlobalSearch
					--print @UserList
					insert into ##UserList(UserId, b.AddressID)
					exec (@UserList)
			
					end
					----To get the list of user having adress column in where clause 
					if (@AddressColumnWhereClause <> '')
					begin
					
					set @UserList = 'select a.UserId, b.AddressID	from ZnodeUserAddress a	inner join ZnodeAddress b on a.AddressId = b.AddressId	where '+@AddressColumnWhereClause
					--print @UserList
					insert into ##UserList(UserId,AddressID)
					exec (@UserList)
					
					end

					If @IsGuestUser= 0 
					AND
					NOT Exists (Select filterName from #WhereColumnList where filterName in ('accountid','isaccountcustomer','UserId') and filtername <> '')
					-- Customer List with GuestUsers
					Begin
						SET @SQL = 
							'SELECT a.userId,a.AspNetuserId,a.UserName,a.FirstName,a.MiddleName,a.LastName
							,a.PhoneNumber,
							 a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
							 CONVERT( DATE, a.ModifiedDate) ModifiedDate, 0 RoleId,''''  RoleName,
							 (ISNULL(RTRIM(LTRIM(a.FirstName)), '''')+'' ''+ISNULL(RTRIM(LTRIM(a.MiddleName)), '''')+CASE
							 WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '''') = ''''	THEN ''''
							 ELSE '' ''	END+ISNULL(RTRIM(LTRIM(a.LastName)), ''''))  FullName
							 ,a.AccountId, '''' TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser
							 into ##View_CustomerUserAddDetail
							 FROM ZnodeUser a
							' 
						
						
						EXEC (@SQL)
					End	
					Else If @IsGuestUser= 1 
					Begin
							SET @SQL='SELECT a.userId,a.AspNetuserId,a.UserName,a.FirstName,a.MiddleName,a.LastName
							,a.PhoneNumber,
							a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
							CONVERT( DATE, a.ModifiedDate) ModifiedDate,ur.RoleId,r.Name RoleName,
							(ISNULL(RTRIM(LTRIM(a.FirstName)), '''')+'' ''+ISNULL(RTRIM(LTRIM(a.MiddleName)), '''')+CASE
							WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '''') = '''' THEN '''' ELSE '' '' END+ISNULL(RTRIM(LTRIM(a.LastName)), '''')) FullName,
							a.AccountId,r.TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser
							into ##View_CustomerUserAddDetail
							FROM ZnodeUser a
							LEFT JOIN AspNetUserRoles ur ON(ur.UserId = a.AspNetUserId)
							LEFT JOIN AspNetRoles r ON(r.Id = ur.RoleId)                       
							LEFT JOIN ZnodePortalAccount ZPA ON(ZPA.AccountId = a.AccountId) 
							WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeUSer ZUQ WHERE ZUQ.UserId = a.UserId AND ZUQ.EmailOptIn = 1 AND ZUQ.AspNetUserId IS NULL )
							AND a.AspNetuserId is null'
						EXEC (@SQL)
					End
					Else IF Exists (Select filterName from #WhereColumnList where filterName in ('UserId') and filtername <> '')
					and  @IsGuestUser= 0   
					-- Customer List for user edit single user 
					Begin
					SET @SQL='SELECT a.userId,a.AspNetuserId,a.UserName,a.FirstName,a.MiddleName,a.LastName
					,a.PhoneNumber, a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
							CONVERT( DATE, a.ModifiedDate) ModifiedDate,ur.RoleId,r.Name RoleName,
							(ISNULL(RTRIM(LTRIM(a.FirstName)), '''')+'' ''+ISNULL(RTRIM(LTRIM(a.MiddleName)), '''')+CASE
							WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '''') = '''' THEN '''' ELSE '' '' END+ISNULL(RTRIM(LTRIM(a.LastName)), '''')) FullName,
							a.AccountId, r.TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser
							into ##View_CustomerUserAddDetail
							FROM ZnodeUser a
							LEFT JOIN ZnodeAccount e ON(e.AccountId = a.AccountId)
							LEFT JOIN AspNetUserRoles ur ON(ur.UserId = a.AspNetUserId)
							LEFT JOIN AspNetRoles r ON(r.Id = ur.RoleId)                       
							LEFT JOIN ZnodePortalAccount ZPA ON(ZPA.AccountId = a.AccountId) 
							WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeUSer ZUQ WHERE ZUQ.UserId = a.UserId AND ZUQ.EmailOptIn = 1 AND ZUQ.AspNetUserId IS NULL )'
						print @SQL
						
						EXEC (@SQL)
					End	
					Else -- Account user List 
					Begin
							SELECT a.userId,a.AspNetuserId,a.UserName,a.PhoneNumber,a.FirstName,a.MiddleName,a.LastName
							,a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
							CONVERT( DATE, a.ModifiedDate) ModifiedDate,ur.RoleId,r.Name RoleName,
						    (ISNULL(RTRIM(LTRIM(a.FirstName)), '')+' '+ISNULL(RTRIM(LTRIM(a.MiddleName)), '')+CASE
							WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '') = '' THEN '' ELSE ' ' END+ISNULL(RTRIM(LTRIM(a.LastName)), '')) FullName,
							a.AccountId, r.TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser
							into ##View_CustomerUserAddDetail
							FROM ZnodeUser a
							LEFT JOIN ZnodeAccount e ON(e.AccountId = a.AccountId)
							LEFT JOIN AspNetUserRoles ur ON(ur.UserId = a.AspNetUserId)
							LEFT JOIN AspNetRoles r ON(r.Id = ur.RoleId)                       
							LEFT JOIN ZnodePortalAccount ZPA ON(ZPA.AccountId = a.AccountId) 
							WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeUSer ZUQ WHERE ZUQ.UserId = a.UserId AND ZUQ.EmailOptIn = 1 AND ZUQ.AspNetUserId IS NULL )
					End
					
					alter table ##View_CustomerUserAddDetail 
					add StoreName varchar(1000), CountryName varchar(1000),CityName varchar(1000),StateName varchar(1000),
					PostalCode varchar(1000), CompanyName varchar(1000), SalesRepUserName varchar(600),SalesRepFullName varchar(1000), PortalId INT 

					IF @PortalId <> '0' 
					BEGIN 
					   UPDATE a SET a.PortalId = b.PortalId
					   FROM ##View_CustomerUserAddDetail a 
					   INNER JOIN ZnodeUserPortal b ON (b.Userid = a.Userid )
					END 

					IF (@WhereClauseAll like '%StoreName%' or @Order_By like '%StoreName%' )
					BEGIN
						CREATE NONCLUSTERED INDEX ##View_CustomerUserAddDetail_UserId
					   ON [dbo].[##View_CustomerUserAddDetail] ([userId])

						update  a set StoreName = CASE WHEN zp.StoreName IS NULL THEN 'ALL' ELSE zp.StoreName END 
						             -- , PortalId = up.PortalId
						from ##View_CustomerUserAddDetail a
						Left join  ZnodeUserPortal up ON(up.UserId = a.UserId)  
						Left JOIN ZnodePortal zp ON (up.PortalId = zp.PortalId)
							
					END
					
					IF (@WhereClauseAll like '%CountryName%' OR @WhereClauseAll like '%CityName%' OR @WhereClauseAll like '%StateName%' OR @WhereClauseAll like '%PostalCode%' OR @WhereClauseAll like '%CompanyName%')
					BEGIN
			 
						update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
						PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName
						from ##View_CustomerUserAddDetail a
						inner join ZnodeAccountAddress ZAA on a.AccountId = ZAA.AccountId
						inner  JOIN ZnodeAddress ZA on ZA.AddressId = ZAA.AddressId
						where isnull(a.AccountId,0)<> 0-- is not null
	 
						update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
						PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName
						from ##View_CustomerUserAddDetail a
						inner join ZnodeUserAddress ZUA on a.UserId = ZUA.UserId
						inner  JOIN ZnodeAddress ZA on ZA.AddressId = zua.AddressId
					END

					set @Rows = @PageNo * @Rows

					SET @SQL = '			
						
						create table #AccountDetail
						(
							UserId int,AspNetuserId nvarchar(200),UserName nvarchar(200),FirstName varchar(200),MiddleName varchar(200),LastName varchar(200),
							PhoneNumber nvarchar(100),Email nvarchar(100),EmailOptIn bit,CreatedBy int,CreatedDate datetime,ModifiedBy int,ModifiedDate datetime,
							RoleId varchar(200),RoleName varchar(200), FullName  varchar(1000),
							StoreName varchar(200),CountryName varchar(200), CityName varchar(200), StateName varchar(200), PostalCode varchar(200), CompanyName varchar(200)
							,AccountId int,SalesRepUserName varchar(200),SalesRepFullName varchar(200) ,RowId int identity 
						) 
						'+
						+' insert into #AccountDetail(UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,FullName,
						StoreName, CountryName, CityName, StateName, PostalCode, CompanyName,AccountId)
						SELECT top '+cast(@Rows as varchar(10))+'UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,FullName,
						StoreName, CountryName, CityName, StateName, PostalCode, CompanyName,AccountId
						FROM ##View_CustomerUserAddDetail where 1=1'+
						dbo.Fn_GetWhereClause(case when @WhereClauseGlobal<>'' and @WhereClause1 <> '' then +@WhereClause1 else @WhereClauseAll end, ' AND ')+
						dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC') + '
			
						Insert Into #TBL_RowCount 
						SELECT count(*)
						FROM ##View_CustomerUserAddDetail where 1=1'+
						dbo.Fn_GetWhereClause(case when @WhereClauseGlobal<>'' and @WhereClause1 <> '' then @WhereClauseGlobal+' And '+@WhereClause1 else @WhereClauseAll end, ' AND ')
						+'
						
						SELECT  UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,FullName,
						StoreName,AccountId,
						CountryName, CityName, StateName, PostalCode, CompanyName, SalesRepUserName, SalesRepFullName
						,Row_Number()Over('+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC')+')  RowNumber
						into ##CustomerUserAddDetail
						FROM #AccountDetail '+@PaginationWhereClause  +' '+ dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC');

						print @SQL
					EXEC (@SQL)

					Select @RowCount= isnull(RowsCount,0) from #TBL_RowCount

					ALTER TABLE ##CustomerUserAddDetail ADD AddressId Int

					------To get data for StoreName
						update  a set StoreName = CASE WHEN zp.StoreName IS NULL THEN 'ALL' ELSE zp.StoreName END 
						from ##CustomerUserAddDetail a
						Left join  ZnodeUserPortal up ON(up.UserId = a.UserId)  
						Left JOIN ZnodePortal zp ON (up.PortalId = zp.PortalId)

	
					----To get data for CountryName, CityName, StateName, PostalCode, CompanyName
					IF (EXISTS(SELECT * FROM @ColumnName where ([StringColumn] LIKE '%CountryName%' OR [StringColumn] LIKE '%CityName%' OR [StringColumn] LIKE '%StateName%' OR [StringColumn] LIKE '%PostalCode%' OR [StringColumn] LIKE '%CompanyName%'))
					OR (@WhereClauseAll like '%CountryName%' OR @WhereClauseAll like '%CityName%' OR @WhereClauseAll like '%StateName%' OR @WhereClauseAll like '%PostalCode%' OR @WhereClauseAll like '%CompanyName%'))
					BEGIN
			 
						update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
						PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName, a.AddressId = ZA.AddressId
						from ##CustomerUserAddDetail a
						inner join ZnodeAccountAddress ZAA on a.AccountId = ZAA.AccountId
						inner  JOIN ZnodeAddress ZA on ZA.AddressId = ZAA.AddressId
						where isnull(a.AccountId,0)<> 0-- is not null
	 
						update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
						PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName, a.AddressId = ZA.AddressId
						from ##CustomerUserAddDetail a
						inner join ZnodeUserAddress ZUA on a.UserId = ZUA.UserId
						inner  JOIN ZnodeAddress ZA on ZA.AddressId = zua.AddressId
					END

					
					----Updating SalesRep for user if any 
					update CUAD
					set CUAD.SalesRepUserName = ZU.UserName, 
					CUAD.SalesRepFullName = (ISNULL(RTRIM(LTRIM(ZU.FirstName)), '')+' '+ISNULL(RTRIM(LTRIM(ZU.MiddleName)), '')
					+CASE
					WHEN ISNULL(RTRIM(LTRIM(ZU.MiddleName)), '') = ''
					THEN ''
					ELSE ' '
					END+ISNULL(RTRIM(LTRIM(ZU.LastName)), '')) 
					from ##CustomerUserAddDetail CUAD
					inner join ZnodeSalesRepCustomerUserPortal SRCUP ON CUAD.UserId = SRCUP.CustomerUserid 
					inner join ZnodeUser ZU ON SRCUP.SalesRepUserId = ZU.UserId

					if ( exists(select * from ##UserList) OR @AddressColumnWhereClause <> '')
					begin
						SELECT UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,
						FullName,
						StoreName,
						CountryName, CityName, StateName, PostalCode, CompanyName, SalesRepUserName, SalesRepFullName
						from ##CustomerUserAddDetail CUAD
						where exists(select * from ##UserList UL where CUAD.UserId = UL.UserId and CUAD.AddressId = UL.AddressID )
						Order by RowNumber
					end
					else
					begin
						SELECT UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,
						FullName,
						StoreName,
						CountryName, CityName, StateName, PostalCode, CompanyName, SalesRepUserName, SalesRepFullName
						from ##CustomerUserAddDetail
						Order by RowNumber
					end
	
					if OBJECT_ID('tempdb..##CustomerUserAddDetail') is not null
					drop table ##CustomerUserAddDetail

					if OBJECT_ID('tempdb..##View_CustomerUserAddDetail') is not null
					drop table ##View_CustomerUserAddDetail
				
				END;
            ELSE
				BEGIN
					SELECT * FROM View_CustomerUserDetail AS VICUD WHERE 1 = 0;
					SET @RowCount = 0;
				END;
            END;			
         END TRY
         BEGIN CATCH
           --SELECT ERROR_MESSAGE()
		   DECLARE @ERROR_PROCEDURE VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_AdminUsers @RoleName = '+@RoleName+' ,@UserName='+@UserName+',@WhereClause='+cast(@WhereClause as varchar(max))+' ,@Rows= '+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_By='+@Order_By+',@RowCount='+CAST(@RowCount AS VARCHAR(50));
            EXEC Znode_InsertProcedureErrorLog
            @ProcedureName    = 'Znode_AdminUsers',
            @ErrorInProcedure = @ERROR_PROCEDURE,
            @ErrorMessage     = @ErrorMessage,
            @ErrorLine        = @ErrorLine,
            @ErrorCall        = @ErrorCall;
         END CATCH;


     END;
	 
go
IF exists(select * from sys.procedures where name = 'Znode_ImportPimProductData')
	drop proc Znode_ImportPimProductData
go

Create PROCEDURE [dbo].[Znode_ImportPimProductData]
(   @TableName          VARCHAR(200),
    @NewGUID            NVARCHAR(200),
    @TemplateId         NVARCHAR(200),
    @ImportProcessLogId INT,
    @UserId             INT,
    @LocaleId           INT,
    @DefaultFamilyId    INT)
AS
    
	/*
      Summary : Finally Import data into ZnodePimProduct, ZnodePimAttributeValue and ZnodePimAttributeValueLocale Table 
      Process : Flat global temporary table will split into cloumn wise and associted with Znode Attributecodes,
    		      Create group of product with their attribute code and values and inserted one by one products. 	   
    
      SourceColumnName : CSV file column headers
      TargetColumnName : Attributecode from ZnodePimAttribute Table 

	 ***  Need to log error if transaction failed during insertion of records into table.
    */

     BEGIN
		 SET NOCOUNT ON
         BEGIN TRY
             BEGIN TRAN ImportProducts;
             DECLARE @SQLQuery NVARCHAR(MAX);
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @AttributeTypeName NVARCHAR(10), @AttributeCode NVARCHAR(300), @AttributeId INT, @IsRequired BIT, @SourceColumnName NVARCHAR(600), @PimAttributeFamilyId INT, @NewProductId INT, @PimAttributeValueId INT, @status BIT= 0; 
             --Declare error Log Table 

			
			 DECLARE @FamilyAttributeDetail TABLE
			 ( 
				PimAttributeId int, AttributeTypeName varchar(300), AttributeCode varchar(300), SourceColumnName nvarchar(600), IsRequired bit, PimAttributeFamilyId int
			 );
             IF @DefaultFamilyId = 0
                 BEGIN
					INSERT INTO @FamilyAttributeDetail( PimAttributeId, AttributeTypeName, AttributeCode, SourceColumnName, IsRequired, PimAttributeFamilyId )
					--Call Process to insert data of defeult family with cource column name and target column name 
					EXEC Znode_ImportGetTemplateDetails @TemplateId = @TemplateId, @IsValidationRules = 0, @IsIncludeRespectiveFamily = 1,@DefaultFamilyId = @DefaultFamilyId;
                    UPDATE @FamilyAttributeDetail SET PimAttributeFamilyId = DBO.Fn_GetCategoryDefaultFamilyId();

					---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
					Delete FAD from @FamilyAttributeDetail FAD
					where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
					and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					               inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
                 END;
             ELSE
                 BEGIN
                     INSERT INTO @FamilyAttributeDetail(PimAttributeId,AttributeTypeName,AttributeCode,SourceColumnName,IsRequired,PimAttributeFamilyId)
                     --Call Process to insert data of defeult family with cource column name and target column name 
                     EXEC Znode_ImportGetTemplateDetails @TemplateId = @TemplateId,@IsValidationRules = 0,@IsIncludeRespectiveFamily = 1,@DefaultFamilyId = @DefaultFamilyId;

					 ---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
					Delete FAD from @FamilyAttributeDetail FAD
					where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
					and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					               inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
                 END;  
				
            -- Retrive PimProductId on the basis of SKU for update product 
			SET @SQLQuery = 'UPDATE tlb SET tlb.PimProductId = ZPAV.PimProductId 
							FROM ZnodePimAttributeValue AS ZPAV INNER JOIN ZnodePimAttributeValueLocale AS ZPAVL ON 
							(ZPAVL.PimAttributeValueId = ZPAV.PimAttributeValueId) 
							INNER JOIN [dbo].[ZnodePimAttribute] ZPA on ZPAV.PimAttributeId = ZPA.PimAttributeId AND ZPA.AttributeCode= ''SKU'' 
							INNER JOIN '+@TableName+' tlb ON ZPAVL.AttributeValue = ltrim(rtrim(tlb.SKU)) ';
			EXEC sys.sp_sqlexec	@SQLQuery	 	
				 	
					
             --Read all attribute details with their datatype 
			 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.TABLES WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#DefaultAttributeValue')
				BEGIN
					   CREATE TABLE #DefaultAttributeValue (AttributeTypeName  VARCHAR(300),PimAttributeDefaultValueId INT,PimAttributeId INT,
					   AttributeDefaultValueCode  VARCHAR(100));
					 
					INSERT INTO #DefaultAttributeValue(AttributeTypeName,PimAttributeDefaultValueId,PimAttributeId,AttributeDefaultValueCode)
					--Call Process to insert default data value 
					EXEC Znode_ImportGetPimAttributeDefaultValue;
				END;
             ELSE
                BEGIN
                    DROP TABLE #DefaultAttributeValue;
                END;
             EXEC sys.sp_sqlexec
                  @SQLQuery;
       
			DECLARE @PimProductDetail TABLE 
			 (
			      
				  PimAttributeId INT, PimAttributeFamilyId INT,ProductAttributeCode VARCHAR(300) NULL,
				  ProductAttributeDefaultValueId INT NULL,PimAttributeValueId  INT NULL,LocaleId INT,
				  PimProductId INT NULL,AttributeValue NVARCHAR(MAX) NULL,AssociatedProducts NVARCHAR(4000) NULL,ConfigureAttributeIds VARCHAR(2000) NULL,
				  ConfigureFamilyIds VARCHAR(2000) NULL,RowNumber INT  
                );

		-- Update Record count in log 
       DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
		EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount OUTPUT
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End

			
             -- Column wise split data from source table ( global temporary table ) and inserted into temporary table variable @PimProductDetail
             -- Add PimAttributeDefaultValue 
             DECLARE Cr_AttributeDetails CURSOR LOCAL FAST_FORWARD
             FOR SELECT PimAttributeId,AttributeTypeName,AttributeCode,IsRequired,SourceColumnName,PimAttributeFamilyId FROM @FamilyAttributeDetail  WHERE ISNULL(SourceColumnName, '') <> '';
             OPEN Cr_AttributeDetails;
             FETCH NEXT FROM Cr_AttributeDetails INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @PimAttributeFamilyId;
             WHILE @@FETCH_STATUS = 0
                 BEGIN
                    SET @NewProductId = 0;
                    SET @SQLQuery = ' SELECT '''+CONVERT(VARCHAR(100), @PimAttributeFamilyId)+''' PimAttributeFamilyId , PimProductId PimProductId,'''+'['+@AttributeCode+']'+''' ProductAttributeCode ,'''+CONVERT(VARCHAR(100), @AttributeId)+''' AttributeId ,
									(SELECT TOP 1  PimAttributeDefaultValueId FROM #DefaultAttributeValue Where PimAttributeId =  '
									+ CONVERT(VARCHAR(100), @AttributeId)+'AND  AttributeDefaultValueCode = TN.['+@SourceColumnName+'] ) PimAttributeDefaultValueId ,['
									+ @SourceColumnName+'],'+CONVERT(VARCHAR(100), @LocaleId)+'LocaleId
								, RowNumber FROM '+@TableName+' TN';
								print @SQLQuery
                    INSERT INTO @PimProductDetail( PimAttributeFamilyId, PimProductId,ProductAttributeCode, PimAttributeId, ProductAttributeDefaultValueId, AttributeValue, LocaleId, RowNumber )
					
					EXEC sys.sp_sqlexec @SQLQuery;
                    FETCH NEXT FROM Cr_AttributeDetails INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @PimAttributeFamilyId;
                 END;
             CLOSE Cr_AttributeDetails;
             DEALLOCATE Cr_AttributeDetails;
			 
			
			 if object_id('tempdb..#PimProductDetail1') is not null
				drop table #PimProductDetail1

			 Select * into #PimProductDetail1 from @PimProductDetail

			 UPDATE a 
			 SET ConfigureAttributeIds =  SUBSTRING((SELECT ','+CAST(c.PimAttributeId As VARCHAR(100)) 
			 FROM #PimProductDetail1 c 
			 INNER JOIN ZnodePimAttribute b ON (b.PimAttributeId = c.PimAttributeId)
			 WHERE IsConfigurable =1  AND c.RowNumber = a.RowNumber  FOR XML PATH('')),2,4000) 
			 FROM #PimProductDetail1 a 
			WHERE EXISTS (SELECT TOP 1 1 FROM #PimProductDetail1 ab  WHERE ab.RowNumber = a.RowNumber AND	ab.ProductAttributeCode = '[ProductType]' 
			 AND ab.AttributeValue = 'ConfigurableProduct' )
				
             -- In case of Yes/No : If value is not TRUE OR  1 then it will be  False else True
			 --If default Value set not need of hard code for IsActive
			 UPDATE ppdti SET ppdti.AttributeValue = CASE WHEN Upper(ISNULL(ppdti.AttributeValue, '')) in ( 'TRUE','1')  THEN 'true'  ELSE 'false' END FROM #PimProductDetail1 ppdti
                INNER JOIN #DefaultAttributeValue dav ON ppdti.PimAttributeId = dav.PimAttributeId WHERE   dav.AttributeTypeName = 'Yes/No';
            
		
		-----------Added Performance patch 
		DECLARE @PublishStateIdForDraft INT= [dbo].[Fn_GetPublishStateIdForDraftState]();
		DECLARE @PimDefaultFamily INT= dbo.Fn_GetDefaultPimProductFamilyId();
        DECLARE @pimSkuAttributeId VARCHAR(50)= [dbo].[Fn_GetProductSKUAttributeId]();
        DECLARE @PimIsDownlodableAttributeId VARCHAR(50)= [dbo].[Fn_GetIsDownloadableAttributeId]();
        DECLARE @PublishStateIdForNotPublished INT= [dbo].[Fn_GetPublishStateIdForForNotPublishedState]();

		DELETE FROM #PimProductDetail1 WHERE RTRIM(LTRIM(ISNULL(AttributeValue, ''))) = '';
        
		CREATE INDEX Inx_PimProductDetail_Bulk1 ON #PimProductDetail1(RowNumber);

        ------------------------------------Bulk Row Process
        DECLARE @MaxCount INT, @MinRow INT, @MaxRow INT, @Rows numeric(10,2);
        ---- Count of total rows for import
		SELECT @MaxCount = COUNT(*) FROM #PimProductDetail1;
		
		---- Count of rows in loop for import
		SELECT @Rows = (select top 1 FeatureValues from ZnodeGlobalSetting where FeatureName = 'ProductImportBulk')  --ceiling(@MaxCount/100.0)
        
		SELECT @MaxCount = CEILING(@MaxCount / @Rows);

        IF OBJECT_ID('tempdb..#Temp_ImportLoop') IS NOT NULL
            DROP TABLE #Temp_ImportLoop;
        
		---- To get the min and max rows for import in loop
		;WITH cte AS 
		(
			SELECT RowId = 1, 
				   MinRow = 1, 
                   MaxRow = cast(@Rows as int)
            UNION ALL
            SELECT RowId + 1, 
                   MinRow + cast(@Rows as int), 
                   MaxRow + cast(@Rows as int)
            FROM cte
            WHERE RowId + 1 <= @MaxCount
		)
        SELECT RowId, MinRow, MaxRow
        INTO #Temp_ImportLoop
        FROM cte
		option (maxrecursion 0);

        --while @MaxCount <= @minRow
        DECLARE cur_BulkData CURSOR LOCAL FAST_FORWARD
        FOR SELECT MinRow, MaxRow FROM #Temp_ImportLoop;

        OPEN cur_BulkData;
        FETCH NEXT FROM cur_BulkData INTO  @MinRow, @MaxRow;

        WHILE @@FETCH_STATUS = 0
        BEGIN
		
		BEGIN TRAN ImportProducts;

			if object_id ('tempdb..#PimProductDetail_Bulk_Process')is not null
					drop table tempdb..#PimProductDetail_Bulk_Process

			CREATE TABLE #PimProductDetail_Bulk_Process
			([PimAttributeId]                 [INT] NULL, 
				[PimAttributeFamilyId]           [INT] NULL, 
				[ProductAttributeCode]           [VARCHAR](300) NULL, 
				[ProductAttributeDefaultValueId] [INT] NULL, 
				[PimAttributeValueId]            [INT] NULL, 
				[LocaleId]                       [INT] NULL, 
				[PimProductId]                   [INT] NULL, 
				[AttributeValue]                 [NVARCHAR](MAX) NULL, 
				[AssociatedProducts]             [NVARCHAR](4000) NULL, 
				[ConfigureAttributeIds]          [VARCHAR](2000) NULL, 
				[ConfigureFamilyIds]             [VARCHAR](2000) NULL, 
				[RowNumber]                      [INT] NULL, 
				SKU1                             VARCHAR(600),
				Id Int Identity(1,1)Primary Key
			);

			CREATE INDEX Inx_PimProductDetail_Bulk_Process ON #PimProductDetail_Bulk_Process(ProductAttributeCode, PimProductId);
			CREATE INDEX Inx_PimProductDetail_Bulk_Process1 ON #PimProductDetail_Bulk_Process(RowNumber);
			CREATE INDEX Inx_PimProductDetail_Bulk_Process2 ON #PimProductDetail_Bulk_Process(ProductAttributeCode)
			CREATE INDEX Inx_PimProductDetail_Bulk_Process3 ON #PimProductDetail_Bulk_Process(PimAttributeId, PimProductId);

			---- Insert rows for import in bulk
            INSERT INTO #PimProductDetail_Bulk_Process
            ([PimAttributeId], 
                [PimAttributeFamilyId], 
                [ProductAttributeCode], 
                [ProductAttributeDefaultValueId], 
                [PimAttributeValueId], 
                [LocaleId], 
                [PimProductId], 
                [AttributeValue], 
                [AssociatedProducts], 
                [ConfigureAttributeIds], 
                [ConfigureFamilyIds], 
                [RowNumber]
            )
            SELECT [PimAttributeId], 
                    [PimAttributeFamilyId], 
                    [ProductAttributeCode], 
                    [ProductAttributeDefaultValueId], 
                    [PimAttributeValueId], 
                    [LocaleId], 
                    [PimProductId], 
                    ltrim(rtrim([AttributeValue])), 
                    [AssociatedProducts], 
                    [ConfigureAttributeIds], 
                    [ConfigureFamilyIds], 
                    [RowNumber]
            FROM #PimProductDetail1 a
            WHERE a.[RowNumber] BETWEEN @MinRow AND @MaxRow;

			--select * from @PimProductDetail

			--select * from #PimProductDetail1



            ---------------------------Start Importing 
			if object_id ('tempdb..#TBL_DefaultAttributeId')is not null
				drop table #TBL_DefaultAttributeId

			if object_id ('tempdb..#TBL_MediaAttributeId')is not null
				drop table #TBL_MediaAttributeId

			if object_id ('tempdb..#TBL_TextAreaAttributeId')is not null
				drop table #TBL_TextAreaAttributeId

			if object_id ('tempdb..#TBL_MediaAttributeValue')is not null
				drop table #TBL_MediaAttributeValue

			if object_id ('tempdb..#TBL_DefaultAttributeValue')is not null
				drop table #TBL_DefaultAttributeValue

			if object_id ('tempdb..#ZnodePimAttributeValue')is not null
				drop table #ZnodePimAttributeValue

				
            CREATE TABLE #TBL_DefaultAttributeId ( PimAttributeId INT PRIMARY KEY, AttributeCode  VARCHAR(600) );

            CREATE TABLE #TBL_MediaAttributeId ( PimAttributeId INT PRIMARY KEY, AttributeCode  VARCHAR(600) );

            CREATE TABLE #TBL_TextAreaAttributeId ( PimAttributeId INT PRIMARY KEY, AttributeCode  VARCHAR(600) );
           
		    CREATE TABLE #TBL_MediaAttributeValue ( PimAttributeValueId INT, LocaleId INT, AttributeValue VARCHAR(300), MediaId INT );

            CREATE TABLE #TBL_DefaultAttributeValue ( PimAttributeValueId INT, LocaleId INT, AttributeValue INT );

            CREATE TABLE #ZnodePimAttributeValue (PimAttributeValueId  INT, PimAttributeFamilyId INT, PimAttributeId INT, PimProductId INT );

            DECLARE @ConfigureFamilyId VARCHAR(4000);

            INSERT INTO #TBL_DefaultAttributeId ( PimAttributeId, AttributeCode )
            SELECT PimAttributeId, AttributeCode
            FROM [dbo].[Fn_GetDefaultAttributeId]();

			INSERT INTO #TBL_MediaAttributeId (PimAttributeId, AttributeCode )
			SELECT PimAttributeId, AttributeCode
			FROM [dbo].[Fn_GetProductMediaAttributeId]();

            INSERT INTO #TBL_TextAreaAttributeId ( PimAttributeId, AttributeCode )
            SELECT PimAttributeId, AttributeCode
            FROM [dbo].[Fn_GetTextAreaAttributeId]();

            SELECT TOP 1 @PimAttributeFamilyId = PimAttributeFamilyId FROM #PimProductDetail_Bulk_Process;

			if object_id ('tempdb..#cte')is not null
				drop table #cte

            SELECT AttributeValue AS SKU, RowNumber
            INTO #cte
            FROM #PimProductDetail_Bulk_Process
            WHERE ProductAttributeCode = '[SKU]';
              
			

            CREATE INDEX Inx_cte_RowNumber ON #cte(RowNumber);
            UPDATE a SET a.SKU1 = B.SKU
            FROM #PimProductDetail_Bulk_Process a
            INNER JOIN #cte b ON a.RowNumber = b.RowNumber;

		
			
            SELECT TOP 1 @LocaleId = LocaleId FROM #PimProductDetail_Bulk_Process;

            ----Update ZNodePimProduct 
            UPDATE ZNodePimProduct
            SET PimAttributeFamilyId = DP.PimAttributeFamilyId, 
                PublishStateId = @PublishStateIdForDraft, 
                ModifiedBy = @UserId, 
                ModifiedDate = @GetDate
            FROM ZNodePimProduct ZPP
            INNER JOIN #PimProductDetail_Bulk_Process DP ON ZPP.PimProductId = DP.PimProductId;
      
			if object_id ('tempdb..#ZnodePimProduct')is not null
				drop table #ZnodePimProduct

			CREATE TABLE #ZnodePimProduct(PimProductId INT,ExternalId INT  Primary key)

			--create index Idx_ZnodePimProduct_ExternalId on #ZnodePimProduct(ExternalId)


			 

			----Insert into ZNodePimProduct 
            INSERT INTO ZnodePimProduct
            (PimAttributeFamilyId, 
                ExternalId, 
                CreatedBy, 
                CreatedDate, 
                ModifiedBy, 
                ModifiedDate, 
                PublishStateId
            )
			output inserted.PimProductId, inserted.ExternalId into #ZnodePimProduct(PimProductId,ExternalId)
            SELECT PimAttributeFamilyId, 
                    RowNumber, 
                    @UserId, 
                    @GetDate, 
                    @UserId, 
                    @GetDate, 
                    @PublishStateIdForNotPublished
            FROM #PimProductDetail_Bulk_Process
            WHERE ProductAttributeCode = '[SKU]'
            AND PimProductId IS NULL;
            
			----Update newly created productIds
            UPDATE a SET a.PimProductId = b.PimProductId
            FROM #PimProductDetail_Bulk_Process a
            INNER JOIN #ZnodePimProduct b ON a.RowNumber = b.ExternalId;

            ----Insert Downloadable products into ZnodePimDownloadableProduct
            INSERT INTO ZnodePimDownloadableProduct (SKU, ProductName, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
            SELECT PDSKU.AttributeValue, PDProdName.AttributeValue, @UserId, @GetDate, @UserId, @GetDate
            FROM #PimProductDetail_Bulk_Process PDSKU
            INNER JOIN #PimProductDetail_Bulk_Process PDProdName ON PDProdName.RowNumber = PDSKU.RowNumber
            INNER JOIN #PimProductDetail_Bulk_Process PDDownload ON PDDownload.RowNumber = PDSKU.RowNumber
            WHERE PDSKU.ProductAttributeCode = @pimSkuAttributeId
            AND PDProdName.ProductAttributeCode = '[SKU]'
            AND PDDownload.PimAttributeId = @PimIsDownlodableAttributeId
            AND PDDownload.AttributeValue = 'true'
            AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodePimDownloadableProduct WHERE ZnodePimDownloadableProduct.SKU = PDSKU.AttributeValue );

            ---- update ZnodePimAttributeValue : attribute data for Product
            UPDATE TARGET
            SET TARGET.PimAttributeFamilyId = CASE
                                                    WHEN Source.PimAttributeFamilyId = 0
                                                    THEN NULL
                                                    ELSE Source.PimAttributeFamilyId
                                                END, 
                    TARGET.ModifiedBy = @UserId, 
                    TARGET.ModifiedDate = @GetDate, 
                    TARGET.PimProductId = SOURCE.PimProductId
            OUTPUT INSERTED.PimAttributeValueId, 
                    INSERTED.PimAttributeFamilyId, 
                    INSERTED.PimAttributeId, 
                    INSERTED.PimProductId
                    INTO #ZnodePimAttributeValue
            FROM ZnodePimAttributeValue TARGET
            INNER JOIN #PimProductDetail_Bulk_Process SOURCE ON TARGET.PimProductId = SOURCE.PimProductId AND TARGET.PimAttributeId = SOURCE.PimAttributeId;
             
			---- Inserting attribute data for Product 
			INSERT INTO ZnodePimAttributeValue 
			( 
				PimAttributeFamilyId, 
				PimProductId, PimAttributeId, 
				PimAttributeDefaultValueId, 
				CreatedBy, 
				CreatedDate, 
				ModifiedBy, 
				ModifiedDate 
			)
            OUTPUT INSERTED.PimAttributeValueId, 
                    INSERTED.PimAttributeFamilyId, 
                    INSERTED.PimAttributeId, 
                    INSERTED.PimProductId
                    INTO #ZnodePimAttributeValue
            SELECT 
				CASE
                    WHEN Source.PimAttributeFamilyId = 0
                    THEN @PimDefaultFamily
                    ELSE Source.PimAttributeFamilyId
                END, 
                SOURCE.PimProductId, 
                ISNULL(SOURCE.PimAttributeId, 0),
                CASE
                    WHEN SOURCE.ProductAttributeDefaultValueId = 0
                    THEN NULL
                    ELSE SOURCE.ProductAttributeDefaultValueId
                END, 
                @UserId, 
                @GetDate, 
                @UserId, 
                @GetDate
            FROM #PimProductDetail_Bulk_Process SOURCE
            WHERE NOT EXISTS
            (
                SELECT *
                FROM ZnodePimAttributeValue TARGET
                WHERE TARGET.PimProductId = SOURCE.PimProductId
                        AND TARGET.PimAttributeId = SOURCE.PimAttributeId
            );

            -------------------------
			if object_id ('tempdb..#MediaData')is not null
				drop table #MediaData

            CREATE TABLE #MediaData (MediaId INT, PimProductId INT, PimAttributeId INT, PimAttributeFamilyId INT, LocaleId INT );

			---- Get Product Media Data
            INSERT INTO #MediaData ( MediaId , PimProductId , PimAttributeId , PimAttributeFamilyId , LocaleId )
            SELECT SP.Item, a.PimProductId, a.PimAttributeId, PimAttributeFamilyId, a.LocaleId
            FROM #PimProductDetail_Bulk_Process a
            INNER JOIN #TBL_MediaAttributeId c ON(c.PimAttributeId = a.PimAttributeId)
            CROSS APPLY dbo.split(a.AttributeValue, ',') SP;

			---- Get product media attribute data
            INSERT INTO #TBL_MediaAttributeValue ( PimAttributeValueId, LocaleId, AttributeValue, MediaId )
            SELECT a.PimAttributeValueId, b.LocaleId, zm.Path AttributeValue, ZM.MediaId
            FROM #ZnodePimAttributeValue AS a
            INNER JOIN #MediaData AS b ON(a.PimAttributeId = b.PimAttributeId
                                            AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0)
                                            AND a.PimProductId = b.PimProductId)
            INNER JOIN ZnodeMedia ZM ON(b.MediaId = ZM.MediaId);
     
			---- Deleting product media attribute
            DELETE FROM ZnodePimProductAttributeMedia
            WHERE EXISTS
            (
                SELECT TOP 1 1
                FROM #TBL_MediaAttributeValue TBLM
                WHERE ZnodePimProductAttributeMedia.PimAttributeValueId = TBLM.PimAttributeValueId
                        AND TBLM.MediaId <> ZnodePimProductAttributeMedia.MediaId
                        AND ZnodePimProductAttributeMedia.Localeid = @LocaleId
            );

            ---- update ZnodePimProductAttributeMedia : attribute data for Product
            UPDATE TARGET
                SET 
                    TARGET.MediaPath = SOURCE.AttributeValue, 
                    TARGET.MediaId = SOURCE.MediaId, 
                    TARGET.ModifiedBy = @UserId, 
                    TARGET.ModifiedDate = @GetDate
            FROM ZnodePimProductAttributeMedia TARGET
            INNER JOIN #TBL_MediaAttributeValue SOURCE ON TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
                                                        AND TARGET.MediaPAth = SOURCE.AttributeValue
                                                        AND TARGET.LocaleId = SOURCE.LocaleId;
    
            ---- inserting Media attribute data for Product
            INSERT INTO ZnodePimProductAttributeMedia 
			( 
				PimAttributeValueId, 
				LocaleId, MediaPath, 
				MediaId, 
				CreatedBy, 
				CreatedDate, 
				ModifiedBy, 
                ModifiedDate
            )
            SELECT SOURCE.PimAttributeValueId, 
                    SOURCE.LocaleId, 
                    SOURCE.AttributeValue, 
                    SOURCE.MediaId, 
                    @UserId, 
                    @GetDate, 
                    @UserId, 
                    @GetDate
            FROM #TBL_MediaAttributeValue SOURCE
            WHERE NOT EXISTS
            (
                SELECT *
                FROM ZnodePimProductAttributeMedia TARGET
                WHERE TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
                        AND TARGET.MediaPAth = SOURCE.AttributeValue
                        AND TARGET.LocaleId = SOURCE.LocaleId
            );

            --------------------------
			if object_id ('tempdb..#Cte_TextAreaAttributeValue')is not null
				drop table #Cte_TextAreaAttributeValue

			---- Getting text area data in temp #Cte_TextAreaAttributeValue
            SELECT a.PimAttributeValueId, 
                    b.LocaleId, 
                    AttributeValue
            INTO #Cte_TextAreaAttributeValue
            FROM #ZnodePimAttributeValue AS a
            INNER JOIN #PimProductDetail_Bulk_Process AS b ON(a.PimAttributeId = b.PimAttributeId
                                                            AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0)
                                                            AND a.PimProductId = b.PimProductId)
            INNER JOIN #TBL_TextAreaAttributeId c ON(c.PimAttributeId = b.PimAttributeId);

            ---- update ZnodePimProductAttributeTextAreaValue : attribute data for Product
            UPDATE TARGET
            SET TARGET.AttributeValue = SOURCE.AttributeValue, 
                TARGET.CreatedBy = @UserId, 
                TARGET.ModifiedBy = @UserId, 
                TARGET.ModifiedDate = @GetDate
            FROM ZnodePimProductAttributeTextAreaValue TARGET
            INNER JOIN #Cte_TextAreaAttributeValue SOURCE ON TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
                                                                      AND TARGET.LocaleId = SOURCE.LocaleId;

            ---- inserting TextAreaValue attribute data for Product
            INSERT INTO ZnodePimProductAttributeTextAreaValue
            (
				PimAttributeValueId, 
                LocaleId, 
                AttributeValue, 
                CreatedBy, 
                CreatedDate, 
                ModifiedBy, 
                ModifiedDate
            )
            SELECT SOURCE.PimAttributeValueId, 
                    SOURCE.LocaleId, 
                    SOURCE.AttributeValue, 
                    @UserId, 
                    @GetDate, 
                    @UserId, 
                    @GetDate
            FROM #Cte_TextAreaAttributeValue SOURCE
            WHERE NOT EXISTS
            (
                SELECT *
                FROM ZnodePimProductAttributeTextAreaValue TARGET
                WHERE TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
                        AND TARGET.LocaleId = SOURCE.LocaleId
            );
           
		    ---- Getting attribute default values for product
            INSERT INTO #TBL_DefaultAttributeValue ( PimAttributeValueId, LocaleId, AttributeValue )
            SELECT a.PimAttributeValueId, b.LocaleId, d.PimAttributeDefaultValueId AttributeValue
            FROM #ZnodePimAttributeValue AS a
            INNER JOIN #PimProductDetail_Bulk_Process AS b ON(a.PimAttributeId = b.PimAttributeId
                                                                AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0)
                                                                AND a.PimProductId = b.PimProductId)
            INNER JOIN #TBL_DefaultAttributeId c ON(c.PimAttributeId = b.PimAttributeId)
            CROSS APPLY dbo.split(b.AttributeValue, ',') SP
            INNER JOIN ZnodePimAttributeDefaultValue d ON d.PimAttributeId = b.PimAttributeId
                                                            AND SP.Item = d.AttributeDefaultValueCode;
			---- Deleting prodyuct attribute default value
            DELETE FROM ZnodePimProductAttributeDefaultValue
            WHERE EXISTS
            (
                SELECT TOP 1 1
                FROM #TBL_DefaultAttributeValue TBLAV
                WHERE TBLAV.PimAttributeValueId = ZnodePimProductAttributeDefaultValue.PimAttributeValueId
                        AND TBLAV.AttributeValue <> ZnodePimProductAttributeDefaultValue.PimAttributeDefaultValueId
                        AND ZnodePimProductAttributeDefaultValue.LocaleId = @LocaleId
            );

			---- update ZnodePimProductAttributeDefaultValue : attribute data for Product
			UPDATE TARGET
			SET TARGET.PimAttributeDefaultValueId = SOURCE.AttributeValue, 
				TARGET.ModifiedBy = @UserId, 
				TARGET.ModifiedDate = @GetDate
			FROM ZnodePimProductAttributeDefaultValue TARGET
					INNER JOIN #TBL_DefaultAttributeValue SOURCE ON TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
																	AND TARGET.PimAttributeDefaultValueId = SOURCE.AttributeValue
																	AND TARGET.LocaleId = SOURCE.LocaleId;

            ---- insert ZnodePimProductAttributeDefaultValue : attribute data for Product
            INSERT INTO ZnodePimProductAttributeDefaultValue
            (
				PimAttributeValueId, 
                LocaleId, 
                PimAttributeDefaultValueId, 
                CreatedBy, 
                CreatedDate, 
                ModifiedBy, 
                ModifiedDate
            )
            SELECT 
				SOURCE.PimAttributeValueId, 
                SOURCE.LocaleId, 
                SOURCE.AttributeValue, 
                @UserId, 
                @GetDate, 
                @UserId, 
                @GetDate
            FROM #TBL_DefaultAttributeValue SOURCE
            WHERE NOT EXISTS
            (
                SELECT *
                FROM ZnodePimProductAttributeDefaultValue TARGET
                WHERE TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
                        AND TARGET.PimAttributeDefaultValueId = SOURCE.AttributeValue
                        AND TARGET.LocaleId = SOURCE.LocaleId
            );
               

            IF OBJECT_ID('tempdb..#cte_ZnodePimAttributeValue') IS NOT NULL
                DROP TABLE #cte_ZnodePimAttributeValue;

			CREATE TABLE #cte_ZnodePimAttributeValue(PimAttributeValueId int, LocaleId int, AttributeValue nvarchar(max))

			CREATE INDEX Idx_cte_ZnodePimAttributeValue on #cte_ZnodePimAttributeValue(PimAttributeValueId, LocaleId)

			INSERT INTO #cte_ZnodePimAttributeValue (PimAttributeValueId, LocaleId, AttributeValue)
            SELECT a.PimAttributeValueId, b.LocaleId,AttributeValue                
            FROM #ZnodePimAttributeValue AS a
            INNER JOIN #PimProductDetail_Bulk_Process AS b ON(a.PimAttributeId = b.PimAttributeId
                                                                AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0)
                                                                AND a.PimProductId = b.PimProductId)
            WHERE NOT EXISTS ( SELECT TOP 1 1 FROM #TBL_DefaultAttributeId TBLDA WHERE TBLDA.PimAttributeId = b.PimAttributeId )
            AND NOT EXISTS ( SELECT TOP 1 1 FROM #TBL_MediaAttributeId TBLMA WHERE TBLMA.PimAttributeId = b.PimAttributeId )
            AND NOT EXISTS ( SELECT TOP 1 1 FROM #TBL_TextAreaAttributeId TBLTA WHERE TBLTA.PimAttributeId = b.PimAttributeId );

            ---- update ZnodePimAttributeValueLocale : attribute data for Product
            UPDATE TARGET
            SET TARGET.AttributeValue = SOURCE.AttributeValue, 
                TARGET.ModifiedBy = @UserId, 
                TARGET.ModifiedDate = @GetDate
            FROM ZnodePimAttributeValueLocale TARGET
            INNER JOIN #cte_ZnodePimAttributeValue SOURCE ON TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
                                                           AND TARGET.LocaleId = SOURCE.LocaleId;

            ---- inserting AttributeDefaultValue : attribute data for Product
            INSERT INTO ZnodePimAttributeValueLocale
            (
				PimAttributeValueId, 
                LocaleId, 
                AttributeValue, 
                CreatedBy, 
                CreatedDate, 
                ModifiedBy, 
                ModifiedDate
            )
            SELECT 
				SOURCE.PimAttributeValueId, 
                SOURCE.LocaleId, 
                SOURCE.AttributeValue, 
                @UserId, 
                @GetDate, 
                @UserId, 
                @GetDate
            FROM #cte_ZnodePimAttributeValue SOURCE
            WHERE NOT EXISTS
            (
                SELECT *
                FROM ZnodePimAttributeValueLocale TARGET
                WHERE TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
                        AND TARGET.LocaleId = SOURCE.LocaleId
            );

			---- Inserting configurable products into ZnodePimConfigureProductAttribute
            INSERT INTO [ZnodePimConfigureProductAttribute]
            (PimProductId, 
                PimFamilyId, 
                PimAttributeId, 
                CreatedBy, 
                CreatedDate, 
                ModifiedBy, 
                ModifiedDate
            )
            SELECT DISTINCT PD.PimProductId, 
                    NULL, 
                    q.PimAttributeId, 
                    @UserId, 
                    @GetDate, 
                    @UserId, 
                    @GetDate
            FROM #PimProductDetail_Bulk_Process PD
                CROSS APPLY dbo.Split([ConfigureAttributeIds], ',') AS b
                INNER JOIN ZnodePimAttribute AS q ON(q.PimAttributeId = b.Item)
            WHERE NOT EXISTS
            (
                SELECT TOP 1 1
                FROM ZnodePimConfigureProductAttribute RTR
                WHERE RTR.PimProductId = PD.PimProductId
                        AND RTR.PimAttributeId = q.PimAttributeId
            );


			COMMIT TRAN ImportProducts;

            FETCH NEXT FROM cur_BulkData INTO  @MinRow, @MaxRow;
        END;
    CLOSE cur_BulkData;
    DEALLOCATE cur_BulkData;
	-----------Added Performance patch end

		DELETE FROM ZnodePimConfigureProductAttribute  
			WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePimAttributeValue  a WHERE a.PimProductId = ZnodePimConfigureProductAttribute.PimProductId AND a.PimAttributeID = ZnodePimConfigureProductAttribute.PimAttributeID )
			AND EXISTS (SELECT TOP 1 1 FROM ZnodePimAttributeValue a 
			INNER JOIN ZnodePimAttribute ty ON (ty.PimAttributeId = a.PimAttributeId)
			INNER JOIN ZnodePimProductAttributeDefaultValue t ON (t.PimAttributeValueId = a.PimAttributeValueId )
			INNER JOIN ZnodePimAttributeDefaultValue y ON (y.PimAttributeDefaultValueId = t.PimAttributeDefaultValueId)
			INNER JOIN View_loadmanageProductInternal  TU ON (TU.AttributeCode = 'SKU' AND TU.PimProductId = a.PimProductId  )
			WHERE ty.AttributeCode = 'ProductType' AND y.AttributeDefaultValueCode = 'ConfigurableProduct'
			AND a.PimProductId = ZnodePimConfigureProductAttribute.PimProductId
			AND EXISTS (SELECT TOP 1 1 FROM #PimProductDetail1 TM WHERE TM.PimAttributeID = (SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'SKU') AND TM.AttributeValue = TU.AttributeValue )) 
					   
						
		----Delete simple products if inserted in table ZnodePimConfigureProductAttribute 
		DELETE FROM ZnodePimConfigureProductAttribute
		WHERE EXISTS
		(
			SELECT TOP 1 1
			FROM ZnodePimAttributeValue a
					INNER JOIN ZnodePimAttribute ty ON(ty.PimAttributeId = a.PimAttributeId)
					INNER JOIN ZnodePimProductAttributeDefaultValue t ON(t.PimAttributeValueId = a.PimAttributeValueId)
					INNER JOIN ZnodePimAttributeDefaultValue y ON(y.PimAttributeDefaultValueId = t.PimAttributeDefaultValueId)
			WHERE ty.AttributeCode = 'ProductType'
					AND y.AttributeDefaultValueCode = 'SimpleProduct'
					AND a.PimProductId = ZnodePimConfigureProductAttribute.PimProductId
		);

		---- Update family of Product in table ZnodePimConfigureProductAttribute 
		UPDATE ZnodePimConfigureProductAttribute
		SET PimFamilyId = b.PimAttributeFamilyId
		FROM ZnodePimConfigureProductAttribute a
				INNER JOIN ZnodePimProduct b ON a.PimProductId = b.PimProductId;

		---- Updating status of Import Process Log
		UPDATE ZnodeImportProcessLog
			SET 
				STATUS = dbo.Fn_GetImportStatus(2), 
				ProcessCompletedDate = GETDATE()
		WHERE ImportProcessLogId = @ImportProcessLogId;

             COMMIT TRAN ImportProducts;
         END TRY
         BEGIN CATCH
		 ROLLBACK TRAN ImportProducts;
		  INSERT INTO ZnodeImportLog(ErrorDescription,ColumnName,Data,RowNumber,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
                 Select  46,ERROR_PROCEDURE(),ERROR_MESSAGE(),ERROR_LINE(),@newGUID,@UserId,@GetDate,@UserId,@GetDate, @ImportProcessLogId  
		
		SET @SQLQuery = ' Select @FailedRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
					EXEC	sp_executesql @SQLQuery , N'@FailedRecordCount BIGINT out' , @FailedRecordCount =@FailedRecordCount out
					--SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS  NULL AND  ImportProcessLogId = @ImportProcessLogId;
					SELECT @SuccessRecordCount = 0
									
					UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
					WHERE ImportProcessLogId = @ImportProcessLogId;

		 UPDATE ZnodeImportProcessLog
			SET 
				STATUS = dbo.Fn_GetImportStatus(3), 
				ProcessCompletedDate = GETDATE()
		WHERE ImportProcessLogId = @ImportProcessLogId;
             SELECT ERROR_MESSAGE(),ERROR_LINE(),ERROR_PROCEDURE();
            -- UPDATE ZnodeImportProcessLog SET Status = dbo.Fn_GetImportStatus(3), ProcessCompletedDate = @GetDate WHERE ImportProcessLogId = @ImportProcessLogId;
            -- ROLLBACK TRAN ImportProducts;
         END CATCH;
     END;
go
IF exists(select * from sys.procedures where name = 'Znode_ImportValidatePimProductData')
	drop proc Znode_ImportValidatePimProductData
go

Create PROCEDURE [dbo].[Znode_ImportValidatePimProductData]
(   @ImportHeadName     VARCHAR(200),
    @TableName          VARCHAR(200),
    @NewGUID            NVARCHAR(200),
    @TemplateId         INT,
    @UserId             INT,
    @LocaleId           INT           = 1,
    @IsCategory         INT           = 0,
    @DefaultFamilyId    INT           = 0,
    @ImportProcessLogId INT,
    @PriceListId        INT,
	@CountryCode VARCHAR(100) = '',
	@PimCatalogId         INT    = 0 ,
	@PortalId int = 0,
	@IsAccountAddress bit = 0 )
AS
     SET NOCOUNT ON;

/*
    Summary :   Import PimProduct / Price / Inventory / Category / Category Associated Data 
    Process :   Admin site will upload excel / csv file in database and create global temporary table
				Procedure Znode_ImportValidatePimProductData will validate data with attribute validation rule
				If datatype validation issue found in input daata will logged into table "ZnodeImportLog"
				If Data is correct and record count in table ZnodeImportLog will be 0 then process for import data into Base tables
				To import data call procedure "Znode_ImportPimProductData"
    		  
				SourceColumnName: CSV file column headers
				TargetColumnName: Attributecode from ZnodePimAttribute Table (Consider those Attributecodes configured with default family only)
*/

     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             --BEGIN TRAN TRN_ImportValidProductData;
             DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
             DECLARE @SQLQuery NVARCHAR(MAX), @AttributeTypeName NVARCHAR(100), @AttributeCode NVARCHAR(300), @AttributeId INT, @IsRequired BIT, @SourceColumnName NVARCHAR(600), @ControlName VARCHAR(300), @ValidationName VARCHAR(100), @SubValidationName VARCHAR(300), @ValidationValue VARCHAR(300), @RegExp VARCHAR(300), @CreateDateString NVARCHAR(300), @DefaultLocaleId INT, @ImportHeadId INT, @CheckedSourceColumn NVARCHAR(600)= '', @Status BIT= 0,
			    @CsvColumnString nvarchar(max),
				@FailedRecordCount BIGINT,
				@SuccessRecordCount BIGINT

             DECLARE @FamilyAttributeDetail TABLE
             (PimAttributeId       INT,
              AttributeTypeName    VARCHAR(300),
              AttributeCode        VARCHAR(300),
              SourceColumnName     NVARCHAR(600),
              IsRequired           BIT,
              PimAttributeFamilyId INT
             );
             DECLARE @AttributeDetail TABLE
             (PimAttributeId    INT,
              AttributeTypeName VARCHAR(300),
              AttributeCode     VARCHAR(300),
              SourceColumnName  NVARCHAR(600),
              IsRequired        BIT,
              ControlName       VARCHAR(300),
              ValidationName    VARCHAR(100),
              SubValidationName VARCHAR(300),
              ValidationValue   VARCHAR(300),
              RegExp            VARCHAR(300)
             );

			 --IF ('tempdb..#DefaultAttributeCode') IS NOT NULL
				--drop table #DefaultAttributeCode

			CREATE TABLE #DefaultAttributeCode
			(AttributeTypeName          VARCHAR(300),
			PimAttributeDefaultValueId INT,
			PimAttributeId             INT,
			AttributeDefaultValueCode  VARCHAR(100)
			);

			--SET @SQLQuery = 'Select * into _tempSeo FROM  '+@TableName
   --          EXEC sys.sp_sqlexec  @SQLQuery;


			IF( @ImportHeadName = 'B2BCustomer' )
			BEGIN
				EXEC ZnodeB2BCustomerMapping @ImportHeadName = @ImportHeadName, @TableName = @TableName
			END
		
             DECLARE @GlobalTempTableColumns TABLE(ColumnName NVARCHAR);
             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM INFORMATION_SCHEMA.TABLES
                 WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#InvalidDefaultData'
             )
                 CREATE TABLE #InvalidDefaultData
                 (RowNumber  INT,
                  Value      NVARCHAR(MAX),
                  ColumnName NVARCHAR(600)
                 );
             ELSE
             DROP TABLE #InvalidDefaultData;
             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM INFORMATION_SCHEMA.TABLES
                 WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#GlobalTempTableColumns'
             )
                 BEGIN

                     SET @SQLQuery = 'SELECT Column_Name, '''+@ImportHeadName+''' AS ImportHeadName  from tempdb.INFORMATION_SCHEMA.COLUMNS	where table_name = object_name(object_id('''+@TableName+'''),
					(select database_id from sys.databases where name = ''tempdb''))';
                     CREATE TABLE #GlobalTempTableColumns
                     (ColumnName   NVARCHAR(MAX),
                      TypeOfImport NVARCHAR(100)
                     );
                     INSERT INTO #GlobalTempTableColumns
                     (ColumnName,
                      TypeOfImport
                     )
                     EXEC sys.sp_sqlexec
                          @SQLQuery;
                 END;
		  -- If Exists ( Select  count(1)  from #GlobalTempTableColumns GROUP BY ColumnName  Having count(1) > 1 )
		  -- Begin
			 --   INSERT INTO ZnodeImportLog(ErrorDescription,ColumnName,Data,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
    --               Select  46,ColumnName,'',@newGUID,@UserId,@GetDate,@UserId,@GetDate, @ImportProcessLogId  from #GlobalTempTableColumns GROUP BY ColumnName  Having count(1) > 1 
				
				----'Multiple occurance of column are not allow for'
		  -- END

             IF EXISTS
             (
                 SELECT TOP 1 1
                 FROM #GlobalTempTableColumns
                 WHERE ColumnName IN('PimCategoryId', 'PimProductId', 'RowNumber')
             )
                 BEGIN
                     INSERT INTO ZnodeImportLog
                     (ErrorDescription,
                      ColumnName,
                      Data,
                      GUID,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate,
                      ImportProcessLogId
                     )
                     VALUES
                     (43,
                      '',
                      '',
                      @newGUID,
                      @UserId,
                      @GetDate,
                      @UserId,
                      @GetDate,
                      @ImportProcessLogId
                     );
                 END;
             SET @DefaultLocaleId = dbo.Fn_GetDefaultLocaleId();
             --Remove old error log 
             --DELETE FROM ZnodeImportLog WHERE ImportProcessLogId in (select ImportProcessLogId  FROM ZnodeImportProcessLog  WHERE ImportTemplateId  = @TemplateId )
             --GUID = @NewGUID;
             --Delete FROM ZnodeImportProcessLog  WHERE ImportTemplateId  = @TemplateId 
		
             IF NOT EXISTS
             (
                 SELECT TOP 1 1  FROM ZnodeImportLog
                 WHERE Guid = @NewGUID
                       AND ErrorDescription IN(43, 42)
                 AND ImportProcessLogId = @ImportProcessLogId
             )
                 BEGIN
                     IF @ImportHeadName = 'Product'
                      BEGIN
						  IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
							  SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimProductId int null ';
						  ELSE 
							 SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimProductId int null Primary KEY CLUSTERED(RowNumber)';
						 
						  EXEC sys.sp_sqlexec @SQLQuery;
			         END;
                     ELSE
                     IF @ImportHeadName = 'Category'
                         BEGIN
							  IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimCategoryId int null ';
							  ElSE
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimCategoryId int null Primary KEY CLUSTERED(RowNumber) ';
						  
							  EXEC sys.sp_sqlexec @SQLQuery;
                         END;
                     ELSE
                         BEGIN
							IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1) ';
							Else 
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1) Primary KEY CLUSTERED(RowNumber)';
							
							EXEC sys.sp_sqlexec @SQLQuery;
                         END;;
                 END;
				
             --Generate new process for current import 
             --INSERT INTO ZnodeImportProcessLog(ImportTemplateId,Status,ProcessStartedDate,ProcessCompletedDate,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             --SELECT @TemplateId,dbo.Fn_GetImportStatus(0),@GetDate,NULL,@UserId,@GetDate,@UserId,@GetDate;
             --SET @ImportProcessLogId = @@IDENTITY;

             SET @CreateDateString = CONVERT(VARCHAR(100), @UserId)+','''+CONVERT(VARCHAR(100), @GetDate)+''','+CONVERT(VARCHAR(100), @UserId)+','''+CONVERT(VARCHAR(100), @GetDate)+''', '+CONVERT(VARCHAR(100), @ImportProcessLogId);

             SELECT TOP 1 @ImportHeadId = ImportHeadId FROM ZnodeImportTemplate WHERE ImportTemplateId = @TemplateId;
             IF @DefaultFamilyId = 0
                AND @ImportHeadName IN('Product', 'Category')
                 BEGIN 
                     --Get all default attribute values in attribute 
                     INSERT INTO @FamilyAttributeDetail
                     (PimAttributeId,
                      AttributeTypeName,
                      AttributeCode,
                      SourceColumnName,
                      IsRequired,
                      PimAttributeFamilyId
                     )
                     --Call Process to insert data of defeult family with source column name and target column name 
                     EXEC Znode_ImportGetTemplateDetails
                          @TemplateId = @TemplateId,
                          @IsValidationRules = 0,
                          @IsIncludeRespectiveFamily = 1,
                          @IsCategory = @IsCategory,
                          @DefaultFamilyId = @DefaultFamilyId;

					---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
					Delete FAD from @FamilyAttributeDetail FAD
					where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
					and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					               inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
                 END;
             ELSE
             IF @ImportHeadName IN('Product', 'Category')
                 BEGIN
				 
                     --Get all default attribute values in attribute 
                     INSERT INTO @FamilyAttributeDetail
                     (PimAttributeId,
                      AttributeTypeName,
                      AttributeCode,
                      SourceColumnName,
                      IsRequired,
                      PimAttributeFamilyId
                     )
                     --Call Process to insert data of defeult family with source column name and target column name 
                     EXEC Znode_ImportGetTemplateDetails
                          @TemplateId = @TemplateId,
                          @IsValidationRules = 0,
                          @IsIncludeRespectiveFamily = 1,
                          @IsCategory = @IsCategory,
                          @DefaultFamilyId = @DefaultFamilyId;

					---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
					Delete FAD from @FamilyAttributeDetail FAD
					where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
					and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					               inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
                 END;      
             -- Check attributes are manditory and not provided with source table
		   	 
			if @TABLENAME	like '%tempdb..%'
				SET @SQLQuery = 'SELECT 42 AS ErrorDescription , SourceColumnName , '''' , '''+@NewGUID+''','+@CreateDateString+' from ZnodeImportTemplateMapping where ImportTemplateId = '+CONVERT(VARCHAR(100), @TemplateId)+' and ltrim(rtrim(SourceColumnName)) <> '''' AND ltrim(rtrim(SourceColumnName)) not in ( select isnull(Name ,'''') from tempdb.sys.columns where object_id = object_id('''+@TABLENAME+'''));';
			else 
				SET @SQLQuery = 'SELECT 42 AS ErrorDescription , SourceColumnName , '''' , '''+@NewGUID+''','+@CreateDateString+' from ZnodeImportTemplateMapping where ImportTemplateId = '+CONVERT(VARCHAR(100), @TemplateId)+' and ltrim(rtrim(SourceColumnName)) <> '''' AND ltrim(rtrim(SourceColumnName)) not in ( select isnull(Name ,'''') from sys.columns where object_id = object_id('''+@TABLENAME+'''));';
		 
			Declare @Tbl_CsvDynamicColulmns TABLE (ColumnName nvarchar(300), SequenceNumber int, DataType nvarchar(50),IsRequired bit )

			INSERT INTO @Tbl_CsvDynamicColulmns(ColumnName , SequenceNumber , DataType ,IsRequired)
			SELECT DISTINCT ZITM.SourceColumnName ,ZIAV.SequenceNumber, ZIAV.AttributeTypeName, ZIAV.IsRequired
			FROM ZnodeImportAttributeValidation ZIAV LEFT OUTER JOIN 
			ZnodeImportTemplate  ZIT ON ZIT.ImportHeadId =  ZIAV.ImportHeadId AND ZIT.ImportTemplateId  = @TemplateId
			LEFT OUTER JOIN ZnodeImportTemplateMapping  ZITM ON ZITM.ImportTemplateId = ZIT.ImportTemplateId  
			and ZIAV.AttributeCode = ZITM.TargetColumnName
			AND ZITM.ImportTemplateId  = @TemplateId
			WHERE ZIAV.ImportHeadId = @ImportHeadId --ORDER BY ZIAV.SequenceNumber


		    SELECT @CsvColumnString = SUBSTRING ((Select ',' +  ISNULL(ColumnName ,'NULL') from @Tbl_CsvDynamicColulmns ORDER BY SequenceNumber FOR XML PATH ('')),2,4000) 


     		INSERT INTO ZnodeImportLog(ErrorDescription, ColumnName, Data, GUID,CreatedBy, CreatedDate,  ModifiedBy,ModifiedDate,ImportProcessLogId
             )
             EXEC sys.sp_sqlexec  @SQLQuery;
             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM ZnodeImportLog
                 WHERE Guid = @NewGUID
                       AND ErrorDescription IN(43, 42)
                 AND ImportProcessLogId = @ImportProcessLogId
             )
                 BEGIN
                     --Get all default attribute values in attribute 
                     IF @ImportHeadName IN('Product', 'Category')
                         BEGIN
                             -- Check attributes are manditory and not provided with source table
                             INSERT INTO ZnodeImportLog
                             (ErrorDescription,
                              ColumnName,
                              Data,
                              GUID,
                              CreatedBy,
                              CreatedDate,
                              ModifiedBy,
                              ModifiedDate,
                              ImportProcessLogId
                             )
                                    SELECT '14' AS ErrorDescription,
                                           AttributeCode,
                                           '',
                                           @NewGUID,
                                           @UserId,
                                           @GetDate,
                                           @UserId,
                                           @GetDate,
                                           @ImportProcessLogId
                                    FROM @FamilyAttributeDetail
                                    WHERE ISNULL(SourceColumnName, '') = ''
                                          AND IsRequired = 1;  

                             -- Read all attribute details with their datatype
                             INSERT INTO @AttributeDetail
                             (PimAttributeId,
                              AttributeTypeName,
                              AttributeCode,
                              SourceColumnName,
                              IsRequired,
                              ControlName,
                              ValidationName,
                              SubValidationName,
                              ValidationValue,
                              RegExp
                             )
                             EXEC Znode_ImportGetTemplateDetails
                                  @TemplateId=@TemplateId,
								  @DefaultFamilyId=@DefaultFamilyId;

							---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
							Delete FAD from @AttributeDetail FAD
							where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
							and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
										   inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode) 

                             DELETE FROM @AttributeDetail
                             WHERE AttributeTypeName = 'Image'
                                   AND ValidationName <> 'IsAllowMultiUpload';
							DELETE FROM @AttributeDetail
                             WHERE AttributeTypeName = 'File'
                                   AND ValidationName <> 'IsAllowMultiUpload';
                             --IF NOT EXISTS
                             --(
                             --    SELECT TOP 1 1
                             --    FROM INFORMATION_SCHEMA.TABLES
                             --    WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#DefaultAttributeCode'
                             --)
                             --    BEGIN
                             --        CREATE TABLE #DefaultAttributeCode
                             --        (AttributeTypeName          VARCHAR(300),
                             --         PimAttributeDefaultValueId INT,
                             --         PimAttributeId             INT,
                             --         AttributeDefaultValueCode  VARCHAR(100)
                             --        );
                                     INSERT INTO #DefaultAttributeCode
                                     (AttributeTypeName,
                                      PimAttributeDefaultValueId,
                                      PimAttributeId,
                                      AttributeDefaultValueCode
                                     )
                                     --Call Process to insert default data value 
                                     EXEC Znode_ImportGetPimAttributeDefaultValue;

                                     DELETE FROM #DefaultAttributeCode
                                     WHERE AttributeTypeName = 'Yes/No';
                             --    END;
                             --ELSE
                             --    BEGIN
                             --        DROP TABLE #DefaultAttributeCode;
                             --    END;
                         END;
                     ELSE
                         BEGIN
					
					
                             --Read all attribute details with their datatype
                             INSERT INTO @AttributeDetail
                             (AttributeTypeName,
                              AttributeCode,
                              SourceColumnName,
                              IsRequired,
                              ControlName,
                              ValidationName,
                              SubValidationName,
                              ValidationValue,
                              RegExp
                             )
                             EXEC [Znode_ImportGetOtherTemplateDetails]
                                  @TemplateId = @TemplateId,
                                  @ImportHeadId = @ImportHeadId;

							IF @ImportHeadName IN('B2BCustomer')
							BEGIN

								INSERT INTO @AttributeDetail
								 (PimAttributeId,
								 AttributeTypeName,
								  AttributeCode,
								  SourceColumnName,
								  IsRequired,
								  ControlName,
								  ValidationName,
								  SubValidationName,
								  ValidationValue,
								  RegExp
								 )
								 EXEC [Znode_ImportGetGlobalTemplateDetails]
									  @TemplateId = @TemplateId,
									  @ImportHeadId = @ImportHeadId;

								
								INSERT INTO #DefaultAttributeCode
								(AttributeTypeName,
								PimAttributeDefaultValueId,
								PimAttributeId,
								AttributeDefaultValueCode
								)
								--Call Process to insert default data value 
								EXEC Znode_ImportGetGlobalAttributeDefaultValue;

								DELETE FROM #DefaultAttributeCode
								WHERE AttributeTypeName = 'Yes/No';

							END
						
                             --Check attributes are not mapped with any family of Pim Product
                             INSERT INTO ZnodeImportLog
                             (ErrorDescription,
                              ColumnName,
                              Data,
                              GUID,
                              CreatedBy,
                              CreatedDate,
                              ModifiedBy,
                              ModifiedDate,
                              ImportProcessLogId
                             )
                                    SELECT DISTINCT
                                           '14' AS ErrorDescription,
                                           AttributeCode,
                                           '',
                                           @NewGUID,
                                           @UserId,
                                           @GetDate,
                                           @UserId,
                                           @GetDate,
                                           @ImportProcessLogId
                                    FROM @AttributeDetail
                                    WHERE ISNULL(SourceColumnName, '') = ''   AND IsRequired = 1;  ;

                         END;
						
                     --	Check attributes are not mapped with (Default / Other) family of Pim Product
                     --	INSERT INTO ZnodeImportLog ( ErrorDescription , ColumnName , Data , GUID , CreatedBy , CreatedDate , ModifiedBy , ModifiedDate , ImportProcessLogId)
                     --	SELECT '1' AS ErrorDescription , SourceColumnName , '' , @NewGUID , @UserId , @GetDate , @UserId , @GetDate , @ImportProcessLogId
                     --	FROM @AttributeDetail WHERE PimAttributeId NOT IN ( SELECT zpfgm.PimAttributeId FROM dbo.ZnodePimFamilyGroupMapper AS zpfgm);
                     --	Verify data in global temporary table (column wise)
					
                     DECLARE Cr_Attribute CURSOR LOCAL FAST_FORWARD
                     FOR SELECT PimAttributeId,
                                AttributeTypeName,
                                AttributeCode,
                                IsRequired,
                                SourceColumnName,
                                ControlName,
                                ValidationName,
                                SubValidationName,
                                ValidationValue,
                                RegExp
                         FROM @AttributeDetail
                         WHERE ISNULL(SourceColumnName, '') <> '';
                     OPEN Cr_Attribute;
                     FETCH NEXT FROM Cr_Attribute INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @ControlName, @ValidationName, @SubValidationName, @ValidationValue, @RegExp;
                     WHILE @@FETCH_STATUS = 0
                         BEGIN
				             IF @AttributeTypeName = 'Number'
                                 BEGIN
							      EXEC Znode_ImportValidateNumber
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @ImportHeadId = @ImportHeadId,
                                          @ImportProcessLogId = @ImportProcessLogId;
                                 END;
							 -- Check invalid date
							
                             IF @AttributeTypeName = 'Date'
                                 BEGIN
                                     EXEC Znode_ImportValidateDate
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @ImportHeadId = @ImportHeadId,
                                          @ImportProcessLogId = @ImportProcessLogId;
                                 END;
							 -- Check Manditory Data
		 					 IF @IsRequired = 1 AND @CheckedSourceColumn <> @SourceColumnName
								BEGIN
									SET @CheckedSourceColumn = @SourceColumnName;
									EXEC Znode_ImportValidateManditoryData
									@TableName = @TableName,
									@SourceColumnName = @SourceColumnName,
									@CreateDateString = @CreateDateString,
									@ValidationName = @ValidationName,
									@ControlName = @ControlName,
									@ValidationValue = @ValidationValue,
									@NewGUID = @NewGUID,
									@ImportHeadId = @ImportHeadId;
								END;
							 --END 
							
                             IF @AttributeTypeName = 'Text'
                                 BEGIN
								 
						              EXEC Znode_ImportValidateManditoryText
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @LocaleId = @LocaleId,
                                          @DefaultLocaleId = @DefaultLocaleId,
                                          @AttributeId = @AttributeId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @ImportHeadId = @ImportHeadId;
                                 END;
                             IF @AttributeTypeName in ( 'Image','File')
                                 BEGIN
                                     EXEC Znode_ImportValidateImageData
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @LocaleId = @LocaleId,
                                          @DefaultLocaleId = @DefaultLocaleId,
                                          @AttributeId = @AttributeId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @ImportHeadId = @ImportHeadId;
                                 END;

					

                             --Check Default data value is valid 
                             IF @ImportHeadName IN('Product', 'Category','B2BCustomer')
                                 BEGIN
                                     IF @AttributeId IN
                                     (
                                         SELECT PimAttributeId
                                         FROM #DefaultAttributeCode
                                     )
                                         BEGIN
							
                                            IF  @AttributeTypeName = 'Multi Select'
											 BEGIN
										 		 ---Verify Image file is exists in media table or not 
												 SET @SQLQuery = ' INSERT INTO #InvalidDefaultData (RowNumber, Value, ColumnName) 
												 SELECT ROWNUMBER , (Select TOP 1 Item from dbo.split(' + @SourceColumnName + ','','')  SP WHERE NOT EXISTS 
												 (Select ToP 1 1 FROM #DefaultAttributeCode DAC WHERE 
												  DAC.AttributeTypeName <> ''Yes/No'' AND DAC.AttributeDefaultValueCode IS NOT NULL AND DAC.PimAttributeId = 
												 ' + CONVERT(VARCHAR(100), @AttributeId) + ' AND ltrim(rtrim(SP.Item) ) = DAC.AttributeDefaultValueCode
												 )), ''' + @SourceColumnName + ''' as [ColumnName]  FROM ' + @TableName
												 + ' Where ISnull(' + @SourceColumnName +  ','''') <> '''''
												EXEC sys.sp_sqlexec @SQLQuery;
											  END
											  ELSE IF @AttributeTypeName = 'Simple Select'
											  BEGIN
						
												---Verify Image file is exists in media table or not 
												 SET @SQLQuery = ' INSERT INTO #InvalidDefaultData (RowNumber, Value, ColumnName) 
												 SELECT ROWNUMBER , ' + @SourceColumnName + ' , ''' + @SourceColumnName + ''' as [ColumnName]  FROM ' + @TableName
												 + ' SP Where ISnull(' + @SourceColumnName +  ','''') <> '''' AND 
												  NOT EXISTS 
												 (Select TOP 1 1 FROM #DefaultAttributeCode DAC WHERE 
												  DAC.AttributeTypeName <> ''Yes/No'' AND DAC.AttributeDefaultValueCode IS NOT NULL AND DAC.PimAttributeId = 
												 ' + CONVERT(VARCHAR(100), @AttributeId) + ' AND ltrim(rtrim(SP.' + @SourceColumnName + ') ) = DAC.AttributeDefaultValueCode ) '
							
												EXEC sys.sp_sqlexec @SQLQuery;
											  END   
												-- Check Invalid Image 
												 SET @SQLQuery = 'SELECT ''9 '' ErrorDescription,'''+@SourceColumnName+''' as [ColumnName], 
												 Value AS  AttributeValue,RowNumber ,'''+@NewGUID+''',  '+@CreateDateString+' FROM #InvalidDefaultData Where Value IS NOT NULL'
												 INSERT INTO ZnodeImportLog (ErrorDescription, ColumnName, Data, RowNumber, GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
												 EXEC sys.sp_sqlexec @SQLQuery;
												 Delete from #InvalidDefaultData

       
                                         END;
                                 END;
							
                             FETCH NEXT FROM Cr_Attribute INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @ControlName, @ValidationName, @SubValidationName, @ValidationValue, @RegExp;
                         END;
                     CLOSE Cr_Attribute;
                     DEALLOCATE Cr_Attribute;
                     --SELECT top 1 1 FROM @FamilyAttributeDetail where  iSNULL(SourceColumnName,'') = ''  and IsRequired = 1
                 END;
             
			 
			  
------------------------------------------------------------------------------------------
		 Declare @SQLQueryNew NVARCHAR(4000)
		 Declare @SourceColumnNameProduct nvarchar(4000) 
         IF @ImportHeadName IN('Product','Pricing','ProductAssociation','Inventory')
		 BEGIN
		 	 
		 SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'SKU'
		 AND ImportTemplateId = @TemplateId


			SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  SKU - '' + ' + '  cast( ' + @SourceColumnNameProduct + ' as varchar(50)) +' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;			
		END
		ELSE IF @ImportHeadName IN('ProductAttribute')
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'AttributeCode'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  Attribute - '' + ' + '  cast( ' + @SourceColumnNameProduct + ' as varchar(50)) +' + ''' ]''  
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'ZipCode'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'ZIP'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  ZIPCode - '' + ' + '  cast( ' + @SourceColumnNameProduct + ' as varchar(50)) +' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'Category'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'CategoryCode'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  CategoryCode - '' + ' + '  cast( ' + @SourceColumnNameProduct + ' as varchar(50)) +' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'CategoryAssociation'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'CategoryName'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  CategoryName - '' + ' + '  cast( ' + @SourceColumnNameProduct + ' as varchar(50)) +' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;

		END
		ELSE IF @ImportHeadName IN ('Customer','CustomerAddress')
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'UserName'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  UserName - '' + ' + '  cast( ' + @SourceColumnNameProduct + ' as varchar(50)) +' + ''' ]''  
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'SEODetails'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'Code'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  Code - '' + ' + '  cast( ' + @SourceColumnNameProduct + ' as varchar(50)) +' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'Highlight'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'HighlightCode'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  HighlightCode - '' + ' + ' cast( ' + @SourceColumnNameProduct + ' as varchar(50)) +' + ''' ]''  
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'AddonAssociation'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'SKU'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  SKU - '' + ' + '  cast( ' + @SourceColumnNameProduct + ' as varchar(50)) +' + ''' ]''  
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
		ELSE IF @ImportHeadName = 'AttributeDefaultValue'
		BEGIN
		SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'AttributeDefaultValueCode'
		AND ImportTemplateId = @TemplateId

		    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  AttributeDefaultValueCode - '' + ' + '  cast( ' + @SourceColumnNameProduct + ' as varchar(50)) +' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew
			EXEC sys.sp_sqlexec  @SQLQueryNew;
		END
	-------------------------------------------------------------------------------------------------------------
	
	--DECLARE @SQLLOG NVARCHAR(MAX)

	--SET @SQLLOG = '

	--SELECT TBL.*,ZM.MessageName AS ErrorDescription INTO  tempdb..[##ImportProcessLog_'+@NewGUID+ ']
	--FROM '+@TableName+' TBL
	--INNER JOIN ZnodeImportLog ZILL ON (TBL.Rownumber = ZILL.Rownumber)
	--INNER JOIN Znodemessage ZM ON (ZM.MessageCode = ZILL.ErrorDescription)
	--WHERE ImportProcessLogId =  '+CONVERT(VARCHAR(100), @ImportProcessLogId)+'
	--AND ZILL.Rownumber IS NOT NULL	
	--'	
	-- PRINT @SQLLOG
	-- EXEC sys.sp_sqlexec  @SQLLOG;

	 --SET @SQLLOG = ''

	 --SET @SQLLOG = 'SELECT * FROM [TempDB..##ImportProcessLog_'+@NewGUID+ ']'
	 --EXEC sys.sp_sqlexec  @SQLLOG;


	--------------------------------------------------------------------------------------------------------------------
			 
  		SET @SQLQuery = 'Delete FROM  '+@TableName+' Where Rownumber IN (Select Rownumber FROM ZnodeImportLog  WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND Rownumber IS NOT NULL)';
        EXEC sys.sp_sqlexec  @SQLQuery;
			 			
   
             IF @ImportHeadName IN('Product', 'Category')
                 BEGIN
                     IF NOT EXISTS
                     (
                         SELECT TOP 1 1
                         FROM @FamilyAttributeDetail
                         WHERE ISNULL(SourceColumnName, '') = ''
                               AND IsRequired = 1
                     ) AND NOT EXISTS
					 (
						 SELECT TOP 1 1
						 FROM ZnodeImportLog
						 WHERE Guid = @NewGUID
							   AND ErrorDescription IN(43, 42)
						 AND ImportProcessLogId = @ImportProcessLogId
					 )
                         BEGIN
                             IF @IsCategory = 0
                                 BEGIN
								
                                     EXEC Znode_ImportPimProductData
                                          @TableName = @TableName,
                                          @NewGUID = @NewGUID,
                                          @TemplateId = @TemplateId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @UserId = @UserId,
                                          @LocaleId = @LocaleId,
                                          @DefaultFamilyId = @DefaultFamilyId;

                                 END;
                             ELSE
                                 BEGIN
                                     EXEC Znode_ImportPimCategoryData
                                          @TableName = @TableName,
                                          @NewGUID = @NewGUID,
                                          @TemplateId = @TemplateId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @UserId = @UserId,
                                          @LocaleId = @LocaleId,
                                          @DefaultFamilyId = @DefaultFamilyId;
                                 END;
                         END
						 ELSE
							BEGIN
								-- Update Record count in log 
								
							
								--SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
								--EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount out
								--UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
								--WHERE ImportProcessLogId = @ImportProcessLogId;

								SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
								SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
								EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount out
								UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
								WHERE ImportProcessLogId = @ImportProcessLogId;
							END

                 END;
				IF NOT EXISTS
					 (
						 SELECT TOP 1 1
						 FROM ZnodeImportLog
						 WHERE Guid = @NewGUID
							   AND ErrorDescription IN(43, 42)
						 AND ImportProcessLogId = @ImportProcessLogId
					 )
             BEGIN
                 IF @ImportHeadName = 'Pricing'
                     BEGIN
                         EXEC [Znode_ImportPriceList]
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID,
                              @PriceListId = @PriceListId;
                     END;

                 IF @ImportHeadName = 'Inventory'
                     BEGIN
				
                         EXEC Znode_ImportInventory_Ver1
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID;
                     END;
                 IF @ImportHeadName = 'ZipCode'
                     BEGIN
						 EXEC Znode_ImportZipCode
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID,
							  @CountryCode = @CountryCode;
                     END;
					 IF @ImportHeadName = 'CategoryAssociation'
                     BEGIN
						 EXEC Znode_ImportCatalogCategory
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID,
							  @PimCatalogId = @PimCatalogId;
                     END;
					 IF @ImportHeadName = 'ProductAssociation'
                     BEGIN
						 EXEC Znode_ImportAssociateProducts
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID
                     END;
			
					 IF @ImportHeadName = 'SEODetails' AND @PortalId > 0 
                     BEGIN
						 EXEC Znode_ImportSEODetails
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
							  @LocaleId = @LocaleId,
							  @PortalId =@PortalId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID,
							  @CsvColumnString = @CsvColumnString 

				
                     END;
				
					 IF @ImportHeadName = 'ProductAttribute' 
                     BEGIN
						 EXEC Znode_ImportAttributes
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
							  @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID
				
                     END;

					 IF @ImportHeadName = 'Customer' AND @PortalId > 0 
                     BEGIN
					
					
						 EXEC Znode_ImportCustomer
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = @PortalId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString
				
                     END;
					 
					 IF @ImportHeadName = 'UserApprovers' AND @PortalId > 0 
                     BEGIN
						 EXEC Znode_ImportUserApproval
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = @PortalId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString
				
                     END;

					 IF @ImportHeadName = 'B2BCustomer' AND @PortalId > 0 
                     BEGIN

							 EXEC Znode_ImportB2BCustomer
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = @PortalId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString
				
                     END;

					 IF @ImportHeadName = 'CustomerAddress' --AND @PortalId > 0 
                     BEGIN
						 EXEC Znode_ImportCustomerAddress
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = 1, -- not implemented from forntend 
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString,
							  @IsAccountAddress = @IsAccountAddress
				
                     END;
					 IF @ImportHeadName = 'ShippingAddress' --AND @PortalId > 0 
                     BEGIN
						 EXEC Znode_ImportCustomerAddress
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = 1, -- not implemented from forntend 
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString,
							  @IsAccountAddress = @IsAccountAddress
				
                     END;
					 IF @ImportHeadName = 'StoreLocator' --AND @PortalId > 0 
                     BEGIN
					 	 EXEC Znode_ImportStoreLocatorAddress
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString
                     END;

					IF @ImportHeadName = 'Highlight'
					BEGIN
					EXEC Znode_ImportHighlight 
					@TableName = @TableName, 
					@Status = @Status, 
					@UserId = @UserId, 
					@ImportProcessLogId = @ImportProcessLogId, 
					@NewGUID = @NewGUID 
					END;

					IF @ImportHeadName = 'AddonAssociation'
					BEGIN
					EXEC Znode_ImportAddonAssociation 
					@TableName = @TableName, 
					@Status = @Status, 
					@UserId = @UserId, 
					@ImportProcessLogId = @ImportProcessLogId, 
					@NewGUID = @NewGUID,
					@PimCatalogId = @PimCatalogId
					END;

					IF @ImportHeadName = 'AttributeDefaultValue'
					BEGIN
					EXEC Znode_ImportAttributeDefaultValue 
					@TableName = @TableName, 
					@Status = @Status, 
					@UserId = @UserId, 
					@ImportProcessLogId = @ImportProcessLogId, 
					@NewGUID = @NewGUID
					
					END;

					IF @ImportHeadName = 'Voucher'
					BEGIN
						EXEC Znode_ImportVoucher 
						@TableName = @TableName, 
						@Status = @Status, 
						@UserId = @UserId, 
						@ImportProcessLogId = @ImportProcessLogId, 
						@NewGUID = @NewGUID
					
					END;
					IF @ImportHeadName = 'Account'
					BEGIN
						
						EXEC Znode_ImportAccount 
						@TableName = @TableName, 
						@Status = @Status, 
						@UserId = @UserId, 
						@ImportProcessLogId = @ImportProcessLogId, 
						@NewGUID = @NewGUID,
						@CsvColumnString = @CsvColumnString,
						@PortalId = @PortalId
					
					END;
				 
             END
			 ELSE 
				 BEGIN
					-- Update Record count in log 	
					SET @SQLQuery = ' Select @FailedRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
					EXEC	sp_executesql @SQLQuery , N'@FailedRecordCount BIGINT out' , @FailedRecordCount =@FailedRecordCount out
					--SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS  NULL AND  ImportProcessLogId = @ImportProcessLogId;
					SELECT @SuccessRecordCount = 0
									
					UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
					WHERE ImportProcessLogId = @ImportProcessLogId;
					--SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
					--SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
					--EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount out
					--UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount , TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
					--WHERE ImportProcessLogId = @ImportProcessLogId;
				 END

             EXEC Znode_ImportReadErrorLog
                  @ImportProcessLogId = @ImportProcessLogId,
                  @NewGUID = @NewGUID;
             DROP TABLE #GlobalTempTableColumns;
print 'abc'
             -- Finally call product insert process if error not found in error log table 
             IF EXISTS
             (
                 SELECT TOP 1 1
                 FROM ZnodeImportLog
                 WHERE ImportProcessLogId = @ImportProcessLogId
                       AND Guid = @NewGUID
             )
                 BEGIN
                     --Update process with completed status for current import 
                     UPDATE ZnodeImportProcessLog
                       SET
                           Status = dbo.Fn_GetImportStatus(3),
                           ProcessCompletedDate = GETDATE()
                       WHERE ImportProcessLogId = @ImportProcessLogId;
                 END;
				 --SET @SQLQuery = 'Drop Table ' + @TableName
				 SET @SQLQuery = 'IF Object_id(''+@TableName+'') IS NOT NULL  DROP TABLE ' + @TableName
                 EXEC sys.sp_sqlexec @SQLQuery;

				 print 'end';
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE(),
                    ERROR_LINE(),
                    ERROR_PROCEDURE();
             EXEC Znode_ImportReadErrorLog
                  @ImportProcessLogId = @ImportProcessLogId,
                  @NewGUID = @NewGUID; 
             --Update process with failed status for current import 
             UPDATE ZnodeImportProcessLog
               SET
                   Status = dbo.Fn_GetImportStatus(3),
                   ProcessCompletedDate = GETDATE()
             WHERE ImportProcessLogId = @ImportProcessLogId;
			 				 SET @SQLQuery = 'Drop Table ' + @TableName
                -- EXEC sys.sp_sqlexec @SQLQuery;
             --ROLLBACK TRAN TRN_ImportValidProductData;
         END CATCH;
     END;

go
IF exists(select * from sys.procedures where name = 'Znode_PublishPortalEntity')
	drop proc Znode_PublishPortalEntity
go

CREATE PROCEDURE [dbo].[Znode_PublishPortalEntity]
(
   @PortalId  INT = 0 
  ,@LocaleId  INT = 0 
  ,@RevisionState varchar(50) = '' 
  ,@UserId int = 0
  ,@Status Bit =0 OUTPUT 
  ,@IsContentType Bit= 1
  ,@NewGUID nvarchar(500)  
)
AS
/*
  To publish all Contenet pages and their mapping into their respective entities 
	ZnodePublishContentPageConfigEntity
	ZnodePublishSEOEntity
	ZnodePublishWidgetProductEntity
	ZnodePublishMediaWidgetEntity
	ZnodePublishSearchWidgetEntity
	ZnodePublishTextWidgetEntity
	ZnodePublishWidgetSliderBannerEntity
	ZnodePublishWidgetTitleEntity

	Unit Testing : 
	Declare @Status bit 
	

	Declare @Status bit 
	Exec [dbo].[Znode_PublishPortalEntity]
     @PortalId  = 1 
	,@LocaleId  = 0 
	,@RevisionState = 'PRODUCTION' 
	,@UserId = 2
	,@Status = @Status 
	--Select @Status 


*/
BEGIN
BEGIN TRY 
SET NOCOUNT ON
	Declare @PortalCode Varchar(100)
	Declare @Type varchar(50) = '',	@CMSSEOCode varchar(300),@UserName Varchar(50);
	SET @Status = 1 
	Declare @IsPreviewEnable int,@PreviewVersionId INT = 0  ,@ProductionVersionId INT = 0
	
	Select TOP 1  @UserName = aspNetZnodeUser.UserName from ZnodeUser Inner Join aspNetUsers ON ZnodeUser.aspNetUserId = aspNetUsers.Id 
	Inner Join aspNetZnodeUser on aspNetUsers.UserName = aspNetZnodeUser.AspNetZnodeUserId
	where ZnodeUser.UserId = @userId
            


 		If Exists (SELECT  * from ZnodePublishStateApplicationTypeMapping PSA where PSA.IsEnabled =1 and  
		Exists (select TOP 1 1  from ZnodePublishState PS where PS.PublishStateId = PSA.PublishStateId ) and ApplicationType =  'WebstorePreview')
			SET @IsPreviewEnable = 1 
		else 
			SET @IsPreviewEnable = 0 

		--Genrate preview entry 
		DECLARE @SetLocaleId INT , @DefaultLocaleId INT = dbo.Fn_GetDefaultLocaleId(), @MaxCount INT =0 , @IncrementalId INT = 1  
		DECLARE @TBL_Locale TABLE (LocaleId INT , RowId INT IDENTITY(1,1))
		
		DECLARE @TBL_StoreEntity TABLE 
		(
			 PortalThemeId	int,PortalId	int,ThemeId	int,ThemeName	varchar(200),CSSId	int,CSSName	nvarchar(2000),
			 WebsiteLogo	varchar(300),WebsiteTitle	nvarchar(400),FaviconImage	varchar(300),WebsiteDescription	nvarchar(MAX),
			 PublishState	varchar(100),LocaleId	int	
		)
		
		IF object_id('tempdb..[#Tbl_VersionEntity]') IS NOT NULL
			drop table tempdb..#Tbl_VersionEntity
		Create Table #Tbl_VersionEntity(PortalId int , VersionId int , LocaleId int , PublishType varchar(50) )

		IF object_id('tempdb..[#Tbl_OldVersionEntity]') IS NOT NULL
			drop table tempdb..#Tbl_OldVersionEntity
		Create Table #Tbl_OldVersionEntity(PortalId int , NewVersionId int ,OldVersionId int , LocaleId int , PublishType varchar(50) )

	
		DECLARE @WebStoreEntityId int 
		
		select @PortalCode  = StoreName  from ZnodePortal where PortalId = @PortalId 
		
		INSERT INTO @TBL_Locale (LocaleId) SELECT LocaleId FROM ZnodeLocale WHERE IsActive =1 AND (LocaleId  = @LocaleId OR @LocaleId = 0 )
		
		---managed brand seo data
		delete ZCSDL from ZnodeCMSSEODetailLocale ZCSDL
		where exists(select *  from ZnodeCMSSEODetail ZCSD1
		where not exists(select * from ZnodeBrandDetails ZBD
		inner join ZnodePortalBrand ZPB ON ZBD.BrandId = ZPB.BrandId and ZCSD1.PortalId = ZPB.PortalId
		and ZBD.BrandCode = ZCSD1.SEOCode) and ZCSDL.CMSSEODetailId = ZCSD1.CMSSEODetailId)


		delete ZCSD1 from ZnodeCMSSEODetail ZCSD1
		where not exists(select * from ZnodeBrandDetails ZBD
		inner join ZnodePortalBrand ZPB ON ZBD.BrandId = ZPB.BrandId and ZCSD1.PortalId = ZPB.PortalId
		and ZBD.BrandCode = ZCSD1.SEOCode)

		insert into ZnodeCMSSEODetail(CMSSEOTypeId,SEOId,IsRedirect,MetaInformation,PortalId,SEOUrl,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
		,IsPublish,SEOCode,PublishStateId)
		select distinct (select top 1 CMSSEOTypeId from ZnodeCMSSEOType where Name = 'Brand'),null,null,null,ZPB.PortalId,isnull(ZBDL.SEOFriendlyPageName,ZBD.BrandCode),@userId,
		getdate(),@userId,getdate(),null,ZBD.BrandCode,3
		from ZnodeBrandDetails ZBD
		inner join ZnodePortalBrand ZPB ON ZBD.BrandId = ZPB.BrandId
		inner join ZnodeBrandDetailLocale ZBDL on ZBD.BrandId = ZBDL.BrandId
		where not exists(select * from ZnodeCMSSEODetail ZCSD1 where ZCSD1.CMSSEOTypeId = (select top 1 CMSSEOTypeId from ZnodeCMSSEOType where Name = 'Brand')
		and ZCSD1.PortalId = ZPB.PortalId
		and ZBD.BrandCode = ZCSD1.SEOCode) and ZPB.PortalId = @PortalId

		insert into ZnodeCMSSEODetailLocale(CMSSEODetailId,LocaleId,SEOTitle,SEODescription,SEOKeywords,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,CanonicalURL,RobotTag)
		select distinct ZCSD.CMSSEODetailId,L.LocaleId,ZBDL.BrandName,ZBDL.BrandName,ZBDL.BrandName,@userId,getdate(),@userId,getdate(),null,null
		from ZnodeCMSSEODetail ZCSD
		inner join ZnodeBrandDetails ZBD on ZCSD.SEOCode = ZBD.BrandCode
		inner join ZnodeBrandDetailLocale ZBDL on ZBD.BrandId = ZBDL.BrandId
		inner join ZnodePortalBrand ZPB ON ZBD.BrandId = ZPB.BrandId
		cross apply @TBL_Locale L
		where CMSSEOTypeId = (select top 1 CMSSEOTypeId from ZnodeCMSSEOType where Name = 'Brand')
		and not exists(select * from ZnodeCMSSEODetailLocale ZCSDL where ZCSDL.CMSSEODetailId = ZCSD.CMSSEODetailId)
		 ---managed brand seo data
		
		SET @MaxCount = ISNULL((SELECT MAx(RowId) FROM @TBL_Locale),0)
		WHILE @IncrementalId <= @MaxCount
		BEGIN 
			SET @SetLocaleId = (SELECT Top 1 LocaleId FROM @TBL_locale WHERE RowId = @IncrementalId)
			if (@IsPreviewEnable = 1 AND ( @RevisionState like '%Preview%'  OR @RevisionState like '%Production%' ) ) 
			Begin
				Insert into ZnodePublishPortalLog
				(PortalId,IsPortalPublished,UserId,LogDateTime,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,Tokem,PublishStateId)
				Select @PortalId ,1 , @UserId , Getdate(),@UserId ,Getdate() ,@UserId ,Getdate(), NULL, DBO.Fn_GetPublishStateIdForProcessing()
				
				insert into #Tbl_VersionEntity (PortalId,VersionId,LocaleId,PublishType)
				select @PortalId, @@Identity , @SetLocaleId ,'PREVIEW'
				
			End
			If (@RevisionState like '%Production%' OR @RevisionState = 'None')
			Begin
				--Genrate production entry 
				Insert into ZnodePublishPortalLog
				(PortalId,IsPortalPublished,UserId,LogDateTime,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,Tokem,PublishStateId)
				Select @PortalId ,1 , @UserId , Getdate(),@UserId ,Getdate() ,@UserId ,Getdate(), NULL, DBO.Fn_GetPublishStateIdForProcessing()
			
				insert into #Tbl_VersionEntity (PortalId,VersionId,LocaleId,PublishType)
				select @PortalId, @@Identity , @SetLocaleId ,'PRODUCTION'
			End 
	   	SET @IncrementalId = @IncrementalId +1 
		END 

	Truncate table ZnodePublishPortalErrorLogEntity

	Declare @IsFirstTimeContentPublish bit 
	If Exists (Select TOP 1 1  from ZnodePublishWebStoreEntity where PortalId = @PortalId)
		SET @IsFirstTimeContentPublish =1 
	else 
		SET @IsFirstTimeContentPublish =0
    
	Declare @Tbl_PreviewVersionId  TABLE (VersionId int , PortalId int , LocaleId int )
	Declare @Tbl_ProductionVersionId  TABLE (VersionId int , PortalId int , LocaleId int )

	If @IsContentType = 0 AND @IsFirstTimeContentPublish =1 
	Begin 
		Insert into #Tbl_OldVersionEntity (PortalId,NewVersionId,OldVersionId, LocaleId, PublishType)
		Select A.PortalId , A.VersionId, B.VersionId, a.LocaleId,a.PublishType from #Tbl_VersionEntity A Inner join ZnodePublishWebStoreEntity B on 
		A.PortalId = B.PortalId and A.LocaleId = B.LocaleId AND A.PublishType= B.PublishState  
	End
	Delete from ZnodePublishProgressNotifierEntity where JobName  = @PortalCode 
	
	INSERT INTO ZnodePublishProgressNotifierEntity
	(VersionId,JobId,JobName,ProgressMark,IsCompleted,IsFailed,ExceptionMessage,StartedBy,StartedByFriendlyName)
	Values(0,@NewGUID , Isnull(@PortalCode,'') + ' Store' , 0 , 0 , 0 , '' , @UserId, @UserName)

	if @Type = 'ZnodePublishWebStoreEntity' OR @Type = ''
	Begin
		 Declare  @PreviewVersionIdString varchar(1000)= ''  ,@ProductionVersionIdString varchar(1000) = '' 
		 SELECT   @PreviewVersionIdString = STUFF((SELECT ',' + cast (VersionId as varchar(50))  FROM #Tbl_VersionEntity   where PublishType = 'PREVIEW'  FOR XML PATH ('')), 1, 1, '') 
		 SELECT   @ProductionVersionIdString = STUFF((SELECT ',' + cast (VersionId as varchar(50))  FROM #Tbl_VersionEntity   where PublishType = 'PRODUCTION'  FOR XML PATH ('')), 1, 1, '') 
		 
		 EXEC [dbo].[Znode_SetPublishWebStoreEntity]
			 @PortalId  = @PortalId 
			,@LocaleId   = @LocaleId 
			,@IsPreviewEnable =@IsPreviewEnable 
			,@PreviewVersionId  = @PreviewVersionIdString 
			,@ProductionVersionId = @ProductionVersionIdString 
			,@RevisionState = @RevisionState 
			,@UserId = @UserId	
			,@Status = @Status Output 

			INSERT INTO ZnodePublishPortalErrorLogEntity
			(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
			SELECT 'ZnodePublishWebStoreEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
			@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

			Update ZnodePublishProgressNotifierEntity SET 
			ProgressMark =5 , 
			IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
			IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
			where  JobId = @NewGUID
	End
	
	if (@Type = 'ZnodePublishPortalBrandEntity' OR @Type = '' ) AND @Status = 1 
	Begin
			Exec [Znode_SetPublishPortalBrandEntity]
			 @PortalId  = @PortalId
			,@IsPreviewEnable =@IsPreviewEnable 
			,@PreviewVersionId  = 0 
			,@ProductionVersionId = 0
			,@RevisionState = @RevisionState 
			,@UserId = @UserId  
			,@Status = @Status Output 

			INSERT INTO ZnodePublishPortalErrorLogEntity
			(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
			SELECT 'ZnodePublishPortalBrandEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
			@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 
			
			Update ZnodePublishProgressNotifierEntity SET 
			ProgressMark = CASE When (@IsContentType = 1 OR (@IsFirstTimeContentPublish = 0 AND @IsContentType = 0 ) ) THEN 10 Else 100 End , 
			IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
			IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
			where  JobId = @NewGUID
	End 

	if (@Type = 'ZnodePublishSEOEntity' OR @Type = '') AND @Status = 1 and @IsContentType = 0
			Begin
					Exec [Znode_SetPublishSEOEntity]
					 @PortalId  = @PortalId
					,@LocaleId  = @LocaleId 
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = 0 
					,@ProductionVersionId = 0
					,@RevisionState = @RevisionState 
					,@CMSSEOTypeId = '4'
					,@CMSSEOCode = ''
					,@UserId = @UserId  
					,@Status = @Status Output 

			End 
	If (@IsContentType = 1 OR (@IsFirstTimeContentPublish = 0 AND @IsContentType = 0 ) ) AND @Status = 1  
	Begin
			if @Type = 'ZnodePublishBlogNewsEntity' OR @Type = '' 
			Begin
				 EXEC [dbo].[Znode_SetPublishBlogNewsEntity]
					 @PortalId  = @PortalId 
					,@LocaleId   = @LocaleId 
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = @PreviewVersionId 
					,@ProductionVersionId = @ProductionVersionId 
					,@RevisionState = @RevisionState 
					,@UserId = @UserId	
					,@Status = @Status Output 

					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishBlogNewsEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 15 , 
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID

			End
			if (@Type = 'ZnodePublishPortalCustomCssEntity' OR @Type = '' ) AND @Status = 1  
			Begin
				 EXEC [dbo].[Znode_SetPublishPortalCustomCssEntity]
					 @PortalId  = @PortalId 
					,@LocaleId   = @LocaleId 
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = @PreviewVersionId 
					,@ProductionVersionId = @ProductionVersionId 
					,@RevisionState = @RevisionState 
					,@UserId = @UserId	
					,@Status = @Status Output 

					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishPortalCustomCssEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 20  ,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID


			End
			if (@Type = 'ZnodePublishWidgetCategoryEntity' OR @Type = '' ) AND @Status = 1 
			Begin
				 EXEC [dbo].[Znode_SetPublishWidgetCategoryEntity]
					 @PortalId  = @PortalId 
					,@LocaleId   = @LocaleId 
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = @PreviewVersionId 
					,@ProductionVersionId = @ProductionVersionId 
					,@RevisionState = @RevisionState 
					,@UserId = @UserId	
					,@Status = @Status Output 

					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishWidgetCategoryEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 25  ,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID
			End
	
			if (@Type = 'ZnodePublishWidgetProductEntity' OR @Type = '') AND @Status = 1  
			Begin
					EXEC Znode_SetPublishWidgetProductEntity
					 @PortalId  = @PortalId
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = @PreviewVersionId 
					,@ProductionVersionId = @ProductionVersionId 
					,@RevisionState = @RevisionState 
					,@CMSMappingId = 0
					,@UserId = @UserId 
					,@Status = @Status  Output
			
					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishWidgetProductEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 30  ,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID
			END 

			if (@Type = 'ZnodePublishWidgetTitleEntity' OR @Type = '') AND @Status = 1  
			Begin
					EXEC Znode_SetPublishWidgetTitleEntity
					 @PortalId  = @PortalId
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = @PreviewVersionId 
					,@ProductionVersionId = @ProductionVersionId 
					,@RevisionState = @RevisionState 
					,@CMSContentPagesId = 0
					,@UserId = @UserId 
					,@Status = @Status  Output

					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishWidgetTitleEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 35  ,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID

			END 
			if (@Type = 'ZnodePublishWidgetSliderBannerEntity' OR @Type = '')AND @Status = 1  
			Begin
					EXEC Znode_SetPublishWidgetSliderBannerEntity
					 @PortalId  = @PortalId
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = @PreviewVersionId 
					,@ProductionVersionId = @ProductionVersionId 
					,@RevisionState = @RevisionState 
					,@CMSContentPagesId = 0
					,@CMSSliderId = 0 
					,@UserId = @UserId 
					,@Status = @Status  Output
			
					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishWidgetSliderBannerEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 
					
					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 40  ,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID			
			END 
			if (@Type = 'ZnodePublishTextWidgetEntity' OR @Type = '' ) AND @Status = 1  
			Begin
					EXEC Znode_SetPublishTextWidgetEntity
					 @PortalId  = @PortalId
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = @PreviewVersionId 
					,@ProductionVersionId = @ProductionVersionId 
					,@RevisionState = @RevisionState 
					,@CMSMappingId = 0
					,@UserId = @UserId 
					,@Status = @Status  Output
			
					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishTextWidgetEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 45  ,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID			

			END 
			if (@Type = 'ZnodeSetPublishMediaWidgetEntity' OR @Type = '') AND @Status = 1
			Begin
					EXEC Znode_SetPublishMediaWidgetEntity
					 @PortalId  = @PortalId
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = @PreviewVersionId 
					,@ProductionVersionId = @ProductionVersionId 
					,@RevisionState = @RevisionState 
					,@CMSMappingId = 0
					,@UserId = @UserId 
					,@Status = @Status  Output
			
					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishMediaWidgetEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 
										
					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 50  ,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID			
			END 
			if (@Type = 'ZnodePublishSearchWidgetEntity' OR @Type = '') AND @Status = 1
			Begin
					EXEC Znode_SetPublishSearchWidgetEntity
					 @PortalId  = @PortalId
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = @PreviewVersionId 
					,@ProductionVersionId = @ProductionVersionId 
					,@RevisionState = @RevisionState 
					,@CMSMappingId = 0
					,@UserId = @UserId 
					,@Status = @Status  Output
			
					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishSearchWidgetEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 
					
					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 55  ,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID			
			END 

			if (@Type = 'ZnodePublishContentPageConfigEntity' OR @Type = '') AND @Status = 1
			Begin
				 EXEC [dbo].[Znode_SetPublishContentPageConfigEntity]
					 @PortalId  = @PortalId 
					,@LocaleId   = @LocaleId 
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = @PreviewVersionId 
					,@ProductionVersionId = @ProductionVersionId 
					,@RevisionState = @RevisionState 
					,@CMSContentPagesId = 0
					,@UserId = @UserId	
					,@Status = @Status Output 

					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishContentPageConfigEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 
					
					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 60,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID			
			End

			if (@Type = 'ZnodePublishSEOEntity' OR @Type = '') AND @Status = 1
			Begin
					Exec [Znode_SetPublishSEOEntity]
					 @PortalId  = @PortalId
					,@LocaleId  = @LocaleId 
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = 0 
					,@ProductionVersionId = 0
					,@RevisionState = @RevisionState 
					,@CMSSEOTypeId = '3,5'
					,@CMSSEOCode = ''
					,@UserId = @UserId  
					,@Status = @Status Output 

					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishSEOEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

					
					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 60,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID			

			End 
			if (@Type = 'ZnodePublishMessageEntity' OR @Type = '') AND @Status = 1
			Begin
					Exec [Znode_SetPublishMessageEntity]
					 @PortalId  = @PortalId
					,@LocaleId  = @LocaleId 
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = 0 
					,@ProductionVersionId = 0
					,@RevisionState = @RevisionState 
					,@UserId = @UserId  
					,@Status = @Status Output 

					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishMessageEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 65,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID			

			End 

		   if (@Type = 'ZnodePublishPortalGlobalAttributeEntity' OR @Type = '') AND @Status = 1
			Begin
					Exec [Znode_SetPublishPortalGlobalAttributeEntity]
					 @PortalId  = @PortalId
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = 0 
					,@ProductionVersionId = 0
					,@RevisionState = @RevisionState 
					,@UserId = @UserId  
					,@Status = @Status Output 

					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishPortalGlobalAttributeEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 
					
					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 67,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID			

			End 
 
		   if (@Type = 'ZnodePublishProductPageEntity' OR @Type = '') AND @Status = 1
			Begin
					Exec [Znode_SetPublishProductPageEntity]
					 @PortalId  = @PortalId
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = 0 
					,@ProductionVersionId = 0
					,@RevisionState = @RevisionState 
					,@UserId = @UserId  
					,@Status = @Status Output 

					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishProductPageEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 73,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID			


			End 
			
			if (@Type = 'ZnodePublishWidgetBrandEntity' OR @Type = '') AND @Status = 1
			Begin
					Exec [Znode_SetPublishWidgetBrandEntity]
					 @PortalId  = @PortalId
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = 0 
					,@ProductionVersionId = 0
					,@RevisionState = @RevisionState 
					,@UserId = @UserId  
					,@Status = @Status Output 

					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishWidgetBrandEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 80,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID			

			End 
	End
		IF Exists (select TOP 1 1  from ZnodePublishPortalErrorLogEntity where  ProcessStatus = 'Fail') 
		Begin
			SET @Status  =0 
			SELECT 1 AS ID,@Status AS Status;
			INSERT INTO ZnodePublishPortalErrorLogEntity
			(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
			SELECT 'ZnodePublishPortalEntity', @RevisionState , 'Fail' , Getdate(), 
			@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 
			Update ZnodePublishPortalLog SET PublishStateId = DBO.Fn_GetPublishStateIdForPublishFailed()  where  PublishPortalLogId in  (Select VersionId from #Tbl_VersionEntity Where PublishType = 'PREVIEW' )
			Update ZnodePublishPortalLog SET PublishStateId = DBO.Fn_GetPublishStateIdForPublishFailed()  where  PublishPortalLogId in (Select VersionId from #Tbl_VersionEntity Where PublishType = 'PRODUCTION' )

			Delete  From ZnodePublishWebStoreEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId
			Delete  From ZnodePublishBlogNewsEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishPortalCustomCssEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishWidgetCategoryEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishWidgetProductEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishWidgetTitleEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishWidgetSliderBannerEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishTextWidgetEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishMediaWidgetEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishSearchWidgetEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishContentPageConfigEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishSEOEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId and CMSSEOTypeId in (3,5)
			Delete  From ZnodePublishMessageEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishPortalGlobalAttributeEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishPortalBrandEntity Where  VersionId  in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishProductPageEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishWidgetBrandEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
		End
	Else 
		Begin
			Update ZnodePublishPortalLog SET PublishStateId = DBO.Fn_GetPublishStateIdForPreview()  where  PublishPortalLogId in 
			(Select VersionId from #Tbl_VersionEntity Where PublishType = 'PREVIEW' )
			Update ZnodePublishPortalLog SET PublishStateId = DBO.Fn_GetPublishStateIdForPublish()  where  PublishPortalLogId in
			(Select VersionId from #Tbl_VersionEntity Where PublishType = 'PRODUCTION' )
			 
			Insert into ZnodePublishPreviewLogEntity
			(VersionId,PublishStartTime,IsDisposed,SourcePublishState,EntityId,EntityType,LogMessage,LogCreatedDate,PreviousVersionId,LocaleId,LocaleDisplayValue)
				Select A.VersionId,NULL,NULL,A.PublishType,@PortalId,'portal','portal has been published successfully' , Getdate(),  
				(select TOP 1 VersionId   from ZnodePublishWebStoreEntity where LocaleId = A.LocaleId AND PublishState = A.PublishType
				 and PortalId = @PortalId),A.LocaleId,B.Name
				from #Tbl_VersionEntity  A  Inner join ZnodeLocale B on A.LocaleId = B.LocaleId

			If @RevisionState = 'PREVIEW'
			Begin
				update ZnodeCMSContentPages SET  IsPublished = 1 , PublishStateId  = DBO.Fn_GetPublishStateIdForPreview() where (PortalId = @PortalId OR @PortalId  =0 ) 
				update ZnodeCMSSEODEtail SET  IsPublish = 1 , PublishStateId  = DBO.Fn_GetPublishStateIdForPreview() where 
				(PortalId = @PortalId OR @PortalId  =0 )  AND CMSSEOTypeId = 3 
			End 
			Else 
			Begin
				update ZnodeCMSContentPages SET  IsPublished = 1 , PublishStateId  = DBO.Fn_GetPublishStateIdForPublish() where (PortalId = @PortalId OR @PortalId  =0 ) 
				update ZnodeCMSSEODEtail SET  IsPublish = 1 , PublishStateId  = DBO.Fn_GetPublishStateIdForPublish() where 
				(PortalId = @PortalId OR @PortalId  =0 )  AND CMSSEOTypeId = 3 
			End
			
			if (@IsContentType =1  OR (@IsContentType = 0 AND @IsFirstTimeContentPublish =0))
			Begin
				If @IsPreviewEnable = 1 AND (@RevisionState like '%Preview%'  OR @RevisionState like '%Production%'  ) 
				Begin
					Delete  From ZnodePublishWebStoreEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishBlogNewsEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishPortalCustomCssEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishWidgetCategoryEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishWidgetProductEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishWidgetTitleEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishWidgetSliderBannerEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishTextWidgetEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishMediaWidgetEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishSearchWidgetEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishContentPageConfigEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishSEOEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId) And CMSSEOTypeId in (3,5) 
					Delete  From ZnodePublishMessageEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishPortalGlobalAttributeEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishPortalBrandEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishProductPageEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishWidgetBrandEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
				End
				If (@RevisionState like '%Production%' OR @RevisionState = 'None')
				Begin
					Delete  From ZnodePublishWebStoreEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishBlogNewsEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishPortalCustomCssEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishWidgetCategoryEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishWidgetProductEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishWidgetTitleEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishWidgetSliderBannerEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishTextWidgetEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishMediaWidgetEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishSearchWidgetEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishContentPageConfigEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishSEOEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId) And CMSSEOTypeId in (3,5) 
					Delete  From ZnodePublishMessageEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishPortalGlobalAttributeEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishPortalBrandEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishProductPageEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishWidgetBrandEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
				End
			End
			Else 
			Begin
				
				If @IsPreviewEnable = 1 AND (@RevisionState like '%Preview%'  OR @RevisionState like '%Production%'  ) 
				Begin
					Delete  From ZnodePublishWebStoreEntity           Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Delete  From ZnodePublishPortalBrandEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
				
					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishBlogNewsEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishPortalCustomCssEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					
					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishWidgetCategoryEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishWidgetProductEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishWidgetTitleEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishWidgetSliderBannerEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishTextWidgetEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishMediaWidgetEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishSearchWidgetEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId =6)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishContentPageConfigEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishSEOEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					And CMSSEOTypeId in (3,5) 

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishMessageEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishPortalGlobalAttributeEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishProductPageEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishWidgetBrandEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
				End
				If (@RevisionState like '%Production%' OR @RevisionState = 'None')
				Begin
					Delete  From ZnodePublishWebStoreEntity           Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Delete  From ZnodePublishPortalBrandEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
				
					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishBlogNewsEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishPortalCustomCssEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					
					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishWidgetCategoryEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishWidgetProductEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishWidgetTitleEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishWidgetSliderBannerEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishTextWidgetEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishMediaWidgetEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishSearchWidgetEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishContentPageConfigEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishSEOEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					And CMSSEOTypeId in (3,5)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishMessageEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishPortalGlobalAttributeEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishProductPageEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishWidgetBrandEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
				End 
			End

			--update ZnodeCMSContentPages SET  IsPublished = 1 , PublishStateId  = DBO.Fn_GetPublishStateIdForPublish() where @CMSContentPagesId = CMSContentPagesId and  (PortalId = @PortalId OR @PortalId  =0 ) 
			--update ZnodeCMSSEODEtail SET  IsPublish = 1 , PublishStateId  = DBO.Fn_GetPublishStateIdForPublish() where 
			--SEOCode = @CMSSEOCode and  (PortalId = @PortalId OR @PortalId  =0 )  AND CMSSEOTypeId = 3 
		 SET @Status = 1
		End
	SELECT 1 AS ID,@Status AS Status;   

END TRY 
BEGIN CATCH 
	SET @Status =0  
	 SELECT 1 AS ID,@Status AS Status;   

	 DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
		@ErrorLine VARCHAR(100)= ERROR_LINE(),
		@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_PublishPortalEntity 
		@PortalId = '+CAST(@PortalId AS VARCHAR	(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10))
		+',@PreviewVersionId = ' + CAST(@PreviewVersionId  AS varchar(20))
		+',@ProductionVersionId = ' + CAST(@ProductionVersionId  AS varchar(20))
		+',@RevisionState = ''' + CAST(@RevisionState  AS varchar(50))
		+',@UserId = ' + CAST(@UserId AS varchar(20));	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
	
			
	INSERT INTO ZnodePublishPortalErrorLogEntity
	(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
	SELECT 'ZnodePublishPortalEntity', @RevisionState + isnull(@ErrorMessage,'') , 'Fail' , Getdate(), 
	@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

		                			 
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_PublishPortalEntity',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
END CATCH
END
go
IF exists(select * from sys.procedures where name = 'Znode_SetPublishPortalBrandEntity')
	drop proc Znode_SetPublishPortalBrandEntity
go

CREATE PROCEDURE [dbo].[Znode_SetPublishPortalBrandEntity]
(
   @PortalId  INT = 0 
  ,@LocaleId  INT = 0 
  ,@PreviewVersionId INT = 0 
  ,@IsPreviewEnable int = 0 
  ,@ProductionVersionId INT = 0 
  ,@RevisionState varchar(50) = '' 
  ,@UserId int = 0 
  ,@Status int = 0 OUTPUT
)
AS
/*
    This Procedure is used to publish the blog news against the store 
  
	EXEC ZnodeSetPublishPortalBrandEntity 1 2,3
	A. 
		1. Preview - Preview
		2. None    - Production   --- 
		3. Production - Preview/Production
	B.
		select * from ZnodePublishStateApplicationTypeMapping
		select * from ZnodePublishState where PublishStateId in (3,4) 
		select * from ZnodePublishPortalLog 
	C.
		Select * from ZnodePublishState where IsDefaultContentState = 1  and IsContentState = 1  --Production 
    
	Unit testing 
	
	Exec [ZnodeSetPublishPortalBrandEntity]
	   @PortalId  = 1 
	  ,@LocaleId  = 0 
	  ,@PreviewVersionId = 0 
	  ,@ProductionVersionId = 0 
	  ,@RevisionState = 'Production' 
	  ,@CMSMappingId = 0
	  ,@UserId = 0 
  
	*/
BEGIN 
BEGIN TRY 
SET NOCOUNT ON
   
   Begin 
		DECLARE @Tbl_PreviewVersionId    TABLE    (PreviewVersionId int , PortalId int , LocaleId int)
		DECLARE @Tbl_ProductionVersionId TABLE    (ProductionVersionId int  , PortalId int , LocaleId int)

		If @PreviewVersionId = 0 
			Begin
   				Insert into @Tbl_PreviewVersionId 
				SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and  (LocaleId = 	@LocaleId OR @LocaleId = 0  ) and PublishState ='PREVIEW'
			end
		Else 
				Insert into @Tbl_PreviewVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
				where VersionId = @PreviewVersionId
		If @ProductionVersionId = 0 
   			Begin
				Insert into @Tbl_ProductionVersionId 
				SELECT distinct VersionId , PortalId , LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and  (LocaleId = 	@LocaleId OR @LocaleId = 0  ) and PublishState ='PRODUCTION'
			End 
		Else 
			Insert into @Tbl_ProductionVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
			where VersionId = @ProductionVersionId
 
		DECLARE @SetLocaleId INT , @DefaultLocaleId INT = dbo.Fn_GetDefaultLocaleId(), @MaxCount INT =0 , @IncrementalId INT = 1  
		DECLARE @TBL_Locale TABLE (LocaleId INT , RowId INT IDENTITY(1,1))
		
			DECLARE @TBL_BrandDetails TABLE  
        (
			Description         NVARCHAR(MAX),  
			BrandId             INT,  
			BrandCode           VARCHAR(600),  
			DisplayOrder        INT,  
			IsActive            BIT,  
			WebsiteLink         NVARCHAR(1000),  
			BrandDetailLocaleId INT,  
			SEOFriendlyPageName NVARCHAR(600),  
			MediaPath           NVARCHAR(MAX),  
			MediaId             INT,  
			ImageName           VARCHAR(300),
			BrandName			VARCHAR(100),	
			Custom1				NVARCHAR(MAX),	
			Custom2				NVARCHAR(MAX),
			Custom3				NVARCHAR(MAX),
			Custom4				NVARCHAR(MAX),
			Custom5				NVARCHAR(MAX),
			PortalId			Int,
			IsAssociated        Bit 
        );  
  
    DECLARE @AttributeId INT= [dbo].[Fn_GetProductBrandAttributeId]();  
             
	DECLARE @TBL_AttributeDefault TABLE  
    (
		PimAttributeId            INT,  
		AttributeDefaultValueCode VARCHAR(600),  
		IsEditable                BIT,  
		AttributeDefaultValue     NVARCHAR(MAX),
		DisplayOrder			  INT   
    );  

    DECLARE @TBL_SeoDetails TABLE  
    (
		CMSSEODetailId       INT,  
		SEOTitle             NVARCHAR(MAX),  
		SEOKeywords          NVARCHAR(MAX),  
		SEOURL               NVARCHAR(MAX),  
		ModifiedDate         DATETIME,  
		SEODescription       NVARCHAR(MAX),  
		MetaInformation      NVARCHAR(MAX),  
		IsRedirect           BIT,  
		CMSSEODetailLocaleId INT,  
		--SEOId                INT ,
		PublishStatus        NVARCHAR(20),
		SEOCode				 NVARCHAR(4000),
		CanonicalURL		 VARCHAR(200),
		RobotTag			 VARCHAR(50)			   
    );  

    DECLARE @TBL_BrandDetail TABLE  
    (
		Description          NVARCHAR(MAX),  
		BrandId              INT,  
		BrandCode            VARCHAR(600),  
		DisplayOrder         INT,  
		IsActive             BIT,  
		WebsiteLink          NVARCHAR(1000),  
		BrandDetailLocaleId  INT,  
		MediaPath            NVARCHAR(MAX),  
		MediaId              INT,  
		ImageName      VARCHAr(300) ,  
		CMSSEODetailId       INT,  
		SEOTitle             NVARCHAR(MAX),  
		SEOKeywords          NVARCHAR(MAX),  
		SEOURL               NVARCHAR(MAX),  
		ModifiedDate         DATETIME,  
		SEODescription       NVARCHAR(MAX),  
		MetaInformation      NVARCHAR(MAX),  
		IsRedirect           BIT,  
		CMSSEODetailLocaleId INT,  
		--SEOId                INT,  
		BrandName            NVARCHAR(MAX),  
		RowId                INT,  
		CountId              INT ,
		SEOCode              NVARCHAR(4000), 
		Custom1              NVARCHAR(MAX),
		Custom2              NVARCHAR(MAX),
		Custom3              NVARCHAR(MAX),
		Custom4              NVARCHAR(MAX),
		Custom5              NVARCHAR(MAX),
		PortalId			 INT
    );  

		iF object_id('tempdb..[#TBL_BrandDetail]') IS NOT NULL
			drop table tempdb..#TBL_BrandDetail
		Create Table #TBL_BrandDetail
		(
			Description          NVARCHAR(MAX),  
			BrandId              INT,  
			BrandCode            VARCHAR(600),  
			DisplayOrder         INT,  
			IsActive             BIT,  
			WebsiteLink          NVARCHAR(1000),  
			BrandDetailLocaleId  INT,  
			MediaPath            NVARCHAR(MAX),  
			MediaId              INT,  
			ImageName      VARCHAr(300) ,  
			CMSSEODetailId       INT,  
			SEOTitle             NVARCHAR(MAX),  
			SEOKeywords          NVARCHAR(MAX),  
			SEOFriendlyPageName  NVARCHAR(MAX),  
			ModifiedDate         DATETIME,  
			SEODescription       NVARCHAR(MAX),  
			MetaInformation      NVARCHAR(MAX),  
			IsRedirect           BIT,  
			CMSSEODetailLocaleId INT,  
			--SEOId                INT,  
			BrandName            NVARCHAR(MAX),  
			PromotionId		     INT,
			RowId                INT,  
			CountId              INT ,
			SEOCode              NVARCHAR(4000), 
			Custom1              NVARCHAR(MAX),
			Custom2              NVARCHAR(MAX),
			Custom3              NVARCHAR(MAX),
			Custom4              NVARCHAR(MAX),
			Custom5              NVARCHAR(MAX),
			PortalId			 INT,
			LocaleId             INT  
		);  
		
		
		;WITH Cte_GetBrandBothLocale AS 
	(
		SELECT ZBDL.Description,ZBD.BrandId,LocaleId,ZBD.BrandCode,isnull(ZPB.DisplayOrder,999) as DisplayOrder,ZBD.IsActive,ZBD.WebsiteLink,ZBDl.BrandDetailLocaleId,  
			SEOFriendlyPageName,[dbo].[Fn_GetMediaThumbnailMediaPath](Zm.path) MediaPath,ZBD.MediaId,Zm.path ImageName, ZBDL.BrandName, ZBD.Custom1, ZBD.Custom2, ZBD.Custom3, ZBD.Custom4, ZBD.Custom5, ZPB.PortalId,
			CASE WHEN ZPB.PortalBrandId IS NULL THEN 0 ELSE 1 END IsAssociated
		FROM ZnodeBrandDetails ZBD 
		LEFT JOIN ZnodePortalBrand ZPB ON ZBD.BrandId = ZPB.BrandId AND (ZPB.PortalId = @PortalId OR isnull(@PortalId,0) = 0 )
		LEFT JOIN ZnodeBrandDetailLocale ZBDL ON(ZBD.BrandId = ZBDL.BrandId)  
		LEFT JOIN ZnodeMedia ZM ON(ZM.MediaId = ZBD.MediaId)  
		WHERE LocaleId IN(@LocaleId, @DefaultLocaleId)  
		
              
    ),  
    Cte_BrandFirstLocale AS 
	(
		SELECT Description,BrandId,LocaleId,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,SEOFriendlyPageName,MediaPath,MediaId,ImageName , BrandName, Custom1, Custom2, Custom3, Custom4, Custom5, PortalId , IsAssociated
        FROM Cte_GetBrandBothLocale CTGBBL  
        WHERE LocaleId = @LocaleId
	),  
    Cte_BrandDefaultLocale AS 
	(
		SELECT Description,BrandId,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,SEOFriendlyPageName,MediaPath,MediaId,ImageName, BrandName, Custom1, Custom2, Custom3, Custom4, Custom5, PortalId, IsAssociated  
        FROM Cte_BrandFirstLocale  
        UNION ALL  
        SELECT Description,BrandId,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,SEOFriendlyPageName,MediaPath,MediaId,ImageName , BrandName, Custom1, Custom2, Custom3, Custom4, Custom5, PortalId, IsAssociated
		FROM Cte_GetBrandBothLocale CTBBL  
		WHERE LocaleId = @DefaultLocaleId  
		AND NOT EXISTS  
		(  
			SELECT TOP 1 1  
			FROM Cte_BrandFirstLocale CTBFL  
			WHERE CTBBL.BrandId = CTBFL.BrandId  
		)
	)    
	INSERT INTO @TBL_BrandDetails (Description,BrandId,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,SEOFriendlyPageName,MediaPath,MediaId,ImageName, BrandName, Custom1, Custom2, Custom3, Custom4, Custom5, PortalId, IsAssociated)  
    SELECT Description,BrandId,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,SEOFriendlyPageName,MediaPath,MediaId,ImageName , BrandName, Custom1, Custom2, Custom3, Custom4, Custom5, PortalId, IsAssociated
    FROM Cte_BrandDefaultLocale CTEBD;
       
	-----Update BrandName from attributedefault value
	;WITH Cte_GetBrandNameLocale AS 
	(
		select d.brandcode, a.AttributeDefaultValueCode, b.AttributeDefaultValue, b.LocaleId 
		from ZnodePimAttributeDefaultValue a
		inner join ZnodePimAttributeDefaultValueLocale b on a.PimAttributeDefaultValueId = b.PimAttributeDefaultValueId 
		inner join ZnodePimAttribute c on a.PimAttributeId = c.PimAttributeId
		inner join @TBL_BrandDetails d on a.AttributeDefaultValueCode = d.brandcode
		where c.attributecode = 'brand' and b.LocaleId IN(@LocaleId, @DefaultLocaleId)
              
    )
	,Cte_BrandNameFirstLocale AS 
	(
		SELECT brandcode, AttributeDefaultValueCode, AttributeDefaultValue, LocaleId  
        FROM Cte_GetBrandNameLocale CTGBBL  
        WHERE LocaleId = @LocaleId
	)
	,Cte_BrandDefaultLocale AS 
	(
		SELECT brandcode, AttributeDefaultValueCode, AttributeDefaultValue, LocaleId  
        FROM Cte_BrandNameFirstLocale  
        UNION ALL  
        SELECT brandcode, AttributeDefaultValueCode, AttributeDefaultValue, LocaleId  
		FROM Cte_GetBrandNameLocale CTBBL  
		WHERE LocaleId = @DefaultLocaleId  
		AND NOT EXISTS  
		(  
			SELECT TOP 1 1  
			FROM Cte_BrandNameFirstLocale CTBFL  
			WHERE CTBBL.brandcode = CTBFL.brandcode  
		)
	)  
	update b1 set b1.brandname = a1.AttributeDefaultValue
	from Cte_BrandDefaultLocale a1
	inner join @TBL_BrandDetails b1 on a1.brandcode = b1.brandcode

	DECLARE @SeoCode SelectColumnList
	INSERT INTO @SeoCode
	SELECT BrandCode FROM @TBL_BrandDetails
				

    INSERT INTO @TBL_SeoDetails 
	(
		CMSSEODetailId,SEOTitle,SEOKeywords,SEOURL,ModifiedDate,SEODescription,MetaInformation,IsRedirect,
		CMSSEODetailLocaleId,PublishStatus,SEOCode,CanonicalURL,RobotTag
	)  
    EXEC Znode_GetSeoDetails @SeoCode, 'Brand', @LocaleId;  
			              
    SELECT TBBD.*,TBSD.*--,TBAD.AttributeDefaultValue BrandName,TBAD.AttributeDefaultValueCode  
    INTO #TM_BrandLocale  
    FROM @TBL_BrandDetails TBBD  
    LEFT JOIN @TBL_SeoDetails TBSD ON(TBSD.SEOCode = TBBD.BrandCode)  
    --INNER JOIN @TBL_AttributeDefault TBAD ON(TBAD.AttributeDefaultValueCode = TBBD.BrandCode);  
  
		INSERT INTO @TBL_Locale (LocaleId) SELECT LocaleId FROM ZnodeLocale WHERE IsActive =1 AND (LocaleId  = @LocaleId OR @LocaleId = 0 )

		SET @MaxCount = ISNULL((SELECT MAx(RowId) FROM @TBL_Locale),0)
		WHILE @IncrementalId <= @MaxCount
		BEGIN 
			SET @SetLocaleId = (SELECT Top 1 LocaleId FROM @TBL_locale WHERE RowId = @IncrementalId)
			
			Insert into #TBL_BrandDetail
			(BrandId,Description,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,MediaPath,MediaId,ImageName,CMSSEODetailId,SEOTitle,SEOKeywords,SEOFriendlyPageName,SEODescription,MetaInformation,IsRedirect,CMSSEODetailLocaleId,BrandName,
			PromotionId ,SEOCode,Custom1, Custom2, Custom3, Custom4, Custom5, PortalId,LocaleId)
			select BrandId,Description,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,MediaPath,MediaId,ImageName,CMSSEODetailId,SEOTitle,SEOKeywords,SEOFriendlyPageName,SEODescription,MetaInformation,IsRedirect,CMSSEODetailLocaleId,BrandName,
			0 PromotionId ,SEOCode,Custom1, Custom2, Custom3, Custom4, Custom5, PortalId ,@SetLocaleId from #TM_BrandLocale 
			where  PortalId = @PortalId
		SET @IncrementalId = @IncrementalId +1 
		END 
	End


	If @IsPreviewEnable = 1 AND ( @RevisionState like '%Preview%'  OR @RevisionState like '%Production%' ) 
	Begin
	    --Data inserted into flat table ZnodePublishPortalBrandEntity (Replica of MongoDB Collection )  
		Delete from ZnodePublishPortalBrandEntity where PortalId = @PortalId  and VersionId in 
		( Select PreviewVersionId from @Tbl_PreviewVersionId)
		
		Insert Into ZnodePublishPortalBrandEntity 
		(VersionId,PublishStartTime,PortalId,LocaleId,
		 BrandId,BrandCode,BrandName,MediaId
		 ,WebsiteLink,Description,PublishState,SEOTitle,SEOKeywords,SEODescription,SEOFriendlyPageName
		 ,DisplayOrder,IsActive,MediaPath,CMSSEODetailId,CMSSEODetailLocaleId,BrandDetailLocaleId,ImageName)
		SELECT B.PreviewVersionId , Getdate(),B.PortalId ,B.LocaleId
		,BrandId,BrandCode,BrandName,MediaId
		,WebsiteLink,Description,'PREVIEW',SEOTitle,SEOKeywords,SEODescription,SEOFriendlyPageName
		,DisplayOrder,IsActive,MediaPath,CMSSEODetailId,CMSSEODetailLocaleId,BrandDetailLocaleId,ImageName
		FROM #TBL_BrandDetail A inner join @TBL_PreviewVersionId B on 
		@PortalId= B.PortalId and A.LocaleId = b.LocaleId

	End
	-------------------------- End Preview 
	If (@RevisionState like '%Production%' OR @RevisionState = 'None')
	Begin
		-- Only production version id will process 
		Delete from ZnodePublishPortalBrandEntity where PortalId = @PortalId  and VersionId in (select ProductionVersionId from @TBL_ProductionVersionId)
		
		Insert Into ZnodePublishPortalBrandEntity 
		(VersionId,PublishStartTime,PortalId,LocaleId,BrandId,BrandCode,BrandName,MediaId
		 ,WebsiteLink,Description,PublishState,SEOTitle,SEOKeywords,SEODescription,SEOFriendlyPageName
		 ,DisplayOrder,IsActive,MediaPath,CMSSEODetailId,CMSSEODetailLocaleId,BrandDetailLocaleId,ImageName)
		SELECT B.ProductionVersionId , Getdate(),B.PortalId ,B.LocaleId
		,BrandId,BrandCode,BrandName,MediaId
		,WebsiteLink,Description,'PREVIEW',SEOTitle,SEOKeywords,SEODescription,SEOFriendlyPageName
		,DisplayOrder,IsActive,MediaPath,CMSSEODetailId,CMSSEODetailLocaleId,BrandDetailLocaleId,ImageName
		FROM #TBL_BrandDetail A inner join @TBL_ProductionVersionId B on 
		@PortalId= B.PortalId and A.LocaleId = b.LocaleId

	End
	SET @Status =1 
END TRY 
BEGIN CATCH 
	SET @Status = 0;
	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
		@ErrorLine VARCHAR(100)= ERROR_LINE(),
		@ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeSetPublishPortalBrandEntity 
		@PortalId = '+CAST(@PortalId AS VARCHAR	(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10))
		+',@PreviewVersionId = ' + CAST(@PreviewVersionId  AS varchar(20))
		+',@ProductionVersionId = ' + CAST(@ProductionVersionId  AS varchar(20))
		+',@RevisionState = ''' + CAST(@RevisionState  AS varchar(50))
		+',@UserId = ' + CAST(@UserId AS varchar(20));	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		                			 
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'ZnodeSetPublishPortalBrandEntity',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;

	END CATCH
END
go
IF exists(select * from sys.procedures where name = 'Znode_AdminUsers')
	drop proc Znode_AdminUsers
go

CREATE PROCEDURE [dbo].[Znode_AdminUsers]
(	@RoleName		VARCHAR(200),
    @UserName		VARCHAR(200),
    @WhereClause	XML,
    @Rows			INT           = 100,
    @PageNo			INT           = 1,
    @Order_By		VARCHAR(1000) = '',
    @RowCount		INT        = 0 OUT,
	@IsCallOnSite   BIT = 0 ,
	@PortalId		VARCHAR(1000) = 0,
	@IsGuestUser    BIT = 0,
	@ColumnName     dbo.SelectColumnList ReadOnly
)
AS
   /* 
      Summary: List of users with detsils and shows link with ASPNet tables 
      This procedure is used for finding both users and admin users 
      here use three view "View_RoleUsers" for check  @UserName is present or not 
      "View_AdminUserDetail"  this view use for admin users 
      "View_CustomerUserDetail" Use for customer users 
      Unit Testing   
	  SELECT * FROM ZnodeUser 
      DECLARE @EDE INT=0  EXEC Znode_AdminUsers '','admin@znode.com',@WhereClause='',@Order_By='',@PageNo= 1 ,@Rows= 214,@IsCallOnSite='false',@PortalId=0,@RowCount=@EDE OUT  SELECT @EDE
   */
     BEGIN
         BEGIN TRY
            SET NOCOUNT ON;
			
            DECLARE @SQL NVARCHAR(MAX)= '', @PaginationWhereClause VARCHAR(300)= dbo.Fn_GetRowsForPagination(@PageNo, @Rows, ' WHERE RowId');
            
			if OBJECT_ID('tempdb..##CustomerUserAddDetail') is not null
				drop table ##CustomerUserAddDetail

			if OBJECT_ID('tempdb..##View_CustomerUserAddDetail') is not null
				drop table ##View_CustomerUserAddDetail

			IF OBJECT_ID('tempdb..#TBL_RowCount') is not null
				DROP TABLE #TBL_RowCount
			Create table #TBL_RowCount(RowsCount int )
			-----Split where clause XMl 
			CREATE TABLE #WhereColumnList(RowId Int identity, filterName varchar(max), WhereCondition varchar(max))
			insert into #WhereColumnList(filterName,WhereCondition)
			SELECT 
					Tbl.Col.value('key[1]', 'varchar(max)') as filterName,
					Tbl.Col.value('condition[1]', 'varchar(max)') WhereCondition
			FROM   @WhereClause.nodes('//filter') Tbl(Col) 
			----Address column in global search
			declare @AddressGlobalSearch varchar(1000) =''
			declare @GlobalSearch varchar(100) = ''
			
			select @GlobalSearch = substring(WhereCondition,charindex(' like ',WhereCondition), charindex(' OR ',WhereCondition)-charindex(' like ',WhereCondition)) 
			from #WhereColumnList
			where filtername like '%|%'
			and filtername <> ''
			and filterName in ('CityName','CountryName','PostalCode','StateName','CompanyName') 

			

			if isnull(@GlobalSearch,'') <> ''
			begin
				select @AddressGlobalSearch = '('+'CityName '+ @GlobalSearch+' OR '+'CountryName '+ @GlobalSearch+' OR '+'PostalCode '+ @GlobalSearch+' OR '+'StateName '+ @GlobalSearch+' OR '+'CompanyName '+ @GlobalSearch+')'
			end
			else
			begin
				SET @AddressGlobalSearch = ''
			end
			----Global search where clause
			declare @WhereClauseGlobal varchar(1000)=''
			select @WhereClauseGlobal = ISNULL(WhereCondition,'')
			from #WhereColumnList
			where filtername like '%|%'
			and filtername <> ''
			
			----Where clause columns except Address columns
			declare @WhereClause1 varchar(max) = ''
			select @WhereClause1 = COALESCE(@WhereClause1 + '', '') + WhereCondition+' And '
			--case when @WhereClause1 <> ''  then ' And ' else '' end
			from #WhereColumnList a
			where filterName not like '%|%' and
			filterName not in ('CountryName','CityName','StateName','PostalCode','CompanyName')
			and filtername <> ''

			if @WhereClause1 <> ''
			begin
				set @WhereClause1=isnull(substring(@WhereClause1,1,len(@WhereClause1)-3),'')
			end
			else
			begin
				set @WhereClause1 = ''
			end

			----Where clause columns
			declare @AddressColumnWhereClause varchar(max) 
			select @AddressColumnWhereClause = COALESCE(@AddressColumnWhereClause + '', '') + WhereCondition+' And '
			from #WhereColumnList a
			where filterName not like '%|%' and
			filterName in ('CountryName','CityName','StateName','PostalCode','CompanyName')
			and filtername <> ''
			
			if isnull(@AddressColumnWhereClause,'') <> ''
			begin
				set @AddressColumnWhereClause=isnull(substring(@AddressColumnWhereClause,1,len(@AddressColumnWhereClause)-3),'')
            end
			else
			begin
				set @AddressColumnWhereClause = ''
			end

			declare @WhereClauseAll varchar(max) = ''
			select @WhereClauseAll = COALESCE(@WhereClauseAll + '', '') + WhereCondition+' And '
			from #WhereColumnList a
			

			set @WhereClauseAll=isnull(CASE WHEN @WhereClauseAll = '' THEN '' ELSE substring(@WhereClauseAll,1,len(@WhereClauseAll)-3) END ,'')
			-------------- 
			
			IF @PortalId  <> '0' 
			BEGIN 
			    SET @WhereClauseAll = CASE WHEN  @WhereClauseAll = '' THEN ' (PortalId IN ('+@PortalId+') OR PortalId IS NULL) ' ELSE @WhereClauseAll+' AND (PortalId IN ('+@PortalId+') OR PortalId IS NULL) ' END 

				SET @WhereClause1 = CASE WHEN  @WhereClause1 = '' THEN ' (isnull(PortalId,0) IN ('+@PortalId+') OR PortalId IS NULL) ' ELSE @WhereClause1+' AND (isnull(PortalId,0) IN ('+@PortalId+') OR PortalId IS NULL) ' END 
			
			END 

			IF EXISTS ( SELECT TOP 1 1 FROM View_RoleUsers  WHERE Username = @UserName   )  AND @RoleName <> ''  
			-- this check for admin user
       		BEGIN
				SET @SQL = ' SELECT  A.UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,A.CreatedBy,A.CreatedDate,A.ModifiedBy,A.ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId ,CustomerPaymentGUID
				INTO #Cte_AdminUserDetail
				FROM View_AdminUserDetail A
				'+CASE WHEN @PortalId  <> '0' THEN ' INNER JOIN ZnodeUserPortal ZUP ON (ZUP.UserId = A.UserId) 'ELSE '' END  +'	 
				'+dbo.Fn_GetWhereClause(@WhereClauseAll, ' WHERE ')+'
				
				;with Cte_AdminUserDetailRowId AS 
				(
				SELECT UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId,CustomerPaymentGUID ,RANK()Over('+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC')+',UserId DESC) RowId
				FROM  #Cte_AdminUserDetail
				)
					 
				SELECT UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId,CustomerPaymentGUID ,RowId 
				INTO #AccountDetails
				FROM Cte_AdminUserDetailRowId 
					 
				SET @Count= ISNULL((SELECT  Count(1) FROM #AccountDetails ),0)
					 
				SELECT DISTINCT UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId ,CustomerPaymentGUID
				FROM #AccountDetails '+@PaginationWhereClause+' '+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC' );
				EXEC SP_executesql
				@SQL,
				N'@Count INT OUT',
				@Count = @RowCount OUT;

				
			END;
			-- For Customer user
            ELSE   
			BEGIN
				IF @roleName = ''
				BEGIN
					if OBJECT_ID('tempdb..##CustomerUserAddDetail') is not null
					drop table ##CustomerUserAddDetail

					if OBJECT_ID('tempdb..##View_CustomerUserAddDetail') is not null
					drop table ##View_CustomerUserAddDetail
				
					if OBJECT_ID('tempdb..##UserList') is not null
					drop table ##UserList

					CREATE TABLE ##UserList(UserId int,AddressID int)

					declare @UserList varchar(1000)=''

					------To get the list of user having adress column in global search
					if (@AddressGlobalSearch <> '')
					begin
				
					set @UserList = 'select a.UserId, b.AddressID	from ZnodeUserAddress a	inner join ZnodeAddress b on a.AddressId = b.AddressId	where '+@AddressGlobalSearch
					--print @UserList
					insert into ##UserList(UserId, b.AddressID)
					exec (@UserList)
			
					end
					----To get the list of user having adress column in where clause 
					if (@AddressColumnWhereClause <> '')
					begin
					
					set @UserList = 'select a.UserId, b.AddressID	from ZnodeUserAddress a	inner join ZnodeAddress b on a.AddressId = b.AddressId	where '+@AddressColumnWhereClause
					--print @UserList
					insert into ##UserList(UserId,AddressID)
					exec (@UserList)
					
					end

					If @IsGuestUser= 0 
					AND
					NOT Exists (Select filterName from #WhereColumnList where filterName in ('accountid','isaccountcustomer','UserId') and filtername <> '')
					-- Customer List with GuestUsers
					Begin
						SET @SQL = 
							'SELECT a.userId,a.AspNetuserId,a.UserName,a.FirstName,a.MiddleName,a.LastName
							,a.PhoneNumber,
							 a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
							 CONVERT( DATE, a.ModifiedDate) ModifiedDate, 0 RoleId,''''  RoleName,
							 (ISNULL(RTRIM(LTRIM(a.FirstName)), '''')+'' ''+ISNULL(RTRIM(LTRIM(a.MiddleName)), '''')+CASE
							 WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '''') = ''''	THEN ''''
							 ELSE '' ''	END+ISNULL(RTRIM(LTRIM(a.LastName)), ''''))  FullName
							 ,a.AccountId, '''' TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser
							 into ##View_CustomerUserAddDetail
							 FROM ZnodeUser a
							' 
						
						
						EXEC (@SQL)
					End	
					Else If @IsGuestUser= 1 
					Begin
							SET @SQL='SELECT a.userId,a.AspNetuserId,a.UserName,a.FirstName,a.MiddleName,a.LastName
							,a.PhoneNumber,
							a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
							CONVERT( DATE, a.ModifiedDate) ModifiedDate,ur.RoleId,r.Name RoleName,
							(ISNULL(RTRIM(LTRIM(a.FirstName)), '''')+'' ''+ISNULL(RTRIM(LTRIM(a.MiddleName)), '''')+CASE
							WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '''') = '''' THEN '''' ELSE '' '' END+ISNULL(RTRIM(LTRIM(a.LastName)), '''')) FullName,
							a.AccountId,r.TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser
							into ##View_CustomerUserAddDetail
							FROM ZnodeUser a
							LEFT JOIN AspNetUserRoles ur ON(ur.UserId = a.AspNetUserId)
							LEFT JOIN AspNetRoles r ON(r.Id = ur.RoleId)                       
							LEFT JOIN ZnodePortalAccount ZPA ON(ZPA.AccountId = a.AccountId) 
							WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeUSer ZUQ WHERE ZUQ.UserId = a.UserId AND ZUQ.EmailOptIn = 1 AND ZUQ.AspNetUserId IS NULL )
							AND a.AspNetuserId is null'
						EXEC (@SQL)
					End
					Else IF Exists (Select filterName from #WhereColumnList where filterName in ('UserId') and filtername <> '')
					and  @IsGuestUser= 0   
					-- Customer List for user edit single user 
					Begin
					SET @SQL='SELECT a.userId,a.AspNetuserId,a.UserName,a.FirstName,a.MiddleName,a.LastName
					,a.PhoneNumber, a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
							CONVERT( DATE, a.ModifiedDate) ModifiedDate,ur.RoleId,r.Name RoleName,
							(ISNULL(RTRIM(LTRIM(a.FirstName)), '''')+'' ''+ISNULL(RTRIM(LTRIM(a.MiddleName)), '''')+CASE
							WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '''') = '''' THEN '''' ELSE '' '' END+ISNULL(RTRIM(LTRIM(a.LastName)), '''')) FullName,
							a.AccountId, r.TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser
							into ##View_CustomerUserAddDetail
							FROM ZnodeUser a
							LEFT JOIN ZnodeAccount e ON(e.AccountId = a.AccountId)
							LEFT JOIN AspNetUserRoles ur ON(ur.UserId = a.AspNetUserId)
							LEFT JOIN AspNetRoles r ON(r.Id = ur.RoleId)                       
							LEFT JOIN ZnodePortalAccount ZPA ON(ZPA.AccountId = a.AccountId) 
							WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeUSer ZUQ WHERE ZUQ.UserId = a.UserId AND ZUQ.EmailOptIn = 1 AND ZUQ.AspNetUserId IS NULL )'
						print @SQL
						
						EXEC (@SQL)
					End	
					Else -- Account user List 
					Begin
							SELECT a.userId,a.AspNetuserId,a.UserName,a.PhoneNumber,a.FirstName,a.MiddleName,a.LastName
							,a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
							CONVERT( DATE, a.ModifiedDate) ModifiedDate,ur.RoleId,r.Name RoleName,
						    (ISNULL(RTRIM(LTRIM(a.FirstName)), '')+' '+ISNULL(RTRIM(LTRIM(a.MiddleName)), '')+CASE
							WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '') = '' THEN '' ELSE ' ' END+ISNULL(RTRIM(LTRIM(a.LastName)), '')) FullName,
							a.AccountId, r.TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser
							into ##View_CustomerUserAddDetail
							FROM ZnodeUser a
							LEFT JOIN ZnodeAccount e ON(e.AccountId = a.AccountId)
							LEFT JOIN AspNetUserRoles ur ON(ur.UserId = a.AspNetUserId)
							LEFT JOIN AspNetRoles r ON(r.Id = ur.RoleId)                       
							LEFT JOIN ZnodePortalAccount ZPA ON(ZPA.AccountId = a.AccountId) 
							WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeUSer ZUQ WHERE ZUQ.UserId = a.UserId AND ZUQ.EmailOptIn = 1 AND ZUQ.AspNetUserId IS NULL )
					End
					
					alter table ##View_CustomerUserAddDetail 
					add StoreName varchar(1000), CountryName varchar(1000),CityName varchar(1000),StateName varchar(1000),
					PostalCode varchar(1000), CompanyName varchar(1000), SalesRepUserName varchar(600),SalesRepFullName varchar(1000), PortalId INT 

					IF @PortalId <> '0' 
					BEGIN 
					   UPDATE a SET a.PortalId = b.PortalId
					   FROM ##View_CustomerUserAddDetail a 
					   INNER JOIN ZnodeUserPortal b ON (b.Userid = a.Userid )
					END 

					IF (@WhereClauseAll like '%StoreName%' or @Order_By like '%StoreName%' )
					BEGIN
						CREATE NONCLUSTERED INDEX ##View_CustomerUserAddDetail_UserId
					   ON [dbo].[##View_CustomerUserAddDetail] ([userId])

						update  a set StoreName = CASE WHEN zp.StoreName IS NULL THEN 'ALL' ELSE zp.StoreName END 
						             -- , PortalId = up.PortalId
						from ##View_CustomerUserAddDetail a
						Left join  ZnodeUserPortal up ON(up.UserId = a.UserId)  
						Left JOIN ZnodePortal zp ON (up.PortalId = zp.PortalId)
							
					END
					
					IF (@WhereClauseAll like '%CountryName%' OR @WhereClauseAll like '%CityName%' OR @WhereClauseAll like '%StateName%' OR @WhereClauseAll like '%PostalCode%' OR @WhereClauseAll like '%CompanyName%')
					BEGIN
			 
						update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
						PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName
						from ##View_CustomerUserAddDetail a
						inner join ZnodeAccountAddress ZAA on a.AccountId = ZAA.AccountId
						inner  JOIN ZnodeAddress ZA on ZA.AddressId = ZAA.AddressId
						where isnull(a.AccountId,0)<> 0-- is not null
	 
						update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
						PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName
						from ##View_CustomerUserAddDetail a
						inner join ZnodeUserAddress ZUA on a.UserId = ZUA.UserId
						inner  JOIN ZnodeAddress ZA on ZA.AddressId = zua.AddressId
					END

					set @Rows = @PageNo * @Rows

					SET @SQL = '			
						
						create table #AccountDetail
						(
							UserId int,AspNetuserId nvarchar(200),UserName nvarchar(200),FirstName varchar(200),MiddleName varchar(200),LastName varchar(200),
							PhoneNumber nvarchar(100),Email nvarchar(100),EmailOptIn bit,CreatedBy int,CreatedDate datetime,ModifiedBy int,ModifiedDate datetime,
							RoleId varchar(200),RoleName varchar(200), FullName  varchar(1000),
							StoreName varchar(200),CountryName varchar(200), CityName varchar(200), StateName varchar(200), PostalCode varchar(200), CompanyName varchar(200)
							,AccountId int,SalesRepUserName varchar(200),SalesRepFullName varchar(200) ,RowId int identity 
						) 
						'+
						+' insert into #AccountDetail(UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,FullName,
						StoreName, CountryName, CityName, StateName, PostalCode, CompanyName,AccountId)
						SELECT top '+cast(@Rows as varchar(10))+'UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,FullName,
						StoreName, CountryName, CityName, StateName, PostalCode, CompanyName,AccountId
						FROM ##View_CustomerUserAddDetail where 1=1'+
						dbo.Fn_GetWhereClause(case when @WhereClauseGlobal<>'' and @WhereClause1 <> '' then @WhereClauseGlobal+' And '+@WhereClause1 else @WhereClauseAll end, ' AND ')+
						dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC') + '
			
						Insert Into #TBL_RowCount 
						SELECT count(*)
						FROM ##View_CustomerUserAddDetail where 1=1'+
						dbo.Fn_GetWhereClause(case when @WhereClauseGlobal<>'' and @WhereClause1 <> '' then @WhereClauseGlobal+' And '+@WhereClause1 else @WhereClauseAll end, ' AND ')
						+'
						
						SELECT  UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,FullName,
						StoreName,AccountId,
						CountryName, CityName, StateName, PostalCode, CompanyName, SalesRepUserName, SalesRepFullName
						,Row_Number()Over('+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC')+')  RowNumber
						into ##CustomerUserAddDetail
						FROM #AccountDetail '+@PaginationWhereClause  +' '+ dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC');

						print @SQL
					EXEC (@SQL)

					Select @RowCount= isnull(RowsCount,0) from #TBL_RowCount

					ALTER TABLE ##CustomerUserAddDetail ADD AddressId Int

					------To get data for StoreName
						update  a set StoreName = CASE WHEN zp.StoreName IS NULL THEN 'ALL' ELSE zp.StoreName END 
						from ##CustomerUserAddDetail a
						Left join  ZnodeUserPortal up ON(up.UserId = a.UserId)  
						Left JOIN ZnodePortal zp ON (up.PortalId = zp.PortalId)

	
					----To get data for CountryName, CityName, StateName, PostalCode, CompanyName
					IF (EXISTS(SELECT * FROM @ColumnName where ([StringColumn] LIKE '%CountryName%' OR [StringColumn] LIKE '%CityName%' OR [StringColumn] LIKE '%StateName%' OR [StringColumn] LIKE '%PostalCode%' OR [StringColumn] LIKE '%CompanyName%'))
					OR (@WhereClauseAll like '%CountryName%' OR @WhereClauseAll like '%CityName%' OR @WhereClauseAll like '%StateName%' OR @WhereClauseAll like '%PostalCode%' OR @WhereClauseAll like '%CompanyName%'))
					BEGIN
			 
						update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
						PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName, a.AddressId = ZA.AddressId
						from ##CustomerUserAddDetail a
						inner join ZnodeAccountAddress ZAA on a.AccountId = ZAA.AccountId
						inner  JOIN ZnodeAddress ZA on ZA.AddressId = ZAA.AddressId
						where isnull(a.AccountId,0)<> 0-- is not null
	 
						update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
						PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName, a.AddressId = ZA.AddressId
						from ##CustomerUserAddDetail a
						inner join ZnodeUserAddress ZUA on a.UserId = ZUA.UserId
						inner  JOIN ZnodeAddress ZA on ZA.AddressId = zua.AddressId
					END

					
					----Updating SalesRep for user if any 
					update CUAD
					set CUAD.SalesRepUserName = ZU.UserName, 
					CUAD.SalesRepFullName = (ISNULL(RTRIM(LTRIM(ZU.FirstName)), '')+' '+ISNULL(RTRIM(LTRIM(ZU.MiddleName)), '')
					+CASE
					WHEN ISNULL(RTRIM(LTRIM(ZU.MiddleName)), '') = ''
					THEN ''
					ELSE ' '
					END+ISNULL(RTRIM(LTRIM(ZU.LastName)), '')) 
					from ##CustomerUserAddDetail CUAD
					inner join ZnodeSalesRepCustomerUserPortal SRCUP ON CUAD.UserId = SRCUP.CustomerUserid 
					inner join ZnodeUser ZU ON SRCUP.SalesRepUserId = ZU.UserId

					if ( exists(select * from ##UserList) OR @AddressColumnWhereClause <> '')
					begin
						SELECT UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,
						FullName,
						StoreName,
						CountryName, CityName, StateName, PostalCode, CompanyName, SalesRepUserName, SalesRepFullName
						from ##CustomerUserAddDetail CUAD
						where exists(select * from ##UserList UL where CUAD.UserId = UL.UserId and CUAD.AddressId = UL.AddressID )
						Order by RowNumber
					end
					else
					begin
						SELECT UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,
						FullName,
						StoreName,
						CountryName, CityName, StateName, PostalCode, CompanyName, SalesRepUserName, SalesRepFullName
						from ##CustomerUserAddDetail
						Order by RowNumber
					end
	
					if OBJECT_ID('tempdb..##CustomerUserAddDetail') is not null
					drop table ##CustomerUserAddDetail

					if OBJECT_ID('tempdb..##View_CustomerUserAddDetail') is not null
					drop table ##View_CustomerUserAddDetail
				
				END;
            ELSE
				BEGIN
					SELECT * FROM View_CustomerUserDetail AS VICUD WHERE 1 = 0;
					SET @RowCount = 0;
				END;
            END;			
         END TRY
         BEGIN CATCH
           --SELECT ERROR_MESSAGE()
		   DECLARE @ERROR_PROCEDURE VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_AdminUsers @RoleName = '+@RoleName+' ,@UserName='+@UserName+',@WhereClause='+cast(@WhereClause as varchar(max))+' ,@Rows= '+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_By='+@Order_By+',@RowCount='+CAST(@RowCount AS VARCHAR(50));
            EXEC Znode_InsertProcedureErrorLog
            @ProcedureName    = 'Znode_AdminUsers',
            @ErrorInProcedure = @ERROR_PROCEDURE,
            @ErrorMessage     = @ErrorMessage,
            @ErrorLine        = @ErrorLine,
            @ErrorCall        = @ErrorCall;
         END CATCH;


     END;
go
Update ZnodeCMSMessage set Message = replace(Message,'2020','2021')
where Message like '%copyright%' and Message like '%2020%'

Update ZnodeCMSMessage set Message = replace(Message,'2019','2021')
where Message like '%copyright%' and Message like '%2019%'
go
IF exists(select * from sys.procedures where name = 'Znode_PublishPortalEntity')
	drop proc Znode_PublishPortalEntity
go

CREATE PROCEDURE [dbo].[Znode_PublishPortalEntity]
(
   @PortalId  INT = 0 
  ,@LocaleId  INT = 0 
  ,@RevisionState varchar(50) = '' 
  ,@UserId int = 0
  ,@Status Bit =0 OUTPUT 
  ,@IsContentType Bit= 1
  ,@NewGUID nvarchar(500)  
)
AS
/*
  To publish all Contenet pages and their mapping into their respective entities 
	ZnodePublishContentPageConfigEntity
	ZnodePublishSEOEntity
	ZnodePublishWidgetProductEntity
	ZnodePublishMediaWidgetEntity
	ZnodePublishSearchWidgetEntity
	ZnodePublishTextWidgetEntity
	ZnodePublishWidgetSliderBannerEntity
	ZnodePublishWidgetTitleEntity

	Unit Testing : 
	Declare @Status bit 
	

	Declare @Status bit 
	Exec [dbo].[Znode_PublishPortalEntity]
     @PortalId  = 1 
	,@LocaleId  = 0 
	,@RevisionState = 'PRODUCTION' 
	,@UserId = 2
	,@Status = @Status 
	--Select @Status 


*/
BEGIN
BEGIN TRY 
SET NOCOUNT ON
	Declare @PortalCode Varchar(100)
	Declare @Type varchar(50) = '',	@CMSSEOCode varchar(300),@UserName Varchar(50);
	SET @Status = 1 
	Declare @IsPreviewEnable int,@PreviewVersionId INT = 0  ,@ProductionVersionId INT = 0
	
	Select TOP 1  @UserName = aspNetZnodeUser.UserName from ZnodeUser Inner Join aspNetUsers ON ZnodeUser.aspNetUserId = aspNetUsers.Id 
	Inner Join aspNetZnodeUser on aspNetUsers.UserName = aspNetZnodeUser.AspNetZnodeUserId
	where ZnodeUser.UserId = @userId
            


 		If Exists (SELECT  * from ZnodePublishStateApplicationTypeMapping PSA where PSA.IsEnabled =1 and  
		Exists (select TOP 1 1  from ZnodePublishState PS where PS.PublishStateId = PSA.PublishStateId ) and ApplicationType =  'WebstorePreview')
			SET @IsPreviewEnable = 1 
		else 
			SET @IsPreviewEnable = 0 

		--Genrate preview entry 
		DECLARE @SetLocaleId INT , @DefaultLocaleId INT = dbo.Fn_GetDefaultLocaleId(), @MaxCount INT =0 , @IncrementalId INT = 1  
		DECLARE @TBL_Locale TABLE (LocaleId INT , RowId INT IDENTITY(1,1))
		
		DECLARE @TBL_StoreEntity TABLE 
		(
			 PortalThemeId	int,PortalId	int,ThemeId	int,ThemeName	varchar(200),CSSId	int,CSSName	nvarchar(2000),
			 WebsiteLogo	varchar(300),WebsiteTitle	nvarchar(400),FaviconImage	varchar(300),WebsiteDescription	nvarchar(MAX),
			 PublishState	varchar(100),LocaleId	int	
		)
		
		IF object_id('tempdb..[#Tbl_VersionEntity]') IS NOT NULL
			drop table tempdb..#Tbl_VersionEntity
		Create Table #Tbl_VersionEntity(PortalId int , VersionId int , LocaleId int , PublishType varchar(50) )

		IF object_id('tempdb..[#Tbl_OldVersionEntity]') IS NOT NULL
			drop table tempdb..#Tbl_OldVersionEntity
		Create Table #Tbl_OldVersionEntity(PortalId int , NewVersionId int ,OldVersionId int , LocaleId int , PublishType varchar(50) )

	
		DECLARE @WebStoreEntityId int 
		
		select @PortalCode  = StoreName  from ZnodePortal where PortalId = @PortalId 
		
		INSERT INTO @TBL_Locale (LocaleId) SELECT LocaleId FROM ZnodeLocale WHERE IsActive =1 AND (LocaleId  = @LocaleId OR @LocaleId = 0 )
		
		---managed brand seo data
		delete ZCSDL from ZnodeCMSSEODetailLocale ZCSDL
		where exists(select *  from ZnodeCMSSEODetail ZCSD1
		where not exists(select * from ZnodeBrandDetails ZBD
		inner join ZnodePortalBrand ZPB ON ZBD.BrandId = ZPB.BrandId and ZCSD1.PortalId = ZPB.PortalId
		and ZBD.BrandCode = ZCSD1.SEOCode) and ZCSDL.CMSSEODetailId = ZCSD1.CMSSEODetailId
		and ZCSD1.CMSSEOTypeId = (select top 1 CMSSEOTypeId from ZnodeCMSSEOType where Name = 'Brand'))


		delete ZCSD1 from ZnodeCMSSEODetail ZCSD1
		where not exists(select * from ZnodeBrandDetails ZBD
		inner join ZnodePortalBrand ZPB ON ZBD.BrandId = ZPB.BrandId and ZCSD1.PortalId = ZPB.PortalId
		and ZBD.BrandCode = ZCSD1.SEOCode)
		and ZCSD1.CMSSEOTypeId = (select top 1 CMSSEOTypeId from ZnodeCMSSEOType where Name = 'Brand')

		insert into ZnodeCMSSEODetail(CMSSEOTypeId,SEOId,IsRedirect,MetaInformation,PortalId,SEOUrl,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
		,IsPublish,SEOCode,PublishStateId)
		select distinct (select top 1 CMSSEOTypeId from ZnodeCMSSEOType where Name = 'Brand'),null,null,null,ZPB.PortalId,isnull(ZBDL.SEOFriendlyPageName,ZBD.BrandCode),@userId,
		getdate(),@userId,getdate(),null,ZBD.BrandCode,3
		from ZnodeBrandDetails ZBD
		inner join ZnodePortalBrand ZPB ON ZBD.BrandId = ZPB.BrandId
		inner join ZnodeBrandDetailLocale ZBDL on ZBD.BrandId = ZBDL.BrandId
		where not exists(select * from ZnodeCMSSEODetail ZCSD1 where ZCSD1.CMSSEOTypeId = (select top 1 CMSSEOTypeId from ZnodeCMSSEOType where Name = 'Brand')
		and ZCSD1.PortalId = ZPB.PortalId
		and ZBD.BrandCode = ZCSD1.SEOCode) and ZPB.PortalId = @PortalId

		insert into ZnodeCMSSEODetailLocale(CMSSEODetailId,LocaleId,SEOTitle,SEODescription,SEOKeywords,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,CanonicalURL,RobotTag)
		select distinct ZCSD.CMSSEODetailId,L.LocaleId,ZBDL.BrandName,ZBDL.BrandName,ZBDL.BrandName,@userId,getdate(),@userId,getdate(),null,null
		from ZnodeCMSSEODetail ZCSD
		inner join ZnodeBrandDetails ZBD on ZCSD.SEOCode = ZBD.BrandCode
		inner join ZnodeBrandDetailLocale ZBDL on ZBD.BrandId = ZBDL.BrandId
		inner join ZnodePortalBrand ZPB ON ZBD.BrandId = ZPB.BrandId
		cross apply @TBL_Locale L
		where CMSSEOTypeId = (select top 1 CMSSEOTypeId from ZnodeCMSSEOType where Name = 'Brand')
		and not exists(select * from ZnodeCMSSEODetailLocale ZCSDL where ZCSDL.CMSSEODetailId = ZCSD.CMSSEODetailId)
		 ---managed brand seo data
		
		SET @MaxCount = ISNULL((SELECT MAx(RowId) FROM @TBL_Locale),0)
		WHILE @IncrementalId <= @MaxCount
		BEGIN 
			SET @SetLocaleId = (SELECT Top 1 LocaleId FROM @TBL_locale WHERE RowId = @IncrementalId)
			if (@IsPreviewEnable = 1 AND ( @RevisionState like '%Preview%'  OR @RevisionState like '%Production%' ) ) 
			Begin
				Insert into ZnodePublishPortalLog
				(PortalId,IsPortalPublished,UserId,LogDateTime,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,Tokem,PublishStateId)
				Select @PortalId ,1 , @UserId , Getdate(),@UserId ,Getdate() ,@UserId ,Getdate(), NULL, DBO.Fn_GetPublishStateIdForProcessing()
				
				insert into #Tbl_VersionEntity (PortalId,VersionId,LocaleId,PublishType)
				select @PortalId, @@Identity , @SetLocaleId ,'PREVIEW'
				
			End
			If (@RevisionState like '%Production%' OR @RevisionState = 'None')
			Begin
				--Genrate production entry 
				Insert into ZnodePublishPortalLog
				(PortalId,IsPortalPublished,UserId,LogDateTime,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,Tokem,PublishStateId)
				Select @PortalId ,1 , @UserId , Getdate(),@UserId ,Getdate() ,@UserId ,Getdate(), NULL, DBO.Fn_GetPublishStateIdForProcessing()
			
				insert into #Tbl_VersionEntity (PortalId,VersionId,LocaleId,PublishType)
				select @PortalId, @@Identity , @SetLocaleId ,'PRODUCTION'
			End 
	   	SET @IncrementalId = @IncrementalId +1 
		END 

	Truncate table ZnodePublishPortalErrorLogEntity

	Declare @IsFirstTimeContentPublish bit 
	If Exists (Select TOP 1 1  from ZnodePublishWebStoreEntity where PortalId = @PortalId)
		SET @IsFirstTimeContentPublish =1 
	else 
		SET @IsFirstTimeContentPublish =0
    
	Declare @Tbl_PreviewVersionId  TABLE (VersionId int , PortalId int , LocaleId int )
	Declare @Tbl_ProductionVersionId  TABLE (VersionId int , PortalId int , LocaleId int )

	If @IsContentType = 0 AND @IsFirstTimeContentPublish =1 
	Begin 
		Insert into #Tbl_OldVersionEntity (PortalId,NewVersionId,OldVersionId, LocaleId, PublishType)
		Select A.PortalId , A.VersionId, B.VersionId, a.LocaleId,a.PublishType from #Tbl_VersionEntity A Inner join ZnodePublishWebStoreEntity B on 
		A.PortalId = B.PortalId and A.LocaleId = B.LocaleId AND A.PublishType= B.PublishState  
	End
	Delete from ZnodePublishProgressNotifierEntity where JobName  = @PortalCode 
	
	INSERT INTO ZnodePublishProgressNotifierEntity
	(VersionId,JobId,JobName,ProgressMark,IsCompleted,IsFailed,ExceptionMessage,StartedBy,StartedByFriendlyName)
	Values(0,@NewGUID , Isnull(@PortalCode,'') + ' Store' , 0 , 0 , 0 , '' , @UserId, @UserName)

	if @Type = 'ZnodePublishWebStoreEntity' OR @Type = ''
	Begin
		 Declare  @PreviewVersionIdString varchar(1000)= ''  ,@ProductionVersionIdString varchar(1000) = '' 
		 SELECT   @PreviewVersionIdString = STUFF((SELECT ',' + cast (VersionId as varchar(50))  FROM #Tbl_VersionEntity   where PublishType = 'PREVIEW'  FOR XML PATH ('')), 1, 1, '') 
		 SELECT   @ProductionVersionIdString = STUFF((SELECT ',' + cast (VersionId as varchar(50))  FROM #Tbl_VersionEntity   where PublishType = 'PRODUCTION'  FOR XML PATH ('')), 1, 1, '') 
		 
		 EXEC [dbo].[Znode_SetPublishWebStoreEntity]
			 @PortalId  = @PortalId 
			,@LocaleId   = @LocaleId 
			,@IsPreviewEnable =@IsPreviewEnable 
			,@PreviewVersionId  = @PreviewVersionIdString 
			,@ProductionVersionId = @ProductionVersionIdString 
			,@RevisionState = @RevisionState 
			,@UserId = @UserId	
			,@Status = @Status Output 

			INSERT INTO ZnodePublishPortalErrorLogEntity
			(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
			SELECT 'ZnodePublishWebStoreEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
			@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

			Update ZnodePublishProgressNotifierEntity SET 
			ProgressMark =5 , 
			IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
			IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
			where  JobId = @NewGUID
	End
	
	if (@Type = 'ZnodePublishPortalBrandEntity' OR @Type = '' ) AND @Status = 1 
	Begin
			Exec [Znode_SetPublishPortalBrandEntity]
			 @PortalId  = @PortalId
			,@IsPreviewEnable =@IsPreviewEnable 
			,@PreviewVersionId  = 0 
			,@ProductionVersionId = 0
			,@RevisionState = @RevisionState 
			,@UserId = @UserId  
			,@Status = @Status Output 

			INSERT INTO ZnodePublishPortalErrorLogEntity
			(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
			SELECT 'ZnodePublishPortalBrandEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
			@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 
			
			Update ZnodePublishProgressNotifierEntity SET 
			ProgressMark = CASE When (@IsContentType = 1 OR (@IsFirstTimeContentPublish = 0 AND @IsContentType = 0 ) ) THEN 10 Else 100 End , 
			IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
			IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
			where  JobId = @NewGUID
	End 

	if (@Type = 'ZnodePublishSEOEntity' OR @Type = '') AND @Status = 1 and @IsContentType = 0
			Begin
					Exec [Znode_SetPublishSEOEntity]
					 @PortalId  = @PortalId
					,@LocaleId  = @LocaleId 
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = 0 
					,@ProductionVersionId = 0
					,@RevisionState = @RevisionState 
					,@CMSSEOTypeId = '4'
					,@CMSSEOCode = ''
					,@UserId = @UserId  
					,@Status = @Status Output 

			End 
	If (@IsContentType = 1 OR (@IsFirstTimeContentPublish = 0 AND @IsContentType = 0 ) ) AND @Status = 1  
	Begin
			if @Type = 'ZnodePublishBlogNewsEntity' OR @Type = '' 
			Begin
				 EXEC [dbo].[Znode_SetPublishBlogNewsEntity]
					 @PortalId  = @PortalId 
					,@LocaleId   = @LocaleId 
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = @PreviewVersionId 
					,@ProductionVersionId = @ProductionVersionId 
					,@RevisionState = @RevisionState 
					,@UserId = @UserId	
					,@Status = @Status Output 

					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishBlogNewsEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 15 , 
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID

			End
			if (@Type = 'ZnodePublishPortalCustomCssEntity' OR @Type = '' ) AND @Status = 1  
			Begin
				 EXEC [dbo].[Znode_SetPublishPortalCustomCssEntity]
					 @PortalId  = @PortalId 
					,@LocaleId   = @LocaleId 
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = @PreviewVersionId 
					,@ProductionVersionId = @ProductionVersionId 
					,@RevisionState = @RevisionState 
					,@UserId = @UserId	
					,@Status = @Status Output 

					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishPortalCustomCssEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 20  ,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID


			End
			if (@Type = 'ZnodePublishWidgetCategoryEntity' OR @Type = '' ) AND @Status = 1 
			Begin
				 EXEC [dbo].[Znode_SetPublishWidgetCategoryEntity]
					 @PortalId  = @PortalId 
					,@LocaleId   = @LocaleId 
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = @PreviewVersionId 
					,@ProductionVersionId = @ProductionVersionId 
					,@RevisionState = @RevisionState 
					,@UserId = @UserId	
					,@Status = @Status Output 

					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishWidgetCategoryEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 25  ,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID
			End
	
			if (@Type = 'ZnodePublishWidgetProductEntity' OR @Type = '') AND @Status = 1  
			Begin
					EXEC Znode_SetPublishWidgetProductEntity
					 @PortalId  = @PortalId
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = @PreviewVersionId 
					,@ProductionVersionId = @ProductionVersionId 
					,@RevisionState = @RevisionState 
					,@CMSMappingId = 0
					,@UserId = @UserId 
					,@Status = @Status  Output
			
					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishWidgetProductEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 30  ,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID
			END 

			if (@Type = 'ZnodePublishWidgetTitleEntity' OR @Type = '') AND @Status = 1  
			Begin
					EXEC Znode_SetPublishWidgetTitleEntity
					 @PortalId  = @PortalId
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = @PreviewVersionId 
					,@ProductionVersionId = @ProductionVersionId 
					,@RevisionState = @RevisionState 
					,@CMSContentPagesId = 0
					,@UserId = @UserId 
					,@Status = @Status  Output

					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishWidgetTitleEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 35  ,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID

			END 
			if (@Type = 'ZnodePublishWidgetSliderBannerEntity' OR @Type = '')AND @Status = 1  
			Begin
					EXEC Znode_SetPublishWidgetSliderBannerEntity
					 @PortalId  = @PortalId
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = @PreviewVersionId 
					,@ProductionVersionId = @ProductionVersionId 
					,@RevisionState = @RevisionState 
					,@CMSContentPagesId = 0
					,@CMSSliderId = 0 
					,@UserId = @UserId 
					,@Status = @Status  Output
			
					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishWidgetSliderBannerEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 
					
					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 40  ,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID			
			END 
			if (@Type = 'ZnodePublishTextWidgetEntity' OR @Type = '' ) AND @Status = 1  
			Begin
					EXEC Znode_SetPublishTextWidgetEntity
					 @PortalId  = @PortalId
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = @PreviewVersionId 
					,@ProductionVersionId = @ProductionVersionId 
					,@RevisionState = @RevisionState 
					,@CMSMappingId = 0
					,@UserId = @UserId 
					,@Status = @Status  Output
			
					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishTextWidgetEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 45  ,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID			

			END 
			if (@Type = 'ZnodeSetPublishMediaWidgetEntity' OR @Type = '') AND @Status = 1
			Begin
					EXEC Znode_SetPublishMediaWidgetEntity
					 @PortalId  = @PortalId
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = @PreviewVersionId 
					,@ProductionVersionId = @ProductionVersionId 
					,@RevisionState = @RevisionState 
					,@CMSMappingId = 0
					,@UserId = @UserId 
					,@Status = @Status  Output
			
					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishMediaWidgetEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 
										
					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 50  ,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID			
			END 
			if (@Type = 'ZnodePublishSearchWidgetEntity' OR @Type = '') AND @Status = 1
			Begin
					EXEC Znode_SetPublishSearchWidgetEntity
					 @PortalId  = @PortalId
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = @PreviewVersionId 
					,@ProductionVersionId = @ProductionVersionId 
					,@RevisionState = @RevisionState 
					,@CMSMappingId = 0
					,@UserId = @UserId 
					,@Status = @Status  Output
			
					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishSearchWidgetEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 
					
					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 55  ,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID			
			END 

			if (@Type = 'ZnodePublishContentPageConfigEntity' OR @Type = '') AND @Status = 1
			Begin
				 EXEC [dbo].[Znode_SetPublishContentPageConfigEntity]
					 @PortalId  = @PortalId 
					,@LocaleId   = @LocaleId 
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = @PreviewVersionId 
					,@ProductionVersionId = @ProductionVersionId 
					,@RevisionState = @RevisionState 
					,@CMSContentPagesId = 0
					,@UserId = @UserId	
					,@Status = @Status Output 

					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishContentPageConfigEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 
					
					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 60,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID			
			End

			if (@Type = 'ZnodePublishSEOEntity' OR @Type = '') AND @Status = 1
			Begin
					Exec [Znode_SetPublishSEOEntity]
					 @PortalId  = @PortalId
					,@LocaleId  = @LocaleId 
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = 0 
					,@ProductionVersionId = 0
					,@RevisionState = @RevisionState 
					,@CMSSEOTypeId = '3,5'
					,@CMSSEOCode = ''
					,@UserId = @UserId  
					,@Status = @Status Output 

					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishSEOEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

					
					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 60,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID			

			End 
			if (@Type = 'ZnodePublishMessageEntity' OR @Type = '') AND @Status = 1
			Begin
					Exec [Znode_SetPublishMessageEntity]
					 @PortalId  = @PortalId
					,@LocaleId  = @LocaleId 
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = 0 
					,@ProductionVersionId = 0
					,@RevisionState = @RevisionState 
					,@UserId = @UserId  
					,@Status = @Status Output 

					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishMessageEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 65,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID			

			End 

		   if (@Type = 'ZnodePublishPortalGlobalAttributeEntity' OR @Type = '') AND @Status = 1
			Begin
					Exec [Znode_SetPublishPortalGlobalAttributeEntity]
					 @PortalId  = @PortalId
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = 0 
					,@ProductionVersionId = 0
					,@RevisionState = @RevisionState 
					,@UserId = @UserId  
					,@Status = @Status Output 

					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishPortalGlobalAttributeEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 
					
					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 67,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID			

			End 
 
		   if (@Type = 'ZnodePublishProductPageEntity' OR @Type = '') AND @Status = 1
			Begin
					Exec [Znode_SetPublishProductPageEntity]
					 @PortalId  = @PortalId
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = 0 
					,@ProductionVersionId = 0
					,@RevisionState = @RevisionState 
					,@UserId = @UserId  
					,@Status = @Status Output 

					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishProductPageEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 73,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID			


			End 
			
			if (@Type = 'ZnodePublishWidgetBrandEntity' OR @Type = '') AND @Status = 1
			Begin
					Exec [Znode_SetPublishWidgetBrandEntity]
					 @PortalId  = @PortalId
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = 0 
					,@ProductionVersionId = 0
					,@RevisionState = @RevisionState 
					,@UserId = @UserId  
					,@Status = @Status Output 

					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishWidgetBrandEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 80,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID			

			End 
	End
		IF Exists (select TOP 1 1  from ZnodePublishPortalErrorLogEntity where  ProcessStatus = 'Fail') 
		Begin
			SET @Status  =0 
			SELECT 1 AS ID,@Status AS Status;
			INSERT INTO ZnodePublishPortalErrorLogEntity
			(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
			SELECT 'ZnodePublishPortalEntity', @RevisionState , 'Fail' , Getdate(), 
			@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 
			Update ZnodePublishPortalLog SET PublishStateId = DBO.Fn_GetPublishStateIdForPublishFailed()  where  PublishPortalLogId in  (Select VersionId from #Tbl_VersionEntity Where PublishType = 'PREVIEW' )
			Update ZnodePublishPortalLog SET PublishStateId = DBO.Fn_GetPublishStateIdForPublishFailed()  where  PublishPortalLogId in (Select VersionId from #Tbl_VersionEntity Where PublishType = 'PRODUCTION' )

			Delete  From ZnodePublishWebStoreEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId
			Delete  From ZnodePublishBlogNewsEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishPortalCustomCssEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishWidgetCategoryEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishWidgetProductEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishWidgetTitleEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishWidgetSliderBannerEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishTextWidgetEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishMediaWidgetEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishSearchWidgetEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishContentPageConfigEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishSEOEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId and CMSSEOTypeId in (3,5)
			Delete  From ZnodePublishMessageEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishPortalGlobalAttributeEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishPortalBrandEntity Where  VersionId  in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishProductPageEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishWidgetBrandEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
		End
	Else 
		Begin
			Update ZnodePublishPortalLog SET PublishStateId = DBO.Fn_GetPublishStateIdForPreview()  where  PublishPortalLogId in 
			(Select VersionId from #Tbl_VersionEntity Where PublishType = 'PREVIEW' )
			Update ZnodePublishPortalLog SET PublishStateId = DBO.Fn_GetPublishStateIdForPublish()  where  PublishPortalLogId in
			(Select VersionId from #Tbl_VersionEntity Where PublishType = 'PRODUCTION' )
			 
			Insert into ZnodePublishPreviewLogEntity
			(VersionId,PublishStartTime,IsDisposed,SourcePublishState,EntityId,EntityType,LogMessage,LogCreatedDate,PreviousVersionId,LocaleId,LocaleDisplayValue)
				Select A.VersionId,NULL,NULL,A.PublishType,@PortalId,'portal','portal has been published successfully' , Getdate(),  
				(select TOP 1 VersionId   from ZnodePublishWebStoreEntity where LocaleId = A.LocaleId AND PublishState = A.PublishType
				 and PortalId = @PortalId),A.LocaleId,B.Name
				from #Tbl_VersionEntity  A  Inner join ZnodeLocale B on A.LocaleId = B.LocaleId

			If @RevisionState = 'PREVIEW'
			Begin
				update ZnodeCMSContentPages SET  IsPublished = 1 , PublishStateId  = DBO.Fn_GetPublishStateIdForPreview() where (PortalId = @PortalId OR @PortalId  =0 ) 
				update ZnodeCMSSEODEtail SET  IsPublish = 1 , PublishStateId  = DBO.Fn_GetPublishStateIdForPreview() where 
				(PortalId = @PortalId OR @PortalId  =0 )  AND CMSSEOTypeId = 3 
			End 
			Else 
			Begin
				update ZnodeCMSContentPages SET  IsPublished = 1 , PublishStateId  = DBO.Fn_GetPublishStateIdForPublish() where (PortalId = @PortalId OR @PortalId  =0 ) 
				update ZnodeCMSSEODEtail SET  IsPublish = 1 , PublishStateId  = DBO.Fn_GetPublishStateIdForPublish() where 
				(PortalId = @PortalId OR @PortalId  =0 )  AND CMSSEOTypeId = 3 
			End
			
			if (@IsContentType =1  OR (@IsContentType = 0 AND @IsFirstTimeContentPublish =0))
			Begin
				If @IsPreviewEnable = 1 AND (@RevisionState like '%Preview%'  OR @RevisionState like '%Production%'  ) 
				Begin
					Delete  From ZnodePublishWebStoreEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishBlogNewsEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishPortalCustomCssEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishWidgetCategoryEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishWidgetProductEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishWidgetTitleEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishWidgetSliderBannerEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishTextWidgetEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishMediaWidgetEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishSearchWidgetEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishContentPageConfigEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishSEOEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId) And CMSSEOTypeId in (3,5) 
					Delete  From ZnodePublishMessageEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishPortalGlobalAttributeEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishPortalBrandEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishProductPageEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishWidgetBrandEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
				End
				If (@RevisionState like '%Production%' OR @RevisionState = 'None')
				Begin
					Delete  From ZnodePublishWebStoreEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishBlogNewsEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishPortalCustomCssEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishWidgetCategoryEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishWidgetProductEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishWidgetTitleEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishWidgetSliderBannerEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishTextWidgetEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishMediaWidgetEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishSearchWidgetEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishContentPageConfigEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishSEOEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId) And CMSSEOTypeId in (3,5) 
					Delete  From ZnodePublishMessageEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishPortalGlobalAttributeEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishPortalBrandEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishProductPageEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishWidgetBrandEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
				End
			End
			Else 
			Begin
				
				If @IsPreviewEnable = 1 AND (@RevisionState like '%Preview%'  OR @RevisionState like '%Production%'  ) 
				Begin
					Delete  From ZnodePublishWebStoreEntity           Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Delete  From ZnodePublishPortalBrandEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
				
					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishBlogNewsEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishPortalCustomCssEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					
					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishWidgetCategoryEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishWidgetProductEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishWidgetTitleEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishWidgetSliderBannerEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishTextWidgetEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishMediaWidgetEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishSearchWidgetEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId =6)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishContentPageConfigEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishSEOEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					And CMSSEOTypeId in (3,5) 

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishMessageEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishPortalGlobalAttributeEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishProductPageEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishWidgetBrandEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
				End
				If (@RevisionState like '%Production%' OR @RevisionState = 'None')
				Begin
					Delete  From ZnodePublishWebStoreEntity           Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Delete  From ZnodePublishPortalBrandEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
				
					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishBlogNewsEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishPortalCustomCssEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					
					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishWidgetCategoryEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishWidgetProductEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishWidgetTitleEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishWidgetSliderBannerEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishTextWidgetEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishMediaWidgetEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishSearchWidgetEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishContentPageConfigEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishSEOEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					And CMSSEOTypeId in (3,5)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishMessageEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishPortalGlobalAttributeEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishProductPageEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishWidgetBrandEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
				End 
			End

			--update ZnodeCMSContentPages SET  IsPublished = 1 , PublishStateId  = DBO.Fn_GetPublishStateIdForPublish() where @CMSContentPagesId = CMSContentPagesId and  (PortalId = @PortalId OR @PortalId  =0 ) 
			--update ZnodeCMSSEODEtail SET  IsPublish = 1 , PublishStateId  = DBO.Fn_GetPublishStateIdForPublish() where 
			--SEOCode = @CMSSEOCode and  (PortalId = @PortalId OR @PortalId  =0 )  AND CMSSEOTypeId = 3 
		 SET @Status = 1
		End
	SELECT 1 AS ID,@Status AS Status;   

END TRY 
BEGIN CATCH 
	SET @Status =0  
	 SELECT 1 AS ID,@Status AS Status;   

	 DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
		@ErrorLine VARCHAR(100)= ERROR_LINE(),
		@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_PublishPortalEntity 
		@PortalId = '+CAST(@PortalId AS VARCHAR	(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10))
		+',@PreviewVersionId = ' + CAST(@PreviewVersionId  AS varchar(20))
		+',@ProductionVersionId = ' + CAST(@ProductionVersionId  AS varchar(20))
		+',@RevisionState = ''' + CAST(@RevisionState  AS varchar(50))
		+',@UserId = ' + CAST(@UserId AS varchar(20));	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
	
			
	INSERT INTO ZnodePublishPortalErrorLogEntity
	(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
	SELECT 'ZnodePublishPortalEntity', @RevisionState + isnull(@ErrorMessage,'') , 'Fail' , Getdate(), 
	@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

		                			 
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_PublishPortalEntity',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
END CATCH
END
go
 update ZnodeEmailTemplateLocale set Content = REPLACE(Content,'2019','2021')
where Content  like '%2019%' and Content  like '%copyright%' 

 update ZnodeEmailTemplateLocale set Content = REPLACE(Content,'2020','2021')
where Content  like '%2020%' and Content  like '%copyright%' 
go
IF exists(select * from sys.procedures where name = 'Znode_AdminUsers')
	drop proc Znode_AdminUsers
go

CREATE PROCEDURE [dbo].[Znode_AdminUsers]
(	@RoleName		VARCHAR(200),
    @UserName		VARCHAR(200),
    @WhereClause	XML,
    @Rows			INT           = 100,
    @PageNo			INT           = 1,
    @Order_By		VARCHAR(1000) = '',
    @RowCount		INT        = 0 OUT,
	@IsCallOnSite   BIT = 0 ,
	@PortalId		VARCHAR(1000) = 0,
	@IsGuestUser    BIT = 0,
	@ColumnName     dbo.SelectColumnList ReadOnly
)
AS
   /* 
      Summary: List of users with detsils and shows link with ASPNet tables 
      This procedure is used for finding both users and admin users 
      here use three view "View_RoleUsers" for check  @UserName is present or not 
      "View_AdminUserDetail"  this view use for admin users 
      "View_CustomerUserDetail" Use for customer users 
      Unit Testing   
	  SELECT * FROM ZnodeUser 
      DECLARE @EDE INT=0  EXEC Znode_AdminUsers '','admin@znode.com',@WhereClause='',@Order_By='',@PageNo= 1 ,@Rows= 214,@IsCallOnSite='false',@PortalId=0,@RowCount=@EDE OUT  SELECT @EDE
   */
     BEGIN
         BEGIN TRY
            SET NOCOUNT ON;
			
            DECLARE @SQL NVARCHAR(MAX)= '', @PaginationWhereClause VARCHAR(300)= dbo.Fn_GetRowsForPagination(@PageNo, @Rows, ' WHERE RowId');
            
			if OBJECT_ID('tempdb..##CustomerUserAddDetail') is not null
				drop table ##CustomerUserAddDetail

			if OBJECT_ID('tempdb..##View_CustomerUserAddDetail') is not null
				drop table ##View_CustomerUserAddDetail

			IF OBJECT_ID('tempdb..#TBL_RowCount') is not null
				DROP TABLE #TBL_RowCount
			Create table #TBL_RowCount(RowsCount int )
			-----Split where clause XMl 
			CREATE TABLE #WhereColumnList(RowId Int identity, filterName varchar(max), WhereCondition varchar(max))
			insert into #WhereColumnList(filterName,WhereCondition)
			SELECT 
					Tbl.Col.value('key[1]', 'varchar(max)') as filterName,
					Tbl.Col.value('condition[1]', 'varchar(max)') WhereCondition
			FROM   @WhereClause.nodes('//filter') Tbl(Col) 
			----Address column in global search
			declare @AddressGlobalSearch varchar(1000) =''
			declare @GlobalSearch varchar(100) = ''
			
			select @GlobalSearch = substring(WhereCondition,charindex(' like ',WhereCondition), charindex(' OR ',WhereCondition)-charindex(' like ',WhereCondition)) 
			from #WhereColumnList
			where filtername like '%|%'
			and filtername <> ''
			and filterName in ('CityName','CountryName','PostalCode','StateName','CompanyName') 

			

			if isnull(@GlobalSearch,'') <> ''
			begin
				select @AddressGlobalSearch = '('+'CityName '+ @GlobalSearch+' OR '+'CountryName '+ @GlobalSearch+' OR '+'PostalCode '+ @GlobalSearch+' OR '+'StateName '+ @GlobalSearch+' OR '+'CompanyName '+ @GlobalSearch+')'
			end
			else
			begin
				SET @AddressGlobalSearch = ''
			end
			----Global search where clause
			declare @WhereClauseGlobal varchar(1000)=''
			select @WhereClauseGlobal = ISNULL(WhereCondition,'')
			from #WhereColumnList
			where filtername like '%|%'
			and filtername <> ''
			
			----Where clause columns except Address columns
			declare @WhereClause1 varchar(max) = ''
			select @WhereClause1 = COALESCE(@WhereClause1 + '', '') + WhereCondition+' And '
			--case when @WhereClause1 <> ''  then ' And ' else '' end
			from #WhereColumnList a
			where filterName not like '%|%' and
			filterName not in ('CountryName','CityName','StateName','PostalCode','CompanyName')
			and filtername <> ''

			if @WhereClause1 <> ''
			begin
				set @WhereClause1=isnull(substring(@WhereClause1,1,len(@WhereClause1)-3),'')
			end
			else
			begin
				set @WhereClause1 = ''
			end

			----Where clause columns
			declare @AddressColumnWhereClause varchar(max) 
			select @AddressColumnWhereClause = COALESCE(@AddressColumnWhereClause + '', '') + WhereCondition+' And '
			from #WhereColumnList a
			where filterName not like '%|%' and
			filterName in ('CountryName','CityName','StateName','PostalCode','CompanyName')
			and filtername <> ''
			
			if isnull(@AddressColumnWhereClause,'') <> ''
			begin
				set @AddressColumnWhereClause=isnull(substring(@AddressColumnWhereClause,1,len(@AddressColumnWhereClause)-3),'')
            end
			else
			begin
				set @AddressColumnWhereClause = ''
			end

			declare @WhereClauseAll varchar(max) = ''
			select @WhereClauseAll = COALESCE(@WhereClauseAll + '', '') + WhereCondition+' And '
			from #WhereColumnList a
			

			set @WhereClauseAll=isnull(CASE WHEN @WhereClauseAll = '' THEN '' ELSE substring(@WhereClauseAll,1,len(@WhereClauseAll)-3) END ,'')
			-------------- 
			
			IF @PortalId  <> '0' 
			BEGIN 
			    SET @WhereClauseAll = CASE WHEN  @WhereClauseAll = '' THEN ' (PortalId IN ('+@PortalId+') OR PortalId IS NULL) ' ELSE @WhereClauseAll+' AND (PortalId IN ('+@PortalId+') OR PortalId IS NULL) ' END 

				SET @WhereClause1 = CASE WHEN  @WhereClause1 = '' THEN ' (isnull(PortalId,0) IN ('+@PortalId+') OR PortalId IS NULL) ' ELSE @WhereClause1+' AND (isnull(PortalId,0) IN ('+@PortalId+') OR PortalId IS NULL) ' END 
			
			END 

			IF EXISTS ( SELECT TOP 1 1 FROM View_RoleUsers  WHERE Username = @UserName   )  AND @RoleName <> ''  
			-- this check for admin user
       		BEGIN
				SET @SQL = ' SELECT  A.UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,A.CreatedBy,A.CreatedDate,A.ModifiedBy,A.ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId ,CustomerPaymentGUID
				INTO #Cte_AdminUserDetail
				FROM View_AdminUserDetail A
				'+CASE WHEN @PortalId  <> '0' THEN ' INNER JOIN ZnodeUserPortal ZUP ON (ZUP.UserId = A.UserId) 'ELSE '' END  +'	 
				'+dbo.Fn_GetWhereClause(@WhereClauseAll, ' WHERE ')+'
				
				;with Cte_AdminUserDetailRowId AS 
				(
				SELECT UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId,CustomerPaymentGUID ,RANK()Over('+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC')+',UserId DESC) RowId
				FROM  #Cte_AdminUserDetail
				)
					 
				SELECT UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId,CustomerPaymentGUID ,RowId 
				INTO #AccountDetails
				FROM Cte_AdminUserDetailRowId 
					 
				SET @Count= ISNULL((SELECT  Count(1) FROM #AccountDetails ),0)
					 
				SELECT DISTINCT UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId ,CustomerPaymentGUID
				FROM #AccountDetails '+@PaginationWhereClause+' '+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC' );
				EXEC SP_executesql
				@SQL,
				N'@Count INT OUT',
				@Count = @RowCount OUT;

				
			END;
			-- For Customer user
            ELSE   
			BEGIN
				IF @roleName = ''
				BEGIN
					if OBJECT_ID('tempdb..##CustomerUserAddDetail') is not null
					drop table ##CustomerUserAddDetail

					if OBJECT_ID('tempdb..##View_CustomerUserAddDetail') is not null
					drop table ##View_CustomerUserAddDetail
				
					if OBJECT_ID('tempdb..##UserList') is not null
					drop table ##UserList

					CREATE TABLE ##UserList(UserId int,AddressID int)

					declare @UserList varchar(1000)=''

					------To get the list of user having adress column in global search
					if (@AddressGlobalSearch <> '')
					begin
				
					set @UserList = 'select a.UserId, b.AddressID	from ZnodeUserAddress a	inner join ZnodeAddress b on a.AddressId = b.AddressId	where '+@AddressGlobalSearch
					--print @UserList
					insert into ##UserList(UserId, b.AddressID)
					exec (@UserList)
			
					end
					----To get the list of user having adress column in where clause 
					if (@AddressColumnWhereClause <> '')
					begin
					
					set @UserList = 'select a.UserId, b.AddressID	from ZnodeUserAddress a	inner join ZnodeAddress b on a.AddressId = b.AddressId	where '+@AddressColumnWhereClause
					--print @UserList
					insert into ##UserList(UserId,AddressID)
					exec (@UserList)
					
					end

					If @IsGuestUser= 0 
					AND
					NOT Exists (Select filterName from #WhereColumnList where filterName in ('accountid','isaccountcustomer','UserId') and filtername <> '')
					-- Customer List with GuestUsers
					Begin
						SET @SQL = 
							'SELECT a.userId,a.AspNetuserId,a.UserName,a.FirstName,a.MiddleName,a.LastName
							,a.PhoneNumber,
							 a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
							 CONVERT( DATE, a.ModifiedDate) ModifiedDate, 0 RoleId,''''  RoleName,
							 (ISNULL(RTRIM(LTRIM(a.FirstName)), '''')+'' ''+ISNULL(RTRIM(LTRIM(a.MiddleName)), '''')+CASE
							 WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '''') = ''''	THEN ''''
							 ELSE '' ''	END+ISNULL(RTRIM(LTRIM(a.LastName)), ''''))  FullName
							 ,a.AccountId, '''' TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser
							 into ##View_CustomerUserAddDetail
							 FROM ZnodeUser a
							 Where a.AspNetUserId IS NOT NULL
							' 
						
						
						EXEC (@SQL)
					End	
					Else If @IsGuestUser= 1 
					Begin
							SET @SQL='SELECT a.userId,a.AspNetuserId,a.UserName,a.FirstName,a.MiddleName,a.LastName
							,a.PhoneNumber,
							a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
							CONVERT( DATE, a.ModifiedDate) ModifiedDate,ur.RoleId,r.Name RoleName,
							(ISNULL(RTRIM(LTRIM(a.FirstName)), '''')+'' ''+ISNULL(RTRIM(LTRIM(a.MiddleName)), '''')+CASE
							WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '''') = '''' THEN '''' ELSE '' '' END+ISNULL(RTRIM(LTRIM(a.LastName)), '''')) FullName,
							a.AccountId,r.TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser
							into ##View_CustomerUserAddDetail
							FROM ZnodeUser a
							LEFT JOIN AspNetUserRoles ur ON(ur.UserId = a.AspNetUserId)
							LEFT JOIN AspNetRoles r ON(r.Id = ur.RoleId)                       
							LEFT JOIN ZnodePortalAccount ZPA ON(ZPA.AccountId = a.AccountId) 
							WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeUSer ZUQ WHERE ZUQ.UserId = a.UserId AND ZUQ.EmailOptIn = 1 AND ZUQ.AspNetUserId IS NULL )
							AND a.AspNetuserId is null'
						EXEC (@SQL)
					End
					Else IF Exists (Select filterName from #WhereColumnList where filterName in ('UserId') and filtername <> '')
					and  @IsGuestUser= 0   
					-- Customer List for user edit single user 
					Begin
					SET @SQL='SELECT a.userId,a.AspNetuserId,a.UserName,a.FirstName,a.MiddleName,a.LastName
					,a.PhoneNumber, a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
							CONVERT( DATE, a.ModifiedDate) ModifiedDate,ur.RoleId,r.Name RoleName,
							(ISNULL(RTRIM(LTRIM(a.FirstName)), '''')+'' ''+ISNULL(RTRIM(LTRIM(a.MiddleName)), '''')+CASE
							WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '''') = '''' THEN '''' ELSE '' '' END+ISNULL(RTRIM(LTRIM(a.LastName)), '''')) FullName,
							a.AccountId, r.TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser
							into ##View_CustomerUserAddDetail
							FROM ZnodeUser a
							LEFT JOIN ZnodeAccount e ON(e.AccountId = a.AccountId)
							LEFT JOIN AspNetUserRoles ur ON(ur.UserId = a.AspNetUserId)
							LEFT JOIN AspNetRoles r ON(r.Id = ur.RoleId)                       
							LEFT JOIN ZnodePortalAccount ZPA ON(ZPA.AccountId = a.AccountId) 
							WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeUSer ZUQ WHERE ZUQ.UserId = a.UserId AND ZUQ.EmailOptIn = 1 AND ZUQ.AspNetUserId IS NULL )'
						print @SQL
						
						EXEC (@SQL)
					End	
					Else -- Account user List 
					Begin
							SELECT a.userId,a.AspNetuserId,a.UserName,a.PhoneNumber,a.FirstName,a.MiddleName,a.LastName
							,a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
							CONVERT( DATE, a.ModifiedDate) ModifiedDate,ur.RoleId,r.Name RoleName,
						    (ISNULL(RTRIM(LTRIM(a.FirstName)), '')+' '+ISNULL(RTRIM(LTRIM(a.MiddleName)), '')+CASE
							WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '') = '' THEN '' ELSE ' ' END+ISNULL(RTRIM(LTRIM(a.LastName)), '')) FullName,
							a.AccountId, r.TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser
							into ##View_CustomerUserAddDetail
							FROM ZnodeUser a
							LEFT JOIN ZnodeAccount e ON(e.AccountId = a.AccountId)
							LEFT JOIN AspNetUserRoles ur ON(ur.UserId = a.AspNetUserId)
							LEFT JOIN AspNetRoles r ON(r.Id = ur.RoleId)                       
							LEFT JOIN ZnodePortalAccount ZPA ON(ZPA.AccountId = a.AccountId) 
							WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeUSer ZUQ WHERE ZUQ.UserId = a.UserId AND ZUQ.EmailOptIn = 1 AND ZUQ.AspNetUserId IS NULL )
					End
					
					alter table ##View_CustomerUserAddDetail 
					add StoreName varchar(1000), CountryName varchar(1000),CityName varchar(1000),StateName varchar(1000),
					PostalCode varchar(1000), CompanyName varchar(1000), SalesRepUserName varchar(600),SalesRepFullName varchar(1000), PortalId INT 

					IF @PortalId <> '0' 
					BEGIN 
					   UPDATE a SET a.PortalId = b.PortalId
					   FROM ##View_CustomerUserAddDetail a 
					   INNER JOIN ZnodeUserPortal b ON (b.Userid = a.Userid )
					END 

					IF (@WhereClauseAll like '%StoreName%' or @Order_By like '%StoreName%' )
					BEGIN
						CREATE NONCLUSTERED INDEX ##View_CustomerUserAddDetail_UserId
					   ON [dbo].[##View_CustomerUserAddDetail] ([userId])

						update  a set StoreName = CASE WHEN zp.StoreName IS NULL THEN 'ALL' ELSE zp.StoreName END 
						             -- , PortalId = up.PortalId
						from ##View_CustomerUserAddDetail a
						Left join  ZnodeUserPortal up ON(up.UserId = a.UserId)  
						Left JOIN ZnodePortal zp ON (up.PortalId = zp.PortalId)
							
					END
					
					IF (@WhereClauseAll like '%CountryName%' OR @WhereClauseAll like '%CityName%' OR @WhereClauseAll like '%StateName%' OR @WhereClauseAll like '%PostalCode%' OR @WhereClauseAll like '%CompanyName%')
					BEGIN
			 
						update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
						PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName
						from ##View_CustomerUserAddDetail a
						inner join ZnodeAccountAddress ZAA on a.AccountId = ZAA.AccountId
						inner  JOIN ZnodeAddress ZA on ZA.AddressId = ZAA.AddressId
						where isnull(a.AccountId,0)<> 0-- is not null
	 
						update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
						PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName
						from ##View_CustomerUserAddDetail a
						inner join ZnodeUserAddress ZUA on a.UserId = ZUA.UserId
						inner  JOIN ZnodeAddress ZA on ZA.AddressId = zua.AddressId
					END

					set @Rows = @PageNo * @Rows

					SET @SQL = '			
						
						create table #AccountDetail
						(
							UserId int,AspNetuserId nvarchar(200),UserName nvarchar(200),FirstName varchar(200),MiddleName varchar(200),LastName varchar(200),
							PhoneNumber nvarchar(100),Email nvarchar(100),EmailOptIn bit,CreatedBy int,CreatedDate datetime,ModifiedBy int,ModifiedDate datetime,
							RoleId varchar(200),RoleName varchar(200), FullName  varchar(1000),
							StoreName varchar(200),CountryName varchar(200), CityName varchar(200), StateName varchar(200), PostalCode varchar(200), CompanyName varchar(200)
							,AccountId int,SalesRepUserName varchar(200),SalesRepFullName varchar(200) ,RowId int identity 
						) 
						'+
						+' insert into #AccountDetail(UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,FullName,
						StoreName, CountryName, CityName, StateName, PostalCode, CompanyName,AccountId)
						SELECT top '+cast(@Rows as varchar(10))+'UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,FullName,
						StoreName, CountryName, CityName, StateName, PostalCode, CompanyName,AccountId
						FROM ##View_CustomerUserAddDetail where 1=1'+
						dbo.Fn_GetWhereClause(case when @WhereClauseGlobal<>'' and @WhereClause1 <> '' then  @WhereClauseGlobal+' And '+@WhereClause1 else @WhereClauseAll end, ' AND ')+
						dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC') + '
			
						Insert Into #TBL_RowCount 
						SELECT count(*)
						FROM ##View_CustomerUserAddDetail where 1=1'+
						dbo.Fn_GetWhereClause(case when @WhereClauseGlobal<>'' and @WhereClause1 <> '' then @WhereClauseGlobal+' And '+@WhereClause1 else @WhereClauseAll end, ' AND ')
						+'
						
						SELECT  UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,FullName,
						StoreName,AccountId,
						CountryName, CityName, StateName, PostalCode, CompanyName, SalesRepUserName, SalesRepFullName
						,Row_Number()Over('+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC')+')  RowNumber
						into ##CustomerUserAddDetail
						FROM #AccountDetail '+@PaginationWhereClause  +' '+ dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC');

						print @SQL
					EXEC (@SQL)

					Select @RowCount= isnull(RowsCount,0) from #TBL_RowCount

					ALTER TABLE ##CustomerUserAddDetail ADD AddressId Int

					------To get data for StoreName
						update  a set StoreName = CASE WHEN zp.StoreName IS NULL THEN 'ALL' ELSE zp.StoreName END 
						from ##CustomerUserAddDetail a
						Left join  ZnodeUserPortal up ON(up.UserId = a.UserId)  
						Left JOIN ZnodePortal zp ON (up.PortalId = zp.PortalId)

	
					----To get data for CountryName, CityName, StateName, PostalCode, CompanyName
					IF (EXISTS(SELECT * FROM @ColumnName where ([StringColumn] LIKE '%CountryName%' OR [StringColumn] LIKE '%CityName%' OR [StringColumn] LIKE '%StateName%' OR [StringColumn] LIKE '%PostalCode%' OR [StringColumn] LIKE '%CompanyName%'))
					OR (@WhereClauseAll like '%CountryName%' OR @WhereClauseAll like '%CityName%' OR @WhereClauseAll like '%StateName%' OR @WhereClauseAll like '%PostalCode%' OR @WhereClauseAll like '%CompanyName%'))
					BEGIN
			 
						update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
						PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName, a.AddressId = ZA.AddressId
						from ##CustomerUserAddDetail a
						inner join ZnodeAccountAddress ZAA on a.AccountId = ZAA.AccountId
						inner  JOIN ZnodeAddress ZA on ZA.AddressId = ZAA.AddressId
						where isnull(a.AccountId,0)<> 0-- is not null
	 
						update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
						PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName, a.AddressId = ZA.AddressId
						from ##CustomerUserAddDetail a
						inner join ZnodeUserAddress ZUA on a.UserId = ZUA.UserId
						inner  JOIN ZnodeAddress ZA on ZA.AddressId = zua.AddressId
					END

					
					----Updating SalesRep for user if any 
					update CUAD
					set CUAD.SalesRepUserName = ZU.UserName, 
					CUAD.SalesRepFullName = (ISNULL(RTRIM(LTRIM(ZU.FirstName)), '')+' '+ISNULL(RTRIM(LTRIM(ZU.MiddleName)), '')
					+CASE
					WHEN ISNULL(RTRIM(LTRIM(ZU.MiddleName)), '') = ''
					THEN ''
					ELSE ' '
					END+ISNULL(RTRIM(LTRIM(ZU.LastName)), '')) 
					from ##CustomerUserAddDetail CUAD
					inner join ZnodeSalesRepCustomerUserPortal SRCUP ON CUAD.UserId = SRCUP.CustomerUserid 
					inner join ZnodeUser ZU ON SRCUP.SalesRepUserId = ZU.UserId

					if ( exists(select * from ##UserList) OR @AddressColumnWhereClause <> '')
					begin
						SELECT UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,
						FullName,
						StoreName,
						CountryName, CityName, StateName, PostalCode, CompanyName, SalesRepUserName, SalesRepFullName
						from ##CustomerUserAddDetail CUAD
						where exists(select * from ##UserList UL where CUAD.UserId = UL.UserId and CUAD.AddressId = UL.AddressID )
						Order by RowNumber
					end
					else
					begin
						SELECT UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,
						FullName,
						StoreName,
						CountryName, CityName, StateName, PostalCode, CompanyName, SalesRepUserName, SalesRepFullName
						from ##CustomerUserAddDetail
						Order by RowNumber
					end
	
					if OBJECT_ID('tempdb..##CustomerUserAddDetail') is not null
					drop table ##CustomerUserAddDetail

					if OBJECT_ID('tempdb..##View_CustomerUserAddDetail') is not null
					drop table ##View_CustomerUserAddDetail
				
				END;
            ELSE
				BEGIN
					SELECT * FROM View_CustomerUserDetail AS VICUD WHERE 1 = 0;
					SET @RowCount = 0;
				END;
            END;			
         END TRY
         BEGIN CATCH
           --SELECT ERROR_MESSAGE()
		   DECLARE @ERROR_PROCEDURE VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_AdminUsers @RoleName = '+@RoleName+' ,@UserName='+@UserName+',@WhereClause='+cast(@WhereClause as varchar(max))+' ,@Rows= '+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_By='+@Order_By+',@RowCount='+CAST(@RowCount AS VARCHAR(50));
            EXEC Znode_InsertProcedureErrorLog
            @ProcedureName    = 'Znode_AdminUsers',
            @ErrorInProcedure = @ERROR_PROCEDURE,
            @ErrorMessage     = @ErrorMessage,
            @ErrorLine        = @ErrorLine,
            @ErrorCall        = @ErrorCall;
         END CATCH;


     END;
go
if exists(select * from sys.procedures where name = 'Znode_PublishPortalEntity')
	drop proc Znode_PublishPortalEntity
go
CREATE PROCEDURE [dbo].[Znode_PublishPortalEntity]
(
   @PortalId  INT = 0 
  ,@LocaleId  INT = 0 
  ,@RevisionState varchar(50) = '' 
  ,@UserId int = 0
  ,@Status Bit =0 OUTPUT 
  ,@IsContentType Bit= 1
  ,@NewGUID nvarchar(500)  
)
AS
/*
  To publish all Contenet pages and their mapping into their respective entities 
	ZnodePublishContentPageConfigEntity
	ZnodePublishSEOEntity
	ZnodePublishWidgetProductEntity
	ZnodePublishMediaWidgetEntity
	ZnodePublishSearchWidgetEntity
	ZnodePublishTextWidgetEntity
	ZnodePublishWidgetSliderBannerEntity
	ZnodePublishWidgetTitleEntity

	Unit Testing : 
	Declare @Status bit 
	

	Declare @Status bit 
	Exec [dbo].[Znode_PublishPortalEntity]
     @PortalId  = 1 
	,@LocaleId  = 0 
	,@RevisionState = 'PRODUCTION' 
	,@UserId = 2
	,@Status = @Status 
	--Select @Status 


*/
BEGIN
BEGIN TRY 
SET NOCOUNT ON
	Declare @PortalCode Varchar(100)
	Declare @Type varchar(50) = '',	@CMSSEOCode varchar(300),@UserName Varchar(50);
	SET @Status = 1 
	Declare @IsPreviewEnable int,@PreviewVersionId INT = 0  ,@ProductionVersionId INT = 0
	
	Select TOP 1  @UserName = aspNetZnodeUser.UserName from ZnodeUser Inner Join aspNetUsers ON ZnodeUser.aspNetUserId = aspNetUsers.Id 
	Inner Join aspNetZnodeUser on aspNetUsers.UserName = aspNetZnodeUser.AspNetZnodeUserId
	where ZnodeUser.UserId = @userId
            


 		If Exists (SELECT  * from ZnodePublishStateApplicationTypeMapping PSA where PSA.IsEnabled =1 and  
		Exists (select TOP 1 1  from ZnodePublishState PS where PS.PublishStateId = PSA.PublishStateId ) and ApplicationType =  'WebstorePreview')
			SET @IsPreviewEnable = 1 
		else 
			SET @IsPreviewEnable = 0 

		--Genrate preview entry 
		DECLARE @SetLocaleId INT , @DefaultLocaleId INT = dbo.Fn_GetDefaultLocaleId(), @MaxCount INT =0 , @IncrementalId INT = 1  
		DECLARE @TBL_Locale TABLE (LocaleId INT , RowId INT IDENTITY(1,1))
		
		DECLARE @TBL_StoreEntity TABLE 
		(
			 PortalThemeId	int,PortalId	int,ThemeId	int,ThemeName	varchar(200),CSSId	int,CSSName	nvarchar(2000),
			 WebsiteLogo	varchar(300),WebsiteTitle	nvarchar(400),FaviconImage	varchar(300),WebsiteDescription	nvarchar(MAX),
			 PublishState	varchar(100),LocaleId	int	
		)
		
		IF object_id('tempdb..[#Tbl_VersionEntity]') IS NOT NULL
			drop table tempdb..#Tbl_VersionEntity
		Create Table #Tbl_VersionEntity(PortalId int , VersionId int , LocaleId int , PublishType varchar(50) )

		IF object_id('tempdb..[#Tbl_OldVersionEntity]') IS NOT NULL
			drop table tempdb..#Tbl_OldVersionEntity
		Create Table #Tbl_OldVersionEntity(PortalId int , NewVersionId int ,OldVersionId int , LocaleId int , PublishType varchar(50) )

	
		DECLARE @WebStoreEntityId int 
		
		select @PortalCode  = StoreName  from ZnodePortal where PortalId = @PortalId 
		
		INSERT INTO @TBL_Locale (LocaleId) SELECT LocaleId FROM ZnodeLocale WHERE IsActive =1 AND (LocaleId  = @LocaleId OR @LocaleId = 0 )
		
		
		SET @MaxCount = ISNULL((SELECT MAx(RowId) FROM @TBL_Locale),0)
		WHILE @IncrementalId <= @MaxCount
		BEGIN 
			SET @SetLocaleId = (SELECT Top 1 LocaleId FROM @TBL_locale WHERE RowId = @IncrementalId)
			if (@IsPreviewEnable = 1 AND ( @RevisionState like '%Preview%'  OR @RevisionState like '%Production%' ) ) 
			Begin
				Insert into ZnodePublishPortalLog
				(PortalId,IsPortalPublished,UserId,LogDateTime,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,Tokem,PublishStateId)
				Select @PortalId ,1 , @UserId , Getdate(),@UserId ,Getdate() ,@UserId ,Getdate(), NULL, DBO.Fn_GetPublishStateIdForProcessing()
				
				insert into #Tbl_VersionEntity (PortalId,VersionId,LocaleId,PublishType)
				select @PortalId, @@Identity , @SetLocaleId ,'PREVIEW'
				
			End
			If (@RevisionState like '%Production%' OR @RevisionState = 'None')
			Begin
				--Genrate production entry 
				Insert into ZnodePublishPortalLog
				(PortalId,IsPortalPublished,UserId,LogDateTime,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,Tokem,PublishStateId)
				Select @PortalId ,1 , @UserId , Getdate(),@UserId ,Getdate() ,@UserId ,Getdate(), NULL, DBO.Fn_GetPublishStateIdForProcessing()
			
				insert into #Tbl_VersionEntity (PortalId,VersionId,LocaleId,PublishType)
				select @PortalId, @@Identity , @SetLocaleId ,'PRODUCTION'
			End 
	   	SET @IncrementalId = @IncrementalId +1 
		END 

	Truncate table ZnodePublishPortalErrorLogEntity

	Declare @IsFirstTimeContentPublish bit 
	If Exists (Select TOP 1 1  from ZnodePublishWebStoreEntity where PortalId = @PortalId)
		SET @IsFirstTimeContentPublish =1 
	else 
		SET @IsFirstTimeContentPublish =0
    
	Declare @Tbl_PreviewVersionId  TABLE (VersionId int , PortalId int , LocaleId int )
	Declare @Tbl_ProductionVersionId  TABLE (VersionId int , PortalId int , LocaleId int )

	If @IsContentType = 0 AND @IsFirstTimeContentPublish =1 
	Begin 
		Insert into #Tbl_OldVersionEntity (PortalId,NewVersionId,OldVersionId, LocaleId, PublishType)
		Select A.PortalId , A.VersionId, B.VersionId, a.LocaleId,a.PublishType from #Tbl_VersionEntity A Inner join ZnodePublishWebStoreEntity B on 
		A.PortalId = B.PortalId and A.LocaleId = B.LocaleId AND A.PublishType= B.PublishState  
	End
	Delete from ZnodePublishProgressNotifierEntity where JobName  = @PortalCode 
	
	INSERT INTO ZnodePublishProgressNotifierEntity
	(VersionId,JobId,JobName,ProgressMark,IsCompleted,IsFailed,ExceptionMessage,StartedBy,StartedByFriendlyName)
	Values(0,@NewGUID , Isnull(@PortalCode,'') + ' Store' , 0 , 0 , 0 , '' , @UserId, @UserName)

	if @Type = 'ZnodePublishWebStoreEntity' OR @Type = ''
	Begin
		 Declare  @PreviewVersionIdString varchar(1000)= ''  ,@ProductionVersionIdString varchar(1000) = '' 
		 SELECT   @PreviewVersionIdString = STUFF((SELECT ',' + cast (VersionId as varchar(50))  FROM #Tbl_VersionEntity   where PublishType = 'PREVIEW'  FOR XML PATH ('')), 1, 1, '') 
		 SELECT   @ProductionVersionIdString = STUFF((SELECT ',' + cast (VersionId as varchar(50))  FROM #Tbl_VersionEntity   where PublishType = 'PRODUCTION'  FOR XML PATH ('')), 1, 1, '') 
		 
		 EXEC [dbo].[Znode_SetPublishWebStoreEntity]
			 @PortalId  = @PortalId 
			,@LocaleId   = @LocaleId 
			,@IsPreviewEnable =@IsPreviewEnable 
			,@PreviewVersionId  = @PreviewVersionIdString 
			,@ProductionVersionId = @ProductionVersionIdString 
			,@RevisionState = @RevisionState 
			,@UserId = @UserId	
			,@Status = @Status Output 

			INSERT INTO ZnodePublishPortalErrorLogEntity
			(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
			SELECT 'ZnodePublishWebStoreEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
			@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

			Update ZnodePublishProgressNotifierEntity SET 
			ProgressMark =5 , 
			IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
			IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
			where  JobId = @NewGUID
	End
	
	if (@Type = 'ZnodePublishPortalBrandEntity' OR @Type = '' ) AND @Status = 1 
	Begin
			Exec [Znode_SetPublishPortalBrandEntity]
			 @PortalId  = @PortalId
			,@IsPreviewEnable =@IsPreviewEnable 
			,@PreviewVersionId  = 0 
			,@ProductionVersionId = 0
			,@RevisionState = @RevisionState 
			,@UserId = @UserId  
			,@Status = @Status Output 

			INSERT INTO ZnodePublishPortalErrorLogEntity
			(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
			SELECT 'ZnodePublishPortalBrandEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
			@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 
			
			Update ZnodePublishProgressNotifierEntity SET 
			ProgressMark = CASE When (@IsContentType = 1 OR (@IsFirstTimeContentPublish = 0 AND @IsContentType = 0 ) ) THEN 10 Else 100 End , 
			IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
			IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
			where  JobId = @NewGUID
	End 

	if (@Type = 'ZnodePublishSEOEntity' OR @Type = '') AND @Status = 1 and @IsContentType = 0
			Begin
					Exec [Znode_SetPublishSEOEntity]
					 @PortalId  = @PortalId
					,@LocaleId  = @LocaleId 
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = 0 
					,@ProductionVersionId = 0
					,@RevisionState = @RevisionState 
					,@CMSSEOTypeId = '4'
					,@CMSSEOCode = ''
					,@UserId = @UserId  
					,@Status = @Status Output 

			End 
	If (@IsContentType = 1 OR (@IsFirstTimeContentPublish = 0 AND @IsContentType = 0 ) ) AND @Status = 1  
	Begin
			if @Type = 'ZnodePublishBlogNewsEntity' OR @Type = '' 
			Begin
				 EXEC [dbo].[Znode_SetPublishBlogNewsEntity]
					 @PortalId  = @PortalId 
					,@LocaleId   = @LocaleId 
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = @PreviewVersionId 
					,@ProductionVersionId = @ProductionVersionId 
					,@RevisionState = @RevisionState 
					,@UserId = @UserId	
					,@Status = @Status Output 

					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishBlogNewsEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 15 , 
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID

			End
			if (@Type = 'ZnodePublishPortalCustomCssEntity' OR @Type = '' ) AND @Status = 1  
			Begin
				 EXEC [dbo].[Znode_SetPublishPortalCustomCssEntity]
					 @PortalId  = @PortalId 
					,@LocaleId   = @LocaleId 
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = @PreviewVersionId 
					,@ProductionVersionId = @ProductionVersionId 
					,@RevisionState = @RevisionState 
					,@UserId = @UserId	
					,@Status = @Status Output 

					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishPortalCustomCssEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 20  ,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID


			End
			if (@Type = 'ZnodePublishWidgetCategoryEntity' OR @Type = '' ) AND @Status = 1 
			Begin
				 EXEC [dbo].[Znode_SetPublishWidgetCategoryEntity]
					 @PortalId  = @PortalId 
					,@LocaleId   = @LocaleId 
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = @PreviewVersionId 
					,@ProductionVersionId = @ProductionVersionId 
					,@RevisionState = @RevisionState 
					,@UserId = @UserId	
					,@Status = @Status Output 

					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishWidgetCategoryEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 25  ,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID
			End
	
			if (@Type = 'ZnodePublishWidgetProductEntity' OR @Type = '') AND @Status = 1  
			Begin
					EXEC Znode_SetPublishWidgetProductEntity
					 @PortalId  = @PortalId
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = @PreviewVersionId 
					,@ProductionVersionId = @ProductionVersionId 
					,@RevisionState = @RevisionState 
					,@CMSMappingId = 0
					,@UserId = @UserId 
					,@Status = @Status  Output
			
					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishWidgetProductEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 30  ,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID
			END 

			if (@Type = 'ZnodePublishWidgetTitleEntity' OR @Type = '') AND @Status = 1  
			Begin
					EXEC Znode_SetPublishWidgetTitleEntity
					 @PortalId  = @PortalId
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = @PreviewVersionId 
					,@ProductionVersionId = @ProductionVersionId 
					,@RevisionState = @RevisionState 
					,@CMSContentPagesId = 0
					,@UserId = @UserId 
					,@Status = @Status  Output

					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishWidgetTitleEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 35  ,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID

			END 
			if (@Type = 'ZnodePublishWidgetSliderBannerEntity' OR @Type = '')AND @Status = 1  
			Begin
					EXEC Znode_SetPublishWidgetSliderBannerEntity
					 @PortalId  = @PortalId
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = @PreviewVersionId 
					,@ProductionVersionId = @ProductionVersionId 
					,@RevisionState = @RevisionState 
					,@CMSContentPagesId = 0
					,@CMSSliderId = 0 
					,@UserId = @UserId 
					,@Status = @Status  Output
			
					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishWidgetSliderBannerEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 
					
					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 40  ,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID			
			END 
			if (@Type = 'ZnodePublishTextWidgetEntity' OR @Type = '' ) AND @Status = 1  
			Begin
					EXEC Znode_SetPublishTextWidgetEntity
					 @PortalId  = @PortalId
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = @PreviewVersionId 
					,@ProductionVersionId = @ProductionVersionId 
					,@RevisionState = @RevisionState 
					,@CMSMappingId = 0
					,@UserId = @UserId 
					,@Status = @Status  Output
			
					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishTextWidgetEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 45  ,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID			

			END 
			if (@Type = 'ZnodeSetPublishMediaWidgetEntity' OR @Type = '') AND @Status = 1
			Begin
					EXEC Znode_SetPublishMediaWidgetEntity
					 @PortalId  = @PortalId
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = @PreviewVersionId 
					,@ProductionVersionId = @ProductionVersionId 
					,@RevisionState = @RevisionState 
					,@CMSMappingId = 0
					,@UserId = @UserId 
					,@Status = @Status  Output
			
					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishMediaWidgetEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 
										
					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 50  ,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID			
			END 
			if (@Type = 'ZnodePublishSearchWidgetEntity' OR @Type = '') AND @Status = 1
			Begin
					EXEC Znode_SetPublishSearchWidgetEntity
					 @PortalId  = @PortalId
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = @PreviewVersionId 
					,@ProductionVersionId = @ProductionVersionId 
					,@RevisionState = @RevisionState 
					,@CMSMappingId = 0
					,@UserId = @UserId 
					,@Status = @Status  Output
			
					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishSearchWidgetEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 
					
					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 55  ,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID			
			END 

			if (@Type = 'ZnodePublishContentPageConfigEntity' OR @Type = '') AND @Status = 1
			Begin
				 EXEC [dbo].[Znode_SetPublishContentPageConfigEntity]
					 @PortalId  = @PortalId 
					,@LocaleId   = @LocaleId 
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = @PreviewVersionId 
					,@ProductionVersionId = @ProductionVersionId 
					,@RevisionState = @RevisionState 
					,@CMSContentPagesId = 0
					,@UserId = @UserId	
					,@Status = @Status Output 

					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishContentPageConfigEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 
					
					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 60,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID			
			End

			if (@Type = 'ZnodePublishSEOEntity' OR @Type = '') AND @Status = 1
			Begin
					Exec [Znode_SetPublishSEOEntity]
					 @PortalId  = @PortalId
					,@LocaleId  = @LocaleId 
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = 0 
					,@ProductionVersionId = 0
					,@RevisionState = @RevisionState 
					,@CMSSEOTypeId = '3,5'
					,@CMSSEOCode = ''
					,@UserId = @UserId  
					,@Status = @Status Output 

					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishSEOEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

					
					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 60,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID			

			End 
			if (@Type = 'ZnodePublishMessageEntity' OR @Type = '') AND @Status = 1
			Begin
					Exec [Znode_SetPublishMessageEntity]
					 @PortalId  = @PortalId
					,@LocaleId  = @LocaleId 
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = 0 
					,@ProductionVersionId = 0
					,@RevisionState = @RevisionState 
					,@UserId = @UserId  
					,@Status = @Status Output 

					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishMessageEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 65,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID			

			End 

		   if (@Type = 'ZnodePublishPortalGlobalAttributeEntity' OR @Type = '') AND @Status = 1
			Begin
					Exec [Znode_SetPublishPortalGlobalAttributeEntity]
					 @PortalId  = @PortalId
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = 0 
					,@ProductionVersionId = 0
					,@RevisionState = @RevisionState 
					,@UserId = @UserId  
					,@Status = @Status Output 

					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishPortalGlobalAttributeEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 
					
					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 67,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID			

			End 
 
		   if (@Type = 'ZnodePublishProductPageEntity' OR @Type = '') AND @Status = 1
			Begin
					Exec [Znode_SetPublishProductPageEntity]
					 @PortalId  = @PortalId
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = 0 
					,@ProductionVersionId = 0
					,@RevisionState = @RevisionState 
					,@UserId = @UserId  
					,@Status = @Status Output 

					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishProductPageEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 73,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID			


			End 
			
			if (@Type = 'ZnodePublishWidgetBrandEntity' OR @Type = '') AND @Status = 1
			Begin
					Exec [Znode_SetPublishWidgetBrandEntity]
					 @PortalId  = @PortalId
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = 0 
					,@ProductionVersionId = 0
					,@RevisionState = @RevisionState 
					,@UserId = @UserId  
					,@Status = @Status Output 

					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishWidgetBrandEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , Getdate(), 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 80,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID			

			End 
	End
		IF Exists (select TOP 1 1  from ZnodePublishPortalErrorLogEntity where  ProcessStatus = 'Fail') 
		Begin
			SET @Status  =0 
			SELECT 1 AS ID,@Status AS Status;
			INSERT INTO ZnodePublishPortalErrorLogEntity
			(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
			SELECT 'ZnodePublishPortalEntity', @RevisionState , 'Fail' , Getdate(), 
			@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 
			Update ZnodePublishPortalLog SET PublishStateId = DBO.Fn_GetPublishStateIdForPublishFailed()  where  PublishPortalLogId in  (Select VersionId from #Tbl_VersionEntity Where PublishType = 'PREVIEW' )
			Update ZnodePublishPortalLog SET PublishStateId = DBO.Fn_GetPublishStateIdForPublishFailed()  where  PublishPortalLogId in (Select VersionId from #Tbl_VersionEntity Where PublishType = 'PRODUCTION' )

			Delete  From ZnodePublishWebStoreEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId
			Delete  From ZnodePublishBlogNewsEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishPortalCustomCssEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishWidgetCategoryEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishWidgetProductEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishWidgetTitleEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishWidgetSliderBannerEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishTextWidgetEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishMediaWidgetEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishSearchWidgetEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishContentPageConfigEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishSEOEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId and CMSSEOTypeId in (3,5)
			Delete  From ZnodePublishMessageEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishPortalGlobalAttributeEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishPortalBrandEntity Where  VersionId  in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishProductPageEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishWidgetBrandEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
		End
	Else 
		Begin
			Update ZnodePublishPortalLog SET PublishStateId = DBO.Fn_GetPublishStateIdForPreview()  where  PublishPortalLogId in 
			(Select VersionId from #Tbl_VersionEntity Where PublishType = 'PREVIEW' )
			Update ZnodePublishPortalLog SET PublishStateId = DBO.Fn_GetPublishStateIdForPublish()  where  PublishPortalLogId in
			(Select VersionId from #Tbl_VersionEntity Where PublishType = 'PRODUCTION' )
			 
			Insert into ZnodePublishPreviewLogEntity
			(VersionId,PublishStartTime,IsDisposed,SourcePublishState,EntityId,EntityType,LogMessage,LogCreatedDate,PreviousVersionId,LocaleId,LocaleDisplayValue)
				Select A.VersionId,NULL,NULL,A.PublishType,@PortalId,'portal','portal has been published successfully' , Getdate(),  
				(select TOP 1 VersionId   from ZnodePublishWebStoreEntity where LocaleId = A.LocaleId AND PublishState = A.PublishType
				 and PortalId = @PortalId),A.LocaleId,B.Name
				from #Tbl_VersionEntity  A  Inner join ZnodeLocale B on A.LocaleId = B.LocaleId

			If @RevisionState = 'PREVIEW'
			Begin
				update ZnodeCMSContentPages SET  IsPublished = 1 , PublishStateId  = DBO.Fn_GetPublishStateIdForPreview() where (PortalId = @PortalId OR @PortalId  =0 ) 
				update ZnodeCMSSEODEtail SET  IsPublish = 1 , PublishStateId  = DBO.Fn_GetPublishStateIdForPreview() where 
				(PortalId = @PortalId OR @PortalId  =0 )  AND CMSSEOTypeId = 3 
			End 
			Else 
			Begin
				update ZnodeCMSContentPages SET  IsPublished = 1 , PublishStateId  = DBO.Fn_GetPublishStateIdForPublish() where (PortalId = @PortalId OR @PortalId  =0 ) 
				update ZnodeCMSSEODEtail SET  IsPublish = 1 , PublishStateId  = DBO.Fn_GetPublishStateIdForPublish() where 
				(PortalId = @PortalId OR @PortalId  =0 )  AND CMSSEOTypeId = 3 
			End
			
			if (@IsContentType =1  OR (@IsContentType = 0 AND @IsFirstTimeContentPublish =0))
			Begin
				If @IsPreviewEnable = 1 AND (@RevisionState like '%Preview%'  OR @RevisionState like '%Production%'  ) 
				Begin
					Delete  From ZnodePublishWebStoreEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishBlogNewsEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishPortalCustomCssEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishWidgetCategoryEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishWidgetProductEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishWidgetTitleEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishWidgetSliderBannerEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishTextWidgetEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishMediaWidgetEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishSearchWidgetEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishContentPageConfigEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishSEOEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId) And CMSSEOTypeId in (3,5) 
					Delete  From ZnodePublishMessageEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishPortalGlobalAttributeEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishPortalBrandEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishProductPageEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishWidgetBrandEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
				End
				If (@RevisionState like '%Production%' OR @RevisionState = 'None')
				Begin
					Delete  From ZnodePublishWebStoreEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishBlogNewsEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishPortalCustomCssEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishWidgetCategoryEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishWidgetProductEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishWidgetTitleEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishWidgetSliderBannerEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishTextWidgetEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishMediaWidgetEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishSearchWidgetEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishContentPageConfigEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishSEOEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId) And CMSSEOTypeId in (3,5) 
					Delete  From ZnodePublishMessageEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishPortalGlobalAttributeEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishPortalBrandEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishProductPageEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishWidgetBrandEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
				End
			End
			Else 
			Begin
				
				If @IsPreviewEnable = 1 AND (@RevisionState like '%Preview%'  OR @RevisionState like '%Production%'  ) 
				Begin
					Delete  From ZnodePublishWebStoreEntity           Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Delete  From ZnodePublishPortalBrandEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
				
					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishBlogNewsEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishPortalCustomCssEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					
					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishWidgetCategoryEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishWidgetProductEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishWidgetTitleEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishWidgetSliderBannerEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishTextWidgetEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishMediaWidgetEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishSearchWidgetEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId =6)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishContentPageConfigEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishSEOEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					And CMSSEOTypeId in (3,5) 

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishMessageEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishPortalGlobalAttributeEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishProductPageEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishWidgetBrandEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
				End
				If (@RevisionState like '%Production%' OR @RevisionState = 'None')
				Begin
					Delete  From ZnodePublishWebStoreEntity           Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Delete  From ZnodePublishPortalBrandEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
				
					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishBlogNewsEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishPortalCustomCssEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					
					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishWidgetCategoryEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishWidgetProductEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishWidgetTitleEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishWidgetSliderBannerEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishTextWidgetEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishMediaWidgetEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishSearchWidgetEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishContentPageConfigEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishSEOEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					And CMSSEOTypeId in (3,5)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishMessageEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishPortalGlobalAttributeEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishProductPageEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishWidgetBrandEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
				End 
			End

			--update ZnodeCMSContentPages SET  IsPublished = 1 , PublishStateId  = DBO.Fn_GetPublishStateIdForPublish() where @CMSContentPagesId = CMSContentPagesId and  (PortalId = @PortalId OR @PortalId  =0 ) 
			--update ZnodeCMSSEODEtail SET  IsPublish = 1 , PublishStateId  = DBO.Fn_GetPublishStateIdForPublish() where 
			--SEOCode = @CMSSEOCode and  (PortalId = @PortalId OR @PortalId  =0 )  AND CMSSEOTypeId = 3 
		 SET @Status = 1
		End
	SELECT 1 AS ID,@Status AS Status;   

END TRY 
BEGIN CATCH 
	SET @Status =0  
	 SELECT 1 AS ID,@Status AS Status;   

	 DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
		@ErrorLine VARCHAR(100)= ERROR_LINE(),
		@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_PublishPortalEntity 
		@PortalId = '+CAST(@PortalId AS VARCHAR	(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10))
		+',@PreviewVersionId = ' + CAST(@PreviewVersionId  AS varchar(20))
		+',@ProductionVersionId = ' + CAST(@ProductionVersionId  AS varchar(20))
		+',@RevisionState = ''' + CAST(@RevisionState  AS varchar(50))
		+',@UserId = ' + CAST(@UserId AS varchar(20));	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
	
			
	INSERT INTO ZnodePublishPortalErrorLogEntity
	(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
	SELECT 'ZnodePublishPortalEntity', @RevisionState + isnull(@ErrorMessage,'') , 'Fail' , Getdate(), 
	@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

		                			 
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_PublishPortalEntity',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
END CATCH
END
go
if exists(select * from sys.procedures where name = 'Znode_SetPublishPortalBrandEntity')
	drop proc Znode_SetPublishPortalBrandEntity
go
CREATE PROCEDURE [dbo].[Znode_SetPublishPortalBrandEntity]
(
   @PortalId  INT = 0 
  ,@LocaleId  INT = 0 
  ,@PreviewVersionId INT = 0 
  ,@IsPreviewEnable int = 0 
  ,@ProductionVersionId INT = 0 
  ,@RevisionState varchar(50) = '' 
  ,@UserId int = 0 
  ,@Status int = 0 OUTPUT
)
AS
/*
    This Procedure is used to publish the blog news against the store 
  
	EXEC ZnodeSetPublishPortalBrandEntity 1 2,3
	A. 
		1. Preview - Preview
		2. None    - Production   --- 
		3. Production - Preview/Production
	B.
		select * from ZnodePublishStateApplicationTypeMapping
		select * from ZnodePublishState where PublishStateId in (3,4) 
		select * from ZnodePublishPortalLog 
	C.
		Select * from ZnodePublishState where IsDefaultContentState = 1  and IsContentState = 1  --Production 
    
	Unit testing 
	
	Exec [ZnodeSetPublishPortalBrandEntity]
	   @PortalId  = 1 
	  ,@LocaleId  = 0 
	  ,@PreviewVersionId = 0 
	  ,@ProductionVersionId = 0 
	  ,@RevisionState = 'Production' 
	  ,@CMSMappingId = 0
	  ,@UserId = 0 
  
	*/
BEGIN 
BEGIN TRY 
SET NOCOUNT ON
   
   Begin 
		DECLARE @Tbl_PreviewVersionId    TABLE    (PreviewVersionId int , PortalId int , LocaleId int)
		DECLARE @Tbl_ProductionVersionId TABLE    (ProductionVersionId int  , PortalId int , LocaleId int)

		If @PreviewVersionId = 0 
			Begin
   				Insert into @Tbl_PreviewVersionId 
				SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and  (LocaleId = 	@LocaleId OR @LocaleId = 0  ) and PublishState ='PREVIEW'
			end
		Else 
				Insert into @Tbl_PreviewVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
				where VersionId = @PreviewVersionId
		If @ProductionVersionId = 0 
   			Begin
				Insert into @Tbl_ProductionVersionId 
				SELECT distinct VersionId , PortalId , LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and  (LocaleId = 	@LocaleId OR @LocaleId = 0  ) and PublishState ='PRODUCTION'
			End 
		Else 
			Insert into @Tbl_ProductionVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
			where VersionId = @ProductionVersionId
 
		DECLARE @SetLocaleId INT , @DefaultLocaleId INT = dbo.Fn_GetDefaultLocaleId(), @MaxCount INT =0 , @IncrementalId INT = 1  
		DECLARE @TBL_Locale TABLE (LocaleId INT , RowId INT IDENTITY(1,1))
		
			DECLARE @TBL_BrandDetails TABLE  
        (
			Description         NVARCHAR(MAX),  
			BrandId             INT,  
			BrandCode           VARCHAR(600),  
			DisplayOrder        INT,  
			IsActive            BIT,  
			WebsiteLink         NVARCHAR(1000),  
			BrandDetailLocaleId INT,  
			SEOFriendlyPageName NVARCHAR(600),  
			MediaPath           NVARCHAR(MAX),  
			MediaId             INT,  
			ImageName           VARCHAR(300),
			BrandName			VARCHAR(100),	
			Custom1				NVARCHAR(MAX),	
			Custom2				NVARCHAR(MAX),
			Custom3				NVARCHAR(MAX),
			Custom4				NVARCHAR(MAX),
			Custom5				NVARCHAR(MAX),
			PortalId			Int,
			IsAssociated        Bit 
        );  
  
    DECLARE @AttributeId INT= [dbo].[Fn_GetProductBrandAttributeId]();  
             
	DECLARE @TBL_AttributeDefault TABLE  
    (
		PimAttributeId            INT,  
		AttributeDefaultValueCode VARCHAR(600),  
		IsEditable                BIT,  
		AttributeDefaultValue     NVARCHAR(MAX),
		DisplayOrder			  INT   
    );  

    DECLARE @TBL_SeoDetails TABLE  
    (
		CMSSEODetailId       INT,  
		SEOTitle             NVARCHAR(MAX),  
		SEOKeywords          NVARCHAR(MAX),  
		SEOURL               NVARCHAR(MAX),  
		ModifiedDate         DATETIME,  
		SEODescription       NVARCHAR(MAX),  
		MetaInformation      NVARCHAR(MAX),  
		IsRedirect           BIT,  
		CMSSEODetailLocaleId INT,  
		--SEOId                INT ,
		PublishStatus        NVARCHAR(20),
		SEOCode				 NVARCHAR(4000),
		CanonicalURL		 VARCHAR(200),
		RobotTag			 VARCHAR(50)			   
    );  

    DECLARE @TBL_BrandDetail TABLE  
    (
		Description          NVARCHAR(MAX),  
		BrandId              INT,  
		BrandCode            VARCHAR(600),  
		DisplayOrder         INT,  
		IsActive             BIT,  
		WebsiteLink          NVARCHAR(1000),  
		BrandDetailLocaleId  INT,  
		MediaPath            NVARCHAR(MAX),  
		MediaId              INT,  
		ImageName      VARCHAr(300) ,  
		CMSSEODetailId       INT,  
		SEOTitle             NVARCHAR(MAX),  
		SEOKeywords          NVARCHAR(MAX),  
		SEOURL               NVARCHAR(MAX),  
		ModifiedDate         DATETIME,  
		SEODescription       NVARCHAR(MAX),  
		MetaInformation      NVARCHAR(MAX),  
		IsRedirect           BIT,  
		CMSSEODetailLocaleId INT,  
		--SEOId                INT,  
		BrandName            NVARCHAR(MAX),  
		RowId                INT,  
		CountId              INT ,
		SEOCode              NVARCHAR(4000), 
		Custom1              NVARCHAR(MAX),
		Custom2              NVARCHAR(MAX),
		Custom3              NVARCHAR(MAX),
		Custom4              NVARCHAR(MAX),
		Custom5              NVARCHAR(MAX),
		PortalId			 INT
    );  

		iF object_id('tempdb..[#TBL_BrandDetail]') IS NOT NULL
			drop table tempdb..#TBL_BrandDetail
		Create Table #TBL_BrandDetail
		(
			Description          NVARCHAR(MAX),  
			BrandId              INT,  
			BrandCode            VARCHAR(600),  
			DisplayOrder         INT,  
			IsActive             BIT,  
			WebsiteLink          NVARCHAR(1000),  
			BrandDetailLocaleId  INT,  
			MediaPath            NVARCHAR(MAX),  
			MediaId              INT,  
			ImageName      VARCHAr(300) ,  
			CMSSEODetailId       INT,  
			SEOTitle             NVARCHAR(MAX),  
			SEOKeywords          NVARCHAR(MAX),  
			SEOFriendlyPageName  NVARCHAR(MAX),  
			ModifiedDate         DATETIME,  
			SEODescription       NVARCHAR(MAX),  
			MetaInformation      NVARCHAR(MAX),  
			IsRedirect           BIT,  
			CMSSEODetailLocaleId INT,  
			--SEOId                INT,  
			BrandName            NVARCHAR(MAX),  
			PromotionId		     INT,
			RowId                INT,  
			CountId              INT ,
			SEOCode              NVARCHAR(4000), 
			Custom1              NVARCHAR(MAX),
			Custom2              NVARCHAR(MAX),
			Custom3              NVARCHAR(MAX),
			Custom4              NVARCHAR(MAX),
			Custom5              NVARCHAR(MAX),
			PortalId			 INT,
			LocaleId             INT  
		);  
		
		
		;WITH Cte_GetBrandBothLocale AS 
	(
		SELECT ZBDL.Description,ZBD.BrandId,LocaleId,ZBD.BrandCode,isnull(ZPB.DisplayOrder,999) as DisplayOrder,ZBD.IsActive,ZBD.WebsiteLink,ZBDl.BrandDetailLocaleId,  
			SEOFriendlyPageName,[dbo].[Fn_GetMediaThumbnailMediaPath](Zm.path) MediaPath,ZBD.MediaId,Zm.path ImageName, ZBDL.BrandName, ZBD.Custom1, ZBD.Custom2, ZBD.Custom3, ZBD.Custom4, ZBD.Custom5, ZPB.PortalId,
			CASE WHEN ZPB.PortalBrandId IS NULL THEN 0 ELSE 1 END IsAssociated
		FROM ZnodeBrandDetails ZBD 
		LEFT JOIN ZnodePortalBrand ZPB ON ZBD.BrandId = ZPB.BrandId AND (ZPB.PortalId = @PortalId OR isnull(@PortalId,0) = 0 )
		LEFT JOIN ZnodeBrandDetailLocale ZBDL ON(ZBD.BrandId = ZBDL.BrandId)  
		LEFT JOIN ZnodeMedia ZM ON(ZM.MediaId = ZBD.MediaId)  
		WHERE LocaleId IN(@LocaleId, @DefaultLocaleId)  
		
              
    ),  
    Cte_BrandFirstLocale AS 
	(
		SELECT Description,BrandId,LocaleId,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,SEOFriendlyPageName,MediaPath,MediaId,ImageName , BrandName, Custom1, Custom2, Custom3, Custom4, Custom5, PortalId , IsAssociated
        FROM Cte_GetBrandBothLocale CTGBBL  
        WHERE LocaleId = @LocaleId
	),  
    Cte_BrandDefaultLocale AS 
	(
		SELECT Description,BrandId,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,SEOFriendlyPageName,MediaPath,MediaId,ImageName, BrandName, Custom1, Custom2, Custom3, Custom4, Custom5, PortalId, IsAssociated  
        FROM Cte_BrandFirstLocale  
        UNION ALL  
        SELECT Description,BrandId,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,SEOFriendlyPageName,MediaPath,MediaId,ImageName , BrandName, Custom1, Custom2, Custom3, Custom4, Custom5, PortalId, IsAssociated
		FROM Cte_GetBrandBothLocale CTBBL  
		WHERE LocaleId = @DefaultLocaleId  
		AND NOT EXISTS  
		(  
			SELECT TOP 1 1  
			FROM Cte_BrandFirstLocale CTBFL  
			WHERE CTBBL.BrandId = CTBFL.BrandId  
		)
	)    
	INSERT INTO @TBL_BrandDetails (Description,BrandId,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,SEOFriendlyPageName,MediaPath,MediaId,ImageName, BrandName, Custom1, Custom2, Custom3, Custom4, Custom5, PortalId, IsAssociated)  
    SELECT Description,BrandId,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,SEOFriendlyPageName,MediaPath,MediaId,ImageName , BrandName, Custom1, Custom2, Custom3, Custom4, Custom5, PortalId, IsAssociated
    FROM Cte_BrandDefaultLocale CTEBD;
       
	-----Update BrandName from attributedefault value
	;WITH Cte_GetBrandNameLocale AS 
	(
		select d.brandcode, a.AttributeDefaultValueCode, b.AttributeDefaultValue, b.LocaleId 
		from ZnodePimAttributeDefaultValue a
		inner join ZnodePimAttributeDefaultValueLocale b on a.PimAttributeDefaultValueId = b.PimAttributeDefaultValueId 
		inner join ZnodePimAttribute c on a.PimAttributeId = c.PimAttributeId
		inner join @TBL_BrandDetails d on a.AttributeDefaultValueCode = d.brandcode
		where c.attributecode = 'brand' and b.LocaleId IN(@LocaleId, @DefaultLocaleId)
              
    )
	,Cte_BrandNameFirstLocale AS 
	(
		SELECT brandcode, AttributeDefaultValueCode, AttributeDefaultValue, LocaleId  
        FROM Cte_GetBrandNameLocale CTGBBL  
        WHERE LocaleId = @LocaleId
	)
	,Cte_BrandDefaultLocale AS 
	(
		SELECT brandcode, AttributeDefaultValueCode, AttributeDefaultValue, LocaleId  
        FROM Cte_BrandNameFirstLocale  
        UNION ALL  
        SELECT brandcode, AttributeDefaultValueCode, AttributeDefaultValue, LocaleId  
		FROM Cte_GetBrandNameLocale CTBBL  
		WHERE LocaleId = @DefaultLocaleId  
		AND NOT EXISTS  
		(  
			SELECT TOP 1 1  
			FROM Cte_BrandNameFirstLocale CTBFL  
			WHERE CTBBL.brandcode = CTBFL.brandcode  
		)
	)  
	update b1 set b1.brandname = a1.AttributeDefaultValue
	from Cte_BrandDefaultLocale a1
	inner join @TBL_BrandDetails b1 on a1.brandcode = b1.brandcode

	DECLARE @SeoCode SelectColumnList
	INSERT INTO @SeoCode
	SELECT BrandCode FROM @TBL_BrandDetails
				

    INSERT INTO @TBL_SeoDetails 
	(
		CMSSEODetailId,SEOTitle,SEOKeywords,SEOURL,ModifiedDate,SEODescription,MetaInformation,IsRedirect,
		CMSSEODetailLocaleId,PublishStatus,SEOCode,CanonicalURL,RobotTag
	)  
    EXEC Znode_GetSeoDetails @SeoCode, 'Brand', @LocaleId;  
			              
    SELECT TBBD.*,TBSD.*--,TBAD.AttributeDefaultValue BrandName,TBAD.AttributeDefaultValueCode  
    INTO #TM_BrandLocale  
    FROM @TBL_BrandDetails TBBD  
    LEFT JOIN @TBL_SeoDetails TBSD ON(TBSD.SEOCode = TBBD.BrandCode)  
    --INNER JOIN @TBL_AttributeDefault TBAD ON(TBAD.AttributeDefaultValueCode = TBBD.BrandCode);  
  
		INSERT INTO @TBL_Locale (LocaleId) SELECT LocaleId FROM ZnodeLocale WHERE IsActive =1 AND (LocaleId  = @LocaleId OR @LocaleId = 0 )

		SET @MaxCount = ISNULL((SELECT MAx(RowId) FROM @TBL_Locale),0)
		WHILE @IncrementalId <= @MaxCount
		BEGIN 
			SET @SetLocaleId = (SELECT Top 1 LocaleId FROM @TBL_locale WHERE RowId = @IncrementalId)
			
			Insert into #TBL_BrandDetail
			(BrandId,Description,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,MediaPath,MediaId,ImageName,CMSSEODetailId,SEOTitle,SEOKeywords,SEOFriendlyPageName,SEODescription,MetaInformation,IsRedirect,CMSSEODetailLocaleId,BrandName,
			PromotionId ,SEOCode,Custom1, Custom2, Custom3, Custom4, Custom5, PortalId,LocaleId)
			select BrandId,Description,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,MediaPath,MediaId,ImageName,CMSSEODetailId,SEOTitle,SEOKeywords,SEOFriendlyPageName,SEODescription,MetaInformation,IsRedirect,CMSSEODetailLocaleId,BrandName,
			0 PromotionId ,SEOCode,Custom1, Custom2, Custom3, Custom4, Custom5, PortalId ,@SetLocaleId from #TM_BrandLocale 
			where  PortalId = @PortalId
		SET @IncrementalId = @IncrementalId +1 
		END 
	End


	If @IsPreviewEnable = 1 AND ( @RevisionState like '%Preview%'  OR @RevisionState like '%Production%' ) 
	Begin
	    --Data inserted into flat table ZnodePublishPortalBrandEntity (Replica of MongoDB Collection )  
		Delete from ZnodePublishPortalBrandEntity where PortalId = @PortalId  and VersionId in 
		( Select PreviewVersionId from @Tbl_PreviewVersionId)
		
		Insert Into ZnodePublishPortalBrandEntity 
		(VersionId,PublishStartTime,PortalId,LocaleId,
		 BrandId,BrandCode,BrandName,MediaId
		 ,WebsiteLink,Description,PublishState,SEOTitle,SEOKeywords,SEODescription,SEOFriendlyPageName
		 ,DisplayOrder,IsActive,MediaPath,CMSSEODetailId,CMSSEODetailLocaleId,BrandDetailLocaleId,ImageName)
		SELECT B.PreviewVersionId , Getdate(),B.PortalId ,B.LocaleId
		,a.BrandId,BrandCode,BrandName,MediaId
		,WebsiteLink,Description,'PREVIEW',SEOTitle,SEOKeywords,SEODescription,SEOFriendlyPageName
		,a.DisplayOrder,IsActive,MediaPath,CMSSEODetailId,CMSSEODetailLocaleId,BrandDetailLocaleId,ImageName
		FROM #TBL_BrandDetail A inner join @TBL_PreviewVersionId B on 
		@PortalId= B.PortalId and A.LocaleId = b.LocaleId
		inner join ZnodePortalBrand ZPB on a.BrandId = ZPB.BrandId and b.PortalId = ZPB.PortalId

	End
	-------------------------- End Preview 
	If (@RevisionState like '%Production%' OR @RevisionState = 'None')
	Begin
		-- Only production version id will process 
		Delete from ZnodePublishPortalBrandEntity where PortalId = @PortalId  and VersionId in (select ProductionVersionId from @TBL_ProductionVersionId)
		
		Insert Into ZnodePublishPortalBrandEntity 
		(VersionId,PublishStartTime,PortalId,LocaleId,BrandId,BrandCode,BrandName,MediaId
		 ,WebsiteLink,Description,PublishState,SEOTitle,SEOKeywords,SEODescription,SEOFriendlyPageName
		 ,DisplayOrder,IsActive,MediaPath,CMSSEODetailId,CMSSEODetailLocaleId,BrandDetailLocaleId,ImageName)
		SELECT B.ProductionVersionId , Getdate(),B.PortalId ,B.LocaleId
		,a.BrandId,BrandCode,BrandName,MediaId
		,WebsiteLink,Description,'PREVIEW',SEOTitle,SEOKeywords,SEODescription,SEOFriendlyPageName
		,a.DisplayOrder,IsActive,MediaPath,CMSSEODetailId,CMSSEODetailLocaleId,BrandDetailLocaleId,ImageName
		FROM #TBL_BrandDetail A inner join @TBL_ProductionVersionId B on 
		@PortalId= B.PortalId and A.LocaleId = b.LocaleId
		inner join ZnodePortalBrand ZPB on a.BrandId = ZPB.BrandId and b.PortalId = ZPB.PortalId
	End
	SET @Status =1 
END TRY 
BEGIN CATCH 
	SET @Status = 0;
	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
		@ErrorLine VARCHAR(100)= ERROR_LINE(),
		@ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeSetPublishPortalBrandEntity 
		@PortalId = '+CAST(@PortalId AS VARCHAR	(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10))
		+',@PreviewVersionId = ' + CAST(@PreviewVersionId  AS varchar(20))
		+',@ProductionVersionId = ' + CAST(@ProductionVersionId  AS varchar(20))
		+',@RevisionState = ''' + CAST(@RevisionState  AS varchar(50))
		+',@UserId = ' + CAST(@UserId AS varchar(20));	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		                			 
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'ZnodeSetPublishPortalBrandEntity',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;

	END CATCH
END
go
if exists(select * from sys.procedures where name = 'Znode_SetPublishSEOEntity')
	drop proc Znode_SetPublishSEOEntity
go
CREATE PROCEDURE [dbo].[Znode_SetPublishSEOEntity]
(
   @PortalId  INT = 0 
  ,@LocaleId  INT = 0 
  ,@IsPreviewEnable int = 0 
  ,@PreviewVersionId INT = 0 
  ,@ProductionVersionId INT = 0 
  ,@RevisionState varchar(50) = '' 
  ,@CMSSEOTypeId varchar(500) = '' 
  ,@CMSSEOCode varchar(300) = ''
  ,@UserId int = 0 
  ,@Status int OUTPUT 
  ,@IsCatalogPublish bit = 0 
  ,@VersionIdString varchar(300) = ''
  ,@IsSingleProductPublish bit = 0 
)
AS
/*
    This Procedure is used to publish the blog news against the store 
  
	EXEC ZnodeSetPublishSEOEntity 1 2,3
	A. 
		1. Preview - Preview
		2. None    - Production   --- 
		3. Production - Preview/Production
	B.
		select * from ZnodePublishStateApplicationTypeMapping
		select * from ZnodePublishState where PublishStateId in (3,4) 
		select * from ZnodePublishPortalLog 
	C.
		Select * from ZnodePublishState where IsDefaultContentState = 1  and IsContentState = 1  --Production 
    
	Unit testing 
	
	Exec [ZnodeSetPublishSEOEntity]
	   @PortalId  = 1 
	  ,@LocaleId  = 0 
	  ,@PreviewVersionId = 0 
	  ,@ProductionVersionId = 0 
	  ,@RevisionState = 'Preview/Production' 
	  ,@CMSSEOTypeId = 0
	  ,@CMSSEOCode = ''
	  ,@UserId = 0 

	 Exec [ZnodeSetPublishSEOEntity]
   @PortalId  = 1 
  ,@LocaleId  = 0 
  ,@PreviewVersionId = 0 
  ,@ProductionVersionId = 0 
  ,@RevisionState = 'Preview&Production' 
  ,@CMSSEOTypeId = 3
  ,@CMSSEOCode = ''
  ,@UserId = 0 




	
	*/
BEGIN 
BEGIN TRY 
SET NOCOUNT ON
   Begin 
		DECLARE @Tbl_PreviewVersionId    TABLE    (PreviewVersionId int , PortalId int , LocaleId int)
		DECLARE @Tbl_ProductionVersionId TABLE    (ProductionVersionId int  , PortalId int , LocaleId int)
		If (@IsCatalogPublish = 0  AND @IsSingleProductPublish = 0 )
		Begin
			If @PreviewVersionId = 0 
				Begin
   					Insert into @Tbl_PreviewVersionId 
					SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and  (LocaleId = 	@LocaleId OR @LocaleId = 0  ) and PublishState ='PREVIEW'
				end
			Else 
					Insert into @Tbl_PreviewVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
					where VersionId = @PreviewVersionId
			If @ProductionVersionId = 0 
   				Begin
					Insert into @Tbl_ProductionVersionId 
					SELECT distinct VersionId , PortalId , LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and  (LocaleId = 	@LocaleId OR @LocaleId = 0  ) and PublishState ='PRODUCTION'
				End 
			Else 
				Insert into @Tbl_ProductionVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
				where VersionId = @ProductionVersionId
 		End
		Else if (@IsCatalogPublish= 1  AND @IsSingleProductPublish = 0 )
		Begin
			 IF OBJECT_ID('tempdb..#VesionIds') is not null
				DROP TABLE #VesionIds
  				 
			 SELECT PV.* into #VesionIds FROM ZnodePublishVersionEntity PV Inner join Split(@VersionIdString,',') S ON PV.VersionId = S.Item
		End
		
		DECLARE @SetLocaleId INT , @DefaultLocaleId INT = dbo.Fn_GetDefaultLocaleId(), @MaxCount INT =0 , @IncrementalId INT = 1  
		DECLARE @TBL_Locale TABLE (LocaleId INT , RowId INT IDENTITY(1,1))
		DECLARE @TBL_SEO TABLE 
		(
			ItemName varchar(50),CMSSEODetailId int ,CMSSEODetailLocaleId int ,CMSSEOTypeId int ,SEOId int ,SEOTypeName varchar(50),SEOTitle nvarchar(Max)
			,SEODescription nvarchar(Max),
			SEOKeywords nvarchar(Max),SEOUrl nvarchar(Max) ,IsRedirect bit ,MetaInformation nvarchar(Max) ,LocaleId int ,
			OldSEOURL nvarchar(Max),CMSContentPagesId int ,PortalId int ,SEOCode varchar(300) ,CanonicalURL varchar(200),RobotTag varchar(50)
		)
		
		BEGIN 
			INSERT INTO @TBL_Locale (LocaleId) SELECT LocaleId FROM ZnodeLocale WHERE IsActive =1 AND (LocaleId  = @LocaleId OR @LocaleId = 0 )
			
			SET @MaxCount = ISNULL((SELECT MAx(RowId) FROM @TBL_Locale),0)
			WHILE @IncrementalId <= @MaxCount
			BEGIN 
				SET @SetLocaleId = (SELECT Top 1 LocaleId FROM @TBL_locale WHERE RowId = @IncrementalId)
				IF @IsSingleProductPublish = 0
				Begin
					;With Cte_GetCMSSEODetails AS 
					(
							select CT.Name ItemName,CD.CMSSEODetailId, CDL.CMSSEODetailLocaleId ,  CD.CMSSEOTypeId ,
								 CD.SEOId ,CDL.SEOTitle,CDL.SEODescription,
								 CDL.SEOKeywords,Lower(CD.SEOUrl) SEOUrl,CD.IsRedirect,CD.MetaInformation,
								 CDL.LocaleId,
								 NULL OldSEOURL, 
								 NULL CMSContentPagesId,CD.PortalId, CD.seoCode,CDL.CanonicalURL,CDL.RobotTag
								 from ZnodeCMSSEODetail CD 
								 INNER JOIN ZnodeCMSSEOType CT ON CD.CMSSEOTypeId = CT.CMSSEOTypeId 
								 INNER JOIN ZnodeCMSSEODetailLocale CDL ON CD.CMSSEODetailId = CDL.CMSSEODetailId 
								 WHERE (CDL.LocaleId = @SetLocaleId OR CDL.LocaleId = @DefaultLocaleId)  
								 AND (CD.PortalId = @PortalId  OR @PortalId  = 0 ) 
								 AND (Isnull(CD.SEOCode ,'') = @CMSSEOCode OR @CMSSEOCode = '' )
								 AND (Exists  (SELECT TOP 1 1 FROM dbo.Split(@CMSSEOTypeId ,',') SP WHERE SP.Item = CD.CMSSEOTypeId ) )
							 Union All 
							 select CT.Name ItemName,CD.CMSSEODetailId, CDL.CMSSEODetailLocaleId ,  CD.CMSSEOTypeId ,
								 CD.SEOId ,CDL.SEOTitle,CDL.SEODescription,
								 CDL.SEOKeywords,Lower(CD.SEOUrl) SEOUrl,CD.IsRedirect,CD.MetaInformation,
								 CDL.LocaleId,
								 NULL OldSEOURL, 
								 NULL CMSContentPagesId,ZPB.PortalId, CD.seoCode,CDL.CanonicalURL,CDL.RobotTag
								 from ZnodeCMSSEODetail CD 
								 INNER JOIN ZnodeCMSSEOType CT ON CD.CMSSEOTypeId = CT.CMSSEOTypeId 
								 INNER JOIN ZnodeCMSSEODetailLocale CDL ON CD.CMSSEODetailId = CDL.CMSSEODetailId 
								 INNER JOIN ZnodeBrandDetails ZBD ON CD.SeoCode = ZBD.BrandCode
								 INNER JOIN ZnodePortalBrand ZPB ON ZBD.BrandId = ZPB.BrandId
								 WHERE (CDL.LocaleId = @SetLocaleId OR CDL.LocaleId = @DefaultLocaleId)  
								 AND (Isnull(CD.SEOCode ,'') = @CMSSEOCode OR @CMSSEOCode = '' )
								 AND (CT.Name = 'Brand' ) 
								 AND @IsCatalogPublish= 1 
					)
					, Cte_GetFirstCMSSEODetails  AS
					(
						SELECT 
							ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
							SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation, LocaleId ,OldSEOURL,CMSContentPagesId,
							PortalId,SEOCode,CanonicalURL,RobotTag	
						FROM Cte_GetCMSSEODetails 
						WHERE LocaleId = @SetLocaleId
					)
					, Cte_GetDefaultFilterData AS
					(
						SELECT 
							ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
							SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,LocaleId,OldSEOURL,CMSContentPagesId,
							PortalId,SEOCode,CanonicalURL,RobotTag	  FROM  Cte_GetFirstCMSSEODetails 
						UNION ALL 
						SELECT 
							ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
							SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,LocaleId,OldSEOURL,CMSContentPagesId,
							PortalId,SEOCode,CanonicalURL,RobotTag	 FROM Cte_GetCMSSEODetails CTEC 
						WHERE LocaleId = @DefaultLocaleId 
						AND NOT EXISTS (SELECT TOP 1 1 FROM Cte_GetFirstCMSSEODetails CTEFD WHERE CTEFD.CMSSEOTypeId = CTEC.CMSSEOTypeId 
						and CTEFD.seoCode = CTEC.seoCode )
					)
	
					INSERT INTO @TBL_SEO (ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
					SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,LocaleId,OldSEOURL,CMSContentPagesId,
					PortalId,SEOCode,CanonicalURL,RobotTag)
					SELECT 
						ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
						SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,@SetLocaleId,OldSEOURL,CMSContentPagesId,
						PortalId,SEOCode,CanonicalURL,RobotTag	
					FROM Cte_GetDefaultFilterData  A 

					End 
					Else If @IsSingleProductPublish = 1  
						INSERT INTO @TBL_SEO (ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
						SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,LocaleId,OldSEOURL,CMSContentPagesId,
						PortalId,SEOCode,CanonicalURL,RobotTag)
							SELECT CT.Name ItemName,CD.CMSSEODetailId, CDL.CMSSEODetailLocaleId ,  CD.CMSSEOTypeId ,
							CD.SEOId ,CDL.SEOTitle,CDL.SEODescription,
							CDL.SEOKeywords,Lower(CD.SEOUrl) SEOUrl,CD.IsRedirect,CD.MetaInformation,
							CDL.LocaleId,
							NULL OldSEOURL, 
							NULL CMSContentPagesId,CD.PortalId, CD.seoCode,CDL.CanonicalURL,CDL.RobotTag
							from ZnodeCMSSEODetail CD 
							INNER JOIN ZnodeCMSSEOType CT ON CD.CMSSEOTypeId = CT.CMSSEOTypeId 
							INNER JOIN ZnodeCMSSEODetailLocale CDL ON CD.CMSSEODetailId = CDL.CMSSEODetailId 
							WHERE (CDL.LocaleId = @LocaleId )  
							AND (CD.PortalId = @PortalId  ) 
							AND (Isnull(CD.SEOCode ,'') = @CMSSEOCode OR @CMSSEOCode = '' )
							AND (Exists  (SELECT TOP 1 1 FROM dbo.Split(@CMSSEOTypeId ,',') SP WHERE SP.Item = CD.CMSSEOTypeId ) )

				SET @IncrementalId = @IncrementalId +1 
			END 
		End 
		End			

	If @IsPreviewEnable = 1 AND (@RevisionState like '%Preview%' OR  @RevisionState like '%Production%')  AND @IsSingleProductPublish = 0
	Begin
	    --Data inserted into flat table ZnodePublishSeoEntity (Replica of MongoDB Collection )  
		Delete from ZnodePublishSeoEntity where PortalId = @PortalId  and VersionId  in (Select PreviewVersionId  from @TBL_PreviewVersionId ) 
		AND (SEOCode = @CMSSEOCode OR @CMSSEOCode = '' )
		AND (Exists  (SELECT TOP 1 1 FROM dbo.Split(@CMSSEOTypeId ,',') SP WHERE SP.Item = CMSSEOTypeId ) )
		AND @IsCatalogPublish= 0   

		If @IsCatalogPublish= 0
			Insert Into ZnodePublishSeoEntity 
			(
				VersionId,PublishStartTime,ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
				SEOTypeName,SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,LocaleId,OldSEOURL,CMSContentPagesId,
				PortalId,SEOCode,CanonicalURL,RobotTag	
			)
			SELECT B.PreviewVersionId , Getdate(), ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
				ItemName,SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,A.LocaleId,OldSEOURL,Isnull(CMSContentPagesId,0),
				A.PortalId,SEOCode,CanonicalURL,RobotTag
			FROM @TBL_SEO A Inner join @TBL_PreviewVersionId B on A.PortalId = B.PortalId and A.LocaleId = B.LocaleId

		If @IsCatalogPublish= 1 
			Insert Into ZnodePublishSeoEntity 
			(
				VersionId,PublishStartTime,ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
				SEOTypeName,SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,LocaleId,OldSEOURL,CMSContentPagesId,
				PortalId,SEOCode,CanonicalURL,RobotTag	
			)
			SELECT B.VersionId , Getdate(), ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
				ItemName,SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,A.LocaleId,OldSEOURL,Isnull(CMSContentPagesId,0),
				A.PortalId,SEOCode,CanonicalURL,RobotTag
			FROM @TBL_SEO A Inner join #VesionIds B on A.LocaleId = B.LocaleId Where B.RevisionType = 'PREVIEW'

	End

	-------------------------- End Preview 
	If (@RevisionState like '%Production%' OR @RevisionState = 'None') and @IsSingleProductPublish = 0
	Begin
		-- Only production version id will process 
		Delete from ZnodePublishSeoEntity where PortalId = @PortalId  and VersionId in (Select ProductionVersionId from  @TBL_ProductionVersionId ) 
		AND (SEOCode = @CMSSEOCode OR @CMSSEOCode = '' )
		AND (Exists  (SELECT TOP 1 1 FROM dbo.Split(@CMSSEOTypeId ,',') SP WHERE SP.Item = CMSSEOTypeId ) )
		AND @IsCatalogPublish= 0   

		If @IsCatalogPublish= 0 				
			Insert Into ZnodePublishSeoEntity 
			(
				VersionId,PublishStartTime,ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
				SEOTypeName,SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,LocaleId,OldSEOURL
				,CMSContentPagesId,	PortalId,SEOCode,CanonicalURL,RobotTag	
			)
			SELECT B.ProductionVersionId , Getdate(), ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
				ItemName,SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,A.LocaleId,OldSEOURL,Isnull(CMSContentPagesId,0),
				A.PortalId,SEOCode,CanonicalURL,RobotTag
			FROM @TBL_SEO A Inner join @TBL_ProductionVersionId B on A.PortalId = B.PortalId and A.LocaleId = B.LocaleId
	   If @IsCatalogPublish= 1 				
			Insert Into ZnodePublishSeoEntity 
			(
				VersionId,PublishStartTime,ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
				SEOTypeName,SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,LocaleId,OldSEOURL
				,CMSContentPagesId,	PortalId,SEOCode,CanonicalURL,RobotTag	
			)
			SELECT B.VersionId , Getdate(), ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
				ItemName,SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,A.LocaleId,OldSEOURL,Isnull(CMSContentPagesId,0),
				A.PortalId,SEOCode,CanonicalURL,RobotTag
			FROM @TBL_SEO A Inner join #VesionIds B on A.LocaleId = B.LocaleId AND B.RevisionType = 'PRODUCTION'
	
	End

	--Single Product Publish 
	If @IsSingleProductPublish =1  
	Begin
			Delete from ZnodePublishSeoEntity where PortalId = @PortalId  and VersionId in (Select Item from Split(@VersionIdString,',')) 
			AND (SEOCode = @CMSSEOCode OR @CMSSEOCode = '' )
			AND (Exists  (SELECT TOP 1 1 FROM dbo.Split(@CMSSEOTypeId ,',') SP WHERE SP.Item = CMSSEOTypeId ) )
		
			Insert Into ZnodePublishSeoEntity 
			(
				VersionId,PublishStartTime,ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
				SEOTypeName,SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,LocaleId,OldSEOURL
				,CMSContentPagesId,	PortalId,SEOCode,CanonicalURL,RobotTag	
			)
			SELECT (Select Item from Split(@VersionIdString,',')), Getdate(), ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
				ItemName,SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,@LocaleId,OldSEOURL,Isnull(CMSContentPagesId,0),
				A.PortalId,SEOCode,CanonicalURL,RobotTag
			FROM @TBL_SEO A 
		
	end 
			If (@RevisionState = 'Preview'  )
			Update B SET PublishStateId = (select dbo.Fn_GetPublishStateIdForPreview()) , ISPublish = 1 
			from @TBL_SEO  A inner join ZnodeCMSSEODetail B  ON A.CMSSEODetailId  = B.CMSSEODetailId
			else If (@RevisionState = 'Production'  Or @RevisionState = 'None' )
			Update B SET PublishStateId = (select dbo.Fn_GetPublishStateIdForPublish()) , ISPublish = 1 
			from @TBL_SEO  A inner join ZnodeCMSSEODetail B  ON A.CMSSEODetailId  = B.CMSSEODetailId
	SET @Status =1 
END TRY 
BEGIN CATCH 
	SET @Status =0  
	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
	@ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeSetPublishSEOEntity 
	@PortalId = '+CAST(@PortalId AS VARCHAR	(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10))
	+',@PreviewVersionId = ' + CAST(@PreviewVersionId  AS varchar(20))
	+',@ProductionVersionId = ' + CAST(@ProductionVersionId  AS varchar(20))
	+',@RevisionState = ''' + CAST(@RevisionState  AS varchar(50))
	+''',@CMSSEOTypeId= ' + CAST(@CMSSEOTypeId  AS varchar(20))
	+',@UserId = ' + CAST(@UserId AS varchar(20))
	+',@CMSSEOCode  = ''' + CAST(@CMSSEOCode  AS varchar(20)) + '''';
	        			 
	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'ZnodeSetPublishSEOEntity',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;

END CATCH
END
go
IF NOT EXISTS(SELECT 1 FROM sys.columns
WHERE Name = N'SalesRepId'
AND Object_ID = Object_ID(N'dbo.ZnodeAccount'))
BEGIN
Alter table ZnodeAccount add [SalesRepId] [int] NULL
END
go
IF EXISTS(Select * from sys.procedures where name = 'Znode_GetSalesRepUsersByPortal')
	drop proc Znode_GetSalesRepUsersByPortal
go
Create PROCEDURE [dbo].[Znode_GetSalesRepUsersByPortal]  
(   
 @RoleName  VARCHAR(200)='',  
    @WhereClause VARCHAR(MAX)  = '',  
    @Rows   INT           = 100,  
    @PageNo   INT           = 1,  
    @Order_By  VARCHAR(1000) = '',  
    @RowCount  INT        = 0 OUT,  
 @PortalId int = 0  
)  
AS  
--[Znode_GetSalesRepUsers] @PortalId = 0  
begin  
  set nocount on  
  
  declare @SQL nvarchar(max)  
  declare @PaginationWhereClause VARCHAR(300)= dbo.Fn_GetRowsForPagination(@PageNo, @Rows, ' WHERE RowId');  
  
  BEGIN TRY  
  
   if OBJECT_ID('tempdb..##CustomerUserAddDetails') is not null  
    drop table ##CustomerUserAddDetails  
  
   if OBJECT_ID('tempdb..##View_SalesRepUserAddDetails') is not null  
    drop table ##View_SalesRepUserAddDetails  
  
   -----Getting SalesRep users associated with Portals of @UserId (given user)  
   select a.UserId   
   into #SalesRepUser  
   from ZnodeUserPortal a  
   inner join ZnodeUser b on a.UserId = b.UserId   
   inner join AspNetUsers c on b.AspNetUserId = c.Id  
   inner join AspNetUserRoles d on c.Id = d.UserId  
   inner join AspNetRoles e on d.RoleId = e.Id  
   where e.Name = 'Sales Rep'  
   and (a.PortalId = @PortalId or a.PortalId is null)  
        
   SELECT a.userId,a.AspNetuserId,azu.UserName,a.FirstName,a.MiddleName,a.LastName,a.PhoneNumber,  
    a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,  
    CONVERT( DATE, a.ModifiedDate) ModifiedDate,ur.RoleId,r.Name RoleName,  
    CASE  
     WHEN B.LockoutEndDateUtc IS NULL  
     THEN CAST(1 AS    BIT)  
     ELSE CAST(0 AS BIT)  
    END IsActive,  
    CAST(CASE WHEN ISNULL(LockoutEndDateUtc, 0) = 0 THEN  0 ELSE  1 END  AS    BIT) AS IsLock,  
    (ISNULL(RTRIM(LTRIM(a.FirstName)), '')+' '+ISNULL(RTRIM(LTRIM(a.MiddleName)), '')  
     +CASE  
      WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '') = ''  
      THEN ''  
      ELSE ' '  
     END+ISNULL(RTRIM(LTRIM(a.LastName)), '')) FullName,  
    e.Name AccountName,a.AccountId,a.ExternalId,  
    CASE  
     WHEN a.AccountId IS NULL  
     THEN 0  
     ELSE 1  
    END IsAccountCustomer,  
    a.BudgetAmount,r.TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser  
    ,a.CustomerPaymentGUID  
  into ##View_SalesRepUserAddDetails  
  FROM ZnodeUser a  
  left JOIN ASPNetUsers B ON(a.AspNetuserId = b.Id)  
  LEFT JOIN ZnodeAccount e ON(e.AccountId = a.AccountId)  
  LEFT JOIN AspNetUserRoles ur ON(ur.UserId = a.AspNetUserId)  
  LEFT JOIN AspNetRoles r ON(r.Id = ur.RoleId)                                 
  LEFT JOIN AspNetZnodeUser azu ON(azu.AspNetZnodeUserId = b.UserName)  
  WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeUSer ZUQ WHERE ZUQ.UserId = a.UserId AND ZUQ.EmailOptIn = 1 AND ZUQ.AspNetUserId IS NULL )  
  and exists(select * from #SalesRepUser SRU where a.UserId = SRU.UserId)  
  
 alter table ##View_SalesRepUserAddDetails   
 add DepartmentId int, PermissionsName varchar(200), PermissionCode varchar(200), DepartmentName varchar(300), AccountPermissionAccessId int,  
 AccountUserOrderApprovalId int, ApprovalName varchar(1000) , ApprovalUserId int, PortalId int , StoreName varchar(1000)  
 ,CountryName varchar(1000),CityName varchar(1000),StateName varchar(1000),PostalCode varchar(1000), CompanyName varchar(1000)  
  
 --To get data for DepartmentId  
 update CUD SET DepartmentId = i.DepartmentId  
 from ##View_SalesRepUserAddDetails cud  
 INNER JOIN ZnodeDepartmentUser i ON(i.UserId = cud.UserId)  
    
 --To get data for PermissionsName  
 update CUD SET PermissionsName = h.PermissionsName, PermissionCode = h.PermissionCode  
 from ##View_SalesRepUserAddDetails cud  
 INNER JOIN ZnodeAccountUserPermission f ON(f.UserId = cud.UserId)  
 INNER JOIN ZnodeAccountPermissionAccess g ON(g.AccountPermissionAccessId = f.AccountPermissionAccessId)  
 INNER JOIN ZnodeAccessPermission h ON(h.AccessPermissionId = g.AccessPermissionId)  
   
 --To get data for DepartmentName  
 update CUD SET DepartmentName = j.DepartmentName  
 from ##View_SalesRepUserAddDetails cud  
 INNER JOIN ZnodeDepartmentUser i ON(i.UserId = cud.UserId)  
 INNER JOIN ZnodeDepartment j ON(j.DepartmentId = i.DepartmentId)  
  
 --To get data for AccountPermissionAccessId  
 update CUD SET AccountPermissionAccessId = f.AccountPermissionAccessId  
 from ##View_SalesRepUserAddDetails cud  
 INNER JOIN ZnodeAccountUserPermission f ON(f.UserId = cud.UserId)  
  
 --To get data for AccountPermissionAccessId  
 update CUD SET AccountPermissionAccessId = f.AccountPermissionAccessId  
 from ##View_SalesRepUserAddDetails cud  
 INNER JOIN ZnodeAccountUserPermission f ON(f.UserId = cud.UserId)  
    
 --To get data for AccountUserOrderApprovalId  
 update CUD SET AccountUserOrderApprovalId = ZAUOA.AccountUserOrderApprovalId  
 from ##View_SalesRepUserAddDetails cud  
 INNER JOIN ZnodeAccountUserOrderApproval ZAUOA ON cud.UserId = ZAUOA.UserID  
    
 --To get data for ApprovalName,ApprovalUserId  
 update CUD SET ApprovalName = ISNULL(RTRIM(LTRIM(ZU.FirstName)), '')+' '+ISNULL(RTRIM(LTRIM(ZU.MiddleName)), '')  
         +CASE  
          WHEN ISNULL(RTRIM(LTRIM(ZU.MiddleName)), '') = ''  
          THEN ''  
          ELSE ' '  
         END,  
     ApprovalUserId = ZAUOA.ApprovalUserId  
 from ##View_SalesRepUserAddDetails cud  
 INNER JOIN ZnodeAccountUserOrderApproval ZAUOA ON cud.UserId = ZAUOA.UserID  
 INNER JOIN ZnodeUser ZU ON(ZU.UserId = ZAUOA.ApprovalUserId)  
    
 --To get data for PortalId  
 update CUD SET PortalId = CASE  
         WHEN cud.AccountId IS NULL  
         THEN up.PortalId  
         ELSE ZPA.PortalId  
        END   
 from ##View_SalesRepUserAddDetails cud  
 INNER JOIN ZnodeUserPortal up ON(up.UserId = cud.UserId)   
 INNER JOIN ZnodePortalAccount ZPA ON(ZPA.AccountId = cud.AccountId)   
    
 ----To get data for StoreName  
 create index Ind_##View_SalesRepUserAddDetails_UserId on ##View_SalesRepUserAddDetails(UserId)  
 update CUD SET StoreName = CASE WHEN zp.StoreName IS NULL THEN 'ALL' ELSE zp.StoreName END   
 from ##View_SalesRepUserAddDetails cud  
 LEFT JOIN ZnodeUserPortal up ON(up.UserId = cud.UserId)   
 LEFT JOIN ZnodePortal zp ON (up.PortalId = zp.PortalId)  
    
 ----To get data for StoreName  
 update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName  
 from ##View_SalesRepUserAddDetails a  
 inner join ZnodeAccountAddress ZAA on a.AccountId = ZAA.AccountId  
 inner  JOIN ZnodeAddress ZA on ZA.AddressId = ZAA.AddressId  
 where isnull(a.AccountId,0)<> 0-- is not null  
  
    
 ----To get data for CountryName, CityName, StateName, PostalCode, CompanyName  
 update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName  
 from ##View_SalesRepUserAddDetails a  
 inner join ZnodeAccountAddress ZAA on a.AccountId = ZAA.AccountId  
 inner  JOIN ZnodeAddress ZA on ZA.AddressId = ZAA.AddressId  
 where isnull(a.AccountId,0)<> 0-- is not null  
    
 update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName  
 from ##View_SalesRepUserAddDetails a  
 inner join ZnodeUserAddress ZUA on a.UserId = ZUA.UserId  
 inner  JOIN ZnodeAddress ZA on ZA.AddressId = zua.AddressId  
    
 SET @SQL = '     
   SELECT UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,  
   EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,IsActive,IsLock,FullName,  
   AccountName,PermissionsName,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId , ExternalId,  
   BudgetAmount,AccountUserOrderApprovalId,ApprovalName,ApprovalUserId,PermissionCode,CustomerPaymentGUID ,StoreName,PortalId,  
   CountryName, CityName, StateName, PostalCode, CompanyName  
   INTO #Cte_CustomerUserDetail  
   FROM ##View_SalesRepUserAddDetails a       
   WHERE 1=1 '+dbo.Fn_GetWhereClause(@WhereClause, ' AND ')+'   
       
  
   SELECT UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,  
   EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,IsActive,IsLock,FullName,  
   AccountName,PermissionsName,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId , ExternalId,  
   BudgetAmount,AccountUserOrderApprovalId,ApprovalName,ApprovalUserId,PermissionCode,CustomerPaymentGUID ,RANK()Over('+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC')+',UserId DESC) RowId ,StoreName,PortalId,  
   CountryName, CityName, StateName, PostalCode, CompanyName  
   into #AccountDetail  
   FROM #Cte_CustomerUserDetail -- genrate the unique rowid   
  
  
   SET @Count= ISNULL((SELECT  Count(1) FROM #AccountDetail    ),0)  
  
   SELECT DISTINCT UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,  
   EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,IsActive,IsLock,FullName,  
   AccountName,PermissionsName,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId , ExternalId,  
   BudgetAmount,AccountUserOrderApprovalId,ApprovalName,ApprovalUserId,PermissionCode ,CustomerPaymentGUID,StoreName,PortalId,  
   CountryName, CityName, StateName, PostalCode, CompanyName  
   ,Row_Number()Over('+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC')+',UserId DESC) RowNumber  
   into ##CustomerUserAddDetails  
   FROM #AccountDetail '+@PaginationWhereClause+' '+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC');  
   PRINT @SQL           
   EXEC SP_executesql @SQL,  
   N'@Count INT OUT',  
   @Count = @RowCount OUT;  
    
  SELECT UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,  
    EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,IsActive,IsLock,FullName,  
    AccountName,PermissionsName,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId , ExternalId,  
    BudgetAmount,AccountUserOrderApprovalId,ApprovalName,ApprovalUserId,PermissionCode ,CustomerPaymentGUID,StoreName,PortalId,  
    CountryName, CityName, StateName, PostalCode, CompanyName  
  from ##CustomerUserAddDetails  
  Order by RowNumber  
   
  if OBJECT_ID('tempdb..##CustomerUserAddDetails') is not null  
   drop table ##CustomerUserAddDetails  
  
  if OBJECT_ID('tempdb..##View_SalesRepUserAddDetails') is not null  
   drop table ##View_SalesRepUserAddDetails  
  
  END TRY  
         BEGIN CATCH  
            DECLARE @ERROR_PROCEDURE VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetSalesRepUsers @RoleName = '+@RoleName+' ,@WhereClause='+@WhereClause+' ,@Rows= '+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_By='+@Order_By+',@RowCount='+CAST(@RowCount AS VARCHAR(50))+',@PortalId='+CAST(@PortalId AS VARCHAR(50)) ;  
            EXEC Znode_InsertProcedureErrorLog  
            @ProcedureName    = 'Znode_GetSalesRepUsers',  
            @ErrorInProcedure = @ERROR_PROCEDURE,  
            @ErrorMessage     = @ErrorMessage,  
            @ErrorLine        = @ErrorLine,  
            @ErrorCall        = @ErrorCall;  
         END CATCH;  
end
go
INSERT INTO ZnodePaymentGateway (GatewayName,	WebsiteURL	,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate, GatewayCode )
SELECT 'Card Connect','https://cardpointe.com/',2,GETDATE(),2,GETDATE(), 'cardconnect'
WHERE NOT EXISTS(SELECT * FROM ZnodePaymentGateway WHERE GatewayCode = 'cardconnect')
go
IF EXISTS(Select * from sys.procedures where name = 'ZnodeReport_DashboardSales')
	drop proc ZnodeReport_DashboardSales
go
CREATE PROCEDURE [dbo].[ZnodeReport_DashboardSales]            
(                   
 @PortalId  bigint  = null,        
 @AccountId bigint  = null,    
 @SalesRepUserId int = 0                      
)            
AS             
/*            
    Summary:- This procedure is used to get the order details             
    Unit Testing:            
    EXEC ZnodeReport_DashboardSales            
*/            
  BEGIN            
  BEGIN TRY            
  SET NOCOUNT ON;            
          
  DECLARE @TotalNewCust int, @Frequency int, @TotalQuotes int, @TotalReturns int            
          
  DECLARE @TBL_CultureCurrency TaBLE (Symbol Varchar(100),CurrencyCode varchar(100))            
  INSERT INTO @TBL_CultureCurrency (Symbol,CurrencyCode)            
  SELECT Symbol,CultureCode from  ZnodeCulture ZC  -- Changed ZnodeCurrency to ZnodeCulture here.          
            
  DECLARE @PortalCurrencySymbol nvarchar(20)        
  DECLARE @DefaultCurrencySymbol nvarchar(20)          
    
  IF not exists(select * from ZnodeSalesRepCustomerUserPortal where SalesRepUserId = @SalesRepUserId)    
  SET @SalesRepUserId = 0   
  
  SET @PortalCurrencySymbol = [dbo].[Fn_GetPortalCurrencySymbol](CAST(@PortalID AS INTEGER) )        
  SET @DefaultCurrencySymbol = [dbo].[Fn_GetDefaultCurrencySymbol]()         
        
  IF @PortalCurrencySymbol IS NULL         
 UPDATE @TBL_CultureCurrency SET Symbol  =@DefaultCurrencySymbol WHERE  Symbol IS NULL        
  ELSE         
    UPDATE @TBL_CultureCurrency SET Symbol  =@PortalCurrencySymbol WHERE  Symbol IS NULL        
                 
 SELECT   count(*)  TotalOrders , sum(ZOOD.Total) TotalSales,      
 COALESCE (ZC.Symbol,[dbo].[Fn_GetPortalCurrencySymbol](CAST(@PortalId AS INTEGER)),[dbo].[Fn_GetDefaultCurrencySymbol]()) Symbol                
 INTO #CalculateTotalValues        
 FROM ZNodeOmsOrder ZOO            
 INNER JOIN ZnodeOmsOrderDetails ZOOD ON(ZOOD.OmsOrderId = ZOO.OmsOrderId AND IsActive = 1)            
 INNER JOIN ZNodePortal P ON (P.PortalID = ZOOD.PortalId )        
 LEFT JOIN ZnodeUser ZU ON (ZU.UserId = ZOOD.UserId)    
 LEFT JOIN @TBL_CultureCurrency ZC ON (ZC.CurrencyCode = ZOOD.CurrencyCode )            
 WHERE ZOOD.IsActive =1 AND             
         
(P.PortalId = @PortalId OR ISNULL(@PortalId,0)=0) AND  (ZU.AccountId = @AccountId OR ISNULL(@AccountId,0)=0)      
 and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = @SalesRepUserId and ZU.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)          
 Group by ZC.Symbol              
             
                
    -- this will CHECK for customer             
  SELECT @TotalNewCust = COUNT(*)         
  FROM View_CustomerUserDetail CUD  WHERE                       
  (CUD.PortalId=@PortalId OR ISNULL(@PortalId,0)=0) AND  (CUD.AccountId = @AccountId OR ISNULL(@AccountId,0)=0)    
      
  -- This will get quotes count       
  SELECT ZU.UserId, ZU.FirstName, ZU.MiddleName, ZU.LastName, ZU.Email , ZU.PhoneNumber          
  INTO #User          
  FROM ZnodeUser ZU           
  WHERE EXISTS(SELECT * FROM ZnodeOmsQuote ZOQ where ZU.UserId = ZOQ.UserID )    AND (ZU.AccountId = @AccountId OR ISNULL(@AccountId,0)=0)     
  and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = @SalesRepUserId and ZU.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)  
      
  Update ZOQ set OmsOrderStateId = (select top 1 OmsOrderStateId from ZnodeOMSOrderState where OrderStateName = 'EXPIRED')          
  from ZnodeOmsQuote ZOQ          
  Inner Join ZnodeOmsQuoteType ZOQT ON ZOQ.OmsQuoteTypeId = ZOQT.OmsQuoteTypeId          
  INNER JOIN #User U ON ZOQ.UserId = U.UserId           
  INNER JOIN ZnodePortal ZP ON ZOQ.PortalID = ZP.PortalID          
  INNER JOIN ZnodeOMSOrderState ZOOS ON ZOOS.OmsOrderStateId = ZOQ.OmsOrderStateId          
  where  (ZOQ.PortalID = @PortalId OR ISNULL(@PortalId,0)=0)          
  and cast(ZOQ.QuoteExpirationDate as date) < cast(GETDATE() as date)          
  and ZOQ.OmsOrderStateId <> (select top 1 OmsOrderStateId from ZnodeOMSOrderState where OrderStateName = 'EXPIRED')          
          
       
  Select @TotalQuotes = COUNT(*)                
          
  from ZnodeOmsQuote ZOQ          
  Inner Join ZnodeOmsQuoteType ZOQT ON ZOQ.OmsQuoteTypeId = ZOQT.OmsQuoteTypeId          
  INNER JOIN #User U ON ZOQ.UserId = U.UserId           
  INNER JOIN ZnodePortal ZP ON ZOQ.PortalID = ZP.PortalID          
  INNER JOIN ZnodeOMSOrderState ZOOS ON ZOOS.OmsOrderStateId = ZOQ.OmsOrderStateId          
  LEFT JOIN @TBL_CultureCurrency ZC ON (ZC.CurrencyCode = ZOQ.CultureCode )           
  where  (ZOQ.PortalID = @PortalId OR @PortalId = 0 OR @PortalId is null)          
  and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = @SalesRepUserId and U.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)      
      
  -- This will get returns count       
  select @TotalReturns = COUNT(*)               
   from ZnodeRmaReturnDetails ZRRD          
   inner join ZnodeUser ZU ON ZRRD.UserId = ZU.UserId          
   inner join ZnodePortal ZP ON ZRRD.PortalId = ZP.PortalId           
   inner join ZnodeRmaReturnState ZRRS on ZRRD.RmaReturnStateId = ZRRS.RmaReturnStateId          
   LEFT JOIN @TBL_CultureCurrency ZC ON (ZC.CurrencyCode = ZRRD.CultureCode )         
   where isnull(ZRRD.RmaReturnStateId,0) not in (select isnull(RmaReturnStateId,0) from ZnodeRmaReturnState where ReturnStateName = 'Not Submitted')          
   AND (ZRRD.PortalId = @PortalId OR @PortalId  =0 or @PortalId is null)  AND (ZU.AccountId = @AccountId OR ISNULL(@AccountId,0)=0)     
   and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = @SalesRepUserId and ZU.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)  
              
  SELECT  Sum(TotalOrders) AS TotalOrders,Sum(TotalSales) AS TotalSales,Symbol,@TotalNewCust AS TotalNewCust, @TotalQuotes as TotalQuotes, @TotalReturns as TotalReturns      
  INTO #TotalValues        
  FROM #CalculateTotalValues          
  GROUP BY Symbol            
              
  SELECT TotalOrders, [dbo].[Fn_GetDefaultPriceRoundOff](TotalSales) TotalSales            
  , TotalNewCust ,TotalOrders / @Frequency AS TotalAvgOrders,TotalQuotes,TotalReturns ,Symbol         
  FROM #TotalValues             
        
  END TRY            
  BEGIN CATCH            
  DECLARE @Status BIT ;            
 SET @Status = 0;            
 DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),            
 @ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeReport_DashboardSales @PortalId='+CAST(@PortalId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));            
                              
 SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                                
                
    EXEC Znode_InsertProcedureErrorLog            
    @ProcedureName = 'ZnodeReport_DashboardSales',            
    @ErrorInProcedure = @Error_procedure,            
    @ErrorMessage = @ErrorMessage,            
    @ErrorLine = @ErrorLine,            
    @ErrorCall = @ErrorCall;            
  END CATCH            
  END;
  go
  IF EXISTS(Select * from sys.procedures where name = 'ZnodeReport_DashboardTopAccounts')
	drop proc ZnodeReport_DashboardTopAccounts
go
CREATE PROCEDURE [dbo].[ZnodeReport_DashboardTopAccounts]              
(             
 @PortalId  bigint  = null,        
 @AccountId bigint  = null,    
 @SalesRepUserId int = 0                
)              
AS               
/*              
     Summary:- This procedure is used to get the order details               
    Unit Testing:              
     EXEC [ZnodeReport_DashboardTopAccount]              
*/              
     BEGIN              
  BEGIN TRY              
        SET NOCOUNT ON;     
 IF not exists(select * from ZnodeSalesRepCustomerUserPortal where SalesRepUserId = @SalesRepUserId)    
    SET @SalesRepUserId = 0             
  
  DECLARE @TopItem TABLE (ItemName nvarchar(100),CustomerName nvarchar(200),ItemId nvarchar(10), Total numeric(28,6),ItemDate datetime,Symbol NVARCHAR(10))             
              
    INSERT INTO @TopItem(ItemId, ItemName,CustomerName,ItemDate,Total,Symbol)          
        
 select ZA.AccountId,ZA.[Name], isnull(ZU.FirstNAme,'''')+' '+isnull(ZU.LastName,'') as UserName, ZU.CreatedDate,0,''        
 from ZnodeUser ZU       
 inner join  ZnodeAccount ZA on ZU.AccountId = ZA.AccountId      
 inner join  ZnodeUserPortal ZUP on ZUP.UserId = ZU.UserId          
 WHERE (ZUP.PortalId = @PortalId OR ISNULL(@PortalId,0) = 0) AND (ZU.AccountId = @AccountId OR  ISNULL(@AccountId,0) = 0)            
 and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = @SalesRepUserId and ZU.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)        
   SELECT TOP 5 ItemId, ItemName,CustomerName,ItemDate,Total,Symbol FROM @TopItem Order by  Convert(numeric,Total )  desc                
   END TRY              
              
   BEGIN CATCH              
   DECLARE @Status BIT ;              
       SET @Status = 0;              
       DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),              
    @ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeReport_DashboardTopAccount @PortalId = '+@PortalId;             
                                
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                                  
                  
             EXEC Znode_InsertProcedureErrorLog              
    @ProcedureName = 'ZnodeReport_DashboardTopAccount',              
    @ErrorInProcedure = @Error_procedure,              
    @ErrorMessage = @ErrorMessage,              
    @ErrorLine = @ErrorLine,              
    @ErrorCall = @ErrorCall;              
   END CATCH              
              
  END;
  go
  IF EXISTS(Select * from sys.procedures where name = 'Znode_GetGiftCardList')
	drop proc Znode_GetGiftCardList
go
CREATE PROCEDURE [dbo].[Znode_GetGiftCardList]  
(   
	@WhereClause NVARCHAR(max),  
    @Rows        INT            = 100,  
    @PageNo      INT            = 1,  
    @Order_BY    VARCHAR(1000)  = '',  
    @RowsCount   INT  out,  
	@PortalId varchar(100),  
	@ExpirationDate VARCHAR(100) = '',
	@SalesRepUserId int = 0 
  )    
AS   
/*  
    Summary: This procedure is used to find the GiftCardList of user for portal   
 Unit Testing:   
 declare @aa int  
 EXEC Znode_GetGiftCardList @WhereClause='Userid = 5 ' ,@PortalId ='1,2,3,4,6,7,9,10,1010,1011,1012,1013,1014,1015,1016,1020,1021,1023,1024,1025,1028,1029,1030',  @RowsCount= 0,@ExpirationDate = '2017-04-06'  
  
     EXEC Znode_GetGiftCardList @WhereClause='' ,@PortalId ='1',  @RowsCount= 0,@ExpirationDate = ''  ,@SalesRepUserId=2
*/  
  
     BEGIN  
         BEGIN TRY  
             SET NOCOUNT ON;  
             DECLARE @SQL NVARCHAR(MAX);  
    DECLARE @TBL_GiftCardList TABLE (StoreName NVARCHAR(MAX),Name NVARCHAR(600)  
            ,CardNumber NVARCHAR(600),CreatedDate DATETIME,StartDate DATETIME, ExpirationDate DATETIME  
            ,Amount NUMERIC(28,6),RemainingAmount NUMERIC(28,6),CustomerId INT,CustomerName NVARCHAR(512),AccountName NVARCHAR(512),IsActive BIT ,GiftCardId INT,UserId INT,CultureCode VARCHAR(100), RowId INT, CountNo INT, AccountCode nvarchar(100)  )  
	
	IF not exists(select * from ZnodeSalesRepCustomerUserPortal where SalesRepUserId = @SalesRepUserId)
				SET @SalesRepUserId = 0

    SET @SQL ='  
      DECLARE @TBL_PortalId TABLE (PortalId INT)  
                  INSERT INTO @TBL_PortalId    
      SELECT  ITEM  FROM dbo.split( '''+@PortalId+''','','') AS a;   
  
      ;WITH CTE_GetGiftCard AS  
      (  
      SELECT ZP.StoreName,ZGC.Name,CardNumber,ZGC.CreatedDate,StartDate, ExpirationDate,Amount,RemainingAmount,ZGC.UserId AS CustomerId,  
      CASE WHEN ZU.FirstName IS NULL THEN '''' ELSE ZU.FirstName END + CASE WHEN ZU.LastName IS NULL  THEN '''' ELSE '' ''+ZU.LastName END as CustomerName,ZA.Name As AccountName,ZGC.IsActive  
      ,GiftCardId, ZU.UserId,IsReferralCommission,zc.CultureCode AS CurrencyCode, ZA.AccountCode
      FROM ZnodeGiftCard ZGC   
      INNER JOIN ZnodePortal ZP ON (ZGC.PortalId = ZP.PortalId)  
      INNER JOIN ZnodePortalUnit zpu on (zp.PortalId = zpu.PortalId)  
      LEFT JOIN ZnodeCulture zc on (zc.CultureId = zpu.CultureId)  
      LEFT JOIN ZnodeUser ZU ON (ZU.UserId = ZGC.UserId)  
	  LEFT JOIN ZnodeAccount ZA ON (ZA.AccountId= ZU.AccountId)
      LEFT JOIN @TBL_PortalId TP ON (TP.PortalId = ZGC.PortalId)  
      WHERE ((CONVERT(date,''' +@ExpirationDate+''' ) <= CONVERT(DATE,ZGC.ExpirationDate) OR ZGC.ExpirationDate IS  NULL)  OR '''+@ExpirationDate+''' = '''') AND ZGC.PortalId in ('+@PortalId+') 
	  and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = '+cast(@SalesRepUserId as varchar(10))+' and ZGC.UserId = SalRep.CustomerUserid) or '+cast(@SalesRepUserId as varchar(10))+' = 0)
      )  
      , CTE_GetGiftCardList AS  
      (  
      SELECT StoreName,Name,CardNumber,CreatedDate,StartDate,ExpirationDate,Amount,RemainingAmount,CustomerId,CustomerName,AccountName,IsActive,GiftCardId,UserId,CurrencyCode, AccountCode, 
      '+dbo.Fn_GetPagingRowId(@Order_BY,'GiftCardId DESC')+',Count(*)Over() CountNo   
      FROM CTE_GetGiftCard  
      WHERE 1=1 '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'       
      )  
  
      SELECT StoreName,Name,CardNumber,CreatedDate,StartDate,ExpirationDate,Amount,RemainingAmount,CustomerId,CustomerName,AccountName,IsActive,GiftCardId,UserId,CurrencyCode,RowId,CountNo, AccountCode  
      FROM CTE_GetGiftCardList  
      '+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)  
       
     
   INSERT INTO @TBL_GiftCardList  
   EXEC(@SQL)  
  
   SET @RowsCount =ISNULL((SELECT TOP 1 CountNo FROM @TBL_GiftCardList ),0)  
     
   SELECT StoreName,Name,CardNumber,CreatedDate,StartDate,ExpirationDate,Amount,RemainingAmount,CustomerId,CustomerName,AccountName,IsActive,GiftCardId,UserId,CultureCode, AccountCode 
   FROM @TBL_GiftCardList  
  
      END TRY  
   BEGIN CATCH  
    DECLARE @Status BIT ;  
       SET @Status = 0;  
       DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),  
    @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetGiftCardList @WhereClause = '+CAST(@WhereClause AS VARCHAR(MAX))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@PortalId='+@PortalId+',@ExpirationDate='+CAST(@ExpirationDate AS VARCHAR(50))+'@Status='+CAST(@Status AS VARCHAR(10));  
                    
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                      
      
             EXEC Znode_InsertProcedureErrorLog  
    @ProcedureName = 'Znode_GetGiftCardList',  
    @ErrorInProcedure = @Error_procedure,  
    @ErrorMessage = @ErrorMessage,  
    @ErrorLine = @ErrorLine,  
    @ErrorCall = @ErrorCall;  
   END CATCH  
     END
go
IF EXISTS(Select * from sys.procedures where name = 'Znode_GetOmsQuoteList')
	drop proc Znode_GetOmsQuoteList
go
CREATE PROCEDURE [dbo].[Znode_GetOmsQuoteList]    
(     
  @WhereClause NVARCHAR(MAX),    
  @Rows        INT            = 100,    
  @PageNo      INT            = 1  ,    
  @Order_BY    VARCHAR(1000)  = '' ,    
  @RowsCount   INT OUT             ,    
  @AccountId   INT,    
  @UserId      INT            = 0,     
  @IsPendingPayment BIT = 0  ,     
  @IsParentPendingOrder  BIT = 1,
  @SalesRepUserId int = 0    
  )    
AS     
   /*    
  Summary :- This procedure is used to get the Quote list of account and Users    
    Fn_GetRecurciveAccounts is used to fetch AccountId and Its recursive ParentId      
    @InnerWhereClause contains AccountId fetched from the Function Fn_GetRecurciveAccounts     
    OrderDetails are fetched from the tables filtered by AccountId Present in @InnerWhereClause    
    OrderDetails are fetched in Descending order of OmsQuoteId    
     Unit Testing     
     
     EXEC Znode_GetOmsQuoteList '' ,@RowsCount = 50 ,@AccountId = 1,@UserId = 0      
    
*/    
     BEGIN    
         BEGIN TRY    
			SET NOCOUNT ON;    
			DECLARE @SQL NVARCHAR(MAX)= '', @InnerWhereClause VARCHAR(MAX)= '', @ProcessType  varchar(50)='Quote',@QuoteFilter NVARCHAr(max)='';    
			
			IF not exists(select * from ZnodeSalesRepCustomerUserPortal where SalesRepUserId = @SalesRepUserId)
				SET @SalesRepUserId = 0

            DECLARE @TBL_QuoteDetails TABLE (OmsQuoteId INT,UserName NVARCHAR(300),AccountName NVARCHAR(400),QuoteOrderTotal NUMERIC(28, 6),[OrderStatus] VARCHAR(300),    
            CreatedDate DATETIME,StoreName NVARCHAR(Max),CurrencyCode VARCHAR(100),CultureCode VARCHAR(100),PublishState nvarchar(600),RowId INT,CountNo INT,CreatedByName NVARCHAr(max) ,ModifiedByName NVARCHAR(max),IsConvertedToOrder bit,OrderType varchar(50), UserId INT, AccountCode nvarchar(100));    
           
             IF @UserId <> 0  AND @IsParentPendingOrder   = 1           
                 BEGIN    
                     SET @InnerWhereClause = ' AND '''+CAST(@UserId AS VARCHAR(max))+''' = ZU.UserId ';    
                    -- SET @AccountId = (SELECT TOP 1 AccountID FROM ZnodeUser WHERE UserId = @UserId);    
                 END    
             ELSE IF @IsParentPendingOrder   = 0     
                BEGIN    
				SET @InnerWhereClause = ' AND  EXISTS (SELECT TOP 1 1 FROM [dbo].[Fn_GetRecurciveUserId] ('+CAST(@UserId AS VARCHAR(50))+','''+@ProcessType+''') SP WHERE (SP.UserId = ZU.UserId OR SP.UserId IS NULL)  )';   
   
				SET @QuoteFilter =' AND EXISTS (SELECT TOP 1 1 FROM ZnodeOMSQuoteApproval WR WHERE WR.OmsQuoteId = ZOQ.OmsQuoteId AND ( Wr.ApproverUserId ='+CAST(@UserId AS VARCHAR(50))+' OR Wr.UserId = '+CAST(@UserId AS VARCHAR(50))+'  ) ) ';        
				END    
    ELSE     
    BEGIN     
      SET @InnerWhereClause = ''    
    END       
          
    IF @IsPendingPayment =1     
    BEGIN     
       
     SET @InnerWhereClause = @InnerWhereClause+' AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodeUserGlobalAttributeValue a     
    INNER JOIN ZnodeUserGlobalAttributeValueLocale b  on (b.UserGlobalAttributeValueId = a.UserGlobalAttributeValueId)    
    INNER JOIN ZnodeGlobalAttribute c ON (c.GlobalAttributeid = a.GlobalAttributeId )    
    WHERE c.AttributeCOde = ''BillingAccountNumber'' AND a.UserId =  ZU.UserId AND b.AttributeValue = '''' ) AND ZOQ.IsPendingPayment =  1    '    
         
    END     
    ELSE     
    BEGIN    
       SET @InnerWhereClause = @InnerWhereClause+' AND ZOQ.IsPendingPayment = 0   '    
    END     
    
    SET @InnerWhereClause = @InnerWhereClause + CASE WHEN @AccountId > 0 THEN ' AND ZA.AccountId ='+CAST(@AccountId AS VARCHAR(200)) ELSE '' END     
    
    SET @SQL = '       
		;With Cte_GetQuoteDetail AS     
		(    
		SELECT Zu.UserId ,ZOQ.OmsQuoteId,ZU.FirstName + CASE WHEN ZU.LastName IS NULL THEN '''' ELSE '' ''+Zu.LastName END UserName , QuoteOrderTotal , ZOOS.Description [OrderStatus]    
		,ZOQ.CreatedDate,ZA.Name AccountName,ZP.PortalId,Zp.StoreName , ZCC.CurrencyCode AS CurrencyCode, ZC.CultureCode AS CultureCode ,ZVGD.UserName CreatedByName , ZVGDI.UserName ModifiedByName,    
		case When ZOQ.IsConvertedToOrder IS NULL THEN 0 ELSE ZOQ.IsConvertedToOrder END IsConvertedToOrder,ISNULL(DT.QuoteTypeCode,'''') QuoteTypeCode,ZODPS.DisplayName as PublishState,
		'+case when cast(@IsParentPendingOrder as varchar(10)) = 0  then +'Case  When TYUI.ApproverUserId ='+CAST(@UserId AS VARCHAR(50))  + ' then ''Approval Requested'' 
		else ''Pending For Approval'' END' else '''''' end +' OrderType, ZA.AccountCode    
		FROM ZnodeOmsQuote ZOQ    
		INNER JOIN ZnodeUser ZU ON (ZU.UserId = ZOQ.UserId)    
		LEFT JOIN ZnodePublishState ZODPS ON (ZODPS.PublishStateId = ZOQ.PublishStateId)  
		LEFT JOIN ZnodeUserPortal ZUP ON ZU.UserId = ZUP.UserId    
		inner JOIN ZnodePortal ZP ON ZP.PortalId = Zoq.PortalId    
		'+CASE WHEN @IsParentPendingOrder = 0  THEN ' LEFT JOIN ZnodeOMSQuoteApproval TYUI ON (TYUI.OmsQuoteId = ZOQ.OmsQuoteId AND TYUI.ApproverUserId ='+CAST(@UserId AS VARCHAR(50))+' ) ' ELSE '' END +'    
		LEFT JOIN ZnodePortalUnit ZPU ON (ZPU.PortalId = Zp.PortalId)    
		LEFT JOIN ZnodeCulture ZC ON (ZPU.CultureId = ZC.CultureId)    --- Changed join condition from CurrencyId to CultureId    
		LEFT JOIN ZnodeCurrency ZCC ON (ZC.CurrencyId = ZCC.CurrencyId)    --- Joined ZnodeCulture and ZnodeCurrency   
		LEFT JOIN ZnodeOmsOrderState ZOOS ON (ZOOS.OmsOrderStateId = '+CASE WHEN @IsParentPendingOrder = 0 AND EXISTS (SELECT TOP 1 1 FROM ZnodeOMSQuoteApproval OQ WHERE OQ.ApproverUserId = @UserId) THEN 'TYUI.OmsOrderStateId ' ELSE 'ZOQ.OmsOrderStateId' END  +' )     
		LEFT JOIN ZnodeAccount ZA ON (ZA.AccountId = ZU.AccountId )    
		LEFT JOIN [dbo].[View_GetUserDetails]  ZVGD ON (ZVGD.UserId = ZOQ.CreatedBy )    
		LEFT JOIN [dbo].[View_GetUserDetails]  ZVGDI ON (ZVGDI.UserId = ZOQ.ModifiedBy)    
		INNER JOIN ZnodeOmsQuoteType DT ON (DT.OmsQuoteTypeId = ZOQ.OmsQuoteTypeId)    
		WHERE DT.OmsQuoteTypeId <> (select top 1 OmsQuoteTypeId from ZnodeOmsQuoteType where QuoteTypeCode = ''QUOTE'')'+' '+@InnerWhereClause+@QuoteFilter+'    
		and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = '+cast(@SalesRepUserId as varchar(10))+' and ZOQ.UserId = SalRep.CustomerUserid) or '+cast(@SalesRepUserId as varchar(10))+' = 0)
		)    
		, Cte_GetQuote AS     
		(    
		SELECT OmsQuoteId,UserName ,AccountName , QuoteOrderTotal QuoteAmount, [OrderStatus]  ,CreatedDate ,StoreName,CurrencyCode, CultureCode,PublishState,CreatedByName , ModifiedByName ,IsConvertedToOrder,OrderType,'+dbo.Fn_GetPagingRowId(@Order_BY,'CreatedDate DESC
		,OmsQuoteId DESC')+',Count(*)Over() CountNo ,UserId, AccountCode      
		FROM Cte_GetQuoteDetail    
		WHERE 1=1     
		'+dbo.Fn_GetFilterWhereClause(@WhereClause)+'    
		)    
		SELECT OmsQuoteId,UserName ,AccountName ,  QuoteAmount, [OrderStatus]  ,CreatedDate ,StoreName,CurrencyCode, CultureCode,PublishState,RowId,CountNo,CreatedByName , ModifiedByName,IsConvertedToOrder,OrderType, UserId , AccountCode   
		FROM Cte_GetQuote     
		'+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)    
      print @SQL
        INSERT INTO @TBL_QuoteDetails (OmsQuoteId, UserName, AccountName, QuoteOrderTotal ,OrderStatus, CreatedDate, StoreName,CurrencyCode, CultureCode,PublishState, RowId ,CountNo,CreatedByName , ModifiedByName,IsConvertedToOrder,OrderType, UserId, AccountCode)          
        EXEC (@SQL);    
        SET @RowsCount = ISNULL((SELECT TOP 1 CountNo FROM @TBL_QuoteDetails), 0);    
    
        SELECT  OmsQuoteId,UserName,AccountName,QuoteOrderTotal,[OrderStatus],CreatedDate,StoreName,CurrencyCode, CultureCode,PublishState,CreatedByName , ModifiedByName,IsConvertedToOrder  ,OrderType , UserId, AccountCode 
        FROM @TBL_QuoteDetails;    
        
         END TRY    
         BEGIN CATCH    
		DECLARE @Status BIT ;    
		SET @Status = 0;    
		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetOmsQuoteList @WhereClause = '+CAST(@WhereClause AS VARCHAR(max)  
		)+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@AccountId='+CAST(@AccountId AS VARCHAR(50))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@PortalId='+''  
		+',@Status='+CAST(@Status AS VARCHAR(10));    
                      
		SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                        
        
		EXEC Znode_InsertProcedureErrorLog    
		@ProcedureName = 'Znode_GetOmsQuoteList',    
		@ErrorInProcedure = @Error_procedure,    
		@ErrorMessage = @ErrorMessage,    
		@ErrorLine = @ErrorLine,    
		@ErrorCall = @ErrorCall;    
         END CATCH;    
     END
go
IF EXISTS(Select * from sys.procedures where name = 'Znode_GetQuoteList')
	drop proc Znode_GetQuoteList
go
CREATE PROCEDURE [dbo].[Znode_GetQuoteList]
( 
	
	@WhereClause NVARCHAR(MAx) = '',
	@Rows        INT            = 100,
    @PageNo      INT            = 1,
    @Order_BY    VARCHAR(1000)  = '',
    @RowsCount   INT OUT			,
    @UserId	   INT = 0,
	@OmsQuoteTypeId int,
	@SalesRepUserId int = 0
)
AS
  /*
     Summary : This procedure is used to get the oms order detils
			   Records are fetched for those users who placed the order i.e UserId is Present in ZnodeUser and  ZnodeOmsOrderDetails tables
	 Unit Testing:

     EXEC Znode_GetQuoteList @Order_BY = '',@RowsCount= 0, @UserId = 0 ,@Rows = 80, @PageNo = 1, @OmsQuoteTypeId=1,@SalesRepUserId=0

*/
BEGIN
SET NOCOUNT ON;
BEGIN TRY
	DECLARE @SQL nvarchar(max) = ''

	IF not exists(select * from ZnodeSalesRepCustomerUserPortal where SalesRepUserId = @SalesRepUserId)
				SET @SalesRepUserId = 0

	Create Table #QuoteInfo(OmsQuoteId int, QuoteNumber varchar(200),UserID int, CustomerName varchar(300), EmailID varchar(50), PhoneNumber varchar(50), PortalID int, StoreName varchar(500), QuoteStatus varchar(500),  TotalAmount numeric(28,6),QuoteDate datetime,QuoteExpirationDate  DateTime,CultureCode varchar(100),RowId int,CountNo int)

	SELECT ZU.UserId, ZU.FirstName, ZU.MiddleName, ZU.LastName, ZU.Email , ZU.PhoneNumber
	INTO #User
	FROM ZnodeUser ZU 
	WHERE EXISTS(SELECT * FROM ZnodeOmsQuote ZOQ where ZU.UserId = ZOQ.UserID )

	Update ZOQ set OmsOrderStateId = (select top 1 OmsOrderStateId from ZnodeOMSOrderState where OrderStateName = 'EXPIRED')
	from ZnodeOmsQuote ZOQ
	Inner Join ZnodeOmsQuoteType ZOQT ON ZOQ.OmsQuoteTypeId = ZOQT.OmsQuoteTypeId
	INNER JOIN #User U ON ZOQ.UserId = U.UserId 
	INNER JOIN ZnodePortal ZP ON ZOQ.PortalID = ZP.PortalID
	INNER JOIN ZnodeOMSOrderState ZOOS ON ZOOS.OmsOrderStateId = ZOQ.OmsOrderStateId
	where ZOQ.OmsQuoteTypeId = @OmsQuoteTypeId AND (ZOQ.UserId = @UserId OR @UserId = 0 )
	and cast(ZOQ.QuoteExpirationDate as date) < cast(GETDATE() as date)
	and ZOQ.OmsOrderStateId <> (select top 1 OmsOrderStateId from ZnodeOMSOrderState where OrderStateName = 'EXPIRED')

	Select ZOQ.OmsQuoteId, ZOQ.OmsQuoteTypeId,U.UserID, ZOQ.QuoteNumber as QuoteNumber,isnull(U.FirstName,'')+case when U.MiddleName is not null then ' ' else '' end+ isnull(U.MiddleName,'')+' '+isnull(U.LastName,'') as CustomerName,
	U.Email as EmailID ,U.PhoneNumber,ZP.PortalID,ZP.StoreName ,ZOQ.CreatedDate as QuoteDate,ZOOS.Description as QuoteStatus,ZOQ.QuoteOrderTotal as TotalAmount, ZOQ.QuoteExpirationDate , ZOQ.CultureCode
	into #QuoteDetail
	from ZnodeOmsQuote ZOQ
	Inner Join ZnodeOmsQuoteType ZOQT ON ZOQ.OmsQuoteTypeId = ZOQT.OmsQuoteTypeId
	INNER JOIN #User U ON ZOQ.UserId = U.UserId 
	INNER JOIN ZnodePortal ZP ON ZOQ.PortalID = ZP.PortalID
	INNER JOIN ZnodeOMSOrderState ZOOS ON ZOOS.OmsOrderStateId = ZOQ.OmsOrderStateId
	where ZOQ.OmsQuoteTypeId = @OmsQuoteTypeId AND (ZOQ.UserId = @UserId OR @UserId = 0 )
	and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = @SalesRepUserId and ZOQ.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)

	set @SQL = '
	;with cte_Quote_Detail as
	(
		select OmsQuoteId, QuoteNumber, UserID, CustomerName, EmailID, PhoneNumber, PortalID, StoreName, QuoteStatus, QuoteDate,
			   TotalAmount,QuoteExpirationDate, CultureCode , '+dbo.Fn_GetPagingRowId(@Order_BY,'OmsQuoteId DESC')+',Count(*)Over() CountNo
		from #QuoteDetail
		WHERE 1= 1 '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'
	)
	select OmsQuoteId, QuoteNumber, CustomerName, EmailID, PhoneNumber, PortalID, StoreName, QuoteStatus, QuoteDate,
			   TotalAmount,QuoteExpirationDate, CultureCode , RowId,CountNo
	from cte_Quote_Detail
	'+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)

	--print @SQL
	insert into #QuoteInfo(OmsQuoteId, QuoteNumber,  CustomerName, EmailID, PhoneNumber, PortalID, StoreName, QuoteStatus, QuoteDate, TotalAmount, QuoteExpirationDate, CultureCode , RowId,CountNo)
	EXEC(@SQL)

	select OmsQuoteId, QuoteNumber, CustomerName, EmailID, PhoneNumber, StoreName, QuoteStatus, QuoteDate, TotalAmount, QuoteExpirationDate, CultureCode
	from #QuoteInfo
	Order by RowId

	SET @RowsCount = ISNULL((SELECT TOP 1 CountNo FROM #QuoteInfo),0)

	IF OBJECT_ID('tempdb..#QuoteDetail') is not null
		DROP TABLE #QuoteDetail
	IF OBJECT_ID('tempdb..#QuoteInfo') is not null
		DROP TABLE #QuoteInfo
	IF OBJECT_ID('tempdb..#User') is not null
		DROP TABLE #User

END TRY
BEGIN CATCH
    DECLARE @Status BIT ;
	SET @Status = 0;
	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
	@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetQuoteList @WhereClause = '''+ISNULL(CAST(@WhereClause AS VARCHAR(max)),'''''')+''',@Rows='''+ISNULL(CAST(@Rows AS VARCHAR(50)),'''''')+''',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',
	@Order_BY='+ISNULL(@Order_BY,'''''')+',@UserId = '+ISNULL(CAST(@UserId AS VARCHAR(50)),'''')+',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''');
              			 
    SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
    EXEC Znode_InsertProcedureErrorLog
	@ProcedureName = 'Znode_GetQuoteList',
	@ErrorInProcedure = 'Znode_GetQuoteList',
	@ErrorMessage = @ErrorMessage,
	@ErrorLine = @ErrorLine,
	@ErrorCall = @ErrorCall;
END CATCH;
END
go
insert into ZnodeActions (Areaname,ControllerName,ActionName,IsGlobalAccess,CreatedBy, CreatedDate,ModifiedBy,ModifiedDate)
select null,'Customer','GetSalesRepListForAccount',0,2,GETUTCDATE(),2,GETUTCDATE()
where not exists(select * from ZnodeActions where ControllerName = 'Customer' and ActionName = 'GetSalesRepListForAccount')

 insert into ZnodeActionMenu (MenuId,ActionId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 
 (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Accounts' AND ControllerName = 'Account')	
    ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Customer' and ActionName= 'GetSalesRepListForAccount') ,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
     (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Accounts' AND ControllerName = 'Account') and ActionId = 
     (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Customer' and ActionName= 'GetSalesRepListForAccount'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy ,CreatedDate,	ModifiedBy, ModifiedDate )
select 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Accounts' AND ControllerName = 'Account')	
    ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Customer' and ActionName= 'GetSalesRepListForAccount')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Accounts' AND ControllerName = 'Account') and ActionId = 
(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Customer' and ActionName= 'GetSalesRepListForAccount'))
go
IF EXISTS(Select * from sys.procedures where name = 'Znode_AdminUsers')
	drop proc Znode_AdminUsers
go
CREATE PROCEDURE [dbo].[Znode_AdminUsers]
(	@RoleName		VARCHAR(200),
    @UserName		VARCHAR(200),
    @WhereClause	XML,
    @Rows			INT           = 100,
    @PageNo			INT           = 1,
    @Order_By		VARCHAR(1000) = '',
    @RowCount		INT        = 0 OUT,
	@IsCallOnSite   BIT = 0 ,
	@PortalId		VARCHAR(1000) = 0,
	@IsGuestUser    BIT = 0,
	@ColumnName     dbo.SelectColumnList ReadOnly,
	@SalesRepUserId int = 0
)
AS
   /* 
      Summary: List of users with detsils and shows link with ASPNet tables 
      This procedure is used for finding both users and admin users 
      here use three view "View_RoleUsers" for check  @UserName is present or not 
      "View_AdminUserDetail"  this view use for admin users 
      "View_CustomerUserDetail" Use for customer users 
      Unit Testing   
	  SELECT * FROM ZnodeUser 
      DECLARE @EDE INT=0  EXEC Znode_AdminUsers '','admin@znode.com',@WhereClause='',@Order_By='',@PageNo= 1 ,@Rows= 214,@IsCallOnSite='false',@PortalId=0,@RowCount=@EDE OUT  SELECT @EDE
   */
     BEGIN
         BEGIN TRY
            SET NOCOUNT ON;
			
            DECLARE @SQL NVARCHAR(MAX)= '', @PaginationWhereClause VARCHAR(300)= dbo.Fn_GetRowsForPagination(@PageNo, @Rows, ' WHERE RowId');
           
		   IF not exists(select * from ZnodeSalesRepCustomerUserPortal where SalesRepUserId = @SalesRepUserId)
				SET @SalesRepUserId = 0

			if OBJECT_ID('tempdb..##CustomerUserAddDetail') is not null
				drop table ##CustomerUserAddDetail

			if OBJECT_ID('tempdb..##View_CustomerUserAddDetail') is not null
				drop table ##View_CustomerUserAddDetail

			IF OBJECT_ID('tempdb..#TBL_RowCount') is not null
				DROP TABLE #TBL_RowCount
			Create table #TBL_RowCount(RowsCount int )
			-----Split where clause XMl 
			CREATE TABLE #WhereColumnList(RowId Int identity, filterName varchar(max), WhereCondition varchar(max))
			insert into #WhereColumnList(filterName,WhereCondition)
			SELECT 
					Tbl.Col.value('key[1]', 'varchar(max)') as filterName,
					Tbl.Col.value('condition[1]', 'varchar(max)') WhereCondition
			FROM   @WhereClause.nodes('//filter') Tbl(Col) 
			----Address column in global search
			declare @AddressGlobalSearch varchar(1000) =''
			declare @GlobalSearch varchar(100) = ''
			
			select @GlobalSearch = substring(WhereCondition,charindex(' like ',WhereCondition), charindex(' OR ',WhereCondition)-charindex(' like ',WhereCondition)) 
			from #WhereColumnList
			where filtername like '%|%'
			and filtername <> ''
			and filterName in ('CityName','CountryName','PostalCode','StateName','CompanyName') 

			

			if isnull(@GlobalSearch,'') <> ''
			begin
				select @AddressGlobalSearch = '('+'CityName '+ @GlobalSearch+' OR '+'CountryName '+ @GlobalSearch+' OR '+'PostalCode '+ @GlobalSearch+' OR '+'StateName '+ @GlobalSearch+' OR '+'CompanyName '+ @GlobalSearch+')'
			end
			else
			begin
				SET @AddressGlobalSearch = ''
			end
			----Global search where clause
			declare @WhereClauseGlobal varchar(1000)=''
			select @WhereClauseGlobal = ISNULL(WhereCondition,'')
			from #WhereColumnList
			where filtername like '%|%'
			and filtername <> ''
			
			----Where clause columns except Address columns
			declare @WhereClause1 varchar(max) = ''
			select @WhereClause1 = COALESCE(@WhereClause1 + '', '') + WhereCondition+' And '
			--case when @WhereClause1 <> ''  then ' And ' else '' end
			from #WhereColumnList a
			where filterName not like '%|%' and
			filterName not in ('CountryName','CityName','StateName','PostalCode','CompanyName')
			and filtername <> ''

			if @WhereClause1 <> ''
			begin
				set @WhereClause1=isnull(substring(@WhereClause1,1,len(@WhereClause1)-3),'')
			end
			else
			begin
				set @WhereClause1 = ''
			end

			----Where clause columns
			declare @AddressColumnWhereClause varchar(max) 
			select @AddressColumnWhereClause = COALESCE(@AddressColumnWhereClause + '', '') + WhereCondition+' And '
			from #WhereColumnList a
			where filterName not like '%|%' and
			filterName in ('CountryName','CityName','StateName','PostalCode','CompanyName')
			and filtername <> ''
			
			if isnull(@AddressColumnWhereClause,'') <> ''
			begin
				set @AddressColumnWhereClause=isnull(substring(@AddressColumnWhereClause,1,len(@AddressColumnWhereClause)-3),'')
            end
			else
			begin
				set @AddressColumnWhereClause = ''
			end

			declare @WhereClauseAll varchar(max) = ''
			select @WhereClauseAll = COALESCE(@WhereClauseAll + '', '') + WhereCondition+' And '
			from #WhereColumnList a
			

			set @WhereClauseAll=isnull(CASE WHEN @WhereClauseAll = '' THEN '' ELSE substring(@WhereClauseAll,1,len(@WhereClauseAll)-3) END ,'')
			-------------- 
			
			IF @PortalId  <> '0' 
			BEGIN 
			    SET @WhereClauseAll = CASE WHEN  @WhereClauseAll = '' THEN ' (PortalId IN ('+@PortalId+') OR PortalId IS NULL) ' ELSE @WhereClauseAll+' AND (PortalId IN ('+@PortalId+') OR PortalId IS NULL) ' END 

				SET @WhereClause1 = CASE WHEN  @WhereClause1 = '' THEN ' (isnull(PortalId,0) IN ('+@PortalId+') OR PortalId IS NULL) ' ELSE @WhereClause1+' AND (isnull(PortalId,0) IN ('+@PortalId+') OR PortalId IS NULL) ' END 
			
			END 

			IF EXISTS ( SELECT TOP 1 1 FROM View_RoleUsers  WHERE Username = @UserName   )  AND @RoleName <> ''  
			-- this check for admin user
       		BEGIN
				SET @SQL = ' SELECT  A.UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,A.CreatedBy,A.CreatedDate,A.ModifiedBy,A.ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId ,CustomerPaymentGUID
				INTO #Cte_AdminUserDetail
				FROM View_AdminUserDetail A
				'+CASE WHEN @PortalId  <> '0' THEN ' INNER JOIN ZnodeUserPortal ZUP ON (ZUP.UserId = A.UserId) 'ELSE '' END  +'	 
				'+dbo.Fn_GetWhereClause(@WhereClauseAll, ' WHERE ')+'
				
				;with Cte_AdminUserDetailRowId AS 
				(
				SELECT UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId,CustomerPaymentGUID ,RANK()Over('+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC')+',UserId DESC) RowId
				FROM  #Cte_AdminUserDetail a
				where (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = '+cast(@SalesRepUserId as varchar(10))+' and a.UserId = SalRep.CustomerUserid) or '+cast(@SalesRepUserId as varchar(10))+' = 0)
				)
					 
				SELECT UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId,CustomerPaymentGUID ,RowId 
				INTO #AccountDetails
				FROM Cte_AdminUserDetailRowId 
					 
				SET @Count= ISNULL((SELECT  Count(1) FROM #AccountDetails ),0)
					 
				SELECT DISTINCT UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId ,CustomerPaymentGUID
				FROM #AccountDetails '+@PaginationWhereClause+' '+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC' );
				EXEC SP_executesql
				@SQL,
				N'@Count INT OUT',
				@Count = @RowCount OUT;

				
			END;
			-- For Customer user
            ELSE   
			BEGIN
				IF @roleName = ''
				BEGIN
					if OBJECT_ID('tempdb..##CustomerUserAddDetail') is not null
					drop table ##CustomerUserAddDetail

					if OBJECT_ID('tempdb..##View_CustomerUserAddDetail') is not null
					drop table ##View_CustomerUserAddDetail
				
					if OBJECT_ID('tempdb..##UserList') is not null
					drop table ##UserList

					CREATE TABLE ##UserList(UserId int,AddressID int)

					declare @UserList varchar(1000)=''

					------To get the list of user having adress column in global search
					if (@AddressGlobalSearch <> '')
					begin
				
					set @UserList = 'select a.UserId, b.AddressID	from ZnodeUserAddress a	inner join ZnodeAddress b on a.AddressId = b.AddressId	where '+@AddressGlobalSearch
					--print @UserList
					insert into ##UserList(UserId, b.AddressID)
					exec (@UserList)
			
					end
					----To get the list of user having adress column in where clause 
					if (@AddressColumnWhereClause <> '')
					begin
					
					set @UserList = 'select a.UserId, b.AddressID	from ZnodeUserAddress a	inner join ZnodeAddress b on a.AddressId = b.AddressId	where '+@AddressColumnWhereClause
					--print @UserList
					insert into ##UserList(UserId,AddressID)
					exec (@UserList)
					
					end

					If @IsGuestUser= 0 
					AND
					NOT Exists (Select filterName from #WhereColumnList where filterName in ('accountid','isaccountcustomer','UserId') and filtername <> '')
					-- Customer List with GuestUsers
					Begin
						SET @SQL = 
							'SELECT a.userId,a.AspNetuserId,a.UserName,a.FirstName,a.MiddleName,a.LastName
							,a.PhoneNumber,
							 a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
							 CONVERT( DATE, a.ModifiedDate) ModifiedDate, 0 RoleId,''''  RoleName,
							 (ISNULL(RTRIM(LTRIM(a.FirstName)), '''')+'' ''+ISNULL(RTRIM(LTRIM(a.MiddleName)), '''')+CASE
							 WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '''') = ''''	THEN ''''
							 ELSE '' ''	END+ISNULL(RTRIM(LTRIM(a.LastName)), ''''))  FullName
							 ,a.AccountId, '''' TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser
							 into ##View_CustomerUserAddDetail
							 FROM ZnodeUser a
							 Where a.AspNetUserId IS NOT NULL
							' 
						
						
						EXEC (@SQL)
					End	
					Else If @IsGuestUser= 1 
					Begin
							SET @SQL='SELECT a.userId,a.AspNetuserId,a.UserName,a.FirstName,a.MiddleName,a.LastName
							,a.PhoneNumber,
							a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
							CONVERT( DATE, a.ModifiedDate) ModifiedDate,ur.RoleId,r.Name RoleName,
							(ISNULL(RTRIM(LTRIM(a.FirstName)), '''')+'' ''+ISNULL(RTRIM(LTRIM(a.MiddleName)), '''')+CASE
							WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '''') = '''' THEN '''' ELSE '' '' END+ISNULL(RTRIM(LTRIM(a.LastName)), '''')) FullName,
							a.AccountId,r.TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser
							into ##View_CustomerUserAddDetail
							FROM ZnodeUser a
							LEFT JOIN AspNetUserRoles ur ON(ur.UserId = a.AspNetUserId)
							LEFT JOIN AspNetRoles r ON(r.Id = ur.RoleId)                       
							LEFT JOIN ZnodePortalAccount ZPA ON(ZPA.AccountId = a.AccountId) 
							WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeUSer ZUQ WHERE ZUQ.UserId = a.UserId AND ZUQ.EmailOptIn = 1 AND ZUQ.AspNetUserId IS NULL )
							AND a.AspNetuserId is null
							AND (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = '+cast(@SalesRepUserId as varchar(10))+' and a.UserId = SalRep.CustomerUserid) or '+cast(@SalesRepUserId as varchar(10))+' = 0)'
						EXEC (@SQL)
					End
					Else IF Exists (Select filterName from #WhereColumnList where filterName in ('UserId') and filtername <> '')
					and  @IsGuestUser= 0   
					-- Customer List for user edit single user 
					Begin
					SET @SQL='SELECT a.userId,a.AspNetuserId,a.UserName,a.FirstName,a.MiddleName,a.LastName
					,a.PhoneNumber, a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
							CONVERT( DATE, a.ModifiedDate) ModifiedDate,ur.RoleId,r.Name RoleName,
							(ISNULL(RTRIM(LTRIM(a.FirstName)), '''')+'' ''+ISNULL(RTRIM(LTRIM(a.MiddleName)), '''')+CASE
							WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '''') = '''' THEN '''' ELSE '' '' END+ISNULL(RTRIM(LTRIM(a.LastName)), '''')) FullName,
							a.AccountId, r.TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser
							into ##View_CustomerUserAddDetail
							FROM ZnodeUser a
							LEFT JOIN ZnodeAccount e ON(e.AccountId = a.AccountId)
							LEFT JOIN AspNetUserRoles ur ON(ur.UserId = a.AspNetUserId)
							LEFT JOIN AspNetRoles r ON(r.Id = ur.RoleId)                       
							LEFT JOIN ZnodePortalAccount ZPA ON(ZPA.AccountId = a.AccountId) 
							WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeUSer ZUQ WHERE ZUQ.UserId = a.UserId AND ZUQ.EmailOptIn = 1 AND ZUQ.AspNetUserId IS NULL )
							and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = '+cast(@SalesRepUserId as varchar(10))+' and a.UserId = SalRep.CustomerUserid) or '+cast(@SalesRepUserId as varchar(10))+' = 0)'
						print @SQL
						
						EXEC (@SQL)
					End	
					Else -- Account user List 
					Begin
							SELECT a.userId,a.AspNetuserId,a.UserName,a.PhoneNumber,a.FirstName,a.MiddleName,a.LastName
							,a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
							CONVERT( DATE, a.ModifiedDate) ModifiedDate,ur.RoleId,r.Name RoleName,
						    (ISNULL(RTRIM(LTRIM(a.FirstName)), '')+' '+ISNULL(RTRIM(LTRIM(a.MiddleName)), '')+CASE
							WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '') = '' THEN '' ELSE ' ' END+ISNULL(RTRIM(LTRIM(a.LastName)), '')) FullName,
							a.AccountId, r.TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser
							into ##View_CustomerUserAddDetail
							FROM ZnodeUser a
							LEFT JOIN ZnodeAccount e ON(e.AccountId = a.AccountId)
							LEFT JOIN AspNetUserRoles ur ON(ur.UserId = a.AspNetUserId)
							LEFT JOIN AspNetRoles r ON(r.Id = ur.RoleId)                       
							LEFT JOIN ZnodePortalAccount ZPA ON(ZPA.AccountId = a.AccountId) 
							WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeUSer ZUQ WHERE ZUQ.UserId = a.UserId AND ZUQ.EmailOptIn = 1 AND ZUQ.AspNetUserId IS NULL )
							and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = @SalesRepUserId and a.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)
					End
					
					alter table ##View_CustomerUserAddDetail 
					add StoreName varchar(1000), CountryName varchar(1000),CityName varchar(1000),StateName varchar(1000),
					PostalCode varchar(1000), CompanyName varchar(1000), SalesRepUserName varchar(600),SalesRepFullName varchar(1000), PortalId INT 

					IF @PortalId <> '0' 
					BEGIN 
					   UPDATE a SET a.PortalId = b.PortalId
					   FROM ##View_CustomerUserAddDetail a 
					   INNER JOIN ZnodeUserPortal b ON (b.Userid = a.Userid )
					END 

					IF (@WhereClauseAll like '%StoreName%' or @Order_By like '%StoreName%' )
					BEGIN
						CREATE NONCLUSTERED INDEX ##View_CustomerUserAddDetail_UserId
					   ON [dbo].[##View_CustomerUserAddDetail] ([userId])

						update  a set StoreName = CASE WHEN zp.StoreName IS NULL THEN 'ALL' ELSE zp.StoreName END 
						             -- , PortalId = up.PortalId
						from ##View_CustomerUserAddDetail a
						Left join  ZnodeUserPortal up ON(up.UserId = a.UserId)  
						Left JOIN ZnodePortal zp ON (up.PortalId = zp.PortalId)
							
					END
					
					IF (@WhereClauseAll like '%CountryName%' OR @WhereClauseAll like '%CityName%' OR @WhereClauseAll like '%StateName%' OR @WhereClauseAll like '%PostalCode%' OR @WhereClauseAll like '%CompanyName%')
					BEGIN
			 
						update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
						PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName
						from ##View_CustomerUserAddDetail a
						inner join ZnodeAccountAddress ZAA on a.AccountId = ZAA.AccountId
						inner  JOIN ZnodeAddress ZA on ZA.AddressId = ZAA.AddressId
						where isnull(a.AccountId,0)<> 0-- is not null
	 
						update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
						PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName
						from ##View_CustomerUserAddDetail a
						inner join ZnodeUserAddress ZUA on a.UserId = ZUA.UserId
						inner  JOIN ZnodeAddress ZA on ZA.AddressId = zua.AddressId
					END

					set @Rows = @PageNo * @Rows

					SET @SQL = '			
						
						create table #AccountDetail
						(
							UserId int,AspNetuserId nvarchar(200),UserName nvarchar(200),FirstName varchar(200),MiddleName varchar(200),LastName varchar(200),
							PhoneNumber nvarchar(100),Email nvarchar(100),EmailOptIn bit,CreatedBy int,CreatedDate datetime,ModifiedBy int,ModifiedDate datetime,
							RoleId varchar(200),RoleName varchar(200), FullName  varchar(1000),
							StoreName varchar(200),CountryName varchar(200), CityName varchar(200), StateName varchar(200), PostalCode varchar(200), CompanyName varchar(200)
							,AccountId int,SalesRepUserName varchar(200),SalesRepFullName varchar(200) ,RowId int identity 
						) 
						'+
						+' insert into #AccountDetail(UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,FullName,
						StoreName, CountryName, CityName, StateName, PostalCode, CompanyName,AccountId)
						SELECT top '+cast(@Rows as varchar(10))+'UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,FullName,
						StoreName, CountryName, CityName, StateName, PostalCode, CompanyName,AccountId
						FROM ##View_CustomerUserAddDetail where 1=1'+
						dbo.Fn_GetWhereClause(case when @WhereClauseGlobal<>'' and @WhereClause1 <> '' then @WhereClauseGlobal+' And '+@WhereClause1 else @WhereClauseAll end, ' AND ')+
						dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC') + '
			
						Insert Into #TBL_RowCount 
						SELECT count(*)
						FROM ##View_CustomerUserAddDetail where 1=1'+
						dbo.Fn_GetWhereClause(case when @WhereClauseGlobal<>'' and @WhereClause1 <> '' then @WhereClauseGlobal+' And '+@WhereClause1 else @WhereClauseAll end, ' AND ')
						+'
						
						SELECT  UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,FullName,
						StoreName,AccountId,
						CountryName, CityName, StateName, PostalCode, CompanyName, SalesRepUserName, SalesRepFullName
						,Row_Number()Over('+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC')+')  RowNumber
						into ##CustomerUserAddDetail
						FROM #AccountDetail '+@PaginationWhereClause  +' '+ dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC');

						print @SQL
					EXEC (@SQL)

					Select @RowCount= isnull(RowsCount,0) from #TBL_RowCount

					ALTER TABLE ##CustomerUserAddDetail ADD AddressId Int

					------To get data for StoreName
						update  a set StoreName = CASE WHEN zp.StoreName IS NULL THEN 'ALL' ELSE zp.StoreName END 
						from ##CustomerUserAddDetail a
						Left join  ZnodeUserPortal up ON(up.UserId = a.UserId)  
						Left JOIN ZnodePortal zp ON (up.PortalId = zp.PortalId)

	
					----To get data for CountryName, CityName, StateName, PostalCode, CompanyName
					IF (EXISTS(SELECT * FROM @ColumnName where ([StringColumn] LIKE '%CountryName%' OR [StringColumn] LIKE '%CityName%' OR [StringColumn] LIKE '%StateName%' OR [StringColumn] LIKE '%PostalCode%' OR [StringColumn] LIKE '%CompanyName%'))
					OR (@WhereClauseAll like '%CountryName%' OR @WhereClauseAll like '%CityName%' OR @WhereClauseAll like '%StateName%' OR @WhereClauseAll like '%PostalCode%' OR @WhereClauseAll like '%CompanyName%'))
					BEGIN
			 
						update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
						PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName, a.AddressId = ZA.AddressId
						from ##CustomerUserAddDetail a
						inner join ZnodeAccountAddress ZAA on a.AccountId = ZAA.AccountId
						inner  JOIN ZnodeAddress ZA on ZA.AddressId = ZAA.AddressId
						where isnull(a.AccountId,0)<> 0-- is not null
	 
						update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
						PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName, a.AddressId = ZA.AddressId
						from ##CustomerUserAddDetail a
						inner join ZnodeUserAddress ZUA on a.UserId = ZUA.UserId
						inner  JOIN ZnodeAddress ZA on ZA.AddressId = zua.AddressId
					END

					
					----Updating SalesRep for user if any 
					update CUAD
					set CUAD.SalesRepUserName = ZU.UserName, 
					CUAD.SalesRepFullName = (ISNULL(RTRIM(LTRIM(ZU.FirstName)), '')+' '+ISNULL(RTRIM(LTRIM(ZU.MiddleName)), '')
					+CASE
					WHEN ISNULL(RTRIM(LTRIM(ZU.MiddleName)), '') = ''
					THEN ''
					ELSE ' '
					END+ISNULL(RTRIM(LTRIM(ZU.LastName)), '')) 
					from ##CustomerUserAddDetail CUAD
					inner join ZnodeSalesRepCustomerUserPortal SRCUP ON CUAD.UserId = SRCUP.CustomerUserid 
					inner join ZnodeUser ZU ON SRCUP.SalesRepUserId = ZU.UserId

					if ( exists(select * from ##UserList) OR @AddressColumnWhereClause <> '')
					begin
						SELECT UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,
						FullName,
						StoreName,
						CountryName, CityName, StateName, PostalCode, CompanyName, SalesRepUserName, SalesRepFullName
						from ##CustomerUserAddDetail CUAD
						where exists(select * from ##UserList UL where CUAD.UserId = UL.UserId and CUAD.AddressId = UL.AddressID )
						Order by RowNumber
					end
					else
					begin
						SELECT UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,
						FullName,
						StoreName,
						CountryName, CityName, StateName, PostalCode, CompanyName, SalesRepUserName, SalesRepFullName
						from ##CustomerUserAddDetail
						Order by RowNumber
					end
	
					if OBJECT_ID('tempdb..##CustomerUserAddDetail') is not null
					drop table ##CustomerUserAddDetail

					if OBJECT_ID('tempdb..##View_CustomerUserAddDetail') is not null
					drop table ##View_CustomerUserAddDetail
				
				END;
            ELSE
				BEGIN
					SELECT * FROM View_CustomerUserDetail AS VICUD WHERE 1 = 0;
					SET @RowCount = 0;
				END;
            END;			
         END TRY
         BEGIN CATCH
           --SELECT ERROR_MESSAGE()
		   DECLARE @ERROR_PROCEDURE VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_AdminUsers @RoleName = '+@RoleName+' ,@UserName='+@UserName+',@WhereClause='+cast(@WhereClause as varchar(max))+' ,@Rows= '+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_By='+@Order_By+',@RowCount='+CAST(@RowCount AS VARCHAR(50));
            EXEC Znode_InsertProcedureErrorLog
            @ProcedureName    = 'Znode_AdminUsers',
            @ErrorInProcedure = @ERROR_PROCEDURE,
            @ErrorMessage     = @ErrorMessage,
            @ErrorLine        = @ErrorLine,
            @ErrorCall        = @ErrorCall;
         END CATCH;


     END;
go
IF EXISTS(Select * from sys.procedures where name = 'Znode_GetOmsOrderDetail')
	drop proc Znode_GetOmsOrderDetail
go
CREATE PROCEDURE [dbo].[Znode_GetOmsOrderDetail]
( @WhereClause NVARCHAR(MAX),
  @Rows        INT            = 100,
  @PageNo      INT            = 1,
  @Order_BY    VARCHAR(1000)  = '',
  @RowsCount   INT OUT			,
  @UserId	   INT = 0 ,
  @IsFromAdmin int=0,
  @SalesRepUserId int = 0 
 )
AS
    /*
     Summary : This procedure is used to get the oms order detils
			   Records are fetched for those users who placed the order i.e UserId is Present in ZnodeUser and  ZnodeOmsOrderDetails tables
	 Unit Testing:

    EXEC [Znode_GetOmsOrderDetail_SCT] 'PortalId =1',@Order_BY = '',@RowsCount= 0, @UserId = 0 ,@Rows = 50, @PageNo = 1

	declare @p7 int
	set @p7=4
	exec sp_executesql N'Znode_GetOmsOrderDetail_SCT @WhereClause, @Rows,@PageNo,@Order_By,@RowCount OUT,@UserId,@IsFromAdmin',N'@WhereClause nvarchar(30),@Rows int,@PageNo int,@Order_By nvarchar(14),@RowCount int output,@UserId int,@IsFromAdmin int',@WhereClause=N'(PortalId in(''1'',''4'',''5'',''6''))',@Rows=50,@PageNo=1,@Order_By=N'orderdate desc',@RowCount=@p7 output,@UserId=0,@IsFromAdmin=1
	select @p7



   */
BEGIN
    BEGIN TRY
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
		DECLARE @SQL NVARCHAR(MAX), @ProcessType  varchar(50)='Order'
		DECLARE @OrderLineItemRelationshipTypeId INT
		SET @OrderLineItemRelationshipTypeId = ( SELECT top 1 OrderLineItemRelationshipTypeId  FROM ZnodeOmsOrderLineItemRelationshipType where Name = 'AddOns' )

		IF not exists(select * from ZnodeSalesRepCustomerUserPortal where SalesRepUserId = @SalesRepUserId)
				SET @SalesRepUserId = 0

		DECLARE @Fn_GetPaginationWhereClause VARCHAR(500) = dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows),
		@Fn_GetFilterWhereClause NVARCHAR(MAX) = ''
		set @Fn_GetFilterWhereClause=dbo.Fn_GetFilterWhereClause(@WhereClause)
			
		IF @Order_BY = ''
			set @Order_BY = 'OrderDate desc'

			set @Order_BY = replace(@Order_BY,'PortalId','ZODD.PortalId')
			set @Order_BY = replace(@Order_BY,'UserName','ISNULL(RTRIM(LTRIM(ZODD.FirstName)),'''')+'' ''+ISNULL(RTRIM(LTRIM(ZODD.LastName)),'''')')
			set @Order_BY = replace(@Order_BY,'email','ZODD.Email')
			set @Order_BY = replace(@Order_BY,'OrderState','case when ZOS.IsShowToCustomer=0 and '+cast( @IsFromAdmin as varchar(50))+' = 0 then ZOSC.Description else  ZOS.Description end')
			set @Order_BY = replace(@Order_BY,'PaymentStatus','ZOPS.Name')
			set @Order_BY = replace(@Order_BY,'PublishState','ZODPS.DisplayName')
			set @Order_BY = replace(@Order_BY,'StoreName','ZP.StoreName')

			Declare @Fn_GetPagingRowId NVARCHAR(MAX) = ' DENSE_RANK()Over('+ ' Order By '+CASE WHEN Isnull(@Order_BY,'') = '' THEN 'OmsOrderId DESC' ELSE @Order_BY + ',OmsOrderId DESC' END  + ') RowId '
						
			IF OBJECT_ID('tempdb..#TBL_RowCount') is not null
				DROP TABLE #TBL_RowCount

			IF OBJECT_ID('tempdb..#Portal') is not null
				DROP TABLE #Portal
			
			Create table #TBL_RowCount(RowsCount int )
			CREATE TABLE #tbl_GetRecurciveUserId  (ID INT IDENTITY(1,1) Primary key,UserId INT,ParentUserId INT)
			INSERT INTO #tbl_GetRecurciveUserId
			SELECT UserId,ParentUserId FROM dbo.Fn_GetRecurciveUserId (CAST(@UserId AS VARCHAR(50)),@ProcessType ) FNRU
			 
			set @Fn_GetFilterWhereClause = replace(@Fn_GetFilterWhereClause,'PortalId','ZODD.PortalId')
			set @Fn_GetFilterWhereClause = replace(@Fn_GetFilterWhereClause,'UserName','ISNULL(RTRIM(LTRIM(ZODD.FirstName)),'''')+'' ''+ISNULL(RTRIM(LTRIM(ZODD.LastName)),'''')')
			set @Fn_GetFilterWhereClause = replace(@Fn_GetFilterWhereClause,'email','ZODD.Email')
			set @Fn_GetFilterWhereClause = replace(@Fn_GetFilterWhereClause,'OrderState','case when ZOS.IsShowToCustomer=0 and '+cast( @IsFromAdmin as varchar(50))+' = 0 then ZOSC.Description else  ZOS.Description end')
			set @Fn_GetFilterWhereClause = replace(@Fn_GetFilterWhereClause,'PaymentStatus','ZOPS.Name')
			set @Fn_GetFilterWhereClause = replace(@Fn_GetFilterWhereClause,'PublishState','ZODPS.DisplayName')
			set @Fn_GetFilterWhereClause = replace(@Fn_GetFilterWhereClause,'StoreName','ZP.StoreName')

			set @Order_BY = replace(@Order_BY,'ShippingPostalCode','BillingPostalCode')

			set @Fn_GetPagingRowId = replace(@Fn_GetPagingRowId,'OmsOrderId','Zoo.OmsOrderId')

			set @Rows = @PageNo * @Rows

			CREATE TABLE #Portal (PortalId int,StoreName varchar(200))
			insert into #Portal
			select PortalId,StoreName
			from ZnodePortal

		SET @SQL = '
		SELECT top '+cast(@Rows as varchar(10))+' Zoo.OmsOrderId,Zoo.OrderNumber, ZODD.PortalId,ZP.StoreName ,ZODD.CurrencyCode,
		case when ZOS.IsShowToCustomer=0 and '+cast( @IsFromAdmin as varchar(50))+' = 0 then ZOSC.Description else  ZOS.Description end  OrderState,ZODD.ShippingId,ZODD.PaymentTypeId,ZODD.PaymentSettingId
		,ZOPS.Name PaymentStatus,ZPS.Name PaymentType,CAST(1 AS BIT) ShippingStatus ,ZODD.OrderDate,ZODD.UserId,ISNULL(RTRIM(LTRIM(ZODD.FirstName)),'''')
		+'' ''+ISNULL(RTRIM(LTRIM(ZODD.LastName)),'''') UserName ,ZODD.PaymentTransactionToken ,ZODD.Total ,ZODD.OmsOrderDetailsId,ZODD.PoDocument,
		ZODD.Email ,ZODD.PhoneNumber ,ZODD.SubTotal ,ZODD.TaxCost ,ZODD.ShippingCost,ZODD.BillingPostalCode,
		ZODD.ModifiedDate AS OrderModifiedDate,  ZODD.PaymentDisplayName  ,isnull(Zoo.ExternalId,0) ExternalId,ZODD.CreditCardExpMonth,ZODD.CultureCode--,ZODD.TotalAdditionalCost
		,ZODD.CreditCardExpYear,ZODD.CardType,ZODD.CreditCardNumber,ZODD.PaymentExternalId,ZODPS.DisplayName as PublishState,
		'''' ProductName, 0 CountId, CAST (0 as bit) IsInRMA, '+@Fn_GetPagingRowId+' 
		INTO #Cte_OrderLineDescribe
		FROM ZnodeOmsOrder (nolock) ZOO 
		INNER JOIN ZnodeOmsOrderDetails (nolock) ZODD ON (ZODD.OmsOrderId = ZOO.OmsOrderId AND  ZODD.IsActive = 1)
		INNER JOIN ZnodePublishState ZODPS ON (ZODPS.PublishStateId = ZOO.PublishStateId)
		INNER JOIN #Portal ZP (nolock) ON ZODD.PortalId = ZP.PortalId
		LEFT JOIN ZnodePaymentType (nolock) ZPS ON (ZPS.PaymentTypeId = ZODD.PaymentTypeId )
		LEFT JOIN ZnodeOmsOrderStateShowToCustomer (nolock) ZOSC ON (ZOSC.OmsOrderStateId = ZODD.OmsOrderStateId)
		LEFT JOIN ZnodeOmsOrderState (nolock) ZOS ON (ZOS.OmsOrderStateId = ZODD.OmsOrderStateId)
		LEFT JOIN ZnodeOmsPaymentState (nolock) ZOPS ON (ZOPS.OmsPaymentStateId = ZODD.OmsPaymentStateId)
		WHERE (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = '+cast(@SalesRepUserId as varchar(10))+' and ZODD.UserId = SalRep.CustomerUserid) or '+cast(@SalesRepUserId as varchar(10))+' = 0 )  
		AND (EXISTS (SELECT TOP 1 1 FROM #tbl_GetRecurciveUserId FNRU WHERE FNRU.UserId = ZODD.UserId ) OR '+cast(@UserId as varchar(10))+'  =0 )'
		+ @Fn_GetFilterWhereClause+' 

		Insert Into #TBL_RowCount 
		SELECT count(*)
		FROM ZnodeOmsOrder (nolock) ZOO 
		INNER JOIN ZnodeOmsOrderDetails (nolock) ZODD ON (ZODD.OmsOrderId = ZOO.OmsOrderId AND  ZODD.IsActive = 1)
		INNER JOIN ZnodePublishState ZODPS ON (ZODPS.PublishStateId = ZOO.PublishStateId)
		INNER JOIN #Portal ZP (nolock) ON ZODD.PortalId = ZP.PortalId
		LEFT JOIN ZnodePaymentType (nolock) ZPS ON (ZPS.PaymentTypeId = ZODD.PaymentTypeId )
		LEFT JOIN ZnodeOmsOrderStateShowToCustomer (nolock) ZOSC ON (ZOSC.OmsOrderStateId = ZODD.OmsOrderStateId)
		LEFT JOIN ZnodeOmsOrderState (nolock) ZOS ON (ZOS.OmsOrderStateId = ZODD.OmsOrderStateId)
		LEFT JOIN ZnodeOmsPaymentState (nolock) ZOPS ON (ZOPS.OmsPaymentStateId = ZODD.OmsPaymentStateId)
		WHERE (EXISTS(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = '+cast(@SalesRepUserId as varchar(10))+' and ZODD.UserId = SalRep.CustomerUserid) or '+cast(@SalesRepUserId as varchar(10))+' = 0 )  
		AND (EXISTS (SELECT TOP 1 1 FROM #tbl_GetRecurciveUserId FNRU WHERE FNRU.UserId = ZODD.UserId ) OR '+cast(@UserId as varchar(10))+'  =0 )'
		+ @Fn_GetFilterWhereClause+' 
			
		Create index Ind_OrderLineDescribe_RowId on #Cte_OrderLineDescribe(RowId )

		SELECT OmsOrderId,OrderNumber,PortalId,StoreName,CurrencyCode,OrderState,ShippingId,
		PaymentTypeId,PaymentSettingId,PaymentStatus,PaymentType,ShippingStatus,OrderDate,UserId,UserName,PaymentTransactionToken,Total,
		ProductName OrderItem,OmsOrderDetailsId,CountId ItemCount, PoDocument AS PODocumentPath,IsInRMA ,
		Email,PhoneNumber,SubTotal,TaxCost,ShippingCost,BillingPostalCode
		,OrderModifiedDate,PaymentDisplayName, 
		ExternalId,CreditCardExpMonth,CreditCardExpYear,CardType,CreditCardNumber,PaymentExternalId,CultureCode,PublishState --TotalAdditionalCost
		FROM #Cte_OrderLineDescribe
		' + @Fn_GetPaginationWhereClause +' order by RowId '

		print @SQL
		EXEC(@SQL)
		Select @RowsCount= isnull(RowsCount  ,0) from #TBL_RowCount
		
		IF OBJECT_ID('tempdb..#TBL_RowCount') is not null
				DROP TABLE #TBL_RowCount

		IF OBJECT_ID('tempdb..#Portal') is not null
			DROP TABLE #Portal
		
    END TRY
    BEGIN CATCH
        DECLARE @Status BIT ;
		SET @Status = 0;
		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
		@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetOmsOrderDetail @WhereClause = '''+ISNULL(CAST(@WhereClause AS VARCHAR(max)),'''''')+''',@Rows='''+ISNULL(CAST(@Rows AS VARCHAR(50)),'''''')+''',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',
		@Order_BY='+ISNULL(@Order_BY,'''''')+',@UserId = '+ISNULL(CAST(@UserId AS VARCHAR(50)),'''')+',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')+',@IsFromAdmin='+ISNULL(CAST(@IsFromAdmin AS VARCHAR(10)),'''');
              			 
        SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
        EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_GetOmsOrderDetail',
		@ErrorInProcedure = 'Znode_GetOmsOrderDetail',
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
    END CATCH;
END;
go	 
IF EXISTS(Select * from sys.procedures where name = 'Znode_GetRmaReturnHistoryList')
	drop proc Znode_GetRmaReturnHistoryList
go
CREATE PROCEDURE [dbo].[Znode_GetRmaReturnHistoryList]
(
	@WhereClause	varchar(max),
    @Rows			INT           = 100,
    @PageNo			INT           = 1,
    @Order_By		VARCHAR(1000) = '',
	@IsAdmin        BIT=0,
	@RowCount		INT        = 0 OUT,
	@ReturnDate     varchar(500) = '',
	@SalesRepUserId int = 0
)
as
/* exec Znode_GetRmaReturnHistoryList @WhereClause = 'ReturnNumber = ''ROMA-200630-183358-954''',@IsAdmin=0,@Order_By='ReturnDate asc',@ReturnDate='returndate between ''06/05/2020 03:49 am'' and ''07/19/2020 03:49 pm''' */
BEGIN
	SET NOCOUNT ON
	BEGIN TRY
		
		DECLARE @SQL NVarchar(max)
		Declare @PaginationWhereClause VARCHAR(300)= dbo.Fn_GetRowsForPagination(@PageNo, @Rows, ' WHERE RowId')
		Declare @PriceRoundOff varchar(10)
		select @PriceRoundOff = FeatureValues from Znodeglobalsetting where FeatureName = 'PriceRoundOff'
		
		IF not exists(select * from ZnodeSalesRepCustomerUserPortal where SalesRepUserId = @SalesRepUserId)
				SET @SalesRepUserId = 0

		if @IsAdmin = 0
		begin
		    ----Get all data for webstore
			set @SQL =
			'
			select ZRRD.RmaReturnDetailsId,ZRRD.ReturnNumber, ZRRS.ReturnStateName  as ReturnStatus,ZRRD.ReturnDate,ZRRD.CreatedDate,
			ZRRD.TotalExpectedReturnQuantity, isnull(ZU.FirstNAme,'''')+'' ''+isnull(ZU.LastName,'''') as UserName,ZU.Email as EmailId, ZP.StoreName, round(ZRRD.TotalReturnAmount,'+@PriceRoundOff+') TotalReturnAmount,
			ZRRD.PortalId , ZRRD.UserID,ZRRD.ModifiedDate,ZRRD.CurrencyCode, ZRRD.CultureCode
			into #Cte_RetuenOrder
			from ZnodeRmaReturnDetails ZRRD
			inner join ZnodeUser ZU ON ZRRD.UserId = ZU.UserId
			inner join ZnodePortal ZP ON ZRRD.PortalId = ZP.PortalId
			inner join ZnodeRmaReturnState ZRRS on ZRRD.RmaReturnStateId = ZRRS.RmaReturnStateId
			where (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = '+cast(@SalesRepUserId as varchar(10))+' and ZRRD.UserId = SalRep.CustomerUserid) or '+cast(@SalesRepUserId as varchar(10))+' = 0)

			CREATE TABLE #Cte_RetuenOrder_WhereClause( RmaReturnDetailsId int, ReturnNumber nvarchar(200),  ReturnStatus nvarchar(200), ReturnDate datetime, TotalExpectedReturnQuantity numeric(28,6), UserName  varchar(300), EmailId  varchar(300), StoreName  varchar(300), TotalReturnAmount numeric(28,6), ModifiedDate datetime, CurrencyCode varchar(300), CultureCode varchar(300), RowId int)
			if ('''+@Order_By+''') = '''' 
			begin
				----To get the not subitted records at top for webstore
				insert into #Cte_RetuenOrder_WhereClause
				select RmaReturnDetailsId, ReturnNumber,  ReturnStatus, ReturnDate, TotalExpectedReturnQuantity, UserName, EmailId, StoreName, TotalReturnAmount, ModifiedDate, CurrencyCode, CultureCode
					   , Row_Number()Over('+dbo.Fn_GetOrderByClause(@Order_By, 'CreatedDate DESC')+',ReturnDate DESC) RowId 
				from #Cte_RetuenOrder
				where ReturnDate is null '+dbo.Fn_GetWhereClause(@WhereClause, ' AND ') +dbo.Fn_GetWhereClause(@ReturnDate, ' AND ')+'

				insert into #Cte_RetuenOrder_WhereClause
				select RmaReturnDetailsId, ReturnNumber,  ReturnStatus, ReturnDate, TotalExpectedReturnQuantity, UserName, EmailId, StoreName, TotalReturnAmount, ModifiedDate, CurrencyCode, CultureCode
					   , isnull((select max(RowId) from #Cte_RetuenOrder_WhereClause),0)+Row_Number()Over('+dbo.Fn_GetOrderByClause(@Order_By, 'ModifiedDate DESC')+',ReturnDate DESC) RowId
				from #Cte_RetuenOrder
				where ReturnDate is not null'+dbo.Fn_GetWhereClause(@WhereClause, ' AND ') +dbo.Fn_GetWhereClause(@ReturnDate, ' AND ')+'
			end
			else
			begin
				insert into #Cte_RetuenOrder_WhereClause
				select RmaReturnDetailsId, ReturnNumber,  ReturnStatus, ReturnDate, TotalExpectedReturnQuantity, UserName, EmailId, StoreName, TotalReturnAmount, ModifiedDate, CurrencyCode, CultureCode
					   , Row_Number()Over('+dbo.Fn_GetOrderByClause(@Order_By, 'ReturnDate DESC')+',ModifiedDate DESC) RowId
				from #Cte_RetuenOrder 
				where 1 = 1 '+dbo.Fn_GetWhereClause(@WhereClause, ' AND ') +dbo.Fn_GetWhereClause(@ReturnDate, ' AND ')+'
			end

			select RmaReturnDetailsId, ReturnNumber,  ReturnStatus, ReturnDate, TotalExpectedReturnQuantity, UserName, EmailId, StoreName, TotalReturnAmount, ModifiedDate, CurrencyCode, CultureCode, RowId 
			into #RetuenOrder
			from #Cte_RetuenOrder_WhereClause
			'+@PaginationWhereClause+' '+dbo.Fn_GetOrderByClause(@Order_By, 'ModifiedDate DESC' )
			+' select RmaReturnDetailsId, ReturnNumber,   dbo.Fn_CamelCase(ReturnStatus) as ReturnStatus, ReturnDate, TotalExpectedReturnQuantity, UserName, EmailId, StoreName, TotalReturnAmount, ModifiedDate, CurrencyCode, CultureCode
			from #RetuenOrder
			order by RowId 
			SET @Count= ISNULL((SELECT  Count(1) FROM #Cte_RetuenOrder_WhereClause ),0)';
		
		end
		else
		begin
		   ----Get all data for admin except Not submitted
			set @SQL =
			'
			select ZRRD.RmaReturnDetailsId,ZRRD.ReturnNumber, ZRRS.ReturnStateName  as ReturnStatus,ZRRD.ReturnDate,
			ZRRD.TotalExpectedReturnQuantity, isnull(ZU.FirstNAme,'''')+'' ''+isnull(ZU.LastName,'''') as UserName,ZU.Email as EmailId, ZP.StoreName, round(ZRRD.TotalReturnAmount,'+@PriceRoundOff+') TotalReturnAmount,
			ZRRD.PortalId , ZRRD.UserID,ZRRD.ModifiedDate, ZRRD.CurrencyCode, ZRRD.CultureCode
			into #Cte_RetuenOrder
			from ZnodeRmaReturnDetails ZRRD
			inner join ZnodeUser ZU ON ZRRD.UserId = ZU.UserId
			inner join ZnodePortal ZP ON ZRRD.PortalId = ZP.PortalId 
			inner join ZnodeRmaReturnState ZRRS on ZRRD.RmaReturnStateId = ZRRS.RmaReturnStateId
			where isnull(ZRRD.RmaReturnStateId,0) not in (select isnull(RmaReturnStateId,0) from ZnodeRmaReturnState where ReturnStateName = ''Not Submitted'')
		    and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = '+cast(@SalesRepUserId as varchar(10))+' and ZRRD.UserId = SalRep.CustomerUserid) or '+cast(@SalesRepUserId as varchar(10))+' = 0)

			select RmaReturnDetailsId, ReturnNumber,  ReturnStatus, ReturnDate, TotalExpectedReturnQuantity, UserName, EmailId, StoreName, TotalReturnAmount,ModifiedDate, CurrencyCode, CultureCode
			, Row_Number()Over('+dbo.Fn_GetOrderByClause(@Order_By, 'ReturnDate DESC')+',ModifiedDate DESC) RowId
			into #Cte_RetuenOrder_WhereClause
			from #Cte_RetuenOrder
			where 1 = 1 '+dbo.Fn_GetWhereClause(@WhereClause, ' AND ') +dbo.Fn_GetWhereClause(@ReturnDate, ' AND ')+'

			select RmaReturnDetailsId, ReturnNumber,  ReturnStatus, ReturnDate, TotalExpectedReturnQuantity, UserName, EmailId, StoreName, TotalReturnAmount, ModifiedDate, CurrencyCode, CultureCode, RowId
			into #RetuenOrder
			from #Cte_RetuenOrder_WhereClause
			'+@PaginationWhereClause+' '+dbo.Fn_GetOrderByClause(@Order_By, 'ReturnDate DESC' )
			+' select RmaReturnDetailsId, ReturnNumber,  dbo.Fn_CamelCase(ReturnStatus) as ReturnStatus, ReturnDate, TotalExpectedReturnQuantity, UserName, EmailId, StoreName, TotalReturnAmount, ModifiedDate, CurrencyCode, CultureCode
			from #RetuenOrder
			order by RowId 
			
			SET @Count= ISNULL((SELECT  Count(1) FROM #Cte_RetuenOrder_WhereClause ),0)';
		end

		print @sql

		EXEC SP_executesql 
				@SQL,
				N'@Count INT OUT',
				@Count = @RowCount OUT;

	END TRY
         BEGIN CATCH
           
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetRmaReturnHistoryList @WhereClause = '+CAST(@WhereClause AS varchar(10))+',@Order_By='+cast(@Order_By as varchar(10));

             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetRmaReturnHistoryList',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
    END CATCH
END
go	 
IF EXISTS(Select * from sys.procedures where name = 'ZnodeReport_DashboardOrders')
	drop proc ZnodeReport_DashboardOrders
go
CREATE PROCEDURE [dbo].[ZnodeReport_DashboardOrders]              
(             
 @PortalId  bigint  = null,        
 @AccountId bigint  = null  ,    
 @SalesRepUserId int = 0              
)              
AS               
/*              
     Summary:- This procedure is used to get the order details               
    Unit Testing:              
     EXEC [ZnodeReport_DashboardOrders]              
*/              
     BEGIN              
  BEGIN TRY              
        SET NOCOUNT ON;              
  DECLARE @TopItem TABLE (ItemName nvarchar(100),CustomerName nvarchar(100),ItemId nvarchar(10), Total numeric(28,6) , Date datetime,Symbol NVARCHAR(10))               
            
                 
  DECLARE @RoundOffValue INT= dbo.Fn_GetDefaultValue('PriceRoundOff')          
    
  IF not exists(select * from ZnodeSalesRepCustomerUserPortal where SalesRepUserId = @SalesRepUserId)    
    SET @SalesRepUserId = 0     
              
  DECLARE @TBL_CultureCurrency TaBLE (Symbol Varchar(100),CurrencyCode varchar(100))              
  INSERT INTO @TBL_CultureCurrency (Symbol,CurrencyCode)              
  SELECT Symbol,CultureCode FROM  ZnodeCulture ZC               
  DECLARE @PortalCurrencySymbol nvarchar(20)          
  DECLARE @DefaultCurrencySymbol nvarchar(20)            
            
  SET @PortalCurrencySymbol = [dbo].[Fn_GetPortalCurrencySymbol](CAST(@PortalID AS INTEGER) )          
  SET @DefaultCurrencySymbol = [dbo].[Fn_GetDefaultCurrencySymbol]()           
          
  IF @PortalCurrencySymbol IS NULL           
  UPDATE @TBL_CultureCurrency SET Symbol  =@DefaultCurrencySymbol WHERE  Symbol IS NULL          
  ELSE           
  UPDATE @TBL_CultureCurrency SET Symbol  =@PortalCurrencySymbol WHERE  Symbol IS NULL          
              
    INSERT INTO @TopItem(ItemId, ItemName,CustomerName,Date,Total,Symbol)          
 SELECT Zoo.OmsOrderId,Zoo.OrderNumber,ISNULL(RTRIM(LTRIM(ZODD.FirstName)),'')          
   +' '+ISNULL(RTRIM(LTRIM(ZODD.LastName)),'') UserName ,ZODD.OrderDate,ZODD.Total,        
   COALESCE (ZC.Symbol,[dbo].[Fn_GetPortalCurrencySymbol](CAST(@PortalId AS INTEGER)),[dbo].[Fn_GetDefaultCurrencySymbol]())           
   FROM ZnodeOmsOrder (nolock) ZOO           
   INNER JOIN ZnodeOmsOrderDetails (nolock) ZODD ON (ZODD.OmsOrderId = ZOO.OmsOrderId AND  ZODD.IsActive = 1)          
   INNER JOIN ZnodePortal (nolock) ZP ON (ZP.PortalId = ZODD.portalId )          
   INNER JOIN ZnodePublishState ZODPS ON (ZODPS.PublishStateId = ZOO.PublishStateId)          
   LEFT JOIN ZnodePaymentType (nolock) ZPS ON (ZPS.PaymentTypeId = ZODD.PaymentTypeId )          
   LEFT JOIN  ZnodeOmsOrderStateShowToCustomer (nolock) ZOSC ON (ZOSC.OmsOrderStateId = ZODD.OmsOrderStateId)          
   LEFT JOIN ZnodeOmsOrderState (nolock) ZOS ON (ZOS.OmsOrderStateId = ZODD.OmsOrderStateId)          
   LEFT JOIN ZnodeOmsPaymentState (nolock) ZOPS ON (ZOPS.OmsPaymentStateId = ZODD.OmsPaymentStateId)          
   LEFT JOIN ZnodeUser ZU ON (ZU.UserId = ZODD.UserId)          
   LEFT JOIN [dbo].[View_GetUserDetails]  (nolock) ZVGD ON (ZVGD.UserId = ZODD.CreatedBy )          
   LEFT JOIN [dbo].[View_GetUserDetails]  (nolock) ZVGDI ON (ZVGDI.UserId = ZODD.ModifiedBy)          
   LEFT JOIN ZnodeShipping ZS ON (ZS.ShippingId = ZODD.ShippingId)          
   LEFT OUTER JOIN ZnodePaymentSetting (nolock) ZPSS ON (ZPSS.PaymentSettingId = ZODD.PaymentSettingId)          
   LEFT JOIN ZnodePortalPaymentSetting (nolock) ZPPS ON (ZPPS.PaymentSettingId = ZPSS.PaymentSettingId  AND ZPPS.PortalId = ZODD.PortalId   )          
   LEFT JOIN @TBL_CultureCurrency ZC ON (ZC.CurrencyCode = ZODD.CultureCode )         
   WHERE (ZP.PortalId = @PortalId OR  ISNULL(@PortalId,0) = 0) AND (ZU.AccountId = @AccountId OR  ISNULL(@AccountId,0) = 0)         
    and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = @SalesRepUserId and ZU.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)      
              
   SELECT TOP 5 ItemId, ItemName,CustomerName,Date,Total,Symbol FROM @TopItem Order by  Convert(datetime,Date )  desc                
   END TRY              
              
   BEGIN CATCH              
   DECLARE @Status BIT ;        
       SET @Status = 0;              
       DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),              
    @ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeReport_DashboardOrders @PortalId = '+@PortalId;             
                                
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                                  
                  
             EXEC Znode_InsertProcedureErrorLog              
    @ProcedureName = 'ZnodeReport_DashboardOrders',              
    @ErrorInProcedure = @Error_procedure,              
    @ErrorMessage = @ErrorMessage,              
    @ErrorLine = @ErrorLine,              
    @ErrorCall = @ErrorCall;              
   END CATCH              
              
  END;
go	 
IF EXISTS(Select * from sys.procedures where name = 'ZnodeReport_DashboardQuotes')
	drop proc ZnodeReport_DashboardQuotes
go
CREATE PROCEDURE [dbo].[ZnodeReport_DashboardQuotes]              
(             
 @PortalId  bigint  = null,        
 @AccountId bigint  = null,    
 @SalesRepUserId int = 0                
)              
AS               
/*              
     Summary:- This procedure is used to get the order details               
    Unit Testing:              
     EXEC [ZnodeReport_DashboardTopCategory]              
*/              
     BEGIN              
  BEGIN TRY              
        SET NOCOUNT ON;              
  DECLARE @TopItem TABLE (ItemName nvarchar(100),CustomerName nvarchar(100),ItemId nvarchar(10), Total numeric(28,6) , Date datetime,Symbol NVARCHAR(10))               
            
                 
  DECLARE @RoundOffValue INT= dbo.Fn_GetDefaultValue('PriceRoundOff')      
        
  IF not exists(select * from ZnodeSalesRepCustomerUserPortal where SalesRepUserId = @SalesRepUserId)    
    SET @SalesRepUserId = 0              
  
  DECLARE @TBL_CultureCurrency TaBLE (Symbol Varchar(100),CurrencyCode varchar(100))              
  INSERT INTO @TBL_CultureCurrency (Symbol,CurrencyCode)              
  SELECT Symbol,CultureCode FROM  ZnodeCulture ZC               
  DECLARE @PortalCurrencySymbol nvarchar(20)          
  DECLARE @DefaultCurrencySymbol nvarchar(20)            
            
  SET @PortalCurrencySymbol = [dbo].[Fn_GetPortalCurrencySymbol](CAST(@PortalID AS INTEGER) )          
  SET @DefaultCurrencySymbol = [dbo].[Fn_GetDefaultCurrencySymbol]()           
          
  IF @PortalCurrencySymbol IS NULL           
  UPDATE @TBL_CultureCurrency SET Symbol  =@DefaultCurrencySymbol WHERE  Symbol IS NULL          
  ELSE           
  UPDATE @TBL_CultureCurrency SET Symbol  =@PortalCurrencySymbol WHERE  Symbol IS NULL          
              
        SELECT ZU.UserId, ZU.FirstName, ZU.MiddleName, ZU.LastName, ZU.Email , ZU.PhoneNumber          
  INTO #User          
  FROM ZnodeUser ZU           
  WHERE EXISTS(SELECT * FROM ZnodeOmsQuote ZOQ where ZU.UserId = ZOQ.UserID )        
  and (ZU.AccountId = @AccountId or isnull(@AccountId,0) = 0 )        
          
  Update ZOQ set OmsOrderStateId = (select top 1 OmsOrderStateId from ZnodeOMSOrderState where OrderStateName = 'EXPIRED')          
  from ZnodeOmsQuote ZOQ          
  Inner Join ZnodeOmsQuoteType ZOQT ON ZOQ.OmsQuoteTypeId = ZOQT.OmsQuoteTypeId          
  INNER JOIN #User U ON ZOQ.UserId = U.UserId           
  INNER JOIN ZnodePortal ZP ON ZOQ.PortalID = ZP.PortalID          
  INNER JOIN ZnodeOMSOrderState ZOOS ON ZOOS.OmsOrderStateId = ZOQ.OmsOrderStateId          
  where  (ZOQ.PortalID = @PortalId OR @PortalId = 0 OR @PortalId is null)          
  and cast(ZOQ.QuoteExpirationDate as date) < cast(GETDATE() as date)          
  and ZOQ.OmsOrderStateId <> (select top 1 OmsOrderStateId from ZnodeOMSOrderState where OrderStateName = 'EXPIRED')          
          
  insert into @TopItem(ItemId, ItemName,CustomerName,Date,Total,Symbol)          
  Select ZOQ.OmsQuoteId,ZOQ.QuoteNumber as QuoteNumber,isnull(U.FirstName,'')+case when U.MiddleName is not null then ' ' else '' end+ isnull(U.MiddleName,'')+' '+isnull(U.LastName,'') as CustomerName,          
  ZOQ.CreatedDate as QuoteDate,ZOQ.QuoteOrderTotal as TotalAmount        
  ,COALESCE (ZC.Symbol,[dbo].[Fn_GetPortalCurrencySymbol](CAST(@PortalId AS INTEGER)),[dbo].[Fn_GetDefaultCurrencySymbol]()) Symbol              
          
  from ZnodeOmsQuote ZOQ          
  Inner Join ZnodeOmsQuoteType ZOQT ON ZOQ.OmsQuoteTypeId = ZOQT.OmsQuoteTypeId          
  INNER JOIN #User U ON ZOQ.UserId = U.UserId           
  INNER JOIN ZnodePortal ZP ON ZOQ.PortalID = ZP.PortalID          
  INNER JOIN ZnodeOMSOrderState ZOOS ON ZOOS.OmsOrderStateId = ZOQ.OmsOrderStateId          
  LEFT JOIN @TBL_CultureCurrency ZC ON (ZC.CurrencyCode = ZOQ.CultureCode )           
  where  (ZOQ.PortalID = @PortalId OR @PortalId = 0 OR @PortalId is null)          
  and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = @SalesRepUserId and U.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)              
   SELECT TOP 5 ItemId, ItemName,CustomerName,Date,Total,Symbol FROM @TopItem Order by  Convert(datetime,Date )  desc                
   END TRY              
              
   BEGIN CATCH              
   DECLARE @Status BIT ;              
       SET @Status = 0;              
       DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),              
    @ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeReport_DashboardQuotes @PortalId = '+@PortalId;             
                                
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                                  
                  
             EXEC Znode_InsertProcedureErrorLog              
    @ProcedureName = 'ZnodeReport_DashboardQuotes',              
    @ErrorInProcedure = @Error_procedure,              
    @ErrorMessage = @ErrorMessage,              
    @ErrorLine = @ErrorLine,              
    @ErrorCall = @ErrorCall;              
   END CATCH              
              
  END;
go	 
IF EXISTS(Select * from sys.procedures where name = 'ZnodeReport_DashboardReturns')
	drop proc ZnodeReport_DashboardReturns
go
CREATE PROCEDURE [dbo].[ZnodeReport_DashboardReturns]              
(             
 @PortalId  bigint  = null,        
 @AccountId bigint  = null  ,    
 @SalesRepUserId int = 0              
)              
AS               
/*              
     Summary:- This procedure is used to get the order details               
    Unit Testing:              
     EXEC [ZnodeReport_DashboardReturns]              
*/              
     BEGIN              
  BEGIN TRY              
        SET NOCOUNT ON;              
  DECLARE @TopItem TABLE (ItemName nvarchar(100),CustomerName nvarchar(100),ItemId nvarchar(10), Total numeric(28,6) , Date datetime,Symbol NVARCHAR(10))               
            
                 
  DECLARE @RoundOffValue INT= dbo.Fn_GetDefaultValue('PriceRoundOff')   
           
   IF not exists(select * from ZnodeSalesRepCustomerUserPortal where SalesRepUserId = @SalesRepUserId)    
    SET @SalesRepUserId = 0            
  
  DECLARE @TBL_CultureCurrency TaBLE (Symbol Varchar(100),CurrencyCode varchar(100))              
  INSERT INTO @TBL_CultureCurrency (Symbol,CurrencyCode)              
  SELECT Symbol,CultureCode FROM  ZnodeCulture ZC               
  DECLARE @PortalCurrencySymbol nvarchar(20)          
  DECLARE @DefaultCurrencySymbol nvarchar(20)            
            
  SET @PortalCurrencySymbol = [dbo].[Fn_GetPortalCurrencySymbol](CAST(@PortalID AS INTEGER) )          
  SET @DefaultCurrencySymbol = [dbo].[Fn_GetDefaultCurrencySymbol]()           
          
  IF @PortalCurrencySymbol IS NULL           
  UPDATE @TBL_CultureCurrency SET Symbol  =@DefaultCurrencySymbol WHERE  Symbol IS NULL          
  ELSE           
  UPDATE @TBL_CultureCurrency SET Symbol  =@PortalCurrencySymbol WHERE  Symbol IS NULL          
              
    INSERT INTO @TopItem(ItemId, ItemName,CustomerName,Date,Total,Symbol)          
        
 select ZRRD.RmaReturnDetailsId,ZRRD.ReturnNumber, isnull(ZU.FirstNAme,'''')+' '+isnull(ZU.LastName,'') as UserName,ZRRD.ReturnDate,          
    round(ZRRD.TotalReturnAmount,@RoundOffValue) TotalReturnAmount,          
    COALESCE (ZC.Symbol,[dbo].[Fn_GetPortalCurrencySymbol](CAST(@PortalId AS INTEGER)),[dbo].[Fn_GetDefaultCurrencySymbol]())               
   from ZnodeRmaReturnDetails ZRRD          
   inner join ZnodeUser ZU ON ZRRD.UserId = ZU.UserId          
   inner join ZnodePortal ZP ON ZRRD.PortalId = ZP.PortalId           
   inner join ZnodeRmaReturnState ZRRS on ZRRD.RmaReturnStateId = ZRRS.RmaReturnStateId          
   LEFT JOIN @TBL_CultureCurrency ZC ON (ZC.CurrencyCode = ZRRD.CultureCode )         
   where isnull(ZRRD.RmaReturnStateId,0) not in (select isnull(RmaReturnStateId,0) from ZnodeRmaReturnState where ReturnStateName = 'Not Submitted')          
   AND (ZRRD.PortalId = @PortalId OR  isnull(@PortalId,0)= 0) AND (ZU.AccountId = @AccountId OR  ISNULL(@AccountId,0) = 0)            
   and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = @SalesRepUserId and ZU.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)       
   SELECT TOP 5 ItemId, ItemName,CustomerName,Date,Total,Symbol FROM @TopItem Order by  Convert(numeric,Total )  desc                
   END TRY              
              
   BEGIN CATCH              
   DECLARE @Status BIT ;              
       SET @Status = 0;              
       DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),              
    @ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeReport_DashboardReturns @PortalId = '+@PortalId;             
                                
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                                  
                  
             EXEC Znode_InsertProcedureErrorLog              
    @ProcedureName = 'ZnodeReport_DashboardReturns',              
    @ErrorInProcedure = @Error_procedure,              
    @ErrorMessage = @ErrorMessage,              
    @ErrorLine = @ErrorLine,              
    @ErrorCall = @ErrorCall;              
   END CATCH              
              
  END;
go	 
insert into ZnodeActions (Areaname,ControllerName,ActionName,IsGlobalAccess,CreatedBy, CreatedDate,ModifiedBy,ModifiedDate)
SELECT null,'Dashboard','GetDashboardDetails',0,2,GETUTCDATE(),2,GETUTCDATE()
WHERE not exists(Select * from ZnodeActions where ControllerName='Dashboard' and ActionName='GetDashboardDetails')

 insert into ZnodeActionMenu (MenuId,ActionId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 
 (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Dashboard' AND ControllerName = 'Dashboard')	
    ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Dashboard' and ActionName= 'GetDashboardDetails') ,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
     (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Dashboard' AND ControllerName = 'Dashboard') and ActionId = 
     (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Dashboard' and ActionName= 'GetDashboardDetails'))

insert into ZnodeMenuActionsPermission(MenuId,ActionId,AccessPermissionId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Dashboard' AND ControllerName = 'Dashboard')	
    ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Dashboard' and ActionName= 'GetDashboardDetails')	
,1,2,Getdate(),2,Getdate() where not exists (select * from ZnodeMenuActionsPermission where MenuId = 
     (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Dashboard' AND ControllerName = 'Dashboard') and ActionId = 
     (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Dashboard' and ActionName= 'GetDashboardDetails'))

insert into ZnodeActions (Areaname,ControllerName,ActionName,IsGlobalAccess,CreatedBy, CreatedDate,ModifiedBy,ModifiedDate)
SELECT null,'Dashboard','GetDashboardOrders',0,2,GETUTCDATE(),2,GETUTCDATE()
WHERE not exists(Select * from ZnodeActions where ControllerName='Dashboard' and ActionName='GetDashboardOrders')

 insert into ZnodeActionMenu (MenuId,ActionId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 
 (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Dashboard' AND ControllerName = 'Dashboard')	
    ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Dashboard' and ActionName= 'GetDashboardOrders') ,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
     (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Dashboard' AND ControllerName = 'Dashboard') and ActionId = 
     (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Dashboard' and ActionName= 'GetDashboardOrders'))

insert into ZnodeMenuActionsPermission(MenuId,ActionId,AccessPermissionId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Dashboard' AND ControllerName = 'Dashboard')	
    ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Dashboard' and ActionName= 'GetDashboardOrders')	
,1,2,Getdate(),2,Getdate() where not exists (select * from ZnodeMenuActionsPermission where MenuId = 
     (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Dashboard' AND ControllerName = 'Dashboard') and ActionId = 
     (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Dashboard' and ActionName= 'GetDashboardOrders'))

insert into ZnodeActions (Areaname,ControllerName,ActionName,IsGlobalAccess,CreatedBy, CreatedDate,ModifiedBy,ModifiedDate)
SELECT null,'Dashboard','GetDashboardReturns',0,2,GETUTCDATE(),2,GETUTCDATE()
WHERE not exists(Select * from ZnodeActions where ControllerName='Dashboard' and ActionName='GetDashboardReturns')

 insert into ZnodeActionMenu (MenuId,ActionId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 
 (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Dashboard' AND ControllerName = 'Dashboard')	
    ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Dashboard' and ActionName= 'GetDashboardReturns') ,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
     (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Dashboard' AND ControllerName = 'Dashboard') and ActionId = 
     (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Dashboard' and ActionName= 'GetDashboardReturns'))

insert into ZnodeMenuActionsPermission(MenuId,ActionId,AccessPermissionId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Dashboard' AND ControllerName = 'Dashboard')	
    ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Dashboard' and ActionName= 'GetDashboardReturns')	
,1,2,Getdate(),2,Getdate() where not exists (select * from ZnodeMenuActionsPermission where MenuId = 
     (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Dashboard' AND ControllerName = 'Dashboard') and ActionId = 
     (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Dashboard' and ActionName= 'GetDashboardReturns'))

insert into ZnodeActions (Areaname,ControllerName,ActionName,IsGlobalAccess,CreatedBy, CreatedDate,ModifiedBy,ModifiedDate)
SELECT null,'Dashboard','GetDashboardQuotes',0,2,GETUTCDATE(),2,GETUTCDATE()
WHERE not exists(Select * from ZnodeActions where ControllerName='Dashboard' and ActionName='GetDashboardQuotes')

 insert into ZnodeActionMenu (MenuId,ActionId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 
 (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Dashboard' AND ControllerName = 'Dashboard')	
    ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Dashboard' and ActionName= 'GetDashboardQuotes') ,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
     (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Dashboard' AND ControllerName = 'Dashboard') and ActionId = 
     (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Dashboard' and ActionName= 'GetDashboardQuotes'))

insert into ZnodeMenuActionsPermission(MenuId,ActionId,AccessPermissionId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Dashboard' AND ControllerName = 'Dashboard')	
    ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Dashboard' and ActionName= 'GetDashboardQuotes')	
,1,2,Getdate(),2,Getdate() where not exists (select * from ZnodeMenuActionsPermission where MenuId = 
     (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Dashboard' AND ControllerName = 'Dashboard') and ActionId = 
     (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Dashboard' and ActionName= 'GetDashboardQuotes'))

insert into ZnodeActions (Areaname,ControllerName,ActionName,IsGlobalAccess,CreatedBy, CreatedDate,ModifiedBy,ModifiedDate)
SELECT null,'Dashboard','GetDashboardSaleDetails',0,2,GETUTCDATE(),2,GETUTCDATE()
WHERE not exists(Select * from ZnodeActions where ControllerName='Dashboard' and ActionName='GetDashboardSaleDetails')

 insert into ZnodeActionMenu (MenuId,ActionId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 
 (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Dashboard' AND ControllerName = 'Dashboard')	
    ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Dashboard' and ActionName= 'GetDashboardSaleDetails') ,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
     (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Dashboard' AND ControllerName = 'Dashboard') and ActionId = 
     (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Dashboard' and ActionName= 'GetDashboardSaleDetails'))

insert into ZnodeMenuActionsPermission(MenuId,ActionId,AccessPermissionId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Dashboard' AND ControllerName = 'Dashboard')	
    ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Dashboard' and ActionName= 'GetDashboardSaleDetails')	
,1,2,Getdate(),2,Getdate() where not exists (select * from ZnodeMenuActionsPermission where MenuId = 
     (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Dashboard' AND ControllerName = 'Dashboard') and ActionId = 
     (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Dashboard' and ActionName= 'GetDashboardSaleDetails'))

insert into ZnodeActions (Areaname,ControllerName,ActionName,IsGlobalAccess,CreatedBy, CreatedDate,ModifiedBy,ModifiedDate)
SELECT null,'Dashboard','GetDashboardSaleDetails',0,2,GETUTCDATE(),2,GETUTCDATE()
WHERE not exists(Select * from ZnodeActions where ControllerName='Dashboard' and ActionName='GetDashboardSaleDetails')

 insert into ZnodeActionMenu (MenuId,ActionId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 
 (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Dashboard' AND ControllerName = 'Dashboard')	
    ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Dashboard' and ActionName= 'GetDashboardSaleDetails') ,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
     (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Dashboard' AND ControllerName = 'Dashboard') and ActionId = 
     (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Dashboard' and ActionName= 'GetDashboardSaleDetails'))

insert into ZnodeMenuActionsPermission(MenuId,ActionId,AccessPermissionId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Dashboard' AND ControllerName = 'Dashboard')	
    ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Dashboard' and ActionName= 'GetDashboardSaleDetails')	
,1,2,Getdate(),2,Getdate() where not exists (select * from ZnodeMenuActionsPermission where MenuId = 
     (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Dashboard' AND ControllerName = 'Dashboard') and ActionId = 
     (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Dashboard' and ActionName= 'GetDashboardSaleDetails'))

insert into ZnodeActions (Areaname,ControllerName,ActionName,IsGlobalAccess,CreatedBy, CreatedDate,ModifiedBy,ModifiedDate)
SELECT null,'Dashboard','GetDashboardTopAccounts',0,2,GETUTCDATE(),2,GETUTCDATE()
WHERE not exists(Select * from ZnodeActions where ControllerName='Dashboard' and ActionName='GetDashboardTopAccounts')

 insert into ZnodeActionMenu (MenuId,ActionId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 
 (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Dashboard' AND ControllerName = 'Dashboard')	
    ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Dashboard' and ActionName= 'GetDashboardTopAccounts') ,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
     (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Dashboard' AND ControllerName = 'Dashboard') and ActionId = 
     (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Dashboard' and ActionName= 'GetDashboardTopAccounts'))

insert into ZnodeMenuActionsPermission(MenuId,ActionId,AccessPermissionId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 
(select TOP 1 MenuId from ZnodeMenu where MenuName = 'Dashboard' AND ControllerName = 'Dashboard')	
    ,(select TOP 1 ActionId from ZnodeActions where ControllerName = 'Dashboard' and ActionName= 'GetDashboardTopAccounts')	
,1,2,Getdate(),2,Getdate() where not exists (select * from ZnodeMenuActionsPermission where MenuId = 
     (select TOP 1 MenuId from ZnodeMenu where MenuName = 'Dashboard' AND ControllerName = 'Dashboard') and ActionId = 
     (select TOP 1 ActionId from ZnodeActions where ControllerName = 'Dashboard' and ActionName= 'GetDashboardTopAccounts'))
go
update ZnodeActions set IsGlobalAccess=0 where ActionName='CreateOrder'
go
if exists(select * from sys.procedures where name = 'Znode_ImportSEODetails')
	drop proc Znode_ImportSEODetails
go
CREATE PROCEDURE [dbo].[Znode_ImportSEODetails](  
   @TableName nvarchar(100), 
   @Status bit OUT, @UserId int, 
   @ImportProcessLogId int, 
   @NewGUId nvarchar(200), 
   @LocaleId int= 1,
   @PortalId int ,
   @CsvColumnString nvarchar(max))  
AS  
 --------------------------------------------------------------------------------------  
 -- Summary :  Import SEO Details  
   
 -- Unit Testing :   
 --------------------------------------------------------------------------------------  
  
BEGIN  
 BEGIN TRAN A;  
 BEGIN TRY  
   
  DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max);  
  DECLARE @GetDate datetime= dbo.Fn_GetDate();  
    
    
  DECLARE @CMSSEOTypeProduct INT ,@CMSSEOTypeCategory INT  
  
  SELECT @CMSSEOTypeProduct = CMSSEOTypeId FROM ZnodeCMSSEOType WHERE Name = 'Product'  
  SELECT @CMSSEOTypeCategory = CMSSEOTypeId FROM ZnodeCMSSEOType WHERE Name = 'Category'  
  
  
  -- Three type of import required three table varible for product , category and brand  
  CREATE TABLE #InsertSEODetails   
  (   
   RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, ImportType varchar(20), Code nvarchar(300),   
   IsRedirect bit ,MetaInformation nvarchar(max),PortalId int ,SEOUrl nvarchar(max),IsActive varchar(10),  
   SEOTitle nvarchar(max),SEODescription nvarchar(max),SEOKeywords nvarchar(max),   
   RedirectFrom nvarchar(max),RedirectTo nvarchar(max), EnableRedirection bit, CanonicalURL VARCHAR(200),   
   RobotTag VARCHAR(50), GUID nvarchar(400)  
   --Index Ind_ImportType (ImportType),Index Ind_Code (Code)  
  );  
  
  CREATE TABLE #InsertSEODetailsOFProducts   
  (   
   RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, ImportType varchar(20), Code nvarchar(300),   
   IsRedirect bit ,MetaInformation nvarchar(max),PortalId int ,SEOUrl nvarchar(max),IsActive varchar(10),  
   SEOTitle nvarchar(max),SEODescription nvarchar(max),SEOKeywords nvarchar(max),  
   RedirectFrom nvarchar(max),RedirectTo nvarchar(max), EnableRedirection bit, CanonicalURL VARCHAR(200),  
   RobotTag VARCHAR(50),GUID nvarchar(400)  
   --Index Ind_ImportType (ImportType),Index Ind_Code (Code)  
  );  
  
  CREATE TABLE #InsertSEODetailsOFCategory   
  (   
   RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, ImportType varchar(20), Code nvarchar(300),   
   IsRedirect bit ,MetaInformation nvarchar(max),PortalId int ,SEOUrl nvarchar(max),IsActive varchar(10),  
   SEOTitle nvarchar(max),SEODescription nvarchar(max),SEOKeywords nvarchar(max),  
   RedirectFrom nvarchar(max),RedirectTo nvarchar(max), EnableRedirection bit, CanonicalURL VARCHAR(200), 
   RobotTag VARCHAR(50),GUID nvarchar(400)  
   --Index Ind_ImportType (ImportType),Index Ind_Code (Code)  
  );  
  
  CREATE TABLE #InsertSEODetailsOFBrand   
  (   
   RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, ImportType varchar(20), Code nvarchar(300),   
   IsRedirect bit ,MetaInformation nvarchar(max),PortalId int ,SEOUrl nvarchar(max),IsActive varchar(10),  
   SEOTitle nvarchar(max),SEODescription nvarchar(max),SEOKeywords nvarchar(max),   
   RedirectFrom nvarchar(max),RedirectTo nvarchar(max), EnableRedirection bit, CanonicalURL VARCHAR(200),  
   RobotTag VARCHAR(50),GUID nvarchar(400)  
   --Index Ind_ImportType (ImportType),Index Ind_Code (Code)  
  );  
  
    
  DECLARE @InsertedZnodeCMSSEODetail TABLE  
  (   
   CMSSEODetailId int , SEOCode Varchar(4000), CMSSEOTypeId int  
  );  
    
  --SET @SSQL = 'Select RowNumber,ImportType,Code,IsRedirect,MetaInformation,SEOUrl,IsActive,SEOTitle,SEODescription,SEOKeywords,GUID  FROM '+@TableName;  
  SET @SSQL = 'Select RowNumber,'+@CsvColumnString+',GUID  FROM '+@TableName;  
  
  INSERT INTO #InsertSEODetails(RowNumber,ImportType,Code,IsRedirect,MetaInformation,SEOUrl,IsActive,SEOTitle,SEODescription,SEOKeywords,RedirectFrom,RedirectTo,EnableRedirection,CanonicalURL,RobotTag,GUID )  
  EXEC sys.sp_sqlexec @SSQL;  
  
  INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
      SELECT '30', 'SEOUrl', SEOUrl, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
      FROM #InsertSEODetails AS ii   
      where ii.SEOURL in (Select ISD.SEOURL from #InsertSEODetails ISD Group by ISD.SEOUrl having count(*) > 1 ) 
	    
  
  INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
      SELECT '10', 'SEOUrl', SEOUrl, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
      FROM #InsertSEODetails AS ii   
      where EXISTS (Select TOP 1 1 from ZnodeCMSSEODetail ZCSD WHERE ZCSD.SEOUrl = ii.SEOUrl AND ZCSD.PortalId = @PortalId
	  AND ZCSD.SEOCode <> ii.Code  AND EXISTS  
     (SELECT TOP 1 1 FROM ZnodeCMSSEODetailLocale dl WHERE dl.CMSSEODetailId = ZCSD.CMSSEODetailId AND dl.LocaleId = @LocaleId  
           AND dl.SEODescription = ii.SEODescription AND dl.SEOTitle = ii.SEOTitle AND dl.SEOKeywords = ii.SEOKeywords))   
  
  INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
      SELECT '53', 'RedirectFrom', RedirectFrom, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
      FROM #InsertSEODetails AS ii   
      where ii.RedirectFrom in (Select ISD.RedirectFrom from #InsertSEODetails ISD Group by ISD.RedirectFrom having count(*) > 1 )   
  AND (ii.RedirectFrom <> '' )

  INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
      SELECT '35', 'RedirectFrom\RedirectTo', RedirectFrom + '  ' + RedirectTo  , @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
      FROM #InsertSEODetails AS ii   
      where ii.RedirectFrom = ii.RedirectTo  
	  AND (ii.RedirectFrom <> '' AND ii.RedirectTo <> '' )
  
  INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
      SELECT '35', 'SEOUrl', SEOUrl, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId  
      FROM #InsertSEODetails AS ii  
      WHERE ltrim(rtrim(isnull(ii.SEOUrl,''))) like '% %' -----space not allowed  
  
  INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
      SELECT '19', 'ImportType', ImportType, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
      FROM #InsertSEODetails AS ii  
      WHERE ii.ImportType NOT in   
      (  
       Select NAME from ZnodeCMSSEOType where NAME NOT IN ('Content Page','BlogNews','Brand')  
      );  

  INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
      SELECT '35', 'IsActive', IsActive, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
      FROM #InsertSEODetails AS ii  
      WHERE ii.IsActive not in ('True','1','Yes','FALSE','0','No')
  
  INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
      SELECT '9', 'RobotTag', RobotTag, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
      FROM #InsertSEODetails AS ii  
      WHERE ii.RobotTag not in ( 'INDEX_FOLLOW','NOINDEX_NOFOLLOW','NOINDEX_FOLLOW','INDEX_NOFOLLOW','1','2','3','4') 
	  and isnull(ii.RobotTag,'')<>''

  --INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
  --    SELECT '30', 'CanonicalURL', CanonicalURL, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
  --    FROM #InsertSEODetails AS ii   
  --    where ii.CanonicalURL in (Select ISD.CanonicalURL from #InsertSEODetails ISD Group by ISD.CanonicalURL having count(*) > 1 )

  --INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
  --    SELECT '10', 'CanonicalURL', CanonicalURL, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
  --    FROM #InsertSEODetails AS ii   
  --    where EXISTS (Select TOP 1 1 from ZnodeCMSSEODetail ZCSD WHERE ZCSD.PortalId = @PortalId
	 -- AND ZCSD.SEOCode <> ii.Code  AND EXISTS  
  --   (SELECT TOP 1 1 FROM ZnodeCMSSEODetailLocale dl WHERE dl.CMSSEODetailId = ZCSD.CMSSEODetailId AND dl.LocaleId = @LocaleId  
  --         AND dl.CanonicalURL = ii.CanonicalURL AND dl.SEODescription = ii.SEODescription AND dl.SEOTitle = ii.SEOTitle AND dl.SEOKeywords = ii.SEOKeywords)) 

  --INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
  --    SELECT '35', 'CanonicalURL', CanonicalURL, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId  
  --    FROM #InsertSEODetails AS ii  
  --    WHERE ltrim(rtrim(isnull(ii.CanonicalURL,''))) like '% %'

  UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ SEOCode - ' + ISNULL(Code,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN #InsertSEODetails IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL


  
  DELETE FROM #InsertSEODetails  
  WHERE RowNumber IN  
  (  
   SELECT DISTINCT   
       RowNumber  
   FROM ZnodeImportLog  
   WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null   
   --AND GUID = @NewGUID  
  );  
    
   
  
-------------------------------------------------------------------------------------------------------------------------------  
  
  INSERT INTO #InsertSEODetailsOFProducts(  RowNumber , ImportType , Code ,   
   IsRedirect ,MetaInformation ,SEOUrl ,IsActive ,  
   SEOTitle ,SEODescription ,SEOKeywords, RedirectFrom, RedirectTo,EnableRedirection, CanonicalURL, RobotTag, GUID )  
   SELECT RowNumber , ImportType , Code , IsRedirect ,MetaInformation ,SEOUrl , 
      CASE WHEN IsActive in ('True','1','Yes') 
	       Then 1 
           ELSE 0
      END as IsActive, SEOTitle ,SEODescription ,SEOKeywords, RedirectFrom, RedirectTo,EnableRedirection, CanonicalURL, RobotTag, GUID  
   FROM #InsertSEODetails WHERE ImportType = 'Product'  
  
  
  INSERT INTO #InsertSEODetailsOFCategory( RowNumber , ImportType , Code ,   
   IsRedirect ,MetaInformation,SEOUrl ,IsActive ,  
   SEOTitle ,SEODescription ,SEOKeywords, RedirectFrom, RedirectTo,EnableRedirection, CanonicalURL, RobotTag , GUID )  
   SELECT RowNumber , ImportType , Code , IsRedirect ,MetaInformation ,SEOUrl , 
	   CASE WHEN IsActive in ('True','1','Yes') 
			Then 1 
			ELSE 0
	   END as IsActive, SEOTitle ,SEODescription ,SEOKeywords, RedirectFrom, RedirectTo,EnableRedirection, CanonicalURL, RobotTag, GUID  
   FROM #InsertSEODetails WHERE ImportType = 'Category'  
  
  INSERT INTO #InsertSEODetailsOFBrand( RowNumber , ImportType , Code ,   
   IsRedirect ,MetaInformation ,SEOUrl ,IsActive ,  
   SEOTitle ,SEODescription ,SEOKeywords, RedirectFrom, RedirectTo,EnableRedirection, CanonicalURL, RobotTag , GUID )  
   SELECT RowNumber , ImportType , Code , IsRedirect ,MetaInformation ,SEOUrl ,
		CASE WHEN IsActive in ('True','1','Yes') 
			Then 1 
			ELSE 0
	    END as IsActive, SEOTitle ,SEODescription ,SEOKeywords, RedirectFrom, RedirectTo,EnableRedirection, CanonicalURL, RobotTag, GUID  
   FROM #InsertSEODetails WHERE ImportType = 'Brand'  
  
  
     -- start Functional Validation   
  --1. Product  
  --2. Category  
  --3. Content Page  
  --4. Brand  
  -----------------------------------------------  
  
    
  INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
      SELECT '19', 'SKU', CODE, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
      FROM #InsertSEODetailsOFProducts AS ii  
      WHERE ii.CODE NOT in   
      (  
     SELECT ZPAVL.AttributeValue  
     FROM ZnodePimAttributeValue ZPAV   
     inner join ZnodePimAttributeValueLocale ZPAVL ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId  
     inner join ZnodePimAttribute ZPA on ZPAV.PimAttributeId = ZPA.PimAttributeId  
     Where ZPA.AttributeCode = 'SKU' AND ZPAVL.AttributeValue IS NOT NULL   
      )  AND ImportType = 'Product';  
  
  
    
  INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
      SELECT '19', 'Category', CODE, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
      FROM #InsertSEODetailsOFCategory AS ii  
      WHERE ii.CODE NOT in   
      (  
     SELECT ZPCAVL.CategoryValue  
     FROM ZnodePimCategoryAttributeValue ZPCAV   
     INNER JOIN ZnodePimCategoryAttributeValueLocale ZPCAVL on ZPCAV.PimCategoryAttributeValueId = ZPCAVL.PimCategoryAttributeValueId  
     INNER JOIN ZnodePimAttribute ZPA on ZPCAV.PimAttributeId = ZPA.PimAttributeId  
     Where ZPA.AttributeCode = 'CategoryCode' AND ZPCAVL.CategoryValue IS NOT NULL  
      )  AND ImportType = 'Category';  
  
  INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
      SELECT '19', 'Brand', CODE, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
      FROM #InsertSEODetailsOFBrand AS ii  
      WHERE ii.CODE NOT in   
      (  
       Select BrandCode from ZnodeBrandDetails WHERE BrandCode IS NOT NULL  
      )  AND ImportType = 'Brand';  
    
    -- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM #InsertSEODetails
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount , 
		TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
		WHERE ImportProcessLogId = @ImportProcessLogId;
	

  --Note : Content page import is not required   
    
  -- End Function Validation    
  -----------------------------------------------  
  --- Delete Invalid Data after functional validatin    
 
  DELETE FROM #InsertSEODetailsOFProducts  
  WHERE RowNumber IN  
  (  
   SELECT DISTINCT   
       RowNumber  
   FROM ZnodeImportLog  
   WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null   
   --AND GUID = @NewGUID  
  );  
  
  DELETE FROM #InsertSEODetailsOFCategory  
  WHERE RowNumber IN  
  (  
   SELECT DISTINCT   
       RowNumber  
   FROM ZnodeImportLog  
   WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null   
   --AND GUID = @NewGUID  
  );  
  
  DELETE FROM #InsertSEODetailsOFBrand  
  WHERE RowNumber IN  
  (  
   SELECT DISTINCT   
       RowNumber  
   FROM ZnodeImportLog  
   WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null   
   --AND GUID = @NewGUID  
  );  
  
 
  -- Insert Product Data   
  If Exists (Select top 1 1 from #InsertSEODetailsOFProducts)  
  Begin  
   Update ZCSD SET ZCSD.IsRedirect = ISD.IsRedirect ,  
         ZCSD.MetaInformation =  ISD.MetaInformation,  
         ZCSD.SEOUrl=  ISD.SEOUrl,  
         ZCSD.IsPublish = 0  
   FROM   
   #InsertSEODetailsOFProducts ISD    
   INNER JOIN ZnodeCMSSEODetail ZCSD ON  ZCSD.CMSSEOTypeId = @CMSSEOTypeProduct AND ZCSD.SEOCode = ISD.Code  
   INNER JOIN ZnodeCMSSEODetailLocale ZCSDL ON ZCSD.CMSSEODetailId = ZCSDL.CMSSEODetailId  
   where  ZCSD.PortalId  =@PortalId  AND ZCSDL.LocaleId = @LocaleId;  
     
   Update ZCSDL SET ZCSDL.SEOTitle = ISD.SEOTitle  
       ,ZCSDL.SEODescription = ISD.SEODescription  
       ,ZCSDL.SEOKeywords= ISD.SEOKeywords
	   ,ZCSDL.CanonicalURL = ISD.CanonicalURL
	   ,ZCSDL.RobotTag = ISD.RobotTag  
    FROM   
   #InsertSEODetailsOFProducts ISD    
   INNER JOIN ZnodeCMSSEODetail ZCSD ON  ZCSD.CMSSEOTypeId = @CMSSEOTypeProduct AND ZCSD.SEOCode = ISD.Code  
   INNER JOIN ZnodeCMSSEODetailLocale ZCSDL ON ZCSD.CMSSEODetailId = ZCSDL.CMSSEODetailId  
   where  ZCSD.PortalId = @PortalId AND ZCSDL.LocaleId = @LocaleId;   
  
  ----Making product as draft if SEOUrl is changed for part of partial publish
   update ZPP SET ZPP.PublishStateId = (select top 1 PublishStateId from ZnodePublishState where StateName = 'Draft')
   from ZnodePimProduct ZPP
   inner join ZnodePimAttributeValue ZPAV ON ZPP.PimProductId = ZPAV.PimProductId
   inner join ZnodePimAttributeValueLocale ZPAVL ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId
   where exists (select * from ZnodePimAttribute zpa where zpa.AttributeCode = 'SKU' and ZPAV.PimAttributeId = zpa.PimAttributeId)
   and exists(select * from #InsertSEODetailsOFProducts ISD    
			 INNER JOIN ZnodeCMSSEODetail ZCSD ON  ZCSD.CMSSEOTypeId = @CMSSEOTypeProduct AND ZCSD.SEOCode = ISD.Code
			 where ZPAVL.AttributeValue = ZCSD.SEOCode
			 )
     
   insert into ZnodeCMSSEODetailLocale (CMSSEODetailId,LocaleId,SEOTitle,SEODescription,SEOKeywords,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,CanonicalURL,RobotTag)  
   SELECT distinct CSD.CMSSEODetailId,@LocaleId,ISD.SEOTitle,ISD.SEODescription,ISD.SEOKeywords,@USerId, @GetDate,@USerId, @GetDate, CanonicalURL,RobotTag  
   FROM ZnodeCMSSEODetail CSD  
   INNER JOIN #InsertSEODetailsOFProducts ISD ON CSD.SEOCode = ISD.Code AND CSD.CMSSEOTypeId = @CMSSEOTypeProduct AND CSD.SEOUrl = ISD.SEOUrl  
   WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSSEODetailLocale CSDL WHERE CSDL.LocaleId = @LocaleId AND CSD.CMSSEODetailId = CSDL.CMSSEODetailId )  
   AND CSD.portalId = @PortalId  
  
     
   Delete from @InsertedZnodeCMSSEODetail  

      
   --IF NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSSEODetail SD INNER JOIN #InsertSEODetailsOFProducts DP ON SD.SEOCode = DP.Code AND SD.PortalId =  @PortalId  
   --                     AND  SD.CMSSEOTypeId = @CMSSEOTypeProduct)  
   BEGIN  
   INSERT INTO ZnodeCMSSEODetail(CMSSEOTypeId,SEOCode,IsRedirect,MetaInformation,PortalId,SEOUrl,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)    
   OUTPUT Inserted.CMSSEODetailId,Inserted.SEOCode,Inserted.CMSSEOTypeId INTO @InsertedZnodeCMSSEODetail    
   Select Distinct @CMSSEOTypeProduct,ISD.Code , ISD.IsRedirect,ISD.MetaInformation,@PortalId,ISD.SEOUrl,@USerId, @GetDate,@USerId, @GetDate from   
   #InsertSEODetailsOFProducts ISD    
   where NOT EXISTS (Select TOP 1 1 from ZnodeCMSSEODetail ZCSD where ZCSD.CMSSEOTypeId = @CMSSEOTypeProduct AND ZCSD.SEOCode = ISD.Code and  ZCSD.PortalId =@PortalId   );  
    
   insert into ZnodeCMSSEODetailLocale(CMSSEODetailId,LocaleId,SEOTitle,SEODescription,SEOKeywords,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,CanonicalURL,RobotTag)  
   Select Distinct IZCSD.CMSSEODetailId,@LocaleId,ISD.SEOTitle,ISD.SEODescription,ISD.SEOKeywords,@USerId, @GetDate,@USerId, @GetDate,CanonicalURL,RobotTag   
   from @InsertedZnodeCMSSEODetail IZCSD   
   INNER JOIN #InsertSEODetailsOFProducts ISD ON IZCSD.SEOCode = ISD.Code   

   ----Making product as draft if SEOUrl is inserted for part of partial publish
   update ZPP SET ZPP.PublishStateId = (select top 1 PublishStateId from ZnodePublishState where StateName = 'Draft')
   from ZnodePimProduct ZPP
   inner join ZnodePimAttributeValue ZPAV ON ZPP.PimProductId = ZPAV.PimProductId
   inner join ZnodePimAttributeValueLocale ZPAVL ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId
   where exists (select * from ZnodePimAttribute zpa where zpa.AttributeCode = 'SKU' and ZPAV.PimAttributeId = zpa.PimAttributeId)
   and exists(select * from @InsertedZnodeCMSSEODetail IZCSD where ZPAVL.AttributeValue = IZCSD.SEOCode)
  
   END  
     
  
   -----RedirectUrlInsert  
  -- INSERT INTO ZnodeCMSUrlRedirect ( RedirectFrom,RedirectTo,IsActive,PortalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)  
  -- select RedirectFrom,RedirectTo,EnableRedirection,@PortalId as PortalId ,@USerId as CreatedBy,@GetDate as CreatedDate,@USerId as ModifiedBy,@GetDate as ModifiedDate  
  -- from #InsertSEODetailsOFProducts  
  -- where IsRedirect = 1  
  --END  
  
	-----RedirectUrlInsert  
   INSERT INTO ZnodeCMSUrlRedirect ( RedirectFrom,RedirectTo,IsActive,PortalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)  
   SELECT RedirectFrom,RedirectTo,
   EnableRedirection,@PortalId as PortalId ,2 as CreatedBy,@GetDate as CreatedDate,2 as ModifiedBy,@GetDate as ModifiedDate  
   FROM #InsertSEODetailsOFProducts SDP  
   WHERE IsRedirect = 1 
   --AND (SDP.RedirectFrom <> '' AND SDP.RedirectTo <> '' ) 
   AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSUrlRedirect ZCR 
								  WHERE ZCR.RedirectFrom = SDP.RedirectFrom AND ZCR.RedirectTo = SDP.RedirectTo)
   AND (SDP.RedirectFrom <> '' AND SDP.RedirectTo <> '' )
  
  END  
  
  -- Insert Category Data   
  If Exists (Select top 1 1 from #InsertSEODetailsOFCategory)  
  Begin  
  
   Update ZCSD SET ZCSD.IsRedirect = ISD.IsRedirect ,  
         ZCSD.MetaInformation =  ISD.MetaInformation,  
         ZCSD.SEOUrl=  ISD.SEOUrl,  
         ZCSD.IsPublish = 0  
   FROM   
   #InsertSEODetailsOFCategory ISD    
   INNER JOIN ZnodeCMSSEODetail ZCSD ON  ZCSD.CMSSEOTypeId = @CMSSEOTypeCategory AND ZCSD.SEOCode = ISD.Code  
   INNER JOIN ZnodeCMSSEODetailLocale ZCSDL ON ZCSD.CMSSEODetailId = ZCSDL.CMSSEODetailId  
   where  ZCSD.PortalId  =@PortalId  AND ZCSDL.LocaleId = @LocaleId;  
     
     
   Update ZCSDL SET ZCSDL.SEOTitle = ISD.SEOTitle  
       ,ZCSDL.SEODescription = ISD.SEODescription  
       ,ZCSDL.SEOKeywords= ISD.SEOKeywords 
	   ,CanonicalURL = ISD.CanonicalURL
	   ,RobotTag = ISD.RobotTag
    FROM   
   #InsertSEODetailsOFCategory ISD    
   INNER JOIN ZnodeCMSSEODetail ZCSD ON  ZCSD.CMSSEOTypeId = @CMSSEOTypeCategory AND ZCSD.SEOCode = ISD.Code  
   INNER JOIN ZnodeCMSSEODetailLocale ZCSDL ON ZCSD.CMSSEODetailId = ZCSDL.CMSSEODetailId  
   where  ZCSD.PortalId  =@PortalId AND ZCSDL.LocaleId = @LocaleId;   
  
   insert into ZnodeCMSSEODetailLocale (CMSSEODetailId,LocaleId,SEOTitle,SEODescription,SEOKeywords,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,CanonicalURL,RobotTag)  
   SELECT distinct CSD.CMSSEODetailId,@LocaleId,ISD.SEOTitle,ISD.SEODescription,ISD.SEOKeywords,@USerId, @GetDate,@USerId, @GetDate,CanonicalURL,RobotTag  
   FROM ZnodeCMSSEODetail CSD  
   INNER JOIN #InsertSEODetailsOFProducts ISD ON CSD.SEOCode = ISD.Code AND CSD.CMSSEOTypeId = @CMSSEOTypeCategory AND CSD.SEOUrl = ISD.SEOUrl  
   WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSSEODetailLocale CSDL WHERE CSDL.LocaleId = @LocaleId AND CSD.CMSSEODetailId = CSDL.CMSSEODetailId )  
   AND CSD.portalId = @PortalId  
  
  
   Delete from @InsertedZnodeCMSSEODetail  
  
   IF NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSSEODetail SD INNER JOIN #InsertSEODetailsOFProducts DP ON SD.SEOCode = DP.Code AND SD.PortalId =  @PortalId  
                        AND  SD.CMSSEOTypeId = @CMSSEOTypeCategory)  
   BEGIN  
   INSERT INTO ZnodeCMSSEODetail(CMSSEOTypeId,SEOCode,IsRedirect,MetaInformation,PortalId,SEOUrl,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)    
   OUTPUT Inserted.CMSSEODetailId,Inserted.SEOCode,Inserted.CMSSEOTypeId INTO @InsertedZnodeCMSSEODetail    
   Select Distinct @CMSSEOTypeCategory,ISD.Code , ISD.IsRedirect,ISD.MetaInformation,@PortalId,ISD.SEOUrl,@USerId, @GetDate,@USerId, @GetDate   
   from #InsertSEODetailsOFCategory ISD    
   where NOT EXISTS (Select TOP 1 1 from ZnodeCMSSEODetail ZCSD where ZCSD.CMSSEOTypeId = @CMSSEOTypeCategory AND ZCSD.SEOCode  = ISD.Code AND ZCSD.PortalId = @PortalId );  
  
   insert into ZnodeCMSSEODetailLocale(CMSSEODetailId,LocaleId,SEOTitle,SEODescription,SEOKeywords,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,CanonicalURL,RobotTag)  
   Select Distinct IZCSD.CMSSEODetailId,@LocaleId,ISD.SEOTitle,ISD.SEODescription,ISD.SEOKeywords,@USerId, @GetDate,@USerId, @GetDate,CanonicalURL,RobotTag   
   from @InsertedZnodeCMSSEODetail IZCSD   
   INNER JOIN #InsertSEODetailsOFCategory ISD ON IZCSD.SEOCode = ISD.Code   
   WHERE IZCSD.CMSSEOTypeId =@CMSSEOTypeCategory    
   END  
  
   -----RedirectUrlInsert  
   INSERT INTO ZnodeCMSUrlRedirect ( RedirectFrom,RedirectTo,IsActive,PortalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)  
   SELECT RedirectFrom,RedirectTo,
   EnableRedirection,@PortalId as PortalId ,2 as CreatedBy,@GetDate as CreatedDate,2 as ModifiedBy,@GetDate as ModifiedDate  
   FROM #InsertSEODetailsOFCategory SDP  
   WHERE IsRedirect = 1 
   --AND (SDP.RedirectFrom <> '' AND SDP.RedirectTo <> '' ) 
   AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSUrlRedirect ZCR 
								  WHERE ZCR.RedirectFrom = SDP.RedirectFrom AND ZCR.RedirectTo = SDP.RedirectTo)
   AND (SDP.RedirectFrom <> '' AND SDP.RedirectTo <> '' )
   --AND ((SDP.RedirectFrom <> '' OR SDP.RedirectFrom IS NOT NULL )
   --OR ( SDP.RedirectTo <> '' OR SDP.RedirectTo IS NOT NULL ))
  END  
             
  --select 'End'  
  --      SET @Status = 1;  
  UPDATE ZnodeImportProcessLog  
    SET Status = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = @GetDate  
  WHERE ImportProcessLogId = @ImportProcessLogId;  
  
  COMMIT TRAN A;  
 END TRY  
 BEGIN CATCH  
  
  UPDATE ZnodeImportProcessLog  
    SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate  
  WHERE ImportProcessLogId = @ImportProcessLogId;  
  
  SET @Status = 0;  
  SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();  
  ROLLBACK TRAN A;  
 END CATCH;  
END;
go
if exists(select * from sys.procedures where name = 'Znode_InsertUpdatePimCatalogProductDetailJson')
	drop proc Znode_InsertUpdatePimCatalogProductDetailJson
go
CREATE PROCEDURE [dbo].[Znode_InsertUpdatePimCatalogProductDetailJson] 
(
  @PublishCatalogId INT = 0 
  ,@LocaleId TransferId READONLY 
  ,@UserId INT = 0   
)
AS 

--declare @LocaleId TransferId
--insert into @LocaleId
--select 1
--exec [Znode_InsertUpdatePimCatalogProductDetailJson] @PublishCatalogId=3,@LocaleId=@LocaleId,@UserId=2

--declare @LocaleId TransferId
--insert into @LocaleId
--select 1
--union 
--select 4
--union 
--select 2
--exec [Znode_POC_InsertUpdatePimCatalogProductDetail] @PublishCatalogId=3,@LocaleId=@LocaleId,@UserId=2
BEGIN 
 BEGIN TRY 

  SET NOCOUNT ON 
       DECLARE @LocaleId_In INT = 0 , @DefaultLocaleId INT = dbo.FN_GETDefaultLocaleId()
			   ,@Date DATETIME = dbo.fn_GetDate()
	   DECLARE @PimMediaAttributeId INT = dbo.Fn_GetProductImageAttributeId()		   

	   CREATE TABLE #PimDefaultValueLocale  (PimAttributeDefaultJsonId INT  PRIMARY KEY ,PimAttributeDefaultValueId INT ,LocaleId INT, DefaultValueJson	nvarchar(max) )

	   CREATE TABLE #AttributeValueLocale  (Id int Identity,  PimProductId int, AttributeCode Varchar(300), AttributeValue varchar(max), AttributeEntity varchar(max), LocaleId int )

	    SELECT ZPAV.PimProductId, ZPP.PublishProductId, ZPAVL.LocaleId
		into #ProductLocaleWise
		FROM ZnodePimAttributeValue ZPAV 
		INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId
		inner join ZnodePublishProduct ZPP on ZPAV.PimProductId = ZPP.PimProductId
		WHERE ZPAV.PimAttributeId = (select PimAttributeId from ZnodePimAttribute where AttributeCode = 'SKU')

		SELECT BTM.PimProductId , ZPCPD.PublishProductId, ZPCPD.PublishCatalogId,BTM.ModifiedDate
		into #ProductAttributeXML
		FROM ZnodePublishProductAttributeJson BTM 
		inner join ZnodePublishProduct ZPP1 ON BTM.PimProductId = ZPP1.PimProductId
		inner join ZnodePublishCatalogProductDetail ZPCPD ON ZPP1.PublishProductId = ZPCPD.PublishProductId AND ZPCPD.PublishCatalogId = ZPP1.PublishCatalogId 
		WHERE ZPCPD.PublishCatalogId =  @PublishCatalogId 

	    -------- Products Attribute modified 
		SELECT DISTINCT ZPP.PublishProductId,  ZPCC.PimCategoryHierarchyId 
		Into #ModifiedProducts
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId = ZPP.PimProductId )
		INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ZPAV.PimAttributeId)
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (isnull(ZPPC.PimCategoryHierarchyId,0) = isnull(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId AND ZPFGM.PimAttributeId = ZPAV.PimAttributeId))
		AND EXISTS (SELECT TOP 1 1 FROM #ProductAttributeXML BTM WHERE BTM.PimProductId = ZPP.PimProductId AND BTM.PublishCatalogId = ZPP.PublishCatalogId
						AND (BTM.ModifiedDate < ZPAV.ModifiedDate OR BTM.ModifiedDate < ZPA.ModifiedDate)   ) 
		
		-------- Products not published  
		Insert Into #ModifiedProducts
		SELECT ZPP.PublishProductId,  ZPCC.PimCategoryHierarchyId 
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (isnull(ZPPC.PimCategoryHierarchyId,0) = isnull(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId ))--AND ZPFGM.PimAttributeId = ZPAV.PimAttributeId))
		AND exists(select * from ZnodePimProduct ZPP1 INNER JOIN ZnodePublishState ZPS ON ZPP1.PublishStateId = ZPS.PublishStateId
					where StateName <> 'Publish' and ZPP.PimProductId = ZPP1.PimProductId )	
			
		-------- Products associated to catalog or category or modified catalog category products
		Insert Into #ModifiedProducts		
		SELECT ZPP.PublishProductId,  ZPCC.PimCategoryHierarchyId 
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		INNER JOIN ZnodePimCategoryProduct ZPCC1 ON  ZPP.PimProductId = ZPCC1.PimProductId 
		INNER JOIN ZnodePimCategoryHierarchy ZPCH ON ZPCC1.PimCategoryId = ZPCH.PimCategoryId and ZPC.PimCatalogId = ZPCH.PimCatalogId 
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (isnull(ZPPC.PimCategoryHierarchyId,0) = isnull(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId ))--AND ZPFGM.PimAttributeId = ZPAV.PimAttributeId))
		AND EXISTS (SELECT TOP 1 1 FROM #ProductAttributeXML BTM WHERE BTM.PimProductId = ZPCC1.PimProductId AND BTM.PublishCatalogId = ZPP.PublishCatalogId
						AND (BTM.ModifiedDate < ZPCC1.ModifiedDate )   ) 

		-------- Link Product modified 
		Insert Into #ModifiedProducts	
		SELECT ZPP.PublishProductId,  ZPCC.PimCategoryHierarchyId 
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePimLinkProductDetail ZPAV ON (ZPAV.PimParentProductId = ZPP.PimProductId )
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (isnull(ZPPC.PimCategoryHierarchyId,0) = isnull(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		--AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId AND ZPFGM.PimAttributeId = ZPAV.PimAttributeId))
		AND EXISTS (SELECT TOP 1 1 FROM #ProductAttributeXML BTM WHERE BTM.PimProductId = ZPP.PimProductId AND BTM.PublishCatalogId = ZPP.PublishCatalogId
						AND (BTM.ModifiedDate < ZPAV.ModifiedDate)   ) 

		--------Associated child Products (varients, Group) not published	
		Insert Into #ModifiedProducts	
		SELECT ZPP.PublishProductId,  ZPCC.PimCategoryHierarchyId 
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePimProductTypeAssociation ZPAV ON (ZPAV.PimProductId = ZPP.PimProductId )
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (isnull(ZPPC.PimCategoryHierarchyId,0) = isnull(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		AND exists(select * from ZnodePimProduct ZPP1 INNER JOIN ZnodePublishState ZPS ON ZPP1.PublishStateId = ZPS.PublishStateId
					where StateName <> 'Publish' and ZPAV.PimProductId = ZPP1.PimProductId )


		--------Link child Products (Bundle) not published 	
		Insert Into #ModifiedProducts
		SELECT ZPP.PublishProductId,  ZPCC.PimCategoryHierarchyId 
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePimLinkProductDetail ZPAV ON (ZPAV.PimProductId = ZPP.PimProductId )
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (isnull(ZPPC.PimCategoryHierarchyId,0) = isnull(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		AND exists(select * from ZnodePimProduct ZPP1 INNER JOIN ZnodePublishState ZPS ON ZPP1.PublishStateId = ZPS.PublishStateId
					where StateName <> 'Publish' and ZPAV.PimProductId = ZPP1.PimProductId )

		----Getting products of newly added category hierarchy 
		Insert Into #ModifiedProducts		
		SELECT ZPP.PublishProductId,  ZPCC.PimCategoryHierarchyId
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		INNER JOIN ZnodePimCategoryProduct ZPCC1 ON  ZPP.PimProductId = ZPCC1.PimProductId 
		INNER JOIN ZnodePimCategoryHierarchy ZPCH ON ZPCC1.PimCategoryId = ZPCH.PimCategoryId and ZPC.PimCatalogId = ZPCH.PimCatalogId 
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (isnull(ZPPC.PimCategoryHierarchyId,0) = isnull(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId ))--AND ZPFGM.PimAttributeId = ZPAV.PimAttributeId))
		AND not exists(select * from ZnodePublishCatalogProductDetail ZPCPPD where ZPCPPD.PimCategoryHierarchyId =  ZPCH.PimCategoryHierarchyId and ZPCPPD.PublishCatalogId = ZPP.PublishCatalogId ) 

		---------------------Category associated to catalog or category or modified catalog
		SELECT ZPCH.PimCategoryId, ZPC1.PublishCategoryId, ZPCH.PimCategoryHierarchyId
		into #ModifiedCategory
		FROM ZnodePimCategoryHierarchy ZPCH 
		INNER JOIN ZnodePublishCategory ZPC1 ON ZPCH.PimCategoryId = ZPC1.PimCategoryId 
        WHERE ZPC1.PublishCatalogId =  @PublishCatalogId 
		AND EXISTS (SELECT TOP 1 1 FROM ZnodePublishCatalogProductDetail BTM  
		WHERE BTM.PublishCatalogId = ZPC1.PublishCatalogId AND (BTM.ModifiedDate < ZPCH.ModifiedDate )   )
		and not exists(select * from #ModifiedProducts MP where  isnull(ZPCH.PimCategoryHierarchyId,0) = isnull(MP.PimCategoryHierarchyId,0))

		-------- Category associated to catalog or category or modified catalog
		Insert Into #ModifiedProducts		
		SELECT ZPP.PublishProductId,  ZPCC.PimCategoryHierarchyId 
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		INNER JOIN ZnodePimCategoryProduct ZPCC1 ON  ZPP.PimProductId = ZPCC1.PimProductId 
		INNER JOIN ZnodePimCategoryHierarchy ZPCH ON ZPCC1.PimCategoryId = ZPCH.PimCategoryId and ZPC.PimCatalogId = ZPCH.PimCatalogId 
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (isnull(ZPPC.PimCategoryHierarchyId,0) = isnull(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId ))
		AND EXISTS (SELECT TOP 1 1 FROM #ModifiedCategory BTM where BTM.PimCategoryHierarchyId = ZPCH.PimCategoryHierarchyId  ) 
		------------------

		--Getting all products of catalog for publish first time 
		SELECT ZPP.PublishProductId,  ZPAV.PimAttributeId, ZPP.PublishCatalogId , ZPCC.PimCategoryHierarchyId , ZPCC.PublishCategoryId,
		       ZPAV.PimAttributeValueId, ZPC.CatalogName ,ZPP.PimProductId ,ZPA.AttributeCode				
		INTO #ZnodePublishCategoryProduct
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId = ZPP.PimProductId )
		INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ZPAV.PimAttributeId)
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (isnull(ZPPC.PimCategoryHierarchyId,0) = isnull(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId AND ZPFGM.PimAttributeId = ZPAV.PimAttributeId))
		AND NOT EXISTS (SELECT TOP 1 1 FROM #ProductAttributeXML BTM WHERE BTM.PimProductId = ZPP.PimProductId AND BTM.PublishCatalogId = ZPP.PublishCatalogId)
		
		--Getting all products of catalog for publish which are modified after last publish
		INSERT INTO #ZnodePublishCategoryProduct 
		SELECT ZPP.PublishProductId,  ZPAV.PimAttributeId, ZPP.PublishCatalogId , ZPCC.PimCategoryHierarchyId , ZPCC.PublishCategoryId
			   ,ZPAV.PimAttributeValueId, ZPC.CatalogName--,CASE WHEN ZPCC.PublishProductId IS NULL THEN 1 ELSE  dense_rank()Over(ORDER BY ZPCC.PimCategoryHierarchyId,ZPCC.PublishProductId) END  ProductIndex 	
			   ,ZPP.PimProductId ,ZPA.AttributeCode				
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId = ZPP.PimProductId )
		INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ZPAV.PimAttributeId)
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (ZPPC.PimCategoryHierarchyId = ZPCC.PimCategoryHierarchyId AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId AND ZPFGM.PimAttributeId = ZPAV.PimAttributeId))
		AND EXISTS (SELECT * from #ModifiedProducts MP where ZPP.PublishProductId = MP.PublishProductId 
			AND isnull(ZPCC.PimCategoryHierarchyId,0) = isnull(MP.PimCategoryHierarchyId,0) ) 
		AND NOT EXISTS(select * from #ZnodePublishCategoryProduct ZPCP where ZPP.PublishProductId = ZPCP.PublishProductId AND
			ZPAV.PimAttributeId=ZPCP.PimAttributeId AND ZPP.PublishCatalogId=ZPCP.PublishCatalogId 
			AND isnull(ZPCC.PimCategoryHierarchyId,0)= isnull(ZPCP.PimCategoryHierarchyId,0))
	
		CREATE INDEX IDX_#ZnodePublishCategoryProduct_PimProductId ON #ZnodePublishCategoryProduct(PimProductId)
		CREATE INDEX IDX_#ZnodePublishCategoryProduct_PublishCategoryId ON #ZnodePublishCategoryProduct(PublishCategoryId)

		CREATE INDEX IDX_#ZnodePublishCategoryProduct_PimAttributeValueId ON #ZnodePublishCategoryProduct(PimAttributeValueId)
		CREATE INDEX IDX_#ZnodePublishCategoryProduct_PimAttributeId ON #ZnodePublishCategoryProduct(PimAttributeId)
		 
		------Getting All Link Product Details
		Select ZPLPD.PimParentProductId, ZPLPD.PimProductId, ZPLPD.PimAttributeId, ZPAVL.AttributeValue as SKU
		into #LinkProduct
		FROM ZnodePimLinkProductDetail ZPLPD 
		INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId = ZPLPD.PimProductId)
		INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId
		WHERE exists(select * from ZnodePimAttribute ZPA where ZPA.PimAttributeId = ZPAV.PimAttributeId and ZPA.AttributeCode = 'SKU')
		
		 ----Getting products link product value entity
	     INSERT INTO #AttributeValueLocale ( PimProductId, AttributeCode, AttributeValue, AttributeEntity, LocaleId )
	     SELECT ZPLP.PimParentProductId ,ZPAX.AttributeCode, '' AttributeValue , 
		 JSON_MODIFY( JSON_Modify(ZPAX.AttributeJson , '$.AttributeValues' , 
		 ISNULL(SUBSTRING ( (SELECT ','+cast( LP.SKU as varchar(600))
							FROM #LinkProduct LP
							WHERE LP.PimParentProductId = ZPLP.PimParentProductId 
							AND LP.PimAttributeId = ZPLP.PimAttributeId FOR XML PATH('')),2,8000),'') ),'$.SelectValues',Json_Query('[]'))   

							, ZPAX.LocaleId
		 FROM ZnodePimLinkProductDetail ZPLP
		 INNER JOIN ZnodePimAttributeJSON ZPAX ON (ZPAX.PimAttributeId = ZPLP.PimAttributeId )
		 WHERE EXISTS(SELECT * FROM #ZnodePublishCategoryProduct PPCP  WHERE (ZPLP.PimParentProductId = PPCP.PimProductId ))
		 GROUP BY ZPLP.PimParentProductId ,ZPAX.AttributeCode , ZPAX.AttributeJSON,ZPAX.LocaleId,ZPAX.AttributeCode,ZPLP.PimAttributeId


		  ----Getting product attribute value entity
	      INSERT INTO #AttributeValueLocale ( PimProductId, AttributeCode, AttributeValue, AttributeEntity, LocaleId )
		  SELECT PPCP.PimProductId , ZPA.AttributeCode,ZPAVL.AttributeValue ,
					JSON_MODIFY(
					JSON_MODIFY (Json_Query( ZPAX.AttributeJSON  ) , '$.AttributeValues' ,  ISNULL(ZPAVL.AttributeValue,'') )    
					,'$.SelectValues',Json_Query('[]'))   
					AS 'AttributeEntity', 
				 ZPAVL.LocaleId
		  FROM ZnodePimAttributeValue PPCP
		  INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = PPCP.PimAttributeId)
		  INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON (PPCP.PimAttributeValueId =ZPAVL.PimAttributeValueId)
		  INNER JOIN ZnodePimAttributeJSON ZPAX ON (ZPAX.PimAttributeId = ZPA.PimAttributeId and ZPAX.LocaleId = ZPAVL.LocaleId)
		  WHERE --ZPAVL.LocaleId = @LocaleId_In AND
		  EXISTS(SELECT * FROM #ZnodePublishCategoryProduct PPCP1  WHERE PPCP1.PimProductId = PPCP.PimProductId)--(PPCP1.PimAttributeValueId =PPCP.PimAttributeValueId) AND (ZPA.PimAttributeId = PPCP1.PimAttributeId))
		  AND not exists(select * from #AttributeValueLocale AVL where PPCP.PimProductId = AVL.PimProductId and ZPA.AttributeCode = AVL.AttributeCode and ZPAVL.LocaleId = AVL.LocaleId )
		  and not exists(select * from ZnodePimConfigureProductAttribute UOP where ZPAX.PimAttributeId = UOP.PimAttributeId and PPCP.PimProductId = UOP.PimProductId )

		  ----Getting product attribute value entity getting for other locale with default attribute json
		  INSERT INTO #AttributeValueLocale ( PimProductId, AttributeCode, AttributeValue, AttributeEntity, LocaleId )
		  SELECT PPCP.PimProductId , ZPA.AttributeCode,ZPAVL.AttributeValue ,
					JSON_MODIFY(
					JSON_MODIFY (Json_Query( ZPAX.AttributeJSON  ) , '$.AttributeValues' ,  ISNULL(ZPAVL.AttributeValue,'') )    
					,'$.SelectValues',Json_Query('[]'))   
					AS 'AttributeEntity', 
				 ZPAVL.LocaleId
		  FROM ZnodePimAttributeValue PPCP
		  INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = PPCP.PimAttributeId)
		  INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON (PPCP.PimAttributeValueId =ZPAVL.PimAttributeValueId)
		  INNER JOIN ZnodePimAttributeJSON ZPAX ON (ZPAX.PimAttributeId = ZPA.PimAttributeId)
		  WHERE ZPAX.LocaleId = @DefaultLocaleId AND ZPAVL.LocaleId <> @DefaultLocaleId AND
		  EXISTS(SELECT * FROM #ZnodePublishCategoryProduct PPCP1  WHERE PPCP1.PimProductId = PPCP.PimProductId)--(PPCP1.PimAttributeValueId =PPCP.PimAttributeValueId) AND (ZPA.PimAttributeId = PPCP1.PimAttributeId))
		  AND not exists(select * from #AttributeValueLocale AVL where PPCP.PimProductId = AVL.PimProductId and ZPA.AttributeCode = AVL.AttributeCode and ZPAVL.LocaleId = AVL.LocaleId )
		  and not exists(select * from ZnodePimConfigureProductAttribute UOP where ZPAX.PimAttributeId = UOP.PimAttributeId and PPCP.PimProductId = UOP.PimProductId )


		  IF OBJECT_ID('TEMPDB..#ZnodePublishCatalogProductDetail') IS NOT NULL
			DROP TABLE #ZnodePublishCatalogProductDetail

		  IF OBJECT_ID('TEMPDB..#ZnodePublishCatalogProductDetail1') IS NOT NULL
			DROP TABLE #ZnodePublishCatalogProductDetail1

		  IF OBJECT_ID('TEMPDB..#TBL_ProductRequiredAttribute') IS NOT NULL
			DROP TABLE #TBL_ProductRequiredAttribute

		  
		create table #TBL_ProductRequiredAttribute (PimProductId int,SKU varchar(600),ProductName varchar(600), IsActive varchar(10), LocaleId INT)

		insert into #TBL_ProductRequiredAttribute(PimProductId, LocaleId)
		select distinct PimProductId, LocaleId from #AttributeValueLocale

		update #TBL_ProductRequiredAttribute 
		set SKU = b.AttributeValue
		from #TBL_ProductRequiredAttribute a
		inner join #AttributeValueLocale b on a.PimproductId = b.PimProductId AND a.LocaleId = b.LocaleId
		where b.AttributeCode = 'SKU'

		update #TBL_ProductRequiredAttribute 
		set ProductName = b.AttributeValue
		from #TBL_ProductRequiredAttribute a
		inner join #AttributeValueLocale b on a.PimproductId = b.PimProductId AND a.LocaleId = b.LocaleId
		where b.AttributeCode = 'ProductName'

		update #TBL_ProductRequiredAttribute 
		set IsActive = b.AttributeValue
		from #TBL_ProductRequiredAttribute a
		inner join #AttributeValueLocale b on a.PimproductId = b.PimProductId AND a.LocaleId = b.LocaleId
		where b.AttributeCode = 'IsActive'

		  CREATE INDEX IDX_#TBL_ProductRequiredAttribute_PimProductId ON #TBL_ProductRequiredAttribute(PimProductId)

		  SELECT ZPI.PublishProductId, ZPI.PublishCatalogId ,TYU.PublishCategoryId,ZPI.CatalogName,ISNULL(ZPI.PimCategoryHierarchyId,0) PimCategoryHierarchyId
					,TPAR.SKU,TPAR.ProductName,TPAR.IsActive,TYU.PublishCategoryName CategoryName,isnull(TYU.LocaleId,TPAR.LocaleId) as LocaleId
		   into #ZnodePublishCatalogProductDetail
		   FROM #ZnodePublishCategoryProduct ZPI
		   INNER JOIN #TBL_ProductRequiredAttribute TPAR ON (TPAR.PimProductId = ZPI.PimProductId )
		   LEFT JOIN ZnodePublishCategoryDetail TYU ON (TYU.PublishCategoryId = ZPI.PublishCategoryId AND TPAR.LocaleId = TYU.LocaleId )
		   GROUP BY PublishProductId, PublishCatalogId ,TYU.PublishCategoryId,CatalogName,PimCategoryHierarchyId
					,SKU,ProductName,TPAR.IsActive,PublishCategoryName, TYU.LocaleId, TPAR.LocaleId

	
						
			CREATE INDEX IDX_#ZnodePublishCatalogProductDetail ON #ZnodePublishCatalogProductDetail(PublishProductId,PublishCatalogId,PimCategoryHierarchyId,LocaleId)

			SELECT PublishProductId,PublishCatalogId,PimCategoryHierarchyId,SKU,ProductName,CategoryName, CatalogName, LocaleId ,IsActive
			      ,CASE WHEN PublishProductId IS NULL THEN 1 ELSE Row_Number()Over(Partition by PublishProductId ORDER BY PublishProductId,PimCategoryHierarchyId) END  ProductIndex
			INTO #ZnodePublishCatalogProductDetail1
			from #ZnodePublishCatalogProductDetail


			insert into #ZnodePublishCatalogProductDetail1 (PublishProductId,PublishCatalogId,PimCategoryHierarchyId,SKU,ProductName,CategoryName, CatalogName, LocaleId ,IsActive,ProductIndex)
			select PublishProductId,PublishCatalogId,PimCategoryHierarchyId,SKU,ProductName,CategoryName, CatalogName, b.Id ,IsActive,ProductIndex
			from #ZnodePublishCatalogProductDetail1 a
			cross apply @LocaleId b 
			where not exists(select * from #ZnodePublishCatalogProductDetail1 c where a.PublishProductId = c.PublishProductId and b.Id = c.LocaleId  )
			and a.LocaleId = @DefaultLocaleId 

			DELETE ZPCPD 
			from ZnodePublishCatalogProductDetail ZPCPD
			WHERE not exists(select * from #ProductLocaleWise ZPCPD1 where ZPCPD.PublishProductId = ZPCPD1.PublishProductId 
			                 and ZPCPD.LocaleId = ZPCPD1.LocaleId )  

			DELETE ZPCPD 
			from ZnodePublishCatalogProductDetail ZPCPD
			WHERE exists(select * from #ZnodePublishCatalogProductDetail ZPCPD1 where 
						ZPCPD.PublishProductId = ZPCPD1.PublishProductId 
			            and ZPCPD.LocaleId = ZPCPD1.LocaleId 
						and Isnull(ZPCPD1.PimCategoryHierarchyId,0)  <> 0 ) AND ZPCPD.PimCategoryHierarchyId =0
			
			----Update data ZnodePublishCatalogProductDetail 
			UPDATE TARGET
			SET  TARGET.ProductIndex	=SOURCE.ProductIndex
				,TARGET.ModifiedBy		= @UserId	
				,TARGET.ModifiedDate	= @Date
			from ZnodePublishCatalogProductDetail TARGET
			INNER JOIN #ZnodePublishCatalogProductDetail1 SOURCE
			ON (
		        SOURCE.PublishProductId = TARGET.PublishProductId
				AND SOURCE.PublishCatalogId = TARGET.PublishCatalogId 
				AND isnull(SOURCE.PimCategoryHierarchyId,0) = isnull(TARGET.PimCategoryHierarchyId,0)
				AND SOURCE.LocaleId = TARGET.LocaleId --@LocaleId_In
				)

			----Update data ZnodePublishCatalogProductDetail 
			UPDATE TARGET
			SET  
				TARGET.ProductName		=SOURCE.ProductName
				,TARGET.CategoryName	=SOURCE.CategoryName
				,TARGET.CatalogName		=SOURCE.CatalogName
				,TARGET.IsActive		=case when SOURCE.IsActive in ('0','false') then 0 else 1 end 
				,TARGET.ModifiedBy		= @UserId	
				,TARGET.ModifiedDate	= @Date
			from ZnodePublishCatalogProductDetail TARGET
			INNER JOIN #ZnodePublishCatalogProductDetail1 SOURCE
			ON (
		        TARGET.SKU = SOURCE.SKU
				AND SOURCE.LocaleId = TARGET.LocaleId --@LocaleId_In
				)


			----Insert data ZnodePublishCatalogProductDetail 
			INSERT INTO ZnodePublishCatalogProductDetail
				( PublishProductId,PublishCatalogId,PimCategoryHierarchyId,SKU,ProductName,CategoryName, CatalogName,
				  LocaleId ,IsActive,ProductIndex,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate )
			SELECT SOURCE.PublishProductId ,SOURCE.PublishCatalogId ,SOURCE.PimCategoryHierarchyId ,SOURCE.SKU ,SOURCE.ProductName
			,SOURCE.CategoryName ,SOURCE.CatalogName ,SOURCE.LocaleId ,SOURCE.IsActive ,SOURCE.ProductIndex ,@UserId ,@Date ,@UserId ,@Date
			FROM #ZnodePublishCatalogProductDetail1 SOURCE
			WHERE NOT EXISTS(SELECT * FROM ZnodePublishCatalogProductDetail TARGET WHERE SOURCE.PublishProductId = TARGET.PublishProductId
							AND SOURCE.PublishCatalogId = TARGET.PublishCatalogId 
							AND SOURCE.PimCategoryHierarchyId = TARGET.PimCategoryHierarchyId 
							AND TARGET.LocaleId = SOURCE.LocaleId )
					
			----		  
		    insert into ZnodePublishCatalogProductDetail (PublishProductId,PublishCatalogId,PimCategoryHierarchyId,SKU,ProductName,CategoryName, CatalogName,
				  LocaleId ,IsActive,ProductIndex,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			select PublishProductId,PublishCatalogId,PimCategoryHierarchyId,SKU,ProductName,CategoryName, CatalogName,
				  b.Id ,IsActive,ProductIndex,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
			from ZnodePublishCatalogProductDetail a
			cross apply @LocaleId b 
			where not exists(select * from ZnodePublishCatalogProductDetail c where a.PublishProductId = c.PublishProductId and b.Id = c.LocaleId  )
			and a.LocaleId = @DefaultLocaleId

			DELETE ZPCPD from ZnodePublishCatalogProductDetail ZPCPD
			inner join ZnodePublishProduct ZPD on ZPCPD.PublishProductId = ZPD.PublishProductId and ZPCPD.PublishCatalogId = ZPD.PublishCatalogId
			inner join ZnodePublishCatalog ZPC on ZPCPD.PublishCatalogId = ZPC.PublishCatalogId
			where not exists(select * from ZnodePimCategoryProduct ZPCC 
			      inner join ZnodePimCategoryHierarchy ZPCH ON ZPCC.PimCategoryId = ZPCH.PimCategoryId where ZPD.PimProductId = ZPCC.PimProductId and ZPC.PimCatalogId = ZPCH.PimCatalogId and ZPCPD.PimCategoryHierarchyId = ZPCH.PimCategoryHierarchyId)
			and ZPCPD.PimCategoryHierarchyId <> 0

			update ZnodePublishCatalogProductDetail 
			set SKU = b.AttributeValue
			from ZnodePublishCatalogProductDetail a
			inner join ZnodePublishProduct ZPP on a.PublishProductId = ZPP.PublishProductId
			inner join #AttributeValueLocale b on ZPP.PimproductId = b.PimProductId AND a.LocaleId = b.LocaleId
			where b.AttributeCode = 'SKU'

		update ZnodePublishCatalogProductDetail 
		set ProductName = b.AttributeValue
		from ZnodePublishCatalogProductDetail a
		inner join ZnodePublishProduct ZPP on a.PublishProductId = ZPP.PublishProductId
		inner join #AttributeValueLocale b on ZPP.PimproductId = b.PimProductId AND a.LocaleId = b.LocaleId
		where b.AttributeCode = 'ProductName'

		update ZnodePublishCatalogProductDetail 
		set IsActive = b.AttributeValue
		from ZnodePublishCatalogProductDetail a
		inner join ZnodePublishProduct ZPP on a.PublishProductId = ZPP.PublishProductId
		inner join #AttributeValueLocale b on ZPP.PimproductId = b.PimProductId AND a.LocaleId = b.LocaleId
		where b.AttributeCode = 'IsActive'

		  select a.PimProductId,  a.PimAttributeId
		  into #PimProductAttributeDefaultValue
		  from ZnodePimAttributeValue a 
		  Inner join ZnodePimProductAttributeDefaultValue b on a.PimAttributeValueId = b.PimAttributeValueId 

		  create index Idx_#PimProductAttributeDefaultValue on #PimProductAttributeDefaultValue (PimProductId,PimAttributeId)

		  INSERT INTO #PimDefaultValueLocale
		  SELECT PimAttributeDefaultJsonId,PimAttributeDefaultValueId,LocaleId ,DefaultValueJson
		  FROM ZnodePimAttributeDefaultJSON

		  SELECT  AA.DefaultValueJson , ZPADV.PimAttributeValueId, AA.LocaleId 
		  into #PimAttributeDefaultXML
		  FROM ZnodePimAttributeDefaultJSON AA 
		  INNER JOIN #PimDefaultValueLocale GH ON (GH.PimAttributeDefaultJsonId = AA.PimAttributeDefaultJsonId AND AA.LocaleId = GH.LocaleId)
		  INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId AND AA.LocaleId = ZPADV.LocaleId)

		  ----Getting child facets for merging		  
		  Select distinct ZPPADV.PimAttributeDefaultValueId, ZPAV_Parent.PimAttributeValueId, ZPPADV.LocaleId
		  Into #PimChildProductFacets
		  from ZnodePimAttributeValue ZPAV_Parent
		  inner join ZnodePimProductTypeAssociation ZPPTA ON ZPAV_Parent.PimProductId = ZPPTA.PimParentProductId
		  inner join ZnodePimAttributeValue ZPAV_Child ON ZPPTA.PimProductId = ZPAV_Child.PimProductId AND ZPAV_Parent.PimAttributeId = ZPAV_Child.PimAttributeId
		  inner join ZnodePimProductAttributeDefaultValue ZPPADV ON ZPAV_Child.PimAttributeValueId = ZPPADV.PimAttributeValueId 
		  where exists(select * from ZnodePimFrontendProperties ZPFP where ZPAV_Parent.PimAttributeId = ZPFP.PimAttributeId and ZPFP.IsFacets = 1)
		  and exists(select * from #ZnodePublishCategoryProduct ZPPC where ZPAV_Parent.PimProductId = ZPPC.PimProductId )
		  and not exists(select * from ZnodePimProductAttributeDefaultValue ZPPADV1 where ZPAV_Parent.PimAttributeValueId = ZPPADV1.PimAttributeValueId 
		                 and ZPPADV1.PimAttributeDefaultValueId = ZPPADV.PimAttributeDefaultValueId )

		  ----Merging childs facet attribute Default value XML for parent
		  insert into #PimAttributeDefaultXML (DefaultValueJson, PimAttributeValueId, LocaleId)
		  select ZPADX.DefaultValueJson, ZPPADV.PimAttributeValueId, ZPPADV.LocaleId
		  from #PimChildProductFacets ZPPADV		  
		  inner join ZnodePimAttributeDefaultJSON ZPADX ON ( ZPPADV.PimAttributeDefaultValueId = ZPADX.PimAttributeDefaultValueId AND ZPPADV.LocaleId = ZPADX.LocaleId)

		  CREATE INDEX Idx_#PimDefaultValueLocale ON #PimDefaultValueLocale(PimAttributeDefaultJsonId,LocaleId)

		  CREATE INDEX Idx_#PimAttributeDefaultXML ON #PimAttributeDefaultXML(PimAttributeValueId,LocaleId)
		  INCLUDE (DefaultValueJson)

		----Getting default attribute value entity
		INSERT INTO #AttributeValueLocale
		
		  SELECT PPCP.PimProductId, PPCP.AttributeCode,'' AttributeValue,
		JSON_MODIFY (JSON_MODIFY (ZPAX.AttributeJson,'$.AttributeValues',''), '$.SelectValues',
			
				Isnull((SELECT 
							Isnull(JSON_VALUE(DefaultValueJson, '$.Code'),'') Code 
							,Isnull(JSON_VALUE(DefaultValueJson, '$.LocaleId'),0) LocaleId
							,IsNull(JSON_VALUE(DefaultValueJson, '$.Value'),'') Value
							,IsNull(JSON_VALUE(DefaultValueJson, '$.AttributeDefaultValue'),'') AttributeDefaultValue
							,Isnull(JSON_VALUE(DefaultValueJson, '$.DisplayOrder'),0) DisplayOrder
							,Isnull(JSON_VALUE(DefaultValueJson, '$.IsEditable'),'false') IsEditable
							,Isnull(JSON_VALUE(DefaultValueJson, '$.SwatchText'),'') SwatchText
							,Isnull(JSON_VALUE(DefaultValueJson, '$.Path'),'') Path
					FROM #PimAttributeDefaultXML aa
					WHERE (aa.PimAttributeValueId = PPCP.PimAttributeValueId and AA.LocaleId = ZPAX.LocaleId ) For JSON Auto 
				),'[]') 
				) 
			 AttributeEntity 
		 , ZPAX.LocaleId
		 FROM #ZnodePublishCategoryProduct PPCP 
		 INNER JOIN ZnodePimAttributeJSON ZPAX ON (ZPAX.PimAttributeId = PPCP.PimAttributeId)
		 where 
		 not exists(select * from #AttributeValueLocale AVL where PPCP.PimProductId = AVL.PimProductId and PPCP.AttributeCode = AVL.AttributeCode and ZPAX.LocaleId = AVL.LocaleId )
		 and exists(select * from #PimProductAttributeDefaultValue a  where PPCP.PimProductId = a.PimProductId and ZPAX.PimAttributeId = a.PimAttributeId )
		 and exists(select * from ZnodePimAttributeValue a Inner join ZnodePimProductAttributeDefaultValue b on a.PimAttributeValueId = b.PimAttributeValueId 
		            and PPCP.PimProductId = a.PimProductId and ZPAX.PimAttributeId = a.PimAttributeId )
		 and not exists(select * from ZnodePimConfigureProductAttribute UOP where ZPAX.PimAttributeId = UOP.PimAttributeId and PPCP.PimProductId = UOP.PimProductId )

		 
		 ----Getting text attribute value entity
		 INSERT INTO #AttributeValueLocale ( PimProductId, AttributeCode, AttributeValue, AttributeEntity, LocaleId )
		 SELECT PPCP.PimProductId , ZPA.AttributeCode,'' AttributeValue ,
		 JSON_MODIFY (JSON_MODIFY (Json_Query( ZPAX.AttributeJSON  ) , '$.AttributeValues' ,  ISNULL(ZPAVL.AttributeValue,'') ) ,'$.SelectValues',Json_Query('[]'))
		    AS 'AttributeEntity', 
		 ZPAVL.LocaleId
		 FROM ZnodePimAttributeValue PPCP
		 INNER JOIN ZnodePimProductAttributeTextAreaValue ZPAVL ON (PPCP.PimAttributeValueId =ZPAVL.PimAttributeValueId)
		 INNER JOIN ZnodePimAttributeJSON ZPAX ON (ZPAX.PimAttributeId = PPCP.PimAttributeId AND ZPAX.LocaleId = ZPAVL.LocaleId)
		 INNER JOIN ZnodePimAttribute ZPA on PPCP.PimAttributeId = ZPA.PimAttributeId
	     where exists(select * from #ZnodePublishCategoryProduct PPCP1 WHERE PPCP1.PimProductId = PPCP.PimProductId) --(PPCP1.PimAttributeValueId =ZPAVL.PimAttributeValueId) and (ZPAX.PimAttributeId = PPCP1.PimAttributeId))
		 and not exists(select * from #AttributeValueLocale AVL where PPCP.PimProductId = AVL.PimProductId and ZPA.AttributeCode = AVL.AttributeCode and ZPAVL.LocaleId = AVL.LocaleId )
		group by PPCP.PimProductId , ZPA.AttributeCode,ZPAX.AttributeJson,ZPAVL.LocaleId,ZPAVL.AttributeValue

		 ----Getting custome field value entity
		 INSERT INTO #AttributeValueLocale ( PimProductId, AttributeCode, AttributeValue, AttributeEntity, LocaleId )
 		 SELECT ZPCFX.PimProductId , ZPCFX.CustomCode, '' AttributeValue ,
		 JSON_MODIFY (Json_Query( ZPCFX.CustomeFiledJson) ,'$.SelectValues',Json_Query('[]')) 
		 AttributeEntity, 
		 ZPCFX.LocaleId
		 FROM ZnodePimCustomeFieldJSON ZPCFX 
		 where exists(select * from #ZnodePublishCategoryProduct PPCP where (PPCP.PimProductId = ZPCFX.PimProductId ))
		 and not exists(select * from #AttributeValueLocale AVL where ZPCFX.PimProductId = AVL.PimProductId and ZPCFX.CustomCode = AVL.AttributeCode and ZPCFX.LocaleId = AVL.LocaleId )
		 group by ZPCFX.PimProductId , ZPCFX.CustomCode, ZPCFX.CustomeFiledJson , ZPCFX.LocaleId

		  ----Getting image attribute value entity
		 INSERT INTO #AttributeValueLocale ( PimProductId, AttributeCode, AttributeValue, AttributeEntity, LocaleId )
		 SELECT PPCP.PimProductId, ZPA.AttributeCode,'' AttributeValue,
		 JSON_MODIFY (JSON_MODIFY (Json_Query( ZPAX.AttributeJSON  ) , '$.AttributeValues',  
		 ISNULL((Select stuff( (SELECT ','+ZPPAM.MediaPath FROM ZnodePimProductAttributeMedia ZPPAM WHERE (ZPPAM.PimAttributeValueId = PPCP.PimAttributeValueId)
				 FOR XML PATH(''),Type).value('.', 'varchar(max)'), 1, 1, '')
				 
				 ),'') ) ,'$.SelectValues',Json_Query('[]'))   
				 AS 'AttributeEntity', 
				 ZPAX.LocaleId
		 FROM ZnodePimAttributeValue PPCP 
		 INNER JOIN ZnodePimAttributeJSON ZPAX ON (ZPAX.PimAttributeId = PPCP.PimAttributeId)
		 INNER JOIN ZnodePimAttribute ZPA ON ZPA.PimAttributeId = PPCP.PimAttributeId
		 where not exists(select * from #AttributeValueLocale AVL where PPCP.PimProductId = AVL.PimProductId and ZPA.AttributeCode = AVL.AttributeCode and ZPAX.LocaleId = AVL.LocaleId )
		 and exists(select * from ZnodePimProductAttributeMedia b where PPCP.PimAttributeValueId = b.PimAttributeValueId )
		 and exists(select * from #ZnodePublishCategoryProduct PPCP1 where PPCP.PimProductId = PPCP1.PimProductId )
		 and not exists(select * from ZnodePimConfigureProductAttribute UOP where ZPAX.PimAttributeId = UOP.PimAttributeId and PPCP.PimProductId = UOP.PimProductId )

		 -------------configurable attribute 		 
		
		INSERT INTO #AttributeValueLocale ( PimProductId, AttributeCode, AttributeValue, AttributeEntity, LocaleId )
		SELECT DISTINCT UOP.PimProductId,c.AttributeCode,'' AttributeValue ,--'<Attributes><AttributeEntity>'+
		JSON_MODIFY (Isnull(JSON_MODIFY (c.AttributeJson,'$.AttributeValues',''),'')  ,'$.SelectValues',
			Isnull((SELECT DISTINCT 
							Isnull(JSON_VALUE(AA.DefaultValueJson, '$.Code'),'') Code 
							,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.LocaleId'),0) LocaleId
							,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.Value'),'') Value
							,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.AttributeDefaultValue'),'') AttributeDefaultValue
							,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.DisplayOrder'),0) DisplayOrder
							,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.IsEditable'),'false') IsEditable
							,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.SwatchText'),'') SwatchText
							,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.Path'),'') Path 
							,ISNULL(ZPA.DisplayOrder,0)  AS VariantDisplayOrder 
							,ISNULL(ZPAVL_SKU.AttributeValue,'')   AS VariantSKU 
							,Isnull(ZM.Path,'') AS VariantImagePath 
						 FROM ZnodePimAttributeDefaultJSON AA 
						 INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId )
						 INNER JOIN ZnodePimAttributeValue ZPAV1 ON (ZPAV1.PimAttributeValueId= ZPADV.PimAttributeValueId )
						 -- check/join for active variants 
						 INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId =ZPAV1.PimProductId)
						 INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON (ZPAV.PimAttributevalueid = ZPAVL.PimAttributeValueId AND ZPAVL.AttributeValue = 'True')
						 INNER JOIN ZnodePimProductTypeAssociation YUP ON (YUP.PimProductId = ZPAV1.PimProductId)
						 -- SKU
						 INNER JOIN ZnodePimAttributeValue ZPAV_SKU ON(YUP.PimProductId = ZPAV_SKU.PimProductId)
						 INNER JOIN ZnodePimAttributeValueLocale ZPAVL_SKU ON (ZPAVL_SKU.PimAttributeValueId = ZPAV_SKU.PimAttributeValueId)
						 LEFT  JOIN ZnodePimAttributeValue ZPAV12 ON (ZPAV12.PimProductId= YUP.PimProductId  AND ZPAV12.PimAttributeId = @PimMediaAttributeId ) 
						 LEFT JOIN ZnodePimProductAttributeMedia ZPAVM ON (ZPAVM.PimAttributeValueId= ZPAV12.PimAttributeValueId ) 
						 LEFT JOIN ZnodeMedia ZM ON (ZM.MediaId = ZPAVM.MediaId)
						 LEFT JOIN ZnodePimAttribute ZPA ON (ZPA.PimattributeId = ZPAV1.PimAttributeId)
						 WHERE (YUP.PimParentProductId  = UOP.PimProductId AND ZPAV1.pimAttributeId = UOP.PimAttributeId )
						 -- Active Variants
						 AND ZPAV.PimAttributeId = (SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'IsActive')
						 -- VariantSKU
						 AND ZPAV_SKU.PimAttributeId = (SELECT PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'SKU')
		FOR JSON auto),'[]')) SelectValuesEntity ,
		c.LocaleId
		FROM ZnodePimConfigureProductAttribute UOP 
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = UOP.PimAttributeId )
		WHERE  exists(select * from #ZnodePublishCategoryProduct PPCP1 where UOP.PimProductId = PPCP1.PimProductId )

		-------------configurable attribute 

		CREATE INDEX IDX_#AttributeValueLocale ON #AttributeValueLocale(PimProductId,AttributeCode,LocaleId)
		CREATE INDEX IDX_#AttributeValueLocale_Id ON #AttributeValueLocale(ID)
		 	
		delete ZPPAX from ZnodePublishProductAttributeJson ZPPAX
		where exists (select * from #AttributeValueLocale AVL where ZPPAX.PimProductId = AVL.PimProductId and AVL.LocaleId = ZPPAX.LocaleId )
		and not exists(select * from #AttributeValueLocale AVL where ZPPAX.PimProductId = AVL.PimProductId and AVL.LocaleId = ZPPAX.LocaleId AND ZPPAX.AttributeCode = AVL.AttributeCode )

		DECLARE @MaxCount INT, @MinRow INT, @MaxRow INT, @Rows numeric(10,2);
		SELECT @MaxCount = COUNT(*) FROM #AttributeValueLocale;

		SELECT @Rows = 200000
        
		SELECT @MaxCount = CEILING(@MaxCount / @Rows);

		IF OBJECT_ID('tempdb..#Temp_ImportLoop') IS NOT NULL
            DROP TABLE #Temp_ImportLoop;
        
		---- To get the min and max rows for import in loop
		;WITH cte AS 
		(
			SELECT RowId = 1, 
				   MinRow = 1, 
                   MaxRow = cast(@Rows as int)
            UNION ALL
            SELECT RowId + 1, 
                   MinRow + cast(@Rows as int), 
                   MaxRow + cast(@Rows as int)
            FROM cte
            WHERE RowId + 1 <= @MaxCount
		)
        SELECT RowId, MinRow, MaxRow
        INTO #Temp_ImportLoop
        FROM cte
		option (maxrecursion 0);


 
	
		DECLARE cur_BulkData CURSOR LOCAL FAST_FORWARD
        FOR SELECT MinRow, MaxRow FROM #Temp_ImportLoop
		WHERE EXISTS(SELECT * FROM #AttributeValueLocale);

        OPEN cur_BulkData;
        FETCH NEXT FROM cur_BulkData INTO  @MinRow, @MaxRow;

        WHILE @@FETCH_STATUS = 0
        BEGIN
	         UPDATE ZnodePublishProductAttributeJson set IsUpdateLocaleWise = 0 where isnull(IsUpdateLocaleWise,0) = 1
			  ----Update Product Attribute XML
			 UPDATE ZPPAX SET ZPPAX.Attributes = AVL.AttributeEntity, ZPPAX.ModifiedBy = @UserId, ZPPAX.ModifiedDate = GETDATE() 
			        , ZPPAX.IsUpdateLocaleWise = 0
			 FROM ZnodePublishProductAttributeJson ZPPAX 
			 INNER JOIN #AttributeValueLocale AVL ON ZPPAX.PimProductId = AVL.PimProductId and AVL.LocaleId = ZPPAX.LocaleId AND ZPPAX.AttributeCode = AVL.AttributeCode 
			 where  AVL.Id BETWEEN @MinRow AND @MaxRow and AVL.AttributeEntity is not null
		 
			 ----Insert Product Attribute XML
			 INSERT INTO ZnodePublishProductAttributeJson(PimProductId,LocaleId,AttributeCode,Attributes,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			 SELECT AVL.PimProductId, AVL.LocaleId, AVL.AttributeCode, cast(AVL.AttributeEntity as varchar(max)), @UserId CreatedBy, GETDATE() CreatedDate, @UserId ModifiedBy, GETDATE() ModifiedDate
			 FROM #AttributeValueLocale AVL
			 WHERE NOT EXISTS(SELECT * FROM ZnodePublishProductAttributeJson ZPPAX WHERE AVL.PimProductId = ZPPAX.PimProductId AND  AVL.LocaleId = ZPPAX.LocaleId AND AVL.AttributeCode = ZPPAX.AttributeCode )
			 and  AVL.Id BETWEEN @MinRow AND @MaxRow and AVL.AttributeEntity is not null
			 GROUP BY AVL.PimProductId, AVL.AttributeEntity, AVL.LocaleId, AVL.AttributeCode

			 FETCH NEXT FROM cur_BulkData INTO  @MinRow, @MaxRow;
        END;
		CLOSE cur_BulkData;
		DEALLOCATE cur_BulkData;

		delete ZPPAX
		from ZnodePublishProductAttributeJson ZPPAX
		where LocaleId <> @DefaultLocaleId
		and exists( select * from ZnodePublishProductAttributeJson ZPPAX1 where ZPPAX.AttributeCode = ZPPAX1.AttributeCode and ZPPAX.PimProductId = ZPPAX1.PimProductId )
		and not exists(select * from #ProductLocaleWise AVL where AVL.PimProductId = ZPPAX.PimProductId AND  AVL.LocaleId = ZPPAX.LocaleId )
		
		
		delete  ZPPAX
		from ZnodePublishProductAttributeJson ZPPAX
		WHERE not exists(select * from #ProductLocaleWise ZLW where ZPPAX.PimProductId = ZLW.PimProductId 
			                and ZPPAX.LocaleId = ZLW.LocaleId )

		select PimProductId,Attributes Attributes,AttributeCode
		into #ZnodePublishProductAttributeJson
		from ZnodePublishProductAttributeJson 
		where LocaleId = @DefaultLocaleId

		insert into ZnodePublishProductAttributeJson (PimProductId,Attributes,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,AttributeCode)
		select PimProductId,Attributes,b.id,@UserId,GETDATE(),@UserId,GETDATE(),AttributeCode
		from #ZnodePublishProductAttributeJson a
		cross apply @LocaleId b 
		where not exists(select * from ZnodePublishProductAttributeJson c where a.PimProductId = c.PimProductId and b.Id = c.LocaleId AND a.AttributeCode = c.AttributeCode )
		and b.Id <> @DefaultLocaleId
					  
		END TRY
         BEGIN CATCH
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_InsertUpdatePimCatalogProductDetailJson @PublishCatalogId = '+CAST(@PublishCatalogId AS VARCHAR(200))+',@UserId='+CAST(@UserId AS VARCHAR(200));


             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_InsertUpdatePimCatalogProductDetailJson',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
            
            
         END CATCH;
END
go
if not exists(select * from INFORMATION_SCHEMA.COLUMNS where TABLE_NAME = 'ZnodePublishPortalBrandEntity' and COLUMN_NAME = 'Custom1')
begin
	alter table ZnodePublishPortalBrandEntity add [Custom1] nvarchar(max)
end
go
if not exists(select * from INFORMATION_SCHEMA.COLUMNS where TABLE_NAME = 'ZnodePublishPortalBrandEntity' and COLUMN_NAME = 'Custom2')
begin
	alter table ZnodePublishPortalBrandEntity add [Custom2] nvarchar(max)
end
go
if not exists(select * from INFORMATION_SCHEMA.COLUMNS where TABLE_NAME = 'ZnodePublishPortalBrandEntity' and COLUMN_NAME = 'Custom3')
begin
	alter table ZnodePublishPortalBrandEntity add [Custom3] nvarchar(max)
end
go
if not exists(select * from INFORMATION_SCHEMA.COLUMNS where TABLE_NAME = 'ZnodePublishPortalBrandEntity' and COLUMN_NAME = 'Custom4')
begin
	alter table ZnodePublishPortalBrandEntity add [Custom4] nvarchar(max)
end
go
if not exists(select * from INFORMATION_SCHEMA.COLUMNS where TABLE_NAME = 'ZnodePublishPortalBrandEntity' and COLUMN_NAME = 'Custom5')
begin
	alter table ZnodePublishPortalBrandEntity add [Custom5] nvarchar(max)
end
go
if exists(select * from sys.procedures where name = 'Znode_SetPublishPortalBrandEntity')
	drop proc Znode_SetPublishPortalBrandEntity
go
CREATE PROCEDURE [dbo].[Znode_SetPublishPortalBrandEntity]
(
   @PortalId  INT = 0 
  ,@LocaleId  INT = 0 
  ,@PreviewVersionId INT = 0 
  ,@IsPreviewEnable int = 0 
  ,@ProductionVersionId INT = 0 
  ,@RevisionState varchar(50) = '' 
  ,@UserId int = 0 
  ,@Status int = 0 OUTPUT
)
AS
/*
    This Procedure is used to publish the blog news against the store 
  
	EXEC ZnodeSetPublishPortalBrandEntity 1 2,3
	A. 
		1. Preview - Preview
		2. None    - Production   --- 
		3. Production - Preview/Production
	B.
		select * from ZnodePublishStateApplicationTypeMapping
		select * from ZnodePublishState where PublishStateId in (3,4) 
		select * from ZnodePublishPortalLog 
	C.
		Select * from ZnodePublishState where IsDefaultContentState = 1  and IsContentState = 1  --Production 
    
	Unit testing 
	
	Exec [ZnodeSetPublishPortalBrandEntity]
	   @PortalId  = 1 
	  ,@LocaleId  = 0 
	  ,@PreviewVersionId = 0 
	  ,@ProductionVersionId = 0 
	  ,@RevisionState = 'Production' 
	  ,@CMSMappingId = 0
	  ,@UserId = 0 
  
	*/
BEGIN 
BEGIN TRY 
SET NOCOUNT ON
   
   Begin 
		DECLARE @Tbl_PreviewVersionId    TABLE    (PreviewVersionId int , PortalId int , LocaleId int)
		DECLARE @Tbl_ProductionVersionId TABLE    (ProductionVersionId int  , PortalId int , LocaleId int)

		If @PreviewVersionId = 0 
			Begin
   				Insert into @Tbl_PreviewVersionId 
				SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and  (LocaleId = 	@LocaleId OR @LocaleId = 0  ) and PublishState ='PREVIEW'
			end
		Else 
				Insert into @Tbl_PreviewVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
				where VersionId = @PreviewVersionId
		If @ProductionVersionId = 0 
   			Begin
				Insert into @Tbl_ProductionVersionId 
				SELECT distinct VersionId , PortalId , LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and  (LocaleId = 	@LocaleId OR @LocaleId = 0  ) and PublishState ='PRODUCTION'
			End 
		Else 
			Insert into @Tbl_ProductionVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
			where VersionId = @ProductionVersionId
 
		DECLARE @SetLocaleId INT , @DefaultLocaleId INT = dbo.Fn_GetDefaultLocaleId(), @MaxCount INT =0 , @IncrementalId INT = 1  
		DECLARE @TBL_Locale TABLE (LocaleId INT , RowId INT IDENTITY(1,1))
		
			DECLARE @TBL_BrandDetails TABLE  
        (
			Description         NVARCHAR(MAX),  
			BrandId             INT,  
			BrandCode           VARCHAR(600),  
			DisplayOrder        INT,  
			IsActive            BIT,  
			WebsiteLink         NVARCHAR(1000),  
			BrandDetailLocaleId INT,  
			SEOFriendlyPageName NVARCHAR(600),  
			MediaPath           NVARCHAR(MAX),  
			MediaId             INT,  
			ImageName           VARCHAR(300),
			BrandName			VARCHAR(100),	
			Custom1				NVARCHAR(MAX),	
			Custom2				NVARCHAR(MAX),
			Custom3				NVARCHAR(MAX),
			Custom4				NVARCHAR(MAX),
			Custom5				NVARCHAR(MAX),
			PortalId			Int,
			IsAssociated        Bit 
        );  
  
    DECLARE @AttributeId INT= [dbo].[Fn_GetProductBrandAttributeId]();  
             
	DECLARE @TBL_AttributeDefault TABLE  
    (
		PimAttributeId            INT,  
		AttributeDefaultValueCode VARCHAR(600),  
		IsEditable                BIT,  
		AttributeDefaultValue     NVARCHAR(MAX),
		DisplayOrder			  INT   
    );  

    DECLARE @TBL_SeoDetails TABLE  
    (
		CMSSEODetailId       INT,  
		SEOTitle             NVARCHAR(MAX),  
		SEOKeywords          NVARCHAR(MAX),  
		SEOURL               NVARCHAR(MAX),  
		ModifiedDate         DATETIME,  
		SEODescription       NVARCHAR(MAX),  
		MetaInformation      NVARCHAR(MAX),  
		IsRedirect           BIT,  
		CMSSEODetailLocaleId INT,  
		--SEOId                INT ,
		PublishStatus        NVARCHAR(20),
		SEOCode				 NVARCHAR(4000),
		CanonicalURL		 VARCHAR(200),
		RobotTag			 VARCHAR(50)			   
    );  

    DECLARE @TBL_BrandDetail TABLE  
    (
		Description          NVARCHAR(MAX),  
		BrandId              INT,  
		BrandCode            VARCHAR(600),  
		DisplayOrder         INT,  
		IsActive             BIT,  
		WebsiteLink          NVARCHAR(1000),  
		BrandDetailLocaleId  INT,  
		MediaPath            NVARCHAR(MAX),  
		MediaId              INT,  
		ImageName      VARCHAr(300) ,  
		CMSSEODetailId       INT,  
		SEOTitle             NVARCHAR(MAX),  
		SEOKeywords          NVARCHAR(MAX),  
		SEOURL               NVARCHAR(MAX),  
		ModifiedDate         DATETIME,  
		SEODescription       NVARCHAR(MAX),  
		MetaInformation      NVARCHAR(MAX),  
		IsRedirect           BIT,  
		CMSSEODetailLocaleId INT,  
		--SEOId                INT,  
		BrandName            NVARCHAR(MAX),  
		RowId                INT,  
		CountId              INT ,
		SEOCode              NVARCHAR(4000), 
		Custom1              NVARCHAR(MAX),
		Custom2              NVARCHAR(MAX),
		Custom3              NVARCHAR(MAX),
		Custom4              NVARCHAR(MAX),
		Custom5              NVARCHAR(MAX),
		PortalId			 INT
    );  

		iF object_id('tempdb..[#TBL_BrandDetail]') IS NOT NULL
			drop table tempdb..#TBL_BrandDetail
		Create Table #TBL_BrandDetail
		(
			Description          NVARCHAR(MAX),  
			BrandId              INT,  
			BrandCode            VARCHAR(600),  
			DisplayOrder         INT,  
			IsActive             BIT,  
			WebsiteLink          NVARCHAR(1000),  
			BrandDetailLocaleId  INT,  
			MediaPath            NVARCHAR(MAX),  
			MediaId              INT,  
			ImageName      VARCHAr(300) ,  
			CMSSEODetailId       INT,  
			SEOTitle             NVARCHAR(MAX),  
			SEOKeywords          NVARCHAR(MAX),  
			SEOFriendlyPageName  NVARCHAR(MAX),  
			ModifiedDate         DATETIME,  
			SEODescription       NVARCHAR(MAX),  
			MetaInformation      NVARCHAR(MAX),  
			IsRedirect           BIT,  
			CMSSEODetailLocaleId INT,  
			--SEOId                INT,  
			BrandName            NVARCHAR(MAX),  
			PromotionId		     INT,
			RowId                INT,  
			CountId              INT ,
			SEOCode              NVARCHAR(4000), 
			Custom1              NVARCHAR(MAX),
			Custom2              NVARCHAR(MAX),
			Custom3              NVARCHAR(MAX),
			Custom4              NVARCHAR(MAX),
			Custom5              NVARCHAR(MAX),
			PortalId			 INT,
			LocaleId             INT  
		);  
		
		
		;WITH Cte_GetBrandBothLocale AS 
	(
		SELECT ZBDL.Description,ZBD.BrandId,LocaleId,ZBD.BrandCode,isnull(ZPB.DisplayOrder,999) as DisplayOrder,ZBD.IsActive,ZBD.WebsiteLink,ZBDl.BrandDetailLocaleId,  
			SEOFriendlyPageName,[dbo].[Fn_GetMediaThumbnailMediaPath](Zm.path) MediaPath,ZBD.MediaId,Zm.path ImageName, ZBDL.BrandName, ZBD.Custom1, ZBD.Custom2, ZBD.Custom3, ZBD.Custom4, ZBD.Custom5, ZPB.PortalId,
			CASE WHEN ZPB.PortalBrandId IS NULL THEN 0 ELSE 1 END IsAssociated
		FROM ZnodeBrandDetails ZBD 
		LEFT JOIN ZnodePortalBrand ZPB ON ZBD.BrandId = ZPB.BrandId AND (ZPB.PortalId = @PortalId OR isnull(@PortalId,0) = 0 )
		LEFT JOIN ZnodeBrandDetailLocale ZBDL ON(ZBD.BrandId = ZBDL.BrandId)  
		LEFT JOIN ZnodeMedia ZM ON(ZM.MediaId = ZBD.MediaId)  
		WHERE LocaleId IN(@LocaleId, @DefaultLocaleId)  
		
              
    ),  
    Cte_BrandFirstLocale AS 
	(
		SELECT Description,BrandId,LocaleId,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,SEOFriendlyPageName,MediaPath,MediaId,ImageName , BrandName, Custom1, Custom2, Custom3, Custom4, Custom5, PortalId , IsAssociated
        FROM Cte_GetBrandBothLocale CTGBBL  
        WHERE LocaleId = @LocaleId
	),  
    Cte_BrandDefaultLocale AS 
	(
		SELECT Description,BrandId,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,SEOFriendlyPageName,MediaPath,MediaId,ImageName, BrandName, Custom1, Custom2, Custom3, Custom4, Custom5, PortalId, IsAssociated  
        FROM Cte_BrandFirstLocale  
        UNION ALL  
        SELECT Description,BrandId,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,SEOFriendlyPageName,MediaPath,MediaId,ImageName , BrandName, Custom1, Custom2, Custom3, Custom4, Custom5, PortalId, IsAssociated
		FROM Cte_GetBrandBothLocale CTBBL  
		WHERE LocaleId = @DefaultLocaleId  
		AND NOT EXISTS  
		(  
			SELECT TOP 1 1  
			FROM Cte_BrandFirstLocale CTBFL  
			WHERE CTBBL.BrandId = CTBFL.BrandId  
		)
	)    
	INSERT INTO @TBL_BrandDetails (Description,BrandId,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,SEOFriendlyPageName,MediaPath,MediaId,ImageName, BrandName, Custom1, Custom2, Custom3, Custom4, Custom5, PortalId, IsAssociated)  
    SELECT Description,BrandId,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,SEOFriendlyPageName,MediaPath,MediaId,ImageName , BrandName, Custom1, Custom2, Custom3, Custom4, Custom5, PortalId, IsAssociated
    FROM Cte_BrandDefaultLocale CTEBD;
       
	-----Update BrandName from attributedefault value
	;WITH Cte_GetBrandNameLocale AS 
	(
		select d.brandcode, a.AttributeDefaultValueCode, b.AttributeDefaultValue, b.LocaleId 
		from ZnodePimAttributeDefaultValue a
		inner join ZnodePimAttributeDefaultValueLocale b on a.PimAttributeDefaultValueId = b.PimAttributeDefaultValueId 
		inner join ZnodePimAttribute c on a.PimAttributeId = c.PimAttributeId
		inner join @TBL_BrandDetails d on a.AttributeDefaultValueCode = d.brandcode
		where c.attributecode = 'brand' and b.LocaleId IN(@LocaleId, @DefaultLocaleId)
              
    )
	,Cte_BrandNameFirstLocale AS 
	(
		SELECT brandcode, AttributeDefaultValueCode, AttributeDefaultValue, LocaleId  
        FROM Cte_GetBrandNameLocale CTGBBL  
        WHERE LocaleId = @LocaleId
	)
	,Cte_BrandDefaultLocale AS 
	(
		SELECT brandcode, AttributeDefaultValueCode, AttributeDefaultValue, LocaleId  
        FROM Cte_BrandNameFirstLocale  
        UNION ALL  
        SELECT brandcode, AttributeDefaultValueCode, AttributeDefaultValue, LocaleId  
		FROM Cte_GetBrandNameLocale CTBBL  
		WHERE LocaleId = @DefaultLocaleId  
		AND NOT EXISTS  
		(  
			SELECT TOP 1 1  
			FROM Cte_BrandNameFirstLocale CTBFL  
			WHERE CTBBL.brandcode = CTBFL.brandcode  
		)
	)  
	update b1 set b1.brandname = a1.AttributeDefaultValue
	from Cte_BrandDefaultLocale a1
	inner join @TBL_BrandDetails b1 on a1.brandcode = b1.brandcode

	DECLARE @SeoCode SelectColumnList
	INSERT INTO @SeoCode
	SELECT BrandCode FROM @TBL_BrandDetails
				

    INSERT INTO @TBL_SeoDetails 
	(
		CMSSEODetailId,SEOTitle,SEOKeywords,SEOURL,ModifiedDate,SEODescription,MetaInformation,IsRedirect,
		CMSSEODetailLocaleId,PublishStatus,SEOCode,CanonicalURL,RobotTag
	)  
    EXEC Znode_GetSeoDetails @SeoCode, 'Brand', @LocaleId;  
			              
    SELECT TBBD.*,TBSD.*--,TBAD.AttributeDefaultValue BrandName,TBAD.AttributeDefaultValueCode  
    INTO #TM_BrandLocale  
    FROM @TBL_BrandDetails TBBD  
    LEFT JOIN @TBL_SeoDetails TBSD ON(TBSD.SEOCode = TBBD.BrandCode)  
    --INNER JOIN @TBL_AttributeDefault TBAD ON(TBAD.AttributeDefaultValueCode = TBBD.BrandCode);  
  
		INSERT INTO @TBL_Locale (LocaleId) SELECT LocaleId FROM ZnodeLocale WHERE IsActive =1 AND (LocaleId  = @LocaleId OR @LocaleId = 0 )

		SET @MaxCount = ISNULL((SELECT MAx(RowId) FROM @TBL_Locale),0)
		WHILE @IncrementalId <= @MaxCount
		BEGIN 
			SET @SetLocaleId = (SELECT Top 1 LocaleId FROM @TBL_locale WHERE RowId = @IncrementalId)
			
			Insert into #TBL_BrandDetail
			(BrandId,Description,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,MediaPath,MediaId,ImageName,CMSSEODetailId,SEOTitle,SEOKeywords,SEOFriendlyPageName,SEODescription,MetaInformation,IsRedirect,CMSSEODetailLocaleId,BrandName,
			PromotionId ,SEOCode,Custom1, Custom2, Custom3, Custom4, Custom5, PortalId,LocaleId)
			select BrandId,Description,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,MediaPath,MediaId,ImageName,CMSSEODetailId,SEOTitle,SEOKeywords,SEOFriendlyPageName,SEODescription,MetaInformation,IsRedirect,CMSSEODetailLocaleId,BrandName,
			0 PromotionId ,SEOCode,Custom1, Custom2, Custom3, Custom4, Custom5, PortalId ,@SetLocaleId from #TM_BrandLocale 
			where  PortalId = @PortalId
		SET @IncrementalId = @IncrementalId +1 
		END 
	End


	If @IsPreviewEnable = 1 AND ( @RevisionState like '%Preview%'  OR @RevisionState like '%Production%' ) 
	Begin
	    --Data inserted into flat table ZnodePublishPortalBrandEntity (Replica of MongoDB Collection )  
		Delete from ZnodePublishPortalBrandEntity where PortalId = @PortalId  and VersionId in 
		( Select PreviewVersionId from @Tbl_PreviewVersionId)
		
		Insert Into ZnodePublishPortalBrandEntity 
		(VersionId,PublishStartTime,PortalId,LocaleId, BrandId,BrandCode,BrandName,MediaId ,WebsiteLink,Description,PublishState,
		 SEOTitle,SEOKeywords,SEODescription,SEOFriendlyPageName ,DisplayOrder,IsActive,MediaPath,CMSSEODetailId,CMSSEODetailLocaleId,
		 BrandDetailLocaleId,ImageName,Custom1,Custom2,Custom3,Custom4,Custom5)
		SELECT B.PreviewVersionId , Getdate(),B.PortalId ,B.LocaleId ,a.BrandId,BrandCode,BrandName,MediaId ,WebsiteLink,
		       Description,'PREVIEW',SEOTitle,SEOKeywords,SEODescription,SEOFriendlyPageName ,a.DisplayOrder,IsActive,MediaPath,
			   CMSSEODetailId,CMSSEODetailLocaleId,BrandDetailLocaleId,ImageName,Custom1,Custom2,Custom3,Custom4,Custom5
		FROM #TBL_BrandDetail A inner join @TBL_PreviewVersionId B on 
		@PortalId= B.PortalId and A.LocaleId = b.LocaleId
		inner join ZnodePortalBrand ZPB on a.BrandId = ZPB.BrandId and b.PortalId = ZPB.PortalId

	End
	-------------------------- End Preview 
	If (@RevisionState like '%Production%' OR @RevisionState = 'None')
	Begin
		-- Only production version id will process 
		Delete from ZnodePublishPortalBrandEntity where PortalId = @PortalId  and VersionId in (select ProductionVersionId from @TBL_ProductionVersionId)
		
		Insert Into ZnodePublishPortalBrandEntity 
		(VersionId,PublishStartTime,PortalId,LocaleId,BrandId,BrandCode,BrandName,MediaId
		 ,WebsiteLink,Description,PublishState,SEOTitle,SEOKeywords,SEODescription,SEOFriendlyPageName
		 ,DisplayOrder,IsActive,MediaPath,CMSSEODetailId,CMSSEODetailLocaleId,BrandDetailLocaleId,ImageName)
		SELECT B.ProductionVersionId , Getdate(),B.PortalId ,B.LocaleId
		,a.BrandId,BrandCode,BrandName,MediaId
		,WebsiteLink,Description,'PREVIEW',SEOTitle,SEOKeywords,SEODescription,SEOFriendlyPageName
		,a.DisplayOrder,IsActive,MediaPath,CMSSEODetailId,CMSSEODetailLocaleId,BrandDetailLocaleId,ImageName
		FROM #TBL_BrandDetail A inner join @TBL_ProductionVersionId B on 
		@PortalId= B.PortalId and A.LocaleId = b.LocaleId
		inner join ZnodePortalBrand ZPB on a.BrandId = ZPB.BrandId and b.PortalId = ZPB.PortalId
	End
	SET @Status =1 
END TRY 
BEGIN CATCH 
	SET @Status = 0;
	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
		@ErrorLine VARCHAR(100)= ERROR_LINE(),
		@ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeSetPublishPortalBrandEntity 
		@PortalId = '+CAST(@PortalId AS VARCHAR	(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10))
		+',@PreviewVersionId = ' + CAST(@PreviewVersionId  AS varchar(20))
		+',@ProductionVersionId = ' + CAST(@ProductionVersionId  AS varchar(20))
		+',@RevisionState = ''' + CAST(@RevisionState  AS varchar(50))
		+',@UserId = ' + CAST(@UserId AS varchar(20));	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		                			 
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'ZnodeSetPublishPortalBrandEntity',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;

	END CATCH
END
go
if exists(select * from sys.procedures where name = 'Znode_DeleteContentPage')
	drop proc Znode_DeleteContentPage
go
CREATE PROCEDURE [dbo].[Znode_DeleteContentPage]
( @CMSContentPageId VARCHAR(2000),
  @Status           BIT OUT)
AS 
  /*  
     Summary : Remove content page details with their referance data 
			   Here complete delete the ContentPages and their references without any check  
			   If passed @CMSContentPageIds are matched with deleted count then data set return true other wise false 
			   dbo.Split function use to make comma separeted data in table rows 
			   1 ZnodeCMSContentPagesProfile
			   2 ZnodeCMSContentPagesLocale
			   3 ZnodeCMSContentPageGroupMapping
			   4 ZnodeCMSSEODetail
			   5 ZnodeCMSContentPages
     Unit Testing 
	 begin tran
     DEclare @Status bit 
     EXEC Znode_DeleteContentPage  29 ,@Status =@Status OUT 
	 rollback tran
       
    */
BEGIN
BEGIN TRAN DeleteContentPage;
BEGIN TRY
    SET NOCOUNT ON;
    DECLARE @TBL_DeleteContentPage TABLE(CMSContentPagesId INT,PageName NVARCHAR(200),PortalId INT );  -- table holds the CMSContentPagesId id 
    INSERT INTO @TBL_DeleteContentPage
        SELECT a.CMSContentPagesId,a.PageName, a.PortalId
        FROM [dbo].[ZnodeCMSContentPages] AS a
                INNER JOIN dbo.Split(@CMSContentPageId, ',') AS b ON(a.CMSContentPagesId = b.Item); -- dbo.Split function use to make ',' separeted data in table rows 
    DELETE FROM ZnodeCMSContentPagesProfile
    WHERE EXISTS
    (
        SELECT TOP 1 1
        FROM @TBL_DeleteContentPage AS TBDCP
        WHERE TBDCP.CMSContentPagesId = ZnodeCMSContentPagesProfile.CMSContentPagesId
    );
    DELETE FROM ZnodeCMSContentPagesLocale
    WHERE EXISTS
    (
        SELECT TOP 1 1
        FROM @TBL_DeleteContentPage AS TBDCP
        WHERE TBDCP.CMSContentPagesId = ZnodeCMSContentPagesLocale.CMSContentPagesId
    );
    DELETE FROM ZnodeCMSContentPageGroupMapping
    WHERE EXISTS
    (
        SELECT TOP 1 1
        FROM @TBL_DeleteContentPage AS TBDCP
        WHERE TBDCP.CMSContentPagesId = ZnodeCMSContentPageGroupMapping.CMSContentPagesId
    );
    DELETE FROM ZnodeCMSWidgetCategory
    WHERE EXISTS
    (
        SELECT TOP 1 1
        FROM @TBL_DeleteContentPage AS TBDCP
        WHERE TBDCP.CMSContentPagesId = ZnodeCMSWidgetCategory.CMSMappingId
            AND ZnodeCMSWidgetCategory.TypeOFMapping = 'ContentPageMapping'
    );
    DELETE FROM ZnodeCMSWidgetProduct
    WHERE EXISTS
    (
        SELECT TOP 1 1
        FROM @TBL_DeleteContentPage AS TBDCP
        WHERE TBDCP.CMSContentPagesId = ZnodeCMSWidgetProduct.CMSMappingId
            AND ZnodeCMSWidgetProduct.TypeOFMapping = 'ContentPageMapping'
    );
    DELETE FROM ZnodeCMSWidgetSliderBanner
    WHERE EXISTS
    (
        SELECT TOP 1 1
        FROM @TBL_DeleteContentPage AS TBDCP
        WHERE TBDCP.CMSContentPagesId = ZnodeCMSWidgetSliderBanner.CMSMappingId
            AND ZnodeCMSWidgetSliderBanner.TypeOFMapping = 'ContentPageMapping'
    );
    DELETE FROM ZnodeCMSWidgetTitleConfiguration
    WHERE EXISTS
    (
        SELECT TOP 1 1
        FROM @TBL_DeleteContentPage AS TBDCP
        WHERE TBDCP.CMSContentPagesId = ZnodeCMSWidgetTitleConfiguration.CMSMappingId
            AND ZnodeCMSWidgetTitleConfiguration.TypeOFMapping = 'ContentPageMapping'
    );
    DELETE FROM ZnodeCMSSEODetailLocale
    WHERE EXISTS
    (
        SELECT TOP 1 1
        FROM ZnodeCMSSEODetail
        WHERE EXISTS
        (
            SELECT TOP 1 1
            FROM @TBL_DeleteContentPage AS TBDCP
            WHERE TBDCP.PageName = ZnodeCMSSEODetail.SEOCode
			AND TBDCP.PortalId = ZnodeCMSSEODetail.PortalId
        )
            AND ZnodeCMSSEODetail.CMSSEOTypeId IN
        (
            SELECT CMSSEOTypeId
            FROM ZnodeCMSSEOType
            WHERE NAME = 'Content Page'
        )
            AND ZnodeCMSSEODetail.CMSSEODetailId = ZnodeCMSSEODetailLocale.CMSSEODetailId
    );
    DELETE FROM ZnodeCMSSEODetail
    WHERE EXISTS
    (
        SELECT TOP 1 1
        FROM @TBL_DeleteContentPage AS TBDCP
        WHERE TBDCP.PageName = ZnodeCMSSEODetail.SEOCode
		AND TBDCP.PortalId = ZnodeCMSSEODetail.PortalId
    )
        AND ZnodeCMSSEODetail.CMSSEOTypeId IN
    (
        SELECT CMSSEOTypeId
        FROM ZnodeCMSSEOType
        WHERE NAME = 'Content Page'
    );
    DELETE FROM ZnodeCMSContentPagesLocale
    WHERE EXISTS
    (
        SELECT TOP 1 1
        FROM @TBL_DeleteContentPage AS TBDCP
        WHERE TBDCP.CMSContentPagesId = ZnodeCMSContentPagesLocale.CMSContentPagesId
    );
	DELETE FROM ZnodeFormWidgetEmailConfiguration
    WHERE EXISTS
    (
        SELECT TOP 1 1
        FROM @TBL_DeleteContentPage AS TBDCP
        WHERE TBDCP.CMSContentPagesId = ZnodeFormWidgetEmailConfiguration.CMSContentPagesId
    );
    DELETE FROM ZnodeCMSContentPages
    WHERE EXISTS
    (
        SELECT TOP 1 1
        FROM @TBL_DeleteContentPage AS TBDCP
        WHERE TBDCP.CMSContentPagesId = ZnodeCMSContentPages.CMSContentPagesId
    );
			  
    IF
    (
        SELECT COUNT(1)
        FROM @TBL_DeleteContentPage
    ) =
    (   -- if count are equal then  dataset status are return true other wise false 
        SELECT COUNT(1)
        FROM dbo.Split(@CMSContentPageId, ',')
    ) 
        BEGIN
            SELECT 1 AS ID,
                CAST(1 AS BIT) AS [Status];
            SET @Status = 1;
        END;
    ELSE
        BEGIN
            SELECT 0 AS ID,
                CAST(0 AS BIT) AS [Status];
            SET @Status = 0;
        END;
    COMMIT TRAN DeleteContentPage;
END TRY
BEGIN CATCH
    DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_DeleteContentPage @CMSContentPageId = '+@CMSContentPageId+',@Status='+CAST(@Status AS VARCHAR(50));
    SET @Status = 0;
    SELECT 0 AS ID,
        CAST(0 AS BIT) AS [Status];
    ROLLBACK TRAN DeleteContentPage;
    EXEC Znode_InsertProcedureErrorLog
        @ProcedureName = 'Znode_DeleteContentPage',
        @ErrorInProcedure = @Error_procedure,
        @ErrorMessage = @ErrorMessage,
        @ErrorLine = @ErrorLine,
        @ErrorCall = @ErrorCall;
END CATCH;
END;
go
if exists(select * from sys.procedures where name = 'Znode_GetProductDataForWebStore')
	drop proc Znode_GetProductDataForWebStore
go
CREATE PROCEDURE [dbo].[Znode_GetProductDataForWebStore]  
(   @SKU              [dbo].[SelectColumnList] READONLY,  
    @PublishCatalogId int = 0 ,  
    @PublishProductId VARCHAR(MAX),  
    @PortalId         INT,  
    @LocaleId         INT)  
AS   
  /*    
    Summary: WebStore: SP for getting products data   
       Get average rating of products   
       Get Price / Inventory / SEO details .  
    Unit Testing  
 begin tran     
    EXEC [Znode_GetProductDataForWebStore] 'SKBCA1112,SKWI122,SKFVR123,FVZK0237,SKPMAR123,SKLS232',0,'96,92,98,103,94,97',@PortalId=2 ,@LocaleId=1  
    EXEC [Znode_GetProductDataForWebStore] 'SKPMAR123',3,'',@PortalId=1 ,@LocaleId=0  
 rollback tran  
   */  
     BEGIN  
         BEGIN TRAN A;  
         BEGIN TRY  
             SET NOCOUNT ON;  
  
             DECLARE @Tlb_SKU TABLE  
             (SKU        VARCHAR(100),  
              SequenceNo INT IDENTITY  
             );  
	If EXISTS(select * from @SKU)
		INSERT INTO @Tlb_SKU(SKU) SELECT StringColumn FROM @SKU;  
	Else if @PublishCatalogId > 0   
		INSERT INTO @Tlb_SKU(SKU)   
		select Distinct ZPPD.SKU  from ZnodePublishCategoryProduct ZPCP INNER JOIN ZnodePublishProductDetail ZPPD ON ZPCP.PublishProductId = ZPPD.PublishProductId   
		where  ZPCP.PublishCatalogId = @PublishCatalogId  
  
             DECLARE @Tlb_PublishProduct TABLE  
             (PublishProductId INT,  
              SequenceNo       INT IDENTITY,
			  PublishCatalogId INT
             );  
  
    If @PublishProductId <> '' 
	Begin
		 INSERT INTO @Tlb_PublishProduct(PublishProductId, PublishCatalogId)  
		 SELECT Distinct ZPCP.PublishProductId, ZPCP.PublishCatalogId 
		 FROM ZnodePublishCategoryProduct ZPCP 
		 INNER JOIN Dbo.split(@PublishProductId, ',') PPI ON ZPCP.PublishProductId = PPI.Item;   
	End
    Else if @PublishCatalogId > 0   
	Begin
		INSERT INTO @Tlb_PublishProduct(PublishProductId,PublishCatalogId)  
		select Distinct ZPCP.PublishProductId,ZPCP.PublishCatalogId  
		from ZnodePublishCategoryProduct ZPCP 
		where  ZPCP.PublishCatalogId = @PublishCatalogId  
    End
	Else if @PublishCatalogId = 0 AND  @PublishProductId = ''   AND    exists(select * from @SKU)
	Begin
		INSERT INTO @Tlb_PublishProduct(PublishProductId,PublishCatalogId)  
		SELECT Distinct ZPCP.PublishProductId,ZPCP.PublishCatalogId  
		from ZnodePublishProductDetail ZPPD INNER JOIN @Tlb_SKU TSK ON ZPPD.SKU = TSK.SKU
		LEFT Outer join ZnodePublishCategoryProduct ZPCP  ON ZPPD.PublishProductId = ZPCP.PublishProductId ;
	End  
             --DECLARE @Tlb_ProductData TABLE  
             --(PublishProductId INT,  
             -- SKU              NVARCHAR(100),  
             -- SEOTitle         NVARCHAR(200),  
             -- SEODescription   NVARCHAR(MAX),  
             -- SEOKeywords      NVARCHAR(MAX),  
             -- SEOUrl           NVARCHAR(MAX),  
             -- Rating           Numeric(28,6),  
             -- TotalReviews     INT  
             --);  
  
    CREATE TABLE #Tlb_ProductData   
             (PublishProductId INT,  
              SKU              NVARCHAR(100),  
              SEOTitle         NVARCHAR(200),  
              SEODescription   NVARCHAR(MAX),  
              SEOKeywords      NVARCHAR(MAX),  
              SEOUrl           NVARCHAR(MAX),  
              Rating           Numeric(28,6),  
              TotalReviews     INT,
			  IsPublish        bit,
			  CanonicalURL VARCHAR(200),   
			  RobotTag VARCHAR(50),
			  PublishCatalogId INT
             );  
  
             INSERT INTO #Tlb_ProductData (PublishProductId,SKU,PublishCatalogId)  
             SELECT PP.PublishProductId,SK.SKU, PP.PublishCatalogId FROM @Tlb_PublishProduct AS PP INNER JOIN @Tlb_SKU AS SK ON PP.SequenceNo = SK.SequenceNo;  
  
             DECLARE @Tlb_CustomerAverageRatings TABLE  
             (PublishProductId INT,  
              Rating           NUMERIC(28,6),  
              TotalReviews     INT  
             );   
             -- Calculate Average rating   
             INSERT INTO @Tlb_CustomerAverageRatings(PublishProductId,Rating,TotalReviews)  
             SELECT CCR.PublishProductId,SUM(CAST(CCR.Rating AS NUMERIC(28,6)) )/ COUNT(CCR.PublishProductId),COUNT(CCR.PublishProductId)   
    FROM ZnodeCMSCustomerReview AS CCR  
             INNER JOIN #Tlb_ProductData AS PD ON CCR.PublishProductId = PD.PublishProductId AND CCR.Status = 'A'   
    AND  (CCR.PortalId  = @PortalId OR @PortalId = 0 )  
    GROUP BY CCR.PublishProductId    ;  
  
             UPDATE PD SET PD.Rating = CAR.Rating,PD.TotalReviews = CAR.TotalReviews   
    FROM @Tlb_CustomerAverageRatings CAR  
             INNER JOIN #Tlb_ProductData PD ON CAR.PublishProductId = PD.PublishProductId;  
  
    UPDATE PD SET PD.SEOTitle = ZCSDL.SEOTitle,PD.SEODescription = ZCSDL.SEODescription,PD.SEOKeywords = ZCSDL.SEOKeywords,PD.SEOUrl = ZCSO.SEOUrl, PD.IsPublish = ZCSO.IsPublish,
	              PD.CanonicalURL = ZCSDL.CanonicalURL, PD.RobotTag = ZCSDL.RobotTag
    FROM #Tlb_ProductData PD  
             INNER JOIN ZnodeCMSSEODetail ZCSO ON PD.SKU = ZCSO.SEOCode  
             LEFT JOIN ZnodeCMSSEODetailLocale ZCSDL ON(ZCSDL.CMSSEODetailId = ZCSO.CMSSEODetailId AND ZCSDL.LocaleId = @LocaleId)  
             INNER JOIN ZnodeCMSSEOType ZCOT ON ZCOT.CMSSEOTypeId = ZCSO.CMSSEOTypeId AND ZCOT.Name = 'Product'  
    WHERE ZCSO.PortalId = @PortalId  
  
    UPDATE PD SET PD.SEOTitle = ZCPS.ProductTitle,PD.SEODescription = ZCPS.ProductDescription,PD.SEOKeywords = ZCPS.ProductKeyword 
	FROM #Tlb_ProductData PD  
    INNER JOIN ZnodeCMSPortalSEOSetting ZCPS ON ZCPS.PortalId = @PortalId 
	WHERE PD.SEOTitle IS NULL AND PD.SEODescription IS NULL AND PD.SEOKeywords IS NULL AND PD.SEOUrl IS NULL  
     --AND ZCSO.PortalId = @PortalId  

    SELECT PD.PublishCatalogId , PD.PublishProductId,PD.SKU,PD.SEOTitle,PD.SEODescription,PD.SEOKeywords,PD.SEOUrl,PD.Rating,PD.TotalReviews, 
		   CASE WHEN ISNULL(PD.IsPublish,0) = 0  THEN 'Draft' ELSE 'Published' END PublishStatus, PD.CanonicalURL, PD.RobotTag    
    FROM #Tlb_ProductData PD 
	--LEFT Outer join ZnodePublishCategoryProduct ZPCP  ON PD.PublishProductId = ZPCP.PublishProductId ;
	               
    COMMIT TRAN A;  
     
         END TRY  
         BEGIN CATCH  
              DECLARE @Status BIT ;  
       SET @Status = 0;  
       DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetProductDataForWebStore @PublishProductId='+@PublishProductId+',@PortalId='+CAST(@PortalId AS VARCHAR(50))+',@LocaleId='+CAST(@LocaleId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));  
                    
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                      
      
             EXEC Znode_InsertProcedureErrorLog  
    @ProcedureName = 'Znode_GetProductDataForWebStore',  
    @ErrorInProcedure = @Error_procedure,  
    @ErrorMessage = @ErrorMessage,  
    @ErrorLine = @ErrorLine,  
    @ErrorCall = @ErrorCall;  
         END CATCH;  
     END;
GO
if exists(select * from sys.procedures where name = 'Znode_DeleteContentPage')
	drop proc Znode_DeleteContentPage
go
CREATE PROCEDURE [dbo].[Znode_DeleteContentPage]
( 
	@CMSContentPageId VARCHAR(2000),
	@Status           BIT OUT
)
AS 
  /*  
     Summary : Remove content page details with their referance data 
			   Here complete delete the ContentPages and their references without any check  
			   If passed @CMSContentPageIds are matched with deleted count then data set return true other wise false 
			   dbo.Split function use to make comma separeted data in table rows 
			   1 ZnodeCMSContentPagesProfile
			   2 ZnodeCMSContentPagesLocale
			   3 ZnodeCMSContentPageGroupMapping
			   4 ZnodeCMSSEODetail
			   5 ZnodeCMSContentPages
     Unit Testing 
	 begin tran
     DEclare @Status bit 
     EXEC Znode_DeleteContentPage  29 ,@Status =@Status OUT 
	 rollback tran
       
    */
	 BEGIN
         BEGIN TRAN DeleteContentPage;
         BEGIN TRY
             SET NOCOUNT ON;
             DECLARE @TBL_DeleteContentPage TABLE(CMSContentPagesId INT,PageName NVARCHAR(200),PortalId INT );  -- table holds the CMSContentPagesId id 
             INSERT INTO @TBL_DeleteContentPage
                    SELECT a.CMSContentPagesId,a.PageName, a.PortalId
                    FROM [dbo].[ZnodeCMSContentPages] AS a
                         INNER JOIN dbo.Split(@CMSContentPageId, ',') AS b ON(a.CMSContentPagesId = b.Item); -- dbo.Split function use to make ',' separeted data in table rows 
             DELETE FROM ZnodeCMSContentPagesProfile
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteContentPage AS TBDCP
                 WHERE TBDCP.CMSContentPagesId = ZnodeCMSContentPagesProfile.CMSContentPagesId
             );
             DELETE FROM ZnodeCMSContentPagesLocale
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteContentPage AS TBDCP
                 WHERE TBDCP.CMSContentPagesId = ZnodeCMSContentPagesLocale.CMSContentPagesId
             );
             DELETE FROM ZnodeCMSContentPageGroupMapping
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteContentPage AS TBDCP
                 WHERE TBDCP.CMSContentPagesId = ZnodeCMSContentPageGroupMapping.CMSContentPagesId
             );
             DELETE FROM ZnodeCMSWidgetCategory
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteContentPage AS TBDCP
                 WHERE TBDCP.CMSContentPagesId = ZnodeCMSWidgetCategory.CMSMappingId
                       AND ZnodeCMSWidgetCategory.TypeOFMapping = 'ContentPageMapping'
             );
             DELETE FROM ZnodeCMSWidgetProduct
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteContentPage AS TBDCP
                 WHERE TBDCP.CMSContentPagesId = ZnodeCMSWidgetProduct.CMSMappingId
                       AND ZnodeCMSWidgetProduct.TypeOFMapping = 'ContentPageMapping'
             );
             DELETE FROM ZnodeCMSWidgetSliderBanner
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteContentPage AS TBDCP
                 WHERE TBDCP.CMSContentPagesId = ZnodeCMSWidgetSliderBanner.CMSMappingId
                       AND ZnodeCMSWidgetSliderBanner.TypeOFMapping = 'ContentPageMapping'
             );

			 DELETE FROM ZnodeCMSWidgetTitleConfigurationLocale
			 WHERE EXISTS
			 ( 
				select * FROM ZnodeCMSWidgetTitleConfiguration
				WHERE EXISTS
				(
					SELECT TOP 1 1
					FROM @TBL_DeleteContentPage AS TBDCP
					WHERE TBDCP.CMSContentPagesId = ZnodeCMSWidgetTitleConfiguration.CMSMappingId
						AND ZnodeCMSWidgetTitleConfiguration.TypeOFMapping = 'ContentPageMapping'
				) 
				AND ZnodeCMSWidgetTitleConfigurationLocale.CMSWidgetTitleConfigurationId = ZnodeCMSWidgetTitleConfiguration.CMSWidgetTitleConfigurationId
			 )

             DELETE FROM ZnodeCMSWidgetTitleConfiguration
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteContentPage AS TBDCP
                 WHERE TBDCP.CMSContentPagesId = ZnodeCMSWidgetTitleConfiguration.CMSMappingId
                       AND ZnodeCMSWidgetTitleConfiguration.TypeOFMapping = 'ContentPageMapping'
             );
             DELETE FROM ZnodeCMSSEODetailLocale
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM ZnodeCMSSEODetail
                 WHERE EXISTS
                 (
                     SELECT TOP 1 1
                     FROM @TBL_DeleteContentPage AS TBDCP
                     WHERE TBDCP.PageName = ZnodeCMSSEODetail.SEOCode
					 AND TBDCP.PortalId = ZnodeCMSSEODetail.PortalId
                 )
                       AND ZnodeCMSSEODetail.CMSSEOTypeId IN
                 (
                     SELECT CMSSEOTypeId
                     FROM ZnodeCMSSEOType
                     WHERE NAME = 'Content Page'
                 )
                       AND ZnodeCMSSEODetail.CMSSEODetailId = ZnodeCMSSEODetailLocale.CMSSEODetailId
             );
             DELETE FROM ZnodeCMSSEODetail
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteContentPage AS TBDCP
                 WHERE TBDCP.PageName = ZnodeCMSSEODetail.SEOCode
				 AND TBDCP.PortalId = ZnodeCMSSEODetail.PortalId
             )
                   AND ZnodeCMSSEODetail.CMSSEOTypeId IN
             (
                 SELECT CMSSEOTypeId
                 FROM ZnodeCMSSEOType
                 WHERE NAME = 'Content Page'
             );
             DELETE FROM ZnodeCMSContentPagesLocale
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteContentPage AS TBDCP
                 WHERE TBDCP.CMSContentPagesId = ZnodeCMSContentPagesLocale.CMSContentPagesId
             );
             DELETE FROM ZnodeFormWidgetEmailConfiguration
            WHERE EXISTS
            (
                SELECT TOP 1 1
                FROM @TBL_DeleteContentPage AS TBDCP
                WHERE TBDCP.CMSContentPagesId = ZnodeFormWidgetEmailConfiguration.CMSContentPagesId
            );
             DELETE FROM ZnodeCMSContentPages
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteContentPage AS TBDCP
                 WHERE TBDCP.CMSContentPagesId = ZnodeCMSContentPages.CMSContentPagesId
             );
             IF
             (
                 SELECT COUNT(1)
                 FROM @TBL_DeleteContentPage
             ) =
             (   -- if count are equal then  dataset status are return true other wise false 
                 SELECT COUNT(1)
                 FROM dbo.Split(@CMSContentPageId, ',')
             ) 
                 BEGIN
                     SELECT 1 AS ID,
                            CAST(1 AS BIT) AS [Status];
                     SET @Status = 1;
                 END;
             ELSE
                 BEGIN
                     SELECT 0 AS ID,
                            CAST(0 AS BIT) AS [Status];
                     SET @Status = 0;
                 END;
             COMMIT TRAN DeleteContentPage;
         END TRY
         BEGIN CATCH
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_DeleteContentPage @CMSContentPageId = '+@CMSContentPageId+',@Status='+CAST(@Status AS VARCHAR(50));
             SET @Status = 0;
             SELECT 0 AS ID,
                    CAST(0 AS BIT) AS [Status];
             ROLLBACK TRAN DeleteContentPage;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_DeleteContentPage',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO
if exists(select * from sys.procedures where name = 'Znode_GetPublishSingleProductJson')
	drop proc Znode_GetPublishSingleProductJson
go
CREATE PROCEDURE [dbo].[Znode_GetPublishSingleProductJson]
(
	 @PublishCatalogId INT = 0 
	,@VersionId       VARCHAR(50) = 0 
	,@PimProductId    TransferId Readonly 
	,@UserId		  INT = 0 
	,@TokenId nvarchar(max)= ''	
	,@LocaleIds TransferId READONLY
	,@PublishStateId INT = 0  
	,@RevisionType varchar(50)
	,@Status bit = 0 OutPut
	
)
AS


--Declare @PimProductId TransferId 
--insert into @PimProductId  select 230147
-- EXEC Znode_GetPublishSingleProductJson  @PublishCatalogId = 0 ,@VersionId= 0 ,@PimProductId =@PimProductId, @UserId=2 ,@RevisionType ='Production'


BEGIN 
BEGIN TRY 
 SET NOCOUNT ON 

EXEC Znode_InsertUpdatePimAttributeJson 1 
EXEC Znode_InsertUpdateCustomeFieldJson 1
EXEC Znode_InsertUpdateAttributeDefaultValueJson 1 
				
Select ZPLPD.PimParentProductId, ZPLPD.PimProductId, ZPLPD.PimAttributeId, ZPAVL.AttributeValue as SKU
into #LinkProduct
FROM ZnodePimLinkProductDetail ZPLPD 
INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId = ZPLPD.PimProductId)
INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId
WHERE exists(select * from ZnodePimAttribute ZPA where ZPA.PimAttributeId = ZPAV.PimAttributeId and ZPA.AttributeCode = 'SKU')
and exists(select * from @PimProductId pp where ZPLPD.PimParentProductId = pp.Id)

select * into #PimProductId from @PimProductId

create index Idx_#PimProductId_Id on #PimProductId(Id)
 IF OBJECT_ID('tempdb..#Cte_BrandData') is not null
 BEGIN 
	DROP TABLE #Cte_BrandData
 END 
 

 IF OBJECT_ID('tempdb..#ProductIds') is not null
 BEGIN 
	DROP TABLE #ProductIds
 END 

			Create Table #ProductIds (PimProductId int, PublishProductId  int )
			
			--DECLARE @PimProductAttributeJson TABLE(PimAttributeJsonId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )
			CREATE TABLE #PimProductAttributeJson (PimAttributeJsonId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )
			DECLARE @PimDefaultValueLocale  TABLE (PimAttributeDefaultJsonId INT  PRIMARY KEY ,PimAttributeDefaultValueId INT ,LocaleId INT ) 
			DECLARE @ProductNamePimAttributeId INT = dbo.Fn_GetProductNameAttributeId(),@DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId(),@LocaleId INT = 0 
			,@SkuPimAttributeId  INT =  dbo.Fn_GetProductSKUAttributeId() , @IsActivePimAttributeId INT =  dbo.Fn_GetProductIsActiveAttributeId()
			DECLARE @GetDate DATETIME =dbo.Fn_GetDate()
			DECLARE @TBL_LocaleId  TABLE (RowId INT IDENTITY(1,1) PRIMARY KEY  , LocaleId INT )

			DECLARE @DomainUrl varchar(max) = (select TOp 1 URL FROM ZnodeMediaConfiguration WHERE IsActive =1)

			INSERT INTO @TBL_LocaleId (LocaleId)
			SELECT  LocaleId
			FROM ZnodeLocale MT
			WHERE IsActive = 1
			AND (EXISTS (SELECT TOP 1 1  FROM @LocaleIds RT WHERE RT.Id = MT.LocaleId )
			OR NOT EXISTS (SELECT TOP 1 1 FROM @LocaleIds )) 
	
			-----to update link products newly addded and deleted from PIM
			delete ZPAP
			from ZnodePublishAssociatedProduct ZPAP
			where ZPAP.IsLink = 1
			AND not exists(select * from ZnodePimLinkProductDetail ZPPD where ZPAP.ParentPimProductId = ZPPD.PimParentProductId AND ZPAP.PimProductId = ZPPD.PimProductId)
			and exists(select * from #PimProductId PP where PP.Id = ZPAP.ParentPimProductId )

			insert into ZnodePublishAssociatedProduct(PimCatalogId,ParentPimProductId,PimProductId,PublishStateId,IsConfigurable,IsBundle,IsGroup,IsAddOn,IsLink,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			select distinct ZPCH.PimCatalogId, ZPLPD.PimParentProductId, ZPLPD.PimProductId, @PublishStateId, 0, 0, 0, 0, 1, ZPLPD.DisplayOrder, @UserId,@GetDate ,@UserId , @GetDate
			from ZnodePimLinkProductDetail ZPLPD
			INNER JOIN ZnodePimCategoryProduct ZPCP ON ZPLPD.PimParentProductId = ZPCP.PimProductId
			INNER JOIN ZnodePimCategoryHierarchy ZPCH ON ZPCP.PimCategoryId = ZPCH.PimCategoryId
			where exists(select * from #PimProductId PP where PP.Id = ZPLPD.PimParentProductId )
			and not exists(select * from ZnodePublishAssociatedProduct ZPACP where ZPCH.PimCatalogId = ZPACP.PimCatalogId and ZPLPD.PimParentProductId = ZPACP.ParentPimProductId AND ZPLPD.PimProductId = ZPACP.PimProductId  )
		
			-----to update config products newly addded and deleted from PIM
			delete ZPAP
			from ZnodePublishAssociatedProduct ZPAP
			where ZPAP.IsConfigurable = 1
			AND exists(select * from ZnodePimProductTypeAssociation ZPPD where ZPAP.ParentPimProductId = ZPPD.PimParentProductId )
			and exists(select * from #PimProductId PP where PP.Id = ZPAP.ParentPimProductId )

			insert into ZnodePublishAssociatedProduct(PimCatalogId,ParentPimProductId,PimProductId,PublishStateId,IsConfigurable,IsBundle,IsGroup,IsAddOn,IsLink,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate, IsDefault)
			select distinct ZPCH.PimCatalogId, ZPLPD.PimParentProductId, ZPLPD.PimProductId, @PublishStateId, 1, 0, 0, 0, 0, ZPLPD.DisplayOrder, @UserId,@GetDate ,@UserId , @GetDate, ZPLPD.IsDefault
			from ZnodePimProductTypeAssociation ZPLPD
			INNER JOIN ZnodePimCategoryProduct ZPCP ON ZPLPD.PimParentProductId = ZPCP.PimProductId
			INNER JOIN ZnodePimCategoryHierarchy ZPCH ON ZPCP.PimCategoryId = ZPCH.PimCategoryId
			where exists(select * from #PimProductId PP where PP.Id = ZPLPD.PimParentProductId )
			and not exists(select * from ZnodePublishAssociatedProduct ZPACP where ZPCH.PimCatalogId = ZPACP.PimCatalogId and ZPLPD.PimParentProductId = ZPACP.ParentPimProductId AND ZPLPD.PimProductId = ZPACP.PimProductId  )
			--group by ZPCH.PimCatalogId, ZPLPD.PimParentProductId, ZPLPD.PimProductId, ZPLPD.DisplayOrder, ZPLPD.IsDefault
			-------

			DECLARE @Counter INT =1 ,@maxCountId INT = (SELECT max(RowId) FROM @TBL_LocaleId ) 

			CREATE TABLE #TBL_PublishCatalogId (PublishCatalogId INT,PublishProductId INT,PimProductId  INT   , VersionId INT ,LocaleId INT, PriceListId INT , PortalId INT ,MaxSmallWidth NVARCHAr(max)  )
			CREATE INDEX idx_#TBL_PublishCatalogIdPimProductId on #TBL_PublishCatalogId(PimProductId)
			CREATE INDEX idx_#TBL_PublishCatalogIdPimPublishCatalogId on #TBL_PublishCatalogId(PublishCatalogId)

			INSERT INTO #TBL_PublishCatalogId 
			SELECT Distinct ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId, 0,0 ,
			(SELECT TOP 1 PriceListId FROM ZnodePriceListPortal NT 
			INNER JOIN ZnodePimCatalog ZPC on ZPC.PortalId=NT.PortalId  
			ORDER BY NT.Precedence ASC ) ,TY.PortalId,
			(SELECT TOP 1  MAX(MaxSmallWidth) FROM ZnodeGlobalMediaDisplaySetting)
			FROM ZnodePublishProduct ZPP 
			LEFT JOIN ZnodePortalCatalog TY ON (TY.PublishCatalogId = ZPP.PublishCatalogId)
			WHERE (EXISTS (SELECT TOP 1 1 FROM #PimProductId SP WHERE SP.Id = ZPP.PimProductId  
			AND  (@PublishCatalogId IS NULL OR @PublishCatalogId = 0 ))
			OR  (ZPP.PublishCatalogId = @PublishCatalogId ))
			And Exists 
			(Select TOP 1 1 from ZnodePublishVersionEntity ZPCP  where ZPCP.ZnodeCatalogId  = ZPP.PublishCatalogId AND ZPCP.IsPublishSuccess =1 )

			Insert into #ProductIds (PimProductId,PublishProductId) Select distinct PimProductId,PublishProductId from #TBL_PublishCatalogId  

             Create TABLE #TBL_ZnodeTempPublish (PimProductId INT , AttributeCode VARCHAR(300) ,AttributeValue NVARCHAR(max) ) 			
			 DECLARE @TBL_AttributeVAlueLocale TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT,LocaleId INT ,AttributeValue Nvarchar(1000) )


			 INSERT INTO @TBL_AttributeValueLocale (PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId ,LocaleId ,AttributeValue )
			 SELECT VIR.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId,VIR.LocaleId, ''
			 FROM View_LoadManageProductInternal VIR
			 INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = VIR.PimProductId)
			 UNION ALL 
			 SELECT VIR.PimProductId,PimAttributeId,PimProductAttributeMediaId,ZPDE.LocaleId , ''
			 FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimProductAttributeMedia ZPDE ON (ZPDE.PimAttributeValueId = VIR.PimAttributeValueId )
			 WHERE EXISTS (SELECT TOP 1 1 FROM #ProductIds ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
			 Union All 
			 SELECT VIR.PimProductId,VIR.PimAttributeId,ZPDVL.PimAttributeDefaultValueLocaleId,ZPDVL.LocaleId ,ZPDVL.AttributeDefaultValue
			   FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1 )
			 INNER JOIN ZnodePimAttributeDefaultValue ZPADV ON ZPADV.PimAttributeId = D.PimAttributeId
			 INNER JOIN ZnodePimAttributeDefaultValueLocale ZPDVL   on (ZPADV.PimAttributeDefaultValueId = ZPDVL.PimAttributeDefaultValueId)
			 WHERE ( ZPDVL.LocaleId = @DefaultLocaleId OR ZPDVL.LocaleId = @LocaleId )
			 AND EXISTS(SELECT TOP 1 1 FROM #ProductIds ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
			 Union All 
			 SELECT VIR.PimProductId,VIR.PimAttributeId,'','' ,''
			 FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1 )
			 WHERE  EXISTS(SELECT TOP 1 1 FROM #ProductIds ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
		
				--insert INTO #ZnodePrice
				SELECT RetailPrice,SalesPrice,ZC.CurrencyCode,ZCC.CultureCode ,ZCC.Symbol CurrencySuffix,TYU.PublishProductId ,isnull(ZPC1.IsAllowIndexing,0) as IsAllowIndexing
				into #ZnodePrice
				FROM ZnodePrice ZP 
				INNER JOIN ZnodePriceList ZPL ON (ZPL.PriceListId = ZP.PriceListId)
				INNER JOIN ZnodeCurrency ZC oN (ZC.CurrencyId = ZPL.CurrencyId )
				INNER JOIN ZnodeCulture ZCC ON (ZCC.CultureId = ZPL.CultureId)
				INNER JOIN ZnodePublishProductDetail TY ON (TY.SKU = ZP.SKU ) 
				INNER JOIN ZnodePublishProduct TYU ON (TYU.PublishProductId = TY.PublishProductId)
				INNER JOIN ZnodePublishCatalog ZPC ON (TYU.PublishCatalogId = ZPC.PublishCatalogId)
				INNER JOIN ZnodePimCatalog ZPC1 ON (ZPC.PimCatalogId = ZPC1.PimCatalogId)
				WHERE EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId TYUR WHERE TYUR.PriceListId = ZPL.PriceListId AND TYUR.PublishCatalogId = TYU.PublishCatalogId
				AND TYU.PublishProductId = TYUR.PublishProductId)
				AND TY.LocaleId = dbo.Fn_GetDefaultLocaleId()
				AND EXISTS (SELECT TOP 1 1 FROM ZnodePriceListPortal ZPLP 
				INNER JOIN ZnodePimCatalog ZPC on ZPC.PortalId=ZPLP.PortalId WHERE ZPLP.PriceListId=ZP.PriceListId )
				
				--insert INTO #ProductSKU
				SELECT ZCSD.SEOUrl , ZCDL.SEODescription,ZCDL.SEOKeywords ,ZCDL.SEOTitle, TYU.PublishProductId ,isnull(ZPC1.IsAllowIndexing,0) as IsAllowIndexing
				INTO #ProductSKU
				FROM ZnodeCMSSEODetail ZCSD 
				INNER JOIN ZnodeCMSSEODetailLocale ZCDL ON (ZCDL.CMSSEODetailId = ZCSD.CMSSEODetailId)
				INNER JOIN ZnodePublishProductDetail TY ON (TY.SKU = ZCSD.SEOCode AND ZCDL.LocaleId = TY.LocaleId) 
				INNER JOIN ZnodePublishProduct TYU ON (TYU.PublishProductId = TY.PublishProductId)
				INNER JOIN ZnodePublishCatalog ZPC ON (TYU.PublishCatalogId = ZPC.PublishCatalogId)
				INNER JOIN ZnodePimCatalog ZPC1 ON (ZPC.PimCatalogId = ZPC1.PimCatalogId)
				WHERE CMSSEOTypeId = (SELECT TOP 1 CMSSEOTypeId FROM ZnodeCMSSEOType WHERE Name = 'Product') 
				AND EXISTS (SELECT TOP 1 1  FROM #TBL_PublishCatalogId TYUR WHERE  TYUR.PublishCatalogId = TYU.PublishCatalogId
				AND TYU.PublishProductId = TYUR.PublishProductId)
				AND ZCDL.LocaleId = dbo.Fn_GetDefaultLocaleId()
				and ZCSD.PortalId = isnull(ZPC1.PortalId,0)

			
				--insert INTO #ProductImages
				SELECT  TUI.PublishCatalogId, TYU.PublishProductId , @DomainUrl +'Catalog/'  + CAST(Max(ZPC1.PortalId) AS VARCHAr(100)) + '/'+ CAST(Isnull(Max(TUI.MaxSmallWidth),'') AS VARCHAR(100)) + '/' + Isnull(RT.MediaPath,'') AS ImageSmallPath    
				,isnull(ZPC1.IsAllowIndexing,0) as IsAllowIndexing
				INTO #ProductImages
				FROM ZnodePimAttributeValue ZPAV 
				INNER JOIN ZnodePublishProduct TYU ON (TYU.PimProductId  = ZPAV.PimProductId)
				INNER JOIN ZnodePimProductAttributeMedia  RT ON ( RT.PimAttributeValueId = ZPAV.PimAttributeValueId )
				INNER JOIN #TBL_PublishCatalogId TUI ON (TUI.PublishProductId = TYU.PublishProductId AND TUI.PublishCatalogId = TYU.PublishCatalogId
						 )--AND  TUI.LocaleId = dbo.Fn_GetDefaultLocaleId()
				INNER JOIN ZnodePublishCatalog ZPC ON (TYU.PublishCatalogId = ZPC.PublishCatalogId)
				INNER JOIN ZnodePimCatalog ZPC1 ON (ZPC.PimCatalogId = ZPC1.PimCatalogId)
				WHERE  RT.LocaleId = dbo.Fn_GetDefaultLocaleId()
				AND ZPAV.PimAttributeId = (SELECT TOp 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'ProductImage')
				group by TUI.PublishCatalogId, TYU.PublishProductId ,isnull(RT.MediaPath,''),isnull(ZPC1.IsAllowIndexing,0) 
		  -- end
	  
WHILE @Counter <= @maxCountId
BEGIN
 SET @LocaleId = (SELECT TOP 1 LocaleId FROM @TBL_LocaleId WHERE RowId = @Counter)

  INSERT INTO #PimProductAttributeJson 
  SELECT PimAttributeJsonId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeJSON
  WHERE LocaleId = @LocaleId
  
  INSERT INTO #PimProductAttributeJson 
  SELECT PimAttributeJsonId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeJSON ZPAX
  WHERE ZPAX.LocaleId = @DefaultLocaleId  
  AND NOT EXISTS (SELECT TOP 1 1 FROM #PimProductAttributeJson ZPAXI WHERE ZPAXI.PimAttributeId = ZPAX.PimAttributeId )

  INSERT INTO @PimDefaultValueLocale
  SELECT PimAttributeDefaultJsonId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultJson
  WHERE localeId = @LocaleId

  INSERT INTO @PimDefaultValueLocale 
   SELECT PimAttributeDefaultJsonId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultJson ZX
  WHERE localeId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM @PimDefaultValueLocale TRTR WHERE TRTR.PimAttributeDefaultValueId = ZX.PimAttributeDefaultValueId)
  
 
  --DECLARE @TBL_AttributeVAlue TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT  )
  --DECLARE @TBL_CustomeFiled TABLE (PimCustomeFieldJsonId INT ,CustomCode VARCHAR(300),PimProductId INT ,LocaleId INT )
  CREATE TABLE #TBL_CustomeFiled  (PimCustomeFieldJsonId INT ,CustomCode VARCHAR(300),PimProductId INT ,LocaleId INT )
  CREATE TABLE #TBL_AttributeVAlue (PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT  )



  INSERT INTO #TBL_CustomeFiled (PimCustomeFieldJsonId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldJsonId,RTR.PimProductId ,RTR.LocaleId,CustomCode
  FROM ZnodePimCustomeFieldJson RTR 
  INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = RTR.PimProductId)
  WHERE RTR.LocaleId = @LocaleId
 

  INSERT INTO #TBL_CustomeFiled (PimCustomeFieldJsonId,PimProductId ,LocaleId,CustomCode)
  SELECT  Distinct  PimCustomeFieldJsonId,ITR.PimProductId ,ITR.LocaleId,CustomCode
  FROM ZnodePimCustomeFieldJson ITR
  INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = ITR.PimProductId)
  WHERE ITR.LocaleId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM #TBL_CustomeFiled TBL  WHERE ITR.CustomCode = TBL.CustomCode AND ITR.PimProductId = TBL.PimProductId)
  

    INSERT INTO #TBL_AttributeVAlue (PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId )
    SELECT Distinct  PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId
	FROM @TBL_AttributeVAlueLocale
    WHERE LocaleId = @LocaleId

    
	INSERT INTO #TBL_AttributeVAlue(PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId )
	SELECT VI.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId
	FROM @TBL_AttributeVAlueLocale VI 
    WHERE VI.LocaleId = @DefaultLocaleId 
	AND NOT EXISTS (SELECT TOP 1 1 FROM #TBL_AttributeVAlue  CTE WHERE CTE.PimProductId = VI.PimProductId AND CTE.PimAttributeId = VI.PimAttributeId )
 
	------------Facet Merging Patch --------------
	IF OBJECT_ID('tempdb..#PimChildProductFacets') is not null
	BEGIN 
		DROP TABLE #PimChildProductFacets
	END 

	IF OBJECT_ID('tempdb..#PimAttributeDefaultXML') is not null
	BEGIN 
		DROP TABLE #PimAttributeDefaultXML
	END
	----Getting parent facets data
	Select  ZPPADV.PimAttributeDefaultValueId, ZPAV_Parent.PimAttributeValueId, ZPPADV.LocaleId
	Into #PimChildProductFacets
	from ZnodePimAttributeValue ZPAV_Parent
	inner join ZnodePimProductAttributeDefaultValue ZPPADV ON ZPAV_Parent.PimAttributeValueId = ZPPADV.PimAttributeValueId 
	where exists(select * from #ProductIds ZPPC where ZPAV_Parent.PimProductId = ZPPC.PimProductId )

	----Getting child facets for merging	
	insert into #PimChildProductFacets	  
	Select distinct ZPPADV.PimAttributeDefaultValueId, ZPAV_Parent.PimAttributeValueId, ZPPADV.LocaleId
	from ZnodePimAttributeValue ZPAV_Parent
	inner join ZnodePimProductTypeAssociation ZPPTA ON ZPAV_Parent.PimProductId = ZPPTA.PimParentProductId
	inner join ZnodePimAttributeValue ZPAV_Child ON ZPPTA.PimProductId = ZPAV_Child.PimProductId AND ZPAV_Parent.PimAttributeId = ZPAV_Child.PimAttributeId
	inner join ZnodePimProductAttributeDefaultValue ZPPADV ON ZPAV_Child.PimAttributeValueId = ZPPADV.PimAttributeValueId 
	where exists(select * from ZnodePimFrontendProperties ZPFP where ZPAV_Parent.PimAttributeId = ZPFP.PimAttributeId and ZPFP.IsFacets = 1)
	and exists(select * from #ProductIds ZPPC where ZPAV_Parent.PimProductId = ZPPC.PimProductId )
	and not exists(select * from ZnodePimProductAttributeDefaultValue ZPPADV1 where ZPAV_Parent.PimAttributeValueId = ZPPADV1.PimAttributeValueId 
		            and ZPPADV1.PimAttributeDefaultValueId = ZPPADV.PimAttributeDefaultValueId )

	----Merging childs facet attribute Default value XML for parent
	select  ZPADX.DefaultValueJson, ZPPADV.PimAttributeValueId, ZPPADV.LocaleId
	into #PimAttributeDefaultXML
	from #PimChildProductFacets ZPPADV		  
	inner join ZnodePimAttributeDefaultJson ZPADX ON ( ZPPADV.PimAttributeDefaultValueId = ZPADX.PimAttributeDefaultValueId )--AND ZPPADV.LocaleId = ZPADX.LocaleId)
	INNER JOIN @PimDefaultValueLocale GH ON (GH.PimAttributeDefaultJsonId = ZPADX.PimAttributeDefaultJsonId)
	------------Facet Merging Patch --------------   

	 IF OBJECT_ID('tempdb..#View_LoadManageProductInternal') is not null
	 BEGIN 
		DROP TABLE #View_LoadManageProductInternal
	 END 

	SELECT a.PimProductId ,b.AttributeValue as AttributeValue , b.LocaleId  ,a.PimAttributeId,c.AttributeCode ,b.ZnodePimAttributeValueLocaleId
	into #View_LoadManageProductInternal
	FROM ZnodePimAttributeValue a 
	INNER JOIN  ZnodePimAttributeValueLocale b ON ( b.PimAttributeValueId = a.PimAttributeValueId )
	INNER JOIN ZnodePimAttribute c ON ( c.PimAttributeId=a.PimAttributeId )
	INNER JOIN ZnodePimAttributeJSON c1   ON (c1.PimAttributeId = a.PimAttributeId )
	INNER JOIN #PimProductAttributeJson b1 ON (b1.PimAttributeJsonId = c1.PimAttributeJsonId )
	INNER JOIN #TBL_AttributeVAlue CTE ON (Cte.PimAttributeId = a.PimAttributeId AND Cte.ZnodePimAttributeValueLocaleId = b.ZnodePimAttributeValueLocaleId)
	UNION ALL
	SELECT a.PimProductId,ZPPATAV.AttributeValue AS AttributeValue  
	,ZPPATAV.LocaleId,a.PimAttributeId,c.AttributeCode  ,ZPPATAV.PimProductAttributeTextAreaValueId
	FROM ZnodePimAttributeValue a 
	INNER JOIN ZnodePimProductAttributeTextAreaValue ZPPATAV ON (ZPPATAV.PimAttributeValueId = a.PimAttributeValueId )
	INNER JOIN ZnodePimAttribute c ON ( c.PimAttributeId=a.PimAttributeId )
	INNER JOIN ZnodePimAttributeJSON c1   ON (c1.PimAttributeId = a.PimAttributeId )
	INNER JOIN #PimProductAttributeJson b1 ON (b1.PimAttributeJsonId = c1.PimAttributeJsonId )
	INNER JOIN #TBL_AttributeVAlue CTE ON (Cte.PimAttributeId = a.PimAttributeId AND Cte.ZnodePimAttributeValueLocaleId = ZPPATAV.PimProductAttributeTextAreaValueId)
	
	INSERT INTO #TBL_ZnodeTempPublish  
		SELECT  a.PimProductId,a.AttributeCode , 
			JSON_MODIFY (JSON_MODIFY (Json_Query( c.AttributeJSON  ) , '$.AttributeValues' ,  
			ISNULL(a.AttributeValue,'') ) ,'$.SelectValues',Json_Query('[]'))
			AS 'AttributeValue'
		FROM #View_LoadManageProductInternal a 
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = a.PimAttributeId )
		INNER JOIN #PimProductAttributeJson b ON (b.PimAttributeJsonId = c.PimAttributeJsonId )
		INNER JOIN #TBL_AttributeVAlue CTE ON (Cte.PimAttributeId = a.PimAttributeId AND Cte.ZnodePimAttributeValueLocaleId = a.ZnodePimAttributeValueLocaleId)
	UNION ALL 
			SELECT  a.PimProductId,c.AttributeCode , 
			JSON_MODIFY (JSON_MODIFY (Json_Query( c.AttributeJSON  ) , '$.AttributeValues' ,  
			ISNULL(TAVL.AttributeValue,'') ) ,'$.SelectValues',Json_Query('[]'))
			AS 'AttributeValue'
		FROM ZnodePimAttributeValue  a 
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = a.PimAttributeId )
		INNER JOIN #PimProductAttributeJson b ON (b.PimAttributeJsonId = c.PimAttributeJsonId )
		INNER JOIN ZnodePImAttribute ZPA  ON (ZPA.PimAttributeId = a.PimAttributeId)
		INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = a.PimProductId)
		Inner JOIN @TBL_AttributeVAlueLocale TAVL ON  (c.PimAttributeId = TAVL.PimAttributeId  and ZPP.PimProductId = TAVL.PimProductId )
		WHERE ZPA.IsPersonalizable = 1 
		AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodePimAttributeValueLocale q WHERE q.PimAttributeValueId = a.PimAttributeValueId) 
	UNION ALL 
		SELECT THB.PimProductId,THB.CustomCode,
		--'<Attributes><AttributeEntity>'+CustomeFiledJson +'</AttributeEntity></Attributes>' 
		JSON_MODIFY (Json_Query( CustomeFiledJson ) ,'$.SelectValues',Json_Query('[]')) 
		FROM ZnodePimCustomeFieldJson THB 
		INNER JOIN #TBL_CustomeFiled TRTE ON (TRTE.PimCustomeFieldJsonId = THB.PimCustomeFieldJsonId)
		UNION ALL 
		SELECT ZPAV.PimProductId,c.AttributeCode,
			JSON_MODIFY (JSON_MODIFY (c.AttributeJson,'$.AttributeValues',''), '$.SelectValues',
			Isnull((SELECT 
			Isnull(JSON_VALUE(DefaultValueJson, '$.Code'),'') Code 
			,Isnull(JSON_VALUE(DefaultValueJson, '$.LocaleId'),0) LocaleId
			,IsNull(JSON_VALUE(DefaultValueJson, '$.Value'),'') Value
			,IsNull(JSON_VALUE(DefaultValueJson, '$.AttributeDefaultValue'),'') AttributeDefaultValue
			,Isnull(JSON_VALUE(DefaultValueJson, '$.DisplayOrder'),0) DisplayOrder
			,Isnull(JSON_VALUE(DefaultValueJson, '$.IsEditable'),'false') IsEditable
			,Isnull(JSON_VALUE(DefaultValueJson, '$.SwatchText'),'') SwatchText
			,Isnull(JSON_VALUE(DefaultValueJson, '$.Path'),'') Path
			FROM #PimAttributeDefaultXML ZPADV
			WHERE (ZPADV.PimAttributeValueId = ZPAV.PimAttributeValueId) For JSON Auto 
			),'[]') 
		)  AttributeValue
		FROM ZnodePimAttributeValue ZPAV  With (NoLock)
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
		INNER JOIN #PimProductAttributeJson b ON (b.PimAttributeJsonId = c.PimAttributeJsonId )
		INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
		WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL 
		WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
	UNION ALL 
		SELECT DISTINCT  ZPAV.PimProductId,c.AttributeCode,
			JSON_MODIFY (JSON_MODIFY (Json_Query( c.AttributeJson  ) , '$.AttributeValues',  
			ISNULL((Select stuff( 
			(SELECT ','+ZPPG.MediaPath 
			FROM ZnodePimProductAttributeMedia ZPPG INNER JOIN  #TBL_AttributeVAlue TBLV ON 
			(	TBLV.PimProductId=  ZPAV.PimProductId AND TBLV.PimAttributeId = ZPAV.PimAttributeId )
			WHERE ZPPG.PimProductAttributeMediaId = TBLV.ZnodePimAttributeValueLocaleId
			FOR XML PATH(''),Type).value('.', 'varchar(max)'), 1, 1, '')),'') ) ,'$.SelectValues',Json_Query('[]'))   
			AS 'AttributeEntity'
		FROM ZnodePimAttributeValue ZPAV 
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
		INNER JOIN #PimProductAttributeJson b ON (b.PimAttributeJsonId = c.PimAttributeJsonId )
		INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
		WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeMedia ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
	UNION ALL 
		SELECT ZPLP.PimParentProductId ,c.AttributeCode, 
			JSON_MODIFY( JSON_Modify(c.AttributeJson , '$.AttributeValues' , 
			ISNULL(SUBSTRING((SELECT ','+cast( LP.SKU as varchar(600)) 
							 FROM #LinkProduct LP
							 WHERE LP.PimParentProductId = ZPLP.PimParentProductId 
							 AND LP.PimAttributeId = ZPLP.PimAttributeId
		FOR XML PATH ('') ),2,4000),'')),'$.SelectValues',Json_Query('[]'))   
	
		FROM ZnodePimLinkProductDetail ZPLP 
		INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPLP.PimParentProductId)
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = ZPLP.PimAttributeId )
		INNER JOIN #PimProductAttributeJson b ON (b.PimAttributeJsonId = c.PimAttributeJsonId )
		GROUP BY ZPLP.PimParentProductId , ZPP.PublishProductId  ,ZPLP.PimAttributeId,c.AttributeCode,c.AttributeJson,ZPP.PublishCatalogId
	UNION ALL 
		SELECT ZPAV.PimProductId,'DefaultSkuForConfigurable' ,
			JSON_MODIFY( JSON_Modify(
			REPLACE(REPLACE (c.AttributeJson,'ProductType','DefaultSkuForConfigurable'),'Product Type','Default Sku For Configurable'),
			'$.AttributeValues' , 
			ISNULL(SUBSTRING((SELECT ','+CAST(adl.AttributeValue AS VARCHAR(50)) 
		FROM ZnodePimAttributeValue ad 
		inner join ZnodePimAttributeValueLocale adl on ad.PimattributeValueId = adl.PimAttributeValueId
		INNER JOIN ZnodePimProductTypeAssociation yt ON (yt.PimProductId = ad.PimProductId)
		WHERE EXISTS (select * from #ProductIds p where yt.PimParentProductId = p.PimProductId)
		AND Ad.PimAttributeId =(select top 1 PimAttributeId from ZnodePimAttribute zpa where zpa.AttributeCode = 'SKU')
		AND yt.PimParentProductId = ZPAV.PimProductId 
		ORDER BY yt.DisplayOrder , yt.PimProductTypeAssociationId ASC FOR XML PATH ('') ),2,4000),'')),'$.SelectValues',Json_Query('[]'))   
		FROM ZnodePimAttributeValue ZPAV  
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
		INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
		WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL 
		INNER JOIN ZnodePimAttributeDefaultValue dr ON (dr.PimAttributeDefaultValueId = ZPADVL.PimAttributeDefaultValueId)
		WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId
		AND dr.AttributeDefaultValueCode= 'ConfigurableProduct' 
		)
		AND EXISTS (select * from #PimProductAttributeJson b where b.PimAttributeJsonId = c.PimAttributeJsonId)
		AND c.AttributeCode = 'ProductType' 
	UNION ALL
		SELECT DISTINCT  UOP.PimProductId,c.AttributeCode,
			JSON_MODIFY (JSON_MODIFY (c.AttributeJson,'$.AttributeValues',''), '$.SelectValues',
			Isnull((SELECT  DISTINCT 
			Isnull(JSON_VALUE(AA.DefaultValueJson, '$.Code'),'') Code 
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.LocaleId'),0) LocaleId
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.Value'),'') Value
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.AttributeDefaultValue'),'') AttributeDefaultValue
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.DisplayOrder'),0) DisplayOrder
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.IsEditable'),'false') IsEditable
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.SwatchText'),'') SwatchText
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.Path'),'') Path 
			,ISNULL(ZPA.DisplayOrder,0)  AS VariantDisplayOrder 
			,ISNULL(ZPAVL_SKU.AttributeValue,'')   AS VariantSKU 
			--,Isnull(ZM.Path,'') 
		,'' AS VariantImagePath 
		FROM ZnodePimAttributeDefaultJson AA 
		INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId )
		INNER JOIN ZnodePimAttributeValue ZPAV1 ON (ZPAV1.PimAttributeValueId= ZPADV.PimAttributeValueId )
		-- check/join for active variants 
		INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId =ZPAV1.PimProductId)
		INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON (ZPAV.PimAttributevalueid = ZPAVL.PimAttributeValueId AND ZPAVL.AttributeValue = 'True')
		INNER JOIN ZnodePimProductTypeAssociation YUP ON (YUP.PimProductId = ZPAV1.PimProductId)
		-- SKU
		INNER JOIN ZnodePimAttributeValue ZPAV_SKU ON(YUP.PimProductId = ZPAV_SKU.PimProductId)
		INNER JOIN ZnodePimAttributeValueLocale ZPAVL_SKU ON (ZPAVL_SKU.PimAttributeValueId = ZPAV_SKU.PimAttributeValueId)
		LEFT JOIN ZnodePimAttribute ZPA ON (ZPA.PimattributeId = ZPAV1.PimAttributeId)
		WHERE (YUP.PimParentProductId  = UOP.PimProductId AND ZPAV1.pimAttributeId = UOP.PimAttributeId )
		-- Active Variants
		AND ZPAV.PimAttributeId = (SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'IsActive')
		-- VariantSKU
		AND ZPAV_SKU.PimAttributeId = (SELECT PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'SKU')
		For JSON Auto 
		),'[]')) 
				
		--</AttributeEntity></Attributes>' 
		FROM ZnodePimConfigureProductAttribute UOP 
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = UOP.PimAttributeId )
		WHERE  exists(select * from #TBL_PublishCatalogId PPCP1 where UOP.PimProductId = PPCP1.PimProductId )
		AND EXISTS (select * from #PimProductAttributeJson b where b.PimAttributeJsonId = c.PimAttributeJsonId)

			-------------configurable attribute 
			---------------------------------------------------------------------
			
			If (@RevisionType like '%Preview%'  OR @RevisionType like '%Production%'  ) 
				Delete from ZnodePublishProductEntity where SKU  in (select SKU from #TBL_PublishCatalogId
				A inner join ZnodePublishProductDetail B on A.PublishProductId   =B.PublishProductId   )
				AND LocaleId = @LocaleId
				AND VersionId in (SELECT VersionId FROM ZnodePublishVersionEntity where RevisionType = 'PREVIEW')
			If (@RevisionType like '%Production%' OR @RevisionType = 'None')
				Delete from ZnodePublishProductEntity where SKU  in (select SKU from #TBL_PublishCatalogId
				A inner join ZnodePublishProductDetail B on A.PublishProductId   =B.PublishProductId   )
				AND LocaleId = @LocaleId
				AND VersionId in (SELECT VersionId FROM ZnodePublishVersionEntity where RevisionType = 'PRODUCTION')

			Insert into ZnodePublishProductEntity (
					VersionId, --1
					IndexId, --2 
					ZnodeProductId,ZnodeCatalogId, --3
					SKU,LocaleId, --4 
					Name,ZnodeCategoryIds, --5
					IsActive, -- 6 
					Attributes, -- 7 
					Brands, -- 9
					CategoryName, --9
					CatalogName,DisplayOrder, --10 
					RevisionType,AssociatedProductDisplayOrder, --11
					ProductIndex,--12
					SalesPrice,RetailPrice,CultureCode,CurrencySuffix,CurrencyCode,SeoDescription,SeoKeywords,SeoTitle,SeoUrl,ImageSmallPath,SKULower --13 
					)
 			SELECT distinct ZPVE.VersionId, --1 
			CAST(ISNULL(ZPCP.ProductIndex,1) AS VARCHAr(100)) + CAST(ISNULL(ZPC.PublishCategoryId,'')  AS VARCHAR(50))  + 
			CAST(Isnull(ZPP.PublishCatalogId ,'')  AS VARCHAR(50)) + CAST( @LocaleId AS VARCHAR(50)) IndexId, --2 
			CAST(ZPP.PublishProductId AS VARCHAR(50)) PublishProductId,CAST(ZPP.PublishCatalogId  AS VARCHAR(50)) PublishCatalogId,  --3 
			CAST(ISNULL(ZPPDFG.SKU ,'') AS NVARCHAR(2000)) SKU,CAST( Isnull(@LocaleId ,'') AS VARCHAR(50)) LocaleId, -- 4 
			CAST(isnull(ZPPDFG.ProductName,'') AS NVARCHAR(2000) )  ProductName ,CAST(ISNULL(ZPCD.PublishCategoryId,'')  AS VARCHAR(50)) PublishCategoryId  -- 5 
			,CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50)) IsActive , --6 
			'[' +
				(Select STUFF((SELECT distinct ','+ AttributeValue from #TBL_ZnodeTempPublish TY WHERE TY.PimProductId = ZPP.PimProductId   
				FOR XML Path ('')) ,1,1,'')  ) 
			+ ']' xmlvalue,  -- 7 
			'[]' Brands  --8 
			,CAST(isnull(PublishCategoryName,'') AS NVARCHAR(2000)) CategoryName  --9
			,CAST(Isnull(CatalogName,'')  AS NVARCHAR(2000)) CatalogName,CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50)) DisplayOrder  -- 10  
			,ZPVE.RevisionType RevisionType , 0 AssociatedProductDisplayOrder,-- pending  -- 11 
			Isnull(ZPCP.ProductIndex,1),  -- 12 

			Case When TBZP.IsAllowIndexing = 1 then  ISNULL(CAST(SalesPrice  AS varchar(500)),'') else '' end SalesPrice , 
			Case When TBZP.IsAllowIndexing = 1 then  ISNULL(CAST(RetailPrice  AS varchar(500)),'') else '' end RetailPrice , 
			Case When TBZP.IsAllowIndexing = 1 then  ISNULL(CultureCode ,'') else '' end CultureCode , 
			Case When TBZP.IsAllowIndexing = 1 then  ISNULL(CurrencySuffix ,'') else '' end CurrencySuffix , 
			Case When TBZP.IsAllowIndexing = 1 then  ISNULL(CurrencyCode ,'') else '' end CurrencyCode , 
			Case When TBZP.IsAllowIndexing = 1 then  ISNULL(SEODescription,'') else '' end SEODescriptionForIndex,
			Case When TBZP.IsAllowIndexing = 1 then  ISNULL(SEOKeywords,'') else '' end SEOKeywords,
			Case When TBZP.IsAllowIndexing = 1 then  ISNULL(SEOTitle,'') else '' end SEOTitle,
			Case When TBZP.IsAllowIndexing = 1 then  ISNULL(SEOUrl ,'') else '' end SEOUrl,
			Case When TBZP.IsAllowIndexing = 1 then  ISNULL(ImageSmallPath,'') else '' end ImageSmallPath,
			CAST(ISNULL(LOWER(ZPPDFG.SKU) ,'') AS NVARCHAR(100)) Lower_SKU -- 13
	FROM  #TBL_PublishCatalogId zpp
	INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
	INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
	INNER JOIN ZnodePublishVersionEntity ZPVE ON (ZPVE.ZnodeCatalogId  = ZPP.PublishCatalogId AND ZPVE.IsPublishSuccess =1 AND ZPVE.LocaleId = @LocaleId )
	LEFT JOIN #ZnodePrice TBZP ON (TBZP.PublishProductId = ZPP.PublishProductId)
	LEFT JOIN #ProductSKU TBPS ON (TBPS.PublishProductId = ZPP.PublishProductId)
	LEFT JOIN #ProductImages TBPI ON (TBPI.PublishProductId = ZPP.PublishProductId  )
	INNER JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
	INNER JOIN ZnodePublishCategory ZPC ON (ZPC.PublishCatalogId = ZPCP.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId)
	INNER JOIN ZnodePimCategoryProduct ZPCCF ON (ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId )
	INNER JOIN ZnodePimCategoryHierarchy ZPCH ON (ZPCH.PimCatalogId = ZPCV.PimCatalogId AND  ZPCH.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId) 
	INNER JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ZPCP.PublishCategoryId AND ZPCD.LocaleId = @LocaleId )
	WHERE ZPPDFG.LocaleId = @LocaleId
		--AND zpp.LocaleId = @LocaleId
	AND 
		(
			(ZPVE.RevisionType =  Case when  (@RevisionType like '%Preview%'  OR @RevisionType like '%Production%' ) then 'Preview' End ) 
			OR 
			(ZPVE.RevisionType =  Case when (@RevisionType like '%Production%' OR @RevisionType = 'None') then  'Production'  end )
		)


	DELETE FROM #TBL_ZnodeTempPublish
	IF OBJECT_ID('tempdb..#PimProductAttributeJson') is not null
	 BEGIN 
		DELETE FROM #PimProductAttributeJson
	 END
	 IF OBJECT_ID('tempdb..#TBL_CustomeFiled') is not null
	 BEGIN 
	 DROP TABLE #TBL_CustomeFiled
	 END
	 IF OBJECT_ID('tempdb..#TBL_AttributeVAlue') is not null
	 BEGIN 
	 DROP TABLE #TBL_AttributeVAlue
	 END
 
	DELETE FROM @PimDefaultValueLocale
SET @Counter = @counter + 1 
END

SET @Status =1 

END TRY 
BEGIN CATCH 
	SET @Status =0  
	 SELECT 1 AS ID,@Status AS Status;   
	 DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
		@ErrorLine VARCHAR(100)= ERROR_LINE(),
		@ErrorCall NVARCHAR(MAX)= 'EXEC [Znode_GetPublishSingleProductJson] 
		@PublishCatalogId = '+CAST(@PublishCatalogId  AS VARCHAR	(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10))
				
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_GetPublishSingleProductJson',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
END CATCH
END
GO
if exists(select * from sys.procedures where name = 'Znode_GetMediaFolderDetails')
	drop proc Znode_GetMediaFolderDetails
go
CREATE PROCEDURE [dbo].[Znode_GetMediaFolderDetails]
( @WhereClause VARCHAR(1000),
  @MediaPathId INT,
  @Rows        INT           = 1000,
  @PageNo      INT           = 0,
  @Order_BY    VARCHAR(1000) = '',
  @RowsCount   INT OUT,
  @LocaleId    INT           = 1)
AS
/*
  Summary: This Procedure is Used to Get Details of Media Folder
  Unit Testing:
  begin tran
DECLARE @RowsCount BIGINT  
EXEC Znode_GetMediaFolderDetails @MediaPathId = -1 , @WhereClause='',@Rows=2147483647,@PageNo=1 ,@Order_By='', @RowsCount = @RowsCount OUT  
  rollback tran
  begin tran
DECLARE @RowsCount BIGINT  
EXEC Znode_GetMediaFolderDetails @MediaPathId = 1 , @WhereClause='' ,@Rows=10,@PageNo=1 ,@RowsCount =@RowsCount
  rollback tran
*/
BEGIN
SET NOCOUNT ON;

BEGIN TRY
Declare @DisplayNameId int,
@DescriptionId int

SELECT @DisplayNameId =MediaAttributeId from ZnodeMediaAttribute where AttributeCode = 'DisplayName'
SELECT @DescriptionId =MediaAttributeId from ZnodeMediaAttribute where AttributeCode = 'Description'

if object_id('tempdb..#GetMediaPathDetail') is not null
drop table #GetMediaPathDetail

if object_id('tempdb..##GetMediaPathHierarchy') is not null
drop table ##GetMediaPathHierarchy

CREATE TABLE #ZnodeMediaAttributeValue_DisplayName (MediaCategoryId int,AttributeValue varchar(500))
INSERT INTO #ZnodeMediaAttributeValue_DisplayName
SELECT MediaCategoryId, AttributeValue from ZnodeMediaAttributeValue where MediaAttributeId =@DisplayNameId

CREATE TABLE #ZnodeMediaAttributeValue_Description (MediaCategoryId int,AttributeValue varchar(500))
INSERT INTO #ZnodeMediaAttributeValue_Description
SELECT MediaCategoryId, AttributeValue from ZnodeMediaAttributeValue where MediaAttributeId =@DescriptionId

CREATE TABLE #GetMediaPathDetail
(MediaCategoryId int , MediaPathId int , [Folder] varchar(1000), [FileName] varchar(1000) ,
Size varchar(30) , Height varchar(30) , Width varchar(30) , [Type] varchar(100) ,
   [MediaType] varchar(100), CreatedDate datetime, ModifiedDate datetime,
MediaId int , [Path] varchar(1000), MediaServerPath varchar(1000) ,
MediaServerThumbnailPath varchar(1000) , FamilyCode varchar(100) , CreatedBy int ,
[DisplayName] varchar(5000), [ShortDescription] varchar(1000) ,
[PathName] varchar(1000) , [Version] int
)


Insert into #GetMediaPathDetail  
(MediaCategoryId , MediaPathId , [Folder] , [FileName] ,
Size , Height , Width , Type  ,
   [MediaType] , CreatedDate , ModifiedDate ,
MediaId ,
Path , MediaServerPath ,
MediaServerThumbnailPath , FamilyCode  , CreatedBy ,
[DisplayName] , [ShortDescription] ,
[PathName] , Version )

SELECT
Zmc.MediaCategoryId, ZMPL.MediaPathId, ZMPL.[PathName] [Folder], zM.[FileName],
Zm.Size, Zm.Height, Zm.Width, Zm.Type, Zm.Type [MediaType],
zm.CreatedDate CreatedDate,
zm.ModifiedDate ModifiedDate, Zm.MediaId,
ISNULL(ZMCF.CDNUrl, ZMCF.URL)+ZMSM.ThumbnailFolderName+'\'+zM.Path MediaThumbnailPath,
ISNULL(ZMCF.CDNUrl, ZMCF.URL)+zM.Path  MediaServerPath, zM.Path,
zmafl.FamilyCode FamilyCode,
Zm.CreatedBy,ZMAVD.AttributeValue,ZMAVS.AttributeValue,ZMPL.[PathName], Zm.Version
FROM ZnodeMediaCategory ZMC
LEFT JOIN  ZnodeMediaAttributeFamily zmafl ON(zmc.MediaAttributeFamilyId = zmafl.MediaAttributeFamilyId)
INNER JOIN ZnodeMediaPathLocale ZMPL ON(ZMC.MediaPathId = ZMPL.MediaPathId)
INNER JOIN ZnodeMedia ZM ON(Zm.MediaId = Zmc.MediaId)
  LEFT JOIN  ZnodeMediaConfiguration ZMCF ON (ZMCF.MediaConfigurationId = ZM.MediaConfigurationId AND ZMCF.IsActive = 1)
LEFT JOIN  ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMCF.MediaServerMasterId)
LEFT JOIN  #ZnodeMediaAttributeValue_DisplayName ZMAVD ON ZMAVD.MediaCategoryId = Zmc.MediaCategoryId and  ZMAVD.AttributeValue is not null
LEFT JOIN  #ZnodeMediaAttributeValue_Description ZMAVS ON ZMAVS.MediaCategoryId = Zmc.MediaCategoryId and  ZMAVS.AttributeValue is not null

CREATE INDEX Ind_#GetMediaPathDetail_MediaCategoryId on #GetMediaPathDetail(MediaPathId)

DECLARE @Rows_start VARCHAR(1000), @Rows_end VARCHAR(1000);
SET @MediaPathId =  CASE WHEN @MediaPathId = -1 THEN 1 ELSE @MediaPathId END

SET @Rows_start = CASE
                                   WHEN @Rows >= 1000000
                                   THEN 0
                                   ELSE(@Rows * (@PageNo - 1)) + 1
                               END;
             SET @Rows_end = CASE
                                 WHEN @Rows >= 1000000
                                 THEN @Rows
                                 ELSE @Rows * (@PageNo)
                             END;
             DECLARE @SQL NVARCHAR(MAX);


             SET @Order_BY = REPLACE(@Order_BY, 'MediaPathId', 'Convert(numeric,MediaPathId)');
             SET @Order_BY = REPLACE(@Order_BY, 'Size', 'Convert(numeric,Size)');
             SET @Order_BY = REPLACE(@Order_BY, 'MediaId', 'Convert(numeric,MediaId)');
             SET @Order_BY = REPLACE(@Order_BY, 'CreatedBy', 'Convert(numeric,CreatedBy)');
             SET @Order_BY = REPLACE(@Order_BY, 'MediaCategoryId', 'Convert(numeric,MediaCategoryId)');

SET @SQL = '
SELECT * INTO ##GetMediaPathHierarchy FROM DBO.FN_GetMediaPathHierarchy('+CAST( @MediaPathId  AS VARCHAR(1000))+')'

EXEC SP_executesql @SQL

             SET @SQL = ' DECLARE @V_MediaServerPath  VARCHAR(max) , @V_MediaServerThumbnailPath  VARCHAR(MAx)  


SELECT RANK()OVER(ORDER BY '+CASE
                                                 WHEN @Order_BY IS NULL
                                                      OR @Order_BY = ''
                                                 THEN ''
                                                 ELSE @Order_BY+' ,'
                                          END+'MediaId ) RowId, [MediaCategoryId],[MediaPathId],[Folder],[FileName],[Size],[Height],[Width],
[MediaType],[CreatedDate],[ModifiedDate],[MediaId],[Path],ISNULL(MediaServerPath,'''') AS MediaServerPath,
 ISNULL(MediaServerThumbnailPath,'''') AS MediaServerThumbnailPath,[FamilyCode],[CreatedBy],[ShortDescription],[DisplayName], [Version]
INTO #MediaPathDetail FROM '+CASE
                                                 WHEN @MediaPathId = -1
                                                 THEN ' View_GetAllMediaInRoot '
                                                 ELSE ' #GetMediaPathDetail ZMC '
                                          END+' WHERE 1=1 '+CASE
                                                                   WHEN @WhereClause = ''
                                                                        OR @WhereClause IS NULL
                                                                        OR @WhereClause = '-1'
                                                                   THEN 'AND exists (select top 1 1 from ##GetMediaPathHierarchy Q
where Q.MediaPathId = ZMC.MediaPathId )'
                                                                   ELSE CASE
                                                                            WHEN @MediaPathId = -1
                                                                            THEN ' AND '+@WhereClause
                                                                            ELSE ' AND exists (select top 1 1 from ##GetMediaPathHierarchy Q
where Q.MediaPathId = ZMC.MediaPathId ) and  '+@WhereClause
                                                                        END
                                                               END+' Order BY '+CASE
                                                                                    WHEN @Order_BY IS NULL
                                                                                         OR @Order_BY = ''
                                                                                    THEN ' MediaCategoryId DESC'
                                                                                    ELSE @Order_BY
                                                                                END+' SELECT  @Count=ISNULL(Count(1),0) FROM  #MediaPathDetail  SELECT [MediaCategoryId],[MediaPathId],[Folder],[FileName],[Size],[Height],[Width],
[MediaType],[CreatedDate],[ModifiedDate],[MediaId],[Path],ISNULL(MediaServerPath,'''') AS MediaServerPath, ISNULL(MediaServerThumbnailPath,'''') AS MediaServerThumbnailPath,
[FamilyCode],[CreatedBy],[ShortDescription],[DisplayName],[Version]
FROM #MediaPathDetail
WHERE RowId BETWEEN '+@Rows_start+' AND '+@Rows_end+' Order BY '+CASE
                                                                                   WHEN @Order_BY IS NULL
                                                                                        OR @Order_BY = ''
                                                                                   THEN ' MediaCategoryId DESC '
                                                                                   ELSE @Order_BY
                                                                              END;
     
             EXEC SP_executesql
                  @SQL,
                  N'@Count INT OUT',
                  @Count = @RowsCount OUT;

if object_id('tempdb..#GetMediaPathDetail') is not null
drop table #GetMediaPathDetail

if object_id('tempdb..##GetMediaPathHierarchy') is not null
drop table ##GetMediaPathHierarchy


END TRY
BEGIN CATCH
	DECLARE @Status BIT ;
	SET @Status = 0;
	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
	@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetMediaFolderDetails @WhereClause = '''+ISNULL(@WhereClause,'''''')+''',@Rows='+ISNULL(CAST(@Rows AS
	VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')+',@MediaPathId='+ISNULL(CAST(@WhereClause AS VARCHAR(100)),'''')+',@LocaleId = '+ISNULL(CAST(@LocaleId AS VARCHAR(50)),'''');
             
	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    

	EXEC Znode_InsertProcedureErrorLog
	@ProcedureName = 'Znode_GetMediaFolderDetails',
	@ErrorInProcedure = 'Znode_GetMediaFolderDetails',
	@ErrorMessage = @ErrorMessage,
	@ErrorLine = @ErrorLine,
	@ErrorCall = @ErrorCall;                                
END CATCH;
END;
GO
if exists(select * from sys.procedures where name = 'Znode_DeleteSaveCartLineItem')
	drop proc Znode_DeleteSaveCartLineItem
go
CREATE PROCEDURE [dbo].[Znode_DeleteSaveCartLineItem]
(
	  @OmsSavedCartLineItemId  int,
	  @Status bit OUT 
)
AS 
BEGIN
	
	BEGIN TRY
	SET NOCOUNT ON;

		DECLARE @TBL_DeleteSavecartLineitems TABLE (OmsSavedCartLineItemId int)
		IF OBJECT_ID(N'tempdb..#TBL_ZnodeOmsSavedCartLineItem') IS NOT NULL
			DROP TABLE #TBL_ZnodeOmsSavedCartLineItem

		----Getting date related to @OmsSavedCartLineItemId input parameter into a table
		SELECT OmsSavedCartLineItemId,	ParentOmsSavedCartLineItemId   
			INTO #TBL_ZnodeOmsSavedCartLineItem  from ZnodeOmsSavedCartLineItem  with (NOLOCK)
			where OmsSavedCartLineItemId = @OmsSavedCartLineItemId or ParentOmsSavedCartLineItemId =@OmsSavedCartLineItemId 

		--selecting all the child line items and the parent line Item which has no child item
			INSERT INTO @TBL_DeleteSavecartLineitems
				SELECT OmsSavedCartLineItemId from #TBL_ZnodeOmsSavedCartLineItem
					union
					SELECT ParentOmsSavedCartLineItemId from #TBL_ZnodeOmsSavedCartLineItem
						where not exists (select  OmsSavedCartLineItemId,	ParentOmsSavedCartLineItemId from ZnodeOmsSavedCartLineItem   with (NOLOCK)
								where OmsSavedCartLineItemId != #TBL_ZnodeOmsSavedCartLineItem.OmsSavedCartLineItemId and  ParentOmsSavedCartLineItemId =#TBL_ZnodeOmsSavedCartLineItem.ParentOmsSavedCartLineItemId)
								and ParentOmsSavedCartLineItemId is not null
	BEGIN TRAN DeleteSaveCartLineItem;

			IF exists (select top 1 1 from @TBL_DeleteSavecartLineitems)
			Begin
						DELETE FROM ZnodeOmsPersonalizeCartItem
						WHERE EXISTS
						(
							SELECT TOP 1 1
							FROM @TBL_DeleteSavecartLineitems DeleteSaveCart
							WHERE DeleteSaveCart.OmsSavedCartLineItemId = ZnodeOmsPersonalizeCartItem.OmsSavedCartLineItemId
						);
						DELETE ZnodeOmsSavedCartLineItemDetails
						WHERE EXISTS
						(
							SELECT TOP 1 1
							FROM @TBL_DeleteSavecartLineitems DeleteSaveCart
							WHERE DeleteSaveCart.OmsSavedCartLineItemId = ZnodeOmsSavedCartLineItemDetails.OmsSavedCartLineItemId
		
						);
						DELETE FROM ZnodeOmsSavedCartLineItem 
						WHERE EXISTS
						(
							SELECT TOP 1 1
							FROM @TBL_DeleteSavecartLineitems DeleteSaveCart
							WHERE DeleteSaveCart.OmsSavedCartLineItemId = ZnodeOmsSavedCartLineItem.OmsSavedCartLineItemId
						);

			End	
	COMMIT TRAN DeleteSaveCartLineItem;
	SET @Status = 1;
	
	END TRY
	BEGIN CATCH
		SET @Status = 0;
		DECLARE @Error_procedure varchar(1000)= ERROR_PROCEDURE(), @ErrorMessage nvarchar(max)= ERROR_MESSAGE(), @ErrorLine varchar(100)= ERROR_LINE(), @ErrorCall nvarchar(max)= 'EXEC Znode_DeleteSaveCartLineItem @OmsSavedCartLineItemId = '+CAST(@OmsSavedCartLineItemId AS varchar(max))
		SELECT 0 AS ID, CAST(0 AS bit) AS Status,ERROR_MESSAGE();
		ROLLBACK TRAN DeleteSaveCartLineItem;
		EXEC Znode_InsertProcedureErrorLog @ProcedureName = 'Znode_DeleteSaveCartLineItem', @ErrorInProcedure = @Error_procedure, @ErrorMessage = @ErrorMessage, @ErrorLine = @ErrorLine, @ErrorCall = @ErrorCall;
	END CATCH;
END
GO
if exists(select * from sys.procedures where name = 'Znode_AdminUsers')
	drop proc Znode_AdminUsers
go
CREATE PROCEDURE [dbo].[Znode_AdminUsers]
(	@RoleName		VARCHAR(200),
    @UserName		VARCHAR(200),
    @WhereClause	XML,
    @Rows			INT           = 100,
    @PageNo			INT           = 1,
    @Order_By		VARCHAR(1000) = '',
    @RowCount		INT        = 0 OUT,
	@IsCallOnSite   BIT = 0 ,
	@PortalId		VARCHAR(1000) = 0,
	@IsGuestUser    BIT = 0,
	@ColumnName     dbo.SelectColumnList ReadOnly
)
AS
   /* 
      Summary: List of users with detsils and shows link with ASPNet tables 
      This procedure is used for finding both users and admin users 
      here use three view "View_RoleUsers" for check  @UserName is present or not 
      "View_AdminUserDetail"  this view use for admin users 
      "View_CustomerUserDetail" Use for customer users 
      Unit Testing   
	  SELECT * FROM ZnodeUser 
      DECLARE @EDE INT=0  EXEC Znode_AdminUsers '','admin@znode.com',@WhereClause='',@Order_By='',@PageNo= 1 ,@Rows= 214,@IsCallOnSite='false',@PortalId=0,@RowCount=@EDE OUT  SELECT @EDE
   */
     BEGIN
         BEGIN TRY
            SET NOCOUNT ON;
			
            DECLARE @SQL NVARCHAR(MAX)= '', @PaginationWhereClause VARCHAR(300)= dbo.Fn_GetRowsForPagination(@PageNo, @Rows, ' WHERE RowId');
            
			if OBJECT_ID('tempdb..##CustomerUserAddDetail') is not null
				drop table ##CustomerUserAddDetail

			if OBJECT_ID('tempdb..##View_CustomerUserAddDetail') is not null
				drop table ##View_CustomerUserAddDetail

			IF OBJECT_ID('tempdb..#TBL_RowCount') is not null
				DROP TABLE #TBL_RowCount
			Create table #TBL_RowCount(RowsCount int )
			-----Split where clause XMl 
			CREATE TABLE #WhereColumnList(RowId Int identity, filterName varchar(max), WhereCondition varchar(max))
			insert into #WhereColumnList(filterName,WhereCondition)
			SELECT 
					Tbl.Col.value('key[1]', 'varchar(max)') as filterName,
					Tbl.Col.value('condition[1]', 'varchar(max)') WhereCondition
			FROM   @WhereClause.nodes('//filter') Tbl(Col) 
			----Address column in global search
			declare @AddressGlobalSearch varchar(1000) =''
			declare @GlobalSearch varchar(100) = ''
			
			select @GlobalSearch = substring(WhereCondition,charindex(' like ',WhereCondition), charindex(' OR ',WhereCondition)-charindex(' like ',WhereCondition)) 
			from #WhereColumnList
			where filtername like '%|%'
			and filtername <> ''
			and filterName in ('CityName','CountryName','PostalCode','StateName','CompanyName') 

			

			if isnull(@GlobalSearch,'') <> ''
			begin
				select @AddressGlobalSearch = '('+'CityName '+ @GlobalSearch+' OR '+'CountryName '+ @GlobalSearch+' OR '+'PostalCode '+ @GlobalSearch+' OR '+'StateName '+ @GlobalSearch+' OR '+'CompanyName '+ @GlobalSearch+')'
			end
			else
			begin
				SET @AddressGlobalSearch = ''
			end
			----Global search where clause
			declare @WhereClauseGlobal varchar(1000)=''
			select @WhereClauseGlobal = ISNULL(WhereCondition,'')
			from #WhereColumnList
			where filtername like '%|%'
			and filtername <> ''
			
			----Where clause columns except Address columns
			declare @WhereClause1 varchar(max) = ''
			select @WhereClause1 = COALESCE(@WhereClause1 + '', '') + WhereCondition+' And '
			--case when @WhereClause1 <> ''  then ' And ' else '' end
			from #WhereColumnList a
			where filterName not like '%|%' and
			filterName not in ('CountryName','CityName','StateName','PostalCode','CompanyName')
			and filtername <> ''

			if @WhereClause1 <> ''
			begin
				set @WhereClause1=isnull(substring(@WhereClause1,1,len(@WhereClause1)-3),'')
			end
			else
			begin
				set @WhereClause1 = ''
			end

			----Where clause columns
			declare @AddressColumnWhereClause varchar(max) 
			select @AddressColumnWhereClause = COALESCE(@AddressColumnWhereClause + '', '') + WhereCondition+' And '
			from #WhereColumnList a
			where filterName not like '%|%' and
			filterName in ('CountryName','CityName','StateName','PostalCode','CompanyName')
			and filtername <> ''
			
			if isnull(@AddressColumnWhereClause,'') <> ''
			begin
				set @AddressColumnWhereClause=isnull(substring(@AddressColumnWhereClause,1,len(@AddressColumnWhereClause)-3),'')
            end
			else
			begin
				set @AddressColumnWhereClause = ''
			end

			declare @WhereClauseAll varchar(max) = ''
			select @WhereClauseAll = COALESCE(@WhereClauseAll + '', '') + WhereCondition+' And '
			from #WhereColumnList a
			

			set @WhereClauseAll=isnull(CASE WHEN @WhereClauseAll = '' THEN '' ELSE substring(@WhereClauseAll,1,len(@WhereClauseAll)-3) END ,'')
			-------------- 
			
			IF @PortalId  <> '0' 
			BEGIN 
			    SET @WhereClauseAll = CASE WHEN  @WhereClauseAll = '' THEN ' (PortalId IN ('+@PortalId+') OR PortalId IS NULL) ' ELSE @WhereClauseAll+' AND (PortalId IN ('+@PortalId+') OR PortalId IS NULL) ' END 

				SET @WhereClause1 = CASE WHEN  @WhereClause1 = '' THEN ' (isnull(PortalId,0) IN ('+@PortalId+') OR PortalId IS NULL) ' ELSE @WhereClause1+' AND (isnull(PortalId,0) IN ('+@PortalId+') OR PortalId IS NULL) ' END 
			
			END 

			IF EXISTS ( SELECT TOP 1 1 FROM View_RoleUsers  WHERE Username = @UserName   )  AND @RoleName <> ''  
			-- this check for admin user
       		BEGIN
				SET @SQL = ' SELECT  A.UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,A.CreatedBy,A.CreatedDate,A.ModifiedBy,A.ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId ,CustomerPaymentGUID
				INTO #Cte_AdminUserDetail
				FROM View_AdminUserDetail A
				'+CASE WHEN @PortalId  <> '0' THEN ' INNER JOIN ZnodeUserPortal ZUP ON (ZUP.UserId = A.UserId) 'ELSE '' END  +'	 
				'+dbo.Fn_GetWhereClause(@WhereClauseAll, ' WHERE ')+'
				
				;with Cte_AdminUserDetailRowId AS 
				(
				SELECT UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId,CustomerPaymentGUID ,RANK()Over('+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC')+',UserId DESC) RowId
				FROM  #Cte_AdminUserDetail
				)
					 
				SELECT UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId,CustomerPaymentGUID ,RowId 
				INTO #AccountDetails
				FROM Cte_AdminUserDetailRowId 
					 
				SET @Count= ISNULL((SELECT  Count(1) FROM #AccountDetails ),0)
					 
				SELECT DISTINCT UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId ,CustomerPaymentGUID
				FROM #AccountDetails '+@PaginationWhereClause+' '+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC' );
				EXEC SP_executesql
				@SQL,
				N'@Count INT OUT',
				@Count = @RowCount OUT;

				
			END;
			-- For Customer user
            ELSE   
			BEGIN
				IF @roleName = ''
				BEGIN
					if OBJECT_ID('tempdb..##CustomerUserAddDetail') is not null
					drop table ##CustomerUserAddDetail

					if OBJECT_ID('tempdb..##View_CustomerUserAddDetail') is not null
					drop table ##View_CustomerUserAddDetail
				
					if OBJECT_ID('tempdb..##UserList') is not null
					drop table ##UserList

					CREATE TABLE ##UserList(UserId int,AddressID int)

					declare @UserList varchar(1000)=''

					------To get the list of user having adress column in global search
					if (@AddressGlobalSearch <> '')
					begin
				
					set @UserList = 'select a.UserId, b.AddressID	from ZnodeUserAddress a	inner join ZnodeAddress b on a.AddressId = b.AddressId	where '+@AddressGlobalSearch
					--print @UserList
					insert into ##UserList(UserId, b.AddressID)
					exec (@UserList)
			
					end
					----To get the list of user having adress column in where clause 
					if (@AddressColumnWhereClause <> '')
					begin
					
					set @UserList = 'select a.UserId, b.AddressID	from ZnodeUserAddress a	inner join ZnodeAddress b on a.AddressId = b.AddressId	where '+@AddressColumnWhereClause
					--print @UserList
					insert into ##UserList(UserId,AddressID)
					exec (@UserList)
					
					end

					If @IsGuestUser= 0 
					AND
					NOT Exists (Select filterName from #WhereColumnList where filterName in ('accountid','isaccountcustomer','UserId') and filtername <> '')
					-- Customer List with GuestUsers
					Begin
						SET @SQL = 
							'SELECT a.userId,a.AspNetuserId,a.UserName,a.FirstName,a.MiddleName,a.LastName
							,a.PhoneNumber,
							 a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
							 CONVERT( DATE, a.ModifiedDate) ModifiedDate, 0 RoleId,''''  RoleName,
							 (ISNULL(RTRIM(LTRIM(a.FirstName)), '''')+'' ''+ISNULL(RTRIM(LTRIM(a.MiddleName)), '''')+CASE
							 WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '''') = ''''	THEN ''''
							 ELSE '' ''	END+ISNULL(RTRIM(LTRIM(a.LastName)), ''''))  FullName
							 ,a.AccountId, '''' TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser
							 into ##View_CustomerUserAddDetail
							 FROM ZnodeUser a
							 Where a.AspNetUserId IS NOT NULL
							' 
						
						
						EXEC (@SQL)
					End	
					Else If @IsGuestUser= 1 
					Begin
							SET @SQL='SELECT a.userId,a.AspNetuserId,a.UserName,a.FirstName,a.MiddleName,a.LastName
							,a.PhoneNumber,
							a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
							CONVERT( DATE, a.ModifiedDate) ModifiedDate,ur.RoleId,r.Name RoleName,
							(ISNULL(RTRIM(LTRIM(a.FirstName)), '''')+'' ''+ISNULL(RTRIM(LTRIM(a.MiddleName)), '''')+CASE
							WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '''') = '''' THEN '''' ELSE '' '' END+ISNULL(RTRIM(LTRIM(a.LastName)), '''')) FullName,
							a.AccountId,r.TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser
							into ##View_CustomerUserAddDetail
							FROM ZnodeUser a
							LEFT JOIN AspNetUserRoles ur ON(ur.UserId = a.AspNetUserId)
							LEFT JOIN AspNetRoles r ON(r.Id = ur.RoleId)                       
							LEFT JOIN ZnodePortalAccount ZPA ON(ZPA.AccountId = a.AccountId) 
							WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeUSer ZUQ WHERE ZUQ.UserId = a.UserId AND ZUQ.EmailOptIn = 1 AND ZUQ.AspNetUserId IS NULL )
							AND a.AspNetuserId is null'
						EXEC (@SQL)
					End
					Else IF Exists (Select filterName from #WhereColumnList where filterName in ('UserId') and filtername <> '')
					and  @IsGuestUser= 0   
					-- Customer List for user edit single user 
					Begin
					SET @SQL='SELECT a.userId,a.AspNetuserId,a.UserName,a.FirstName,a.MiddleName,a.LastName
					,a.PhoneNumber, a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
							CONVERT( DATE, a.ModifiedDate) ModifiedDate,ur.RoleId,r.Name RoleName,
							(ISNULL(RTRIM(LTRIM(a.FirstName)), '''')+'' ''+ISNULL(RTRIM(LTRIM(a.MiddleName)), '''')+CASE
							WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '''') = '''' THEN '''' ELSE '' '' END+ISNULL(RTRIM(LTRIM(a.LastName)), '''')) FullName,
							a.AccountId, r.TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser
							into ##View_CustomerUserAddDetail
							FROM ZnodeUser a
							LEFT JOIN ZnodeAccount e ON(e.AccountId = a.AccountId)
							LEFT JOIN AspNetUserRoles ur ON(ur.UserId = a.AspNetUserId)
							LEFT JOIN AspNetRoles r ON(r.Id = ur.RoleId)                       
							LEFT JOIN ZnodePortalAccount ZPA ON(ZPA.AccountId = a.AccountId) 
							WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeUSer ZUQ WHERE ZUQ.UserId = a.UserId AND ZUQ.EmailOptIn = 1 AND ZUQ.AspNetUserId IS NULL )'
						print @SQL
						
						EXEC (@SQL)
					End	
					Else -- Account user List 
					Begin
							SELECT a.userId,a.AspNetuserId,a.UserName,a.PhoneNumber,a.FirstName,a.MiddleName,a.LastName
							,a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
							CONVERT( DATE, a.ModifiedDate) ModifiedDate,ur.RoleId,r.Name RoleName,
						    (ISNULL(RTRIM(LTRIM(a.FirstName)), '')+' '+ISNULL(RTRIM(LTRIM(a.MiddleName)), '')+CASE
							WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '') = '' THEN '' ELSE ' ' END+ISNULL(RTRIM(LTRIM(a.LastName)), '')) FullName,
							a.AccountId, r.TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser
							into ##View_CustomerUserAddDetail
							FROM ZnodeUser a
							LEFT JOIN ZnodeAccount e ON(e.AccountId = a.AccountId)
							LEFT JOIN AspNetUserRoles ur ON(ur.UserId = a.AspNetUserId)
							LEFT JOIN AspNetRoles r ON(r.Id = ur.RoleId)                       
							LEFT JOIN ZnodePortalAccount ZPA ON(ZPA.AccountId = a.AccountId) 
							WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeUSer ZUQ WHERE ZUQ.UserId = a.UserId AND ZUQ.EmailOptIn = 1 AND ZUQ.AspNetUserId IS NULL )
					End
					
					alter table ##View_CustomerUserAddDetail 
					add StoreName varchar(1000), CountryName varchar(1000),CityName varchar(1000),StateName varchar(1000),
					PostalCode varchar(1000), CompanyName varchar(1000), SalesRepUserName varchar(600),SalesRepFullName varchar(1000), PortalId INT 

					IF @PortalId <> '0' 
					BEGIN 
					   UPDATE a SET a.PortalId = b.PortalId
					   FROM ##View_CustomerUserAddDetail a 
					   INNER JOIN ZnodeUserPortal b ON (b.Userid = a.Userid )
					END 

					IF (@WhereClauseAll like '%StoreName%' or @Order_By like '%StoreName%' )
					BEGIN
						CREATE NONCLUSTERED INDEX ##View_CustomerUserAddDetail_UserId
					   ON [dbo].[##View_CustomerUserAddDetail] ([userId])

						update  a set StoreName = CASE WHEN zp.StoreName IS NULL THEN 'ALL' ELSE zp.StoreName END 
						             -- , PortalId = up.PortalId
						from ##View_CustomerUserAddDetail a
						Left join  ZnodeUserPortal up ON(up.UserId = a.UserId)  
						Left JOIN ZnodePortal zp ON (up.PortalId = zp.PortalId)
							
					END
					
					IF (@WhereClauseAll like '%CountryName%' OR @WhereClauseAll like '%CityName%' OR @WhereClauseAll like '%StateName%' OR @WhereClauseAll like '%PostalCode%' OR @WhereClauseAll like '%CompanyName%')
					BEGIN
			 
						update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
						PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName
						from ##View_CustomerUserAddDetail a
						inner join ZnodeAccountAddress ZAA on a.AccountId = ZAA.AccountId
						inner  JOIN ZnodeAddress ZA on ZA.AddressId = ZAA.AddressId
						where isnull(a.AccountId,0)<> 0-- is not null
	 
						update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
						PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName
						from ##View_CustomerUserAddDetail a
						inner join ZnodeUserAddress ZUA on a.UserId = ZUA.UserId
						inner  JOIN ZnodeAddress ZA on ZA.AddressId = zua.AddressId
					END

					set @Rows = @PageNo * @Rows

					SET @SQL = '			
						
						create table #AccountDetail
						(
							UserId int,AspNetuserId nvarchar(200),UserName nvarchar(200),FirstName varchar(200),MiddleName varchar(200),LastName varchar(200),
							PhoneNumber nvarchar(100),Email nvarchar(100),EmailOptIn bit,CreatedBy int,CreatedDate datetime,ModifiedBy int,ModifiedDate datetime,
							RoleId varchar(200),RoleName varchar(200), FullName  varchar(1000),
							StoreName varchar(200),CountryName varchar(200), CityName varchar(200), StateName varchar(200), PostalCode varchar(200), CompanyName varchar(200)
							,AccountId int,SalesRepUserName varchar(200),SalesRepFullName varchar(200) ,RowId int identity 
						) 
						'+
						+' insert into #AccountDetail(UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,FullName,
						StoreName, CountryName, CityName, StateName, PostalCode, CompanyName,AccountId)
						SELECT top '+cast(@Rows as varchar(10))+'UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,FullName,
						StoreName, CountryName, CityName, StateName, PostalCode, CompanyName,AccountId
						FROM ##View_CustomerUserAddDetail where 1=1'+
						dbo.Fn_GetWhereClause(case when @WhereClauseGlobal<>'' and @WhereClause1 <> '' then @WhereClauseGlobal+' And '+@WhereClause1 else @WhereClauseAll end, ' AND ')+
						dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC') + '
			
						Insert Into #TBL_RowCount 
						SELECT count(*)
						FROM ##View_CustomerUserAddDetail where 1=1'+
						dbo.Fn_GetWhereClause(case when @WhereClauseGlobal<>'' and @WhereClause1 <> '' then @WhereClauseGlobal+' And '+@WhereClause1 else @WhereClauseAll end, ' AND ')
						+'
						
						SELECT  UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,FullName,
						StoreName,AccountId,
						CountryName, CityName, StateName, PostalCode, CompanyName, SalesRepUserName, SalesRepFullName
						,Row_Number()Over('+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC')+')  RowNumber
						into ##CustomerUserAddDetail
						FROM #AccountDetail '+@PaginationWhereClause  +' '+ dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC');

						print @SQL
					EXEC (@SQL)

					Select @RowCount= isnull(RowsCount,0) from #TBL_RowCount

					ALTER TABLE ##CustomerUserAddDetail ADD AddressId Int

					------To get data for StoreName
						update  a set StoreName = CASE WHEN zp.StoreName IS NULL THEN 'ALL' ELSE zp.StoreName END 
						from ##CustomerUserAddDetail a
						Left join  ZnodeUserPortal up ON(up.UserId = a.UserId)  
						Left JOIN ZnodePortal zp ON (up.PortalId = zp.PortalId)

	
					----To get data for CountryName, CityName, StateName, PostalCode, CompanyName
					IF (EXISTS(SELECT * FROM @ColumnName where ([StringColumn] LIKE '%CountryName%' OR [StringColumn] LIKE '%CityName%' OR [StringColumn] LIKE '%StateName%' OR [StringColumn] LIKE '%PostalCode%' OR [StringColumn] LIKE '%CompanyName%'))
					OR (@WhereClauseAll like '%CountryName%' OR @WhereClauseAll like '%CityName%' OR @WhereClauseAll like '%StateName%' OR @WhereClauseAll like '%PostalCode%' OR @WhereClauseAll like '%CompanyName%'))
					BEGIN
			 
						update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
						PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName, a.AddressId = ZA.AddressId
						from ##CustomerUserAddDetail a
						inner join ZnodeAccountAddress ZAA on a.AccountId = ZAA.AccountId
						inner  JOIN ZnodeAddress ZA on ZA.AddressId = ZAA.AddressId
						where isnull(a.AccountId,0)<> 0-- is not null
	 
						update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
						PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName, a.AddressId = ZA.AddressId
						from ##CustomerUserAddDetail a
						inner join ZnodeUserAddress ZUA on a.UserId = ZUA.UserId
						inner  JOIN ZnodeAddress ZA on ZA.AddressId = zua.AddressId
					END

					
					----Updating SalesRep for user if any 
					update CUAD
					set CUAD.SalesRepUserName = ZU.UserName, 
					CUAD.SalesRepFullName = (ISNULL(RTRIM(LTRIM(ZU.FirstName)), '')+' '+ISNULL(RTRIM(LTRIM(ZU.MiddleName)), '')
					+CASE
					WHEN ISNULL(RTRIM(LTRIM(ZU.MiddleName)), '') = ''
					THEN ''
					ELSE ' '
					END+ISNULL(RTRIM(LTRIM(ZU.LastName)), '')) 
					from ##CustomerUserAddDetail CUAD
					inner join ZnodeSalesRepCustomerUserPortal SRCUP ON CUAD.UserId = SRCUP.CustomerUserid 
					inner join ZnodeUser ZU ON SRCUP.SalesRepUserId = ZU.UserId

					if ( exists(select * from ##UserList) OR @AddressColumnWhereClause <> '')
					begin
						SELECT UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,
						FullName,
						StoreName,
						CountryName, CityName, StateName, PostalCode, CompanyName, SalesRepUserName, SalesRepFullName
						from ##CustomerUserAddDetail CUAD
						where exists(select * from ##UserList UL where CUAD.UserId = UL.UserId and CUAD.AddressId = UL.AddressID )
						Order by RowNumber
					end
					else
					begin
						SELECT UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,
						FullName,
						StoreName,
						CountryName, CityName, StateName, PostalCode, CompanyName, SalesRepUserName, SalesRepFullName
						from ##CustomerUserAddDetail
						Order by RowNumber
					end
	
					if OBJECT_ID('tempdb..##CustomerUserAddDetail') is not null
					drop table ##CustomerUserAddDetail

					if OBJECT_ID('tempdb..##View_CustomerUserAddDetail') is not null
					drop table ##View_CustomerUserAddDetail
				
				END;
            ELSE
				BEGIN
					SELECT * FROM View_CustomerUserDetail AS VICUD WHERE 1 = 0;
					SET @RowCount = 0;
				END;
            END;			
         END TRY
         BEGIN CATCH
           --SELECT ERROR_MESSAGE()
		   DECLARE @ERROR_PROCEDURE VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_AdminUsers @RoleName = '+@RoleName+' ,@UserName='+@UserName+',@WhereClause='+cast(@WhereClause as varchar(max))+' ,@Rows= '+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_By='+@Order_By+',@RowCount='+CAST(@RowCount AS VARCHAR(50));
            EXEC Znode_InsertProcedureErrorLog
            @ProcedureName    = 'Znode_AdminUsers',
            @ErrorInProcedure = @ERROR_PROCEDURE,
            @ErrorMessage     = @ErrorMessage,
            @ErrorLine        = @ErrorLine,
            @ErrorCall        = @ErrorCall;
         END CATCH;


     END;
GO
if exists(select * from sys.procedures where name = 'Znode_AdminUserDetailsByUserId')
	drop proc Znode_AdminUserDetailsByUserId
go
CREATE PROCEDURE [dbo].[Znode_AdminUserDetailsByUserId]
(	
	@UserId INT
)
AS
/* 
    Summary: SP used to get the User details using UserId
    EXEC [Znode_AdminUserDetailsByUserId] @UserId = 1005
*/
BEGIN
BEGIN TRY
SET NOCOUNT ON;
	if OBJECT_ID('tempdb..#View_CustomerUserAddDetail') is not null
		drop table #View_CustomerUserAddDetail

	SELECT top 1 a.userId,a.AspNetuserId,azu.UserName,a.FirstName,a.MiddleName,a.LastName,a.PhoneNumber,
			a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
			CONVERT( DATE, a.ModifiedDate) ModifiedDate,ur.RoleId,r.Name RoleName,
			CAST(CASE WHEN ISNULL(LockoutEndDateUtc, 0) = 0 THEN  0 ELSE  1 END  AS    BIT) AS IsLock,
			e.Name AccountName,a.AccountId,a.ExternalId,
			CAST(CASE WHEN a.AccountId IS NULL THEN 0 ELSE 1 END AS    BIT) AS IsAccountCustomer,
			a.BudgetAmount,r.TypeOfRole,CAST(CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END AS    BIT) AS IsGuestUser,
			a.CustomerPaymentGUID,
			(ISNULL(RTRIM(LTRIM(a.FirstName)), '')+' '+ISNULL(RTRIM(LTRIM(a.MiddleName)), '')
			+CASE
				WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '') = ''
				THEN ''
				ELSE ' '
			END+ISNULL(RTRIM(LTRIM(a.LastName)), '')) FullName
	,CASE WHEN zp.StoreName IS NULL THEN 'ALL' ELSE zp.StoreName END StoreName,
	CASE WHEN a.AccountId IS NULL THEN up.PortalId ELSE ZPA.PortalId END as PortalId
	into #View_CustomerUserAddDetail
	FROM ZnodeUser a
	left JOIN ASPNetUsers B ON(a.AspNetuserId = b.Id)
	LEFT JOIN ZnodeAccount e ON(e.AccountId = a.AccountId)
	LEFT JOIN AspNetUserRoles ur ON(ur.UserId = a.AspNetUserId)
	LEFT JOIN AspNetRoles r ON(r.Id = ur.RoleId)                       
	LEFT JOIN AspNetZnodeUser azu ON(azu.AspNetZnodeUserId = b.UserName)
	LEFT JOIN ZnodeUserPortal up ON(up.UserId = a.UserId)  
	LEFT JOIN ZnodePortal zp ON (up.PortalId = zp.PortalId)
	LEFT JOIN ZnodePortalAccount ZPA ON(ZPA.AccountId = a.AccountId) 
	WHERE a.UserId = @UserId


	alter table #View_CustomerUserAddDetail 
	Add DepartmentId int, AccountPermissionAccessId int,SalesRepUserName varchar(600),SalesRepId Int,
	PermissionsName varchar(200), PermissionCode varchar(200),SalesRepFullName varchar(1000)

	--To get data for DepartmentId
	update CUD SET DepartmentId = i.DepartmentId
	from #View_CustomerUserAddDetail cud
	INNER JOIN ZnodeDepartmentUser i ON(i.UserId = cud.UserId)

	--To get data for AccountPermissionAccessId
	update CUD SET AccountPermissionAccessId = f.AccountPermissionAccessId
	from #View_CustomerUserAddDetail cud
	INNER JOIN ZnodeAccountUserPermission f ON(f.UserId = cud.UserId)

	----Updating SalesRep for user if any 
	update CUAD
	set CUAD.SalesRepUserName = azu.UserName, SalesRepId = SRCUP.SalesRepUserId,
	CUAD.SalesRepFullName = (ISNULL(RTRIM(LTRIM(ZU.FirstName)), '')+' '+ISNULL(RTRIM(LTRIM(ZU.MiddleName)), '')
								+CASE
									WHEN ISNULL(RTRIM(LTRIM(ZU.MiddleName)), '') = ''
									THEN ''
									ELSE ' '
								END+ISNULL(RTRIM(LTRIM(ZU.LastName)), '')) 
	from #View_CustomerUserAddDetail CUAD
	inner join ZnodeSalesRepCustomerUserPortal SRCUP ON CUAD.UserId = SRCUP.CustomerUserid 
	inner join ZnodeUser ZU ON SRCUP.SalesRepUserId = ZU.UserId
	inner join ASPNetUsers ANU ON(ZU.AspNetuserId = ANU.Id)
	inner join AspNetZnodeUser azu ON(azu.AspNetZnodeUserId = ANU.UserName)

	--To get data for PermissionsName
	update CUD SET PermissionsName = h.PermissionsName, PermissionCode = h.PermissionCode
	from #View_CustomerUserAddDetail cud
    INNER JOIN ZnodeAccountUserPermission f ON(f.UserId = cud.UserId)
    INNER JOIN ZnodeAccountPermissionAccess g ON(g.AccountPermissionAccessId = f.AccountPermissionAccessId)
    INNER JOIN ZnodeAccessPermission h ON(h.AccessPermissionId = g.AccessPermissionId)

	SELECT UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,FullName,PhoneNumber, Email,EmailOptIn,CreatedBy,CreatedDate,
		   ModifiedBy, ModifiedDate,RoleId,RoleName,IsLock,AccountName,AccountId,ExternalId,IsAccountCustomer,BudgetAmount,
		   TypeOfRole,IsGuestUser,CustomerPaymentGUID,StoreName, PortalId,DepartmentId, AccountPermissionAccessId,
		   SalesRepUserName,SalesRepFullName,isnull(SalesRepId,0) as SalesRepId, PermissionsName, PermissionCode
	FROM #View_CustomerUserAddDetail

	if OBJECT_ID('tempdb..#View_CustomerUserAddDetail') is not null
		drop table #View_CustomerUserAddDetail

END TRY
BEGIN CATCH
	DECLARE @ERROR_PROCEDURE VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_AdminUserDetailsByUserId @UserId ='+CAST(@UserId AS VARCHAR(10));
	EXEC Znode_InsertProcedureErrorLog
	@ProcedureName    = 'Znode_AdminUserDetailsByUserId',
	@ErrorInProcedure = @ERROR_PROCEDURE,
	@ErrorMessage     = @ErrorMessage,
	@ErrorLine        = @ErrorLine,
	@ErrorCall        = @ErrorCall;
END CATCH;
END;
GO
if exists(select * from sys.procedures where name = 'Znode_GetCatalogCategoryProducts')
	drop proc Znode_GetCatalogCategoryProducts
go
CREATE PROCEDURE [dbo].[Znode_GetCatalogCategoryProducts]
( 
  @WhereClause      XML,
  @Rows             INT           = 100,
  @PageNo           INT           = 1,
  @Order_BY         VARCHAR(1000) = 'DisplayOrder asc',
  @RowsCount        INT OUT,
  @LocaleId         INT           = 1,
  @PimCategoryId    INT           = 0,
  @PimCatalogId     INT           = 0,
  @IsAssociated     BIT           = 0,
  @AttributeCode   VARCHAR(max) = '',
  @PimCategoryHierarchyId INT =0,
  @PortalId INT=0
  )
AS
   
/*
	   Summary:  Get product List  Catalog / category / respective product list   		   
	   Unit Testing   
	   begin tran
	   declare @p7 int = 0  
	   EXEC Znode_GetCatalogCategoryProducts_r @WhereClause=N'',@Rows=10,@PageNo=1,@Order_By=N'',
	   @RowsCount=@p7 output,@PimCategoryId=11,@PimCatalogId = 1 ,@LocaleId=1 ,@PimCategoryHierarchyId  =2
	   rollback tran
	  
    */

     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY
			 SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
             DECLARE @DefaultAttributeFamily INT= dbo.Fn_GetDefaultPimProductFamilyId(), @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId(), @OrderId INT= 0;
             DECLARE @SQL VARCHAR(MAX), 
					 @PimProductId TransferId,--VARCHAR(MAX)= '', 
					 @PimAttributeId VARCHAR(MAX),
					 @OutPimProductIds VARCHAR(max);
             DECLARE @TransferPimProductId TransferId 

			 DECLARE @tbl_ProductPricingSku TABLE (sku nvarchar(200),RetailPrice numeric(28,6),SalesPrice numeric(28,6),TierPrice numeric(28,6),
			 TierQuantity numeric(28,6),CurrencyCode varchar(200),CurrencySuffix varchar(2000),CultureCode varchar(2000), ExternalId NVARCHAR(2000)
			 ,Custom1 NVARCHAR(MAX), Custom2 NVARCHAR(MAX), Custom3 NVARCHAR(MAX))				

			 CREATE TABLE #TBL_PimMediaAttributeId  (PimAttributeId INT ,AttributeCode VARCHAR(600))
			 INSERT INTO #TBL_PimMediaAttributeId (PimAttributeId,AttributeCode)
			 SELECT PimAttributeId,AttributeCode FROM Dbo.Fn_GetProductMediaAttributeId ()
			  
		
      --       DECLARE @TBL_AttributeDefaultValue TABLE
      --       (
				  --PimAttributeId            INT,
				  --AttributeDefaultValueCode VARCHAR(100),
				  --IsEditable                BIT,
				  --AttributeDefaultValue     NVARCHAR(MAX),
				  --DisplayOrder INT 
      --       );
             create TABLE #TBL_AttributeDetails 
             (
				  PimProductId   INT,
				  AttributeValue NVARCHAR(MAX),
				  AttributeCode  VARCHAR(600),
				  PimAttributeId INT
				  
             );
             DECLARE @FamilyDetails TABLE
             (
				  PimProductId         INT,
				  PimAttributeFamilyId INT,
				  FamilyName           NVARCHAR(3000)
             );
             DECLARE @TBL_AttributeValue TABLE
             (
				  PimCategoryAttributeValueId INT,
				  PimCategoryId               INT,
				  CategoryValue               NVARCHAR(MAX),
				  AttributeCode               VARCHAR(300),
				  PimAttributeId              INT
             );
             IF @Order_By = ''
                 BEGIN
                     SET @Order_By = 'DisplayOrder asc'
                 END;
         			 
             IF @PimCatalogId = 0
                 BEGIN
					INSERT INTO @TransferPimProductId 
                    SELECT PimProductId 
                    FROM ZnodePimCategoryProduct AS ZCP
                    WHERE ZCP.PimCategoryId = @PimCategoryId
					AND PimProductId IS NOT NULL 
                                                   
                 END;
             ELSE
                 BEGIN
				 
                     IF @IsAssociated = 0 
                     BEGIN
						INSERT INTO @TransferPimProductId 
						SELECT DISTINCT PimProductId 
						FROM ZnodePimCategoryProduct AS ZCP
						inner join ZnodePimCategoryHierarchy ZPCH ON ZCP.PimCategoryId = ZPCH.PimCategoryId
						WHERE ZPCH.PimCatalogId = @PimCatalogId
						AND ZPCH.PimCategoryHierarchyId = @PimCategoryHierarchyId
						AND ZCP.PimProductId IS NOT NULL                                     
                     END;
                     ELSE
                         BEGIN
                             IF @IsAssociated = 1 
                             BEGIN
									INSERT INTO @TransferPimProductId 
									SELECT PimProductId
									FROM ZnodePimProduct ZPP
									where not exists(select * from  ZnodePimCategoryProduct AS ZCP
										inner join ZnodePimCategoryHierarchy ZPCH ON ZCP.PimCategoryId = ZPCH.PimCategoryId
										WHERE ZPCH.PimCatalogId = @PimCatalogId
										AND ZPCH.PimCategoryHierarchyId = @PimCategoryHierarchyId
										AND PimProductId IS NOT NULL   and ZPP.PimProductId = ZCP.PimProductId)                                         
									
									SET @IsAssociated = 0;
                             END;
                             ELSE
                             BEGIN
								INSERT INTO @TransferPimProductId 
								SELECT DISTINCT PimProductId 
								FROM ZnodePimCategoryProduct AS ZCP
								inner join ZnodePimCategoryHierarchy ZPCH ON ZCP.PimCategoryId = ZPCH.PimCategoryId
								WHERE ZPCH.PimCatalogId = @PimCatalogId
								AND ZPCH.PimCategoryHierarchyId = @PimCategoryHierarchyId 
								AND PimProductId IS NOT NULL		                         
                             END;
                         END;
                 END;
				
				 IF NOT EXISTS (SELECT TOP 1 1 FROM @TransferPimProductId)
				 BEGIN 
                  INSERT INTO @TransferPimProductId
				  SELECT '0'

				 END 
				 
				 
             DECLARE @ProductIdTable TABLE
             ([PimProductId] INT,
              [CountId]      INT,
              PimCategoryId  INT,
              RowId          INT IDENTITY(1,1)
             );
            DECLARE  @ProductListIdRTR TransferId
	 DECLARE @TAb Transferid 
	 DECLARE @tBL_mainList TABLE (Id INT,RowId INT)
	 --	IF @PimProductId <> ''  OR   @IsCallForAttribute=1
		--BEGIN 
	 SET @IsAssociated = CASE WHEN @IsAssociated = 0 THEN 1  
					 WHEN @IsAssociated = 1 THEN 0 END 
		--END 

	 INSERT INTO @ProductListIdRTR
	 EXEC Znode_GetProductList  @IsAssociated,@TransferPimProductId
	 
	

	 IF CAST(@WhereClause AS NVARCHAR(max))<> N''
	 BEGIN 
	 
	  SET @SQL = 'SELECT distinct PimProductId FROM ##Temp_PimProductId'+CAST(@@SPID AS VARCHAR(500))

	 EXEC Znode_GetFilterPimProductId @WhereClause,@ProductListIdRTR,@localeId
 
      INSERT INTO @TAB 
	  EXEC (@SQL)
	-- SELECT * FROM @TAB
	 END 
	
	
	 IF EXISTS (SELECT Top 1 1 FROM @TAb ) OR CAST(@WhereClause AS NVARCHAR(max)) <> N''
	 BEGIN 

		 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
		 --SET @order_by = REPLACE(@order_by,'DisplayOrder','ProductName')
		 INSERT INTO @TBL_MainList(id,RowId)
		 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @TAb ,@AttributeCode,@localeId,
		 @PimCategoryHierarchyId=@PimCategoryHierarchyId ,@PortalId=@PortalId
	 
		 END 
	 ELSE 
	 BEGIN
	     	 
	 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
	 --SET @order_by = REPLACE(@order_by,'DisplayOrder','ProductName')
	 INSERT INTO @TBL_MainList(id,RowId)
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @ProductListIdRTR ,@AttributeCode,@localeId,
	 @PimCategoryHierarchyId=@PimCategoryHierarchyId ,@PortalId=@PortalId 
	 
	 END 

	
	
			 INSERT INTO @ProductIdTable
             (PimProductId) 
			 SELECT id 
			 FROM @TBL_MainList 
            
			if @PimCategoryHierarchyId = 0
			begin
			 UPDATE @ProductIdTable
               SET
                   PimCategoryId = @PimCategoryId;
			end
			else 
			begin
				UPDATE @ProductIdTable
               SET
                   PimCategoryId = ZPCP.PimCategoryId
				from ZnodePimCategoryHierarchy ZPCH 
				inner join ZnodePimCategoryProduct ZPCP ON ZPCH.PimCategoryId = ZPCP.PimCategoryId
				inner join @ProductIdTable PT ON ZPCP.PimProductId = PT.PimProductId
				where ZPCH.PimCategoryHierarchyId = @PimCategoryHierarchyId
			end
             --SET @PimProductId = SUBSTRING(
             --                             (
             --                                 SELECT ','+CAST(PimProductId AS VARCHAR(100))
             --                                 FROM @ProductIdTable
             --                                 FOR XML PATH('')
             --                             ), 2, 4000);

			 INSERT INTO @PimProductId  ( Id )
			 SELECT PimProductId FROM @ProductIdTable

             SET @PimAttributeId = SUBSTRING((SELECT ','+CAST(PimAttributeId AS VARCHAR(50)) FROM [dbo].[Fn_GetGridPimAttributes]() FOR XML PATH('')), 2, 4000);
             
			 DECLARE @PimAttributeIds TransferId  
			 INSERT INTO @PimAttributeIds
			 SELECT PimAttributeId  
			 FROM [dbo].[Fn_GetProductGridAttributes]()
					  

			 --INSERT INTO @TBL_AttributeDefaultValue (PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder)   
			 --EXEC Znode_GetAttributeDefaultValueLocale @PimAttributeId,@LocaleId;

			 INSERT INTO #TBL_AttributeDetails (PimProductId,AttributeValue,AttributeCode,PimAttributeId)
             EXEC Znode_GetProductsAttributeValue @PimProductId,@PimAttributeId,@localeId;
	
             SET @PimAttributeId = [dbo].[Fn_GetCategoryNameAttributeId]();
			 
             INSERT INTO @TBL_AttributeValue (PimCategoryAttributeValueId,PimCategoryId,CategoryValue,AttributeCode,PimAttributeId)
             EXEC [dbo].[Znode_GetCategoryAttributeValue] @PimCategoryId,@PimAttributeId,@LocaleId;
         

		 
				SELECT TBAI.PimProductId , FNMA.PimAttributeId ,ISNULL(CASE WHEN ZMC.CDNURL = '' THEN NULL ELSE ZMC.CDNURL END,ZMC.URL)+ZMSM.ThumbnailFolderName+'/'+ zm.PATH as AttributeValue
				INTO #ProductMedia
				FROM ZnodeMedia AS ZM
				INNER JOIN ZnodeMediaConfiguration ZMC  ON (ZM.MediaConfigurationId = ZMC.MediaConfigurationId)
				INNER JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMC.MediaServerMasterId)
				INNER JOIN #TBL_AttributeDetails AS TBAI ON (TBAI.AttributeValue  = CAST(ZM.MediaId AS VARCHAR(50)) )
				INNER JOIN  #TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBAI.PimATtributeId)
				
				SELECT PimProductId, PimAttributeId,
					STUFF((SELECT ','+AttributeValue FROM #ProductMedia PM1 
					WHERE PM1.PimProductId = PM.PimProductId AND PM.PimAttributeId = PM1.PimAttributeId FOR XML PATH('')),1,1,'') AS AttributeValue 
				into #Cte_ProductMedia
				FROM #ProductMedia PM
			  
		      UPDATE TBAV SET AttributeValue = CTPM.AttributeVALue
			  FROM #TBL_AttributeDetails TBAV 
			  INNER JOIN #Cte_ProductMedia CTPM ON CTPM.PimProductId = TBAV.PimProductId  AND CTPM.PimAttributeId = TBAV.PimAttributeId 
			  AND CTPM.PimAttributeId = TBAV.PimAttributeId;
			    
             INSERT INTO @FamilyDetails (PimAttributeFamilyId,PimProductId)
             EXEC [dbo].[Znode_GetPimProductAttributeFamilyId] @PimProductId,1;

             UPDATE a
             SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
             INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                  AND LocaleId = @LocaleId);
             UPDATE a
             SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
             INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                  AND LocaleId = @DefaultLocaleId)
             WHERE a.FamilyName IS NULL
                   OR a.FamilyName = '';

			 SELECT zpp.PimProductid AS ProductId,zpp.PimProductId,@PimCatalogId AS PimCatalogId,zpp.PimCategoryId,[ProductName],
			 ProductType,ISNULL(zf.FamilyName, '') AS AttributeFamily,[SKU],[Price],[Quantity],
                    CASE
                        WHEN Piv.[IsActive] IS NULL
                        THEN CAST(0 AS BIT)
                        ELSE CAST(Piv.[IsActive] AS BIT)
                    END AS [IsActive],
                    piv.[ProductImage] ImagePath,
                    [Assortment],
                    TBAV.CategoryValue AS [CategoryName],
                    @LocaleId AS LocaleId,
                    ZPCP.[DisplayOrder],
                    zpp.RowId,
					ZCC.PimCategoryHierarchyId
			 INTO #temp_ProductDetails 
             FROM @ProductIdTable AS zpp
			 INNER JOIN @TBL_MainList TMM ON (TMM.Id = zpp.PimProductId)
                  LEFT JOIN @FamilyDetails AS zf ON(zf.PimProductId = zpp.PimProductId)
                  INNER JOIN
             (
                 SELECT PimProductId,
                        AttributeValue,
                        AttributeCode
                 FROM #TBL_AttributeDetails
             ) TB PIVOT(MAX(AttributeValue) FOR AttributeCode IN([ProductName],
                                                                 [SKU],
                                                                 [Price],
                                                                 [Quantity],
                                                                 [IsActive],
                                                                 [ProductType],
                                                                 [ProductImage],
                                                                 [Assortment],
                                                                 [DisplayOrder])) AS Piv ON(Piv.PimProductId = zpp.PimProductid)
                  LEFT JOIN @TBL_AttributeValue AS TBAV ON(TBAV.PimCategoryId = ZPP.PimCategoryId)
                  LEFT JOIN ZnodePimCategoryProduct AS ZPCP ON(ZPCP.PimProductId = Zpp.PimProductId AND ZPCP.PimCategoryId = Zpp.PimCategoryId)
                  LEFT JOIN ZnodePimCategoryHierarchy AS ZCC ON(ZCC.PimCategoryHierarchyId = @PimCategoryHierarchyId AND ZCC.PimCatalogId = @PimCatalogId)
                  
                  
            ORDER BY zpp.RowId

			DECLARE @SKUS VARCHAR(max) 
			,@userId INT = 0,@Date DATETIME  = dbo.FN_getDate() 

			SELECT @SKUS = COALESCE(@SKUS+',' ,'') + SKU
			FROM #temp_ProductDetails
			 				
			INSERT INTO @tbl_ProductPricingSku		
			EXEC Znode_GetPublishProductPricingBySku 	@SKU=@SKUS, @PortalId= @PortalId,@Userid= @userid ,@currentUtcDate=	@Date
			
			SELECT DISTINCT ProductId, PimProductId	,PimCatalogId,	isnull(PimCategoryId,0) as PimCategoryId,	ProductName	,ProductType,	
			AttributeFamily,	a.SKU	,dbo.Fn_GetPortalCurrencySymbol(@portalId)+CAST(Dbo.Fn_GetDefaultPriceRoundOff(RetailPrice) AS NVARCHAR(max)) Price,	Quantity,	
			IsActive,	ImagePath,	Assortment,	CategoryName,	LocaleId,	DisplayOrder	,RowId,	PimCategoryHierarchyId	
			FROM #temp_ProductDetails a 
			LEFT JOIN @tbl_ProductPricingSku b ON (dbo.FN_TRIM(b.SKU) = a.SKU )
			ORDER BY RowId
					  
     IF EXISTS (SELECT Top 1 1 FROM @TAb )
	 BEGIN 

		  SELECT @RowsCount = (SELECT COUNT(1) FROM @TAb) 
	 END 
	 ELSE 
	 BEGIN
	 		  SELECT @RowsCount =(SELECT COUNT(1) FROM @ProductListIdRTR)   
	 END 
	

         END TRY
         BEGIN CATCH
		    SELECT ERROR_message()
             DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetCatalogCategoryProducts @WhereClause = '''+ISNULL(CAST(@WhereClause AS VARCHAR(MAX)),'''''')+''',@Rows='+ISNULL(CAST(@Rows AS
			VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')+',
			@LocaleId = '+ISNULL(CAST(@LocaleId AS VARCHAR(50)),'''')+',@PimCategoryId='+ISNULL(CAST(@PimCategoryId AS VARCHAR(50)),'''')+',@PimCatalogId='+ISNULL(CAST(@PimCatalogId AS VARCHAR(50)),'''')+',@IsAssociated='+ISNULL(CAST(@IsAssociated AS VARCHAR(50)),'''')+',
			@AttributeCode='''+ISNULL(CAST(@AttributeCode AS VARCHAR(50)),'''''')+''',@PimCategoryHierarchyId='+ISNULL(CAST(@PimCategoryHierarchyId AS VARCHAR(10)),'''');
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetCatalogCategoryProducts',
				@ErrorInProcedure = 'Znode_GetCatalogCategoryProducts',
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO
if exists(select * from sys.procedures where name = 'Znode_AdminUsersEditProfile')
	drop proc Znode_AdminUsersEditProfile
go
CREATE PROCEDURE [dbo].[Znode_AdminUsersEditProfile]
(	
    @LoggedInUserId	int
)
AS
   /* 
      Summary: This SP is used to get User Details
      EXEC Znode_AdminUsersEditProfile @LoggedInUserId = 1006
   */
BEGIN
BEGIN TRY
    SET NOCOUNT ON;

	SELECT UserId,	AspNetUserId, FirstName, LastName,	MiddleName,	CustomerPaymentGUID,BudgetAmount,Email,	PhoneNumber,EmailOptIn,
			ReferralStatus,	ReferralCommission,	ReferralCommissionTypeId,	IsActive,	ExternalId,	IsShowMessage,	CreatedBy,	
			CreatedDate,	ModifiedBy,	ModifiedDate,	Custom1,	Custom2,	Custom3,	Custom4,	Custom5,	IsVerified,
			MediaId,	UserVerificationType,	UserName
	FROM ZnodeUser a
	WHERE a.UserId = @LoggedInUserId 
		
END TRY
BEGIN CATCH
	DECLARE @ERROR_PROCEDURE VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_AdminUsersEditProfile @LoggedInUserId='+cast(@LoggedInUserId as varchar(10));
	EXEC Znode_InsertProcedureErrorLog
	@ProcedureName    = 'Znode_AdminUsersEditProfile',
	@ErrorInProcedure = @ERROR_PROCEDURE,
	@ErrorMessage     = @ErrorMessage,
	@ErrorLine        = @ErrorLine,
	@ErrorCall        = @ErrorCall;
END CATCH;
END;

GO
if exists(select * from sys.procedures where name = 'Znode_GetUserDetailsByUserName')
	drop proc Znode_GetUserDetailsByUserName
go
CREATE PROCEDURE Znode_GetUserDetailsByUserName
(
	@UserName Varchar(600),
	@PortalId Int
)
AS
/* 
    Summary: SP used to get the User details using UserName
    EXEC [Znode_GetUserDetailsByUserName] @UserName = 'danial450@yopmail.com', @PortalId=1,@PublishCatalogId=@PublishCatalogId 
*/
BEGIN
BEGIN TRY
SET NOCOUNT ON;

	SELECT AspNet.AspNetZnodeUserId,AspNet.UserName,AspNet.PortalId, ZU.UserId , ZU.AspNetUserId
	INTO #UserDetail
	FROM AspNetUsers Asp
	INNER JOIN AspNetZnodeUSer AspNet ON Asp.UserName = AspNet.AspNetZnodeUserId
	INNER JOIN ZnodeUser ZU ON Asp.Id = ZU.AspNetUserId
	WHERE AspNet.UserName = @UserName AND (AspNet.PortalId = @PortalId OR AspNet.PortalId IS NULL)

	SELECT AspNetZnodeUserId,UserName,PortalId FROM #UserDetail

	SELECT Roles.Name 
	FROM #UserDetail UD
	INNER JOIN AspNetUserRoles UserRole ON (UserRole.UserId = UD.AspNetUserId)
	INNER JOIN AspNetRoles Roles ON (Roles.Id = UserRole.RoleId)   

	SELECT ZAP.PermissionCode
	from #UserDetail UD
    INNER JOIN ZnodeAccountUserPermission ZAUP ON (ZAUP.UserId = UD.UserId)
    INNER JOIN ZnodeAccountPermissionAccess ZAPA ON (ZAPA.AccountPermissionAccessId = ZAUP.AccountPermissionAccessId)
    INNER JOIN ZnodeAccessPermission ZAP ON(ZAP.AccessPermissionId = ZAPA.AccessPermissionId)

	SELECT Top 1 PublishCatalogId 
	FROM ZnodePortalCatalog WHERE PortalId = @PortalId

END TRY
BEGIN CATCH
	DECLARE @ERROR_PROCEDURE VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetUserDetailsByUserName @UserName ='+CAST(@UserName AS VARCHAR(600))+',@PortalId ='+CAST(@PortalId AS VARCHAR(10));
	EXEC Znode_InsertProcedureErrorLog
	@ProcedureName    = 'Znode_GetUserDetailsByUserName',
	@ErrorInProcedure = @ERROR_PROCEDURE,
	@ErrorMessage     = @ErrorMessage,
	@ErrorLine        = @ErrorLine,
	@ErrorCall        = @ErrorCall;
END CATCH;
END
GO
if exists(select * from sys.procedures where name = 'Znode_GetOrderDetailsByOrderId')
	drop proc Znode_GetOrderDetailsByOrderId
go
CREATE PROCEDURE [dbo].[Znode_GetOrderDetailsByOrderId]
(
	@OmsOrderId	INT
)
AS
/* 
	Summary: This SP is used to get Order Details using OrderId
	EXEC Znode_GetOrderDetailsByOrderId @OmsOrderId = 105557
*/
BEGIN
BEGIN TRY
    SET NOCOUNT ON;

	SELECT OmsOrderId,OrderNumber,IsQuoteOrder,OmsQuoteId
	FROM ZnodeOmsOrder WHERE OmsOrderId = @OmsOrderId

	SELECT OrderDetail.OmsOrderDetailsId, OrderDetail.OmsOrderId, OrderDetail.PortalId AS PortalId, 
		OrderDetail.UserId, OrderDetail.OrderDate, OrderDetail.OmsOrderStateId, OrderDetail.ShippingId, 
		OrderDetail.PaymentTypeId, OrderDetail.BillingFirstName, OrderDetail.BillingLastName, OrderDetail.BillingCompanyName, 
		OrderDetail.BillingStreet1, OrderDetail.BillingStreet2, OrderDetail.BillingCity, OrderDetail.BillingStateCode, 
		OrderDetail.BillingPostalCode, OrderDetail.BillingCountry, OrderDetail.BillingPhoneNumber, OrderDetail.BillingEmailId, 
		OrderDetail.TaxCost, OrderDetail.ShippingCost, OrderDetail.SubTotal, OrderDetail.DiscountAmount, OrderDetail.CurrencyCode, 
		OrderDetail.OverDueAmount, OrderDetail.Total, OrderDetail.ShippingNumber, OrderDetail.TrackingNumber, OrderDetail.CouponCode, 
		OrderDetail.PromoDescription, OrderDetail.ReferralUserId, OrderDetail.PurchaseOrderNumber, OrderDetail.OmsPaymentStateId, 
		OrderDetail.WebServiceDownloadDate, OrderDetail.PaymentSettingId, OrderDetail.PaymentTransactionToken, OrderDetail.ShipDate, 
		OrderDetail.ReturnDate, OrderDetail.AddressId, OrderDetail.PoDocument, OrderDetail.IsActive, OrderDetail.ExternalId, 
		OrderDetail.CreatedBy, OrderDetail.CreatedDate, OrderDetail.ModifiedBy, OrderDetail.ModifiedDate, OrderDetail.CreditCardNumber, 
		OrderDetail.IsShippingCostEdited, OrderDetail.IsTaxCostEdited, OrderDetail.ShippingDifference, OrderDetail.EstimateShippingCost, 
		OrderDetail.TransactionId, OrderDetail.Custom1, OrderDetail.Custom2, OrderDetail.Custom3, OrderDetail.Custom4, OrderDetail.Custom5, 
		OrderDetail.FirstName, OrderDetail.LastName, OrderDetail.CardType,  OrderDetail.CreditCardExpMonth, OrderDetail.CreditCardExpYear, 
		OrderDetail.TotalAdditionalCost, OrderDetail.PaymentDisplayName, OrderDetail.PaymentExternalId, OrderDetail.CultureCode, 
		OrderDetail.DisplayName, OrderDetail.Email, OrderDetail.PhoneNumber
	FROM  dbo.ZnodeOmsOrderDetails AS OrderDetail
	WHERE OrderDetail.OmsOrderId = @OmsOrderId

	SELECT Ship.ShippingId, Ship.ShippingTypeId, Ship.CurrencyId, 
		Ship.ShippingCode, Ship.ShippingName, Ship.HandlingCharge, Ship.HandlingChargeBasedOn, Ship.DestinationCountryCode, Ship.StateCode, 
		Ship.CountyFIPS, Ship.TrackingUrl, Ship.Description, Ship.IsActive, Ship.DisplayOrder, Ship.ZipCode, Ship.CreatedBy, Ship.CreatedDate, 
		Ship.ModifiedBy, Ship.ModifiedDate, Ship.DeliveryTimeframe, Ship.CultureId
	FROM ZnodeShipping Ship 
	WHERE EXISTS(SELECT * FROM ZnodeOmsOrderDetails OrderDetail WHERE OrderDetail.ShippingId = Ship.ShippingId AND OrderDetail.OmsOrderId = @OmsOrderId)


	SELECT OrderLine.OmsOrderLineItemsId, OrderLine.ParentOmsOrderLineItemsId, OrderLine.OrderLineItemRelationshipTypeId, 
		OrderLine.OmsOrderDetailsId, OrderLine.OmsOrderShipmentId, OrderLine.RmaReasonForReturnId, OrderLine.Sku, OrderLine.ProductName, 
		OrderLine.Description, OrderLine.Quantity, OrderLine.Price, OrderLine.Weight, OrderLine.DownloadLink, OrderLine.DiscountAmount, 
		OrderLine.ShipSeparately, OrderLine.ShipDate, OrderLine.ReturnDate, OrderLine.ShippingCost, OrderLine.PromoDescription, 
		OrderLine.TransactionNumber, OrderLine.PaymentStatusId, OrderLine.TrackingNumber, OrderLine.IsAutoGeneratedTracking, 
		OrderLine.OrderLineItemStateId, OrderLine.IsRecurringBilling, OrderLine.RecurringBillingPeriod, OrderLine.RecurringBillingCycles, 
		OrderLine.RecurringBillingFrequency, OrderLine.RecurringBillingAmount, OrderLine.AppliedPromo, OrderLine.CouponsApplied, 
		OrderLine.ExternalId, OrderLine.IsActive, OrderLine.CreatedBy, OrderLine.CreatedDate, OrderLine.ModifiedBy, OrderLine.ModifiedDate, 
		OrderLine.AutoAddonSKU, OrderLine.IsShippingReturn, OrderLine.PartialRefundAmount, OrderLine.Custom1, OrderLine.Custom2, OrderLine.Custom3, 
		OrderLine.Custom4, OrderLine.Custom5, OrderLine.GroupId
    FROM  dbo.ZnodeOmsOrderLineItems AS OrderLine
    WHERE Exists(select * from ZnodeOmsOrderDetails OrderDetail Where OrderLine.OmsOrderDetailsId = OrderDetail.OmsOrderDetailsId 
	     AND OrderDetail.IsActive = 1 AND OrderDetail.OmsOrderId = @OmsOrderId) 
	AND OrderLine.IsActive = 1
    ORDER BY OrderLine.OmsOrderLineItemsId ASC

	SELECT OrderState.OmsOrderStateId, OrderState.OrderStateName, OrderState.IsShowToCustomer, 
		OrderState.IsAccountStatus, OrderState.DisplayOrder, OrderState.Description, OrderState.IsEdit, OrderState.IsSendEmail, OrderState.IsOrderState, 
		OrderState.IsOrderLineItemState, OrderState.CreatedBy, OrderState.CreatedDate, OrderState.ModifiedBy, OrderState.ModifiedDate
	FROM dbo.ZnodeOmsOrderState AS OrderState
	WHERE EXISTS(SELECT * FROM dbo.ZnodeOmsOrderLineItems AS OrderLine WHERE OrderLine.IsActive = 1 AND 
				 Exists(select * from ZnodeOmsOrderDetails OrderDetail Where OrderLine.OmsOrderDetailsId = OrderDetail.OmsOrderDetailsId 
				 AND OrderDetail.IsActive = 1 AND OrderDetail.OmsOrderId = @OmsOrderId) 
				 AND OrderLine.OrderLineItemStateId = OrderState.OmsOrderStateId)
END TRY
BEGIN CATCH
	DECLARE @ERROR_PROCEDURE VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetOrderDetailsByOrderId @OmsOrderId='+cast(@OmsOrderId as varchar(10));
	EXEC Znode_InsertProcedureErrorLog
	@ProcedureName    = 'Znode_GetOrderDetailsByOrderId',
	@ErrorInProcedure = @ERROR_PROCEDURE,
	@ErrorMessage     = @ErrorMessage,
	@ErrorLine        = @ErrorLine,
	@ErrorCall        = @ErrorCall;
END CATCH;
END
GO
if exists(select * from sys.procedures where name = 'Znode_GetPortalGlobalAttributeValue')
	drop proc Znode_GetPortalGlobalAttributeValue
go
CREATE    PROCEDURE [dbo].[Znode_GetPortalGlobalAttributeValue]
(
    @EntityName       nvarchar(200) = 0,
    @GlobalEntityValueId   INT = 0,
	@LocaleCode       VARCHAR(100) = '',
    @GroupCode  nvarchar(200) = null,
	@SelectedValue bit = 0
)
AS
/*
	 Summary :- This procedure is used to get the Attribute and EntityValue attribute value as per filter pass 
	 Unit Testing 
	 BEGIN TRAN
	 EXEC [Znode_GetGlobalEntityAttributeValue] 'Store',1
	 ROLLBACK TRAN

*/	 
     BEGIN
 BEGIN TRY
 declare @EntityValue nvarchar(200), @LocaleId int
 
	DECLARE @GlobalFamilyId int
	SET  @GlobalFamilyId = (select FM.GlobalAttributeFamilyId from ZnodeGlobalEntity GE inner join  ZnodeGlobalEntityFamilyMapper FM
	on GE.GlobalEntityId = FM.GlobalEntityId
	where GE.EntityName =  @EntityName and  (FM.GlobalEntityValueId = @GlobalEntityValueId or FM.GlobalEntityValueId is null))

  DECLARE @V_MediaServerThumbnailPath VARCHAR(4000);
          SET @V_MediaServerThumbnailPath =
         (
             SELECT ISNULL(CASE WHEN CDNURL = '' THEN NULL ELSE CDNURL END,URL)+ZMSM.ThumbnailFolderName+'/'  
             FROM ZnodeMediaConfiguration ZMC 
			 INNER JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMC.MediaServerMasterId)
		     WHERE IsActive = 1 
         );


 Select @EntityValue=StoreName from ZnodePortal
 Where PortalId=@GlobalEntityValueId

            Declare	@EntityAttributeList as	table  (GlobalEntityId int,EntityName nvarchar(300),EntityValue nvarchar(max),
			GlobalAttributeGroupId int,GlobalAttributeId int,AttributeTypeId int,AttributeTypeName nvarchar(300),
			 AttributeCode nvarchar(300) ,IsRequired bit,IsLocalizable bit,AttributeName  nvarchar(300) , HelpDescription nvarchar(max)
			,AttributeGroupDisplayOrder int,DisplayOrder int) 
			 
			Declare @EntityAttributeValidationList  as	table  
			( GlobalAttributeId int, ControlName nvarchar(300), ValidationName nvarchar(300),SubValidationName nvarchar(300),
			 RegExp nvarchar(300), ValidationValue nvarchar(300),IsRegExp Bit)

			Declare	@EntityAttributeValueList as	table  (GlobalAttributeId int,AttributeValue nvarchar(max),
			GlobalAttributeValueId int,GlobalAttributeDefaultValueId int,AttributeDefaultValueCode nvarchar(300),
			AttributeDefaultValue nvarchar(300),
			MediaId int,MediaPath nvarchar(300),IsEditable bit,DisplayOrder int )



			Declare	@EntityAttributeDefaultValueList as	table  (GlobalAttributeDefaultValueId int,GlobalAttributeId int,
			AttributeDefaultValueCode nvarchar(300),AttributeDefaultValue nvarchar(300),RowId int,IsEditable bit,DisplayOrder int , IsDefault bit )

			set @LocaleId = (select top 1 LocaleId from ZnodeLocale where Code = @LocaleCode)

			IF ISnull(@GroupCode, '') = '' 
            Begin
			
				insert into @EntityAttributeList
					(	GlobalEntityId ,EntityName ,EntityValue ,
					GlobalAttributeGroupId ,GlobalAttributeId ,AttributeTypeId ,AttributeTypeName ,
					AttributeCode  ,IsRequired ,IsLocalizable ,AttributeName,HelpDescription ,AttributeGroupDisplayOrder,DisplayOrder ) 
					SELECT qq.GlobalEntityId,qq.EntityName,@EntityValue EntityValue,ww.GlobalAttributeGroupId,
					c.GlobalAttributeId,c.AttributeTypeId,q.AttributeTypeName,c.AttributeCode,c.IsRequired,
					c.IsLocalizable,f.AttributeName,c.HelpDescription,FGM.AttributeGroupDisplayOrder,c.DisplayOrder
				 FROM dbo.ZnodeGlobalEntity AS qq
					  INNER JOIN dbo.ZnodeGlobalAttributeFamily AS w ON qq.GlobalEntityId = w.GlobalEntityId
					  INNER JOIN dbo.ZnodeGlobalFamilyGroupMapper AS FGM ON FGM.GlobalAttributeFamilyId = w.GlobalAttributeFamilyId
					  INNER JOIN dbo.ZnodeGlobalAttributeGroupMapper AS ww ON ww.GlobalAttributeGroupId = FGM.GlobalAttributeGroupId
					  INNER JOIN dbo.ZnodeGlobalAttribute AS c ON ww.GlobalAttributeId = c.GlobalAttributeId
					  INNER JOIN dbo.ZnodeAttributeType AS q ON c.AttributeTypeId = q.AttributeTypeId
					  INNER JOIN dbo.ZnodeGlobalAttributeLocale AS f ON c.GlobalAttributeId = f.GlobalAttributeId
					  Where qq.EntityName=@EntityName AND ( f.LocaleId = isnull(@LocaleId, 0 ) or isnull(@LocaleId,0) = 0 )
					  and w.GlobalAttributeFamilyId = @GlobalFamilyId
			
			END 
			Else 
			Begin
				insert into @EntityAttributeList
				(	GlobalEntityId ,EntityName ,EntityValue ,
				GlobalAttributeGroupId ,GlobalAttributeId ,AttributeTypeId ,AttributeTypeName ,
				AttributeCode  ,IsRequired ,IsLocalizable ,AttributeName,HelpDescription ,AttributeGroupDisplayOrder,DisplayOrder ) 
				SELECT qq.GlobalEntityId,qq.EntityName,@EntityValue EntityValue,ww.GlobalAttributeGroupId,
				c.GlobalAttributeId,c.AttributeTypeId,q.AttributeTypeName,c.AttributeCode,c.IsRequired,
				c.IsLocalizable, f.AttributeName, c.HelpDescription,FGM.AttributeGroupDisplayOrder,c.DisplayOrder
				FROM dbo.ZnodeGlobalEntity AS qq
					INNER JOIN dbo.ZnodeGlobalAttributeFamily AS w ON qq.GlobalEntityId = w.GlobalEntityId
					  INNER JOIN dbo.ZnodeGlobalFamilyGroupMapper AS FGM ON FGM.GlobalAttributeFamilyId = w.GlobalAttributeFamilyId
					  INNER JOIN dbo.ZnodeGlobalAttributeGroupMapper AS ww ON ww.GlobalAttributeGroupId = FGM.GlobalAttributeGroupId
					  INNER JOIN dbo.ZnodeGlobalAttribute AS c ON ww.GlobalAttributeId = c.GlobalAttributeId
					  INNER JOIN dbo.ZnodeAttributeType AS q ON c.AttributeTypeId = q.AttributeTypeId
					  INNER JOIN dbo.ZnodeGlobalAttributeLocale AS f ON c.GlobalAttributeId = f.GlobalAttributeId
					  Where qq.EntityName=@EntityName AND ( f.LocaleId = isnull(@LocaleId, 0 ) or isnull(@LocaleId,0) = 0 )
					  and w.GlobalAttributeFamilyId = @GlobalFamilyId				  
					 AND exists( select 1 from ZnodeGlobalAttributeGroup g where ww.GlobalAttributeGroupId = g.GlobalAttributeGroupId and g.GroupCode = @GroupCode )
			
			End 


		  INSERT INTO @EntityAttributeValidationList
		  (GlobalAttributeId,ControlName , ValidationName ,SubValidationName ,
		RegExp, ValidationValue,IsRegExp)

		 Select aa.GlobalAttributeId,i.ControlName,i.Name AS ValidationName,j.ValidationName AS SubValidationName,
		j.RegExp,k.Name AS ValidationValue,CAST(CASE WHEN j.RegExp IS NULL THEN 0 ELSE 1 END AS BIT) AS IsRegExp
		fROM @EntityAttributeList aa
		  inner  JOIN dbo.ZnodeGlobalAttributeValidation AS k ON k.GlobalAttributeId = aa.GlobalAttributeId
          inner  JOIN dbo.ZnodeAttributeInputValidation AS i ON k.InputValidationId = i.InputValidationId
          LEFT  JOIN dbo.ZnodeAttributeInputValidationRule AS j ON k.InputValidationRuleId = j.InputValidationRuleId

		  insert into @EntityAttributeValueList
		  (GlobalAttributeId,GlobalAttributeValueId,GlobalAttributeDefaultValueId,AttributeValue ,MediaId,MediaPath)
		  Select DISTINCT GlobalAttributeId,aa.PortalGlobalAttributeValueId,bb.GlobalAttributeDefaultValueId,
		  case when bb.MediaPath is not null then  @V_MediaServerThumbnailPath+bb.MediaPath--+'~'+convert(nvarchar(10),bb.MediaId) 
		  else bb.AttributeValue end,		  
		  bb.MediaId,bb.MediaPath
		  from  dbo.ZnodePortalGlobalAttributeValue aa
		   inner join ZnodePortalGlobalAttributeValueLocale bb ON bb.PortalGlobalAttributeValueId = aa.PortalGlobalAttributeValueId 
		  Where  PortalId=@GlobalEntityValueId

		

		  

		  update aa
		  Set AttributeDefaultValueCode= h.AttributeDefaultValueCode,
              AttributeDefaultValue=g.AttributeDefaultValue,
			  GlobalAttributeDefaultValueId=g.GlobalAttributeDefaultValueId,
			  AttributeValue=case when aa.AttributeValue is  null then h.AttributeDefaultValueCode else aa.AttributeValue end,
			  IsEditable = ISNULL(h.IsEditable, 1),DisplayOrder = h.DisplayOrder
		  from  @EntityAttributeValueList aa
		  inner JOIN dbo.ZnodeGlobalAttributeDefaultValue h ON h.GlobalAttributeDefaultValueId = aa.GlobalAttributeDefaultValueId                                       
          inner JOIN dbo.ZnodeGlobalAttributeDefaultValueLocale g ON h.GlobalAttributeDefaultValueId = g.GlobalAttributeDefaultValueId
          
		  insert into @EntityAttributeDefaultValueList
		  (GlobalAttributeDefaultValueId,GlobalAttributeId,AttributeDefaultValueCode,
			AttributeDefaultValue ,RowId ,IsEditable ,DisplayOrder ,IsDefault )
		  Select  h.GlobalAttributeDefaultValueId, aa.GlobalAttributeId,h.AttributeDefaultValueCode,g.AttributeDefaultValue,0,ISNULL(h.IsEditable, 1),
		  h.DisplayOrder, h.IsDefault 
		  from  @EntityAttributeList aa
		  inner JOIN dbo.ZnodeGlobalAttributeDefaultValue h ON h.GlobalAttributeId = aa.GlobalAttributeId
          inner JOIN dbo.ZnodeGlobalAttributeDefaultValueLocale g ON h.GlobalAttributeDefaultValueId = g.GlobalAttributeDefaultValueId
		  
		  if not exists (Select 1 from @EntityAttributeList )
			Begin
			insert into @EntityAttributeList
			(	GlobalEntityId ,EntityName ,EntityValue ,
			GlobalAttributeGroupId ,GlobalAttributeId ,AttributeTypeId ,AttributeTypeName ,
			AttributeCode  ,IsRequired ,IsLocalizable ,AttributeName,HelpDescription  ) 
			SELECT qq.GlobalEntityId,qq.EntityName,@EntityValue EntityValue,0 GlobalAttributeGroupId,
			0 GlobalAttributeId,0 AttributeTypeId,''AttributeTypeName,''AttributeCode,0 IsRequired,
			0 IsLocalizable,'' AttributeName,'' HelpDescription
			FROM dbo.ZnodeGlobalEntity AS qq
			 Where qq.EntityName=@EntityName 
			End

				

			SELECT  GlobalEntityId,EntityName,EntityValue,GlobalAttributeGroupId,
			AA.GlobalAttributeId,AttributeTypeId,AttributeTypeName,AttributeCode,IsRequired,
			IsLocalizable,AttributeName,ControlName,ValidationName,SubValidationName,RegExp,
			ValidationValue,cast(isnull(IsRegExp,0) as bit)  IsRegExp,
			HelpDescription,AttributeValue,GlobalAttributeValueId,bb.GlobalAttributeDefaultValueId,
			aab.AttributeDefaultValueCode,
			aab.AttributeDefaultValue,isnull(aab.RowId,0)   RowId,cast(isnull(aab.IsEditable,0) as bit)   IsEditable
			,bb.MediaId,AA.DisplayOrder,isnull(aab.IsDefault,0) IsDefault
			fROM @EntityAttributeList AA				
			left join @EntityAttributeDefaultValueList aab on aab.GlobalAttributeId=AA.GlobalAttributeId	
			left join @EntityAttributeValidationList vl on vl.GlobalAttributeId=aa.GlobalAttributeId			
			LEFT JOIN @EntityAttributeValueList BB ON BB.GlobalAttributeId=AA.GlobalAttributeId		 
		    and ( (aab.GlobalAttributeDefaultValueId=bb.GlobalAttributeDefaultValueId	)
			or  ( bb.MediaId is not null and isnull(vl.ValidationName,'')='IsAllowMultiUpload'  and bb.GlobalAttributeDefaultValueId is null )
			or  ( bb.MediaId is  null and  bb.GlobalAttributeDefaultValueId is null ))
			order by  aa.DisplayOrder, aab.DisplayOrder

			SELECT 1 AS ID,CAST(1 AS BIT) AS Status;       
		  END TRY
         BEGIN CATCH
		 SELECT ERROR_MESSAGE()
             DECLARE @Status BIT ;
		  SET @Status = 0;
		  DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(),
		   @ErrorLine VARCHAR(100)= ERROR_LINE(),
		    @ErrorCall NVARCHAR(MAX)= null       			 
          SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		 
          EXEC Znode_InsertProcedureErrorLog
            @ProcedureName = 'Znode_GetGlobalEntityValueAttributeValues',
            @ErrorInProcedure = @Error_procedure,
            @ErrorMessage = @ErrorMessage,
            @ErrorLine = @ErrorLine,
            @ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO
if exists(select * from sys.procedures where name = 'Znode_GetPublishSingleProductJson')
	drop proc Znode_GetPublishSingleProductJson
go
CREATE PROCEDURE [dbo].[Znode_GetPublishSingleProductJson]
(
	 @PublishCatalogId INT = 0 
	,@VersionId       VARCHAR(50) = 0 
	,@PimProductId    TransferId Readonly 
	,@UserId		  INT = 0 
	,@TokenId nvarchar(max)= ''	
	,@LocaleIds TransferId READONLY
	,@PublishStateId INT = 0  
	,@RevisionType varchar(50)
	,@Status bit = 0 OutPut
	
)
AS


--Declare @PimProductId TransferId 
--insert into @PimProductId  select 230147
-- EXEC Znode_GetPublishSingleProductJson  @PublishCatalogId = 0 ,@VersionId= 0 ,@PimProductId =@PimProductId, @UserId=2 ,@RevisionType ='Production'


BEGIN 
BEGIN TRY 
 SET NOCOUNT ON 

EXEC Znode_InsertUpdatePimAttributeJson 1 
EXEC Znode_InsertUpdateCustomeFieldJson 1
EXEC Znode_InsertUpdateAttributeDefaultValueJson 1 
				
Select ZPLPD.PimParentProductId, ZPLPD.PimProductId, ZPLPD.PimAttributeId, ZPAVL.AttributeValue as SKU
into #LinkProduct
FROM ZnodePimLinkProductDetail ZPLPD 
INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId = ZPLPD.PimProductId)
INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId
WHERE exists(select * from ZnodePimAttribute ZPA where ZPA.PimAttributeId = ZPAV.PimAttributeId and ZPA.AttributeCode = 'SKU')
and exists(select * from @PimProductId pp where ZPLPD.PimParentProductId = pp.Id)

select * into #PimProductId from @PimProductId

create index Idx_#PimProductId_Id on #PimProductId(Id)
 IF OBJECT_ID('tempdb..#Cte_BrandData') is not null
 BEGIN 
	DROP TABLE #Cte_BrandData
 END 
 

 IF OBJECT_ID('tempdb..#ProductIds') is not null
 BEGIN 
	DROP TABLE #ProductIds
 END 

			Create Table #ProductIds (PimProductId int, PublishProductId  int )
			
			--DECLARE @PimProductAttributeJson TABLE(PimAttributeJsonId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )
			CREATE TABLE #PimProductAttributeJson (PimAttributeJsonId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )
			DECLARE @PimDefaultValueLocale  TABLE (PimAttributeDefaultJsonId INT  PRIMARY KEY ,PimAttributeDefaultValueId INT ,LocaleId INT ) 
			DECLARE @ProductNamePimAttributeId INT = dbo.Fn_GetProductNameAttributeId(),@DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId(),@LocaleId INT = 0 
			,@SkuPimAttributeId  INT =  dbo.Fn_GetProductSKUAttributeId() , @IsActivePimAttributeId INT =  dbo.Fn_GetProductIsActiveAttributeId()
			DECLARE @GetDate DATETIME =dbo.Fn_GetDate()
			DECLARE @TBL_LocaleId  TABLE (RowId INT IDENTITY(1,1) PRIMARY KEY  , LocaleId INT )

			DECLARE @DomainUrl varchar(max) = (select TOp 1 URL FROM ZnodeMediaConfiguration WHERE IsActive =1)

			INSERT INTO @TBL_LocaleId (LocaleId)
			SELECT  LocaleId
			FROM ZnodeLocale MT
			WHERE IsActive = 1
			AND (EXISTS (SELECT TOP 1 1  FROM @LocaleIds RT WHERE RT.Id = MT.LocaleId )
			OR NOT EXISTS (SELECT TOP 1 1 FROM @LocaleIds )) 
	
			-----to update link products newly addded and deleted from PIM
			delete ZPAP
			from ZnodePublishAssociatedProduct ZPAP
			where ZPAP.IsLink = 1
			AND not exists(select * from ZnodePimLinkProductDetail ZPPD where ZPAP.ParentPimProductId = ZPPD.PimParentProductId AND ZPAP.PimProductId = ZPPD.PimProductId)
			and exists(select * from #PimProductId PP where PP.Id = ZPAP.ParentPimProductId )

			insert into ZnodePublishAssociatedProduct(PimCatalogId,ParentPimProductId,PimProductId,PublishStateId,IsConfigurable,IsBundle,IsGroup,IsAddOn,IsLink,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			select distinct ZPCH.PimCatalogId, ZPLPD.PimParentProductId, ZPLPD.PimProductId, @PublishStateId, 0, 0, 0, 0, 1, ZPLPD.DisplayOrder, @UserId,@GetDate ,@UserId , @GetDate
			from ZnodePimLinkProductDetail ZPLPD
			INNER JOIN ZnodePimCategoryProduct ZPCP ON ZPLPD.PimParentProductId = ZPCP.PimProductId
			INNER JOIN ZnodePimCategoryHierarchy ZPCH ON ZPCP.PimCategoryId = ZPCH.PimCategoryId
			where exists(select * from #PimProductId PP where PP.Id = ZPLPD.PimParentProductId )
			and not exists(select * from ZnodePublishAssociatedProduct ZPACP where ZPCH.PimCatalogId = ZPACP.PimCatalogId and ZPLPD.PimParentProductId = ZPACP.ParentPimProductId AND ZPLPD.PimProductId = ZPACP.PimProductId  )
		
			-----to update config products newly addded and deleted from PIM
			delete ZPAP
			from ZnodePublishAssociatedProduct ZPAP
			where ZPAP.IsConfigurable = 1
			AND exists(select * from ZnodePimProductTypeAssociation ZPPD where ZPAP.ParentPimProductId = ZPPD.PimParentProductId )
			and exists(select * from #PimProductId PP where PP.Id = ZPAP.ParentPimProductId )

			insert into ZnodePublishAssociatedProduct(PimCatalogId,ParentPimProductId,PimProductId,PublishStateId,IsConfigurable,IsBundle,IsGroup,IsAddOn,IsLink,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate, IsDefault)
			select distinct ZPCH.PimCatalogId, ZPLPD.PimParentProductId, ZPLPD.PimProductId, @PublishStateId, 1, 0, 0, 0, 0, ZPLPD.DisplayOrder, @UserId,@GetDate ,@UserId , @GetDate, ZPLPD.IsDefault
			from ZnodePimProductTypeAssociation ZPLPD
			INNER JOIN ZnodePimCategoryProduct ZPCP ON ZPLPD.PimParentProductId = ZPCP.PimProductId
			INNER JOIN ZnodePimCategoryHierarchy ZPCH ON ZPCP.PimCategoryId = ZPCH.PimCategoryId
			where exists(select * from #PimProductId PP where PP.Id = ZPLPD.PimParentProductId )
			and not exists(select * from ZnodePublishAssociatedProduct ZPACP where ZPCH.PimCatalogId = ZPACP.PimCatalogId and ZPLPD.PimParentProductId = ZPACP.ParentPimProductId AND ZPLPD.PimProductId = ZPACP.PimProductId  )
			--group by ZPCH.PimCatalogId, ZPLPD.PimParentProductId, ZPLPD.PimProductId, ZPLPD.DisplayOrder, ZPLPD.IsDefault
			-------

			DECLARE @Counter INT =1 ,@maxCountId INT = (SELECT max(RowId) FROM @TBL_LocaleId ) 

			CREATE TABLE #TBL_PublishCatalogId (PublishCatalogId INT,PublishProductId INT,PimProductId  INT   , VersionId INT ,LocaleId INT, PriceListId INT , PortalId INT ,MaxSmallWidth NVARCHAr(max)  )
			CREATE INDEX idx_#TBL_PublishCatalogIdPimProductId on #TBL_PublishCatalogId(PimProductId)
			CREATE INDEX idx_#TBL_PublishCatalogIdPimPublishCatalogId on #TBL_PublishCatalogId(PublishCatalogId)

			INSERT INTO #TBL_PublishCatalogId 
			SELECT Distinct ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId, 0,0 ,
			(SELECT TOP 1 PriceListId FROM ZnodePriceListPortal NT 
			INNER JOIN ZnodePimCatalog ZPC on ZPC.PortalId=NT.PortalId  
			ORDER BY NT.Precedence ASC ) ,TY.PortalId,
			(SELECT TOP 1  MAX(MaxSmallWidth) FROM ZnodeGlobalMediaDisplaySetting)
			FROM ZnodePublishProduct ZPP 
			LEFT JOIN ZnodePortalCatalog TY ON (TY.PublishCatalogId = ZPP.PublishCatalogId)
			WHERE (EXISTS (SELECT TOP 1 1 FROM #PimProductId SP WHERE SP.Id = ZPP.PimProductId  
			AND  (@PublishCatalogId IS NULL OR @PublishCatalogId = 0 ))
			OR  (ZPP.PublishCatalogId = @PublishCatalogId ))
			And Exists 
			(Select TOP 1 1 from ZnodePublishVersionEntity ZPCP  where ZPCP.ZnodeCatalogId  = ZPP.PublishCatalogId AND ZPCP.IsPublishSuccess =1 )

			Insert into #ProductIds (PimProductId,PublishProductId) Select distinct PimProductId,PublishProductId from #TBL_PublishCatalogId  

             Create TABLE #TBL_ZnodeTempPublish (PimProductId INT , AttributeCode VARCHAR(300) ,AttributeValue NVARCHAR(max) ) 			
			 DECLARE @TBL_AttributeVAlueLocale TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT,LocaleId INT ,AttributeValue Nvarchar(1000) )


			 INSERT INTO @TBL_AttributeValueLocale (PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId ,LocaleId ,AttributeValue )
			 SELECT VIR.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId,VIR.LocaleId, ''
			 FROM View_LoadManageProductInternal VIR
			 INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = VIR.PimProductId)
			 UNION ALL 
			 SELECT VIR.PimProductId,PimAttributeId,PimProductAttributeMediaId,ZPDE.LocaleId , ''
			 FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimProductAttributeMedia ZPDE ON (ZPDE.PimAttributeValueId = VIR.PimAttributeValueId )
			 WHERE EXISTS (SELECT TOP 1 1 FROM #ProductIds ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
			 Union All 
			 SELECT VIR.PimProductId,VIR.PimAttributeId,ZPDVL.PimAttributeDefaultValueLocaleId,ZPDVL.LocaleId ,ZPDVL.AttributeDefaultValue
			   FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1 )
			 INNER JOIN ZnodePimAttributeDefaultValue ZPADV ON ZPADV.PimAttributeId = D.PimAttributeId
			 INNER JOIN ZnodePimAttributeDefaultValueLocale ZPDVL   on (ZPADV.PimAttributeDefaultValueId = ZPDVL.PimAttributeDefaultValueId)
			 WHERE ( ZPDVL.LocaleId = @DefaultLocaleId OR ZPDVL.LocaleId = @LocaleId )
			 AND EXISTS(SELECT TOP 1 1 FROM #ProductIds ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
			 Union All 
			 SELECT VIR.PimProductId,VIR.PimAttributeId,'','' ,''
			 FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1 )
			 WHERE  EXISTS(SELECT TOP 1 1 FROM #ProductIds ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
		
				--insert INTO #ZnodePrice
				SELECT RetailPrice,SalesPrice,ZC.CurrencyCode,ZCC.CultureCode ,ZCC.Symbol CurrencySuffix,TYU.PublishProductId ,isnull(ZPC1.IsAllowIndexing,0) as IsAllowIndexing
				into #ZnodePrice
				FROM ZnodePrice ZP 
				INNER JOIN ZnodePriceList ZPL ON (ZPL.PriceListId = ZP.PriceListId)
				INNER JOIN ZnodeCurrency ZC oN (ZC.CurrencyId = ZPL.CurrencyId )
				INNER JOIN ZnodeCulture ZCC ON (ZCC.CultureId = ZPL.CultureId)
				INNER JOIN ZnodePublishProductDetail TY ON (TY.SKU = ZP.SKU ) 
				INNER JOIN ZnodePublishProduct TYU ON (TYU.PublishProductId = TY.PublishProductId)
				INNER JOIN ZnodePublishCatalog ZPC ON (TYU.PublishCatalogId = ZPC.PublishCatalogId)
				INNER JOIN ZnodePimCatalog ZPC1 ON (ZPC.PimCatalogId = ZPC1.PimCatalogId)
				WHERE EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId TYUR WHERE TYUR.PriceListId = ZPL.PriceListId AND TYUR.PublishCatalogId = TYU.PublishCatalogId
				AND TYU.PublishProductId = TYUR.PublishProductId)
				AND TY.LocaleId = dbo.Fn_GetDefaultLocaleId()
				AND EXISTS (SELECT TOP 1 1 FROM ZnodePriceListPortal ZPLP 
				INNER JOIN ZnodePimCatalog ZPC on ZPC.PortalId=ZPLP.PortalId WHERE ZPLP.PriceListId=ZP.PriceListId )
				
				--insert INTO #ProductSKU
				SELECT ZCSD.SEOUrl , ZCDL.SEODescription,ZCDL.SEOKeywords ,ZCDL.SEOTitle, TYU.PublishProductId ,isnull(ZPC1.IsAllowIndexing,0) as IsAllowIndexing
				INTO #ProductSKU
				FROM ZnodeCMSSEODetail ZCSD 
				INNER JOIN ZnodeCMSSEODetailLocale ZCDL ON (ZCDL.CMSSEODetailId = ZCSD.CMSSEODetailId)
				INNER JOIN ZnodePublishProductDetail TY ON (TY.SKU = ZCSD.SEOCode AND ZCDL.LocaleId = TY.LocaleId) 
				INNER JOIN ZnodePublishProduct TYU ON (TYU.PublishProductId = TY.PublishProductId)
				INNER JOIN ZnodePublishCatalog ZPC ON (TYU.PublishCatalogId = ZPC.PublishCatalogId)
				INNER JOIN ZnodePimCatalog ZPC1 ON (ZPC.PimCatalogId = ZPC1.PimCatalogId)
				WHERE CMSSEOTypeId = (SELECT TOP 1 CMSSEOTypeId FROM ZnodeCMSSEOType WHERE Name = 'Product') 
				AND EXISTS (SELECT TOP 1 1  FROM #TBL_PublishCatalogId TYUR WHERE  TYUR.PublishCatalogId = TYU.PublishCatalogId
				AND TYU.PublishProductId = TYUR.PublishProductId)
				AND ZCDL.LocaleId = dbo.Fn_GetDefaultLocaleId()
				and ZCSD.PortalId = isnull(ZPC1.PortalId,0)

			
				--insert INTO #ProductImages
				SELECT  TUI.PublishCatalogId, TYU.PublishProductId , @DomainUrl +'Catalog/'  + CAST(Max(ZPC1.PortalId) AS VARCHAr(100)) + '/'+ CAST(Isnull(Max(TUI.MaxSmallWidth),'') AS VARCHAR(100)) + '/' + Isnull(RT.MediaPath,'') AS ImageSmallPath    
				,isnull(ZPC1.IsAllowIndexing,0) as IsAllowIndexing
				INTO #ProductImages
				FROM ZnodePimAttributeValue ZPAV 
				INNER JOIN ZnodePublishProduct TYU ON (TYU.PimProductId  = ZPAV.PimProductId)
				INNER JOIN ZnodePimProductAttributeMedia  RT ON ( RT.PimAttributeValueId = ZPAV.PimAttributeValueId )
				INNER JOIN #TBL_PublishCatalogId TUI ON (TUI.PublishProductId = TYU.PublishProductId AND TUI.PublishCatalogId = TYU.PublishCatalogId
						 )--AND  TUI.LocaleId = dbo.Fn_GetDefaultLocaleId()
				INNER JOIN ZnodePublishCatalog ZPC ON (TYU.PublishCatalogId = ZPC.PublishCatalogId)
				INNER JOIN ZnodePimCatalog ZPC1 ON (ZPC.PimCatalogId = ZPC1.PimCatalogId)
				WHERE  RT.LocaleId = dbo.Fn_GetDefaultLocaleId()
				AND ZPAV.PimAttributeId = (SELECT TOp 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'ProductImage')
				group by TUI.PublishCatalogId, TYU.PublishProductId ,isnull(RT.MediaPath,''),isnull(ZPC1.IsAllowIndexing,0) 
		  -- end
	  
WHILE @Counter <= @maxCountId
BEGIN
 SET @LocaleId = (SELECT TOP 1 LocaleId FROM @TBL_LocaleId WHERE RowId = @Counter)

  INSERT INTO #PimProductAttributeJson 
  SELECT PimAttributeJsonId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeJSON
  WHERE LocaleId = @LocaleId
  
  INSERT INTO #PimProductAttributeJson 
  SELECT PimAttributeJsonId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeJSON ZPAX
  WHERE ZPAX.LocaleId = @DefaultLocaleId  
  AND NOT EXISTS (SELECT TOP 1 1 FROM #PimProductAttributeJson ZPAXI WHERE ZPAXI.PimAttributeId = ZPAX.PimAttributeId )

  INSERT INTO @PimDefaultValueLocale
  SELECT PimAttributeDefaultJsonId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultJson
  WHERE localeId = @LocaleId

  INSERT INTO @PimDefaultValueLocale 
   SELECT PimAttributeDefaultJsonId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultJson ZX
  WHERE localeId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM @PimDefaultValueLocale TRTR WHERE TRTR.PimAttributeDefaultValueId = ZX.PimAttributeDefaultValueId)
  
 
  --DECLARE @TBL_AttributeVAlue TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT  )
  --DECLARE @TBL_CustomeFiled TABLE (PimCustomeFieldJsonId INT ,CustomCode VARCHAR(300),PimProductId INT ,LocaleId INT )
  CREATE TABLE #TBL_CustomeFiled  (PimCustomeFieldJsonId INT ,CustomCode VARCHAR(300),PimProductId INT ,LocaleId INT )
  CREATE TABLE #TBL_AttributeVAlue (PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT  )



  INSERT INTO #TBL_CustomeFiled (PimCustomeFieldJsonId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldJsonId,RTR.PimProductId ,RTR.LocaleId,CustomCode
  FROM ZnodePimCustomeFieldJson RTR 
  INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = RTR.PimProductId)
  WHERE RTR.LocaleId = @LocaleId
 

  INSERT INTO #TBL_CustomeFiled (PimCustomeFieldJsonId,PimProductId ,LocaleId,CustomCode)
  SELECT  Distinct  PimCustomeFieldJsonId,ITR.PimProductId ,ITR.LocaleId,CustomCode
  FROM ZnodePimCustomeFieldJson ITR
  INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = ITR.PimProductId)
  WHERE ITR.LocaleId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM #TBL_CustomeFiled TBL  WHERE ITR.CustomCode = TBL.CustomCode AND ITR.PimProductId = TBL.PimProductId)
  

    INSERT INTO #TBL_AttributeVAlue (PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId )
    SELECT Distinct  PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId
	FROM @TBL_AttributeVAlueLocale
    WHERE LocaleId = @LocaleId

    
	INSERT INTO #TBL_AttributeVAlue(PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId )
	SELECT VI.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId
	FROM @TBL_AttributeVAlueLocale VI 
    WHERE VI.LocaleId = @DefaultLocaleId 
	AND NOT EXISTS (SELECT TOP 1 1 FROM #TBL_AttributeVAlue  CTE WHERE CTE.PimProductId = VI.PimProductId AND CTE.PimAttributeId = VI.PimAttributeId )
 
	------------Facet Merging Patch --------------
	IF OBJECT_ID('tempdb..#PimChildProductFacets') is not null
	BEGIN 
		DROP TABLE #PimChildProductFacets
	END 

	IF OBJECT_ID('tempdb..#PimAttributeDefaultXML') is not null
	BEGIN 
		DROP TABLE #PimAttributeDefaultXML
	END
	----Getting parent facets data
	Select  ZPPADV.PimAttributeDefaultValueId, ZPAV_Parent.PimAttributeValueId, ZPPADV.LocaleId
	Into #PimChildProductFacets
	from ZnodePimAttributeValue ZPAV_Parent
	inner join ZnodePimProductAttributeDefaultValue ZPPADV ON ZPAV_Parent.PimAttributeValueId = ZPPADV.PimAttributeValueId 
	where exists(select * from #ProductIds ZPPC where ZPAV_Parent.PimProductId = ZPPC.PimProductId )

	----Getting child facets for merging	
	insert into #PimChildProductFacets	  
	Select distinct ZPPADV.PimAttributeDefaultValueId, ZPAV_Parent.PimAttributeValueId, ZPPADV.LocaleId
	from ZnodePimAttributeValue ZPAV_Parent
	inner join ZnodePimProductTypeAssociation ZPPTA ON ZPAV_Parent.PimProductId = ZPPTA.PimParentProductId
	inner join ZnodePimAttributeValue ZPAV_Child ON ZPPTA.PimProductId = ZPAV_Child.PimProductId AND ZPAV_Parent.PimAttributeId = ZPAV_Child.PimAttributeId
	inner join ZnodePimProductAttributeDefaultValue ZPPADV ON ZPAV_Child.PimAttributeValueId = ZPPADV.PimAttributeValueId 
	where exists(select * from ZnodePimFrontendProperties ZPFP where ZPAV_Parent.PimAttributeId = ZPFP.PimAttributeId and ZPFP.IsFacets = 1)
	and exists(select * from #ProductIds ZPPC where ZPAV_Parent.PimProductId = ZPPC.PimProductId )
	and not exists(select * from ZnodePimProductAttributeDefaultValue ZPPADV1 where ZPAV_Parent.PimAttributeValueId = ZPPADV1.PimAttributeValueId 
		            and ZPPADV1.PimAttributeDefaultValueId = ZPPADV.PimAttributeDefaultValueId )

	----Merging childs facet attribute Default value XML for parent
	select  ZPADX.DefaultValueJson, ZPPADV.PimAttributeValueId, ZPPADV.LocaleId
	into #PimAttributeDefaultXML
	from #PimChildProductFacets ZPPADV		  
	inner join ZnodePimAttributeDefaultJson ZPADX ON ( ZPPADV.PimAttributeDefaultValueId = ZPADX.PimAttributeDefaultValueId )--AND ZPPADV.LocaleId = ZPADX.LocaleId)
	INNER JOIN @PimDefaultValueLocale GH ON (GH.PimAttributeDefaultJsonId = ZPADX.PimAttributeDefaultJsonId)
	------------Facet Merging Patch --------------   

	 IF OBJECT_ID('tempdb..#View_LoadManageProductInternal') is not null
	 BEGIN 
		DROP TABLE #View_LoadManageProductInternal
	 END 

	SELECT a.PimProductId ,b.AttributeValue as AttributeValue , b.LocaleId  ,a.PimAttributeId,c.AttributeCode ,b.ZnodePimAttributeValueLocaleId
	into #View_LoadManageProductInternal
	FROM ZnodePimAttributeValue a 
	INNER JOIN  ZnodePimAttributeValueLocale b ON ( b.PimAttributeValueId = a.PimAttributeValueId )
	INNER JOIN ZnodePimAttribute c ON ( c.PimAttributeId=a.PimAttributeId )
	INNER JOIN ZnodePimAttributeJSON c1   ON (c1.PimAttributeId = a.PimAttributeId )
	INNER JOIN #PimProductAttributeJson b1 ON (b1.PimAttributeJsonId = c1.PimAttributeJsonId )
	INNER JOIN #TBL_AttributeVAlue CTE ON (Cte.PimAttributeId = a.PimAttributeId AND Cte.ZnodePimAttributeValueLocaleId = b.ZnodePimAttributeValueLocaleId)
	UNION ALL
	SELECT a.PimProductId,ZPPATAV.AttributeValue AS AttributeValue  
	,ZPPATAV.LocaleId,a.PimAttributeId,c.AttributeCode  ,ZPPATAV.PimProductAttributeTextAreaValueId
	FROM ZnodePimAttributeValue a 
	INNER JOIN ZnodePimProductAttributeTextAreaValue ZPPATAV ON (ZPPATAV.PimAttributeValueId = a.PimAttributeValueId )
	INNER JOIN ZnodePimAttribute c ON ( c.PimAttributeId=a.PimAttributeId )
	INNER JOIN ZnodePimAttributeJSON c1   ON (c1.PimAttributeId = a.PimAttributeId )
	INNER JOIN #PimProductAttributeJson b1 ON (b1.PimAttributeJsonId = c1.PimAttributeJsonId )
	INNER JOIN #TBL_AttributeVAlue CTE ON (Cte.PimAttributeId = a.PimAttributeId AND Cte.ZnodePimAttributeValueLocaleId = ZPPATAV.PimProductAttributeTextAreaValueId)
	
	INSERT INTO #TBL_ZnodeTempPublish  
		SELECT  a.PimProductId,a.AttributeCode , 
			JSON_MODIFY (JSON_MODIFY (Json_Query( c.AttributeJSON  ) , '$.AttributeValues' ,  
			ISNULL(a.AttributeValue,'') ) ,'$.SelectValues',Json_Query('[]'))
			AS 'AttributeValue'
		FROM #View_LoadManageProductInternal a 
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = a.PimAttributeId )
		INNER JOIN #PimProductAttributeJson b ON (b.PimAttributeJsonId = c.PimAttributeJsonId )
		INNER JOIN #TBL_AttributeVAlue CTE ON (Cte.PimAttributeId = a.PimAttributeId AND Cte.ZnodePimAttributeValueLocaleId = a.ZnodePimAttributeValueLocaleId)
	UNION ALL 
			SELECT  a.PimProductId,c.AttributeCode , 
			JSON_MODIFY (JSON_MODIFY (Json_Query( c.AttributeJSON  ) , '$.AttributeValues' ,  
			ISNULL(TAVL.AttributeValue,'') ) ,'$.SelectValues',Json_Query('[]'))
			AS 'AttributeValue'
		FROM ZnodePimAttributeValue  a 
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = a.PimAttributeId )
		INNER JOIN #PimProductAttributeJson b ON (b.PimAttributeJsonId = c.PimAttributeJsonId )
		INNER JOIN ZnodePImAttribute ZPA  ON (ZPA.PimAttributeId = a.PimAttributeId)
		INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = a.PimProductId)
		Inner JOIN @TBL_AttributeVAlueLocale TAVL ON  (c.PimAttributeId = TAVL.PimAttributeId  and ZPP.PimProductId = TAVL.PimProductId )
		WHERE ZPA.IsPersonalizable = 1 
		AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodePimAttributeValueLocale q WHERE q.PimAttributeValueId = a.PimAttributeValueId) 
	UNION ALL 
		SELECT THB.PimProductId,THB.CustomCode,
		--'<Attributes><AttributeEntity>'+CustomeFiledJson +'</AttributeEntity></Attributes>' 
		JSON_MODIFY (Json_Query( CustomeFiledJson ) ,'$.SelectValues',Json_Query('[]')) 
		FROM ZnodePimCustomeFieldJson THB 
		INNER JOIN #TBL_CustomeFiled TRTE ON (TRTE.PimCustomeFieldJsonId = THB.PimCustomeFieldJsonId)
		UNION ALL 
		SELECT ZPAV.PimProductId,c.AttributeCode,
			JSON_MODIFY (JSON_MODIFY (c.AttributeJson,'$.AttributeValues',''), '$.SelectValues',
			Isnull((SELECT 
			Isnull(JSON_VALUE(DefaultValueJson, '$.Code'),'') Code 
			,Isnull(JSON_VALUE(DefaultValueJson, '$.LocaleId'),0) LocaleId
			,IsNull(JSON_VALUE(DefaultValueJson, '$.Value'),'') Value
			,IsNull(JSON_VALUE(DefaultValueJson, '$.AttributeDefaultValue'),'') AttributeDefaultValue
			,Isnull(JSON_VALUE(DefaultValueJson, '$.DisplayOrder'),0) DisplayOrder
			,Isnull(JSON_VALUE(DefaultValueJson, '$.IsEditable'),'false') IsEditable
			,Isnull(JSON_VALUE(DefaultValueJson, '$.SwatchText'),'') SwatchText
			,Isnull(JSON_VALUE(DefaultValueJson, '$.Path'),'') Path
			FROM #PimAttributeDefaultXML ZPADV
			WHERE (ZPADV.PimAttributeValueId = ZPAV.PimAttributeValueId) For JSON Auto 
			),'[]') 
		)  AttributeValue
		FROM ZnodePimAttributeValue ZPAV  With (NoLock)
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
		INNER JOIN #PimProductAttributeJson b ON (b.PimAttributeJsonId = c.PimAttributeJsonId )
		INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
		WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL 
		WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
	UNION ALL 
		SELECT DISTINCT  ZPAV.PimProductId,c.AttributeCode,
			JSON_MODIFY (JSON_MODIFY (Json_Query( c.AttributeJson  ) , '$.AttributeValues',  
			ISNULL((Select stuff( 
			(SELECT ','+ZPPG.MediaPath 
			FROM ZnodePimProductAttributeMedia ZPPG INNER JOIN  #TBL_AttributeVAlue TBLV ON 
			(	TBLV.PimProductId=  ZPAV.PimProductId AND TBLV.PimAttributeId = ZPAV.PimAttributeId )
			WHERE ZPPG.PimProductAttributeMediaId = TBLV.ZnodePimAttributeValueLocaleId
			FOR XML PATH(''),Type).value('.', 'varchar(max)'), 1, 1, '')),'') ) ,'$.SelectValues',Json_Query('[]'))   
			AS 'AttributeEntity'
		FROM ZnodePimAttributeValue ZPAV 
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
		INNER JOIN #PimProductAttributeJson b ON (b.PimAttributeJsonId = c.PimAttributeJsonId )
		INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
		WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeMedia ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
	UNION ALL 
		SELECT ZPLP.PimParentProductId ,c.AttributeCode, 
			JSON_MODIFY( JSON_Modify(c.AttributeJson , '$.AttributeValues' , 
			ISNULL(SUBSTRING((SELECT ','+cast( LP.SKU as varchar(600)) 
							 FROM #LinkProduct LP
							 WHERE LP.PimParentProductId = ZPLP.PimParentProductId 
							 AND LP.PimAttributeId = ZPLP.PimAttributeId
		FOR XML PATH ('') ),2,4000),'')),'$.SelectValues',Json_Query('[]'))   
	
		FROM ZnodePimLinkProductDetail ZPLP 
		INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPLP.PimParentProductId)
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = ZPLP.PimAttributeId )
		INNER JOIN #PimProductAttributeJson b ON (b.PimAttributeJsonId = c.PimAttributeJsonId )
		GROUP BY ZPLP.PimParentProductId , ZPP.PublishProductId  ,ZPLP.PimAttributeId,c.AttributeCode,c.AttributeJson,ZPP.PublishCatalogId
	UNION ALL 
		SELECT ZPAV.PimProductId,'DefaultSkuForConfigurable' ,
			JSON_MODIFY( JSON_Modify(
			REPLACE(REPLACE (c.AttributeJson,'ProductType','DefaultSkuForConfigurable'),'Product Type','Default Sku For Configurable'),
			'$.AttributeValues' , 
			ISNULL(SUBSTRING((SELECT ','+CAST(adl.AttributeValue AS VARCHAR(50)) 
		FROM ZnodePimAttributeValue ad 
		inner join ZnodePimAttributeValueLocale adl on ad.PimattributeValueId = adl.PimAttributeValueId
		INNER JOIN ZnodePimProductTypeAssociation yt ON (yt.PimProductId = ad.PimProductId)
		WHERE EXISTS (select * from #ProductIds p where yt.PimParentProductId = p.PimProductId)
		AND Ad.PimAttributeId =(select top 1 PimAttributeId from ZnodePimAttribute zpa where zpa.AttributeCode = 'SKU')
		AND yt.PimParentProductId = ZPAV.PimProductId 
		ORDER BY yt.DisplayOrder , yt.PimProductTypeAssociationId ASC FOR XML PATH ('') ),2,4000),'')),'$.SelectValues',Json_Query('[]'))   
		FROM ZnodePimAttributeValue ZPAV  
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
		INNER JOIN #ProductIds ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
		WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL 
		INNER JOIN ZnodePimAttributeDefaultValue dr ON (dr.PimAttributeDefaultValueId = ZPADVL.PimAttributeDefaultValueId)
		WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId
		AND dr.AttributeDefaultValueCode= 'ConfigurableProduct' 
		)
		AND EXISTS (select * from #PimProductAttributeJson b where b.PimAttributeJsonId = c.PimAttributeJsonId)
		AND c.AttributeCode = 'ProductType' 
	UNION ALL
		SELECT DISTINCT  UOP.PimProductId,c.AttributeCode,
			JSON_MODIFY (JSON_MODIFY (c.AttributeJson,'$.AttributeValues',''), '$.SelectValues',
			Isnull((SELECT  DISTINCT 
			Isnull(JSON_VALUE(AA.DefaultValueJson, '$.Code'),'') Code 
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.LocaleId'),0) LocaleId
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.Value'),'') Value
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.AttributeDefaultValue'),'') AttributeDefaultValue
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.DisplayOrder'),0) DisplayOrder
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.IsEditable'),'false') IsEditable
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.SwatchText'),'') SwatchText
			,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.Path'),'') Path 
			,ISNULL(ZPA.DisplayOrder,0)  AS VariantDisplayOrder 
			,ISNULL(ZPAVL_SKU.AttributeValue,'')   AS VariantSKU 
			--,Isnull(ZM.Path,'') 
		,'' AS VariantImagePath 
		FROM ZnodePimAttributeDefaultJson AA 
		INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId )
		INNER JOIN ZnodePimAttributeValue ZPAV1 ON (ZPAV1.PimAttributeValueId= ZPADV.PimAttributeValueId )
		-- check/join for active variants 
		INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId =ZPAV1.PimProductId)
		INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON (ZPAV.PimAttributevalueid = ZPAVL.PimAttributeValueId AND ZPAVL.AttributeValue = 'True')
		INNER JOIN ZnodePimProductTypeAssociation YUP ON (YUP.PimProductId = ZPAV1.PimProductId)
		-- SKU
		INNER JOIN ZnodePimAttributeValue ZPAV_SKU ON(YUP.PimProductId = ZPAV_SKU.PimProductId)
		INNER JOIN ZnodePimAttributeValueLocale ZPAVL_SKU ON (ZPAVL_SKU.PimAttributeValueId = ZPAV_SKU.PimAttributeValueId)
		LEFT JOIN ZnodePimAttribute ZPA ON (ZPA.PimattributeId = ZPAV1.PimAttributeId)
		WHERE (YUP.PimParentProductId  = UOP.PimProductId AND ZPAV1.pimAttributeId = UOP.PimAttributeId )
		-- Active Variants
		AND ZPAV.PimAttributeId = (SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'IsActive')
		-- VariantSKU
		AND ZPAV_SKU.PimAttributeId = (SELECT PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'SKU')
		For JSON Auto 
		),'[]')) 
				
		--</AttributeEntity></Attributes>' 
		FROM ZnodePimConfigureProductAttribute UOP 
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = UOP.PimAttributeId )
		WHERE  exists(select * from #TBL_PublishCatalogId PPCP1 where UOP.PimProductId = PPCP1.PimProductId )
		AND EXISTS (select * from #PimProductAttributeJson b where b.PimAttributeJsonId = c.PimAttributeJsonId)

			-------------configurable attribute 
			---------------------------------------------------------------------
			
			If (@RevisionType like '%Preview%'  OR @RevisionType like '%Production%'  ) 
				Delete from ZnodePublishProductEntity where SKU  in (select SKU from #TBL_PublishCatalogId
				A inner join ZnodePublishProductDetail B on A.PublishProductId   =B.PublishProductId   )
				AND LocaleId = @LocaleId
				AND VersionId in (SELECT VersionId FROM ZnodePublishVersionEntity where RevisionType = 'PREVIEW')
			If (@RevisionType like '%Production%' OR @RevisionType = 'None')
				Delete from ZnodePublishProductEntity where SKU  in (select SKU from #TBL_PublishCatalogId
				A inner join ZnodePublishProductDetail B on A.PublishProductId   =B.PublishProductId   )
				AND LocaleId = @LocaleId
				AND VersionId in (SELECT VersionId FROM ZnodePublishVersionEntity where RevisionType = 'PRODUCTION')

			Insert into ZnodePublishProductEntity (
					VersionId, --1
					IndexId, --2 
					ZnodeProductId,ZnodeCatalogId, --3
					SKU,LocaleId, --4 
					Name,ZnodeCategoryIds, --5
					IsActive, -- 6 
					Attributes, -- 7 
					Brands, -- 9
					CategoryName, --9
					CatalogName,DisplayOrder, --10 
					RevisionType,AssociatedProductDisplayOrder, --11
					ProductIndex,--12
					SalesPrice,RetailPrice,CultureCode,CurrencySuffix,CurrencyCode,SeoDescription,SeoKeywords,SeoTitle,SeoUrl,ImageSmallPath,SKULower --13 
					)
 			SELECT distinct ZPVE.VersionId, --1 
			CAST(ISNULL(ZPCP.ProductIndex,1) AS VARCHAr(100)) + CAST(ISNULL(ZPC.PublishCategoryId,'')  AS VARCHAR(50))  + 
			CAST(Isnull(ZPP.PublishCatalogId ,'')  AS VARCHAR(50)) + CAST( @LocaleId AS VARCHAR(50)) IndexId, --2 
			CAST(ZPP.PublishProductId AS VARCHAR(50)) PublishProductId,CAST(ZPP.PublishCatalogId  AS VARCHAR(50)) PublishCatalogId,  --3 
			CAST(ISNULL(ZPPDFG.SKU ,'') AS NVARCHAR(2000)) SKU,CAST( Isnull(@LocaleId ,'') AS VARCHAR(50)) LocaleId, -- 4 
			CAST(isnull(ZPPDFG.ProductName,'') AS NVARCHAR(2000) )  ProductName ,CAST(ISNULL(ZPCD.PublishCategoryId,'')  AS VARCHAR(50)) PublishCategoryId  -- 5 
			,CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50)) IsActive , --6 
			'[' +
				(Select STUFF((SELECT distinct ','+ AttributeValue from #TBL_ZnodeTempPublish TY WHERE TY.PimProductId = ZPP.PimProductId   
				FOR XML Path ('')) ,1,1,'')  ) 
			+ ']' xmlvalue,  -- 7 
			'[]' Brands  --8 
			,CAST(isnull(PublishCategoryName,'') AS NVARCHAR(2000)) CategoryName  --9
			,CAST(Isnull(CatalogName,'')  AS NVARCHAR(2000)) CatalogName,CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50)) DisplayOrder  -- 10  
			,ZPVE.RevisionType RevisionType , 0 AssociatedProductDisplayOrder,-- pending  -- 11 
			Isnull(ZPCP.ProductIndex,1),  -- 12 

			Case When TBZP.IsAllowIndexing = 1 then  ISNULL(CAST(SalesPrice  AS varchar(500)),'') else '' end SalesPrice , 
			Case When TBZP.IsAllowIndexing = 1 then  ISNULL(CAST(RetailPrice  AS varchar(500)),'') else '' end RetailPrice , 
			Case When TBZP.IsAllowIndexing = 1 then  ISNULL(CultureCode ,'') else '' end CultureCode , 
			Case When TBZP.IsAllowIndexing = 1 then  ISNULL(CurrencySuffix ,'') else '' end CurrencySuffix , 
			Case When TBZP.IsAllowIndexing = 1 then  ISNULL(CurrencyCode ,'') else '' end CurrencyCode , 
			Case When TBZP.IsAllowIndexing = 1 then  ISNULL(SEODescription,'') else '' end SEODescriptionForIndex,
			Case When TBZP.IsAllowIndexing = 1 then  ISNULL(SEOKeywords,'') else '' end SEOKeywords,
			Case When TBZP.IsAllowIndexing = 1 then  ISNULL(SEOTitle,'') else '' end SEOTitle,
			Case When TBZP.IsAllowIndexing = 1 then  ISNULL(SEOUrl ,'') else '' end SEOUrl,
			Case When TBZP.IsAllowIndexing = 1 then  ISNULL(ImageSmallPath,'') else '' end ImageSmallPath,
			CAST(ISNULL(LOWER(ZPPDFG.SKU) ,'') AS NVARCHAR(100)) Lower_SKU -- 13
	FROM  #TBL_PublishCatalogId zpp
	INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
	INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
	INNER JOIN ZnodePublishVersionEntity ZPVE ON (ZPVE.ZnodeCatalogId  = ZPP.PublishCatalogId AND ZPVE.IsPublishSuccess =1 AND ZPVE.LocaleId = @LocaleId )
	LEFT JOIN #ZnodePrice TBZP ON (TBZP.PublishProductId = ZPP.PublishProductId)
	LEFT JOIN #ProductSKU TBPS ON (TBPS.PublishProductId = ZPP.PublishProductId)
	LEFT JOIN #ProductImages TBPI ON (TBPI.PublishProductId = ZPP.PublishProductId  )
	LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
	LEFT JOIN ZnodePublishCategory ZPC ON (ZPC.PublishCatalogId = ZPCP.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId)
	LEFT JOIN ZnodePimCategoryProduct ZPCCF ON (ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId )
	LEFT JOIN ZnodePimCategoryHierarchy ZPCH ON (ZPCH.PimCatalogId = ZPCV.PimCatalogId AND  ZPCH.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId) 
	LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ZPCP.PublishCategoryId AND ZPCD.LocaleId = @LocaleId )
	WHERE ZPPDFG.LocaleId = @LocaleId
		--AND zpp.LocaleId = @LocaleId
	AND 
		(
			(ZPVE.RevisionType =  Case when  (@RevisionType like '%Preview%'  OR @RevisionType like '%Production%' ) then 'Preview' End ) 
			OR 
			(ZPVE.RevisionType =  Case when (@RevisionType like '%Production%' OR @RevisionType = 'None') then  'Production'  end )
		)


	DELETE FROM #TBL_ZnodeTempPublish
	IF OBJECT_ID('tempdb..#PimProductAttributeJson') is not null
	 BEGIN 
		DELETE FROM #PimProductAttributeJson
	 END
	 IF OBJECT_ID('tempdb..#TBL_CustomeFiled') is not null
	 BEGIN 
	 DROP TABLE #TBL_CustomeFiled
	 END
	 IF OBJECT_ID('tempdb..#TBL_AttributeVAlue') is not null
	 BEGIN 
	 DROP TABLE #TBL_AttributeVAlue
	 END
 
	DELETE FROM @PimDefaultValueLocale
SET @Counter = @counter + 1 
END

SET @Status =1 

END TRY 
BEGIN CATCH 
	SET @Status =0  
	 SELECT 1 AS ID,@Status AS Status;   
	 DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
		@ErrorLine VARCHAR(100)= ERROR_LINE(),
		@ErrorCall NVARCHAR(MAX)= 'EXEC [Znode_GetPublishSingleProductJson] 
		@PublishCatalogId = '+CAST(@PublishCatalogId  AS VARCHAR	(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10))
				
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_GetPublishSingleProductJson',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
END CATCH
END

GO
if exists(select * from sys.procedures where name = 'Znode_InsertPublishProductIds')
	drop proc Znode_InsertPublishProductIds
go
CREATE PROCEDURE [dbo].[Znode_InsertPublishProductIds]
(
	 @PublishCatalogId           INT            = NULL,
     @UserId                     INT				  ,
	 @PimProductId               TransferId Readonly,
	 @IsCallAssociated           BIT           = 0,
	 @PimCategoryHierarchyId	 INT		   = 0  ,
	 @IsDebug					 INT		   = 0     
	)
AS
    
/*
  Summary :	Publish Product on the basis of publish catalog
				Retrive all Product details with attributes and insert into following tables 
				1.	ZnodePublishedXml
				2.	ZnodePublishCategoryProduct
				3.	ZnodePublishProduct
				4.	ZnodePublishProductDetail

                Product details include all the type of products link, grouped, configure and bundel products (include addon) their associated products 
				collect their attributes and values into tables variables to process for publish.  
                
				Finally genrate XML for products with their attributes and inserted into ZnodePublishedXml Znode Admin process xml from sql server to mongodb
				one by one.

     Unit Testing
    
     SELECT * FROM ZnodePimCustomField WHERE CustomCode = 'Test'
     SELECT * FROM ZnodePimCatalogCategory WHERE pimCatalogId = 3 AND PimProductId = 181
     SELECT * FROM ZnodePimCustomFieldLocale WHERE PimCustomFieldId = 1
	 SELECT * FROM ZnodePublishProduct WHERE PublishProductid = 213 = 30
     select * from znodepublishcatalog
	 SELECT * FROM view_loadmanageProduct WHERE Attributecode = 'ProductNAme' AND AttributeValue LIKE '%Apple%'
     SELECT * FROM ZnodePimCategoryProduct WHERE  PimProductId = 181
	 SELECT * FROM ZnodePimCatalogcategory WHERE pimcatalogId = 3 
     EXEC Znode_GetPublishProducts  @PublishCatalogId = 5 ,@UserId= 2 ,@NotReturnXML= NULL,@PimProductId = 117,@IsDebug= 1 
	 	DECLARE @ttr TransferId 
	INSERT INTO @ttr  
	SELECT 25719 
     EXEC Znode_InsertPublishProductIds  @PublishCatalogId = 3,@UserId= 2  ,@PimProductId = @ttr  ,@IsDebug= 1 
     EXEC Znode_GetPublishProducts  @PublishCatalogId =1,@UserId= 2 ,@RequiredXML= 1	
	 SELECT * FROM 	ZnodePimCatalogCategory  WHERE pimcatalogId = 3  
	 SELECT * FROM [dbo].[ZnodePimCategoryHierarchy]  WHERE pimcatalogId = 3 
    */ 

     BEGIN
      --  BEGIN TRAN InsertPublishProductIds;
         BEGIN TRY
			SET NOCOUNT ON;
		
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate(); 
			 DECLARE @PimCatalogId int= ISNULL((SELECT PimCatalogId FROM ZnodePublishcatalog WHERE PublishCatalogId = @PublishCatalogId), 0);  --- this variable is used to carry y pim catalog id by using published catalog id
			 DECLARE 
			  @ProductNamePimAttributeId INT = dbo.Fn_GetProductNameAttributeId(),
			  @DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId(),
			  @LocaleId INT = 0,
			  @SkuPimAttributeId  INT =  dbo.Fn_GetProductSKUAttributeId(), 
			  @IsActivePimAttributeId INT =  dbo.Fn_GetProductIsActiveAttributeId(),
			  @ProductTypeAttributeId INT = dbo.Fn_GetProductTypeAttributeId()

			 DECLARE @TBL_LocaleId  TABLE (RowId INT IDENTITY(1,1) PRIMARY KEY  , LocaleId INT )
			 INSERT INTO @TBL_LocaleId (LocaleId) SELECT LocaleId FROM ZnodeLocale WHERE IsActive = 1
			 
			 -- This variable used to carry the locale in loop 
			 -- This variable is used to carry the default locale which is globaly set
             DECLARE @Counter INT =1 ,@maxCountId INT = (SELECT max(RowId) FROM @TBL_LocaleId ) 
			 DECLARE @DeletePublishProductId VARCHAR(MAX)= '', @PimProductIds VARCHAR(MAX)= '', @PimAttributeId VARCHAR(MAX)= '';
             DECLARE @TBL_CategoryHierarchyIds TABLE (CategoryId int,ParentCategoryId int ) 
			 DECLARE @TBL_PublishCategoryIds TABLE (PublishCategoryId  int ) 
		
			 -- This table will used to hold the all currently active locale ids  
			 
			IF Object_ID ('tempdb..#ActiveProduct') is not null
				drop table #ActiveProduct

			IF Object_ID ('tempdb..#TBL_PimProductIds') is not null
				drop table #TBL_PimProductIds

			 --this table holds all active product data
			-- CREATE TABLE #ActiveProduct ( PimProductId INT ) 
			 --
			 --INSERT INTO #ActiveProduct ( PimProductId )
				 --SELECT PAV.PimProductId FROM ZnodePimAttributeValue PAV
				 --INNER JOIN ZnodePimAttributeValueLocale PAVL ON PAV.PimAttributeValueId = PAVL.PimAttributeValueId
				 --INNER JOIN ZnodePimAttribute PA  ON PAV.PimAttributeId = PA.PimAttributeId
				 --WHERE PA.AttributeCode = 'IsActive' AND PAVL.AttributeValue = 'true'
				
				IF Object_ID ('tempdb..#ZnodePublishCategoryProduct') is not null
				drop table #ZnodePublishCategoryProduct;

				 select ZPCP.PimCategoryId, ZPCP.PimProductId, ZPC.PublishCategoryId,ZPP.PublishProductId
						into #ZnodePublishCategoryProduct
						FROM [dbo].[ZnodePimCategoryProduct] ZPCP
						INNER JOIN ZnodePublishCategory ZPC ON ZPCP.PimCategoryId = ZPC.PimCategoryId
						INNER JOIN ZnodePublishProduct ZPP ON ZPCP.PimProductId = ZPP.PimProductId
						where EXISTS( SELECT TOP 1 1 FROM @PimProductId SP WHERE SP.Id = ZPCP.PimProductId)

						delete from ZnodePublishCategoryProduct
						where not exists (select top 1 1 from #ZnodePublishCategoryProduct Z where Z.PublishProductId = ZnodePublishCategoryProduct.PublishProductId and Z.PublishCategoryId = ZnodePublishCategoryProduct.PublishCategoryId)
						and exists(select top 1 1 from #ZnodePublishCategoryProduct Z where Z.PublishProductId = ZnodePublishCategoryProduct.PublishProductId)


			
		     -- This table hold the complete xml of product with other information like category and catalog
             CREATE TABLE #TBL_PimProductIds(PimProductId INT  ,PimCategoryId INT,PimCatalogId INT,PublishCatalogId INT,IsParentProducts BIT ,DisplayOrder INT,ProductName NVARCHAR(MAX),SKU  NVARCHAR(MAX),
											 IsActive NVARCHAR(MAX),PimAttributeFamilyId INT ,ProfileId   VARCHAR(MAX),CategoryDisplayOrder INT ,ProductIndex INT,PimCategoryHierarchyId INT ,PRIMARY KEY (PimCatalogId,PimCategoryId,PimCategoryHierarchyId,PimProductId)  )

			  -- This table is used to hold the product which publish in current process 
             Create TABLE #TBL_PublishProductIds (PublishProductId  INT  ,PimProductId INT,PublishCatalogId  INT
													,PublishCategoryId VARCHAR(MAX),CategoryProfileIds VARCHAR(max),VersionId INT , PRIMARY KEY (PimProductId,PublishProductId,PublishCatalogId)); 
	 
			--Retrive category data : parent / client
			
				
			---------------
			-- this check is used when this procedure is call by internal procedure to publish only product and no need to return publish xml;    
			--Collected list of products for  publish 
       
			If @PimCategoryHierarchyId = 0 
			Begin

				INSERT INTO #TBL_PimProductIds ( PimProductId, PimCategoryId, IsParentProducts, DisplayOrder, PimCatalogId,CategoryDisplayOrder,PublishCatalogId,PimCategoryHierarchyId )
				SELECT DISTINCT ZPCC.PimProductId, ZPCC.PimCategoryId, 1 AS IsParentProducts, NULL AS DisplayOrder, ZPCH.PimCatalogId,ZPCC.DisplayOrder ,ZPC.PublishCatalogId,ISNULL(ZPCH.PimCategoryHierarchyId,0)
				FROM ZnodePimCategoryProduct AS ZPCC
				INNER JOIN ZnodePimCategoryHierarchy ZPCH ON ZPCC.PimCategoryId = ZPCH.PimCategoryId
				INNER JOIN ZnodePublishCatalog ZPC ON ZPC.PimCatalogId = ZPCH.PimCatalogId
		    	WHERE  (ZPCH.PimCatalogId = @PimCatalogId OR EXISTS( SELECT TOP 1 1 FROM @PimProductId SP WHERE SP.Id = ZPCC.PimProductId) ) AND ZPCC.PimProductId IS NOT NULL
				--AND EXISTS ( SELECT * FROM #ActiveProduct PAV WHERE ZPCC.PimProductId = PAV.PimProductId )

			END
			ELSE
			BEGIN
				
				INSERT INTO @TBL_CategoryHierarchyIds(CategoryId , ParentCategoryId )
				Select Distinct PimCategoryId , Null FROM (
				SELECT PimCategoryId,ParentPimCategoryId from DBO.[Fn_GetRecurciveCategoryIds](@PimCategoryHierarchyId,@PimCatalogId)
				Union 
				Select PimCategoryId , null  from ZnodePimCategoryHierarchy where PimCategoryHierarchyId = @PimCategoryHierarchyId 
				Union 
				Select PimCategoryId , null  from [Fn_GetRecurciveCategoryIds_new] (@PimCategoryHierarchyId,@PimCatalogId) ) Category  


				INSERT INTO  @TBL_PublishCategoryIds 
				select ZPC.PublishCategoryId from ZnodePublishCategory ZPC 
				Inner join  @TBL_CategoryHierarchyIds CT1 On 
				ZPC.PimCategoryId = CT1.CategoryId 
			
			
				INSERT INTO #TBL_PimProductIds ( PimProductId, PimCategoryId, IsParentProducts, DisplayOrder, PimCatalogId,CategoryDisplayOrder,PublishCatalogId,PimCategoryHierarchyId )
				SELECT DISTINCT ZPCC.PimProductId, ZPCC.PimCategoryId, 1 AS IsParentProducts, NULL AS DisplayOrder, ZPCH.PimCatalogId,ZPCC.DisplayOrder ,ZPC.PublishCatalogId,ISNULL(ZPCH.PimCategoryHierarchyId,0)
				FROM ZnodePimCategoryProduct AS ZPCC
				INNER JOIN ZnodePimCategoryHierarchy ZPCH ON ZPCC.PimCategoryId = ZPCH.PimCategoryId
				INNER JOIN ZnodePublishCatalog ZPC ON ZPC.PimCatalogId = ZPCH.PimCatalogId
		    	WHERE  (ZPCH.PimCatalogId = @PimCatalogId OR EXISTS( SELECT TOP 1 1 FROM @PimProductId SP WHERE SP.Id = ZPCC.PimProductId) ) AND ZPCC.PimProductId IS NOT NULL
				--AND EXISTS ( SELECT * FROM #ActiveProduct PAV WHERE ZPCC.PimProductId = PAV.PimProductId )
				AND (
						ZPCC.PimCategoryId in 
							(
								Select CategoryId from @TBL_CategoryHierarchyIds
							) 
					) 



				SELECT ZPCP.PublishCatalogId,THO.PimProductId,PimCategoryHierarchyId,ProductIndex
				INTO #TBL_PublishCategoryProduct 
				FROM ZnodePublishCategoryProduct ZPCP 
				INNER JOIN ZnodePublishProduct THO ON (THO.PublishProductId = ZPCP.PublishProductId  AND ZPCP.PublishCatalogId = THO.PublishCatalogId)
				WHERE ZPCP.PublishCatalogId = @PublishCatalogId
				AND EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductIds TYU WHERE TYU.PimProductId  =  THO.PimProductId )


				

				UPDATE  #TBL_PimProductIds 
				SET ProductIndex = CASE WHEN EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCategoryProduct TH WHERE TH.PimProductId = #TBL_PimProductIds.PimProductId 
					AND #TBL_PimProductIds.PimCategoryHierarchyId = TH.PimCategoryHierarchyId  ) THEN (SELECT TOP  1 ProductIndex FROM #TBL_PublishCategoryProduct TM WHERE TM.PimProductId = #TBL_PimProductIds.PimProductId 
					AND #TBL_PimProductIds.PimCategoryHierarchyId = TM.PimCategoryHierarchyId  )

					WHEN EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCategoryProduct TH WHERE TH.PimProductId = #TBL_PimProductIds.PimProductId 
					AND #TBL_PimProductIds.PimCategoryHierarchyId <> TH.PimCategoryHierarchyId  )  
					THEN (SELECT TOP  1 MAX(isnull(ProductIndex,0))+1  FROM #TBL_PublishCategoryProduct TM1 WHERE TM1.PimProductId = #TBL_PimProductIds.PimProductId 
					)

				  ELSE  1 END 


					
			END
						
             --Collected list of link products for  publish
			 INSERT INTO #TBL_PimProductIds( PimProductId, PimCategoryId, IsParentProducts, DisplayOrder, PimCatalogId , PublishCatalogId,PimCategoryHierarchyId)
				 SELECT ZPLPD.PimProductId, Isnull(ZPCC.PimCategoryId,0), 0 AS IsParentProducts, NULL AS DisplayOrder, CTPP.PimCatalogId,CTPP.PublishCatalogId,isnull(ZPCH.PimCategoryHierarchyId,0)
				 FROM ZnodePimLinkProductDetail AS ZPLPD
				 INNER JOIN #TBL_PimProductIds AS CTPP ON ZPLPD.PimParentProductId = CTPP.PimProductId AND  IsParentProducts = 1 
				 LEFT JOIN ZnodePimCategoryProduct AS ZPCC ON ZPCC.PimProductId = ZPLPD.PimProductId 
				 LEFT JOIN ZnodePimCategoryHierarchy ZPCH ON ZPCH.PimCatalogId = CTPP.PimCatalogId and ZPCC.PimCategoryId = ZPCH.PimCategoryId
				 WHERE NOT EXISTS ( SELECT TOP 1 1 FROM #TBL_PimProductIds AS CTPPI WHERE CTPPI.PimProductId = ZPLPD.PimProductId) 
				 GROUP BY ZPLPD.PimProductId, ZPCC.PimCategoryId,CTPP.PimCatalogId,CTPP.PublishCatalogId ,ZPCH.PimCategoryHierarchyId

				
             --Collected list of Addon products for  publish
  
		     INSERT INTO #TBL_PimProductIds( PimProductId, PimCategoryId, IsParentProducts, DisplayOrder, PimCatalogId,PublishCatalogId,PimCategoryHierarchyId)
					 SELECT ZPAPD.PimChildProductId, ISNULL(ZPCC.PimCategoryId,0) AS PublishCategoryId, 0 AS IsParentProducts, null AS DisplayOrder,CTALP.PimCatalogId,CTALP.PublishCatalogId,ISNULL(ZPCH.PimCategoryHierarchyId,0)
					 FROM ZnodePimAddOnProductDetail AS ZPAPD 
					 INNER JOIN ZnodePimAddOnProduct AS ZPAP ON ZPAP.PimAddOnProductId = ZPAPD.PimAddOnProductId
					 INNER JOIN #TBL_PimProductIds AS CTALP ON CTALP.PimProductId = ZPAP.PimProductId AND  IsParentProducts = 1
					 LEFT JOIN ZnodePimCategoryProduct AS ZPCC ON ZPCC.PimProductId = ZPAPD.PimChildProductId 
					 LEFT JOIN ZnodePimCategoryHierarchy ZPCH ON ZPCH.PimCatalogId = CTALP.PimCatalogId and ZPCH.PimCategoryId = ZPCC.PimCategoryId
					 WHERE NOT EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductIds AS CTALPI WHERE CTALPI.PimProductId = ZPAPD.PimChildProductId) 
				---	 AND EXISTS(SELECT TOP 1 1FROM ZnodePimAttributeValue AS VILMP WHERE VILMP.PimProductId = ZPAPD.PimChildProductId) 
					-- AND EXISTS ( SELECT * FROM #ActiveProduct PAV WHERE ZPAPD.PimChildProductId = PAV.PimProductId ) 
					 GROUP BY ZPAPD.PimChildProductId, ZPCC.PimCategoryId , CTALP.PimCatalogId,CTALP.PublishCatalogId,ZPCH.PimCategoryHierarchyId

					 				 	

             --Collected list of Bundle / Group / Config products for  publish
             INSERT INTO #TBL_PimProductIds(PimProductId,PimCategoryId,IsParentProducts,DisplayOrder,PimCatalogId,PublishCatalogId,PimCategoryHierarchyId)
                    SELECT ZPTA.PimProductId,ISNULL(ZPCC.PimCategoryId,0),0 AS IsParentProducts,NULL DisplayOrder,CTAAP.PimCatalogId,CTAAP.PublishCatalogId,ISNULL(ZPCH.PimCategoryHierarchyId,0)
                    FROM ZnodePimProductTypeAssociation AS ZPTA INNER JOIN #TBL_PimProductIds AS CTAAP ON CTAAP.PimProductId = ZPTA.PimParentProductId AND IsParentProducts = 1
                    LEFT JOIN ZnodePimCategoryProduct AS ZPCC ON ZPCC.PimProductId = ZPTA.PimProductId 
					LEFT JOIN ZnodePimCategoryHierarchy ZPCH ON ZPCH.PimCatalogId = CTAAP.PimCatalogId AND ZPCC.PimCategoryId = ZPCH.PimCategoryId
                    WHERE NOT EXISTS( SELECT TOP 1 1 FROM #TBL_PimProductIds AS CTAAPI WHERE CTAAPI.PimProductId = ZPTA.PimProductId)
					GROUP BY ZPTA.PimProductId,ZPCC.PimCategoryId,CTAAP.PimCatalogId,CTAAP.PublishCatalogId,ZPCH.PimCategoryHierarchyId
        				

			   UPDATE TBPP
               SET PublishCatalogId = ZPC.PublishCatalogId 
			   FROM #TBL_PimProductIds TBPP 
			   INNER JOIN ZnodePublishCatalog ZPC ON ZpC.PimCatalogId = TBPP.PimCatalogId;
        
		DECLARE @PublishProductId TRANSFERId 

		
		
		IF @PublishCatalogId IS NOT NULL AND @PublishCatalogId <> 0 
			BEGIN
			If @PimCategoryHierarchyId = 0 
			BEGIN
			  -- SELECT * FROM @TBL_PimProductIds AS TBP
				INSERT INTO @PublishProductId
				SELECT DISTINCT ZPP.PublishProductId 
				FROM ZnodePublishProduct AS ZPP 
				Left JOIN ZnodePublishCategoryProduct ZPPC ON (ZPPC.PublishProductId = ZPP.PublishProductId AND ZPPC.PublishCatalogId = ZPP.PublishCatalogId)
				--INNER JOIN ZnodePublishCategory ZPC ON (ZPC.PublishCategoryId = ZPPC.PublishCategoryId)
				WHERE NOT EXISTS
				(SELECT TOP 1 1 FROM #TBL_PimProductIds AS TBP WHERE ZPP.PimProductId = TBP.PimProductId 
				AND TBP.PublishCatalogId = ZPP.PublishCatalogId 
				AND ISNULL(TBP.PimCategoryHierarchyId,0) = ISNULL(ZPPC.PimCategoryHierarchyId,0) )
				AND ZPP.PublishCatalogId = @PublishCatalogId
				--Remove extra products from catalog

				
			END
			ELSE 
			BEGIN
				INSERT INTO @PublishProductId
				SELECT DISTINCT ZPP.PublishProductId 
				FROM ZnodePublishProduct AS ZPP 
				INNER JOIN ZnodePublishCategoryProduct ZPPC ON (ZPPC.PublishProductId = ZPP.PublishProductId AND ZPPC.PublishCatalogId = ZPP.PublishCatalogId)
				INNER JOIN ZnodePublishCategory ZPC ON (ZPC.PublishCatalogId = ZPPC.PublishCatalogId  AND   ZPC.PublishCategoryId = ZPPC.PublishCategoryId)
				WHERE NOT EXISTS
				(SELECT TOP 1 1 FROM #TBL_PimProductIds AS TBP WHERE ZPP.PimProductId = TBP.PimProductId 
				AND TBP.PublishCatalogId = ZPP.PublishCatalogId 
				AND ISNULL(TBP.PimCategoryHierarchyId,0) = ISNULL(ZPPC.PimCategoryHierarchyId,0))
				AND ZPP.PublishCatalogId = @PublishCatalogId
				AND ZPC.PimCategoryId  in 
				(
					Select CategoryId from @TBL_CategoryHierarchyIds
				)
			
			   


			END
		END
		ELSE IF @IsCallAssociated = 0 
		BEGIN 
			DECLARE @TBL_ProductIdscollect TABLE(PublishProductId INT , PimproductId INT , PublishcatalogId  INT  , ProductType NVARCHAr(max))
			If @PimCategoryHierarchyId = 0 
			Begin
				INSERT INTO @TBL_ProductIdscollect (PublishProductId,PimproductId,PublishcatalogId,ProductType)
				SELECT PublishProductId,ZPAV.PimproductId,TBPOCI.PublishcatalogId,ZPATF.AttributeDefaultValueCode
				FROM ZnodePimAttributeValue ZPAV 
				INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON (ZPADV.PimAttributeValueId = ZPAV.PimAttributeValueId )
				INNER JOIN #TBL_PimProductIds TBLIDF ON (TBLIDF.PimProductId = ZPAV.PimProductId )
				INNER JOIN ZnodePublishProduct TBPOCI ON (TBPOCI.PimProductId = TBLIDF.PimProductId AND TBPOCI.PublishCatalogId = TBLIDF.PublishCatalogId 	)
				INNER JOIN ZnodePimAttributeDefaultValue ZPATF ON (ZPATF.PimAttributeId =  @ProductTypeAttributeId 
								AND ZPADV.PimAttributeDefaultValueId = ZPATF.PimAttributeDefaultValueId )
				 WHERE  IsParentProducts = 1	
				 AND LocaleId =@DefaultLocaleId
			END 
			Else 
			Begin
				INSERT INTO @TBL_ProductIdscollect (PublishProductId,PimproductId,PublishcatalogId,ProductType)
				SELECT TBPOCI.PublishProductId,ZPAV.PimproductId,TBPOCI.PublishcatalogId,ZPATF.AttributeDefaultValueCode
				FROM ZnodePimAttributeValue ZPAV 
				INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON (ZPADV.PimAttributeValueId = ZPAV.PimAttributeValueId )
				INNER JOIN #TBL_PimProductIds TBLIDF ON (TBLIDF.PimProductId = ZPAV.PimProductId )
				INNER JOIN ZnodePublishProduct TBPOCI ON (TBPOCI.PimProductId = TBLIDF.PimProductId AND TBPOCI.PublishCatalogId = TBLIDF.PublishCatalogId 	)
				INNER JOIN ZnodePimAttributeDefaultValue ZPATF ON (ZPATF.PimAttributeId =  @ProductTypeAttributeId 
								AND ZPADV.PimAttributeDefaultValueId = ZPATF.PimAttributeDefaultValueId )
				INNER JOIN ZnodePublishCategoryProduct  ZPCP ON ZPCP.PublishCatalogId = TBPOCI.PublishCatalogId AND 
				ZPCP.PublishProductId = TBPOCI.PublishProductId
				INNER JOIN ZnodePublishCategory ZPC ON  (ZPC.PublishCatalogId = ZPCP.PublishCatalogId  AND ZPC.PublishCategoryId = ZPCP.PublishCategoryId)
				 WHERE  IsParentProducts = 1	AND LocaleId =@DefaultLocaleId
				 AND ZPC.PimCategoryId  in 
				(
					Select CategoryId from @TBL_CategoryHierarchyIds
				
				) 
			END 

			IF EXISTS (SELECT TOP 1 1 FROM @TBL_ProductIdscollect WHERE ProductType IN ('GroupedProduct','BundleProduct','ConfigurableProduct','SimpleProduct') )
		 
			BEGIN 
	
			   DECLARE @TBL_DeleteTrackProduct TABLE (PublishProductId INT,AssociatedZnodeProductId INT  ,PublishCatalogId INT,PublishCatalogLogId INT ,IsDelete BIT , PublishCategoryId int  )

			   ;With Cte_PublishProduct AS
			   (
				 SELECT TBL.PublishProductId,PimproductId,TBL.PublishcatalogId,ProductType ,MAx(PublishCatalogLogId) PublishCatalogLogId
				 FROM  @TBL_ProductIdscollect TBL 
				 INNER JOIN ZnodePublishCatalogLog TBLG ON (TBLG.PublishCatalogId = TBL.PublishcatalogId)
				 WHERE IsCatalogPublished = 1 
				 GROUP BY TBL.PublishProductId,PimproductId,TBL.PublishcatalogId,ProductType

			   )
			   , Cte_ConfigData AS 
				 (
					SELECT ZPP2.PublishProductId  AssociatedZnodeProductId,ZPP.PublishProductId,ZPXML.PimproductId,ZPP.PublishcatalogId,ProductType,CTR.PublishCatalogLogId
					FROM ZnodePublishAssociatedProduct ZPXML 
					INNER JOIN ZnodePublishProduct ZPP ON (ZPP.PimProductId = ZPXML.ParentPimProductId)
					INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId  = ZPP.PublishCatalogId AND ZPC.PimCatalogID = ZPXML.PimCatalogId )
					INNER JOIN Cte_PublishProduct CTR ON ( CTR.PublishProductId = ZPP.PublishProductId)
					INNER JOIN ZnodePublishProduct ZPP2 ON (ZPP2.PimProductId  = ZPXML.PimProductId AND ZPP2.PublishCatalogId = ZPP.PublishCatalogId )
					LEFT JOIN ZnodePublishCategoryProduct ZPPC ON (ZPPC.PublishProductId = ZPP2.PublishProductId  AND ZPPC.PublishCatalogId = ZPP.PublishCatalogId )
					WHERE  (ZPPC.PublishCategoryId in (Select PublishCategoryId from @TBL_PublishCategoryIds) OR @PimCategoryHierarchyId = 0 ) 
			
				 )

			--	 SELECT * FROM ZnodePublishCatalogLog WHERE PublishCatalogId = 8 

			INSERT INTO @TBL_DeleteTrackProduct (PublishProductId,AssociatedZnodeProductId,PublishcatalogId,PublishCatalogLogId)
			SELECT ZPP.PublishProductId,AssociatedZnodeProductId,PublishcatalogId,PublishCatalogLogId 
			FROM Cte_ConfigData ZPP	
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM  #TBL_PublishProductIds TBLP WHERE TBLP.PublishProductId = ZPP.AssociatedZnodeProductId)
		
	

			;With Cte_updateStatus AS
			(
		 
				SELECT  PublishProductId,PublishcatalogId
				FROM @TBL_DeleteTrackProduct CTR 
				WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishAssociatedProduct ZPXML 
				INNER JOIN ZnodePublishProduct ZPP ON (ZPP.PimProductId = ZPXML.ParentPimProductId)
				INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId  = ZPP.PublishCatalogId AND ZPC.PimCatalogID = ZPXML.PimCatalogId )
				INNER JOIN ZnodePublishProduct ZPP2 ON (ZPP2.PimProductId  = ZPXML.PimProductId AND ZPP2.PublishCatalogId = ZPP.PublishCatalogId )
				WHERE  CTR.PublishProductId = ZPP2.PublishProductId 
				AND CTR.PublishCatalogId = ZPP.PublishCatalogId ) 
		
			)

			UPDATE a 
			SET IsDelete = CASE WHEN TYR.PublishProductId IS NULL THEN 1 ELSE 0 END 
			FROM @TBL_DeleteTrackProduct a 
			LEFT JOIN Cte_updateStatus TYR ON (TYR.PublishProductId = a.PublishProductId AND TYR.PublishCatalogId = a.PublishCatalogId)

		
			INSERT INTO @PublishProductId 
			SELECT DISTINCT AssociatedZnodeProductId 
			FROM @TBL_DeleteTrackProduct
			WHERE IsDelete =1  
		--	AND 1=0

		END 

	
		INSERT INTO @PublishProductId
		SELECT distinct PublishProductid
		FROM ZnodePublishProduct ZPP
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId =  ZPP.PublishCatalogId )
        WHERE Not EXISTS (SELECT TOP 1 1 FROM ZnodePimCategoryProduct ZPPP inner join ZnodePimCategoryHierarchy ZPCH ON ZPPP.PimCategoryId =ZPCH.PimCategoryId
		                  WHERE (ZPCH.PimCatalogid = ZPc.PimCatalogId AND ZPPP.PimProductId = ZPP.PimProductId))  
		AND EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductIds TYR WHERE TYR.PimProductId = ZPP.PimProductId )
		AND NOT EXISTS (SELECT TOP 1 1 FROM @PublishProductId YTR WHERE YTR.Id = ZPP.PublishProductId  )
		AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishCategoryProduct TY WHERE TY.PublishProductId = ZPP.PublishProductId AND TY.PublishCatalogId = ZPP.PublishcatalogId  )
		--AND  1=0	
		END  

		EXEC dbo.Znode_DeletePublishCatalogProduct  @PublishProductIds = @PublishProductId,@PublishCatalogId = @PublishCatalogId ,
		@PimCategoryHierarchyId  =@PimCategoryHierarchyId  ,
		@PimCatalogId  = @PimCatalogId 

			   IF  @IsDebug = 1 
			   BEGIN 
			SELECT * FROM #TBL_PimProductIds
			 END 
			 -- This merge statement is used for crude oprtaion with publisgh product table
			MERGE INTO ZnodePublishProduct TARGET USING  (
				SELECT PimProductId, PublishCatalogId
				FROM #TBL_PimProductIds AS TBP
				GROUP BY PimProductId, PublishCatalogId
			 )  SOURCE
				ON --check for if already exists then just update otherwise insert the product  
				TARGET.PimProductId = SOURCE.PimProductId AND  TARGET.PublishCatalogId = SOURCE.PublishCataLogId 
				WHEN MATCHED      THEN UPDATE SET TARGET.CreatedBy = @UserId, TARGET.CreatedDate = @GetDate, TARGET.ModifiedBy = @UserId, TARGET.ModifiedDate = @GetDate	
				WHEN NOT MATCHED  THEN INSERT(PimProductId, PublishCatalogId, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate) 
									   VALUES( SOURCE.PimProductId, SOURCE.PublishCatalogId, @UserId, @GetDate, @UserId, @GetDate )
				OUTPUT INSERTED.PublishProductId, INSERTED.PimProductId, INSERTED.PublishCatalogId
				INTO #TBL_PublishProductIds(PublishProductId, PimProductId, PublishCatalogId); 
			
			-- Here used the ouput clause to catch what data inserted or updated into variable table
			
				IF Object_ID ('tempdb..#TB_CategoryProduct') is not null
					drop table #TB_CategoryProduct
	    		Create TABLE #TB_CategoryProduct(PublishProductId int , PublishCategoryId int, PublishCatalogId int , PimCategoryHierarchyId int ,
				ProductIndex int  )
				IF Isnull(@PublishCatalogId,0)  = 0   
				insert into #TB_CategoryProduct 
				(PublishProductId, PublishCategoryId, PublishCatalogId, PimCategoryHierarchyId,	ProductIndex )
					  SELECT PublishProductId,
						 ISNULL(ZPC.PublishCategoryId,0)PublishCategoryId,
						 TBP.PublishCatalogId,ZPC.PimCategoryHierarchyId,
						 CASE WHEN ISNULL(@PimCategoryHierarchyId,0) <> 0  THEN TBP.ProductIndex 
						 ELSE ROW_NUMBER()Over(Partition BY TBPP.PublishProductId Order BY ISNULL(ZPC.PublishCategoryId,0)) END  ProductIndex
						 --INTO #TB_CategoryProduct 
						 FROM #TBL_PimProductIds AS TBP 
						 LEFT JOIN ZnodePublishCategory AS ZPC ON (ISNULL(TBP.PimCategoryId, 0) = ISNULL(ZPC.PimCategoryId, -1) AND ZPC.PublishCatalogId = TBP.PublishCatalogId 
						 AND ISNULL(ZPC.PimCategoryHierarchyId, 0) = ISNULL(TBP.PimCategoryHierarchyId, -1))
						 INNER JOIN #TBL_PublishProductIds AS TBPP ON TBP.PimProductId = TBPP.PimProductId
						 AND TBP.PublishCatalogId = TBPP.PublishCatalogId
						 Where (ZPC.PimCategoryHierarchyId <> 0 )
						 GROUP BY PublishProductId, ZPC.PublishCategoryId, TBP.PublishCatalogId,ZPC.PimCategoryHierarchyId,TBP.ProductIndex
				 ELSE 						
					insert into #TB_CategoryProduct 
					(PublishProductId, PublishCategoryId, PublishCatalogId, PimCategoryHierarchyId,	ProductIndex )
						SELECT PublishProductId,
						 ISNULL(ZPC.PublishCategoryId,0)PublishCategoryId,
						 TBP.PublishCatalogId,ZPC.PimCategoryHierarchyId,CASE WHEN ISNULL(@PimCategoryHierarchyId,0) <> 0  
						 THEN TBP.ProductIndex ELSE     ROW_NUMBER()Over(Partition BY TBPP.PublishProductId 
						 Order BY ISNULL(ZPC.PublishCategoryId,0)) END  ProductIndex
						 --INTO #TB_CategoryProduct 
						 FROM #TBL_PimProductIds AS TBP 
						 LEFT JOIN ZnodePublishCategory AS ZPC ON (ISNULL(TBP.PimCategoryId, 0) = ISNULL(ZPC.PimCategoryId, -1) AND ZPC.PublishCatalogId = TBP.PublishCatalogId 
						 AND ISNULL(ZPC.PimCategoryHierarchyId, 0) = ISNULL(TBP.PimCategoryHierarchyId, -1))
						 INNER JOIN #TBL_PublishProductIds AS TBPP ON TBP.PimProductId = TBPP.PimProductId
						 AND TBP.PublishCatalogId = TBPP.PublishCatalogId
						 GROUP BY PublishProductId, ZPC.PublishCategoryId, TBP.PublishCatalogId,ZPC.PimCategoryHierarchyId,TBP.ProductIndex
	

			-- This merge staetment is used for crude opration with  ZnodePublishCategoryProduct table
			 MERGE INTO ZnodePublishCategoryProduct TARGET 
			 USING  #TB_Categoryproduct SOURCE
					ON  TARGET.PublishCatalogId = SOURCE.PublishCatalogId AND ISNULL(TARGET.PublishCategoryId, 0) = ISNULL(SOURCE.PublishCategoryId, 0) AND TARGET.PublishProductId = SOURCE.PublishProductId 
					
					WHEN MATCHED THEN UPDATE SET TARGET.PublishCategoryId = CASE WHEN SOURCE.PublishCategoryId = 0 THEN NULL ELSE SOURCE.PublishCategoryId END 
												 ,TARGET.CreatedBy = @UserId, TARGET.CreatedDate = @GetDate, TARGET.ModifiedBy = @UserId, TARGET.ModifiedDate = @GetDate,TARGET.PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId				
												 ,ProductIndex = case when Source.ProductIndex is null then 1 else  Source.ProductIndex end
					WHEN NOT MATCHED THEN INSERT(PublishProductId,PublishCategoryId,PublishCatalogId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PimCategoryHierarchyId,ProductIndex) 
										  VALUES(SOURCE.PublishProductId,CASE WHEN SOURCE.PublishCategoryId =0 THEN NULL ELSE SOURCE.PublishCategoryId  END , SOURCE.PublishCatalogId,@UserId,@GetDate,@userId,@GetDate,SOURCE.PimCategoryHierarchyId,case when Source.ProductIndex is null then 1 else  Source.ProductIndex end);
   
    
   WHILE @Counter <= @maxCountId
   BEGIN 
    SET @LocaleId = (SELECT TOP 1 LocaleId FROM @TBL_LocaleId WHERE RowId = @Counter)
   
     
	 SELECT VIR.PimProductId,PimAttributeId,AttributeValue,ZnodePimAttributeValueLocaleId,VIR.LocaleId ,COUNT(*)Over(Partition By VIR.PimProductId,PimAttributeId ORDER BY VIR.PimProductId,PimAttributeId  ) RowId
	 INTO #TBL_AttributeVAlue
	 FROM View_LoadManageProductInternal VIR
	 WHERE (LocaleId = @DefaultLocaleId OR LocaleId = @LocaleId )
	 AND EXISTS (SELECT TOP 1 1 FROM #TBL_PublishProductIds ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
	 AND (PimAttributeId = @ProductNamePimAttributeId  OR PimAttributeId = @SKUPimAttributeId OR PimAttributeId = @IsActivePimAttributeId  )
  
   

		
	          MERGE INTO ZnodePublishProductDetail   TARGET
			  USING  (SELECT   ZPP.PublishProductId ,TBLA.AttributeValue PRoductName,TBLAI.AttributeValue SKU ,ISNULL(TBLAII.AttributeValue,'0') IsActive --,TBLAIII.AttributeValue ProductType
						FROM  #TBL_PublishProductIds zpp
						INNER JOIN #TBL_AttributeVAlue TBLA ON (TBLA.PimAttributeId = @ProductNamePimAttributeId AND TBLA.PimProductId = ZPP.PimProductId AND TBLA.LocaleId  = CASE WHEN TBLA.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )
					--	INNER JOIN @TBL_AttributeVAlue  TBLA ON (TBLA.PimProductId = ZPP.PimProductId AND TBLA.PimAttributeId = @ProductNamePimAttributeId)
					    INNER JOIN #TBL_AttributeVAlue TBLAI ON (TBLAI.PimAttributeId = @SKUPimAttributeId AND TBLAI.PimProductId = ZPP.PimProductId AND TBLAI.LocaleId  = CASE WHEN TBLAI.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )
					--	INNER JOIN @TBL_AttributeVAlue  TBLAI ON (TBLAI.PimProductId = ZPP.PimProductId AND TBLAI.PimAttributeId = @SKUPimAttributeId)
					    INNER JOIN #TBL_AttributeVAlue TBLAII ON (TBLAII.PimAttributeId = @IsActivePimAttributeId AND TBLAII.PimProductId = ZPP.PimProductId AND TBLAII.LocaleId  = CASE WHEN TBLAII.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )
						--INNER JOIN #TBL_AttributeVAlue TBLAIII ON (TBLAIII.PimAttributeId = @ProductTypePimAttributeId AND TBLAIII.PimProductId = ZPP.PimProductId AND TBLAIII.LocaleId  = CASE WHEN TBLAIII.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )
					--	INNER JOIN @TBL_AttributeVAlue  TBLAIII ON (TBLAII.PimProductId = ZPP.PimProductId AND TBLAII.PimAttributeId = @ProductTypeAttributeId)
						GROUP BY ZPP.PublishProductId,TBLA.AttributeValue,TBLAI.AttributeValue,TBLAII.AttributeValue --,TBLAIII.AttributeValue
						)   SOURCE
			ON (TARGET.PublishProductId = SOURCE.PublishProductId
				 AND TARGET.LocaleId = @LocaleId 
			) 
			WHEN MATCHED THEN 
			UPDATE 
			SET TARGET.ProductName   = SOURCE.ProductName
				,TARGET.SKU			 = SOURCE.SKU
				,TARGET.IsActive	= SOURCE.IsActive
				,TARGET.ModifiedBy	 = @userid
				,TARGET.ModifiedDate  = @GetDate
			WHEN NOT MATCHED THEN 
			INSERT (PublishProductId
					,ProductName
					,SKU
					,IsActive
					,LocaleId
					,CreatedBy
					,CreatedDate
					,ModifiedBy
					,ModifiedDate)
			VALUES ( SOURCE.PublishProductId
					,SOURCE.ProductName
					,SOURCE.SKU
					,SOURCE.IsActive
					,@LocaleId
					,@userId
					,@GetDate
					,@userId
					,@GetDate);

		 
         DROP TABLE #TBL_AttributeVAlue 
		
		 SET @Counter = @counter + 1 
			  END 

		IF @PublishCatalogId IS NULL OR @PublishCatalogId =0 
		BEGIN 
			SELECT PublishProductId, PimProductId, PublishCatalogId 
			FROM #TBL_PublishProductIds
		END 
		IF (ISnull(@PimCategoryHierarchyId ,0) <> 0 ) 
		Begin
			SELECT PublishProductId, PimProductId, PublishCatalogId 
			FROM #TBL_PublishProductIds
		End 

		--COMMIT TRAN InsertPublishProductIds;
		END TRY 
		BEGIN CATCH 
		 SELECT ERROR_MESSAGE()
            UPDATE ZnodePublishCatalogLog 
			SET IsCatalogPublished = 0 
			,IscategoryPublished = 0 
			,IsProductPublished = 0 
			,PublishStateId = 1 
		    WHERE PublishCatalogLogId IN (SELECT Max(PublishCatalogLogId) FROM ZnodePublishCatalogLog WHERE PublishCatalogId = @PublishCatalogId  GROUP BY PublishStateId , PublishCatalogId )
		END CATCH 
	END

GO
if exists(select * from INFORMATION_SCHEMA.COLUMNS where TABLE_NAME = 'ZnodeCMSMessage' and COLUMN_NAME = 'Message')
begin
	alter table ZnodeCMSMessage alter column [Message]        NVARCHAR (MAX) NULL
end
go
if exists(select * from sys.procedures where name = 'Znode_InsertManageMessages')
	drop proc Znode_InsertManageMessages
go
CREATE PROCEDURE [dbo].[Znode_InsertManageMessages]    
(    
 @PortalIds varchar(2000),    
 @MessageKey nvarchar(100),     
 @MessageTag nvarchar(2000)= NULL,    
 @Description nvarchar(max)=null,    
 @LocaleId int,    
 @UserId int,     
 @CMSMessageId int,     
 @CMSMessageKeyId int= 0,     
 @Status bit= 0 OUT,     
 @IsDebug bit= 0)    
AS     
 /*    
 Summary:  This procedure use for insert manage message and update on the basis of message key                      
 Unit Testing       
    SELECT * FROM ZnodePortal    
  SELECT * FROM ZnodeCMSMessageKey  WHERE messageKey = 'test111'    
  SELECT * FROM [ZnodeCMSMessage] WHERE message = 'fjkxdbjlf'    
  SELECT * FROM ZnodeCMSPortalMessage WHERE PortalId = 28    
  EXEC Znode_InsertManageMessages '29','test111','fjkxdbjlf1',1,2,0,0,0     
    
 */    
BEGIN    
 BEGIN TRAN A;    
 BEGIN TRY    
  SET NOCOUNT ON;    
  DECLARE @MessageKeyDetail int;    
     DECLARE @GetDate DATETIME = dbo.Fn_GetDate();    
  DECLARE @CMSMessageId_New int= 0;    
  DECLARE @PortalId TABLE    
  (     
  ID int, PortalId int    
  );    
  DECLARE @AreaId TABLE    
  (     
  ID int, AreaId int    
  );    
  INSERT INTO @PortalId    
      SELECT ID, ITEM    
      FROM dbo.split( @PortalIds, ',' ) AS a;     
    
  -- Insert Data into Temp table     
    
  DECLARE @InsertDetails TABLE    
  (     
  PortalId int, CMSMessageKeyId int, CMSMessageId int, MessageKey varchar(1000), Messagedescription nvarchar(max), LocaleId int    
  );    
  DECLARE @CurrentPortalAreaIds TABLE    
  (     
  PortalId int, CMSMessageKeyId int, CMSMessageId int    
  );    
  INSERT INTO @InsertDetails    
      SELECT Case when a.PortalId = 0 then null else a.PortalId end, @CMSMessageKeyId, @CMSMessageId, @MessageKey, @Description, @LocaleId    
      FROM @PortalId AS a;    
    
    
  IF EXISTS    
  (    
   SELECT TOP 1 1  FROM ZnodeCMSPortalMessage AS ZCPM  INNER JOIN    
     ZnodeCMSMessageKey AS ZCMK  ON(ZCPM.CMSMessageKeyId = ZCMK.CMSMessageKeyId)    
   WHERE EXISTS  (  SELECT TOP 1 1  FROM @InsertDetails AS TBID  WHERE ZCMK.MessageKey = @MessageKey AND  (TBID.PortalId is null or  ZCPm.PortalId = TBID.PortalId)  )    
  ) AND   @CMSMessageKeyId = 0    
  BEGIN    
   RAISERROR(15600, -1, -1, '');    
  END;     
         
  -- First check locale wise messsage are for how many portal or area    
  INSERT INTO @CurrentPortalAreaIds  SELECT PortalId, a.CMSMessageId, a.CMSMessageKeyId  FROM ZnodeCMSPortalMessage AS a    
     INNER JOIN  ZnodeCMSMessage AS b  ON(a.CMSMessageId = b.CMSMessageId)    
      WHERE a.CMSMessageKeyId = @CMSMessageKeyId AND   a.CMSMessageId = @CMSMessageId;    
  IF EXISTS    
  (    
   SELECT TOP 1 1    
   FROM ZnodeCMSPortalMessage AS a    
     INNER JOIN    
     [ZnodeCMSMessageKey] AS b    
     ON( a.CMSMessageKeyId = b.CMSMessageKeyId AND     
      b.MessageKey = @MessageKey    
       )    
     INNER JOIN    
     ZnodeCMSMessage AS c    
     ON( c.CMSMessageId = a.CMSMessageId AND     
      c.LocaleId = @LocaleId AND     
      C.Message = @Description    
       )    
   WHERE EXISTS    
   (    
    SELECT TOP 1 1    
    FROM @InsertDetails AS vc    
    WHERE vc.PortalId = a.PortalId    
   )    
  )    
  BEGIN    
   SET @MessageKeyDetail =    
   (    
    SELECT TOP 1 CMSMessageKeyId    
    FROM [dbo].[ZnodeCMSMessageKey] AS zcmk    
    WHERE zcmk.MessageKey = @MessageKey    
   );    
    
   --  RAISERROR (15600,-1,-1, ' Is Already Exists ');     
    
  END;    
  IF NOT EXISTS    
  (    
   SELECT TOP 1 1    
   FROM ZnodeCMSMessageKey    
   WHERE MessageKey = @MessageKey    
  )    
  BEGIN    
   INSERT INTO [ZnodeCMSMessageKey]( MessageKey, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )    
   VALUES( @MessageKey, @UserId, @GetDate, @UserId, @GetDate );    
    
   SET @MessageKeyDetail = SCOPE_IDENTITY();    
  END;    
  ELSE    
  BEGIN    
   SET @MessageKeyDetail =    
   (    
    SELECT CMSMessageKeyId    
    FROM [ZnodeCMSMessageKey]    
    WHERE MessageKey = @MessageKey    
   );    
   UPDATE [dbo].[ZnodeCMSMessageKey]    
     SET ModifiedBy = @UserId, ModifiedDate = @GetDate    
   WHERE MessageKey = @MessageKey;    
    
  END;    
  IF NOT EXISTS    
  (    
   SELECT TOP 1 1    
   FROM [ZnodeCMSMessage] AS zcm    
   INNER JOIN ZnodeCMSPortalMessage ZCPM ON (ZCPM.CMSMessageId = ZCM.CMSMessageId)    
   WHERE Zcm.CMSMessageId = @CMSMessageId   
   AND ((@PortalIds = '0' and ZCPM.PortalId is null ) OR (@PortalIds <>'0' and ZCPM.PortalId =  @PortalIds ))  
   --AND (@PortalIds = '0' or ZCM.[Message] = @Description)   
   AND   zcm.LocaleId = @LocaleId    
  )    
  BEGIN    
   DELETE FROM ZnodeCMSPortalMessage WHERE PortalId = @PortalIds AND CMSMessageKeyId = @CMSMessageKeyId    
      AND  CMSMessageId IN ( SELECT CMSMessageId FROM [ZnodeCMSMessage] ZCM WHERE  CMSMessageId = @CMSMessageId AND LocaleId = @LocaleId)    
    
   INSERT INTO [dbo].[ZnodeCMSMessage]( LocaleId, [Message], CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )    
   VALUES( @LocaleId, @Description, @UserId, @GetDate, @UserId, @GetDate );    
   SET @CMSMessageId_New = SCOPE_IDENTITY();    
    
  END;    
  ELSE    
  BEGIN    
   UPDATE [dbo].[ZnodeCMSMessage]    
     SET [Message] = @Description, ModifiedBy = @UserId, ModifiedDate = @GetDate    
   WHERE CMSMessageId = @CMSMessageId;    
   SET @CMSMessageId_New = @CMSMessageId;    
  END;    
  
  IF(@PortalIds = '0')  
  BEGIN  
    
  IF NOT EXISTS    
  (   
 SELECT TOP 1 1    
 FROM [ZnodeCMSPortalMessage] AS ZCPM   
 WHERE ZCPM.PortalId IS NULL AND   
 ZCPM.CMSMessageKeyId = CAST(@MessageKeyDetail AS int) AND     
    ZCPM.CMSMessageId = @CMSMessageId_NEW   
  )  
  BEGIN  
 INSERT INTO ZnodeCMSPortalMessage(PortalId, CMSMessageKeyId, CMSMessageId, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate) VALUES(NULL, CAST(@MessageKeyDetail AS int), @CMSMessageId_New, @UserId, @GetDate, @UserId, @GetDate );    
  END  
  ELSE  
  BEGIN  
 UPDATE ZnodeCMSPortalMessage  SET    
 ModifiedBy = @UserId, ModifiedDate = @GetDate  
 WHERE PortalId IS NULL AND   
 CMSMessageKeyId = CAST(@MessageKeyDetail AS int) AND     
    CMSMessageId = @CMSMessageId_NEW   
  END  
  
  IF NOT EXISTS    
  (   
 SELECT TOP 1 1    
 FROM [ZnodeCMSPortalMessageKeyTag] AS ZCPMT   
 WHERE ZCPMT.PortalId IS NULL AND   
 ZCPMT.CMSMessageKeyId = CAST(@MessageKeyDetail AS int)      
  )  
  BEGIN  
 INSERT INTO [ZnodeCMSPortalMessageKeyTag](PortalId, CMSMessageKeyId, TagXML, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate) VALUES(NULL, CAST(@MessageKeyDetail AS int), @MessageTag, @UserId, @GetDate, @UserId, @GetDate );    
  END  
  ELSE  
  BEGIN  
 UPDATE [ZnodeCMSPortalMessageKeyTag]  SET    
 TagXML = @MessageTag, ModifiedBy = @UserId, ModifiedDate = @GetDate  
 WHERE PortalId IS NULL AND   
 CMSMessageKeyId = CAST(@MessageKeyDetail AS int)      
  END  
  
  END  
  ELSE  
  BEGIN  
  MERGE INTO ZnodeCMSPortalMessage TARGET    
  USING @InsertDetails SOURCE    
  ON TARGET.PortalId = SOURCE.PortalId AND     
     TARGET.CMSMessageKeyId = CAST(@MessageKeyDetail AS int) AND     
     TARGET.CMSMessageId = @CMSMessageId_NEW    
      
  WHEN MATCHED    
     THEN UPDATE SET TARGET.CMSMessageId = @CMSMessageId_New, TARGET.ModifiedBy = @UserId, TARGET.ModifiedDate = @GetDate    
  WHEN NOT MATCHED    
     THEN INSERT(PortalId, CMSMessageKeyId, CMSMessageId, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate) VALUES(SOURCE.PortalId, CAST(@MessageKeyDetail AS int), @CMSMessageId_New, @UserId, @GetDate, @UserId, @GetDate );    
      
  MERGE INTO ZnodeCMSPortalMessageKeyTag TARGET    
  USING @InsertDetails SOURCE    
  ON TARGET.PortalId = SOURCE.PortalId AND     
     TARGET.CMSMessageKeyId = CAST(@MessageKeyDetail AS int)    
  WHEN MATCHED    
     THEN UPDATE SET TagXML = @MessageTag, ModifiedBy = @userId, ModifiedDate = @GetDate    
  WHEN NOT MATCHED    
     THEN INSERT(PortalId, CMSMessageKeyId, TagXML, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate) VALUES(SOURCE.PortalId, CAST(@MessageKeyDetail AS int), @MessageTag, @UserId, @GetDate, @UserId, @GetDate );    
    
  DELETE FROM [ZnodeCMSMessage]    
  WHERE NOT EXISTS    
  (    
   SELECT TOP 1 1    
   FROM ZnodeCMSPortalMessage AS ss    
   WHERE ss.CMSMessageId = [ZnodeCMSMessage].CMSMessageId    
  );    
    
  DELETE FROM ZnodeCMSMessageKey    
  WHERE NOT EXISTS    
  (    
   SELECT TOP 1 1    
   FROM ZnodeCMSPortalMessage AS ss    
   WHERE ss.CMSMessageKeyId = ZnodeCMSMessageKey.CMSMessageKeyId    
  ) AND     
     NOT EXISTS    
  (    
   SELECT TOP 1 1    
   FROM dbo.ZnodeCMSPortalMessageKeyTag AS ss    
   WHERE ss.CMSMessageKeyId = ZnodeCMSMessageKey.CMSMessageKeyId    
  );    
  
  END  
  
  SELECT @MessageKeyDetail AS ID, 'Successful' AS [MessageDetails], CAST(1 AS bit) AS [Status];    
  -- output paramater     
  SET @Status = 1;    
  COMMIT TRAN A;    
 END TRY    
 BEGIN CATCH    
        
       SET @Status = 0;    
       DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),     
    @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_InsertManageMessages @PortalIds = '+@PortalIds+',@MessageKey='+@MessageKey+',@MessageTag='+@MessageTag+',@Description='+@Description+',@LocaleId='+CAST(@LocaleId AS VARCHAR(50))+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@CMSMessageId='+CAST(@CMSMessageId AS VARCHAR(50))+',@CMSMessageKeyId='+CAST(@CMSMessageKeyId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));    
                      
             --SELECT 0 AS ID,CAST(0 AS BIT) AS Status;     
    SELECT @CMSMessageId AS ID, ISNULL(CAST(@MessageKeyDetail AS varchar(2000)), '')+'  Is Already Exists' AS [MessageDetails], CAST(0 AS bit) AS [Status];    
                         
       ROLLBACK TRAN A;    
             EXEC Znode_InsertProcedureErrorLog  @ProcedureName = 'Znode_InsertManageMessages',  @ErrorInProcedure = @Error_procedure,  @ErrorMessage = @ErrorMessage,  @ErrorLine = @ErrorLine,  @ErrorCall = @ErrorCall;        
 END CATCH;    
END;
GO
if exists(select * from sys.procedures where name = 'Znode_GetPublishProductJson')
	drop proc Znode_GetPublishProductJson
go
CREATE PROCEDURE [dbo].[Znode_GetPublishProductJson]
(
	 @PublishCatalogId INT = 0 
	,@PimProductId     TransferId Readonly
	,@UserId		   INT = 0	
	,@PimCatalogId     INT = 0 
	,@VersionIdString  VARCHAR(100)= ''
	,@Status		   Bit  OutPut
	,@RevisionState   Varchar(50) = ''
)
With RECOMPILE
AS
/*
DECLARE @rrte transferId 
INSERT INTO @rrte
select 1

EXEC [_POC_Znode_GetPublishProductbulk] @PublishCatalogId=9,@UserId= 2 ,@localeIDs = @rrte,@PublishStateId = 3 

*/
BEGIN
Begin Try 
	SET NOCOUNT ON;
	Set @Status = 0  
	Declare  @RevisionType VARCHAR(50) = '' 
	Declare @VersionId int = 0 
	DECLARE @PortalId INT = (SELECT TOP 1 POrtalId FROM ZnodePortalCatalog WHERE PublishCatalogId = @PublishCatalogId)
	DECLARE @PriceListId INT = (SELECT TOP 1 PriceListId FROM ZnodePriceListPortal WHERE PortalId = @PortalId )
	DECLARE @DomainUrl varchar(max) = (select TOp 1 URL FROM ZnodeMediaConfiguration WHERE IsActive =1)
	DECLARE @MaxSmallWidth INT  = (SELECT TOP 1  MAX(MaxSmallWidth) FROM ZnodeGlobalMediaDisplaySetting)
	DECLARE @PimMediaAttributeId INT = dbo.Fn_GetProductImageAttributeId()

	DECLARE @TBL_LocaleId  TABLE (RowId INT IDENTITY(1,1) PRIMARY KEY  , LocaleId INT , VersionId int,RevisionType varchar(50)  )
	DECLARE @LocaleIds transferId 

    INSERT INTO @TBL_LocaleId (LocaleId,VersionId,RevisionType)
	SELECT PV.LocaleId , PV.VersionId , PV.RevisionType  FROM ZnodePublishVersionEntity PV Inner join Split(@VersionIdString,',') S ON PV.VersionId = S.Item
	
		


	Insert into @LocaleIds  
	SELECT  LocaleId
	FROM ZnodeLocale MT 
	WHERE IsActive = 1
	
	DECLARE --@ProductNamePimAttributeId INT = dbo.Fn_GetProductNameAttributeId(),
	@DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId(),@LocaleId INT = 0 
		--,@SkuPimAttributeId  INT =  dbo.Fn_GetProductSKUAttributeId() , @IsActivePimAttributeId INT =  dbo.Fn_GetProductIsActiveAttributeId()
    DECLARE @GetDate DATETIME =dbo.Fn_GetDate()

    DECLARE @DefaultPortal int, @IsAllowIndexing int
    select @DefaultPortal = ZPC.PortalId, @IsAllowIndexing = 1 from ZnodePimCatalog ZPC Inner Join ZnodePublishCatalog ZPC1 ON ZPC.PimCatalogId = ZPC1.PimCatalogId where ZPC1.PublishCatalogId =  @PublishCatalogId and isnull(ZPC.IsAllowIndexing,0) = 1 
   
   -----delete unwanted publish data
	delete ZPC from ZnodePublishCategoryProduct ZPC
	where not exists(select * from ZnodePublishCategory ZC where ZPC.PublishCategoryId = ZC.PublishCategoryId )

	delete ZPP from ZnodePublishCategoryProduct ZPP
	where not exists(select * from ZnodePublishProduct ZP where ZPP.PublishProductId = ZP.PublishProductId )

	delete ZPP from ZnodePublishCatalogProductDetail ZPP
	where not exists(select * from ZnodePublishProduct ZP where ZPP.PublishProductId = ZP.PublishProductId )

	delete ZPCP from ZnodePublishCatalogProductDetail ZPCP
	inner join ZnodePublishProduct b on ZPCP.PublishProductId = b.PublishProductId 
	where not exists(select * from ZnodePimCategoryProduct a
	inner join ZnodePimCategoryHierarchy ZPCH on ZPCH.PimCategoryID = a.PimCategoryId 
	where b.PimProductId = A.PimProductId and ZPCP.PimCategoryHierarchyId = ZPCH.PimCategoryHierarchyId)
	and isnull(ZPCP.PimCategoryHierarchyId,0) <> 0 and b.PublishCatalogId = @PublishCatalogId
	---------


   DECLARE @Counter INT =1 ,@maxCountId INT = (SELECT max(RowId) FROM @TBL_LocaleId ) 

   CREATE TABLE #ZnodePrice (RetailPrice numeric(28,13),SalesPrice numeric(28,13),CurrencyCode varchar(100), CultureCode varchar(100), CurrencySuffix varchar(100), PublishProductId int)
	
   CREATE TABLE #ProductSKU (SEOUrl nvarchar(max), SEODescription  nvarchar(max),SEOKeywords  nvarchar(max),SEOTitle  nvarchar(max), PublishProductId int)

	create table #ProductImages (PublishProductId int, ImageSmallPath  varchar(max))

	EXEC Znode_InsertUpdateAttributeDefaultValueJson 1 
	EXEC Znode_InsertUpdateCustomeFieldJson 1 
	EXEC Znode_InsertUpdatePimAttributeJson 1 

	EXEC [Znode_InsertUpdatePimCatalogProductDetailJson] @PublishCatalogId=@PublishCatalogId,@LocaleId=@LocaleIds ,@UserId=@UserId
	

	if (@IsAllowIndexing=1)
	begin 
		insert into #ZnodePrice
		SELECT RetailPrice,SalesPrice,ZC.CurrencyCode,ZCC.CultureCode ,ZCC.Symbol CurrencySuffix,TYU.PublishProductId
		FROM ZnodePrice ZP 
		INNER JOIN ZnodePriceList ZPL ON (ZPL.PriceListId = ZP.PriceListId)
		INNER JOIN ZnodeCurrency ZC oN (ZC.CurrencyId = ZPL.CurrencyId )
		INNER JOIN ZnodeCulture ZCC ON (ZCC.CultureId = ZPL.CultureId)
		INNER JOIN ZnodePublishProductDetail TY ON (TY.SKU = ZP.SKU ) 
		INNER JOIN ZnodePublishProduct TYU ON (TYU.PublishProductId = TY.PublishProductId) 
		WHERE ZP.PriceListId = @PriceListId 
		AND TY.LocaleId = @DefaultLocaleId
		AND TYU.PublishCatalogId = @PublishCatalogId
		AND EXISTS (SELECT TOP 1 1 FROM ZnodePriceListPortal ZPLP 
		INNER JOIN ZnodePimCatalog ZPC on ZPC.PortalId=ZPLP.PortalId WHERE ZPLP.PriceListId=ZP.PriceListId )
		AND EXISTS(select * from ZnodePimProduct ZPP1 where TYU.PimProductId = ZPP1.PimProductId )
			--+ CAST(@DefaultPortal AS VARCHAr(100)) + '/'
		insert INTO #ProductImages
		SELECT  TYU.PublishProductId , @DomainUrl +'Catalog/'  + CAST(@MaxSmallWidth AS VARCHAR(100)) + '/' + RT.MediaPath AS ImageSmallPath   
		FROM ZnodePimAttributeValue ZPAV 
		INNER JOIN ZnodePublishProduct TYU ON (TYU.PimProductId  = ZPAV.PimProductId)
		INNER JOIN ZnodePimProductAttributeMedia  RT ON ( RT.PimAttributeValueId = ZPAV.PimAttributeValueId )
		WHERE  TYU.PublishCatalogId = @PublishCatalogId
		AND RT.LocaleId = @DefaultLocaleId
		AND ZPAV.PimAttributeId = (SELECT TOp 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'ProductImage')
		AND EXISTS(select * from ZnodePimProduct ZPP1 where TYU.PimProductId = ZPP1.PimProductId )
	
		insert INTO #ProductSKU 
		SELECT ZCSD.SEOUrl , ZCDL.SEODescription,ZCDL.SEOKeywords ,ZCDL.SEOTitle, TYU.PublishProductId
		FROM ZnodeCMSSEODetail ZCSD 
		INNER JOIN ZnodeCMSSEODetailLocale ZCDL ON (ZCDL.CMSSEODetailId = ZCSD.CMSSEODetailId)
		INNER JOIN ZnodePublishProductDetail TY ON (TY.SKU = ZCSD.SEOCode AND ZCDL.LocaleId = TY.LocaleId) 
		INNER JOIN ZnodePublishProduct TYU ON (TYU.PublishProductId = TY.PublishProductId)
		WHERE CMSSEOTypeId = (SELECT TOP 1 CMSSEOTypeId FROM ZnodeCMSSEOType WHERE Name = 'Product') 
		AND ZCDL.LocaleId = @DefaultLocaleId
		AND TYU.PublishCatalogId = @PublishCatalogId
		--AND ZCSD.PublishStateId = @PublishStateId
		AND ZCSD.PortalId = @DefaultPortal
		AND EXISTS(select * from ZnodePimProduct ZPP1 where TYU.PimProductId = ZPP1.PimProductId )

	end
	
	CREATE NONCLUSTERED INDEX Idx_#ProductSKU_PublishProductId
	ON [dbo].[#ProductSKU] ([PublishProductId])
	CREATE NONCLUSTERED INDEX Idx_#ProductImages_PublishProductId
	ON [dbo].#ProductImages ([PublishProductId])
	CREATE NONCLUSTERED INDEX Idx_#ZnodePrice_PublishProductId
	ON [dbo].#ZnodePrice ([PublishProductId])

	SELECT ZPP.Pimproductid,ZPCPD.LocaleId,
	--'{"Attributes":[' +
	  '[' +
			(Select STUFF((SELECT ','+ Attributes from ZnodePublishProductAttributeJson a 
			where a.pimproductid = ZPP.pimproductid and a.LocaleId = ZPCPD.LocaleId 
			FOR XML Path (''),Type).value('.', 'varchar(max)') ,1,1,'')  ) 
	+ ']'
	--']}' 
	ProductXML
	into #ProductAttributeXML
	FROM [ZnodePublishCatalogProductDetail] ZPCPD 
	INNER JOIN ZnodePublishProduct ZPP ON ZPCPD.PublishProductId = ZPP.PublishProductId and ZPCPD.PublishCatalogId = ZPP.PublishCatalogId --where TY.PimProductId = ZPP.PimProductId  AND TY.LocaleId = ZPCPD.LocaleId 
	WHERE ZPCPD.PublishCatalogId = @PublishCatalogId
	group by pimproductid,ZPCPD.LocaleId


	CREATE NONCLUSTERED INDEX Idx_#ProductAttributeXML_PimProductId_LocaleId
	ON [dbo].#ProductAttributeXML (PimProductId,LocaleId)

	DECLARE @MaxCount INT, @MinRow INT, @MaxRow INT, @Rows numeric(10,2);
			SELECT @MaxCount = COUNT(*) FROM [ZnodePublishCatalogProductDetail] WHERE PublishCatalogId = @PublishCatalogId;

			SELECT @Rows = 5000
        
			SELECT @MaxCount = CEILING(@MaxCount / @Rows);

			select PimCatalogProductDetailId, PublishProductId,Row_Number() over(Order by PublishProductId) ID into #ZnodePublishCatalogProductDetail from [ZnodePublishCatalogProductDetail] WHERE PublishCatalogId = @PublishCatalogId


		--CREATE NONCLUSTERED INDEX #ZnodePublishCatalogProductDetail

		 IF OBJECT_ID('tempdb..#Temp_ImportLoop') IS NOT NULL
             DROP TABLE #Temp_ImportLoop;
        
		 ---- To get the min and max rows for import in loop
		 ;WITH cte AS 
		 (
			SELECT RowId = 1, 
				   MinRow = 1, 
                   MaxRow = cast(@Rows as int)
            UNION ALL
            SELECT RowId + 1, 
                   MinRow + cast(@Rows as int), 
                   MaxRow + cast(@Rows as int)
            FROM cte
            WHERE RowId + 1 <= @MaxCount
		)
        SELECT RowId, MinRow, MaxRow
        INTO #Temp_ImportLoop
        FROM cte
		option (maxrecursion 0);
		



		DECLARE cur_BulkData CURSOR LOCAL FAST_FORWARD
        FOR SELECT MinRow, MaxRow, B.LocaleId ,B.VersionId, B.RevisionType
		FROM #Temp_ImportLoop L
		CROSS APPLY @TBL_LocaleId B;

        OPEN cur_BulkData;
        FETCH NEXT FROM cur_BulkData INTO  @MinRow, @MaxRow,@LocaleId,@VersionId, @RevisionType
		WHILE @@FETCH_STATUS = 0
        BEGIN
				INSERT INTO ZnodePublishProductEntity (
					VersionId, --1
					IndexId, --2 
					ZnodeProductId,ZnodeCatalogId, --3
					SKU,LocaleId, --4 
					Name,ZnodeCategoryIds, --5
					IsActive,Attributes,Brands,CategoryName, --6 
					CatalogName,DisplayOrder, --7 
					RevisionType,AssociatedProductDisplayOrder, --8
					ProductIndex,--9
					SalesPrice,RetailPrice,CultureCode,CurrencySuffix,CurrencyCode,SeoDescription,SeoKeywords,SeoTitle,SeoUrl,ImageSmallPath,SKULower)
		
				Select 
					CAST(@VersionId AS VARCHAR(50)) VersionId --1 
					,CAST(ZPCPD.ProductIndex AS VARCHAr(100)) + CAST(ISNULL(ZPCP.PublishCategoryId,'')  AS VARCHAR(50))  + CAST(Isnull(ZPCPD.PublishCatalogId ,'')  AS VARCHAR(50)) + CAST( Isnull(ZPCPD.LocaleId,'') AS VARCHAR(50)) IndexId  --2
					,CAST(ZPCPD.PublishProductId AS VARCHAR(50)) PublishProductId,CAST(ZPCPD.PublishCatalogId  AS VARCHAR(50)) PublishCatalogId  --3 
					,CAST(ISNULL(ZPCPD.SKU ,'') AS NVARCHAR(2000)) SKU,CAST( Isnull(ZPCPD.LocaleId,'') AS VARCHAR(50)) LocaleId -- 4 
					,CAST(isnull(ZPCPD.ProductName,'') AS NVARCHAR(2000) )  ProductName ,CAST(ISNULL(ZPCP.PublishCategoryId,'')  AS VARCHAR(50)) PublishCategoryId  -- 5 
					--'{"Attributes":[' + PAX.ProductXML + ']'
					,CAST(ISNULL(ZPCPD.IsActive ,'0') AS VARCHAR(50)) IsActive ,PAX.ProductXML,'[]' Brands,CAST(isnull(ZPCPD.CategoryName,'') AS NVARCHAR(2000)) CategoryName  --6
					,CAST(Isnull(ZPCPD.CatalogName,'')  AS NVARCHAR(2000)) CatalogName,CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50)) DisplayOrder  -- 7 
					,@RevisionType , 0 AssociatedProductDisplayOrder,-- pending  -- 8 
					ZPCPD.ProductIndex,  -- 9
					Case When @IsAllowIndexing = 1 then  ISNULL(CAST(TBZP.SalesPrice  AS VARCHAr(500)),'') else '' end SalesPrice , 
					Case When @IsAllowIndexing = 1 then  ISNULL(CAST(TBZP.RetailPrice  AS VARCHAr(500)),'') else '' end RetailPrice , 
					Case When @IsAllowIndexing = 1 then  ISNULL(TBZP.CultureCode ,'') else '' end CultureCode , 
					Case When @IsAllowIndexing = 1 then  ISNULL(TBZP.CurrencySuffix ,'') else '' end CurrencySuffix , 
					Case When @IsAllowIndexing = 1 then  ISNULL(TBZP.CurrencyCode ,'') else '' end CurrencyCode , 
					Case When @IsAllowIndexing = 1 then  ISNULL(TBPS.SEODescription,'') else '' end SEODescriptionForIndex,
					Case When @IsAllowIndexing = 1 then  ISNULL(TBPS.SEOKeywords,'') else '' end SEOKeywords,
					Case When @IsAllowIndexing = 1 then  ISNULL(SEOTitle,'') else '' end SEOTitle,
					Case When @IsAllowIndexing = 1 then  ISNULL(TBPS.SEOUrl ,'') else '' end SEOUrl,
					Case When @IsAllowIndexing = 1 then  ISNULL(TBPI.ImageSmallPath,'') else '' end ImageSmallPath,
					CAST(ISNULL(LOWER(ZPCPD.SKU) ,'') AS NVARCHAR(2000)) Lower_SKU
			
					FROM [ZnodePublishCatalogProductDetail] ZPCPD
					INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPCPD.PublishCatalogId)
					INNER JOIN ZnodePublishProduct ZPP ON ZPCPD.PublishProductId = ZPP.PublishProductId and ZPCPD.PublishCatalogId = ZPP.PublishCatalogId
					INNER JOIN #ProductAttributeXML PAX ON PAX.PimProductId = ZPP.PimProductId  AND PAX.LocaleId = ZPCPD.LocaleId 
					INNER JOIN #ZnodePublishCatalogProductDetail z on ZPCPD.PimCatalogProductDetailId = z.PimCatalogProductDetailId
					LEFT JOIN  #ZnodePrice TBZP ON (TBZP.PublishProductId = ZPCPD.PublishProductId)
					LEFT JOIN  #ProductSKU TBPS ON (TBPS.PublishProductId = ZPCPD.PublishProductId)
					LEFT JOIN  #ProductImages TBPI ON (TBPI.PublishProductId = ZPCPD.PublishProductId)
					LEFT JOIN  ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPCPD.PublishProductId AND ZPCP.PublishCatalogId = ZPCPD.PublishCatalogId AND ZPCP.PimCategoryHierarchyId = ZPCPD.PimCategoryHierarchyId)
					LEFT JOIN  ZnodePublishCategory ZPC ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId AND ZPCP.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId)
					LEFT JOIN  ZnodePimCategoryProduct ZPCCF ON (ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId )
					LEFT JOIN  ZnodePimCategoryHierarchy ZPCH ON (ZPCH.PimCatalogId = ZPCV.PimCatalogId AND  ZPCH.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId)
					WHERE      ZPCPD.LocaleId = @LocaleId and z.Id BETWEEN @MinRow AND @MaxRow
					AND ZPCPD.PublishCatalogId = @PublishCatalogId
					SET @VersionId = 0
			FETCH NEXT FROM cur_BulkData INTO  @MinRow, @MaxRow,@LocaleId,@VersionId, @RevisionType
        END;
		CLOSE cur_BulkData;
		DEALLOCATE cur_BulkData;


		If @RevisionState = 'PREVIEW' 
			UPDATE ZnodePimProduct SET IsProductPublish = 1,PublishStateId =  DBO.Fn_GetPublishStateIdForPreview()  
			WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePublishProduct ZPP WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId 
			AND ZPP.PublishCatalogId = @PublishCatalogId)
		Else
			UPDATE ZnodePimProduct SET IsProductPublish = 1,PublishStateId =  DBO.Fn_GetPublishStateIdForPublish()  
			WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePublishProduct ZPP WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId 
			AND ZPP.PublishCatalogId = @PublishCatalogId)
		UPDATE ZnodePublishCatalogLog 
		SET IsProductPublished = 1 
		,PublishProductId = (SELECT  COUNT(DISTINCT PublishProductId) FROM ZnodePublishCategoryProduct ZPP 
		WHERE ZPP.PublishCatalogId = ZnodePublishCatalogLog.PublishCatalogId AND ZPP.PublishCategoryId IS NOT NULL) 
		WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_LocaleId TY  WHERE  TY.VersionId =ZnodePublishCatalogLog.PublishCatalogLogId )  


		SET @Status = 1 
END TRY 
BEGIN CATCH 
	SET @Status =0  
	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
		@ErrorLine VARCHAR(100)= ERROR_LINE(),
		@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPublishProductJson 
		   @PublishCatalogId = '+CAST(@PublishCatalogId AS VARCHAR	(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))
		+',@PimCatalogId = ' + CAST(@PimCatalogId AS varchar(20))
		+',@VersionIdString= ' + CAST(@VersionIdString AS varchar(20))
		  	
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_GetPublishProductJson',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
END CATCH

END
GO
if exists(select * from sys.procedures where name = 'Znode_GetPublishProductbulk')
	drop proc Znode_GetPublishProductbulk
go
CREATE PROCEDURE [dbo].[Znode_GetPublishProductbulk]
(
@PublishCatalogId INT = 0 
,@VersionId       VARCHAR(50) = 0 
,@PimProductId    TransferId Readonly
,@UserId		  INT = 0 
,@PimCategoryHierarchyId  INT = 0 
,@PimCatalogId INT = 0 
,@LocaleIds TransferId READONLY
,@PublishStateId INT = 0 
)
With RECOMPILE
AS
/*
DECLARE @rrte transferId 
INSERT INTO @rrte
select 1

EXEC [Znode_GetPublishProductbulk] @PublishCatalogId=3,@UserId= 2 ,@localeIDs = @rrte,@PublishStateId = 3 

*/
BEGIN
	SET NOCOUNT ON;

	DECLARE @PortalId INT = (SELECT TOP 1 POrtalId FROM ZnodePortalCatalog WHERE PublishCatalogId = @PublishCatalogId)
	DECLARE @PriceListId INT = (SELECT TOP 1 PriceListId FROM ZnodePriceListPortal WHERE PortalId = @PortalId )
	DECLARE @DomainUrl varchar(max) = (select TOp 1 URL FROM ZnodeMediaConfiguration WHERE IsActive =1)
	DECLARE @MaxSmallWidth INT  = (SELECT TOP 1  MAX(MaxSmallWidth) FROM ZnodeGlobalMediaDisplaySetting)
	DECLARE @PimMediaAttributeId INT = dbo.Fn_GetProductImageAttributeId()

	DECLARE --@ProductNamePimAttributeId INT = dbo.Fn_GetProductNameAttributeId(),
	@DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId(),@LocaleId INT = 0 
		--,@SkuPimAttributeId  INT =  dbo.Fn_GetProductSKUAttributeId() , @IsActivePimAttributeId INT =  dbo.Fn_GetProductIsActiveAttributeId()
   DECLARE @GetDate DATETIME =dbo.Fn_GetDate()

   declare @DefaultPortal int, @IsAllowIndexing int
	select @DefaultPortal = ZPC.PortalId, @IsAllowIndexing = 1 from ZnodePimCatalog ZPC Inner Join ZnodePublishCatalog ZPC1 ON ZPC.PimCatalogId = ZPC1.PimCatalogId where ZPC1.PublishCatalogId =  @PublishCatalogId and isnull(ZPC.IsAllowIndexing,0) = 1 

	-----delete unwanted publish data
	delete ZPC from ZnodePublishCategoryProduct ZPC
	where not exists(select * from ZnodePublishCategory ZC where ZPC.PublishCategoryId = ZC.PublishCategoryId )

	delete ZPP from ZnodePublishCategoryProduct ZPP
	where not exists(select * from ZnodePublishProduct ZP where ZPP.PublishProductId = ZP.PublishProductId )

	delete ZPP from ZnodePublishCatalogProductDetail ZPP
	where not exists(select * from ZnodePublishProduct ZP where ZPP.PublishProductId = ZP.PublishProductId )

	delete ZPCP from ZnodePublishCatalogProductDetail ZPCP
	inner join ZnodePublishProduct b on ZPCP.PublishProductId = b.PublishProductId 
	where not exists(select * from ZnodePimCategoryProduct a
	inner join ZnodePimCategoryHierarchy ZPCH on ZPCH.PimCategoryID = a.PimCategoryId 
	where b.PimProductId = A.PimProductId and ZPCP.PimCategoryHierarchyId = ZPCH.PimCategoryHierarchyId)
	and isnull(ZPCP.PimCategoryHierarchyId,0) <> 0 and b.PublishCatalogId = @PublishCatalogId
	---------

	 DECLARE @TBL_LocaleId  TABLE (RowId INT IDENTITY(1,1) PRIMARY KEY  , LocaleId INT )
			
	INSERT INTO @TBL_LocaleId (LocaleId)
	SELECT  LocaleId
	FROM ZnodeLocale MT 
	WHERE IsActive = 1
	AND (EXISTS (SELECT TOP 1 1  FROM @LocaleIds RT WHERE RT.Id = MT.LocaleId )
	OR NOT EXISTS (SELECT TOP 1 1 FROM @LocaleIds )) 

	DECLARE @Counter INT =1 ,@maxCountId INT = (SELECT max(RowId) FROM @TBL_LocaleId ) 

	create table #ZnodePrice (RetailPrice numeric(28,13),SalesPrice numeric(28,13),CurrencyCode varchar(100), CultureCode varchar(100), CurrencySuffix varchar(100), PublishProductId int)
	
	create table #ProductSKU (SEOUrl nvarchar(max), SEODescription  nvarchar(max),SEOKeywords  nvarchar(max),SEOTitle  nvarchar(max), PublishProductId int)

	create table #ProductImages (PublishProductId int, ImageSmallPath  varchar(max))

	EXEC Znode_InsertUpdatePimAttributeXML 1 
	EXEC Znode_InsertUpdateCustomeFieldXML 1
	EXEC Znode_InsertUpdateAttributeDefaultValue 1 

	EXEC [Znode_InsertUpdatePimCatalogProductDetail] @PublishCatalogId=@PublishCatalogId,@LocaleId=@LocaleIds,@UserId=@UserId

	if (@IsAllowIndexing=1)
	begin 
		insert into #ZnodePrice
		SELECT RetailPrice,SalesPrice,ZC.CurrencyCode,ZCC.CultureCode ,ZCC.Symbol CurrencySuffix,TYU.PublishProductId
		FROM ZnodePrice ZP 
		INNER JOIN ZnodePriceList ZPL ON (ZPL.PriceListId = ZP.PriceListId)
		INNER JOIN ZnodeCurrency ZC oN (ZC.CurrencyId = ZPL.CurrencyId )
		INNER JOIN ZnodeCulture ZCC ON (ZCC.CultureId = ZPL.CultureId)
		INNER JOIN ZnodePublishProductDetail TY ON (TY.SKU = ZP.SKU ) 
		INNER JOIN ZnodePublishProduct TYU ON (TYU.PublishProductId = TY.PublishProductId) 
		WHERE ZP.PriceListId = @PriceListId 
		AND TY.LocaleId = @DefaultLocaleId
		AND TYU.PublishCatalogId = @PublishCatalogId
		AND EXISTS (SELECT TOP 1 1 FROM ZnodePriceListPortal ZPLP 
		INNER JOIN ZnodePimCatalog ZPC on ZPC.PortalId=ZPLP.PortalId WHERE ZPLP.PriceListId=ZP.PriceListId )
		AND EXISTS(select * from ZnodePimProduct ZPP1 where TYU.PimProductId = ZPP1.PimProductId )
	
		--CAST(@DefaultPortal AS VARCHAr(100)) + '/'+
		insert INTO #ProductImages
		SELECT  TYU.PublishProductId , @DomainUrl +'Catalog/'  +  CAST(@MaxSmallWidth AS VARCHAR(100)) + '/' + RT.MediaPath AS ImageSmallPath   
		FROM ZnodePimAttributeValue ZPAV 
		INNER JOIN ZnodePublishProduct TYU ON (TYU.PimProductId  = ZPAV.PimProductId)
		INNER JOIN ZnodePimProductAttributeMedia  RT ON ( RT.PimAttributeValueId = ZPAV.PimAttributeValueId )
		WHERE  TYU.PublishCatalogId = @PublishCatalogId
		AND RT.LocaleId = @DefaultLocaleId
		AND ZPAV.PimAttributeId = (SELECT TOp 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'ProductImage')
		AND EXISTS(select * from ZnodePimProduct ZPP1 where TYU.PimProductId = ZPP1.PimProductId )
	
		insert INTO #ProductSKU 
		SELECT ZCSD.SEOUrl , ZCDL.SEODescription,ZCDL.SEOKeywords ,ZCDL.SEOTitle, TYU.PublishProductId
		FROM ZnodeCMSSEODetail ZCSD 
		INNER JOIN ZnodeCMSSEODetailLocale ZCDL ON (ZCDL.CMSSEODetailId = ZCSD.CMSSEODetailId)
		INNER JOIN ZnodePublishProductDetail TY ON (TY.SKU = ZCSD.SEOCode AND ZCDL.LocaleId = TY.LocaleId) 
		INNER JOIN ZnodePublishProduct TYU ON (TYU.PublishProductId = TY.PublishProductId)
		WHERE CMSSEOTypeId = (SELECT TOP 1 CMSSEOTypeId FROM ZnodeCMSSEOType WHERE Name = 'Product') 
		AND ZCDL.LocaleId = @DefaultLocaleId
		AND TYU.PublishCatalogId = @PublishCatalogId
		--AND ZCSD.PublishStateId = @PublishStateId
		AND ZCSD.PortalId = @DefaultPortal
		AND EXISTS(select * from ZnodePimProduct ZPP1 where TYU.PimProductId = ZPP1.PimProductId )

	end
	
CREATE NONCLUSTERED INDEX Idx_#ProductSKU_PublishProductId
ON [dbo].[#ProductSKU] ([PublishProductId])


CREATE NONCLUSTERED INDEX Idx_#ProductImages_PublishProductId
ON [dbo].#ProductImages ([PublishProductId])

CREATE NONCLUSTERED INDEX Idx_#ZnodePrice_PublishProductId
ON [dbo].#ZnodePrice ([PublishProductId])



SELECT ZPP.Pimproductid,ZPCPD.LocaleId,(SELECT Attributes as AttributeEntity  from ZnodePublishProductAttributeXML a where a.pimproductid = ZPP.pimproductid and a.LocaleId = ZPCPD.LocaleId FOR XML PATH('Attributes'), TYPE)   ProductXML
into #ProductAttributeXML
FROM [ZnodePublishCatalogProductDetail] ZPCPD 
INNER JOIN ZnodePublishProduct ZPP ON ZPCPD.PublishProductId = ZPP.PublishProductId and ZPCPD.PublishCatalogId = ZPP.PublishCatalogId --where TY.PimProductId = ZPP.PimProductId  AND TY.LocaleId = ZPCPD.LocaleId 
WHERE ZPCPD.PublishCatalogId = @PublishCatalogId
group by pimproductid,ZPCPD.LocaleId


CREATE NONCLUSTERED INDEX Idx_#ProductAttributeXML_PimProductId_LocaleId
ON [dbo].#ProductAttributeXML (PimProductId,LocaleId)

DECLARE @MaxCount INT, @MinRow INT, @MaxRow INT, @Rows numeric(10,2);
		SELECT @MaxCount = COUNT(*) FROM [ZnodePublishCatalogProductDetail] WHERE PublishCatalogId = @PublishCatalogId;

		SELECT @Rows = 5000
        
		SELECT @MaxCount = CEILING(@MaxCount / @Rows);

select PimCatalogProductDetailId, PublishProductId,Row_Number() over(Order by PublishProductId) ID into #ZnodePublishCatalogProductDetail from [ZnodePublishCatalogProductDetail] WHERE PublishCatalogId = @PublishCatalogId


--CREATE NONCLUSTERED INDEX #ZnodePublishCatalogProductDetail

		IF OBJECT_ID('tempdb..#Temp_ImportLoop') IS NOT NULL
            DROP TABLE #Temp_ImportLoop;
        
		---- To get the min and max rows for import in loop
		;WITH cte AS 
		(
			SELECT RowId = 1, 
				   MinRow = 1, 
                   MaxRow = cast(@Rows as int)
            UNION ALL
            SELECT RowId + 1, 
                   MinRow + cast(@Rows as int), 
                   MaxRow + cast(@Rows as int)
            FROM cte
            WHERE RowId + 1 <= @MaxCount
		)
        SELECT RowId, MinRow, MaxRow
        INTO #Temp_ImportLoop
        FROM cte
		option (maxrecursion 0);


		DECLARE cur_BulkData CURSOR LOCAL FAST_FORWARD
        FOR SELECT MinRow, MaxRow, B.LocaleId 
		FROM #Temp_ImportLoop L
		CROSS APPLY @TBL_LocaleId B;

        OPEN cur_BulkData;
        FETCH NEXT FROM cur_BulkData INTO  @MinRow, @MaxRow,@LocaleId;

        WHILE @@FETCH_STATUS = 0
        BEGIN

			if @VersionId = 0 and @PimCatalogId <> 0
				select @VersionId = max(PublishCatalogLogId) from ZnodePublishCatalogLog 
				where PublishCatalogId = (select top 1 PublishCatalogId from ZnodePublishCatalog where PimCatalogId = @PimCatalogId )
				AND LocaleId = @LocaleId

			if @VersionId = 0 and @PublishCatalogId <> 0 and @PimCatalogId = 0
				select @VersionId = max(PublishCatalogLogId) from ZnodePublishCatalogLog where PublishCatalogId = PublishCatalogId AND LocaleId = @LocaleId

			--SET @LocaleId = 1
			--(SELECT TOP 1 LocaleId FROM @TBL_LocaleId MT 
			--WHERE  RowId = @Counter)
			--if OBJECT_ID('tempdb..#ConfigProductDetail') is not null
			--	drop table #ConfigProductDetail

			--SELECT DISTINCT ZPCPA.PimProductId, --ZPA.AttributeCode, 
			--'<SelectValues>'+STUFF((select  ' '+'<SelectValuesEntity>','<VariantDisplayOrder>'+CAST(ISNULL(ZPPTA.DisplayOrder,0) AS VARCHAR(200))+'</VariantDisplayOrder>
			--					<VariantSKU>'+ISNULL((SELECT ''+ZPAVL_SKU.AttributeValue FOR XML Path ('')) ,'')+'</VariantSKU>
			--					<VariantImagePath>'+ISNULL((SELECT ''+ZM.Path FOR XML Path ('')),'')+'</VariantImagePath></SelectValuesEntity>'  
			--			from ZnodePimProductTypeAssociation ZPPTA--YUP ON (YUP.PimProductId = ZPAV1.PimProductId)
			--				 INNER JOIN ZnodePimAttributeValue ZPAV_SKU ON(ZPPTA.PimProductId = ZPAV_SKU.PimProductId)
			--				 INNER JOIN ZnodePimAttributeValueLocale ZPAVL_SKU ON (ZPAVL_SKU.PimAttributeValueId = ZPAV_SKU.PimAttributeValueId)
			--				 inner join ZnodePimAttribute ZPA1 ON ZPA1.PimAttributeId = ZPAV_SKU.PimAttributeId
			--				 INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId =ZPAV_SKU.PimProductId)
			--				 INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON (ZPAV.PimAttributevalueid = ZPAVL.PimAttributeValueId AND ZPAVL.AttributeValue = 'True')
			--				 inner join ZnodePimAttribute ZPA2 ON ZPA2.PimAttributeId = ZPAV.PimAttributeId
			--				 LEFT  JOIN ZnodePimAttributeValue ZPAV12 ON (ZPAV12.PimProductId= ZPPTA.PimProductId  AND ZPAV12.PimAttributeId = @PimMediaAttributeId ) 
			--				 LEFT JOIN ZnodePimProductAttributeMedia ZPAVM ON (ZPAVM.PimAttributeValueId= ZPAV12.PimAttributeValueId ) 
			--				 LEFT JOIN ZnodeMedia ZM ON (ZM.MediaId = ZPAVM.MediaId)
			--			where ZPPTA.PimParentProductId = ZPCPA.PimProductId AND ZPA1.AttributeCode = 'SKU' and ZPA2.AttributeCode = 'IsActive'
			--FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</SelectValues>' ConfigDataXML
			----FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</SelectValues>' ConfigDataXML
			--into #ConfigProductDetail
			--FROM ZnodePimConfigureProductAttribute ZPCPA
			--inner join ZnodePimAttribute ZPA ON ZPA.PimAttributeId = ZPCPA.PimAttributeId
			--where exists(select * from #ZnodePublishCatalogProductDetail ZPCPD 
			--inner join ZnodePublishProduct ZPP ON ZPCPD.PublishProductId = ZPP.PublishProductId
			--where ZPCPA.PimProductId = ZPP.PimProductId and ZPCPD.Id BETWEEN @MinRow AND @MaxRow)

			INSERT INTO ZnodePublishedXml (PublishCatalogLogId
				,PublishedId
				,PublishedXML
				,IsProductXML
				,LocaleId
				,CreatedBy
				,CreatedDate
				,ModifiedBy
				,ModifiedDate
				,PublishCategoryId)
			SELECT @VersionId,ZPCPD.PublishProductId, cast(replace(replace(replace('<ProductEntity><VersionId>'+CAST(@VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+CAST(ZPCPD.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'+CAST(ISNULL(ZPCP.PublishCategoryId,'')  AS VARCHAR(50))+'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+isnull(ZPCPD.ProductName,'') FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPCPD.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKU>'+'<SKULower>'+CAST(ISNULL((SELECT ''+LOWER(ZPCPD.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPCPD.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
				+'<ZnodeCatalogId>'+CAST(ZPCPD.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCP.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +'</IsParentProducts><CategoryName>'+CAST(ISNULL((SELECT ''+isnull(ZPCPD.CategoryName,'') FOR XML PATH ('')),'') AS NVARCHAR(2000)) +'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+isnull(ZPCPD.CatalogName,'') FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</CatalogName><LocaleId>'+CAST( Isnull(ZPCPD.LocaleId,'') AS VARCHAR(50))+'</LocaleId>'
			+Case When @IsAllowIndexing = 1 then 	
				+'<RetailPrice>'+ISNULL(CAST(TBZP.RetailPrice  AS VARCHAr(500)),'')+'</RetailPrice>'
				+'<SalesPrice>'+ISNULL(CAST(TBZP.SalesPrice AS VARCHAr(500)), '') +'</SalesPrice>'
				+'<CurrencyCode>'+ISNULL(TBZP.CurrencyCode,'') +'</CurrencyCode>'
				+'<CultureCode>'+ISNULL(TBZP.CultureCode,'') +'</CultureCode>'
				+'<CurrencySuffix>'+ISNULL(TBZP.CurrencySuffix,'') +'</CurrencySuffix>'
				+'<SeoUrl>'+ISNULL(TBPS.SEOUrl,'') +'</SeoUrl>'
				+'<SeoDescription>'+ISNULL((SELECT ''+TBPS.SEODescription FOR XML PATH('') ),'') +'</SeoDescription>'
				+'<SeoKeywords>'+ISNULL((SELECT ''+TBPS.SEOKeywords FOR XML PATH('')),'') +'</SeoKeywords>'
				+'<SeoTitle>'+ISNULL((SELECT ''+SEOTitle FOR XML PATH('')),'') +'</SeoTitle>'
				+'<ImageSmallPath>'+ISNULL(TBPI.ImageSmallPath,'') +'</ImageSmallPath>'
			else '' End	
				+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
								FROM ZnodeProfile ZPFC 
								WHERE isnull(ZPFC.PimCatalogId,0) = isnull(ZPCH.PimCatalogId,0) FOR XML PATH('')),2,8000),'')+'</TempProfileIds>
				<ProductIndex>'+CAST(ZPCPD.ProductIndex AS VARCHAr(100))+'</ProductIndex><IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
				'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+cast(PAX.ProductXML as varchar(max))
				+'</ProductEntity>','&','&amp;'),'&amp;amp;','&amp;'),'&amp;amp;amp;','&amp;') as XML)  xmlvalue,1,ZPCPD.LocaleId,@UserId , @GetDate , @UserId,@GetDate,ZPCP.PublishCategoryId
			FROM [ZnodePublishCatalogProductDetail] ZPCPD
			INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPCPD.PublishCatalogId)
			INNER JOIN ZnodePublishProduct ZPP ON ZPCPD.PublishProductId = ZPP.PublishProductId and ZPCPD.PublishCatalogId = ZPP.PublishCatalogId
			inner join #ProductAttributeXML PAX ON PAX.PimProductId = ZPP.PimProductId  AND PAX.LocaleId = ZPCPD.LocaleId 
			inner join #ZnodePublishCatalogProductDetail z on ZPCPD.PimCatalogProductDetailId = z.PimCatalogProductDetailId
			LEFT JOIN #ZnodePrice TBZP ON (TBZP.PublishProductId = ZPCPD.PublishProductId)
			LEFT JOIN #ProductSKU TBPS ON (TBPS.PublishProductId = ZPCPD.PublishProductId)
			LEFT JOIN #ProductImages TBPI ON (TBPI.PublishProductId = ZPCPD.PublishProductId)
			LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPCPD.PublishProductId AND ZPCP.PublishCatalogId = ZPCPD.PublishCatalogId AND ZPCP.PimCategoryHierarchyId = ZPCPD.PimCategoryHierarchyId)
			LEFT JOIN ZnodePublishCategory ZPC ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId AND ZPCP.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId)
			LEFT JOIN ZnodePimCategoryHierarchy ZPCH ON ( ZPCH.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId AND ZPCH.PimCatalogId = ZPCV.PimCatalogId )
			LEFT JOIN ZnodePimCategoryProduct ZPCCF ON ( ZPCH.PimCategoryId = ZPCCF.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId )
			--LEFT JOIN #ConfigProductDetail CPD ON ZPP.PimProductId = CPD.PimProductId
			WHERE ZPCPD.LocaleId = @LocaleId and z.Id BETWEEN @MinRow AND @MaxRow
			AND ZPCPD.PublishCatalogId = @PublishCatalogId

			set @VersionId = 0

			FETCH NEXT FROM cur_BulkData INTO  @MinRow, @MaxRow,@LocaleId;
        END;
		CLOSE cur_BulkData;
		DEALLOCATE cur_BulkData;

	
	
END
GO
if exists(select * from sys.procedures where name = 'Znode_ImportVoucher')
	drop proc Znode_ImportVoucher
go
CREATE PROCEDURE [dbo].[Znode_ImportVoucher](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @PimCatalogId int= 0)
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import Attribute Code Name and their default input validation rule other 
	--			  flag will be inserted as default we need to modify front end
	
	-- Unit Testing: 

	--------------------------------------------------------------------------------------
BEGIN
	BEGIN TRAN Voucher;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max);
		DECLARE @GetDate datetime= dbo.Fn_GetDate(), @LocaleId int  ;
		SELECT @LocaleId = DBO.Fn_GetDefaultLocaleId();
		-- Retrive RoundOff Value from global setting 

		DECLARE @InsertVoucherData TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY,RowNumber int, StoreCode varchar(400),VoucherName varchar(600), VoucherNumber varchar(600),
			VoucherAmount varchar(600),UserName varchar(600), ExpirationDate Datetime,IsActive varchar(100),RemainingAmount varchar(600),
			RestrictVoucherToACustomer varchar(100), StartDate datetime, GUID nvarchar(400)
		);
		
		SET @SSQL = 'Select RowNumber,StoreCode, VoucherName,VoucherNumber,VoucherAmount,UserName,ExpirationDate,
						IsActive,RemainingAmount,RestrictVoucherToACustomer,StartDate,GUID FROM '+@TableName;
		INSERT INTO @InsertVoucherData( RowNumber,StoreCode, VoucherName,VoucherNumber,VoucherAmount,UserName,ExpirationDate,
										IsActive,RemainingAmount,RestrictVoucherToACustomer,StartDate,GUID)
		EXEC sys.sp_sqlexec @SSQL;

		select ANZU.UserName, ANU.Id, ZU.UserId
		into #TempUserData
		from AspNetZnodeUser ANZU 
		inner join AspNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName
		inner join ZnodeUser ZU ON ANU.Id = ZU.AspNetUserId

		update @InsertVoucherData set VoucherNumber = [dbo].[Fn_RandomString](10)
		where isnull(ltrim(rtrim(VoucherNumber)),'') = ''

		-- Start Functional Validation 
		-----------------------------------------------
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '70', 'StoreCode', StoreCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertVoucherData AS ii
			   WHERE ii.StoreCode not in 
			   (
				   SELECT StoreCode FROM ZnodePortal 
			   );

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '65', 'ExpirationDate', ExpirationDate, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertVoucherData AS ii
			   WHERE ii.ExpirationDate < ii.StartDate

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '65', 'ExpirationDate', ExpirationDate, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertVoucherData AS ii
			   WHERE ii.ExpirationDate < @GetDate

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '8', 'StartDate', StartDate, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertVoucherData AS ii
			   WHERE isnull(ii.StartDate,'') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '8', 'ExpirationDate', StartDate, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertVoucherData AS ii
			   WHERE isnull(ii.ExpirationDate,'') = ''
		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '67', 'UserName', UserName, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertVoucherData AS ii
			   WHERE isnull(ii.UserName,'') <> '' and not exists ( SELECT VoucherNumber FROM #TempUserData U where ii.UserName = U.UserName);

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '71', 'VoucherNumber', VoucherNumber, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertVoucherData AS ii
			   WHERE len(ltrim(rtrim(ii.VoucherNumber))) <> 10 
	
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '68', 'IsActive', IsActive, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM @InsertVoucherData AS ii  
			WHERE ii.IsActive not in ('True','1','Yes','FALSE','0','No','')
		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '5', 'ExpirationDate', ExpirationDate, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM @InsertVoucherData AS ii  
			WHERE isdate(ii.ExpirationDate) = 0

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '5', 'StartDate', StartDate, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM @InsertVoucherData AS ii  
			WHERE isdate(ii.StartDate) = 0

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '69', 'RemainingAmount', RemainingAmount, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM @InsertVoucherData AS ii  
			WHERE ii.VoucherAmount <> ii.RemainingAmount

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '68', 'RestrictVoucherToACustomer', RestrictVoucherToACustomer, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM @InsertVoucherData AS ii  
			WHERE ii.RestrictVoucherToACustomer not in ('True','1','Yes','FALSE','0','No','')

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT distinct '2', 'VoucherAmount', VoucherAmount, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM @InsertVoucherData AS ii  
			CROSS APPLY ZnodeCulture b
			WHERE  VoucherAmount like '%[a-z]%' or VoucherAmount like '%'+b.Symbol+'%'
			and b.Symbol is not null 

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT distinct '2', 'RemainingAmount', RemainingAmount, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM @InsertVoucherData AS ii
			CROSS APPLY ZnodeCulture b
			WHERE  RemainingAmount like '%[a-z]%' or RemainingAmount like '%'+b.Symbol+'%'
			and b.Symbol is not null 


		UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ VoucherName - ' + ISNULL(VoucherName,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN @InsertVoucherData IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL

		-- End Function Validation 	
		-----------------------------------------------
		-- Delete Invalid Data after functional validatin  
		DELETE FROM @InsertVoucherData
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
		);
		
		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM @InsertVoucherData
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount ,
		TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
		WHERE ImportProcessLogId = @ImportProcessLogId;
	
		UPDATE ZGC set ExpirationDate = ICD.ExpirationDate, UserId = @UserId, ModifiedBy = @UserId, ModifiedDate = @GetDate, IsActive = ICD.IsActive,
				RemainingAmount = ICD.RemainingAmount, RestrictToCustomerAccount = ICD.RestrictVoucherToACustomer, Name = ICD.VoucherName, StartDate = ICD.StartDate
		from ZnodeGiftCard ZGC
		inner join @InsertVoucherData ICD ON ICD.VoucherNumber = ZGC.CardNumber
		inner join ZnodePortal ZP ON ICD.StoreCode = ZP.StoreCode and ZGC.PortalId = ZP.PortalId
		left join #TempUserData ZU ON ICD.UserName = ZU.UserName

		insert into ZnodeGiftCard(PortalId,Name,CardNumber,Amount,UserId,ExpirationDate,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,IsActive,RemainingAmount,RestrictToCustomerAccount,StartDate)
		select ZP.PortalId, ICD.VoucherName, ICD.VoucherNumber, ICD.VoucherAmount, ZU.UserId, ICD.ExpirationDate, @UserId, @Getdate, @UserId, @Getdate, ICD.IsActive, ICD.RemainingAmount, ICD.RestrictVoucherToACustomer, ICD.StartDate
		From @InsertVoucherData ICD 
		inner join ZnodePortal ZP ON ICD.StoreCode = ZP.StoreCode 
		left join #TempUserData ZU ON ICD.UserName = ZU.UserName
		where not exists(select * from ZnodeGiftCard ZGC where ICD.VoucherNumber = ZGC.CardNumber )


		UPDATE ZnodeImportProcessLog
		  SET STATUS = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = Getdate()
		WHERE ImportProcessLogId = @ImportProcessLogId;
		COMMIT TRAN Voucher;
	END TRY
	BEGIN CATCH

		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = Getdate()
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN Voucher;
	END CATCH;
END;
GO
delete from ZnodeImportAttributeValidation where importheadid = (select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Voucher')
and AttributeCode = 'VoucherAmount' and AttributeTypeName = 'Number'

delete from ZnodeImportAttributeValidation where importheadid = (select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Voucher')
and AttributeCode = 'RemainingAmount' and AttributeTypeName = 'Number'

insert into ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName
,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
select 'Text','VoucherAmount',(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Voucher'),0,'Text','RegularExpression',
null,'','',null,2,getdate(),2,getdate(),null
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName ='Text' and AttributeCode = 'VoucherAmount' 
      and ControlName = 'Text' and ImportHeadId=(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Voucher')
	  and ValidationName = 'RegularExpression')

insert into ZnodeImportAttributeValidation(AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName
,ValidationValue,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
select 'Text','RemainingAmount',(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Voucher'),0,'Text','RegularExpression',
null,'','',null,2,getdate(),2,getdate(),null
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName ='Text' and AttributeCode = 'RemainingAmount' 
      and ControlName = 'Text' and ImportHeadId=(select Top 1 ImportHeadId from ZnodeImportHead where Name = 'Voucher')
	  and ValidationName = 'RegularExpression')
go
Update ZnodeActions set IsGlobalAccess = 0 WHERE ActionName = 'CreateOrder'
go
if exists(select * from sys.procedures where name = 'Znode_GetPimAttributeGroupbyFamily')
	drop proc Znode_GetPimAttributeGroupbyFamily
go
Create PROCEDURE [dbo].[Znode_GetPimAttributeGroupbyFamily]
( @PimAttributeFamilyID INT = 0,
  @IsCategory           BIT = 0,
  @LocaleId             INT = 0)
AS
/*
Summary: This procedure is used to get PimAttributeGroup order by GroupDisplayOrder
         Table variable @TBL_PimAttributeGroupbyFamily_locale consist of records related to GroupType 'Group'
		 Table variable @TBL_PimAttributeGroupbyFamily consist of records related to GroupType 'Link'
Unit Testing:
BEGIN TRAN
EXEC Znode_GetPimAttributeGroupbyFamily_New1 1,0,0
ROLLBACK TRAN

*/
     BEGIN
	    
         BEGIN TRY
			  BEGIN TRAN PimAttributeGroupbyFamily	
             SET NOCOUNT ON;
			
				 DECLARE @DefaultLocaleId INT;
				 SELECT @DefaultLocaleId = dbo.Fn_GetDefaultLocaleId();

				 IF @PimAttributeFamilyID = 0
					 BEGIN
						 SELECT @PimAttributeFamilyID = PimAttributeFamilyId FROM ZnodePimAttributeFamily  WHERE IsDefaultFamily = 1 AND IsCategory = @IsCategory;						 
					 END;

				 DECLARE @TBL_PimAttributeGroupbyFamily TABLE
				 (PimAttributeFamilyId INT,
				  GroupCode            VARCHAR(200),
				  AttributeGroupName   NVARCHAR(600),
				  PimAttributeGroupId  INT,
				  GroupDisplayOrder    INT,
				  GroupType            VARCHAR(100)
				 );

				 DECLARE @TBL_PimAttributeGroupbyFamily_locale TABLE
				 (PimAttributeFamilyId INT,
				  GroupCode            VARCHAR(200),
				  AttributeGroupName   NVARCHAR(600),
				  PimAttributeGroupId  INT,
				  GroupDisplayOrder    INT,
				  GroupType            VARCHAR(100),
				  LocaleId             INT
				 );
				 --ZPFGM.GroupDisplayOrder
				 INSERT INTO @TBL_PimAttributeGroupbyFamily_locale
				 SELECT DISTINCT ZPAF.PimAttributeFamilyId,GroupCode,AttributeGroupName,ZPAGL.PimAttributeGroupId, dbo.Fn_GetAttributeGroupDisplayOrder(ZPFGM.PimAttributeFamilyId,ZPFGM.PimAttributeGroupId) ,'Group',ZPAGL.LocaleId
				 FROM dbo.ZnodePimAttributeFamily AS ZPAF
				 INNER JOIN dbo.ZnodePimFamilyGroupMapper AS ZPFGM ON(ZPAF.PimAttributeFamilyId = ZPFGM.PimAttributeFamilyId)
				 INNER JOIN ZnodePimAttributeGroup AS ZPAG ON(ZPFGM.PimAttributeGroupId = ZPAG.PimAttributeGroupId)
				 INNER JOIN ZnodePimAttributeGroupLocale AS ZPAGL ON(ZPAG.PimAttributeGroupId = ZPAGL.PimAttributeGroupId
				 AND ZPAGL.LocaleId IN(@LocaleId, @DefaultLocaleId))
				 WHERE(ZPAF.PimAttributeFamilyId = @PimAttributeFamilyId)
				 AND ZPAF.IsCategory = @IsCategory
				 and   ZPAGL.PimAttributeGroupId  not in
						(select PimAttributeGroupId from ZnodePimAttributeGroup where GroupCode in ( 'ProductSetting','ShippingSettings') and @IsCategory = 1)
						;
				  

				 INSERT INTO @TBL_PimAttributeGroupbyFamily
				 SELECT PimAttributeFamilyId,GroupCode,AttributeGroupName,PimAttributeGroupId,GroupDisplayOrder,GroupType
				 FROM @TBL_PimAttributeGroupbyFamily_locale AS a
				 WHERE LocaleId = @LocaleId
				 UNION ALL
				 SELECT 0,Zpa.AttributeCode,Zpl.AttributeName,Zpa.PimAttributeId,NULL,'Link'
				 FROM ZnodePimAttribute AS Zpa
				 INNER JOIN ZnodePimAttributeLocale AS Zpl ON(Zpa.PimAttributeId = Zpl.PimAttributeId
				 AND zpa.IsCategory = @IsCategory
				 AND Zpl.LocaleId = @LocaleId)
				 WHERE AttributeTypeId =
				 (
					SELECT TOP 1 AttributeTypeId
					FROM ZnodeAttributeType
					WHERE AttributeTypeName = 'Link'
				 );
			
				 INSERT INTO @TBL_PimAttributeGroupbyFamily
				 SELECT PimAttributeFamilyId,GroupCode,AttributeGroupName,PimAttributeGroupId,GroupDisplayOrder,GroupType
				 FROM @TBL_PimAttributeGroupbyFamily_locale AS a
				 WHERE LocaleId = @DefaultLocaleId
				 AND NOT EXISTS
				 (
						SELECT TOP 1 1 FROM @TBL_PimAttributeGroupbyFamily AS sse WHERE sse.PimAttributeGroupId = a.PimAttributeGroupId AND sse.PimAttributeFamilyId = a.PimAttributeFamilyId																	
				 )
						UNION ALL
						SELECT 0,Zpa.AttributeCode,Zpl.AttributeName,Zpa.PimAttributeId,NULL,'Link' FROM ZnodePimAttribute AS Zpa
						INNER JOIN ZnodePimAttributeLocale AS Zpl ON(Zpa.PimAttributeId = Zpl.PimAttributeId  AND zpa.IsCategory = @IsCategory AND Zpl.LocaleId = @DefaultLocaleId)																		 																		  
						WHERE zpa.AttributeTypeId =
						(
							SELECT TOP 1 AttributeTypeId FROM ZnodeAttributeType WHERE AttributeTypeName = 'Link'														
						)
							AND NOT EXISTS
						(
							SELECT TOP 1 1 FROM @TBL_PimAttributeGroupbyFamily AS sse WHERE sse.PimAttributeGroupId = zpa.PimAttributeId AND sse.PimAttributeFamilyId = 0
						);
					 
				 SELECT PimAttributeFamilyId,GroupCode,AttributeGroupName,PimAttributeGroupId,GroupType FROM @TBL_PimAttributeGroupbyFamily				 
				 ORDER BY CASE WHEN GroupDisplayOrder IS NULL THEN 1 ELSE 0  END, GroupDisplayOrder;	
					  											  
		 COMMIT TRAN PimAttributeGroupbyFamily;			   
         END TRY
         BEGIN CATCH
		    DECLARE @STATUS BIT
            DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPimAttributeGroupbyFamily @PimAttributeFamilyID = '+CAST(@PimAttributeFamilyID AS VARCHAR(200))+',@IsCategory= '+CAST(@IsCategory AS VARCHAR(50))+',@LocaleId='+CAST(@LocaleId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(50));           
			SET @Status = 0;
            SELECT 0 AS ID, CAST(0 AS BIT) AS Status;                  
 			ROLLBACK TRAN PimAttributeGroupbyFamily;				
            EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName    = 'Znode_GetPimAttributeGroupbyFamily',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage     = @ErrorMessage,
                  @ErrorLine        = @ErrorLine,
                  @ErrorCall        = @ErrorCall;   
				                 
         END CATCH;
     END;
go
if exists(select * from sys.procedures where name = 'Znode_AdminUsers')
	drop proc Znode_AdminUsers
go
CREATE PROCEDURE [dbo].[Znode_AdminUsers]
(	@RoleName		VARCHAR(200),
    @UserName		VARCHAR(200),
    @WhereClause	XML,
    @Rows			INT           = 100,
    @PageNo			INT           = 1,
    @Order_By		VARCHAR(1000) = '',
    @RowCount		INT        = 0 OUT,
	@IsCallOnSite   BIT = 0 ,
	@PortalId		VARCHAR(1000) = 0,
	@IsGuestUser    BIT = 0,
	@ColumnName     dbo.SelectColumnList ReadOnly,
	@SalesRepUserId int = 0
)
AS
   /* 
      Summary: List of users with detsils and shows link with ASPNet tables 
      This procedure is used for finding both users and admin users 
      here use three view "View_RoleUsers" for check  @UserName is present or not 
      "View_AdminUserDetail"  this view use for admin users 
      "View_CustomerUserDetail" Use for customer users 
      Unit Testing   
	  SELECT * FROM ZnodeUser 
      DECLARE @EDE INT=0  EXEC Znode_AdminUsers '','admin@znode.com',@WhereClause='',@Order_By='',@PageNo= 1 ,@Rows= 214,@IsCallOnSite='false',@PortalId=0,@RowCount=@EDE OUT  SELECT @EDE
   */
     BEGIN
         BEGIN TRY
            SET NOCOUNT ON;
			
            DECLARE @SQL NVARCHAR(MAX)= '', @PaginationWhereClause VARCHAR(300)= dbo.Fn_GetRowsForPagination(@PageNo, @Rows, ' WHERE RowId');
           
		   IF not exists(select * from ZnodeSalesRepCustomerUserPortal where SalesRepUserId = @SalesRepUserId)
				SET @SalesRepUserId = 0

			if OBJECT_ID('tempdb..##CustomerUserAddDetail') is not null
				drop table ##CustomerUserAddDetail

			if OBJECT_ID('tempdb..##View_CustomerUserAddDetail') is not null
				drop table ##View_CustomerUserAddDetail

			IF OBJECT_ID('tempdb..#TBL_RowCount') is not null
				DROP TABLE #TBL_RowCount
			Create table #TBL_RowCount(RowsCount int )
			-----Split where clause XMl 
			CREATE TABLE #WhereColumnList(RowId Int identity, filterName varchar(max), WhereCondition varchar(max))
			insert into #WhereColumnList(filterName,WhereCondition)
			SELECT 
					Tbl.Col.value('key[1]', 'varchar(max)') as filterName,
					Tbl.Col.value('condition[1]', 'varchar(max)') WhereCondition
			FROM   @WhereClause.nodes('//filter') Tbl(Col) 
			----Address column in global search
			declare @AddressGlobalSearch varchar(1000) =''
			declare @GlobalSearch varchar(100) = ''
			
			select @GlobalSearch = substring(WhereCondition,charindex(' like ',WhereCondition), charindex(' OR ',WhereCondition)-charindex(' like ',WhereCondition)) 
			from #WhereColumnList
			where filtername like '%|%'
			and filtername <> ''
			and filterName in ('CityName','CountryName','PostalCode','StateName','CompanyName') 

			

			if isnull(@GlobalSearch,'') <> ''
			begin
				select @AddressGlobalSearch = '('+'CityName '+ @GlobalSearch+' OR '+'CountryName '+ @GlobalSearch+' OR '+'PostalCode '+ @GlobalSearch+' OR '+'StateName '+ @GlobalSearch+' OR '+'CompanyName '+ @GlobalSearch+')'
			end
			else
			begin
				SET @AddressGlobalSearch = ''
			end
			----Global search where clause
			declare @WhereClauseGlobal varchar(1000)=''
			select @WhereClauseGlobal = ISNULL(WhereCondition,'')
			from #WhereColumnList
			where filtername like '%|%'
			and filtername <> ''
			
			----Where clause columns except Address columns
			declare @WhereClause1 varchar(max) = ''
			select @WhereClause1 = COALESCE(@WhereClause1 + '', '') + WhereCondition+' And '
			--case when @WhereClause1 <> ''  then ' And ' else '' end
			from #WhereColumnList a
			where filterName not like '%|%' and
			filterName not in ('CountryName','CityName','StateName','PostalCode','CompanyName')
			and filtername <> ''

			if @WhereClause1 <> ''
			begin
				set @WhereClause1=isnull(substring(@WhereClause1,1,len(@WhereClause1)-3),'')
			end
			else
			begin
				set @WhereClause1 = ''
			end

			----Where clause columns
			declare @AddressColumnWhereClause varchar(max) 
			select @AddressColumnWhereClause = COALESCE(@AddressColumnWhereClause + '', '') + WhereCondition+' And '
			from #WhereColumnList a
			where filterName not like '%|%' and
			filterName in ('CountryName','CityName','StateName','PostalCode','CompanyName')
			and filtername <> ''
			
			if isnull(@AddressColumnWhereClause,'') <> ''
			begin
				set @AddressColumnWhereClause=isnull(substring(@AddressColumnWhereClause,1,len(@AddressColumnWhereClause)-3),'')
            end
			else
			begin
				set @AddressColumnWhereClause = ''
			end

			declare @WhereClauseAll varchar(max) = ''
			select @WhereClauseAll = COALESCE(@WhereClauseAll + '', '') + WhereCondition+' And '
			from #WhereColumnList a
			

			set @WhereClauseAll=isnull(CASE WHEN @WhereClauseAll = '' THEN '' ELSE substring(@WhereClauseAll,1,len(@WhereClauseAll)-3) END ,'')
			-------------- 
			
			IF @PortalId  <> '0' 
			BEGIN 
			    SET @WhereClauseAll = CASE WHEN  @WhereClauseAll = '' THEN ' (PortalId IN ('+@PortalId+') OR PortalId IS NULL) ' ELSE @WhereClauseAll+' AND (PortalId IN ('+@PortalId+') OR PortalId IS NULL) ' END 

				SET @WhereClause1 = CASE WHEN  @WhereClause1 = '' THEN ' (isnull(PortalId,0) IN ('+@PortalId+') OR PortalId IS NULL) ' ELSE @WhereClause1+' AND (isnull(PortalId,0) IN ('+@PortalId+') OR PortalId IS NULL) ' END 
			
			END 

			IF EXISTS ( SELECT TOP 1 1 FROM View_RoleUsers  WHERE Username = @UserName   )  AND @RoleName <> ''  
			-- this check for admin user
       		BEGIN
				SET @SQL = ' SELECT  A.UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,A.CreatedBy,A.CreatedDate,A.ModifiedBy,A.ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId ,CustomerPaymentGUID
				INTO #Cte_AdminUserDetail
				FROM View_AdminUserDetail A
				'+CASE WHEN @PortalId  <> '0' THEN ' INNER JOIN ZnodeUserPortal ZUP ON (ZUP.UserId = A.UserId) 'ELSE '' END  +'	 
				'+dbo.Fn_GetWhereClause(@WhereClauseAll, ' WHERE ')+'
				
				;with Cte_AdminUserDetailRowId AS 
				(
				SELECT UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId,CustomerPaymentGUID ,RANK()Over('+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC')+',UserId DESC) RowId
				FROM  #Cte_AdminUserDetail a
				where (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = '+cast(@SalesRepUserId as varchar(10))+' and a.UserId = SalRep.CustomerUserid) or '+cast(@SalesRepUserId as varchar(10))+' = 0)
				)
					 
				SELECT UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId,CustomerPaymentGUID ,RowId 
				INTO #AccountDetails
				FROM Cte_AdminUserDetailRowId 
					 
				SET @Count= ISNULL((SELECT  Count(1) FROM #AccountDetails ),0)
					 
				SELECT DISTINCT UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId ,CustomerPaymentGUID
				FROM #AccountDetails '+@PaginationWhereClause+' '+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC' );
				EXEC SP_executesql
				@SQL,
				N'@Count INT OUT',
				@Count = @RowCount OUT;

				
			END;
			-- For Customer user
            ELSE   
			BEGIN
				IF @roleName = ''
				BEGIN
					if OBJECT_ID('tempdb..##CustomerUserAddDetail') is not null
					drop table ##CustomerUserAddDetail

					if OBJECT_ID('tempdb..##View_CustomerUserAddDetail') is not null
					drop table ##View_CustomerUserAddDetail
				
					if OBJECT_ID('tempdb..##UserList') is not null
					drop table ##UserList

					CREATE TABLE ##UserList(UserId int,AddressID int)

					declare @UserList varchar(1000)=''

					------To get the list of user having adress column in global search
					if (@AddressGlobalSearch <> '')
					begin
				
					set @UserList = 'select a.UserId, b.AddressID	from ZnodeUserAddress a	inner join ZnodeAddress b on a.AddressId = b.AddressId	where '+@AddressGlobalSearch
					--print @UserList
					insert into ##UserList(UserId, b.AddressID)
					exec (@UserList)
			
					end
					----To get the list of user having adress column in where clause 
					if (@AddressColumnWhereClause <> '')
					begin
					
					set @UserList = 'select a.UserId, b.AddressID	from ZnodeUserAddress a	inner join ZnodeAddress b on a.AddressId = b.AddressId	where '+@AddressColumnWhereClause
					--print @UserList
					insert into ##UserList(UserId,AddressID)
					exec (@UserList)
					
					end

					If @IsGuestUser= 0 
					AND
					NOT Exists (Select filterName from #WhereColumnList where filterName in ('accountid','isaccountcustomer','UserId') and filtername <> '')
					-- Customer List with GuestUsers
					Begin
						SET @SQL = 
							'SELECT a.userId,a.AspNetuserId,a.UserName,a.FirstName,a.MiddleName,a.LastName
							,a.PhoneNumber,
							 a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
							 CONVERT( DATE, a.ModifiedDate) ModifiedDate, 0 RoleId,''''  RoleName,
							 (ISNULL(RTRIM(LTRIM(a.FirstName)), '''')+'' ''+ISNULL(RTRIM(LTRIM(a.MiddleName)), '''')+CASE
							 WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '''') = ''''	THEN ''''
							 ELSE '' ''	END+ISNULL(RTRIM(LTRIM(a.LastName)), ''''))  FullName
							 ,a.AccountId, '''' TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser
							 into ##View_CustomerUserAddDetail
							 FROM ZnodeUser a
							 Where a.AspNetUserId IS NOT NULL
							' 
						
						
						EXEC (@SQL)
					End	
					Else If @IsGuestUser= 1 
					Begin
							SET @SQL='SELECT a.userId,a.AspNetuserId,a.UserName,a.FirstName,a.MiddleName,a.LastName
							,a.PhoneNumber,
							a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
							CONVERT( DATE, a.ModifiedDate) ModifiedDate,ur.RoleId,r.Name RoleName,
							(ISNULL(RTRIM(LTRIM(a.FirstName)), '''')+'' ''+ISNULL(RTRIM(LTRIM(a.MiddleName)), '''')+CASE
							WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '''') = '''' THEN '''' ELSE '' '' END+ISNULL(RTRIM(LTRIM(a.LastName)), '''')) FullName,
							a.AccountId,r.TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser
							into ##View_CustomerUserAddDetail
							FROM ZnodeUser a
							LEFT JOIN AspNetUserRoles ur ON(ur.UserId = a.AspNetUserId)
							LEFT JOIN AspNetRoles r ON(r.Id = ur.RoleId)                       
							LEFT JOIN ZnodePortalAccount ZPA ON(ZPA.AccountId = a.AccountId) 
							WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeUSer ZUQ WHERE ZUQ.UserId = a.UserId AND ZUQ.EmailOptIn = 1 AND ZUQ.AspNetUserId IS NULL )
							AND a.AspNetuserId is null
							AND (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = '+cast(@SalesRepUserId as varchar(10))+' and a.UserId = SalRep.CustomerUserid) or '+cast(@SalesRepUserId as varchar(10))+' = 0)'
						EXEC (@SQL)
					End
					Else IF Exists (Select filterName from #WhereColumnList where filterName in ('UserId') and filtername <> '')
					and  @IsGuestUser= 0   
					-- Customer List for user edit single user 
					Begin
					SET @SQL='SELECT a.userId,a.AspNetuserId,a.UserName,a.FirstName,a.MiddleName,a.LastName
					,a.PhoneNumber, a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
							CONVERT( DATE, a.ModifiedDate) ModifiedDate,ur.RoleId,r.Name RoleName,
							(ISNULL(RTRIM(LTRIM(a.FirstName)), '''')+'' ''+ISNULL(RTRIM(LTRIM(a.MiddleName)), '''')+CASE
							WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '''') = '''' THEN '''' ELSE '' '' END+ISNULL(RTRIM(LTRIM(a.LastName)), '''')) FullName,
							a.AccountId, r.TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser
							into ##View_CustomerUserAddDetail
							FROM ZnodeUser a
							LEFT JOIN ZnodeAccount e ON(e.AccountId = a.AccountId)
							LEFT JOIN AspNetUserRoles ur ON(ur.UserId = a.AspNetUserId)
							LEFT JOIN AspNetRoles r ON(r.Id = ur.RoleId)                       
							LEFT JOIN ZnodePortalAccount ZPA ON(ZPA.AccountId = a.AccountId) 
							WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeUSer ZUQ WHERE ZUQ.UserId = a.UserId AND ZUQ.EmailOptIn = 1 AND ZUQ.AspNetUserId IS NULL )
							and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = '+cast(@SalesRepUserId as varchar(10))+' and a.UserId = SalRep.CustomerUserid) or '+cast(@SalesRepUserId as varchar(10))+' = 0)'
						print @SQL
						
						EXEC (@SQL)
					End	
					Else -- Account user List 
					Begin
							SELECT a.userId,a.AspNetuserId,a.UserName,a.PhoneNumber,a.FirstName,a.MiddleName,a.LastName
							,a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
							CONVERT( DATE, a.ModifiedDate) ModifiedDate,ur.RoleId,r.Name RoleName,
						    (ISNULL(RTRIM(LTRIM(a.FirstName)), '')+' '+ISNULL(RTRIM(LTRIM(a.MiddleName)), '')+CASE
							WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '') = '' THEN '' ELSE ' ' END+ISNULL(RTRIM(LTRIM(a.LastName)), '')) FullName,
							a.AccountId, r.TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser
							into ##View_CustomerUserAddDetail
							FROM ZnodeUser a
							LEFT JOIN ZnodeAccount e ON(e.AccountId = a.AccountId)
							LEFT JOIN AspNetUserRoles ur ON(ur.UserId = a.AspNetUserId)
							LEFT JOIN AspNetRoles r ON(r.Id = ur.RoleId)                       
							LEFT JOIN ZnodePortalAccount ZPA ON(ZPA.AccountId = a.AccountId) 
							WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeUSer ZUQ WHERE ZUQ.UserId = a.UserId AND ZUQ.EmailOptIn = 1 AND ZUQ.AspNetUserId IS NULL )
							and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = @SalesRepUserId and a.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)
					End
					
					alter table ##View_CustomerUserAddDetail 
					add StoreName varchar(1000), CountryName varchar(1000),CityName varchar(1000),StateName varchar(1000),
					PostalCode varchar(1000), CompanyName varchar(1000), SalesRepUserName varchar(600),SalesRepFullName varchar(1000), PortalId INT 

					IF @PortalId <> '0' 
					BEGIN 
					   UPDATE a SET a.PortalId = b.PortalId
					   FROM ##View_CustomerUserAddDetail a 
					   INNER JOIN ZnodeUserPortal b ON (b.Userid = a.Userid )
					END 

					IF (@WhereClauseAll like '%StoreName%' or @Order_By like '%StoreName%' )
					BEGIN
						CREATE NONCLUSTERED INDEX ##View_CustomerUserAddDetail_UserId
					   ON [dbo].[##View_CustomerUserAddDetail] ([userId])

						update  a set StoreName = CASE WHEN zp.StoreName IS NULL THEN 'ALL' ELSE zp.StoreName END 
						             -- , PortalId = up.PortalId
						from ##View_CustomerUserAddDetail a
						Left join  ZnodeUserPortal up ON(up.UserId = a.UserId)  
						Left JOIN ZnodePortal zp ON (up.PortalId = zp.PortalId)
							
					END
					
					IF (@WhereClauseAll like '%CountryName%' OR @WhereClauseAll like '%CityName%' OR @WhereClauseAll like '%StateName%' OR @WhereClauseAll like '%PostalCode%' OR @WhereClauseAll like '%CompanyName%')
					BEGIN
			 
						update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
						PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName
						from ##View_CustomerUserAddDetail a
						inner join ZnodeAccountAddress ZAA on a.AccountId = ZAA.AccountId
						inner  JOIN ZnodeAddress ZA on ZA.AddressId = ZAA.AddressId
						where isnull(a.AccountId,0)<> 0-- is not null
	 
						update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
						PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName
						from ##View_CustomerUserAddDetail a
						inner join ZnodeUserAddress ZUA on a.UserId = ZUA.UserId
						inner  JOIN ZnodeAddress ZA on ZA.AddressId = zua.AddressId
					END

					set @Rows = @PageNo * @Rows

					SET @SQL = '			
						
						create table #AccountDetail
						(
							UserId int,AspNetuserId nvarchar(200),UserName nvarchar(200),FirstName varchar(200),MiddleName varchar(200),LastName varchar(200),
							PhoneNumber nvarchar(100),Email nvarchar(100),EmailOptIn bit,CreatedBy int,CreatedDate datetime,ModifiedBy int,ModifiedDate datetime,
							RoleId varchar(200),RoleName varchar(200), FullName  varchar(1000),
							StoreName varchar(200),CountryName varchar(200), CityName varchar(200), StateName varchar(200), PostalCode varchar(200), CompanyName varchar(200)
							,AccountId int,SalesRepUserName varchar(200),SalesRepFullName varchar(200) ,RowId int identity 
						) 
						'+
						+' insert into #AccountDetail(UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,FullName,
						StoreName, CountryName, CityName, StateName, PostalCode, CompanyName,AccountId)
						SELECT top '+cast(@Rows as varchar(10))+'UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,FullName,
						StoreName, CountryName, CityName, StateName, PostalCode, CompanyName,AccountId
						FROM ##View_CustomerUserAddDetail where 1=1'+
						dbo.Fn_GetWhereClause(case when @WhereClauseGlobal<>'' and @WhereClause1 <> '' then @WhereClauseGlobal+' And '+@WhereClause1 else @WhereClauseAll end, ' AND ')+
						dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC') + '
			
						Insert Into #TBL_RowCount 
						SELECT count(*)
						FROM ##View_CustomerUserAddDetail where 1=1'+
						dbo.Fn_GetWhereClause(case when @WhereClauseGlobal<>'' and @WhereClause1 <> '' then @WhereClauseGlobal+' And '+@WhereClause1 else @WhereClauseAll end, ' AND ')
						+'
						
						SELECT  UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,FullName,
						StoreName,AccountId,
						CountryName, CityName, StateName, PostalCode, CompanyName, SalesRepUserName, SalesRepFullName
						,Row_Number()Over('+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC')+')  RowNumber
						into ##CustomerUserAddDetail
						FROM #AccountDetail '+@PaginationWhereClause  +' '+ dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC');

						print @SQL
					EXEC (@SQL)

					Select @RowCount= isnull(RowsCount,0) from #TBL_RowCount

					ALTER TABLE ##CustomerUserAddDetail ADD AddressId Int

					------To get data for StoreName
						update  a set StoreName = CASE WHEN zp.StoreName IS NULL THEN 'ALL' ELSE zp.StoreName END 
						from ##CustomerUserAddDetail a
						Left join  ZnodeUserPortal up ON(up.UserId = a.UserId)  
						Left JOIN ZnodePortal zp ON (up.PortalId = zp.PortalId)

	
					----To get data for CountryName, CityName, StateName, PostalCode, CompanyName
					IF (EXISTS(SELECT * FROM @ColumnName where ([StringColumn] LIKE '%CountryName%' OR [StringColumn] LIKE '%CityName%' OR [StringColumn] LIKE '%StateName%' OR [StringColumn] LIKE '%PostalCode%' OR [StringColumn] LIKE '%CompanyName%'))
					OR (@WhereClauseAll like '%CountryName%' OR @WhereClauseAll like '%CityName%' OR @WhereClauseAll like '%StateName%' OR @WhereClauseAll like '%PostalCode%' OR @WhereClauseAll like '%CompanyName%'))
					BEGIN
			 
						update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
						PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName, a.AddressId = ZA.AddressId
						from ##CustomerUserAddDetail a
						inner join ZnodeAccountAddress ZAA on a.AccountId = ZAA.AccountId
						inner  JOIN ZnodeAddress ZA on ZA.AddressId = ZAA.AddressId
						where isnull(a.AccountId,0)<> 0-- is not null
	 
						update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
						PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName, a.AddressId = ZA.AddressId
						from ##CustomerUserAddDetail a
						inner join ZnodeUserAddress ZUA on a.UserId = ZUA.UserId
						inner  JOIN ZnodeAddress ZA on ZA.AddressId = zua.AddressId
					END

					
					----Updating SalesRep for user if any 
					update CUAD
					set CUAD.SalesRepUserName = ZU.UserName, 
					CUAD.SalesRepFullName = (ISNULL(RTRIM(LTRIM(ZU.FirstName)), '')+' '+ISNULL(RTRIM(LTRIM(ZU.MiddleName)), '')
					+CASE
					WHEN ISNULL(RTRIM(LTRIM(ZU.MiddleName)), '') = ''
					THEN ''
					ELSE ' '
					END+ISNULL(RTRIM(LTRIM(ZU.LastName)), '')) 
					from ##CustomerUserAddDetail CUAD
					inner join ZnodeSalesRepCustomerUserPortal SRCUP ON CUAD.UserId = SRCUP.CustomerUserid 
					inner join ZnodeUser ZU ON SRCUP.SalesRepUserId = ZU.UserId

					if ( exists(select * from ##UserList) OR @AddressColumnWhereClause <> '')
					begin
						SELECT UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,
						FullName,
						StoreName,
						CountryName, CityName, StateName, PostalCode, CompanyName, SalesRepUserName, SalesRepFullName
						from ##CustomerUserAddDetail CUAD
						where exists(select * from ##UserList UL where CUAD.UserId = UL.UserId and CUAD.AddressId = UL.AddressID )
						Order by RowNumber
					end
					else
					begin
						SELECT UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,
						FullName,
						StoreName,
						CountryName, CityName, StateName, PostalCode, CompanyName, SalesRepUserName, SalesRepFullName
						from ##CustomerUserAddDetail
						Order by RowNumber
					end
	
					if OBJECT_ID('tempdb..##CustomerUserAddDetail') is not null
					drop table ##CustomerUserAddDetail

					if OBJECT_ID('tempdb..##View_CustomerUserAddDetail') is not null
					drop table ##View_CustomerUserAddDetail
				
				END;
            ELSE
				BEGIN
					SELECT * FROM View_CustomerUserDetail AS VICUD WHERE 1 = 0;
					SET @RowCount = 0;
				END;
            END;			
         END TRY
         BEGIN CATCH
           --SELECT ERROR_MESSAGE()
		   DECLARE @ERROR_PROCEDURE VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_AdminUsers @RoleName = '+@RoleName+' ,@UserName='+@UserName+',@WhereClause='+cast(@WhereClause as varchar(max))+' ,@Rows= '+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_By='+@Order_By+',@RowCount='+CAST(@RowCount AS VARCHAR(50));
            EXEC Znode_InsertProcedureErrorLog
            @ProcedureName    = 'Znode_AdminUsers',
            @ErrorInProcedure = @ERROR_PROCEDURE,
            @ErrorMessage     = @ErrorMessage,
            @ErrorLine        = @ErrorLine,
            @ErrorCall        = @ErrorCall;
         END CATCH;


     END;
go

delete from ZnodeRoleMenuAccessMapper
where RoleMenuId in (select RoleMenuId from ZnodeRoleMenu 
	where RoleId = (select top 1 ID from AspNetRoles where Name = 'Sales Rep') and
	exists ( select * from ZnodeMenu where MenuName not in ('OMS','Customers','Dashboard','Users','Returns','Quotes','Pending Payment','Vouchers','Pending Orders','Orders')
	and ZnodeRoleMenu.MenuId = ZnodeMenu.MenuId))

delete from ZnodeRoleMenu 
where RoleId = (select top 1 ID from AspNetRoles where Name = 'Sales Rep') and
	exists ( select * from ZnodeMenu where MenuName not in ('OMS','Customers','Dashboard','Users','Returns','Quotes','Pending Payment','Vouchers','Pending Orders','Orders')
	and ZnodeRoleMenu.MenuId = ZnodeMenu.MenuId)

declare @TempTable table (Id int)

insert into @TempTable
select 1
Union all
select 2
Union all
select 3
Union all
select 4

Insert into ZnodeRoleMenu(RoleId,MenuId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
Select (select top 1 Id from AspNetRoles where Name = 'Sales Rep'),
	(select top 1 MenuId from ZnodeMenu where MenuName = 'Orders'),
	2,Getdate(),2,Getdate()
Where not exists(select * from ZnodeRoleMenu where RoleId = (select top 1 Id from AspNetRoles where Name = 'Sales Rep')
AND MenuId=(select top 1 MenuId from ZnodeMenu where MenuName = 'Orders'))

Insert Into ZnodeRoleMenuAccessMapper(RoleMenuId,AccessPermissionId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select (select top 1 RoleMenuId from ZnodeRoleMenu where RoleId = (select top 1 Id from AspNetRoles where Name = 'Sales Rep')
	AND MenuId=(select top 1 MenuId from ZnodeMenu where MenuName = 'Orders')), a.Id, 2, getdate(),2,getdate()
from @TempTable a
where not exists(select * from ZnodeRoleMenuAccessMapper b where RoleMenuId = 
(select top 1 RoleMenuId from ZnodeRoleMenu where RoleId = (select top 1 Id from AspNetRoles where Name = 'Sales Rep')
	AND MenuId=(select top 1 MenuId from ZnodeMenu where MenuName = 'Orders')) and b.AccessPermissionId = a.Id)

Insert into ZnodeRoleMenu(RoleId,MenuId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
Select (select top 1 Id from AspNetRoles where Name = 'Sales Rep'),
	(select top 1 MenuId from ZnodeMenu where MenuName = 'Pending Orders'),
	2,Getdate(),2,Getdate()
Where not exists(select * from ZnodeRoleMenu where RoleId = (select top 1 Id from AspNetRoles where Name = 'Sales Rep')
AND MenuId=(select top 1 MenuId from ZnodeMenu where MenuName = 'Pending Orders'))

Insert Into ZnodeRoleMenuAccessMapper(RoleMenuId,AccessPermissionId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select (select top 1 RoleMenuId from ZnodeRoleMenu where RoleId = (select top 1 Id from AspNetRoles where Name = 'Sales Rep')
	AND MenuId=(select top 1 MenuId from ZnodeMenu where MenuName = 'Pending Orders')), a.Id, 2, getdate(),2,getdate()
from @TempTable a
where not exists(select * from ZnodeRoleMenuAccessMapper b where RoleMenuId = 
(select top 1 RoleMenuId from ZnodeRoleMenu where RoleId = (select top 1 Id from AspNetRoles where Name = 'Sales Rep')
	AND MenuId=(select top 1 MenuId from ZnodeMenu where MenuName = 'Pending Orders')) and b.AccessPermissionId = a.Id)

Insert into ZnodeRoleMenu(RoleId,MenuId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
Select (select top 1 Id from AspNetRoles where Name = 'Sales Rep'),
	(select top 1 MenuId from ZnodeMenu where MenuName = 'Vouchers'),
	2,Getdate(),2,Getdate()
Where not exists(select * from ZnodeRoleMenu where RoleId = (select top 1 Id from AspNetRoles where Name = 'Sales Rep')
AND MenuId=(select top 1 MenuId from ZnodeMenu where MenuName = 'Vouchers'))

Insert Into ZnodeRoleMenuAccessMapper(RoleMenuId,AccessPermissionId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select (select top 1 RoleMenuId from ZnodeRoleMenu where RoleId = (select top 1 Id from AspNetRoles where Name = 'Sales Rep')
	AND MenuId=(select top 1 MenuId from ZnodeMenu where MenuName = 'Vouchers')), a.Id, 2, getdate(),2,getdate()
from @TempTable a
where not exists(select * from ZnodeRoleMenuAccessMapper b where RoleMenuId = 
(select top 1 RoleMenuId from ZnodeRoleMenu where RoleId = (select top 1 Id from AspNetRoles where Name = 'Sales Rep')
	AND MenuId=(select top 1 MenuId from ZnodeMenu where MenuName = 'Vouchers')) and b.AccessPermissionId = a.Id)

Insert into ZnodeRoleMenu(RoleId,MenuId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
Select (select top 1 Id from AspNetRoles where Name = 'Sales Rep'),
	(select top 1 MenuId from ZnodeMenu where MenuName = 'Pending Payment'),
	2,Getdate(),2,Getdate()
Where not exists(select * from ZnodeRoleMenu where RoleId = (select top 1 Id from AspNetRoles where Name = 'Sales Rep')
AND MenuId=(select top 1 MenuId from ZnodeMenu where MenuName = 'Pending Payment'))

Insert Into ZnodeRoleMenuAccessMapper(RoleMenuId,AccessPermissionId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select (select top 1 RoleMenuId from ZnodeRoleMenu where RoleId = (select top 1 Id from AspNetRoles where Name = 'Sales Rep')
	AND MenuId=(select top 1 MenuId from ZnodeMenu where MenuName = 'Pending Payment')), a.Id, 2, getdate(),2,getdate()
from @TempTable a
where not exists(select * from ZnodeRoleMenuAccessMapper b where RoleMenuId = 
(select top 1 RoleMenuId from ZnodeRoleMenu where RoleId = (select top 1 Id from AspNetRoles where Name = 'Sales Rep')
	AND MenuId=(select top 1 MenuId from ZnodeMenu where MenuName = 'Pending Payment')) and b.AccessPermissionId = a.Id)

Insert into ZnodeRoleMenu(RoleId,MenuId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
Select (select top 1 Id from AspNetRoles where Name = 'Sales Rep'),
	(select top 1 MenuId from ZnodeMenu where MenuName = 'Quotes'),
	2,Getdate(),2,Getdate()
Where not exists(select * from ZnodeRoleMenu where RoleId = (select top 1 Id from AspNetRoles where Name = 'Sales Rep')
AND MenuId=(select top 1 MenuId from ZnodeMenu where MenuName = 'Quotes'))

Insert Into ZnodeRoleMenuAccessMapper(RoleMenuId,AccessPermissionId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select (select top 1 RoleMenuId from ZnodeRoleMenu where RoleId = (select top 1 Id from AspNetRoles where Name = 'Sales Rep')
	AND MenuId=(select top 1 MenuId from ZnodeMenu where MenuName = 'Quotes')), a.Id, 2, getdate(),2,getdate()
from @TempTable a
where not exists(select * from ZnodeRoleMenuAccessMapper b where RoleMenuId = 
(select top 1 RoleMenuId from ZnodeRoleMenu where RoleId = (select top 1 Id from AspNetRoles where Name = 'Sales Rep')
	AND MenuId=(select top 1 MenuId from ZnodeMenu where MenuName = 'Quotes')) and b.AccessPermissionId = a.Id)

Insert into ZnodeRoleMenu(RoleId,MenuId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
Select (select top 1 Id from AspNetRoles where Name = 'Sales Rep'),
	(select top 1 MenuId from ZnodeMenu where MenuName = 'Returns'),
	2,Getdate(),2,Getdate()
Where not exists(select * from ZnodeRoleMenu where RoleId = (select top 1 Id from AspNetRoles where Name = 'Sales Rep')
AND MenuId=(select top 1 MenuId from ZnodeMenu where MenuName = 'Returns'))

Insert Into ZnodeRoleMenuAccessMapper(RoleMenuId,AccessPermissionId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select (select top 1 RoleMenuId from ZnodeRoleMenu where RoleId = (select top 1 Id from AspNetRoles where Name = 'Sales Rep')
	AND MenuId=(select top 1 MenuId from ZnodeMenu where MenuName = 'Returns')), a.Id, 2, getdate(),2,getdate()
from @TempTable a
where not exists(select * from ZnodeRoleMenuAccessMapper b where RoleMenuId = 
(select top 1 RoleMenuId from ZnodeRoleMenu where RoleId = (select top 1 Id from AspNetRoles where Name = 'Sales Rep')
	AND MenuId=(select top 1 MenuId from ZnodeMenu where MenuName = 'Returns')) and b.AccessPermissionId = a.Id)

Insert into ZnodeRoleMenu(RoleId,MenuId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
Select (select top 1 Id from AspNetRoles where Name = 'Sales Rep'),
	(select top 1 MenuId from ZnodeMenu where MenuName = 'Users'),
	2,Getdate(),2,Getdate()
Where not exists(select * from ZnodeRoleMenu where RoleId = (select top 1 Id from AspNetRoles where Name = 'Sales Rep')
AND MenuId=(select top 1 MenuId from ZnodeMenu where MenuName = 'Users'))

Insert Into ZnodeRoleMenuAccessMapper(RoleMenuId,AccessPermissionId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select (select top 1 RoleMenuId from ZnodeRoleMenu where RoleId = (select top 1 Id from AspNetRoles where Name = 'Sales Rep')
	AND MenuId=(select top 1 MenuId from ZnodeMenu where MenuName = 'Users')), a.Id, 2, getdate(),2,getdate()
from @TempTable a
where not exists(select * from ZnodeRoleMenuAccessMapper b where RoleMenuId = 
(select top 1 RoleMenuId from ZnodeRoleMenu where RoleId = (select top 1 Id from AspNetRoles where Name = 'Sales Rep')
	AND MenuId=(select top 1 MenuId from ZnodeMenu where MenuName = 'Users')) and b.AccessPermissionId = a.Id)

Insert into ZnodeRoleMenu(RoleId,MenuId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
Select (select top 1 Id from AspNetRoles where Name = 'Sales Rep'),
	(select top 1 MenuId from ZnodeMenu where MenuName = 'Customers'),
	2,Getdate(),2,Getdate()
Where not exists(select * from ZnodeRoleMenu where RoleId = (select top 1 Id from AspNetRoles where Name = 'Sales Rep')
AND MenuId=(select top 1 MenuId from ZnodeMenu where MenuName = 'Customers'))

Insert Into ZnodeRoleMenuAccessMapper(RoleMenuId,AccessPermissionId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select (select top 1 RoleMenuId from ZnodeRoleMenu where RoleId = (select top 1 Id from AspNetRoles where Name = 'Sales Rep')
	AND MenuId=(select top 1 MenuId from ZnodeMenu where MenuName = 'Customers')), a.Id, 2, getdate(),2,getdate()
from @TempTable a
where not exists(select * from ZnodeRoleMenuAccessMapper b where RoleMenuId = 
(select top 1 RoleMenuId from ZnodeRoleMenu where RoleId = (select top 1 Id from AspNetRoles where Name = 'Sales Rep')
	AND MenuId=(select top 1 MenuId from ZnodeMenu where MenuName = 'Customers')) and b.AccessPermissionId = a.Id)

Insert into ZnodeRoleMenu(RoleId,MenuId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
Select (select top 1 Id from AspNetRoles where Name = 'Sales Rep'),
	(select top 1 MenuId from ZnodeMenu where MenuName = 'OMS'),
	2,Getdate(),2,Getdate()
Where not exists(select * from ZnodeRoleMenu where RoleId = (select top 1 Id from AspNetRoles where Name = 'Sales Rep')
AND MenuId=(select top 1 MenuId from ZnodeMenu where MenuName = 'OMS'))

Insert Into ZnodeRoleMenuAccessMapper(RoleMenuId,AccessPermissionId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select (select top 1 RoleMenuId from ZnodeRoleMenu where RoleId = (select top 1 Id from AspNetRoles where Name = 'Sales Rep')
	AND MenuId=(select top 1 MenuId from ZnodeMenu where MenuName = 'OMS')), a.Id, 2, getdate(),2,getdate()
from @TempTable a
where not exists(select * from ZnodeRoleMenuAccessMapper b where RoleMenuId = 
(select top 1 RoleMenuId from ZnodeRoleMenu where RoleId = (select top 1 Id from AspNetRoles where Name = 'Sales Rep')
	AND MenuId=(select top 1 MenuId from ZnodeMenu where MenuName = 'OMS')) and b.AccessPermissionId = a.Id)


Insert into ZnodeRoleMenu(RoleId,MenuId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
Select (select top 1 Id from AspNetRoles where Name = 'Sales Rep'),
	(select top 1 MenuId from ZnodeMenu where MenuName = 'Dashboard'),
	2,Getdate(),2,Getdate()
Where not exists(select * from ZnodeRoleMenu where RoleId = (select top 1 Id from AspNetRoles where Name = 'Sales Rep')
AND MenuId=(select top 1 MenuId from ZnodeMenu where MenuName = 'Dashboard'))

Insert Into ZnodeRoleMenuAccessMapper(RoleMenuId,AccessPermissionId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select (select top 1 RoleMenuId from ZnodeRoleMenu where RoleId = (select top 1 Id from AspNetRoles where Name = 'Sales Rep')
	AND MenuId=(select top 1 MenuId from ZnodeMenu where MenuName = 'Dashboard')), a.Id, 2, getdate(),2,getdate()
from @TempTable a
where not exists(select * from ZnodeRoleMenuAccessMapper b where RoleMenuId = 
(select top 1 RoleMenuId from ZnodeRoleMenu where RoleId = (select top 1 Id from AspNetRoles where Name = 'Sales Rep')
	AND MenuId=(select top 1 MenuId from ZnodeMenu where MenuName = 'Dashboard')) and b.AccessPermissionId = a.Id)

Insert into ZnodeRoleMenu(RoleId,MenuId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
Select (select top 1 Id from AspNetRoles where Name = 'Sales Rep'),
	(select top 1 MenuId from ZnodeMenu where MenuName = 'Quotes'),
	2,Getdate(),2,Getdate()
Where not exists(select * from ZnodeRoleMenu where RoleId = (select top 1 Id from AspNetRoles where Name = 'Sales Rep')
AND MenuId=(select top 1 MenuId from ZnodeMenu where MenuName = 'Quotes'))

Insert Into ZnodeRoleMenuAccessMapper(RoleMenuId,AccessPermissionId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select (select top 1 RoleMenuId from ZnodeRoleMenu where RoleId = (select top 1 Id from AspNetRoles where Name = 'Sales Rep')
	AND MenuId=(select top 1 MenuId from ZnodeMenu where MenuName = 'Quotes')), a.Id, 2, getdate(),2,getdate()
from @TempTable a
where not exists(select * from ZnodeRoleMenuAccessMapper b where RoleMenuId = 
(select top 1 RoleMenuId from ZnodeRoleMenu where RoleId = (select top 1 Id from AspNetRoles where Name = 'Sales Rep')
	AND MenuId=(select top 1 MenuId from ZnodeMenu where MenuName = 'Quotes')) and b.AccessPermissionId = a.Id)

Insert into ZnodeRoleMenu(RoleId,MenuId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
Select (select top 1 Id from AspNetRoles where Name = 'Sales Rep'),
	(select top 1 MenuId from ZnodeMenu where MenuName = 'Returns'),
	2,Getdate(),2,Getdate()
Where not exists(select * from ZnodeRoleMenu where RoleId = (select top 1 Id from AspNetRoles where Name = 'Sales Rep')
AND MenuId=(select top 1 MenuId from ZnodeMenu where MenuName = 'Returns'))

Insert Into ZnodeRoleMenuAccessMapper(RoleMenuId,AccessPermissionId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select (select top 1 RoleMenuId from ZnodeRoleMenu where RoleId = (select top 1 Id from AspNetRoles where Name = 'Sales Rep')
	AND MenuId=(select top 1 MenuId from ZnodeMenu where MenuName = 'Returns')), a.Id, 2, getdate(),2,getdate()
from @TempTable a
where not exists(select * from ZnodeRoleMenuAccessMapper b where RoleMenuId = 
(select top 1 RoleMenuId from ZnodeRoleMenu where RoleId = (select top 1 Id from AspNetRoles where Name = 'Sales Rep')
	AND MenuId=(select top 1 MenuId from ZnodeMenu where MenuName = 'Returns')) and b.AccessPermissionId = a.Id)
go
if exists(select * from sys.procedures where name = 'ZnodeReport_DashboardOrders')
	drop proc ZnodeReport_DashboardOrders
go
CREATE PROCEDURE [dbo].[ZnodeReport_DashboardOrders]              
(             
	 @PortalId  bigint  = null,        
	 @AccountId bigint  = null  ,    
	 @SalesRepUserId int = 0              
)              
AS               
/*              
     Summary:- This procedure is used to get the order details               
    Unit Testing:              
     EXEC [ZnodeReport_DashboardOrders]              
*/              
     BEGIN              
  BEGIN TRY              
        SET NOCOUNT ON;              
  DECLARE @TopItem TABLE (ItemName nvarchar(100),CustomerName nvarchar(100),ItemId nvarchar(10), Total numeric(28,6) , Date datetime,Symbol NVARCHAR(10))               
            
                 
  DECLARE @RoundOffValue INT= dbo.Fn_GetDefaultValue('PriceRoundOff')          
    
   ----Verifying that the @SalesRepUserId is having 'Sales Rep' role
	IF NOT EXISTS
	(
		SELECT * FROM ZnodeUser ZU
		INNER JOIN AspNetZnodeUser ANZU ON ZU.UserName = ANZU.UserName
		INNER JOIN AspNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName
		INNER JOIN AspNetUserRoles ANUR ON ANU.Id = ANUR.UserId
		Where Exists(select * from AspNetRoles ANR Where Name = 'Sales Rep' AND ANUR.RoleId = ANR.Id) 
		AND ZU.UserId = @SalesRepUserId
	)   
	Begin
		SET @SalesRepUserId = 0
	End    
              
  DECLARE @TBL_CultureCurrency TaBLE (Symbol Varchar(100),CurrencyCode varchar(100))              
  INSERT INTO @TBL_CultureCurrency (Symbol,CurrencyCode)              
  SELECT Symbol,CultureCode FROM  ZnodeCulture ZC               
  DECLARE @PortalCurrencySymbol nvarchar(20)          
  DECLARE @DefaultCurrencySymbol nvarchar(20)            
            
  SET @PortalCurrencySymbol = [dbo].[Fn_GetPortalCurrencySymbol](CAST(@PortalID AS INTEGER) )          
  SET @DefaultCurrencySymbol = [dbo].[Fn_GetDefaultCurrencySymbol]()           
          
  IF @PortalCurrencySymbol IS NULL           
  UPDATE @TBL_CultureCurrency SET Symbol  =@DefaultCurrencySymbol WHERE  Symbol IS NULL          
  ELSE           
  UPDATE @TBL_CultureCurrency SET Symbol  =@PortalCurrencySymbol WHERE  Symbol IS NULL          
              
    INSERT INTO @TopItem(ItemId, ItemName,CustomerName,Date,Total,Symbol)          
 SELECT Zoo.OmsOrderId,Zoo.OrderNumber,ISNULL(RTRIM(LTRIM(ZODD.FirstName)),'')          
   +' '+ISNULL(RTRIM(LTRIM(ZODD.LastName)),'') UserName ,ZODD.OrderDate,ZODD.Total,        
   COALESCE (ZC.Symbol,[dbo].[Fn_GetPortalCurrencySymbol](CAST(@PortalId AS INTEGER)),[dbo].[Fn_GetDefaultCurrencySymbol]())           
   FROM ZnodeOmsOrder (nolock) ZOO           
   INNER JOIN ZnodeOmsOrderDetails (nolock) ZODD ON (ZODD.OmsOrderId = ZOO.OmsOrderId AND  ZODD.IsActive = 1)          
   INNER JOIN ZnodePortal (nolock) ZP ON (ZP.PortalId = ZODD.portalId )          
   INNER JOIN ZnodePublishState ZODPS ON (ZODPS.PublishStateId = ZOO.PublishStateId)          
   LEFT JOIN ZnodePaymentType (nolock) ZPS ON (ZPS.PaymentTypeId = ZODD.PaymentTypeId )          
   LEFT JOIN  ZnodeOmsOrderStateShowToCustomer (nolock) ZOSC ON (ZOSC.OmsOrderStateId = ZODD.OmsOrderStateId)          
   LEFT JOIN ZnodeOmsOrderState (nolock) ZOS ON (ZOS.OmsOrderStateId = ZODD.OmsOrderStateId)          
   LEFT JOIN ZnodeOmsPaymentState (nolock) ZOPS ON (ZOPS.OmsPaymentStateId = ZODD.OmsPaymentStateId)          
   LEFT JOIN ZnodeUser ZU ON (ZU.UserId = ZODD.UserId)          
   LEFT JOIN [dbo].[View_GetUserDetails]  (nolock) ZVGD ON (ZVGD.UserId = ZODD.CreatedBy )          
   LEFT JOIN [dbo].[View_GetUserDetails]  (nolock) ZVGDI ON (ZVGDI.UserId = ZODD.ModifiedBy)          
   LEFT JOIN ZnodeShipping ZS ON (ZS.ShippingId = ZODD.ShippingId)          
   LEFT OUTER JOIN ZnodePaymentSetting (nolock) ZPSS ON (ZPSS.PaymentSettingId = ZODD.PaymentSettingId)          
   LEFT JOIN ZnodePortalPaymentSetting (nolock) ZPPS ON (ZPPS.PaymentSettingId = ZPSS.PaymentSettingId  AND ZPPS.PortalId = ZODD.PortalId   )          
   LEFT JOIN @TBL_CultureCurrency ZC ON (ZC.CurrencyCode = ZODD.CultureCode )         
   WHERE (ZP.PortalId = @PortalId OR  ISNULL(@PortalId,0) = 0) AND (ZU.AccountId = @AccountId OR  ISNULL(@AccountId,0) = 0)         
    and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = @SalesRepUserId and ZU.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)      
              
   SELECT TOP 5 ItemId, ItemName,CustomerName,Date,Total,Symbol FROM @TopItem Order by  Convert(datetime,Date )  desc                
   END TRY              
              
   BEGIN CATCH              
   DECLARE @Status BIT ;        
       SET @Status = 0;              
       DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),              
    @ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeReport_DashboardOrders @PortalId = '+@PortalId;             
                                
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                                  
                  
             EXEC Znode_InsertProcedureErrorLog              
    @ProcedureName = 'ZnodeReport_DashboardOrders',              
    @ErrorInProcedure = @Error_procedure,              
    @ErrorMessage = @ErrorMessage,              
    @ErrorLine = @ErrorLine,              
    @ErrorCall = @ErrorCall;              
   END CATCH              
              
  END;
  go
  if exists(select * from sys.procedures where name = 'ZnodeReport_DashboardQuotes')
	drop proc ZnodeReport_DashboardQuotes
go
CREATE PROCEDURE [dbo].[ZnodeReport_DashboardQuotes]              
(             
 @PortalId  bigint  = null,        
 @AccountId bigint  = null,    
 @SalesRepUserId int = 0                
)              
AS               
/*              
     Summary:- This procedure is used to get the order details               
    Unit Testing:              
     EXEC [ZnodeReport_DashboardTopCategory]              
*/              
     BEGIN              
  BEGIN TRY              
        SET NOCOUNT ON;              
  DECLARE @TopItem TABLE (ItemName nvarchar(100),CustomerName nvarchar(100),ItemId nvarchar(10), Total numeric(28,6) , Date datetime,Symbol NVARCHAR(10))               
            
                 
  DECLARE @RoundOffValue INT= dbo.Fn_GetDefaultValue('PriceRoundOff')      
        
	----Verifying that the @SalesRepUserId is having 'Sales Rep' role
	IF NOT EXISTS
	(
		SELECT * FROM ZnodeUser ZU
		INNER JOIN AspNetZnodeUser ANZU ON ZU.UserName = ANZU.UserName
		INNER JOIN AspNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName
		INNER JOIN AspNetUserRoles ANUR ON ANU.Id = ANUR.UserId
		Where Exists(select * from AspNetRoles ANR Where Name = 'Sales Rep' AND ANUR.RoleId = ANR.Id) 
		AND ZU.UserId = @SalesRepUserId
	)   
	Begin
		SET @SalesRepUserId = 0
	End              
  
  DECLARE @TBL_CultureCurrency TaBLE (Symbol Varchar(100),CurrencyCode varchar(100))              
  INSERT INTO @TBL_CultureCurrency (Symbol,CurrencyCode)              
  SELECT Symbol,CultureCode FROM  ZnodeCulture ZC               
  DECLARE @PortalCurrencySymbol nvarchar(20)          
  DECLARE @DefaultCurrencySymbol nvarchar(20)            
            
  SET @PortalCurrencySymbol = [dbo].[Fn_GetPortalCurrencySymbol](CAST(@PortalID AS INTEGER) )          
  SET @DefaultCurrencySymbol = [dbo].[Fn_GetDefaultCurrencySymbol]()           
          
  IF @PortalCurrencySymbol IS NULL           
  UPDATE @TBL_CultureCurrency SET Symbol  =@DefaultCurrencySymbol WHERE  Symbol IS NULL          
  ELSE           
  UPDATE @TBL_CultureCurrency SET Symbol  =@PortalCurrencySymbol WHERE  Symbol IS NULL          
              
        SELECT ZU.UserId, ZU.FirstName, ZU.MiddleName, ZU.LastName, ZU.Email , ZU.PhoneNumber          
  INTO #User          
  FROM ZnodeUser ZU           
  WHERE EXISTS(SELECT * FROM ZnodeOmsQuote ZOQ where ZU.UserId = ZOQ.UserID )        
  and (ZU.AccountId = @AccountId or isnull(@AccountId,0) = 0 )        
          
  Update ZOQ set OmsOrderStateId = (select top 1 OmsOrderStateId from ZnodeOMSOrderState where OrderStateName = 'EXPIRED')          
  from ZnodeOmsQuote ZOQ          
  Inner Join ZnodeOmsQuoteType ZOQT ON ZOQ.OmsQuoteTypeId = ZOQT.OmsQuoteTypeId          
  INNER JOIN #User U ON ZOQ.UserId = U.UserId           
  INNER JOIN ZnodePortal ZP ON ZOQ.PortalID = ZP.PortalID          
  INNER JOIN ZnodeOMSOrderState ZOOS ON ZOOS.OmsOrderStateId = ZOQ.OmsOrderStateId          
  where  (ZOQ.PortalID = @PortalId OR @PortalId = 0 OR @PortalId is null)          
  and cast(ZOQ.QuoteExpirationDate as date) < cast(GETDATE() as date)          
  and ZOQ.OmsOrderStateId <> (select top 1 OmsOrderStateId from ZnodeOMSOrderState where OrderStateName = 'EXPIRED')          
          
  insert into @TopItem(ItemId, ItemName,CustomerName,Date,Total,Symbol)          
  Select ZOQ.OmsQuoteId,ZOQ.QuoteNumber as QuoteNumber,isnull(U.FirstName,'')+case when U.MiddleName is not null then ' ' else '' end+ isnull(U.MiddleName,'')+' '+isnull(U.LastName,'') as CustomerName,          
  ZOQ.CreatedDate as QuoteDate,ZOQ.QuoteOrderTotal as TotalAmount        
  ,COALESCE (ZC.Symbol,[dbo].[Fn_GetPortalCurrencySymbol](CAST(@PortalId AS INTEGER)),[dbo].[Fn_GetDefaultCurrencySymbol]()) Symbol              
          
  from ZnodeOmsQuote ZOQ          
  Inner Join ZnodeOmsQuoteType ZOQT ON ZOQ.OmsQuoteTypeId = ZOQT.OmsQuoteTypeId          
  INNER JOIN #User U ON ZOQ.UserId = U.UserId           
  INNER JOIN ZnodePortal ZP ON ZOQ.PortalID = ZP.PortalID          
  INNER JOIN ZnodeOMSOrderState ZOOS ON ZOOS.OmsOrderStateId = ZOQ.OmsOrderStateId          
  LEFT JOIN @TBL_CultureCurrency ZC ON (ZC.CurrencyCode = ZOQ.CultureCode )           
  where  (ZOQ.PortalID = @PortalId OR @PortalId = 0 OR @PortalId is null)          
  and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = @SalesRepUserId and U.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)              
   SELECT TOP 5 ItemId, ItemName,CustomerName,Date,Total,Symbol FROM @TopItem Order by  Convert(datetime,Date )  desc                
   END TRY              
              
   BEGIN CATCH              
   DECLARE @Status BIT ;              
       SET @Status = 0;              
       DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),              
    @ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeReport_DashboardQuotes @PortalId = '+@PortalId;             
                                
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                                  
                  
             EXEC Znode_InsertProcedureErrorLog              
    @ProcedureName = 'ZnodeReport_DashboardQuotes',              
    @ErrorInProcedure = @Error_procedure,              
    @ErrorMessage = @ErrorMessage,              
    @ErrorLine = @ErrorLine,              
    @ErrorCall = @ErrorCall;              
   END CATCH              
              
  END;
  go
  if exists(select * from sys.procedures where name = 'ZnodeReport_DashboardReturns')
	drop proc ZnodeReport_DashboardReturns
go
CREATE PROCEDURE [dbo].[ZnodeReport_DashboardReturns]              
(             
 @PortalId  bigint  = null,        
 @AccountId bigint  = null  ,    
 @SalesRepUserId int = 0              
)              
AS               
/*              
     Summary:- This procedure is used to get the order details               
    Unit Testing:              
     EXEC [ZnodeReport_DashboardReturns]              
*/              
     BEGIN              
  BEGIN TRY              
        SET NOCOUNT ON;              
  DECLARE @TopItem TABLE (ItemName nvarchar(100),CustomerName nvarchar(100),ItemId nvarchar(10), Total numeric(28,6) , Date datetime,Symbol NVARCHAR(10))               
            
                 
  DECLARE @RoundOffValue INT= dbo.Fn_GetDefaultValue('PriceRoundOff')   
           
   ----Verifying that the @SalesRepUserId is having 'Sales Rep' role
	IF NOT EXISTS
	(
		SELECT * FROM ZnodeUser ZU
		INNER JOIN AspNetZnodeUser ANZU ON ZU.UserName = ANZU.UserName
		INNER JOIN AspNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName
		INNER JOIN AspNetUserRoles ANUR ON ANU.Id = ANUR.UserId
		Where Exists(select * from AspNetRoles ANR Where Name = 'Sales Rep' AND ANUR.RoleId = ANR.Id) 
		AND ZU.UserId = @SalesRepUserId
	)   
	Begin
		SET @SalesRepUserId = 0
	End            
  
  DECLARE @TBL_CultureCurrency TaBLE (Symbol Varchar(100),CurrencyCode varchar(100))              
  INSERT INTO @TBL_CultureCurrency (Symbol,CurrencyCode)              
  SELECT Symbol,CultureCode FROM  ZnodeCulture ZC               
  DECLARE @PortalCurrencySymbol nvarchar(20)          
  DECLARE @DefaultCurrencySymbol nvarchar(20)            
            
  SET @PortalCurrencySymbol = [dbo].[Fn_GetPortalCurrencySymbol](CAST(@PortalID AS INTEGER) )          
  SET @DefaultCurrencySymbol = [dbo].[Fn_GetDefaultCurrencySymbol]()           
          
  IF @PortalCurrencySymbol IS NULL           
  UPDATE @TBL_CultureCurrency SET Symbol  =@DefaultCurrencySymbol WHERE  Symbol IS NULL          
  ELSE           
  UPDATE @TBL_CultureCurrency SET Symbol  =@PortalCurrencySymbol WHERE  Symbol IS NULL          
              
    INSERT INTO @TopItem(ItemId, ItemName,CustomerName,Date,Total,Symbol)          
        
 select ZRRD.RmaReturnDetailsId,ZRRD.ReturnNumber, isnull(ZU.FirstNAme,'''')+' '+isnull(ZU.LastName,'') as UserName,ZRRD.ReturnDate,          
    round(ZRRD.TotalReturnAmount,@RoundOffValue) TotalReturnAmount,          
    COALESCE (ZC.Symbol,[dbo].[Fn_GetPortalCurrencySymbol](CAST(@PortalId AS INTEGER)),[dbo].[Fn_GetDefaultCurrencySymbol]())               
   from ZnodeRmaReturnDetails ZRRD          
   inner join ZnodeUser ZU ON ZRRD.UserId = ZU.UserId          
   inner join ZnodePortal ZP ON ZRRD.PortalId = ZP.PortalId           
   inner join ZnodeRmaReturnState ZRRS on ZRRD.RmaReturnStateId = ZRRS.RmaReturnStateId          
   LEFT JOIN @TBL_CultureCurrency ZC ON (ZC.CurrencyCode = ZRRD.CultureCode )         
   where isnull(ZRRD.RmaReturnStateId,0) not in (select isnull(RmaReturnStateId,0) from ZnodeRmaReturnState where ReturnStateName = 'Not Submitted')          
   AND (ZRRD.PortalId = @PortalId OR  isnull(@PortalId,0)= 0) AND (ZU.AccountId = @AccountId OR  ISNULL(@AccountId,0) = 0)            
   and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = @SalesRepUserId and ZU.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)       
   SELECT TOP 5 ItemId, ItemName,CustomerName,Date,Total,Symbol FROM @TopItem Order by  Convert(numeric,Total )  desc                
   END TRY              
              
   BEGIN CATCH              
   DECLARE @Status BIT ;              
       SET @Status = 0;              
       DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),              
    @ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeReport_DashboardReturns @PortalId = '+@PortalId;             
                                
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                                  
                  
             EXEC Znode_InsertProcedureErrorLog              
    @ProcedureName = 'ZnodeReport_DashboardReturns',              
    @ErrorInProcedure = @Error_procedure,              
    @ErrorMessage = @ErrorMessage,              
    @ErrorLine = @ErrorLine,              
    @ErrorCall = @ErrorCall;              
   END CATCH              
              
  END;
  
 go

if exists(select * from sys.procedures where name = 'ZnodeReport_DashboardSales')
	drop proc ZnodeReport_DashboardSales
go
CREATE PROCEDURE [dbo].[ZnodeReport_DashboardSales]            
(                   
 @PortalId  bigint  = null,        
 @AccountId bigint  = null,    
 @SalesRepUserId int = 0                      
)            
AS             
/*            
    Summary:- This procedure is used to get the order details             
    Unit Testing:            
    EXEC ZnodeReport_DashboardSales            
*/            
  BEGIN            
  BEGIN TRY            
  SET NOCOUNT ON;            
          
  DECLARE @TotalNewCust int, @Frequency int, @TotalQuotes int, @TotalReturns int            
          
  DECLARE @TBL_CultureCurrency TaBLE (Symbol Varchar(100),CurrencyCode varchar(100))            
  INSERT INTO @TBL_CultureCurrency (Symbol,CurrencyCode)            
  SELECT Symbol,CultureCode from  ZnodeCulture ZC  -- Changed ZnodeCurrency to ZnodeCulture here.          
            
  DECLARE @PortalCurrencySymbol nvarchar(20)        
  DECLARE @DefaultCurrencySymbol nvarchar(20)          
    
	----Verifying that the @SalesRepUserId is having 'Sales Rep' role
	IF NOT EXISTS
	(
		SELECT * FROM ZnodeUser ZU
		INNER JOIN AspNetZnodeUser ANZU ON ZU.UserName = ANZU.UserName
		INNER JOIN AspNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName
		INNER JOIN AspNetUserRoles ANUR ON ANU.Id = ANUR.UserId
		Where Exists(select * from AspNetRoles ANR Where Name = 'Sales Rep' AND ANUR.RoleId = ANR.Id) 
		AND ZU.UserId = @SalesRepUserId
	)   
	Begin
		SET @SalesRepUserId = 0
	End  
  
  SET @PortalCurrencySymbol = [dbo].[Fn_GetPortalCurrencySymbol](CAST(@PortalID AS INTEGER) )        
  SET @DefaultCurrencySymbol = [dbo].[Fn_GetDefaultCurrencySymbol]()         
        
  IF @PortalCurrencySymbol IS NULL         
 UPDATE @TBL_CultureCurrency SET Symbol  =@DefaultCurrencySymbol WHERE  Symbol IS NULL        
  ELSE         
    UPDATE @TBL_CultureCurrency SET Symbol  =@PortalCurrencySymbol WHERE  Symbol IS NULL        
                 
 SELECT   count(*)  TotalOrders , sum(ZOOD.Total) TotalSales,      
 COALESCE (ZC.Symbol,[dbo].[Fn_GetPortalCurrencySymbol](CAST(@PortalId AS INTEGER)),[dbo].[Fn_GetDefaultCurrencySymbol]()) Symbol                
 INTO #CalculateTotalValues        
 FROM ZNodeOmsOrder ZOO            
 INNER JOIN ZnodeOmsOrderDetails ZOOD ON(ZOOD.OmsOrderId = ZOO.OmsOrderId AND IsActive = 1)            
 INNER JOIN ZNodePortal P ON (P.PortalID = ZOOD.PortalId )        
 LEFT JOIN ZnodeUser ZU ON (ZU.UserId = ZOOD.UserId)    
 LEFT JOIN @TBL_CultureCurrency ZC ON (ZC.CurrencyCode = ZOOD.CurrencyCode )            
 WHERE ZOOD.IsActive =1 AND             
         
(P.PortalId = @PortalId OR ISNULL(@PortalId,0)=0) AND  (ZU.AccountId = @AccountId OR ISNULL(@AccountId,0)=0)      
 and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = @SalesRepUserId and ZU.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)          
 Group by ZC.Symbol              
             
                
    -- this will CHECK for customer             
  SELECT @TotalNewCust = COUNT(*)         
  FROM View_CustomerUserDetail CUD  WHERE                       
  (CUD.PortalId=@PortalId OR ISNULL(@PortalId,0)=0) AND  (CUD.AccountId = @AccountId OR ISNULL(@AccountId,0)=0)    
      
  -- This will get quotes count       
  SELECT ZU.UserId, ZU.FirstName, ZU.MiddleName, ZU.LastName, ZU.Email , ZU.PhoneNumber          
  INTO #User          
  FROM ZnodeUser ZU           
  WHERE EXISTS(SELECT * FROM ZnodeOmsQuote ZOQ where ZU.UserId = ZOQ.UserID )    AND (ZU.AccountId = @AccountId OR ISNULL(@AccountId,0)=0)     
  and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = @SalesRepUserId and ZU.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)  
      
  Update ZOQ set OmsOrderStateId = (select top 1 OmsOrderStateId from ZnodeOMSOrderState where OrderStateName = 'EXPIRED')          
  from ZnodeOmsQuote ZOQ          
  Inner Join ZnodeOmsQuoteType ZOQT ON ZOQ.OmsQuoteTypeId = ZOQT.OmsQuoteTypeId          
  INNER JOIN #User U ON ZOQ.UserId = U.UserId           
  INNER JOIN ZnodePortal ZP ON ZOQ.PortalID = ZP.PortalID          
  INNER JOIN ZnodeOMSOrderState ZOOS ON ZOOS.OmsOrderStateId = ZOQ.OmsOrderStateId          
  where  (ZOQ.PortalID = @PortalId OR ISNULL(@PortalId,0)=0)          
  and cast(ZOQ.QuoteExpirationDate as date) < cast(GETDATE() as date)          
  and ZOQ.OmsOrderStateId <> (select top 1 OmsOrderStateId from ZnodeOMSOrderState where OrderStateName = 'EXPIRED')          
          
       
  Select @TotalQuotes = COUNT(*)                
          
  from ZnodeOmsQuote ZOQ          
  Inner Join ZnodeOmsQuoteType ZOQT ON ZOQ.OmsQuoteTypeId = ZOQT.OmsQuoteTypeId          
  INNER JOIN #User U ON ZOQ.UserId = U.UserId           
  INNER JOIN ZnodePortal ZP ON ZOQ.PortalID = ZP.PortalID          
  INNER JOIN ZnodeOMSOrderState ZOOS ON ZOOS.OmsOrderStateId = ZOQ.OmsOrderStateId          
  LEFT JOIN @TBL_CultureCurrency ZC ON (ZC.CurrencyCode = ZOQ.CultureCode )           
  where  (ZOQ.PortalID = @PortalId OR @PortalId = 0 OR @PortalId is null)          
  and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = @SalesRepUserId and U.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)      
      
  -- This will get returns count       
  select @TotalReturns = COUNT(*)               
   from ZnodeRmaReturnDetails ZRRD          
   inner join ZnodeUser ZU ON ZRRD.UserId = ZU.UserId          
   inner join ZnodePortal ZP ON ZRRD.PortalId = ZP.PortalId           
   inner join ZnodeRmaReturnState ZRRS on ZRRD.RmaReturnStateId = ZRRS.RmaReturnStateId          
   LEFT JOIN @TBL_CultureCurrency ZC ON (ZC.CurrencyCode = ZRRD.CultureCode )         
   where isnull(ZRRD.RmaReturnStateId,0) not in (select isnull(RmaReturnStateId,0) from ZnodeRmaReturnState where ReturnStateName = 'Not Submitted')          
   AND (ZRRD.PortalId = @PortalId OR @PortalId  =0 or @PortalId is null)  AND (ZU.AccountId = @AccountId OR ISNULL(@AccountId,0)=0)     
   and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = @SalesRepUserId and ZU.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)  
              
  SELECT  Sum(TotalOrders) AS TotalOrders,Sum(TotalSales) AS TotalSales,Symbol,@TotalNewCust AS TotalNewCust, @TotalQuotes as TotalQuotes, @TotalReturns as TotalReturns      
  INTO #TotalValues        
  FROM #CalculateTotalValues          
  GROUP BY Symbol            
              
  SELECT TotalOrders, [dbo].[Fn_GetDefaultPriceRoundOff](TotalSales) TotalSales            
  , TotalNewCust ,TotalOrders / @Frequency AS TotalAvgOrders,TotalQuotes,TotalReturns ,Symbol         
  FROM #TotalValues             
        
  END TRY            
  BEGIN CATCH            
  DECLARE @Status BIT ;            
 SET @Status = 0;            
 DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),            
 @ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeReport_DashboardSales @PortalId='+CAST(@PortalId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));            
                              
 SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                                
                
    EXEC Znode_InsertProcedureErrorLog            
    @ProcedureName = 'ZnodeReport_DashboardSales',            
    @ErrorInProcedure = @Error_procedure,            
    @ErrorMessage = @ErrorMessage,            
    @ErrorLine = @ErrorLine,            
    @ErrorCall = @ErrorCall;            
  END CATCH            
  END;
 go

if exists(select * from sys.procedures where name = 'ZnodeReport_DashboardTopAccounts')
	drop proc ZnodeReport_DashboardTopAccounts
go
CREATE PROCEDURE [dbo].[ZnodeReport_DashboardTopAccounts]              
(             
 @PortalId  bigint  = null,        
 @AccountId bigint  = null,    
 @SalesRepUserId int = 0                
)              
AS               
/*              
     Summary:- This procedure is used to get the order details               
    Unit Testing:              
     EXEC [ZnodeReport_DashboardTopAccount]              
*/              
     BEGIN              
  BEGIN TRY              
        SET NOCOUNT ON;     
	----Verifying that the @SalesRepUserId is having 'Sales Rep' role
	IF NOT EXISTS
	(
		SELECT * FROM ZnodeUser ZU
		INNER JOIN AspNetZnodeUser ANZU ON ZU.UserName = ANZU.UserName
		INNER JOIN AspNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName
		INNER JOIN AspNetUserRoles ANUR ON ANU.Id = ANUR.UserId
		Where Exists(select * from AspNetRoles ANR Where Name = 'Sales Rep' AND ANUR.RoleId = ANR.Id) 
		AND ZU.UserId = @SalesRepUserId
	)   
	Begin
		SET @SalesRepUserId = 0
	End            
  
  DECLARE @TopItem TABLE (ItemName nvarchar(100),CustomerName nvarchar(200),ItemId nvarchar(10), Total numeric(28,6),ItemDate datetime,Symbol NVARCHAR(10))             
              
    INSERT INTO @TopItem(ItemId, ItemName,CustomerName,ItemDate,Total,Symbol)          
        
 select ZA.AccountId,ZA.[Name], isnull(ZU.FirstNAme,'''')+' '+isnull(ZU.LastName,'') as UserName, ZU.CreatedDate,0,''        
 from ZnodeUser ZU       
 inner join  ZnodeAccount ZA on ZU.AccountId = ZA.AccountId      
 inner join  ZnodeUserPortal ZUP on ZUP.UserId = ZU.UserId          
 WHERE (ZUP.PortalId = @PortalId OR ISNULL(@PortalId,0) = 0) AND (ZU.AccountId = @AccountId OR  ISNULL(@AccountId,0) = 0)            
 and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = @SalesRepUserId and ZU.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)        
   SELECT TOP 5 ItemId, ItemName,CustomerName,ItemDate,Total,Symbol FROM @TopItem Order by  Convert(numeric,Total )  desc                
   END TRY              
              
   BEGIN CATCH              
   DECLARE @Status BIT ;              
       SET @Status = 0;              
       DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),              
    @ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeReport_DashboardTopAccount @PortalId = '+@PortalId;             
                                
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                                  
                  
             EXEC Znode_InsertProcedureErrorLog              
    @ProcedureName = 'ZnodeReport_DashboardTopAccount',              
    @ErrorInProcedure = @Error_procedure,              
    @ErrorMessage = @ErrorMessage,              
    @ErrorLine = @ErrorLine,              
    @ErrorCall = @ErrorCall;              
   END CATCH              
              
  END;

 go
 if exists(select * from sys.procedures where name = 'Znode_AdminUsers')
	drop proc Znode_AdminUsers
go
CREATE PROCEDURE [dbo].[Znode_AdminUsers]
(	@RoleName		VARCHAR(200),
    @UserName		VARCHAR(200),
    @WhereClause	XML,
    @Rows			INT           = 100,
    @PageNo			INT           = 1,
    @Order_By		VARCHAR(1000) = '',
    @RowCount		INT        = 0 OUT,
	@IsCallOnSite   BIT = 0 ,
	@PortalId		VARCHAR(1000) = 0,
	@IsGuestUser    BIT = 0,
	@ColumnName     dbo.SelectColumnList ReadOnly,
	@SalesRepUserId int = 0
)
AS
   /* 
      Summary: List of users with detsils and shows link with ASPNet tables 
      This procedure is used for finding both users and admin users 
      here use three view "View_RoleUsers" for check  @UserName is present or not 
      "View_AdminUserDetail"  this view use for admin users 
      "View_CustomerUserDetail" Use for customer users 
      Unit Testing   
	  SELECT * FROM ZnodeUser 
      DECLARE @EDE INT=0  EXEC Znode_AdminUsers '','admin@znode.com',@WhereClause='',@Order_By='',@PageNo= 1 ,@Rows= 214,@IsCallOnSite='false',@PortalId=0,@RowCount=@EDE OUT  SELECT @EDE
   */
     BEGIN
         BEGIN TRY
            SET NOCOUNT ON;
			
            DECLARE @SQL NVARCHAR(MAX)= '', @PaginationWhereClause VARCHAR(300)= dbo.Fn_GetRowsForPagination(@PageNo, @Rows, ' WHERE RowId');
           
		   ----Verifying that the @SalesRepUserId is having 'Sales Rep' role
			IF NOT EXISTS
			(
				SELECT * FROM ZnodeUser ZU
				INNER JOIN AspNetZnodeUser ANZU ON ZU.UserName = ANZU.UserName
				INNER JOIN AspNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName
				INNER JOIN AspNetUserRoles ANUR ON ANU.Id = ANUR.UserId
				Where Exists(select * from AspNetRoles ANR Where Name = 'Sales Rep' AND ANUR.RoleId = ANR.Id) 
				AND ZU.UserId = @SalesRepUserId
			)   
			Begin
				SET @SalesRepUserId = 0
			End

			if OBJECT_ID('tempdb..##CustomerUserAddDetail') is not null
				drop table ##CustomerUserAddDetail

			if OBJECT_ID('tempdb..##View_CustomerUserAddDetail') is not null
				drop table ##View_CustomerUserAddDetail

			IF OBJECT_ID('tempdb..#TBL_RowCount') is not null
				DROP TABLE #TBL_RowCount
			Create table #TBL_RowCount(RowsCount int )
			-----Split where clause XMl 
			CREATE TABLE #WhereColumnList(RowId Int identity, filterName varchar(max), WhereCondition varchar(max))
			insert into #WhereColumnList(filterName,WhereCondition)
			SELECT 
					Tbl.Col.value('key[1]', 'varchar(max)') as filterName,
					Tbl.Col.value('condition[1]', 'varchar(max)') WhereCondition
			FROM   @WhereClause.nodes('//filter') Tbl(Col) 
			----Address column in global search
			declare @AddressGlobalSearch varchar(1000) =''
			declare @GlobalSearch varchar(100) = ''
			
			select @GlobalSearch = substring(WhereCondition,charindex(' like ',WhereCondition), charindex(' OR ',WhereCondition)-charindex(' like ',WhereCondition)) 
			from #WhereColumnList
			where filtername like '%|%'
			and filtername <> ''
			and filterName in ('CityName','CountryName','PostalCode','StateName','CompanyName') 

			

			if isnull(@GlobalSearch,'') <> ''
			begin
				select @AddressGlobalSearch = '('+'CityName '+ @GlobalSearch+' OR '+'CountryName '+ @GlobalSearch+' OR '+'PostalCode '+ @GlobalSearch+' OR '+'StateName '+ @GlobalSearch+' OR '+'CompanyName '+ @GlobalSearch+')'
			end
			else
			begin
				SET @AddressGlobalSearch = ''
			end
			----Global search where clause
			declare @WhereClauseGlobal varchar(1000)=''
			select @WhereClauseGlobal = ISNULL(WhereCondition,'')
			from #WhereColumnList
			where filtername like '%|%'
			and filtername <> ''
			
			----Where clause columns except Address columns
			declare @WhereClause1 varchar(max) = ''
			select @WhereClause1 = COALESCE(@WhereClause1 + '', '') + WhereCondition+' And '
			--case when @WhereClause1 <> ''  then ' And ' else '' end
			from #WhereColumnList a
			where filterName not like '%|%' and
			filterName not in ('CountryName','CityName','StateName','PostalCode','CompanyName')
			and filtername <> ''

			if @WhereClause1 <> ''
			begin
				set @WhereClause1=isnull(substring(@WhereClause1,1,len(@WhereClause1)-3),'')
			end
			else
			begin
				set @WhereClause1 = ''
			end

			----Where clause columns
			declare @AddressColumnWhereClause varchar(max) 
			select @AddressColumnWhereClause = COALESCE(@AddressColumnWhereClause + '', '') + WhereCondition+' And '
			from #WhereColumnList a
			where filterName not like '%|%' and
			filterName in ('CountryName','CityName','StateName','PostalCode','CompanyName')
			and filtername <> ''
			
			if isnull(@AddressColumnWhereClause,'') <> ''
			begin
				set @AddressColumnWhereClause=isnull(substring(@AddressColumnWhereClause,1,len(@AddressColumnWhereClause)-3),'')
            end
			else
			begin
				set @AddressColumnWhereClause = ''
			end

			declare @WhereClauseAll varchar(max) = ''
			select @WhereClauseAll = COALESCE(@WhereClauseAll + '', '') + WhereCondition+' And '
			from #WhereColumnList a
			

			set @WhereClauseAll=isnull(CASE WHEN @WhereClauseAll = '' THEN '' ELSE substring(@WhereClauseAll,1,len(@WhereClauseAll)-3) END ,'')
			-------------- 
			
			IF @PortalId  <> '0' 
			BEGIN 
			    SET @WhereClauseAll = CASE WHEN  @WhereClauseAll = '' THEN ' (PortalId IN ('+@PortalId+') OR PortalId IS NULL) ' ELSE @WhereClauseAll+' AND (PortalId IN ('+@PortalId+') OR PortalId IS NULL) ' END 

				SET @WhereClause1 = CASE WHEN  @WhereClause1 = '' THEN ' (isnull(PortalId,0) IN ('+@PortalId+') OR PortalId IS NULL) ' ELSE @WhereClause1+' AND (isnull(PortalId,0) IN ('+@PortalId+') OR PortalId IS NULL) ' END 
			
			END 

			IF EXISTS ( SELECT TOP 1 1 FROM View_RoleUsers  WHERE Username = @UserName   )  AND @RoleName <> ''  
			-- this check for admin user
       		BEGIN
				SET @SQL = ' SELECT  A.UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,A.CreatedBy,A.CreatedDate,A.ModifiedBy,A.ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId ,CustomerPaymentGUID
				INTO #Cte_AdminUserDetail
				FROM View_AdminUserDetail A
				'+CASE WHEN @PortalId  <> '0' THEN ' INNER JOIN ZnodeUserPortal ZUP ON (ZUP.UserId = A.UserId) 'ELSE '' END  +'	 
				'+dbo.Fn_GetWhereClause(@WhereClauseAll, ' WHERE ')+'
				
				;with Cte_AdminUserDetailRowId AS 
				(
				SELECT UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId,CustomerPaymentGUID ,RANK()Over('+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC')+',UserId DESC) RowId
				FROM  #Cte_AdminUserDetail a
				where (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = '+cast(@SalesRepUserId as varchar(10))+' and a.UserId = SalRep.CustomerUserid) or '+cast(@SalesRepUserId as varchar(10))+' = 0)
				)
					 
				SELECT UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId,CustomerPaymentGUID ,RowId 
				INTO #AccountDetails
				FROM Cte_AdminUserDetailRowId 
					 
				SET @Count= ISNULL((SELECT  Count(1) FROM #AccountDetails ),0)
					 
				SELECT DISTINCT UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId ,CustomerPaymentGUID
				FROM #AccountDetails '+@PaginationWhereClause+' '+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC' );
				EXEC SP_executesql
				@SQL,
				N'@Count INT OUT',
				@Count = @RowCount OUT;

				
			END;
			-- For Customer user
            ELSE   
			BEGIN
				IF @roleName = ''
				BEGIN
					if OBJECT_ID('tempdb..##CustomerUserAddDetail') is not null
					drop table ##CustomerUserAddDetail

					if OBJECT_ID('tempdb..##View_CustomerUserAddDetail') is not null
					drop table ##View_CustomerUserAddDetail
				
					if OBJECT_ID('tempdb..##UserList') is not null
					drop table ##UserList

					CREATE TABLE ##UserList(UserId int,AddressID int)

					declare @UserList varchar(1000)=''

					------To get the list of user having adress column in global search
					if (@AddressGlobalSearch <> '')
					begin
				
					set @UserList = 'select a.UserId, b.AddressID	from ZnodeUserAddress a	inner join ZnodeAddress b on a.AddressId = b.AddressId	where '+@AddressGlobalSearch
					--print @UserList
					insert into ##UserList(UserId, b.AddressID)
					exec (@UserList)
			
					end
					----To get the list of user having adress column in where clause 
					if (@AddressColumnWhereClause <> '')
					begin
					
					set @UserList = 'select a.UserId, b.AddressID	from ZnodeUserAddress a	inner join ZnodeAddress b on a.AddressId = b.AddressId	where '+@AddressColumnWhereClause
					--print @UserList
					insert into ##UserList(UserId,AddressID)
					exec (@UserList)
					
					end

					If @IsGuestUser= 0 
					AND
					NOT Exists (Select filterName from #WhereColumnList where filterName in ('accountid','isaccountcustomer','UserId') and filtername <> '')
					-- Customer List with GuestUsers
					Begin
						SET @SQL = 
							'SELECT a.userId,a.AspNetuserId,a.UserName,a.FirstName,a.MiddleName,a.LastName
							,a.PhoneNumber,
							 a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
							 CONVERT( DATE, a.ModifiedDate) ModifiedDate, 0 RoleId,''''  RoleName,
							 (ISNULL(RTRIM(LTRIM(a.FirstName)), '''')+'' ''+ISNULL(RTRIM(LTRIM(a.MiddleName)), '''')+CASE
							 WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '''') = ''''	THEN ''''
							 ELSE '' ''	END+ISNULL(RTRIM(LTRIM(a.LastName)), ''''))  FullName
							 ,a.AccountId, '''' TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser
							 into ##View_CustomerUserAddDetail
							 FROM ZnodeUser a
							 Where a.AspNetUserId IS NOT NULL
							 AND (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = '+cast(@SalesRepUserId as varchar(10))+' and a.UserId = SalRep.CustomerUserid ) or '+cast(@SalesRepUserId as varchar(10))+' = 0)
							' 
						EXEC (@SQL)
					End	
					Else If @IsGuestUser= 1 
					Begin
							SET @SQL='SELECT a.userId,a.AspNetuserId,a.UserName,a.FirstName,a.MiddleName,a.LastName
							,a.PhoneNumber,
							a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
							CONVERT( DATE, a.ModifiedDate) ModifiedDate,ur.RoleId,r.Name RoleName,
							(ISNULL(RTRIM(LTRIM(a.FirstName)), '''')+'' ''+ISNULL(RTRIM(LTRIM(a.MiddleName)), '''')+CASE
							WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '''') = '''' THEN '''' ELSE '' '' END+ISNULL(RTRIM(LTRIM(a.LastName)), '''')) FullName,
							a.AccountId,r.TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser
							into ##View_CustomerUserAddDetail
							FROM ZnodeUser a
							LEFT JOIN AspNetUserRoles ur ON(ur.UserId = a.AspNetUserId)
							LEFT JOIN AspNetRoles r ON(r.Id = ur.RoleId)                       
							LEFT JOIN ZnodePortalAccount ZPA ON(ZPA.AccountId = a.AccountId) 
							WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeUSer ZUQ WHERE ZUQ.UserId = a.UserId AND ZUQ.EmailOptIn = 1 AND ZUQ.AspNetUserId IS NULL )
							AND a.AspNetuserId is null
							AND (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = '+cast(@SalesRepUserId as varchar(10))+' and a.UserId = SalRep.CustomerUserid ) or '+cast(@SalesRepUserId as varchar(10))+' = 0)'
						EXEC (@SQL)
					End
					Else IF Exists (Select filterName from #WhereColumnList where filterName in ('UserId') and filtername <> '')
					and  @IsGuestUser= 0   
					-- Customer List for user edit single user 
					Begin
					SET @SQL='SELECT a.userId,a.AspNetuserId,a.UserName,a.FirstName,a.MiddleName,a.LastName
					,a.PhoneNumber, a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
							CONVERT( DATE, a.ModifiedDate) ModifiedDate,ur.RoleId,r.Name RoleName,
							(ISNULL(RTRIM(LTRIM(a.FirstName)), '''')+'' ''+ISNULL(RTRIM(LTRIM(a.MiddleName)), '''')+CASE
							WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '''') = '''' THEN '''' ELSE '' '' END+ISNULL(RTRIM(LTRIM(a.LastName)), '''')) FullName,
							a.AccountId, r.TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser
							into ##View_CustomerUserAddDetail
							FROM ZnodeUser a
							LEFT JOIN ZnodeAccount e ON(e.AccountId = a.AccountId)
							LEFT JOIN AspNetUserRoles ur ON(ur.UserId = a.AspNetUserId)
							LEFT JOIN AspNetRoles r ON(r.Id = ur.RoleId)                       
							LEFT JOIN ZnodePortalAccount ZPA ON(ZPA.AccountId = a.AccountId) 
							WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeUSer ZUQ WHERE ZUQ.UserId = a.UserId AND ZUQ.EmailOptIn = 1 AND ZUQ.AspNetUserId IS NULL )
							and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = '+cast(@SalesRepUserId as varchar(10))+' and a.UserId = SalRep.CustomerUserid ) or '+cast(@SalesRepUserId as varchar(10))+' = 0)'
						print @SQL
						
						EXEC (@SQL)
					End	
					Else -- Account user List 
					Begin
							SELECT a.userId,a.AspNetuserId,a.UserName,a.PhoneNumber,a.FirstName,a.MiddleName,a.LastName
							,a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
							CONVERT( DATE, a.ModifiedDate) ModifiedDate,ur.RoleId,r.Name RoleName,
						    (ISNULL(RTRIM(LTRIM(a.FirstName)), '')+' '+ISNULL(RTRIM(LTRIM(a.MiddleName)), '')+CASE
							WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '') = '' THEN '' ELSE ' ' END+ISNULL(RTRIM(LTRIM(a.LastName)), '')) FullName,
							a.AccountId, r.TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser
							into ##View_CustomerUserAddDetail
							FROM ZnodeUser a
							LEFT JOIN ZnodeAccount e ON(e.AccountId = a.AccountId)
							LEFT JOIN AspNetUserRoles ur ON(ur.UserId = a.AspNetUserId)
							LEFT JOIN AspNetRoles r ON(r.Id = ur.RoleId)                       
							LEFT JOIN ZnodePortalAccount ZPA ON(ZPA.AccountId = a.AccountId) 
							WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeUSer ZUQ WHERE ZUQ.UserId = a.UserId AND ZUQ.EmailOptIn = 1 AND ZUQ.AspNetUserId IS NULL )
							and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = @SalesRepUserId and a.UserId = SalRep.CustomerUserid ) or @SalesRepUserId = 0)
					End
					
					alter table ##View_CustomerUserAddDetail 
					add StoreName varchar(1000), CountryName varchar(1000),CityName varchar(1000),StateName varchar(1000),
					PostalCode varchar(1000), CompanyName varchar(1000), SalesRepUserName varchar(600),SalesRepFullName varchar(1000), PortalId INT 

					IF @PortalId <> '0' 
					BEGIN 
					   UPDATE a SET a.PortalId = b.PortalId
					   FROM ##View_CustomerUserAddDetail a 
					   INNER JOIN ZnodeUserPortal b ON (b.Userid = a.Userid )
					END 

					IF (@WhereClauseAll like '%StoreName%' or @Order_By like '%StoreName%' )
					BEGIN
						CREATE NONCLUSTERED INDEX ##View_CustomerUserAddDetail_UserId
					   ON [dbo].[##View_CustomerUserAddDetail] ([userId])

						update  a set StoreName = CASE WHEN zp.StoreName IS NULL THEN 'ALL' ELSE zp.StoreName END 
						             -- , PortalId = up.PortalId
						from ##View_CustomerUserAddDetail a
						Left join  ZnodeUserPortal up ON(up.UserId = a.UserId)  
						Left JOIN ZnodePortal zp ON (up.PortalId = zp.PortalId)
							
					END
					
					IF (@WhereClauseAll like '%CountryName%' OR @WhereClauseAll like '%CityName%' OR @WhereClauseAll like '%StateName%' OR @WhereClauseAll like '%PostalCode%' OR @WhereClauseAll like '%CompanyName%')
					BEGIN
			 
						update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
						PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName
						from ##View_CustomerUserAddDetail a
						inner join ZnodeAccountAddress ZAA on a.AccountId = ZAA.AccountId
						inner  JOIN ZnodeAddress ZA on ZA.AddressId = ZAA.AddressId
						where isnull(a.AccountId,0)<> 0-- is not null
	 
						update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
						PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName
						from ##View_CustomerUserAddDetail a
						inner join ZnodeUserAddress ZUA on a.UserId = ZUA.UserId
						inner  JOIN ZnodeAddress ZA on ZA.AddressId = zua.AddressId
					END

					set @Rows = @PageNo * @Rows

					SET @SQL = '			
						
						create table #AccountDetail
						(
							UserId int,AspNetuserId nvarchar(200),UserName nvarchar(200),FirstName varchar(200),MiddleName varchar(200),LastName varchar(200),
							PhoneNumber nvarchar(100),Email nvarchar(100),EmailOptIn bit,CreatedBy int,CreatedDate datetime,ModifiedBy int,ModifiedDate datetime,
							RoleId varchar(200),RoleName varchar(200), FullName  varchar(1000),
							StoreName varchar(200),CountryName varchar(200), CityName varchar(200), StateName varchar(200), PostalCode varchar(200), CompanyName varchar(200)
							,AccountId int,SalesRepUserName varchar(200),SalesRepFullName varchar(200) ,RowId int identity 
						) 
						'+
						+' insert into #AccountDetail(UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,FullName,
						StoreName, CountryName, CityName, StateName, PostalCode, CompanyName,AccountId)
						SELECT top '+cast(@Rows as varchar(10))+'UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,FullName,
						StoreName, CountryName, CityName, StateName, PostalCode, CompanyName,AccountId
						FROM ##View_CustomerUserAddDetail where 1=1'+
						dbo.Fn_GetWhereClause(case when @WhereClauseGlobal<>'' and @WhereClause1 <> '' then @WhereClauseGlobal+' And '+@WhereClause1 else @WhereClauseAll end, ' AND ')+
						dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC') + '
			
						Insert Into #TBL_RowCount 
						SELECT count(*)
						FROM ##View_CustomerUserAddDetail where 1=1'+
						dbo.Fn_GetWhereClause(case when @WhereClauseGlobal<>'' and @WhereClause1 <> '' then @WhereClauseGlobal+' And '+@WhereClause1 else @WhereClauseAll end, ' AND ')
						+'
						
						SELECT  UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,FullName,
						StoreName,AccountId,
						CountryName, CityName, StateName, PostalCode, CompanyName, SalesRepUserName, SalesRepFullName
						,Row_Number()Over('+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC')+')  RowNumber
						into ##CustomerUserAddDetail
						FROM #AccountDetail '+@PaginationWhereClause  +' '+ dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC');

						print @SQL
					EXEC (@SQL)

					Select @RowCount= isnull(RowsCount,0) from #TBL_RowCount

					ALTER TABLE ##CustomerUserAddDetail ADD AddressId Int

					------To get data for StoreName
						update  a set StoreName = CASE WHEN zp.StoreName IS NULL THEN 'ALL' ELSE zp.StoreName END 
						from ##CustomerUserAddDetail a
						Left join  ZnodeUserPortal up ON(up.UserId = a.UserId)  
						Left JOIN ZnodePortal zp ON (up.PortalId = zp.PortalId)

	
					----To get data for CountryName, CityName, StateName, PostalCode, CompanyName
					IF (EXISTS(SELECT * FROM @ColumnName where ([StringColumn] LIKE '%CountryName%' OR [StringColumn] LIKE '%CityName%' OR [StringColumn] LIKE '%StateName%' OR [StringColumn] LIKE '%PostalCode%' OR [StringColumn] LIKE '%CompanyName%'))
					OR (@WhereClauseAll like '%CountryName%' OR @WhereClauseAll like '%CityName%' OR @WhereClauseAll like '%StateName%' OR @WhereClauseAll like '%PostalCode%' OR @WhereClauseAll like '%CompanyName%'))
					BEGIN
			 
						update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
						PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName, a.AddressId = ZA.AddressId
						from ##CustomerUserAddDetail a
						inner join ZnodeAccountAddress ZAA on a.AccountId = ZAA.AccountId
						inner  JOIN ZnodeAddress ZA on ZA.AddressId = ZAA.AddressId
						where isnull(a.AccountId,0)<> 0-- is not null
	 
						update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
						PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName, a.AddressId = ZA.AddressId
						from ##CustomerUserAddDetail a
						inner join ZnodeUserAddress ZUA on a.UserId = ZUA.UserId
						inner  JOIN ZnodeAddress ZA on ZA.AddressId = zua.AddressId
					END

					
					----Updating SalesRep for user if any 
					update CUAD
					set CUAD.SalesRepUserName = ZU.UserName, 
					CUAD.SalesRepFullName = (ISNULL(RTRIM(LTRIM(ZU.FirstName)), '')+' '+ISNULL(RTRIM(LTRIM(ZU.MiddleName)), '')
					+CASE
					WHEN ISNULL(RTRIM(LTRIM(ZU.MiddleName)), '') = ''
					THEN ''
					ELSE ' '
					END+ISNULL(RTRIM(LTRIM(ZU.LastName)), '')) 
					from ##CustomerUserAddDetail CUAD
					inner join ZnodeSalesRepCustomerUserPortal SRCUP ON CUAD.UserId = SRCUP.CustomerUserid 
					inner join ZnodeUser ZU ON SRCUP.SalesRepUserId = ZU.UserId

					if ( exists(select * from ##UserList) OR @AddressColumnWhereClause <> '')
					begin
						SELECT UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,
						FullName,
						StoreName,
						CountryName, CityName, StateName, PostalCode, CompanyName, SalesRepUserName, SalesRepFullName
						from ##CustomerUserAddDetail CUAD
						where exists(select * from ##UserList UL where CUAD.UserId = UL.UserId and CUAD.AddressId = UL.AddressID )
						Order by RowNumber
					end
					else
					begin
						SELECT UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,
						FullName,
						StoreName,
						CountryName, CityName, StateName, PostalCode, CompanyName, SalesRepUserName, SalesRepFullName
						from ##CustomerUserAddDetail
						Order by RowNumber
					end
	
					if OBJECT_ID('tempdb..##CustomerUserAddDetail') is not null
					drop table ##CustomerUserAddDetail

					if OBJECT_ID('tempdb..##View_CustomerUserAddDetail') is not null
					drop table ##View_CustomerUserAddDetail
				
				END;
            ELSE
				BEGIN
					SELECT * FROM View_CustomerUserDetail AS VICUD WHERE 1 = 0;
					SET @RowCount = 0;
				END;
            END;			
         END TRY
         BEGIN CATCH
           --SELECT ERROR_MESSAGE()
		   DECLARE @ERROR_PROCEDURE VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_AdminUsers @RoleName = '+@RoleName+' ,@UserName='+@UserName+',@WhereClause='+cast(@WhereClause as varchar(max))+' ,@Rows= '+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_By='+@Order_By+',@RowCount='+CAST(@RowCount AS VARCHAR(50));
            EXEC Znode_InsertProcedureErrorLog
            @ProcedureName    = 'Znode_AdminUsers',
            @ErrorInProcedure = @ERROR_PROCEDURE,
            @ErrorMessage     = @ErrorMessage,
            @ErrorLine        = @ErrorLine,
            @ErrorCall        = @ErrorCall;
         END CATCH;


     END;
go
if exists(select * from sys.procedures where name = 'Znode_AdminUsersByUserId')
	drop proc Znode_AdminUsersByUserId
go
CREATE PROCEDURE [dbo].[Znode_AdminUsersByUserId]
(	@RoleName		VARCHAR(200),
    @UserName		VARCHAR(200),
    @WhereClause	XML,
    @Rows			INT           = 100,
    @PageNo			INT           = 1,
    @Order_By		VARCHAR(1000) = '',
    @RowCount		INT        = 0 OUT,
	@IsCallOnSite   BIT = 0 ,
	@PortalId		VARCHAR(1000) = 0,
	@IsGuestUser    BIT = 0,
	@ColumnName     dbo.SelectColumnList ReadOnly,
	@SalesRepUserId int = 0
)
AS
   /* 
      Summary: List of users with detsils and shows link with ASPNet tables 
      This procedure is used for finding both users and admin users 
      here use three view "View_RoleUsers" for check  @UserName is present or not 
      "View_AdminUserDetail"  this view use for admin users 
      "View_CustomerUserDetail" Use for customer users 
      Unit Testing   
	  SELECT * FROM ZnodeUser 
      DECLARE @EDE INT=0  EXEC Znode_AdminUsersByUserId '','admin@znode.com',@WhereClause='',@Order_By='',@PageNo= 1 ,@Rows= 214,@IsCallOnSite='false',@PortalId=0,@RowCount=@EDE OUT  SELECT @EDE
   */
     BEGIN
         BEGIN TRY
            SET NOCOUNT ON;
			
            DECLARE @SQL NVARCHAR(MAX)= '', @PaginationWhereClause VARCHAR(300)= dbo.Fn_GetRowsForPagination(@PageNo, @Rows, ' WHERE RowId');
             
			----Verifying that the @SalesRepUserId is having 'Sales Rep' role
			IF NOT EXISTS
			(
				SELECT * FROM ZnodeUser ZU
				INNER JOIN AspNetZnodeUser ANZU ON ZU.UserName = ANZU.UserName
				INNER JOIN AspNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName
				INNER JOIN AspNetUserRoles ANUR ON ANU.Id = ANUR.UserId
				Where Exists(select * from AspNetRoles ANR Where Name = 'Sales Rep' AND ANUR.RoleId = ANR.Id) 
				AND ZU.UserId = @SalesRepUserId
			)   
			Begin
				SET @SalesRepUserId = 0
			End

			IF OBJECT_ID('tempdb..#TBL_RowCount') is not null
				DROP TABLE #TBL_RowCount
			Create table #TBL_RowCount(RowsCount int )
			-----Split where clause XMl 
			CREATE TABLE #WhereColumnList(RowId Int identity, filterName varchar(max), WhereCondition varchar(max))
			insert into #WhereColumnList(filterName,WhereCondition)
			SELECT 
					Tbl.Col.value('key[1]', 'varchar(max)') as filterName,
					Tbl.Col.value('condition[1]', 'varchar(max)') WhereCondition
			FROM   @WhereClause.nodes('//filter') Tbl(Col) 
			----Address column in global search
			declare @AddressGlobalSearch varchar(1000)
			declare @GlobalSearch varchar(100)
			select @GlobalSearch = substring(WhereCondition,charindex(' like ',WhereCondition), charindex(' OR ',WhereCondition)-charindex(' like ',WhereCondition)) 
			from #WhereColumnList
			where filtername like '%|%'
			and filtername <> ''
			and filterName in ('CityName','CountryName','PostalCode','StateName','CompanyName') 

			if isnull(@GlobalSearch,'') <> ''
			begin
				select @AddressGlobalSearch = '('+'CityName '+ @GlobalSearch+' OR '+'CountryName '+ @GlobalSearch+' OR '+'PostalCode '+ @GlobalSearch+' OR '+'StateName '+ @GlobalSearch+' OR '+'CompanyName '+ @GlobalSearch+')'
			end
			else
			begin
				SET @AddressGlobalSearch = ''
			end
			----Global search where clause
			declare @WhereClauseGlobal varchar(1000)=''
			select @WhereClauseGlobal = ISNULL(WhereCondition,'')
			from #WhereColumnList
			where filtername like '%|%'
			and filtername <> ''
			
			----Where clause columns except Address columns
			declare @WhereClause1 varchar(max) 
			select @WhereClause1 = COALESCE(@WhereClause1 + '', '') + WhereCondition+' And '
			--case when @WhereClause1 <> ''  then ' And ' else '' end
			from #WhereColumnList a
			where filterName not like '%|%' and
			filterName not in ('CountryName','CityName','StateName','PostalCode','CompanyName')
			and filtername <> ''

			if @WhereClause1 <> ''
			begin
				set @WhereClause1=isnull(substring(@WhereClause1,1,len(@WhereClause1)-3),'')
			end
			else
			begin
				set @WhereClause1 = ''
			end

			----Where clause columns
			declare @AddressColumnWhereClause varchar(max) 
			select @AddressColumnWhereClause = COALESCE(@AddressColumnWhereClause + '', '') + WhereCondition+' And '
			from #WhereColumnList a
			where filterName not like '%|%' and
			filterName in ('CountryName','CityName','StateName','PostalCode','CompanyName')
			and filtername <> ''
			
			if isnull(@AddressColumnWhereClause,'') <> ''
			begin
				set @AddressColumnWhereClause=isnull(substring(@AddressColumnWhereClause,1,len(@AddressColumnWhereClause)-3),'')
            end
			else
			begin
				set @AddressColumnWhereClause = ''
			end

			declare @WhereClauseAll varchar(max)
			select @WhereClauseAll = COALESCE(@WhereClauseAll + '', '') + WhereCondition+' And '
			from #WhereColumnList a

			set @WhereClauseAll=isnull(substring(@WhereClauseAll,1,len(@WhereClauseAll)-3),'')
			-------------- 

			IF @PortalId  <> '0' 
			BEGIN 
			    SET @WhereClauseAll = CASE WHEN  @WhereClauseAll = '' THEN ' (PortalId IN ('+@PortalId+') OR PortalId IS NULL) ' ELSE @WhereClauseAll+' AND (PortalId IN ('+@PortalId+') OR PortalId IS NULL) ' END 

				SET @WhereClause1 = CASE WHEN  @WhereClause1 = '' THEN ' (isnull(PortalId,0) IN ('+@PortalId+') OR PortalId IS NULL) ' ELSE @WhereClause1+' AND (isnull(PortalId,0) IN ('+@PortalId+') OR PortalId IS NULL) ' END 
			
			END 
			IF EXISTS ( SELECT TOP 1 1 FROM View_RoleUsers  WHERE Username = @UserName   )  AND @RoleName <> ''  
			-- this check for admin user
       		BEGIN
				SET @SQL = ' SELECT  A.UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,A.CreatedBy,A.CreatedDate,A.ModifiedBy,A.ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId ,CustomerPaymentGUID
				INTO #Cte_AdminUserDetail
				FROM View_AdminUserDetail A
				'+CASE WHEN @PortalId  <> '0' THEN ' INNER JOIN ZnodeUserPortal ZUP ON (ZUP.UserId = A.UserId) 'ELSE '' END  +'	 
				'+dbo.Fn_GetWhereClause(@WhereClauseAll, ' WHERE ')+'
				
				;with Cte_AdminUserDetailRowId AS 
				(
				SELECT UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId,CustomerPaymentGUID ,RANK()Over('+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC')+',UserId DESC) RowId
				FROM  #Cte_AdminUserDetail a
				where (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = '+cast(@SalesRepUserId as varchar(10))+' and a.UserId = SalRep.CustomerUserid) or '+cast(@SalesRepUserId as varchar(10))+' = 0)
				)
					 
				SELECT UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId,CustomerPaymentGUID ,RowId 
				INTO #AccountDetails
				FROM Cte_AdminUserDetailRowId 
					 
				SET @Count= ISNULL((SELECT  Count(1) FROM #AccountDetails ),0)
					 
				SELECT DISTINCT UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId ,CustomerPaymentGUID
				FROM #AccountDetails '+@PaginationWhereClause+' '+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC' );
				EXEC SP_executesql
				@SQL,
				N'@Count INT OUT',
				@Count = @RowCount OUT;
			END;
			-- For Customer user
            ELSE   
			BEGIN
				IF @roleName = ''
				BEGIN
					if OBJECT_ID('tempdb..##CustomerUserAddDetail') is not null
					drop table ##CustomerUserAddDetail

					if OBJECT_ID('tempdb..##View_CustomerUserAddDetail') is not null
					drop table ##View_CustomerUserAddDetail
				
					if OBJECT_ID('tempdb..##UserList') is not null
					drop table ##UserList

					CREATE TABLE ##UserList(UserId int,AddressID int)

					declare @UserList varchar(1000)=''

					------To get the list of user having adress column in global search
					if (@AddressGlobalSearch <> '')
					begin
				
					set @UserList = 'select a.UserId, b.AddressID	from ZnodeUserAddress a	inner join ZnodeAddress b on a.AddressId = b.AddressId	where '+@AddressGlobalSearch
					--print @UserList
					insert into ##UserList(UserId, b.AddressID)
					exec (@UserList)
			
					end
					----To get the list of user having adress column in where clause 
					if (@AddressColumnWhereClause <> '')
					begin
					
					set @UserList = 'select a.UserId, b.AddressID	from ZnodeUserAddress a	inner join ZnodeAddress b on a.AddressId = b.AddressId	where '+@AddressColumnWhereClause
					--print @UserList
					insert into ##UserList(UserId,AddressID)
					exec (@UserList)
					
					end

					If @IsGuestUser= 0 
					AND
					NOT Exists (Select filterName from #WhereColumnList where filterName in ('accountid','isaccountcustomer','UserId') and filtername <> '')
					-- Customer List with GuestUsers
					Begin
						SET @SQL = 
							'SELECT a.userId,a.AspNetuserId,azu.UserName,a.FirstName,a.MiddleName,a.LastName,a.PhoneNumber,
							 a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
							 CONVERT( DATE, a.ModifiedDate) ModifiedDate, 0 RoleId,''''  RoleName,
							 CASE	WHEN B.LockoutEndDateUtc IS NULL
							 THEN CAST(1 AS    BIT)	ELSE CAST(0 AS BIT)
							 END IsActive,	CAST(CASE WHEN ISNULL(LockoutEndDateUtc, 0) = 0 THEN  0 ELSE  1 END  AS    BIT) AS IsLock,
				
							 (ISNULL(RTRIM(LTRIM(a.FirstName)), '''')+'' ''+ISNULL(RTRIM(LTRIM(a.MiddleName)), '''')+CASE
							 WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '''') = ''''	THEN ''''
							 ELSE '' ''	END+ISNULL(RTRIM(LTRIM(a.LastName)), '''')) 
				
							 FullName,
							 e.Name AccountName
							 ,a.AccountId,a.ExternalId,	CASE	WHEN a.AccountId IS NULL THEN 0	ELSE 1	END IsAccountCustomer,
							 a.BudgetAmount,
							 '''' TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser,a.CustomerPaymentGUID
							 --,CASE WHEN zp.StoreName IS NULL THEN ''ALL'' ELSE zp.StoreName END StoreName,
							 ,ISnull(zp.StoreName , ''ALL'')StoreName,
							 up.PortalId as PortalId, e.AccountCode
							 into ##View_CustomerUserAddDetail
							 FROM ZnodeUser a
							 INNER JOIN ASPNetUsers B ON(a.AspNetuserId = b.Id)
							 INNER JOIN AspNetZnodeUser azu ON(azu.AspNetZnodeUserId = b.UserName)
							 LEFT JOIN ZnodeUserPortal up ON(up.UserId = a.UserId)  
							 LEFT JOIN ZnodePortal zp ON (up.PortalId = zp.PortalId)
							 LEFT JOIN ZnodeAccount e ON(e.AccountId = a.AccountId)
							 WHERE (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = '+cast(@SalesRepUserId as varchar(10))+' and a.UserId = SalRep.CustomerUserid ) or '+cast(@SalesRepUserId as varchar(10))+' = 0)
							' 
						EXEC (@SQL)
					End	
					Else If @IsGuestUser= 1 
					Begin
							SET @SQL='SELECT a.userId,a.AspNetuserId,azu.UserName,a.FirstName,a.MiddleName,a.LastName,a.PhoneNumber,
							a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
							CONVERT( DATE, a.ModifiedDate) ModifiedDate,ur.RoleId,r.Name RoleName,
							CASE WHEN B.LockoutEndDateUtc IS NULL THEN CAST(1 AS    BIT) ELSE CAST(0 AS BIT) END IsActive,
							CAST(CASE WHEN ISNULL(LockoutEndDateUtc, 0) = 0 THEN  0 ELSE  1 END  AS    BIT) AS IsLock,
							(ISNULL(RTRIM(LTRIM(a.FirstName)), '''')+'' ''+ISNULL(RTRIM(LTRIM(a.MiddleName)), '''')+CASE
							WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '''') = '''' THEN '''' ELSE '' '' END+ISNULL(RTRIM(LTRIM(a.LastName)), '''')) FullName,
							e.Name AccountName,a.AccountId,a.ExternalId,
							CASE WHEN a.AccountId IS NULL THEN 0 ELSE 1	END IsAccountCustomer,
							a.BudgetAmount,r.TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser,a.CustomerPaymentGUID
							,CASE WHEN zp.StoreName IS NULL THEN ''ALL'' ELSE zp.StoreName END StoreName,
							CASE WHEN a.AccountId IS NULL THEN up.PortalId ELSE ZPA.PortalId END as PortalId,e.AccountCode
							into ##View_CustomerUserAddDetail
							FROM ZnodeUser a
							LEFT JOIN ASPNetUsers B ON(a.AspNetuserId = b.Id)
							LEFT JOIN ZnodeAccount e ON(e.AccountId = a.AccountId)
							LEFT JOIN AspNetUserRoles ur ON(ur.UserId = a.AspNetUserId)
							LEFT JOIN AspNetRoles r ON(r.Id = ur.RoleId)                       
							LEFT JOIN AspNetZnodeUser azu ON(azu.AspNetZnodeUserId = b.UserName)
							LEFT JOIN ZnodeUserPortal up ON(up.UserId = a.UserId)  
							LEFT JOIN ZnodePortal zp ON (up.PortalId = zp.PortalId)
							LEFT JOIN ZnodePortalAccount ZPA ON(ZPA.AccountId = a.AccountId) 
							WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeUSer ZUQ WHERE ZUQ.UserId = a.UserId AND ZUQ.EmailOptIn = 1 AND ZUQ.AspNetUserId IS NULL )
							AND a.AspNetuserId is null
							AND (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = '+cast(@SalesRepUserId as varchar(10))+' and a.UserId = SalRep.CustomerUserid ) or '+cast(@SalesRepUserId as varchar(10))+' = 0)
							'
						EXEC (@SQL)
					End
					Else IF Exists (Select filterName from #WhereColumnList where filterName in ('UserId') and filtername <> '')
					and  @IsGuestUser= 0   
					-- Customer List for user edit single user 
					Begin
					SET @SQL='SELECT a.userId,a.AspNetuserId,azu.UserName,a.FirstName,a.MiddleName,a.LastName,a.PhoneNumber,
							a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
							CONVERT( DATE, a.ModifiedDate) ModifiedDate,ur.RoleId,r.Name RoleName,
							CASE WHEN B.LockoutEndDateUtc IS NULL THEN CAST(1 AS    BIT) ELSE CAST(0 AS BIT) END IsActive,
							CAST(CASE WHEN ISNULL(LockoutEndDateUtc, 0) = 0 THEN  0 ELSE  1 END  AS    BIT) AS IsLock,
							(ISNULL(RTRIM(LTRIM(a.FirstName)), '''')+'' ''+ISNULL(RTRIM(LTRIM(a.MiddleName)), '''')+CASE
							WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '''') = '''' THEN '''' ELSE '' '' END+ISNULL(RTRIM(LTRIM(a.LastName)), '''')) FullName,
							e.Name AccountName,a.AccountId,a.ExternalId,
							CASE WHEN a.AccountId IS NULL THEN 0 ELSE 1	END IsAccountCustomer,
							a.BudgetAmount,r.TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser,a.CustomerPaymentGUID
							,CASE WHEN zp.StoreName IS NULL THEN ''ALL'' ELSE zp.StoreName END StoreName,
							CASE WHEN a.AccountId IS NULL THEN up.PortalId ELSE ZPA.PortalId END as PortalId,e.AccountCode
							into ##View_CustomerUserAddDetail
							FROM ZnodeUser a
							LEFT JOIN ASPNetUsers B ON(a.AspNetuserId = b.Id)
							LEFT JOIN ZnodeAccount e ON(e.AccountId = a.AccountId)
							LEFT JOIN AspNetUserRoles ur ON(ur.UserId = a.AspNetUserId)
							LEFT JOIN AspNetRoles r ON(r.Id = ur.RoleId)                       
							LEFT JOIN AspNetZnodeUser azu ON(azu.AspNetZnodeUserId = b.UserName)
							LEFT JOIN ZnodeUserPortal up ON(up.UserId = a.UserId)  
							LEFT JOIN ZnodePortal zp ON (up.PortalId = zp.PortalId)
							LEFT JOIN ZnodePortalAccount ZPA ON(ZPA.AccountId = a.AccountId) 
							WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeUSer ZUQ WHERE ZUQ.UserId = a.UserId AND ZUQ.EmailOptIn = 1 AND ZUQ.AspNetUserId IS NULL )
							AND (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = '+cast(@SalesRepUserId as varchar(10))+' and a.UserId = SalRep.CustomerUserid ) or '+cast(@SalesRepUserId as varchar(10))+' = 0)
							'
						EXEC (@SQL)
					End	
					Else -- Account user List 
					Begin
							SELECT a.userId,a.AspNetuserId,azu.UserName,a.FirstName,a.MiddleName,a.LastName,a.PhoneNumber,
							a.Email,a.EmailOptIn,a.CreatedBy,CONVERT( DATE, a.CreatedDate) CreatedDate,A.ModifiedBy,
							CONVERT( DATE, a.ModifiedDate) ModifiedDate,ur.RoleId,r.Name RoleName,
							CASE WHEN B.LockoutEndDateUtc IS NULL THEN CAST(1 AS    BIT) ELSE CAST(0 AS BIT) END IsActive,
							CAST(CASE WHEN ISNULL(LockoutEndDateUtc, 0) = 0 THEN  0 ELSE  1 END  AS    BIT) AS IsLock,
							(ISNULL(RTRIM(LTRIM(a.FirstName)), '')+' '+ISNULL(RTRIM(LTRIM(a.MiddleName)), '')+CASE
							WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '') = '' THEN '' ELSE ' ' END+ISNULL(RTRIM(LTRIM(a.LastName)), '')) FullName,
							e.Name AccountName,a.AccountId,a.ExternalId,
							CASE WHEN a.AccountId IS NULL THEN 0 ELSE 1	END IsAccountCustomer,
							a.BudgetAmount,r.TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser,a.CustomerPaymentGUID
							,CASE WHEN zp.StoreName IS NULL THEN 'ALL' ELSE zp.StoreName END StoreName,
							CASE WHEN a.AccountId IS NULL THEN up.PortalId ELSE ZPA.PortalId END as PortalId, e.AccountCode
							into ##View_CustomerUserAddDetail
							FROM ZnodeUser a
							LEFT JOIN ASPNetUsers B ON(a.AspNetuserId = b.Id)
							LEFT JOIN ZnodeAccount e ON(e.AccountId = a.AccountId)
							LEFT JOIN AspNetUserRoles ur ON(ur.UserId = a.AspNetUserId)
							LEFT JOIN AspNetRoles r ON(r.Id = ur.RoleId)                       
							LEFT JOIN AspNetZnodeUser azu ON(azu.AspNetZnodeUserId = b.UserName)
							LEFT JOIN ZnodeUserPortal up ON(up.UserId = a.UserId)  
							LEFT JOIN ZnodePortal zp ON (up.PortalId = zp.PortalId)
							LEFT JOIN ZnodePortalAccount ZPA ON(ZPA.AccountId = a.AccountId) 
							WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeUSer ZUQ WHERE ZUQ.UserId = a.UserId AND ZUQ.EmailOptIn = 1 AND ZUQ.AspNetUserId IS NULL )
							AND (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = @SalesRepUserId and a.UserId = SalRep.CustomerUserid ) or @SalesRepUserId = 0)
					End


					alter table ##View_CustomerUserAddDetail 
					add DepartmentId int, PermissionsName varchar(200), PermissionCode varchar(200), DepartmentName varchar(300), AccountPermissionAccessId int,
					AccountUserOrderApprovalId int, ApprovalName varchar(1000) , ApprovalUserId int
					--, PortalId int , StoreName varchar(1000)
					,CountryName varchar(1000),CityName varchar(1000),StateName varchar(1000),PostalCode varchar(1000), CompanyName varchar(1000),
					SalesRepUserName varchar(600),SalesRepFullName varchar(1000)

	
					IF ((@AddressGlobalSearch like '%CountryName%' OR @AddressGlobalSearch like '%CityName%' OR @AddressGlobalSearch like '%StateName%' OR @AddressGlobalSearch like '%PostalCode%' OR @AddressGlobalSearch like '%CompanyName%')
					and exists(select * from ##UserList))
					BEGIN
						update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
						PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName
						from ##View_CustomerUserAddDetail a
						inner join ZnodeUserAddress ZUA on a.UserId = ZUA.UserId
						inner  JOIN ZnodeAddress ZA on ZA.AddressId = zua.AddressId
						where exists(select * from ##UserList UL where a.UserId = UL.UserId and UL.AddressId = ZA.AddressId )

						update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
						PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName
						from ##View_CustomerUserAddDetail a
						inner join ZnodeAccountAddress ZAA on a.AccountId = ZAA.AccountId
						inner  JOIN ZnodeAddress ZA on ZA.AddressId = ZAA.AddressId
						where isnull(a.AccountId,0)<> 0-- is not null
						and exists(select * from ##UserList UL where a.UserId = UL.UserId and UL.AddressID = ZA.AddressId)
						and (a.CountryName is null OR a.CityName is null OR a.StateName is null or a.PostalCode is null or a.CompanyName is null)
		
					END

					--CREATE NONCLUSTERED INDEX IND_101
					--ON [dbo].[##View_CustomerUserAddDetail] ([userId],[AspNetuserId])

					SET @SQL = '			
						
						create table #AccountDetail
						(
							UserId int,AspNetuserId nvarchar(200),UserName nvarchar(200),FirstName nvarchar(200),MiddleName nvarchar(200),LastName nvarchar(200),
							PhoneNumber nvarchar(100),Email nvarchar(100),EmailOptIn bit,CreatedBy int,CreatedDate datetime,ModifiedBy int,ModifiedDate datetime,
							RoleId varchar(200),RoleName varchar(200),IsActive bit,IsLock bit,FullName  varchar(1000),AccountName  varchar(200),PermissionsName  varchar(200),
							DepartmentName  varchar(200),DepartmentId int,AccountId int,AccountPermissionAccessId int, ExternalId  varchar(200),BudgetAmount numeric(10,6),
							AccountUserOrderApprovalId int,ApprovalName varchar(200),ApprovalUserId int,PermissionCode varchar(500),CustomerPaymentGUID varchar(500),
							StoreName varchar(200),PortalId int,CountryName varchar(200), CityName varchar(200), StateName varchar(200), PostalCode varchar(200), CompanyName varchar(200)
							,SalesRepUserName varchar(200),SalesRepFullName varchar(200) ,RowId int identity , AccountCode nvarchar(100)
						) 
						'+
						+' insert into #AccountDetail(UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,IsActive,IsLock,FullName,
						AccountName,PermissionsName,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId , ExternalId,
						BudgetAmount,AccountUserOrderApprovalId,ApprovalName,ApprovalUserId,PermissionCode,CustomerPaymentGUID
						,StoreName,PortalId, CountryName, CityName, StateName, PostalCode, CompanyName, AccountCode)
						SELECT UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,IsActive,IsLock,FullName,
						AccountName,PermissionsName,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId , ExternalId,
						BudgetAmount,AccountUserOrderApprovalId,ApprovalName,ApprovalUserId,PermissionCode,CustomerPaymentGUID 
						,StoreName,PortalId, CountryName, CityName, StateName, PostalCode, CompanyName, AccountCode
						FROM ##View_CustomerUserAddDetail where 1=1'+
						dbo.Fn_GetWhereClause(@WhereClauseGlobal+case when @WhereClauseGlobal<>'' and @WhereClause1 <> '' then ' And '+@WhereClause1 else @WhereClause1 end, ' AND ')+
						dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC') + '
			
						Insert Into #TBL_RowCount Values(@@RowCount)
							
						SELECT  UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,IsActive,IsLock,FullName,
						AccountName,PermissionsName,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId , ExternalId,
						BudgetAmount,AccountUserOrderApprovalId,ApprovalName,ApprovalUserId,PermissionCode ,CustomerPaymentGUID,StoreName,PortalId,
						CountryName, CityName, StateName, PostalCode, CompanyName, SalesRepUserName, SalesRepFullName, AccountCode
						,Row_Number()Over('+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC')+')  RowNumber
						into ##CustomerUserAddDetail
						FROM #AccountDetail '+@PaginationWhereClause  +' '+ dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC');

					EXEC (@SQL)
				
					Select @RowCount= isnull(RowsCount  ,0) from #TBL_RowCount

					ALTER TABLE ##CustomerUserAddDetail ADD AddressId Int
					--To get data for DepartmentId
					update CUD SET DepartmentId = i.DepartmentId
					from ##CustomerUserAddDetail cud
					INNER JOIN ZnodeDepartmentUser i ON(i.UserId = cud.UserId)

					--To get data for PermissionsName
					update CUD SET PermissionsName = h.PermissionsName, PermissionCode = h.PermissionCode
					from ##CustomerUserAddDetail cud
					INNER JOIN ZnodeAccountUserPermission f ON(f.UserId = cud.UserId)
					INNER JOIN ZnodeAccountPermissionAccess g ON(g.AccountPermissionAccessId = f.AccountPermissionAccessId)
					INNER JOIN ZnodeAccessPermission h ON(h.AccessPermissionId = g.AccessPermissionId)

					------To get data for DepartmentName
					update CUD SET DepartmentName = j.DepartmentName
					from ##CustomerUserAddDetail cud
					INNER JOIN ZnodeDepartmentUser i ON(i.UserId = cud.UserId)
					INNER JOIN ZnodeDepartment j ON(j.DepartmentId = i.DepartmentId)

					--To get data for AccountPermissionAccessId
					update CUD SET AccountPermissionAccessId = f.AccountPermissionAccessId
					from ##CustomerUserAddDetail cud
					INNER JOIN ZnodeAccountUserPermission f ON(f.UserId = cud.UserId)

					--To get data for AccountPermissionAccessId
					update CUD SET AccountPermissionAccessId = f.AccountPermissionAccessId
					from ##CustomerUserAddDetail cud
					INNER JOIN ZnodeAccountUserPermission f ON(f.UserId = cud.UserId)
	
					--To get data for AccountUserOrderApprovalId
					update CUD SET AccountUserOrderApprovalId = ZAUOA.AccountUserOrderApprovalId
					from ##CustomerUserAddDetail cud
					INNER JOIN ZnodeAccountUserOrderApproval ZAUOA ON cud.UserId = ZAUOA.UserID
	
					--To get data for ApprovalName,ApprovalUserId
					update CUD SET ApprovalName = ISNULL(RTRIM(LTRIM(ZU.FirstName)), '')+' '+ISNULL(RTRIM(LTRIM(ZU.MiddleName)), '')
					+CASE
					WHEN ISNULL(RTRIM(LTRIM(ZU.MiddleName)), '') = ''
					THEN ''
					ELSE ' '
					END,
					ApprovalUserId = ZAUOA.ApprovalUserId
					from ##CustomerUserAddDetail cud
					INNER JOIN ZnodeAccountUserOrderApproval ZAUOA ON cud.UserId = ZAUOA.UserID
					INNER JOIN ZnodeUser ZU ON(ZU.UserId = ZAUOA.ApprovalUserId)
	
					----To get data for PortalId
					--update CUD SET PortalId = CASE
					--								WHEN cud.AccountId IS NULL
					--								THEN up.PortalId
					--								ELSE ZPA.PortalId
					--							END 
					--from ##CustomerUserAddDetail cud
					--   LEFT JOIN ZnodeUserPortal up ON(up.UserId = cud.UserId) 
					--LEFT JOIN ZnodePortalAccount ZPA ON(ZPA.AccountId = cud.AccountId) 
	
					----To get data for CountryName, CityName, StateName, PostalCode, CompanyName
					IF (EXISTS(SELECT * FROM @ColumnName where ([StringColumn] LIKE '%CountryName%' OR [StringColumn] LIKE '%CityName%' OR [StringColumn] LIKE '%StateName%' OR [StringColumn] LIKE '%PostalCode%' OR [StringColumn] LIKE '%CompanyName%'))
					OR (@WhereClauseAll like '%CountryName%' OR @WhereClauseAll like '%CityName%' OR @WhereClauseAll like '%StateName%' OR @WhereClauseAll like '%PostalCode%' OR @WhereClauseAll like '%CompanyName%'))
					BEGIN
			 
						update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
						PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName, a.AddressId = ZA.AddressId
						from ##CustomerUserAddDetail a
						inner join ZnodeAccountAddress ZAA on a.AccountId = ZAA.AccountId
						inner  JOIN ZnodeAddress ZA on ZA.AddressId = ZAA.AddressId
						where isnull(a.AccountId,0)<> 0-- is not null
	 
						update  a set CountryName = ZA.CountryName, CityName = za.CityName, StateName = ZA.StateName, 
						PostalCode = ZA.PostalCode, CompanyName = ZA.CompanyName, a.AddressId = ZA.AddressId
						from ##CustomerUserAddDetail a
						inner join ZnodeUserAddress ZUA on a.UserId = ZUA.UserId
						inner  JOIN ZnodeAddress ZA on ZA.AddressId = zua.AddressId
					END

					----Updating SalesRep for user if any 
					update CUAD
					set CUAD.SalesRepUserName = azu.UserName, 
					CUAD.SalesRepFullName = (ISNULL(RTRIM(LTRIM(ZU.FirstName)), '')+' '+ISNULL(RTRIM(LTRIM(ZU.MiddleName)), '')
					+CASE
					WHEN ISNULL(RTRIM(LTRIM(ZU.MiddleName)), '') = ''
					THEN ''
					ELSE ' '
					END+ISNULL(RTRIM(LTRIM(ZU.LastName)), '')) 
					from ##CustomerUserAddDetail CUAD
					inner join ZnodeSalesRepCustomerUserPortal SRCUP ON CUAD.UserId = SRCUP.CustomerUserid 
					inner join ZnodeUser ZU ON SRCUP.SalesRepUserId = ZU.UserId
					inner join ASPNetUsers ANU ON(ZU.AspNetuserId = ANU.Id)
					inner join AspNetZnodeUser azu ON(azu.AspNetZnodeUserId = ANU.UserName)

					if ( exists(select * from ##UserList) OR @AddressColumnWhereClause <> '')
					begin
						SELECT UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,IsActive,IsLock,
						Isnull(FirstName,'') +  ' ' + ISnull(LastName,'')  FullName,
						AccountName,PermissionsName,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId , ExternalId,
						BudgetAmount,AccountUserOrderApprovalId,ApprovalName,ApprovalUserId,PermissionCode ,CustomerPaymentGUID,StoreName,PortalId,
						CountryName, CityName, StateName, PostalCode, CompanyName, SalesRepUserName, SalesRepFullName, AccountCode
						from ##CustomerUserAddDetail CUAD
						where exists(select * from ##UserList UL where CUAD.UserId = UL.UserId and CUAD.AddressId = UL.AddressID )
						Order by RowNumber
					end
					else
					begin
						SELECT UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
						EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,IsActive,IsLock,
						Isnull(FirstName,'') +  ' ' + ISnull(LastName,'')  FullName,
						AccountName,PermissionsName,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId , ExternalId,
						BudgetAmount,AccountUserOrderApprovalId,ApprovalName,ApprovalUserId,PermissionCode ,CustomerPaymentGUID,StoreName,PortalId,
						CountryName, CityName, StateName, PostalCode, CompanyName, SalesRepUserName, SalesRepFullName, AccountCode
						from ##CustomerUserAddDetail
						Order by RowNumber
					end
	
					if OBJECT_ID('tempdb..##CustomerUserAddDetail') is not null
					drop table ##CustomerUserAddDetail

					if OBJECT_ID('tempdb..##View_CustomerUserAddDetail') is not null
					drop table ##View_CustomerUserAddDetail
				
				END;
            ELSE
				BEGIN
					SELECT * FROM View_CustomerUserDetail AS VICUD WHERE 1 = 0;
					SET @RowCount = 0;
				END;
            END;			
         END TRY
         BEGIN CATCH
            DECLARE @ERROR_PROCEDURE VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_AdminUsersByUserId @RoleName = '+@RoleName+' ,@UserName='+@UserName+',@WhereClause='+cast(@WhereClause as varchar(max))+' ,@Rows= '+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_By='+@Order_By+',@RowCount='+CAST(@RowCount AS VARCHAR(50));
            EXEC Znode_InsertProcedureErrorLog
            @ProcedureName    = 'Znode_AdminUsersByUserId',
            @ErrorInProcedure = @ERROR_PROCEDURE,
            @ErrorMessage     = @ErrorMessage,
            @ErrorLine        = @ErrorLine,
            @ErrorCall        = @ErrorCall;
         END CATCH;


     END;

go
if exists(select * from sys.procedures where name = 'Znode_GetGiftCardList')
	drop proc Znode_GetGiftCardList
go
CREATE PROCEDURE [dbo].[Znode_GetGiftCardList]  
(   
	@WhereClause NVARCHAR(max),  
    @Rows        INT            = 100,  
    @PageNo      INT            = 1,  
    @Order_BY    VARCHAR(1000)  = '',  
    @RowsCount   INT  out,  
	@PortalId varchar(100),  
	@ExpirationDate VARCHAR(100) = '',
	@SalesRepUserId int = 0 
  )    
AS   
/*  
    Summary: This procedure is used to find the GiftCardList of user for portal   
 Unit Testing:   
 declare @aa int  
 EXEC Znode_GetGiftCardList @WhereClause='Userid = 5 ' ,@PortalId ='1,2,3,4,6,7,9,10,1010,1011,1012,1013,1014,1015,1016,1020,1021,1023,1024,1025,1028,1029,1030',  @RowsCount= 0,@ExpirationDate = '2017-04-06'  
  
     EXEC Znode_GetGiftCardList @WhereClause='' ,@PortalId ='1',  @RowsCount= 0,@ExpirationDate = ''  ,@SalesRepUserId=2
*/  
  
     BEGIN  
         BEGIN TRY  
             SET NOCOUNT ON;  
             DECLARE @SQL NVARCHAR(MAX);  
    DECLARE @TBL_GiftCardList TABLE (StoreName NVARCHAR(MAX),Name NVARCHAR(600)  
            ,CardNumber NVARCHAR(600),CreatedDate DATETIME,StartDate DATETIME, ExpirationDate DATETIME  
            ,Amount NUMERIC(28,6),RemainingAmount NUMERIC(28,6),CustomerId INT,CustomerName NVARCHAR(512),AccountName NVARCHAR(512),IsActive BIT ,GiftCardId INT,UserId INT,CultureCode VARCHAR(100), RowId INT, CountNo INT, AccountCode nvarchar(100)  )  
	
	----Verifying that the @SalesRepUserId is having 'Sales Rep' role
	IF NOT EXISTS
	(
		SELECT * FROM ZnodeUser ZU
		INNER JOIN AspNetZnodeUser ANZU ON ZU.UserName = ANZU.UserName
		INNER JOIN AspNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName
		INNER JOIN AspNetUserRoles ANUR ON ANU.Id = ANUR.UserId
		Where Exists(select * from AspNetRoles ANR Where Name = 'Sales Rep' AND ANUR.RoleId = ANR.Id) 
		AND ZU.UserId = @SalesRepUserId
	)   
	Begin
		SET @SalesRepUserId = 0
	End

    SET @SQL ='  
      DECLARE @TBL_PortalId TABLE (PortalId INT)  
                  INSERT INTO @TBL_PortalId    
      SELECT  ITEM  FROM dbo.split( '''+@PortalId+''','','') AS a;   
  
      ;WITH CTE_GetGiftCard AS  
      (  
      SELECT ZP.StoreName,ZGC.Name,CardNumber,ZGC.CreatedDate,StartDate, ExpirationDate,Amount,RemainingAmount,ZGC.UserId AS CustomerId,  
      CASE WHEN ZU.FirstName IS NULL THEN '''' ELSE ZU.FirstName END + CASE WHEN ZU.LastName IS NULL  THEN '''' ELSE '' ''+ZU.LastName END as CustomerName,ZA.Name As AccountName,ZGC.IsActive  
      ,GiftCardId, ZU.UserId,IsReferralCommission,zc.CultureCode AS CurrencyCode, ZA.AccountCode
      FROM ZnodeGiftCard ZGC   
      INNER JOIN ZnodePortal ZP ON (ZGC.PortalId = ZP.PortalId)  
      INNER JOIN ZnodePortalUnit zpu on (zp.PortalId = zpu.PortalId)  
      LEFT JOIN ZnodeCulture zc on (zc.CultureId = zpu.CultureId)  
      LEFT JOIN ZnodeUser ZU ON (ZU.UserId = ZGC.UserId)  
	  LEFT JOIN ZnodeAccount ZA ON (ZA.AccountId= ZU.AccountId)
      LEFT JOIN @TBL_PortalId TP ON (TP.PortalId = ZGC.PortalId)  
      WHERE ((CONVERT(date,''' +@ExpirationDate+''' ) <= CONVERT(DATE,ZGC.ExpirationDate) OR ZGC.ExpirationDate IS  NULL)  OR '''+@ExpirationDate+''' = '''') AND ZGC.PortalId in ('+@PortalId+') 
	  and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = '+cast(@SalesRepUserId as varchar(10))+' and ZGC.UserId = SalRep.CustomerUserid) or '+cast(@SalesRepUserId as varchar(10))+' = 0)
      )  
      , CTE_GetGiftCardList AS  
      (  
      SELECT StoreName,Name,CardNumber,CreatedDate,StartDate,ExpirationDate,Amount,RemainingAmount,CustomerId,CustomerName,AccountName,IsActive,GiftCardId,UserId,CurrencyCode, AccountCode, 
      '+dbo.Fn_GetPagingRowId(@Order_BY,'GiftCardId DESC')+',Count(*)Over() CountNo   
      FROM CTE_GetGiftCard  
      WHERE 1=1 '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'       
      )  
  
      SELECT StoreName,Name,CardNumber,CreatedDate,StartDate,ExpirationDate,Amount,RemainingAmount,CustomerId,CustomerName,AccountName,IsActive,GiftCardId,UserId,CurrencyCode,RowId,CountNo, AccountCode  
      FROM CTE_GetGiftCardList  
      '+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)  
       
     
   INSERT INTO @TBL_GiftCardList  
   EXEC(@SQL)  
  
   SET @RowsCount =ISNULL((SELECT TOP 1 CountNo FROM @TBL_GiftCardList ),0)  
     
   SELECT StoreName,Name,CardNumber,CreatedDate,StartDate,ExpirationDate,Amount,RemainingAmount,CustomerId,CustomerName,AccountName,IsActive,GiftCardId,UserId,CultureCode, AccountCode 
   FROM @TBL_GiftCardList  
  
      END TRY  
   BEGIN CATCH  
    DECLARE @Status BIT ;  
       SET @Status = 0;  
       DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),  
    @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetGiftCardList @WhereClause = '+CAST(@WhereClause AS VARCHAR(MAX))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@PortalId='+@PortalId+',@ExpirationDate='+CAST(@ExpirationDate AS VARCHAR(50))+'@Status='+CAST(@Status AS VARCHAR(10));  
                    
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                      
      
             EXEC Znode_InsertProcedureErrorLog  
    @ProcedureName = 'Znode_GetGiftCardList',  
    @ErrorInProcedure = @Error_procedure,  
    @ErrorMessage = @ErrorMessage,  
    @ErrorLine = @ErrorLine,  
    @ErrorCall = @ErrorCall;  
   END CATCH  
     END
go
if exists(select * from sys.procedures where name = 'Znode_GetOmsOrderDetail')
	drop proc Znode_GetOmsOrderDetail
go
CREATE PROCEDURE [dbo].[Znode_GetOmsOrderDetail]
( @WhereClause NVARCHAR(MAX),
  @Rows        INT            = 100,
  @PageNo      INT            = 1,
  @Order_BY    VARCHAR(1000)  = '',
  @RowsCount   INT OUT			,
  @UserId	   INT = 0 ,
  @IsFromAdmin int=0,
  @SalesRepUserId int = 0 
 )
AS
    /*
     Summary : This procedure is used to get the oms order detils
			   Records are fetched for those users who placed the order i.e UserId is Present in ZnodeUser and  ZnodeOmsOrderDetails tables
	 Unit Testing:

    EXEC [Znode_GetOmsOrderDetail_SCT] 'PortalId =1',@Order_BY = '',@RowsCount= 0, @UserId = 0 ,@Rows = 50, @PageNo = 1

	declare @p7 int
	set @p7=4
	exec sp_executesql N'Znode_GetOmsOrderDetail_SCT @WhereClause, @Rows,@PageNo,@Order_By,@RowCount OUT,@UserId,@IsFromAdmin',N'@WhereClause nvarchar(30),@Rows int,@PageNo int,@Order_By nvarchar(14),@RowCount int output,@UserId int,@IsFromAdmin int',@WhereClause=N'(PortalId in(''1'',''4'',''5'',''6''))',@Rows=50,@PageNo=1,@Order_By=N'orderdate desc',@RowCount=@p7 output,@UserId=0,@IsFromAdmin=1
	select @p7



   */
BEGIN
    BEGIN TRY
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
		DECLARE @SQL NVARCHAR(MAX), @ProcessType  varchar(50)='Order'
		DECLARE @OrderLineItemRelationshipTypeId INT
		SET @OrderLineItemRelationshipTypeId = ( SELECT top 1 OrderLineItemRelationshipTypeId  FROM ZnodeOmsOrderLineItemRelationshipType where Name = 'AddOns' )

		----Verifying that the @SalesRepUserId is having 'Sales Rep' role
		IF NOT EXISTS
		(
			SELECT * FROM ZnodeUser ZU
			INNER JOIN AspNetZnodeUser ANZU ON ZU.UserName = ANZU.UserName
			INNER JOIN AspNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName
			INNER JOIN AspNetUserRoles ANUR ON ANU.Id = ANUR.UserId
			Where Exists(select * from AspNetRoles ANR Where Name = 'Sales Rep' AND ANUR.RoleId = ANR.Id) 
			AND ZU.UserId = @SalesRepUserId
		)   
		Begin
			SET @SalesRepUserId = 0
		End

		DECLARE @Fn_GetPaginationWhereClause VARCHAR(500) = dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows),
		@Fn_GetFilterWhereClause NVARCHAR(MAX) = ''
		set @Fn_GetFilterWhereClause=dbo.Fn_GetFilterWhereClause(@WhereClause)
			
		IF @Order_BY = ''
			set @Order_BY = 'OrderDate desc'

			set @Order_BY = replace(@Order_BY,'PortalId','ZODD.PortalId')
			set @Order_BY = replace(@Order_BY,'UserName','ISNULL(RTRIM(LTRIM(ZODD.FirstName)),'''')+'' ''+ISNULL(RTRIM(LTRIM(ZODD.LastName)),'''')')
			set @Order_BY = replace(@Order_BY,'email','ZODD.Email')
			set @Order_BY = replace(@Order_BY,'OrderState','case when ZOS.IsShowToCustomer=0 and '+cast( @IsFromAdmin as varchar(50))+' = 0 then ZOSC.Description else  ZOS.Description end')
			set @Order_BY = replace(@Order_BY,'PaymentStatus','ZOPS.Name')
			set @Order_BY = replace(@Order_BY,'PublishState','ZODPS.DisplayName')
			set @Order_BY = replace(@Order_BY,'StoreName','ZP.StoreName')

			Declare @Fn_GetPagingRowId NVARCHAR(MAX) = ' DENSE_RANK()Over('+ ' Order By '+CASE WHEN Isnull(@Order_BY,'') = '' THEN 'OmsOrderId DESC' ELSE @Order_BY + ',OmsOrderId DESC' END  + ') RowId '
						
			IF OBJECT_ID('tempdb..#TBL_RowCount') is not null
				DROP TABLE #TBL_RowCount

			IF OBJECT_ID('tempdb..#Portal') is not null
				DROP TABLE #Portal
			
			Create table #TBL_RowCount(RowsCount int )
			CREATE TABLE #tbl_GetRecurciveUserId  (ID INT IDENTITY(1,1) Primary key,UserId INT,ParentUserId INT)
			INSERT INTO #tbl_GetRecurciveUserId
			SELECT UserId,ParentUserId FROM dbo.Fn_GetRecurciveUserId (CAST(@UserId AS VARCHAR(50)),@ProcessType ) FNRU
			 
			set @Fn_GetFilterWhereClause = replace(@Fn_GetFilterWhereClause,'PortalId','ZODD.PortalId')
			set @Fn_GetFilterWhereClause = replace(@Fn_GetFilterWhereClause,'UserName','ISNULL(RTRIM(LTRIM(ZODD.FirstName)),'''')+'' ''+ISNULL(RTRIM(LTRIM(ZODD.LastName)),'''')')
			set @Fn_GetFilterWhereClause = replace(@Fn_GetFilterWhereClause,'email','ZODD.Email')
			set @Fn_GetFilterWhereClause = replace(@Fn_GetFilterWhereClause,'OrderState','case when ZOS.IsShowToCustomer=0 and '+cast( @IsFromAdmin as varchar(50))+' = 0 then ZOSC.Description else  ZOS.Description end')
			set @Fn_GetFilterWhereClause = replace(@Fn_GetFilterWhereClause,'PaymentStatus','ZOPS.Name')
			set @Fn_GetFilterWhereClause = replace(@Fn_GetFilterWhereClause,'PublishState','ZODPS.DisplayName')
			set @Fn_GetFilterWhereClause = replace(@Fn_GetFilterWhereClause,'StoreName','ZP.StoreName')

			set @Order_BY = replace(@Order_BY,'ShippingPostalCode','BillingPostalCode')

			set @Fn_GetPagingRowId = replace(@Fn_GetPagingRowId,'OmsOrderId','Zoo.OmsOrderId')

			set @Rows = @PageNo * @Rows

			CREATE TABLE #Portal (PortalId int,StoreName varchar(200))
			insert into #Portal
			select PortalId,StoreName
			from ZnodePortal

		SET @SQL = '
		SELECT top '+cast(@Rows as varchar(10))+' Zoo.OmsOrderId,Zoo.OrderNumber, ZODD.PortalId,ZP.StoreName ,ZODD.CurrencyCode,
		case when ZOS.IsShowToCustomer=0 and '+cast( @IsFromAdmin as varchar(50))+' = 0 then ZOSC.Description else  ZOS.Description end  OrderState,ZODD.ShippingId,ZODD.PaymentTypeId,ZODD.PaymentSettingId
		,ZOPS.Name PaymentStatus,ZPS.Name PaymentType,CAST(1 AS BIT) ShippingStatus ,ZODD.OrderDate,ZODD.UserId,ISNULL(RTRIM(LTRIM(ZODD.FirstName)),'''')
		+'' ''+ISNULL(RTRIM(LTRIM(ZODD.LastName)),'''') UserName ,ZODD.PaymentTransactionToken ,ZODD.Total ,ZODD.OmsOrderDetailsId,ZODD.PoDocument,
		ZODD.Email ,ZODD.PhoneNumber ,ZODD.SubTotal ,ZODD.TaxCost ,ZODD.ShippingCost,ZODD.BillingPostalCode,
		ZODD.ModifiedDate AS OrderModifiedDate,  ZODD.PaymentDisplayName  ,isnull(Zoo.ExternalId,0) ExternalId,ZODD.CreditCardExpMonth,ZODD.CultureCode--,ZODD.TotalAdditionalCost
		,ZODD.CreditCardExpYear,ZODD.CardType,ZODD.CreditCardNumber,ZODD.PaymentExternalId,ZODPS.DisplayName as PublishState,
		'''' ProductName, 0 CountId, CAST (0 as bit) IsInRMA, '+@Fn_GetPagingRowId+' 
		INTO #Cte_OrderLineDescribe
		FROM ZnodeOmsOrder (nolock) ZOO 
		INNER JOIN ZnodeOmsOrderDetails (nolock) ZODD ON (ZODD.OmsOrderId = ZOO.OmsOrderId AND  ZODD.IsActive = 1)
		INNER JOIN ZnodePublishState ZODPS ON (ZODPS.PublishStateId = ZOO.PublishStateId)
		INNER JOIN #Portal ZP (nolock) ON ZODD.PortalId = ZP.PortalId
		LEFT JOIN ZnodePaymentType (nolock) ZPS ON (ZPS.PaymentTypeId = ZODD.PaymentTypeId )
		LEFT JOIN ZnodeOmsOrderStateShowToCustomer (nolock) ZOSC ON (ZOSC.OmsOrderStateId = ZODD.OmsOrderStateId)
		LEFT JOIN ZnodeOmsOrderState (nolock) ZOS ON (ZOS.OmsOrderStateId = ZODD.OmsOrderStateId)
		LEFT JOIN ZnodeOmsPaymentState (nolock) ZOPS ON (ZOPS.OmsPaymentStateId = ZODD.OmsPaymentStateId)
		WHERE (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = '+cast(@SalesRepUserId as varchar(10))+' and ZODD.UserId = SalRep.CustomerUserid) or '+cast(@SalesRepUserId as varchar(10))+' = 0 )  
		AND (EXISTS (SELECT TOP 1 1 FROM #tbl_GetRecurciveUserId FNRU WHERE FNRU.UserId = ZODD.UserId ) OR '+cast(@UserId as varchar(10))+'  =0 )'
		+ @Fn_GetFilterWhereClause+' 

		Insert Into #TBL_RowCount 
		SELECT count(*)
		FROM ZnodeOmsOrder (nolock) ZOO 
		INNER JOIN ZnodeOmsOrderDetails (nolock) ZODD ON (ZODD.OmsOrderId = ZOO.OmsOrderId AND  ZODD.IsActive = 1)
		INNER JOIN ZnodePublishState ZODPS ON (ZODPS.PublishStateId = ZOO.PublishStateId)
		INNER JOIN #Portal ZP (nolock) ON ZODD.PortalId = ZP.PortalId
		LEFT JOIN ZnodePaymentType (nolock) ZPS ON (ZPS.PaymentTypeId = ZODD.PaymentTypeId )
		LEFT JOIN ZnodeOmsOrderStateShowToCustomer (nolock) ZOSC ON (ZOSC.OmsOrderStateId = ZODD.OmsOrderStateId)
		LEFT JOIN ZnodeOmsOrderState (nolock) ZOS ON (ZOS.OmsOrderStateId = ZODD.OmsOrderStateId)
		LEFT JOIN ZnodeOmsPaymentState (nolock) ZOPS ON (ZOPS.OmsPaymentStateId = ZODD.OmsPaymentStateId)
		WHERE (EXISTS(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = '+cast(@SalesRepUserId as varchar(10))+' and ZODD.UserId = SalRep.CustomerUserid) or '+cast(@SalesRepUserId as varchar(10))+' = 0 )  
		AND (EXISTS (SELECT TOP 1 1 FROM #tbl_GetRecurciveUserId FNRU WHERE FNRU.UserId = ZODD.UserId ) OR '+cast(@UserId as varchar(10))+'  =0 )'
		+ @Fn_GetFilterWhereClause+' 
			
		Create index Ind_OrderLineDescribe_RowId on #Cte_OrderLineDescribe(RowId )

		SELECT OmsOrderId,OrderNumber,PortalId,StoreName,CurrencyCode,OrderState,ShippingId,
		PaymentTypeId,PaymentSettingId,PaymentStatus,PaymentType,ShippingStatus,OrderDate,UserId,UserName,PaymentTransactionToken,Total,
		ProductName OrderItem,OmsOrderDetailsId,CountId ItemCount, PoDocument AS PODocumentPath,IsInRMA ,
		Email,PhoneNumber,SubTotal,TaxCost,ShippingCost,BillingPostalCode
		,OrderModifiedDate,PaymentDisplayName, 
		ExternalId,CreditCardExpMonth,CreditCardExpYear,CardType,CreditCardNumber,PaymentExternalId,CultureCode,PublishState --TotalAdditionalCost
		FROM #Cte_OrderLineDescribe
		' + @Fn_GetPaginationWhereClause +' order by RowId '

		print @SQL
		EXEC(@SQL)
		Select @RowsCount= isnull(RowsCount  ,0) from #TBL_RowCount
		
		IF OBJECT_ID('tempdb..#TBL_RowCount') is not null
				DROP TABLE #TBL_RowCount

		IF OBJECT_ID('tempdb..#Portal') is not null
			DROP TABLE #Portal
		
    END TRY
    BEGIN CATCH
        DECLARE @Status BIT ;
		SET @Status = 0;
		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
		@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetOmsOrderDetail @WhereClause = '''+ISNULL(CAST(@WhereClause AS VARCHAR(max)),'''''')+''',@Rows='''+ISNULL(CAST(@Rows AS VARCHAR(50)),'''''')+''',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',
		@Order_BY='+ISNULL(@Order_BY,'''''')+',@UserId = '+ISNULL(CAST(@UserId AS VARCHAR(50)),'''')+',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')+',@IsFromAdmin='+ISNULL(CAST(@IsFromAdmin AS VARCHAR(10)),'''');
              			 
        SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
        EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_GetOmsOrderDetail',
		@ErrorInProcedure = 'Znode_GetOmsOrderDetail',
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
    END CATCH;
END;
	
go
if exists(select * from sys.procedures where name = 'Znode_GetOmsQuoteList')
	drop proc Znode_GetOmsQuoteList
go

CREATE PROCEDURE [dbo].[Znode_GetOmsQuoteList]    
(     
  @WhereClause NVARCHAR(MAX),    
  @Rows        INT            = 100,    
  @PageNo      INT            = 1  ,    
  @Order_BY    VARCHAR(1000)  = '' ,    
  @RowsCount   INT OUT             ,    
  @AccountId   INT,    
  @UserId      INT            = 0,     
  @IsPendingPayment BIT = 0  ,     
  @IsParentPendingOrder  BIT = 1,
  @SalesRepUserId int = 0    
  )    
AS     
   /*    
  Summary :- This procedure is used to get the Quote list of account and Users    
    Fn_GetRecurciveAccounts is used to fetch AccountId and Its recursive ParentId      
    @InnerWhereClause contains AccountId fetched from the Function Fn_GetRecurciveAccounts     
    OrderDetails are fetched from the tables filtered by AccountId Present in @InnerWhereClause    
    OrderDetails are fetched in Descending order of OmsQuoteId    
     Unit Testing     
     
     EXEC Znode_GetOmsQuoteList '' ,@RowsCount = 50 ,@AccountId = 1,@UserId = 0      
    
*/    
     BEGIN    
         BEGIN TRY    
			SET NOCOUNT ON;    
			DECLARE @SQL NVARCHAR(MAX)= '', @InnerWhereClause VARCHAR(MAX)= '', @ProcessType  varchar(50)='Quote',@QuoteFilter NVARCHAr(max)='';    
			
			----Verifying that the @SalesRepUserId is having 'Sales Rep' role
			IF NOT EXISTS
			(
				SELECT * FROM ZnodeUser ZU
				INNER JOIN AspNetZnodeUser ANZU ON ZU.UserName = ANZU.UserName
				INNER JOIN AspNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName
				INNER JOIN AspNetUserRoles ANUR ON ANU.Id = ANUR.UserId
				Where Exists(select * from AspNetRoles ANR Where Name = 'Sales Rep' AND ANUR.RoleId = ANR.Id) 
				AND ZU.UserId = @SalesRepUserId
			)   
			Begin
				SET @SalesRepUserId = 0
			End

            DECLARE @TBL_QuoteDetails TABLE (OmsQuoteId INT,UserName NVARCHAR(300),AccountName NVARCHAR(400),QuoteOrderTotal NUMERIC(28, 6),[OrderStatus] VARCHAR(300),    
            CreatedDate DATETIME,StoreName NVARCHAR(Max),CurrencyCode VARCHAR(100),CultureCode VARCHAR(100),PublishState nvarchar(600),RowId INT,CountNo INT,CreatedByName NVARCHAr(max) ,ModifiedByName NVARCHAR(max),IsConvertedToOrder bit,OrderType varchar(50), UserId INT, AccountCode nvarchar(100));    
           
             IF @UserId <> 0  AND @IsParentPendingOrder   = 1           
                 BEGIN    
                     SET @InnerWhereClause = ' AND '''+CAST(@UserId AS VARCHAR(max))+''' = ZU.UserId ';    
                    -- SET @AccountId = (SELECT TOP 1 AccountID FROM ZnodeUser WHERE UserId = @UserId);    
                 END    
             ELSE IF @IsParentPendingOrder   = 0     
                BEGIN    
				SET @InnerWhereClause = ' AND  EXISTS (SELECT TOP 1 1 FROM [dbo].[Fn_GetRecurciveUserId] ('+CAST(@UserId AS VARCHAR(50))+','''+@ProcessType+''') SP WHERE (SP.UserId = ZU.UserId OR SP.UserId IS NULL)  )';   
   
				SET @QuoteFilter =' AND EXISTS (SELECT TOP 1 1 FROM ZnodeOMSQuoteApproval WR WHERE WR.OmsQuoteId = ZOQ.OmsQuoteId AND ( Wr.ApproverUserId ='+CAST(@UserId AS VARCHAR(50))+' OR Wr.UserId = '+CAST(@UserId AS VARCHAR(50))+'  ) ) ';        
				END    
    ELSE     
    BEGIN     
      SET @InnerWhereClause = ''    
    END       
          
    IF @IsPendingPayment =1     
    BEGIN     
       
     SET @InnerWhereClause = @InnerWhereClause+' AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodeUserGlobalAttributeValue a     
    INNER JOIN ZnodeUserGlobalAttributeValueLocale b  on (b.UserGlobalAttributeValueId = a.UserGlobalAttributeValueId)    
    INNER JOIN ZnodeGlobalAttribute c ON (c.GlobalAttributeid = a.GlobalAttributeId )    
    WHERE c.AttributeCOde = ''BillingAccountNumber'' AND a.UserId =  ZU.UserId AND b.AttributeValue = '''' ) AND ZOQ.IsPendingPayment =  1    '    
         
    END     
    ELSE     
    BEGIN    
       SET @InnerWhereClause = @InnerWhereClause+' AND ZOQ.IsPendingPayment = 0   '    
    END     
    
    SET @InnerWhereClause = @InnerWhereClause + CASE WHEN @AccountId > 0 THEN ' AND ZA.AccountId ='+CAST(@AccountId AS VARCHAR(200)) ELSE '' END     
    
    SET @SQL = '       
		;With Cte_GetQuoteDetail AS     
		(    
		SELECT Zu.UserId ,ZOQ.OmsQuoteId,ZU.FirstName + CASE WHEN ZU.LastName IS NULL THEN '''' ELSE '' ''+Zu.LastName END UserName , QuoteOrderTotal , ZOOS.Description [OrderStatus]    
		,ZOQ.CreatedDate,ZA.Name AccountName,ZP.PortalId,Zp.StoreName , ZCC.CurrencyCode AS CurrencyCode, ZC.CultureCode AS CultureCode ,ZVGD.UserName CreatedByName , ZVGDI.UserName ModifiedByName,    
		case When ZOQ.IsConvertedToOrder IS NULL THEN 0 ELSE ZOQ.IsConvertedToOrder END IsConvertedToOrder,ISNULL(DT.QuoteTypeCode,'''') QuoteTypeCode,ZODPS.DisplayName as PublishState,
		'+case when cast(@IsParentPendingOrder as varchar(10)) = 0  then +'Case  When TYUI.ApproverUserId ='+CAST(@UserId AS VARCHAR(50))  + ' then ''Approval Requested'' 
		else ''Pending For Approval'' END' else '''''' end +' OrderType, ZA.AccountCode    
		FROM ZnodeOmsQuote ZOQ    
		INNER JOIN ZnodeUser ZU ON (ZU.UserId = ZOQ.UserId)    
		LEFT JOIN ZnodePublishState ZODPS ON (ZODPS.PublishStateId = ZOQ.PublishStateId)  
		LEFT JOIN ZnodeUserPortal ZUP ON ZU.UserId = ZUP.UserId    
		inner JOIN ZnodePortal ZP ON ZP.PortalId = Zoq.PortalId    
		'+CASE WHEN @IsParentPendingOrder = 0  THEN ' LEFT JOIN ZnodeOMSQuoteApproval TYUI ON (TYUI.OmsQuoteId = ZOQ.OmsQuoteId AND TYUI.ApproverUserId ='+CAST(@UserId AS VARCHAR(50))+' ) ' ELSE '' END +'    
		LEFT JOIN ZnodePortalUnit ZPU ON (ZPU.PortalId = Zp.PortalId)    
		LEFT JOIN ZnodeCulture ZC ON (ZPU.CultureId = ZC.CultureId)    --- Changed join condition from CurrencyId to CultureId    
		LEFT JOIN ZnodeCurrency ZCC ON (ZC.CurrencyId = ZCC.CurrencyId)    --- Joined ZnodeCulture and ZnodeCurrency   
		LEFT JOIN ZnodeOmsOrderState ZOOS ON (ZOOS.OmsOrderStateId = '+CASE WHEN @IsParentPendingOrder = 0 AND EXISTS (SELECT TOP 1 1 FROM ZnodeOMSQuoteApproval OQ WHERE OQ.ApproverUserId = @UserId) THEN 'TYUI.OmsOrderStateId ' ELSE 'ZOQ.OmsOrderStateId' END  +' )     
		LEFT JOIN ZnodeAccount ZA ON (ZA.AccountId = ZU.AccountId )    
		LEFT JOIN [dbo].[View_GetUserDetails]  ZVGD ON (ZVGD.UserId = ZOQ.CreatedBy )    
		LEFT JOIN [dbo].[View_GetUserDetails]  ZVGDI ON (ZVGDI.UserId = ZOQ.ModifiedBy)    
		INNER JOIN ZnodeOmsQuoteType DT ON (DT.OmsQuoteTypeId = ZOQ.OmsQuoteTypeId)    
		WHERE DT.OmsQuoteTypeId <> (select top 1 OmsQuoteTypeId from ZnodeOmsQuoteType where QuoteTypeCode = ''QUOTE'')'+' '+@InnerWhereClause+@QuoteFilter+'    
		and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = '+cast(@SalesRepUserId as varchar(10))+' and ZOQ.UserId = SalRep.CustomerUserid) or '+cast(@SalesRepUserId as varchar(10))+' = 0)
		)    
		, Cte_GetQuote AS     
		(    
		SELECT OmsQuoteId,UserName ,AccountName , QuoteOrderTotal QuoteAmount, [OrderStatus]  ,CreatedDate ,StoreName,CurrencyCode, CultureCode,PublishState,CreatedByName , ModifiedByName ,IsConvertedToOrder,OrderType,'+dbo.Fn_GetPagingRowId(@Order_BY,'CreatedDate DESC
		,OmsQuoteId DESC')+',Count(*)Over() CountNo ,UserId, AccountCode      
		FROM Cte_GetQuoteDetail    
		WHERE 1=1     
		'+dbo.Fn_GetFilterWhereClause(@WhereClause)+'    
		)    
		SELECT OmsQuoteId,UserName ,AccountName ,  QuoteAmount, [OrderStatus]  ,CreatedDate ,StoreName,CurrencyCode, CultureCode,PublishState,RowId,CountNo,CreatedByName , ModifiedByName,IsConvertedToOrder,OrderType, UserId , AccountCode   
		FROM Cte_GetQuote     
		'+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)    
      print @SQL
        INSERT INTO @TBL_QuoteDetails (OmsQuoteId, UserName, AccountName, QuoteOrderTotal ,OrderStatus, CreatedDate, StoreName,CurrencyCode, CultureCode,PublishState, RowId ,CountNo,CreatedByName , ModifiedByName,IsConvertedToOrder,OrderType, UserId, AccountCode)          
        EXEC (@SQL);    
        SET @RowsCount = ISNULL((SELECT TOP 1 CountNo FROM @TBL_QuoteDetails), 0);    
    
        SELECT  OmsQuoteId,UserName,AccountName,QuoteOrderTotal,[OrderStatus],CreatedDate,StoreName,CurrencyCode, CultureCode,PublishState,CreatedByName , ModifiedByName,IsConvertedToOrder  ,OrderType , UserId, AccountCode 
        FROM @TBL_QuoteDetails;    
        
         END TRY    
         BEGIN CATCH    
		DECLARE @Status BIT ;    
		SET @Status = 0;    
		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetOmsQuoteList @WhereClause = '+CAST(@WhereClause AS VARCHAR(max)  
		)+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@AccountId='+CAST(@AccountId AS VARCHAR(50))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@PortalId='+''  
		+',@Status='+CAST(@Status AS VARCHAR(10));    
                      
		SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                        
        
		EXEC Znode_InsertProcedureErrorLog    
		@ProcedureName = 'Znode_GetOmsQuoteList',    
		@ErrorInProcedure = @Error_procedure,    
		@ErrorMessage = @ErrorMessage,    
		@ErrorLine = @ErrorLine,    
		@ErrorCall = @ErrorCall;    
         END CATCH;    
     END
go

if exists(select * from sys.procedures where name = 'Znode_GetQuoteList')
	drop proc Znode_GetQuoteList
go

CREATE PROCEDURE [dbo].[Znode_GetQuoteList]
( 
	
	@WhereClause NVARCHAR(MAx) = '',
	@Rows        INT            = 100,
    @PageNo      INT            = 1,
    @Order_BY    VARCHAR(1000)  = '',
    @RowsCount   INT OUT			,
    @UserId	   INT = 0,
	@OmsQuoteTypeId int,
	@SalesRepUserId int = 0
)
AS
  /*
     Summary : This procedure is used to get the oms order detils
			   Records are fetched for those users who placed the order i.e UserId is Present in ZnodeUser and  ZnodeOmsOrderDetails tables
	 Unit Testing:

     EXEC Znode_GetQuoteList @Order_BY = '',@RowsCount= 0, @UserId = 0 ,@Rows = 80, @PageNo = 1, @OmsQuoteTypeId=1,@SalesRepUserId=0

*/
BEGIN
SET NOCOUNT ON;
BEGIN TRY
	DECLARE @SQL nvarchar(max) = ''

	----Verifying that the @SalesRepUserId is having 'Sales Rep' role
	IF NOT EXISTS
	(
		SELECT * FROM ZnodeUser ZU
		INNER JOIN AspNetZnodeUser ANZU ON ZU.UserName = ANZU.UserName
		INNER JOIN AspNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName
		INNER JOIN AspNetUserRoles ANUR ON ANU.Id = ANUR.UserId
		Where Exists(select * from AspNetRoles ANR Where Name = 'Sales Rep' AND ANUR.RoleId = ANR.Id) 
		AND ZU.UserId = @SalesRepUserId
	)   
	Begin
		SET @SalesRepUserId = 0
	End

	Create Table #QuoteInfo(OmsQuoteId int, QuoteNumber varchar(200),UserID int, CustomerName varchar(300), EmailID varchar(50), PhoneNumber varchar(50), PortalID int, StoreName varchar(500), QuoteStatus varchar(500),  TotalAmount numeric(28,6),QuoteDate datetime,QuoteExpirationDate  DateTime,CultureCode varchar(100),RowId int,CountNo int)

	SELECT ZU.UserId, ZU.FirstName, ZU.MiddleName, ZU.LastName, ZU.Email , ZU.PhoneNumber
	INTO #User
	FROM ZnodeUser ZU 
	WHERE EXISTS(SELECT * FROM ZnodeOmsQuote ZOQ where ZU.UserId = ZOQ.UserID )

	Update ZOQ set OmsOrderStateId = (select top 1 OmsOrderStateId from ZnodeOMSOrderState where OrderStateName = 'EXPIRED')
	from ZnodeOmsQuote ZOQ
	Inner Join ZnodeOmsQuoteType ZOQT ON ZOQ.OmsQuoteTypeId = ZOQT.OmsQuoteTypeId
	INNER JOIN #User U ON ZOQ.UserId = U.UserId 
	INNER JOIN ZnodePortal ZP ON ZOQ.PortalID = ZP.PortalID
	INNER JOIN ZnodeOMSOrderState ZOOS ON ZOOS.OmsOrderStateId = ZOQ.OmsOrderStateId
	where ZOQ.OmsQuoteTypeId = @OmsQuoteTypeId AND (ZOQ.UserId = @UserId OR @UserId = 0 )
	and cast(ZOQ.QuoteExpirationDate as date) < cast(GETDATE() as date)
	and ZOQ.OmsOrderStateId <> (select top 1 OmsOrderStateId from ZnodeOMSOrderState where OrderStateName = 'EXPIRED')

	Select ZOQ.OmsQuoteId, ZOQ.OmsQuoteTypeId,U.UserID, ZOQ.QuoteNumber as QuoteNumber,isnull(U.FirstName,'')+case when U.MiddleName is not null then ' ' else '' end+ isnull(U.MiddleName,'')+' '+isnull(U.LastName,'') as CustomerName,
	U.Email as EmailID ,U.PhoneNumber,ZP.PortalID,ZP.StoreName ,ZOQ.CreatedDate as QuoteDate,ZOOS.Description as QuoteStatus,ZOQ.QuoteOrderTotal as TotalAmount, ZOQ.QuoteExpirationDate , ZOQ.CultureCode
	into #QuoteDetail
	from ZnodeOmsQuote ZOQ
	Inner Join ZnodeOmsQuoteType ZOQT ON ZOQ.OmsQuoteTypeId = ZOQT.OmsQuoteTypeId
	INNER JOIN #User U ON ZOQ.UserId = U.UserId 
	INNER JOIN ZnodePortal ZP ON ZOQ.PortalID = ZP.PortalID
	INNER JOIN ZnodeOMSOrderState ZOOS ON ZOOS.OmsOrderStateId = ZOQ.OmsOrderStateId
	where ZOQ.OmsQuoteTypeId = @OmsQuoteTypeId AND (ZOQ.UserId = @UserId OR @UserId = 0 )
	and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = @SalesRepUserId and ZOQ.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)

	set @SQL = '
	;with cte_Quote_Detail as
	(
		select OmsQuoteId, QuoteNumber, UserID, CustomerName, EmailID, PhoneNumber, PortalID, StoreName, QuoteStatus, QuoteDate,
			   TotalAmount,QuoteExpirationDate, CultureCode , '+dbo.Fn_GetPagingRowId(@Order_BY,'OmsQuoteId DESC')+',Count(*)Over() CountNo
		from #QuoteDetail
		WHERE 1= 1 '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'
	)
	select OmsQuoteId, QuoteNumber, CustomerName, EmailID, PhoneNumber, PortalID, StoreName, QuoteStatus, QuoteDate,
			   TotalAmount,QuoteExpirationDate, CultureCode , RowId,CountNo
	from cte_Quote_Detail
	'+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)

	--print @SQL
	insert into #QuoteInfo(OmsQuoteId, QuoteNumber,  CustomerName, EmailID, PhoneNumber, PortalID, StoreName, QuoteStatus, QuoteDate, TotalAmount, QuoteExpirationDate, CultureCode , RowId,CountNo)
	EXEC(@SQL)

	select OmsQuoteId, QuoteNumber, CustomerName, EmailID, PhoneNumber, StoreName, QuoteStatus, QuoteDate, TotalAmount, QuoteExpirationDate, CultureCode
	from #QuoteInfo
	Order by RowId

	SET @RowsCount = ISNULL((SELECT TOP 1 CountNo FROM #QuoteInfo),0)

	IF OBJECT_ID('tempdb..#QuoteDetail') is not null
		DROP TABLE #QuoteDetail
	IF OBJECT_ID('tempdb..#QuoteInfo') is not null
		DROP TABLE #QuoteInfo
	IF OBJECT_ID('tempdb..#User') is not null
		DROP TABLE #User

END TRY
BEGIN CATCH
    DECLARE @Status BIT ;
	SET @Status = 0;
	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
	@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetQuoteList @WhereClause = '''+ISNULL(CAST(@WhereClause AS VARCHAR(max)),'''''')+''',@Rows='''+ISNULL(CAST(@Rows AS VARCHAR(50)),'''''')+''',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',
	@Order_BY='+ISNULL(@Order_BY,'''''')+',@UserId = '+ISNULL(CAST(@UserId AS VARCHAR(50)),'''')+',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''');
              			 
    SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
    EXEC Znode_InsertProcedureErrorLog
	@ProcedureName = 'Znode_GetQuoteList',
	@ErrorInProcedure = 'Znode_GetQuoteList',
	@ErrorMessage = @ErrorMessage,
	@ErrorLine = @ErrorLine,
	@ErrorCall = @ErrorCall;
END CATCH;
END
go
if exists(select * from sys.procedures where name = 'Znode_GetRmaReturnHistoryList')
	drop proc Znode_GetRmaReturnHistoryList
go

CREATE PROCEDURE [dbo].[Znode_GetRmaReturnHistoryList]
(
	@WhereClause	varchar(max),
    @Rows			INT           = 100,
    @PageNo			INT           = 1,
    @Order_By		VARCHAR(1000) = '',
	@IsAdmin        BIT=0,
	@RowCount		INT        = 0 OUT,
	@ReturnDate     varchar(500) = '',
	@SalesRepUserId int = 0
)
as
/* exec Znode_GetRmaReturnHistoryList @WhereClause = 'ReturnNumber = ''ROMA-200630-183358-954''',@IsAdmin=0,@Order_By='ReturnDate asc',@ReturnDate='returndate between ''06/05/2020 03:49 am'' and ''07/19/2020 03:49 pm''' */
BEGIN
	SET NOCOUNT ON
	BEGIN TRY
		
		DECLARE @SQL NVarchar(max)
		Declare @PaginationWhereClause VARCHAR(300)= dbo.Fn_GetRowsForPagination(@PageNo, @Rows, ' WHERE RowId')
		Declare @PriceRoundOff varchar(10)
		select @PriceRoundOff = FeatureValues from Znodeglobalsetting where FeatureName = 'PriceRoundOff'
		
		----Verifying that the @SalesRepUserId is having 'Sales Rep' role
		IF NOT EXISTS
		(
			SELECT * FROM ZnodeUser ZU
			INNER JOIN AspNetZnodeUser ANZU ON ZU.UserName = ANZU.UserName
			INNER JOIN AspNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName
			INNER JOIN AspNetUserRoles ANUR ON ANU.Id = ANUR.UserId
			Where Exists(select * from AspNetRoles ANR Where Name = 'Sales Rep' AND ANUR.RoleId = ANR.Id) 
			AND ZU.UserId = @SalesRepUserId
		)   
		Begin
			SET @SalesRepUserId = 0
		End

		if @IsAdmin = 0
		begin
		    ----Get all data for webstore
			set @SQL =
			'
			select ZRRD.RmaReturnDetailsId,ZRRD.ReturnNumber, ZRRS.ReturnStateName  as ReturnStatus,ZRRD.ReturnDate,ZRRD.CreatedDate,
			ZRRD.TotalExpectedReturnQuantity, isnull(ZU.FirstNAme,'''')+'' ''+isnull(ZU.LastName,'''') as UserName,ZU.Email as EmailId, ZP.StoreName, round(ZRRD.TotalReturnAmount,'+@PriceRoundOff+') TotalReturnAmount,
			ZRRD.PortalId , ZRRD.UserID,ZRRD.ModifiedDate,ZRRD.CurrencyCode, ZRRD.CultureCode
			into #Cte_RetuenOrder
			from ZnodeRmaReturnDetails ZRRD
			inner join ZnodeUser ZU ON ZRRD.UserId = ZU.UserId
			inner join ZnodePortal ZP ON ZRRD.PortalId = ZP.PortalId
			inner join ZnodeRmaReturnState ZRRS on ZRRD.RmaReturnStateId = ZRRS.RmaReturnStateId
			where (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = '+cast(@SalesRepUserId as varchar(10))+' and ZRRD.UserId = SalRep.CustomerUserid) or '+cast(@SalesRepUserId as varchar(10))+' = 0)

			CREATE TABLE #Cte_RetuenOrder_WhereClause( RmaReturnDetailsId int, ReturnNumber nvarchar(200),  ReturnStatus nvarchar(200), ReturnDate datetime, TotalExpectedReturnQuantity numeric(28,6), UserName  varchar(300), EmailId  varchar(300), StoreName  varchar(300), TotalReturnAmount numeric(28,6), ModifiedDate datetime, CurrencyCode varchar(300), CultureCode varchar(300), RowId int)
			if ('''+@Order_By+''') = '''' 
			begin
				----To get the not subitted records at top for webstore
				insert into #Cte_RetuenOrder_WhereClause
				select RmaReturnDetailsId, ReturnNumber,  ReturnStatus, ReturnDate, TotalExpectedReturnQuantity, UserName, EmailId, StoreName, TotalReturnAmount, ModifiedDate, CurrencyCode, CultureCode
					   , Row_Number()Over('+dbo.Fn_GetOrderByClause(@Order_By, 'CreatedDate DESC')+',ReturnDate DESC) RowId 
				from #Cte_RetuenOrder
				where ReturnDate is null '+dbo.Fn_GetWhereClause(@WhereClause, ' AND ') +dbo.Fn_GetWhereClause(@ReturnDate, ' AND ')+'

				insert into #Cte_RetuenOrder_WhereClause
				select RmaReturnDetailsId, ReturnNumber,  ReturnStatus, ReturnDate, TotalExpectedReturnQuantity, UserName, EmailId, StoreName, TotalReturnAmount, ModifiedDate, CurrencyCode, CultureCode
					   , isnull((select max(RowId) from #Cte_RetuenOrder_WhereClause),0)+Row_Number()Over('+dbo.Fn_GetOrderByClause(@Order_By, 'ModifiedDate DESC')+',ReturnDate DESC) RowId
				from #Cte_RetuenOrder
				where ReturnDate is not null'+dbo.Fn_GetWhereClause(@WhereClause, ' AND ') +dbo.Fn_GetWhereClause(@ReturnDate, ' AND ')+'
			end
			else
			begin
				insert into #Cte_RetuenOrder_WhereClause
				select RmaReturnDetailsId, ReturnNumber,  ReturnStatus, ReturnDate, TotalExpectedReturnQuantity, UserName, EmailId, StoreName, TotalReturnAmount, ModifiedDate, CurrencyCode, CultureCode
					   , Row_Number()Over('+dbo.Fn_GetOrderByClause(@Order_By, 'ReturnDate DESC')+',ModifiedDate DESC) RowId
				from #Cte_RetuenOrder 
				where 1 = 1 '+dbo.Fn_GetWhereClause(@WhereClause, ' AND ') +dbo.Fn_GetWhereClause(@ReturnDate, ' AND ')+'
			end

			select RmaReturnDetailsId, ReturnNumber,  ReturnStatus, ReturnDate, TotalExpectedReturnQuantity, UserName, EmailId, StoreName, TotalReturnAmount, ModifiedDate, CurrencyCode, CultureCode, RowId 
			into #RetuenOrder
			from #Cte_RetuenOrder_WhereClause
			'+@PaginationWhereClause+' '+dbo.Fn_GetOrderByClause(@Order_By, 'ModifiedDate DESC' )
			+' select RmaReturnDetailsId, ReturnNumber,   dbo.Fn_CamelCase(ReturnStatus) as ReturnStatus, ReturnDate, TotalExpectedReturnQuantity, UserName, EmailId, StoreName, TotalReturnAmount, ModifiedDate, CurrencyCode, CultureCode
			from #RetuenOrder
			order by RowId 
			SET @Count= ISNULL((SELECT  Count(1) FROM #Cte_RetuenOrder_WhereClause ),0)';
		
		end
		else
		begin
		   ----Get all data for admin except Not submitted
			set @SQL =
			'
			select ZRRD.RmaReturnDetailsId,ZRRD.ReturnNumber, ZRRS.ReturnStateName  as ReturnStatus,ZRRD.ReturnDate,
			ZRRD.TotalExpectedReturnQuantity, isnull(ZU.FirstNAme,'''')+'' ''+isnull(ZU.LastName,'''') as UserName,ZU.Email as EmailId, ZP.StoreName, round(ZRRD.TotalReturnAmount,'+@PriceRoundOff+') TotalReturnAmount,
			ZRRD.PortalId , ZRRD.UserID,ZRRD.ModifiedDate, ZRRD.CurrencyCode, ZRRD.CultureCode
			into #Cte_RetuenOrder
			from ZnodeRmaReturnDetails ZRRD
			inner join ZnodeUser ZU ON ZRRD.UserId = ZU.UserId
			inner join ZnodePortal ZP ON ZRRD.PortalId = ZP.PortalId 
			inner join ZnodeRmaReturnState ZRRS on ZRRD.RmaReturnStateId = ZRRS.RmaReturnStateId
			where isnull(ZRRD.RmaReturnStateId,0) not in (select isnull(RmaReturnStateId,0) from ZnodeRmaReturnState where ReturnStateName = ''Not Submitted'')
		    and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = '+cast(@SalesRepUserId as varchar(10))+' and ZRRD.UserId = SalRep.CustomerUserid) or '+cast(@SalesRepUserId as varchar(10))+' = 0)

			select RmaReturnDetailsId, ReturnNumber,  ReturnStatus, ReturnDate, TotalExpectedReturnQuantity, UserName, EmailId, StoreName, TotalReturnAmount,ModifiedDate, CurrencyCode, CultureCode
			, Row_Number()Over('+dbo.Fn_GetOrderByClause(@Order_By, 'ReturnDate DESC')+',ModifiedDate DESC) RowId
			into #Cte_RetuenOrder_WhereClause
			from #Cte_RetuenOrder
			where 1 = 1 '+dbo.Fn_GetWhereClause(@WhereClause, ' AND ') +dbo.Fn_GetWhereClause(@ReturnDate, ' AND ')+'

			select RmaReturnDetailsId, ReturnNumber,  ReturnStatus, ReturnDate, TotalExpectedReturnQuantity, UserName, EmailId, StoreName, TotalReturnAmount, ModifiedDate, CurrencyCode, CultureCode, RowId
			into #RetuenOrder
			from #Cte_RetuenOrder_WhereClause
			'+@PaginationWhereClause+' '+dbo.Fn_GetOrderByClause(@Order_By, 'ReturnDate DESC' )
			+' select RmaReturnDetailsId, ReturnNumber,  dbo.Fn_CamelCase(ReturnStatus) as ReturnStatus, ReturnDate, TotalExpectedReturnQuantity, UserName, EmailId, StoreName, TotalReturnAmount, ModifiedDate, CurrencyCode, CultureCode
			from #RetuenOrder
			order by RowId 
			
			SET @Count= ISNULL((SELECT  Count(1) FROM #Cte_RetuenOrder_WhereClause ),0)';
		end

		print @sql

		EXEC SP_executesql 
				@SQL,
				N'@Count INT OUT',
				@Count = @RowCount OUT;

	END TRY
         BEGIN CATCH
           
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetRmaReturnHistoryList @WhereClause = '+CAST(@WhereClause AS varchar(10))+',@Order_By='+cast(@Order_By as varchar(10));

             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetRmaReturnHistoryList',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
    END CATCH
END
go
if exists(select * from sys.procedures where name = 'ZnodeReport_DashboardQuotes')
	drop proc ZnodeReport_DashboardQuotes
go

CREATE PROCEDURE [dbo].[ZnodeReport_DashboardQuotes]              
(             
	@PortalId  bigint  = null,        
	@AccountId bigint  = null,    
	@SalesRepUserId int = 0                
)              
AS               
/*              
     Summary:- This procedure is used to get the order details               
    Unit Testing:              
     EXEC [ZnodeReport_DashboardTopCategory]              
*/              
BEGIN              
BEGIN TRY              
SET NOCOUNT ON;              
	
	DECLARE @TopItem TABLE (ItemName nvarchar(100),CustomerName nvarchar(100),ItemId nvarchar(10), Total numeric(28,6) , Date datetime,Symbol NVARCHAR(10))               
     
	DECLARE @RoundOffValue INT= dbo.Fn_GetDefaultValue('PriceRoundOff')      
        
	----Verifying that the @SalesRepUserId is having 'Sales Rep' role
	IF NOT EXISTS
	(
		SELECT * FROM ZnodeUser ZU
		INNER JOIN AspNetZnodeUser ANZU ON ZU.UserName = ANZU.UserName
		INNER JOIN AspNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName
		INNER JOIN AspNetUserRoles ANUR ON ANU.Id = ANUR.UserId
		Where Exists(select * from AspNetRoles ANR Where Name = 'Sales Rep' AND ANUR.RoleId = ANR.Id) 
		AND ZU.UserId = @SalesRepUserId
	)   
	Begin
		SET @SalesRepUserId = 0
	End              
  
	DECLARE @TBL_CultureCurrency TaBLE (Symbol Varchar(100),CurrencyCode varchar(100))              
	INSERT INTO @TBL_CultureCurrency (Symbol,CurrencyCode)              
	SELECT Symbol,CultureCode FROM  ZnodeCulture ZC               
	DECLARE @PortalCurrencySymbol nvarchar(20)          
	DECLARE @DefaultCurrencySymbol nvarchar(20)            
            
	SET @PortalCurrencySymbol = [dbo].[Fn_GetPortalCurrencySymbol](CAST(@PortalID AS INTEGER) )          
	SET @DefaultCurrencySymbol = [dbo].[Fn_GetDefaultCurrencySymbol]()           
          
	IF @PortalCurrencySymbol IS NULL           
	UPDATE @TBL_CultureCurrency SET Symbol  =@DefaultCurrencySymbol WHERE  Symbol IS NULL          
	ELSE           
	UPDATE @TBL_CultureCurrency SET Symbol  =@PortalCurrencySymbol WHERE  Symbol IS NULL          
              
	SELECT ZU.UserId, ZU.FirstName, ZU.MiddleName, ZU.LastName, ZU.Email , ZU.PhoneNumber          
	INTO #User          
	FROM ZnodeUser ZU           
	WHERE EXISTS(SELECT * FROM ZnodeOmsQuote ZOQ where ZU.UserId = ZOQ.UserID )        
	and (ZU.AccountId = @AccountId or isnull(@AccountId,0) = 0 )        
          
	Update ZOQ set OmsOrderStateId = (select top 1 OmsOrderStateId from ZnodeOMSOrderState where OrderStateName = 'EXPIRED')          
	from ZnodeOmsQuote ZOQ          
	Inner Join ZnodeOmsQuoteType ZOQT ON ZOQ.OmsQuoteTypeId = ZOQT.OmsQuoteTypeId          
	INNER JOIN #User U ON ZOQ.UserId = U.UserId           
	INNER JOIN ZnodePortal ZP ON ZOQ.PortalID = ZP.PortalID          
	INNER JOIN ZnodeOMSOrderState ZOOS ON ZOOS.OmsOrderStateId = ZOQ.OmsOrderStateId          
	where  (ZOQ.PortalID = @PortalId OR @PortalId = 0 OR @PortalId is null)          
	and cast(ZOQ.QuoteExpirationDate as date) < cast(GETDATE() as date)          
	and ZOQ.OmsOrderStateId <> (select top 1 OmsOrderStateId from ZnodeOMSOrderState where OrderStateName = 'EXPIRED')          
          
	insert into @TopItem(ItemId, ItemName,CustomerName,Date,Total,Symbol)          
	Select ZOQ.OmsQuoteId,ZOQ.QuoteNumber as QuoteNumber,isnull(U.FirstName,'')+case when U.MiddleName is not null then ' ' else '' end+ isnull(U.MiddleName,'')+' '+isnull(U.LastName,'') as CustomerName,          
	ZOQ.CreatedDate as QuoteDate,ZOQ.QuoteOrderTotal as TotalAmount        
	,COALESCE (ZC.Symbol,[dbo].[Fn_GetPortalCurrencySymbol](CAST(@PortalId AS INTEGER)),[dbo].[Fn_GetDefaultCurrencySymbol]()) Symbol              
	from ZnodeOmsQuote ZOQ          
	Inner Join ZnodeOmsQuoteType ZOQT ON ZOQ.OmsQuoteTypeId = ZOQT.OmsQuoteTypeId          
	INNER JOIN #User U ON ZOQ.UserId = U.UserId           
	INNER JOIN ZnodePortal ZP ON ZOQ.PortalID = ZP.PortalID          
	INNER JOIN ZnodeOMSOrderState ZOOS ON ZOOS.OmsOrderStateId = ZOQ.OmsOrderStateId          
	LEFT JOIN @TBL_CultureCurrency ZC ON (ZC.CurrencyCode = ZOQ.CultureCode )           
	where  (ZOQ.PortalID = @PortalId OR @PortalId = 0 OR @PortalId is null)          
	and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = @SalesRepUserId and U.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)              
	and ZOQT.QuoteTypeCode = 'QUOTE'
	
	SELECT TOP 5 ItemId, ItemName,CustomerName,Date,Total,Symbol FROM @TopItem Order by  Convert(datetime,Date )  desc                
   
END TRY              
              
BEGIN CATCH              
	DECLARE @Status BIT ;              
		SET @Status = 0;              
		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),              
	@ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeReport_DashboardQuotes @PortalId = '+@PortalId;             
                                
				SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                                  
                  
				EXEC Znode_InsertProcedureErrorLog              
	@ProcedureName = 'ZnodeReport_DashboardQuotes',              
	@ErrorInProcedure = @Error_procedure,              
	@ErrorMessage = @ErrorMessage,              
	@ErrorLine = @ErrorLine,              
	@ErrorCall = @ErrorCall;              
END CATCH              
              
END;
go
IF Exists(select * from sys.procedures where name = 'Znode_GetSalesRepAccessConfirmation')
	drop proc Znode_GetSalesRepAccessConfirmation
go
CREATE PROCEDURE [dbo].[Znode_GetSalesRepAccessConfirmation]
(
	@SalesRepUserId int,
	@EntityType Varchar(100),
	@EntityId int,
	@Status bit = 0 Out,
	@ReturnNo Varchar(100) = ''
)
--Exec Znode_GetSalesRepAccessConfirmation @SalesRepUserId=2,@EntityType='User',@EntityId=48
As
Begin
Begin Try
	SET NOCOUNT ON;
	SET @Status = 0
	IF NOT EXISTS
		(
			SELECT * FROM ZnodeUser ZU
			INNER JOIN AspNetZnodeUser ANZU ON ZU.UserName = ANZU.UserName
			INNER JOIN AspNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName
			INNER JOIN AspNetUserRoles ANUR ON ANU.Id = ANUR.UserId
			Where Exists(select * from AspNetRoles ANR Where Name = 'Sales Rep' AND ANUR.RoleId = ANR.Id) 
			AND ZU.UserId = @SalesRepUserId
		)   
	Begin
		SET @Status = 1
		SELECT 1 AS ID,@Status AS Status
		return
	End

	IF @EntityType = 'QUOTE'
	Begin
		SET @Status = (SELECT top 1 1 FROM ZnodeOmsQuote ZO with (nolock)
			where exists(select * from ZnodeSalesRepCustomerUserPortal Z Where Z.SalesRepUserId = @SalesRepUserId AND ZO.UserId = Z.CustomerUserid)
			and ZO.OmsQuoteId = @EntityId )
	End
	Else IF @EntityType = 'Order'
	Begin
		SET @Status = (SELECT top 1 1 FROM ZnodeOmsOrderDetails ZO with (nolock)
			where exists(select * from ZnodeSalesRepCustomerUserPortal Z Where Z.SalesRepUserId = @SalesRepUserId AND ZO.UserId = Z.CustomerUserid)
			and ZO.OmsOrderId = @EntityId )
	End
	Else IF @EntityType = 'Return'
	Begin
		SET @Status = (SELECT top 1 1 FROM ZnodeRmaReturnDetails ZO with (nolock)
			where exists(select * from ZnodeSalesRepCustomerUserPortal Z Where Z.SalesRepUserId = @SalesRepUserId AND ZO.UserId = Z.CustomerUserid)
			and ZO.ReturnNumber = @ReturnNo )
	End
	Else IF @EntityType = 'Voucher'
	Begin
		SET @Status = (SELECT top 1 1 FROM ZnodeGiftCard ZO with (nolock)
			where exists(select * from ZnodeSalesRepCustomerUserPortal Z Where Z.SalesRepUserId = @SalesRepUserId AND ZO.UserId = Z.CustomerUserid)
			and ZO.GiftCardId = @EntityId )
	End
	Else IF @EntityType = 'User'
	Begin
		SET @Status = (SELECT top 1 1 FROM ZnodeUser ZO with (nolock)
			where exists(select * from ZnodeSalesRepCustomerUserPortal Z Where Z.SalesRepUserId = @SalesRepUserId AND ZO.UserId = Z.CustomerUserid)
			and ZO.UserId = @EntityId )
	End 
	Else IF @EntityType = 'Pending Payment'
	Begin
		SET @Status = (SELECT top 1 1 FROM ZnodeOmsQuote ZOQ with (nolock)
			where exists(select * from ZnodeSalesRepCustomerUserPortal Z Where Z.SalesRepUserId = @SalesRepUserId AND ZOQ.UserId = Z.CustomerUserid)
			and ZOQ.UserId = @EntityId )
	End 
	Set @Status = CAST(ISNULL(@Status,0) as bit)
	SELECT 1 AS ID,@Status AS Status
End Try              
              
Begin Catch        
  
    SET @Status = 0;              
    DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),              
    @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetSalesRepAccessConfirmation @PortalId = '+cast(@SalesRepUserId as varchar(10));             
                                
    SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                                  
                  
    EXEC Znode_InsertProcedureErrorLog              
    @ProcedureName = 'Znode_GetSalesRepAccessConfirmation',              
    @ErrorInProcedure = @Error_procedure,              
    @ErrorMessage = @ErrorMessage,              
    @ErrorLine = @ErrorLine,              
    @ErrorCall = @ErrorCall;              
End Catch
End
go
IF Exists(select * from sys.procedures where name = 'ZnodeReport_DashboardSales')
	drop proc ZnodeReport_DashboardSales
go
CREATE PROCEDURE [dbo].[ZnodeReport_DashboardSales]            
(                   
 @PortalId  bigint  = null,        
 @AccountId bigint  = null,    
 @SalesRepUserId int = 0                      
)            
AS             
/*            
    Summary:- This procedure is used to get the order details             
    Unit Testing:            
    EXEC [ZnodeReport_DashboardSales] @PortalId=8, @AccountId=0, @SalesRepUserId=19           
*/            
  BEGIN            
  BEGIN TRY            
  SET NOCOUNT ON;            
          
  DECLARE @TotalNewCust int, @Frequency int, @TotalQuotes int, @TotalReturns int            
          
  DECLARE @TBL_CultureCurrency TaBLE (Symbol Varchar(100),CurrencyCode varchar(100),IsDefault bit)            
  INSERT INTO @TBL_CultureCurrency (Symbol,CurrencyCode,IsDefault)            
  SELECT Symbol,CultureCode, IsDefault from  ZnodeCulture ZC  -- Changed ZnodeCurrency to ZnodeCulture here.          
            
  DECLARE @PortalCurrencySymbol nvarchar(20)        
  DECLARE @DefaultCurrencySymbol nvarchar(20)          
    
	----Verifying that the @SalesRepUserId is having 'Sales Rep' role
	IF NOT EXISTS
	(
		SELECT * FROM ZnodeUser ZU
		INNER JOIN AspNetZnodeUser ANZU ON ZU.UserName = ANZU.UserName
		INNER JOIN AspNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName
		INNER JOIN AspNetUserRoles ANUR ON ANU.Id = ANUR.UserId
		Where Exists(select * from AspNetRoles ANR Where Name = 'Sales Rep' AND ANUR.RoleId = ANR.Id) 
		AND ZU.UserId = @SalesRepUserId
	)   
	Begin
		SET @SalesRepUserId = 0
	End  
  
  SET @PortalCurrencySymbol = [dbo].[Fn_GetPortalCurrencySymbol](CAST(@PortalID AS INTEGER) )        
  SET @DefaultCurrencySymbol = [dbo].[Fn_GetDefaultCurrencySymbol]()         
        
  IF @PortalCurrencySymbol IS NULL         
 UPDATE @TBL_CultureCurrency SET Symbol  =@DefaultCurrencySymbol WHERE  Symbol IS NULL        
  ELSE         
    UPDATE @TBL_CultureCurrency SET Symbol  =@PortalCurrencySymbol WHERE  Symbol IS NULL        
                 
 SELECT   count(*)  TotalOrders , sum(ZOOD.Total) TotalSales,      
 COALESCE (ZC.Symbol,[dbo].[Fn_GetPortalCurrencySymbol](CAST(@PortalId AS INTEGER)),[dbo].[Fn_GetDefaultCurrencySymbol]()) Symbol                
 INTO #CalculateTotalValues        
 FROM ZNodeOmsOrder ZOO            
 INNER JOIN ZnodeOmsOrderDetails ZOOD ON(ZOOD.OmsOrderId = ZOO.OmsOrderId AND IsActive = 1)            
 INNER JOIN ZNodePortal P ON (P.PortalID = ZOOD.PortalId )        
 LEFT JOIN ZnodeUser ZU ON (ZU.UserId = ZOOD.UserId)    
 LEFT JOIN @TBL_CultureCurrency ZC ON (ZC.CurrencyCode = ZOOD.CurrencyCode )            
 WHERE ZOOD.IsActive =1 AND             
         
(P.PortalId = @PortalId OR ISNULL(@PortalId,0)=0) AND  (ZU.AccountId = @AccountId OR ISNULL(@AccountId,0)=0)      
 and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = @SalesRepUserId and ZU.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)          
 Group by ZC.Symbol              
             
                
    -- this will CHECK for customer             
  SELECT @TotalNewCust = COUNT(*)         
  FROM View_CustomerUserDetail CUD  WHERE                       
  (CUD.PortalId=@PortalId OR ISNULL(@PortalId,0)=0) AND  (CUD.AccountId = @AccountId OR ISNULL(@AccountId,0)=0)    
      
  -- This will get quotes count       
  SELECT ZU.UserId, ZU.FirstName, ZU.MiddleName, ZU.LastName, ZU.Email , ZU.PhoneNumber          
  INTO #User          
  FROM ZnodeUser ZU           
  WHERE EXISTS(SELECT * FROM ZnodeOmsQuote ZOQ where ZU.UserId = ZOQ.UserID )    AND (ZU.AccountId = @AccountId OR ISNULL(@AccountId,0)=0)     
  and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = @SalesRepUserId and ZU.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)  
      
  Update ZOQ set OmsOrderStateId = (select top 1 OmsOrderStateId from ZnodeOMSOrderState where OrderStateName = 'EXPIRED')          
  from ZnodeOmsQuote ZOQ          
  Inner Join ZnodeOmsQuoteType ZOQT ON ZOQ.OmsQuoteTypeId = ZOQT.OmsQuoteTypeId          
  INNER JOIN #User U ON ZOQ.UserId = U.UserId           
  INNER JOIN ZnodePortal ZP ON ZOQ.PortalID = ZP.PortalID          
  INNER JOIN ZnodeOMSOrderState ZOOS ON ZOOS.OmsOrderStateId = ZOQ.OmsOrderStateId          
  where  (ZOQ.PortalID = @PortalId OR ISNULL(@PortalId,0)=0)          
  and cast(ZOQ.QuoteExpirationDate as date) < cast(GETDATE() as date)          
  and ZOQ.OmsOrderStateId <> (select top 1 OmsOrderStateId from ZnodeOMSOrderState where OrderStateName = 'EXPIRED')          
          
       
  Select @TotalQuotes = COUNT(*)                
          
  from ZnodeOmsQuote ZOQ          
  Inner Join ZnodeOmsQuoteType ZOQT ON ZOQ.OmsQuoteTypeId = ZOQT.OmsQuoteTypeId          
  INNER JOIN #User U ON ZOQ.UserId = U.UserId           
  INNER JOIN ZnodePortal ZP ON ZOQ.PortalID = ZP.PortalID          
  INNER JOIN ZnodeOMSOrderState ZOOS ON ZOOS.OmsOrderStateId = ZOQ.OmsOrderStateId          
  LEFT JOIN @TBL_CultureCurrency ZC ON (ZC.CurrencyCode = ZOQ.CultureCode )           
  where  (ZOQ.PortalID = @PortalId OR @PortalId = 0 OR @PortalId is null)          
  and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = @SalesRepUserId and U.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)      
      
  -- This will get returns count       
  select @TotalReturns = COUNT(*)               
   from ZnodeRmaReturnDetails ZRRD          
   inner join ZnodeUser ZU ON ZRRD.UserId = ZU.UserId          
   inner join ZnodePortal ZP ON ZRRD.PortalId = ZP.PortalId           
   inner join ZnodeRmaReturnState ZRRS on ZRRD.RmaReturnStateId = ZRRS.RmaReturnStateId          
   LEFT JOIN @TBL_CultureCurrency ZC ON (ZC.CurrencyCode = ZRRD.CultureCode )         
   where isnull(ZRRD.RmaReturnStateId,0) not in (select isnull(RmaReturnStateId,0) from ZnodeRmaReturnState where ReturnStateName = 'Not Submitted')          
   AND (ZRRD.PortalId = @PortalId OR @PortalId  =0 or @PortalId is null)  AND (ZU.AccountId = @AccountId OR ISNULL(@AccountId,0)=0)     
   and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = @SalesRepUserId and ZU.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)  
              
  SELECT  Sum(TotalOrders) AS TotalOrders,Sum(TotalSales) AS TotalSales,Symbol,@TotalNewCust AS TotalNewCust, @TotalQuotes as TotalQuotes, @TotalReturns as TotalReturns      
  INTO #TotalValues        
  FROM #CalculateTotalValues          
  GROUP BY Symbol            
       
  IF not exists(select * from #TotalValues)
  Begin
	SELECT 0 as TotalOrders, cast('0' as varchar(10)) as TotalSales            
	  , 0 as TotalNewCust ,0 AS TotalAvgOrders,0 as TotalQuotes,0 as TotalReturns ,
	  [dbo].[Fn_GetDefaultCurrencySymbol]() Symbol           
	  
  End
  Else
  Begin
	  SELECT TotalOrders, [dbo].[Fn_GetDefaultPriceRoundOff](TotalSales) TotalSales            
	  , TotalNewCust ,Isnull(TotalOrders / @Frequency,0) AS TotalAvgOrders,TotalQuotes,TotalReturns ,Symbol         
	  FROM #TotalValues 
  End

        
  END TRY            
  BEGIN CATCH            
  DECLARE @Status BIT ;            
 SET @Status = 0;            
 DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),            
 @ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeReport_DashboardSales @PortalId='+CAST(@PortalId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));            
                              
 SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                                
                
    EXEC Znode_InsertProcedureErrorLog            
    @ProcedureName = 'ZnodeReport_DashboardSales',            
    @ErrorInProcedure = @Error_procedure,            
    @ErrorMessage = @ErrorMessage,            
    @ErrorLine = @ErrorLine,            
    @ErrorCall = @ErrorCall;            
  END CATCH            
  END;
  go
  if exists(select * from sys.procedures where name = 'Znode_GetGiftCardList')
	drop proc Znode_GetGiftCardList
go
CREATE PROCEDURE [dbo].[Znode_GetGiftCardList]  
(   
	@WhereClause NVARCHAR(max),  
    @Rows        INT            = 100,  
    @PageNo      INT            = 1,  
    @Order_BY    VARCHAR(1000)  = '',  
    @RowsCount   INT  out,  
	@PortalId varchar(100),  
	@ExpirationDate VARCHAR(100) = '',
	@SalesRepUserId int = 0 
  )    
AS   
/*  
    Summary: This procedure is used to find the GiftCardList of user for portal   
 Unit Testing:   
 declare @aa int  
 EXEC Znode_GetGiftCardList @WhereClause='Userid = 5 ' ,@PortalId ='1,2,3,4,6,7,9,10,1010,1011,1012,1013,1014,1015,1016,1020,1021,1023,1024,1025,1028,1029,1030',  @RowsCount= 0,@ExpirationDate = '2017-04-06'  
  
     EXEC Znode_GetGiftCardList @WhereClause='' ,@PortalId ='1',  @RowsCount= 0,@ExpirationDate = ''  ,@SalesRepUserId=2
*/  
  
     BEGIN  
         BEGIN TRY  
             SET NOCOUNT ON;  
             DECLARE @SQL NVARCHAR(MAX);  
    DECLARE @TBL_GiftCardList TABLE (StoreName NVARCHAR(MAX),Name NVARCHAR(600)  
            ,CardNumber NVARCHAR(600),CreatedDate DATETIME,StartDate DATETIME, ExpirationDate DATETIME  
            ,Amount NUMERIC(28,6),RemainingAmount NUMERIC(28,6),CustomerId INT,CustomerName NVARCHAR(512),AccountName NVARCHAR(512),IsActive BIT ,GiftCardId INT,UserId INT,CultureCode VARCHAR(100), RowId INT, CountNo INT, AccountCode nvarchar(100)  )  
	
	----Verifying that the @SalesRepUserId is having 'Sales Rep' role
	IF NOT EXISTS
	(
		SELECT * FROM ZnodeUser ZU
		INNER JOIN AspNetZnodeUser ANZU ON ZU.UserName = ANZU.UserName
		INNER JOIN AspNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName
		INNER JOIN AspNetUserRoles ANUR ON ANU.Id = ANUR.UserId
		Where Exists(select * from AspNetRoles ANR Where Name = 'Sales Rep' AND ANUR.RoleId = ANR.Id) 
		AND ZU.UserId = @SalesRepUserId
	)   
	Begin
		SET @SalesRepUserId = 0
	End

    SET @SQL ='  
      DECLARE @TBL_PortalId TABLE (PortalId INT)  
                  INSERT INTO @TBL_PortalId    
      SELECT  ITEM  FROM dbo.split( '''+@PortalId+''','','') AS a;   
  
      ;WITH CTE_GetGiftCard AS  
      (  
      SELECT ZP.StoreName,ZGC.Name,CardNumber,ZGC.CreatedDate,StartDate, ExpirationDate,Amount,RemainingAmount,ZGC.UserId AS CustomerId,  
      CASE WHEN ZU.FirstName IS NULL THEN '''' ELSE ZU.FirstName END + CASE WHEN ZU.LastName IS NULL  THEN '''' ELSE '' ''+ZU.LastName END as CustomerName,ZA.Name As AccountName,ZGC.IsActive  
      ,GiftCardId, ZU.UserId,IsReferralCommission,zc.CultureCode AS CurrencyCode, ZA.AccountCode
      FROM ZnodeGiftCard ZGC   
      INNER JOIN ZnodePortal ZP ON (ZGC.PortalId = ZP.PortalId)  
      INNER JOIN ZnodePortalUnit zpu on (zp.PortalId = zpu.PortalId)  
      LEFT JOIN ZnodeCulture zc on (zc.CultureId = zpu.CultureId)  
      LEFT JOIN ZnodeUser ZU ON (ZU.UserId = ZGC.UserId)  
	  LEFT JOIN ZnodeAccount ZA ON (ZA.AccountId= ZU.AccountId)
      LEFT JOIN @TBL_PortalId TP ON (TP.PortalId = ZGC.PortalId)  
      WHERE ((CONVERT(date,''' +@ExpirationDate+''' ) <= CONVERT(DATE,ZGC.ExpirationDate) OR ZGC.ExpirationDate IS  NULL)  OR '''+@ExpirationDate+''' = '''') AND ZGC.PortalId in ('+@PortalId+') 
	  and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where (SalRep.SalesRepUserId = '+cast(@SalesRepUserId as varchar(10))+' and ZGC.UserId = SalRep.CustomerUserid) or ZGC.createdby= ' + cast(@SalesRepUserId as varchar(10)) + ' ) or '+cast(@SalesRepUserId as varchar(10))+' = 0)
      )  
      , CTE_GetGiftCardList AS  
      (  
      SELECT StoreName,Name,CardNumber,CreatedDate,StartDate,ExpirationDate,Amount,RemainingAmount,CustomerId,CustomerName,AccountName,IsActive,GiftCardId,UserId,CurrencyCode, AccountCode, 
      '+dbo.Fn_GetPagingRowId(@Order_BY,'GiftCardId DESC')+',Count(*)Over() CountNo   
      FROM CTE_GetGiftCard  
      WHERE 1=1 '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'       
      )  
  
      SELECT StoreName,Name,CardNumber,CreatedDate,StartDate,ExpirationDate,Amount,RemainingAmount,CustomerId,CustomerName,AccountName,IsActive,GiftCardId,UserId,CurrencyCode,RowId,CountNo, AccountCode  
      FROM CTE_GetGiftCardList  
      '+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)  
       
   
   INSERT INTO @TBL_GiftCardList  
   EXEC(@SQL)  
  
   SET @RowsCount =ISNULL((SELECT TOP 1 CountNo FROM @TBL_GiftCardList ),0)  
     
   SELECT StoreName,Name,CardNumber,CreatedDate,StartDate,ExpirationDate,Amount,RemainingAmount,CustomerId,CustomerName,AccountName,IsActive,GiftCardId,UserId,CultureCode, AccountCode 
   FROM @TBL_GiftCardList  
  
      END TRY  
   BEGIN CATCH  
    DECLARE @Status BIT ;  
       SET @Status = 0;  
       DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),  
    @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetGiftCardList @WhereClause = '+CAST(@WhereClause AS VARCHAR(MAX))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@PortalId='+@PortalId+',@ExpirationDate='+CAST(@ExpirationDate AS VARCHAR(50))+'@Status='+CAST(@Status AS VARCHAR(10));  
                    
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                      
      
             EXEC Znode_InsertProcedureErrorLog  
    @ProcedureName = 'Znode_GetGiftCardList',  
    @ErrorInProcedure = @Error_procedure,  
    @ErrorMessage = @ErrorMessage,  
    @ErrorLine = @ErrorLine,  
    @ErrorCall = @ErrorCall;  
   END CATCH  
     END
go
if exists(select * from sys.procedures where name = 'Znode_GetSalesRepAccessConfirmation')
	drop proc Znode_GetSalesRepAccessConfirmation
go
CREATE PROCEDURE [dbo].[Znode_GetSalesRepAccessConfirmation]
(
	@SalesRepUserId int,
	@EntityType Varchar(100),
	@EntityId int,
	@Status bit = 0 Out,
	@ReturnNo Varchar(100) = ''
)
--Exec Znode_GetSalesRepAccessConfirmation @SalesRepUserId=2,@EntityType='User',@EntityId=48
As
Begin
Begin Try
	SET NOCOUNT ON;
	SET @Status = 0
	IF NOT EXISTS
		(
			SELECT * FROM ZnodeUser ZU
			INNER JOIN AspNetZnodeUser ANZU ON ZU.UserName = ANZU.UserName
			INNER JOIN AspNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName
			INNER JOIN AspNetUserRoles ANUR ON ANU.Id = ANUR.UserId
			Where Exists(select * from AspNetRoles ANR Where Name = 'Sales Rep' AND ANUR.RoleId = ANR.Id) 
			AND ZU.UserId = @SalesRepUserId
		)   
	Begin
		SET @Status = 1
		SELECT 1 AS ID,@Status AS Status
		return
	End

	IF @EntityType = 'QUOTE'
	Begin
		SET @Status = (SELECT top 1 1 FROM ZnodeOmsQuote ZO with (nolock)
			where exists(select * from ZnodeSalesRepCustomerUserPortal Z Where Z.SalesRepUserId = @SalesRepUserId AND ZO.UserId = Z.CustomerUserid)
			and ZO.OmsQuoteId = @EntityId )
	End
	Else IF @EntityType = 'Order'
	Begin
		SET @Status = (SELECT top 1 1 FROM ZnodeOmsOrderDetails ZO with (nolock)
			where exists(select * from ZnodeSalesRepCustomerUserPortal Z Where Z.SalesRepUserId = @SalesRepUserId AND ZO.UserId = Z.CustomerUserid)
			and ZO.OmsOrderId = @EntityId )
	End
	Else IF @EntityType = 'Return'
	Begin
		SET @Status = (SELECT top 1 1 FROM ZnodeRmaReturnDetails ZO with (nolock)
			where exists(select * from ZnodeSalesRepCustomerUserPortal Z Where Z.SalesRepUserId = @SalesRepUserId AND ZO.UserId = Z.CustomerUserid)
			and ZO.ReturnNumber = @ReturnNo )
	End
	Else IF @EntityType = 'Voucher'
	Begin
		SET @Status = (SELECT top 1 1 FROM ZnodeGiftCard ZO with (nolock)
			where exists(select * from ZnodeSalesRepCustomerUserPortal Z Where (Z.SalesRepUserId = @SalesRepUserId  AND ZO.UserId = Z.CustomerUserid) or (@SalesRepUserId =ZO.createdby))
			and ZO.GiftCardId = @EntityId )
	End
	Else IF @EntityType = 'User'
	Begin
		SET @Status = (SELECT top 1 1 FROM ZnodeUser ZO with (nolock)
			where exists(select * from ZnodeSalesRepCustomerUserPortal Z Where Z.SalesRepUserId = @SalesRepUserId AND ZO.UserId = Z.CustomerUserid)
			and ZO.UserId = @EntityId )
	End 
	Else IF @EntityType = 'Pending Payment'
	Begin
		SET @Status = (SELECT top 1 1 FROM ZnodeOmsQuote ZOQ with (nolock)
			where exists(select * from ZnodeSalesRepCustomerUserPortal Z Where Z.SalesRepUserId = @SalesRepUserId AND ZOQ.UserId = Z.CustomerUserid)
			and ZOQ.UserId = @EntityId )
	End 
	Set @Status = CAST(ISNULL(@Status,0) as bit)
	SELECT 1 AS ID,@Status AS Status
End Try              
              
Begin Catch        
  
    SET @Status = 0;              
    DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),              
    @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetSalesRepAccessConfirmation @PortalId = '+cast(@SalesRepUserId as varchar(10));             
                                
    SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                                  
                  
    EXEC Znode_InsertProcedureErrorLog              
    @ProcedureName = 'Znode_GetSalesRepAccessConfirmation',              
    @ErrorInProcedure = @Error_procedure,              
    @ErrorMessage = @ErrorMessage,              
    @ErrorLine = @ErrorLine,              
    @ErrorCall = @ErrorCall;              
End Catch
End
go
update ZnodeActions set IsGlobalAccess=1 where ActionName = 'GetSuggestions' and ControllerName= 'Typeahead'
go
IF Exists(select * from sys.procedures where name = 'Znode_GetGiftCardList')
	drop proc Znode_GetGiftCardList
go
Create PROCEDURE [dbo].[Znode_GetGiftCardList]  
(  
	@WhereClause NVARCHAR(max),  
	@Rows        INT            = 100,  
	@PageNo      INT            = 1,  
	@Order_BY    VARCHAR(1000)  = '',  
	@RowsCount   INT  out,  
	@PortalId varchar(100),  
	@ExpirationDate VARCHAR(100) = '',
	@SalesRepUserId int = 0
  )    
AS  
/*  
    Summary: This procedure is used to find the GiftCardList of user for portal  
 Unit Testing:  
 declare @aa int  
 EXEC Znode_GetGiftCardList @WhereClause='Userid = 5 ' ,@PortalId ='1,2,3,4,6,7,9,10,1010,1011,1012,1013,1014,1015,1016,1020,1021,1023,1024,1025,1028,1029,1030',  @RowsCount= 0,@ExpirationDate = '2017-04-06'  
 
     EXEC Znode_GetGiftCardList @WhereClause='' ,@PortalId ='1',  @RowsCount= 0,@ExpirationDate = ''  ,@SalesRepUserId=2
*/  
 
     BEGIN  
         BEGIN TRY  
             SET NOCOUNT ON;  
             DECLARE @SQL NVARCHAR(MAX);  
    DECLARE @TBL_GiftCardList TABLE (StoreName NVARCHAR(MAX),Name NVARCHAR(600)  
            ,CardNumber NVARCHAR(600),CreatedDate DATETIME,StartDate DATETIME, ExpirationDate DATETIME  
            ,Amount NUMERIC(28,6),RemainingAmount NUMERIC(28,6),CustomerId INT,CustomerName NVARCHAR(512),AccountName NVARCHAR(512),IsActive BIT ,GiftCardId INT,UserId INT,CultureCode VARCHAR(100), RowId INT, CountNo INT, AccountCode nvarchar(100)  )  

----Verifying that the @SalesRepUserId is having 'Sales Rep' role
IF NOT EXISTS
(
SELECT * FROM ZnodeUser ZU
INNER JOIN AspNetZnodeUser ANZU ON ZU.UserName = ANZU.UserName
INNER JOIN AspNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName
INNER JOIN AspNetUserRoles ANUR ON ANU.Id = ANUR.UserId
Where Exists(select * from AspNetRoles ANR Where Name = 'Sales Rep' AND ANUR.RoleId = ANR.Id)
AND ZU.UserId = @SalesRepUserId
)  
Begin
SET @SalesRepUserId = 0
End

    SET @SQL ='  
      DECLARE @TBL_PortalId TABLE (PortalId INT)  
                  INSERT INTO @TBL_PortalId    
      SELECT  ITEM  FROM dbo.split( '''+@PortalId+''','','') AS a;  
 
      ;WITH CTE_GetGiftCard AS  
      (  
      SELECT ZP.StoreName,ZGC.Name,CardNumber,ZGC.CreatedDate,StartDate, ExpirationDate,Amount,RemainingAmount,ZGC.UserId AS CustomerId,  
      CASE WHEN ZU.FirstName IS NULL THEN '''' ELSE ZU.FirstName END + CASE WHEN ZU.LastName IS NULL  THEN '''' ELSE '' ''+ZU.LastName END as CustomerName,ZA.Name As AccountName,ZGC.IsActive  
      ,GiftCardId, ZU.UserId,IsReferralCommission,zc.CultureCode AS CurrencyCode, ZA.AccountCode
      FROM ZnodeGiftCard ZGC  
      INNER JOIN ZnodePortal ZP ON (ZGC.PortalId = ZP.PortalId)  
      INNER JOIN ZnodePortalUnit zpu on (zp.PortalId = zpu.PortalId)  
      LEFT JOIN ZnodeCulture zc on (zc.CultureId = zpu.CultureId)  
      LEFT JOIN ZnodeUser ZU ON (ZU.UserId = ZGC.UserId)  
	  LEFT JOIN ZnodeAccount ZA ON (ZA.AccountId= ZU.AccountId)
      LEFT JOIN @TBL_PortalId TP ON (TP.PortalId = ZGC.PortalId)  
      WHERE ((CONVERT(date,''' +@ExpirationDate+''' ) <= CONVERT(DATE,ZGC.ExpirationDate) OR ZGC.ExpirationDate IS  NULL)  OR '''+@ExpirationDate+''' = '''') AND ZGC.PortalId in ('+@PortalId+')
	and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where (SalRep.SalesRepUserId = '+cast(@SalesRepUserId as varchar(10))+' and ZGC.UserId = SalRep.CustomerUserid)) or ZGC.createdby= ' + cast(@SalesRepUserId as varchar(10)) + ' or '+cast(@SalesRepUserId as varchar(10))+' = 0)
      )  
      , CTE_GetGiftCardList AS  
      (  
      SELECT StoreName,Name,CardNumber,CreatedDate,StartDate,ExpirationDate,Amount,RemainingAmount,CustomerId,CustomerName,AccountName,IsActive,GiftCardId,UserId,CurrencyCode, AccountCode,
      '+dbo.Fn_GetPagingRowId(@Order_BY,'GiftCardId DESC')+',Count(*)Over() CountNo  
      FROM CTE_GetGiftCard  
      WHERE 1=1 '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'      
      )  
 
      SELECT StoreName,Name,CardNumber,CreatedDate,StartDate,ExpirationDate,Amount,RemainingAmount,CustomerId,CustomerName,AccountName,IsActive,GiftCardId,UserId,CurrencyCode,RowId,CountNo, AccountCode  
      FROM CTE_GetGiftCardList  
      '+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)  
       
   
   INSERT INTO @TBL_GiftCardList  
   EXEC(@SQL)  
 
   SET @RowsCount =ISNULL((SELECT TOP 1 CountNo FROM @TBL_GiftCardList ),0)  
     
   SELECT StoreName,Name,CardNumber,CreatedDate,StartDate,ExpirationDate,Amount,RemainingAmount,CustomerId,CustomerName,AccountName,IsActive,GiftCardId,UserId,CultureCode, AccountCode
   FROM @TBL_GiftCardList  
 
END TRY  
BEGIN CATCH  
	DECLARE @Status BIT ;  
	SET @Status = 0;  
	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),  
	@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetGiftCardList @WhereClause = '+CAST(@WhereClause AS VARCHAR(MAX))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@PortalId='+@PortalId+',@ExpirationDate='+CAST(@ExpirationDate AS VARCHAR(50))+'@Status='+CAST(@Status AS VARCHAR(10));  
                   
			SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                      
     
			EXEC Znode_InsertProcedureErrorLog  
	@ProcedureName = 'Znode_GetGiftCardList',  
	@ErrorInProcedure = @Error_procedure,  
	@ErrorMessage = @ErrorMessage,  
	@ErrorLine = @ErrorLine,  
	@ErrorCall = @ErrorCall;  
END CATCH  
END
go
IF Exists(select * from sys.procedures where name = 'Znode_GetSalesRepAccessConfirmation')
	drop proc Znode_GetSalesRepAccessConfirmation
go
CREATE PROCEDURE [dbo].[Znode_GetSalesRepAccessConfirmation]
(
@SalesRepUserId int,
@EntityType Varchar(100),
@EntityId int,
@Status bit = 0 Out,
@ReturnNo Varchar(100) = ''
)
--Exec Znode_GetSalesRepAccessConfirmation @SalesRepUserId=3,@EntityType='User',@EntityId=48
As
Begin
Begin Try
SET NOCOUNT ON;
SET @Status = 0
IF NOT EXISTS
(
SELECT * FROM ZnodeUser ZU
INNER JOIN AspNetZnodeUser ANZU ON ZU.UserName = ANZU.UserName
INNER JOIN AspNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName
INNER JOIN AspNetUserRoles ANUR ON ANU.Id = ANUR.UserId
Where Exists(select * from AspNetRoles ANR Where Name = 'Sales Rep' AND ANUR.RoleId = ANR.Id)
AND ZU.UserId = @SalesRepUserId
)  
Begin
SET @Status = 1
SELECT 1 AS ID,@Status AS Status
return
End

IF @EntityType = 'QUOTE'
Begin
SET @Status = (SELECT top 1 1 FROM ZnodeOmsQuote ZO with (nolock)
where exists(select * from ZnodeSalesRepCustomerUserPortal Z Where Z.SalesRepUserId = @SalesRepUserId AND ZO.UserId = Z.CustomerUserid)
and ZO.OmsQuoteId = @EntityId )
End
Else IF @EntityType = 'Order'
Begin
SET @Status = (SELECT top 1 1 FROM ZnodeOmsOrderDetails ZO with (nolock)
where exists(select * from ZnodeSalesRepCustomerUserPortal Z Where Z.SalesRepUserId = @SalesRepUserId AND ZO.UserId = Z.CustomerUserid)
and ZO.OmsOrderId = @EntityId )
End
Else IF @EntityType = 'Return'
Begin
SET @Status = (SELECT top 1 1 FROM ZnodeRmaReturnDetails ZO with (nolock)
where exists(select * from ZnodeSalesRepCustomerUserPortal Z Where Z.SalesRepUserId = @SalesRepUserId AND ZO.UserId = Z.CustomerUserid)
and ZO.ReturnNumber = @ReturnNo )
End
Else IF @EntityType = 'Voucher'
Begin
SET @Status = (SELECT top 1 1 FROM ZnodeGiftCard ZO with (nolock)
where (exists(select * from ZnodeSalesRepCustomerUserPortal Z Where (Z.SalesRepUserId = @SalesRepUserId  AND ZO.UserId = Z.CustomerUserid)) or (@SalesRepUserId =ZO.createdby))
and ZO.GiftCardId = @EntityId )
End
Else IF @EntityType = 'User'
Begin
SET @Status = (SELECT top 1 1 FROM ZnodeUser ZO with (nolock)
where exists(select * from ZnodeSalesRepCustomerUserPortal Z Where Z.SalesRepUserId = @SalesRepUserId AND ZO.UserId = Z.CustomerUserid)
and ZO.UserId = @EntityId )
End
Else IF @EntityType = 'Pending Payment'
Begin
SET @Status = (SELECT top 1 1 FROM ZnodeOmsQuote ZOQ with (nolock)
where exists(select * from ZnodeSalesRepCustomerUserPortal Z Where Z.SalesRepUserId = @SalesRepUserId AND ZOQ.UserId = Z.CustomerUserid)
and ZOQ.UserId = @EntityId )
End
Set @Status = CAST(ISNULL(@Status,0) as bit)
SELECT 1 AS ID,@Status AS Status
End Try              
             
Begin Catch        
 
    SET @Status = 0;              
    DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),              
    @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetSalesRepAccessConfirmation @PortalId = '+cast(@SalesRepUserId as varchar(10));            
                               
    SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                                  
                 
    EXEC Znode_InsertProcedureErrorLog              
    @ProcedureName = 'Znode_GetSalesRepAccessConfirmation',              
    @ErrorInProcedure = @Error_procedure,              
    @ErrorMessage = @ErrorMessage,              
    @ErrorLine = @ErrorLine,              
    @ErrorCall = @ErrorCall;              
End Catch
End
go
If exists(select * from sys.procedures where name = 'ZnodeReport_DashboardReturns')
	drop proc ZnodeReport_DashboardReturns
go
CREATE PROCEDURE [dbo].[ZnodeReport_DashboardReturns]              
(             
	 @PortalId  bigint  = null,        
	 @AccountId bigint  = null  ,    
	 @SalesRepUserId int = 0              
)              
AS               
/*              
     Summary:- This procedure is used to get the order details               
    Unit Testing:              
     EXEC [ZnodeReport_DashboardReturns]              
*/              
BEGIN              
BEGIN TRY              
  SET NOCOUNT ON;              
  DECLARE @TopItem TABLE (ItemName nvarchar(100),CustomerName nvarchar(100),ItemId nvarchar(10), Total numeric(28,6) , Date datetime,Symbol NVARCHAR(10))               
            
                 
  DECLARE @RoundOffValue INT= dbo.Fn_GetDefaultValue('PriceRoundOff')   
           
  ----Verifying that the @SalesRepUserId is having 'Sales Rep' role
	IF NOT EXISTS
	(
		SELECT * FROM ZnodeUser ZU
		INNER JOIN AspNetZnodeUser ANZU ON ZU.UserName = ANZU.UserName
		INNER JOIN AspNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName
		INNER JOIN AspNetUserRoles ANUR ON ANU.Id = ANUR.UserId
		Where Exists(select * from AspNetRoles ANR Where Name = 'Sales Rep' AND ANUR.RoleId = ANR.Id) 
		AND ZU.UserId = @SalesRepUserId
	)   
	Begin
		SET @SalesRepUserId = 0
	End               
  
  DECLARE @TBL_CultureCurrency TaBLE (Symbol Varchar(100),CurrencyCode varchar(100))              
  INSERT INTO @TBL_CultureCurrency (Symbol,CurrencyCode)              
  SELECT Symbol,CultureCode FROM  ZnodeCulture ZC               
  DECLARE @PortalCurrencySymbol nvarchar(20)          
  DECLARE @DefaultCurrencySymbol nvarchar(20)            
            
  SET @PortalCurrencySymbol = [dbo].[Fn_GetPortalCurrencySymbol](CAST(@PortalID AS INTEGER) )          
  SET @DefaultCurrencySymbol = [dbo].[Fn_GetDefaultCurrencySymbol]()           
          
  IF @PortalCurrencySymbol IS NULL           
  UPDATE @TBL_CultureCurrency SET Symbol  =@DefaultCurrencySymbol WHERE  Symbol IS NULL          
  ELSE           
  UPDATE @TBL_CultureCurrency SET Symbol  =@PortalCurrencySymbol WHERE  Symbol IS NULL          
              
   IF @AccountId = -1
   Begin
		INSERT INTO @TopItem(ItemId, ItemName,CustomerName,Date,Total,Symbol)                
		select ZRRD.RmaReturnDetailsId,ZRRD.ReturnNumber, isnull(ZU.FirstNAme,'''')+' '+isnull(ZU.LastName,'') as UserName,ZRRD.ReturnDate,          
		round(ZRRD.TotalReturnAmount,@RoundOffValue) TotalReturnAmount,          
		COALESCE (ZC.Symbol,[dbo].[Fn_GetPortalCurrencySymbol](CAST(@PortalId AS INTEGER)),[dbo].[Fn_GetDefaultCurrencySymbol]())               
		from ZnodeRmaReturnDetails ZRRD          
		inner join ZnodeUser ZU ON ZRRD.UserId = ZU.UserId          
		inner join ZnodePortal ZP ON ZRRD.PortalId = ZP.PortalId           
		inner join ZnodeRmaReturnState ZRRS on ZRRD.RmaReturnStateId = ZRRS.RmaReturnStateId          
		LEFT JOIN @TBL_CultureCurrency ZC ON (ZC.CurrencyCode = ZRRD.CultureCode )         
		where isnull(ZRRD.RmaReturnStateId,0) not in (select isnull(RmaReturnStateId,0) from ZnodeRmaReturnState where ReturnStateName = 'Not Submitted')          
		AND (ZRRD.PortalId = @PortalId OR  isnull(@PortalId,0)= 0)            
		and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = @SalesRepUserId and ZU.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)       
		and IsNull(ZU.AccountId,0) = 0
   End
   Else
   Begin
	   INSERT INTO @TopItem(ItemId, ItemName,CustomerName,Date,Total,Symbol)  
	   select ZRRD.RmaReturnDetailsId,ZRRD.ReturnNumber, isnull(ZU.FirstNAme,'''')+' '+isnull(ZU.LastName,'') as UserName,ZRRD.ReturnDate,          
		round(ZRRD.TotalReturnAmount,@RoundOffValue) TotalReturnAmount,          
		COALESCE (ZC.Symbol,[dbo].[Fn_GetPortalCurrencySymbol](CAST(@PortalId AS INTEGER)),[dbo].[Fn_GetDefaultCurrencySymbol]())               
	   from ZnodeRmaReturnDetails ZRRD          
	   inner join ZnodeUser ZU ON ZRRD.UserId = ZU.UserId          
	   inner join ZnodePortal ZP ON ZRRD.PortalId = ZP.PortalId           
	   inner join ZnodeRmaReturnState ZRRS on ZRRD.RmaReturnStateId = ZRRS.RmaReturnStateId          
	   LEFT JOIN @TBL_CultureCurrency ZC ON (ZC.CurrencyCode = ZRRD.CultureCode )         
	   where isnull(ZRRD.RmaReturnStateId,0) not in (select isnull(RmaReturnStateId,0) from ZnodeRmaReturnState where ReturnStateName = 'Not Submitted')          
	   AND (ZRRD.PortalId = @PortalId OR  isnull(@PortalId,0)= 0) AND (ZU.AccountId = @AccountId OR  ISNULL(@AccountId,0) = 0)            
	   and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = @SalesRepUserId and ZU.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)       
   End

   SELECT TOP 5 ItemId, ItemName,CustomerName,Date,Total,Symbol FROM @TopItem Order by  Convert(numeric,Total )  desc                
   
END TRY              
              
BEGIN CATCH              
	DECLARE @Status BIT ;              
		SET @Status = 0;              
		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),              
	@ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeReport_DashboardReturns @PortalId = '+@PortalId;             
                                
				SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                                  
                  
				EXEC Znode_InsertProcedureErrorLog              
	@ProcedureName = 'ZnodeReport_DashboardReturns',              
	@ErrorInProcedure = @Error_procedure,              
	@ErrorMessage = @ErrorMessage,              
	@ErrorLine = @ErrorLine,              
	@ErrorCall = @ErrorCall;              
END CATCH              
              
END;
go
If exists(select * from sys.procedures where name = 'ZnodeReport_DashboardQuotes')
	drop proc ZnodeReport_DashboardQuotes
go
CREATE PROCEDURE [dbo].[ZnodeReport_DashboardQuotes]              
(             
	@PortalId  bigint  = null,        
	@AccountId bigint  = null,    
	@SalesRepUserId int = 0                
)              
AS               
/*              
     Summary:- This procedure is used to get the order details               
    Unit Testing:              
     EXEC [ZnodeReport_DashboardTopCategory]              
*/              
BEGIN              
BEGIN TRY              
SET NOCOUNT ON;              
	
	DECLARE @TopItem TABLE (ItemName nvarchar(100),CustomerName nvarchar(100),ItemId nvarchar(10), Total numeric(28,6) , Date datetime,Symbol NVARCHAR(10))               
     
	DECLARE @RoundOffValue INT= dbo.Fn_GetDefaultValue('PriceRoundOff')      
        
	----Verifying that the @SalesRepUserId is having 'Sales Rep' role
	IF NOT EXISTS
	(
		SELECT * FROM ZnodeUser ZU
		INNER JOIN AspNetZnodeUser ANZU ON ZU.UserName = ANZU.UserName
		INNER JOIN AspNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName
		INNER JOIN AspNetUserRoles ANUR ON ANU.Id = ANUR.UserId
		Where Exists(select * from AspNetRoles ANR Where Name = 'Sales Rep' AND ANUR.RoleId = ANR.Id) 
		AND ZU.UserId = @SalesRepUserId
	)   
	Begin
		SET @SalesRepUserId = 0
	End              
  
	DECLARE @TBL_CultureCurrency TaBLE (Symbol Varchar(100),CurrencyCode varchar(100))              
	INSERT INTO @TBL_CultureCurrency (Symbol,CurrencyCode)              
	SELECT Symbol,CultureCode FROM  ZnodeCulture ZC               
	DECLARE @PortalCurrencySymbol nvarchar(20)          
	DECLARE @DefaultCurrencySymbol nvarchar(20)            
            
	SET @PortalCurrencySymbol = [dbo].[Fn_GetPortalCurrencySymbol](CAST(@PortalID AS INTEGER) )          
	SET @DefaultCurrencySymbol = [dbo].[Fn_GetDefaultCurrencySymbol]()           
          
	IF @PortalCurrencySymbol IS NULL           
	UPDATE @TBL_CultureCurrency SET Symbol  =@DefaultCurrencySymbol WHERE  Symbol IS NULL          
	ELSE           
	UPDATE @TBL_CultureCurrency SET Symbol  =@PortalCurrencySymbol WHERE  Symbol IS NULL          
     
	CREATE TABLE #User(UserId INT, FirstName varchar(100), MiddleName varchar(100), LastName varchar(100), Email varchar(50), PhoneNumber varchar(50))

	IF @AccountId = -1
		INSERT INTO #User(UserId, FirstName, MiddleName, LastName, Email , PhoneNumber )
		SELECT ZU.UserId, ZU.FirstName, ZU.MiddleName, ZU.LastName, ZU.Email , ZU.PhoneNumber                    
		FROM ZnodeUser ZU           
		WHERE EXISTS(SELECT * FROM ZnodeOmsQuote ZOQ where ZU.UserId = ZOQ.UserID )        
		and ISNULL(ZU.AccountId,0) = 0      
	Else
		INSERT INTO #User(UserId, FirstName, MiddleName, LastName, Email , PhoneNumber )
		SELECT ZU.UserId, ZU.FirstName, ZU.MiddleName, ZU.LastName, ZU.Email , ZU.PhoneNumber          
		FROM ZnodeUser ZU           
		WHERE EXISTS(SELECT * FROM ZnodeOmsQuote ZOQ where ZU.UserId = ZOQ.UserID )        
		and (ZU.AccountId = @AccountId or isnull(@AccountId,0) = 0 ) 
          
	Update ZOQ set OmsOrderStateId = (select top 1 OmsOrderStateId from ZnodeOMSOrderState where OrderStateName = 'EXPIRED')          
	from ZnodeOmsQuote ZOQ          
	Inner Join ZnodeOmsQuoteType ZOQT ON ZOQ.OmsQuoteTypeId = ZOQT.OmsQuoteTypeId          
	INNER JOIN #User U ON ZOQ.UserId = U.UserId           
	INNER JOIN ZnodePortal ZP ON ZOQ.PortalID = ZP.PortalID          
	INNER JOIN ZnodeOMSOrderState ZOOS ON ZOOS.OmsOrderStateId = ZOQ.OmsOrderStateId          
	where  (ZOQ.PortalID = @PortalId OR @PortalId = 0 OR @PortalId is null)          
	and cast(ZOQ.QuoteExpirationDate as date) < cast(GETDATE() as date)          
	and ZOQ.OmsOrderStateId <> (select top 1 OmsOrderStateId from ZnodeOMSOrderState where OrderStateName = 'EXPIRED')          
          
	insert into @TopItem(ItemId, ItemName,CustomerName,Date,Total,Symbol)          
	Select ZOQ.OmsQuoteId,ZOQ.QuoteNumber as QuoteNumber,isnull(U.FirstName,'')+case when U.MiddleName is not null then ' ' else '' end+ isnull(U.MiddleName,'')+' '+isnull(U.LastName,'') as CustomerName,          
	ZOQ.CreatedDate as QuoteDate,ZOQ.QuoteOrderTotal as TotalAmount        
	,COALESCE (ZC.Symbol,[dbo].[Fn_GetPortalCurrencySymbol](CAST(@PortalId AS INTEGER)),[dbo].[Fn_GetDefaultCurrencySymbol]()) Symbol              
	from ZnodeOmsQuote ZOQ          
	Inner Join ZnodeOmsQuoteType ZOQT ON ZOQ.OmsQuoteTypeId = ZOQT.OmsQuoteTypeId          
	INNER JOIN #User U ON ZOQ.UserId = U.UserId           
	INNER JOIN ZnodePortal ZP ON ZOQ.PortalID = ZP.PortalID          
	INNER JOIN ZnodeOMSOrderState ZOOS ON ZOOS.OmsOrderStateId = ZOQ.OmsOrderStateId          
	LEFT JOIN @TBL_CultureCurrency ZC ON (ZC.CurrencyCode = ZOQ.CultureCode )           
	where  (ZOQ.PortalID = @PortalId OR @PortalId = 0 OR @PortalId is null)          
	and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = @SalesRepUserId and U.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)              
	and ZOQT.QuoteTypeCode = 'QUOTE'
	
	SELECT TOP 5 ItemId, ItemName,CustomerName,Date,Total,Symbol FROM @TopItem Order by  Convert(datetime,Date )  desc                
   
END TRY              
              
BEGIN CATCH              
	DECLARE @Status BIT ;              
		SET @Status = 0;              
		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),              
	@ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeReport_DashboardQuotes @PortalId = '+@PortalId;             
                                
				SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                                  
                  
				EXEC Znode_InsertProcedureErrorLog              
	@ProcedureName = 'ZnodeReport_DashboardQuotes',              
	@ErrorInProcedure = @Error_procedure,              
	@ErrorMessage = @ErrorMessage,              
	@ErrorLine = @ErrorLine,              
	@ErrorCall = @ErrorCall;              
END CATCH              
              
END;

go
If exists(select * from sys.procedures where name = 'ZnodeReport_DashboardOrders')
	drop proc ZnodeReport_DashboardOrders
go
CREATE PROCEDURE [dbo].[ZnodeReport_DashboardOrders]              
(            
	@PortalId  bigint  = null,        
	@AccountId bigint  = null  ,    
	@SalesRepUserId int = 0              
)              
AS              
/*              
Summary:- This procedure is used to get the order details              
Unit Testing:              
EXEC [ZnodeReport_DashboardOrders]              
*/              
BEGIN              
BEGIN TRY              
SET NOCOUNT ON;              
	DECLARE @TopItem TABLE (ItemName nvarchar(100),CustomerName nvarchar(100),ItemId nvarchar(10), Total numeric(28,6) , Date datetime,Symbol NVARCHAR(10))              
           
                 
	DECLARE @RoundOffValue INT= dbo.Fn_GetDefaultValue('PriceRoundOff')          
   
	----Verifying that the @SalesRepUserId is having 'Sales Rep' role
	IF NOT EXISTS
	(
		SELECT * FROM ZnodeUser ZU
		INNER JOIN AspNetZnodeUser ANZU ON ZU.UserName = ANZU.UserName
		INNER JOIN AspNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName
		INNER JOIN AspNetUserRoles ANUR ON ANU.Id = ANUR.UserId
		Where Exists(select * from AspNetRoles ANR Where Name = 'Sales Rep' AND ANUR.RoleId = ANR.Id)
		AND ZU.UserId = @SalesRepUserId
	)  
	Begin
		SET @SalesRepUserId = 0
	End    
             
	DECLARE @TBL_CultureCurrency TaBLE (Symbol Varchar(100),CurrencyCode varchar(100))              
	INSERT INTO @TBL_CultureCurrency (Symbol,CurrencyCode)              
	SELECT Symbol,CultureCode FROM  ZnodeCulture ZC              
	DECLARE @PortalCurrencySymbol nvarchar(20)          
	DECLARE @DefaultCurrencySymbol nvarchar(20)            
           
	SET @PortalCurrencySymbol = [dbo].[Fn_GetPortalCurrencySymbol](CAST(@PortalID AS INTEGER) )          
	SET @DefaultCurrencySymbol = [dbo].[Fn_GetDefaultCurrencySymbol]()          
         
	IF @PortalCurrencySymbol IS NULL          
	UPDATE @TBL_CultureCurrency SET Symbol  =@DefaultCurrencySymbol WHERE  Symbol IS NULL          
	ELSE          
	UPDATE @TBL_CultureCurrency SET Symbol  =@PortalCurrencySymbol WHERE  Symbol IS NULL          
   
	IF @AccountId = -1
	Begin
		INSERT INTO @TopItem(ItemId, ItemName,CustomerName,Date,Total,Symbol)          
		SELECT Zoo.OmsOrderId,Zoo.OrderNumber,ISNULL(RTRIM(LTRIM(ZODD.FirstName)),'')          
		+' '+ISNULL(RTRIM(LTRIM(ZODD.LastName)),'') UserName ,ZODD.OrderDate,ZODD.Total,        
		COALESCE (ZC.Symbol,[dbo].[Fn_GetPortalCurrencySymbol](CAST(@PortalId AS INTEGER)),[dbo].[Fn_GetDefaultCurrencySymbol]())          
		FROM ZnodeOmsOrder (nolock) ZOO          
		INNER JOIN ZnodeOmsOrderDetails (nolock) ZODD ON (ZODD.OmsOrderId = ZOO.OmsOrderId AND  ZODD.IsActive = 1)          
		INNER JOIN ZnodePortal (nolock) ZP ON (ZP.PortalId = ZODD.portalId )          
		INNER JOIN ZnodePublishState ZODPS ON (ZODPS.PublishStateId = ZOO.PublishStateId)          
		LEFT JOIN ZnodePaymentType (nolock) ZPS ON (ZPS.PaymentTypeId = ZODD.PaymentTypeId )          
		LEFT JOIN  ZnodeOmsOrderStateShowToCustomer (nolock) ZOSC ON (ZOSC.OmsOrderStateId = ZODD.OmsOrderStateId)          
		LEFT JOIN ZnodeOmsOrderState (nolock) ZOS ON (ZOS.OmsOrderStateId = ZODD.OmsOrderStateId)          
		LEFT JOIN ZnodeOmsPaymentState (nolock) ZOPS ON (ZOPS.OmsPaymentStateId = ZODD.OmsPaymentStateId)          
		LEft JOIN ZnodeUser ZU ON (ZU.UserId = ZODD.UserId)          
		LEFT JOIN [dbo].[View_GetUserDetails]  (nolock) ZVGD ON (ZVGD.UserId = ZODD.CreatedBy )          
		LEFT JOIN [dbo].[View_GetUserDetails]  (nolock) ZVGDI ON (ZVGDI.UserId = ZODD.ModifiedBy)          
		LEFT JOIN ZnodeShipping ZS ON (ZS.ShippingId = ZODD.ShippingId)          
		LEFT OUTER JOIN ZnodePaymentSetting (nolock) ZPSS ON (ZPSS.PaymentSettingId = ZODD.PaymentSettingId)          
		LEFT JOIN ZnodePortalPaymentSetting (nolock) ZPPS ON (ZPPS.PaymentSettingId = ZPSS.PaymentSettingId  AND ZPPS.PortalId = ZODD.PortalId   )          
		LEFT JOIN @TBL_CultureCurrency ZC ON (ZC.CurrencyCode = ZODD.CultureCode )        
		WHERE (ZP.PortalId = @PortalId OR  ISNULL(@PortalId,0) = 0)        
		and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = @SalesRepUserId and ZU.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)      
		and not Exists(Select * from ZnodeAccount ZA Where isnull(ZU.AccountId,0) = ZA.AccountId)
	End
	Else
	Begin
		INSERT INTO @TopItem(ItemId, ItemName,CustomerName,Date,Total,Symbol)          
		SELECT Zoo.OmsOrderId,Zoo.OrderNumber,ISNULL(RTRIM(LTRIM(ZODD.FirstName)),'')          
		+' '+ISNULL(RTRIM(LTRIM(ZODD.LastName)),'') UserName ,ZODD.OrderDate,ZODD.Total,        
		COALESCE (ZC.Symbol,[dbo].[Fn_GetPortalCurrencySymbol](CAST(@PortalId AS INTEGER)),[dbo].[Fn_GetDefaultCurrencySymbol]())          
		FROM ZnodeOmsOrder (nolock) ZOO          
		INNER JOIN ZnodeOmsOrderDetails (nolock) ZODD ON (ZODD.OmsOrderId = ZOO.OmsOrderId AND  ZODD.IsActive = 1)          
		INNER JOIN ZnodePortal (nolock) ZP ON (ZP.PortalId = ZODD.portalId )          
		INNER JOIN ZnodePublishState ZODPS ON (ZODPS.PublishStateId = ZOO.PublishStateId)          
		LEFT JOIN ZnodePaymentType (nolock) ZPS ON (ZPS.PaymentTypeId = ZODD.PaymentTypeId )          
		LEFT JOIN  ZnodeOmsOrderStateShowToCustomer (nolock) ZOSC ON (ZOSC.OmsOrderStateId = ZODD.OmsOrderStateId)          
		LEFT JOIN ZnodeOmsOrderState (nolock) ZOS ON (ZOS.OmsOrderStateId = ZODD.OmsOrderStateId)          
		LEFT JOIN ZnodeOmsPaymentState (nolock) ZOPS ON (ZOPS.OmsPaymentStateId = ZODD.OmsPaymentStateId)          
		LEFT JOIN ZnodeUser ZU ON (ZU.UserId = ZODD.UserId)          
		LEFT JOIN [dbo].[View_GetUserDetails]  (nolock) ZVGD ON (ZVGD.UserId = ZODD.CreatedBy )          
		LEFT JOIN [dbo].[View_GetUserDetails]  (nolock) ZVGDI ON (ZVGDI.UserId = ZODD.ModifiedBy)          
		LEFT JOIN ZnodeShipping ZS ON (ZS.ShippingId = ZODD.ShippingId)          
		LEFT OUTER JOIN ZnodePaymentSetting (nolock) ZPSS ON (ZPSS.PaymentSettingId = ZODD.PaymentSettingId)          
		LEFT JOIN ZnodePortalPaymentSetting (nolock) ZPPS ON (ZPPS.PaymentSettingId = ZPSS.PaymentSettingId  AND ZPPS.PortalId = ZODD.PortalId   )          
		LEFT JOIN @TBL_CultureCurrency ZC ON (ZC.CurrencyCode = ZODD.CultureCode )        
		WHERE (ZP.PortalId = @PortalId OR  ISNULL(@PortalId,0) = 0) AND (ZU.AccountId = @AccountId OR  ISNULL(@AccountId,0) = 0)        
		and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = @SalesRepUserId and ZU.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)      
	End

	SELECT TOP 5 ItemId, ItemName,CustomerName,Date,Total,Symbol FROM @TopItem Order by  Convert(datetime,Date )  desc                
   
END TRY              
             
BEGIN CATCH              
	DECLARE @Status BIT ;        
	SET @Status = 0;              
	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),              
	@ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeReport_DashboardOrders @PortalId = '+@PortalId;            
                               
	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                                  
                 
	EXEC Znode_InsertProcedureErrorLog              
	@ProcedureName = 'ZnodeReport_DashboardOrders',              
	@ErrorInProcedure = @Error_procedure,              
	@ErrorMessage = @ErrorMessage,              
	@ErrorLine = @ErrorLine,              
	@ErrorCall = @ErrorCall;              
END CATCH              
             
END;
go
If exists(select * from sys.procedures where name = 'ZnodeReport_DashboardTopAccounts')
	drop proc ZnodeReport_DashboardTopAccounts
go
CREATE PROCEDURE [dbo].[ZnodeReport_DashboardTopAccounts]              
(            
	@PortalId  bigint  = null,        
	@AccountId bigint  = null,    
	@SalesRepUserId int = 0                
)              
AS              
/*              
     Summary:- This procedure is used to get the order details              
    Unit Testing:              
     EXEC [ZnodeReport_DashboardTopAccounts]  @PortalId=7, @AccountId=0 ,@SalesRepUserId=0         
*/              
BEGIN              
BEGIN TRY              
    SET NOCOUNT ON;    
	----Verifying that the @SalesRepUserId is having 'Sales Rep' role
	IF NOT EXISTS
	(
	SELECT * FROM ZnodeUser ZU
	INNER JOIN AspNetZnodeUser ANZU ON ZU.UserName = ANZU.UserName
	INNER JOIN AspNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName
	INNER JOIN AspNetUserRoles ANUR ON ANU.Id = ANUR.UserId
	Where Exists(select * from AspNetRoles ANR Where Name = 'Sales Rep' AND ANUR.RoleId = ANR.Id)
	AND ZU.UserId = @SalesRepUserId
	)  
	Begin
	SET @SalesRepUserId = 0
	End            
 
	DECLARE @TopItem TABLE (ItemName nvarchar(100),CustomerName nvarchar(200),ItemId nvarchar(10), Total numeric(28,6),ItemDate datetime,Symbol NVARCHAR(10))            
             
    INSERT INTO @TopItem(ItemId, ItemName,CustomerName,ItemDate,Total,Symbol)          
       
	select ZA.AccountId,ZA.[Name], isnull(ZU.FirstNAme,'')+' '+isnull(ZU.LastName,'') as UserName, ZU.CreatedDate,0,''        
	from ZnodeAccount ZA      
	left join ZnodeUser ZU on ZU.AccountId = ZA.AccountId      
	left join  ZnodePortalAccount ZUP on ZUP.AccountId = ZA.AccountId          
	WHERE (ZUP.PortalId = @PortalId OR ISNULL(@PortalId,0) = 0) AND (ZA.AccountId = @AccountId OR  ISNULL(@AccountId,0) = 0)            
	and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = @SalesRepUserId and ZU.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)        
   
   SELECT TOP 5 ItemId, ItemName,CustomerName,ItemDate,Total,Symbol FROM @TopItem Order by  Convert(numeric,Total )  desc                
   
END TRY              
             
BEGIN CATCH              
	DECLARE @Status BIT ;              
	SET @Status = 0;              
	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),              
	@ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeReport_DashboardTopAccount @PortalId = '+@PortalId;            
                               
	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                                  
                 
	EXEC Znode_InsertProcedureErrorLog              
	@ProcedureName = 'ZnodeReport_DashboardTopAccount',              
	@ErrorInProcedure = @Error_procedure,              
	@ErrorMessage = @ErrorMessage,              
	@ErrorLine = @ErrorLine,              
	@ErrorCall = @ErrorCall;              
END CATCH              
             
END;
go
if EXISTs(select * from sys.procedures where name = 'ZnodeReport_DashboardSales')
	drop proc ZnodeReport_DashboardSales
go
CREATE PROCEDURE [dbo].[ZnodeReport_DashboardSales]            
(                   
	 @PortalId  bigint  = null,        
	 @AccountId bigint  = null,    
	 @SalesRepUserId int = 0                      
)            
AS             
/*            
    Summary:- This procedure is used to get the order details             
    Unit Testing:            
    EXEC [ZnodeReport_DashboardSales] @PortalId=8, @AccountId=0, @SalesRepUserId=19           
*/            
  BEGIN            
  BEGIN TRY            
  SET NOCOUNT ON;            
          
  DECLARE @TotalNewCust int, @Frequency int, @TotalQuotes int, @TotalReturns int            
          
  DECLARE @TBL_CultureCurrency TaBLE (Symbol Varchar(100),CurrencyCode varchar(100),IsDefault bit)            
  INSERT INTO @TBL_CultureCurrency (Symbol,CurrencyCode,IsDefault)            
  SELECT Symbol,CultureCode, IsDefault from  ZnodeCulture ZC  -- Changed ZnodeCurrency to ZnodeCulture here.          
            
  DECLARE @PortalCurrencySymbol nvarchar(20)        
  DECLARE @DefaultCurrencySymbol nvarchar(20)          
    
	----Verifying that the @SalesRepUserId is having 'Sales Rep' role
	IF NOT EXISTS
	(
		SELECT * FROM ZnodeUser ZU
		INNER JOIN AspNetZnodeUser ANZU ON ZU.UserName = ANZU.UserName
		INNER JOIN AspNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName
		INNER JOIN AspNetUserRoles ANUR ON ANU.Id = ANUR.UserId
		Where Exists(select * from AspNetRoles ANR Where Name = 'Sales Rep' AND ANUR.RoleId = ANR.Id) 
		AND ZU.UserId = @SalesRepUserId
	)   
	Begin
		SET @SalesRepUserId = 0
	End  
  
  SET @PortalCurrencySymbol = [dbo].[Fn_GetPortalCurrencySymbol](CAST(@PortalID AS INTEGER) )        
  SET @DefaultCurrencySymbol = [dbo].[Fn_GetDefaultCurrencySymbol]()         
        
  IF @PortalCurrencySymbol IS NULL         
 UPDATE @TBL_CultureCurrency SET Symbol  =@DefaultCurrencySymbol WHERE  Symbol IS NULL        
  ELSE         
    UPDATE @TBL_CultureCurrency SET Symbol  =@PortalCurrencySymbol WHERE  Symbol IS NULL        
        
                
    -- this will CHECK for customer             
  
  CREATE TABLE #User(UserId int, FirstName varchar(100), MiddleName varchar(100), LastName varchar(100), Email varchar(50), PhoneNumber varchar(50),AccountId int )
  
  Create table #CalculateTotalValues(TotalOrders int, TotalSales int, Symbol varchar(100))

  IF @AccountId = -1
  Begin
		INSERT INTO #User(UserId, FirstName, MiddleName, LastName, Email , PhoneNumber,AccountId)
		SELECT ZU.UserId, ZU.FirstName, ZU.MiddleName, ZU.LastName, ZU.Email , ZU.PhoneNumber ,ZU.AccountId                   
		FROM ZnodeUser ZU           
		WHERE EXISTS(SELECT * FROM ZnodeOmsQuote ZOQ where ZU.UserId = ZOQ.UserID )      
		and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = @SalesRepUserId and ZU.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)  
		AND ISNULL(ZU.AccountId,0)=0

		SELECT @TotalNewCust = COUNT(*)         
		FROM View_CustomerUserDetail CUD  WHERE                       
		(CUD.PortalId=@PortalId OR ISNULL(@PortalId,0)=0) AND  (ISNULL(CUD.AccountId,0)=0)    
      
		INSERT INTO #CalculateTotalValues(TotalOrders, TotalSales, Symbol)        
		SELECT   count(*)  TotalOrders , sum(ZOOD.Total) TotalSales,      
		COALESCE (ZC.Symbol,[dbo].[Fn_GetPortalCurrencySymbol](CAST(@PortalId AS INTEGER)),[dbo].[Fn_GetDefaultCurrencySymbol]()) Symbol                
		FROM ZNodeOmsOrder ZOO            
		INNER JOIN ZnodeOmsOrderDetails ZOOD ON(ZOOD.OmsOrderId = ZOO.OmsOrderId AND IsActive = 1)            
		INNER JOIN ZNodePortal P ON (P.PortalID = ZOOD.PortalId )        
		LEFT JOIN ZnodeUser ZU ON (ZU.UserId = ZOOD.UserId)    
		LEFT JOIN @TBL_CultureCurrency ZC ON (ZC.CurrencyCode = ZOOD.CurrencyCode )            
		WHERE ZOOD.IsActive =1 AND (P.PortalId = @PortalId OR ISNULL(@PortalId,0)=0)     
		and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = @SalesRepUserId and ZU.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)          
		and not Exists(Select * from ZnodeAccount ZA Where isnull(ZU.AccountId,0) = ZA.AccountId)
		Group by ZC.Symbol 

		Select @TotalQuotes = COUNT(*)                    
		from ZnodeOmsQuote ZOQ          
		Inner Join ZnodeOmsQuoteType ZOQT ON ZOQ.OmsQuoteTypeId = ZOQT.OmsQuoteTypeId          
		INNER JOIN #User U ON ZOQ.UserId = U.UserId           
		INNER JOIN ZnodePortal ZP ON ZOQ.PortalID = ZP.PortalID          
		INNER JOIN ZnodeOMSOrderState ZOOS ON ZOOS.OmsOrderStateId = ZOQ.OmsOrderStateId          
		LEFT JOIN @TBL_CultureCurrency ZC ON (ZC.CurrencyCode = ZOQ.CultureCode )           
		where  (ZOQ.PortalID = @PortalId OR @PortalId = 0 OR @PortalId is null)     
		and not Exists(Select * from ZnodeAccount ZA Where isnull(U.AccountId,0) = ZA.AccountId)
		and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = @SalesRepUserId and U.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)      
      
		-- This will get returns count       
		select @TotalReturns = COUNT(*)               
		from ZnodeRmaReturnDetails ZRRD          
		inner join ZnodeUser ZU ON ZRRD.UserId = ZU.UserId          
		inner join ZnodePortal ZP ON ZRRD.PortalId = ZP.PortalId           
		inner join ZnodeRmaReturnState ZRRS on ZRRD.RmaReturnStateId = ZRRS.RmaReturnStateId          
		LEFT JOIN @TBL_CultureCurrency ZC ON (ZC.CurrencyCode = ZRRD.CultureCode )         
		where isnull(ZRRD.RmaReturnStateId,0) not in (select isnull(RmaReturnStateId,0) from ZnodeRmaReturnState where ReturnStateName = 'Not Submitted')          
		AND (ZRRD.PortalId = @PortalId OR @PortalId  =0 or @PortalId is null)    
		and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = @SalesRepUserId and ZU.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)  
		and not Exists(Select * from ZnodeAccount ZA Where isnull(ZU.AccountId,0) = ZA.AccountId)
 End
 Else
 Begin
   -- This will get quotes count 
	INSERT INTO #User(UserId, FirstName, MiddleName, LastName, Email , PhoneNumber)
	SELECT ZU.UserId, ZU.FirstName, ZU.MiddleName, ZU.LastName, ZU.Email , ZU.PhoneNumber                 
	FROM ZnodeUser ZU           
	WHERE EXISTS(SELECT * FROM ZnodeOmsQuote ZOQ where ZU.UserId = ZOQ.UserID )    AND (ZU.AccountId = @AccountId OR ISNULL(@AccountId,0)=0)     
	and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = @SalesRepUserId and ZU.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)  
      
	SELECT @TotalNewCust = COUNT(*)         
	  FROM View_CustomerUserDetail CUD  WHERE                       
	  (CUD.PortalId=@PortalId OR ISNULL(@PortalId,0)=0) AND  (CUD.AccountId = @AccountId OR ISNULL(@AccountId,0)=0)    
      
	INSERT 	INTO #CalculateTotalValues (TotalOrders, TotalSales, Symbol)
	 SELECT   count(*)  TotalOrders , sum(ZOOD.Total) TotalSales,      
	COALESCE (ZC.Symbol,[dbo].[Fn_GetPortalCurrencySymbol](CAST(@PortalId AS INTEGER)),[dbo].[Fn_GetDefaultCurrencySymbol]()) Symbol                      
	FROM ZNodeOmsOrder ZOO            
	INNER JOIN ZnodeOmsOrderDetails ZOOD ON(ZOOD.OmsOrderId = ZOO.OmsOrderId AND IsActive = 1)            
	INNER JOIN ZNodePortal P ON (P.PortalID = ZOOD.PortalId )        
	LEFT JOIN #User ZU ON (ZU.UserId = ZOOD.UserId)    
	LEFT JOIN @TBL_CultureCurrency ZC ON (ZC.CurrencyCode = ZOOD.CurrencyCode )            
	WHERE ZOOD.IsActive =1 AND (P.PortalId = @PortalId OR ISNULL(@PortalId,0)=0) AND (ZU.AccountId = @AccountId OR ISNULL(@AccountId,0)=0)    
	and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = @SalesRepUserId and ZU.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)          
	Group by ZC.Symbol 

	 Select @TotalQuotes = COUNT(*)                    
	from ZnodeOmsQuote ZOQ          
	Inner Join ZnodeOmsQuoteType ZOQT ON ZOQ.OmsQuoteTypeId = ZOQT.OmsQuoteTypeId          
	INNER JOIN #User U ON ZOQ.UserId = U.UserId           
	INNER JOIN ZnodePortal ZP ON ZOQ.PortalID = ZP.PortalID          
	INNER JOIN ZnodeOMSOrderState ZOOS ON ZOOS.OmsOrderStateId = ZOQ.OmsOrderStateId          
	LEFT JOIN @TBL_CultureCurrency ZC ON (ZC.CurrencyCode = ZOQ.CultureCode )           
	where  (ZOQ.PortalID = @PortalId OR @PortalId = 0 OR @PortalId is null)          
	and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = @SalesRepUserId and U.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)      
      
	-- This will get returns count       
	select @TotalReturns = COUNT(*)               
	from ZnodeRmaReturnDetails ZRRD          
	inner join ZnodeUser ZU ON ZRRD.UserId = ZU.UserId          
	inner join ZnodePortal ZP ON ZRRD.PortalId = ZP.PortalId           
	inner join ZnodeRmaReturnState ZRRS on ZRRD.RmaReturnStateId = ZRRS.RmaReturnStateId          
	LEFT JOIN @TBL_CultureCurrency ZC ON (ZC.CurrencyCode = ZRRD.CultureCode )         
	where isnull(ZRRD.RmaReturnStateId,0) not in (select isnull(RmaReturnStateId,0) from ZnodeRmaReturnState where ReturnStateName = 'Not Submitted')          
	AND (ZRRD.PortalId = @PortalId OR @PortalId  =0 or @PortalId is null)  AND (ZU.AccountId = @AccountId OR ISNULL(@AccountId,0)=0)     
	and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = @SalesRepUserId and ZU.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)  
 
 End

  Update ZOQ set OmsOrderStateId = (select top 1 OmsOrderStateId from ZnodeOMSOrderState where OrderStateName = 'EXPIRED')          
  from ZnodeOmsQuote ZOQ          
  Inner Join ZnodeOmsQuoteType ZOQT ON ZOQ.OmsQuoteTypeId = ZOQT.OmsQuoteTypeId          
  INNER JOIN #User U ON ZOQ.UserId = U.UserId           
  INNER JOIN ZnodePortal ZP ON ZOQ.PortalID = ZP.PortalID          
  INNER JOIN ZnodeOMSOrderState ZOOS ON ZOOS.OmsOrderStateId = ZOQ.OmsOrderStateId          
  where  (ZOQ.PortalID = @PortalId OR ISNULL(@PortalId,0)=0)           
  and cast(ZOQ.QuoteExpirationDate as date) < cast(GETDATE() as date)          
  and ZOQ.OmsOrderStateId <> (select top 1 OmsOrderStateId from ZnodeOMSOrderState where OrderStateName = 'EXPIRED')          
          
            
  SELECT  Sum(TotalOrders) AS TotalOrders,Sum(TotalSales) AS TotalSales,Symbol,@TotalNewCust AS TotalNewCust, @TotalQuotes as TotalQuotes, @TotalReturns as TotalReturns      
  INTO #TotalValues        
  FROM #CalculateTotalValues          
  GROUP BY Symbol            
       
  IF not exists(select * from #TotalValues)
  Begin
	SELECT 0 as TotalOrders, cast('0' as varchar(10)) as TotalSales            
	  , 0 as TotalNewCust ,0 AS TotalAvgOrders,0 as TotalQuotes,0 as TotalReturns ,
	  [dbo].[Fn_GetDefaultCurrencySymbol]() Symbol           
	  
  End
  Else
  Begin
	  SELECT TotalOrders, [dbo].[Fn_GetDefaultPriceRoundOff](TotalSales) TotalSales            
	  , TotalNewCust ,Isnull(TotalOrders / @Frequency,0) AS TotalAvgOrders,TotalQuotes,TotalReturns ,Symbol         
	  FROM #TotalValues 
  End

        
  END TRY            
  BEGIN CATCH            
  DECLARE @Status BIT ;            
 SET @Status = 0;            
 DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),            
 @ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeReport_DashboardSales @PortalId='+CAST(@PortalId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));            
                              
 SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                                
                
    EXEC Znode_InsertProcedureErrorLog            
    @ProcedureName = 'ZnodeReport_DashboardSales',            
    @ErrorInProcedure = @Error_procedure,            
    @ErrorMessage = @ErrorMessage,            
    @ErrorLine = @ErrorLine,            
    @ErrorCall = @ErrorCall;            
  END CATCH            
  END;

